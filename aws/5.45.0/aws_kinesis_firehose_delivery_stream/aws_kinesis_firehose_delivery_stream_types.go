// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kinesis_firehose_delivery_stream

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ElasticsearchConfiguration struct {
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// ClusterEndpoint: string, optional
	ClusterEndpoint terra.StringValue `hcl:"cluster_endpoint,attr"`
	// DomainArn: string, optional
	DomainArn terra.StringValue `hcl:"domain_arn,attr"`
	// IndexName: string, required
	IndexName terra.StringValue `hcl:"index_name,attr" validate:"required"`
	// IndexRotationPeriod: string, optional
	IndexRotationPeriod terra.StringValue `hcl:"index_rotation_period,attr"`
	// RetryDuration: number, optional
	RetryDuration terra.NumberValue `hcl:"retry_duration,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// S3BackupMode: string, optional
	S3BackupMode terra.StringValue `hcl:"s3_backup_mode,attr"`
	// TypeName: string, optional
	TypeName terra.StringValue `hcl:"type_name,attr"`
	// ElasticsearchConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *ElasticsearchConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// ElasticsearchConfigurationProcessingConfiguration: optional
	ProcessingConfiguration *ElasticsearchConfigurationProcessingConfiguration `hcl:"processing_configuration,block"`
	// ElasticsearchConfigurationS3Configuration: required
	S3Configuration *ElasticsearchConfigurationS3Configuration `hcl:"s3_configuration,block" validate:"required"`
	// ElasticsearchConfigurationVpcConfig: optional
	VpcConfig *ElasticsearchConfigurationVpcConfig `hcl:"vpc_config,block"`
}

type ElasticsearchConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type ElasticsearchConfigurationProcessingConfiguration struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ElasticsearchConfigurationProcessingConfigurationProcessors: min=0
	Processors []ElasticsearchConfigurationProcessingConfigurationProcessors `hcl:"processors,block" validate:"min=0"`
}

type ElasticsearchConfigurationProcessingConfigurationProcessors struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ElasticsearchConfigurationProcessingConfigurationProcessorsParameters: min=0
	Parameters []ElasticsearchConfigurationProcessingConfigurationProcessorsParameters `hcl:"parameters,block" validate:"min=0"`
}

type ElasticsearchConfigurationProcessingConfigurationProcessorsParameters struct {
	// ParameterName: string, required
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue: string, required
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type ElasticsearchConfigurationS3Configuration struct {
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat: string, optional
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix: string, optional
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type ElasticsearchConfigurationVpcConfig struct {
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type ExtendedS3Configuration struct {
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat: string, optional
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// CustomTimeZone: string, optional
	CustomTimeZone terra.StringValue `hcl:"custom_time_zone,attr"`
	// ErrorOutputPrefix: string, optional
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// FileExtension: string, optional
	FileExtension terra.StringValue `hcl:"file_extension,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// S3BackupMode: string, optional
	S3BackupMode terra.StringValue `hcl:"s3_backup_mode,attr"`
	// ExtendedS3ConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *ExtendedS3ConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// ExtendedS3ConfigurationDataFormatConversionConfiguration: optional
	DataFormatConversionConfiguration *ExtendedS3ConfigurationDataFormatConversionConfiguration `hcl:"data_format_conversion_configuration,block"`
	// ExtendedS3ConfigurationDynamicPartitioningConfiguration: optional
	DynamicPartitioningConfiguration *ExtendedS3ConfigurationDynamicPartitioningConfiguration `hcl:"dynamic_partitioning_configuration,block"`
	// ExtendedS3ConfigurationProcessingConfiguration: optional
	ProcessingConfiguration *ExtendedS3ConfigurationProcessingConfiguration `hcl:"processing_configuration,block"`
	// ExtendedS3ConfigurationS3BackupConfiguration: optional
	S3BackupConfiguration *ExtendedS3ConfigurationS3BackupConfiguration `hcl:"s3_backup_configuration,block"`
}

type ExtendedS3ConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type ExtendedS3ConfigurationDataFormatConversionConfiguration struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration: required
	InputFormatConfiguration *ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration `hcl:"input_format_configuration,block" validate:"required"`
	// ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration: required
	OutputFormatConfiguration *ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration `hcl:"output_format_configuration,block" validate:"required"`
	// ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration: required
	SchemaConfiguration *ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration `hcl:"schema_configuration,block" validate:"required"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration struct {
	// ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer: required
	Deserializer *ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer `hcl:"deserializer,block" validate:"required"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer struct {
	// ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980: optional
	HiveJsonSerDe *ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980 `hcl:"hive_json_ser_de,block"`
	// ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2: optional
	OpenXJsonSerDe *ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2 `hcl:"open_x_json_ser_de,block"`
}

type ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980 struct {
	// TimestampFormats: list of string, optional
	TimestampFormats terra.ListValue[terra.StringValue] `hcl:"timestamp_formats,attr"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2 struct {
	// CaseInsensitive: bool, optional
	CaseInsensitive terra.BoolValue `hcl:"case_insensitive,attr"`
	// ColumnToJsonKeyMappings: map of string, optional
	ColumnToJsonKeyMappings terra.MapValue[terra.StringValue] `hcl:"column_to_json_key_mappings,attr"`
	// ConvertDotsInJsonKeysToUnderscores: bool, optional
	ConvertDotsInJsonKeysToUnderscores terra.BoolValue `hcl:"convert_dots_in_json_keys_to_underscores,attr"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration struct {
	// ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer: required
	Serializer *ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer `hcl:"serializer,block" validate:"required"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer struct {
	// ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8: optional
	OrcSerDe *ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8 `hcl:"orc_ser_de,block"`
	// ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410E: optional
	ParquetSerDe *ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410E `hcl:"parquet_ser_de,block"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8 struct {
	// BlockSizeBytes: number, optional
	BlockSizeBytes terra.NumberValue `hcl:"block_size_bytes,attr"`
	// BloomFilterColumns: list of string, optional
	BloomFilterColumns terra.ListValue[terra.StringValue] `hcl:"bloom_filter_columns,attr"`
	// BloomFilterFalsePositiveProbability: number, optional
	BloomFilterFalsePositiveProbability terra.NumberValue `hcl:"bloom_filter_false_positive_probability,attr"`
	// Compression: string, optional
	Compression terra.StringValue `hcl:"compression,attr"`
	// DictionaryKeyThreshold: number, optional
	DictionaryKeyThreshold terra.NumberValue `hcl:"dictionary_key_threshold,attr"`
	// EnablePadding: bool, optional
	EnablePadding terra.BoolValue `hcl:"enable_padding,attr"`
	// FormatVersion: string, optional
	FormatVersion terra.StringValue `hcl:"format_version,attr"`
	// PaddingTolerance: number, optional
	PaddingTolerance terra.NumberValue `hcl:"padding_tolerance,attr"`
	// RowIndexStride: number, optional
	RowIndexStride terra.NumberValue `hcl:"row_index_stride,attr"`
	// StripeSizeBytes: number, optional
	StripeSizeBytes terra.NumberValue `hcl:"stripe_size_bytes,attr"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410E struct {
	// BlockSizeBytes: number, optional
	BlockSizeBytes terra.NumberValue `hcl:"block_size_bytes,attr"`
	// Compression: string, optional
	Compression terra.StringValue `hcl:"compression,attr"`
	// EnableDictionaryCompression: bool, optional
	EnableDictionaryCompression terra.BoolValue `hcl:"enable_dictionary_compression,attr"`
	// MaxPaddingBytes: number, optional
	MaxPaddingBytes terra.NumberValue `hcl:"max_padding_bytes,attr"`
	// PageSizeBytes: number, optional
	PageSizeBytes terra.NumberValue `hcl:"page_size_bytes,attr"`
	// WriterVersion: string, optional
	WriterVersion terra.StringValue `hcl:"writer_version,attr"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// VersionId: string, optional
	VersionId terra.StringValue `hcl:"version_id,attr"`
}

type ExtendedS3ConfigurationDynamicPartitioningConfiguration struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// RetryDuration: number, optional
	RetryDuration terra.NumberValue `hcl:"retry_duration,attr"`
}

type ExtendedS3ConfigurationProcessingConfiguration struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ExtendedS3ConfigurationProcessingConfigurationProcessors: min=0
	Processors []ExtendedS3ConfigurationProcessingConfigurationProcessors `hcl:"processors,block" validate:"min=0"`
}

type ExtendedS3ConfigurationProcessingConfigurationProcessors struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ExtendedS3ConfigurationProcessingConfigurationProcessorsParameters: min=0
	Parameters []ExtendedS3ConfigurationProcessingConfigurationProcessorsParameters `hcl:"parameters,block" validate:"min=0"`
}

type ExtendedS3ConfigurationProcessingConfigurationProcessorsParameters struct {
	// ParameterName: string, required
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue: string, required
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type ExtendedS3ConfigurationS3BackupConfiguration struct {
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat: string, optional
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix: string, optional
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type HttpEndpointConfiguration struct {
	// AccessKey: string, optional
	AccessKey terra.StringValue `hcl:"access_key,attr"`
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// RetryDuration: number, optional
	RetryDuration terra.NumberValue `hcl:"retry_duration,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// S3BackupMode: string, optional
	S3BackupMode terra.StringValue `hcl:"s3_backup_mode,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// HttpEndpointConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *HttpEndpointConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// HttpEndpointConfigurationProcessingConfiguration: optional
	ProcessingConfiguration *HttpEndpointConfigurationProcessingConfiguration `hcl:"processing_configuration,block"`
	// HttpEndpointConfigurationRequestConfiguration: optional
	RequestConfiguration *HttpEndpointConfigurationRequestConfiguration `hcl:"request_configuration,block"`
	// HttpEndpointConfigurationS3Configuration: required
	S3Configuration *HttpEndpointConfigurationS3Configuration `hcl:"s3_configuration,block" validate:"required"`
}

type HttpEndpointConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type HttpEndpointConfigurationProcessingConfiguration struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// HttpEndpointConfigurationProcessingConfigurationProcessors: min=0
	Processors []HttpEndpointConfigurationProcessingConfigurationProcessors `hcl:"processors,block" validate:"min=0"`
}

type HttpEndpointConfigurationProcessingConfigurationProcessors struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// HttpEndpointConfigurationProcessingConfigurationProcessorsParameters: min=0
	Parameters []HttpEndpointConfigurationProcessingConfigurationProcessorsParameters `hcl:"parameters,block" validate:"min=0"`
}

type HttpEndpointConfigurationProcessingConfigurationProcessorsParameters struct {
	// ParameterName: string, required
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue: string, required
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type HttpEndpointConfigurationRequestConfiguration struct {
	// ContentEncoding: string, optional
	ContentEncoding terra.StringValue `hcl:"content_encoding,attr"`
	// HttpEndpointConfigurationRequestConfigurationCommonAttributes: min=0
	CommonAttributes []HttpEndpointConfigurationRequestConfigurationCommonAttributes `hcl:"common_attributes,block" validate:"min=0"`
}

type HttpEndpointConfigurationRequestConfigurationCommonAttributes struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type HttpEndpointConfigurationS3Configuration struct {
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat: string, optional
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix: string, optional
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type KinesisSourceConfiguration struct {
	// KinesisStreamArn: string, required
	KinesisStreamArn terra.StringValue `hcl:"kinesis_stream_arn,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type MskSourceConfiguration struct {
	// MskClusterArn: string, required
	MskClusterArn terra.StringValue `hcl:"msk_cluster_arn,attr" validate:"required"`
	// TopicName: string, required
	TopicName terra.StringValue `hcl:"topic_name,attr" validate:"required"`
	// MskSourceConfigurationAuthenticationConfiguration: required
	AuthenticationConfiguration *MskSourceConfigurationAuthenticationConfiguration `hcl:"authentication_configuration,block" validate:"required"`
}

type MskSourceConfigurationAuthenticationConfiguration struct {
	// Connectivity: string, required
	Connectivity terra.StringValue `hcl:"connectivity,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type OpensearchConfiguration struct {
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// ClusterEndpoint: string, optional
	ClusterEndpoint terra.StringValue `hcl:"cluster_endpoint,attr"`
	// DomainArn: string, optional
	DomainArn terra.StringValue `hcl:"domain_arn,attr"`
	// IndexName: string, required
	IndexName terra.StringValue `hcl:"index_name,attr" validate:"required"`
	// IndexRotationPeriod: string, optional
	IndexRotationPeriod terra.StringValue `hcl:"index_rotation_period,attr"`
	// RetryDuration: number, optional
	RetryDuration terra.NumberValue `hcl:"retry_duration,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// S3BackupMode: string, optional
	S3BackupMode terra.StringValue `hcl:"s3_backup_mode,attr"`
	// TypeName: string, optional
	TypeName terra.StringValue `hcl:"type_name,attr"`
	// OpensearchConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *OpensearchConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// OpensearchConfigurationDocumentIdOptions: optional
	DocumentIdOptions *OpensearchConfigurationDocumentIdOptions `hcl:"document_id_options,block"`
	// OpensearchConfigurationProcessingConfiguration: optional
	ProcessingConfiguration *OpensearchConfigurationProcessingConfiguration `hcl:"processing_configuration,block"`
	// OpensearchConfigurationS3Configuration: required
	S3Configuration *OpensearchConfigurationS3Configuration `hcl:"s3_configuration,block" validate:"required"`
	// OpensearchConfigurationVpcConfig: optional
	VpcConfig *OpensearchConfigurationVpcConfig `hcl:"vpc_config,block"`
}

type OpensearchConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type OpensearchConfigurationDocumentIdOptions struct {
	// DefaultDocumentIdFormat: string, required
	DefaultDocumentIdFormat terra.StringValue `hcl:"default_document_id_format,attr" validate:"required"`
}

type OpensearchConfigurationProcessingConfiguration struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// OpensearchConfigurationProcessingConfigurationProcessors: min=0
	Processors []OpensearchConfigurationProcessingConfigurationProcessors `hcl:"processors,block" validate:"min=0"`
}

type OpensearchConfigurationProcessingConfigurationProcessors struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// OpensearchConfigurationProcessingConfigurationProcessorsParameters: min=0
	Parameters []OpensearchConfigurationProcessingConfigurationProcessorsParameters `hcl:"parameters,block" validate:"min=0"`
}

type OpensearchConfigurationProcessingConfigurationProcessorsParameters struct {
	// ParameterName: string, required
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue: string, required
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type OpensearchConfigurationS3Configuration struct {
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat: string, optional
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix: string, optional
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type OpensearchConfigurationVpcConfig struct {
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type OpensearchserverlessConfiguration struct {
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CollectionEndpoint: string, required
	CollectionEndpoint terra.StringValue `hcl:"collection_endpoint,attr" validate:"required"`
	// IndexName: string, required
	IndexName terra.StringValue `hcl:"index_name,attr" validate:"required"`
	// RetryDuration: number, optional
	RetryDuration terra.NumberValue `hcl:"retry_duration,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// S3BackupMode: string, optional
	S3BackupMode terra.StringValue `hcl:"s3_backup_mode,attr"`
	// OpensearchserverlessConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *OpensearchserverlessConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// OpensearchserverlessConfigurationProcessingConfiguration: optional
	ProcessingConfiguration *OpensearchserverlessConfigurationProcessingConfiguration `hcl:"processing_configuration,block"`
	// OpensearchserverlessConfigurationS3Configuration: required
	S3Configuration *OpensearchserverlessConfigurationS3Configuration `hcl:"s3_configuration,block" validate:"required"`
	// OpensearchserverlessConfigurationVpcConfig: optional
	VpcConfig *OpensearchserverlessConfigurationVpcConfig `hcl:"vpc_config,block"`
}

type OpensearchserverlessConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type OpensearchserverlessConfigurationProcessingConfiguration struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// OpensearchserverlessConfigurationProcessingConfigurationProcessors: min=0
	Processors []OpensearchserverlessConfigurationProcessingConfigurationProcessors `hcl:"processors,block" validate:"min=0"`
}

type OpensearchserverlessConfigurationProcessingConfigurationProcessors struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// OpensearchserverlessConfigurationProcessingConfigurationProcessorsParameters: min=0
	Parameters []OpensearchserverlessConfigurationProcessingConfigurationProcessorsParameters `hcl:"parameters,block" validate:"min=0"`
}

type OpensearchserverlessConfigurationProcessingConfigurationProcessorsParameters struct {
	// ParameterName: string, required
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue: string, required
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type OpensearchserverlessConfigurationS3Configuration struct {
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat: string, optional
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix: string, optional
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type OpensearchserverlessConfigurationVpcConfig struct {
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type RedshiftConfiguration struct {
	// ClusterJdbcurl: string, required
	ClusterJdbcurl terra.StringValue `hcl:"cluster_jdbcurl,attr" validate:"required"`
	// CopyOptions: string, optional
	CopyOptions terra.StringValue `hcl:"copy_options,attr"`
	// DataTableColumns: string, optional
	DataTableColumns terra.StringValue `hcl:"data_table_columns,attr"`
	// DataTableName: string, required
	DataTableName terra.StringValue `hcl:"data_table_name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// RetryDuration: number, optional
	RetryDuration terra.NumberValue `hcl:"retry_duration,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// S3BackupMode: string, optional
	S3BackupMode terra.StringValue `hcl:"s3_backup_mode,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// RedshiftConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *RedshiftConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// RedshiftConfigurationProcessingConfiguration: optional
	ProcessingConfiguration *RedshiftConfigurationProcessingConfiguration `hcl:"processing_configuration,block"`
	// RedshiftConfigurationS3BackupConfiguration: optional
	S3BackupConfiguration *RedshiftConfigurationS3BackupConfiguration `hcl:"s3_backup_configuration,block"`
	// RedshiftConfigurationS3Configuration: required
	S3Configuration *RedshiftConfigurationS3Configuration `hcl:"s3_configuration,block" validate:"required"`
}

type RedshiftConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type RedshiftConfigurationProcessingConfiguration struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// RedshiftConfigurationProcessingConfigurationProcessors: min=0
	Processors []RedshiftConfigurationProcessingConfigurationProcessors `hcl:"processors,block" validate:"min=0"`
}

type RedshiftConfigurationProcessingConfigurationProcessors struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// RedshiftConfigurationProcessingConfigurationProcessorsParameters: min=0
	Parameters []RedshiftConfigurationProcessingConfigurationProcessorsParameters `hcl:"parameters,block" validate:"min=0"`
}

type RedshiftConfigurationProcessingConfigurationProcessorsParameters struct {
	// ParameterName: string, required
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue: string, required
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type RedshiftConfigurationS3BackupConfiguration struct {
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat: string, optional
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix: string, optional
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type RedshiftConfigurationS3Configuration struct {
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat: string, optional
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix: string, optional
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type ServerSideEncryption struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// KeyArn: string, optional
	KeyArn terra.StringValue `hcl:"key_arn,attr"`
	// KeyType: string, optional
	KeyType terra.StringValue `hcl:"key_type,attr"`
}

type SplunkConfiguration struct {
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// HecAcknowledgmentTimeout: number, optional
	HecAcknowledgmentTimeout terra.NumberValue `hcl:"hec_acknowledgment_timeout,attr"`
	// HecEndpoint: string, required
	HecEndpoint terra.StringValue `hcl:"hec_endpoint,attr" validate:"required"`
	// HecEndpointType: string, optional
	HecEndpointType terra.StringValue `hcl:"hec_endpoint_type,attr"`
	// HecToken: string, required
	HecToken terra.StringValue `hcl:"hec_token,attr" validate:"required"`
	// RetryDuration: number, optional
	RetryDuration terra.NumberValue `hcl:"retry_duration,attr"`
	// S3BackupMode: string, optional
	S3BackupMode terra.StringValue `hcl:"s3_backup_mode,attr"`
	// SplunkConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *SplunkConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// SplunkConfigurationProcessingConfiguration: optional
	ProcessingConfiguration *SplunkConfigurationProcessingConfiguration `hcl:"processing_configuration,block"`
	// SplunkConfigurationS3Configuration: required
	S3Configuration *SplunkConfigurationS3Configuration `hcl:"s3_configuration,block" validate:"required"`
}

type SplunkConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type SplunkConfigurationProcessingConfiguration struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// SplunkConfigurationProcessingConfigurationProcessors: min=0
	Processors []SplunkConfigurationProcessingConfigurationProcessors `hcl:"processors,block" validate:"min=0"`
}

type SplunkConfigurationProcessingConfigurationProcessors struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// SplunkConfigurationProcessingConfigurationProcessorsParameters: min=0
	Parameters []SplunkConfigurationProcessingConfigurationProcessorsParameters `hcl:"parameters,block" validate:"min=0"`
}

type SplunkConfigurationProcessingConfigurationProcessorsParameters struct {
	// ParameterName: string, required
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue: string, required
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type SplunkConfigurationS3Configuration struct {
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval: number, optional
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize: number, optional
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat: string, optional
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix: string, optional
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// SplunkConfigurationS3ConfigurationCloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *SplunkConfigurationS3ConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type SplunkConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ElasticsearchConfigurationAttributes struct {
	ref terra.Reference
}

func (ec ElasticsearchConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec ElasticsearchConfigurationAttributes) InternalWithRef(ref terra.Reference) ElasticsearchConfigurationAttributes {
	return ElasticsearchConfigurationAttributes{ref: ref}
}

func (ec ElasticsearchConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec ElasticsearchConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("buffering_interval"))
}

func (ec ElasticsearchConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("buffering_size"))
}

func (ec ElasticsearchConfigurationAttributes) ClusterEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("cluster_endpoint"))
}

func (ec ElasticsearchConfigurationAttributes) DomainArn() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("domain_arn"))
}

func (ec ElasticsearchConfigurationAttributes) IndexName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("index_name"))
}

func (ec ElasticsearchConfigurationAttributes) IndexRotationPeriod() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("index_rotation_period"))
}

func (ec ElasticsearchConfigurationAttributes) RetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("retry_duration"))
}

func (ec ElasticsearchConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("role_arn"))
}

func (ec ElasticsearchConfigurationAttributes) S3BackupMode() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("s3_backup_mode"))
}

func (ec ElasticsearchConfigurationAttributes) TypeName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type_name"))
}

func (ec ElasticsearchConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[ElasticsearchConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[ElasticsearchConfigurationCloudwatchLoggingOptionsAttributes](ec.ref.Append("cloudwatch_logging_options"))
}

func (ec ElasticsearchConfigurationAttributes) ProcessingConfiguration() terra.ListValue[ElasticsearchConfigurationProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[ElasticsearchConfigurationProcessingConfigurationAttributes](ec.ref.Append("processing_configuration"))
}

func (ec ElasticsearchConfigurationAttributes) S3Configuration() terra.ListValue[ElasticsearchConfigurationS3ConfigurationAttributes] {
	return terra.ReferenceAsList[ElasticsearchConfigurationS3ConfigurationAttributes](ec.ref.Append("s3_configuration"))
}

func (ec ElasticsearchConfigurationAttributes) VpcConfig() terra.ListValue[ElasticsearchConfigurationVpcConfigAttributes] {
	return terra.ReferenceAsList[ElasticsearchConfigurationVpcConfigAttributes](ec.ref.Append("vpc_config"))
}

type ElasticsearchConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo ElasticsearchConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo ElasticsearchConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) ElasticsearchConfigurationCloudwatchLoggingOptionsAttributes {
	return ElasticsearchConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo ElasticsearchConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo ElasticsearchConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo ElasticsearchConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo ElasticsearchConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type ElasticsearchConfigurationProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc ElasticsearchConfigurationProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ElasticsearchConfigurationProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) ElasticsearchConfigurationProcessingConfigurationAttributes {
	return ElasticsearchConfigurationProcessingConfigurationAttributes{ref: ref}
}

func (pc ElasticsearchConfigurationProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ElasticsearchConfigurationProcessingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc ElasticsearchConfigurationProcessingConfigurationAttributes) Processors() terra.ListValue[ElasticsearchConfigurationProcessingConfigurationProcessorsAttributes] {
	return terra.ReferenceAsList[ElasticsearchConfigurationProcessingConfigurationProcessorsAttributes](pc.ref.Append("processors"))
}

type ElasticsearchConfigurationProcessingConfigurationProcessorsAttributes struct {
	ref terra.Reference
}

func (p ElasticsearchConfigurationProcessingConfigurationProcessorsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ElasticsearchConfigurationProcessingConfigurationProcessorsAttributes) InternalWithRef(ref terra.Reference) ElasticsearchConfigurationProcessingConfigurationProcessorsAttributes {
	return ElasticsearchConfigurationProcessingConfigurationProcessorsAttributes{ref: ref}
}

func (p ElasticsearchConfigurationProcessingConfigurationProcessorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ElasticsearchConfigurationProcessingConfigurationProcessorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

func (p ElasticsearchConfigurationProcessingConfigurationProcessorsAttributes) Parameters() terra.SetValue[ElasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes] {
	return terra.ReferenceAsSet[ElasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes](p.ref.Append("parameters"))
}

type ElasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes struct {
	ref terra.Reference
}

func (p ElasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ElasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalWithRef(ref terra.Reference) ElasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes {
	return ElasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes{ref: ref}
}

func (p ElasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ElasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_name"))
}

func (p ElasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_value"))
}

type ElasticsearchConfigurationS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (sc ElasticsearchConfigurationS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc ElasticsearchConfigurationS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) ElasticsearchConfigurationS3ConfigurationAttributes {
	return ElasticsearchConfigurationS3ConfigurationAttributes{ref: ref}
}

func (sc ElasticsearchConfigurationS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc ElasticsearchConfigurationS3ConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_arn"))
}

func (sc ElasticsearchConfigurationS3ConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_interval"))
}

func (sc ElasticsearchConfigurationS3ConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_size"))
}

func (sc ElasticsearchConfigurationS3ConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("compression_format"))
}

func (sc ElasticsearchConfigurationS3ConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("error_output_prefix"))
}

func (sc ElasticsearchConfigurationS3ConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("kms_key_arn"))
}

func (sc ElasticsearchConfigurationS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("prefix"))
}

func (sc ElasticsearchConfigurationS3ConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("role_arn"))
}

func (sc ElasticsearchConfigurationS3ConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes](sc.ref.Append("cloudwatch_logging_options"))
}

type ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes {
	return ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type ElasticsearchConfigurationVpcConfigAttributes struct {
	ref terra.Reference
}

func (vc ElasticsearchConfigurationVpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc ElasticsearchConfigurationVpcConfigAttributes) InternalWithRef(ref terra.Reference) ElasticsearchConfigurationVpcConfigAttributes {
	return ElasticsearchConfigurationVpcConfigAttributes{ref: ref}
}

func (vc ElasticsearchConfigurationVpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc ElasticsearchConfigurationVpcConfigAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("role_arn"))
}

func (vc ElasticsearchConfigurationVpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc ElasticsearchConfigurationVpcConfigAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

func (vc ElasticsearchConfigurationVpcConfigAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_id"))
}

type ExtendedS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (esc ExtendedS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return esc.ref, nil
}

func (esc ExtendedS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationAttributes {
	return ExtendedS3ConfigurationAttributes{ref: ref}
}

func (esc ExtendedS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return esc.ref.InternalTokens()
}

func (esc ExtendedS3ConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("bucket_arn"))
}

func (esc ExtendedS3ConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(esc.ref.Append("buffering_interval"))
}

func (esc ExtendedS3ConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(esc.ref.Append("buffering_size"))
}

func (esc ExtendedS3ConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("compression_format"))
}

func (esc ExtendedS3ConfigurationAttributes) CustomTimeZone() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("custom_time_zone"))
}

func (esc ExtendedS3ConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("error_output_prefix"))
}

func (esc ExtendedS3ConfigurationAttributes) FileExtension() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("file_extension"))
}

func (esc ExtendedS3ConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("kms_key_arn"))
}

func (esc ExtendedS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("prefix"))
}

func (esc ExtendedS3ConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("role_arn"))
}

func (esc ExtendedS3ConfigurationAttributes) S3BackupMode() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("s3_backup_mode"))
}

func (esc ExtendedS3ConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[ExtendedS3ConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationCloudwatchLoggingOptionsAttributes](esc.ref.Append("cloudwatch_logging_options"))
}

func (esc ExtendedS3ConfigurationAttributes) DataFormatConversionConfiguration() terra.ListValue[ExtendedS3ConfigurationDataFormatConversionConfigurationAttributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationDataFormatConversionConfigurationAttributes](esc.ref.Append("data_format_conversion_configuration"))
}

func (esc ExtendedS3ConfigurationAttributes) DynamicPartitioningConfiguration() terra.ListValue[ExtendedS3ConfigurationDynamicPartitioningConfigurationAttributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationDynamicPartitioningConfigurationAttributes](esc.ref.Append("dynamic_partitioning_configuration"))
}

func (esc ExtendedS3ConfigurationAttributes) ProcessingConfiguration() terra.ListValue[ExtendedS3ConfigurationProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationProcessingConfigurationAttributes](esc.ref.Append("processing_configuration"))
}

func (esc ExtendedS3ConfigurationAttributes) S3BackupConfiguration() terra.ListValue[ExtendedS3ConfigurationS3BackupConfigurationAttributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationS3BackupConfigurationAttributes](esc.ref.Append("s3_backup_configuration"))
}

type ExtendedS3ConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo ExtendedS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo ExtendedS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationCloudwatchLoggingOptionsAttributes {
	return ExtendedS3ConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo ExtendedS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo ExtendedS3ConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo ExtendedS3ConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo ExtendedS3ConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationAttributes struct {
	ref terra.Reference
}

func (dfcc ExtendedS3ConfigurationDataFormatConversionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dfcc.ref, nil
}

func (dfcc ExtendedS3ConfigurationDataFormatConversionConfigurationAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationDataFormatConversionConfigurationAttributes {
	return ExtendedS3ConfigurationDataFormatConversionConfigurationAttributes{ref: ref}
}

func (dfcc ExtendedS3ConfigurationDataFormatConversionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dfcc.ref.InternalTokens()
}

func (dfcc ExtendedS3ConfigurationDataFormatConversionConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dfcc.ref.Append("enabled"))
}

func (dfcc ExtendedS3ConfigurationDataFormatConversionConfigurationAttributes) InputFormatConfiguration() terra.ListValue[ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes](dfcc.ref.Append("input_format_configuration"))
}

func (dfcc ExtendedS3ConfigurationDataFormatConversionConfigurationAttributes) OutputFormatConfiguration() terra.ListValue[ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes](dfcc.ref.Append("output_format_configuration"))
}

func (dfcc ExtendedS3ConfigurationDataFormatConversionConfigurationAttributes) SchemaConfiguration() terra.ListValue[ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes](dfcc.ref.Append("schema_configuration"))
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes struct {
	ref terra.Reference
}

func (ifc ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ifc.ref, nil
}

func (ifc ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes {
	return ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes{ref: ref}
}

func (ifc ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ifc.ref.InternalTokens()
}

func (ifc ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes) Deserializer() terra.ListValue[ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes](ifc.ref.Append("deserializer"))
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes struct {
	ref terra.Reference
}

func (d ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes {
	return ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes{ref: ref}
}

func (d ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes) HiveJsonSerDe() terra.ListValue[ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes](d.ref.Append("hive_json_ser_de"))
}

func (d ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes) OpenXJsonSerDe() terra.ListValue[ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes](d.ref.Append("open_x_json_ser_de"))
}

type ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes struct {
	ref terra.Reference
}

func (hjsd ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes) InternalRef() (terra.Reference, error) {
	return hjsd.ref, nil
}

func (hjsd ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes {
	return ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes{ref: ref}
}

func (hjsd ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return hjsd.ref.InternalTokens()
}

func (hjsd ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes) TimestampFormats() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hjsd.ref.Append("timestamp_formats"))
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes struct {
	ref terra.Reference
}

func (oxjsd ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes) InternalRef() (terra.Reference, error) {
	return oxjsd.ref, nil
}

func (oxjsd ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes {
	return ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes{ref: ref}
}

func (oxjsd ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return oxjsd.ref.InternalTokens()
}

func (oxjsd ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes) CaseInsensitive() terra.BoolValue {
	return terra.ReferenceAsBool(oxjsd.ref.Append("case_insensitive"))
}

func (oxjsd ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes) ColumnToJsonKeyMappings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](oxjsd.ref.Append("column_to_json_key_mappings"))
}

func (oxjsd ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes) ConvertDotsInJsonKeysToUnderscores() terra.BoolValue {
	return terra.ReferenceAsBool(oxjsd.ref.Append("convert_dots_in_json_keys_to_underscores"))
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes struct {
	ref terra.Reference
}

func (ofc ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ofc.ref, nil
}

func (ofc ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes {
	return ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes{ref: ref}
}

func (ofc ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ofc.ref.InternalTokens()
}

func (ofc ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes) Serializer() terra.ListValue[ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes](ofc.ref.Append("serializer"))
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes struct {
	ref terra.Reference
}

func (s ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes {
	return ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes{ref: ref}
}

func (s ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes) OrcSerDe() terra.ListValue[ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes](s.ref.Append("orc_ser_de"))
}

func (s ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes) ParquetSerDe() terra.ListValue[ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes](s.ref.Append("parquet_ser_de"))
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes struct {
	ref terra.Reference
}

func (osd ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) InternalRef() (terra.Reference, error) {
	return osd.ref, nil
}

func (osd ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes {
	return ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes{ref: ref}
}

func (osd ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return osd.ref.InternalTokens()
}

func (osd ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) BlockSizeBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(osd.ref.Append("block_size_bytes"))
}

func (osd ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) BloomFilterColumns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](osd.ref.Append("bloom_filter_columns"))
}

func (osd ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) BloomFilterFalsePositiveProbability() terra.NumberValue {
	return terra.ReferenceAsNumber(osd.ref.Append("bloom_filter_false_positive_probability"))
}

func (osd ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) Compression() terra.StringValue {
	return terra.ReferenceAsString(osd.ref.Append("compression"))
}

func (osd ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) DictionaryKeyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(osd.ref.Append("dictionary_key_threshold"))
}

func (osd ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) EnablePadding() terra.BoolValue {
	return terra.ReferenceAsBool(osd.ref.Append("enable_padding"))
}

func (osd ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) FormatVersion() terra.StringValue {
	return terra.ReferenceAsString(osd.ref.Append("format_version"))
}

func (osd ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) PaddingTolerance() terra.NumberValue {
	return terra.ReferenceAsNumber(osd.ref.Append("padding_tolerance"))
}

func (osd ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) RowIndexStride() terra.NumberValue {
	return terra.ReferenceAsNumber(osd.ref.Append("row_index_stride"))
}

func (osd ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) StripeSizeBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(osd.ref.Append("stripe_size_bytes"))
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes struct {
	ref terra.Reference
}

func (psd ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) InternalRef() (terra.Reference, error) {
	return psd.ref, nil
}

func (psd ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes {
	return ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes{ref: ref}
}

func (psd ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return psd.ref.InternalTokens()
}

func (psd ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) BlockSizeBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(psd.ref.Append("block_size_bytes"))
}

func (psd ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) Compression() terra.StringValue {
	return terra.ReferenceAsString(psd.ref.Append("compression"))
}

func (psd ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) EnableDictionaryCompression() terra.BoolValue {
	return terra.ReferenceAsBool(psd.ref.Append("enable_dictionary_compression"))
}

func (psd ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) MaxPaddingBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(psd.ref.Append("max_padding_bytes"))
}

func (psd ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) PageSizeBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(psd.ref.Append("page_size_bytes"))
}

func (psd ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) WriterVersion() terra.StringValue {
	return terra.ReferenceAsString(psd.ref.Append("writer_version"))
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes struct {
	ref terra.Reference
}

func (sc ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes {
	return ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes{ref: ref}
}

func (sc ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("catalog_id"))
}

func (sc ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("database_name"))
}

func (sc ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("region"))
}

func (sc ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("role_arn"))
}

func (sc ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("table_name"))
}

func (sc ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) VersionId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("version_id"))
}

type ExtendedS3ConfigurationDynamicPartitioningConfigurationAttributes struct {
	ref terra.Reference
}

func (dpc ExtendedS3ConfigurationDynamicPartitioningConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dpc.ref, nil
}

func (dpc ExtendedS3ConfigurationDynamicPartitioningConfigurationAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationDynamicPartitioningConfigurationAttributes {
	return ExtendedS3ConfigurationDynamicPartitioningConfigurationAttributes{ref: ref}
}

func (dpc ExtendedS3ConfigurationDynamicPartitioningConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dpc.ref.InternalTokens()
}

func (dpc ExtendedS3ConfigurationDynamicPartitioningConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dpc.ref.Append("enabled"))
}

func (dpc ExtendedS3ConfigurationDynamicPartitioningConfigurationAttributes) RetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(dpc.ref.Append("retry_duration"))
}

type ExtendedS3ConfigurationProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc ExtendedS3ConfigurationProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ExtendedS3ConfigurationProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationProcessingConfigurationAttributes {
	return ExtendedS3ConfigurationProcessingConfigurationAttributes{ref: ref}
}

func (pc ExtendedS3ConfigurationProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ExtendedS3ConfigurationProcessingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc ExtendedS3ConfigurationProcessingConfigurationAttributes) Processors() terra.ListValue[ExtendedS3ConfigurationProcessingConfigurationProcessorsAttributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationProcessingConfigurationProcessorsAttributes](pc.ref.Append("processors"))
}

type ExtendedS3ConfigurationProcessingConfigurationProcessorsAttributes struct {
	ref terra.Reference
}

func (p ExtendedS3ConfigurationProcessingConfigurationProcessorsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ExtendedS3ConfigurationProcessingConfigurationProcessorsAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationProcessingConfigurationProcessorsAttributes {
	return ExtendedS3ConfigurationProcessingConfigurationProcessorsAttributes{ref: ref}
}

func (p ExtendedS3ConfigurationProcessingConfigurationProcessorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ExtendedS3ConfigurationProcessingConfigurationProcessorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

func (p ExtendedS3ConfigurationProcessingConfigurationProcessorsAttributes) Parameters() terra.SetValue[ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes] {
	return terra.ReferenceAsSet[ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes](p.ref.Append("parameters"))
}

type ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes struct {
	ref terra.Reference
}

func (p ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes {
	return ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes{ref: ref}
}

func (p ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_name"))
}

func (p ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_value"))
}

type ExtendedS3ConfigurationS3BackupConfigurationAttributes struct {
	ref terra.Reference
}

func (sbc ExtendedS3ConfigurationS3BackupConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sbc.ref, nil
}

func (sbc ExtendedS3ConfigurationS3BackupConfigurationAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationS3BackupConfigurationAttributes {
	return ExtendedS3ConfigurationS3BackupConfigurationAttributes{ref: ref}
}

func (sbc ExtendedS3ConfigurationS3BackupConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sbc.ref.InternalTokens()
}

func (sbc ExtendedS3ConfigurationS3BackupConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("bucket_arn"))
}

func (sbc ExtendedS3ConfigurationS3BackupConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sbc.ref.Append("buffering_interval"))
}

func (sbc ExtendedS3ConfigurationS3BackupConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sbc.ref.Append("buffering_size"))
}

func (sbc ExtendedS3ConfigurationS3BackupConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("compression_format"))
}

func (sbc ExtendedS3ConfigurationS3BackupConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("error_output_prefix"))
}

func (sbc ExtendedS3ConfigurationS3BackupConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("kms_key_arn"))
}

func (sbc ExtendedS3ConfigurationS3BackupConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("prefix"))
}

func (sbc ExtendedS3ConfigurationS3BackupConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("role_arn"))
}

func (sbc ExtendedS3ConfigurationS3BackupConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes](sbc.ref.Append("cloudwatch_logging_options"))
}

type ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes {
	return ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type HttpEndpointConfigurationAttributes struct {
	ref terra.Reference
}

func (hec HttpEndpointConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return hec.ref, nil
}

func (hec HttpEndpointConfigurationAttributes) InternalWithRef(ref terra.Reference) HttpEndpointConfigurationAttributes {
	return HttpEndpointConfigurationAttributes{ref: ref}
}

func (hec HttpEndpointConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hec.ref.InternalTokens()
}

func (hec HttpEndpointConfigurationAttributes) AccessKey() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("access_key"))
}

func (hec HttpEndpointConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(hec.ref.Append("buffering_interval"))
}

func (hec HttpEndpointConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(hec.ref.Append("buffering_size"))
}

func (hec HttpEndpointConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("name"))
}

func (hec HttpEndpointConfigurationAttributes) RetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(hec.ref.Append("retry_duration"))
}

func (hec HttpEndpointConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("role_arn"))
}

func (hec HttpEndpointConfigurationAttributes) S3BackupMode() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("s3_backup_mode"))
}

func (hec HttpEndpointConfigurationAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("url"))
}

func (hec HttpEndpointConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[HttpEndpointConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[HttpEndpointConfigurationCloudwatchLoggingOptionsAttributes](hec.ref.Append("cloudwatch_logging_options"))
}

func (hec HttpEndpointConfigurationAttributes) ProcessingConfiguration() terra.ListValue[HttpEndpointConfigurationProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[HttpEndpointConfigurationProcessingConfigurationAttributes](hec.ref.Append("processing_configuration"))
}

func (hec HttpEndpointConfigurationAttributes) RequestConfiguration() terra.ListValue[HttpEndpointConfigurationRequestConfigurationAttributes] {
	return terra.ReferenceAsList[HttpEndpointConfigurationRequestConfigurationAttributes](hec.ref.Append("request_configuration"))
}

func (hec HttpEndpointConfigurationAttributes) S3Configuration() terra.ListValue[HttpEndpointConfigurationS3ConfigurationAttributes] {
	return terra.ReferenceAsList[HttpEndpointConfigurationS3ConfigurationAttributes](hec.ref.Append("s3_configuration"))
}

type HttpEndpointConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo HttpEndpointConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo HttpEndpointConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) HttpEndpointConfigurationCloudwatchLoggingOptionsAttributes {
	return HttpEndpointConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo HttpEndpointConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo HttpEndpointConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo HttpEndpointConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo HttpEndpointConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type HttpEndpointConfigurationProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc HttpEndpointConfigurationProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc HttpEndpointConfigurationProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) HttpEndpointConfigurationProcessingConfigurationAttributes {
	return HttpEndpointConfigurationProcessingConfigurationAttributes{ref: ref}
}

func (pc HttpEndpointConfigurationProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc HttpEndpointConfigurationProcessingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc HttpEndpointConfigurationProcessingConfigurationAttributes) Processors() terra.ListValue[HttpEndpointConfigurationProcessingConfigurationProcessorsAttributes] {
	return terra.ReferenceAsList[HttpEndpointConfigurationProcessingConfigurationProcessorsAttributes](pc.ref.Append("processors"))
}

type HttpEndpointConfigurationProcessingConfigurationProcessorsAttributes struct {
	ref terra.Reference
}

func (p HttpEndpointConfigurationProcessingConfigurationProcessorsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p HttpEndpointConfigurationProcessingConfigurationProcessorsAttributes) InternalWithRef(ref terra.Reference) HttpEndpointConfigurationProcessingConfigurationProcessorsAttributes {
	return HttpEndpointConfigurationProcessingConfigurationProcessorsAttributes{ref: ref}
}

func (p HttpEndpointConfigurationProcessingConfigurationProcessorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p HttpEndpointConfigurationProcessingConfigurationProcessorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

func (p HttpEndpointConfigurationProcessingConfigurationProcessorsAttributes) Parameters() terra.SetValue[HttpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes] {
	return terra.ReferenceAsSet[HttpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes](p.ref.Append("parameters"))
}

type HttpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes struct {
	ref terra.Reference
}

func (p HttpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p HttpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalWithRef(ref terra.Reference) HttpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes {
	return HttpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes{ref: ref}
}

func (p HttpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p HttpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_name"))
}

func (p HttpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_value"))
}

type HttpEndpointConfigurationRequestConfigurationAttributes struct {
	ref terra.Reference
}

func (rc HttpEndpointConfigurationRequestConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc HttpEndpointConfigurationRequestConfigurationAttributes) InternalWithRef(ref terra.Reference) HttpEndpointConfigurationRequestConfigurationAttributes {
	return HttpEndpointConfigurationRequestConfigurationAttributes{ref: ref}
}

func (rc HttpEndpointConfigurationRequestConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc HttpEndpointConfigurationRequestConfigurationAttributes) ContentEncoding() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("content_encoding"))
}

func (rc HttpEndpointConfigurationRequestConfigurationAttributes) CommonAttributes() terra.ListValue[HttpEndpointConfigurationRequestConfigurationCommonAttributesAttributes] {
	return terra.ReferenceAsList[HttpEndpointConfigurationRequestConfigurationCommonAttributesAttributes](rc.ref.Append("common_attributes"))
}

type HttpEndpointConfigurationRequestConfigurationCommonAttributesAttributes struct {
	ref terra.Reference
}

func (ca HttpEndpointConfigurationRequestConfigurationCommonAttributesAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca HttpEndpointConfigurationRequestConfigurationCommonAttributesAttributes) InternalWithRef(ref terra.Reference) HttpEndpointConfigurationRequestConfigurationCommonAttributesAttributes {
	return HttpEndpointConfigurationRequestConfigurationCommonAttributesAttributes{ref: ref}
}

func (ca HttpEndpointConfigurationRequestConfigurationCommonAttributesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca HttpEndpointConfigurationRequestConfigurationCommonAttributesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("name"))
}

func (ca HttpEndpointConfigurationRequestConfigurationCommonAttributesAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("value"))
}

type HttpEndpointConfigurationS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (sc HttpEndpointConfigurationS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc HttpEndpointConfigurationS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) HttpEndpointConfigurationS3ConfigurationAttributes {
	return HttpEndpointConfigurationS3ConfigurationAttributes{ref: ref}
}

func (sc HttpEndpointConfigurationS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc HttpEndpointConfigurationS3ConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_arn"))
}

func (sc HttpEndpointConfigurationS3ConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_interval"))
}

func (sc HttpEndpointConfigurationS3ConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_size"))
}

func (sc HttpEndpointConfigurationS3ConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("compression_format"))
}

func (sc HttpEndpointConfigurationS3ConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("error_output_prefix"))
}

func (sc HttpEndpointConfigurationS3ConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("kms_key_arn"))
}

func (sc HttpEndpointConfigurationS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("prefix"))
}

func (sc HttpEndpointConfigurationS3ConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("role_arn"))
}

func (sc HttpEndpointConfigurationS3ConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes](sc.ref.Append("cloudwatch_logging_options"))
}

type HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes {
	return HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type KinesisSourceConfigurationAttributes struct {
	ref terra.Reference
}

func (ksc KinesisSourceConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ksc.ref, nil
}

func (ksc KinesisSourceConfigurationAttributes) InternalWithRef(ref terra.Reference) KinesisSourceConfigurationAttributes {
	return KinesisSourceConfigurationAttributes{ref: ref}
}

func (ksc KinesisSourceConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ksc.ref.InternalTokens()
}

func (ksc KinesisSourceConfigurationAttributes) KinesisStreamArn() terra.StringValue {
	return terra.ReferenceAsString(ksc.ref.Append("kinesis_stream_arn"))
}

func (ksc KinesisSourceConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ksc.ref.Append("role_arn"))
}

type MskSourceConfigurationAttributes struct {
	ref terra.Reference
}

func (msc MskSourceConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return msc.ref, nil
}

func (msc MskSourceConfigurationAttributes) InternalWithRef(ref terra.Reference) MskSourceConfigurationAttributes {
	return MskSourceConfigurationAttributes{ref: ref}
}

func (msc MskSourceConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return msc.ref.InternalTokens()
}

func (msc MskSourceConfigurationAttributes) MskClusterArn() terra.StringValue {
	return terra.ReferenceAsString(msc.ref.Append("msk_cluster_arn"))
}

func (msc MskSourceConfigurationAttributes) TopicName() terra.StringValue {
	return terra.ReferenceAsString(msc.ref.Append("topic_name"))
}

func (msc MskSourceConfigurationAttributes) AuthenticationConfiguration() terra.ListValue[MskSourceConfigurationAuthenticationConfigurationAttributes] {
	return terra.ReferenceAsList[MskSourceConfigurationAuthenticationConfigurationAttributes](msc.ref.Append("authentication_configuration"))
}

type MskSourceConfigurationAuthenticationConfigurationAttributes struct {
	ref terra.Reference
}

func (ac MskSourceConfigurationAuthenticationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac MskSourceConfigurationAuthenticationConfigurationAttributes) InternalWithRef(ref terra.Reference) MskSourceConfigurationAuthenticationConfigurationAttributes {
	return MskSourceConfigurationAuthenticationConfigurationAttributes{ref: ref}
}

func (ac MskSourceConfigurationAuthenticationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac MskSourceConfigurationAuthenticationConfigurationAttributes) Connectivity() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("connectivity"))
}

func (ac MskSourceConfigurationAuthenticationConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("role_arn"))
}

type OpensearchConfigurationAttributes struct {
	ref terra.Reference
}

func (oc OpensearchConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc OpensearchConfigurationAttributes) InternalWithRef(ref terra.Reference) OpensearchConfigurationAttributes {
	return OpensearchConfigurationAttributes{ref: ref}
}

func (oc OpensearchConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc OpensearchConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("buffering_interval"))
}

func (oc OpensearchConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("buffering_size"))
}

func (oc OpensearchConfigurationAttributes) ClusterEndpoint() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("cluster_endpoint"))
}

func (oc OpensearchConfigurationAttributes) DomainArn() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("domain_arn"))
}

func (oc OpensearchConfigurationAttributes) IndexName() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("index_name"))
}

func (oc OpensearchConfigurationAttributes) IndexRotationPeriod() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("index_rotation_period"))
}

func (oc OpensearchConfigurationAttributes) RetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("retry_duration"))
}

func (oc OpensearchConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("role_arn"))
}

func (oc OpensearchConfigurationAttributes) S3BackupMode() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("s3_backup_mode"))
}

func (oc OpensearchConfigurationAttributes) TypeName() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("type_name"))
}

func (oc OpensearchConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[OpensearchConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[OpensearchConfigurationCloudwatchLoggingOptionsAttributes](oc.ref.Append("cloudwatch_logging_options"))
}

func (oc OpensearchConfigurationAttributes) DocumentIdOptions() terra.ListValue[OpensearchConfigurationDocumentIdOptionsAttributes] {
	return terra.ReferenceAsList[OpensearchConfigurationDocumentIdOptionsAttributes](oc.ref.Append("document_id_options"))
}

func (oc OpensearchConfigurationAttributes) ProcessingConfiguration() terra.ListValue[OpensearchConfigurationProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[OpensearchConfigurationProcessingConfigurationAttributes](oc.ref.Append("processing_configuration"))
}

func (oc OpensearchConfigurationAttributes) S3Configuration() terra.ListValue[OpensearchConfigurationS3ConfigurationAttributes] {
	return terra.ReferenceAsList[OpensearchConfigurationS3ConfigurationAttributes](oc.ref.Append("s3_configuration"))
}

func (oc OpensearchConfigurationAttributes) VpcConfig() terra.ListValue[OpensearchConfigurationVpcConfigAttributes] {
	return terra.ReferenceAsList[OpensearchConfigurationVpcConfigAttributes](oc.ref.Append("vpc_config"))
}

type OpensearchConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo OpensearchConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo OpensearchConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) OpensearchConfigurationCloudwatchLoggingOptionsAttributes {
	return OpensearchConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo OpensearchConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo OpensearchConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo OpensearchConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo OpensearchConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type OpensearchConfigurationDocumentIdOptionsAttributes struct {
	ref terra.Reference
}

func (dio OpensearchConfigurationDocumentIdOptionsAttributes) InternalRef() (terra.Reference, error) {
	return dio.ref, nil
}

func (dio OpensearchConfigurationDocumentIdOptionsAttributes) InternalWithRef(ref terra.Reference) OpensearchConfigurationDocumentIdOptionsAttributes {
	return OpensearchConfigurationDocumentIdOptionsAttributes{ref: ref}
}

func (dio OpensearchConfigurationDocumentIdOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dio.ref.InternalTokens()
}

func (dio OpensearchConfigurationDocumentIdOptionsAttributes) DefaultDocumentIdFormat() terra.StringValue {
	return terra.ReferenceAsString(dio.ref.Append("default_document_id_format"))
}

type OpensearchConfigurationProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc OpensearchConfigurationProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc OpensearchConfigurationProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) OpensearchConfigurationProcessingConfigurationAttributes {
	return OpensearchConfigurationProcessingConfigurationAttributes{ref: ref}
}

func (pc OpensearchConfigurationProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc OpensearchConfigurationProcessingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc OpensearchConfigurationProcessingConfigurationAttributes) Processors() terra.ListValue[OpensearchConfigurationProcessingConfigurationProcessorsAttributes] {
	return terra.ReferenceAsList[OpensearchConfigurationProcessingConfigurationProcessorsAttributes](pc.ref.Append("processors"))
}

type OpensearchConfigurationProcessingConfigurationProcessorsAttributes struct {
	ref terra.Reference
}

func (p OpensearchConfigurationProcessingConfigurationProcessorsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p OpensearchConfigurationProcessingConfigurationProcessorsAttributes) InternalWithRef(ref terra.Reference) OpensearchConfigurationProcessingConfigurationProcessorsAttributes {
	return OpensearchConfigurationProcessingConfigurationProcessorsAttributes{ref: ref}
}

func (p OpensearchConfigurationProcessingConfigurationProcessorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p OpensearchConfigurationProcessingConfigurationProcessorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

func (p OpensearchConfigurationProcessingConfigurationProcessorsAttributes) Parameters() terra.SetValue[OpensearchConfigurationProcessingConfigurationProcessorsParametersAttributes] {
	return terra.ReferenceAsSet[OpensearchConfigurationProcessingConfigurationProcessorsParametersAttributes](p.ref.Append("parameters"))
}

type OpensearchConfigurationProcessingConfigurationProcessorsParametersAttributes struct {
	ref terra.Reference
}

func (p OpensearchConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p OpensearchConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalWithRef(ref terra.Reference) OpensearchConfigurationProcessingConfigurationProcessorsParametersAttributes {
	return OpensearchConfigurationProcessingConfigurationProcessorsParametersAttributes{ref: ref}
}

func (p OpensearchConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p OpensearchConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_name"))
}

func (p OpensearchConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_value"))
}

type OpensearchConfigurationS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (sc OpensearchConfigurationS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc OpensearchConfigurationS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) OpensearchConfigurationS3ConfigurationAttributes {
	return OpensearchConfigurationS3ConfigurationAttributes{ref: ref}
}

func (sc OpensearchConfigurationS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc OpensearchConfigurationS3ConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_arn"))
}

func (sc OpensearchConfigurationS3ConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_interval"))
}

func (sc OpensearchConfigurationS3ConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_size"))
}

func (sc OpensearchConfigurationS3ConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("compression_format"))
}

func (sc OpensearchConfigurationS3ConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("error_output_prefix"))
}

func (sc OpensearchConfigurationS3ConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("kms_key_arn"))
}

func (sc OpensearchConfigurationS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("prefix"))
}

func (sc OpensearchConfigurationS3ConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("role_arn"))
}

func (sc OpensearchConfigurationS3ConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes](sc.ref.Append("cloudwatch_logging_options"))
}

type OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes {
	return OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type OpensearchConfigurationVpcConfigAttributes struct {
	ref terra.Reference
}

func (vc OpensearchConfigurationVpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc OpensearchConfigurationVpcConfigAttributes) InternalWithRef(ref terra.Reference) OpensearchConfigurationVpcConfigAttributes {
	return OpensearchConfigurationVpcConfigAttributes{ref: ref}
}

func (vc OpensearchConfigurationVpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc OpensearchConfigurationVpcConfigAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("role_arn"))
}

func (vc OpensearchConfigurationVpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc OpensearchConfigurationVpcConfigAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

func (vc OpensearchConfigurationVpcConfigAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_id"))
}

type OpensearchserverlessConfigurationAttributes struct {
	ref terra.Reference
}

func (oc OpensearchserverlessConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc OpensearchserverlessConfigurationAttributes) InternalWithRef(ref terra.Reference) OpensearchserverlessConfigurationAttributes {
	return OpensearchserverlessConfigurationAttributes{ref: ref}
}

func (oc OpensearchserverlessConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc OpensearchserverlessConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("buffering_interval"))
}

func (oc OpensearchserverlessConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("buffering_size"))
}

func (oc OpensearchserverlessConfigurationAttributes) CollectionEndpoint() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("collection_endpoint"))
}

func (oc OpensearchserverlessConfigurationAttributes) IndexName() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("index_name"))
}

func (oc OpensearchserverlessConfigurationAttributes) RetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("retry_duration"))
}

func (oc OpensearchserverlessConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("role_arn"))
}

func (oc OpensearchserverlessConfigurationAttributes) S3BackupMode() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("s3_backup_mode"))
}

func (oc OpensearchserverlessConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[OpensearchserverlessConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[OpensearchserverlessConfigurationCloudwatchLoggingOptionsAttributes](oc.ref.Append("cloudwatch_logging_options"))
}

func (oc OpensearchserverlessConfigurationAttributes) ProcessingConfiguration() terra.ListValue[OpensearchserverlessConfigurationProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[OpensearchserverlessConfigurationProcessingConfigurationAttributes](oc.ref.Append("processing_configuration"))
}

func (oc OpensearchserverlessConfigurationAttributes) S3Configuration() terra.ListValue[OpensearchserverlessConfigurationS3ConfigurationAttributes] {
	return terra.ReferenceAsList[OpensearchserverlessConfigurationS3ConfigurationAttributes](oc.ref.Append("s3_configuration"))
}

func (oc OpensearchserverlessConfigurationAttributes) VpcConfig() terra.ListValue[OpensearchserverlessConfigurationVpcConfigAttributes] {
	return terra.ReferenceAsList[OpensearchserverlessConfigurationVpcConfigAttributes](oc.ref.Append("vpc_config"))
}

type OpensearchserverlessConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo OpensearchserverlessConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo OpensearchserverlessConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) OpensearchserverlessConfigurationCloudwatchLoggingOptionsAttributes {
	return OpensearchserverlessConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo OpensearchserverlessConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo OpensearchserverlessConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo OpensearchserverlessConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo OpensearchserverlessConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type OpensearchserverlessConfigurationProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc OpensearchserverlessConfigurationProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc OpensearchserverlessConfigurationProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) OpensearchserverlessConfigurationProcessingConfigurationAttributes {
	return OpensearchserverlessConfigurationProcessingConfigurationAttributes{ref: ref}
}

func (pc OpensearchserverlessConfigurationProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc OpensearchserverlessConfigurationProcessingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc OpensearchserverlessConfigurationProcessingConfigurationAttributes) Processors() terra.ListValue[OpensearchserverlessConfigurationProcessingConfigurationProcessorsAttributes] {
	return terra.ReferenceAsList[OpensearchserverlessConfigurationProcessingConfigurationProcessorsAttributes](pc.ref.Append("processors"))
}

type OpensearchserverlessConfigurationProcessingConfigurationProcessorsAttributes struct {
	ref terra.Reference
}

func (p OpensearchserverlessConfigurationProcessingConfigurationProcessorsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p OpensearchserverlessConfigurationProcessingConfigurationProcessorsAttributes) InternalWithRef(ref terra.Reference) OpensearchserverlessConfigurationProcessingConfigurationProcessorsAttributes {
	return OpensearchserverlessConfigurationProcessingConfigurationProcessorsAttributes{ref: ref}
}

func (p OpensearchserverlessConfigurationProcessingConfigurationProcessorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p OpensearchserverlessConfigurationProcessingConfigurationProcessorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

func (p OpensearchserverlessConfigurationProcessingConfigurationProcessorsAttributes) Parameters() terra.SetValue[OpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersAttributes] {
	return terra.ReferenceAsSet[OpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersAttributes](p.ref.Append("parameters"))
}

type OpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersAttributes struct {
	ref terra.Reference
}

func (p OpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p OpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalWithRef(ref terra.Reference) OpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersAttributes {
	return OpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersAttributes{ref: ref}
}

func (p OpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p OpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_name"))
}

func (p OpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_value"))
}

type OpensearchserverlessConfigurationS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (sc OpensearchserverlessConfigurationS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc OpensearchserverlessConfigurationS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) OpensearchserverlessConfigurationS3ConfigurationAttributes {
	return OpensearchserverlessConfigurationS3ConfigurationAttributes{ref: ref}
}

func (sc OpensearchserverlessConfigurationS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc OpensearchserverlessConfigurationS3ConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_arn"))
}

func (sc OpensearchserverlessConfigurationS3ConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_interval"))
}

func (sc OpensearchserverlessConfigurationS3ConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_size"))
}

func (sc OpensearchserverlessConfigurationS3ConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("compression_format"))
}

func (sc OpensearchserverlessConfigurationS3ConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("error_output_prefix"))
}

func (sc OpensearchserverlessConfigurationS3ConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("kms_key_arn"))
}

func (sc OpensearchserverlessConfigurationS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("prefix"))
}

func (sc OpensearchserverlessConfigurationS3ConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("role_arn"))
}

func (sc OpensearchserverlessConfigurationS3ConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes](sc.ref.Append("cloudwatch_logging_options"))
}

type OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes {
	return OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type OpensearchserverlessConfigurationVpcConfigAttributes struct {
	ref terra.Reference
}

func (vc OpensearchserverlessConfigurationVpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc OpensearchserverlessConfigurationVpcConfigAttributes) InternalWithRef(ref terra.Reference) OpensearchserverlessConfigurationVpcConfigAttributes {
	return OpensearchserverlessConfigurationVpcConfigAttributes{ref: ref}
}

func (vc OpensearchserverlessConfigurationVpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc OpensearchserverlessConfigurationVpcConfigAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("role_arn"))
}

func (vc OpensearchserverlessConfigurationVpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc OpensearchserverlessConfigurationVpcConfigAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

func (vc OpensearchserverlessConfigurationVpcConfigAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_id"))
}

type RedshiftConfigurationAttributes struct {
	ref terra.Reference
}

func (rc RedshiftConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc RedshiftConfigurationAttributes) InternalWithRef(ref terra.Reference) RedshiftConfigurationAttributes {
	return RedshiftConfigurationAttributes{ref: ref}
}

func (rc RedshiftConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc RedshiftConfigurationAttributes) ClusterJdbcurl() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("cluster_jdbcurl"))
}

func (rc RedshiftConfigurationAttributes) CopyOptions() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("copy_options"))
}

func (rc RedshiftConfigurationAttributes) DataTableColumns() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("data_table_columns"))
}

func (rc RedshiftConfigurationAttributes) DataTableName() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("data_table_name"))
}

func (rc RedshiftConfigurationAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("password"))
}

func (rc RedshiftConfigurationAttributes) RetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("retry_duration"))
}

func (rc RedshiftConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("role_arn"))
}

func (rc RedshiftConfigurationAttributes) S3BackupMode() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("s3_backup_mode"))
}

func (rc RedshiftConfigurationAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("username"))
}

func (rc RedshiftConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[RedshiftConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[RedshiftConfigurationCloudwatchLoggingOptionsAttributes](rc.ref.Append("cloudwatch_logging_options"))
}

func (rc RedshiftConfigurationAttributes) ProcessingConfiguration() terra.ListValue[RedshiftConfigurationProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[RedshiftConfigurationProcessingConfigurationAttributes](rc.ref.Append("processing_configuration"))
}

func (rc RedshiftConfigurationAttributes) S3BackupConfiguration() terra.ListValue[RedshiftConfigurationS3BackupConfigurationAttributes] {
	return terra.ReferenceAsList[RedshiftConfigurationS3BackupConfigurationAttributes](rc.ref.Append("s3_backup_configuration"))
}

func (rc RedshiftConfigurationAttributes) S3Configuration() terra.ListValue[RedshiftConfigurationS3ConfigurationAttributes] {
	return terra.ReferenceAsList[RedshiftConfigurationS3ConfigurationAttributes](rc.ref.Append("s3_configuration"))
}

type RedshiftConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo RedshiftConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo RedshiftConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) RedshiftConfigurationCloudwatchLoggingOptionsAttributes {
	return RedshiftConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo RedshiftConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo RedshiftConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo RedshiftConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo RedshiftConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type RedshiftConfigurationProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc RedshiftConfigurationProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc RedshiftConfigurationProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) RedshiftConfigurationProcessingConfigurationAttributes {
	return RedshiftConfigurationProcessingConfigurationAttributes{ref: ref}
}

func (pc RedshiftConfigurationProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc RedshiftConfigurationProcessingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc RedshiftConfigurationProcessingConfigurationAttributes) Processors() terra.ListValue[RedshiftConfigurationProcessingConfigurationProcessorsAttributes] {
	return terra.ReferenceAsList[RedshiftConfigurationProcessingConfigurationProcessorsAttributes](pc.ref.Append("processors"))
}

type RedshiftConfigurationProcessingConfigurationProcessorsAttributes struct {
	ref terra.Reference
}

func (p RedshiftConfigurationProcessingConfigurationProcessorsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p RedshiftConfigurationProcessingConfigurationProcessorsAttributes) InternalWithRef(ref terra.Reference) RedshiftConfigurationProcessingConfigurationProcessorsAttributes {
	return RedshiftConfigurationProcessingConfigurationProcessorsAttributes{ref: ref}
}

func (p RedshiftConfigurationProcessingConfigurationProcessorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p RedshiftConfigurationProcessingConfigurationProcessorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

func (p RedshiftConfigurationProcessingConfigurationProcessorsAttributes) Parameters() terra.SetValue[RedshiftConfigurationProcessingConfigurationProcessorsParametersAttributes] {
	return terra.ReferenceAsSet[RedshiftConfigurationProcessingConfigurationProcessorsParametersAttributes](p.ref.Append("parameters"))
}

type RedshiftConfigurationProcessingConfigurationProcessorsParametersAttributes struct {
	ref terra.Reference
}

func (p RedshiftConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p RedshiftConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalWithRef(ref terra.Reference) RedshiftConfigurationProcessingConfigurationProcessorsParametersAttributes {
	return RedshiftConfigurationProcessingConfigurationProcessorsParametersAttributes{ref: ref}
}

func (p RedshiftConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p RedshiftConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_name"))
}

func (p RedshiftConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_value"))
}

type RedshiftConfigurationS3BackupConfigurationAttributes struct {
	ref terra.Reference
}

func (sbc RedshiftConfigurationS3BackupConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sbc.ref, nil
}

func (sbc RedshiftConfigurationS3BackupConfigurationAttributes) InternalWithRef(ref terra.Reference) RedshiftConfigurationS3BackupConfigurationAttributes {
	return RedshiftConfigurationS3BackupConfigurationAttributes{ref: ref}
}

func (sbc RedshiftConfigurationS3BackupConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sbc.ref.InternalTokens()
}

func (sbc RedshiftConfigurationS3BackupConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("bucket_arn"))
}

func (sbc RedshiftConfigurationS3BackupConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sbc.ref.Append("buffering_interval"))
}

func (sbc RedshiftConfigurationS3BackupConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sbc.ref.Append("buffering_size"))
}

func (sbc RedshiftConfigurationS3BackupConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("compression_format"))
}

func (sbc RedshiftConfigurationS3BackupConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("error_output_prefix"))
}

func (sbc RedshiftConfigurationS3BackupConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("kms_key_arn"))
}

func (sbc RedshiftConfigurationS3BackupConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("prefix"))
}

func (sbc RedshiftConfigurationS3BackupConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("role_arn"))
}

func (sbc RedshiftConfigurationS3BackupConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes](sbc.ref.Append("cloudwatch_logging_options"))
}

type RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes {
	return RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type RedshiftConfigurationS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (sc RedshiftConfigurationS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc RedshiftConfigurationS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) RedshiftConfigurationS3ConfigurationAttributes {
	return RedshiftConfigurationS3ConfigurationAttributes{ref: ref}
}

func (sc RedshiftConfigurationS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc RedshiftConfigurationS3ConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_arn"))
}

func (sc RedshiftConfigurationS3ConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_interval"))
}

func (sc RedshiftConfigurationS3ConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_size"))
}

func (sc RedshiftConfigurationS3ConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("compression_format"))
}

func (sc RedshiftConfigurationS3ConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("error_output_prefix"))
}

func (sc RedshiftConfigurationS3ConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("kms_key_arn"))
}

func (sc RedshiftConfigurationS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("prefix"))
}

func (sc RedshiftConfigurationS3ConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("role_arn"))
}

func (sc RedshiftConfigurationS3ConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes](sc.ref.Append("cloudwatch_logging_options"))
}

type RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes {
	return RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type ServerSideEncryptionAttributes struct {
	ref terra.Reference
}

func (sse ServerSideEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return sse.ref, nil
}

func (sse ServerSideEncryptionAttributes) InternalWithRef(ref terra.Reference) ServerSideEncryptionAttributes {
	return ServerSideEncryptionAttributes{ref: ref}
}

func (sse ServerSideEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sse.ref.InternalTokens()
}

func (sse ServerSideEncryptionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(sse.ref.Append("enabled"))
}

func (sse ServerSideEncryptionAttributes) KeyArn() terra.StringValue {
	return terra.ReferenceAsString(sse.ref.Append("key_arn"))
}

func (sse ServerSideEncryptionAttributes) KeyType() terra.StringValue {
	return terra.ReferenceAsString(sse.ref.Append("key_type"))
}

type SplunkConfigurationAttributes struct {
	ref terra.Reference
}

func (sc SplunkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SplunkConfigurationAttributes) InternalWithRef(ref terra.Reference) SplunkConfigurationAttributes {
	return SplunkConfigurationAttributes{ref: ref}
}

func (sc SplunkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SplunkConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_interval"))
}

func (sc SplunkConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_size"))
}

func (sc SplunkConfigurationAttributes) HecAcknowledgmentTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("hec_acknowledgment_timeout"))
}

func (sc SplunkConfigurationAttributes) HecEndpoint() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("hec_endpoint"))
}

func (sc SplunkConfigurationAttributes) HecEndpointType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("hec_endpoint_type"))
}

func (sc SplunkConfigurationAttributes) HecToken() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("hec_token"))
}

func (sc SplunkConfigurationAttributes) RetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("retry_duration"))
}

func (sc SplunkConfigurationAttributes) S3BackupMode() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("s3_backup_mode"))
}

func (sc SplunkConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[SplunkConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[SplunkConfigurationCloudwatchLoggingOptionsAttributes](sc.ref.Append("cloudwatch_logging_options"))
}

func (sc SplunkConfigurationAttributes) ProcessingConfiguration() terra.ListValue[SplunkConfigurationProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[SplunkConfigurationProcessingConfigurationAttributes](sc.ref.Append("processing_configuration"))
}

func (sc SplunkConfigurationAttributes) S3Configuration() terra.ListValue[SplunkConfigurationS3ConfigurationAttributes] {
	return terra.ReferenceAsList[SplunkConfigurationS3ConfigurationAttributes](sc.ref.Append("s3_configuration"))
}

type SplunkConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo SplunkConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo SplunkConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) SplunkConfigurationCloudwatchLoggingOptionsAttributes {
	return SplunkConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo SplunkConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo SplunkConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo SplunkConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo SplunkConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type SplunkConfigurationProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc SplunkConfigurationProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc SplunkConfigurationProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) SplunkConfigurationProcessingConfigurationAttributes {
	return SplunkConfigurationProcessingConfigurationAttributes{ref: ref}
}

func (pc SplunkConfigurationProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc SplunkConfigurationProcessingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc SplunkConfigurationProcessingConfigurationAttributes) Processors() terra.ListValue[SplunkConfigurationProcessingConfigurationProcessorsAttributes] {
	return terra.ReferenceAsList[SplunkConfigurationProcessingConfigurationProcessorsAttributes](pc.ref.Append("processors"))
}

type SplunkConfigurationProcessingConfigurationProcessorsAttributes struct {
	ref terra.Reference
}

func (p SplunkConfigurationProcessingConfigurationProcessorsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p SplunkConfigurationProcessingConfigurationProcessorsAttributes) InternalWithRef(ref terra.Reference) SplunkConfigurationProcessingConfigurationProcessorsAttributes {
	return SplunkConfigurationProcessingConfigurationProcessorsAttributes{ref: ref}
}

func (p SplunkConfigurationProcessingConfigurationProcessorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p SplunkConfigurationProcessingConfigurationProcessorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

func (p SplunkConfigurationProcessingConfigurationProcessorsAttributes) Parameters() terra.SetValue[SplunkConfigurationProcessingConfigurationProcessorsParametersAttributes] {
	return terra.ReferenceAsSet[SplunkConfigurationProcessingConfigurationProcessorsParametersAttributes](p.ref.Append("parameters"))
}

type SplunkConfigurationProcessingConfigurationProcessorsParametersAttributes struct {
	ref terra.Reference
}

func (p SplunkConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p SplunkConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalWithRef(ref terra.Reference) SplunkConfigurationProcessingConfigurationProcessorsParametersAttributes {
	return SplunkConfigurationProcessingConfigurationProcessorsParametersAttributes{ref: ref}
}

func (p SplunkConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p SplunkConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_name"))
}

func (p SplunkConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_value"))
}

type SplunkConfigurationS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (sc SplunkConfigurationS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SplunkConfigurationS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) SplunkConfigurationS3ConfigurationAttributes {
	return SplunkConfigurationS3ConfigurationAttributes{ref: ref}
}

func (sc SplunkConfigurationS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SplunkConfigurationS3ConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_arn"))
}

func (sc SplunkConfigurationS3ConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_interval"))
}

func (sc SplunkConfigurationS3ConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_size"))
}

func (sc SplunkConfigurationS3ConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("compression_format"))
}

func (sc SplunkConfigurationS3ConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("error_output_prefix"))
}

func (sc SplunkConfigurationS3ConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("kms_key_arn"))
}

func (sc SplunkConfigurationS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("prefix"))
}

func (sc SplunkConfigurationS3ConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("role_arn"))
}

func (sc SplunkConfigurationS3ConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes](sc.ref.Append("cloudwatch_logging_options"))
}

type SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes {
	return SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ElasticsearchConfigurationState struct {
	BufferingInterval        float64                                                   `json:"buffering_interval"`
	BufferingSize            float64                                                   `json:"buffering_size"`
	ClusterEndpoint          string                                                    `json:"cluster_endpoint"`
	DomainArn                string                                                    `json:"domain_arn"`
	IndexName                string                                                    `json:"index_name"`
	IndexRotationPeriod      string                                                    `json:"index_rotation_period"`
	RetryDuration            float64                                                   `json:"retry_duration"`
	RoleArn                  string                                                    `json:"role_arn"`
	S3BackupMode             string                                                    `json:"s3_backup_mode"`
	TypeName                 string                                                    `json:"type_name"`
	CloudwatchLoggingOptions []ElasticsearchConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	ProcessingConfiguration  []ElasticsearchConfigurationProcessingConfigurationState  `json:"processing_configuration"`
	S3Configuration          []ElasticsearchConfigurationS3ConfigurationState          `json:"s3_configuration"`
	VpcConfig                []ElasticsearchConfigurationVpcConfigState                `json:"vpc_config"`
}

type ElasticsearchConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type ElasticsearchConfigurationProcessingConfigurationState struct {
	Enabled    bool                                                               `json:"enabled"`
	Processors []ElasticsearchConfigurationProcessingConfigurationProcessorsState `json:"processors"`
}

type ElasticsearchConfigurationProcessingConfigurationProcessorsState struct {
	Type       string                                                                       `json:"type"`
	Parameters []ElasticsearchConfigurationProcessingConfigurationProcessorsParametersState `json:"parameters"`
}

type ElasticsearchConfigurationProcessingConfigurationProcessorsParametersState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type ElasticsearchConfigurationS3ConfigurationState struct {
	BucketArn                string                                                                   `json:"bucket_arn"`
	BufferingInterval        float64                                                                  `json:"buffering_interval"`
	BufferingSize            float64                                                                  `json:"buffering_size"`
	CompressionFormat        string                                                                   `json:"compression_format"`
	ErrorOutputPrefix        string                                                                   `json:"error_output_prefix"`
	KmsKeyArn                string                                                                   `json:"kms_key_arn"`
	Prefix                   string                                                                   `json:"prefix"`
	RoleArn                  string                                                                   `json:"role_arn"`
	CloudwatchLoggingOptions []ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type ElasticsearchConfigurationVpcConfigState struct {
	RoleArn          string   `json:"role_arn"`
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
	VpcId            string   `json:"vpc_id"`
}

type ExtendedS3ConfigurationState struct {
	BucketArn                         string                                                          `json:"bucket_arn"`
	BufferingInterval                 float64                                                         `json:"buffering_interval"`
	BufferingSize                     float64                                                         `json:"buffering_size"`
	CompressionFormat                 string                                                          `json:"compression_format"`
	CustomTimeZone                    string                                                          `json:"custom_time_zone"`
	ErrorOutputPrefix                 string                                                          `json:"error_output_prefix"`
	FileExtension                     string                                                          `json:"file_extension"`
	KmsKeyArn                         string                                                          `json:"kms_key_arn"`
	Prefix                            string                                                          `json:"prefix"`
	RoleArn                           string                                                          `json:"role_arn"`
	S3BackupMode                      string                                                          `json:"s3_backup_mode"`
	CloudwatchLoggingOptions          []ExtendedS3ConfigurationCloudwatchLoggingOptionsState          `json:"cloudwatch_logging_options"`
	DataFormatConversionConfiguration []ExtendedS3ConfigurationDataFormatConversionConfigurationState `json:"data_format_conversion_configuration"`
	DynamicPartitioningConfiguration  []ExtendedS3ConfigurationDynamicPartitioningConfigurationState  `json:"dynamic_partitioning_configuration"`
	ProcessingConfiguration           []ExtendedS3ConfigurationProcessingConfigurationState           `json:"processing_configuration"`
	S3BackupConfiguration             []ExtendedS3ConfigurationS3BackupConfigurationState             `json:"s3_backup_configuration"`
}

type ExtendedS3ConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationState struct {
	Enabled                   bool                                                                                     `json:"enabled"`
	InputFormatConfiguration  []ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationState  `json:"input_format_configuration"`
	OutputFormatConfiguration []ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationState `json:"output_format_configuration"`
	SchemaConfiguration       []ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationState       `json:"schema_configuration"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationState struct {
	Deserializer []ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerState `json:"deserializer"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerState struct {
	HiveJsonSerDe  []ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980State `json:"hive_json_ser_de"`
	OpenXJsonSerDe []ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2State `json:"open_x_json_ser_de"`
}

type ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980State struct {
	TimestampFormats []string `json:"timestamp_formats"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2State struct {
	CaseInsensitive                    bool              `json:"case_insensitive"`
	ColumnToJsonKeyMappings            map[string]string `json:"column_to_json_key_mappings"`
	ConvertDotsInJsonKeysToUnderscores bool              `json:"convert_dots_in_json_keys_to_underscores"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationState struct {
	Serializer []ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerState `json:"serializer"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerState struct {
	OrcSerDe     []ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8State `json:"orc_ser_de"`
	ParquetSerDe []ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EState `json:"parquet_ser_de"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8State struct {
	BlockSizeBytes                      float64  `json:"block_size_bytes"`
	BloomFilterColumns                  []string `json:"bloom_filter_columns"`
	BloomFilterFalsePositiveProbability float64  `json:"bloom_filter_false_positive_probability"`
	Compression                         string   `json:"compression"`
	DictionaryKeyThreshold              float64  `json:"dictionary_key_threshold"`
	EnablePadding                       bool     `json:"enable_padding"`
	FormatVersion                       string   `json:"format_version"`
	PaddingTolerance                    float64  `json:"padding_tolerance"`
	RowIndexStride                      float64  `json:"row_index_stride"`
	StripeSizeBytes                     float64  `json:"stripe_size_bytes"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EState struct {
	BlockSizeBytes              float64 `json:"block_size_bytes"`
	Compression                 string  `json:"compression"`
	EnableDictionaryCompression bool    `json:"enable_dictionary_compression"`
	MaxPaddingBytes             float64 `json:"max_padding_bytes"`
	PageSizeBytes               float64 `json:"page_size_bytes"`
	WriterVersion               string  `json:"writer_version"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationState struct {
	CatalogId    string `json:"catalog_id"`
	DatabaseName string `json:"database_name"`
	Region       string `json:"region"`
	RoleArn      string `json:"role_arn"`
	TableName    string `json:"table_name"`
	VersionId    string `json:"version_id"`
}

type ExtendedS3ConfigurationDynamicPartitioningConfigurationState struct {
	Enabled       bool    `json:"enabled"`
	RetryDuration float64 `json:"retry_duration"`
}

type ExtendedS3ConfigurationProcessingConfigurationState struct {
	Enabled    bool                                                            `json:"enabled"`
	Processors []ExtendedS3ConfigurationProcessingConfigurationProcessorsState `json:"processors"`
}

type ExtendedS3ConfigurationProcessingConfigurationProcessorsState struct {
	Type       string                                                                    `json:"type"`
	Parameters []ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersState `json:"parameters"`
}

type ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type ExtendedS3ConfigurationS3BackupConfigurationState struct {
	BucketArn                string                                                                      `json:"bucket_arn"`
	BufferingInterval        float64                                                                     `json:"buffering_interval"`
	BufferingSize            float64                                                                     `json:"buffering_size"`
	CompressionFormat        string                                                                      `json:"compression_format"`
	ErrorOutputPrefix        string                                                                      `json:"error_output_prefix"`
	KmsKeyArn                string                                                                      `json:"kms_key_arn"`
	Prefix                   string                                                                      `json:"prefix"`
	RoleArn                  string                                                                      `json:"role_arn"`
	CloudwatchLoggingOptions []ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type HttpEndpointConfigurationState struct {
	AccessKey                string                                                   `json:"access_key"`
	BufferingInterval        float64                                                  `json:"buffering_interval"`
	BufferingSize            float64                                                  `json:"buffering_size"`
	Name                     string                                                   `json:"name"`
	RetryDuration            float64                                                  `json:"retry_duration"`
	RoleArn                  string                                                   `json:"role_arn"`
	S3BackupMode             string                                                   `json:"s3_backup_mode"`
	Url                      string                                                   `json:"url"`
	CloudwatchLoggingOptions []HttpEndpointConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	ProcessingConfiguration  []HttpEndpointConfigurationProcessingConfigurationState  `json:"processing_configuration"`
	RequestConfiguration     []HttpEndpointConfigurationRequestConfigurationState     `json:"request_configuration"`
	S3Configuration          []HttpEndpointConfigurationS3ConfigurationState          `json:"s3_configuration"`
}

type HttpEndpointConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type HttpEndpointConfigurationProcessingConfigurationState struct {
	Enabled    bool                                                              `json:"enabled"`
	Processors []HttpEndpointConfigurationProcessingConfigurationProcessorsState `json:"processors"`
}

type HttpEndpointConfigurationProcessingConfigurationProcessorsState struct {
	Type       string                                                                      `json:"type"`
	Parameters []HttpEndpointConfigurationProcessingConfigurationProcessorsParametersState `json:"parameters"`
}

type HttpEndpointConfigurationProcessingConfigurationProcessorsParametersState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type HttpEndpointConfigurationRequestConfigurationState struct {
	ContentEncoding  string                                                               `json:"content_encoding"`
	CommonAttributes []HttpEndpointConfigurationRequestConfigurationCommonAttributesState `json:"common_attributes"`
}

type HttpEndpointConfigurationRequestConfigurationCommonAttributesState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type HttpEndpointConfigurationS3ConfigurationState struct {
	BucketArn                string                                                                  `json:"bucket_arn"`
	BufferingInterval        float64                                                                 `json:"buffering_interval"`
	BufferingSize            float64                                                                 `json:"buffering_size"`
	CompressionFormat        string                                                                  `json:"compression_format"`
	ErrorOutputPrefix        string                                                                  `json:"error_output_prefix"`
	KmsKeyArn                string                                                                  `json:"kms_key_arn"`
	Prefix                   string                                                                  `json:"prefix"`
	RoleArn                  string                                                                  `json:"role_arn"`
	CloudwatchLoggingOptions []HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type KinesisSourceConfigurationState struct {
	KinesisStreamArn string `json:"kinesis_stream_arn"`
	RoleArn          string `json:"role_arn"`
}

type MskSourceConfigurationState struct {
	MskClusterArn               string                                                   `json:"msk_cluster_arn"`
	TopicName                   string                                                   `json:"topic_name"`
	AuthenticationConfiguration []MskSourceConfigurationAuthenticationConfigurationState `json:"authentication_configuration"`
}

type MskSourceConfigurationAuthenticationConfigurationState struct {
	Connectivity string `json:"connectivity"`
	RoleArn      string `json:"role_arn"`
}

type OpensearchConfigurationState struct {
	BufferingInterval        float64                                                `json:"buffering_interval"`
	BufferingSize            float64                                                `json:"buffering_size"`
	ClusterEndpoint          string                                                 `json:"cluster_endpoint"`
	DomainArn                string                                                 `json:"domain_arn"`
	IndexName                string                                                 `json:"index_name"`
	IndexRotationPeriod      string                                                 `json:"index_rotation_period"`
	RetryDuration            float64                                                `json:"retry_duration"`
	RoleArn                  string                                                 `json:"role_arn"`
	S3BackupMode             string                                                 `json:"s3_backup_mode"`
	TypeName                 string                                                 `json:"type_name"`
	CloudwatchLoggingOptions []OpensearchConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	DocumentIdOptions        []OpensearchConfigurationDocumentIdOptionsState        `json:"document_id_options"`
	ProcessingConfiguration  []OpensearchConfigurationProcessingConfigurationState  `json:"processing_configuration"`
	S3Configuration          []OpensearchConfigurationS3ConfigurationState          `json:"s3_configuration"`
	VpcConfig                []OpensearchConfigurationVpcConfigState                `json:"vpc_config"`
}

type OpensearchConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type OpensearchConfigurationDocumentIdOptionsState struct {
	DefaultDocumentIdFormat string `json:"default_document_id_format"`
}

type OpensearchConfigurationProcessingConfigurationState struct {
	Enabled    bool                                                            `json:"enabled"`
	Processors []OpensearchConfigurationProcessingConfigurationProcessorsState `json:"processors"`
}

type OpensearchConfigurationProcessingConfigurationProcessorsState struct {
	Type       string                                                                    `json:"type"`
	Parameters []OpensearchConfigurationProcessingConfigurationProcessorsParametersState `json:"parameters"`
}

type OpensearchConfigurationProcessingConfigurationProcessorsParametersState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type OpensearchConfigurationS3ConfigurationState struct {
	BucketArn                string                                                                `json:"bucket_arn"`
	BufferingInterval        float64                                                               `json:"buffering_interval"`
	BufferingSize            float64                                                               `json:"buffering_size"`
	CompressionFormat        string                                                                `json:"compression_format"`
	ErrorOutputPrefix        string                                                                `json:"error_output_prefix"`
	KmsKeyArn                string                                                                `json:"kms_key_arn"`
	Prefix                   string                                                                `json:"prefix"`
	RoleArn                  string                                                                `json:"role_arn"`
	CloudwatchLoggingOptions []OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type OpensearchConfigurationVpcConfigState struct {
	RoleArn          string   `json:"role_arn"`
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
	VpcId            string   `json:"vpc_id"`
}

type OpensearchserverlessConfigurationState struct {
	BufferingInterval        float64                                                          `json:"buffering_interval"`
	BufferingSize            float64                                                          `json:"buffering_size"`
	CollectionEndpoint       string                                                           `json:"collection_endpoint"`
	IndexName                string                                                           `json:"index_name"`
	RetryDuration            float64                                                          `json:"retry_duration"`
	RoleArn                  string                                                           `json:"role_arn"`
	S3BackupMode             string                                                           `json:"s3_backup_mode"`
	CloudwatchLoggingOptions []OpensearchserverlessConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	ProcessingConfiguration  []OpensearchserverlessConfigurationProcessingConfigurationState  `json:"processing_configuration"`
	S3Configuration          []OpensearchserverlessConfigurationS3ConfigurationState          `json:"s3_configuration"`
	VpcConfig                []OpensearchserverlessConfigurationVpcConfigState                `json:"vpc_config"`
}

type OpensearchserverlessConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type OpensearchserverlessConfigurationProcessingConfigurationState struct {
	Enabled    bool                                                                      `json:"enabled"`
	Processors []OpensearchserverlessConfigurationProcessingConfigurationProcessorsState `json:"processors"`
}

type OpensearchserverlessConfigurationProcessingConfigurationProcessorsState struct {
	Type       string                                                                              `json:"type"`
	Parameters []OpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersState `json:"parameters"`
}

type OpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type OpensearchserverlessConfigurationS3ConfigurationState struct {
	BucketArn                string                                                                          `json:"bucket_arn"`
	BufferingInterval        float64                                                                         `json:"buffering_interval"`
	BufferingSize            float64                                                                         `json:"buffering_size"`
	CompressionFormat        string                                                                          `json:"compression_format"`
	ErrorOutputPrefix        string                                                                          `json:"error_output_prefix"`
	KmsKeyArn                string                                                                          `json:"kms_key_arn"`
	Prefix                   string                                                                          `json:"prefix"`
	RoleArn                  string                                                                          `json:"role_arn"`
	CloudwatchLoggingOptions []OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type OpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type OpensearchserverlessConfigurationVpcConfigState struct {
	RoleArn          string   `json:"role_arn"`
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
	VpcId            string   `json:"vpc_id"`
}

type RedshiftConfigurationState struct {
	ClusterJdbcurl           string                                               `json:"cluster_jdbcurl"`
	CopyOptions              string                                               `json:"copy_options"`
	DataTableColumns         string                                               `json:"data_table_columns"`
	DataTableName            string                                               `json:"data_table_name"`
	Password                 string                                               `json:"password"`
	RetryDuration            float64                                              `json:"retry_duration"`
	RoleArn                  string                                               `json:"role_arn"`
	S3BackupMode             string                                               `json:"s3_backup_mode"`
	Username                 string                                               `json:"username"`
	CloudwatchLoggingOptions []RedshiftConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	ProcessingConfiguration  []RedshiftConfigurationProcessingConfigurationState  `json:"processing_configuration"`
	S3BackupConfiguration    []RedshiftConfigurationS3BackupConfigurationState    `json:"s3_backup_configuration"`
	S3Configuration          []RedshiftConfigurationS3ConfigurationState          `json:"s3_configuration"`
}

type RedshiftConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type RedshiftConfigurationProcessingConfigurationState struct {
	Enabled    bool                                                          `json:"enabled"`
	Processors []RedshiftConfigurationProcessingConfigurationProcessorsState `json:"processors"`
}

type RedshiftConfigurationProcessingConfigurationProcessorsState struct {
	Type       string                                                                  `json:"type"`
	Parameters []RedshiftConfigurationProcessingConfigurationProcessorsParametersState `json:"parameters"`
}

type RedshiftConfigurationProcessingConfigurationProcessorsParametersState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type RedshiftConfigurationS3BackupConfigurationState struct {
	BucketArn                string                                                                    `json:"bucket_arn"`
	BufferingInterval        float64                                                                   `json:"buffering_interval"`
	BufferingSize            float64                                                                   `json:"buffering_size"`
	CompressionFormat        string                                                                    `json:"compression_format"`
	ErrorOutputPrefix        string                                                                    `json:"error_output_prefix"`
	KmsKeyArn                string                                                                    `json:"kms_key_arn"`
	Prefix                   string                                                                    `json:"prefix"`
	RoleArn                  string                                                                    `json:"role_arn"`
	CloudwatchLoggingOptions []RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type RedshiftConfigurationS3ConfigurationState struct {
	BucketArn                string                                                              `json:"bucket_arn"`
	BufferingInterval        float64                                                             `json:"buffering_interval"`
	BufferingSize            float64                                                             `json:"buffering_size"`
	CompressionFormat        string                                                              `json:"compression_format"`
	ErrorOutputPrefix        string                                                              `json:"error_output_prefix"`
	KmsKeyArn                string                                                              `json:"kms_key_arn"`
	Prefix                   string                                                              `json:"prefix"`
	RoleArn                  string                                                              `json:"role_arn"`
	CloudwatchLoggingOptions []RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type ServerSideEncryptionState struct {
	Enabled bool   `json:"enabled"`
	KeyArn  string `json:"key_arn"`
	KeyType string `json:"key_type"`
}

type SplunkConfigurationState struct {
	BufferingInterval        float64                                            `json:"buffering_interval"`
	BufferingSize            float64                                            `json:"buffering_size"`
	HecAcknowledgmentTimeout float64                                            `json:"hec_acknowledgment_timeout"`
	HecEndpoint              string                                             `json:"hec_endpoint"`
	HecEndpointType          string                                             `json:"hec_endpoint_type"`
	HecToken                 string                                             `json:"hec_token"`
	RetryDuration            float64                                            `json:"retry_duration"`
	S3BackupMode             string                                             `json:"s3_backup_mode"`
	CloudwatchLoggingOptions []SplunkConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	ProcessingConfiguration  []SplunkConfigurationProcessingConfigurationState  `json:"processing_configuration"`
	S3Configuration          []SplunkConfigurationS3ConfigurationState          `json:"s3_configuration"`
}

type SplunkConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type SplunkConfigurationProcessingConfigurationState struct {
	Enabled    bool                                                        `json:"enabled"`
	Processors []SplunkConfigurationProcessingConfigurationProcessorsState `json:"processors"`
}

type SplunkConfigurationProcessingConfigurationProcessorsState struct {
	Type       string                                                                `json:"type"`
	Parameters []SplunkConfigurationProcessingConfigurationProcessorsParametersState `json:"parameters"`
}

type SplunkConfigurationProcessingConfigurationProcessorsParametersState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type SplunkConfigurationS3ConfigurationState struct {
	BucketArn                string                                                            `json:"bucket_arn"`
	BufferingInterval        float64                                                           `json:"buffering_interval"`
	BufferingSize            float64                                                           `json:"buffering_size"`
	CompressionFormat        string                                                            `json:"compression_format"`
	ErrorOutputPrefix        string                                                            `json:"error_output_prefix"`
	KmsKeyArn                string                                                            `json:"kms_key_arn"`
	Prefix                   string                                                            `json:"prefix"`
	RoleArn                  string                                                            `json:"role_arn"`
	CloudwatchLoggingOptions []SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
