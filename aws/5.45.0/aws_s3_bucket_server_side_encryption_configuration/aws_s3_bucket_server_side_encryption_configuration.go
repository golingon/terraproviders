// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_server_side_encryption_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3_bucket_server_side_encryption_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3BucketServerSideEncryptionConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asbssec *Resource) Type() string {
	return "aws_s3_bucket_server_side_encryption_configuration"
}

// LocalName returns the local name for [Resource].
func (asbssec *Resource) LocalName() string {
	return asbssec.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asbssec *Resource) Configuration() interface{} {
	return asbssec.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asbssec *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asbssec)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asbssec *Resource) Dependencies() terra.Dependencies {
	return asbssec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asbssec *Resource) LifecycleManagement() *terra.Lifecycle {
	return asbssec.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asbssec *Resource) Attributes() awsS3BucketServerSideEncryptionConfigurationAttributes {
	return awsS3BucketServerSideEncryptionConfigurationAttributes{ref: terra.ReferenceResource(asbssec)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asbssec *Resource) ImportState(state io.Reader) error {
	asbssec.state = &awsS3BucketServerSideEncryptionConfigurationState{}
	if err := json.NewDecoder(state).Decode(asbssec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asbssec.Type(), asbssec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asbssec *Resource) State() (*awsS3BucketServerSideEncryptionConfigurationState, bool) {
	return asbssec.state, asbssec.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asbssec *Resource) StateMust() *awsS3BucketServerSideEncryptionConfigurationState {
	if asbssec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asbssec.Type(), asbssec.LocalName()))
	}
	return asbssec.state
}

// Args contains the configurations for aws_s3_bucket_server_side_encryption_configuration.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Rule: min=1
	Rule []Rule `hcl:"rule,block" validate:"min=1"`
}

type awsS3BucketServerSideEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of aws_s3_bucket_server_side_encryption_configuration.
func (asbssec awsS3BucketServerSideEncryptionConfigurationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(asbssec.ref.Append("bucket"))
}

// ExpectedBucketOwner returns a reference to field expected_bucket_owner of aws_s3_bucket_server_side_encryption_configuration.
func (asbssec awsS3BucketServerSideEncryptionConfigurationAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceAsString(asbssec.ref.Append("expected_bucket_owner"))
}

// Id returns a reference to field id of aws_s3_bucket_server_side_encryption_configuration.
func (asbssec awsS3BucketServerSideEncryptionConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asbssec.ref.Append("id"))
}

func (asbssec awsS3BucketServerSideEncryptionConfigurationAttributes) Rule() terra.SetValue[RuleAttributes] {
	return terra.ReferenceAsSet[RuleAttributes](asbssec.ref.Append("rule"))
}

type awsS3BucketServerSideEncryptionConfigurationState struct {
	Bucket              string      `json:"bucket"`
	ExpectedBucketOwner string      `json:"expected_bucket_owner"`
	Id                  string      `json:"id"`
	Rule                []RuleState `json:"rule"`
}
