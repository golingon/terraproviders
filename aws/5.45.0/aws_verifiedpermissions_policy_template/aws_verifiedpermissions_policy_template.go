// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_verifiedpermissions_policy_template

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_verifiedpermissions_policy_template.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVerifiedpermissionsPolicyTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avpt *Resource) Type() string {
	return "aws_verifiedpermissions_policy_template"
}

// LocalName returns the local name for [Resource].
func (avpt *Resource) LocalName() string {
	return avpt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avpt *Resource) Configuration() interface{} {
	return avpt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avpt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avpt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avpt *Resource) Dependencies() terra.Dependencies {
	return avpt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avpt *Resource) LifecycleManagement() *terra.Lifecycle {
	return avpt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avpt *Resource) Attributes() awsVerifiedpermissionsPolicyTemplateAttributes {
	return awsVerifiedpermissionsPolicyTemplateAttributes{ref: terra.ReferenceResource(avpt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avpt *Resource) ImportState(state io.Reader) error {
	avpt.state = &awsVerifiedpermissionsPolicyTemplateState{}
	if err := json.NewDecoder(state).Decode(avpt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avpt.Type(), avpt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avpt *Resource) State() (*awsVerifiedpermissionsPolicyTemplateState, bool) {
	return avpt.state, avpt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avpt *Resource) StateMust() *awsVerifiedpermissionsPolicyTemplateState {
	if avpt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avpt.Type(), avpt.LocalName()))
	}
	return avpt.state
}

// Args contains the configurations for aws_verifiedpermissions_policy_template.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// PolicyStoreId: string, required
	PolicyStoreId terra.StringValue `hcl:"policy_store_id,attr" validate:"required"`
	// Statement: string, required
	Statement terra.StringValue `hcl:"statement,attr" validate:"required"`
}

type awsVerifiedpermissionsPolicyTemplateAttributes struct {
	ref terra.Reference
}

// CreatedDate returns a reference to field created_date of aws_verifiedpermissions_policy_template.
func (avpt awsVerifiedpermissionsPolicyTemplateAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceAsString(avpt.ref.Append("created_date"))
}

// Description returns a reference to field description of aws_verifiedpermissions_policy_template.
func (avpt awsVerifiedpermissionsPolicyTemplateAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(avpt.ref.Append("description"))
}

// Id returns a reference to field id of aws_verifiedpermissions_policy_template.
func (avpt awsVerifiedpermissionsPolicyTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avpt.ref.Append("id"))
}

// PolicyStoreId returns a reference to field policy_store_id of aws_verifiedpermissions_policy_template.
func (avpt awsVerifiedpermissionsPolicyTemplateAttributes) PolicyStoreId() terra.StringValue {
	return terra.ReferenceAsString(avpt.ref.Append("policy_store_id"))
}

// PolicyTemplateId returns a reference to field policy_template_id of aws_verifiedpermissions_policy_template.
func (avpt awsVerifiedpermissionsPolicyTemplateAttributes) PolicyTemplateId() terra.StringValue {
	return terra.ReferenceAsString(avpt.ref.Append("policy_template_id"))
}

// Statement returns a reference to field statement of aws_verifiedpermissions_policy_template.
func (avpt awsVerifiedpermissionsPolicyTemplateAttributes) Statement() terra.StringValue {
	return terra.ReferenceAsString(avpt.ref.Append("statement"))
}

type awsVerifiedpermissionsPolicyTemplateState struct {
	CreatedDate      string `json:"created_date"`
	Description      string `json:"description"`
	Id               string `json:"id"`
	PolicyStoreId    string `json:"policy_store_id"`
	PolicyTemplateId string `json:"policy_template_id"`
	Statement        string `json:"statement"`
}
