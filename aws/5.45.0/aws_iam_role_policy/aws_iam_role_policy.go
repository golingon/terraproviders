// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_role_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iam_role_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIamRolePolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (airp *Resource) Type() string {
	return "aws_iam_role_policy"
}

// LocalName returns the local name for [Resource].
func (airp *Resource) LocalName() string {
	return airp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (airp *Resource) Configuration() interface{} {
	return airp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (airp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(airp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (airp *Resource) Dependencies() terra.Dependencies {
	return airp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (airp *Resource) LifecycleManagement() *terra.Lifecycle {
	return airp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (airp *Resource) Attributes() awsIamRolePolicyAttributes {
	return awsIamRolePolicyAttributes{ref: terra.ReferenceResource(airp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (airp *Resource) ImportState(state io.Reader) error {
	airp.state = &awsIamRolePolicyState{}
	if err := json.NewDecoder(state).Decode(airp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", airp.Type(), airp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (airp *Resource) State() (*awsIamRolePolicyState, bool) {
	return airp.state, airp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (airp *Resource) StateMust() *awsIamRolePolicyState {
	if airp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", airp.Type(), airp.LocalName()))
	}
	return airp.state
}

// Args contains the configurations for aws_iam_role_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
}

type awsIamRolePolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_iam_role_policy.
func (airp awsIamRolePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(airp.ref.Append("id"))
}

// Name returns a reference to field name of aws_iam_role_policy.
func (airp awsIamRolePolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(airp.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_iam_role_policy.
func (airp awsIamRolePolicyAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(airp.ref.Append("name_prefix"))
}

// Policy returns a reference to field policy of aws_iam_role_policy.
func (airp awsIamRolePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(airp.ref.Append("policy"))
}

// Role returns a reference to field role of aws_iam_role_policy.
func (airp awsIamRolePolicyAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(airp.ref.Append("role"))
}

type awsIamRolePolicyState struct {
	Id         string `json:"id"`
	Name       string `json:"name"`
	NamePrefix string `json:"name_prefix"`
	Policy     string `json:"policy"`
	Role       string `json:"role"`
}
