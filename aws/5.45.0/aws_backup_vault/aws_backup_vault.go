// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_backup_vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_backup_vault.
type Resource struct {
	Name      string
	Args      Args
	state     *awsBackupVaultState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abv *Resource) Type() string {
	return "aws_backup_vault"
}

// LocalName returns the local name for [Resource].
func (abv *Resource) LocalName() string {
	return abv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abv *Resource) Configuration() interface{} {
	return abv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abv *Resource) Dependencies() terra.Dependencies {
	return abv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abv *Resource) LifecycleManagement() *terra.Lifecycle {
	return abv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abv *Resource) Attributes() awsBackupVaultAttributes {
	return awsBackupVaultAttributes{ref: terra.ReferenceResource(abv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abv *Resource) ImportState(state io.Reader) error {
	abv.state = &awsBackupVaultState{}
	if err := json.NewDecoder(state).Decode(abv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abv.Type(), abv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abv *Resource) State() (*awsBackupVaultState, bool) {
	return abv.state, abv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abv *Resource) StateMust() *awsBackupVaultState {
	if abv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abv.Type(), abv.LocalName()))
	}
	return abv.state
}

// Args contains the configurations for aws_backup_vault.
type Args struct {
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsBackupVaultAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_backup_vault.
func (abv awsBackupVaultAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(abv.ref.Append("arn"))
}

// ForceDestroy returns a reference to field force_destroy of aws_backup_vault.
func (abv awsBackupVaultAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(abv.ref.Append("force_destroy"))
}

// Id returns a reference to field id of aws_backup_vault.
func (abv awsBackupVaultAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abv.ref.Append("id"))
}

// KmsKeyArn returns a reference to field kms_key_arn of aws_backup_vault.
func (abv awsBackupVaultAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(abv.ref.Append("kms_key_arn"))
}

// Name returns a reference to field name of aws_backup_vault.
func (abv awsBackupVaultAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abv.ref.Append("name"))
}

// RecoveryPoints returns a reference to field recovery_points of aws_backup_vault.
func (abv awsBackupVaultAttributes) RecoveryPoints() terra.NumberValue {
	return terra.ReferenceAsNumber(abv.ref.Append("recovery_points"))
}

// Tags returns a reference to field tags of aws_backup_vault.
func (abv awsBackupVaultAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abv.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_backup_vault.
func (abv awsBackupVaultAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abv.ref.Append("tags_all"))
}

func (abv awsBackupVaultAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abv.ref.Append("timeouts"))
}

type awsBackupVaultState struct {
	Arn            string            `json:"arn"`
	ForceDestroy   bool              `json:"force_destroy"`
	Id             string            `json:"id"`
	KmsKeyArn      string            `json:"kms_key_arn"`
	Name           string            `json:"name"`
	RecoveryPoints float64           `json:"recovery_points"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
	Timeouts       *TimeoutsState    `json:"timeouts"`
}
