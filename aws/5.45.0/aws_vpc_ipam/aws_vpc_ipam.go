// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_ipam

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpc_ipam.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpcIpamState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avi *Resource) Type() string {
	return "aws_vpc_ipam"
}

// LocalName returns the local name for [Resource].
func (avi *Resource) LocalName() string {
	return avi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avi *Resource) Configuration() interface{} {
	return avi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avi *Resource) Dependencies() terra.Dependencies {
	return avi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avi *Resource) LifecycleManagement() *terra.Lifecycle {
	return avi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avi *Resource) Attributes() awsVpcIpamAttributes {
	return awsVpcIpamAttributes{ref: terra.ReferenceResource(avi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avi *Resource) ImportState(state io.Reader) error {
	avi.state = &awsVpcIpamState{}
	if err := json.NewDecoder(state).Decode(avi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avi.Type(), avi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avi *Resource) State() (*awsVpcIpamState, bool) {
	return avi.state, avi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avi *Resource) StateMust() *awsVpcIpamState {
	if avi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avi.Type(), avi.LocalName()))
	}
	return avi.state
}

// Args contains the configurations for aws_vpc_ipam.
type Args struct {
	// Cascade: bool, optional
	Cascade terra.BoolValue `hcl:"cascade,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
	// OperatingRegions: min=1
	OperatingRegions []OperatingRegions `hcl:"operating_regions,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVpcIpamAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpc_ipam.
func (avi awsVpcIpamAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(avi.ref.Append("arn"))
}

// Cascade returns a reference to field cascade of aws_vpc_ipam.
func (avi awsVpcIpamAttributes) Cascade() terra.BoolValue {
	return terra.ReferenceAsBool(avi.ref.Append("cascade"))
}

// DefaultResourceDiscoveryAssociationId returns a reference to field default_resource_discovery_association_id of aws_vpc_ipam.
func (avi awsVpcIpamAttributes) DefaultResourceDiscoveryAssociationId() terra.StringValue {
	return terra.ReferenceAsString(avi.ref.Append("default_resource_discovery_association_id"))
}

// DefaultResourceDiscoveryId returns a reference to field default_resource_discovery_id of aws_vpc_ipam.
func (avi awsVpcIpamAttributes) DefaultResourceDiscoveryId() terra.StringValue {
	return terra.ReferenceAsString(avi.ref.Append("default_resource_discovery_id"))
}

// Description returns a reference to field description of aws_vpc_ipam.
func (avi awsVpcIpamAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(avi.ref.Append("description"))
}

// Id returns a reference to field id of aws_vpc_ipam.
func (avi awsVpcIpamAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avi.ref.Append("id"))
}

// PrivateDefaultScopeId returns a reference to field private_default_scope_id of aws_vpc_ipam.
func (avi awsVpcIpamAttributes) PrivateDefaultScopeId() terra.StringValue {
	return terra.ReferenceAsString(avi.ref.Append("private_default_scope_id"))
}

// PublicDefaultScopeId returns a reference to field public_default_scope_id of aws_vpc_ipam.
func (avi awsVpcIpamAttributes) PublicDefaultScopeId() terra.StringValue {
	return terra.ReferenceAsString(avi.ref.Append("public_default_scope_id"))
}

// ScopeCount returns a reference to field scope_count of aws_vpc_ipam.
func (avi awsVpcIpamAttributes) ScopeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(avi.ref.Append("scope_count"))
}

// Tags returns a reference to field tags of aws_vpc_ipam.
func (avi awsVpcIpamAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avi.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpc_ipam.
func (avi awsVpcIpamAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avi.ref.Append("tags_all"))
}

// Tier returns a reference to field tier of aws_vpc_ipam.
func (avi awsVpcIpamAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(avi.ref.Append("tier"))
}

func (avi awsVpcIpamAttributes) OperatingRegions() terra.SetValue[OperatingRegionsAttributes] {
	return terra.ReferenceAsSet[OperatingRegionsAttributes](avi.ref.Append("operating_regions"))
}

func (avi awsVpcIpamAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avi.ref.Append("timeouts"))
}

type awsVpcIpamState struct {
	Arn                                   string                  `json:"arn"`
	Cascade                               bool                    `json:"cascade"`
	DefaultResourceDiscoveryAssociationId string                  `json:"default_resource_discovery_association_id"`
	DefaultResourceDiscoveryId            string                  `json:"default_resource_discovery_id"`
	Description                           string                  `json:"description"`
	Id                                    string                  `json:"id"`
	PrivateDefaultScopeId                 string                  `json:"private_default_scope_id"`
	PublicDefaultScopeId                  string                  `json:"public_default_scope_id"`
	ScopeCount                            float64                 `json:"scope_count"`
	Tags                                  map[string]string       `json:"tags"`
	TagsAll                               map[string]string       `json:"tags_all"`
	Tier                                  string                  `json:"tier"`
	OperatingRegions                      []OperatingRegionsState `json:"operating_regions"`
	Timeouts                              *TimeoutsState          `json:"timeouts"`
}
