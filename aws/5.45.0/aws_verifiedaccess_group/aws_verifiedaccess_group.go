// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_verifiedaccess_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_verifiedaccess_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVerifiedaccessGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avg *Resource) Type() string {
	return "aws_verifiedaccess_group"
}

// LocalName returns the local name for [Resource].
func (avg *Resource) LocalName() string {
	return avg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avg *Resource) Configuration() interface{} {
	return avg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avg *Resource) Dependencies() terra.Dependencies {
	return avg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avg *Resource) LifecycleManagement() *terra.Lifecycle {
	return avg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avg *Resource) Attributes() awsVerifiedaccessGroupAttributes {
	return awsVerifiedaccessGroupAttributes{ref: terra.ReferenceResource(avg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avg *Resource) ImportState(state io.Reader) error {
	avg.state = &awsVerifiedaccessGroupState{}
	if err := json.NewDecoder(state).Decode(avg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avg.Type(), avg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avg *Resource) State() (*awsVerifiedaccessGroupState, bool) {
	return avg.state, avg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avg *Resource) StateMust() *awsVerifiedaccessGroupState {
	if avg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avg.Type(), avg.LocalName()))
	}
	return avg.state
}

// Args contains the configurations for aws_verifiedaccess_group.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyDocument: string, optional
	PolicyDocument terra.StringValue `hcl:"policy_document,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VerifiedaccessInstanceId: string, required
	VerifiedaccessInstanceId terra.StringValue `hcl:"verifiedaccess_instance_id,attr" validate:"required"`
	// SseConfiguration: optional
	SseConfiguration *SseConfiguration `hcl:"sse_configuration,block"`
}

type awsVerifiedaccessGroupAttributes struct {
	ref terra.Reference
}

// CreationTime returns a reference to field creation_time of aws_verifiedaccess_group.
func (avg awsVerifiedaccessGroupAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("creation_time"))
}

// DeletionTime returns a reference to field deletion_time of aws_verifiedaccess_group.
func (avg awsVerifiedaccessGroupAttributes) DeletionTime() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("deletion_time"))
}

// Description returns a reference to field description of aws_verifiedaccess_group.
func (avg awsVerifiedaccessGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("description"))
}

// Id returns a reference to field id of aws_verifiedaccess_group.
func (avg awsVerifiedaccessGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("id"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_verifiedaccess_group.
func (avg awsVerifiedaccessGroupAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("last_updated_time"))
}

// Owner returns a reference to field owner of aws_verifiedaccess_group.
func (avg awsVerifiedaccessGroupAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("owner"))
}

// PolicyDocument returns a reference to field policy_document of aws_verifiedaccess_group.
func (avg awsVerifiedaccessGroupAttributes) PolicyDocument() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("policy_document"))
}

// Tags returns a reference to field tags of aws_verifiedaccess_group.
func (avg awsVerifiedaccessGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_verifiedaccess_group.
func (avg awsVerifiedaccessGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avg.ref.Append("tags_all"))
}

// VerifiedaccessGroupArn returns a reference to field verifiedaccess_group_arn of aws_verifiedaccess_group.
func (avg awsVerifiedaccessGroupAttributes) VerifiedaccessGroupArn() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("verifiedaccess_group_arn"))
}

// VerifiedaccessGroupId returns a reference to field verifiedaccess_group_id of aws_verifiedaccess_group.
func (avg awsVerifiedaccessGroupAttributes) VerifiedaccessGroupId() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("verifiedaccess_group_id"))
}

// VerifiedaccessInstanceId returns a reference to field verifiedaccess_instance_id of aws_verifiedaccess_group.
func (avg awsVerifiedaccessGroupAttributes) VerifiedaccessInstanceId() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("verifiedaccess_instance_id"))
}

func (avg awsVerifiedaccessGroupAttributes) SseConfiguration() terra.ListValue[SseConfigurationAttributes] {
	return terra.ReferenceAsList[SseConfigurationAttributes](avg.ref.Append("sse_configuration"))
}

type awsVerifiedaccessGroupState struct {
	CreationTime             string                  `json:"creation_time"`
	DeletionTime             string                  `json:"deletion_time"`
	Description              string                  `json:"description"`
	Id                       string                  `json:"id"`
	LastUpdatedTime          string                  `json:"last_updated_time"`
	Owner                    string                  `json:"owner"`
	PolicyDocument           string                  `json:"policy_document"`
	Tags                     map[string]string       `json:"tags"`
	TagsAll                  map[string]string       `json:"tags_all"`
	VerifiedaccessGroupArn   string                  `json:"verifiedaccess_group_arn"`
	VerifiedaccessGroupId    string                  `json:"verifiedaccess_group_id"`
	VerifiedaccessInstanceId string                  `json:"verifiedaccess_instance_id"`
	SseConfiguration         []SseConfigurationState `json:"sse_configuration"`
}
