// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_log_destination_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudwatch_log_destination_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudwatchLogDestinationPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acldp *Resource) Type() string {
	return "aws_cloudwatch_log_destination_policy"
}

// LocalName returns the local name for [Resource].
func (acldp *Resource) LocalName() string {
	return acldp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acldp *Resource) Configuration() interface{} {
	return acldp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acldp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acldp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acldp *Resource) Dependencies() terra.Dependencies {
	return acldp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acldp *Resource) LifecycleManagement() *terra.Lifecycle {
	return acldp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acldp *Resource) Attributes() awsCloudwatchLogDestinationPolicyAttributes {
	return awsCloudwatchLogDestinationPolicyAttributes{ref: terra.ReferenceResource(acldp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acldp *Resource) ImportState(state io.Reader) error {
	acldp.state = &awsCloudwatchLogDestinationPolicyState{}
	if err := json.NewDecoder(state).Decode(acldp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acldp.Type(), acldp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acldp *Resource) State() (*awsCloudwatchLogDestinationPolicyState, bool) {
	return acldp.state, acldp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acldp *Resource) StateMust() *awsCloudwatchLogDestinationPolicyState {
	if acldp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acldp.Type(), acldp.LocalName()))
	}
	return acldp.state
}

// Args contains the configurations for aws_cloudwatch_log_destination_policy.
type Args struct {
	// AccessPolicy: string, required
	AccessPolicy terra.StringValue `hcl:"access_policy,attr" validate:"required"`
	// DestinationName: string, required
	DestinationName terra.StringValue `hcl:"destination_name,attr" validate:"required"`
	// ForceUpdate: bool, optional
	ForceUpdate terra.BoolValue `hcl:"force_update,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsCloudwatchLogDestinationPolicyAttributes struct {
	ref terra.Reference
}

// AccessPolicy returns a reference to field access_policy of aws_cloudwatch_log_destination_policy.
func (acldp awsCloudwatchLogDestinationPolicyAttributes) AccessPolicy() terra.StringValue {
	return terra.ReferenceAsString(acldp.ref.Append("access_policy"))
}

// DestinationName returns a reference to field destination_name of aws_cloudwatch_log_destination_policy.
func (acldp awsCloudwatchLogDestinationPolicyAttributes) DestinationName() terra.StringValue {
	return terra.ReferenceAsString(acldp.ref.Append("destination_name"))
}

// ForceUpdate returns a reference to field force_update of aws_cloudwatch_log_destination_policy.
func (acldp awsCloudwatchLogDestinationPolicyAttributes) ForceUpdate() terra.BoolValue {
	return terra.ReferenceAsBool(acldp.ref.Append("force_update"))
}

// Id returns a reference to field id of aws_cloudwatch_log_destination_policy.
func (acldp awsCloudwatchLogDestinationPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acldp.ref.Append("id"))
}

type awsCloudwatchLogDestinationPolicyState struct {
	AccessPolicy    string `json:"access_policy"`
	DestinationName string `json:"destination_name"`
	ForceUpdate     bool   `json:"force_update"`
	Id              string `json:"id"`
}
