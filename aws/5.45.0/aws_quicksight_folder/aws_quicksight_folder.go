// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_folder

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_quicksight_folder.
type Resource struct {
	Name      string
	Args      Args
	state     *awsQuicksightFolderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aqf *Resource) Type() string {
	return "aws_quicksight_folder"
}

// LocalName returns the local name for [Resource].
func (aqf *Resource) LocalName() string {
	return aqf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aqf *Resource) Configuration() interface{} {
	return aqf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aqf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aqf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aqf *Resource) Dependencies() terra.Dependencies {
	return aqf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aqf *Resource) LifecycleManagement() *terra.Lifecycle {
	return aqf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aqf *Resource) Attributes() awsQuicksightFolderAttributes {
	return awsQuicksightFolderAttributes{ref: terra.ReferenceResource(aqf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aqf *Resource) ImportState(state io.Reader) error {
	aqf.state = &awsQuicksightFolderState{}
	if err := json.NewDecoder(state).Decode(aqf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aqf.Type(), aqf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aqf *Resource) State() (*awsQuicksightFolderState, bool) {
	return aqf.state, aqf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aqf *Resource) StateMust() *awsQuicksightFolderState {
	if aqf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aqf.Type(), aqf.LocalName()))
	}
	return aqf.state
}

// Args contains the configurations for aws_quicksight_folder.
type Args struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// FolderId: string, required
	FolderId terra.StringValue `hcl:"folder_id,attr" validate:"required"`
	// FolderType: string, optional
	FolderType terra.StringValue `hcl:"folder_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ParentFolderArn: string, optional
	ParentFolderArn terra.StringValue `hcl:"parent_folder_arn,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Permissions: min=0,max=64
	Permissions []Permissions `hcl:"permissions,block" validate:"min=0,max=64"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsQuicksightFolderAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_quicksight_folder.
func (aqf awsQuicksightFolderAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aqf.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_folder.
func (aqf awsQuicksightFolderAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(aqf.ref.Append("aws_account_id"))
}

// CreatedTime returns a reference to field created_time of aws_quicksight_folder.
func (aqf awsQuicksightFolderAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(aqf.ref.Append("created_time"))
}

// FolderId returns a reference to field folder_id of aws_quicksight_folder.
func (aqf awsQuicksightFolderAttributes) FolderId() terra.StringValue {
	return terra.ReferenceAsString(aqf.ref.Append("folder_id"))
}

// FolderPath returns a reference to field folder_path of aws_quicksight_folder.
func (aqf awsQuicksightFolderAttributes) FolderPath() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aqf.ref.Append("folder_path"))
}

// FolderType returns a reference to field folder_type of aws_quicksight_folder.
func (aqf awsQuicksightFolderAttributes) FolderType() terra.StringValue {
	return terra.ReferenceAsString(aqf.ref.Append("folder_type"))
}

// Id returns a reference to field id of aws_quicksight_folder.
func (aqf awsQuicksightFolderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aqf.ref.Append("id"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_quicksight_folder.
func (aqf awsQuicksightFolderAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(aqf.ref.Append("last_updated_time"))
}

// Name returns a reference to field name of aws_quicksight_folder.
func (aqf awsQuicksightFolderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aqf.ref.Append("name"))
}

// ParentFolderArn returns a reference to field parent_folder_arn of aws_quicksight_folder.
func (aqf awsQuicksightFolderAttributes) ParentFolderArn() terra.StringValue {
	return terra.ReferenceAsString(aqf.ref.Append("parent_folder_arn"))
}

// Tags returns a reference to field tags of aws_quicksight_folder.
func (aqf awsQuicksightFolderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqf.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_quicksight_folder.
func (aqf awsQuicksightFolderAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqf.ref.Append("tags_all"))
}

func (aqf awsQuicksightFolderAttributes) Permissions() terra.ListValue[PermissionsAttributes] {
	return terra.ReferenceAsList[PermissionsAttributes](aqf.ref.Append("permissions"))
}

func (aqf awsQuicksightFolderAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aqf.ref.Append("timeouts"))
}

type awsQuicksightFolderState struct {
	Arn             string             `json:"arn"`
	AwsAccountId    string             `json:"aws_account_id"`
	CreatedTime     string             `json:"created_time"`
	FolderId        string             `json:"folder_id"`
	FolderPath      []string           `json:"folder_path"`
	FolderType      string             `json:"folder_type"`
	Id              string             `json:"id"`
	LastUpdatedTime string             `json:"last_updated_time"`
	Name            string             `json:"name"`
	ParentFolderArn string             `json:"parent_folder_arn"`
	Tags            map[string]string  `json:"tags"`
	TagsAll         map[string]string  `json:"tags_all"`
	Permissions     []PermissionsState `json:"permissions"`
	Timeouts        *TimeoutsState     `json:"timeouts"`
}
