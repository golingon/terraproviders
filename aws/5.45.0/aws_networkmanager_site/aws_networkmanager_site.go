// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkmanager_site

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_networkmanager_site.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkmanagerSiteState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ans *Resource) Type() string {
	return "aws_networkmanager_site"
}

// LocalName returns the local name for [Resource].
func (ans *Resource) LocalName() string {
	return ans.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ans *Resource) Configuration() interface{} {
	return ans.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ans *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ans)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ans *Resource) Dependencies() terra.Dependencies {
	return ans.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ans *Resource) LifecycleManagement() *terra.Lifecycle {
	return ans.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ans *Resource) Attributes() awsNetworkmanagerSiteAttributes {
	return awsNetworkmanagerSiteAttributes{ref: terra.ReferenceResource(ans)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ans *Resource) ImportState(state io.Reader) error {
	ans.state = &awsNetworkmanagerSiteState{}
	if err := json.NewDecoder(state).Decode(ans.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ans.Type(), ans.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ans *Resource) State() (*awsNetworkmanagerSiteState, bool) {
	return ans.state, ans.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ans *Resource) StateMust() *awsNetworkmanagerSiteState {
	if ans.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ans.Type(), ans.LocalName()))
	}
	return ans.state
}

// Args contains the configurations for aws_networkmanager_site.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GlobalNetworkId: string, required
	GlobalNetworkId terra.StringValue `hcl:"global_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Location: optional
	Location *Location `hcl:"location,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsNetworkmanagerSiteAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_networkmanager_site.
func (ans awsNetworkmanagerSiteAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ans.ref.Append("arn"))
}

// Description returns a reference to field description of aws_networkmanager_site.
func (ans awsNetworkmanagerSiteAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ans.ref.Append("description"))
}

// GlobalNetworkId returns a reference to field global_network_id of aws_networkmanager_site.
func (ans awsNetworkmanagerSiteAttributes) GlobalNetworkId() terra.StringValue {
	return terra.ReferenceAsString(ans.ref.Append("global_network_id"))
}

// Id returns a reference to field id of aws_networkmanager_site.
func (ans awsNetworkmanagerSiteAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ans.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_networkmanager_site.
func (ans awsNetworkmanagerSiteAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ans.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_networkmanager_site.
func (ans awsNetworkmanagerSiteAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ans.ref.Append("tags_all"))
}

func (ans awsNetworkmanagerSiteAttributes) Location() terra.ListValue[LocationAttributes] {
	return terra.ReferenceAsList[LocationAttributes](ans.ref.Append("location"))
}

func (ans awsNetworkmanagerSiteAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ans.ref.Append("timeouts"))
}

type awsNetworkmanagerSiteState struct {
	Arn             string            `json:"arn"`
	Description     string            `json:"description"`
	GlobalNetworkId string            `json:"global_network_id"`
	Id              string            `json:"id"`
	Tags            map[string]string `json:"tags"`
	TagsAll         map[string]string `json:"tags_all"`
	Location        []LocationState   `json:"location"`
	Timeouts        *TimeoutsState    `json:"timeouts"`
}
