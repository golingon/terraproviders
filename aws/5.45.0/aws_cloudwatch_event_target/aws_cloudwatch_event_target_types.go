// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_event_target

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BatchTarget struct {
	// ArraySize: number, optional
	ArraySize terra.NumberValue `hcl:"array_size,attr"`
	// JobAttempts: number, optional
	JobAttempts terra.NumberValue `hcl:"job_attempts,attr"`
	// JobDefinition: string, required
	JobDefinition terra.StringValue `hcl:"job_definition,attr" validate:"required"`
	// JobName: string, required
	JobName terra.StringValue `hcl:"job_name,attr" validate:"required"`
}

type DeadLetterConfig struct {
	// Arn: string, optional
	Arn terra.StringValue `hcl:"arn,attr"`
}

type EcsTarget struct {
	// EnableEcsManagedTags: bool, optional
	EnableEcsManagedTags terra.BoolValue `hcl:"enable_ecs_managed_tags,attr"`
	// EnableExecuteCommand: bool, optional
	EnableExecuteCommand terra.BoolValue `hcl:"enable_execute_command,attr"`
	// Group: string, optional
	Group terra.StringValue `hcl:"group,attr"`
	// LaunchType: string, optional
	LaunchType terra.StringValue `hcl:"launch_type,attr"`
	// PlatformVersion: string, optional
	PlatformVersion terra.StringValue `hcl:"platform_version,attr"`
	// PropagateTags: string, optional
	PropagateTags terra.StringValue `hcl:"propagate_tags,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TaskCount: number, optional
	TaskCount terra.NumberValue `hcl:"task_count,attr"`
	// TaskDefinitionArn: string, required
	TaskDefinitionArn terra.StringValue `hcl:"task_definition_arn,attr" validate:"required"`
	// EcsTargetCapacityProviderStrategy: min=0
	CapacityProviderStrategy []EcsTargetCapacityProviderStrategy `hcl:"capacity_provider_strategy,block" validate:"min=0"`
	// EcsTargetNetworkConfiguration: optional
	NetworkConfiguration *EcsTargetNetworkConfiguration `hcl:"network_configuration,block"`
	// EcsTargetOrderedPlacementStrategy: min=0,max=5
	OrderedPlacementStrategy []EcsTargetOrderedPlacementStrategy `hcl:"ordered_placement_strategy,block" validate:"min=0,max=5"`
	// EcsTargetPlacementConstraint: min=0,max=10
	PlacementConstraint []EcsTargetPlacementConstraint `hcl:"placement_constraint,block" validate:"min=0,max=10"`
}

type EcsTargetCapacityProviderStrategy struct {
	// Base: number, optional
	Base terra.NumberValue `hcl:"base,attr"`
	// CapacityProvider: string, required
	CapacityProvider terra.StringValue `hcl:"capacity_provider,attr" validate:"required"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type EcsTargetNetworkConfiguration struct {
	// AssignPublicIp: bool, optional
	AssignPublicIp terra.BoolValue `hcl:"assign_public_ip,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Subnets: set of string, required
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type EcsTargetOrderedPlacementStrategy struct {
	// Field: string, optional
	Field terra.StringValue `hcl:"field,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type EcsTargetPlacementConstraint struct {
	// Expression: string, optional
	Expression terra.StringValue `hcl:"expression,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type HttpTarget struct {
	// HeaderParameters: map of string, optional
	HeaderParameters terra.MapValue[terra.StringValue] `hcl:"header_parameters,attr"`
	// PathParameterValues: list of string, optional
	PathParameterValues terra.ListValue[terra.StringValue] `hcl:"path_parameter_values,attr"`
	// QueryStringParameters: map of string, optional
	QueryStringParameters terra.MapValue[terra.StringValue] `hcl:"query_string_parameters,attr"`
}

type InputTransformer struct {
	// InputPaths: map of string, optional
	InputPaths terra.MapValue[terra.StringValue] `hcl:"input_paths,attr"`
	// InputTemplate: string, required
	InputTemplate terra.StringValue `hcl:"input_template,attr" validate:"required"`
}

type KinesisTarget struct {
	// PartitionKeyPath: string, optional
	PartitionKeyPath terra.StringValue `hcl:"partition_key_path,attr"`
}

type RedshiftTarget struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// DbUser: string, optional
	DbUser terra.StringValue `hcl:"db_user,attr"`
	// SecretsManagerArn: string, optional
	SecretsManagerArn terra.StringValue `hcl:"secrets_manager_arn,attr"`
	// Sql: string, optional
	Sql terra.StringValue `hcl:"sql,attr"`
	// StatementName: string, optional
	StatementName terra.StringValue `hcl:"statement_name,attr"`
	// WithEvent: bool, optional
	WithEvent terra.BoolValue `hcl:"with_event,attr"`
}

type RetryPolicy struct {
	// MaximumEventAgeInSeconds: number, optional
	MaximumEventAgeInSeconds terra.NumberValue `hcl:"maximum_event_age_in_seconds,attr"`
	// MaximumRetryAttempts: number, optional
	MaximumRetryAttempts terra.NumberValue `hcl:"maximum_retry_attempts,attr"`
}

type RunCommandTargets struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type SagemakerPipelineTarget struct {
	// SagemakerPipelineTargetPipelineParameterList: min=0,max=200
	PipelineParameterList []SagemakerPipelineTargetPipelineParameterList `hcl:"pipeline_parameter_list,block" validate:"min=0,max=200"`
}

type SagemakerPipelineTargetPipelineParameterList struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type SqsTarget struct {
	// MessageGroupId: string, optional
	MessageGroupId terra.StringValue `hcl:"message_group_id,attr"`
}

type BatchTargetAttributes struct {
	ref terra.Reference
}

func (bt BatchTargetAttributes) InternalRef() (terra.Reference, error) {
	return bt.ref, nil
}

func (bt BatchTargetAttributes) InternalWithRef(ref terra.Reference) BatchTargetAttributes {
	return BatchTargetAttributes{ref: ref}
}

func (bt BatchTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bt.ref.InternalTokens()
}

func (bt BatchTargetAttributes) ArraySize() terra.NumberValue {
	return terra.ReferenceAsNumber(bt.ref.Append("array_size"))
}

func (bt BatchTargetAttributes) JobAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(bt.ref.Append("job_attempts"))
}

func (bt BatchTargetAttributes) JobDefinition() terra.StringValue {
	return terra.ReferenceAsString(bt.ref.Append("job_definition"))
}

func (bt BatchTargetAttributes) JobName() terra.StringValue {
	return terra.ReferenceAsString(bt.ref.Append("job_name"))
}

type DeadLetterConfigAttributes struct {
	ref terra.Reference
}

func (dlc DeadLetterConfigAttributes) InternalRef() (terra.Reference, error) {
	return dlc.ref, nil
}

func (dlc DeadLetterConfigAttributes) InternalWithRef(ref terra.Reference) DeadLetterConfigAttributes {
	return DeadLetterConfigAttributes{ref: ref}
}

func (dlc DeadLetterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dlc.ref.InternalTokens()
}

func (dlc DeadLetterConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dlc.ref.Append("arn"))
}

type EcsTargetAttributes struct {
	ref terra.Reference
}

func (et EcsTargetAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et EcsTargetAttributes) InternalWithRef(ref terra.Reference) EcsTargetAttributes {
	return EcsTargetAttributes{ref: ref}
}

func (et EcsTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et EcsTargetAttributes) EnableEcsManagedTags() terra.BoolValue {
	return terra.ReferenceAsBool(et.ref.Append("enable_ecs_managed_tags"))
}

func (et EcsTargetAttributes) EnableExecuteCommand() terra.BoolValue {
	return terra.ReferenceAsBool(et.ref.Append("enable_execute_command"))
}

func (et EcsTargetAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("group"))
}

func (et EcsTargetAttributes) LaunchType() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("launch_type"))
}

func (et EcsTargetAttributes) PlatformVersion() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("platform_version"))
}

func (et EcsTargetAttributes) PropagateTags() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("propagate_tags"))
}

func (et EcsTargetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](et.ref.Append("tags"))
}

func (et EcsTargetAttributes) TaskCount() terra.NumberValue {
	return terra.ReferenceAsNumber(et.ref.Append("task_count"))
}

func (et EcsTargetAttributes) TaskDefinitionArn() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("task_definition_arn"))
}

func (et EcsTargetAttributes) CapacityProviderStrategy() terra.SetValue[EcsTargetCapacityProviderStrategyAttributes] {
	return terra.ReferenceAsSet[EcsTargetCapacityProviderStrategyAttributes](et.ref.Append("capacity_provider_strategy"))
}

func (et EcsTargetAttributes) NetworkConfiguration() terra.ListValue[EcsTargetNetworkConfigurationAttributes] {
	return terra.ReferenceAsList[EcsTargetNetworkConfigurationAttributes](et.ref.Append("network_configuration"))
}

func (et EcsTargetAttributes) OrderedPlacementStrategy() terra.ListValue[EcsTargetOrderedPlacementStrategyAttributes] {
	return terra.ReferenceAsList[EcsTargetOrderedPlacementStrategyAttributes](et.ref.Append("ordered_placement_strategy"))
}

func (et EcsTargetAttributes) PlacementConstraint() terra.SetValue[EcsTargetPlacementConstraintAttributes] {
	return terra.ReferenceAsSet[EcsTargetPlacementConstraintAttributes](et.ref.Append("placement_constraint"))
}

type EcsTargetCapacityProviderStrategyAttributes struct {
	ref terra.Reference
}

func (cps EcsTargetCapacityProviderStrategyAttributes) InternalRef() (terra.Reference, error) {
	return cps.ref, nil
}

func (cps EcsTargetCapacityProviderStrategyAttributes) InternalWithRef(ref terra.Reference) EcsTargetCapacityProviderStrategyAttributes {
	return EcsTargetCapacityProviderStrategyAttributes{ref: ref}
}

func (cps EcsTargetCapacityProviderStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cps.ref.InternalTokens()
}

func (cps EcsTargetCapacityProviderStrategyAttributes) Base() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("base"))
}

func (cps EcsTargetCapacityProviderStrategyAttributes) CapacityProvider() terra.StringValue {
	return terra.ReferenceAsString(cps.ref.Append("capacity_provider"))
}

func (cps EcsTargetCapacityProviderStrategyAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("weight"))
}

type EcsTargetNetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc EcsTargetNetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc EcsTargetNetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) EcsTargetNetworkConfigurationAttributes {
	return EcsTargetNetworkConfigurationAttributes{ref: ref}
}

func (nc EcsTargetNetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc EcsTargetNetworkConfigurationAttributes) AssignPublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("assign_public_ip"))
}

func (nc EcsTargetNetworkConfigurationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("security_groups"))
}

func (nc EcsTargetNetworkConfigurationAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("subnets"))
}

type EcsTargetOrderedPlacementStrategyAttributes struct {
	ref terra.Reference
}

func (ops EcsTargetOrderedPlacementStrategyAttributes) InternalRef() (terra.Reference, error) {
	return ops.ref, nil
}

func (ops EcsTargetOrderedPlacementStrategyAttributes) InternalWithRef(ref terra.Reference) EcsTargetOrderedPlacementStrategyAttributes {
	return EcsTargetOrderedPlacementStrategyAttributes{ref: ref}
}

func (ops EcsTargetOrderedPlacementStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ops.ref.InternalTokens()
}

func (ops EcsTargetOrderedPlacementStrategyAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(ops.ref.Append("field"))
}

func (ops EcsTargetOrderedPlacementStrategyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ops.ref.Append("type"))
}

type EcsTargetPlacementConstraintAttributes struct {
	ref terra.Reference
}

func (pc EcsTargetPlacementConstraintAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc EcsTargetPlacementConstraintAttributes) InternalWithRef(ref terra.Reference) EcsTargetPlacementConstraintAttributes {
	return EcsTargetPlacementConstraintAttributes{ref: ref}
}

func (pc EcsTargetPlacementConstraintAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc EcsTargetPlacementConstraintAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("expression"))
}

func (pc EcsTargetPlacementConstraintAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("type"))
}

type HttpTargetAttributes struct {
	ref terra.Reference
}

func (ht HttpTargetAttributes) InternalRef() (terra.Reference, error) {
	return ht.ref, nil
}

func (ht HttpTargetAttributes) InternalWithRef(ref terra.Reference) HttpTargetAttributes {
	return HttpTargetAttributes{ref: ref}
}

func (ht HttpTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ht.ref.InternalTokens()
}

func (ht HttpTargetAttributes) HeaderParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ht.ref.Append("header_parameters"))
}

func (ht HttpTargetAttributes) PathParameterValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ht.ref.Append("path_parameter_values"))
}

func (ht HttpTargetAttributes) QueryStringParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ht.ref.Append("query_string_parameters"))
}

type InputTransformerAttributes struct {
	ref terra.Reference
}

func (it InputTransformerAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it InputTransformerAttributes) InternalWithRef(ref terra.Reference) InputTransformerAttributes {
	return InputTransformerAttributes{ref: ref}
}

func (it InputTransformerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it InputTransformerAttributes) InputPaths() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](it.ref.Append("input_paths"))
}

func (it InputTransformerAttributes) InputTemplate() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("input_template"))
}

type KinesisTargetAttributes struct {
	ref terra.Reference
}

func (kt KinesisTargetAttributes) InternalRef() (terra.Reference, error) {
	return kt.ref, nil
}

func (kt KinesisTargetAttributes) InternalWithRef(ref terra.Reference) KinesisTargetAttributes {
	return KinesisTargetAttributes{ref: ref}
}

func (kt KinesisTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kt.ref.InternalTokens()
}

func (kt KinesisTargetAttributes) PartitionKeyPath() terra.StringValue {
	return terra.ReferenceAsString(kt.ref.Append("partition_key_path"))
}

type RedshiftTargetAttributes struct {
	ref terra.Reference
}

func (rt RedshiftTargetAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt RedshiftTargetAttributes) InternalWithRef(ref terra.Reference) RedshiftTargetAttributes {
	return RedshiftTargetAttributes{ref: ref}
}

func (rt RedshiftTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt RedshiftTargetAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("database"))
}

func (rt RedshiftTargetAttributes) DbUser() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("db_user"))
}

func (rt RedshiftTargetAttributes) SecretsManagerArn() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("secrets_manager_arn"))
}

func (rt RedshiftTargetAttributes) Sql() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("sql"))
}

func (rt RedshiftTargetAttributes) StatementName() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("statement_name"))
}

func (rt RedshiftTargetAttributes) WithEvent() terra.BoolValue {
	return terra.ReferenceAsBool(rt.ref.Append("with_event"))
}

type RetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp RetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RetryPolicyAttributes) InternalWithRef(ref terra.Reference) RetryPolicyAttributes {
	return RetryPolicyAttributes{ref: ref}
}

func (rp RetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RetryPolicyAttributes) MaximumEventAgeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("maximum_event_age_in_seconds"))
}

func (rp RetryPolicyAttributes) MaximumRetryAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("maximum_retry_attempts"))
}

type RunCommandTargetsAttributes struct {
	ref terra.Reference
}

func (rct RunCommandTargetsAttributes) InternalRef() (terra.Reference, error) {
	return rct.ref, nil
}

func (rct RunCommandTargetsAttributes) InternalWithRef(ref terra.Reference) RunCommandTargetsAttributes {
	return RunCommandTargetsAttributes{ref: ref}
}

func (rct RunCommandTargetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rct.ref.InternalTokens()
}

func (rct RunCommandTargetsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(rct.ref.Append("key"))
}

func (rct RunCommandTargetsAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rct.ref.Append("values"))
}

type SagemakerPipelineTargetAttributes struct {
	ref terra.Reference
}

func (spt SagemakerPipelineTargetAttributes) InternalRef() (terra.Reference, error) {
	return spt.ref, nil
}

func (spt SagemakerPipelineTargetAttributes) InternalWithRef(ref terra.Reference) SagemakerPipelineTargetAttributes {
	return SagemakerPipelineTargetAttributes{ref: ref}
}

func (spt SagemakerPipelineTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spt.ref.InternalTokens()
}

func (spt SagemakerPipelineTargetAttributes) PipelineParameterList() terra.SetValue[SagemakerPipelineTargetPipelineParameterListAttributes] {
	return terra.ReferenceAsSet[SagemakerPipelineTargetPipelineParameterListAttributes](spt.ref.Append("pipeline_parameter_list"))
}

type SagemakerPipelineTargetPipelineParameterListAttributes struct {
	ref terra.Reference
}

func (ppl SagemakerPipelineTargetPipelineParameterListAttributes) InternalRef() (terra.Reference, error) {
	return ppl.ref, nil
}

func (ppl SagemakerPipelineTargetPipelineParameterListAttributes) InternalWithRef(ref terra.Reference) SagemakerPipelineTargetPipelineParameterListAttributes {
	return SagemakerPipelineTargetPipelineParameterListAttributes{ref: ref}
}

func (ppl SagemakerPipelineTargetPipelineParameterListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ppl.ref.InternalTokens()
}

func (ppl SagemakerPipelineTargetPipelineParameterListAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ppl.ref.Append("name"))
}

func (ppl SagemakerPipelineTargetPipelineParameterListAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ppl.ref.Append("value"))
}

type SqsTargetAttributes struct {
	ref terra.Reference
}

func (st SqsTargetAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st SqsTargetAttributes) InternalWithRef(ref terra.Reference) SqsTargetAttributes {
	return SqsTargetAttributes{ref: ref}
}

func (st SqsTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st SqsTargetAttributes) MessageGroupId() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("message_group_id"))
}

type BatchTargetState struct {
	ArraySize     float64 `json:"array_size"`
	JobAttempts   float64 `json:"job_attempts"`
	JobDefinition string  `json:"job_definition"`
	JobName       string  `json:"job_name"`
}

type DeadLetterConfigState struct {
	Arn string `json:"arn"`
}

type EcsTargetState struct {
	EnableEcsManagedTags     bool                                     `json:"enable_ecs_managed_tags"`
	EnableExecuteCommand     bool                                     `json:"enable_execute_command"`
	Group                    string                                   `json:"group"`
	LaunchType               string                                   `json:"launch_type"`
	PlatformVersion          string                                   `json:"platform_version"`
	PropagateTags            string                                   `json:"propagate_tags"`
	Tags                     map[string]string                        `json:"tags"`
	TaskCount                float64                                  `json:"task_count"`
	TaskDefinitionArn        string                                   `json:"task_definition_arn"`
	CapacityProviderStrategy []EcsTargetCapacityProviderStrategyState `json:"capacity_provider_strategy"`
	NetworkConfiguration     []EcsTargetNetworkConfigurationState     `json:"network_configuration"`
	OrderedPlacementStrategy []EcsTargetOrderedPlacementStrategyState `json:"ordered_placement_strategy"`
	PlacementConstraint      []EcsTargetPlacementConstraintState      `json:"placement_constraint"`
}

type EcsTargetCapacityProviderStrategyState struct {
	Base             float64 `json:"base"`
	CapacityProvider string  `json:"capacity_provider"`
	Weight           float64 `json:"weight"`
}

type EcsTargetNetworkConfigurationState struct {
	AssignPublicIp bool     `json:"assign_public_ip"`
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type EcsTargetOrderedPlacementStrategyState struct {
	Field string `json:"field"`
	Type  string `json:"type"`
}

type EcsTargetPlacementConstraintState struct {
	Expression string `json:"expression"`
	Type       string `json:"type"`
}

type HttpTargetState struct {
	HeaderParameters      map[string]string `json:"header_parameters"`
	PathParameterValues   []string          `json:"path_parameter_values"`
	QueryStringParameters map[string]string `json:"query_string_parameters"`
}

type InputTransformerState struct {
	InputPaths    map[string]string `json:"input_paths"`
	InputTemplate string            `json:"input_template"`
}

type KinesisTargetState struct {
	PartitionKeyPath string `json:"partition_key_path"`
}

type RedshiftTargetState struct {
	Database          string `json:"database"`
	DbUser            string `json:"db_user"`
	SecretsManagerArn string `json:"secrets_manager_arn"`
	Sql               string `json:"sql"`
	StatementName     string `json:"statement_name"`
	WithEvent         bool   `json:"with_event"`
}

type RetryPolicyState struct {
	MaximumEventAgeInSeconds float64 `json:"maximum_event_age_in_seconds"`
	MaximumRetryAttempts     float64 `json:"maximum_retry_attempts"`
}

type RunCommandTargetsState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type SagemakerPipelineTargetState struct {
	PipelineParameterList []SagemakerPipelineTargetPipelineParameterListState `json:"pipeline_parameter_list"`
}

type SagemakerPipelineTargetPipelineParameterListState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type SqsTargetState struct {
	MessageGroupId string `json:"message_group_id"`
}
