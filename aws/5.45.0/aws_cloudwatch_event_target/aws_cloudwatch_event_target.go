// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_event_target

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudwatch_event_target.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudwatchEventTargetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acet *Resource) Type() string {
	return "aws_cloudwatch_event_target"
}

// LocalName returns the local name for [Resource].
func (acet *Resource) LocalName() string {
	return acet.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acet *Resource) Configuration() interface{} {
	return acet.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acet *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acet)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acet *Resource) Dependencies() terra.Dependencies {
	return acet.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acet *Resource) LifecycleManagement() *terra.Lifecycle {
	return acet.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acet *Resource) Attributes() awsCloudwatchEventTargetAttributes {
	return awsCloudwatchEventTargetAttributes{ref: terra.ReferenceResource(acet)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acet *Resource) ImportState(state io.Reader) error {
	acet.state = &awsCloudwatchEventTargetState{}
	if err := json.NewDecoder(state).Decode(acet.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acet.Type(), acet.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acet *Resource) State() (*awsCloudwatchEventTargetState, bool) {
	return acet.state, acet.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acet *Resource) StateMust() *awsCloudwatchEventTargetState {
	if acet.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acet.Type(), acet.LocalName()))
	}
	return acet.state
}

// Args contains the configurations for aws_cloudwatch_event_target.
type Args struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// EventBusName: string, optional
	EventBusName terra.StringValue `hcl:"event_bus_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Input: string, optional
	Input terra.StringValue `hcl:"input,attr"`
	// InputPath: string, optional
	InputPath terra.StringValue `hcl:"input_path,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// Rule: string, required
	Rule terra.StringValue `hcl:"rule,attr" validate:"required"`
	// TargetId: string, optional
	TargetId terra.StringValue `hcl:"target_id,attr"`
	// BatchTarget: optional
	BatchTarget *BatchTarget `hcl:"batch_target,block"`
	// DeadLetterConfig: optional
	DeadLetterConfig *DeadLetterConfig `hcl:"dead_letter_config,block"`
	// EcsTarget: optional
	EcsTarget *EcsTarget `hcl:"ecs_target,block"`
	// HttpTarget: optional
	HttpTarget *HttpTarget `hcl:"http_target,block"`
	// InputTransformer: optional
	InputTransformer *InputTransformer `hcl:"input_transformer,block"`
	// KinesisTarget: optional
	KinesisTarget *KinesisTarget `hcl:"kinesis_target,block"`
	// RedshiftTarget: optional
	RedshiftTarget *RedshiftTarget `hcl:"redshift_target,block"`
	// RetryPolicy: optional
	RetryPolicy *RetryPolicy `hcl:"retry_policy,block"`
	// RunCommandTargets: min=0,max=5
	RunCommandTargets []RunCommandTargets `hcl:"run_command_targets,block" validate:"min=0,max=5"`
	// SagemakerPipelineTarget: optional
	SagemakerPipelineTarget *SagemakerPipelineTarget `hcl:"sagemaker_pipeline_target,block"`
	// SqsTarget: optional
	SqsTarget *SqsTarget `hcl:"sqs_target,block"`
}

type awsCloudwatchEventTargetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudwatch_event_target.
func (acet awsCloudwatchEventTargetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acet.ref.Append("arn"))
}

// EventBusName returns a reference to field event_bus_name of aws_cloudwatch_event_target.
func (acet awsCloudwatchEventTargetAttributes) EventBusName() terra.StringValue {
	return terra.ReferenceAsString(acet.ref.Append("event_bus_name"))
}

// Id returns a reference to field id of aws_cloudwatch_event_target.
func (acet awsCloudwatchEventTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acet.ref.Append("id"))
}

// Input returns a reference to field input of aws_cloudwatch_event_target.
func (acet awsCloudwatchEventTargetAttributes) Input() terra.StringValue {
	return terra.ReferenceAsString(acet.ref.Append("input"))
}

// InputPath returns a reference to field input_path of aws_cloudwatch_event_target.
func (acet awsCloudwatchEventTargetAttributes) InputPath() terra.StringValue {
	return terra.ReferenceAsString(acet.ref.Append("input_path"))
}

// RoleArn returns a reference to field role_arn of aws_cloudwatch_event_target.
func (acet awsCloudwatchEventTargetAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(acet.ref.Append("role_arn"))
}

// Rule returns a reference to field rule of aws_cloudwatch_event_target.
func (acet awsCloudwatchEventTargetAttributes) Rule() terra.StringValue {
	return terra.ReferenceAsString(acet.ref.Append("rule"))
}

// TargetId returns a reference to field target_id of aws_cloudwatch_event_target.
func (acet awsCloudwatchEventTargetAttributes) TargetId() terra.StringValue {
	return terra.ReferenceAsString(acet.ref.Append("target_id"))
}

func (acet awsCloudwatchEventTargetAttributes) BatchTarget() terra.ListValue[BatchTargetAttributes] {
	return terra.ReferenceAsList[BatchTargetAttributes](acet.ref.Append("batch_target"))
}

func (acet awsCloudwatchEventTargetAttributes) DeadLetterConfig() terra.ListValue[DeadLetterConfigAttributes] {
	return terra.ReferenceAsList[DeadLetterConfigAttributes](acet.ref.Append("dead_letter_config"))
}

func (acet awsCloudwatchEventTargetAttributes) EcsTarget() terra.ListValue[EcsTargetAttributes] {
	return terra.ReferenceAsList[EcsTargetAttributes](acet.ref.Append("ecs_target"))
}

func (acet awsCloudwatchEventTargetAttributes) HttpTarget() terra.ListValue[HttpTargetAttributes] {
	return terra.ReferenceAsList[HttpTargetAttributes](acet.ref.Append("http_target"))
}

func (acet awsCloudwatchEventTargetAttributes) InputTransformer() terra.ListValue[InputTransformerAttributes] {
	return terra.ReferenceAsList[InputTransformerAttributes](acet.ref.Append("input_transformer"))
}

func (acet awsCloudwatchEventTargetAttributes) KinesisTarget() terra.ListValue[KinesisTargetAttributes] {
	return terra.ReferenceAsList[KinesisTargetAttributes](acet.ref.Append("kinesis_target"))
}

func (acet awsCloudwatchEventTargetAttributes) RedshiftTarget() terra.ListValue[RedshiftTargetAttributes] {
	return terra.ReferenceAsList[RedshiftTargetAttributes](acet.ref.Append("redshift_target"))
}

func (acet awsCloudwatchEventTargetAttributes) RetryPolicy() terra.ListValue[RetryPolicyAttributes] {
	return terra.ReferenceAsList[RetryPolicyAttributes](acet.ref.Append("retry_policy"))
}

func (acet awsCloudwatchEventTargetAttributes) RunCommandTargets() terra.ListValue[RunCommandTargetsAttributes] {
	return terra.ReferenceAsList[RunCommandTargetsAttributes](acet.ref.Append("run_command_targets"))
}

func (acet awsCloudwatchEventTargetAttributes) SagemakerPipelineTarget() terra.ListValue[SagemakerPipelineTargetAttributes] {
	return terra.ReferenceAsList[SagemakerPipelineTargetAttributes](acet.ref.Append("sagemaker_pipeline_target"))
}

func (acet awsCloudwatchEventTargetAttributes) SqsTarget() terra.ListValue[SqsTargetAttributes] {
	return terra.ReferenceAsList[SqsTargetAttributes](acet.ref.Append("sqs_target"))
}

type awsCloudwatchEventTargetState struct {
	Arn                     string                         `json:"arn"`
	EventBusName            string                         `json:"event_bus_name"`
	Id                      string                         `json:"id"`
	Input                   string                         `json:"input"`
	InputPath               string                         `json:"input_path"`
	RoleArn                 string                         `json:"role_arn"`
	Rule                    string                         `json:"rule"`
	TargetId                string                         `json:"target_id"`
	BatchTarget             []BatchTargetState             `json:"batch_target"`
	DeadLetterConfig        []DeadLetterConfigState        `json:"dead_letter_config"`
	EcsTarget               []EcsTargetState               `json:"ecs_target"`
	HttpTarget              []HttpTargetState              `json:"http_target"`
	InputTransformer        []InputTransformerState        `json:"input_transformer"`
	KinesisTarget           []KinesisTargetState           `json:"kinesis_target"`
	RedshiftTarget          []RedshiftTargetState          `json:"redshift_target"`
	RetryPolicy             []RetryPolicyState             `json:"retry_policy"`
	RunCommandTargets       []RunCommandTargetsState       `json:"run_command_targets"`
	SagemakerPipelineTarget []SagemakerPipelineTargetState `json:"sagemaker_pipeline_target"`
	SqsTarget               []SqsTargetState               `json:"sqs_target"`
}
