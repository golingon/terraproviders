// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_image

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataImageScanningConfigurationAttributes struct {
	ref terra.Reference
}

func (isc DataImageScanningConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return isc.ref, nil
}

func (isc DataImageScanningConfigurationAttributes) InternalWithRef(ref terra.Reference) DataImageScanningConfigurationAttributes {
	return DataImageScanningConfigurationAttributes{ref: ref}
}

func (isc DataImageScanningConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return isc.ref.InternalTokens()
}

func (isc DataImageScanningConfigurationAttributes) ImageScanningEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(isc.ref.Append("image_scanning_enabled"))
}

func (isc DataImageScanningConfigurationAttributes) EcrConfiguration() terra.ListValue[DataImageScanningConfigurationEcrConfigurationAttributes] {
	return terra.ReferenceAsList[DataImageScanningConfigurationEcrConfigurationAttributes](isc.ref.Append("ecr_configuration"))
}

type DataImageScanningConfigurationEcrConfigurationAttributes struct {
	ref terra.Reference
}

func (ec DataImageScanningConfigurationEcrConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec DataImageScanningConfigurationEcrConfigurationAttributes) InternalWithRef(ref terra.Reference) DataImageScanningConfigurationEcrConfigurationAttributes {
	return DataImageScanningConfigurationEcrConfigurationAttributes{ref: ref}
}

func (ec DataImageScanningConfigurationEcrConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec DataImageScanningConfigurationEcrConfigurationAttributes) ContainerTags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ec.ref.Append("container_tags"))
}

func (ec DataImageScanningConfigurationEcrConfigurationAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("repository_name"))
}

type DataImageTestsConfigurationAttributes struct {
	ref terra.Reference
}

func (itc DataImageTestsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return itc.ref, nil
}

func (itc DataImageTestsConfigurationAttributes) InternalWithRef(ref terra.Reference) DataImageTestsConfigurationAttributes {
	return DataImageTestsConfigurationAttributes{ref: ref}
}

func (itc DataImageTestsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return itc.ref.InternalTokens()
}

func (itc DataImageTestsConfigurationAttributes) ImageTestsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(itc.ref.Append("image_tests_enabled"))
}

func (itc DataImageTestsConfigurationAttributes) TimeoutMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("timeout_minutes"))
}

type DataOutputResourcesAttributes struct {
	ref terra.Reference
}

func (or DataOutputResourcesAttributes) InternalRef() (terra.Reference, error) {
	return or.ref, nil
}

func (or DataOutputResourcesAttributes) InternalWithRef(ref terra.Reference) DataOutputResourcesAttributes {
	return DataOutputResourcesAttributes{ref: ref}
}

func (or DataOutputResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return or.ref.InternalTokens()
}

func (or DataOutputResourcesAttributes) Amis() terra.SetValue[DataOutputResourcesAmisAttributes] {
	return terra.ReferenceAsSet[DataOutputResourcesAmisAttributes](or.ref.Append("amis"))
}

func (or DataOutputResourcesAttributes) Containers() terra.SetValue[DataOutputResourcesContainersAttributes] {
	return terra.ReferenceAsSet[DataOutputResourcesContainersAttributes](or.ref.Append("containers"))
}

type DataOutputResourcesAmisAttributes struct {
	ref terra.Reference
}

func (a DataOutputResourcesAmisAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DataOutputResourcesAmisAttributes) InternalWithRef(ref terra.Reference) DataOutputResourcesAmisAttributes {
	return DataOutputResourcesAmisAttributes{ref: ref}
}

func (a DataOutputResourcesAmisAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DataOutputResourcesAmisAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("account_id"))
}

func (a DataOutputResourcesAmisAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("description"))
}

func (a DataOutputResourcesAmisAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("image"))
}

func (a DataOutputResourcesAmisAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a DataOutputResourcesAmisAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("region"))
}

type DataOutputResourcesContainersAttributes struct {
	ref terra.Reference
}

func (c DataOutputResourcesContainersAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataOutputResourcesContainersAttributes) InternalWithRef(ref terra.Reference) DataOutputResourcesContainersAttributes {
	return DataOutputResourcesContainersAttributes{ref: ref}
}

func (c DataOutputResourcesContainersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataOutputResourcesContainersAttributes) ImageUris() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("image_uris"))
}

func (c DataOutputResourcesContainersAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("region"))
}

type DataImageScanningConfigurationState struct {
	ImageScanningEnabled bool                                                  `json:"image_scanning_enabled"`
	EcrConfiguration     []DataImageScanningConfigurationEcrConfigurationState `json:"ecr_configuration"`
}

type DataImageScanningConfigurationEcrConfigurationState struct {
	ContainerTags  []string `json:"container_tags"`
	RepositoryName string   `json:"repository_name"`
}

type DataImageTestsConfigurationState struct {
	ImageTestsEnabled bool    `json:"image_tests_enabled"`
	TimeoutMinutes    float64 `json:"timeout_minutes"`
}

type DataOutputResourcesState struct {
	Amis       []DataOutputResourcesAmisState       `json:"amis"`
	Containers []DataOutputResourcesContainersState `json:"containers"`
}

type DataOutputResourcesAmisState struct {
	AccountId   string `json:"account_id"`
	Description string `json:"description"`
	Image       string `json:"image"`
	Name        string `json:"name"`
	Region      string `json:"region"`
}

type DataOutputResourcesContainersState struct {
	ImageUris []string `json:"image_uris"`
	Region    string   `json:"region"`
}
