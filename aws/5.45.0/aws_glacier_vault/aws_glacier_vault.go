// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glacier_vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glacier_vault.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlacierVaultState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agv *Resource) Type() string {
	return "aws_glacier_vault"
}

// LocalName returns the local name for [Resource].
func (agv *Resource) LocalName() string {
	return agv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agv *Resource) Configuration() interface{} {
	return agv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agv *Resource) Dependencies() terra.Dependencies {
	return agv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agv *Resource) LifecycleManagement() *terra.Lifecycle {
	return agv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agv *Resource) Attributes() awsGlacierVaultAttributes {
	return awsGlacierVaultAttributes{ref: terra.ReferenceResource(agv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agv *Resource) ImportState(state io.Reader) error {
	agv.state = &awsGlacierVaultState{}
	if err := json.NewDecoder(state).Decode(agv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agv.Type(), agv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agv *Resource) State() (*awsGlacierVaultState, bool) {
	return agv.state, agv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agv *Resource) StateMust() *awsGlacierVaultState {
	if agv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agv.Type(), agv.LocalName()))
	}
	return agv.state
}

// Args contains the configurations for aws_glacier_vault.
type Args struct {
	// AccessPolicy: string, optional
	AccessPolicy terra.StringValue `hcl:"access_policy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Notification: optional
	Notification *Notification `hcl:"notification,block"`
}

type awsGlacierVaultAttributes struct {
	ref terra.Reference
}

// AccessPolicy returns a reference to field access_policy of aws_glacier_vault.
func (agv awsGlacierVaultAttributes) AccessPolicy() terra.StringValue {
	return terra.ReferenceAsString(agv.ref.Append("access_policy"))
}

// Arn returns a reference to field arn of aws_glacier_vault.
func (agv awsGlacierVaultAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agv.ref.Append("arn"))
}

// Id returns a reference to field id of aws_glacier_vault.
func (agv awsGlacierVaultAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agv.ref.Append("id"))
}

// Location returns a reference to field location of aws_glacier_vault.
func (agv awsGlacierVaultAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(agv.ref.Append("location"))
}

// Name returns a reference to field name of aws_glacier_vault.
func (agv awsGlacierVaultAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agv.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_glacier_vault.
func (agv awsGlacierVaultAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agv.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_glacier_vault.
func (agv awsGlacierVaultAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agv.ref.Append("tags_all"))
}

func (agv awsGlacierVaultAttributes) Notification() terra.ListValue[NotificationAttributes] {
	return terra.ReferenceAsList[NotificationAttributes](agv.ref.Append("notification"))
}

type awsGlacierVaultState struct {
	AccessPolicy string              `json:"access_policy"`
	Arn          string              `json:"arn"`
	Id           string              `json:"id"`
	Location     string              `json:"location"`
	Name         string              `json:"name"`
	Tags         map[string]string   `json:"tags"`
	TagsAll      map[string]string   `json:"tags_all"`
	Notification []NotificationState `json:"notification"`
}
