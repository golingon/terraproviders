// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_ipam_pool_cidr

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpc_ipam_pool_cidr.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpcIpamPoolCidrState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avipc *Resource) Type() string {
	return "aws_vpc_ipam_pool_cidr"
}

// LocalName returns the local name for [Resource].
func (avipc *Resource) LocalName() string {
	return avipc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avipc *Resource) Configuration() interface{} {
	return avipc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avipc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avipc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avipc *Resource) Dependencies() terra.Dependencies {
	return avipc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avipc *Resource) LifecycleManagement() *terra.Lifecycle {
	return avipc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avipc *Resource) Attributes() awsVpcIpamPoolCidrAttributes {
	return awsVpcIpamPoolCidrAttributes{ref: terra.ReferenceResource(avipc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avipc *Resource) ImportState(state io.Reader) error {
	avipc.state = &awsVpcIpamPoolCidrState{}
	if err := json.NewDecoder(state).Decode(avipc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avipc.Type(), avipc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avipc *Resource) State() (*awsVpcIpamPoolCidrState, bool) {
	return avipc.state, avipc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avipc *Resource) StateMust() *awsVpcIpamPoolCidrState {
	if avipc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avipc.Type(), avipc.LocalName()))
	}
	return avipc.state
}

// Args contains the configurations for aws_vpc_ipam_pool_cidr.
type Args struct {
	// Cidr: string, optional
	Cidr terra.StringValue `hcl:"cidr,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpamPoolId: string, required
	IpamPoolId terra.StringValue `hcl:"ipam_pool_id,attr" validate:"required"`
	// NetmaskLength: number, optional
	NetmaskLength terra.NumberValue `hcl:"netmask_length,attr"`
	// CidrAuthorizationContext: optional
	CidrAuthorizationContext *CidrAuthorizationContext `hcl:"cidr_authorization_context,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVpcIpamPoolCidrAttributes struct {
	ref terra.Reference
}

// Cidr returns a reference to field cidr of aws_vpc_ipam_pool_cidr.
func (avipc awsVpcIpamPoolCidrAttributes) Cidr() terra.StringValue {
	return terra.ReferenceAsString(avipc.ref.Append("cidr"))
}

// Id returns a reference to field id of aws_vpc_ipam_pool_cidr.
func (avipc awsVpcIpamPoolCidrAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avipc.ref.Append("id"))
}

// IpamPoolCidrId returns a reference to field ipam_pool_cidr_id of aws_vpc_ipam_pool_cidr.
func (avipc awsVpcIpamPoolCidrAttributes) IpamPoolCidrId() terra.StringValue {
	return terra.ReferenceAsString(avipc.ref.Append("ipam_pool_cidr_id"))
}

// IpamPoolId returns a reference to field ipam_pool_id of aws_vpc_ipam_pool_cidr.
func (avipc awsVpcIpamPoolCidrAttributes) IpamPoolId() terra.StringValue {
	return terra.ReferenceAsString(avipc.ref.Append("ipam_pool_id"))
}

// NetmaskLength returns a reference to field netmask_length of aws_vpc_ipam_pool_cidr.
func (avipc awsVpcIpamPoolCidrAttributes) NetmaskLength() terra.NumberValue {
	return terra.ReferenceAsNumber(avipc.ref.Append("netmask_length"))
}

func (avipc awsVpcIpamPoolCidrAttributes) CidrAuthorizationContext() terra.ListValue[CidrAuthorizationContextAttributes] {
	return terra.ReferenceAsList[CidrAuthorizationContextAttributes](avipc.ref.Append("cidr_authorization_context"))
}

func (avipc awsVpcIpamPoolCidrAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avipc.ref.Append("timeouts"))
}

type awsVpcIpamPoolCidrState struct {
	Cidr                     string                          `json:"cidr"`
	Id                       string                          `json:"id"`
	IpamPoolCidrId           string                          `json:"ipam_pool_cidr_id"`
	IpamPoolId               string                          `json:"ipam_pool_id"`
	NetmaskLength            float64                         `json:"netmask_length"`
	CidrAuthorizationContext []CidrAuthorizationContextState `json:"cidr_authorization_context"`
	Timeouts                 *TimeoutsState                  `json:"timeouts"`
}
