// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_load_balancer_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_load_balancer_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLoadBalancerPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (albp *Resource) Type() string {
	return "aws_load_balancer_policy"
}

// LocalName returns the local name for [Resource].
func (albp *Resource) LocalName() string {
	return albp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (albp *Resource) Configuration() interface{} {
	return albp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (albp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(albp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (albp *Resource) Dependencies() terra.Dependencies {
	return albp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (albp *Resource) LifecycleManagement() *terra.Lifecycle {
	return albp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (albp *Resource) Attributes() awsLoadBalancerPolicyAttributes {
	return awsLoadBalancerPolicyAttributes{ref: terra.ReferenceResource(albp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (albp *Resource) ImportState(state io.Reader) error {
	albp.state = &awsLoadBalancerPolicyState{}
	if err := json.NewDecoder(state).Decode(albp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", albp.Type(), albp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (albp *Resource) State() (*awsLoadBalancerPolicyState, bool) {
	return albp.state, albp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (albp *Resource) StateMust() *awsLoadBalancerPolicyState {
	if albp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", albp.Type(), albp.LocalName()))
	}
	return albp.state
}

// Args contains the configurations for aws_load_balancer_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoadBalancerName: string, required
	LoadBalancerName terra.StringValue `hcl:"load_balancer_name,attr" validate:"required"`
	// PolicyName: string, required
	PolicyName terra.StringValue `hcl:"policy_name,attr" validate:"required"`
	// PolicyTypeName: string, required
	PolicyTypeName terra.StringValue `hcl:"policy_type_name,attr" validate:"required"`
	// PolicyAttribute: min=0
	PolicyAttribute []PolicyAttribute `hcl:"policy_attribute,block" validate:"min=0"`
}

type awsLoadBalancerPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_load_balancer_policy.
func (albp awsLoadBalancerPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(albp.ref.Append("id"))
}

// LoadBalancerName returns a reference to field load_balancer_name of aws_load_balancer_policy.
func (albp awsLoadBalancerPolicyAttributes) LoadBalancerName() terra.StringValue {
	return terra.ReferenceAsString(albp.ref.Append("load_balancer_name"))
}

// PolicyName returns a reference to field policy_name of aws_load_balancer_policy.
func (albp awsLoadBalancerPolicyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceAsString(albp.ref.Append("policy_name"))
}

// PolicyTypeName returns a reference to field policy_type_name of aws_load_balancer_policy.
func (albp awsLoadBalancerPolicyAttributes) PolicyTypeName() terra.StringValue {
	return terra.ReferenceAsString(albp.ref.Append("policy_type_name"))
}

func (albp awsLoadBalancerPolicyAttributes) PolicyAttribute() terra.SetValue[PolicyAttributeAttributes] {
	return terra.ReferenceAsSet[PolicyAttributeAttributes](albp.ref.Append("policy_attribute"))
}

type awsLoadBalancerPolicyState struct {
	Id               string                 `json:"id"`
	LoadBalancerName string                 `json:"load_balancer_name"`
	PolicyName       string                 `json:"policy_name"`
	PolicyTypeName   string                 `json:"policy_type_name"`
	PolicyAttribute  []PolicyAttributeState `json:"policy_attribute"`
}
