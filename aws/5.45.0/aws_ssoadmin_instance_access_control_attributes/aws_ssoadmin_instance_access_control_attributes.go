// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssoadmin_instance_access_control_attributes

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ssoadmin_instance_access_control_attributes.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSsoadminInstanceAccessControlAttributesState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asiaca *Resource) Type() string {
	return "aws_ssoadmin_instance_access_control_attributes"
}

// LocalName returns the local name for [Resource].
func (asiaca *Resource) LocalName() string {
	return asiaca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asiaca *Resource) Configuration() interface{} {
	return asiaca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asiaca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asiaca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asiaca *Resource) Dependencies() terra.Dependencies {
	return asiaca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asiaca *Resource) LifecycleManagement() *terra.Lifecycle {
	return asiaca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asiaca *Resource) Attributes() awsSsoadminInstanceAccessControlAttributesAttributes {
	return awsSsoadminInstanceAccessControlAttributesAttributes{ref: terra.ReferenceResource(asiaca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asiaca *Resource) ImportState(state io.Reader) error {
	asiaca.state = &awsSsoadminInstanceAccessControlAttributesState{}
	if err := json.NewDecoder(state).Decode(asiaca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asiaca.Type(), asiaca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asiaca *Resource) State() (*awsSsoadminInstanceAccessControlAttributesState, bool) {
	return asiaca.state, asiaca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asiaca *Resource) StateMust() *awsSsoadminInstanceAccessControlAttributesState {
	if asiaca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asiaca.Type(), asiaca.LocalName()))
	}
	return asiaca.state
}

// Args contains the configurations for aws_ssoadmin_instance_access_control_attributes.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceArn: string, required
	InstanceArn terra.StringValue `hcl:"instance_arn,attr" validate:"required"`
	// Attribute: min=1
	Attribute []Attribute `hcl:"attribute,block" validate:"min=1"`
}

type awsSsoadminInstanceAccessControlAttributesAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ssoadmin_instance_access_control_attributes.
func (asiaca awsSsoadminInstanceAccessControlAttributesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asiaca.ref.Append("id"))
}

// InstanceArn returns a reference to field instance_arn of aws_ssoadmin_instance_access_control_attributes.
func (asiaca awsSsoadminInstanceAccessControlAttributesAttributes) InstanceArn() terra.StringValue {
	return terra.ReferenceAsString(asiaca.ref.Append("instance_arn"))
}

// Status returns a reference to field status of aws_ssoadmin_instance_access_control_attributes.
func (asiaca awsSsoadminInstanceAccessControlAttributesAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(asiaca.ref.Append("status"))
}

// StatusReason returns a reference to field status_reason of aws_ssoadmin_instance_access_control_attributes.
func (asiaca awsSsoadminInstanceAccessControlAttributesAttributes) StatusReason() terra.StringValue {
	return terra.ReferenceAsString(asiaca.ref.Append("status_reason"))
}

func (asiaca awsSsoadminInstanceAccessControlAttributesAttributes) Attribute() terra.SetValue[AttributeAttributes] {
	return terra.ReferenceAsSet[AttributeAttributes](asiaca.ref.Append("attribute"))
}

type awsSsoadminInstanceAccessControlAttributesState struct {
	Id           string           `json:"id"`
	InstanceArn  string           `json:"instance_arn"`
	Status       string           `json:"status"`
	StatusReason string           `json:"status_reason"`
	Attribute    []AttributeState `json:"attribute"`
}
