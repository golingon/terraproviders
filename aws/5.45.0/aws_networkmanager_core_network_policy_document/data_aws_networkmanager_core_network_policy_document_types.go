// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkmanager_core_network_policy_document

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataAttachmentPolicies struct {
	// ConditionLogic: string, optional
	ConditionLogic terra.StringValue `hcl:"condition_logic,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// RuleNumber: number, required
	RuleNumber terra.NumberValue `hcl:"rule_number,attr" validate:"required"`
	// AttachmentPoliciesAction: required
	Action *DataAttachmentPoliciesAction `hcl:"action,block" validate:"required"`
	// AttachmentPoliciesConditions: min=1
	Conditions []DataAttachmentPoliciesConditions `hcl:"conditions,block" validate:"min=1"`
}

type DataAttachmentPoliciesAction struct {
	// AssociationMethod: string, required
	AssociationMethod terra.StringValue `hcl:"association_method,attr" validate:"required"`
	// RequireAcceptance: bool, optional
	RequireAcceptance terra.BoolValue `hcl:"require_acceptance,attr"`
	// Segment: string, optional
	Segment terra.StringValue `hcl:"segment,attr"`
	// TagValueOfKey: string, optional
	TagValueOfKey terra.StringValue `hcl:"tag_value_of_key,attr"`
}

type DataAttachmentPoliciesConditions struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Operator: string, optional
	Operator terra.StringValue `hcl:"operator,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type DataCoreNetworkConfiguration struct {
	// AsnRanges: set of string, required
	AsnRanges terra.SetValue[terra.StringValue] `hcl:"asn_ranges,attr" validate:"required"`
	// InsideCidrBlocks: set of string, optional
	InsideCidrBlocks terra.SetValue[terra.StringValue] `hcl:"inside_cidr_blocks,attr"`
	// VpnEcmpSupport: bool, optional
	VpnEcmpSupport terra.BoolValue `hcl:"vpn_ecmp_support,attr"`
	// CoreNetworkConfigurationEdgeLocations: min=1
	EdgeLocations []DataCoreNetworkConfigurationEdgeLocations `hcl:"edge_locations,block" validate:"min=1"`
}

type DataCoreNetworkConfigurationEdgeLocations struct {
	// Asn: string, optional
	Asn terra.StringValue `hcl:"asn,attr"`
	// InsideCidrBlocks: list of string, optional
	InsideCidrBlocks terra.ListValue[terra.StringValue] `hcl:"inside_cidr_blocks,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
}

type DataSegmentActions struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DestinationCidrBlocks: set of string, optional
	DestinationCidrBlocks terra.SetValue[terra.StringValue] `hcl:"destination_cidr_blocks,attr"`
	// Destinations: set of string, optional
	Destinations terra.SetValue[terra.StringValue] `hcl:"destinations,attr"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// Segment: string, required
	Segment terra.StringValue `hcl:"segment,attr" validate:"required"`
	// ShareWith: set of string, optional
	ShareWith terra.SetValue[terra.StringValue] `hcl:"share_with,attr"`
	// ShareWithExcept: set of string, optional
	ShareWithExcept terra.SetValue[terra.StringValue] `hcl:"share_with_except,attr"`
}

type DataSegments struct {
	// AllowFilter: set of string, optional
	AllowFilter terra.SetValue[terra.StringValue] `hcl:"allow_filter,attr"`
	// DenyFilter: set of string, optional
	DenyFilter terra.SetValue[terra.StringValue] `hcl:"deny_filter,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EdgeLocations: set of string, optional
	EdgeLocations terra.SetValue[terra.StringValue] `hcl:"edge_locations,attr"`
	// IsolateAttachments: bool, optional
	IsolateAttachments terra.BoolValue `hcl:"isolate_attachments,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RequireAttachmentAcceptance: bool, optional
	RequireAttachmentAcceptance terra.BoolValue `hcl:"require_attachment_acceptance,attr"`
}

type DataAttachmentPoliciesAttributes struct {
	ref terra.Reference
}

func (ap DataAttachmentPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap DataAttachmentPoliciesAttributes) InternalWithRef(ref terra.Reference) DataAttachmentPoliciesAttributes {
	return DataAttachmentPoliciesAttributes{ref: ref}
}

func (ap DataAttachmentPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap DataAttachmentPoliciesAttributes) ConditionLogic() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("condition_logic"))
}

func (ap DataAttachmentPoliciesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("description"))
}

func (ap DataAttachmentPoliciesAttributes) RuleNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(ap.ref.Append("rule_number"))
}

func (ap DataAttachmentPoliciesAttributes) Action() terra.ListValue[DataAttachmentPoliciesActionAttributes] {
	return terra.ReferenceAsList[DataAttachmentPoliciesActionAttributes](ap.ref.Append("action"))
}

func (ap DataAttachmentPoliciesAttributes) Conditions() terra.ListValue[DataAttachmentPoliciesConditionsAttributes] {
	return terra.ReferenceAsList[DataAttachmentPoliciesConditionsAttributes](ap.ref.Append("conditions"))
}

type DataAttachmentPoliciesActionAttributes struct {
	ref terra.Reference
}

func (a DataAttachmentPoliciesActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DataAttachmentPoliciesActionAttributes) InternalWithRef(ref terra.Reference) DataAttachmentPoliciesActionAttributes {
	return DataAttachmentPoliciesActionAttributes{ref: ref}
}

func (a DataAttachmentPoliciesActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DataAttachmentPoliciesActionAttributes) AssociationMethod() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("association_method"))
}

func (a DataAttachmentPoliciesActionAttributes) RequireAcceptance() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("require_acceptance"))
}

func (a DataAttachmentPoliciesActionAttributes) Segment() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("segment"))
}

func (a DataAttachmentPoliciesActionAttributes) TagValueOfKey() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("tag_value_of_key"))
}

type DataAttachmentPoliciesConditionsAttributes struct {
	ref terra.Reference
}

func (c DataAttachmentPoliciesConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataAttachmentPoliciesConditionsAttributes) InternalWithRef(ref terra.Reference) DataAttachmentPoliciesConditionsAttributes {
	return DataAttachmentPoliciesConditionsAttributes{ref: ref}
}

func (c DataAttachmentPoliciesConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataAttachmentPoliciesConditionsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("key"))
}

func (c DataAttachmentPoliciesConditionsAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("operator"))
}

func (c DataAttachmentPoliciesConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

func (c DataAttachmentPoliciesConditionsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("value"))
}

type DataCoreNetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (cnc DataCoreNetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cnc.ref, nil
}

func (cnc DataCoreNetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) DataCoreNetworkConfigurationAttributes {
	return DataCoreNetworkConfigurationAttributes{ref: ref}
}

func (cnc DataCoreNetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cnc.ref.InternalTokens()
}

func (cnc DataCoreNetworkConfigurationAttributes) AsnRanges() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cnc.ref.Append("asn_ranges"))
}

func (cnc DataCoreNetworkConfigurationAttributes) InsideCidrBlocks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cnc.ref.Append("inside_cidr_blocks"))
}

func (cnc DataCoreNetworkConfigurationAttributes) VpnEcmpSupport() terra.BoolValue {
	return terra.ReferenceAsBool(cnc.ref.Append("vpn_ecmp_support"))
}

func (cnc DataCoreNetworkConfigurationAttributes) EdgeLocations() terra.ListValue[DataCoreNetworkConfigurationEdgeLocationsAttributes] {
	return terra.ReferenceAsList[DataCoreNetworkConfigurationEdgeLocationsAttributes](cnc.ref.Append("edge_locations"))
}

type DataCoreNetworkConfigurationEdgeLocationsAttributes struct {
	ref terra.Reference
}

func (el DataCoreNetworkConfigurationEdgeLocationsAttributes) InternalRef() (terra.Reference, error) {
	return el.ref, nil
}

func (el DataCoreNetworkConfigurationEdgeLocationsAttributes) InternalWithRef(ref terra.Reference) DataCoreNetworkConfigurationEdgeLocationsAttributes {
	return DataCoreNetworkConfigurationEdgeLocationsAttributes{ref: ref}
}

func (el DataCoreNetworkConfigurationEdgeLocationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return el.ref.InternalTokens()
}

func (el DataCoreNetworkConfigurationEdgeLocationsAttributes) Asn() terra.StringValue {
	return terra.ReferenceAsString(el.ref.Append("asn"))
}

func (el DataCoreNetworkConfigurationEdgeLocationsAttributes) InsideCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](el.ref.Append("inside_cidr_blocks"))
}

func (el DataCoreNetworkConfigurationEdgeLocationsAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(el.ref.Append("location"))
}

type DataSegmentActionsAttributes struct {
	ref terra.Reference
}

func (sa DataSegmentActionsAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa DataSegmentActionsAttributes) InternalWithRef(ref terra.Reference) DataSegmentActionsAttributes {
	return DataSegmentActionsAttributes{ref: ref}
}

func (sa DataSegmentActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa DataSegmentActionsAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("action"))
}

func (sa DataSegmentActionsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("description"))
}

func (sa DataSegmentActionsAttributes) DestinationCidrBlocks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sa.ref.Append("destination_cidr_blocks"))
}

func (sa DataSegmentActionsAttributes) Destinations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sa.ref.Append("destinations"))
}

func (sa DataSegmentActionsAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("mode"))
}

func (sa DataSegmentActionsAttributes) Segment() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("segment"))
}

func (sa DataSegmentActionsAttributes) ShareWith() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sa.ref.Append("share_with"))
}

func (sa DataSegmentActionsAttributes) ShareWithExcept() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sa.ref.Append("share_with_except"))
}

type DataSegmentsAttributes struct {
	ref terra.Reference
}

func (s DataSegmentsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataSegmentsAttributes) InternalWithRef(ref terra.Reference) DataSegmentsAttributes {
	return DataSegmentsAttributes{ref: ref}
}

func (s DataSegmentsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataSegmentsAttributes) AllowFilter() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("allow_filter"))
}

func (s DataSegmentsAttributes) DenyFilter() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("deny_filter"))
}

func (s DataSegmentsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("description"))
}

func (s DataSegmentsAttributes) EdgeLocations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("edge_locations"))
}

func (s DataSegmentsAttributes) IsolateAttachments() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("isolate_attachments"))
}

func (s DataSegmentsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s DataSegmentsAttributes) RequireAttachmentAcceptance() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("require_attachment_acceptance"))
}

type DataAttachmentPoliciesState struct {
	ConditionLogic string                                  `json:"condition_logic"`
	Description    string                                  `json:"description"`
	RuleNumber     float64                                 `json:"rule_number"`
	Action         []DataAttachmentPoliciesActionState     `json:"action"`
	Conditions     []DataAttachmentPoliciesConditionsState `json:"conditions"`
}

type DataAttachmentPoliciesActionState struct {
	AssociationMethod string `json:"association_method"`
	RequireAcceptance bool   `json:"require_acceptance"`
	Segment           string `json:"segment"`
	TagValueOfKey     string `json:"tag_value_of_key"`
}

type DataAttachmentPoliciesConditionsState struct {
	Key      string `json:"key"`
	Operator string `json:"operator"`
	Type     string `json:"type"`
	Value    string `json:"value"`
}

type DataCoreNetworkConfigurationState struct {
	AsnRanges        []string                                         `json:"asn_ranges"`
	InsideCidrBlocks []string                                         `json:"inside_cidr_blocks"`
	VpnEcmpSupport   bool                                             `json:"vpn_ecmp_support"`
	EdgeLocations    []DataCoreNetworkConfigurationEdgeLocationsState `json:"edge_locations"`
}

type DataCoreNetworkConfigurationEdgeLocationsState struct {
	Asn              string   `json:"asn"`
	InsideCidrBlocks []string `json:"inside_cidr_blocks"`
	Location         string   `json:"location"`
}

type DataSegmentActionsState struct {
	Action                string   `json:"action"`
	Description           string   `json:"description"`
	DestinationCidrBlocks []string `json:"destination_cidr_blocks"`
	Destinations          []string `json:"destinations"`
	Mode                  string   `json:"mode"`
	Segment               string   `json:"segment"`
	ShareWith             []string `json:"share_with"`
	ShareWithExcept       []string `json:"share_with_except"`
}

type DataSegmentsState struct {
	AllowFilter                 []string `json:"allow_filter"`
	DenyFilter                  []string `json:"deny_filter"`
	Description                 string   `json:"description"`
	EdgeLocations               []string `json:"edge_locations"`
	IsolateAttachments          bool     `json:"isolate_attachments"`
	Name                        string   `json:"name"`
	RequireAttachmentAcceptance bool     `json:"require_attachment_acceptance"`
}
