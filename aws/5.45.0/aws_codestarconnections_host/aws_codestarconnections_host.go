// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codestarconnections_host

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codestarconnections_host.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodestarconnectionsHostState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ach *Resource) Type() string {
	return "aws_codestarconnections_host"
}

// LocalName returns the local name for [Resource].
func (ach *Resource) LocalName() string {
	return ach.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ach *Resource) Configuration() interface{} {
	return ach.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ach *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ach)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ach *Resource) Dependencies() terra.Dependencies {
	return ach.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ach *Resource) LifecycleManagement() *terra.Lifecycle {
	return ach.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ach *Resource) Attributes() awsCodestarconnectionsHostAttributes {
	return awsCodestarconnectionsHostAttributes{ref: terra.ReferenceResource(ach)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ach *Resource) ImportState(state io.Reader) error {
	ach.state = &awsCodestarconnectionsHostState{}
	if err := json.NewDecoder(state).Decode(ach.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ach.Type(), ach.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ach *Resource) State() (*awsCodestarconnectionsHostState, bool) {
	return ach.state, ach.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ach *Resource) StateMust() *awsCodestarconnectionsHostState {
	if ach.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ach.Type(), ach.LocalName()))
	}
	return ach.state
}

// Args contains the configurations for aws_codestarconnections_host.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProviderEndpoint: string, required
	ProviderEndpoint terra.StringValue `hcl:"provider_endpoint,attr" validate:"required"`
	// ProviderType: string, required
	ProviderType terra.StringValue `hcl:"provider_type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcConfiguration: optional
	VpcConfiguration *VpcConfiguration `hcl:"vpc_configuration,block"`
}

type awsCodestarconnectionsHostAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_codestarconnections_host.
func (ach awsCodestarconnectionsHostAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ach.ref.Append("arn"))
}

// Id returns a reference to field id of aws_codestarconnections_host.
func (ach awsCodestarconnectionsHostAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ach.ref.Append("id"))
}

// Name returns a reference to field name of aws_codestarconnections_host.
func (ach awsCodestarconnectionsHostAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ach.ref.Append("name"))
}

// ProviderEndpoint returns a reference to field provider_endpoint of aws_codestarconnections_host.
func (ach awsCodestarconnectionsHostAttributes) ProviderEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ach.ref.Append("provider_endpoint"))
}

// ProviderType returns a reference to field provider_type of aws_codestarconnections_host.
func (ach awsCodestarconnectionsHostAttributes) ProviderType() terra.StringValue {
	return terra.ReferenceAsString(ach.ref.Append("provider_type"))
}

// Status returns a reference to field status of aws_codestarconnections_host.
func (ach awsCodestarconnectionsHostAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ach.ref.Append("status"))
}

func (ach awsCodestarconnectionsHostAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ach.ref.Append("timeouts"))
}

func (ach awsCodestarconnectionsHostAttributes) VpcConfiguration() terra.ListValue[VpcConfigurationAttributes] {
	return terra.ReferenceAsList[VpcConfigurationAttributes](ach.ref.Append("vpc_configuration"))
}

type awsCodestarconnectionsHostState struct {
	Arn              string                  `json:"arn"`
	Id               string                  `json:"id"`
	Name             string                  `json:"name"`
	ProviderEndpoint string                  `json:"provider_endpoint"`
	ProviderType     string                  `json:"provider_type"`
	Status           string                  `json:"status"`
	Timeouts         *TimeoutsState          `json:"timeouts"`
	VpcConfiguration []VpcConfigurationState `json:"vpc_configuration"`
}
