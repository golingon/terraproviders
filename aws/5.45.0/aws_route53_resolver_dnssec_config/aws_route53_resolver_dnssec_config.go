// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_resolver_dnssec_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53_resolver_dnssec_config.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53ResolverDnssecConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arrdc *Resource) Type() string {
	return "aws_route53_resolver_dnssec_config"
}

// LocalName returns the local name for [Resource].
func (arrdc *Resource) LocalName() string {
	return arrdc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arrdc *Resource) Configuration() interface{} {
	return arrdc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arrdc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arrdc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arrdc *Resource) Dependencies() terra.Dependencies {
	return arrdc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arrdc *Resource) LifecycleManagement() *terra.Lifecycle {
	return arrdc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arrdc *Resource) Attributes() awsRoute53ResolverDnssecConfigAttributes {
	return awsRoute53ResolverDnssecConfigAttributes{ref: terra.ReferenceResource(arrdc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arrdc *Resource) ImportState(state io.Reader) error {
	arrdc.state = &awsRoute53ResolverDnssecConfigState{}
	if err := json.NewDecoder(state).Decode(arrdc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arrdc.Type(), arrdc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arrdc *Resource) State() (*awsRoute53ResolverDnssecConfigState, bool) {
	return arrdc.state, arrdc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arrdc *Resource) StateMust() *awsRoute53ResolverDnssecConfigState {
	if arrdc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arrdc.Type(), arrdc.LocalName()))
	}
	return arrdc.state
}

// Args contains the configurations for aws_route53_resolver_dnssec_config.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
}

type awsRoute53ResolverDnssecConfigAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_route53_resolver_dnssec_config.
func (arrdc awsRoute53ResolverDnssecConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arrdc.ref.Append("arn"))
}

// Id returns a reference to field id of aws_route53_resolver_dnssec_config.
func (arrdc awsRoute53ResolverDnssecConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arrdc.ref.Append("id"))
}

// OwnerId returns a reference to field owner_id of aws_route53_resolver_dnssec_config.
func (arrdc awsRoute53ResolverDnssecConfigAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(arrdc.ref.Append("owner_id"))
}

// ResourceId returns a reference to field resource_id of aws_route53_resolver_dnssec_config.
func (arrdc awsRoute53ResolverDnssecConfigAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceAsString(arrdc.ref.Append("resource_id"))
}

// ValidationStatus returns a reference to field validation_status of aws_route53_resolver_dnssec_config.
func (arrdc awsRoute53ResolverDnssecConfigAttributes) ValidationStatus() terra.StringValue {
	return terra.ReferenceAsString(arrdc.ref.Append("validation_status"))
}

type awsRoute53ResolverDnssecConfigState struct {
	Arn              string `json:"arn"`
	Id               string `json:"id"`
	OwnerId          string `json:"owner_id"`
	ResourceId       string `json:"resource_id"`
	ValidationStatus string `json:"validation_status"`
}
