// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_chimesdkmediapipelines_media_insights_pipeline_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_chimesdkmediapipelines_media_insights_pipeline_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acmipc *Resource) Type() string {
	return "aws_chimesdkmediapipelines_media_insights_pipeline_configuration"
}

// LocalName returns the local name for [Resource].
func (acmipc *Resource) LocalName() string {
	return acmipc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acmipc *Resource) Configuration() interface{} {
	return acmipc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acmipc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acmipc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acmipc *Resource) Dependencies() terra.Dependencies {
	return acmipc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acmipc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acmipc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acmipc *Resource) Attributes() awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationAttributes {
	return awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationAttributes{ref: terra.ReferenceResource(acmipc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acmipc *Resource) ImportState(state io.Reader) error {
	acmipc.state = &awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationState{}
	if err := json.NewDecoder(state).Decode(acmipc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acmipc.Type(), acmipc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acmipc *Resource) State() (*awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationState, bool) {
	return acmipc.state, acmipc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acmipc *Resource) StateMust() *awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationState {
	if acmipc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acmipc.Type(), acmipc.LocalName()))
	}
	return acmipc.state
}

// Args contains the configurations for aws_chimesdkmediapipelines_media_insights_pipeline_configuration.
type Args struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceAccessRoleArn: string, required
	ResourceAccessRoleArn terra.StringValue `hcl:"resource_access_role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Elements: min=1
	Elements []Elements `hcl:"elements,block" validate:"min=1"`
	// RealTimeAlertConfiguration: optional
	RealTimeAlertConfiguration *RealTimeAlertConfiguration `hcl:"real_time_alert_configuration,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_chimesdkmediapipelines_media_insights_pipeline_configuration.
func (acmipc awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acmipc.ref.Append("arn"))
}

// Id returns a reference to field id of aws_chimesdkmediapipelines_media_insights_pipeline_configuration.
func (acmipc awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acmipc.ref.Append("id"))
}

// Name returns a reference to field name of aws_chimesdkmediapipelines_media_insights_pipeline_configuration.
func (acmipc awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acmipc.ref.Append("name"))
}

// ResourceAccessRoleArn returns a reference to field resource_access_role_arn of aws_chimesdkmediapipelines_media_insights_pipeline_configuration.
func (acmipc awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationAttributes) ResourceAccessRoleArn() terra.StringValue {
	return terra.ReferenceAsString(acmipc.ref.Append("resource_access_role_arn"))
}

// Tags returns a reference to field tags of aws_chimesdkmediapipelines_media_insights_pipeline_configuration.
func (acmipc awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acmipc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_chimesdkmediapipelines_media_insights_pipeline_configuration.
func (acmipc awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acmipc.ref.Append("tags_all"))
}

func (acmipc awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationAttributes) Elements() terra.ListValue[ElementsAttributes] {
	return terra.ReferenceAsList[ElementsAttributes](acmipc.ref.Append("elements"))
}

func (acmipc awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationAttributes) RealTimeAlertConfiguration() terra.ListValue[RealTimeAlertConfigurationAttributes] {
	return terra.ReferenceAsList[RealTimeAlertConfigurationAttributes](acmipc.ref.Append("real_time_alert_configuration"))
}

func (acmipc awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acmipc.ref.Append("timeouts"))
}

type awsChimesdkmediapipelinesMediaInsightsPipelineConfigurationState struct {
	Arn                        string                            `json:"arn"`
	Id                         string                            `json:"id"`
	Name                       string                            `json:"name"`
	ResourceAccessRoleArn      string                            `json:"resource_access_role_arn"`
	Tags                       map[string]string                 `json:"tags"`
	TagsAll                    map[string]string                 `json:"tags_all"`
	Elements                   []ElementsState                   `json:"elements"`
	RealTimeAlertConfiguration []RealTimeAlertConfigurationState `json:"real_time_alert_configuration"`
	Timeouts                   *TimeoutsState                    `json:"timeouts"`
}
