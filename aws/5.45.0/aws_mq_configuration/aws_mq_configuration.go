// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_mq_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_mq_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMqConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amc *Resource) Type() string {
	return "aws_mq_configuration"
}

// LocalName returns the local name for [Resource].
func (amc *Resource) LocalName() string {
	return amc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amc *Resource) Configuration() interface{} {
	return amc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amc *Resource) Dependencies() terra.Dependencies {
	return amc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amc *Resource) LifecycleManagement() *terra.Lifecycle {
	return amc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amc *Resource) Attributes() awsMqConfigurationAttributes {
	return awsMqConfigurationAttributes{ref: terra.ReferenceResource(amc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amc *Resource) ImportState(state io.Reader) error {
	amc.state = &awsMqConfigurationState{}
	if err := json.NewDecoder(state).Decode(amc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amc.Type(), amc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amc *Resource) State() (*awsMqConfigurationState, bool) {
	return amc.state, amc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amc *Resource) StateMust() *awsMqConfigurationState {
	if amc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amc.Type(), amc.LocalName()))
	}
	return amc.state
}

// Args contains the configurations for aws_mq_configuration.
type Args struct {
	// AuthenticationStrategy: string, optional
	AuthenticationStrategy terra.StringValue `hcl:"authentication_strategy,attr"`
	// Data: string, required
	Data terra.StringValue `hcl:"data,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EngineType: string, required
	EngineType terra.StringValue `hcl:"engine_type,attr" validate:"required"`
	// EngineVersion: string, required
	EngineVersion terra.StringValue `hcl:"engine_version,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsMqConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_mq_configuration.
func (amc awsMqConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("arn"))
}

// AuthenticationStrategy returns a reference to field authentication_strategy of aws_mq_configuration.
func (amc awsMqConfigurationAttributes) AuthenticationStrategy() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("authentication_strategy"))
}

// Data returns a reference to field data of aws_mq_configuration.
func (amc awsMqConfigurationAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("data"))
}

// Description returns a reference to field description of aws_mq_configuration.
func (amc awsMqConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("description"))
}

// EngineType returns a reference to field engine_type of aws_mq_configuration.
func (amc awsMqConfigurationAttributes) EngineType() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("engine_type"))
}

// EngineVersion returns a reference to field engine_version of aws_mq_configuration.
func (amc awsMqConfigurationAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("engine_version"))
}

// Id returns a reference to field id of aws_mq_configuration.
func (amc awsMqConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("id"))
}

// LatestRevision returns a reference to field latest_revision of aws_mq_configuration.
func (amc awsMqConfigurationAttributes) LatestRevision() terra.NumberValue {
	return terra.ReferenceAsNumber(amc.ref.Append("latest_revision"))
}

// Name returns a reference to field name of aws_mq_configuration.
func (amc awsMqConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_mq_configuration.
func (amc awsMqConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_mq_configuration.
func (amc awsMqConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amc.ref.Append("tags_all"))
}

type awsMqConfigurationState struct {
	Arn                    string            `json:"arn"`
	AuthenticationStrategy string            `json:"authentication_strategy"`
	Data                   string            `json:"data"`
	Description            string            `json:"description"`
	EngineType             string            `json:"engine_type"`
	EngineVersion          string            `json:"engine_version"`
	Id                     string            `json:"id"`
	LatestRevision         float64           `json:"latest_revision"`
	Name                   string            `json:"name"`
	Tags                   map[string]string `json:"tags"`
	TagsAll                map[string]string `json:"tags_all"`
}
