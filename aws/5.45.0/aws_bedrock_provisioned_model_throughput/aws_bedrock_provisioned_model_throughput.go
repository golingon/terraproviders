// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_bedrock_provisioned_model_throughput

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_bedrock_provisioned_model_throughput.
type Resource struct {
	Name      string
	Args      Args
	state     *awsBedrockProvisionedModelThroughputState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abpmt *Resource) Type() string {
	return "aws_bedrock_provisioned_model_throughput"
}

// LocalName returns the local name for [Resource].
func (abpmt *Resource) LocalName() string {
	return abpmt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abpmt *Resource) Configuration() interface{} {
	return abpmt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abpmt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abpmt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abpmt *Resource) Dependencies() terra.Dependencies {
	return abpmt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abpmt *Resource) LifecycleManagement() *terra.Lifecycle {
	return abpmt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abpmt *Resource) Attributes() awsBedrockProvisionedModelThroughputAttributes {
	return awsBedrockProvisionedModelThroughputAttributes{ref: terra.ReferenceResource(abpmt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abpmt *Resource) ImportState(state io.Reader) error {
	abpmt.state = &awsBedrockProvisionedModelThroughputState{}
	if err := json.NewDecoder(state).Decode(abpmt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abpmt.Type(), abpmt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abpmt *Resource) State() (*awsBedrockProvisionedModelThroughputState, bool) {
	return abpmt.state, abpmt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abpmt *Resource) StateMust() *awsBedrockProvisionedModelThroughputState {
	if abpmt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abpmt.Type(), abpmt.LocalName()))
	}
	return abpmt.state
}

// Args contains the configurations for aws_bedrock_provisioned_model_throughput.
type Args struct {
	// CommitmentDuration: string, optional
	CommitmentDuration terra.StringValue `hcl:"commitment_duration,attr"`
	// ModelArn: string, required
	ModelArn terra.StringValue `hcl:"model_arn,attr" validate:"required"`
	// ModelUnits: number, required
	ModelUnits terra.NumberValue `hcl:"model_units,attr" validate:"required"`
	// ProvisionedModelName: string, required
	ProvisionedModelName terra.StringValue `hcl:"provisioned_model_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsBedrockProvisionedModelThroughputAttributes struct {
	ref terra.Reference
}

// CommitmentDuration returns a reference to field commitment_duration of aws_bedrock_provisioned_model_throughput.
func (abpmt awsBedrockProvisionedModelThroughputAttributes) CommitmentDuration() terra.StringValue {
	return terra.ReferenceAsString(abpmt.ref.Append("commitment_duration"))
}

// Id returns a reference to field id of aws_bedrock_provisioned_model_throughput.
func (abpmt awsBedrockProvisionedModelThroughputAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abpmt.ref.Append("id"))
}

// ModelArn returns a reference to field model_arn of aws_bedrock_provisioned_model_throughput.
func (abpmt awsBedrockProvisionedModelThroughputAttributes) ModelArn() terra.StringValue {
	return terra.ReferenceAsString(abpmt.ref.Append("model_arn"))
}

// ModelUnits returns a reference to field model_units of aws_bedrock_provisioned_model_throughput.
func (abpmt awsBedrockProvisionedModelThroughputAttributes) ModelUnits() terra.NumberValue {
	return terra.ReferenceAsNumber(abpmt.ref.Append("model_units"))
}

// ProvisionedModelArn returns a reference to field provisioned_model_arn of aws_bedrock_provisioned_model_throughput.
func (abpmt awsBedrockProvisionedModelThroughputAttributes) ProvisionedModelArn() terra.StringValue {
	return terra.ReferenceAsString(abpmt.ref.Append("provisioned_model_arn"))
}

// ProvisionedModelName returns a reference to field provisioned_model_name of aws_bedrock_provisioned_model_throughput.
func (abpmt awsBedrockProvisionedModelThroughputAttributes) ProvisionedModelName() terra.StringValue {
	return terra.ReferenceAsString(abpmt.ref.Append("provisioned_model_name"))
}

// Tags returns a reference to field tags of aws_bedrock_provisioned_model_throughput.
func (abpmt awsBedrockProvisionedModelThroughputAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abpmt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_bedrock_provisioned_model_throughput.
func (abpmt awsBedrockProvisionedModelThroughputAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abpmt.ref.Append("tags_all"))
}

func (abpmt awsBedrockProvisionedModelThroughputAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abpmt.ref.Append("timeouts"))
}

type awsBedrockProvisionedModelThroughputState struct {
	CommitmentDuration   string            `json:"commitment_duration"`
	Id                   string            `json:"id"`
	ModelArn             string            `json:"model_arn"`
	ModelUnits           float64           `json:"model_units"`
	ProvisionedModelArn  string            `json:"provisioned_model_arn"`
	ProvisionedModelName string            `json:"provisioned_model_name"`
	Tags                 map[string]string `json:"tags"`
	TagsAll              map[string]string `json:"tags_all"`
	Timeouts             *TimeoutsState    `json:"timeouts"`
}
