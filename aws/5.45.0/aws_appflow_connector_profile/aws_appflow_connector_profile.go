// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appflow_connector_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_appflow_connector_profile.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppflowConnectorProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aacp *Resource) Type() string {
	return "aws_appflow_connector_profile"
}

// LocalName returns the local name for [Resource].
func (aacp *Resource) LocalName() string {
	return aacp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aacp *Resource) Configuration() interface{} {
	return aacp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aacp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aacp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aacp *Resource) Dependencies() terra.Dependencies {
	return aacp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aacp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aacp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aacp *Resource) Attributes() awsAppflowConnectorProfileAttributes {
	return awsAppflowConnectorProfileAttributes{ref: terra.ReferenceResource(aacp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aacp *Resource) ImportState(state io.Reader) error {
	aacp.state = &awsAppflowConnectorProfileState{}
	if err := json.NewDecoder(state).Decode(aacp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aacp.Type(), aacp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aacp *Resource) State() (*awsAppflowConnectorProfileState, bool) {
	return aacp.state, aacp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aacp *Resource) StateMust() *awsAppflowConnectorProfileState {
	if aacp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aacp.Type(), aacp.LocalName()))
	}
	return aacp.state
}

// Args contains the configurations for aws_appflow_connector_profile.
type Args struct {
	// ConnectionMode: string, required
	ConnectionMode terra.StringValue `hcl:"connection_mode,attr" validate:"required"`
	// ConnectorLabel: string, optional
	ConnectorLabel terra.StringValue `hcl:"connector_label,attr"`
	// ConnectorType: string, required
	ConnectorType terra.StringValue `hcl:"connector_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsArn: string, optional
	KmsArn terra.StringValue `hcl:"kms_arn,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ConnectorProfileConfig: required
	ConnectorProfileConfig *ConnectorProfileConfig `hcl:"connector_profile_config,block" validate:"required"`
}

type awsAppflowConnectorProfileAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_appflow_connector_profile.
func (aacp awsAppflowConnectorProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aacp.ref.Append("arn"))
}

// ConnectionMode returns a reference to field connection_mode of aws_appflow_connector_profile.
func (aacp awsAppflowConnectorProfileAttributes) ConnectionMode() terra.StringValue {
	return terra.ReferenceAsString(aacp.ref.Append("connection_mode"))
}

// ConnectorLabel returns a reference to field connector_label of aws_appflow_connector_profile.
func (aacp awsAppflowConnectorProfileAttributes) ConnectorLabel() terra.StringValue {
	return terra.ReferenceAsString(aacp.ref.Append("connector_label"))
}

// ConnectorType returns a reference to field connector_type of aws_appflow_connector_profile.
func (aacp awsAppflowConnectorProfileAttributes) ConnectorType() terra.StringValue {
	return terra.ReferenceAsString(aacp.ref.Append("connector_type"))
}

// CredentialsArn returns a reference to field credentials_arn of aws_appflow_connector_profile.
func (aacp awsAppflowConnectorProfileAttributes) CredentialsArn() terra.StringValue {
	return terra.ReferenceAsString(aacp.ref.Append("credentials_arn"))
}

// Id returns a reference to field id of aws_appflow_connector_profile.
func (aacp awsAppflowConnectorProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aacp.ref.Append("id"))
}

// KmsArn returns a reference to field kms_arn of aws_appflow_connector_profile.
func (aacp awsAppflowConnectorProfileAttributes) KmsArn() terra.StringValue {
	return terra.ReferenceAsString(aacp.ref.Append("kms_arn"))
}

// Name returns a reference to field name of aws_appflow_connector_profile.
func (aacp awsAppflowConnectorProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aacp.ref.Append("name"))
}

func (aacp awsAppflowConnectorProfileAttributes) ConnectorProfileConfig() terra.ListValue[ConnectorProfileConfigAttributes] {
	return terra.ReferenceAsList[ConnectorProfileConfigAttributes](aacp.ref.Append("connector_profile_config"))
}

type awsAppflowConnectorProfileState struct {
	Arn                    string                        `json:"arn"`
	ConnectionMode         string                        `json:"connection_mode"`
	ConnectorLabel         string                        `json:"connector_label"`
	ConnectorType          string                        `json:"connector_type"`
	CredentialsArn         string                        `json:"credentials_arn"`
	Id                     string                        `json:"id"`
	KmsArn                 string                        `json:"kms_arn"`
	Name                   string                        `json:"name"`
	ConnectorProfileConfig []ConnectorProfileConfigState `json:"connector_profile_config"`
}
