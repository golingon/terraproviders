// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appmesh_gateway_route

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Spec struct {
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// SpecGrpcRoute: optional
	GrpcRoute *SpecGrpcRoute `hcl:"grpc_route,block"`
	// SpecHttp2Route: optional
	Http2Route *SpecHttp2Route `hcl:"http2_route,block"`
	// SpecHttpRoute: optional
	HttpRoute *SpecHttpRoute `hcl:"http_route,block"`
}

type SpecGrpcRoute struct {
	// SpecGrpcRouteAction: required
	Action *SpecGrpcRouteAction `hcl:"action,block" validate:"required"`
	// SpecGrpcRouteMatch: required
	Match *SpecGrpcRouteMatch `hcl:"match,block" validate:"required"`
}

type SpecGrpcRouteAction struct {
	// SpecGrpcRouteActionTarget: required
	Target *SpecGrpcRouteActionTarget `hcl:"target,block" validate:"required"`
}

type SpecGrpcRouteActionTarget struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// SpecGrpcRoute11E31Be7: required
	VirtualService *SpecGrpcRoute11E31Be7 `hcl:"virtual_service,block" validate:"required"`
}

type SpecGrpcRoute11E31Be7 struct {
	// VirtualServiceName: string, required
	VirtualServiceName terra.StringValue `hcl:"virtual_service_name,attr" validate:"required"`
}

type SpecGrpcRouteMatch struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
}

type SpecHttp2Route struct {
	// SpecHttp2RouteAction: required
	Action *SpecHttp2RouteAction `hcl:"action,block" validate:"required"`
	// SpecHttp2RouteMatch: required
	Match *SpecHttp2RouteMatch `hcl:"match,block" validate:"required"`
}

type SpecHttp2RouteAction struct {
	// SpecHttp2RouteActionRewrite: optional
	Rewrite *SpecHttp2RouteActionRewrite `hcl:"rewrite,block"`
	// SpecHttp2RouteActionTarget: required
	Target *SpecHttp2RouteActionTarget `hcl:"target,block" validate:"required"`
}

type SpecHttp2RouteActionRewrite struct {
	// SpecHttp2Route94Aede07: optional
	Hostname *SpecHttp2Route94Aede07 `hcl:"hostname,block"`
	// SpecHttp2RouteFd7E59B3: optional
	Path *SpecHttp2RouteFd7E59B3 `hcl:"path,block"`
	// SpecHttp2Route760292F9: optional
	Prefix *SpecHttp2Route760292F9 `hcl:"prefix,block"`
}

type SpecHttp2Route94Aede07 struct {
	// DefaultTargetHostname: string, required
	DefaultTargetHostname terra.StringValue `hcl:"default_target_hostname,attr" validate:"required"`
}

type SpecHttp2RouteFd7E59B3 struct {
	// Exact: string, required
	Exact terra.StringValue `hcl:"exact,attr" validate:"required"`
}

type SpecHttp2Route760292F9 struct {
	// DefaultPrefix: string, optional
	DefaultPrefix terra.StringValue `hcl:"default_prefix,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type SpecHttp2RouteActionTarget struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// SpecHttp2Route11E31Be7: required
	VirtualService *SpecHttp2Route11E31Be7 `hcl:"virtual_service,block" validate:"required"`
}

type SpecHttp2Route11E31Be7 struct {
	// VirtualServiceName: string, required
	VirtualServiceName terra.StringValue `hcl:"virtual_service_name,attr" validate:"required"`
}

type SpecHttp2RouteMatch struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// SpecHttp2RouteMatchHeader: min=0,max=10
	Header []SpecHttp2RouteMatchHeader `hcl:"header,block" validate:"min=0,max=10"`
	// SpecHttp2RouteMatchHostname: optional
	Hostname *SpecHttp2RouteMatchHostname `hcl:"hostname,block"`
	// SpecHttp2RouteMatchPath: optional
	Path *SpecHttp2RouteMatchPath `hcl:"path,block"`
	// SpecHttp2RouteMatchQueryParameter: min=0,max=10
	QueryParameter []SpecHttp2RouteMatchQueryParameter `hcl:"query_parameter,block" validate:"min=0,max=10"`
}

type SpecHttp2RouteMatchHeader struct {
	// Invert: bool, optional
	Invert terra.BoolValue `hcl:"invert,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttp2Route30Dd3523: optional
	Match *SpecHttp2Route30Dd3523 `hcl:"match,block"`
}

type SpecHttp2Route30Dd3523 struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Regex: string, optional
	Regex terra.StringValue `hcl:"regex,attr"`
	// Suffix: string, optional
	Suffix terra.StringValue `hcl:"suffix,attr"`
	// SpecHttp2Route31605981: optional
	Range *SpecHttp2Route31605981 `hcl:"range,block"`
}

type SpecHttp2Route31605981 struct {
	// End: number, required
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Start: number, required
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type SpecHttp2RouteMatchHostname struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
	// Suffix: string, optional
	Suffix terra.StringValue `hcl:"suffix,attr"`
}

type SpecHttp2RouteMatchPath struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
	// Regex: string, optional
	Regex terra.StringValue `hcl:"regex,attr"`
}

type SpecHttp2RouteMatchQueryParameter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttp2RouteD36Dd47D: optional
	Match *SpecHttp2RouteD36Dd47D `hcl:"match,block"`
}

type SpecHttp2RouteD36Dd47D struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
}

type SpecHttpRoute struct {
	// SpecHttpRouteAction: required
	Action *SpecHttpRouteAction `hcl:"action,block" validate:"required"`
	// SpecHttpRouteMatch: required
	Match *SpecHttpRouteMatch `hcl:"match,block" validate:"required"`
}

type SpecHttpRouteAction struct {
	// SpecHttpRouteActionRewrite: optional
	Rewrite *SpecHttpRouteActionRewrite `hcl:"rewrite,block"`
	// SpecHttpRouteActionTarget: required
	Target *SpecHttpRouteActionTarget `hcl:"target,block" validate:"required"`
}

type SpecHttpRouteActionRewrite struct {
	// SpecHttpRoute94Aede07: optional
	Hostname *SpecHttpRoute94Aede07 `hcl:"hostname,block"`
	// SpecHttpRouteFd7E59B3: optional
	Path *SpecHttpRouteFd7E59B3 `hcl:"path,block"`
	// SpecHttpRoute760292F9: optional
	Prefix *SpecHttpRoute760292F9 `hcl:"prefix,block"`
}

type SpecHttpRoute94Aede07 struct {
	// DefaultTargetHostname: string, required
	DefaultTargetHostname terra.StringValue `hcl:"default_target_hostname,attr" validate:"required"`
}

type SpecHttpRouteFd7E59B3 struct {
	// Exact: string, required
	Exact terra.StringValue `hcl:"exact,attr" validate:"required"`
}

type SpecHttpRoute760292F9 struct {
	// DefaultPrefix: string, optional
	DefaultPrefix terra.StringValue `hcl:"default_prefix,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type SpecHttpRouteActionTarget struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// SpecHttpRoute11E31Be7: required
	VirtualService *SpecHttpRoute11E31Be7 `hcl:"virtual_service,block" validate:"required"`
}

type SpecHttpRoute11E31Be7 struct {
	// VirtualServiceName: string, required
	VirtualServiceName terra.StringValue `hcl:"virtual_service_name,attr" validate:"required"`
}

type SpecHttpRouteMatch struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// SpecHttpRouteMatchHeader: min=0,max=10
	Header []SpecHttpRouteMatchHeader `hcl:"header,block" validate:"min=0,max=10"`
	// SpecHttpRouteMatchHostname: optional
	Hostname *SpecHttpRouteMatchHostname `hcl:"hostname,block"`
	// SpecHttpRouteMatchPath: optional
	Path *SpecHttpRouteMatchPath `hcl:"path,block"`
	// SpecHttpRouteMatchQueryParameter: min=0,max=10
	QueryParameter []SpecHttpRouteMatchQueryParameter `hcl:"query_parameter,block" validate:"min=0,max=10"`
}

type SpecHttpRouteMatchHeader struct {
	// Invert: bool, optional
	Invert terra.BoolValue `hcl:"invert,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttpRoute30Dd3523: optional
	Match *SpecHttpRoute30Dd3523 `hcl:"match,block"`
}

type SpecHttpRoute30Dd3523 struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Regex: string, optional
	Regex terra.StringValue `hcl:"regex,attr"`
	// Suffix: string, optional
	Suffix terra.StringValue `hcl:"suffix,attr"`
	// SpecHttpRoute31605981: optional
	Range *SpecHttpRoute31605981 `hcl:"range,block"`
}

type SpecHttpRoute31605981 struct {
	// End: number, required
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Start: number, required
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type SpecHttpRouteMatchHostname struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
	// Suffix: string, optional
	Suffix terra.StringValue `hcl:"suffix,attr"`
}

type SpecHttpRouteMatchPath struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
	// Regex: string, optional
	Regex terra.StringValue `hcl:"regex,attr"`
}

type SpecHttpRouteMatchQueryParameter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttpRouteD36Dd47D: optional
	Match *SpecHttpRouteD36Dd47D `hcl:"match,block"`
}

type SpecHttpRouteD36Dd47D struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("priority"))
}

func (s SpecAttributes) GrpcRoute() terra.ListValue[SpecGrpcRouteAttributes] {
	return terra.ReferenceAsList[SpecGrpcRouteAttributes](s.ref.Append("grpc_route"))
}

func (s SpecAttributes) Http2Route() terra.ListValue[SpecHttp2RouteAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteAttributes](s.ref.Append("http2_route"))
}

func (s SpecAttributes) HttpRoute() terra.ListValue[SpecHttpRouteAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteAttributes](s.ref.Append("http_route"))
}

type SpecGrpcRouteAttributes struct {
	ref terra.Reference
}

func (gr SpecGrpcRouteAttributes) InternalRef() (terra.Reference, error) {
	return gr.ref, nil
}

func (gr SpecGrpcRouteAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteAttributes {
	return SpecGrpcRouteAttributes{ref: ref}
}

func (gr SpecGrpcRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gr.ref.InternalTokens()
}

func (gr SpecGrpcRouteAttributes) Action() terra.ListValue[SpecGrpcRouteActionAttributes] {
	return terra.ReferenceAsList[SpecGrpcRouteActionAttributes](gr.ref.Append("action"))
}

func (gr SpecGrpcRouteAttributes) Match() terra.ListValue[SpecGrpcRouteMatchAttributes] {
	return terra.ReferenceAsList[SpecGrpcRouteMatchAttributes](gr.ref.Append("match"))
}

type SpecGrpcRouteActionAttributes struct {
	ref terra.Reference
}

func (a SpecGrpcRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a SpecGrpcRouteActionAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteActionAttributes {
	return SpecGrpcRouteActionAttributes{ref: ref}
}

func (a SpecGrpcRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a SpecGrpcRouteActionAttributes) Target() terra.ListValue[SpecGrpcRouteActionTargetAttributes] {
	return terra.ReferenceAsList[SpecGrpcRouteActionTargetAttributes](a.ref.Append("target"))
}

type SpecGrpcRouteActionTargetAttributes struct {
	ref terra.Reference
}

func (t SpecGrpcRouteActionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t SpecGrpcRouteActionTargetAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteActionTargetAttributes {
	return SpecGrpcRouteActionTargetAttributes{ref: ref}
}

func (t SpecGrpcRouteActionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t SpecGrpcRouteActionTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("port"))
}

func (t SpecGrpcRouteActionTargetAttributes) VirtualService() terra.ListValue[SpecGrpcRoute11E31Be7Attributes] {
	return terra.ReferenceAsList[SpecGrpcRoute11E31Be7Attributes](t.ref.Append("virtual_service"))
}

type SpecGrpcRoute11E31Be7Attributes struct {
	ref terra.Reference
}

func (vs SpecGrpcRoute11E31Be7Attributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs SpecGrpcRoute11E31Be7Attributes) InternalWithRef(ref terra.Reference) SpecGrpcRoute11E31Be7Attributes {
	return SpecGrpcRoute11E31Be7Attributes{ref: ref}
}

func (vs SpecGrpcRoute11E31Be7Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs SpecGrpcRoute11E31Be7Attributes) VirtualServiceName() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("virtual_service_name"))
}

type SpecGrpcRouteMatchAttributes struct {
	ref terra.Reference
}

func (m SpecGrpcRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecGrpcRouteMatchAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteMatchAttributes {
	return SpecGrpcRouteMatchAttributes{ref: ref}
}

func (m SpecGrpcRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecGrpcRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m SpecGrpcRouteMatchAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("service_name"))
}

type SpecHttp2RouteAttributes struct {
	ref terra.Reference
}

func (hr SpecHttp2RouteAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr SpecHttp2RouteAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteAttributes {
	return SpecHttp2RouteAttributes{ref: ref}
}

func (hr SpecHttp2RouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr SpecHttp2RouteAttributes) Action() terra.ListValue[SpecHttp2RouteActionAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteActionAttributes](hr.ref.Append("action"))
}

func (hr SpecHttp2RouteAttributes) Match() terra.ListValue[SpecHttp2RouteMatchAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteMatchAttributes](hr.ref.Append("match"))
}

type SpecHttp2RouteActionAttributes struct {
	ref terra.Reference
}

func (a SpecHttp2RouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a SpecHttp2RouteActionAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteActionAttributes {
	return SpecHttp2RouteActionAttributes{ref: ref}
}

func (a SpecHttp2RouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a SpecHttp2RouteActionAttributes) Rewrite() terra.ListValue[SpecHttp2RouteActionRewriteAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteActionRewriteAttributes](a.ref.Append("rewrite"))
}

func (a SpecHttp2RouteActionAttributes) Target() terra.ListValue[SpecHttp2RouteActionTargetAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteActionTargetAttributes](a.ref.Append("target"))
}

type SpecHttp2RouteActionRewriteAttributes struct {
	ref terra.Reference
}

func (r SpecHttp2RouteActionRewriteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r SpecHttp2RouteActionRewriteAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteActionRewriteAttributes {
	return SpecHttp2RouteActionRewriteAttributes{ref: ref}
}

func (r SpecHttp2RouteActionRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r SpecHttp2RouteActionRewriteAttributes) Hostname() terra.ListValue[SpecHttp2Route94Aede07Attributes] {
	return terra.ReferenceAsList[SpecHttp2Route94Aede07Attributes](r.ref.Append("hostname"))
}

func (r SpecHttp2RouteActionRewriteAttributes) Path() terra.ListValue[SpecHttp2RouteFd7E59B3Attributes] {
	return terra.ReferenceAsList[SpecHttp2RouteFd7E59B3Attributes](r.ref.Append("path"))
}

func (r SpecHttp2RouteActionRewriteAttributes) Prefix() terra.ListValue[SpecHttp2Route760292F9Attributes] {
	return terra.ReferenceAsList[SpecHttp2Route760292F9Attributes](r.ref.Append("prefix"))
}

type SpecHttp2Route94Aede07Attributes struct {
	ref terra.Reference
}

func (h SpecHttp2Route94Aede07Attributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h SpecHttp2Route94Aede07Attributes) InternalWithRef(ref terra.Reference) SpecHttp2Route94Aede07Attributes {
	return SpecHttp2Route94Aede07Attributes{ref: ref}
}

func (h SpecHttp2Route94Aede07Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h SpecHttp2Route94Aede07Attributes) DefaultTargetHostname() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("default_target_hostname"))
}

type SpecHttp2RouteFd7E59B3Attributes struct {
	ref terra.Reference
}

func (p SpecHttp2RouteFd7E59B3Attributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p SpecHttp2RouteFd7E59B3Attributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteFd7E59B3Attributes {
	return SpecHttp2RouteFd7E59B3Attributes{ref: ref}
}

func (p SpecHttp2RouteFd7E59B3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p SpecHttp2RouteFd7E59B3Attributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

type SpecHttp2Route760292F9Attributes struct {
	ref terra.Reference
}

func (p SpecHttp2Route760292F9Attributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p SpecHttp2Route760292F9Attributes) InternalWithRef(ref terra.Reference) SpecHttp2Route760292F9Attributes {
	return SpecHttp2Route760292F9Attributes{ref: ref}
}

func (p SpecHttp2Route760292F9Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p SpecHttp2Route760292F9Attributes) DefaultPrefix() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("default_prefix"))
}

func (p SpecHttp2Route760292F9Attributes) Value() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value"))
}

type SpecHttp2RouteActionTargetAttributes struct {
	ref terra.Reference
}

func (t SpecHttp2RouteActionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t SpecHttp2RouteActionTargetAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteActionTargetAttributes {
	return SpecHttp2RouteActionTargetAttributes{ref: ref}
}

func (t SpecHttp2RouteActionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t SpecHttp2RouteActionTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("port"))
}

func (t SpecHttp2RouteActionTargetAttributes) VirtualService() terra.ListValue[SpecHttp2Route11E31Be7Attributes] {
	return terra.ReferenceAsList[SpecHttp2Route11E31Be7Attributes](t.ref.Append("virtual_service"))
}

type SpecHttp2Route11E31Be7Attributes struct {
	ref terra.Reference
}

func (vs SpecHttp2Route11E31Be7Attributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs SpecHttp2Route11E31Be7Attributes) InternalWithRef(ref terra.Reference) SpecHttp2Route11E31Be7Attributes {
	return SpecHttp2Route11E31Be7Attributes{ref: ref}
}

func (vs SpecHttp2Route11E31Be7Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs SpecHttp2Route11E31Be7Attributes) VirtualServiceName() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("virtual_service_name"))
}

type SpecHttp2RouteMatchAttributes struct {
	ref terra.Reference
}

func (m SpecHttp2RouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecHttp2RouteMatchAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteMatchAttributes {
	return SpecHttp2RouteMatchAttributes{ref: ref}
}

func (m SpecHttp2RouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecHttp2RouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m SpecHttp2RouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m SpecHttp2RouteMatchAttributes) Header() terra.SetValue[SpecHttp2RouteMatchHeaderAttributes] {
	return terra.ReferenceAsSet[SpecHttp2RouteMatchHeaderAttributes](m.ref.Append("header"))
}

func (m SpecHttp2RouteMatchAttributes) Hostname() terra.ListValue[SpecHttp2RouteMatchHostnameAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteMatchHostnameAttributes](m.ref.Append("hostname"))
}

func (m SpecHttp2RouteMatchAttributes) Path() terra.ListValue[SpecHttp2RouteMatchPathAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteMatchPathAttributes](m.ref.Append("path"))
}

func (m SpecHttp2RouteMatchAttributes) QueryParameter() terra.SetValue[SpecHttp2RouteMatchQueryParameterAttributes] {
	return terra.ReferenceAsSet[SpecHttp2RouteMatchQueryParameterAttributes](m.ref.Append("query_parameter"))
}

type SpecHttp2RouteMatchHeaderAttributes struct {
	ref terra.Reference
}

func (h SpecHttp2RouteMatchHeaderAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h SpecHttp2RouteMatchHeaderAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteMatchHeaderAttributes {
	return SpecHttp2RouteMatchHeaderAttributes{ref: ref}
}

func (h SpecHttp2RouteMatchHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h SpecHttp2RouteMatchHeaderAttributes) Invert() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("invert"))
}

func (h SpecHttp2RouteMatchHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("name"))
}

func (h SpecHttp2RouteMatchHeaderAttributes) Match() terra.ListValue[SpecHttp2Route30Dd3523Attributes] {
	return terra.ReferenceAsList[SpecHttp2Route30Dd3523Attributes](h.ref.Append("match"))
}

type SpecHttp2Route30Dd3523Attributes struct {
	ref terra.Reference
}

func (m SpecHttp2Route30Dd3523Attributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecHttp2Route30Dd3523Attributes) InternalWithRef(ref terra.Reference) SpecHttp2Route30Dd3523Attributes {
	return SpecHttp2Route30Dd3523Attributes{ref: ref}
}

func (m SpecHttp2Route30Dd3523Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecHttp2Route30Dd3523Attributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m SpecHttp2Route30Dd3523Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m SpecHttp2Route30Dd3523Attributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex"))
}

func (m SpecHttp2Route30Dd3523Attributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("suffix"))
}

func (m SpecHttp2Route30Dd3523Attributes) Range() terra.ListValue[SpecHttp2Route31605981Attributes] {
	return terra.ReferenceAsList[SpecHttp2Route31605981Attributes](m.ref.Append("range"))
}

type SpecHttp2Route31605981Attributes struct {
	ref terra.Reference
}

func (r SpecHttp2Route31605981Attributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r SpecHttp2Route31605981Attributes) InternalWithRef(ref terra.Reference) SpecHttp2Route31605981Attributes {
	return SpecHttp2Route31605981Attributes{ref: ref}
}

func (r SpecHttp2Route31605981Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r SpecHttp2Route31605981Attributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r SpecHttp2Route31605981Attributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type SpecHttp2RouteMatchHostnameAttributes struct {
	ref terra.Reference
}

func (h SpecHttp2RouteMatchHostnameAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h SpecHttp2RouteMatchHostnameAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteMatchHostnameAttributes {
	return SpecHttp2RouteMatchHostnameAttributes{ref: ref}
}

func (h SpecHttp2RouteMatchHostnameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h SpecHttp2RouteMatchHostnameAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("exact"))
}

func (h SpecHttp2RouteMatchHostnameAttributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("suffix"))
}

type SpecHttp2RouteMatchPathAttributes struct {
	ref terra.Reference
}

func (p SpecHttp2RouteMatchPathAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p SpecHttp2RouteMatchPathAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteMatchPathAttributes {
	return SpecHttp2RouteMatchPathAttributes{ref: ref}
}

func (p SpecHttp2RouteMatchPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p SpecHttp2RouteMatchPathAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

func (p SpecHttp2RouteMatchPathAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("regex"))
}

type SpecHttp2RouteMatchQueryParameterAttributes struct {
	ref terra.Reference
}

func (qp SpecHttp2RouteMatchQueryParameterAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp SpecHttp2RouteMatchQueryParameterAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteMatchQueryParameterAttributes {
	return SpecHttp2RouteMatchQueryParameterAttributes{ref: ref}
}

func (qp SpecHttp2RouteMatchQueryParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp SpecHttp2RouteMatchQueryParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("name"))
}

func (qp SpecHttp2RouteMatchQueryParameterAttributes) Match() terra.ListValue[SpecHttp2RouteD36Dd47DAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteD36Dd47DAttributes](qp.ref.Append("match"))
}

type SpecHttp2RouteD36Dd47DAttributes struct {
	ref terra.Reference
}

func (m SpecHttp2RouteD36Dd47DAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecHttp2RouteD36Dd47DAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteD36Dd47DAttributes {
	return SpecHttp2RouteD36Dd47DAttributes{ref: ref}
}

func (m SpecHttp2RouteD36Dd47DAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecHttp2RouteD36Dd47DAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

type SpecHttpRouteAttributes struct {
	ref terra.Reference
}

func (hr SpecHttpRouteAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr SpecHttpRouteAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteAttributes {
	return SpecHttpRouteAttributes{ref: ref}
}

func (hr SpecHttpRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr SpecHttpRouteAttributes) Action() terra.ListValue[SpecHttpRouteActionAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteActionAttributes](hr.ref.Append("action"))
}

func (hr SpecHttpRouteAttributes) Match() terra.ListValue[SpecHttpRouteMatchAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteMatchAttributes](hr.ref.Append("match"))
}

type SpecHttpRouteActionAttributes struct {
	ref terra.Reference
}

func (a SpecHttpRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a SpecHttpRouteActionAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteActionAttributes {
	return SpecHttpRouteActionAttributes{ref: ref}
}

func (a SpecHttpRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a SpecHttpRouteActionAttributes) Rewrite() terra.ListValue[SpecHttpRouteActionRewriteAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteActionRewriteAttributes](a.ref.Append("rewrite"))
}

func (a SpecHttpRouteActionAttributes) Target() terra.ListValue[SpecHttpRouteActionTargetAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteActionTargetAttributes](a.ref.Append("target"))
}

type SpecHttpRouteActionRewriteAttributes struct {
	ref terra.Reference
}

func (r SpecHttpRouteActionRewriteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r SpecHttpRouteActionRewriteAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteActionRewriteAttributes {
	return SpecHttpRouteActionRewriteAttributes{ref: ref}
}

func (r SpecHttpRouteActionRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r SpecHttpRouteActionRewriteAttributes) Hostname() terra.ListValue[SpecHttpRoute94Aede07Attributes] {
	return terra.ReferenceAsList[SpecHttpRoute94Aede07Attributes](r.ref.Append("hostname"))
}

func (r SpecHttpRouteActionRewriteAttributes) Path() terra.ListValue[SpecHttpRouteFd7E59B3Attributes] {
	return terra.ReferenceAsList[SpecHttpRouteFd7E59B3Attributes](r.ref.Append("path"))
}

func (r SpecHttpRouteActionRewriteAttributes) Prefix() terra.ListValue[SpecHttpRoute760292F9Attributes] {
	return terra.ReferenceAsList[SpecHttpRoute760292F9Attributes](r.ref.Append("prefix"))
}

type SpecHttpRoute94Aede07Attributes struct {
	ref terra.Reference
}

func (h SpecHttpRoute94Aede07Attributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h SpecHttpRoute94Aede07Attributes) InternalWithRef(ref terra.Reference) SpecHttpRoute94Aede07Attributes {
	return SpecHttpRoute94Aede07Attributes{ref: ref}
}

func (h SpecHttpRoute94Aede07Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h SpecHttpRoute94Aede07Attributes) DefaultTargetHostname() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("default_target_hostname"))
}

type SpecHttpRouteFd7E59B3Attributes struct {
	ref terra.Reference
}

func (p SpecHttpRouteFd7E59B3Attributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p SpecHttpRouteFd7E59B3Attributes) InternalWithRef(ref terra.Reference) SpecHttpRouteFd7E59B3Attributes {
	return SpecHttpRouteFd7E59B3Attributes{ref: ref}
}

func (p SpecHttpRouteFd7E59B3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p SpecHttpRouteFd7E59B3Attributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

type SpecHttpRoute760292F9Attributes struct {
	ref terra.Reference
}

func (p SpecHttpRoute760292F9Attributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p SpecHttpRoute760292F9Attributes) InternalWithRef(ref terra.Reference) SpecHttpRoute760292F9Attributes {
	return SpecHttpRoute760292F9Attributes{ref: ref}
}

func (p SpecHttpRoute760292F9Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p SpecHttpRoute760292F9Attributes) DefaultPrefix() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("default_prefix"))
}

func (p SpecHttpRoute760292F9Attributes) Value() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value"))
}

type SpecHttpRouteActionTargetAttributes struct {
	ref terra.Reference
}

func (t SpecHttpRouteActionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t SpecHttpRouteActionTargetAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteActionTargetAttributes {
	return SpecHttpRouteActionTargetAttributes{ref: ref}
}

func (t SpecHttpRouteActionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t SpecHttpRouteActionTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("port"))
}

func (t SpecHttpRouteActionTargetAttributes) VirtualService() terra.ListValue[SpecHttpRoute11E31Be7Attributes] {
	return terra.ReferenceAsList[SpecHttpRoute11E31Be7Attributes](t.ref.Append("virtual_service"))
}

type SpecHttpRoute11E31Be7Attributes struct {
	ref terra.Reference
}

func (vs SpecHttpRoute11E31Be7Attributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs SpecHttpRoute11E31Be7Attributes) InternalWithRef(ref terra.Reference) SpecHttpRoute11E31Be7Attributes {
	return SpecHttpRoute11E31Be7Attributes{ref: ref}
}

func (vs SpecHttpRoute11E31Be7Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs SpecHttpRoute11E31Be7Attributes) VirtualServiceName() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("virtual_service_name"))
}

type SpecHttpRouteMatchAttributes struct {
	ref terra.Reference
}

func (m SpecHttpRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecHttpRouteMatchAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteMatchAttributes {
	return SpecHttpRouteMatchAttributes{ref: ref}
}

func (m SpecHttpRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecHttpRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m SpecHttpRouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m SpecHttpRouteMatchAttributes) Header() terra.SetValue[SpecHttpRouteMatchHeaderAttributes] {
	return terra.ReferenceAsSet[SpecHttpRouteMatchHeaderAttributes](m.ref.Append("header"))
}

func (m SpecHttpRouteMatchAttributes) Hostname() terra.ListValue[SpecHttpRouteMatchHostnameAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteMatchHostnameAttributes](m.ref.Append("hostname"))
}

func (m SpecHttpRouteMatchAttributes) Path() terra.ListValue[SpecHttpRouteMatchPathAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteMatchPathAttributes](m.ref.Append("path"))
}

func (m SpecHttpRouteMatchAttributes) QueryParameter() terra.SetValue[SpecHttpRouteMatchQueryParameterAttributes] {
	return terra.ReferenceAsSet[SpecHttpRouteMatchQueryParameterAttributes](m.ref.Append("query_parameter"))
}

type SpecHttpRouteMatchHeaderAttributes struct {
	ref terra.Reference
}

func (h SpecHttpRouteMatchHeaderAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h SpecHttpRouteMatchHeaderAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteMatchHeaderAttributes {
	return SpecHttpRouteMatchHeaderAttributes{ref: ref}
}

func (h SpecHttpRouteMatchHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h SpecHttpRouteMatchHeaderAttributes) Invert() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("invert"))
}

func (h SpecHttpRouteMatchHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("name"))
}

func (h SpecHttpRouteMatchHeaderAttributes) Match() terra.ListValue[SpecHttpRoute30Dd3523Attributes] {
	return terra.ReferenceAsList[SpecHttpRoute30Dd3523Attributes](h.ref.Append("match"))
}

type SpecHttpRoute30Dd3523Attributes struct {
	ref terra.Reference
}

func (m SpecHttpRoute30Dd3523Attributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecHttpRoute30Dd3523Attributes) InternalWithRef(ref terra.Reference) SpecHttpRoute30Dd3523Attributes {
	return SpecHttpRoute30Dd3523Attributes{ref: ref}
}

func (m SpecHttpRoute30Dd3523Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecHttpRoute30Dd3523Attributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m SpecHttpRoute30Dd3523Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m SpecHttpRoute30Dd3523Attributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex"))
}

func (m SpecHttpRoute30Dd3523Attributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("suffix"))
}

func (m SpecHttpRoute30Dd3523Attributes) Range() terra.ListValue[SpecHttpRoute31605981Attributes] {
	return terra.ReferenceAsList[SpecHttpRoute31605981Attributes](m.ref.Append("range"))
}

type SpecHttpRoute31605981Attributes struct {
	ref terra.Reference
}

func (r SpecHttpRoute31605981Attributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r SpecHttpRoute31605981Attributes) InternalWithRef(ref terra.Reference) SpecHttpRoute31605981Attributes {
	return SpecHttpRoute31605981Attributes{ref: ref}
}

func (r SpecHttpRoute31605981Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r SpecHttpRoute31605981Attributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r SpecHttpRoute31605981Attributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type SpecHttpRouteMatchHostnameAttributes struct {
	ref terra.Reference
}

func (h SpecHttpRouteMatchHostnameAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h SpecHttpRouteMatchHostnameAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteMatchHostnameAttributes {
	return SpecHttpRouteMatchHostnameAttributes{ref: ref}
}

func (h SpecHttpRouteMatchHostnameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h SpecHttpRouteMatchHostnameAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("exact"))
}

func (h SpecHttpRouteMatchHostnameAttributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("suffix"))
}

type SpecHttpRouteMatchPathAttributes struct {
	ref terra.Reference
}

func (p SpecHttpRouteMatchPathAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p SpecHttpRouteMatchPathAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteMatchPathAttributes {
	return SpecHttpRouteMatchPathAttributes{ref: ref}
}

func (p SpecHttpRouteMatchPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p SpecHttpRouteMatchPathAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

func (p SpecHttpRouteMatchPathAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("regex"))
}

type SpecHttpRouteMatchQueryParameterAttributes struct {
	ref terra.Reference
}

func (qp SpecHttpRouteMatchQueryParameterAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp SpecHttpRouteMatchQueryParameterAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteMatchQueryParameterAttributes {
	return SpecHttpRouteMatchQueryParameterAttributes{ref: ref}
}

func (qp SpecHttpRouteMatchQueryParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp SpecHttpRouteMatchQueryParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("name"))
}

func (qp SpecHttpRouteMatchQueryParameterAttributes) Match() terra.ListValue[SpecHttpRouteD36Dd47DAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteD36Dd47DAttributes](qp.ref.Append("match"))
}

type SpecHttpRouteD36Dd47DAttributes struct {
	ref terra.Reference
}

func (m SpecHttpRouteD36Dd47DAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecHttpRouteD36Dd47DAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteD36Dd47DAttributes {
	return SpecHttpRouteD36Dd47DAttributes{ref: ref}
}

func (m SpecHttpRouteD36Dd47DAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecHttpRouteD36Dd47DAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

type SpecState struct {
	Priority   float64               `json:"priority"`
	GrpcRoute  []SpecGrpcRouteState  `json:"grpc_route"`
	Http2Route []SpecHttp2RouteState `json:"http2_route"`
	HttpRoute  []SpecHttpRouteState  `json:"http_route"`
}

type SpecGrpcRouteState struct {
	Action []SpecGrpcRouteActionState `json:"action"`
	Match  []SpecGrpcRouteMatchState  `json:"match"`
}

type SpecGrpcRouteActionState struct {
	Target []SpecGrpcRouteActionTargetState `json:"target"`
}

type SpecGrpcRouteActionTargetState struct {
	Port           float64                      `json:"port"`
	VirtualService []SpecGrpcRoute11E31Be7State `json:"virtual_service"`
}

type SpecGrpcRoute11E31Be7State struct {
	VirtualServiceName string `json:"virtual_service_name"`
}

type SpecGrpcRouteMatchState struct {
	Port        float64 `json:"port"`
	ServiceName string  `json:"service_name"`
}

type SpecHttp2RouteState struct {
	Action []SpecHttp2RouteActionState `json:"action"`
	Match  []SpecHttp2RouteMatchState  `json:"match"`
}

type SpecHttp2RouteActionState struct {
	Rewrite []SpecHttp2RouteActionRewriteState `json:"rewrite"`
	Target  []SpecHttp2RouteActionTargetState  `json:"target"`
}

type SpecHttp2RouteActionRewriteState struct {
	Hostname []SpecHttp2Route94Aede07State `json:"hostname"`
	Path     []SpecHttp2RouteFd7E59B3State `json:"path"`
	Prefix   []SpecHttp2Route760292F9State `json:"prefix"`
}

type SpecHttp2Route94Aede07State struct {
	DefaultTargetHostname string `json:"default_target_hostname"`
}

type SpecHttp2RouteFd7E59B3State struct {
	Exact string `json:"exact"`
}

type SpecHttp2Route760292F9State struct {
	DefaultPrefix string `json:"default_prefix"`
	Value         string `json:"value"`
}

type SpecHttp2RouteActionTargetState struct {
	Port           float64                       `json:"port"`
	VirtualService []SpecHttp2Route11E31Be7State `json:"virtual_service"`
}

type SpecHttp2Route11E31Be7State struct {
	VirtualServiceName string `json:"virtual_service_name"`
}

type SpecHttp2RouteMatchState struct {
	Port           float64                                  `json:"port"`
	Prefix         string                                   `json:"prefix"`
	Header         []SpecHttp2RouteMatchHeaderState         `json:"header"`
	Hostname       []SpecHttp2RouteMatchHostnameState       `json:"hostname"`
	Path           []SpecHttp2RouteMatchPathState           `json:"path"`
	QueryParameter []SpecHttp2RouteMatchQueryParameterState `json:"query_parameter"`
}

type SpecHttp2RouteMatchHeaderState struct {
	Invert bool                          `json:"invert"`
	Name   string                        `json:"name"`
	Match  []SpecHttp2Route30Dd3523State `json:"match"`
}

type SpecHttp2Route30Dd3523State struct {
	Exact  string                        `json:"exact"`
	Prefix string                        `json:"prefix"`
	Regex  string                        `json:"regex"`
	Suffix string                        `json:"suffix"`
	Range  []SpecHttp2Route31605981State `json:"range"`
}

type SpecHttp2Route31605981State struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type SpecHttp2RouteMatchHostnameState struct {
	Exact  string `json:"exact"`
	Suffix string `json:"suffix"`
}

type SpecHttp2RouteMatchPathState struct {
	Exact string `json:"exact"`
	Regex string `json:"regex"`
}

type SpecHttp2RouteMatchQueryParameterState struct {
	Name  string                        `json:"name"`
	Match []SpecHttp2RouteD36Dd47DState `json:"match"`
}

type SpecHttp2RouteD36Dd47DState struct {
	Exact string `json:"exact"`
}

type SpecHttpRouteState struct {
	Action []SpecHttpRouteActionState `json:"action"`
	Match  []SpecHttpRouteMatchState  `json:"match"`
}

type SpecHttpRouteActionState struct {
	Rewrite []SpecHttpRouteActionRewriteState `json:"rewrite"`
	Target  []SpecHttpRouteActionTargetState  `json:"target"`
}

type SpecHttpRouteActionRewriteState struct {
	Hostname []SpecHttpRoute94Aede07State `json:"hostname"`
	Path     []SpecHttpRouteFd7E59B3State `json:"path"`
	Prefix   []SpecHttpRoute760292F9State `json:"prefix"`
}

type SpecHttpRoute94Aede07State struct {
	DefaultTargetHostname string `json:"default_target_hostname"`
}

type SpecHttpRouteFd7E59B3State struct {
	Exact string `json:"exact"`
}

type SpecHttpRoute760292F9State struct {
	DefaultPrefix string `json:"default_prefix"`
	Value         string `json:"value"`
}

type SpecHttpRouteActionTargetState struct {
	Port           float64                      `json:"port"`
	VirtualService []SpecHttpRoute11E31Be7State `json:"virtual_service"`
}

type SpecHttpRoute11E31Be7State struct {
	VirtualServiceName string `json:"virtual_service_name"`
}

type SpecHttpRouteMatchState struct {
	Port           float64                                 `json:"port"`
	Prefix         string                                  `json:"prefix"`
	Header         []SpecHttpRouteMatchHeaderState         `json:"header"`
	Hostname       []SpecHttpRouteMatchHostnameState       `json:"hostname"`
	Path           []SpecHttpRouteMatchPathState           `json:"path"`
	QueryParameter []SpecHttpRouteMatchQueryParameterState `json:"query_parameter"`
}

type SpecHttpRouteMatchHeaderState struct {
	Invert bool                         `json:"invert"`
	Name   string                       `json:"name"`
	Match  []SpecHttpRoute30Dd3523State `json:"match"`
}

type SpecHttpRoute30Dd3523State struct {
	Exact  string                       `json:"exact"`
	Prefix string                       `json:"prefix"`
	Regex  string                       `json:"regex"`
	Suffix string                       `json:"suffix"`
	Range  []SpecHttpRoute31605981State `json:"range"`
}

type SpecHttpRoute31605981State struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type SpecHttpRouteMatchHostnameState struct {
	Exact  string `json:"exact"`
	Suffix string `json:"suffix"`
}

type SpecHttpRouteMatchPathState struct {
	Exact string `json:"exact"`
	Regex string `json:"regex"`
}

type SpecHttpRouteMatchQueryParameterState struct {
	Name  string                       `json:"name"`
	Match []SpecHttpRouteD36Dd47DState `json:"match"`
}

type SpecHttpRouteD36Dd47DState struct {
	Exact string `json:"exact"`
}
