// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_client_vpn_route

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_client_vpn_route.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2ClientVpnRouteState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aecvr *Resource) Type() string {
	return "aws_ec2_client_vpn_route"
}

// LocalName returns the local name for [Resource].
func (aecvr *Resource) LocalName() string {
	return aecvr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aecvr *Resource) Configuration() interface{} {
	return aecvr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aecvr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aecvr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aecvr *Resource) Dependencies() terra.Dependencies {
	return aecvr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aecvr *Resource) LifecycleManagement() *terra.Lifecycle {
	return aecvr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aecvr *Resource) Attributes() awsEc2ClientVpnRouteAttributes {
	return awsEc2ClientVpnRouteAttributes{ref: terra.ReferenceResource(aecvr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aecvr *Resource) ImportState(state io.Reader) error {
	aecvr.state = &awsEc2ClientVpnRouteState{}
	if err := json.NewDecoder(state).Decode(aecvr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aecvr.Type(), aecvr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aecvr *Resource) State() (*awsEc2ClientVpnRouteState, bool) {
	return aecvr.state, aecvr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aecvr *Resource) StateMust() *awsEc2ClientVpnRouteState {
	if aecvr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aecvr.Type(), aecvr.LocalName()))
	}
	return aecvr.state
}

// Args contains the configurations for aws_ec2_client_vpn_route.
type Args struct {
	// ClientVpnEndpointId: string, required
	ClientVpnEndpointId terra.StringValue `hcl:"client_vpn_endpoint_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DestinationCidrBlock: string, required
	DestinationCidrBlock terra.StringValue `hcl:"destination_cidr_block,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TargetVpcSubnetId: string, required
	TargetVpcSubnetId terra.StringValue `hcl:"target_vpc_subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEc2ClientVpnRouteAttributes struct {
	ref terra.Reference
}

// ClientVpnEndpointId returns a reference to field client_vpn_endpoint_id of aws_ec2_client_vpn_route.
func (aecvr awsEc2ClientVpnRouteAttributes) ClientVpnEndpointId() terra.StringValue {
	return terra.ReferenceAsString(aecvr.ref.Append("client_vpn_endpoint_id"))
}

// Description returns a reference to field description of aws_ec2_client_vpn_route.
func (aecvr awsEc2ClientVpnRouteAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aecvr.ref.Append("description"))
}

// DestinationCidrBlock returns a reference to field destination_cidr_block of aws_ec2_client_vpn_route.
func (aecvr awsEc2ClientVpnRouteAttributes) DestinationCidrBlock() terra.StringValue {
	return terra.ReferenceAsString(aecvr.ref.Append("destination_cidr_block"))
}

// Id returns a reference to field id of aws_ec2_client_vpn_route.
func (aecvr awsEc2ClientVpnRouteAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aecvr.ref.Append("id"))
}

// Origin returns a reference to field origin of aws_ec2_client_vpn_route.
func (aecvr awsEc2ClientVpnRouteAttributes) Origin() terra.StringValue {
	return terra.ReferenceAsString(aecvr.ref.Append("origin"))
}

// TargetVpcSubnetId returns a reference to field target_vpc_subnet_id of aws_ec2_client_vpn_route.
func (aecvr awsEc2ClientVpnRouteAttributes) TargetVpcSubnetId() terra.StringValue {
	return terra.ReferenceAsString(aecvr.ref.Append("target_vpc_subnet_id"))
}

// Type returns a reference to field type of aws_ec2_client_vpn_route.
func (aecvr awsEc2ClientVpnRouteAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aecvr.ref.Append("type"))
}

func (aecvr awsEc2ClientVpnRouteAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aecvr.ref.Append("timeouts"))
}

type awsEc2ClientVpnRouteState struct {
	ClientVpnEndpointId  string         `json:"client_vpn_endpoint_id"`
	Description          string         `json:"description"`
	DestinationCidrBlock string         `json:"destination_cidr_block"`
	Id                   string         `json:"id"`
	Origin               string         `json:"origin"`
	TargetVpcSubnetId    string         `json:"target_vpc_subnet_id"`
	Type                 string         `json:"type"`
	Timeouts             *TimeoutsState `json:"timeouts"`
}
