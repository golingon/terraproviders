// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_finspace_kx_volume

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Nas1Configuration struct {
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AttachedClustersAttributes struct {
	ref terra.Reference
}

func (ac AttachedClustersAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AttachedClustersAttributes) InternalWithRef(ref terra.Reference) AttachedClustersAttributes {
	return AttachedClustersAttributes{ref: ref}
}

func (ac AttachedClustersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac AttachedClustersAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("cluster_name"))
}

func (ac AttachedClustersAttributes) ClusterStatus() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("cluster_status"))
}

func (ac AttachedClustersAttributes) ClusterType() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("cluster_type"))
}

type Nas1ConfigurationAttributes struct {
	ref terra.Reference
}

func (nc Nas1ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc Nas1ConfigurationAttributes) InternalWithRef(ref terra.Reference) Nas1ConfigurationAttributes {
	return Nas1ConfigurationAttributes{ref: ref}
}

func (nc Nas1ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc Nas1ConfigurationAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(nc.ref.Append("size"))
}

func (nc Nas1ConfigurationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AttachedClustersState struct {
	ClusterName   string `json:"cluster_name"`
	ClusterStatus string `json:"cluster_status"`
	ClusterType   string `json:"cluster_type"`
}

type Nas1ConfigurationState struct {
	Size float64 `json:"size"`
	Type string  `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
