// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_finspace_kx_volume

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_finspace_kx_volume.
type Resource struct {
	Name      string
	Args      Args
	state     *awsFinspaceKxVolumeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (afkv *Resource) Type() string {
	return "aws_finspace_kx_volume"
}

// LocalName returns the local name for [Resource].
func (afkv *Resource) LocalName() string {
	return afkv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (afkv *Resource) Configuration() interface{} {
	return afkv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (afkv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(afkv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (afkv *Resource) Dependencies() terra.Dependencies {
	return afkv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (afkv *Resource) LifecycleManagement() *terra.Lifecycle {
	return afkv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (afkv *Resource) Attributes() awsFinspaceKxVolumeAttributes {
	return awsFinspaceKxVolumeAttributes{ref: terra.ReferenceResource(afkv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (afkv *Resource) ImportState(state io.Reader) error {
	afkv.state = &awsFinspaceKxVolumeState{}
	if err := json.NewDecoder(state).Decode(afkv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afkv.Type(), afkv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (afkv *Resource) State() (*awsFinspaceKxVolumeState, bool) {
	return afkv.state, afkv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (afkv *Resource) StateMust() *awsFinspaceKxVolumeState {
	if afkv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afkv.Type(), afkv.LocalName()))
	}
	return afkv.state
}

// Args contains the configurations for aws_finspace_kx_volume.
type Args struct {
	// AvailabilityZones: list of string, required
	AvailabilityZones terra.ListValue[terra.StringValue] `hcl:"availability_zones,attr" validate:"required"`
	// AzMode: string, required
	AzMode terra.StringValue `hcl:"az_mode,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnvironmentId: string, required
	EnvironmentId terra.StringValue `hcl:"environment_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Nas1Configuration: min=0
	Nas1Configuration []Nas1Configuration `hcl:"nas1_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsFinspaceKxVolumeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(afkv.ref.Append("arn"))
}

// AvailabilityZones returns a reference to field availability_zones of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) AvailabilityZones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](afkv.ref.Append("availability_zones"))
}

// AzMode returns a reference to field az_mode of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) AzMode() terra.StringValue {
	return terra.ReferenceAsString(afkv.ref.Append("az_mode"))
}

// CreatedTimestamp returns a reference to field created_timestamp of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) CreatedTimestamp() terra.StringValue {
	return terra.ReferenceAsString(afkv.ref.Append("created_timestamp"))
}

// Description returns a reference to field description of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(afkv.ref.Append("description"))
}

// EnvironmentId returns a reference to field environment_id of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(afkv.ref.Append("environment_id"))
}

// Id returns a reference to field id of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(afkv.ref.Append("id"))
}

// LastModifiedTimestamp returns a reference to field last_modified_timestamp of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) LastModifiedTimestamp() terra.StringValue {
	return terra.ReferenceAsString(afkv.ref.Append("last_modified_timestamp"))
}

// Name returns a reference to field name of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(afkv.ref.Append("name"))
}

// Status returns a reference to field status of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(afkv.ref.Append("status"))
}

// StatusReason returns a reference to field status_reason of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) StatusReason() terra.StringValue {
	return terra.ReferenceAsString(afkv.ref.Append("status_reason"))
}

// Tags returns a reference to field tags of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afkv.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afkv.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_finspace_kx_volume.
func (afkv awsFinspaceKxVolumeAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(afkv.ref.Append("type"))
}

func (afkv awsFinspaceKxVolumeAttributes) AttachedClusters() terra.ListValue[AttachedClustersAttributes] {
	return terra.ReferenceAsList[AttachedClustersAttributes](afkv.ref.Append("attached_clusters"))
}

func (afkv awsFinspaceKxVolumeAttributes) Nas1Configuration() terra.ListValue[Nas1ConfigurationAttributes] {
	return terra.ReferenceAsList[Nas1ConfigurationAttributes](afkv.ref.Append("nas1_configuration"))
}

func (afkv awsFinspaceKxVolumeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](afkv.ref.Append("timeouts"))
}

type awsFinspaceKxVolumeState struct {
	Arn                   string                   `json:"arn"`
	AvailabilityZones     []string                 `json:"availability_zones"`
	AzMode                string                   `json:"az_mode"`
	CreatedTimestamp      string                   `json:"created_timestamp"`
	Description           string                   `json:"description"`
	EnvironmentId         string                   `json:"environment_id"`
	Id                    string                   `json:"id"`
	LastModifiedTimestamp string                   `json:"last_modified_timestamp"`
	Name                  string                   `json:"name"`
	Status                string                   `json:"status"`
	StatusReason          string                   `json:"status_reason"`
	Tags                  map[string]string        `json:"tags"`
	TagsAll               map[string]string        `json:"tags_all"`
	Type                  string                   `json:"type"`
	AttachedClusters      []AttachedClustersState  `json:"attached_clusters"`
	Nas1Configuration     []Nas1ConfigurationState `json:"nas1_configuration"`
	Timeouts              *TimeoutsState           `json:"timeouts"`
}
