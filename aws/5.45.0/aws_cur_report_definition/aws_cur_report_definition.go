// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cur_report_definition

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cur_report_definition.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCurReportDefinitionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acrd *Resource) Type() string {
	return "aws_cur_report_definition"
}

// LocalName returns the local name for [Resource].
func (acrd *Resource) LocalName() string {
	return acrd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acrd *Resource) Configuration() interface{} {
	return acrd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acrd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acrd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acrd *Resource) Dependencies() terra.Dependencies {
	return acrd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acrd *Resource) LifecycleManagement() *terra.Lifecycle {
	return acrd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acrd *Resource) Attributes() awsCurReportDefinitionAttributes {
	return awsCurReportDefinitionAttributes{ref: terra.ReferenceResource(acrd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acrd *Resource) ImportState(state io.Reader) error {
	acrd.state = &awsCurReportDefinitionState{}
	if err := json.NewDecoder(state).Decode(acrd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acrd.Type(), acrd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acrd *Resource) State() (*awsCurReportDefinitionState, bool) {
	return acrd.state, acrd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acrd *Resource) StateMust() *awsCurReportDefinitionState {
	if acrd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acrd.Type(), acrd.LocalName()))
	}
	return acrd.state
}

// Args contains the configurations for aws_cur_report_definition.
type Args struct {
	// AdditionalArtifacts: set of string, optional
	AdditionalArtifacts terra.SetValue[terra.StringValue] `hcl:"additional_artifacts,attr"`
	// AdditionalSchemaElements: set of string, required
	AdditionalSchemaElements terra.SetValue[terra.StringValue] `hcl:"additional_schema_elements,attr" validate:"required"`
	// Compression: string, required
	Compression terra.StringValue `hcl:"compression,attr" validate:"required"`
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RefreshClosedReports: bool, optional
	RefreshClosedReports terra.BoolValue `hcl:"refresh_closed_reports,attr"`
	// ReportName: string, required
	ReportName terra.StringValue `hcl:"report_name,attr" validate:"required"`
	// ReportVersioning: string, optional
	ReportVersioning terra.StringValue `hcl:"report_versioning,attr"`
	// S3Bucket: string, required
	S3Bucket terra.StringValue `hcl:"s3_bucket,attr" validate:"required"`
	// S3Prefix: string, optional
	S3Prefix terra.StringValue `hcl:"s3_prefix,attr"`
	// S3Region: string, required
	S3Region terra.StringValue `hcl:"s3_region,attr" validate:"required"`
	// TimeUnit: string, required
	TimeUnit terra.StringValue `hcl:"time_unit,attr" validate:"required"`
}

type awsCurReportDefinitionAttributes struct {
	ref terra.Reference
}

// AdditionalArtifacts returns a reference to field additional_artifacts of aws_cur_report_definition.
func (acrd awsCurReportDefinitionAttributes) AdditionalArtifacts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acrd.ref.Append("additional_artifacts"))
}

// AdditionalSchemaElements returns a reference to field additional_schema_elements of aws_cur_report_definition.
func (acrd awsCurReportDefinitionAttributes) AdditionalSchemaElements() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acrd.ref.Append("additional_schema_elements"))
}

// Arn returns a reference to field arn of aws_cur_report_definition.
func (acrd awsCurReportDefinitionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acrd.ref.Append("arn"))
}

// Compression returns a reference to field compression of aws_cur_report_definition.
func (acrd awsCurReportDefinitionAttributes) Compression() terra.StringValue {
	return terra.ReferenceAsString(acrd.ref.Append("compression"))
}

// Format returns a reference to field format of aws_cur_report_definition.
func (acrd awsCurReportDefinitionAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(acrd.ref.Append("format"))
}

// Id returns a reference to field id of aws_cur_report_definition.
func (acrd awsCurReportDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acrd.ref.Append("id"))
}

// RefreshClosedReports returns a reference to field refresh_closed_reports of aws_cur_report_definition.
func (acrd awsCurReportDefinitionAttributes) RefreshClosedReports() terra.BoolValue {
	return terra.ReferenceAsBool(acrd.ref.Append("refresh_closed_reports"))
}

// ReportName returns a reference to field report_name of aws_cur_report_definition.
func (acrd awsCurReportDefinitionAttributes) ReportName() terra.StringValue {
	return terra.ReferenceAsString(acrd.ref.Append("report_name"))
}

// ReportVersioning returns a reference to field report_versioning of aws_cur_report_definition.
func (acrd awsCurReportDefinitionAttributes) ReportVersioning() terra.StringValue {
	return terra.ReferenceAsString(acrd.ref.Append("report_versioning"))
}

// S3Bucket returns a reference to field s3_bucket of aws_cur_report_definition.
func (acrd awsCurReportDefinitionAttributes) S3Bucket() terra.StringValue {
	return terra.ReferenceAsString(acrd.ref.Append("s3_bucket"))
}

// S3Prefix returns a reference to field s3_prefix of aws_cur_report_definition.
func (acrd awsCurReportDefinitionAttributes) S3Prefix() terra.StringValue {
	return terra.ReferenceAsString(acrd.ref.Append("s3_prefix"))
}

// S3Region returns a reference to field s3_region of aws_cur_report_definition.
func (acrd awsCurReportDefinitionAttributes) S3Region() terra.StringValue {
	return terra.ReferenceAsString(acrd.ref.Append("s3_region"))
}

// TimeUnit returns a reference to field time_unit of aws_cur_report_definition.
func (acrd awsCurReportDefinitionAttributes) TimeUnit() terra.StringValue {
	return terra.ReferenceAsString(acrd.ref.Append("time_unit"))
}

type awsCurReportDefinitionState struct {
	AdditionalArtifacts      []string `json:"additional_artifacts"`
	AdditionalSchemaElements []string `json:"additional_schema_elements"`
	Arn                      string   `json:"arn"`
	Compression              string   `json:"compression"`
	Format                   string   `json:"format"`
	Id                       string   `json:"id"`
	RefreshClosedReports     bool     `json:"refresh_closed_reports"`
	ReportName               string   `json:"report_name"`
	ReportVersioning         string   `json:"report_versioning"`
	S3Bucket                 string   `json:"s3_bucket"`
	S3Prefix                 string   `json:"s3_prefix"`
	S3Region                 string   `json:"s3_region"`
	TimeUnit                 string   `json:"time_unit"`
}
