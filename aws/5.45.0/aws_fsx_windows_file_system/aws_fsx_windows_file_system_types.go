// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_windows_file_system

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AuditLogConfiguration struct {
	// AuditLogDestination: string, optional
	AuditLogDestination terra.StringValue `hcl:"audit_log_destination,attr"`
	// FileAccessAuditLogLevel: string, optional
	FileAccessAuditLogLevel terra.StringValue `hcl:"file_access_audit_log_level,attr"`
	// FileShareAccessAuditLogLevel: string, optional
	FileShareAccessAuditLogLevel terra.StringValue `hcl:"file_share_access_audit_log_level,attr"`
}

type DiskIopsConfiguration struct {
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
}

type SelfManagedActiveDirectory struct {
	// DnsIps: set of string, required
	DnsIps terra.SetValue[terra.StringValue] `hcl:"dns_ips,attr" validate:"required"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// FileSystemAdministratorsGroup: string, optional
	FileSystemAdministratorsGroup terra.StringValue `hcl:"file_system_administrators_group,attr"`
	// OrganizationalUnitDistinguishedName: string, optional
	OrganizationalUnitDistinguishedName terra.StringValue `hcl:"organizational_unit_distinguished_name,attr"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AuditLogConfigurationAttributes struct {
	ref terra.Reference
}

func (alc AuditLogConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return alc.ref, nil
}

func (alc AuditLogConfigurationAttributes) InternalWithRef(ref terra.Reference) AuditLogConfigurationAttributes {
	return AuditLogConfigurationAttributes{ref: ref}
}

func (alc AuditLogConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alc.ref.InternalTokens()
}

func (alc AuditLogConfigurationAttributes) AuditLogDestination() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("audit_log_destination"))
}

func (alc AuditLogConfigurationAttributes) FileAccessAuditLogLevel() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("file_access_audit_log_level"))
}

func (alc AuditLogConfigurationAttributes) FileShareAccessAuditLogLevel() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("file_share_access_audit_log_level"))
}

type DiskIopsConfigurationAttributes struct {
	ref terra.Reference
}

func (dic DiskIopsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dic.ref, nil
}

func (dic DiskIopsConfigurationAttributes) InternalWithRef(ref terra.Reference) DiskIopsConfigurationAttributes {
	return DiskIopsConfigurationAttributes{ref: ref}
}

func (dic DiskIopsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dic.ref.InternalTokens()
}

func (dic DiskIopsConfigurationAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(dic.ref.Append("iops"))
}

func (dic DiskIopsConfigurationAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(dic.ref.Append("mode"))
}

type SelfManagedActiveDirectoryAttributes struct {
	ref terra.Reference
}

func (smad SelfManagedActiveDirectoryAttributes) InternalRef() (terra.Reference, error) {
	return smad.ref, nil
}

func (smad SelfManagedActiveDirectoryAttributes) InternalWithRef(ref terra.Reference) SelfManagedActiveDirectoryAttributes {
	return SelfManagedActiveDirectoryAttributes{ref: ref}
}

func (smad SelfManagedActiveDirectoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return smad.ref.InternalTokens()
}

func (smad SelfManagedActiveDirectoryAttributes) DnsIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](smad.ref.Append("dns_ips"))
}

func (smad SelfManagedActiveDirectoryAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(smad.ref.Append("domain_name"))
}

func (smad SelfManagedActiveDirectoryAttributes) FileSystemAdministratorsGroup() terra.StringValue {
	return terra.ReferenceAsString(smad.ref.Append("file_system_administrators_group"))
}

func (smad SelfManagedActiveDirectoryAttributes) OrganizationalUnitDistinguishedName() terra.StringValue {
	return terra.ReferenceAsString(smad.ref.Append("organizational_unit_distinguished_name"))
}

func (smad SelfManagedActiveDirectoryAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(smad.ref.Append("password"))
}

func (smad SelfManagedActiveDirectoryAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(smad.ref.Append("username"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AuditLogConfigurationState struct {
	AuditLogDestination          string `json:"audit_log_destination"`
	FileAccessAuditLogLevel      string `json:"file_access_audit_log_level"`
	FileShareAccessAuditLogLevel string `json:"file_share_access_audit_log_level"`
}

type DiskIopsConfigurationState struct {
	Iops float64 `json:"iops"`
	Mode string  `json:"mode"`
}

type SelfManagedActiveDirectoryState struct {
	DnsIps                              []string `json:"dns_ips"`
	DomainName                          string   `json:"domain_name"`
	FileSystemAdministratorsGroup       string   `json:"file_system_administrators_group"`
	OrganizationalUnitDistinguishedName string   `json:"organizational_unit_distinguished_name"`
	Password                            string   `json:"password"`
	Username                            string   `json:"username"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
