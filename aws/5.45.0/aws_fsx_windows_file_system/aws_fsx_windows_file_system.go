// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_windows_file_system

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_fsx_windows_file_system.
type Resource struct {
	Name      string
	Args      Args
	state     *awsFsxWindowsFileSystemState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (afwfs *Resource) Type() string {
	return "aws_fsx_windows_file_system"
}

// LocalName returns the local name for [Resource].
func (afwfs *Resource) LocalName() string {
	return afwfs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (afwfs *Resource) Configuration() interface{} {
	return afwfs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (afwfs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(afwfs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (afwfs *Resource) Dependencies() terra.Dependencies {
	return afwfs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (afwfs *Resource) LifecycleManagement() *terra.Lifecycle {
	return afwfs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (afwfs *Resource) Attributes() awsFsxWindowsFileSystemAttributes {
	return awsFsxWindowsFileSystemAttributes{ref: terra.ReferenceResource(afwfs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (afwfs *Resource) ImportState(state io.Reader) error {
	afwfs.state = &awsFsxWindowsFileSystemState{}
	if err := json.NewDecoder(state).Decode(afwfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afwfs.Type(), afwfs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (afwfs *Resource) State() (*awsFsxWindowsFileSystemState, bool) {
	return afwfs.state, afwfs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (afwfs *Resource) StateMust() *awsFsxWindowsFileSystemState {
	if afwfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afwfs.Type(), afwfs.LocalName()))
	}
	return afwfs.state
}

// Args contains the configurations for aws_fsx_windows_file_system.
type Args struct {
	// ActiveDirectoryId: string, optional
	ActiveDirectoryId terra.StringValue `hcl:"active_directory_id,attr"`
	// Aliases: set of string, optional
	Aliases terra.SetValue[terra.StringValue] `hcl:"aliases,attr"`
	// AutomaticBackupRetentionDays: number, optional
	AutomaticBackupRetentionDays terra.NumberValue `hcl:"automatic_backup_retention_days,attr"`
	// BackupId: string, optional
	BackupId terra.StringValue `hcl:"backup_id,attr"`
	// CopyTagsToBackups: bool, optional
	CopyTagsToBackups terra.BoolValue `hcl:"copy_tags_to_backups,attr"`
	// DailyAutomaticBackupStartTime: string, optional
	DailyAutomaticBackupStartTime terra.StringValue `hcl:"daily_automatic_backup_start_time,attr"`
	// DeploymentType: string, optional
	DeploymentType terra.StringValue `hcl:"deployment_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// PreferredSubnetId: string, optional
	PreferredSubnetId terra.StringValue `hcl:"preferred_subnet_id,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SkipFinalBackup: bool, optional
	SkipFinalBackup terra.BoolValue `hcl:"skip_final_backup,attr"`
	// StorageCapacity: number, optional
	StorageCapacity terra.NumberValue `hcl:"storage_capacity,attr"`
	// StorageType: string, optional
	StorageType terra.StringValue `hcl:"storage_type,attr"`
	// SubnetIds: list of string, required
	SubnetIds terra.ListValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ThroughputCapacity: number, required
	ThroughputCapacity terra.NumberValue `hcl:"throughput_capacity,attr" validate:"required"`
	// WeeklyMaintenanceStartTime: string, optional
	WeeklyMaintenanceStartTime terra.StringValue `hcl:"weekly_maintenance_start_time,attr"`
	// AuditLogConfiguration: optional
	AuditLogConfiguration *AuditLogConfiguration `hcl:"audit_log_configuration,block"`
	// DiskIopsConfiguration: optional
	DiskIopsConfiguration *DiskIopsConfiguration `hcl:"disk_iops_configuration,block"`
	// SelfManagedActiveDirectory: optional
	SelfManagedActiveDirectory *SelfManagedActiveDirectory `hcl:"self_managed_active_directory,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsFsxWindowsFileSystemAttributes struct {
	ref terra.Reference
}

// ActiveDirectoryId returns a reference to field active_directory_id of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) ActiveDirectoryId() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("active_directory_id"))
}

// Aliases returns a reference to field aliases of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) Aliases() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](afwfs.ref.Append("aliases"))
}

// Arn returns a reference to field arn of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("arn"))
}

// AutomaticBackupRetentionDays returns a reference to field automatic_backup_retention_days of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) AutomaticBackupRetentionDays() terra.NumberValue {
	return terra.ReferenceAsNumber(afwfs.ref.Append("automatic_backup_retention_days"))
}

// BackupId returns a reference to field backup_id of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) BackupId() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("backup_id"))
}

// CopyTagsToBackups returns a reference to field copy_tags_to_backups of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) CopyTagsToBackups() terra.BoolValue {
	return terra.ReferenceAsBool(afwfs.ref.Append("copy_tags_to_backups"))
}

// DailyAutomaticBackupStartTime returns a reference to field daily_automatic_backup_start_time of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) DailyAutomaticBackupStartTime() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("daily_automatic_backup_start_time"))
}

// DeploymentType returns a reference to field deployment_type of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) DeploymentType() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("deployment_type"))
}

// DnsName returns a reference to field dns_name of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("dns_name"))
}

// Id returns a reference to field id of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("kms_key_id"))
}

// NetworkInterfaceIds returns a reference to field network_interface_ids of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) NetworkInterfaceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](afwfs.ref.Append("network_interface_ids"))
}

// OwnerId returns a reference to field owner_id of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("owner_id"))
}

// PreferredFileServerIp returns a reference to field preferred_file_server_ip of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) PreferredFileServerIp() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("preferred_file_server_ip"))
}

// PreferredSubnetId returns a reference to field preferred_subnet_id of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) PreferredSubnetId() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("preferred_subnet_id"))
}

// RemoteAdministrationEndpoint returns a reference to field remote_administration_endpoint of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) RemoteAdministrationEndpoint() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("remote_administration_endpoint"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](afwfs.ref.Append("security_group_ids"))
}

// SkipFinalBackup returns a reference to field skip_final_backup of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) SkipFinalBackup() terra.BoolValue {
	return terra.ReferenceAsBool(afwfs.ref.Append("skip_final_backup"))
}

// StorageCapacity returns a reference to field storage_capacity of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) StorageCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(afwfs.ref.Append("storage_capacity"))
}

// StorageType returns a reference to field storage_type of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) StorageType() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("storage_type"))
}

// SubnetIds returns a reference to field subnet_ids of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) SubnetIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](afwfs.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afwfs.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afwfs.ref.Append("tags_all"))
}

// ThroughputCapacity returns a reference to field throughput_capacity of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) ThroughputCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(afwfs.ref.Append("throughput_capacity"))
}

// VpcId returns a reference to field vpc_id of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("vpc_id"))
}

// WeeklyMaintenanceStartTime returns a reference to field weekly_maintenance_start_time of aws_fsx_windows_file_system.
func (afwfs awsFsxWindowsFileSystemAttributes) WeeklyMaintenanceStartTime() terra.StringValue {
	return terra.ReferenceAsString(afwfs.ref.Append("weekly_maintenance_start_time"))
}

func (afwfs awsFsxWindowsFileSystemAttributes) AuditLogConfiguration() terra.ListValue[AuditLogConfigurationAttributes] {
	return terra.ReferenceAsList[AuditLogConfigurationAttributes](afwfs.ref.Append("audit_log_configuration"))
}

func (afwfs awsFsxWindowsFileSystemAttributes) DiskIopsConfiguration() terra.ListValue[DiskIopsConfigurationAttributes] {
	return terra.ReferenceAsList[DiskIopsConfigurationAttributes](afwfs.ref.Append("disk_iops_configuration"))
}

func (afwfs awsFsxWindowsFileSystemAttributes) SelfManagedActiveDirectory() terra.ListValue[SelfManagedActiveDirectoryAttributes] {
	return terra.ReferenceAsList[SelfManagedActiveDirectoryAttributes](afwfs.ref.Append("self_managed_active_directory"))
}

func (afwfs awsFsxWindowsFileSystemAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](afwfs.ref.Append("timeouts"))
}

type awsFsxWindowsFileSystemState struct {
	ActiveDirectoryId             string                            `json:"active_directory_id"`
	Aliases                       []string                          `json:"aliases"`
	Arn                           string                            `json:"arn"`
	AutomaticBackupRetentionDays  float64                           `json:"automatic_backup_retention_days"`
	BackupId                      string                            `json:"backup_id"`
	CopyTagsToBackups             bool                              `json:"copy_tags_to_backups"`
	DailyAutomaticBackupStartTime string                            `json:"daily_automatic_backup_start_time"`
	DeploymentType                string                            `json:"deployment_type"`
	DnsName                       string                            `json:"dns_name"`
	Id                            string                            `json:"id"`
	KmsKeyId                      string                            `json:"kms_key_id"`
	NetworkInterfaceIds           []string                          `json:"network_interface_ids"`
	OwnerId                       string                            `json:"owner_id"`
	PreferredFileServerIp         string                            `json:"preferred_file_server_ip"`
	PreferredSubnetId             string                            `json:"preferred_subnet_id"`
	RemoteAdministrationEndpoint  string                            `json:"remote_administration_endpoint"`
	SecurityGroupIds              []string                          `json:"security_group_ids"`
	SkipFinalBackup               bool                              `json:"skip_final_backup"`
	StorageCapacity               float64                           `json:"storage_capacity"`
	StorageType                   string                            `json:"storage_type"`
	SubnetIds                     []string                          `json:"subnet_ids"`
	Tags                          map[string]string                 `json:"tags"`
	TagsAll                       map[string]string                 `json:"tags_all"`
	ThroughputCapacity            float64                           `json:"throughput_capacity"`
	VpcId                         string                            `json:"vpc_id"`
	WeeklyMaintenanceStartTime    string                            `json:"weekly_maintenance_start_time"`
	AuditLogConfiguration         []AuditLogConfigurationState      `json:"audit_log_configuration"`
	DiskIopsConfiguration         []DiskIopsConfigurationState      `json:"disk_iops_configuration"`
	SelfManagedActiveDirectory    []SelfManagedActiveDirectoryState `json:"self_managed_active_directory"`
	Timeouts                      *TimeoutsState                    `json:"timeouts"`
}
