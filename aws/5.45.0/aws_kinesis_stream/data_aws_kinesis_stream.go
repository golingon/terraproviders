// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kinesis_stream

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_kinesis_stream.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aks *DataSource) DataSource() string {
	return "aws_kinesis_stream"
}

// LocalName returns the local name for [DataSource].
func (aks *DataSource) LocalName() string {
	return aks.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aks *DataSource) Configuration() interface{} {
	return aks.Args
}

// Attributes returns the attributes for [DataSource].
func (aks *DataSource) Attributes() dataAwsKinesisStreamAttributes {
	return dataAwsKinesisStreamAttributes{ref: terra.ReferenceDataSource(aks)}
}

// DataArgs contains the configurations for aws_kinesis_stream.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type dataAwsKinesisStreamAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_kinesis_stream.
func (aks dataAwsKinesisStreamAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aks.ref.Append("arn"))
}

// ClosedShards returns a reference to field closed_shards of aws_kinesis_stream.
func (aks dataAwsKinesisStreamAttributes) ClosedShards() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aks.ref.Append("closed_shards"))
}

// CreationTimestamp returns a reference to field creation_timestamp of aws_kinesis_stream.
func (aks dataAwsKinesisStreamAttributes) CreationTimestamp() terra.NumberValue {
	return terra.ReferenceAsNumber(aks.ref.Append("creation_timestamp"))
}

// Id returns a reference to field id of aws_kinesis_stream.
func (aks dataAwsKinesisStreamAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aks.ref.Append("id"))
}

// Name returns a reference to field name of aws_kinesis_stream.
func (aks dataAwsKinesisStreamAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aks.ref.Append("name"))
}

// OpenShards returns a reference to field open_shards of aws_kinesis_stream.
func (aks dataAwsKinesisStreamAttributes) OpenShards() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aks.ref.Append("open_shards"))
}

// RetentionPeriod returns a reference to field retention_period of aws_kinesis_stream.
func (aks dataAwsKinesisStreamAttributes) RetentionPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(aks.ref.Append("retention_period"))
}

// ShardLevelMetrics returns a reference to field shard_level_metrics of aws_kinesis_stream.
func (aks dataAwsKinesisStreamAttributes) ShardLevelMetrics() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aks.ref.Append("shard_level_metrics"))
}

// Status returns a reference to field status of aws_kinesis_stream.
func (aks dataAwsKinesisStreamAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aks.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_kinesis_stream.
func (aks dataAwsKinesisStreamAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aks.ref.Append("tags"))
}

func (aks dataAwsKinesisStreamAttributes) StreamModeDetails() terra.ListValue[DataStreamModeDetailsAttributes] {
	return terra.ReferenceAsList[DataStreamModeDetailsAttributes](aks.ref.Append("stream_mode_details"))
}
