// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kinesis_stream

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kinesis_stream.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKinesisStreamState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aks *Resource) Type() string {
	return "aws_kinesis_stream"
}

// LocalName returns the local name for [Resource].
func (aks *Resource) LocalName() string {
	return aks.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aks *Resource) Configuration() interface{} {
	return aks.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aks *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aks)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aks *Resource) Dependencies() terra.Dependencies {
	return aks.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aks *Resource) LifecycleManagement() *terra.Lifecycle {
	return aks.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aks *Resource) Attributes() awsKinesisStreamAttributes {
	return awsKinesisStreamAttributes{ref: terra.ReferenceResource(aks)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aks *Resource) ImportState(state io.Reader) error {
	aks.state = &awsKinesisStreamState{}
	if err := json.NewDecoder(state).Decode(aks.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aks.Type(), aks.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aks *Resource) State() (*awsKinesisStreamState, bool) {
	return aks.state, aks.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aks *Resource) StateMust() *awsKinesisStreamState {
	if aks.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aks.Type(), aks.LocalName()))
	}
	return aks.state
}

// Args contains the configurations for aws_kinesis_stream.
type Args struct {
	// Arn: string, optional
	Arn terra.StringValue `hcl:"arn,attr"`
	// EncryptionType: string, optional
	EncryptionType terra.StringValue `hcl:"encryption_type,attr"`
	// EnforceConsumerDeletion: bool, optional
	EnforceConsumerDeletion terra.BoolValue `hcl:"enforce_consumer_deletion,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RetentionPeriod: number, optional
	RetentionPeriod terra.NumberValue `hcl:"retention_period,attr"`
	// ShardCount: number, optional
	ShardCount terra.NumberValue `hcl:"shard_count,attr"`
	// ShardLevelMetrics: set of string, optional
	ShardLevelMetrics terra.SetValue[terra.StringValue] `hcl:"shard_level_metrics,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// StreamModeDetails: optional
	StreamModeDetails *StreamModeDetails `hcl:"stream_mode_details,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsKinesisStreamAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_kinesis_stream.
func (aks awsKinesisStreamAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aks.ref.Append("arn"))
}

// EncryptionType returns a reference to field encryption_type of aws_kinesis_stream.
func (aks awsKinesisStreamAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(aks.ref.Append("encryption_type"))
}

// EnforceConsumerDeletion returns a reference to field enforce_consumer_deletion of aws_kinesis_stream.
func (aks awsKinesisStreamAttributes) EnforceConsumerDeletion() terra.BoolValue {
	return terra.ReferenceAsBool(aks.ref.Append("enforce_consumer_deletion"))
}

// Id returns a reference to field id of aws_kinesis_stream.
func (aks awsKinesisStreamAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aks.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_kinesis_stream.
func (aks awsKinesisStreamAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(aks.ref.Append("kms_key_id"))
}

// Name returns a reference to field name of aws_kinesis_stream.
func (aks awsKinesisStreamAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aks.ref.Append("name"))
}

// RetentionPeriod returns a reference to field retention_period of aws_kinesis_stream.
func (aks awsKinesisStreamAttributes) RetentionPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(aks.ref.Append("retention_period"))
}

// ShardCount returns a reference to field shard_count of aws_kinesis_stream.
func (aks awsKinesisStreamAttributes) ShardCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aks.ref.Append("shard_count"))
}

// ShardLevelMetrics returns a reference to field shard_level_metrics of aws_kinesis_stream.
func (aks awsKinesisStreamAttributes) ShardLevelMetrics() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aks.ref.Append("shard_level_metrics"))
}

// Tags returns a reference to field tags of aws_kinesis_stream.
func (aks awsKinesisStreamAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aks.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_kinesis_stream.
func (aks awsKinesisStreamAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aks.ref.Append("tags_all"))
}

func (aks awsKinesisStreamAttributes) StreamModeDetails() terra.ListValue[StreamModeDetailsAttributes] {
	return terra.ReferenceAsList[StreamModeDetailsAttributes](aks.ref.Append("stream_mode_details"))
}

func (aks awsKinesisStreamAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aks.ref.Append("timeouts"))
}

type awsKinesisStreamState struct {
	Arn                     string                   `json:"arn"`
	EncryptionType          string                   `json:"encryption_type"`
	EnforceConsumerDeletion bool                     `json:"enforce_consumer_deletion"`
	Id                      string                   `json:"id"`
	KmsKeyId                string                   `json:"kms_key_id"`
	Name                    string                   `json:"name"`
	RetentionPeriod         float64                  `json:"retention_period"`
	ShardCount              float64                  `json:"shard_count"`
	ShardLevelMetrics       []string                 `json:"shard_level_metrics"`
	Tags                    map[string]string        `json:"tags"`
	TagsAll                 map[string]string        `json:"tags_all"`
	StreamModeDetails       []StreamModeDetailsState `json:"stream_mode_details"`
	Timeouts                *TimeoutsState           `json:"timeouts"`
}
