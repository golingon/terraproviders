// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpclattice_target_group_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpclattice_target_group_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpclatticeTargetGroupAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avtga *Resource) Type() string {
	return "aws_vpclattice_target_group_attachment"
}

// LocalName returns the local name for [Resource].
func (avtga *Resource) LocalName() string {
	return avtga.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avtga *Resource) Configuration() interface{} {
	return avtga.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avtga *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avtga)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avtga *Resource) Dependencies() terra.Dependencies {
	return avtga.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avtga *Resource) LifecycleManagement() *terra.Lifecycle {
	return avtga.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avtga *Resource) Attributes() awsVpclatticeTargetGroupAttachmentAttributes {
	return awsVpclatticeTargetGroupAttachmentAttributes{ref: terra.ReferenceResource(avtga)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avtga *Resource) ImportState(state io.Reader) error {
	avtga.state = &awsVpclatticeTargetGroupAttachmentState{}
	if err := json.NewDecoder(state).Decode(avtga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avtga.Type(), avtga.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avtga *Resource) State() (*awsVpclatticeTargetGroupAttachmentState, bool) {
	return avtga.state, avtga.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avtga *Resource) StateMust() *awsVpclatticeTargetGroupAttachmentState {
	if avtga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avtga.Type(), avtga.LocalName()))
	}
	return avtga.state
}

// Args contains the configurations for aws_vpclattice_target_group_attachment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TargetGroupIdentifier: string, required
	TargetGroupIdentifier terra.StringValue `hcl:"target_group_identifier,attr" validate:"required"`
	// Target: required
	Target *Target `hcl:"target,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVpclatticeTargetGroupAttachmentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_vpclattice_target_group_attachment.
func (avtga awsVpclatticeTargetGroupAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avtga.ref.Append("id"))
}

// TargetGroupIdentifier returns a reference to field target_group_identifier of aws_vpclattice_target_group_attachment.
func (avtga awsVpclatticeTargetGroupAttachmentAttributes) TargetGroupIdentifier() terra.StringValue {
	return terra.ReferenceAsString(avtga.ref.Append("target_group_identifier"))
}

func (avtga awsVpclatticeTargetGroupAttachmentAttributes) Target() terra.ListValue[TargetAttributes] {
	return terra.ReferenceAsList[TargetAttributes](avtga.ref.Append("target"))
}

func (avtga awsVpclatticeTargetGroupAttachmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avtga.ref.Append("timeouts"))
}

type awsVpclatticeTargetGroupAttachmentState struct {
	Id                    string         `json:"id"`
	TargetGroupIdentifier string         `json:"target_group_identifier"`
	Target                []TargetState  `json:"target"`
	Timeouts              *TimeoutsState `json:"timeouts"`
}
