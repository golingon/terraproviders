// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datasync_task

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Excludes struct {
	// FilterType: string, optional
	FilterType terra.StringValue `hcl:"filter_type,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Includes struct {
	// FilterType: string, optional
	FilterType terra.StringValue `hcl:"filter_type,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Options struct {
	// Atime: string, optional
	Atime terra.StringValue `hcl:"atime,attr"`
	// BytesPerSecond: number, optional
	BytesPerSecond terra.NumberValue `hcl:"bytes_per_second,attr"`
	// Gid: string, optional
	Gid terra.StringValue `hcl:"gid,attr"`
	// LogLevel: string, optional
	LogLevel terra.StringValue `hcl:"log_level,attr"`
	// Mtime: string, optional
	Mtime terra.StringValue `hcl:"mtime,attr"`
	// ObjectTags: string, optional
	ObjectTags terra.StringValue `hcl:"object_tags,attr"`
	// OverwriteMode: string, optional
	OverwriteMode terra.StringValue `hcl:"overwrite_mode,attr"`
	// PosixPermissions: string, optional
	PosixPermissions terra.StringValue `hcl:"posix_permissions,attr"`
	// PreserveDeletedFiles: string, optional
	PreserveDeletedFiles terra.StringValue `hcl:"preserve_deleted_files,attr"`
	// PreserveDevices: string, optional
	PreserveDevices terra.StringValue `hcl:"preserve_devices,attr"`
	// SecurityDescriptorCopyFlags: string, optional
	SecurityDescriptorCopyFlags terra.StringValue `hcl:"security_descriptor_copy_flags,attr"`
	// TaskQueueing: string, optional
	TaskQueueing terra.StringValue `hcl:"task_queueing,attr"`
	// TransferMode: string, optional
	TransferMode terra.StringValue `hcl:"transfer_mode,attr"`
	// Uid: string, optional
	Uid terra.StringValue `hcl:"uid,attr"`
	// VerifyMode: string, optional
	VerifyMode terra.StringValue `hcl:"verify_mode,attr"`
}

type Schedule struct {
	// ScheduleExpression: string, required
	ScheduleExpression terra.StringValue `hcl:"schedule_expression,attr" validate:"required"`
}

type TaskReportConfig struct {
	// OutputType: string, optional
	OutputType terra.StringValue `hcl:"output_type,attr"`
	// ReportLevel: string, optional
	ReportLevel terra.StringValue `hcl:"report_level,attr"`
	// S3ObjectVersioning: string, optional
	S3ObjectVersioning terra.StringValue `hcl:"s3_object_versioning,attr"`
	// TaskReportConfigReportOverrides: optional
	ReportOverrides *TaskReportConfigReportOverrides `hcl:"report_overrides,block"`
	// TaskReportConfigS3Destination: required
	S3Destination *TaskReportConfigS3Destination `hcl:"s3_destination,block" validate:"required"`
}

type TaskReportConfigReportOverrides struct {
	// DeletedOverride: string, optional
	DeletedOverride terra.StringValue `hcl:"deleted_override,attr"`
	// SkippedOverride: string, optional
	SkippedOverride terra.StringValue `hcl:"skipped_override,attr"`
	// TransferredOverride: string, optional
	TransferredOverride terra.StringValue `hcl:"transferred_override,attr"`
	// VerifiedOverride: string, optional
	VerifiedOverride terra.StringValue `hcl:"verified_override,attr"`
}

type TaskReportConfigS3Destination struct {
	// BucketAccessRoleArn: string, required
	BucketAccessRoleArn terra.StringValue `hcl:"bucket_access_role_arn,attr" validate:"required"`
	// S3BucketArn: string, required
	S3BucketArn terra.StringValue `hcl:"s3_bucket_arn,attr" validate:"required"`
	// Subdirectory: string, optional
	Subdirectory terra.StringValue `hcl:"subdirectory,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
}

type ExcludesAttributes struct {
	ref terra.Reference
}

func (e ExcludesAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExcludesAttributes) InternalWithRef(ref terra.Reference) ExcludesAttributes {
	return ExcludesAttributes{ref: ref}
}

func (e ExcludesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ExcludesAttributes) FilterType() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("filter_type"))
}

func (e ExcludesAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type IncludesAttributes struct {
	ref terra.Reference
}

func (i IncludesAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IncludesAttributes) InternalWithRef(ref terra.Reference) IncludesAttributes {
	return IncludesAttributes{ref: ref}
}

func (i IncludesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IncludesAttributes) FilterType() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("filter_type"))
}

func (i IncludesAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("value"))
}

type OptionsAttributes struct {
	ref terra.Reference
}

func (o OptionsAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OptionsAttributes) InternalWithRef(ref terra.Reference) OptionsAttributes {
	return OptionsAttributes{ref: ref}
}

func (o OptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o OptionsAttributes) Atime() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("atime"))
}

func (o OptionsAttributes) BytesPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("bytes_per_second"))
}

func (o OptionsAttributes) Gid() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("gid"))
}

func (o OptionsAttributes) LogLevel() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("log_level"))
}

func (o OptionsAttributes) Mtime() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("mtime"))
}

func (o OptionsAttributes) ObjectTags() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("object_tags"))
}

func (o OptionsAttributes) OverwriteMode() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("overwrite_mode"))
}

func (o OptionsAttributes) PosixPermissions() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("posix_permissions"))
}

func (o OptionsAttributes) PreserveDeletedFiles() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("preserve_deleted_files"))
}

func (o OptionsAttributes) PreserveDevices() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("preserve_devices"))
}

func (o OptionsAttributes) SecurityDescriptorCopyFlags() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("security_descriptor_copy_flags"))
}

func (o OptionsAttributes) TaskQueueing() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("task_queueing"))
}

func (o OptionsAttributes) TransferMode() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("transfer_mode"))
}

func (o OptionsAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("uid"))
}

func (o OptionsAttributes) VerifyMode() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("verify_mode"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) ScheduleExpression() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("schedule_expression"))
}

type TaskReportConfigAttributes struct {
	ref terra.Reference
}

func (trc TaskReportConfigAttributes) InternalRef() (terra.Reference, error) {
	return trc.ref, nil
}

func (trc TaskReportConfigAttributes) InternalWithRef(ref terra.Reference) TaskReportConfigAttributes {
	return TaskReportConfigAttributes{ref: ref}
}

func (trc TaskReportConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return trc.ref.InternalTokens()
}

func (trc TaskReportConfigAttributes) OutputType() terra.StringValue {
	return terra.ReferenceAsString(trc.ref.Append("output_type"))
}

func (trc TaskReportConfigAttributes) ReportLevel() terra.StringValue {
	return terra.ReferenceAsString(trc.ref.Append("report_level"))
}

func (trc TaskReportConfigAttributes) S3ObjectVersioning() terra.StringValue {
	return terra.ReferenceAsString(trc.ref.Append("s3_object_versioning"))
}

func (trc TaskReportConfigAttributes) ReportOverrides() terra.ListValue[TaskReportConfigReportOverridesAttributes] {
	return terra.ReferenceAsList[TaskReportConfigReportOverridesAttributes](trc.ref.Append("report_overrides"))
}

func (trc TaskReportConfigAttributes) S3Destination() terra.ListValue[TaskReportConfigS3DestinationAttributes] {
	return terra.ReferenceAsList[TaskReportConfigS3DestinationAttributes](trc.ref.Append("s3_destination"))
}

type TaskReportConfigReportOverridesAttributes struct {
	ref terra.Reference
}

func (ro TaskReportConfigReportOverridesAttributes) InternalRef() (terra.Reference, error) {
	return ro.ref, nil
}

func (ro TaskReportConfigReportOverridesAttributes) InternalWithRef(ref terra.Reference) TaskReportConfigReportOverridesAttributes {
	return TaskReportConfigReportOverridesAttributes{ref: ref}
}

func (ro TaskReportConfigReportOverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ro.ref.InternalTokens()
}

func (ro TaskReportConfigReportOverridesAttributes) DeletedOverride() terra.StringValue {
	return terra.ReferenceAsString(ro.ref.Append("deleted_override"))
}

func (ro TaskReportConfigReportOverridesAttributes) SkippedOverride() terra.StringValue {
	return terra.ReferenceAsString(ro.ref.Append("skipped_override"))
}

func (ro TaskReportConfigReportOverridesAttributes) TransferredOverride() terra.StringValue {
	return terra.ReferenceAsString(ro.ref.Append("transferred_override"))
}

func (ro TaskReportConfigReportOverridesAttributes) VerifiedOverride() terra.StringValue {
	return terra.ReferenceAsString(ro.ref.Append("verified_override"))
}

type TaskReportConfigS3DestinationAttributes struct {
	ref terra.Reference
}

func (sd TaskReportConfigS3DestinationAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd TaskReportConfigS3DestinationAttributes) InternalWithRef(ref terra.Reference) TaskReportConfigS3DestinationAttributes {
	return TaskReportConfigS3DestinationAttributes{ref: ref}
}

func (sd TaskReportConfigS3DestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd TaskReportConfigS3DestinationAttributes) BucketAccessRoleArn() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("bucket_access_role_arn"))
}

func (sd TaskReportConfigS3DestinationAttributes) S3BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("s3_bucket_arn"))
}

func (sd TaskReportConfigS3DestinationAttributes) Subdirectory() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("subdirectory"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

type ExcludesState struct {
	FilterType string `json:"filter_type"`
	Value      string `json:"value"`
}

type IncludesState struct {
	FilterType string `json:"filter_type"`
	Value      string `json:"value"`
}

type OptionsState struct {
	Atime                       string  `json:"atime"`
	BytesPerSecond              float64 `json:"bytes_per_second"`
	Gid                         string  `json:"gid"`
	LogLevel                    string  `json:"log_level"`
	Mtime                       string  `json:"mtime"`
	ObjectTags                  string  `json:"object_tags"`
	OverwriteMode               string  `json:"overwrite_mode"`
	PosixPermissions            string  `json:"posix_permissions"`
	PreserveDeletedFiles        string  `json:"preserve_deleted_files"`
	PreserveDevices             string  `json:"preserve_devices"`
	SecurityDescriptorCopyFlags string  `json:"security_descriptor_copy_flags"`
	TaskQueueing                string  `json:"task_queueing"`
	TransferMode                string  `json:"transfer_mode"`
	Uid                         string  `json:"uid"`
	VerifyMode                  string  `json:"verify_mode"`
}

type ScheduleState struct {
	ScheduleExpression string `json:"schedule_expression"`
}

type TaskReportConfigState struct {
	OutputType         string                                 `json:"output_type"`
	ReportLevel        string                                 `json:"report_level"`
	S3ObjectVersioning string                                 `json:"s3_object_versioning"`
	ReportOverrides    []TaskReportConfigReportOverridesState `json:"report_overrides"`
	S3Destination      []TaskReportConfigS3DestinationState   `json:"s3_destination"`
}

type TaskReportConfigReportOverridesState struct {
	DeletedOverride     string `json:"deleted_override"`
	SkippedOverride     string `json:"skipped_override"`
	TransferredOverride string `json:"transferred_override"`
	VerifiedOverride    string `json:"verified_override"`
}

type TaskReportConfigS3DestinationState struct {
	BucketAccessRoleArn string `json:"bucket_access_role_arn"`
	S3BucketArn         string `json:"s3_bucket_arn"`
	Subdirectory        string `json:"subdirectory"`
}

type TimeoutsState struct {
	Create string `json:"create"`
}
