// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datasync_task

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_datasync_task.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDatasyncTaskState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adt *Resource) Type() string {
	return "aws_datasync_task"
}

// LocalName returns the local name for [Resource].
func (adt *Resource) LocalName() string {
	return adt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adt *Resource) Configuration() interface{} {
	return adt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adt *Resource) Dependencies() terra.Dependencies {
	return adt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adt *Resource) LifecycleManagement() *terra.Lifecycle {
	return adt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adt *Resource) Attributes() awsDatasyncTaskAttributes {
	return awsDatasyncTaskAttributes{ref: terra.ReferenceResource(adt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adt *Resource) ImportState(state io.Reader) error {
	adt.state = &awsDatasyncTaskState{}
	if err := json.NewDecoder(state).Decode(adt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adt.Type(), adt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adt *Resource) State() (*awsDatasyncTaskState, bool) {
	return adt.state, adt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adt *Resource) StateMust() *awsDatasyncTaskState {
	if adt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adt.Type(), adt.LocalName()))
	}
	return adt.state
}

// Args contains the configurations for aws_datasync_task.
type Args struct {
	// CloudwatchLogGroupArn: string, optional
	CloudwatchLogGroupArn terra.StringValue `hcl:"cloudwatch_log_group_arn,attr"`
	// DestinationLocationArn: string, required
	DestinationLocationArn terra.StringValue `hcl:"destination_location_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// SourceLocationArn: string, required
	SourceLocationArn terra.StringValue `hcl:"source_location_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Excludes: optional
	Excludes *Excludes `hcl:"excludes,block"`
	// Includes: optional
	Includes *Includes `hcl:"includes,block"`
	// Options: optional
	Options *Options `hcl:"options,block"`
	// Schedule: optional
	Schedule *Schedule `hcl:"schedule,block"`
	// TaskReportConfig: optional
	TaskReportConfig *TaskReportConfig `hcl:"task_report_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDatasyncTaskAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_datasync_task.
func (adt awsDatasyncTaskAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("arn"))
}

// CloudwatchLogGroupArn returns a reference to field cloudwatch_log_group_arn of aws_datasync_task.
func (adt awsDatasyncTaskAttributes) CloudwatchLogGroupArn() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("cloudwatch_log_group_arn"))
}

// DestinationLocationArn returns a reference to field destination_location_arn of aws_datasync_task.
func (adt awsDatasyncTaskAttributes) DestinationLocationArn() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("destination_location_arn"))
}

// Id returns a reference to field id of aws_datasync_task.
func (adt awsDatasyncTaskAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("id"))
}

// Name returns a reference to field name of aws_datasync_task.
func (adt awsDatasyncTaskAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("name"))
}

// SourceLocationArn returns a reference to field source_location_arn of aws_datasync_task.
func (adt awsDatasyncTaskAttributes) SourceLocationArn() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("source_location_arn"))
}

// Tags returns a reference to field tags of aws_datasync_task.
func (adt awsDatasyncTaskAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_datasync_task.
func (adt awsDatasyncTaskAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adt.ref.Append("tags_all"))
}

func (adt awsDatasyncTaskAttributes) Excludes() terra.ListValue[ExcludesAttributes] {
	return terra.ReferenceAsList[ExcludesAttributes](adt.ref.Append("excludes"))
}

func (adt awsDatasyncTaskAttributes) Includes() terra.ListValue[IncludesAttributes] {
	return terra.ReferenceAsList[IncludesAttributes](adt.ref.Append("includes"))
}

func (adt awsDatasyncTaskAttributes) Options() terra.ListValue[OptionsAttributes] {
	return terra.ReferenceAsList[OptionsAttributes](adt.ref.Append("options"))
}

func (adt awsDatasyncTaskAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](adt.ref.Append("schedule"))
}

func (adt awsDatasyncTaskAttributes) TaskReportConfig() terra.ListValue[TaskReportConfigAttributes] {
	return terra.ReferenceAsList[TaskReportConfigAttributes](adt.ref.Append("task_report_config"))
}

func (adt awsDatasyncTaskAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adt.ref.Append("timeouts"))
}

type awsDatasyncTaskState struct {
	Arn                    string                  `json:"arn"`
	CloudwatchLogGroupArn  string                  `json:"cloudwatch_log_group_arn"`
	DestinationLocationArn string                  `json:"destination_location_arn"`
	Id                     string                  `json:"id"`
	Name                   string                  `json:"name"`
	SourceLocationArn      string                  `json:"source_location_arn"`
	Tags                   map[string]string       `json:"tags"`
	TagsAll                map[string]string       `json:"tags_all"`
	Excludes               []ExcludesState         `json:"excludes"`
	Includes               []IncludesState         `json:"includes"`
	Options                []OptionsState          `json:"options"`
	Schedule               []ScheduleState         `json:"schedule"`
	TaskReportConfig       []TaskReportConfigState `json:"task_report_config"`
	Timeouts               *TimeoutsState          `json:"timeouts"`
}
