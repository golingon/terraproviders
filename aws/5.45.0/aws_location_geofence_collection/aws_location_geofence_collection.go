// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_location_geofence_collection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_location_geofence_collection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLocationGeofenceCollectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (algc *Resource) Type() string {
	return "aws_location_geofence_collection"
}

// LocalName returns the local name for [Resource].
func (algc *Resource) LocalName() string {
	return algc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (algc *Resource) Configuration() interface{} {
	return algc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (algc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(algc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (algc *Resource) Dependencies() terra.Dependencies {
	return algc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (algc *Resource) LifecycleManagement() *terra.Lifecycle {
	return algc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (algc *Resource) Attributes() awsLocationGeofenceCollectionAttributes {
	return awsLocationGeofenceCollectionAttributes{ref: terra.ReferenceResource(algc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (algc *Resource) ImportState(state io.Reader) error {
	algc.state = &awsLocationGeofenceCollectionState{}
	if err := json.NewDecoder(state).Decode(algc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", algc.Type(), algc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (algc *Resource) State() (*awsLocationGeofenceCollectionState, bool) {
	return algc.state, algc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (algc *Resource) StateMust() *awsLocationGeofenceCollectionState {
	if algc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", algc.Type(), algc.LocalName()))
	}
	return algc.state
}

// Args contains the configurations for aws_location_geofence_collection.
type Args struct {
	// CollectionName: string, required
	CollectionName terra.StringValue `hcl:"collection_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsLocationGeofenceCollectionAttributes struct {
	ref terra.Reference
}

// CollectionArn returns a reference to field collection_arn of aws_location_geofence_collection.
func (algc awsLocationGeofenceCollectionAttributes) CollectionArn() terra.StringValue {
	return terra.ReferenceAsString(algc.ref.Append("collection_arn"))
}

// CollectionName returns a reference to field collection_name of aws_location_geofence_collection.
func (algc awsLocationGeofenceCollectionAttributes) CollectionName() terra.StringValue {
	return terra.ReferenceAsString(algc.ref.Append("collection_name"))
}

// CreateTime returns a reference to field create_time of aws_location_geofence_collection.
func (algc awsLocationGeofenceCollectionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(algc.ref.Append("create_time"))
}

// Description returns a reference to field description of aws_location_geofence_collection.
func (algc awsLocationGeofenceCollectionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(algc.ref.Append("description"))
}

// Id returns a reference to field id of aws_location_geofence_collection.
func (algc awsLocationGeofenceCollectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(algc.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_location_geofence_collection.
func (algc awsLocationGeofenceCollectionAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(algc.ref.Append("kms_key_id"))
}

// Tags returns a reference to field tags of aws_location_geofence_collection.
func (algc awsLocationGeofenceCollectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](algc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_location_geofence_collection.
func (algc awsLocationGeofenceCollectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](algc.ref.Append("tags_all"))
}

// UpdateTime returns a reference to field update_time of aws_location_geofence_collection.
func (algc awsLocationGeofenceCollectionAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(algc.ref.Append("update_time"))
}

func (algc awsLocationGeofenceCollectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](algc.ref.Append("timeouts"))
}

type awsLocationGeofenceCollectionState struct {
	CollectionArn  string            `json:"collection_arn"`
	CollectionName string            `json:"collection_name"`
	CreateTime     string            `json:"create_time"`
	Description    string            `json:"description"`
	Id             string            `json:"id"`
	KmsKeyId       string            `json:"kms_key_id"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
	UpdateTime     string            `json:"update_time"`
	Timeouts       *TimeoutsState    `json:"timeouts"`
}
