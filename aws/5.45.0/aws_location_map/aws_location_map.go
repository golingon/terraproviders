// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_location_map

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_location_map.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLocationMapState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alm *Resource) Type() string {
	return "aws_location_map"
}

// LocalName returns the local name for [Resource].
func (alm *Resource) LocalName() string {
	return alm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alm *Resource) Configuration() interface{} {
	return alm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alm *Resource) Dependencies() terra.Dependencies {
	return alm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alm *Resource) LifecycleManagement() *terra.Lifecycle {
	return alm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alm *Resource) Attributes() awsLocationMapAttributes {
	return awsLocationMapAttributes{ref: terra.ReferenceResource(alm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alm *Resource) ImportState(state io.Reader) error {
	alm.state = &awsLocationMapState{}
	if err := json.NewDecoder(state).Decode(alm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alm.Type(), alm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alm *Resource) State() (*awsLocationMapState, bool) {
	return alm.state, alm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alm *Resource) StateMust() *awsLocationMapState {
	if alm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alm.Type(), alm.LocalName()))
	}
	return alm.state
}

// Args contains the configurations for aws_location_map.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MapName: string, required
	MapName terra.StringValue `hcl:"map_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Configuration: required
	Configuration *Configuration `hcl:"configuration,block" validate:"required"`
}

type awsLocationMapAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of aws_location_map.
func (alm awsLocationMapAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(alm.ref.Append("create_time"))
}

// Description returns a reference to field description of aws_location_map.
func (alm awsLocationMapAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(alm.ref.Append("description"))
}

// Id returns a reference to field id of aws_location_map.
func (alm awsLocationMapAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alm.ref.Append("id"))
}

// MapArn returns a reference to field map_arn of aws_location_map.
func (alm awsLocationMapAttributes) MapArn() terra.StringValue {
	return terra.ReferenceAsString(alm.ref.Append("map_arn"))
}

// MapName returns a reference to field map_name of aws_location_map.
func (alm awsLocationMapAttributes) MapName() terra.StringValue {
	return terra.ReferenceAsString(alm.ref.Append("map_name"))
}

// Tags returns a reference to field tags of aws_location_map.
func (alm awsLocationMapAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alm.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_location_map.
func (alm awsLocationMapAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alm.ref.Append("tags_all"))
}

// UpdateTime returns a reference to field update_time of aws_location_map.
func (alm awsLocationMapAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(alm.ref.Append("update_time"))
}

func (alm awsLocationMapAttributes) Configuration() terra.ListValue[ConfigurationAttributes] {
	return terra.ReferenceAsList[ConfigurationAttributes](alm.ref.Append("configuration"))
}

type awsLocationMapState struct {
	CreateTime    string               `json:"create_time"`
	Description   string               `json:"description"`
	Id            string               `json:"id"`
	MapArn        string               `json:"map_arn"`
	MapName       string               `json:"map_name"`
	Tags          map[string]string    `json:"tags"`
	TagsAll       map[string]string    `json:"tags_all"`
	UpdateTime    string               `json:"update_time"`
	Configuration []ConfigurationState `json:"configuration"`
}
