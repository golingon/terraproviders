// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_event_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudwatch_event_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudwatchEventConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acec *Resource) Type() string {
	return "aws_cloudwatch_event_connection"
}

// LocalName returns the local name for [Resource].
func (acec *Resource) LocalName() string {
	return acec.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acec *Resource) Configuration() interface{} {
	return acec.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acec *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acec)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acec *Resource) Dependencies() terra.Dependencies {
	return acec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acec *Resource) LifecycleManagement() *terra.Lifecycle {
	return acec.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acec *Resource) Attributes() awsCloudwatchEventConnectionAttributes {
	return awsCloudwatchEventConnectionAttributes{ref: terra.ReferenceResource(acec)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acec *Resource) ImportState(state io.Reader) error {
	acec.state = &awsCloudwatchEventConnectionState{}
	if err := json.NewDecoder(state).Decode(acec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acec.Type(), acec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acec *Resource) State() (*awsCloudwatchEventConnectionState, bool) {
	return acec.state, acec.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acec *Resource) StateMust() *awsCloudwatchEventConnectionState {
	if acec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acec.Type(), acec.LocalName()))
	}
	return acec.state
}

// Args contains the configurations for aws_cloudwatch_event_connection.
type Args struct {
	// AuthorizationType: string, required
	AuthorizationType terra.StringValue `hcl:"authorization_type,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// AuthParameters: required
	AuthParameters *AuthParameters `hcl:"auth_parameters,block" validate:"required"`
}

type awsCloudwatchEventConnectionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudwatch_event_connection.
func (acec awsCloudwatchEventConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acec.ref.Append("arn"))
}

// AuthorizationType returns a reference to field authorization_type of aws_cloudwatch_event_connection.
func (acec awsCloudwatchEventConnectionAttributes) AuthorizationType() terra.StringValue {
	return terra.ReferenceAsString(acec.ref.Append("authorization_type"))
}

// Description returns a reference to field description of aws_cloudwatch_event_connection.
func (acec awsCloudwatchEventConnectionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acec.ref.Append("description"))
}

// Id returns a reference to field id of aws_cloudwatch_event_connection.
func (acec awsCloudwatchEventConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acec.ref.Append("id"))
}

// Name returns a reference to field name of aws_cloudwatch_event_connection.
func (acec awsCloudwatchEventConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acec.ref.Append("name"))
}

// SecretArn returns a reference to field secret_arn of aws_cloudwatch_event_connection.
func (acec awsCloudwatchEventConnectionAttributes) SecretArn() terra.StringValue {
	return terra.ReferenceAsString(acec.ref.Append("secret_arn"))
}

func (acec awsCloudwatchEventConnectionAttributes) AuthParameters() terra.ListValue[AuthParametersAttributes] {
	return terra.ReferenceAsList[AuthParametersAttributes](acec.ref.Append("auth_parameters"))
}

type awsCloudwatchEventConnectionState struct {
	Arn               string                `json:"arn"`
	AuthorizationType string                `json:"authorization_type"`
	Description       string                `json:"description"`
	Id                string                `json:"id"`
	Name              string                `json:"name"`
	SecretArn         string                `json:"secret_arn"`
	AuthParameters    []AuthParametersState `json:"auth_parameters"`
}
