// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lightsail_domain

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lightsail_domain.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLightsailDomainState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ald *Resource) Type() string {
	return "aws_lightsail_domain"
}

// LocalName returns the local name for [Resource].
func (ald *Resource) LocalName() string {
	return ald.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ald *Resource) Configuration() interface{} {
	return ald.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ald *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ald)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ald *Resource) Dependencies() terra.Dependencies {
	return ald.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ald *Resource) LifecycleManagement() *terra.Lifecycle {
	return ald.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ald *Resource) Attributes() awsLightsailDomainAttributes {
	return awsLightsailDomainAttributes{ref: terra.ReferenceResource(ald)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ald *Resource) ImportState(state io.Reader) error {
	ald.state = &awsLightsailDomainState{}
	if err := json.NewDecoder(state).Decode(ald.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ald.Type(), ald.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ald *Resource) State() (*awsLightsailDomainState, bool) {
	return ald.state, ald.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ald *Resource) StateMust() *awsLightsailDomainState {
	if ald.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ald.Type(), ald.LocalName()))
	}
	return ald.state
}

// Args contains the configurations for aws_lightsail_domain.
type Args struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsLightsailDomainAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_lightsail_domain.
func (ald awsLightsailDomainAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("arn"))
}

// DomainName returns a reference to field domain_name of aws_lightsail_domain.
func (ald awsLightsailDomainAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_lightsail_domain.
func (ald awsLightsailDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("id"))
}

type awsLightsailDomainState struct {
	Arn        string `json:"arn"`
	DomainName string `json:"domain_name"`
	Id         string `json:"id"`
}
