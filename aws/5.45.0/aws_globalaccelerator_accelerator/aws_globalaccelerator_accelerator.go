// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_globalaccelerator_accelerator

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_globalaccelerator_accelerator.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlobalacceleratorAcceleratorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aga *Resource) Type() string {
	return "aws_globalaccelerator_accelerator"
}

// LocalName returns the local name for [Resource].
func (aga *Resource) LocalName() string {
	return aga.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aga *Resource) Configuration() interface{} {
	return aga.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aga *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aga)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aga *Resource) Dependencies() terra.Dependencies {
	return aga.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aga *Resource) LifecycleManagement() *terra.Lifecycle {
	return aga.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aga *Resource) Attributes() awsGlobalacceleratorAcceleratorAttributes {
	return awsGlobalacceleratorAcceleratorAttributes{ref: terra.ReferenceResource(aga)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aga *Resource) ImportState(state io.Reader) error {
	aga.state = &awsGlobalacceleratorAcceleratorState{}
	if err := json.NewDecoder(state).Decode(aga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aga.Type(), aga.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aga *Resource) State() (*awsGlobalacceleratorAcceleratorState, bool) {
	return aga.state, aga.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aga *Resource) StateMust() *awsGlobalacceleratorAcceleratorState {
	if aga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aga.Type(), aga.LocalName()))
	}
	return aga.state
}

// Args contains the configurations for aws_globalaccelerator_accelerator.
type Args struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddressType: string, optional
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr"`
	// IpAddresses: list of string, optional
	IpAddresses terra.ListValue[terra.StringValue] `hcl:"ip_addresses,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Attributes: optional
	Attributes *Attributes `hcl:"attributes,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsGlobalacceleratorAcceleratorAttributes struct {
	ref terra.Reference
}

// DnsName returns a reference to field dns_name of aws_globalaccelerator_accelerator.
func (aga awsGlobalacceleratorAcceleratorAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("dns_name"))
}

// DualStackDnsName returns a reference to field dual_stack_dns_name of aws_globalaccelerator_accelerator.
func (aga awsGlobalacceleratorAcceleratorAttributes) DualStackDnsName() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("dual_stack_dns_name"))
}

// Enabled returns a reference to field enabled of aws_globalaccelerator_accelerator.
func (aga awsGlobalacceleratorAcceleratorAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aga.ref.Append("enabled"))
}

// HostedZoneId returns a reference to field hosted_zone_id of aws_globalaccelerator_accelerator.
func (aga awsGlobalacceleratorAcceleratorAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("hosted_zone_id"))
}

// Id returns a reference to field id of aws_globalaccelerator_accelerator.
func (aga awsGlobalacceleratorAcceleratorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("id"))
}

// IpAddressType returns a reference to field ip_address_type of aws_globalaccelerator_accelerator.
func (aga awsGlobalacceleratorAcceleratorAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("ip_address_type"))
}

// IpAddresses returns a reference to field ip_addresses of aws_globalaccelerator_accelerator.
func (aga awsGlobalacceleratorAcceleratorAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aga.ref.Append("ip_addresses"))
}

// Name returns a reference to field name of aws_globalaccelerator_accelerator.
func (aga awsGlobalacceleratorAcceleratorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_globalaccelerator_accelerator.
func (aga awsGlobalacceleratorAcceleratorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aga.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_globalaccelerator_accelerator.
func (aga awsGlobalacceleratorAcceleratorAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aga.ref.Append("tags_all"))
}

func (aga awsGlobalacceleratorAcceleratorAttributes) IpSets() terra.ListValue[IpSetsAttributes] {
	return terra.ReferenceAsList[IpSetsAttributes](aga.ref.Append("ip_sets"))
}

func (aga awsGlobalacceleratorAcceleratorAttributes) Attributes() terra.ListValue[AttributesAttributes] {
	return terra.ReferenceAsList[AttributesAttributes](aga.ref.Append("attributes"))
}

func (aga awsGlobalacceleratorAcceleratorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aga.ref.Append("timeouts"))
}

type awsGlobalacceleratorAcceleratorState struct {
	DnsName          string            `json:"dns_name"`
	DualStackDnsName string            `json:"dual_stack_dns_name"`
	Enabled          bool              `json:"enabled"`
	HostedZoneId     string            `json:"hosted_zone_id"`
	Id               string            `json:"id"`
	IpAddressType    string            `json:"ip_address_type"`
	IpAddresses      []string          `json:"ip_addresses"`
	Name             string            `json:"name"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
	IpSets           []IpSetsState     `json:"ip_sets"`
	Attributes       []AttributesState `json:"attributes"`
	Timeouts         *TimeoutsState    `json:"timeouts"`
}
