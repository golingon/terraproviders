// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_globalaccelerator_accelerator

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_globalaccelerator_accelerator.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aga *DataSource) DataSource() string {
	return "aws_globalaccelerator_accelerator"
}

// LocalName returns the local name for [DataSource].
func (aga *DataSource) LocalName() string {
	return aga.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aga *DataSource) Configuration() interface{} {
	return aga.Args
}

// Attributes returns the attributes for [DataSource].
func (aga *DataSource) Attributes() dataAwsGlobalacceleratorAcceleratorAttributes {
	return dataAwsGlobalacceleratorAcceleratorAttributes{ref: terra.ReferenceDataSource(aga)}
}

// DataArgs contains the configurations for aws_globalaccelerator_accelerator.
type DataArgs struct {
	// Arn: string, optional
	Arn terra.StringValue `hcl:"arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type dataAwsGlobalacceleratorAcceleratorAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_globalaccelerator_accelerator.
func (aga dataAwsGlobalacceleratorAcceleratorAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("arn"))
}

// DnsName returns a reference to field dns_name of aws_globalaccelerator_accelerator.
func (aga dataAwsGlobalacceleratorAcceleratorAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("dns_name"))
}

// DualStackDnsName returns a reference to field dual_stack_dns_name of aws_globalaccelerator_accelerator.
func (aga dataAwsGlobalacceleratorAcceleratorAttributes) DualStackDnsName() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("dual_stack_dns_name"))
}

// Enabled returns a reference to field enabled of aws_globalaccelerator_accelerator.
func (aga dataAwsGlobalacceleratorAcceleratorAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aga.ref.Append("enabled"))
}

// HostedZoneId returns a reference to field hosted_zone_id of aws_globalaccelerator_accelerator.
func (aga dataAwsGlobalacceleratorAcceleratorAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("hosted_zone_id"))
}

// Id returns a reference to field id of aws_globalaccelerator_accelerator.
func (aga dataAwsGlobalacceleratorAcceleratorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("id"))
}

// IpAddressType returns a reference to field ip_address_type of aws_globalaccelerator_accelerator.
func (aga dataAwsGlobalacceleratorAcceleratorAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("ip_address_type"))
}

// Name returns a reference to field name of aws_globalaccelerator_accelerator.
func (aga dataAwsGlobalacceleratorAcceleratorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aga.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_globalaccelerator_accelerator.
func (aga dataAwsGlobalacceleratorAcceleratorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aga.ref.Append("tags"))
}

func (aga dataAwsGlobalacceleratorAcceleratorAttributes) Attributes() terra.ListValue[DataAttributesAttributes] {
	return terra.ReferenceAsList[DataAttributesAttributes](aga.ref.Append("attributes"))
}

func (aga dataAwsGlobalacceleratorAcceleratorAttributes) IpSets() terra.ListValue[DataIpSetsAttributes] {
	return terra.ReferenceAsList[DataIpSetsAttributes](aga.ref.Append("ip_sets"))
}
