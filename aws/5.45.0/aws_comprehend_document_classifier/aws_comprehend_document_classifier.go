// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_comprehend_document_classifier

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_comprehend_document_classifier.
type Resource struct {
	Name      string
	Args      Args
	state     *awsComprehendDocumentClassifierState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acdc *Resource) Type() string {
	return "aws_comprehend_document_classifier"
}

// LocalName returns the local name for [Resource].
func (acdc *Resource) LocalName() string {
	return acdc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acdc *Resource) Configuration() interface{} {
	return acdc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acdc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acdc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acdc *Resource) Dependencies() terra.Dependencies {
	return acdc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acdc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acdc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acdc *Resource) Attributes() awsComprehendDocumentClassifierAttributes {
	return awsComprehendDocumentClassifierAttributes{ref: terra.ReferenceResource(acdc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acdc *Resource) ImportState(state io.Reader) error {
	acdc.state = &awsComprehendDocumentClassifierState{}
	if err := json.NewDecoder(state).Decode(acdc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acdc.Type(), acdc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acdc *Resource) State() (*awsComprehendDocumentClassifierState, bool) {
	return acdc.state, acdc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acdc *Resource) StateMust() *awsComprehendDocumentClassifierState {
	if acdc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acdc.Type(), acdc.LocalName()))
	}
	return acdc.state
}

// Args contains the configurations for aws_comprehend_document_classifier.
type Args struct {
	// DataAccessRoleArn: string, required
	DataAccessRoleArn terra.StringValue `hcl:"data_access_role_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// ModelKmsKeyId: string, optional
	ModelKmsKeyId terra.StringValue `hcl:"model_kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VersionName: string, optional
	VersionName terra.StringValue `hcl:"version_name,attr"`
	// VersionNamePrefix: string, optional
	VersionNamePrefix terra.StringValue `hcl:"version_name_prefix,attr"`
	// VolumeKmsKeyId: string, optional
	VolumeKmsKeyId terra.StringValue `hcl:"volume_kms_key_id,attr"`
	// InputDataConfig: required
	InputDataConfig *InputDataConfig `hcl:"input_data_config,block" validate:"required"`
	// OutputDataConfig: optional
	OutputDataConfig *OutputDataConfig `hcl:"output_data_config,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcConfig: optional
	VpcConfig *VpcConfig `hcl:"vpc_config,block"`
}

type awsComprehendDocumentClassifierAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_comprehend_document_classifier.
func (acdc awsComprehendDocumentClassifierAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("arn"))
}

// DataAccessRoleArn returns a reference to field data_access_role_arn of aws_comprehend_document_classifier.
func (acdc awsComprehendDocumentClassifierAttributes) DataAccessRoleArn() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("data_access_role_arn"))
}

// Id returns a reference to field id of aws_comprehend_document_classifier.
func (acdc awsComprehendDocumentClassifierAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("id"))
}

// LanguageCode returns a reference to field language_code of aws_comprehend_document_classifier.
func (acdc awsComprehendDocumentClassifierAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("language_code"))
}

// Mode returns a reference to field mode of aws_comprehend_document_classifier.
func (acdc awsComprehendDocumentClassifierAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("mode"))
}

// ModelKmsKeyId returns a reference to field model_kms_key_id of aws_comprehend_document_classifier.
func (acdc awsComprehendDocumentClassifierAttributes) ModelKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("model_kms_key_id"))
}

// Name returns a reference to field name of aws_comprehend_document_classifier.
func (acdc awsComprehendDocumentClassifierAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_comprehend_document_classifier.
func (acdc awsComprehendDocumentClassifierAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acdc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_comprehend_document_classifier.
func (acdc awsComprehendDocumentClassifierAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acdc.ref.Append("tags_all"))
}

// VersionName returns a reference to field version_name of aws_comprehend_document_classifier.
func (acdc awsComprehendDocumentClassifierAttributes) VersionName() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("version_name"))
}

// VersionNamePrefix returns a reference to field version_name_prefix of aws_comprehend_document_classifier.
func (acdc awsComprehendDocumentClassifierAttributes) VersionNamePrefix() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("version_name_prefix"))
}

// VolumeKmsKeyId returns a reference to field volume_kms_key_id of aws_comprehend_document_classifier.
func (acdc awsComprehendDocumentClassifierAttributes) VolumeKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("volume_kms_key_id"))
}

func (acdc awsComprehendDocumentClassifierAttributes) InputDataConfig() terra.ListValue[InputDataConfigAttributes] {
	return terra.ReferenceAsList[InputDataConfigAttributes](acdc.ref.Append("input_data_config"))
}

func (acdc awsComprehendDocumentClassifierAttributes) OutputDataConfig() terra.ListValue[OutputDataConfigAttributes] {
	return terra.ReferenceAsList[OutputDataConfigAttributes](acdc.ref.Append("output_data_config"))
}

func (acdc awsComprehendDocumentClassifierAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acdc.ref.Append("timeouts"))
}

func (acdc awsComprehendDocumentClassifierAttributes) VpcConfig() terra.ListValue[VpcConfigAttributes] {
	return terra.ReferenceAsList[VpcConfigAttributes](acdc.ref.Append("vpc_config"))
}

type awsComprehendDocumentClassifierState struct {
	Arn               string                  `json:"arn"`
	DataAccessRoleArn string                  `json:"data_access_role_arn"`
	Id                string                  `json:"id"`
	LanguageCode      string                  `json:"language_code"`
	Mode              string                  `json:"mode"`
	ModelKmsKeyId     string                  `json:"model_kms_key_id"`
	Name              string                  `json:"name"`
	Tags              map[string]string       `json:"tags"`
	TagsAll           map[string]string       `json:"tags_all"`
	VersionName       string                  `json:"version_name"`
	VersionNamePrefix string                  `json:"version_name_prefix"`
	VolumeKmsKeyId    string                  `json:"volume_kms_key_id"`
	InputDataConfig   []InputDataConfigState  `json:"input_data_config"`
	OutputDataConfig  []OutputDataConfigState `json:"output_data_config"`
	Timeouts          *TimeoutsState          `json:"timeouts"`
	VpcConfig         []VpcConfigState        `json:"vpc_config"`
}
