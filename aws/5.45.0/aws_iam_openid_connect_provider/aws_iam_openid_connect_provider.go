// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_openid_connect_provider

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iam_openid_connect_provider.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIamOpenidConnectProviderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aiocp *Resource) Type() string {
	return "aws_iam_openid_connect_provider"
}

// LocalName returns the local name for [Resource].
func (aiocp *Resource) LocalName() string {
	return aiocp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aiocp *Resource) Configuration() interface{} {
	return aiocp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aiocp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aiocp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aiocp *Resource) Dependencies() terra.Dependencies {
	return aiocp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aiocp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aiocp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aiocp *Resource) Attributes() awsIamOpenidConnectProviderAttributes {
	return awsIamOpenidConnectProviderAttributes{ref: terra.ReferenceResource(aiocp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aiocp *Resource) ImportState(state io.Reader) error {
	aiocp.state = &awsIamOpenidConnectProviderState{}
	if err := json.NewDecoder(state).Decode(aiocp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiocp.Type(), aiocp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aiocp *Resource) State() (*awsIamOpenidConnectProviderState, bool) {
	return aiocp.state, aiocp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aiocp *Resource) StateMust() *awsIamOpenidConnectProviderState {
	if aiocp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiocp.Type(), aiocp.LocalName()))
	}
	return aiocp.state
}

// Args contains the configurations for aws_iam_openid_connect_provider.
type Args struct {
	// ClientIdList: set of string, required
	ClientIdList terra.SetValue[terra.StringValue] `hcl:"client_id_list,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ThumbprintList: list of string, required
	ThumbprintList terra.ListValue[terra.StringValue] `hcl:"thumbprint_list,attr" validate:"required"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
}

type awsIamOpenidConnectProviderAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iam_openid_connect_provider.
func (aiocp awsIamOpenidConnectProviderAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aiocp.ref.Append("arn"))
}

// ClientIdList returns a reference to field client_id_list of aws_iam_openid_connect_provider.
func (aiocp awsIamOpenidConnectProviderAttributes) ClientIdList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aiocp.ref.Append("client_id_list"))
}

// Id returns a reference to field id of aws_iam_openid_connect_provider.
func (aiocp awsIamOpenidConnectProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiocp.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_iam_openid_connect_provider.
func (aiocp awsIamOpenidConnectProviderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiocp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_iam_openid_connect_provider.
func (aiocp awsIamOpenidConnectProviderAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiocp.ref.Append("tags_all"))
}

// ThumbprintList returns a reference to field thumbprint_list of aws_iam_openid_connect_provider.
func (aiocp awsIamOpenidConnectProviderAttributes) ThumbprintList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aiocp.ref.Append("thumbprint_list"))
}

// Url returns a reference to field url of aws_iam_openid_connect_provider.
func (aiocp awsIamOpenidConnectProviderAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(aiocp.ref.Append("url"))
}

type awsIamOpenidConnectProviderState struct {
	Arn            string            `json:"arn"`
	ClientIdList   []string          `json:"client_id_list"`
	Id             string            `json:"id"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
	ThumbprintList []string          `json:"thumbprint_list"`
	Url            string            `json:"url"`
}
