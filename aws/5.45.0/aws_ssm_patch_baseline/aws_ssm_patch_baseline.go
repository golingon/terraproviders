// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssm_patch_baseline

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ssm_patch_baseline.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSsmPatchBaselineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aspb *Resource) Type() string {
	return "aws_ssm_patch_baseline"
}

// LocalName returns the local name for [Resource].
func (aspb *Resource) LocalName() string {
	return aspb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aspb *Resource) Configuration() interface{} {
	return aspb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aspb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aspb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aspb *Resource) Dependencies() terra.Dependencies {
	return aspb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aspb *Resource) LifecycleManagement() *terra.Lifecycle {
	return aspb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aspb *Resource) Attributes() awsSsmPatchBaselineAttributes {
	return awsSsmPatchBaselineAttributes{ref: terra.ReferenceResource(aspb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aspb *Resource) ImportState(state io.Reader) error {
	aspb.state = &awsSsmPatchBaselineState{}
	if err := json.NewDecoder(state).Decode(aspb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aspb.Type(), aspb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aspb *Resource) State() (*awsSsmPatchBaselineState, bool) {
	return aspb.state, aspb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aspb *Resource) StateMust() *awsSsmPatchBaselineState {
	if aspb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aspb.Type(), aspb.LocalName()))
	}
	return aspb.state
}

// Args contains the configurations for aws_ssm_patch_baseline.
type Args struct {
	// ApprovedPatches: set of string, optional
	ApprovedPatches terra.SetValue[terra.StringValue] `hcl:"approved_patches,attr"`
	// ApprovedPatchesComplianceLevel: string, optional
	ApprovedPatchesComplianceLevel terra.StringValue `hcl:"approved_patches_compliance_level,attr"`
	// ApprovedPatchesEnableNonSecurity: bool, optional
	ApprovedPatchesEnableNonSecurity terra.BoolValue `hcl:"approved_patches_enable_non_security,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OperatingSystem: string, optional
	OperatingSystem terra.StringValue `hcl:"operating_system,attr"`
	// RejectedPatches: set of string, optional
	RejectedPatches terra.SetValue[terra.StringValue] `hcl:"rejected_patches,attr"`
	// RejectedPatchesAction: string, optional
	RejectedPatchesAction terra.StringValue `hcl:"rejected_patches_action,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ApprovalRule: min=0
	ApprovalRule []ApprovalRule `hcl:"approval_rule,block" validate:"min=0"`
	// GlobalFilter: min=0,max=4
	GlobalFilter []GlobalFilter `hcl:"global_filter,block" validate:"min=0,max=4"`
	// Source: min=0,max=20
	Source []Source `hcl:"source,block" validate:"min=0,max=20"`
}

type awsSsmPatchBaselineAttributes struct {
	ref terra.Reference
}

// ApprovedPatches returns a reference to field approved_patches of aws_ssm_patch_baseline.
func (aspb awsSsmPatchBaselineAttributes) ApprovedPatches() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aspb.ref.Append("approved_patches"))
}

// ApprovedPatchesComplianceLevel returns a reference to field approved_patches_compliance_level of aws_ssm_patch_baseline.
func (aspb awsSsmPatchBaselineAttributes) ApprovedPatchesComplianceLevel() terra.StringValue {
	return terra.ReferenceAsString(aspb.ref.Append("approved_patches_compliance_level"))
}

// ApprovedPatchesEnableNonSecurity returns a reference to field approved_patches_enable_non_security of aws_ssm_patch_baseline.
func (aspb awsSsmPatchBaselineAttributes) ApprovedPatchesEnableNonSecurity() terra.BoolValue {
	return terra.ReferenceAsBool(aspb.ref.Append("approved_patches_enable_non_security"))
}

// Arn returns a reference to field arn of aws_ssm_patch_baseline.
func (aspb awsSsmPatchBaselineAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aspb.ref.Append("arn"))
}

// Description returns a reference to field description of aws_ssm_patch_baseline.
func (aspb awsSsmPatchBaselineAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aspb.ref.Append("description"))
}

// Id returns a reference to field id of aws_ssm_patch_baseline.
func (aspb awsSsmPatchBaselineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aspb.ref.Append("id"))
}

// Json returns a reference to field json of aws_ssm_patch_baseline.
func (aspb awsSsmPatchBaselineAttributes) Json() terra.StringValue {
	return terra.ReferenceAsString(aspb.ref.Append("json"))
}

// Name returns a reference to field name of aws_ssm_patch_baseline.
func (aspb awsSsmPatchBaselineAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aspb.ref.Append("name"))
}

// OperatingSystem returns a reference to field operating_system of aws_ssm_patch_baseline.
func (aspb awsSsmPatchBaselineAttributes) OperatingSystem() terra.StringValue {
	return terra.ReferenceAsString(aspb.ref.Append("operating_system"))
}

// RejectedPatches returns a reference to field rejected_patches of aws_ssm_patch_baseline.
func (aspb awsSsmPatchBaselineAttributes) RejectedPatches() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aspb.ref.Append("rejected_patches"))
}

// RejectedPatchesAction returns a reference to field rejected_patches_action of aws_ssm_patch_baseline.
func (aspb awsSsmPatchBaselineAttributes) RejectedPatchesAction() terra.StringValue {
	return terra.ReferenceAsString(aspb.ref.Append("rejected_patches_action"))
}

// Tags returns a reference to field tags of aws_ssm_patch_baseline.
func (aspb awsSsmPatchBaselineAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aspb.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ssm_patch_baseline.
func (aspb awsSsmPatchBaselineAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aspb.ref.Append("tags_all"))
}

func (aspb awsSsmPatchBaselineAttributes) ApprovalRule() terra.ListValue[ApprovalRuleAttributes] {
	return terra.ReferenceAsList[ApprovalRuleAttributes](aspb.ref.Append("approval_rule"))
}

func (aspb awsSsmPatchBaselineAttributes) GlobalFilter() terra.ListValue[GlobalFilterAttributes] {
	return terra.ReferenceAsList[GlobalFilterAttributes](aspb.ref.Append("global_filter"))
}

func (aspb awsSsmPatchBaselineAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](aspb.ref.Append("source"))
}

type awsSsmPatchBaselineState struct {
	ApprovedPatches                  []string            `json:"approved_patches"`
	ApprovedPatchesComplianceLevel   string              `json:"approved_patches_compliance_level"`
	ApprovedPatchesEnableNonSecurity bool                `json:"approved_patches_enable_non_security"`
	Arn                              string              `json:"arn"`
	Description                      string              `json:"description"`
	Id                               string              `json:"id"`
	Json                             string              `json:"json"`
	Name                             string              `json:"name"`
	OperatingSystem                  string              `json:"operating_system"`
	RejectedPatches                  []string            `json:"rejected_patches"`
	RejectedPatchesAction            string              `json:"rejected_patches_action"`
	Tags                             map[string]string   `json:"tags"`
	TagsAll                          map[string]string   `json:"tags_all"`
	ApprovalRule                     []ApprovalRuleState `json:"approval_rule"`
	GlobalFilter                     []GlobalFilterState `json:"global_filter"`
	Source                           []SourceState       `json:"source"`
}
