// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dx_gateway_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dx_gateway_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDxGatewayAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adga *Resource) Type() string {
	return "aws_dx_gateway_association"
}

// LocalName returns the local name for [Resource].
func (adga *Resource) LocalName() string {
	return adga.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adga *Resource) Configuration() interface{} {
	return adga.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adga *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adga)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adga *Resource) Dependencies() terra.Dependencies {
	return adga.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adga *Resource) LifecycleManagement() *terra.Lifecycle {
	return adga.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adga *Resource) Attributes() awsDxGatewayAssociationAttributes {
	return awsDxGatewayAssociationAttributes{ref: terra.ReferenceResource(adga)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adga *Resource) ImportState(state io.Reader) error {
	adga.state = &awsDxGatewayAssociationState{}
	if err := json.NewDecoder(state).Decode(adga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adga.Type(), adga.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adga *Resource) State() (*awsDxGatewayAssociationState, bool) {
	return adga.state, adga.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adga *Resource) StateMust() *awsDxGatewayAssociationState {
	if adga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adga.Type(), adga.LocalName()))
	}
	return adga.state
}

// Args contains the configurations for aws_dx_gateway_association.
type Args struct {
	// AllowedPrefixes: set of string, optional
	AllowedPrefixes terra.SetValue[terra.StringValue] `hcl:"allowed_prefixes,attr"`
	// AssociatedGatewayId: string, optional
	AssociatedGatewayId terra.StringValue `hcl:"associated_gateway_id,attr"`
	// AssociatedGatewayOwnerAccountId: string, optional
	AssociatedGatewayOwnerAccountId terra.StringValue `hcl:"associated_gateway_owner_account_id,attr"`
	// DxGatewayId: string, required
	DxGatewayId terra.StringValue `hcl:"dx_gateway_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProposalId: string, optional
	ProposalId terra.StringValue `hcl:"proposal_id,attr"`
	// VpnGatewayId: string, optional
	VpnGatewayId terra.StringValue `hcl:"vpn_gateway_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDxGatewayAssociationAttributes struct {
	ref terra.Reference
}

// AllowedPrefixes returns a reference to field allowed_prefixes of aws_dx_gateway_association.
func (adga awsDxGatewayAssociationAttributes) AllowedPrefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adga.ref.Append("allowed_prefixes"))
}

// AssociatedGatewayId returns a reference to field associated_gateway_id of aws_dx_gateway_association.
func (adga awsDxGatewayAssociationAttributes) AssociatedGatewayId() terra.StringValue {
	return terra.ReferenceAsString(adga.ref.Append("associated_gateway_id"))
}

// AssociatedGatewayOwnerAccountId returns a reference to field associated_gateway_owner_account_id of aws_dx_gateway_association.
func (adga awsDxGatewayAssociationAttributes) AssociatedGatewayOwnerAccountId() terra.StringValue {
	return terra.ReferenceAsString(adga.ref.Append("associated_gateway_owner_account_id"))
}

// AssociatedGatewayType returns a reference to field associated_gateway_type of aws_dx_gateway_association.
func (adga awsDxGatewayAssociationAttributes) AssociatedGatewayType() terra.StringValue {
	return terra.ReferenceAsString(adga.ref.Append("associated_gateway_type"))
}

// DxGatewayAssociationId returns a reference to field dx_gateway_association_id of aws_dx_gateway_association.
func (adga awsDxGatewayAssociationAttributes) DxGatewayAssociationId() terra.StringValue {
	return terra.ReferenceAsString(adga.ref.Append("dx_gateway_association_id"))
}

// DxGatewayId returns a reference to field dx_gateway_id of aws_dx_gateway_association.
func (adga awsDxGatewayAssociationAttributes) DxGatewayId() terra.StringValue {
	return terra.ReferenceAsString(adga.ref.Append("dx_gateway_id"))
}

// DxGatewayOwnerAccountId returns a reference to field dx_gateway_owner_account_id of aws_dx_gateway_association.
func (adga awsDxGatewayAssociationAttributes) DxGatewayOwnerAccountId() terra.StringValue {
	return terra.ReferenceAsString(adga.ref.Append("dx_gateway_owner_account_id"))
}

// Id returns a reference to field id of aws_dx_gateway_association.
func (adga awsDxGatewayAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adga.ref.Append("id"))
}

// ProposalId returns a reference to field proposal_id of aws_dx_gateway_association.
func (adga awsDxGatewayAssociationAttributes) ProposalId() terra.StringValue {
	return terra.ReferenceAsString(adga.ref.Append("proposal_id"))
}

// VpnGatewayId returns a reference to field vpn_gateway_id of aws_dx_gateway_association.
func (adga awsDxGatewayAssociationAttributes) VpnGatewayId() terra.StringValue {
	return terra.ReferenceAsString(adga.ref.Append("vpn_gateway_id"))
}

func (adga awsDxGatewayAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adga.ref.Append("timeouts"))
}

type awsDxGatewayAssociationState struct {
	AllowedPrefixes                 []string       `json:"allowed_prefixes"`
	AssociatedGatewayId             string         `json:"associated_gateway_id"`
	AssociatedGatewayOwnerAccountId string         `json:"associated_gateway_owner_account_id"`
	AssociatedGatewayType           string         `json:"associated_gateway_type"`
	DxGatewayAssociationId          string         `json:"dx_gateway_association_id"`
	DxGatewayId                     string         `json:"dx_gateway_id"`
	DxGatewayOwnerAccountId         string         `json:"dx_gateway_owner_account_id"`
	Id                              string         `json:"id"`
	ProposalId                      string         `json:"proposal_id"`
	VpnGatewayId                    string         `json:"vpn_gateway_id"`
	Timeouts                        *TimeoutsState `json:"timeouts"`
}
