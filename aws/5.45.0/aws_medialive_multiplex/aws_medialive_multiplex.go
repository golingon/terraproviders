// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_medialive_multiplex

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_medialive_multiplex.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMedialiveMultiplexState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amm *Resource) Type() string {
	return "aws_medialive_multiplex"
}

// LocalName returns the local name for [Resource].
func (amm *Resource) LocalName() string {
	return amm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amm *Resource) Configuration() interface{} {
	return amm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amm *Resource) Dependencies() terra.Dependencies {
	return amm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amm *Resource) LifecycleManagement() *terra.Lifecycle {
	return amm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amm *Resource) Attributes() awsMedialiveMultiplexAttributes {
	return awsMedialiveMultiplexAttributes{ref: terra.ReferenceResource(amm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amm *Resource) ImportState(state io.Reader) error {
	amm.state = &awsMedialiveMultiplexState{}
	if err := json.NewDecoder(state).Decode(amm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amm.Type(), amm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amm *Resource) State() (*awsMedialiveMultiplexState, bool) {
	return amm.state, amm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amm *Resource) StateMust() *awsMedialiveMultiplexState {
	if amm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amm.Type(), amm.LocalName()))
	}
	return amm.state
}

// Args contains the configurations for aws_medialive_multiplex.
type Args struct {
	// AvailabilityZones: list of string, required
	AvailabilityZones terra.ListValue[terra.StringValue] `hcl:"availability_zones,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StartMultiplex: bool, optional
	StartMultiplex terra.BoolValue `hcl:"start_multiplex,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// MultiplexSettings: optional
	MultiplexSettings *MultiplexSettings `hcl:"multiplex_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsMedialiveMultiplexAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_medialive_multiplex.
func (amm awsMedialiveMultiplexAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(amm.ref.Append("arn"))
}

// AvailabilityZones returns a reference to field availability_zones of aws_medialive_multiplex.
func (amm awsMedialiveMultiplexAttributes) AvailabilityZones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](amm.ref.Append("availability_zones"))
}

// Id returns a reference to field id of aws_medialive_multiplex.
func (amm awsMedialiveMultiplexAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amm.ref.Append("id"))
}

// Name returns a reference to field name of aws_medialive_multiplex.
func (amm awsMedialiveMultiplexAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amm.ref.Append("name"))
}

// StartMultiplex returns a reference to field start_multiplex of aws_medialive_multiplex.
func (amm awsMedialiveMultiplexAttributes) StartMultiplex() terra.BoolValue {
	return terra.ReferenceAsBool(amm.ref.Append("start_multiplex"))
}

// Tags returns a reference to field tags of aws_medialive_multiplex.
func (amm awsMedialiveMultiplexAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amm.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_medialive_multiplex.
func (amm awsMedialiveMultiplexAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amm.ref.Append("tags_all"))
}

func (amm awsMedialiveMultiplexAttributes) MultiplexSettings() terra.ListValue[MultiplexSettingsAttributes] {
	return terra.ReferenceAsList[MultiplexSettingsAttributes](amm.ref.Append("multiplex_settings"))
}

func (amm awsMedialiveMultiplexAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amm.ref.Append("timeouts"))
}

type awsMedialiveMultiplexState struct {
	Arn               string                   `json:"arn"`
	AvailabilityZones []string                 `json:"availability_zones"`
	Id                string                   `json:"id"`
	Name              string                   `json:"name"`
	StartMultiplex    bool                     `json:"start_multiplex"`
	Tags              map[string]string        `json:"tags"`
	TagsAll           map[string]string        `json:"tags_all"`
	MultiplexSettings []MultiplexSettingsState `json:"multiplex_settings"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
