// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_signing_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iam_signing_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIamSigningCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aisc *Resource) Type() string {
	return "aws_iam_signing_certificate"
}

// LocalName returns the local name for [Resource].
func (aisc *Resource) LocalName() string {
	return aisc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aisc *Resource) Configuration() interface{} {
	return aisc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aisc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aisc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aisc *Resource) Dependencies() terra.Dependencies {
	return aisc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aisc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aisc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aisc *Resource) Attributes() awsIamSigningCertificateAttributes {
	return awsIamSigningCertificateAttributes{ref: terra.ReferenceResource(aisc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aisc *Resource) ImportState(state io.Reader) error {
	aisc.state = &awsIamSigningCertificateState{}
	if err := json.NewDecoder(state).Decode(aisc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aisc.Type(), aisc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aisc *Resource) State() (*awsIamSigningCertificateState, bool) {
	return aisc.state, aisc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aisc *Resource) StateMust() *awsIamSigningCertificateState {
	if aisc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aisc.Type(), aisc.LocalName()))
	}
	return aisc.state
}

// Args contains the configurations for aws_iam_signing_certificate.
type Args struct {
	// CertificateBody: string, required
	CertificateBody terra.StringValue `hcl:"certificate_body,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// UserName: string, required
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
}

type awsIamSigningCertificateAttributes struct {
	ref terra.Reference
}

// CertificateBody returns a reference to field certificate_body of aws_iam_signing_certificate.
func (aisc awsIamSigningCertificateAttributes) CertificateBody() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("certificate_body"))
}

// CertificateId returns a reference to field certificate_id of aws_iam_signing_certificate.
func (aisc awsIamSigningCertificateAttributes) CertificateId() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("certificate_id"))
}

// Id returns a reference to field id of aws_iam_signing_certificate.
func (aisc awsIamSigningCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("id"))
}

// Status returns a reference to field status of aws_iam_signing_certificate.
func (aisc awsIamSigningCertificateAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("status"))
}

// UserName returns a reference to field user_name of aws_iam_signing_certificate.
func (aisc awsIamSigningCertificateAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("user_name"))
}

type awsIamSigningCertificateState struct {
	CertificateBody string `json:"certificate_body"`
	CertificateId   string `json:"certificate_id"`
	Id              string `json:"id"`
	Status          string `json:"status"`
	UserName        string `json:"user_name"`
}
