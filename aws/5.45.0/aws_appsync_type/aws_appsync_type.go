// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appsync_type

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_appsync_type.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppsyncTypeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aat *Resource) Type() string {
	return "aws_appsync_type"
}

// LocalName returns the local name for [Resource].
func (aat *Resource) LocalName() string {
	return aat.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aat *Resource) Configuration() interface{} {
	return aat.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aat *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aat)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aat *Resource) Dependencies() terra.Dependencies {
	return aat.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aat *Resource) LifecycleManagement() *terra.Lifecycle {
	return aat.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aat *Resource) Attributes() awsAppsyncTypeAttributes {
	return awsAppsyncTypeAttributes{ref: terra.ReferenceResource(aat)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aat *Resource) ImportState(state io.Reader) error {
	aat.state = &awsAppsyncTypeState{}
	if err := json.NewDecoder(state).Decode(aat.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aat.Type(), aat.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aat *Resource) State() (*awsAppsyncTypeState, bool) {
	return aat.state, aat.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aat *Resource) StateMust() *awsAppsyncTypeState {
	if aat.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aat.Type(), aat.LocalName()))
	}
	return aat.state
}

// Args contains the configurations for aws_appsync_type.
type Args struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// Definition: string, required
	Definition terra.StringValue `hcl:"definition,attr" validate:"required"`
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsAppsyncTypeAttributes struct {
	ref terra.Reference
}

// ApiId returns a reference to field api_id of aws_appsync_type.
func (aat awsAppsyncTypeAttributes) ApiId() terra.StringValue {
	return terra.ReferenceAsString(aat.ref.Append("api_id"))
}

// Arn returns a reference to field arn of aws_appsync_type.
func (aat awsAppsyncTypeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aat.ref.Append("arn"))
}

// Definition returns a reference to field definition of aws_appsync_type.
func (aat awsAppsyncTypeAttributes) Definition() terra.StringValue {
	return terra.ReferenceAsString(aat.ref.Append("definition"))
}

// Description returns a reference to field description of aws_appsync_type.
func (aat awsAppsyncTypeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aat.ref.Append("description"))
}

// Format returns a reference to field format of aws_appsync_type.
func (aat awsAppsyncTypeAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(aat.ref.Append("format"))
}

// Id returns a reference to field id of aws_appsync_type.
func (aat awsAppsyncTypeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aat.ref.Append("id"))
}

// Name returns a reference to field name of aws_appsync_type.
func (aat awsAppsyncTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aat.ref.Append("name"))
}

type awsAppsyncTypeState struct {
	ApiId       string `json:"api_id"`
	Arn         string `json:"arn"`
	Definition  string `json:"definition"`
	Description string `json:"description"`
	Format      string `json:"format"`
	Id          string `json:"id"`
	Name        string `json:"name"`
}
