// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_batch_compute_environment

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_batch_compute_environment.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (abce *DataSource) DataSource() string {
	return "aws_batch_compute_environment"
}

// LocalName returns the local name for [DataSource].
func (abce *DataSource) LocalName() string {
	return abce.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (abce *DataSource) Configuration() interface{} {
	return abce.Args
}

// Attributes returns the attributes for [DataSource].
func (abce *DataSource) Attributes() dataAwsBatchComputeEnvironmentAttributes {
	return dataAwsBatchComputeEnvironmentAttributes{ref: terra.ReferenceDataSource(abce)}
}

// DataArgs contains the configurations for aws_batch_compute_environment.
type DataArgs struct {
	// ComputeEnvironmentName: string, required
	ComputeEnvironmentName terra.StringValue `hcl:"compute_environment_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type dataAwsBatchComputeEnvironmentAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_batch_compute_environment.
func (abce dataAwsBatchComputeEnvironmentAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(abce.ref.Append("arn"))
}

// ComputeEnvironmentName returns a reference to field compute_environment_name of aws_batch_compute_environment.
func (abce dataAwsBatchComputeEnvironmentAttributes) ComputeEnvironmentName() terra.StringValue {
	return terra.ReferenceAsString(abce.ref.Append("compute_environment_name"))
}

// EcsClusterArn returns a reference to field ecs_cluster_arn of aws_batch_compute_environment.
func (abce dataAwsBatchComputeEnvironmentAttributes) EcsClusterArn() terra.StringValue {
	return terra.ReferenceAsString(abce.ref.Append("ecs_cluster_arn"))
}

// Id returns a reference to field id of aws_batch_compute_environment.
func (abce dataAwsBatchComputeEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abce.ref.Append("id"))
}

// ServiceRole returns a reference to field service_role of aws_batch_compute_environment.
func (abce dataAwsBatchComputeEnvironmentAttributes) ServiceRole() terra.StringValue {
	return terra.ReferenceAsString(abce.ref.Append("service_role"))
}

// State returns a reference to field state of aws_batch_compute_environment.
func (abce dataAwsBatchComputeEnvironmentAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(abce.ref.Append("state"))
}

// Status returns a reference to field status of aws_batch_compute_environment.
func (abce dataAwsBatchComputeEnvironmentAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(abce.ref.Append("status"))
}

// StatusReason returns a reference to field status_reason of aws_batch_compute_environment.
func (abce dataAwsBatchComputeEnvironmentAttributes) StatusReason() terra.StringValue {
	return terra.ReferenceAsString(abce.ref.Append("status_reason"))
}

// Tags returns a reference to field tags of aws_batch_compute_environment.
func (abce dataAwsBatchComputeEnvironmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abce.ref.Append("tags"))
}

// Type returns a reference to field type of aws_batch_compute_environment.
func (abce dataAwsBatchComputeEnvironmentAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(abce.ref.Append("type"))
}

func (abce dataAwsBatchComputeEnvironmentAttributes) UpdatePolicy() terra.ListValue[DataUpdatePolicyAttributes] {
	return terra.ReferenceAsList[DataUpdatePolicyAttributes](abce.ref.Append("update_policy"))
}
