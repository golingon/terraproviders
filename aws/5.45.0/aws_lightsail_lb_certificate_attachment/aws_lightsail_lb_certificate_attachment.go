// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lightsail_lb_certificate_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lightsail_lb_certificate_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLightsailLbCertificateAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (allca *Resource) Type() string {
	return "aws_lightsail_lb_certificate_attachment"
}

// LocalName returns the local name for [Resource].
func (allca *Resource) LocalName() string {
	return allca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (allca *Resource) Configuration() interface{} {
	return allca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (allca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(allca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (allca *Resource) Dependencies() terra.Dependencies {
	return allca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (allca *Resource) LifecycleManagement() *terra.Lifecycle {
	return allca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (allca *Resource) Attributes() awsLightsailLbCertificateAttachmentAttributes {
	return awsLightsailLbCertificateAttachmentAttributes{ref: terra.ReferenceResource(allca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (allca *Resource) ImportState(state io.Reader) error {
	allca.state = &awsLightsailLbCertificateAttachmentState{}
	if err := json.NewDecoder(state).Decode(allca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", allca.Type(), allca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (allca *Resource) State() (*awsLightsailLbCertificateAttachmentState, bool) {
	return allca.state, allca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (allca *Resource) StateMust() *awsLightsailLbCertificateAttachmentState {
	if allca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", allca.Type(), allca.LocalName()))
	}
	return allca.state
}

// Args contains the configurations for aws_lightsail_lb_certificate_attachment.
type Args struct {
	// CertificateName: string, required
	CertificateName terra.StringValue `hcl:"certificate_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LbName: string, required
	LbName terra.StringValue `hcl:"lb_name,attr" validate:"required"`
}

type awsLightsailLbCertificateAttachmentAttributes struct {
	ref terra.Reference
}

// CertificateName returns a reference to field certificate_name of aws_lightsail_lb_certificate_attachment.
func (allca awsLightsailLbCertificateAttachmentAttributes) CertificateName() terra.StringValue {
	return terra.ReferenceAsString(allca.ref.Append("certificate_name"))
}

// Id returns a reference to field id of aws_lightsail_lb_certificate_attachment.
func (allca awsLightsailLbCertificateAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(allca.ref.Append("id"))
}

// LbName returns a reference to field lb_name of aws_lightsail_lb_certificate_attachment.
func (allca awsLightsailLbCertificateAttachmentAttributes) LbName() terra.StringValue {
	return terra.ReferenceAsString(allca.ref.Append("lb_name"))
}

type awsLightsailLbCertificateAttachmentState struct {
	CertificateName string `json:"certificate_name"`
	Id              string `json:"id"`
	LbName          string `json:"lb_name"`
}
