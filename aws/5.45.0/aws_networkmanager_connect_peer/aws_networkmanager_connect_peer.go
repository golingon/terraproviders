// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkmanager_connect_peer

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_networkmanager_connect_peer.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkmanagerConnectPeerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ancp *Resource) Type() string {
	return "aws_networkmanager_connect_peer"
}

// LocalName returns the local name for [Resource].
func (ancp *Resource) LocalName() string {
	return ancp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ancp *Resource) Configuration() interface{} {
	return ancp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ancp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ancp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ancp *Resource) Dependencies() terra.Dependencies {
	return ancp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ancp *Resource) LifecycleManagement() *terra.Lifecycle {
	return ancp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ancp *Resource) Attributes() awsNetworkmanagerConnectPeerAttributes {
	return awsNetworkmanagerConnectPeerAttributes{ref: terra.ReferenceResource(ancp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ancp *Resource) ImportState(state io.Reader) error {
	ancp.state = &awsNetworkmanagerConnectPeerState{}
	if err := json.NewDecoder(state).Decode(ancp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ancp.Type(), ancp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ancp *Resource) State() (*awsNetworkmanagerConnectPeerState, bool) {
	return ancp.state, ancp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ancp *Resource) StateMust() *awsNetworkmanagerConnectPeerState {
	if ancp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ancp.Type(), ancp.LocalName()))
	}
	return ancp.state
}

// Args contains the configurations for aws_networkmanager_connect_peer.
type Args struct {
	// ConnectAttachmentId: string, required
	ConnectAttachmentId terra.StringValue `hcl:"connect_attachment_id,attr" validate:"required"`
	// CoreNetworkAddress: string, optional
	CoreNetworkAddress terra.StringValue `hcl:"core_network_address,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InsideCidrBlocks: list of string, optional
	InsideCidrBlocks terra.ListValue[terra.StringValue] `hcl:"inside_cidr_blocks,attr"`
	// PeerAddress: string, required
	PeerAddress terra.StringValue `hcl:"peer_address,attr" validate:"required"`
	// SubnetArn: string, optional
	SubnetArn terra.StringValue `hcl:"subnet_arn,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// BgpOptions: optional
	BgpOptions *BgpOptions `hcl:"bgp_options,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsNetworkmanagerConnectPeerAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ancp.ref.Append("arn"))
}

// ConnectAttachmentId returns a reference to field connect_attachment_id of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) ConnectAttachmentId() terra.StringValue {
	return terra.ReferenceAsString(ancp.ref.Append("connect_attachment_id"))
}

// ConnectPeerId returns a reference to field connect_peer_id of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) ConnectPeerId() terra.StringValue {
	return terra.ReferenceAsString(ancp.ref.Append("connect_peer_id"))
}

// CoreNetworkAddress returns a reference to field core_network_address of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) CoreNetworkAddress() terra.StringValue {
	return terra.ReferenceAsString(ancp.ref.Append("core_network_address"))
}

// CoreNetworkId returns a reference to field core_network_id of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) CoreNetworkId() terra.StringValue {
	return terra.ReferenceAsString(ancp.ref.Append("core_network_id"))
}

// CreatedAt returns a reference to field created_at of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(ancp.ref.Append("created_at"))
}

// EdgeLocation returns a reference to field edge_location of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) EdgeLocation() terra.StringValue {
	return terra.ReferenceAsString(ancp.ref.Append("edge_location"))
}

// Id returns a reference to field id of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ancp.ref.Append("id"))
}

// InsideCidrBlocks returns a reference to field inside_cidr_blocks of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) InsideCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ancp.ref.Append("inside_cidr_blocks"))
}

// PeerAddress returns a reference to field peer_address of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) PeerAddress() terra.StringValue {
	return terra.ReferenceAsString(ancp.ref.Append("peer_address"))
}

// State returns a reference to field state of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(ancp.ref.Append("state"))
}

// SubnetArn returns a reference to field subnet_arn of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) SubnetArn() terra.StringValue {
	return terra.ReferenceAsString(ancp.ref.Append("subnet_arn"))
}

// Tags returns a reference to field tags of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ancp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_networkmanager_connect_peer.
func (ancp awsNetworkmanagerConnectPeerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ancp.ref.Append("tags_all"))
}

func (ancp awsNetworkmanagerConnectPeerAttributes) Configuration() terra.ListValue[ConfigurationAttributes] {
	return terra.ReferenceAsList[ConfigurationAttributes](ancp.ref.Append("configuration"))
}

func (ancp awsNetworkmanagerConnectPeerAttributes) BgpOptions() terra.ListValue[BgpOptionsAttributes] {
	return terra.ReferenceAsList[BgpOptionsAttributes](ancp.ref.Append("bgp_options"))
}

func (ancp awsNetworkmanagerConnectPeerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ancp.ref.Append("timeouts"))
}

type awsNetworkmanagerConnectPeerState struct {
	Arn                 string               `json:"arn"`
	ConnectAttachmentId string               `json:"connect_attachment_id"`
	ConnectPeerId       string               `json:"connect_peer_id"`
	CoreNetworkAddress  string               `json:"core_network_address"`
	CoreNetworkId       string               `json:"core_network_id"`
	CreatedAt           string               `json:"created_at"`
	EdgeLocation        string               `json:"edge_location"`
	Id                  string               `json:"id"`
	InsideCidrBlocks    []string             `json:"inside_cidr_blocks"`
	PeerAddress         string               `json:"peer_address"`
	State               string               `json:"state"`
	SubnetArn           string               `json:"subnet_arn"`
	Tags                map[string]string    `json:"tags"`
	TagsAll             map[string]string    `json:"tags_all"`
	Configuration       []ConfigurationState `json:"configuration"`
	BgpOptions          []BgpOptionsState    `json:"bgp_options"`
	Timeouts            *TimeoutsState       `json:"timeouts"`
}
