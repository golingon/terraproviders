// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_public_access_block

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3_bucket_public_access_block.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3BucketPublicAccessBlockState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asbpab *Resource) Type() string {
	return "aws_s3_bucket_public_access_block"
}

// LocalName returns the local name for [Resource].
func (asbpab *Resource) LocalName() string {
	return asbpab.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asbpab *Resource) Configuration() interface{} {
	return asbpab.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asbpab *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asbpab)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asbpab *Resource) Dependencies() terra.Dependencies {
	return asbpab.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asbpab *Resource) LifecycleManagement() *terra.Lifecycle {
	return asbpab.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asbpab *Resource) Attributes() awsS3BucketPublicAccessBlockAttributes {
	return awsS3BucketPublicAccessBlockAttributes{ref: terra.ReferenceResource(asbpab)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asbpab *Resource) ImportState(state io.Reader) error {
	asbpab.state = &awsS3BucketPublicAccessBlockState{}
	if err := json.NewDecoder(state).Decode(asbpab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asbpab.Type(), asbpab.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asbpab *Resource) State() (*awsS3BucketPublicAccessBlockState, bool) {
	return asbpab.state, asbpab.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asbpab *Resource) StateMust() *awsS3BucketPublicAccessBlockState {
	if asbpab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asbpab.Type(), asbpab.LocalName()))
	}
	return asbpab.state
}

// Args contains the configurations for aws_s3_bucket_public_access_block.
type Args struct {
	// BlockPublicAcls: bool, optional
	BlockPublicAcls terra.BoolValue `hcl:"block_public_acls,attr"`
	// BlockPublicPolicy: bool, optional
	BlockPublicPolicy terra.BoolValue `hcl:"block_public_policy,attr"`
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnorePublicAcls: bool, optional
	IgnorePublicAcls terra.BoolValue `hcl:"ignore_public_acls,attr"`
	// RestrictPublicBuckets: bool, optional
	RestrictPublicBuckets terra.BoolValue `hcl:"restrict_public_buckets,attr"`
}

type awsS3BucketPublicAccessBlockAttributes struct {
	ref terra.Reference
}

// BlockPublicAcls returns a reference to field block_public_acls of aws_s3_bucket_public_access_block.
func (asbpab awsS3BucketPublicAccessBlockAttributes) BlockPublicAcls() terra.BoolValue {
	return terra.ReferenceAsBool(asbpab.ref.Append("block_public_acls"))
}

// BlockPublicPolicy returns a reference to field block_public_policy of aws_s3_bucket_public_access_block.
func (asbpab awsS3BucketPublicAccessBlockAttributes) BlockPublicPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(asbpab.ref.Append("block_public_policy"))
}

// Bucket returns a reference to field bucket of aws_s3_bucket_public_access_block.
func (asbpab awsS3BucketPublicAccessBlockAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(asbpab.ref.Append("bucket"))
}

// Id returns a reference to field id of aws_s3_bucket_public_access_block.
func (asbpab awsS3BucketPublicAccessBlockAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asbpab.ref.Append("id"))
}

// IgnorePublicAcls returns a reference to field ignore_public_acls of aws_s3_bucket_public_access_block.
func (asbpab awsS3BucketPublicAccessBlockAttributes) IgnorePublicAcls() terra.BoolValue {
	return terra.ReferenceAsBool(asbpab.ref.Append("ignore_public_acls"))
}

// RestrictPublicBuckets returns a reference to field restrict_public_buckets of aws_s3_bucket_public_access_block.
func (asbpab awsS3BucketPublicAccessBlockAttributes) RestrictPublicBuckets() terra.BoolValue {
	return terra.ReferenceAsBool(asbpab.ref.Append("restrict_public_buckets"))
}

type awsS3BucketPublicAccessBlockState struct {
	BlockPublicAcls       bool   `json:"block_public_acls"`
	BlockPublicPolicy     bool   `json:"block_public_policy"`
	Bucket                string `json:"bucket"`
	Id                    string `json:"id"`
	IgnorePublicAcls      bool   `json:"ignore_public_acls"`
	RestrictPublicBuckets bool   `json:"restrict_public_buckets"`
}
