// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_emr_managed_scaling_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_emr_managed_scaling_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEmrManagedScalingPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aemsp *Resource) Type() string {
	return "aws_emr_managed_scaling_policy"
}

// LocalName returns the local name for [Resource].
func (aemsp *Resource) LocalName() string {
	return aemsp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aemsp *Resource) Configuration() interface{} {
	return aemsp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aemsp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aemsp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aemsp *Resource) Dependencies() terra.Dependencies {
	return aemsp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aemsp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aemsp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aemsp *Resource) Attributes() awsEmrManagedScalingPolicyAttributes {
	return awsEmrManagedScalingPolicyAttributes{ref: terra.ReferenceResource(aemsp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aemsp *Resource) ImportState(state io.Reader) error {
	aemsp.state = &awsEmrManagedScalingPolicyState{}
	if err := json.NewDecoder(state).Decode(aemsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aemsp.Type(), aemsp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aemsp *Resource) State() (*awsEmrManagedScalingPolicyState, bool) {
	return aemsp.state, aemsp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aemsp *Resource) StateMust() *awsEmrManagedScalingPolicyState {
	if aemsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aemsp.Type(), aemsp.LocalName()))
	}
	return aemsp.state
}

// Args contains the configurations for aws_emr_managed_scaling_policy.
type Args struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ComputeLimits: min=1
	ComputeLimits []ComputeLimits `hcl:"compute_limits,block" validate:"min=1"`
}

type awsEmrManagedScalingPolicyAttributes struct {
	ref terra.Reference
}

// ClusterId returns a reference to field cluster_id of aws_emr_managed_scaling_policy.
func (aemsp awsEmrManagedScalingPolicyAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(aemsp.ref.Append("cluster_id"))
}

// Id returns a reference to field id of aws_emr_managed_scaling_policy.
func (aemsp awsEmrManagedScalingPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aemsp.ref.Append("id"))
}

func (aemsp awsEmrManagedScalingPolicyAttributes) ComputeLimits() terra.SetValue[ComputeLimitsAttributes] {
	return terra.ReferenceAsSet[ComputeLimitsAttributes](aemsp.ref.Append("compute_limits"))
}

type awsEmrManagedScalingPolicyState struct {
	ClusterId     string               `json:"cluster_id"`
	Id            string               `json:"id"`
	ComputeLimits []ComputeLimitsState `json:"compute_limits"`
}
