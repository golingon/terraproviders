// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_infrastructure_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_imagebuilder_infrastructure_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsImagebuilderInfrastructureConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aiic *Resource) Type() string {
	return "aws_imagebuilder_infrastructure_configuration"
}

// LocalName returns the local name for [Resource].
func (aiic *Resource) LocalName() string {
	return aiic.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aiic *Resource) Configuration() interface{} {
	return aiic.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aiic *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aiic)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aiic *Resource) Dependencies() terra.Dependencies {
	return aiic.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aiic *Resource) LifecycleManagement() *terra.Lifecycle {
	return aiic.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aiic *Resource) Attributes() awsImagebuilderInfrastructureConfigurationAttributes {
	return awsImagebuilderInfrastructureConfigurationAttributes{ref: terra.ReferenceResource(aiic)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aiic *Resource) ImportState(state io.Reader) error {
	aiic.state = &awsImagebuilderInfrastructureConfigurationState{}
	if err := json.NewDecoder(state).Decode(aiic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiic.Type(), aiic.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aiic *Resource) State() (*awsImagebuilderInfrastructureConfigurationState, bool) {
	return aiic.state, aiic.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aiic *Resource) StateMust() *awsImagebuilderInfrastructureConfigurationState {
	if aiic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiic.Type(), aiic.LocalName()))
	}
	return aiic.state
}

// Args contains the configurations for aws_imagebuilder_infrastructure_configuration.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceProfileName: string, required
	InstanceProfileName terra.StringValue `hcl:"instance_profile_name,attr" validate:"required"`
	// InstanceTypes: set of string, optional
	InstanceTypes terra.SetValue[terra.StringValue] `hcl:"instance_types,attr"`
	// KeyPair: string, optional
	KeyPair terra.StringValue `hcl:"key_pair,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceTags: map of string, optional
	ResourceTags terra.MapValue[terra.StringValue] `hcl:"resource_tags,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SnsTopicArn: string, optional
	SnsTopicArn terra.StringValue `hcl:"sns_topic_arn,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TerminateInstanceOnFailure: bool, optional
	TerminateInstanceOnFailure terra.BoolValue `hcl:"terminate_instance_on_failure,attr"`
	// InstanceMetadataOptions: optional
	InstanceMetadataOptions *InstanceMetadataOptions `hcl:"instance_metadata_options,block"`
	// Logging: optional
	Logging *Logging `hcl:"logging,block"`
}

type awsImagebuilderInfrastructureConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aiic.ref.Append("arn"))
}

// DateCreated returns a reference to field date_created of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) DateCreated() terra.StringValue {
	return terra.ReferenceAsString(aiic.ref.Append("date_created"))
}

// DateUpdated returns a reference to field date_updated of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) DateUpdated() terra.StringValue {
	return terra.ReferenceAsString(aiic.ref.Append("date_updated"))
}

// Description returns a reference to field description of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aiic.ref.Append("description"))
}

// Id returns a reference to field id of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiic.ref.Append("id"))
}

// InstanceProfileName returns a reference to field instance_profile_name of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) InstanceProfileName() terra.StringValue {
	return terra.ReferenceAsString(aiic.ref.Append("instance_profile_name"))
}

// InstanceTypes returns a reference to field instance_types of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) InstanceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aiic.ref.Append("instance_types"))
}

// KeyPair returns a reference to field key_pair of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) KeyPair() terra.StringValue {
	return terra.ReferenceAsString(aiic.ref.Append("key_pair"))
}

// Name returns a reference to field name of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aiic.ref.Append("name"))
}

// ResourceTags returns a reference to field resource_tags of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) ResourceTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiic.ref.Append("resource_tags"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aiic.ref.Append("security_group_ids"))
}

// SnsTopicArn returns a reference to field sns_topic_arn of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) SnsTopicArn() terra.StringValue {
	return terra.ReferenceAsString(aiic.ref.Append("sns_topic_arn"))
}

// SubnetId returns a reference to field subnet_id of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(aiic.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiic.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiic.ref.Append("tags_all"))
}

// TerminateInstanceOnFailure returns a reference to field terminate_instance_on_failure of aws_imagebuilder_infrastructure_configuration.
func (aiic awsImagebuilderInfrastructureConfigurationAttributes) TerminateInstanceOnFailure() terra.BoolValue {
	return terra.ReferenceAsBool(aiic.ref.Append("terminate_instance_on_failure"))
}

func (aiic awsImagebuilderInfrastructureConfigurationAttributes) InstanceMetadataOptions() terra.ListValue[InstanceMetadataOptionsAttributes] {
	return terra.ReferenceAsList[InstanceMetadataOptionsAttributes](aiic.ref.Append("instance_metadata_options"))
}

func (aiic awsImagebuilderInfrastructureConfigurationAttributes) Logging() terra.ListValue[LoggingAttributes] {
	return terra.ReferenceAsList[LoggingAttributes](aiic.ref.Append("logging"))
}

type awsImagebuilderInfrastructureConfigurationState struct {
	Arn                        string                         `json:"arn"`
	DateCreated                string                         `json:"date_created"`
	DateUpdated                string                         `json:"date_updated"`
	Description                string                         `json:"description"`
	Id                         string                         `json:"id"`
	InstanceProfileName        string                         `json:"instance_profile_name"`
	InstanceTypes              []string                       `json:"instance_types"`
	KeyPair                    string                         `json:"key_pair"`
	Name                       string                         `json:"name"`
	ResourceTags               map[string]string              `json:"resource_tags"`
	SecurityGroupIds           []string                       `json:"security_group_ids"`
	SnsTopicArn                string                         `json:"sns_topic_arn"`
	SubnetId                   string                         `json:"subnet_id"`
	Tags                       map[string]string              `json:"tags"`
	TagsAll                    map[string]string              `json:"tags_all"`
	TerminateInstanceOnFailure bool                           `json:"terminate_instance_on_failure"`
	InstanceMetadataOptions    []InstanceMetadataOptionsState `json:"instance_metadata_options"`
	Logging                    []LoggingState                 `json:"logging"`
}
