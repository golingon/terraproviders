// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_infrastructure_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataInstanceMetadataOptionsAttributes struct {
	ref terra.Reference
}

func (imo DataInstanceMetadataOptionsAttributes) InternalRef() (terra.Reference, error) {
	return imo.ref, nil
}

func (imo DataInstanceMetadataOptionsAttributes) InternalWithRef(ref terra.Reference) DataInstanceMetadataOptionsAttributes {
	return DataInstanceMetadataOptionsAttributes{ref: ref}
}

func (imo DataInstanceMetadataOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return imo.ref.InternalTokens()
}

func (imo DataInstanceMetadataOptionsAttributes) HttpPutResponseHopLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(imo.ref.Append("http_put_response_hop_limit"))
}

func (imo DataInstanceMetadataOptionsAttributes) HttpTokens() terra.StringValue {
	return terra.ReferenceAsString(imo.ref.Append("http_tokens"))
}

type DataLoggingAttributes struct {
	ref terra.Reference
}

func (l DataLoggingAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l DataLoggingAttributes) InternalWithRef(ref terra.Reference) DataLoggingAttributes {
	return DataLoggingAttributes{ref: ref}
}

func (l DataLoggingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l DataLoggingAttributes) S3Logs() terra.ListValue[DataLoggingS3LogsAttributes] {
	return terra.ReferenceAsList[DataLoggingS3LogsAttributes](l.ref.Append("s3_logs"))
}

type DataLoggingS3LogsAttributes struct {
	ref terra.Reference
}

func (sl DataLoggingS3LogsAttributes) InternalRef() (terra.Reference, error) {
	return sl.ref, nil
}

func (sl DataLoggingS3LogsAttributes) InternalWithRef(ref terra.Reference) DataLoggingS3LogsAttributes {
	return DataLoggingS3LogsAttributes{ref: ref}
}

func (sl DataLoggingS3LogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sl.ref.InternalTokens()
}

func (sl DataLoggingS3LogsAttributes) S3BucketName() terra.StringValue {
	return terra.ReferenceAsString(sl.ref.Append("s3_bucket_name"))
}

func (sl DataLoggingS3LogsAttributes) S3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(sl.ref.Append("s3_key_prefix"))
}

type DataInstanceMetadataOptionsState struct {
	HttpPutResponseHopLimit float64 `json:"http_put_response_hop_limit"`
	HttpTokens              string  `json:"http_tokens"`
}

type DataLoggingState struct {
	S3Logs []DataLoggingS3LogsState `json:"s3_logs"`
}

type DataLoggingS3LogsState struct {
	S3BucketName string `json:"s3_bucket_name"`
	S3KeyPrefix  string `json:"s3_key_prefix"`
}
