// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_infrastructure_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type InstanceMetadataOptions struct {
	// HttpPutResponseHopLimit: number, optional
	HttpPutResponseHopLimit terra.NumberValue `hcl:"http_put_response_hop_limit,attr"`
	// HttpTokens: string, optional
	HttpTokens terra.StringValue `hcl:"http_tokens,attr"`
}

type Logging struct {
	// LoggingS3Logs: required
	S3Logs *LoggingS3Logs `hcl:"s3_logs,block" validate:"required"`
}

type LoggingS3Logs struct {
	// S3BucketName: string, required
	S3BucketName terra.StringValue `hcl:"s3_bucket_name,attr" validate:"required"`
	// S3KeyPrefix: string, optional
	S3KeyPrefix terra.StringValue `hcl:"s3_key_prefix,attr"`
}

type InstanceMetadataOptionsAttributes struct {
	ref terra.Reference
}

func (imo InstanceMetadataOptionsAttributes) InternalRef() (terra.Reference, error) {
	return imo.ref, nil
}

func (imo InstanceMetadataOptionsAttributes) InternalWithRef(ref terra.Reference) InstanceMetadataOptionsAttributes {
	return InstanceMetadataOptionsAttributes{ref: ref}
}

func (imo InstanceMetadataOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return imo.ref.InternalTokens()
}

func (imo InstanceMetadataOptionsAttributes) HttpPutResponseHopLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(imo.ref.Append("http_put_response_hop_limit"))
}

func (imo InstanceMetadataOptionsAttributes) HttpTokens() terra.StringValue {
	return terra.ReferenceAsString(imo.ref.Append("http_tokens"))
}

type LoggingAttributes struct {
	ref terra.Reference
}

func (l LoggingAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LoggingAttributes) InternalWithRef(ref terra.Reference) LoggingAttributes {
	return LoggingAttributes{ref: ref}
}

func (l LoggingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LoggingAttributes) S3Logs() terra.ListValue[LoggingS3LogsAttributes] {
	return terra.ReferenceAsList[LoggingS3LogsAttributes](l.ref.Append("s3_logs"))
}

type LoggingS3LogsAttributes struct {
	ref terra.Reference
}

func (sl LoggingS3LogsAttributes) InternalRef() (terra.Reference, error) {
	return sl.ref, nil
}

func (sl LoggingS3LogsAttributes) InternalWithRef(ref terra.Reference) LoggingS3LogsAttributes {
	return LoggingS3LogsAttributes{ref: ref}
}

func (sl LoggingS3LogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sl.ref.InternalTokens()
}

func (sl LoggingS3LogsAttributes) S3BucketName() terra.StringValue {
	return terra.ReferenceAsString(sl.ref.Append("s3_bucket_name"))
}

func (sl LoggingS3LogsAttributes) S3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(sl.ref.Append("s3_key_prefix"))
}

type InstanceMetadataOptionsState struct {
	HttpPutResponseHopLimit float64 `json:"http_put_response_hop_limit"`
	HttpTokens              string  `json:"http_tokens"`
}

type LoggingState struct {
	S3Logs []LoggingS3LogsState `json:"s3_logs"`
}

type LoggingS3LogsState struct {
	S3BucketName string `json:"s3_bucket_name"`
	S3KeyPrefix  string `json:"s3_key_prefix"`
}
