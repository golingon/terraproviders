// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ce_tags

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataFilter struct {
	// FilterAnd: min=0
	And []DataFilterAnd `hcl:"and,block" validate:"min=0"`
	// FilterCostCategory: optional
	CostCategory *DataFilterCostCategory `hcl:"cost_category,block"`
	// FilterDimension: optional
	Dimension *DataFilterDimension `hcl:"dimension,block"`
	// FilterNot: optional
	Not *DataFilterNot `hcl:"not,block"`
	// FilterOr: min=0
	Or []DataFilterOr `hcl:"or,block" validate:"min=0"`
	// FilterTags: optional
	Tags *DataFilterTags `hcl:"tags,block"`
}

type DataFilterAnd struct {
	// FilterAndCostCategory: optional
	CostCategory *DataFilterAndCostCategory `hcl:"cost_category,block"`
	// FilterAndDimension: optional
	Dimension *DataFilterAndDimension `hcl:"dimension,block"`
	// FilterAndTags: optional
	Tags *DataFilterAndTags `hcl:"tags,block"`
}

type DataFilterAndCostCategory struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterAndDimension struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterAndTags struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterCostCategory struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterDimension struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterNot struct {
	// FilterNotCostCategory: optional
	CostCategory *DataFilterNotCostCategory `hcl:"cost_category,block"`
	// FilterNotDimension: optional
	Dimension *DataFilterNotDimension `hcl:"dimension,block"`
	// FilterNotTags: optional
	Tags *DataFilterNotTags `hcl:"tags,block"`
}

type DataFilterNotCostCategory struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterNotDimension struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterNotTags struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterOr struct {
	// FilterOrCostCategory: optional
	CostCategory *DataFilterOrCostCategory `hcl:"cost_category,block"`
	// FilterOrDimension: optional
	Dimension *DataFilterOrDimension `hcl:"dimension,block"`
	// FilterOrTags: optional
	Tags *DataFilterOrTags `hcl:"tags,block"`
}

type DataFilterOrCostCategory struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterOrDimension struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterOrTags struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterTags struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions: set of string, optional
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataSortBy struct {
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// SortOrder: string, optional
	SortOrder terra.StringValue `hcl:"sort_order,attr"`
}

type DataTimePeriod struct {
	// End: string, required
	End terra.StringValue `hcl:"end,attr" validate:"required"`
	// Start: string, required
	Start terra.StringValue `hcl:"start,attr" validate:"required"`
}

type DataFilterAttributes struct {
	ref terra.Reference
}

func (f DataFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f DataFilterAttributes) InternalWithRef(ref terra.Reference) DataFilterAttributes {
	return DataFilterAttributes{ref: ref}
}

func (f DataFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f DataFilterAttributes) And() terra.SetValue[DataFilterAndAttributes] {
	return terra.ReferenceAsSet[DataFilterAndAttributes](f.ref.Append("and"))
}

func (f DataFilterAttributes) CostCategory() terra.ListValue[DataFilterCostCategoryAttributes] {
	return terra.ReferenceAsList[DataFilterCostCategoryAttributes](f.ref.Append("cost_category"))
}

func (f DataFilterAttributes) Dimension() terra.ListValue[DataFilterDimensionAttributes] {
	return terra.ReferenceAsList[DataFilterDimensionAttributes](f.ref.Append("dimension"))
}

func (f DataFilterAttributes) Not() terra.ListValue[DataFilterNotAttributes] {
	return terra.ReferenceAsList[DataFilterNotAttributes](f.ref.Append("not"))
}

func (f DataFilterAttributes) Or() terra.SetValue[DataFilterOrAttributes] {
	return terra.ReferenceAsSet[DataFilterOrAttributes](f.ref.Append("or"))
}

func (f DataFilterAttributes) Tags() terra.ListValue[DataFilterTagsAttributes] {
	return terra.ReferenceAsList[DataFilterTagsAttributes](f.ref.Append("tags"))
}

type DataFilterAndAttributes struct {
	ref terra.Reference
}

func (a DataFilterAndAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DataFilterAndAttributes) InternalWithRef(ref terra.Reference) DataFilterAndAttributes {
	return DataFilterAndAttributes{ref: ref}
}

func (a DataFilterAndAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DataFilterAndAttributes) CostCategory() terra.ListValue[DataFilterAndCostCategoryAttributes] {
	return terra.ReferenceAsList[DataFilterAndCostCategoryAttributes](a.ref.Append("cost_category"))
}

func (a DataFilterAndAttributes) Dimension() terra.ListValue[DataFilterAndDimensionAttributes] {
	return terra.ReferenceAsList[DataFilterAndDimensionAttributes](a.ref.Append("dimension"))
}

func (a DataFilterAndAttributes) Tags() terra.ListValue[DataFilterAndTagsAttributes] {
	return terra.ReferenceAsList[DataFilterAndTagsAttributes](a.ref.Append("tags"))
}

type DataFilterAndCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc DataFilterAndCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc DataFilterAndCostCategoryAttributes) InternalWithRef(ref terra.Reference) DataFilterAndCostCategoryAttributes {
	return DataFilterAndCostCategoryAttributes{ref: ref}
}

func (cc DataFilterAndCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc DataFilterAndCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc DataFilterAndCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc DataFilterAndCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type DataFilterAndDimensionAttributes struct {
	ref terra.Reference
}

func (d DataFilterAndDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DataFilterAndDimensionAttributes) InternalWithRef(ref terra.Reference) DataFilterAndDimensionAttributes {
	return DataFilterAndDimensionAttributes{ref: ref}
}

func (d DataFilterAndDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DataFilterAndDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d DataFilterAndDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d DataFilterAndDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type DataFilterAndTagsAttributes struct {
	ref terra.Reference
}

func (t DataFilterAndTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataFilterAndTagsAttributes) InternalWithRef(ref terra.Reference) DataFilterAndTagsAttributes {
	return DataFilterAndTagsAttributes{ref: ref}
}

func (t DataFilterAndTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataFilterAndTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t DataFilterAndTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t DataFilterAndTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type DataFilterCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc DataFilterCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc DataFilterCostCategoryAttributes) InternalWithRef(ref terra.Reference) DataFilterCostCategoryAttributes {
	return DataFilterCostCategoryAttributes{ref: ref}
}

func (cc DataFilterCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc DataFilterCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc DataFilterCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc DataFilterCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type DataFilterDimensionAttributes struct {
	ref terra.Reference
}

func (d DataFilterDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DataFilterDimensionAttributes) InternalWithRef(ref terra.Reference) DataFilterDimensionAttributes {
	return DataFilterDimensionAttributes{ref: ref}
}

func (d DataFilterDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DataFilterDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d DataFilterDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d DataFilterDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type DataFilterNotAttributes struct {
	ref terra.Reference
}

func (n DataFilterNotAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n DataFilterNotAttributes) InternalWithRef(ref terra.Reference) DataFilterNotAttributes {
	return DataFilterNotAttributes{ref: ref}
}

func (n DataFilterNotAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n DataFilterNotAttributes) CostCategory() terra.ListValue[DataFilterNotCostCategoryAttributes] {
	return terra.ReferenceAsList[DataFilterNotCostCategoryAttributes](n.ref.Append("cost_category"))
}

func (n DataFilterNotAttributes) Dimension() terra.ListValue[DataFilterNotDimensionAttributes] {
	return terra.ReferenceAsList[DataFilterNotDimensionAttributes](n.ref.Append("dimension"))
}

func (n DataFilterNotAttributes) Tags() terra.ListValue[DataFilterNotTagsAttributes] {
	return terra.ReferenceAsList[DataFilterNotTagsAttributes](n.ref.Append("tags"))
}

type DataFilterNotCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc DataFilterNotCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc DataFilterNotCostCategoryAttributes) InternalWithRef(ref terra.Reference) DataFilterNotCostCategoryAttributes {
	return DataFilterNotCostCategoryAttributes{ref: ref}
}

func (cc DataFilterNotCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc DataFilterNotCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc DataFilterNotCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc DataFilterNotCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type DataFilterNotDimensionAttributes struct {
	ref terra.Reference
}

func (d DataFilterNotDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DataFilterNotDimensionAttributes) InternalWithRef(ref terra.Reference) DataFilterNotDimensionAttributes {
	return DataFilterNotDimensionAttributes{ref: ref}
}

func (d DataFilterNotDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DataFilterNotDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d DataFilterNotDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d DataFilterNotDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type DataFilterNotTagsAttributes struct {
	ref terra.Reference
}

func (t DataFilterNotTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataFilterNotTagsAttributes) InternalWithRef(ref terra.Reference) DataFilterNotTagsAttributes {
	return DataFilterNotTagsAttributes{ref: ref}
}

func (t DataFilterNotTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataFilterNotTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t DataFilterNotTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t DataFilterNotTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type DataFilterOrAttributes struct {
	ref terra.Reference
}

func (o DataFilterOrAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o DataFilterOrAttributes) InternalWithRef(ref terra.Reference) DataFilterOrAttributes {
	return DataFilterOrAttributes{ref: ref}
}

func (o DataFilterOrAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o DataFilterOrAttributes) CostCategory() terra.ListValue[DataFilterOrCostCategoryAttributes] {
	return terra.ReferenceAsList[DataFilterOrCostCategoryAttributes](o.ref.Append("cost_category"))
}

func (o DataFilterOrAttributes) Dimension() terra.ListValue[DataFilterOrDimensionAttributes] {
	return terra.ReferenceAsList[DataFilterOrDimensionAttributes](o.ref.Append("dimension"))
}

func (o DataFilterOrAttributes) Tags() terra.ListValue[DataFilterOrTagsAttributes] {
	return terra.ReferenceAsList[DataFilterOrTagsAttributes](o.ref.Append("tags"))
}

type DataFilterOrCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc DataFilterOrCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc DataFilterOrCostCategoryAttributes) InternalWithRef(ref terra.Reference) DataFilterOrCostCategoryAttributes {
	return DataFilterOrCostCategoryAttributes{ref: ref}
}

func (cc DataFilterOrCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc DataFilterOrCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc DataFilterOrCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc DataFilterOrCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type DataFilterOrDimensionAttributes struct {
	ref terra.Reference
}

func (d DataFilterOrDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DataFilterOrDimensionAttributes) InternalWithRef(ref terra.Reference) DataFilterOrDimensionAttributes {
	return DataFilterOrDimensionAttributes{ref: ref}
}

func (d DataFilterOrDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DataFilterOrDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d DataFilterOrDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d DataFilterOrDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type DataFilterOrTagsAttributes struct {
	ref terra.Reference
}

func (t DataFilterOrTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataFilterOrTagsAttributes) InternalWithRef(ref terra.Reference) DataFilterOrTagsAttributes {
	return DataFilterOrTagsAttributes{ref: ref}
}

func (t DataFilterOrTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataFilterOrTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t DataFilterOrTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t DataFilterOrTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type DataFilterTagsAttributes struct {
	ref terra.Reference
}

func (t DataFilterTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataFilterTagsAttributes) InternalWithRef(ref terra.Reference) DataFilterTagsAttributes {
	return DataFilterTagsAttributes{ref: ref}
}

func (t DataFilterTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataFilterTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t DataFilterTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t DataFilterTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type DataSortByAttributes struct {
	ref terra.Reference
}

func (sb DataSortByAttributes) InternalRef() (terra.Reference, error) {
	return sb.ref, nil
}

func (sb DataSortByAttributes) InternalWithRef(ref terra.Reference) DataSortByAttributes {
	return DataSortByAttributes{ref: ref}
}

func (sb DataSortByAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sb.ref.InternalTokens()
}

func (sb DataSortByAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("key"))
}

func (sb DataSortByAttributes) SortOrder() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("sort_order"))
}

type DataTimePeriodAttributes struct {
	ref terra.Reference
}

func (tp DataTimePeriodAttributes) InternalRef() (terra.Reference, error) {
	return tp.ref, nil
}

func (tp DataTimePeriodAttributes) InternalWithRef(ref terra.Reference) DataTimePeriodAttributes {
	return DataTimePeriodAttributes{ref: ref}
}

func (tp DataTimePeriodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tp.ref.InternalTokens()
}

func (tp DataTimePeriodAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("end"))
}

func (tp DataTimePeriodAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("start"))
}

type DataFilterState struct {
	And          []DataFilterAndState          `json:"and"`
	CostCategory []DataFilterCostCategoryState `json:"cost_category"`
	Dimension    []DataFilterDimensionState    `json:"dimension"`
	Not          []DataFilterNotState          `json:"not"`
	Or           []DataFilterOrState           `json:"or"`
	Tags         []DataFilterTagsState         `json:"tags"`
}

type DataFilterAndState struct {
	CostCategory []DataFilterAndCostCategoryState `json:"cost_category"`
	Dimension    []DataFilterAndDimensionState    `json:"dimension"`
	Tags         []DataFilterAndTagsState         `json:"tags"`
}

type DataFilterAndCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterAndDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterAndTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterNotState struct {
	CostCategory []DataFilterNotCostCategoryState `json:"cost_category"`
	Dimension    []DataFilterNotDimensionState    `json:"dimension"`
	Tags         []DataFilterNotTagsState         `json:"tags"`
}

type DataFilterNotCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterNotDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterNotTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterOrState struct {
	CostCategory []DataFilterOrCostCategoryState `json:"cost_category"`
	Dimension    []DataFilterOrDimensionState    `json:"dimension"`
	Tags         []DataFilterOrTagsState         `json:"tags"`
}

type DataFilterOrCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterOrDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterOrTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataSortByState struct {
	Key       string `json:"key"`
	SortOrder string `json:"sort_order"`
}

type DataTimePeriodState struct {
	End   string `json:"end"`
	Start string `json:"start"`
}
