// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshift_partner

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_redshift_partner.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRedshiftPartnerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arp *Resource) Type() string {
	return "aws_redshift_partner"
}

// LocalName returns the local name for [Resource].
func (arp *Resource) LocalName() string {
	return arp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arp *Resource) Configuration() interface{} {
	return arp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arp *Resource) Dependencies() terra.Dependencies {
	return arp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arp *Resource) LifecycleManagement() *terra.Lifecycle {
	return arp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arp *Resource) Attributes() awsRedshiftPartnerAttributes {
	return awsRedshiftPartnerAttributes{ref: terra.ReferenceResource(arp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arp *Resource) ImportState(state io.Reader) error {
	arp.state = &awsRedshiftPartnerState{}
	if err := json.NewDecoder(state).Decode(arp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arp.Type(), arp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arp *Resource) State() (*awsRedshiftPartnerState, bool) {
	return arp.state, arp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arp *Resource) StateMust() *awsRedshiftPartnerState {
	if arp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arp.Type(), arp.LocalName()))
	}
	return arp.state
}

// Args contains the configurations for aws_redshift_partner.
type Args struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PartnerName: string, required
	PartnerName terra.StringValue `hcl:"partner_name,attr" validate:"required"`
}

type awsRedshiftPartnerAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_redshift_partner.
func (arp awsRedshiftPartnerAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("account_id"))
}

// ClusterIdentifier returns a reference to field cluster_identifier of aws_redshift_partner.
func (arp awsRedshiftPartnerAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("cluster_identifier"))
}

// DatabaseName returns a reference to field database_name of aws_redshift_partner.
func (arp awsRedshiftPartnerAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("database_name"))
}

// Id returns a reference to field id of aws_redshift_partner.
func (arp awsRedshiftPartnerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("id"))
}

// PartnerName returns a reference to field partner_name of aws_redshift_partner.
func (arp awsRedshiftPartnerAttributes) PartnerName() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("partner_name"))
}

// Status returns a reference to field status of aws_redshift_partner.
func (arp awsRedshiftPartnerAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("status"))
}

// StatusMessage returns a reference to field status_message of aws_redshift_partner.
func (arp awsRedshiftPartnerAttributes) StatusMessage() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("status_message"))
}

type awsRedshiftPartnerState struct {
	AccountId         string `json:"account_id"`
	ClusterIdentifier string `json:"cluster_identifier"`
	DatabaseName      string `json:"database_name"`
	Id                string `json:"id"`
	PartnerName       string `json:"partner_name"`
	Status            string `json:"status"`
	StatusMessage     string `json:"status_message"`
}
