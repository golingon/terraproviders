// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecr_lifecycle_policy_document

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataRule struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// RuleAction: min=0
	Action []DataRuleAction `hcl:"action,block" validate:"min=0"`
	// RuleSelection: min=0
	Selection []DataRuleSelection `hcl:"selection,block" validate:"min=0"`
}

type DataRuleAction struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type DataRuleSelection struct {
	// CountNumber: number, required
	CountNumber terra.NumberValue `hcl:"count_number,attr" validate:"required"`
	// CountType: string, required
	CountType terra.StringValue `hcl:"count_type,attr" validate:"required"`
	// CountUnit: string, optional
	CountUnit terra.StringValue `hcl:"count_unit,attr"`
	// TagPatternList: list of string, optional
	TagPatternList terra.ListValue[terra.StringValue] `hcl:"tag_pattern_list,attr"`
	// TagPrefixList: list of string, optional
	TagPrefixList terra.ListValue[terra.StringValue] `hcl:"tag_prefix_list,attr"`
	// TagStatus: string, required
	TagStatus terra.StringValue `hcl:"tag_status,attr" validate:"required"`
}

type DataRuleAttributes struct {
	ref terra.Reference
}

func (r DataRuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataRuleAttributes) InternalWithRef(ref terra.Reference) DataRuleAttributes {
	return DataRuleAttributes{ref: ref}
}

func (r DataRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("description"))
}

func (r DataRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("priority"))
}

func (r DataRuleAttributes) Action() terra.ListValue[DataRuleActionAttributes] {
	return terra.ReferenceAsList[DataRuleActionAttributes](r.ref.Append("action"))
}

func (r DataRuleAttributes) Selection() terra.ListValue[DataRuleSelectionAttributes] {
	return terra.ReferenceAsList[DataRuleSelectionAttributes](r.ref.Append("selection"))
}

type DataRuleActionAttributes struct {
	ref terra.Reference
}

func (a DataRuleActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DataRuleActionAttributes) InternalWithRef(ref terra.Reference) DataRuleActionAttributes {
	return DataRuleActionAttributes{ref: ref}
}

func (a DataRuleActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DataRuleActionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

type DataRuleSelectionAttributes struct {
	ref terra.Reference
}

func (s DataRuleSelectionAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataRuleSelectionAttributes) InternalWithRef(ref terra.Reference) DataRuleSelectionAttributes {
	return DataRuleSelectionAttributes{ref: ref}
}

func (s DataRuleSelectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataRuleSelectionAttributes) CountNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("count_number"))
}

func (s DataRuleSelectionAttributes) CountType() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("count_type"))
}

func (s DataRuleSelectionAttributes) CountUnit() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("count_unit"))
}

func (s DataRuleSelectionAttributes) TagPatternList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("tag_pattern_list"))
}

func (s DataRuleSelectionAttributes) TagPrefixList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("tag_prefix_list"))
}

func (s DataRuleSelectionAttributes) TagStatus() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tag_status"))
}

type DataRuleState struct {
	Description string                   `json:"description"`
	Priority    float64                  `json:"priority"`
	Action      []DataRuleActionState    `json:"action"`
	Selection   []DataRuleSelectionState `json:"selection"`
}

type DataRuleActionState struct {
	Type string `json:"type"`
}

type DataRuleSelectionState struct {
	CountNumber    float64  `json:"count_number"`
	CountType      string   `json:"count_type"`
	CountUnit      string   `json:"count_unit"`
	TagPatternList []string `json:"tag_pattern_list"`
	TagPrefixList  []string `json:"tag_prefix_list"`
	TagStatus      string   `json:"tag_status"`
}
