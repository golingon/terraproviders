// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dms_replication_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dms_replication_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDmsReplicationInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adri *Resource) Type() string {
	return "aws_dms_replication_instance"
}

// LocalName returns the local name for [Resource].
func (adri *Resource) LocalName() string {
	return adri.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adri *Resource) Configuration() interface{} {
	return adri.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adri *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adri)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adri *Resource) Dependencies() terra.Dependencies {
	return adri.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adri *Resource) LifecycleManagement() *terra.Lifecycle {
	return adri.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adri *Resource) Attributes() awsDmsReplicationInstanceAttributes {
	return awsDmsReplicationInstanceAttributes{ref: terra.ReferenceResource(adri)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adri *Resource) ImportState(state io.Reader) error {
	adri.state = &awsDmsReplicationInstanceState{}
	if err := json.NewDecoder(state).Decode(adri.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adri.Type(), adri.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adri *Resource) State() (*awsDmsReplicationInstanceState, bool) {
	return adri.state, adri.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adri *Resource) StateMust() *awsDmsReplicationInstanceState {
	if adri.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adri.Type(), adri.LocalName()))
	}
	return adri.state
}

// Args contains the configurations for aws_dms_replication_instance.
type Args struct {
	// AllocatedStorage: number, optional
	AllocatedStorage terra.NumberValue `hcl:"allocated_storage,attr"`
	// AllowMajorVersionUpgrade: bool, optional
	AllowMajorVersionUpgrade terra.BoolValue `hcl:"allow_major_version_upgrade,attr"`
	// ApplyImmediately: bool, optional
	ApplyImmediately terra.BoolValue `hcl:"apply_immediately,attr"`
	// AutoMinorVersionUpgrade: bool, optional
	AutoMinorVersionUpgrade terra.BoolValue `hcl:"auto_minor_version_upgrade,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// EngineVersion: string, optional
	EngineVersion terra.StringValue `hcl:"engine_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// MultiAz: bool, optional
	MultiAz terra.BoolValue `hcl:"multi_az,attr"`
	// NetworkType: string, optional
	NetworkType terra.StringValue `hcl:"network_type,attr"`
	// PreferredMaintenanceWindow: string, optional
	PreferredMaintenanceWindow terra.StringValue `hcl:"preferred_maintenance_window,attr"`
	// PubliclyAccessible: bool, optional
	PubliclyAccessible terra.BoolValue `hcl:"publicly_accessible,attr"`
	// ReplicationInstanceClass: string, required
	ReplicationInstanceClass terra.StringValue `hcl:"replication_instance_class,attr" validate:"required"`
	// ReplicationInstanceId: string, required
	ReplicationInstanceId terra.StringValue `hcl:"replication_instance_id,attr" validate:"required"`
	// ReplicationSubnetGroupId: string, optional
	ReplicationSubnetGroupId terra.StringValue `hcl:"replication_subnet_group_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDmsReplicationInstanceAttributes struct {
	ref terra.Reference
}

// AllocatedStorage returns a reference to field allocated_storage of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) AllocatedStorage() terra.NumberValue {
	return terra.ReferenceAsNumber(adri.ref.Append("allocated_storage"))
}

// AllowMajorVersionUpgrade returns a reference to field allow_major_version_upgrade of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) AllowMajorVersionUpgrade() terra.BoolValue {
	return terra.ReferenceAsBool(adri.ref.Append("allow_major_version_upgrade"))
}

// ApplyImmediately returns a reference to field apply_immediately of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) ApplyImmediately() terra.BoolValue {
	return terra.ReferenceAsBool(adri.ref.Append("apply_immediately"))
}

// AutoMinorVersionUpgrade returns a reference to field auto_minor_version_upgrade of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) AutoMinorVersionUpgrade() terra.BoolValue {
	return terra.ReferenceAsBool(adri.ref.Append("auto_minor_version_upgrade"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(adri.ref.Append("availability_zone"))
}

// EngineVersion returns a reference to field engine_version of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(adri.ref.Append("engine_version"))
}

// Id returns a reference to field id of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adri.ref.Append("id"))
}

// KmsKeyArn returns a reference to field kms_key_arn of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(adri.ref.Append("kms_key_arn"))
}

// MultiAz returns a reference to field multi_az of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) MultiAz() terra.BoolValue {
	return terra.ReferenceAsBool(adri.ref.Append("multi_az"))
}

// NetworkType returns a reference to field network_type of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) NetworkType() terra.StringValue {
	return terra.ReferenceAsString(adri.ref.Append("network_type"))
}

// PreferredMaintenanceWindow returns a reference to field preferred_maintenance_window of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) PreferredMaintenanceWindow() terra.StringValue {
	return terra.ReferenceAsString(adri.ref.Append("preferred_maintenance_window"))
}

// PubliclyAccessible returns a reference to field publicly_accessible of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) PubliclyAccessible() terra.BoolValue {
	return terra.ReferenceAsBool(adri.ref.Append("publicly_accessible"))
}

// ReplicationInstanceArn returns a reference to field replication_instance_arn of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) ReplicationInstanceArn() terra.StringValue {
	return terra.ReferenceAsString(adri.ref.Append("replication_instance_arn"))
}

// ReplicationInstanceClass returns a reference to field replication_instance_class of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) ReplicationInstanceClass() terra.StringValue {
	return terra.ReferenceAsString(adri.ref.Append("replication_instance_class"))
}

// ReplicationInstanceId returns a reference to field replication_instance_id of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) ReplicationInstanceId() terra.StringValue {
	return terra.ReferenceAsString(adri.ref.Append("replication_instance_id"))
}

// ReplicationInstancePrivateIps returns a reference to field replication_instance_private_ips of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) ReplicationInstancePrivateIps() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adri.ref.Append("replication_instance_private_ips"))
}

// ReplicationInstancePublicIps returns a reference to field replication_instance_public_ips of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) ReplicationInstancePublicIps() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adri.ref.Append("replication_instance_public_ips"))
}

// ReplicationSubnetGroupId returns a reference to field replication_subnet_group_id of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) ReplicationSubnetGroupId() terra.StringValue {
	return terra.ReferenceAsString(adri.ref.Append("replication_subnet_group_id"))
}

// Tags returns a reference to field tags of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adri.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adri.ref.Append("tags_all"))
}

// VpcSecurityGroupIds returns a reference to field vpc_security_group_ids of aws_dms_replication_instance.
func (adri awsDmsReplicationInstanceAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adri.ref.Append("vpc_security_group_ids"))
}

func (adri awsDmsReplicationInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adri.ref.Append("timeouts"))
}

type awsDmsReplicationInstanceState struct {
	AllocatedStorage              float64           `json:"allocated_storage"`
	AllowMajorVersionUpgrade      bool              `json:"allow_major_version_upgrade"`
	ApplyImmediately              bool              `json:"apply_immediately"`
	AutoMinorVersionUpgrade       bool              `json:"auto_minor_version_upgrade"`
	AvailabilityZone              string            `json:"availability_zone"`
	EngineVersion                 string            `json:"engine_version"`
	Id                            string            `json:"id"`
	KmsKeyArn                     string            `json:"kms_key_arn"`
	MultiAz                       bool              `json:"multi_az"`
	NetworkType                   string            `json:"network_type"`
	PreferredMaintenanceWindow    string            `json:"preferred_maintenance_window"`
	PubliclyAccessible            bool              `json:"publicly_accessible"`
	ReplicationInstanceArn        string            `json:"replication_instance_arn"`
	ReplicationInstanceClass      string            `json:"replication_instance_class"`
	ReplicationInstanceId         string            `json:"replication_instance_id"`
	ReplicationInstancePrivateIps []string          `json:"replication_instance_private_ips"`
	ReplicationInstancePublicIps  []string          `json:"replication_instance_public_ips"`
	ReplicationSubnetGroupId      string            `json:"replication_subnet_group_id"`
	Tags                          map[string]string `json:"tags"`
	TagsAll                       map[string]string `json:"tags_all"`
	VpcSecurityGroupIds           []string          `json:"vpc_security_group_ids"`
	Timeouts                      *TimeoutsState    `json:"timeouts"`
}
