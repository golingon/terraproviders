// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elasticache_user_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_elasticache_user_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsElasticacheUserGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeug *Resource) Type() string {
	return "aws_elasticache_user_group"
}

// LocalName returns the local name for [Resource].
func (aeug *Resource) LocalName() string {
	return aeug.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeug *Resource) Configuration() interface{} {
	return aeug.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeug *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeug)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeug *Resource) Dependencies() terra.Dependencies {
	return aeug.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeug *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeug.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeug *Resource) Attributes() awsElasticacheUserGroupAttributes {
	return awsElasticacheUserGroupAttributes{ref: terra.ReferenceResource(aeug)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeug *Resource) ImportState(state io.Reader) error {
	aeug.state = &awsElasticacheUserGroupState{}
	if err := json.NewDecoder(state).Decode(aeug.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeug.Type(), aeug.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeug *Resource) State() (*awsElasticacheUserGroupState, bool) {
	return aeug.state, aeug.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeug *Resource) StateMust() *awsElasticacheUserGroupState {
	if aeug.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeug.Type(), aeug.LocalName()))
	}
	return aeug.state
}

// Args contains the configurations for aws_elasticache_user_group.
type Args struct {
	// Engine: string, required
	Engine terra.StringValue `hcl:"engine,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserGroupId: string, required
	UserGroupId terra.StringValue `hcl:"user_group_id,attr" validate:"required"`
	// UserIds: set of string, optional
	UserIds terra.SetValue[terra.StringValue] `hcl:"user_ids,attr"`
}

type awsElasticacheUserGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_elasticache_user_group.
func (aeug awsElasticacheUserGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aeug.ref.Append("arn"))
}

// Engine returns a reference to field engine of aws_elasticache_user_group.
func (aeug awsElasticacheUserGroupAttributes) Engine() terra.StringValue {
	return terra.ReferenceAsString(aeug.ref.Append("engine"))
}

// Id returns a reference to field id of aws_elasticache_user_group.
func (aeug awsElasticacheUserGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeug.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_elasticache_user_group.
func (aeug awsElasticacheUserGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeug.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_elasticache_user_group.
func (aeug awsElasticacheUserGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeug.ref.Append("tags_all"))
}

// UserGroupId returns a reference to field user_group_id of aws_elasticache_user_group.
func (aeug awsElasticacheUserGroupAttributes) UserGroupId() terra.StringValue {
	return terra.ReferenceAsString(aeug.ref.Append("user_group_id"))
}

// UserIds returns a reference to field user_ids of aws_elasticache_user_group.
func (aeug awsElasticacheUserGroupAttributes) UserIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aeug.ref.Append("user_ids"))
}

type awsElasticacheUserGroupState struct {
	Arn         string            `json:"arn"`
	Engine      string            `json:"engine"`
	Id          string            `json:"id"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	UserGroupId string            `json:"user_group_id"`
	UserIds     []string          `json:"user_ids"`
}
