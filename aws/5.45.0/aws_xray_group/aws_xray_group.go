// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_xray_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_xray_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsXrayGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (axg *Resource) Type() string {
	return "aws_xray_group"
}

// LocalName returns the local name for [Resource].
func (axg *Resource) LocalName() string {
	return axg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (axg *Resource) Configuration() interface{} {
	return axg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (axg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(axg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (axg *Resource) Dependencies() terra.Dependencies {
	return axg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (axg *Resource) LifecycleManagement() *terra.Lifecycle {
	return axg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (axg *Resource) Attributes() awsXrayGroupAttributes {
	return awsXrayGroupAttributes{ref: terra.ReferenceResource(axg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (axg *Resource) ImportState(state io.Reader) error {
	axg.state = &awsXrayGroupState{}
	if err := json.NewDecoder(state).Decode(axg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", axg.Type(), axg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (axg *Resource) State() (*awsXrayGroupState, bool) {
	return axg.state, axg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (axg *Resource) StateMust() *awsXrayGroupState {
	if axg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", axg.Type(), axg.LocalName()))
	}
	return axg.state
}

// Args contains the configurations for aws_xray_group.
type Args struct {
	// FilterExpression: string, required
	FilterExpression terra.StringValue `hcl:"filter_expression,attr" validate:"required"`
	// GroupName: string, required
	GroupName terra.StringValue `hcl:"group_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// InsightsConfiguration: optional
	InsightsConfiguration *InsightsConfiguration `hcl:"insights_configuration,block"`
}

type awsXrayGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_xray_group.
func (axg awsXrayGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(axg.ref.Append("arn"))
}

// FilterExpression returns a reference to field filter_expression of aws_xray_group.
func (axg awsXrayGroupAttributes) FilterExpression() terra.StringValue {
	return terra.ReferenceAsString(axg.ref.Append("filter_expression"))
}

// GroupName returns a reference to field group_name of aws_xray_group.
func (axg awsXrayGroupAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(axg.ref.Append("group_name"))
}

// Id returns a reference to field id of aws_xray_group.
func (axg awsXrayGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(axg.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_xray_group.
func (axg awsXrayGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](axg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_xray_group.
func (axg awsXrayGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](axg.ref.Append("tags_all"))
}

func (axg awsXrayGroupAttributes) InsightsConfiguration() terra.ListValue[InsightsConfigurationAttributes] {
	return terra.ReferenceAsList[InsightsConfigurationAttributes](axg.ref.Append("insights_configuration"))
}

type awsXrayGroupState struct {
	Arn                   string                       `json:"arn"`
	FilterExpression      string                       `json:"filter_expression"`
	GroupName             string                       `json:"group_name"`
	Id                    string                       `json:"id"`
	Tags                  map[string]string            `json:"tags"`
	TagsAll               map[string]string            `json:"tags_all"`
	InsightsConfiguration []InsightsConfigurationState `json:"insights_configuration"`
}
