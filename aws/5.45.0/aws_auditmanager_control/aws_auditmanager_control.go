// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_auditmanager_control

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_auditmanager_control.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAuditmanagerControlState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aac *Resource) Type() string {
	return "aws_auditmanager_control"
}

// LocalName returns the local name for [Resource].
func (aac *Resource) LocalName() string {
	return aac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aac *Resource) Configuration() interface{} {
	return aac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aac *Resource) Dependencies() terra.Dependencies {
	return aac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aac *Resource) LifecycleManagement() *terra.Lifecycle {
	return aac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aac *Resource) Attributes() awsAuditmanagerControlAttributes {
	return awsAuditmanagerControlAttributes{ref: terra.ReferenceResource(aac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aac *Resource) ImportState(state io.Reader) error {
	aac.state = &awsAuditmanagerControlState{}
	if err := json.NewDecoder(state).Decode(aac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aac.Type(), aac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aac *Resource) State() (*awsAuditmanagerControlState, bool) {
	return aac.state, aac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aac *Resource) StateMust() *awsAuditmanagerControlState {
	if aac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aac.Type(), aac.LocalName()))
	}
	return aac.state
}

// Args contains the configurations for aws_auditmanager_control.
type Args struct {
	// ActionPlanInstructions: string, optional
	ActionPlanInstructions terra.StringValue `hcl:"action_plan_instructions,attr"`
	// ActionPlanTitle: string, optional
	ActionPlanTitle terra.StringValue `hcl:"action_plan_title,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TestingInformation: string, optional
	TestingInformation terra.StringValue `hcl:"testing_information,attr"`
	// ControlMappingSources: min=0
	ControlMappingSources []ControlMappingSources `hcl:"control_mapping_sources,block" validate:"min=0"`
}

type awsAuditmanagerControlAttributes struct {
	ref terra.Reference
}

// ActionPlanInstructions returns a reference to field action_plan_instructions of aws_auditmanager_control.
func (aac awsAuditmanagerControlAttributes) ActionPlanInstructions() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("action_plan_instructions"))
}

// ActionPlanTitle returns a reference to field action_plan_title of aws_auditmanager_control.
func (aac awsAuditmanagerControlAttributes) ActionPlanTitle() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("action_plan_title"))
}

// Arn returns a reference to field arn of aws_auditmanager_control.
func (aac awsAuditmanagerControlAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("arn"))
}

// Description returns a reference to field description of aws_auditmanager_control.
func (aac awsAuditmanagerControlAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("description"))
}

// Id returns a reference to field id of aws_auditmanager_control.
func (aac awsAuditmanagerControlAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("id"))
}

// Name returns a reference to field name of aws_auditmanager_control.
func (aac awsAuditmanagerControlAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_auditmanager_control.
func (aac awsAuditmanagerControlAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aac.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_auditmanager_control.
func (aac awsAuditmanagerControlAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aac.ref.Append("tags_all"))
}

// TestingInformation returns a reference to field testing_information of aws_auditmanager_control.
func (aac awsAuditmanagerControlAttributes) TestingInformation() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("testing_information"))
}

// Type returns a reference to field type of aws_auditmanager_control.
func (aac awsAuditmanagerControlAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("type"))
}

func (aac awsAuditmanagerControlAttributes) ControlMappingSources() terra.SetValue[ControlMappingSourcesAttributes] {
	return terra.ReferenceAsSet[ControlMappingSourcesAttributes](aac.ref.Append("control_mapping_sources"))
}

type awsAuditmanagerControlState struct {
	ActionPlanInstructions string                       `json:"action_plan_instructions"`
	ActionPlanTitle        string                       `json:"action_plan_title"`
	Arn                    string                       `json:"arn"`
	Description            string                       `json:"description"`
	Id                     string                       `json:"id"`
	Name                   string                       `json:"name"`
	Tags                   map[string]string            `json:"tags"`
	TagsAll                map[string]string            `json:"tags_all"`
	TestingInformation     string                       `json:"testing_information"`
	Type                   string                       `json:"type"`
	ControlMappingSources  []ControlMappingSourcesState `json:"control_mapping_sources"`
}
