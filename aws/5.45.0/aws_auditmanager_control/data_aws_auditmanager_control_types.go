// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_auditmanager_control

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataControlMappingSources struct {
	// ControlMappingSourcesSourceKeyword: min=0
	SourceKeyword []DataControlMappingSourcesSourceKeyword `hcl:"source_keyword,block" validate:"min=0"`
}

type DataControlMappingSourcesSourceKeyword struct{}

type DataControlMappingSourcesAttributes struct {
	ref terra.Reference
}

func (cms DataControlMappingSourcesAttributes) InternalRef() (terra.Reference, error) {
	return cms.ref, nil
}

func (cms DataControlMappingSourcesAttributes) InternalWithRef(ref terra.Reference) DataControlMappingSourcesAttributes {
	return DataControlMappingSourcesAttributes{ref: ref}
}

func (cms DataControlMappingSourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cms.ref.InternalTokens()
}

func (cms DataControlMappingSourcesAttributes) SourceDescription() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_description"))
}

func (cms DataControlMappingSourcesAttributes) SourceFrequency() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_frequency"))
}

func (cms DataControlMappingSourcesAttributes) SourceId() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_id"))
}

func (cms DataControlMappingSourcesAttributes) SourceName() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_name"))
}

func (cms DataControlMappingSourcesAttributes) SourceSetUpOption() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_set_up_option"))
}

func (cms DataControlMappingSourcesAttributes) SourceType() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_type"))
}

func (cms DataControlMappingSourcesAttributes) TroubleshootingText() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("troubleshooting_text"))
}

func (cms DataControlMappingSourcesAttributes) SourceKeyword() terra.ListValue[DataControlMappingSourcesSourceKeywordAttributes] {
	return terra.ReferenceAsList[DataControlMappingSourcesSourceKeywordAttributes](cms.ref.Append("source_keyword"))
}

type DataControlMappingSourcesSourceKeywordAttributes struct {
	ref terra.Reference
}

func (sk DataControlMappingSourcesSourceKeywordAttributes) InternalRef() (terra.Reference, error) {
	return sk.ref, nil
}

func (sk DataControlMappingSourcesSourceKeywordAttributes) InternalWithRef(ref terra.Reference) DataControlMappingSourcesSourceKeywordAttributes {
	return DataControlMappingSourcesSourceKeywordAttributes{ref: ref}
}

func (sk DataControlMappingSourcesSourceKeywordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sk.ref.InternalTokens()
}

func (sk DataControlMappingSourcesSourceKeywordAttributes) KeywordInputType() terra.StringValue {
	return terra.ReferenceAsString(sk.ref.Append("keyword_input_type"))
}

func (sk DataControlMappingSourcesSourceKeywordAttributes) KeywordValue() terra.StringValue {
	return terra.ReferenceAsString(sk.ref.Append("keyword_value"))
}

type DataControlMappingSourcesState struct {
	SourceDescription   string                                        `json:"source_description"`
	SourceFrequency     string                                        `json:"source_frequency"`
	SourceId            string                                        `json:"source_id"`
	SourceName          string                                        `json:"source_name"`
	SourceSetUpOption   string                                        `json:"source_set_up_option"`
	SourceType          string                                        `json:"source_type"`
	TroubleshootingText string                                        `json:"troubleshooting_text"`
	SourceKeyword       []DataControlMappingSourcesSourceKeywordState `json:"source_keyword"`
}

type DataControlMappingSourcesSourceKeywordState struct {
	KeywordInputType string `json:"keyword_input_type"`
	KeywordValue     string `json:"keyword_value"`
}
