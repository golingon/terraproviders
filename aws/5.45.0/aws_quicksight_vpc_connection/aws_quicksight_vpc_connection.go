// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_vpc_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_quicksight_vpc_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsQuicksightVpcConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aqvc *Resource) Type() string {
	return "aws_quicksight_vpc_connection"
}

// LocalName returns the local name for [Resource].
func (aqvc *Resource) LocalName() string {
	return aqvc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aqvc *Resource) Configuration() interface{} {
	return aqvc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aqvc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aqvc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aqvc *Resource) Dependencies() terra.Dependencies {
	return aqvc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aqvc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aqvc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aqvc *Resource) Attributes() awsQuicksightVpcConnectionAttributes {
	return awsQuicksightVpcConnectionAttributes{ref: terra.ReferenceResource(aqvc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aqvc *Resource) ImportState(state io.Reader) error {
	aqvc.state = &awsQuicksightVpcConnectionState{}
	if err := json.NewDecoder(state).Decode(aqvc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aqvc.Type(), aqvc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aqvc *Resource) State() (*awsQuicksightVpcConnectionState, bool) {
	return aqvc.state, aqvc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aqvc *Resource) StateMust() *awsQuicksightVpcConnectionState {
	if aqvc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aqvc.Type(), aqvc.LocalName()))
	}
	return aqvc.state
}

// Args contains the configurations for aws_quicksight_vpc_connection.
type Args struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// DnsResolvers: set of string, optional
	DnsResolvers terra.SetValue[terra.StringValue] `hcl:"dns_resolvers,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VpcConnectionId: string, required
	VpcConnectionId terra.StringValue `hcl:"vpc_connection_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsQuicksightVpcConnectionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_quicksight_vpc_connection.
func (aqvc awsQuicksightVpcConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aqvc.ref.Append("arn"))
}

// AvailabilityStatus returns a reference to field availability_status of aws_quicksight_vpc_connection.
func (aqvc awsQuicksightVpcConnectionAttributes) AvailabilityStatus() terra.StringValue {
	return terra.ReferenceAsString(aqvc.ref.Append("availability_status"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_vpc_connection.
func (aqvc awsQuicksightVpcConnectionAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(aqvc.ref.Append("aws_account_id"))
}

// DnsResolvers returns a reference to field dns_resolvers of aws_quicksight_vpc_connection.
func (aqvc awsQuicksightVpcConnectionAttributes) DnsResolvers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aqvc.ref.Append("dns_resolvers"))
}

// Id returns a reference to field id of aws_quicksight_vpc_connection.
func (aqvc awsQuicksightVpcConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aqvc.ref.Append("id"))
}

// Name returns a reference to field name of aws_quicksight_vpc_connection.
func (aqvc awsQuicksightVpcConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aqvc.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_quicksight_vpc_connection.
func (aqvc awsQuicksightVpcConnectionAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(aqvc.ref.Append("role_arn"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_quicksight_vpc_connection.
func (aqvc awsQuicksightVpcConnectionAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aqvc.ref.Append("security_group_ids"))
}

// SubnetIds returns a reference to field subnet_ids of aws_quicksight_vpc_connection.
func (aqvc awsQuicksightVpcConnectionAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aqvc.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_quicksight_vpc_connection.
func (aqvc awsQuicksightVpcConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqvc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_quicksight_vpc_connection.
func (aqvc awsQuicksightVpcConnectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqvc.ref.Append("tags_all"))
}

// VpcConnectionId returns a reference to field vpc_connection_id of aws_quicksight_vpc_connection.
func (aqvc awsQuicksightVpcConnectionAttributes) VpcConnectionId() terra.StringValue {
	return terra.ReferenceAsString(aqvc.ref.Append("vpc_connection_id"))
}

func (aqvc awsQuicksightVpcConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aqvc.ref.Append("timeouts"))
}

type awsQuicksightVpcConnectionState struct {
	Arn                string            `json:"arn"`
	AvailabilityStatus string            `json:"availability_status"`
	AwsAccountId       string            `json:"aws_account_id"`
	DnsResolvers       []string          `json:"dns_resolvers"`
	Id                 string            `json:"id"`
	Name               string            `json:"name"`
	RoleArn            string            `json:"role_arn"`
	SecurityGroupIds   []string          `json:"security_group_ids"`
	SubnetIds          []string          `json:"subnet_ids"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
	VpcConnectionId    string            `json:"vpc_connection_id"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
