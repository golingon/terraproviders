// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecr_pull_through_cache_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ecr_pull_through_cache_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEcrPullThroughCacheRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeptcr *Resource) Type() string {
	return "aws_ecr_pull_through_cache_rule"
}

// LocalName returns the local name for [Resource].
func (aeptcr *Resource) LocalName() string {
	return aeptcr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeptcr *Resource) Configuration() interface{} {
	return aeptcr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeptcr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeptcr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeptcr *Resource) Dependencies() terra.Dependencies {
	return aeptcr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeptcr *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeptcr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeptcr *Resource) Attributes() awsEcrPullThroughCacheRuleAttributes {
	return awsEcrPullThroughCacheRuleAttributes{ref: terra.ReferenceResource(aeptcr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeptcr *Resource) ImportState(state io.Reader) error {
	aeptcr.state = &awsEcrPullThroughCacheRuleState{}
	if err := json.NewDecoder(state).Decode(aeptcr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeptcr.Type(), aeptcr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeptcr *Resource) State() (*awsEcrPullThroughCacheRuleState, bool) {
	return aeptcr.state, aeptcr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeptcr *Resource) StateMust() *awsEcrPullThroughCacheRuleState {
	if aeptcr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeptcr.Type(), aeptcr.LocalName()))
	}
	return aeptcr.state
}

// Args contains the configurations for aws_ecr_pull_through_cache_rule.
type Args struct {
	// CredentialArn: string, optional
	CredentialArn terra.StringValue `hcl:"credential_arn,attr"`
	// EcrRepositoryPrefix: string, required
	EcrRepositoryPrefix terra.StringValue `hcl:"ecr_repository_prefix,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// UpstreamRegistryUrl: string, required
	UpstreamRegistryUrl terra.StringValue `hcl:"upstream_registry_url,attr" validate:"required"`
}

type awsEcrPullThroughCacheRuleAttributes struct {
	ref terra.Reference
}

// CredentialArn returns a reference to field credential_arn of aws_ecr_pull_through_cache_rule.
func (aeptcr awsEcrPullThroughCacheRuleAttributes) CredentialArn() terra.StringValue {
	return terra.ReferenceAsString(aeptcr.ref.Append("credential_arn"))
}

// EcrRepositoryPrefix returns a reference to field ecr_repository_prefix of aws_ecr_pull_through_cache_rule.
func (aeptcr awsEcrPullThroughCacheRuleAttributes) EcrRepositoryPrefix() terra.StringValue {
	return terra.ReferenceAsString(aeptcr.ref.Append("ecr_repository_prefix"))
}

// Id returns a reference to field id of aws_ecr_pull_through_cache_rule.
func (aeptcr awsEcrPullThroughCacheRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeptcr.ref.Append("id"))
}

// RegistryId returns a reference to field registry_id of aws_ecr_pull_through_cache_rule.
func (aeptcr awsEcrPullThroughCacheRuleAttributes) RegistryId() terra.StringValue {
	return terra.ReferenceAsString(aeptcr.ref.Append("registry_id"))
}

// UpstreamRegistryUrl returns a reference to field upstream_registry_url of aws_ecr_pull_through_cache_rule.
func (aeptcr awsEcrPullThroughCacheRuleAttributes) UpstreamRegistryUrl() terra.StringValue {
	return terra.ReferenceAsString(aeptcr.ref.Append("upstream_registry_url"))
}

type awsEcrPullThroughCacheRuleState struct {
	CredentialArn       string `json:"credential_arn"`
	EcrRepositoryPrefix string `json:"ecr_repository_prefix"`
	Id                  string `json:"id"`
	RegistryId          string `json:"registry_id"`
	UpstreamRegistryUrl string `json:"upstream_registry_url"`
}
