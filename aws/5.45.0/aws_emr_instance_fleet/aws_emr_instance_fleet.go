// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_emr_instance_fleet

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_emr_instance_fleet.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEmrInstanceFleetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeif *Resource) Type() string {
	return "aws_emr_instance_fleet"
}

// LocalName returns the local name for [Resource].
func (aeif *Resource) LocalName() string {
	return aeif.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeif *Resource) Configuration() interface{} {
	return aeif.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeif *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeif)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeif *Resource) Dependencies() terra.Dependencies {
	return aeif.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeif *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeif.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeif *Resource) Attributes() awsEmrInstanceFleetAttributes {
	return awsEmrInstanceFleetAttributes{ref: terra.ReferenceResource(aeif)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeif *Resource) ImportState(state io.Reader) error {
	aeif.state = &awsEmrInstanceFleetState{}
	if err := json.NewDecoder(state).Decode(aeif.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeif.Type(), aeif.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeif *Resource) State() (*awsEmrInstanceFleetState, bool) {
	return aeif.state, aeif.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeif *Resource) StateMust() *awsEmrInstanceFleetState {
	if aeif.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeif.Type(), aeif.LocalName()))
	}
	return aeif.state
}

// Args contains the configurations for aws_emr_instance_fleet.
type Args struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// TargetOnDemandCapacity: number, optional
	TargetOnDemandCapacity terra.NumberValue `hcl:"target_on_demand_capacity,attr"`
	// TargetSpotCapacity: number, optional
	TargetSpotCapacity terra.NumberValue `hcl:"target_spot_capacity,attr"`
	// InstanceTypeConfigs: min=0
	InstanceTypeConfigs []InstanceTypeConfigs `hcl:"instance_type_configs,block" validate:"min=0"`
	// LaunchSpecifications: optional
	LaunchSpecifications *LaunchSpecifications `hcl:"launch_specifications,block"`
}

type awsEmrInstanceFleetAttributes struct {
	ref terra.Reference
}

// ClusterId returns a reference to field cluster_id of aws_emr_instance_fleet.
func (aeif awsEmrInstanceFleetAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(aeif.ref.Append("cluster_id"))
}

// Id returns a reference to field id of aws_emr_instance_fleet.
func (aeif awsEmrInstanceFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeif.ref.Append("id"))
}

// Name returns a reference to field name of aws_emr_instance_fleet.
func (aeif awsEmrInstanceFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aeif.ref.Append("name"))
}

// ProvisionedOnDemandCapacity returns a reference to field provisioned_on_demand_capacity of aws_emr_instance_fleet.
func (aeif awsEmrInstanceFleetAttributes) ProvisionedOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aeif.ref.Append("provisioned_on_demand_capacity"))
}

// ProvisionedSpotCapacity returns a reference to field provisioned_spot_capacity of aws_emr_instance_fleet.
func (aeif awsEmrInstanceFleetAttributes) ProvisionedSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aeif.ref.Append("provisioned_spot_capacity"))
}

// TargetOnDemandCapacity returns a reference to field target_on_demand_capacity of aws_emr_instance_fleet.
func (aeif awsEmrInstanceFleetAttributes) TargetOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aeif.ref.Append("target_on_demand_capacity"))
}

// TargetSpotCapacity returns a reference to field target_spot_capacity of aws_emr_instance_fleet.
func (aeif awsEmrInstanceFleetAttributes) TargetSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aeif.ref.Append("target_spot_capacity"))
}

func (aeif awsEmrInstanceFleetAttributes) InstanceTypeConfigs() terra.SetValue[InstanceTypeConfigsAttributes] {
	return terra.ReferenceAsSet[InstanceTypeConfigsAttributes](aeif.ref.Append("instance_type_configs"))
}

func (aeif awsEmrInstanceFleetAttributes) LaunchSpecifications() terra.ListValue[LaunchSpecificationsAttributes] {
	return terra.ReferenceAsList[LaunchSpecificationsAttributes](aeif.ref.Append("launch_specifications"))
}

type awsEmrInstanceFleetState struct {
	ClusterId                   string                      `json:"cluster_id"`
	Id                          string                      `json:"id"`
	Name                        string                      `json:"name"`
	ProvisionedOnDemandCapacity float64                     `json:"provisioned_on_demand_capacity"`
	ProvisionedSpotCapacity     float64                     `json:"provisioned_spot_capacity"`
	TargetOnDemandCapacity      float64                     `json:"target_on_demand_capacity"`
	TargetSpotCapacity          float64                     `json:"target_spot_capacity"`
	InstanceTypeConfigs         []InstanceTypeConfigsState  `json:"instance_type_configs"`
	LaunchSpecifications        []LaunchSpecificationsState `json:"launch_specifications"`
}
