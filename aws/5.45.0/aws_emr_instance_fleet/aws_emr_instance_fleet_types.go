// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_emr_instance_fleet

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type InstanceTypeConfigs struct {
	// BidPrice: string, optional
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// BidPriceAsPercentageOfOnDemandPrice: number, optional
	BidPriceAsPercentageOfOnDemandPrice terra.NumberValue `hcl:"bid_price_as_percentage_of_on_demand_price,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// WeightedCapacity: number, optional
	WeightedCapacity terra.NumberValue `hcl:"weighted_capacity,attr"`
	// InstanceTypeConfigsConfigurations: min=0
	Configurations []InstanceTypeConfigsConfigurations `hcl:"configurations,block" validate:"min=0"`
	// InstanceTypeConfigsEbsConfig: min=0
	EbsConfig []InstanceTypeConfigsEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type InstanceTypeConfigsConfigurations struct {
	// Classification: string, optional
	Classification terra.StringValue `hcl:"classification,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type InstanceTypeConfigsEbsConfig struct {
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance: number, optional
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type LaunchSpecifications struct {
	// LaunchSpecificationsOnDemandSpecification: min=0
	OnDemandSpecification []LaunchSpecificationsOnDemandSpecification `hcl:"on_demand_specification,block" validate:"min=0"`
	// LaunchSpecificationsSpotSpecification: min=0
	SpotSpecification []LaunchSpecificationsSpotSpecification `hcl:"spot_specification,block" validate:"min=0"`
}

type LaunchSpecificationsOnDemandSpecification struct {
	// AllocationStrategy: string, required
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
}

type LaunchSpecificationsSpotSpecification struct {
	// AllocationStrategy: string, required
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
	// BlockDurationMinutes: number, optional
	BlockDurationMinutes terra.NumberValue `hcl:"block_duration_minutes,attr"`
	// TimeoutAction: string, required
	TimeoutAction terra.StringValue `hcl:"timeout_action,attr" validate:"required"`
	// TimeoutDurationMinutes: number, required
	TimeoutDurationMinutes terra.NumberValue `hcl:"timeout_duration_minutes,attr" validate:"required"`
}

type InstanceTypeConfigsAttributes struct {
	ref terra.Reference
}

func (itc InstanceTypeConfigsAttributes) InternalRef() (terra.Reference, error) {
	return itc.ref, nil
}

func (itc InstanceTypeConfigsAttributes) InternalWithRef(ref terra.Reference) InstanceTypeConfigsAttributes {
	return InstanceTypeConfigsAttributes{ref: ref}
}

func (itc InstanceTypeConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return itc.ref.InternalTokens()
}

func (itc InstanceTypeConfigsAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("bid_price"))
}

func (itc InstanceTypeConfigsAttributes) BidPriceAsPercentageOfOnDemandPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("bid_price_as_percentage_of_on_demand_price"))
}

func (itc InstanceTypeConfigsAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("instance_type"))
}

func (itc InstanceTypeConfigsAttributes) WeightedCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("weighted_capacity"))
}

func (itc InstanceTypeConfigsAttributes) Configurations() terra.SetValue[InstanceTypeConfigsConfigurationsAttributes] {
	return terra.ReferenceAsSet[InstanceTypeConfigsConfigurationsAttributes](itc.ref.Append("configurations"))
}

func (itc InstanceTypeConfigsAttributes) EbsConfig() terra.SetValue[InstanceTypeConfigsEbsConfigAttributes] {
	return terra.ReferenceAsSet[InstanceTypeConfigsEbsConfigAttributes](itc.ref.Append("ebs_config"))
}

type InstanceTypeConfigsConfigurationsAttributes struct {
	ref terra.Reference
}

func (c InstanceTypeConfigsConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c InstanceTypeConfigsConfigurationsAttributes) InternalWithRef(ref terra.Reference) InstanceTypeConfigsConfigurationsAttributes {
	return InstanceTypeConfigsConfigurationsAttributes{ref: ref}
}

func (c InstanceTypeConfigsConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c InstanceTypeConfigsConfigurationsAttributes) Classification() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("classification"))
}

func (c InstanceTypeConfigsConfigurationsAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("properties"))
}

type InstanceTypeConfigsEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec InstanceTypeConfigsEbsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec InstanceTypeConfigsEbsConfigAttributes) InternalWithRef(ref terra.Reference) InstanceTypeConfigsEbsConfigAttributes {
	return InstanceTypeConfigsEbsConfigAttributes{ref: ref}
}

func (ec InstanceTypeConfigsEbsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec InstanceTypeConfigsEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec InstanceTypeConfigsEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec InstanceTypeConfigsEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec InstanceTypeConfigsEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type LaunchSpecificationsAttributes struct {
	ref terra.Reference
}

func (ls LaunchSpecificationsAttributes) InternalRef() (terra.Reference, error) {
	return ls.ref, nil
}

func (ls LaunchSpecificationsAttributes) InternalWithRef(ref terra.Reference) LaunchSpecificationsAttributes {
	return LaunchSpecificationsAttributes{ref: ref}
}

func (ls LaunchSpecificationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ls.ref.InternalTokens()
}

func (ls LaunchSpecificationsAttributes) OnDemandSpecification() terra.ListValue[LaunchSpecificationsOnDemandSpecificationAttributes] {
	return terra.ReferenceAsList[LaunchSpecificationsOnDemandSpecificationAttributes](ls.ref.Append("on_demand_specification"))
}

func (ls LaunchSpecificationsAttributes) SpotSpecification() terra.ListValue[LaunchSpecificationsSpotSpecificationAttributes] {
	return terra.ReferenceAsList[LaunchSpecificationsSpotSpecificationAttributes](ls.ref.Append("spot_specification"))
}

type LaunchSpecificationsOnDemandSpecificationAttributes struct {
	ref terra.Reference
}

func (ods LaunchSpecificationsOnDemandSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ods.ref, nil
}

func (ods LaunchSpecificationsOnDemandSpecificationAttributes) InternalWithRef(ref terra.Reference) LaunchSpecificationsOnDemandSpecificationAttributes {
	return LaunchSpecificationsOnDemandSpecificationAttributes{ref: ref}
}

func (ods LaunchSpecificationsOnDemandSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ods.ref.InternalTokens()
}

func (ods LaunchSpecificationsOnDemandSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ods.ref.Append("allocation_strategy"))
}

type LaunchSpecificationsSpotSpecificationAttributes struct {
	ref terra.Reference
}

func (ss LaunchSpecificationsSpotSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss LaunchSpecificationsSpotSpecificationAttributes) InternalWithRef(ref terra.Reference) LaunchSpecificationsSpotSpecificationAttributes {
	return LaunchSpecificationsSpotSpecificationAttributes{ref: ref}
}

func (ss LaunchSpecificationsSpotSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss LaunchSpecificationsSpotSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("allocation_strategy"))
}

func (ss LaunchSpecificationsSpotSpecificationAttributes) BlockDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("block_duration_minutes"))
}

func (ss LaunchSpecificationsSpotSpecificationAttributes) TimeoutAction() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("timeout_action"))
}

func (ss LaunchSpecificationsSpotSpecificationAttributes) TimeoutDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("timeout_duration_minutes"))
}

type InstanceTypeConfigsState struct {
	BidPrice                            string                                   `json:"bid_price"`
	BidPriceAsPercentageOfOnDemandPrice float64                                  `json:"bid_price_as_percentage_of_on_demand_price"`
	InstanceType                        string                                   `json:"instance_type"`
	WeightedCapacity                    float64                                  `json:"weighted_capacity"`
	Configurations                      []InstanceTypeConfigsConfigurationsState `json:"configurations"`
	EbsConfig                           []InstanceTypeConfigsEbsConfigState      `json:"ebs_config"`
}

type InstanceTypeConfigsConfigurationsState struct {
	Classification string            `json:"classification"`
	Properties     map[string]string `json:"properties"`
}

type InstanceTypeConfigsEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}

type LaunchSpecificationsState struct {
	OnDemandSpecification []LaunchSpecificationsOnDemandSpecificationState `json:"on_demand_specification"`
	SpotSpecification     []LaunchSpecificationsSpotSpecificationState     `json:"spot_specification"`
}

type LaunchSpecificationsOnDemandSpecificationState struct {
	AllocationStrategy string `json:"allocation_strategy"`
}

type LaunchSpecificationsSpotSpecificationState struct {
	AllocationStrategy     string  `json:"allocation_strategy"`
	BlockDurationMinutes   float64 `json:"block_duration_minutes"`
	TimeoutAction          string  `json:"timeout_action"`
	TimeoutDurationMinutes float64 `json:"timeout_duration_minutes"`
}
