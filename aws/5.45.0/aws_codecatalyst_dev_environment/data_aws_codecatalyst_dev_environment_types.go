// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codecatalyst_dev_environment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataRepositories struct{}

type DataIdesAttributes struct {
	ref terra.Reference
}

func (i DataIdesAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataIdesAttributes) InternalWithRef(ref terra.Reference) DataIdesAttributes {
	return DataIdesAttributes{ref: ref}
}

func (i DataIdesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataIdesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("name"))
}

func (i DataIdesAttributes) Runtime() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("runtime"))
}

type DataPersistentStorageAttributes struct {
	ref terra.Reference
}

func (ps DataPersistentStorageAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps DataPersistentStorageAttributes) InternalWithRef(ref terra.Reference) DataPersistentStorageAttributes {
	return DataPersistentStorageAttributes{ref: ref}
}

func (ps DataPersistentStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps DataPersistentStorageAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ps.ref.Append("size"))
}

type DataRepositoriesAttributes struct {
	ref terra.Reference
}

func (r DataRepositoriesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataRepositoriesAttributes) InternalWithRef(ref terra.Reference) DataRepositoriesAttributes {
	return DataRepositoriesAttributes{ref: ref}
}

func (r DataRepositoriesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataRepositoriesAttributes) BranchName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("branch_name"))
}

func (r DataRepositoriesAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("repository_name"))
}

type DataIdesState struct {
	Name    string `json:"name"`
	Runtime string `json:"runtime"`
}

type DataPersistentStorageState struct {
	Size float64 `json:"size"`
}

type DataRepositoriesState struct {
	BranchName     string `json:"branch_name"`
	RepositoryName string `json:"repository_name"`
}
