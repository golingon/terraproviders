// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codecatalyst_dev_environment

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_codecatalyst_dev_environment.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (acde *DataSource) DataSource() string {
	return "aws_codecatalyst_dev_environment"
}

// LocalName returns the local name for [DataSource].
func (acde *DataSource) LocalName() string {
	return acde.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (acde *DataSource) Configuration() interface{} {
	return acde.Args
}

// Attributes returns the attributes for [DataSource].
func (acde *DataSource) Attributes() dataAwsCodecatalystDevEnvironmentAttributes {
	return dataAwsCodecatalystDevEnvironmentAttributes{ref: terra.ReferenceDataSource(acde)}
}

// DataArgs contains the configurations for aws_codecatalyst_dev_environment.
type DataArgs struct {
	// Alias: string, optional
	Alias terra.StringValue `hcl:"alias,attr"`
	// CreatorId: string, optional
	CreatorId terra.StringValue `hcl:"creator_id,attr"`
	// EnvId: string, required
	EnvId terra.StringValue `hcl:"env_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProjectName: string, required
	ProjectName terra.StringValue `hcl:"project_name,attr" validate:"required"`
	// SpaceName: string, required
	SpaceName terra.StringValue `hcl:"space_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Repositories: min=0,max=100
	Repositories []DataRepositories `hcl:"repositories,block" validate:"min=0,max=100"`
}

type dataAwsCodecatalystDevEnvironmentAttributes struct {
	ref terra.Reference
}

// Alias returns a reference to field alias of aws_codecatalyst_dev_environment.
func (acde dataAwsCodecatalystDevEnvironmentAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(acde.ref.Append("alias"))
}

// CreatorId returns a reference to field creator_id of aws_codecatalyst_dev_environment.
func (acde dataAwsCodecatalystDevEnvironmentAttributes) CreatorId() terra.StringValue {
	return terra.ReferenceAsString(acde.ref.Append("creator_id"))
}

// EnvId returns a reference to field env_id of aws_codecatalyst_dev_environment.
func (acde dataAwsCodecatalystDevEnvironmentAttributes) EnvId() terra.StringValue {
	return terra.ReferenceAsString(acde.ref.Append("env_id"))
}

// Id returns a reference to field id of aws_codecatalyst_dev_environment.
func (acde dataAwsCodecatalystDevEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acde.ref.Append("id"))
}

// InactivityTimeoutMinutes returns a reference to field inactivity_timeout_minutes of aws_codecatalyst_dev_environment.
func (acde dataAwsCodecatalystDevEnvironmentAttributes) InactivityTimeoutMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(acde.ref.Append("inactivity_timeout_minutes"))
}

// InstanceType returns a reference to field instance_type of aws_codecatalyst_dev_environment.
func (acde dataAwsCodecatalystDevEnvironmentAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(acde.ref.Append("instance_type"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_codecatalyst_dev_environment.
func (acde dataAwsCodecatalystDevEnvironmentAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(acde.ref.Append("last_updated_time"))
}

// ProjectName returns a reference to field project_name of aws_codecatalyst_dev_environment.
func (acde dataAwsCodecatalystDevEnvironmentAttributes) ProjectName() terra.StringValue {
	return terra.ReferenceAsString(acde.ref.Append("project_name"))
}

// SpaceName returns a reference to field space_name of aws_codecatalyst_dev_environment.
func (acde dataAwsCodecatalystDevEnvironmentAttributes) SpaceName() terra.StringValue {
	return terra.ReferenceAsString(acde.ref.Append("space_name"))
}

// Status returns a reference to field status of aws_codecatalyst_dev_environment.
func (acde dataAwsCodecatalystDevEnvironmentAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(acde.ref.Append("status"))
}

// StatusReason returns a reference to field status_reason of aws_codecatalyst_dev_environment.
func (acde dataAwsCodecatalystDevEnvironmentAttributes) StatusReason() terra.StringValue {
	return terra.ReferenceAsString(acde.ref.Append("status_reason"))
}

// Tags returns a reference to field tags of aws_codecatalyst_dev_environment.
func (acde dataAwsCodecatalystDevEnvironmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acde.ref.Append("tags"))
}

func (acde dataAwsCodecatalystDevEnvironmentAttributes) Ides() terra.ListValue[DataIdesAttributes] {
	return terra.ReferenceAsList[DataIdesAttributes](acde.ref.Append("ides"))
}

func (acde dataAwsCodecatalystDevEnvironmentAttributes) PersistentStorage() terra.ListValue[DataPersistentStorageAttributes] {
	return terra.ReferenceAsList[DataPersistentStorageAttributes](acde.ref.Append("persistent_storage"))
}

func (acde dataAwsCodecatalystDevEnvironmentAttributes) Repositories() terra.ListValue[DataRepositoriesAttributes] {
	return terra.ReferenceAsList[DataRepositoriesAttributes](acde.ref.Append("repositories"))
}
