// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_zone

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53_zone.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53ZoneState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arz *Resource) Type() string {
	return "aws_route53_zone"
}

// LocalName returns the local name for [Resource].
func (arz *Resource) LocalName() string {
	return arz.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arz *Resource) Configuration() interface{} {
	return arz.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arz *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arz)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arz *Resource) Dependencies() terra.Dependencies {
	return arz.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arz *Resource) LifecycleManagement() *terra.Lifecycle {
	return arz.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arz *Resource) Attributes() awsRoute53ZoneAttributes {
	return awsRoute53ZoneAttributes{ref: terra.ReferenceResource(arz)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arz *Resource) ImportState(state io.Reader) error {
	arz.state = &awsRoute53ZoneState{}
	if err := json.NewDecoder(state).Decode(arz.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arz.Type(), arz.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arz *Resource) State() (*awsRoute53ZoneState, bool) {
	return arz.state, arz.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arz *Resource) StateMust() *awsRoute53ZoneState {
	if arz.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arz.Type(), arz.LocalName()))
	}
	return arz.state
}

// Args contains the configurations for aws_route53_zone.
type Args struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// DelegationSetId: string, optional
	DelegationSetId terra.StringValue `hcl:"delegation_set_id,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Vpc: min=0
	Vpc []Vpc `hcl:"vpc,block" validate:"min=0"`
}

type awsRoute53ZoneAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_route53_zone.
func (arz awsRoute53ZoneAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arz.ref.Append("arn"))
}

// Comment returns a reference to field comment of aws_route53_zone.
func (arz awsRoute53ZoneAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(arz.ref.Append("comment"))
}

// DelegationSetId returns a reference to field delegation_set_id of aws_route53_zone.
func (arz awsRoute53ZoneAttributes) DelegationSetId() terra.StringValue {
	return terra.ReferenceAsString(arz.ref.Append("delegation_set_id"))
}

// ForceDestroy returns a reference to field force_destroy of aws_route53_zone.
func (arz awsRoute53ZoneAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(arz.ref.Append("force_destroy"))
}

// Id returns a reference to field id of aws_route53_zone.
func (arz awsRoute53ZoneAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arz.ref.Append("id"))
}

// Name returns a reference to field name of aws_route53_zone.
func (arz awsRoute53ZoneAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arz.ref.Append("name"))
}

// NameServers returns a reference to field name_servers of aws_route53_zone.
func (arz awsRoute53ZoneAttributes) NameServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](arz.ref.Append("name_servers"))
}

// PrimaryNameServer returns a reference to field primary_name_server of aws_route53_zone.
func (arz awsRoute53ZoneAttributes) PrimaryNameServer() terra.StringValue {
	return terra.ReferenceAsString(arz.ref.Append("primary_name_server"))
}

// Tags returns a reference to field tags of aws_route53_zone.
func (arz awsRoute53ZoneAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arz.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_route53_zone.
func (arz awsRoute53ZoneAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arz.ref.Append("tags_all"))
}

// ZoneId returns a reference to field zone_id of aws_route53_zone.
func (arz awsRoute53ZoneAttributes) ZoneId() terra.StringValue {
	return terra.ReferenceAsString(arz.ref.Append("zone_id"))
}

func (arz awsRoute53ZoneAttributes) Vpc() terra.SetValue[VpcAttributes] {
	return terra.ReferenceAsSet[VpcAttributes](arz.ref.Append("vpc"))
}

type awsRoute53ZoneState struct {
	Arn               string            `json:"arn"`
	Comment           string            `json:"comment"`
	DelegationSetId   string            `json:"delegation_set_id"`
	ForceDestroy      bool              `json:"force_destroy"`
	Id                string            `json:"id"`
	Name              string            `json:"name"`
	NameServers       []string          `json:"name_servers"`
	PrimaryNameServer string            `json:"primary_name_server"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
	ZoneId            string            `json:"zone_id"`
	Vpc               []VpcState        `json:"vpc"`
}
