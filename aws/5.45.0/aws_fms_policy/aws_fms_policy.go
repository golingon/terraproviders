// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fms_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_fms_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsFmsPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (afp *Resource) Type() string {
	return "aws_fms_policy"
}

// LocalName returns the local name for [Resource].
func (afp *Resource) LocalName() string {
	return afp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (afp *Resource) Configuration() interface{} {
	return afp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (afp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(afp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (afp *Resource) Dependencies() terra.Dependencies {
	return afp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (afp *Resource) LifecycleManagement() *terra.Lifecycle {
	return afp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (afp *Resource) Attributes() awsFmsPolicyAttributes {
	return awsFmsPolicyAttributes{ref: terra.ReferenceResource(afp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (afp *Resource) ImportState(state io.Reader) error {
	afp.state = &awsFmsPolicyState{}
	if err := json.NewDecoder(state).Decode(afp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afp.Type(), afp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (afp *Resource) State() (*awsFmsPolicyState, bool) {
	return afp.state, afp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (afp *Resource) StateMust() *awsFmsPolicyState {
	if afp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afp.Type(), afp.LocalName()))
	}
	return afp.state
}

// Args contains the configurations for aws_fms_policy.
type Args struct {
	// DeleteAllPolicyResources: bool, optional
	DeleteAllPolicyResources terra.BoolValue `hcl:"delete_all_policy_resources,attr"`
	// DeleteUnusedFmManagedResources: bool, optional
	DeleteUnusedFmManagedResources terra.BoolValue `hcl:"delete_unused_fm_managed_resources,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExcludeResourceTags: bool, required
	ExcludeResourceTags terra.BoolValue `hcl:"exclude_resource_tags,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RemediationEnabled: bool, optional
	RemediationEnabled terra.BoolValue `hcl:"remediation_enabled,attr"`
	// ResourceTags: map of string, optional
	ResourceTags terra.MapValue[terra.StringValue] `hcl:"resource_tags,attr"`
	// ResourceType: string, optional
	ResourceType terra.StringValue `hcl:"resource_type,attr"`
	// ResourceTypeList: set of string, optional
	ResourceTypeList terra.SetValue[terra.StringValue] `hcl:"resource_type_list,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ExcludeMap: optional
	ExcludeMap *ExcludeMap `hcl:"exclude_map,block"`
	// IncludeMap: optional
	IncludeMap *IncludeMap `hcl:"include_map,block"`
	// SecurityServicePolicyData: required
	SecurityServicePolicyData *SecurityServicePolicyData `hcl:"security_service_policy_data,block" validate:"required"`
}

type awsFmsPolicyAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_fms_policy.
func (afp awsFmsPolicyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(afp.ref.Append("arn"))
}

// DeleteAllPolicyResources returns a reference to field delete_all_policy_resources of aws_fms_policy.
func (afp awsFmsPolicyAttributes) DeleteAllPolicyResources() terra.BoolValue {
	return terra.ReferenceAsBool(afp.ref.Append("delete_all_policy_resources"))
}

// DeleteUnusedFmManagedResources returns a reference to field delete_unused_fm_managed_resources of aws_fms_policy.
func (afp awsFmsPolicyAttributes) DeleteUnusedFmManagedResources() terra.BoolValue {
	return terra.ReferenceAsBool(afp.ref.Append("delete_unused_fm_managed_resources"))
}

// Description returns a reference to field description of aws_fms_policy.
func (afp awsFmsPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(afp.ref.Append("description"))
}

// ExcludeResourceTags returns a reference to field exclude_resource_tags of aws_fms_policy.
func (afp awsFmsPolicyAttributes) ExcludeResourceTags() terra.BoolValue {
	return terra.ReferenceAsBool(afp.ref.Append("exclude_resource_tags"))
}

// Id returns a reference to field id of aws_fms_policy.
func (afp awsFmsPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(afp.ref.Append("id"))
}

// Name returns a reference to field name of aws_fms_policy.
func (afp awsFmsPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(afp.ref.Append("name"))
}

// PolicyUpdateToken returns a reference to field policy_update_token of aws_fms_policy.
func (afp awsFmsPolicyAttributes) PolicyUpdateToken() terra.StringValue {
	return terra.ReferenceAsString(afp.ref.Append("policy_update_token"))
}

// RemediationEnabled returns a reference to field remediation_enabled of aws_fms_policy.
func (afp awsFmsPolicyAttributes) RemediationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(afp.ref.Append("remediation_enabled"))
}

// ResourceTags returns a reference to field resource_tags of aws_fms_policy.
func (afp awsFmsPolicyAttributes) ResourceTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afp.ref.Append("resource_tags"))
}

// ResourceType returns a reference to field resource_type of aws_fms_policy.
func (afp awsFmsPolicyAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(afp.ref.Append("resource_type"))
}

// ResourceTypeList returns a reference to field resource_type_list of aws_fms_policy.
func (afp awsFmsPolicyAttributes) ResourceTypeList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](afp.ref.Append("resource_type_list"))
}

// Tags returns a reference to field tags of aws_fms_policy.
func (afp awsFmsPolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_fms_policy.
func (afp awsFmsPolicyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afp.ref.Append("tags_all"))
}

func (afp awsFmsPolicyAttributes) ExcludeMap() terra.ListValue[ExcludeMapAttributes] {
	return terra.ReferenceAsList[ExcludeMapAttributes](afp.ref.Append("exclude_map"))
}

func (afp awsFmsPolicyAttributes) IncludeMap() terra.ListValue[IncludeMapAttributes] {
	return terra.ReferenceAsList[IncludeMapAttributes](afp.ref.Append("include_map"))
}

func (afp awsFmsPolicyAttributes) SecurityServicePolicyData() terra.ListValue[SecurityServicePolicyDataAttributes] {
	return terra.ReferenceAsList[SecurityServicePolicyDataAttributes](afp.ref.Append("security_service_policy_data"))
}

type awsFmsPolicyState struct {
	Arn                            string                           `json:"arn"`
	DeleteAllPolicyResources       bool                             `json:"delete_all_policy_resources"`
	DeleteUnusedFmManagedResources bool                             `json:"delete_unused_fm_managed_resources"`
	Description                    string                           `json:"description"`
	ExcludeResourceTags            bool                             `json:"exclude_resource_tags"`
	Id                             string                           `json:"id"`
	Name                           string                           `json:"name"`
	PolicyUpdateToken              string                           `json:"policy_update_token"`
	RemediationEnabled             bool                             `json:"remediation_enabled"`
	ResourceTags                   map[string]string                `json:"resource_tags"`
	ResourceType                   string                           `json:"resource_type"`
	ResourceTypeList               []string                         `json:"resource_type_list"`
	Tags                           map[string]string                `json:"tags"`
	TagsAll                        map[string]string                `json:"tags_all"`
	ExcludeMap                     []ExcludeMapState                `json:"exclude_map"`
	IncludeMap                     []IncludeMapState                `json:"include_map"`
	SecurityServicePolicyData      []SecurityServicePolicyDataState `json:"security_service_policy_data"`
}
