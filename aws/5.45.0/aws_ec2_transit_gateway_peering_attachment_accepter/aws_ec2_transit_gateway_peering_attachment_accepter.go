// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_transit_gateway_peering_attachment_accepter

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_transit_gateway_peering_attachment_accepter.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2TransitGatewayPeeringAttachmentAccepterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aetgpaa *Resource) Type() string {
	return "aws_ec2_transit_gateway_peering_attachment_accepter"
}

// LocalName returns the local name for [Resource].
func (aetgpaa *Resource) LocalName() string {
	return aetgpaa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aetgpaa *Resource) Configuration() interface{} {
	return aetgpaa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aetgpaa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aetgpaa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aetgpaa *Resource) Dependencies() terra.Dependencies {
	return aetgpaa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aetgpaa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aetgpaa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aetgpaa *Resource) Attributes() awsEc2TransitGatewayPeeringAttachmentAccepterAttributes {
	return awsEc2TransitGatewayPeeringAttachmentAccepterAttributes{ref: terra.ReferenceResource(aetgpaa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aetgpaa *Resource) ImportState(state io.Reader) error {
	aetgpaa.state = &awsEc2TransitGatewayPeeringAttachmentAccepterState{}
	if err := json.NewDecoder(state).Decode(aetgpaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aetgpaa.Type(), aetgpaa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aetgpaa *Resource) State() (*awsEc2TransitGatewayPeeringAttachmentAccepterState, bool) {
	return aetgpaa.state, aetgpaa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aetgpaa *Resource) StateMust() *awsEc2TransitGatewayPeeringAttachmentAccepterState {
	if aetgpaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aetgpaa.Type(), aetgpaa.LocalName()))
	}
	return aetgpaa.state
}

// Args contains the configurations for aws_ec2_transit_gateway_peering_attachment_accepter.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitGatewayAttachmentId: string, required
	TransitGatewayAttachmentId terra.StringValue `hcl:"transit_gateway_attachment_id,attr" validate:"required"`
}

type awsEc2TransitGatewayPeeringAttachmentAccepterAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ec2_transit_gateway_peering_attachment_accepter.
func (aetgpaa awsEc2TransitGatewayPeeringAttachmentAccepterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aetgpaa.ref.Append("id"))
}

// PeerAccountId returns a reference to field peer_account_id of aws_ec2_transit_gateway_peering_attachment_accepter.
func (aetgpaa awsEc2TransitGatewayPeeringAttachmentAccepterAttributes) PeerAccountId() terra.StringValue {
	return terra.ReferenceAsString(aetgpaa.ref.Append("peer_account_id"))
}

// PeerRegion returns a reference to field peer_region of aws_ec2_transit_gateway_peering_attachment_accepter.
func (aetgpaa awsEc2TransitGatewayPeeringAttachmentAccepterAttributes) PeerRegion() terra.StringValue {
	return terra.ReferenceAsString(aetgpaa.ref.Append("peer_region"))
}

// PeerTransitGatewayId returns a reference to field peer_transit_gateway_id of aws_ec2_transit_gateway_peering_attachment_accepter.
func (aetgpaa awsEc2TransitGatewayPeeringAttachmentAccepterAttributes) PeerTransitGatewayId() terra.StringValue {
	return terra.ReferenceAsString(aetgpaa.ref.Append("peer_transit_gateway_id"))
}

// Tags returns a reference to field tags of aws_ec2_transit_gateway_peering_attachment_accepter.
func (aetgpaa awsEc2TransitGatewayPeeringAttachmentAccepterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetgpaa.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_transit_gateway_peering_attachment_accepter.
func (aetgpaa awsEc2TransitGatewayPeeringAttachmentAccepterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetgpaa.ref.Append("tags_all"))
}

// TransitGatewayAttachmentId returns a reference to field transit_gateway_attachment_id of aws_ec2_transit_gateway_peering_attachment_accepter.
func (aetgpaa awsEc2TransitGatewayPeeringAttachmentAccepterAttributes) TransitGatewayAttachmentId() terra.StringValue {
	return terra.ReferenceAsString(aetgpaa.ref.Append("transit_gateway_attachment_id"))
}

// TransitGatewayId returns a reference to field transit_gateway_id of aws_ec2_transit_gateway_peering_attachment_accepter.
func (aetgpaa awsEc2TransitGatewayPeeringAttachmentAccepterAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceAsString(aetgpaa.ref.Append("transit_gateway_id"))
}

type awsEc2TransitGatewayPeeringAttachmentAccepterState struct {
	Id                         string            `json:"id"`
	PeerAccountId              string            `json:"peer_account_id"`
	PeerRegion                 string            `json:"peer_region"`
	PeerTransitGatewayId       string            `json:"peer_transit_gateway_id"`
	Tags                       map[string]string `json:"tags"`
	TagsAll                    map[string]string `json:"tags_all"`
	TransitGatewayAttachmentId string            `json:"transit_gateway_attachment_id"`
	TransitGatewayId           string            `json:"transit_gateway_id"`
}
