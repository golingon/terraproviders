// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_finspace_kx_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_finspace_kx_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *awsFinspaceKxClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (afkc *Resource) Type() string {
	return "aws_finspace_kx_cluster"
}

// LocalName returns the local name for [Resource].
func (afkc *Resource) LocalName() string {
	return afkc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (afkc *Resource) Configuration() interface{} {
	return afkc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (afkc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(afkc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (afkc *Resource) Dependencies() terra.Dependencies {
	return afkc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (afkc *Resource) LifecycleManagement() *terra.Lifecycle {
	return afkc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (afkc *Resource) Attributes() awsFinspaceKxClusterAttributes {
	return awsFinspaceKxClusterAttributes{ref: terra.ReferenceResource(afkc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (afkc *Resource) ImportState(state io.Reader) error {
	afkc.state = &awsFinspaceKxClusterState{}
	if err := json.NewDecoder(state).Decode(afkc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afkc.Type(), afkc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (afkc *Resource) State() (*awsFinspaceKxClusterState, bool) {
	return afkc.state, afkc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (afkc *Resource) StateMust() *awsFinspaceKxClusterState {
	if afkc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afkc.Type(), afkc.LocalName()))
	}
	return afkc.state
}

// Args contains the configurations for aws_finspace_kx_cluster.
type Args struct {
	// AvailabilityZoneId: string, optional
	AvailabilityZoneId terra.StringValue `hcl:"availability_zone_id,attr"`
	// AzMode: string, required
	AzMode terra.StringValue `hcl:"az_mode,attr" validate:"required"`
	// CommandLineArguments: map of string, optional
	CommandLineArguments terra.MapValue[terra.StringValue] `hcl:"command_line_arguments,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnvironmentId: string, required
	EnvironmentId terra.StringValue `hcl:"environment_id,attr" validate:"required"`
	// ExecutionRole: string, optional
	ExecutionRole terra.StringValue `hcl:"execution_role,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InitializationScript: string, optional
	InitializationScript terra.StringValue `hcl:"initialization_script,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReleaseLabel: string, required
	ReleaseLabel terra.StringValue `hcl:"release_label,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// AutoScalingConfiguration: optional
	AutoScalingConfiguration *AutoScalingConfiguration `hcl:"auto_scaling_configuration,block"`
	// CacheStorageConfigurations: min=0
	CacheStorageConfigurations []CacheStorageConfigurations `hcl:"cache_storage_configurations,block" validate:"min=0"`
	// CapacityConfiguration: optional
	CapacityConfiguration *CapacityConfiguration `hcl:"capacity_configuration,block"`
	// Code: optional
	Code *Code `hcl:"code,block"`
	// Database: min=0
	Database []Database `hcl:"database,block" validate:"min=0"`
	// SavedownStorageConfiguration: optional
	SavedownStorageConfiguration *SavedownStorageConfiguration `hcl:"savedown_storage_configuration,block"`
	// ScalingGroupConfiguration: optional
	ScalingGroupConfiguration *ScalingGroupConfiguration `hcl:"scaling_group_configuration,block"`
	// TickerplantLogConfiguration: min=0
	TickerplantLogConfiguration []TickerplantLogConfiguration `hcl:"tickerplant_log_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcConfiguration: required
	VpcConfiguration *VpcConfiguration `hcl:"vpc_configuration,block" validate:"required"`
}

type awsFinspaceKxClusterAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("arn"))
}

// AvailabilityZoneId returns a reference to field availability_zone_id of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) AvailabilityZoneId() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("availability_zone_id"))
}

// AzMode returns a reference to field az_mode of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) AzMode() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("az_mode"))
}

// CommandLineArguments returns a reference to field command_line_arguments of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) CommandLineArguments() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afkc.ref.Append("command_line_arguments"))
}

// CreatedTimestamp returns a reference to field created_timestamp of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) CreatedTimestamp() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("created_timestamp"))
}

// Description returns a reference to field description of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("description"))
}

// EnvironmentId returns a reference to field environment_id of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("environment_id"))
}

// ExecutionRole returns a reference to field execution_role of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) ExecutionRole() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("execution_role"))
}

// Id returns a reference to field id of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("id"))
}

// InitializationScript returns a reference to field initialization_script of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) InitializationScript() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("initialization_script"))
}

// LastModifiedTimestamp returns a reference to field last_modified_timestamp of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) LastModifiedTimestamp() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("last_modified_timestamp"))
}

// Name returns a reference to field name of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("name"))
}

// ReleaseLabel returns a reference to field release_label of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) ReleaseLabel() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("release_label"))
}

// Status returns a reference to field status of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("status"))
}

// StatusReason returns a reference to field status_reason of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) StatusReason() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("status_reason"))
}

// Tags returns a reference to field tags of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afkc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afkc.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_finspace_kx_cluster.
func (afkc awsFinspaceKxClusterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(afkc.ref.Append("type"))
}

func (afkc awsFinspaceKxClusterAttributes) AutoScalingConfiguration() terra.ListValue[AutoScalingConfigurationAttributes] {
	return terra.ReferenceAsList[AutoScalingConfigurationAttributes](afkc.ref.Append("auto_scaling_configuration"))
}

func (afkc awsFinspaceKxClusterAttributes) CacheStorageConfigurations() terra.ListValue[CacheStorageConfigurationsAttributes] {
	return terra.ReferenceAsList[CacheStorageConfigurationsAttributes](afkc.ref.Append("cache_storage_configurations"))
}

func (afkc awsFinspaceKxClusterAttributes) CapacityConfiguration() terra.ListValue[CapacityConfigurationAttributes] {
	return terra.ReferenceAsList[CapacityConfigurationAttributes](afkc.ref.Append("capacity_configuration"))
}

func (afkc awsFinspaceKxClusterAttributes) Code() terra.ListValue[CodeAttributes] {
	return terra.ReferenceAsList[CodeAttributes](afkc.ref.Append("code"))
}

func (afkc awsFinspaceKxClusterAttributes) Database() terra.ListValue[DatabaseAttributes] {
	return terra.ReferenceAsList[DatabaseAttributes](afkc.ref.Append("database"))
}

func (afkc awsFinspaceKxClusterAttributes) SavedownStorageConfiguration() terra.ListValue[SavedownStorageConfigurationAttributes] {
	return terra.ReferenceAsList[SavedownStorageConfigurationAttributes](afkc.ref.Append("savedown_storage_configuration"))
}

func (afkc awsFinspaceKxClusterAttributes) ScalingGroupConfiguration() terra.ListValue[ScalingGroupConfigurationAttributes] {
	return terra.ReferenceAsList[ScalingGroupConfigurationAttributes](afkc.ref.Append("scaling_group_configuration"))
}

func (afkc awsFinspaceKxClusterAttributes) TickerplantLogConfiguration() terra.ListValue[TickerplantLogConfigurationAttributes] {
	return terra.ReferenceAsList[TickerplantLogConfigurationAttributes](afkc.ref.Append("tickerplant_log_configuration"))
}

func (afkc awsFinspaceKxClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](afkc.ref.Append("timeouts"))
}

func (afkc awsFinspaceKxClusterAttributes) VpcConfiguration() terra.ListValue[VpcConfigurationAttributes] {
	return terra.ReferenceAsList[VpcConfigurationAttributes](afkc.ref.Append("vpc_configuration"))
}

type awsFinspaceKxClusterState struct {
	Arn                          string                              `json:"arn"`
	AvailabilityZoneId           string                              `json:"availability_zone_id"`
	AzMode                       string                              `json:"az_mode"`
	CommandLineArguments         map[string]string                   `json:"command_line_arguments"`
	CreatedTimestamp             string                              `json:"created_timestamp"`
	Description                  string                              `json:"description"`
	EnvironmentId                string                              `json:"environment_id"`
	ExecutionRole                string                              `json:"execution_role"`
	Id                           string                              `json:"id"`
	InitializationScript         string                              `json:"initialization_script"`
	LastModifiedTimestamp        string                              `json:"last_modified_timestamp"`
	Name                         string                              `json:"name"`
	ReleaseLabel                 string                              `json:"release_label"`
	Status                       string                              `json:"status"`
	StatusReason                 string                              `json:"status_reason"`
	Tags                         map[string]string                   `json:"tags"`
	TagsAll                      map[string]string                   `json:"tags_all"`
	Type                         string                              `json:"type"`
	AutoScalingConfiguration     []AutoScalingConfigurationState     `json:"auto_scaling_configuration"`
	CacheStorageConfigurations   []CacheStorageConfigurationsState   `json:"cache_storage_configurations"`
	CapacityConfiguration        []CapacityConfigurationState        `json:"capacity_configuration"`
	Code                         []CodeState                         `json:"code"`
	Database                     []DatabaseState                     `json:"database"`
	SavedownStorageConfiguration []SavedownStorageConfigurationState `json:"savedown_storage_configuration"`
	ScalingGroupConfiguration    []ScalingGroupConfigurationState    `json:"scaling_group_configuration"`
	TickerplantLogConfiguration  []TickerplantLogConfigurationState  `json:"tickerplant_log_configuration"`
	Timeouts                     *TimeoutsState                      `json:"timeouts"`
	VpcConfiguration             []VpcConfigurationState             `json:"vpc_configuration"`
}
