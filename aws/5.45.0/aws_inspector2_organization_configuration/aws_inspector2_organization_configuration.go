// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_inspector2_organization_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_inspector2_organization_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsInspector2OrganizationConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aioc *Resource) Type() string {
	return "aws_inspector2_organization_configuration"
}

// LocalName returns the local name for [Resource].
func (aioc *Resource) LocalName() string {
	return aioc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aioc *Resource) Configuration() interface{} {
	return aioc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aioc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aioc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aioc *Resource) Dependencies() terra.Dependencies {
	return aioc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aioc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aioc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aioc *Resource) Attributes() awsInspector2OrganizationConfigurationAttributes {
	return awsInspector2OrganizationConfigurationAttributes{ref: terra.ReferenceResource(aioc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aioc *Resource) ImportState(state io.Reader) error {
	aioc.state = &awsInspector2OrganizationConfigurationState{}
	if err := json.NewDecoder(state).Decode(aioc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aioc.Type(), aioc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aioc *Resource) State() (*awsInspector2OrganizationConfigurationState, bool) {
	return aioc.state, aioc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aioc *Resource) StateMust() *awsInspector2OrganizationConfigurationState {
	if aioc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aioc.Type(), aioc.LocalName()))
	}
	return aioc.state
}

// Args contains the configurations for aws_inspector2_organization_configuration.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// AutoEnable: required
	AutoEnable *AutoEnable `hcl:"auto_enable,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsInspector2OrganizationConfigurationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_inspector2_organization_configuration.
func (aioc awsInspector2OrganizationConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aioc.ref.Append("id"))
}

// MaxAccountLimitReached returns a reference to field max_account_limit_reached of aws_inspector2_organization_configuration.
func (aioc awsInspector2OrganizationConfigurationAttributes) MaxAccountLimitReached() terra.BoolValue {
	return terra.ReferenceAsBool(aioc.ref.Append("max_account_limit_reached"))
}

func (aioc awsInspector2OrganizationConfigurationAttributes) AutoEnable() terra.ListValue[AutoEnableAttributes] {
	return terra.ReferenceAsList[AutoEnableAttributes](aioc.ref.Append("auto_enable"))
}

func (aioc awsInspector2OrganizationConfigurationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aioc.ref.Append("timeouts"))
}

type awsInspector2OrganizationConfigurationState struct {
	Id                     string            `json:"id"`
	MaxAccountLimitReached bool              `json:"max_account_limit_reached"`
	AutoEnable             []AutoEnableState `json:"auto_enable"`
	Timeouts               *TimeoutsState    `json:"timeouts"`
}
