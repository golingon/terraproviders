// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cognito_resource_server

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cognito_resource_server.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCognitoResourceServerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acrs *Resource) Type() string {
	return "aws_cognito_resource_server"
}

// LocalName returns the local name for [Resource].
func (acrs *Resource) LocalName() string {
	return acrs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acrs *Resource) Configuration() interface{} {
	return acrs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acrs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acrs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acrs *Resource) Dependencies() terra.Dependencies {
	return acrs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acrs *Resource) LifecycleManagement() *terra.Lifecycle {
	return acrs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acrs *Resource) Attributes() awsCognitoResourceServerAttributes {
	return awsCognitoResourceServerAttributes{ref: terra.ReferenceResource(acrs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acrs *Resource) ImportState(state io.Reader) error {
	acrs.state = &awsCognitoResourceServerState{}
	if err := json.NewDecoder(state).Decode(acrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acrs.Type(), acrs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acrs *Resource) State() (*awsCognitoResourceServerState, bool) {
	return acrs.state, acrs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acrs *Resource) StateMust() *awsCognitoResourceServerState {
	if acrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acrs.Type(), acrs.LocalName()))
	}
	return acrs.state
}

// Args contains the configurations for aws_cognito_resource_server.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Identifier: string, required
	Identifier terra.StringValue `hcl:"identifier,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// UserPoolId: string, required
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
	// Scope: min=0,max=100
	Scope []Scope `hcl:"scope,block" validate:"min=0,max=100"`
}

type awsCognitoResourceServerAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_cognito_resource_server.
func (acrs awsCognitoResourceServerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acrs.ref.Append("id"))
}

// Identifier returns a reference to field identifier of aws_cognito_resource_server.
func (acrs awsCognitoResourceServerAttributes) Identifier() terra.StringValue {
	return terra.ReferenceAsString(acrs.ref.Append("identifier"))
}

// Name returns a reference to field name of aws_cognito_resource_server.
func (acrs awsCognitoResourceServerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acrs.ref.Append("name"))
}

// ScopeIdentifiers returns a reference to field scope_identifiers of aws_cognito_resource_server.
func (acrs awsCognitoResourceServerAttributes) ScopeIdentifiers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](acrs.ref.Append("scope_identifiers"))
}

// UserPoolId returns a reference to field user_pool_id of aws_cognito_resource_server.
func (acrs awsCognitoResourceServerAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceAsString(acrs.ref.Append("user_pool_id"))
}

func (acrs awsCognitoResourceServerAttributes) Scope() terra.SetValue[ScopeAttributes] {
	return terra.ReferenceAsSet[ScopeAttributes](acrs.ref.Append("scope"))
}

type awsCognitoResourceServerState struct {
	Id               string       `json:"id"`
	Identifier       string       `json:"identifier"`
	Name             string       `json:"name"`
	ScopeIdentifiers []string     `json:"scope_identifiers"`
	UserPoolId       string       `json:"user_pool_id"`
	Scope            []ScopeState `json:"scope"`
}
