// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_traffic_mirror_filter_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_traffic_mirror_filter_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2TrafficMirrorFilterRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aetmfr *Resource) Type() string {
	return "aws_ec2_traffic_mirror_filter_rule"
}

// LocalName returns the local name for [Resource].
func (aetmfr *Resource) LocalName() string {
	return aetmfr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aetmfr *Resource) Configuration() interface{} {
	return aetmfr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aetmfr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aetmfr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aetmfr *Resource) Dependencies() terra.Dependencies {
	return aetmfr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aetmfr *Resource) LifecycleManagement() *terra.Lifecycle {
	return aetmfr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aetmfr *Resource) Attributes() awsEc2TrafficMirrorFilterRuleAttributes {
	return awsEc2TrafficMirrorFilterRuleAttributes{ref: terra.ReferenceResource(aetmfr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aetmfr *Resource) ImportState(state io.Reader) error {
	aetmfr.state = &awsEc2TrafficMirrorFilterRuleState{}
	if err := json.NewDecoder(state).Decode(aetmfr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aetmfr.Type(), aetmfr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aetmfr *Resource) State() (*awsEc2TrafficMirrorFilterRuleState, bool) {
	return aetmfr.state, aetmfr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aetmfr *Resource) StateMust() *awsEc2TrafficMirrorFilterRuleState {
	if aetmfr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aetmfr.Type(), aetmfr.LocalName()))
	}
	return aetmfr.state
}

// Args contains the configurations for aws_ec2_traffic_mirror_filter_rule.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DestinationCidrBlock: string, required
	DestinationCidrBlock terra.StringValue `hcl:"destination_cidr_block,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Protocol: number, optional
	Protocol terra.NumberValue `hcl:"protocol,attr"`
	// RuleAction: string, required
	RuleAction terra.StringValue `hcl:"rule_action,attr" validate:"required"`
	// RuleNumber: number, required
	RuleNumber terra.NumberValue `hcl:"rule_number,attr" validate:"required"`
	// SourceCidrBlock: string, required
	SourceCidrBlock terra.StringValue `hcl:"source_cidr_block,attr" validate:"required"`
	// TrafficDirection: string, required
	TrafficDirection terra.StringValue `hcl:"traffic_direction,attr" validate:"required"`
	// TrafficMirrorFilterId: string, required
	TrafficMirrorFilterId terra.StringValue `hcl:"traffic_mirror_filter_id,attr" validate:"required"`
	// DestinationPortRange: optional
	DestinationPortRange *DestinationPortRange `hcl:"destination_port_range,block"`
	// SourcePortRange: optional
	SourcePortRange *SourcePortRange `hcl:"source_port_range,block"`
}

type awsEc2TrafficMirrorFilterRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ec2_traffic_mirror_filter_rule.
func (aetmfr awsEc2TrafficMirrorFilterRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aetmfr.ref.Append("arn"))
}

// Description returns a reference to field description of aws_ec2_traffic_mirror_filter_rule.
func (aetmfr awsEc2TrafficMirrorFilterRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aetmfr.ref.Append("description"))
}

// DestinationCidrBlock returns a reference to field destination_cidr_block of aws_ec2_traffic_mirror_filter_rule.
func (aetmfr awsEc2TrafficMirrorFilterRuleAttributes) DestinationCidrBlock() terra.StringValue {
	return terra.ReferenceAsString(aetmfr.ref.Append("destination_cidr_block"))
}

// Id returns a reference to field id of aws_ec2_traffic_mirror_filter_rule.
func (aetmfr awsEc2TrafficMirrorFilterRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aetmfr.ref.Append("id"))
}

// Protocol returns a reference to field protocol of aws_ec2_traffic_mirror_filter_rule.
func (aetmfr awsEc2TrafficMirrorFilterRuleAttributes) Protocol() terra.NumberValue {
	return terra.ReferenceAsNumber(aetmfr.ref.Append("protocol"))
}

// RuleAction returns a reference to field rule_action of aws_ec2_traffic_mirror_filter_rule.
func (aetmfr awsEc2TrafficMirrorFilterRuleAttributes) RuleAction() terra.StringValue {
	return terra.ReferenceAsString(aetmfr.ref.Append("rule_action"))
}

// RuleNumber returns a reference to field rule_number of aws_ec2_traffic_mirror_filter_rule.
func (aetmfr awsEc2TrafficMirrorFilterRuleAttributes) RuleNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(aetmfr.ref.Append("rule_number"))
}

// SourceCidrBlock returns a reference to field source_cidr_block of aws_ec2_traffic_mirror_filter_rule.
func (aetmfr awsEc2TrafficMirrorFilterRuleAttributes) SourceCidrBlock() terra.StringValue {
	return terra.ReferenceAsString(aetmfr.ref.Append("source_cidr_block"))
}

// TrafficDirection returns a reference to field traffic_direction of aws_ec2_traffic_mirror_filter_rule.
func (aetmfr awsEc2TrafficMirrorFilterRuleAttributes) TrafficDirection() terra.StringValue {
	return terra.ReferenceAsString(aetmfr.ref.Append("traffic_direction"))
}

// TrafficMirrorFilterId returns a reference to field traffic_mirror_filter_id of aws_ec2_traffic_mirror_filter_rule.
func (aetmfr awsEc2TrafficMirrorFilterRuleAttributes) TrafficMirrorFilterId() terra.StringValue {
	return terra.ReferenceAsString(aetmfr.ref.Append("traffic_mirror_filter_id"))
}

func (aetmfr awsEc2TrafficMirrorFilterRuleAttributes) DestinationPortRange() terra.ListValue[DestinationPortRangeAttributes] {
	return terra.ReferenceAsList[DestinationPortRangeAttributes](aetmfr.ref.Append("destination_port_range"))
}

func (aetmfr awsEc2TrafficMirrorFilterRuleAttributes) SourcePortRange() terra.ListValue[SourcePortRangeAttributes] {
	return terra.ReferenceAsList[SourcePortRangeAttributes](aetmfr.ref.Append("source_port_range"))
}

type awsEc2TrafficMirrorFilterRuleState struct {
	Arn                   string                      `json:"arn"`
	Description           string                      `json:"description"`
	DestinationCidrBlock  string                      `json:"destination_cidr_block"`
	Id                    string                      `json:"id"`
	Protocol              float64                     `json:"protocol"`
	RuleAction            string                      `json:"rule_action"`
	RuleNumber            float64                     `json:"rule_number"`
	SourceCidrBlock       string                      `json:"source_cidr_block"`
	TrafficDirection      string                      `json:"traffic_direction"`
	TrafficMirrorFilterId string                      `json:"traffic_mirror_filter_id"`
	DestinationPortRange  []DestinationPortRangeState `json:"destination_port_range"`
	SourcePortRange       []SourcePortRangeState      `json:"source_port_range"`
}
