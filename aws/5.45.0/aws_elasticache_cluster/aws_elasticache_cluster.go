// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elasticache_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_elasticache_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *awsElasticacheClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aec *Resource) Type() string {
	return "aws_elasticache_cluster"
}

// LocalName returns the local name for [Resource].
func (aec *Resource) LocalName() string {
	return aec.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aec *Resource) Configuration() interface{} {
	return aec.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aec *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aec)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aec *Resource) Dependencies() terra.Dependencies {
	return aec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aec *Resource) LifecycleManagement() *terra.Lifecycle {
	return aec.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aec *Resource) Attributes() awsElasticacheClusterAttributes {
	return awsElasticacheClusterAttributes{ref: terra.ReferenceResource(aec)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aec *Resource) ImportState(state io.Reader) error {
	aec.state = &awsElasticacheClusterState{}
	if err := json.NewDecoder(state).Decode(aec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aec.Type(), aec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aec *Resource) State() (*awsElasticacheClusterState, bool) {
	return aec.state, aec.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aec *Resource) StateMust() *awsElasticacheClusterState {
	if aec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aec.Type(), aec.LocalName()))
	}
	return aec.state
}

// Args contains the configurations for aws_elasticache_cluster.
type Args struct {
	// ApplyImmediately: bool, optional
	ApplyImmediately terra.BoolValue `hcl:"apply_immediately,attr"`
	// AutoMinorVersionUpgrade: string, optional
	AutoMinorVersionUpgrade terra.StringValue `hcl:"auto_minor_version_upgrade,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// AzMode: string, optional
	AzMode terra.StringValue `hcl:"az_mode,attr"`
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// Engine: string, optional
	Engine terra.StringValue `hcl:"engine,attr"`
	// EngineVersion: string, optional
	EngineVersion terra.StringValue `hcl:"engine_version,attr"`
	// FinalSnapshotIdentifier: string, optional
	FinalSnapshotIdentifier terra.StringValue `hcl:"final_snapshot_identifier,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpDiscovery: string, optional
	IpDiscovery terra.StringValue `hcl:"ip_discovery,attr"`
	// MaintenanceWindow: string, optional
	MaintenanceWindow terra.StringValue `hcl:"maintenance_window,attr"`
	// NetworkType: string, optional
	NetworkType terra.StringValue `hcl:"network_type,attr"`
	// NodeType: string, optional
	NodeType terra.StringValue `hcl:"node_type,attr"`
	// NotificationTopicArn: string, optional
	NotificationTopicArn terra.StringValue `hcl:"notification_topic_arn,attr"`
	// NumCacheNodes: number, optional
	NumCacheNodes terra.NumberValue `hcl:"num_cache_nodes,attr"`
	// OutpostMode: string, optional
	OutpostMode terra.StringValue `hcl:"outpost_mode,attr"`
	// ParameterGroupName: string, optional
	ParameterGroupName terra.StringValue `hcl:"parameter_group_name,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// PreferredAvailabilityZones: list of string, optional
	PreferredAvailabilityZones terra.ListValue[terra.StringValue] `hcl:"preferred_availability_zones,attr"`
	// PreferredOutpostArn: string, optional
	PreferredOutpostArn terra.StringValue `hcl:"preferred_outpost_arn,attr"`
	// ReplicationGroupId: string, optional
	ReplicationGroupId terra.StringValue `hcl:"replication_group_id,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SnapshotArns: list of string, optional
	SnapshotArns terra.ListValue[terra.StringValue] `hcl:"snapshot_arns,attr"`
	// SnapshotName: string, optional
	SnapshotName terra.StringValue `hcl:"snapshot_name,attr"`
	// SnapshotRetentionLimit: number, optional
	SnapshotRetentionLimit terra.NumberValue `hcl:"snapshot_retention_limit,attr"`
	// SnapshotWindow: string, optional
	SnapshotWindow terra.StringValue `hcl:"snapshot_window,attr"`
	// SubnetGroupName: string, optional
	SubnetGroupName terra.StringValue `hcl:"subnet_group_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitEncryptionEnabled: bool, optional
	TransitEncryptionEnabled terra.BoolValue `hcl:"transit_encryption_enabled,attr"`
	// LogDeliveryConfiguration: min=0,max=2
	LogDeliveryConfiguration []LogDeliveryConfiguration `hcl:"log_delivery_configuration,block" validate:"min=0,max=2"`
}

type awsElasticacheClusterAttributes struct {
	ref terra.Reference
}

// ApplyImmediately returns a reference to field apply_immediately of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) ApplyImmediately() terra.BoolValue {
	return terra.ReferenceAsBool(aec.ref.Append("apply_immediately"))
}

// Arn returns a reference to field arn of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("arn"))
}

// AutoMinorVersionUpgrade returns a reference to field auto_minor_version_upgrade of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) AutoMinorVersionUpgrade() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("auto_minor_version_upgrade"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("availability_zone"))
}

// AzMode returns a reference to field az_mode of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) AzMode() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("az_mode"))
}

// ClusterAddress returns a reference to field cluster_address of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) ClusterAddress() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("cluster_address"))
}

// ClusterId returns a reference to field cluster_id of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("cluster_id"))
}

// ConfigurationEndpoint returns a reference to field configuration_endpoint of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) ConfigurationEndpoint() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("configuration_endpoint"))
}

// Engine returns a reference to field engine of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) Engine() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("engine"))
}

// EngineVersion returns a reference to field engine_version of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("engine_version"))
}

// EngineVersionActual returns a reference to field engine_version_actual of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) EngineVersionActual() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("engine_version_actual"))
}

// FinalSnapshotIdentifier returns a reference to field final_snapshot_identifier of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) FinalSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("final_snapshot_identifier"))
}

// Id returns a reference to field id of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("id"))
}

// IpDiscovery returns a reference to field ip_discovery of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) IpDiscovery() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("ip_discovery"))
}

// MaintenanceWindow returns a reference to field maintenance_window of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) MaintenanceWindow() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("maintenance_window"))
}

// NetworkType returns a reference to field network_type of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) NetworkType() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("network_type"))
}

// NodeType returns a reference to field node_type of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) NodeType() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("node_type"))
}

// NotificationTopicArn returns a reference to field notification_topic_arn of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) NotificationTopicArn() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("notification_topic_arn"))
}

// NumCacheNodes returns a reference to field num_cache_nodes of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) NumCacheNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(aec.ref.Append("num_cache_nodes"))
}

// OutpostMode returns a reference to field outpost_mode of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) OutpostMode() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("outpost_mode"))
}

// ParameterGroupName returns a reference to field parameter_group_name of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) ParameterGroupName() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("parameter_group_name"))
}

// Port returns a reference to field port of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(aec.ref.Append("port"))
}

// PreferredAvailabilityZones returns a reference to field preferred_availability_zones of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) PreferredAvailabilityZones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aec.ref.Append("preferred_availability_zones"))
}

// PreferredOutpostArn returns a reference to field preferred_outpost_arn of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) PreferredOutpostArn() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("preferred_outpost_arn"))
}

// ReplicationGroupId returns a reference to field replication_group_id of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) ReplicationGroupId() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("replication_group_id"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aec.ref.Append("security_group_ids"))
}

// SnapshotArns returns a reference to field snapshot_arns of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) SnapshotArns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aec.ref.Append("snapshot_arns"))
}

// SnapshotName returns a reference to field snapshot_name of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) SnapshotName() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("snapshot_name"))
}

// SnapshotRetentionLimit returns a reference to field snapshot_retention_limit of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) SnapshotRetentionLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(aec.ref.Append("snapshot_retention_limit"))
}

// SnapshotWindow returns a reference to field snapshot_window of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) SnapshotWindow() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("snapshot_window"))
}

// SubnetGroupName returns a reference to field subnet_group_name of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) SubnetGroupName() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("subnet_group_name"))
}

// Tags returns a reference to field tags of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aec.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aec.ref.Append("tags_all"))
}

// TransitEncryptionEnabled returns a reference to field transit_encryption_enabled of aws_elasticache_cluster.
func (aec awsElasticacheClusterAttributes) TransitEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aec.ref.Append("transit_encryption_enabled"))
}

func (aec awsElasticacheClusterAttributes) CacheNodes() terra.ListValue[CacheNodesAttributes] {
	return terra.ReferenceAsList[CacheNodesAttributes](aec.ref.Append("cache_nodes"))
}

func (aec awsElasticacheClusterAttributes) LogDeliveryConfiguration() terra.SetValue[LogDeliveryConfigurationAttributes] {
	return terra.ReferenceAsSet[LogDeliveryConfigurationAttributes](aec.ref.Append("log_delivery_configuration"))
}

type awsElasticacheClusterState struct {
	ApplyImmediately           bool                            `json:"apply_immediately"`
	Arn                        string                          `json:"arn"`
	AutoMinorVersionUpgrade    string                          `json:"auto_minor_version_upgrade"`
	AvailabilityZone           string                          `json:"availability_zone"`
	AzMode                     string                          `json:"az_mode"`
	ClusterAddress             string                          `json:"cluster_address"`
	ClusterId                  string                          `json:"cluster_id"`
	ConfigurationEndpoint      string                          `json:"configuration_endpoint"`
	Engine                     string                          `json:"engine"`
	EngineVersion              string                          `json:"engine_version"`
	EngineVersionActual        string                          `json:"engine_version_actual"`
	FinalSnapshotIdentifier    string                          `json:"final_snapshot_identifier"`
	Id                         string                          `json:"id"`
	IpDiscovery                string                          `json:"ip_discovery"`
	MaintenanceWindow          string                          `json:"maintenance_window"`
	NetworkType                string                          `json:"network_type"`
	NodeType                   string                          `json:"node_type"`
	NotificationTopicArn       string                          `json:"notification_topic_arn"`
	NumCacheNodes              float64                         `json:"num_cache_nodes"`
	OutpostMode                string                          `json:"outpost_mode"`
	ParameterGroupName         string                          `json:"parameter_group_name"`
	Port                       float64                         `json:"port"`
	PreferredAvailabilityZones []string                        `json:"preferred_availability_zones"`
	PreferredOutpostArn        string                          `json:"preferred_outpost_arn"`
	ReplicationGroupId         string                          `json:"replication_group_id"`
	SecurityGroupIds           []string                        `json:"security_group_ids"`
	SnapshotArns               []string                        `json:"snapshot_arns"`
	SnapshotName               string                          `json:"snapshot_name"`
	SnapshotRetentionLimit     float64                         `json:"snapshot_retention_limit"`
	SnapshotWindow             string                          `json:"snapshot_window"`
	SubnetGroupName            string                          `json:"subnet_group_name"`
	Tags                       map[string]string               `json:"tags"`
	TagsAll                    map[string]string               `json:"tags_all"`
	TransitEncryptionEnabled   bool                            `json:"transit_encryption_enabled"`
	CacheNodes                 []CacheNodesState               `json:"cache_nodes"`
	LogDeliveryConfiguration   []LogDeliveryConfigurationState `json:"log_delivery_configuration"`
}
