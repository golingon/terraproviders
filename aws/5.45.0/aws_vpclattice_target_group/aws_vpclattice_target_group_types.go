// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpclattice_target_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Config struct {
	// IpAddressType: string, optional
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr"`
	// LambdaEventStructureVersion: string, optional
	LambdaEventStructureVersion terra.StringValue `hcl:"lambda_event_structure_version,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// ProtocolVersion: string, optional
	ProtocolVersion terra.StringValue `hcl:"protocol_version,attr"`
	// VpcIdentifier: string, optional
	VpcIdentifier terra.StringValue `hcl:"vpc_identifier,attr"`
	// ConfigHealthCheck: optional
	HealthCheck *ConfigHealthCheck `hcl:"health_check,block"`
}

type ConfigHealthCheck struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// HealthCheckIntervalSeconds: number, optional
	HealthCheckIntervalSeconds terra.NumberValue `hcl:"health_check_interval_seconds,attr"`
	// HealthCheckTimeoutSeconds: number, optional
	HealthCheckTimeoutSeconds terra.NumberValue `hcl:"health_check_timeout_seconds,attr"`
	// HealthyThresholdCount: number, optional
	HealthyThresholdCount terra.NumberValue `hcl:"healthy_threshold_count,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// ProtocolVersion: string, optional
	ProtocolVersion terra.StringValue `hcl:"protocol_version,attr"`
	// UnhealthyThresholdCount: number, optional
	UnhealthyThresholdCount terra.NumberValue `hcl:"unhealthy_threshold_count,attr"`
	// ConfigHealthCheckMatcher: optional
	Matcher *ConfigHealthCheckMatcher `hcl:"matcher,block"`
}

type ConfigHealthCheckMatcher struct {
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConfigAttributes struct {
	ref terra.Reference
}

func (c ConfigAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigAttributes) InternalWithRef(ref terra.Reference) ConfigAttributes {
	return ConfigAttributes{ref: ref}
}

func (c ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("ip_address_type"))
}

func (c ConfigAttributes) LambdaEventStructureVersion() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("lambda_event_structure_version"))
}

func (c ConfigAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("port"))
}

func (c ConfigAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("protocol"))
}

func (c ConfigAttributes) ProtocolVersion() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("protocol_version"))
}

func (c ConfigAttributes) VpcIdentifier() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("vpc_identifier"))
}

func (c ConfigAttributes) HealthCheck() terra.ListValue[ConfigHealthCheckAttributes] {
	return terra.ReferenceAsList[ConfigHealthCheckAttributes](c.ref.Append("health_check"))
}

type ConfigHealthCheckAttributes struct {
	ref terra.Reference
}

func (hc ConfigHealthCheckAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc ConfigHealthCheckAttributes) InternalWithRef(ref terra.Reference) ConfigHealthCheckAttributes {
	return ConfigHealthCheckAttributes{ref: ref}
}

func (hc ConfigHealthCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc ConfigHealthCheckAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(hc.ref.Append("enabled"))
}

func (hc ConfigHealthCheckAttributes) HealthCheckIntervalSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("health_check_interval_seconds"))
}

func (hc ConfigHealthCheckAttributes) HealthCheckTimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("health_check_timeout_seconds"))
}

func (hc ConfigHealthCheckAttributes) HealthyThresholdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("healthy_threshold_count"))
}

func (hc ConfigHealthCheckAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("path"))
}

func (hc ConfigHealthCheckAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("port"))
}

func (hc ConfigHealthCheckAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("protocol"))
}

func (hc ConfigHealthCheckAttributes) ProtocolVersion() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("protocol_version"))
}

func (hc ConfigHealthCheckAttributes) UnhealthyThresholdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("unhealthy_threshold_count"))
}

func (hc ConfigHealthCheckAttributes) Matcher() terra.ListValue[ConfigHealthCheckMatcherAttributes] {
	return terra.ReferenceAsList[ConfigHealthCheckMatcherAttributes](hc.ref.Append("matcher"))
}

type ConfigHealthCheckMatcherAttributes struct {
	ref terra.Reference
}

func (m ConfigHealthCheckMatcherAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ConfigHealthCheckMatcherAttributes) InternalWithRef(ref terra.Reference) ConfigHealthCheckMatcherAttributes {
	return ConfigHealthCheckMatcherAttributes{ref: ref}
}

func (m ConfigHealthCheckMatcherAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m ConfigHealthCheckMatcherAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConfigState struct {
	IpAddressType               string                   `json:"ip_address_type"`
	LambdaEventStructureVersion string                   `json:"lambda_event_structure_version"`
	Port                        float64                  `json:"port"`
	Protocol                    string                   `json:"protocol"`
	ProtocolVersion             string                   `json:"protocol_version"`
	VpcIdentifier               string                   `json:"vpc_identifier"`
	HealthCheck                 []ConfigHealthCheckState `json:"health_check"`
}

type ConfigHealthCheckState struct {
	Enabled                    bool                            `json:"enabled"`
	HealthCheckIntervalSeconds float64                         `json:"health_check_interval_seconds"`
	HealthCheckTimeoutSeconds  float64                         `json:"health_check_timeout_seconds"`
	HealthyThresholdCount      float64                         `json:"healthy_threshold_count"`
	Path                       string                          `json:"path"`
	Port                       float64                         `json:"port"`
	Protocol                   string                          `json:"protocol"`
	ProtocolVersion            string                          `json:"protocol_version"`
	UnhealthyThresholdCount    float64                         `json:"unhealthy_threshold_count"`
	Matcher                    []ConfigHealthCheckMatcherState `json:"matcher"`
}

type ConfigHealthCheckMatcherState struct {
	Value string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
