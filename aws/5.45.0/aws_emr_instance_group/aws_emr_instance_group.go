// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_emr_instance_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_emr_instance_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEmrInstanceGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeig *Resource) Type() string {
	return "aws_emr_instance_group"
}

// LocalName returns the local name for [Resource].
func (aeig *Resource) LocalName() string {
	return aeig.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeig *Resource) Configuration() interface{} {
	return aeig.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeig *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeig)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeig *Resource) Dependencies() terra.Dependencies {
	return aeig.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeig *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeig.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeig *Resource) Attributes() awsEmrInstanceGroupAttributes {
	return awsEmrInstanceGroupAttributes{ref: terra.ReferenceResource(aeig)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeig *Resource) ImportState(state io.Reader) error {
	aeig.state = &awsEmrInstanceGroupState{}
	if err := json.NewDecoder(state).Decode(aeig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeig.Type(), aeig.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeig *Resource) State() (*awsEmrInstanceGroupState, bool) {
	return aeig.state, aeig.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeig *Resource) StateMust() *awsEmrInstanceGroupState {
	if aeig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeig.Type(), aeig.LocalName()))
	}
	return aeig.state
}

// Args contains the configurations for aws_emr_instance_group.
type Args struct {
	// AutoscalingPolicy: string, optional
	AutoscalingPolicy terra.StringValue `hcl:"autoscaling_policy,attr"`
	// BidPrice: string, optional
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// ConfigurationsJson: string, optional
	ConfigurationsJson terra.StringValue `hcl:"configurations_json,attr"`
	// EbsOptimized: bool, optional
	EbsOptimized terra.BoolValue `hcl:"ebs_optimized,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceCount: number, optional
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// EbsConfig: min=0
	EbsConfig []EbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type awsEmrInstanceGroupAttributes struct {
	ref terra.Reference
}

// AutoscalingPolicy returns a reference to field autoscaling_policy of aws_emr_instance_group.
func (aeig awsEmrInstanceGroupAttributes) AutoscalingPolicy() terra.StringValue {
	return terra.ReferenceAsString(aeig.ref.Append("autoscaling_policy"))
}

// BidPrice returns a reference to field bid_price of aws_emr_instance_group.
func (aeig awsEmrInstanceGroupAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(aeig.ref.Append("bid_price"))
}

// ClusterId returns a reference to field cluster_id of aws_emr_instance_group.
func (aeig awsEmrInstanceGroupAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(aeig.ref.Append("cluster_id"))
}

// ConfigurationsJson returns a reference to field configurations_json of aws_emr_instance_group.
func (aeig awsEmrInstanceGroupAttributes) ConfigurationsJson() terra.StringValue {
	return terra.ReferenceAsString(aeig.ref.Append("configurations_json"))
}

// EbsOptimized returns a reference to field ebs_optimized of aws_emr_instance_group.
func (aeig awsEmrInstanceGroupAttributes) EbsOptimized() terra.BoolValue {
	return terra.ReferenceAsBool(aeig.ref.Append("ebs_optimized"))
}

// Id returns a reference to field id of aws_emr_instance_group.
func (aeig awsEmrInstanceGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeig.ref.Append("id"))
}

// InstanceCount returns a reference to field instance_count of aws_emr_instance_group.
func (aeig awsEmrInstanceGroupAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aeig.ref.Append("instance_count"))
}

// InstanceType returns a reference to field instance_type of aws_emr_instance_group.
func (aeig awsEmrInstanceGroupAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(aeig.ref.Append("instance_type"))
}

// Name returns a reference to field name of aws_emr_instance_group.
func (aeig awsEmrInstanceGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aeig.ref.Append("name"))
}

// RunningInstanceCount returns a reference to field running_instance_count of aws_emr_instance_group.
func (aeig awsEmrInstanceGroupAttributes) RunningInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aeig.ref.Append("running_instance_count"))
}

// Status returns a reference to field status of aws_emr_instance_group.
func (aeig awsEmrInstanceGroupAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aeig.ref.Append("status"))
}

func (aeig awsEmrInstanceGroupAttributes) EbsConfig() terra.SetValue[EbsConfigAttributes] {
	return terra.ReferenceAsSet[EbsConfigAttributes](aeig.ref.Append("ebs_config"))
}

type awsEmrInstanceGroupState struct {
	AutoscalingPolicy    string           `json:"autoscaling_policy"`
	BidPrice             string           `json:"bid_price"`
	ClusterId            string           `json:"cluster_id"`
	ConfigurationsJson   string           `json:"configurations_json"`
	EbsOptimized         bool             `json:"ebs_optimized"`
	Id                   string           `json:"id"`
	InstanceCount        float64          `json:"instance_count"`
	InstanceType         string           `json:"instance_type"`
	Name                 string           `json:"name"`
	RunningInstanceCount float64          `json:"running_instance_count"`
	Status               string           `json:"status"`
	EbsConfig            []EbsConfigState `json:"ebs_config"`
}
