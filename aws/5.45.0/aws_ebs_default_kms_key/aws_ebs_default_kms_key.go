// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ebs_default_kms_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ebs_default_kms_key.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEbsDefaultKmsKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aedkk *Resource) Type() string {
	return "aws_ebs_default_kms_key"
}

// LocalName returns the local name for [Resource].
func (aedkk *Resource) LocalName() string {
	return aedkk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aedkk *Resource) Configuration() interface{} {
	return aedkk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aedkk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aedkk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aedkk *Resource) Dependencies() terra.Dependencies {
	return aedkk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aedkk *Resource) LifecycleManagement() *terra.Lifecycle {
	return aedkk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aedkk *Resource) Attributes() awsEbsDefaultKmsKeyAttributes {
	return awsEbsDefaultKmsKeyAttributes{ref: terra.ReferenceResource(aedkk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aedkk *Resource) ImportState(state io.Reader) error {
	aedkk.state = &awsEbsDefaultKmsKeyState{}
	if err := json.NewDecoder(state).Decode(aedkk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aedkk.Type(), aedkk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aedkk *Resource) State() (*awsEbsDefaultKmsKeyState, bool) {
	return aedkk.state, aedkk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aedkk *Resource) StateMust() *awsEbsDefaultKmsKeyState {
	if aedkk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aedkk.Type(), aedkk.LocalName()))
	}
	return aedkk.state
}

// Args contains the configurations for aws_ebs_default_kms_key.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyArn: string, required
	KeyArn terra.StringValue `hcl:"key_arn,attr" validate:"required"`
}

type awsEbsDefaultKmsKeyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ebs_default_kms_key.
func (aedkk awsEbsDefaultKmsKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aedkk.ref.Append("id"))
}

// KeyArn returns a reference to field key_arn of aws_ebs_default_kms_key.
func (aedkk awsEbsDefaultKmsKeyAttributes) KeyArn() terra.StringValue {
	return terra.ReferenceAsString(aedkk.ref.Append("key_arn"))
}

type awsEbsDefaultKmsKeyState struct {
	Id     string `json:"id"`
	KeyArn string `json:"key_arn"`
}
