// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_transfer_workflow

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_transfer_workflow.
type Resource struct {
	Name      string
	Args      Args
	state     *awsTransferWorkflowState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (atw *Resource) Type() string {
	return "aws_transfer_workflow"
}

// LocalName returns the local name for [Resource].
func (atw *Resource) LocalName() string {
	return atw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (atw *Resource) Configuration() interface{} {
	return atw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (atw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(atw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (atw *Resource) Dependencies() terra.Dependencies {
	return atw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (atw *Resource) LifecycleManagement() *terra.Lifecycle {
	return atw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (atw *Resource) Attributes() awsTransferWorkflowAttributes {
	return awsTransferWorkflowAttributes{ref: terra.ReferenceResource(atw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (atw *Resource) ImportState(state io.Reader) error {
	atw.state = &awsTransferWorkflowState{}
	if err := json.NewDecoder(state).Decode(atw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", atw.Type(), atw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (atw *Resource) State() (*awsTransferWorkflowState, bool) {
	return atw.state, atw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (atw *Resource) StateMust() *awsTransferWorkflowState {
	if atw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", atw.Type(), atw.LocalName()))
	}
	return atw.state
}

// Args contains the configurations for aws_transfer_workflow.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// OnExceptionSteps: min=0,max=8
	OnExceptionSteps []OnExceptionSteps `hcl:"on_exception_steps,block" validate:"min=0,max=8"`
	// Steps: min=1,max=8
	Steps []Steps `hcl:"steps,block" validate:"min=1,max=8"`
}

type awsTransferWorkflowAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_transfer_workflow.
func (atw awsTransferWorkflowAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(atw.ref.Append("arn"))
}

// Description returns a reference to field description of aws_transfer_workflow.
func (atw awsTransferWorkflowAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(atw.ref.Append("description"))
}

// Id returns a reference to field id of aws_transfer_workflow.
func (atw awsTransferWorkflowAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(atw.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_transfer_workflow.
func (atw awsTransferWorkflowAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](atw.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_transfer_workflow.
func (atw awsTransferWorkflowAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](atw.ref.Append("tags_all"))
}

func (atw awsTransferWorkflowAttributes) OnExceptionSteps() terra.ListValue[OnExceptionStepsAttributes] {
	return terra.ReferenceAsList[OnExceptionStepsAttributes](atw.ref.Append("on_exception_steps"))
}

func (atw awsTransferWorkflowAttributes) Steps() terra.ListValue[StepsAttributes] {
	return terra.ReferenceAsList[StepsAttributes](atw.ref.Append("steps"))
}

type awsTransferWorkflowState struct {
	Arn              string                  `json:"arn"`
	Description      string                  `json:"description"`
	Id               string                  `json:"id"`
	Tags             map[string]string       `json:"tags"`
	TagsAll          map[string]string       `json:"tags_all"`
	OnExceptionSteps []OnExceptionStepsState `json:"on_exception_steps"`
	Steps            []StepsState            `json:"steps"`
}
