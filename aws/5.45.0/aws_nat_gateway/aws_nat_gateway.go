// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_nat_gateway

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_nat_gateway.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNatGatewayState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ang *Resource) Type() string {
	return "aws_nat_gateway"
}

// LocalName returns the local name for [Resource].
func (ang *Resource) LocalName() string {
	return ang.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ang *Resource) Configuration() interface{} {
	return ang.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ang *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ang)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ang *Resource) Dependencies() terra.Dependencies {
	return ang.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ang *Resource) LifecycleManagement() *terra.Lifecycle {
	return ang.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ang *Resource) Attributes() awsNatGatewayAttributes {
	return awsNatGatewayAttributes{ref: terra.ReferenceResource(ang)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ang *Resource) ImportState(state io.Reader) error {
	ang.state = &awsNatGatewayState{}
	if err := json.NewDecoder(state).Decode(ang.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ang.Type(), ang.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ang *Resource) State() (*awsNatGatewayState, bool) {
	return ang.state, ang.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ang *Resource) StateMust() *awsNatGatewayState {
	if ang.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ang.Type(), ang.LocalName()))
	}
	return ang.state
}

// Args contains the configurations for aws_nat_gateway.
type Args struct {
	// AllocationId: string, optional
	AllocationId terra.StringValue `hcl:"allocation_id,attr"`
	// ConnectivityType: string, optional
	ConnectivityType terra.StringValue `hcl:"connectivity_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PrivateIp: string, optional
	PrivateIp terra.StringValue `hcl:"private_ip,attr"`
	// SecondaryAllocationIds: set of string, optional
	SecondaryAllocationIds terra.SetValue[terra.StringValue] `hcl:"secondary_allocation_ids,attr"`
	// SecondaryPrivateIpAddressCount: number, optional
	SecondaryPrivateIpAddressCount terra.NumberValue `hcl:"secondary_private_ip_address_count,attr"`
	// SecondaryPrivateIpAddresses: set of string, optional
	SecondaryPrivateIpAddresses terra.SetValue[terra.StringValue] `hcl:"secondary_private_ip_addresses,attr"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsNatGatewayAttributes struct {
	ref terra.Reference
}

// AllocationId returns a reference to field allocation_id of aws_nat_gateway.
func (ang awsNatGatewayAttributes) AllocationId() terra.StringValue {
	return terra.ReferenceAsString(ang.ref.Append("allocation_id"))
}

// AssociationId returns a reference to field association_id of aws_nat_gateway.
func (ang awsNatGatewayAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceAsString(ang.ref.Append("association_id"))
}

// ConnectivityType returns a reference to field connectivity_type of aws_nat_gateway.
func (ang awsNatGatewayAttributes) ConnectivityType() terra.StringValue {
	return terra.ReferenceAsString(ang.ref.Append("connectivity_type"))
}

// Id returns a reference to field id of aws_nat_gateway.
func (ang awsNatGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ang.ref.Append("id"))
}

// NetworkInterfaceId returns a reference to field network_interface_id of aws_nat_gateway.
func (ang awsNatGatewayAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(ang.ref.Append("network_interface_id"))
}

// PrivateIp returns a reference to field private_ip of aws_nat_gateway.
func (ang awsNatGatewayAttributes) PrivateIp() terra.StringValue {
	return terra.ReferenceAsString(ang.ref.Append("private_ip"))
}

// PublicIp returns a reference to field public_ip of aws_nat_gateway.
func (ang awsNatGatewayAttributes) PublicIp() terra.StringValue {
	return terra.ReferenceAsString(ang.ref.Append("public_ip"))
}

// SecondaryAllocationIds returns a reference to field secondary_allocation_ids of aws_nat_gateway.
func (ang awsNatGatewayAttributes) SecondaryAllocationIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ang.ref.Append("secondary_allocation_ids"))
}

// SecondaryPrivateIpAddressCount returns a reference to field secondary_private_ip_address_count of aws_nat_gateway.
func (ang awsNatGatewayAttributes) SecondaryPrivateIpAddressCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ang.ref.Append("secondary_private_ip_address_count"))
}

// SecondaryPrivateIpAddresses returns a reference to field secondary_private_ip_addresses of aws_nat_gateway.
func (ang awsNatGatewayAttributes) SecondaryPrivateIpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ang.ref.Append("secondary_private_ip_addresses"))
}

// SubnetId returns a reference to field subnet_id of aws_nat_gateway.
func (ang awsNatGatewayAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ang.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of aws_nat_gateway.
func (ang awsNatGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ang.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_nat_gateway.
func (ang awsNatGatewayAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ang.ref.Append("tags_all"))
}

func (ang awsNatGatewayAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ang.ref.Append("timeouts"))
}

type awsNatGatewayState struct {
	AllocationId                   string            `json:"allocation_id"`
	AssociationId                  string            `json:"association_id"`
	ConnectivityType               string            `json:"connectivity_type"`
	Id                             string            `json:"id"`
	NetworkInterfaceId             string            `json:"network_interface_id"`
	PrivateIp                      string            `json:"private_ip"`
	PublicIp                       string            `json:"public_ip"`
	SecondaryAllocationIds         []string          `json:"secondary_allocation_ids"`
	SecondaryPrivateIpAddressCount float64           `json:"secondary_private_ip_address_count"`
	SecondaryPrivateIpAddresses    []string          `json:"secondary_private_ip_addresses"`
	SubnetId                       string            `json:"subnet_id"`
	Tags                           map[string]string `json:"tags"`
	TagsAll                        map[string]string `json:"tags_all"`
	Timeouts                       *TimeoutsState    `json:"timeouts"`
}
