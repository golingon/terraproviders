// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elb

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_elb.
type Resource struct {
	Name      string
	Args      Args
	state     *awsElbState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ae *Resource) Type() string {
	return "aws_elb"
}

// LocalName returns the local name for [Resource].
func (ae *Resource) LocalName() string {
	return ae.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ae *Resource) Configuration() interface{} {
	return ae.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ae *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ae)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ae *Resource) Dependencies() terra.Dependencies {
	return ae.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ae *Resource) LifecycleManagement() *terra.Lifecycle {
	return ae.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ae *Resource) Attributes() awsElbAttributes {
	return awsElbAttributes{ref: terra.ReferenceResource(ae)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ae *Resource) ImportState(state io.Reader) error {
	ae.state = &awsElbState{}
	if err := json.NewDecoder(state).Decode(ae.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ae.Type(), ae.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ae *Resource) State() (*awsElbState, bool) {
	return ae.state, ae.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ae *Resource) StateMust() *awsElbState {
	if ae.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ae.Type(), ae.LocalName()))
	}
	return ae.state
}

// Args contains the configurations for aws_elb.
type Args struct {
	// AvailabilityZones: set of string, optional
	AvailabilityZones terra.SetValue[terra.StringValue] `hcl:"availability_zones,attr"`
	// ConnectionDraining: bool, optional
	ConnectionDraining terra.BoolValue `hcl:"connection_draining,attr"`
	// ConnectionDrainingTimeout: number, optional
	ConnectionDrainingTimeout terra.NumberValue `hcl:"connection_draining_timeout,attr"`
	// CrossZoneLoadBalancing: bool, optional
	CrossZoneLoadBalancing terra.BoolValue `hcl:"cross_zone_load_balancing,attr"`
	// DesyncMitigationMode: string, optional
	DesyncMitigationMode terra.StringValue `hcl:"desync_mitigation_mode,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdleTimeout: number, optional
	IdleTimeout terra.NumberValue `hcl:"idle_timeout,attr"`
	// Instances: set of string, optional
	Instances terra.SetValue[terra.StringValue] `hcl:"instances,attr"`
	// Internal: bool, optional
	Internal terra.BoolValue `hcl:"internal,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// SourceSecurityGroup: string, optional
	SourceSecurityGroup terra.StringValue `hcl:"source_security_group,attr"`
	// Subnets: set of string, optional
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// AccessLogs: optional
	AccessLogs *AccessLogs `hcl:"access_logs,block"`
	// HealthCheck: optional
	HealthCheck *HealthCheck `hcl:"health_check,block"`
	// Listener: min=1
	Listener []Listener `hcl:"listener,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsElbAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_elb.
func (ae awsElbAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("arn"))
}

// AvailabilityZones returns a reference to field availability_zones of aws_elb.
func (ae awsElbAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ae.ref.Append("availability_zones"))
}

// ConnectionDraining returns a reference to field connection_draining of aws_elb.
func (ae awsElbAttributes) ConnectionDraining() terra.BoolValue {
	return terra.ReferenceAsBool(ae.ref.Append("connection_draining"))
}

// ConnectionDrainingTimeout returns a reference to field connection_draining_timeout of aws_elb.
func (ae awsElbAttributes) ConnectionDrainingTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(ae.ref.Append("connection_draining_timeout"))
}

// CrossZoneLoadBalancing returns a reference to field cross_zone_load_balancing of aws_elb.
func (ae awsElbAttributes) CrossZoneLoadBalancing() terra.BoolValue {
	return terra.ReferenceAsBool(ae.ref.Append("cross_zone_load_balancing"))
}

// DesyncMitigationMode returns a reference to field desync_mitigation_mode of aws_elb.
func (ae awsElbAttributes) DesyncMitigationMode() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("desync_mitigation_mode"))
}

// DnsName returns a reference to field dns_name of aws_elb.
func (ae awsElbAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("dns_name"))
}

// Id returns a reference to field id of aws_elb.
func (ae awsElbAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("id"))
}

// IdleTimeout returns a reference to field idle_timeout of aws_elb.
func (ae awsElbAttributes) IdleTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(ae.ref.Append("idle_timeout"))
}

// Instances returns a reference to field instances of aws_elb.
func (ae awsElbAttributes) Instances() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ae.ref.Append("instances"))
}

// Internal returns a reference to field internal of aws_elb.
func (ae awsElbAttributes) Internal() terra.BoolValue {
	return terra.ReferenceAsBool(ae.ref.Append("internal"))
}

// Name returns a reference to field name of aws_elb.
func (ae awsElbAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_elb.
func (ae awsElbAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("name_prefix"))
}

// SecurityGroups returns a reference to field security_groups of aws_elb.
func (ae awsElbAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ae.ref.Append("security_groups"))
}

// SourceSecurityGroup returns a reference to field source_security_group of aws_elb.
func (ae awsElbAttributes) SourceSecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("source_security_group"))
}

// SourceSecurityGroupId returns a reference to field source_security_group_id of aws_elb.
func (ae awsElbAttributes) SourceSecurityGroupId() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("source_security_group_id"))
}

// Subnets returns a reference to field subnets of aws_elb.
func (ae awsElbAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ae.ref.Append("subnets"))
}

// Tags returns a reference to field tags of aws_elb.
func (ae awsElbAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ae.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_elb.
func (ae awsElbAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ae.ref.Append("tags_all"))
}

// ZoneId returns a reference to field zone_id of aws_elb.
func (ae awsElbAttributes) ZoneId() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("zone_id"))
}

func (ae awsElbAttributes) AccessLogs() terra.ListValue[AccessLogsAttributes] {
	return terra.ReferenceAsList[AccessLogsAttributes](ae.ref.Append("access_logs"))
}

func (ae awsElbAttributes) HealthCheck() terra.ListValue[HealthCheckAttributes] {
	return terra.ReferenceAsList[HealthCheckAttributes](ae.ref.Append("health_check"))
}

func (ae awsElbAttributes) Listener() terra.SetValue[ListenerAttributes] {
	return terra.ReferenceAsSet[ListenerAttributes](ae.ref.Append("listener"))
}

func (ae awsElbAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ae.ref.Append("timeouts"))
}

type awsElbState struct {
	Arn                       string             `json:"arn"`
	AvailabilityZones         []string           `json:"availability_zones"`
	ConnectionDraining        bool               `json:"connection_draining"`
	ConnectionDrainingTimeout float64            `json:"connection_draining_timeout"`
	CrossZoneLoadBalancing    bool               `json:"cross_zone_load_balancing"`
	DesyncMitigationMode      string             `json:"desync_mitigation_mode"`
	DnsName                   string             `json:"dns_name"`
	Id                        string             `json:"id"`
	IdleTimeout               float64            `json:"idle_timeout"`
	Instances                 []string           `json:"instances"`
	Internal                  bool               `json:"internal"`
	Name                      string             `json:"name"`
	NamePrefix                string             `json:"name_prefix"`
	SecurityGroups            []string           `json:"security_groups"`
	SourceSecurityGroup       string             `json:"source_security_group"`
	SourceSecurityGroupId     string             `json:"source_security_group_id"`
	Subnets                   []string           `json:"subnets"`
	Tags                      map[string]string  `json:"tags"`
	TagsAll                   map[string]string  `json:"tags_all"`
	ZoneId                    string             `json:"zone_id"`
	AccessLogs                []AccessLogsState  `json:"access_logs"`
	HealthCheck               []HealthCheckState `json:"health_check"`
	Listener                  []ListenerState    `json:"listener"`
	Timeouts                  *TimeoutsState     `json:"timeouts"`
}
