// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_api_gateway_account

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_api_gateway_account.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApiGatewayAccountState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaga *Resource) Type() string {
	return "aws_api_gateway_account"
}

// LocalName returns the local name for [Resource].
func (aaga *Resource) LocalName() string {
	return aaga.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaga *Resource) Configuration() interface{} {
	return aaga.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaga *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaga)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaga *Resource) Dependencies() terra.Dependencies {
	return aaga.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaga *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaga.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaga *Resource) Attributes() awsApiGatewayAccountAttributes {
	return awsApiGatewayAccountAttributes{ref: terra.ReferenceResource(aaga)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaga *Resource) ImportState(state io.Reader) error {
	aaga.state = &awsApiGatewayAccountState{}
	if err := json.NewDecoder(state).Decode(aaga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaga.Type(), aaga.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaga *Resource) State() (*awsApiGatewayAccountState, bool) {
	return aaga.state, aaga.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaga *Resource) StateMust() *awsApiGatewayAccountState {
	if aaga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaga.Type(), aaga.LocalName()))
	}
	return aaga.state
}

// Args contains the configurations for aws_api_gateway_account.
type Args struct {
	// CloudwatchRoleArn: string, optional
	CloudwatchRoleArn terra.StringValue `hcl:"cloudwatch_role_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsApiGatewayAccountAttributes struct {
	ref terra.Reference
}

// ApiKeyVersion returns a reference to field api_key_version of aws_api_gateway_account.
func (aaga awsApiGatewayAccountAttributes) ApiKeyVersion() terra.StringValue {
	return terra.ReferenceAsString(aaga.ref.Append("api_key_version"))
}

// CloudwatchRoleArn returns a reference to field cloudwatch_role_arn of aws_api_gateway_account.
func (aaga awsApiGatewayAccountAttributes) CloudwatchRoleArn() terra.StringValue {
	return terra.ReferenceAsString(aaga.ref.Append("cloudwatch_role_arn"))
}

// Features returns a reference to field features of aws_api_gateway_account.
func (aaga awsApiGatewayAccountAttributes) Features() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aaga.ref.Append("features"))
}

// Id returns a reference to field id of aws_api_gateway_account.
func (aaga awsApiGatewayAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaga.ref.Append("id"))
}

func (aaga awsApiGatewayAccountAttributes) ThrottleSettings() terra.ListValue[ThrottleSettingsAttributes] {
	return terra.ReferenceAsList[ThrottleSettingsAttributes](aaga.ref.Append("throttle_settings"))
}

type awsApiGatewayAccountState struct {
	ApiKeyVersion     string                  `json:"api_key_version"`
	CloudwatchRoleArn string                  `json:"cloudwatch_role_arn"`
	Features          []string                `json:"features"`
	Id                string                  `json:"id"`
	ThrottleSettings  []ThrottleSettingsState `json:"throttle_settings"`
}
