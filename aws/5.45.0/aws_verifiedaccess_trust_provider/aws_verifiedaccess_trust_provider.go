// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_verifiedaccess_trust_provider

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_verifiedaccess_trust_provider.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVerifiedaccessTrustProviderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avtp *Resource) Type() string {
	return "aws_verifiedaccess_trust_provider"
}

// LocalName returns the local name for [Resource].
func (avtp *Resource) LocalName() string {
	return avtp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avtp *Resource) Configuration() interface{} {
	return avtp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avtp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avtp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avtp *Resource) Dependencies() terra.Dependencies {
	return avtp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avtp *Resource) LifecycleManagement() *terra.Lifecycle {
	return avtp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avtp *Resource) Attributes() awsVerifiedaccessTrustProviderAttributes {
	return awsVerifiedaccessTrustProviderAttributes{ref: terra.ReferenceResource(avtp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avtp *Resource) ImportState(state io.Reader) error {
	avtp.state = &awsVerifiedaccessTrustProviderState{}
	if err := json.NewDecoder(state).Decode(avtp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avtp.Type(), avtp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avtp *Resource) State() (*awsVerifiedaccessTrustProviderState, bool) {
	return avtp.state, avtp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avtp *Resource) StateMust() *awsVerifiedaccessTrustProviderState {
	if avtp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avtp.Type(), avtp.LocalName()))
	}
	return avtp.state
}

// Args contains the configurations for aws_verifiedaccess_trust_provider.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DeviceTrustProviderType: string, optional
	DeviceTrustProviderType terra.StringValue `hcl:"device_trust_provider_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyReferenceName: string, required
	PolicyReferenceName terra.StringValue `hcl:"policy_reference_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TrustProviderType: string, required
	TrustProviderType terra.StringValue `hcl:"trust_provider_type,attr" validate:"required"`
	// UserTrustProviderType: string, optional
	UserTrustProviderType terra.StringValue `hcl:"user_trust_provider_type,attr"`
	// DeviceOptions: optional
	DeviceOptions *DeviceOptions `hcl:"device_options,block"`
	// OidcOptions: optional
	OidcOptions *OidcOptions `hcl:"oidc_options,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVerifiedaccessTrustProviderAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_verifiedaccess_trust_provider.
func (avtp awsVerifiedaccessTrustProviderAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(avtp.ref.Append("description"))
}

// DeviceTrustProviderType returns a reference to field device_trust_provider_type of aws_verifiedaccess_trust_provider.
func (avtp awsVerifiedaccessTrustProviderAttributes) DeviceTrustProviderType() terra.StringValue {
	return terra.ReferenceAsString(avtp.ref.Append("device_trust_provider_type"))
}

// Id returns a reference to field id of aws_verifiedaccess_trust_provider.
func (avtp awsVerifiedaccessTrustProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avtp.ref.Append("id"))
}

// PolicyReferenceName returns a reference to field policy_reference_name of aws_verifiedaccess_trust_provider.
func (avtp awsVerifiedaccessTrustProviderAttributes) PolicyReferenceName() terra.StringValue {
	return terra.ReferenceAsString(avtp.ref.Append("policy_reference_name"))
}

// Tags returns a reference to field tags of aws_verifiedaccess_trust_provider.
func (avtp awsVerifiedaccessTrustProviderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avtp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_verifiedaccess_trust_provider.
func (avtp awsVerifiedaccessTrustProviderAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avtp.ref.Append("tags_all"))
}

// TrustProviderType returns a reference to field trust_provider_type of aws_verifiedaccess_trust_provider.
func (avtp awsVerifiedaccessTrustProviderAttributes) TrustProviderType() terra.StringValue {
	return terra.ReferenceAsString(avtp.ref.Append("trust_provider_type"))
}

// UserTrustProviderType returns a reference to field user_trust_provider_type of aws_verifiedaccess_trust_provider.
func (avtp awsVerifiedaccessTrustProviderAttributes) UserTrustProviderType() terra.StringValue {
	return terra.ReferenceAsString(avtp.ref.Append("user_trust_provider_type"))
}

func (avtp awsVerifiedaccessTrustProviderAttributes) DeviceOptions() terra.ListValue[DeviceOptionsAttributes] {
	return terra.ReferenceAsList[DeviceOptionsAttributes](avtp.ref.Append("device_options"))
}

func (avtp awsVerifiedaccessTrustProviderAttributes) OidcOptions() terra.ListValue[OidcOptionsAttributes] {
	return terra.ReferenceAsList[OidcOptionsAttributes](avtp.ref.Append("oidc_options"))
}

func (avtp awsVerifiedaccessTrustProviderAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avtp.ref.Append("timeouts"))
}

type awsVerifiedaccessTrustProviderState struct {
	Description             string               `json:"description"`
	DeviceTrustProviderType string               `json:"device_trust_provider_type"`
	Id                      string               `json:"id"`
	PolicyReferenceName     string               `json:"policy_reference_name"`
	Tags                    map[string]string    `json:"tags"`
	TagsAll                 map[string]string    `json:"tags_all"`
	TrustProviderType       string               `json:"trust_provider_type"`
	UserTrustProviderType   string               `json:"user_trust_provider_type"`
	DeviceOptions           []DeviceOptionsState `json:"device_options"`
	OidcOptions             []OidcOptionsState   `json:"oidc_options"`
	Timeouts                *TimeoutsState       `json:"timeouts"`
}
