// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_efs_backup_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_efs_backup_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEfsBackupPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aebp *Resource) Type() string {
	return "aws_efs_backup_policy"
}

// LocalName returns the local name for [Resource].
func (aebp *Resource) LocalName() string {
	return aebp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aebp *Resource) Configuration() interface{} {
	return aebp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aebp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aebp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aebp *Resource) Dependencies() terra.Dependencies {
	return aebp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aebp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aebp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aebp *Resource) Attributes() awsEfsBackupPolicyAttributes {
	return awsEfsBackupPolicyAttributes{ref: terra.ReferenceResource(aebp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aebp *Resource) ImportState(state io.Reader) error {
	aebp.state = &awsEfsBackupPolicyState{}
	if err := json.NewDecoder(state).Decode(aebp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aebp.Type(), aebp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aebp *Resource) State() (*awsEfsBackupPolicyState, bool) {
	return aebp.state, aebp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aebp *Resource) StateMust() *awsEfsBackupPolicyState {
	if aebp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aebp.Type(), aebp.LocalName()))
	}
	return aebp.state
}

// Args contains the configurations for aws_efs_backup_policy.
type Args struct {
	// FileSystemId: string, required
	FileSystemId terra.StringValue `hcl:"file_system_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// BackupPolicy: required
	BackupPolicy *BackupPolicy `hcl:"backup_policy,block" validate:"required"`
}

type awsEfsBackupPolicyAttributes struct {
	ref terra.Reference
}

// FileSystemId returns a reference to field file_system_id of aws_efs_backup_policy.
func (aebp awsEfsBackupPolicyAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceAsString(aebp.ref.Append("file_system_id"))
}

// Id returns a reference to field id of aws_efs_backup_policy.
func (aebp awsEfsBackupPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aebp.ref.Append("id"))
}

func (aebp awsEfsBackupPolicyAttributes) BackupPolicy() terra.ListValue[BackupPolicyAttributes] {
	return terra.ReferenceAsList[BackupPolicyAttributes](aebp.ref.Append("backup_policy"))
}

type awsEfsBackupPolicyState struct {
	FileSystemId string              `json:"file_system_id"`
	Id           string              `json:"id"`
	BackupPolicy []BackupPolicyState `json:"backup_policy"`
}
