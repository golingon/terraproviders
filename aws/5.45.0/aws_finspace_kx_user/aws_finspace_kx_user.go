// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_finspace_kx_user

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_finspace_kx_user.
type Resource struct {
	Name      string
	Args      Args
	state     *awsFinspaceKxUserState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (afku *Resource) Type() string {
	return "aws_finspace_kx_user"
}

// LocalName returns the local name for [Resource].
func (afku *Resource) LocalName() string {
	return afku.Name
}

// Configuration returns the configuration (args) for [Resource].
func (afku *Resource) Configuration() interface{} {
	return afku.Args
}

// DependOn is used for other resources to depend on [Resource].
func (afku *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(afku)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (afku *Resource) Dependencies() terra.Dependencies {
	return afku.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (afku *Resource) LifecycleManagement() *terra.Lifecycle {
	return afku.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (afku *Resource) Attributes() awsFinspaceKxUserAttributes {
	return awsFinspaceKxUserAttributes{ref: terra.ReferenceResource(afku)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (afku *Resource) ImportState(state io.Reader) error {
	afku.state = &awsFinspaceKxUserState{}
	if err := json.NewDecoder(state).Decode(afku.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afku.Type(), afku.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (afku *Resource) State() (*awsFinspaceKxUserState, bool) {
	return afku.state, afku.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (afku *Resource) StateMust() *awsFinspaceKxUserState {
	if afku.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afku.Type(), afku.LocalName()))
	}
	return afku.state
}

// Args contains the configurations for aws_finspace_kx_user.
type Args struct {
	// EnvironmentId: string, required
	EnvironmentId terra.StringValue `hcl:"environment_id,attr" validate:"required"`
	// IamRole: string, required
	IamRole terra.StringValue `hcl:"iam_role,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsFinspaceKxUserAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_finspace_kx_user.
func (afku awsFinspaceKxUserAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(afku.ref.Append("arn"))
}

// EnvironmentId returns a reference to field environment_id of aws_finspace_kx_user.
func (afku awsFinspaceKxUserAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(afku.ref.Append("environment_id"))
}

// IamRole returns a reference to field iam_role of aws_finspace_kx_user.
func (afku awsFinspaceKxUserAttributes) IamRole() terra.StringValue {
	return terra.ReferenceAsString(afku.ref.Append("iam_role"))
}

// Id returns a reference to field id of aws_finspace_kx_user.
func (afku awsFinspaceKxUserAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(afku.ref.Append("id"))
}

// Name returns a reference to field name of aws_finspace_kx_user.
func (afku awsFinspaceKxUserAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(afku.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_finspace_kx_user.
func (afku awsFinspaceKxUserAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afku.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_finspace_kx_user.
func (afku awsFinspaceKxUserAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afku.ref.Append("tags_all"))
}

func (afku awsFinspaceKxUserAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](afku.ref.Append("timeouts"))
}

type awsFinspaceKxUserState struct {
	Arn           string            `json:"arn"`
	EnvironmentId string            `json:"environment_id"`
	IamRole       string            `json:"iam_role"`
	Id            string            `json:"id"`
	Name          string            `json:"name"`
	Tags          map[string]string `json:"tags"`
	TagsAll       map[string]string `json:"tags_all"`
	Timeouts      *TimeoutsState    `json:"timeouts"`
}
