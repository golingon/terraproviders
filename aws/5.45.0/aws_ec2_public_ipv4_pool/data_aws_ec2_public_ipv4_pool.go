// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_public_ipv4_pool

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_ec2_public_ipv4_pool.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aepip *DataSource) DataSource() string {
	return "aws_ec2_public_ipv4_pool"
}

// LocalName returns the local name for [DataSource].
func (aepip *DataSource) LocalName() string {
	return aepip.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aepip *DataSource) Configuration() interface{} {
	return aepip.Args
}

// Attributes returns the attributes for [DataSource].
func (aepip *DataSource) Attributes() dataAwsEc2PublicIpv4PoolAttributes {
	return dataAwsEc2PublicIpv4PoolAttributes{ref: terra.ReferenceDataSource(aepip)}
}

// DataArgs contains the configurations for aws_ec2_public_ipv4_pool.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PoolId: string, required
	PoolId terra.StringValue `hcl:"pool_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type dataAwsEc2PublicIpv4PoolAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_ec2_public_ipv4_pool.
func (aepip dataAwsEc2PublicIpv4PoolAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aepip.ref.Append("description"))
}

// Id returns a reference to field id of aws_ec2_public_ipv4_pool.
func (aepip dataAwsEc2PublicIpv4PoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aepip.ref.Append("id"))
}

// NetworkBorderGroup returns a reference to field network_border_group of aws_ec2_public_ipv4_pool.
func (aepip dataAwsEc2PublicIpv4PoolAttributes) NetworkBorderGroup() terra.StringValue {
	return terra.ReferenceAsString(aepip.ref.Append("network_border_group"))
}

// PoolId returns a reference to field pool_id of aws_ec2_public_ipv4_pool.
func (aepip dataAwsEc2PublicIpv4PoolAttributes) PoolId() terra.StringValue {
	return terra.ReferenceAsString(aepip.ref.Append("pool_id"))
}

// Tags returns a reference to field tags of aws_ec2_public_ipv4_pool.
func (aepip dataAwsEc2PublicIpv4PoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aepip.ref.Append("tags"))
}

// TotalAddressCount returns a reference to field total_address_count of aws_ec2_public_ipv4_pool.
func (aepip dataAwsEc2PublicIpv4PoolAttributes) TotalAddressCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aepip.ref.Append("total_address_count"))
}

// TotalAvailableAddressCount returns a reference to field total_available_address_count of aws_ec2_public_ipv4_pool.
func (aepip dataAwsEc2PublicIpv4PoolAttributes) TotalAvailableAddressCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aepip.ref.Append("total_available_address_count"))
}

func (aepip dataAwsEc2PublicIpv4PoolAttributes) PoolAddressRanges() terra.ListValue[DataPoolAddressRangesAttributes] {
	return terra.ReferenceAsList[DataPoolAddressRangesAttributes](aepip.ref.Append("pool_address_ranges"))
}
