// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshiftserverless_namespace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_redshiftserverless_namespace.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRedshiftserverlessNamespaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arn *Resource) Type() string {
	return "aws_redshiftserverless_namespace"
}

// LocalName returns the local name for [Resource].
func (arn *Resource) LocalName() string {
	return arn.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arn *Resource) Configuration() interface{} {
	return arn.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arn *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arn)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arn *Resource) Dependencies() terra.Dependencies {
	return arn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arn *Resource) LifecycleManagement() *terra.Lifecycle {
	return arn.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arn *Resource) Attributes() awsRedshiftserverlessNamespaceAttributes {
	return awsRedshiftserverlessNamespaceAttributes{ref: terra.ReferenceResource(arn)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arn *Resource) ImportState(state io.Reader) error {
	arn.state = &awsRedshiftserverlessNamespaceState{}
	if err := json.NewDecoder(state).Decode(arn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arn.Type(), arn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arn *Resource) State() (*awsRedshiftserverlessNamespaceState, bool) {
	return arn.state, arn.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arn *Resource) StateMust() *awsRedshiftserverlessNamespaceState {
	if arn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arn.Type(), arn.LocalName()))
	}
	return arn.state
}

// Args contains the configurations for aws_redshiftserverless_namespace.
type Args struct {
	// AdminPasswordSecretKmsKeyId: string, optional
	AdminPasswordSecretKmsKeyId terra.StringValue `hcl:"admin_password_secret_kms_key_id,attr"`
	// AdminUserPassword: string, optional
	AdminUserPassword terra.StringValue `hcl:"admin_user_password,attr"`
	// AdminUsername: string, optional
	AdminUsername terra.StringValue `hcl:"admin_username,attr"`
	// DbName: string, optional
	DbName terra.StringValue `hcl:"db_name,attr"`
	// DefaultIamRoleArn: string, optional
	DefaultIamRoleArn terra.StringValue `hcl:"default_iam_role_arn,attr"`
	// IamRoles: set of string, optional
	IamRoles terra.SetValue[terra.StringValue] `hcl:"iam_roles,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// LogExports: set of string, optional
	LogExports terra.SetValue[terra.StringValue] `hcl:"log_exports,attr"`
	// ManageAdminPassword: bool, optional
	ManageAdminPassword terra.BoolValue `hcl:"manage_admin_password,attr"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsRedshiftserverlessNamespaceAttributes struct {
	ref terra.Reference
}

// AdminPasswordSecretArn returns a reference to field admin_password_secret_arn of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) AdminPasswordSecretArn() terra.StringValue {
	return terra.ReferenceAsString(arn.ref.Append("admin_password_secret_arn"))
}

// AdminPasswordSecretKmsKeyId returns a reference to field admin_password_secret_kms_key_id of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) AdminPasswordSecretKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(arn.ref.Append("admin_password_secret_kms_key_id"))
}

// AdminUserPassword returns a reference to field admin_user_password of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) AdminUserPassword() terra.StringValue {
	return terra.ReferenceAsString(arn.ref.Append("admin_user_password"))
}

// AdminUsername returns a reference to field admin_username of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(arn.ref.Append("admin_username"))
}

// Arn returns a reference to field arn of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arn.ref.Append("arn"))
}

// DbName returns a reference to field db_name of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) DbName() terra.StringValue {
	return terra.ReferenceAsString(arn.ref.Append("db_name"))
}

// DefaultIamRoleArn returns a reference to field default_iam_role_arn of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) DefaultIamRoleArn() terra.StringValue {
	return terra.ReferenceAsString(arn.ref.Append("default_iam_role_arn"))
}

// IamRoles returns a reference to field iam_roles of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) IamRoles() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arn.ref.Append("iam_roles"))
}

// Id returns a reference to field id of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arn.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(arn.ref.Append("kms_key_id"))
}

// LogExports returns a reference to field log_exports of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) LogExports() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arn.ref.Append("log_exports"))
}

// ManageAdminPassword returns a reference to field manage_admin_password of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) ManageAdminPassword() terra.BoolValue {
	return terra.ReferenceAsBool(arn.ref.Append("manage_admin_password"))
}

// NamespaceId returns a reference to field namespace_id of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceAsString(arn.ref.Append("namespace_id"))
}

// NamespaceName returns a reference to field namespace_name of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceAsString(arn.ref.Append("namespace_name"))
}

// Tags returns a reference to field tags of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arn.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_redshiftserverless_namespace.
func (arn awsRedshiftserverlessNamespaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arn.ref.Append("tags_all"))
}

type awsRedshiftserverlessNamespaceState struct {
	AdminPasswordSecretArn      string            `json:"admin_password_secret_arn"`
	AdminPasswordSecretKmsKeyId string            `json:"admin_password_secret_kms_key_id"`
	AdminUserPassword           string            `json:"admin_user_password"`
	AdminUsername               string            `json:"admin_username"`
	Arn                         string            `json:"arn"`
	DbName                      string            `json:"db_name"`
	DefaultIamRoleArn           string            `json:"default_iam_role_arn"`
	IamRoles                    []string          `json:"iam_roles"`
	Id                          string            `json:"id"`
	KmsKeyId                    string            `json:"kms_key_id"`
	LogExports                  []string          `json:"log_exports"`
	ManageAdminPassword         bool              `json:"manage_admin_password"`
	NamespaceId                 string            `json:"namespace_id"`
	NamespaceName               string            `json:"namespace_name"`
	Tags                        map[string]string `json:"tags"`
	TagsAll                     map[string]string `json:"tags_all"`
}
