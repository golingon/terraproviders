// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshiftserverless_snapshot

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_redshiftserverless_snapshot.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRedshiftserverlessSnapshotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ars *Resource) Type() string {
	return "aws_redshiftserverless_snapshot"
}

// LocalName returns the local name for [Resource].
func (ars *Resource) LocalName() string {
	return ars.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ars *Resource) Configuration() interface{} {
	return ars.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ars *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ars)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ars *Resource) Dependencies() terra.Dependencies {
	return ars.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ars *Resource) LifecycleManagement() *terra.Lifecycle {
	return ars.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ars *Resource) Attributes() awsRedshiftserverlessSnapshotAttributes {
	return awsRedshiftserverlessSnapshotAttributes{ref: terra.ReferenceResource(ars)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ars *Resource) ImportState(state io.Reader) error {
	ars.state = &awsRedshiftserverlessSnapshotState{}
	if err := json.NewDecoder(state).Decode(ars.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ars.Type(), ars.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ars *Resource) State() (*awsRedshiftserverlessSnapshotState, bool) {
	return ars.state, ars.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ars *Resource) StateMust() *awsRedshiftserverlessSnapshotState {
	if ars.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ars.Type(), ars.LocalName()))
	}
	return ars.state
}

// Args contains the configurations for aws_redshiftserverless_snapshot.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// RetentionPeriod: number, optional
	RetentionPeriod terra.NumberValue `hcl:"retention_period,attr"`
	// SnapshotName: string, required
	SnapshotName terra.StringValue `hcl:"snapshot_name,attr" validate:"required"`
}

type awsRedshiftserverlessSnapshotAttributes struct {
	ref terra.Reference
}

// AccountsWithProvisionedRestoreAccess returns a reference to field accounts_with_provisioned_restore_access of aws_redshiftserverless_snapshot.
func (ars awsRedshiftserverlessSnapshotAttributes) AccountsWithProvisionedRestoreAccess() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ars.ref.Append("accounts_with_provisioned_restore_access"))
}

// AccountsWithRestoreAccess returns a reference to field accounts_with_restore_access of aws_redshiftserverless_snapshot.
func (ars awsRedshiftserverlessSnapshotAttributes) AccountsWithRestoreAccess() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ars.ref.Append("accounts_with_restore_access"))
}

// AdminUsername returns a reference to field admin_username of aws_redshiftserverless_snapshot.
func (ars awsRedshiftserverlessSnapshotAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("admin_username"))
}

// Arn returns a reference to field arn of aws_redshiftserverless_snapshot.
func (ars awsRedshiftserverlessSnapshotAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("arn"))
}

// Id returns a reference to field id of aws_redshiftserverless_snapshot.
func (ars awsRedshiftserverlessSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_redshiftserverless_snapshot.
func (ars awsRedshiftserverlessSnapshotAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("kms_key_id"))
}

// NamespaceArn returns a reference to field namespace_arn of aws_redshiftserverless_snapshot.
func (ars awsRedshiftserverlessSnapshotAttributes) NamespaceArn() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("namespace_arn"))
}

// NamespaceName returns a reference to field namespace_name of aws_redshiftserverless_snapshot.
func (ars awsRedshiftserverlessSnapshotAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("namespace_name"))
}

// OwnerAccount returns a reference to field owner_account of aws_redshiftserverless_snapshot.
func (ars awsRedshiftserverlessSnapshotAttributes) OwnerAccount() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("owner_account"))
}

// RetentionPeriod returns a reference to field retention_period of aws_redshiftserverless_snapshot.
func (ars awsRedshiftserverlessSnapshotAttributes) RetentionPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(ars.ref.Append("retention_period"))
}

// SnapshotName returns a reference to field snapshot_name of aws_redshiftserverless_snapshot.
func (ars awsRedshiftserverlessSnapshotAttributes) SnapshotName() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("snapshot_name"))
}

type awsRedshiftserverlessSnapshotState struct {
	AccountsWithProvisionedRestoreAccess []string `json:"accounts_with_provisioned_restore_access"`
	AccountsWithRestoreAccess            []string `json:"accounts_with_restore_access"`
	AdminUsername                        string   `json:"admin_username"`
	Arn                                  string   `json:"arn"`
	Id                                   string   `json:"id"`
	KmsKeyId                             string   `json:"kms_key_id"`
	NamespaceArn                         string   `json:"namespace_arn"`
	NamespaceName                        string   `json:"namespace_name"`
	OwnerAccount                         string   `json:"owner_account"`
	RetentionPeriod                      float64  `json:"retention_period"`
	SnapshotName                         string   `json:"snapshot_name"`
}
