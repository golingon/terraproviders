// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_user_group_membership

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iam_user_group_membership.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIamUserGroupMembershipState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aiugm *Resource) Type() string {
	return "aws_iam_user_group_membership"
}

// LocalName returns the local name for [Resource].
func (aiugm *Resource) LocalName() string {
	return aiugm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aiugm *Resource) Configuration() interface{} {
	return aiugm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aiugm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aiugm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aiugm *Resource) Dependencies() terra.Dependencies {
	return aiugm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aiugm *Resource) LifecycleManagement() *terra.Lifecycle {
	return aiugm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aiugm *Resource) Attributes() awsIamUserGroupMembershipAttributes {
	return awsIamUserGroupMembershipAttributes{ref: terra.ReferenceResource(aiugm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aiugm *Resource) ImportState(state io.Reader) error {
	aiugm.state = &awsIamUserGroupMembershipState{}
	if err := json.NewDecoder(state).Decode(aiugm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiugm.Type(), aiugm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aiugm *Resource) State() (*awsIamUserGroupMembershipState, bool) {
	return aiugm.state, aiugm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aiugm *Resource) StateMust() *awsIamUserGroupMembershipState {
	if aiugm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiugm.Type(), aiugm.LocalName()))
	}
	return aiugm.state
}

// Args contains the configurations for aws_iam_user_group_membership.
type Args struct {
	// Groups: set of string, required
	Groups terra.SetValue[terra.StringValue] `hcl:"groups,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// User: string, required
	User terra.StringValue `hcl:"user,attr" validate:"required"`
}

type awsIamUserGroupMembershipAttributes struct {
	ref terra.Reference
}

// Groups returns a reference to field groups of aws_iam_user_group_membership.
func (aiugm awsIamUserGroupMembershipAttributes) Groups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aiugm.ref.Append("groups"))
}

// Id returns a reference to field id of aws_iam_user_group_membership.
func (aiugm awsIamUserGroupMembershipAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiugm.ref.Append("id"))
}

// User returns a reference to field user of aws_iam_user_group_membership.
func (aiugm awsIamUserGroupMembershipAttributes) User() terra.StringValue {
	return terra.ReferenceAsString(aiugm.ref.Append("user"))
}

type awsIamUserGroupMembershipState struct {
	Groups []string `json:"groups"`
	Id     string   `json:"id"`
	User   string   `json:"user"`
}
