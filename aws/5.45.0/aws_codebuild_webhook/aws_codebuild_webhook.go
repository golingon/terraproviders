// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codebuild_webhook

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codebuild_webhook.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodebuildWebhookState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acw *Resource) Type() string {
	return "aws_codebuild_webhook"
}

// LocalName returns the local name for [Resource].
func (acw *Resource) LocalName() string {
	return acw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acw *Resource) Configuration() interface{} {
	return acw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acw *Resource) Dependencies() terra.Dependencies {
	return acw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acw *Resource) LifecycleManagement() *terra.Lifecycle {
	return acw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acw *Resource) Attributes() awsCodebuildWebhookAttributes {
	return awsCodebuildWebhookAttributes{ref: terra.ReferenceResource(acw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acw *Resource) ImportState(state io.Reader) error {
	acw.state = &awsCodebuildWebhookState{}
	if err := json.NewDecoder(state).Decode(acw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acw.Type(), acw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acw *Resource) State() (*awsCodebuildWebhookState, bool) {
	return acw.state, acw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acw *Resource) StateMust() *awsCodebuildWebhookState {
	if acw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acw.Type(), acw.LocalName()))
	}
	return acw.state
}

// Args contains the configurations for aws_codebuild_webhook.
type Args struct {
	// BranchFilter: string, optional
	BranchFilter terra.StringValue `hcl:"branch_filter,attr"`
	// BuildType: string, optional
	BuildType terra.StringValue `hcl:"build_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProjectName: string, required
	ProjectName terra.StringValue `hcl:"project_name,attr" validate:"required"`
	// FilterGroup: min=0
	FilterGroup []FilterGroup `hcl:"filter_group,block" validate:"min=0"`
}

type awsCodebuildWebhookAttributes struct {
	ref terra.Reference
}

// BranchFilter returns a reference to field branch_filter of aws_codebuild_webhook.
func (acw awsCodebuildWebhookAttributes) BranchFilter() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("branch_filter"))
}

// BuildType returns a reference to field build_type of aws_codebuild_webhook.
func (acw awsCodebuildWebhookAttributes) BuildType() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("build_type"))
}

// Id returns a reference to field id of aws_codebuild_webhook.
func (acw awsCodebuildWebhookAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("id"))
}

// PayloadUrl returns a reference to field payload_url of aws_codebuild_webhook.
func (acw awsCodebuildWebhookAttributes) PayloadUrl() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("payload_url"))
}

// ProjectName returns a reference to field project_name of aws_codebuild_webhook.
func (acw awsCodebuildWebhookAttributes) ProjectName() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("project_name"))
}

// Secret returns a reference to field secret of aws_codebuild_webhook.
func (acw awsCodebuildWebhookAttributes) Secret() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("secret"))
}

// Url returns a reference to field url of aws_codebuild_webhook.
func (acw awsCodebuildWebhookAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(acw.ref.Append("url"))
}

func (acw awsCodebuildWebhookAttributes) FilterGroup() terra.SetValue[FilterGroupAttributes] {
	return terra.ReferenceAsSet[FilterGroupAttributes](acw.ref.Append("filter_group"))
}

type awsCodebuildWebhookState struct {
	BranchFilter string             `json:"branch_filter"`
	BuildType    string             `json:"build_type"`
	Id           string             `json:"id"`
	PayloadUrl   string             `json:"payload_url"`
	ProjectName  string             `json:"project_name"`
	Secret       string             `json:"secret"`
	Url          string             `json:"url"`
	FilterGroup  []FilterGroupState `json:"filter_group"`
}
