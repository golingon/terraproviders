// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_serverlessapplicationrepository_cloudformation_stack

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_serverlessapplicationrepository_cloudformation_stack.
type Resource struct {
	Name      string
	Args      Args
	state     *awsServerlessapplicationrepositoryCloudformationStackState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascs *Resource) Type() string {
	return "aws_serverlessapplicationrepository_cloudformation_stack"
}

// LocalName returns the local name for [Resource].
func (ascs *Resource) LocalName() string {
	return ascs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascs *Resource) Configuration() interface{} {
	return ascs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascs *Resource) Dependencies() terra.Dependencies {
	return ascs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascs *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascs *Resource) Attributes() awsServerlessapplicationrepositoryCloudformationStackAttributes {
	return awsServerlessapplicationrepositoryCloudformationStackAttributes{ref: terra.ReferenceResource(ascs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascs *Resource) ImportState(state io.Reader) error {
	ascs.state = &awsServerlessapplicationrepositoryCloudformationStackState{}
	if err := json.NewDecoder(state).Decode(ascs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascs.Type(), ascs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascs *Resource) State() (*awsServerlessapplicationrepositoryCloudformationStackState, bool) {
	return ascs.state, ascs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascs *Resource) StateMust() *awsServerlessapplicationrepositoryCloudformationStackState {
	if ascs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascs.Type(), ascs.LocalName()))
	}
	return ascs.state
}

// Args contains the configurations for aws_serverlessapplicationrepository_cloudformation_stack.
type Args struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Capabilities: set of string, required
	Capabilities terra.SetValue[terra.StringValue] `hcl:"capabilities,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// SemanticVersion: string, optional
	SemanticVersion terra.StringValue `hcl:"semantic_version,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsServerlessapplicationrepositoryCloudformationStackAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of aws_serverlessapplicationrepository_cloudformation_stack.
func (ascs awsServerlessapplicationrepositoryCloudformationStackAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("application_id"))
}

// Capabilities returns a reference to field capabilities of aws_serverlessapplicationrepository_cloudformation_stack.
func (ascs awsServerlessapplicationrepositoryCloudformationStackAttributes) Capabilities() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ascs.ref.Append("capabilities"))
}

// Id returns a reference to field id of aws_serverlessapplicationrepository_cloudformation_stack.
func (ascs awsServerlessapplicationrepositoryCloudformationStackAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("id"))
}

// Name returns a reference to field name of aws_serverlessapplicationrepository_cloudformation_stack.
func (ascs awsServerlessapplicationrepositoryCloudformationStackAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("name"))
}

// Outputs returns a reference to field outputs of aws_serverlessapplicationrepository_cloudformation_stack.
func (ascs awsServerlessapplicationrepositoryCloudformationStackAttributes) Outputs() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ascs.ref.Append("outputs"))
}

// Parameters returns a reference to field parameters of aws_serverlessapplicationrepository_cloudformation_stack.
func (ascs awsServerlessapplicationrepositoryCloudformationStackAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ascs.ref.Append("parameters"))
}

// SemanticVersion returns a reference to field semantic_version of aws_serverlessapplicationrepository_cloudformation_stack.
func (ascs awsServerlessapplicationrepositoryCloudformationStackAttributes) SemanticVersion() terra.StringValue {
	return terra.ReferenceAsString(ascs.ref.Append("semantic_version"))
}

// Tags returns a reference to field tags of aws_serverlessapplicationrepository_cloudformation_stack.
func (ascs awsServerlessapplicationrepositoryCloudformationStackAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ascs.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_serverlessapplicationrepository_cloudformation_stack.
func (ascs awsServerlessapplicationrepositoryCloudformationStackAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ascs.ref.Append("tags_all"))
}

func (ascs awsServerlessapplicationrepositoryCloudformationStackAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ascs.ref.Append("timeouts"))
}

type awsServerlessapplicationrepositoryCloudformationStackState struct {
	ApplicationId   string            `json:"application_id"`
	Capabilities    []string          `json:"capabilities"`
	Id              string            `json:"id"`
	Name            string            `json:"name"`
	Outputs         map[string]string `json:"outputs"`
	Parameters      map[string]string `json:"parameters"`
	SemanticVersion string            `json:"semantic_version"`
	Tags            map[string]string `json:"tags"`
	TagsAll         map[string]string `json:"tags_all"`
	Timeouts        *TimeoutsState    `json:"timeouts"`
}
