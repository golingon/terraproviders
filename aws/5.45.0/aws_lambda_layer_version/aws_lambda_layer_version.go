// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lambda_layer_version

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lambda_layer_version.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLambdaLayerVersionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (allv *Resource) Type() string {
	return "aws_lambda_layer_version"
}

// LocalName returns the local name for [Resource].
func (allv *Resource) LocalName() string {
	return allv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (allv *Resource) Configuration() interface{} {
	return allv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (allv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(allv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (allv *Resource) Dependencies() terra.Dependencies {
	return allv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (allv *Resource) LifecycleManagement() *terra.Lifecycle {
	return allv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (allv *Resource) Attributes() awsLambdaLayerVersionAttributes {
	return awsLambdaLayerVersionAttributes{ref: terra.ReferenceResource(allv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (allv *Resource) ImportState(state io.Reader) error {
	allv.state = &awsLambdaLayerVersionState{}
	if err := json.NewDecoder(state).Decode(allv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", allv.Type(), allv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (allv *Resource) State() (*awsLambdaLayerVersionState, bool) {
	return allv.state, allv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (allv *Resource) StateMust() *awsLambdaLayerVersionState {
	if allv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", allv.Type(), allv.LocalName()))
	}
	return allv.state
}

// Args contains the configurations for aws_lambda_layer_version.
type Args struct {
	// CompatibleArchitectures: set of string, optional
	CompatibleArchitectures terra.SetValue[terra.StringValue] `hcl:"compatible_architectures,attr"`
	// CompatibleRuntimes: set of string, optional
	CompatibleRuntimes terra.SetValue[terra.StringValue] `hcl:"compatible_runtimes,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Filename: string, optional
	Filename terra.StringValue `hcl:"filename,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LayerName: string, required
	LayerName terra.StringValue `hcl:"layer_name,attr" validate:"required"`
	// LicenseInfo: string, optional
	LicenseInfo terra.StringValue `hcl:"license_info,attr"`
	// S3Bucket: string, optional
	S3Bucket terra.StringValue `hcl:"s3_bucket,attr"`
	// S3Key: string, optional
	S3Key terra.StringValue `hcl:"s3_key,attr"`
	// S3ObjectVersion: string, optional
	S3ObjectVersion terra.StringValue `hcl:"s3_object_version,attr"`
	// SkipDestroy: bool, optional
	SkipDestroy terra.BoolValue `hcl:"skip_destroy,attr"`
	// SourceCodeHash: string, optional
	SourceCodeHash terra.StringValue `hcl:"source_code_hash,attr"`
}

type awsLambdaLayerVersionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("arn"))
}

// CompatibleArchitectures returns a reference to field compatible_architectures of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) CompatibleArchitectures() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](allv.ref.Append("compatible_architectures"))
}

// CompatibleRuntimes returns a reference to field compatible_runtimes of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) CompatibleRuntimes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](allv.ref.Append("compatible_runtimes"))
}

// CreatedDate returns a reference to field created_date of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("created_date"))
}

// Description returns a reference to field description of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("description"))
}

// Filename returns a reference to field filename of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) Filename() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("filename"))
}

// Id returns a reference to field id of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("id"))
}

// LayerArn returns a reference to field layer_arn of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) LayerArn() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("layer_arn"))
}

// LayerName returns a reference to field layer_name of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) LayerName() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("layer_name"))
}

// LicenseInfo returns a reference to field license_info of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) LicenseInfo() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("license_info"))
}

// S3Bucket returns a reference to field s3_bucket of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) S3Bucket() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("s3_bucket"))
}

// S3Key returns a reference to field s3_key of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) S3Key() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("s3_key"))
}

// S3ObjectVersion returns a reference to field s3_object_version of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) S3ObjectVersion() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("s3_object_version"))
}

// SigningJobArn returns a reference to field signing_job_arn of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) SigningJobArn() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("signing_job_arn"))
}

// SigningProfileVersionArn returns a reference to field signing_profile_version_arn of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) SigningProfileVersionArn() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("signing_profile_version_arn"))
}

// SkipDestroy returns a reference to field skip_destroy of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) SkipDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(allv.ref.Append("skip_destroy"))
}

// SourceCodeHash returns a reference to field source_code_hash of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) SourceCodeHash() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("source_code_hash"))
}

// SourceCodeSize returns a reference to field source_code_size of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) SourceCodeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(allv.ref.Append("source_code_size"))
}

// Version returns a reference to field version of aws_lambda_layer_version.
func (allv awsLambdaLayerVersionAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(allv.ref.Append("version"))
}

type awsLambdaLayerVersionState struct {
	Arn                      string   `json:"arn"`
	CompatibleArchitectures  []string `json:"compatible_architectures"`
	CompatibleRuntimes       []string `json:"compatible_runtimes"`
	CreatedDate              string   `json:"created_date"`
	Description              string   `json:"description"`
	Filename                 string   `json:"filename"`
	Id                       string   `json:"id"`
	LayerArn                 string   `json:"layer_arn"`
	LayerName                string   `json:"layer_name"`
	LicenseInfo              string   `json:"license_info"`
	S3Bucket                 string   `json:"s3_bucket"`
	S3Key                    string   `json:"s3_key"`
	S3ObjectVersion          string   `json:"s3_object_version"`
	SigningJobArn            string   `json:"signing_job_arn"`
	SigningProfileVersionArn string   `json:"signing_profile_version_arn"`
	SkipDestroy              bool     `json:"skip_destroy"`
	SourceCodeHash           string   `json:"source_code_hash"`
	SourceCodeSize           float64  `json:"source_code_size"`
	Version                  string   `json:"version"`
}
