// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_prometheus_scraper

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_prometheus_scraper.
type Resource struct {
	Name      string
	Args      Args
	state     *awsPrometheusScraperState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aps *Resource) Type() string {
	return "aws_prometheus_scraper"
}

// LocalName returns the local name for [Resource].
func (aps *Resource) LocalName() string {
	return aps.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aps *Resource) Configuration() interface{} {
	return aps.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aps *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aps)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aps *Resource) Dependencies() terra.Dependencies {
	return aps.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aps *Resource) LifecycleManagement() *terra.Lifecycle {
	return aps.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aps *Resource) Attributes() awsPrometheusScraperAttributes {
	return awsPrometheusScraperAttributes{ref: terra.ReferenceResource(aps)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aps *Resource) ImportState(state io.Reader) error {
	aps.state = &awsPrometheusScraperState{}
	if err := json.NewDecoder(state).Decode(aps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aps.Type(), aps.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aps *Resource) State() (*awsPrometheusScraperState, bool) {
	return aps.state, aps.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aps *Resource) StateMust() *awsPrometheusScraperState {
	if aps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aps.Type(), aps.LocalName()))
	}
	return aps.state
}

// Args contains the configurations for aws_prometheus_scraper.
type Args struct {
	// Alias: string, optional
	Alias terra.StringValue `hcl:"alias,attr"`
	// ScrapeConfiguration: string, required
	ScrapeConfiguration terra.StringValue `hcl:"scrape_configuration,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Destination: min=0
	Destination []Destination `hcl:"destination,block" validate:"min=0"`
	// Source: min=0
	Source []Source `hcl:"source,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsPrometheusScraperAttributes struct {
	ref terra.Reference
}

// Alias returns a reference to field alias of aws_prometheus_scraper.
func (aps awsPrometheusScraperAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("alias"))
}

// Arn returns a reference to field arn of aws_prometheus_scraper.
func (aps awsPrometheusScraperAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("arn"))
}

// Id returns a reference to field id of aws_prometheus_scraper.
func (aps awsPrometheusScraperAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("id"))
}

// RoleArn returns a reference to field role_arn of aws_prometheus_scraper.
func (aps awsPrometheusScraperAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("role_arn"))
}

// ScrapeConfiguration returns a reference to field scrape_configuration of aws_prometheus_scraper.
func (aps awsPrometheusScraperAttributes) ScrapeConfiguration() terra.StringValue {
	return terra.ReferenceAsString(aps.ref.Append("scrape_configuration"))
}

// Tags returns a reference to field tags of aws_prometheus_scraper.
func (aps awsPrometheusScraperAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aps.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_prometheus_scraper.
func (aps awsPrometheusScraperAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aps.ref.Append("tags_all"))
}

func (aps awsPrometheusScraperAttributes) Destination() terra.ListValue[DestinationAttributes] {
	return terra.ReferenceAsList[DestinationAttributes](aps.ref.Append("destination"))
}

func (aps awsPrometheusScraperAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](aps.ref.Append("source"))
}

func (aps awsPrometheusScraperAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aps.ref.Append("timeouts"))
}

type awsPrometheusScraperState struct {
	Alias               string             `json:"alias"`
	Arn                 string             `json:"arn"`
	Id                  string             `json:"id"`
	RoleArn             string             `json:"role_arn"`
	ScrapeConfiguration string             `json:"scrape_configuration"`
	Tags                map[string]string  `json:"tags"`
	TagsAll             map[string]string  `json:"tags_all"`
	Destination         []DestinationState `json:"destination"`
	Source              []SourceState      `json:"source"`
	Timeouts            *TimeoutsState     `json:"timeouts"`
}
