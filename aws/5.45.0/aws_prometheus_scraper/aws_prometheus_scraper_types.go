// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_prometheus_scraper

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Destination struct {
	// DestinationAmp: min=0
	Amp []DestinationAmp `hcl:"amp,block" validate:"min=0"`
}

type DestinationAmp struct {
	// WorkspaceArn: string, required
	WorkspaceArn terra.StringValue `hcl:"workspace_arn,attr" validate:"required"`
}

type Source struct {
	// SourceEks: min=0
	Eks []SourceEks `hcl:"eks,block" validate:"min=0"`
}

type SourceEks struct {
	// ClusterArn: string, required
	ClusterArn terra.StringValue `hcl:"cluster_arn,attr" validate:"required"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type DestinationAttributes struct {
	ref terra.Reference
}

func (d DestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationAttributes) InternalWithRef(ref terra.Reference) DestinationAttributes {
	return DestinationAttributes{ref: ref}
}

func (d DestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationAttributes) Amp() terra.ListValue[DestinationAmpAttributes] {
	return terra.ReferenceAsList[DestinationAmpAttributes](d.ref.Append("amp"))
}

type DestinationAmpAttributes struct {
	ref terra.Reference
}

func (a DestinationAmpAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DestinationAmpAttributes) InternalWithRef(ref terra.Reference) DestinationAmpAttributes {
	return DestinationAmpAttributes{ref: ref}
}

func (a DestinationAmpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DestinationAmpAttributes) WorkspaceArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("workspace_arn"))
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) Eks() terra.ListValue[SourceEksAttributes] {
	return terra.ReferenceAsList[SourceEksAttributes](s.ref.Append("eks"))
}

type SourceEksAttributes struct {
	ref terra.Reference
}

func (e SourceEksAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e SourceEksAttributes) InternalWithRef(ref terra.Reference) SourceEksAttributes {
	return SourceEksAttributes{ref: ref}
}

func (e SourceEksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e SourceEksAttributes) ClusterArn() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cluster_arn"))
}

func (e SourceEksAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("security_group_ids"))
}

func (e SourceEksAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("subnet_ids"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type DestinationState struct {
	Amp []DestinationAmpState `json:"amp"`
}

type DestinationAmpState struct {
	WorkspaceArn string `json:"workspace_arn"`
}

type SourceState struct {
	Eks []SourceEksState `json:"eks"`
}

type SourceEksState struct {
	ClusterArn       string   `json:"cluster_arn"`
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
