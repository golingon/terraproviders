// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_grafana_role_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_grafana_role_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGrafanaRoleAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agra *Resource) Type() string {
	return "aws_grafana_role_association"
}

// LocalName returns the local name for [Resource].
func (agra *Resource) LocalName() string {
	return agra.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agra *Resource) Configuration() interface{} {
	return agra.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agra *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agra)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agra *Resource) Dependencies() terra.Dependencies {
	return agra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agra *Resource) LifecycleManagement() *terra.Lifecycle {
	return agra.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agra *Resource) Attributes() awsGrafanaRoleAssociationAttributes {
	return awsGrafanaRoleAssociationAttributes{ref: terra.ReferenceResource(agra)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agra *Resource) ImportState(state io.Reader) error {
	agra.state = &awsGrafanaRoleAssociationState{}
	if err := json.NewDecoder(state).Decode(agra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agra.Type(), agra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agra *Resource) State() (*awsGrafanaRoleAssociationState, bool) {
	return agra.state, agra.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agra *Resource) StateMust() *awsGrafanaRoleAssociationState {
	if agra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agra.Type(), agra.LocalName()))
	}
	return agra.state
}

// Args contains the configurations for aws_grafana_role_association.
type Args struct {
	// GroupIds: set of string, optional
	GroupIds terra.SetValue[terra.StringValue] `hcl:"group_ids,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// UserIds: set of string, optional
	UserIds terra.SetValue[terra.StringValue] `hcl:"user_ids,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsGrafanaRoleAssociationAttributes struct {
	ref terra.Reference
}

// GroupIds returns a reference to field group_ids of aws_grafana_role_association.
func (agra awsGrafanaRoleAssociationAttributes) GroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](agra.ref.Append("group_ids"))
}

// Id returns a reference to field id of aws_grafana_role_association.
func (agra awsGrafanaRoleAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agra.ref.Append("id"))
}

// Role returns a reference to field role of aws_grafana_role_association.
func (agra awsGrafanaRoleAssociationAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(agra.ref.Append("role"))
}

// UserIds returns a reference to field user_ids of aws_grafana_role_association.
func (agra awsGrafanaRoleAssociationAttributes) UserIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](agra.ref.Append("user_ids"))
}

// WorkspaceId returns a reference to field workspace_id of aws_grafana_role_association.
func (agra awsGrafanaRoleAssociationAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(agra.ref.Append("workspace_id"))
}

func (agra awsGrafanaRoleAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](agra.ref.Append("timeouts"))
}

type awsGrafanaRoleAssociationState struct {
	GroupIds    []string       `json:"group_ids"`
	Id          string         `json:"id"`
	Role        string         `json:"role"`
	UserIds     []string       `json:"user_ids"`
	WorkspaceId string         `json:"workspace_id"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
