// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_finspace_kx_dataview

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_finspace_kx_dataview.
type Resource struct {
	Name      string
	Args      Args
	state     *awsFinspaceKxDataviewState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (afkd *Resource) Type() string {
	return "aws_finspace_kx_dataview"
}

// LocalName returns the local name for [Resource].
func (afkd *Resource) LocalName() string {
	return afkd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (afkd *Resource) Configuration() interface{} {
	return afkd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (afkd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(afkd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (afkd *Resource) Dependencies() terra.Dependencies {
	return afkd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (afkd *Resource) LifecycleManagement() *terra.Lifecycle {
	return afkd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (afkd *Resource) Attributes() awsFinspaceKxDataviewAttributes {
	return awsFinspaceKxDataviewAttributes{ref: terra.ReferenceResource(afkd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (afkd *Resource) ImportState(state io.Reader) error {
	afkd.state = &awsFinspaceKxDataviewState{}
	if err := json.NewDecoder(state).Decode(afkd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afkd.Type(), afkd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (afkd *Resource) State() (*awsFinspaceKxDataviewState, bool) {
	return afkd.state, afkd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (afkd *Resource) StateMust() *awsFinspaceKxDataviewState {
	if afkd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afkd.Type(), afkd.LocalName()))
	}
	return afkd.state
}

// Args contains the configurations for aws_finspace_kx_dataview.
type Args struct {
	// AutoUpdate: bool, required
	AutoUpdate terra.BoolValue `hcl:"auto_update,attr" validate:"required"`
	// AvailabilityZoneId: string, optional
	AvailabilityZoneId terra.StringValue `hcl:"availability_zone_id,attr"`
	// AzMode: string, required
	AzMode terra.StringValue `hcl:"az_mode,attr" validate:"required"`
	// ChangesetId: string, optional
	ChangesetId terra.StringValue `hcl:"changeset_id,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnvironmentId: string, required
	EnvironmentId terra.StringValue `hcl:"environment_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReadWrite: bool, optional
	ReadWrite terra.BoolValue `hcl:"read_write,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// SegmentConfigurations: min=0
	SegmentConfigurations []SegmentConfigurations `hcl:"segment_configurations,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsFinspaceKxDataviewAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(afkd.ref.Append("arn"))
}

// AutoUpdate returns a reference to field auto_update of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) AutoUpdate() terra.BoolValue {
	return terra.ReferenceAsBool(afkd.ref.Append("auto_update"))
}

// AvailabilityZoneId returns a reference to field availability_zone_id of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) AvailabilityZoneId() terra.StringValue {
	return terra.ReferenceAsString(afkd.ref.Append("availability_zone_id"))
}

// AzMode returns a reference to field az_mode of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) AzMode() terra.StringValue {
	return terra.ReferenceAsString(afkd.ref.Append("az_mode"))
}

// ChangesetId returns a reference to field changeset_id of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) ChangesetId() terra.StringValue {
	return terra.ReferenceAsString(afkd.ref.Append("changeset_id"))
}

// CreatedTimestamp returns a reference to field created_timestamp of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) CreatedTimestamp() terra.StringValue {
	return terra.ReferenceAsString(afkd.ref.Append("created_timestamp"))
}

// DatabaseName returns a reference to field database_name of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(afkd.ref.Append("database_name"))
}

// Description returns a reference to field description of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(afkd.ref.Append("description"))
}

// EnvironmentId returns a reference to field environment_id of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(afkd.ref.Append("environment_id"))
}

// Id returns a reference to field id of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(afkd.ref.Append("id"))
}

// LastModifiedTimestamp returns a reference to field last_modified_timestamp of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) LastModifiedTimestamp() terra.StringValue {
	return terra.ReferenceAsString(afkd.ref.Append("last_modified_timestamp"))
}

// Name returns a reference to field name of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(afkd.ref.Append("name"))
}

// ReadWrite returns a reference to field read_write of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) ReadWrite() terra.BoolValue {
	return terra.ReferenceAsBool(afkd.ref.Append("read_write"))
}

// Status returns a reference to field status of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(afkd.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afkd.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_finspace_kx_dataview.
func (afkd awsFinspaceKxDataviewAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afkd.ref.Append("tags_all"))
}

func (afkd awsFinspaceKxDataviewAttributes) SegmentConfigurations() terra.ListValue[SegmentConfigurationsAttributes] {
	return terra.ReferenceAsList[SegmentConfigurationsAttributes](afkd.ref.Append("segment_configurations"))
}

func (afkd awsFinspaceKxDataviewAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](afkd.ref.Append("timeouts"))
}

type awsFinspaceKxDataviewState struct {
	Arn                   string                       `json:"arn"`
	AutoUpdate            bool                         `json:"auto_update"`
	AvailabilityZoneId    string                       `json:"availability_zone_id"`
	AzMode                string                       `json:"az_mode"`
	ChangesetId           string                       `json:"changeset_id"`
	CreatedTimestamp      string                       `json:"created_timestamp"`
	DatabaseName          string                       `json:"database_name"`
	Description           string                       `json:"description"`
	EnvironmentId         string                       `json:"environment_id"`
	Id                    string                       `json:"id"`
	LastModifiedTimestamp string                       `json:"last_modified_timestamp"`
	Name                  string                       `json:"name"`
	ReadWrite             bool                         `json:"read_write"`
	Status                string                       `json:"status"`
	Tags                  map[string]string            `json:"tags"`
	TagsAll               map[string]string            `json:"tags_all"`
	SegmentConfigurations []SegmentConfigurationsState `json:"segment_configurations"`
	Timeouts              *TimeoutsState               `json:"timeouts"`
}
