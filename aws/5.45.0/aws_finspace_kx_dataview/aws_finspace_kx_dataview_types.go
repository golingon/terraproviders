// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_finspace_kx_dataview

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type SegmentConfigurations struct {
	// DbPaths: list of string, required
	DbPaths terra.ListValue[terra.StringValue] `hcl:"db_paths,attr" validate:"required"`
	// OnDemand: bool, optional
	OnDemand terra.BoolValue `hcl:"on_demand,attr"`
	// VolumeName: string, required
	VolumeName terra.StringValue `hcl:"volume_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SegmentConfigurationsAttributes struct {
	ref terra.Reference
}

func (sc SegmentConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SegmentConfigurationsAttributes) InternalWithRef(ref terra.Reference) SegmentConfigurationsAttributes {
	return SegmentConfigurationsAttributes{ref: ref}
}

func (sc SegmentConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SegmentConfigurationsAttributes) DbPaths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sc.ref.Append("db_paths"))
}

func (sc SegmentConfigurationsAttributes) OnDemand() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("on_demand"))
}

func (sc SegmentConfigurationsAttributes) VolumeName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("volume_name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type SegmentConfigurationsState struct {
	DbPaths    []string `json:"db_paths"`
	OnDemand   bool     `json:"on_demand"`
	VolumeName string   `json:"volume_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
