// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lambda_function_url

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lambda_function_url.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLambdaFunctionUrlState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alfu *Resource) Type() string {
	return "aws_lambda_function_url"
}

// LocalName returns the local name for [Resource].
func (alfu *Resource) LocalName() string {
	return alfu.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alfu *Resource) Configuration() interface{} {
	return alfu.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alfu *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alfu)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alfu *Resource) Dependencies() terra.Dependencies {
	return alfu.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alfu *Resource) LifecycleManagement() *terra.Lifecycle {
	return alfu.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alfu *Resource) Attributes() awsLambdaFunctionUrlAttributes {
	return awsLambdaFunctionUrlAttributes{ref: terra.ReferenceResource(alfu)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alfu *Resource) ImportState(state io.Reader) error {
	alfu.state = &awsLambdaFunctionUrlState{}
	if err := json.NewDecoder(state).Decode(alfu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alfu.Type(), alfu.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alfu *Resource) State() (*awsLambdaFunctionUrlState, bool) {
	return alfu.state, alfu.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alfu *Resource) StateMust() *awsLambdaFunctionUrlState {
	if alfu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alfu.Type(), alfu.LocalName()))
	}
	return alfu.state
}

// Args contains the configurations for aws_lambda_function_url.
type Args struct {
	// AuthorizationType: string, required
	AuthorizationType terra.StringValue `hcl:"authorization_type,attr" validate:"required"`
	// FunctionName: string, required
	FunctionName terra.StringValue `hcl:"function_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InvokeMode: string, optional
	InvokeMode terra.StringValue `hcl:"invoke_mode,attr"`
	// Qualifier: string, optional
	Qualifier terra.StringValue `hcl:"qualifier,attr"`
	// Cors: optional
	Cors *Cors `hcl:"cors,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsLambdaFunctionUrlAttributes struct {
	ref terra.Reference
}

// AuthorizationType returns a reference to field authorization_type of aws_lambda_function_url.
func (alfu awsLambdaFunctionUrlAttributes) AuthorizationType() terra.StringValue {
	return terra.ReferenceAsString(alfu.ref.Append("authorization_type"))
}

// FunctionArn returns a reference to field function_arn of aws_lambda_function_url.
func (alfu awsLambdaFunctionUrlAttributes) FunctionArn() terra.StringValue {
	return terra.ReferenceAsString(alfu.ref.Append("function_arn"))
}

// FunctionName returns a reference to field function_name of aws_lambda_function_url.
func (alfu awsLambdaFunctionUrlAttributes) FunctionName() terra.StringValue {
	return terra.ReferenceAsString(alfu.ref.Append("function_name"))
}

// FunctionUrl returns a reference to field function_url of aws_lambda_function_url.
func (alfu awsLambdaFunctionUrlAttributes) FunctionUrl() terra.StringValue {
	return terra.ReferenceAsString(alfu.ref.Append("function_url"))
}

// Id returns a reference to field id of aws_lambda_function_url.
func (alfu awsLambdaFunctionUrlAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alfu.ref.Append("id"))
}

// InvokeMode returns a reference to field invoke_mode of aws_lambda_function_url.
func (alfu awsLambdaFunctionUrlAttributes) InvokeMode() terra.StringValue {
	return terra.ReferenceAsString(alfu.ref.Append("invoke_mode"))
}

// Qualifier returns a reference to field qualifier of aws_lambda_function_url.
func (alfu awsLambdaFunctionUrlAttributes) Qualifier() terra.StringValue {
	return terra.ReferenceAsString(alfu.ref.Append("qualifier"))
}

// UrlId returns a reference to field url_id of aws_lambda_function_url.
func (alfu awsLambdaFunctionUrlAttributes) UrlId() terra.StringValue {
	return terra.ReferenceAsString(alfu.ref.Append("url_id"))
}

func (alfu awsLambdaFunctionUrlAttributes) Cors() terra.ListValue[CorsAttributes] {
	return terra.ReferenceAsList[CorsAttributes](alfu.ref.Append("cors"))
}

func (alfu awsLambdaFunctionUrlAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alfu.ref.Append("timeouts"))
}

type awsLambdaFunctionUrlState struct {
	AuthorizationType string         `json:"authorization_type"`
	FunctionArn       string         `json:"function_arn"`
	FunctionName      string         `json:"function_name"`
	FunctionUrl       string         `json:"function_url"`
	Id                string         `json:"id"`
	InvokeMode        string         `json:"invoke_mode"`
	Qualifier         string         `json:"qualifier"`
	UrlId             string         `json:"url_id"`
	Cors              []CorsState    `json:"cors"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
