// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iot_thing

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iot_thing.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIotThingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ait *Resource) Type() string {
	return "aws_iot_thing"
}

// LocalName returns the local name for [Resource].
func (ait *Resource) LocalName() string {
	return ait.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ait *Resource) Configuration() interface{} {
	return ait.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ait *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ait)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ait *Resource) Dependencies() terra.Dependencies {
	return ait.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ait *Resource) LifecycleManagement() *terra.Lifecycle {
	return ait.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ait *Resource) Attributes() awsIotThingAttributes {
	return awsIotThingAttributes{ref: terra.ReferenceResource(ait)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ait *Resource) ImportState(state io.Reader) error {
	ait.state = &awsIotThingState{}
	if err := json.NewDecoder(state).Decode(ait.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ait.Type(), ait.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ait *Resource) State() (*awsIotThingState, bool) {
	return ait.state, ait.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ait *Resource) StateMust() *awsIotThingState {
	if ait.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ait.Type(), ait.LocalName()))
	}
	return ait.state
}

// Args contains the configurations for aws_iot_thing.
type Args struct {
	// Attributes: map of string, optional
	Attributes terra.MapValue[terra.StringValue] `hcl:"attributes,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ThingTypeName: string, optional
	ThingTypeName terra.StringValue `hcl:"thing_type_name,attr"`
}

type awsIotThingAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iot_thing.
func (ait awsIotThingAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ait.ref.Append("arn"))
}

// Attributes returns a reference to field attributes of aws_iot_thing.
func (ait awsIotThingAttributes) Attributes() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ait.ref.Append("attributes"))
}

// DefaultClientId returns a reference to field default_client_id of aws_iot_thing.
func (ait awsIotThingAttributes) DefaultClientId() terra.StringValue {
	return terra.ReferenceAsString(ait.ref.Append("default_client_id"))
}

// Id returns a reference to field id of aws_iot_thing.
func (ait awsIotThingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ait.ref.Append("id"))
}

// Name returns a reference to field name of aws_iot_thing.
func (ait awsIotThingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ait.ref.Append("name"))
}

// ThingTypeName returns a reference to field thing_type_name of aws_iot_thing.
func (ait awsIotThingAttributes) ThingTypeName() terra.StringValue {
	return terra.ReferenceAsString(ait.ref.Append("thing_type_name"))
}

// Version returns a reference to field version of aws_iot_thing.
func (ait awsIotThingAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(ait.ref.Append("version"))
}

type awsIotThingState struct {
	Arn             string            `json:"arn"`
	Attributes      map[string]string `json:"attributes"`
	DefaultClientId string            `json:"default_client_id"`
	Id              string            `json:"id"`
	Name            string            `json:"name"`
	ThingTypeName   string            `json:"thing_type_name"`
	Version         float64           `json:"version"`
}
