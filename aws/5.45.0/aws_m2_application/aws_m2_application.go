// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_m2_application

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_m2_application.
type Resource struct {
	Name      string
	Args      Args
	state     *awsM2ApplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ama *Resource) Type() string {
	return "aws_m2_application"
}

// LocalName returns the local name for [Resource].
func (ama *Resource) LocalName() string {
	return ama.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ama *Resource) Configuration() interface{} {
	return ama.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ama *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ama)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ama *Resource) Dependencies() terra.Dependencies {
	return ama.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ama *Resource) LifecycleManagement() *terra.Lifecycle {
	return ama.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ama *Resource) Attributes() awsM2ApplicationAttributes {
	return awsM2ApplicationAttributes{ref: terra.ReferenceResource(ama)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ama *Resource) ImportState(state io.Reader) error {
	ama.state = &awsM2ApplicationState{}
	if err := json.NewDecoder(state).Decode(ama.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ama.Type(), ama.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ama *Resource) State() (*awsM2ApplicationState, bool) {
	return ama.state, ama.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ama *Resource) StateMust() *awsM2ApplicationState {
	if ama.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ama.Type(), ama.LocalName()))
	}
	return ama.state
}

// Args contains the configurations for aws_m2_application.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EngineType: string, required
	EngineType terra.StringValue `hcl:"engine_type,attr" validate:"required"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Definition: min=0
	Definition []Definition `hcl:"definition,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsM2ApplicationAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of aws_m2_application.
func (ama awsM2ApplicationAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("application_id"))
}

// Arn returns a reference to field arn of aws_m2_application.
func (ama awsM2ApplicationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("arn"))
}

// CurrentVersion returns a reference to field current_version of aws_m2_application.
func (ama awsM2ApplicationAttributes) CurrentVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(ama.ref.Append("current_version"))
}

// Description returns a reference to field description of aws_m2_application.
func (ama awsM2ApplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("description"))
}

// EngineType returns a reference to field engine_type of aws_m2_application.
func (ama awsM2ApplicationAttributes) EngineType() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("engine_type"))
}

// Id returns a reference to field id of aws_m2_application.
func (ama awsM2ApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_m2_application.
func (ama awsM2ApplicationAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("kms_key_id"))
}

// Name returns a reference to field name of aws_m2_application.
func (ama awsM2ApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_m2_application.
func (ama awsM2ApplicationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("role_arn"))
}

// Tags returns a reference to field tags of aws_m2_application.
func (ama awsM2ApplicationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ama.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_m2_application.
func (ama awsM2ApplicationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ama.ref.Append("tags_all"))
}

func (ama awsM2ApplicationAttributes) Definition() terra.ListValue[DefinitionAttributes] {
	return terra.ReferenceAsList[DefinitionAttributes](ama.ref.Append("definition"))
}

func (ama awsM2ApplicationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ama.ref.Append("timeouts"))
}

type awsM2ApplicationState struct {
	ApplicationId  string            `json:"application_id"`
	Arn            string            `json:"arn"`
	CurrentVersion float64           `json:"current_version"`
	Description    string            `json:"description"`
	EngineType     string            `json:"engine_type"`
	Id             string            `json:"id"`
	KmsKeyId       string            `json:"kms_key_id"`
	Name           string            `json:"name"`
	RoleArn        string            `json:"role_arn"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
	Definition     []DefinitionState `json:"definition"`
	Timeouts       *TimeoutsState    `json:"timeouts"`
}
