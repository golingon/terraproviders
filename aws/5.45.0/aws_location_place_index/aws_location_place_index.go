// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_location_place_index

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_location_place_index.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLocationPlaceIndexState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alpi *Resource) Type() string {
	return "aws_location_place_index"
}

// LocalName returns the local name for [Resource].
func (alpi *Resource) LocalName() string {
	return alpi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alpi *Resource) Configuration() interface{} {
	return alpi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alpi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alpi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alpi *Resource) Dependencies() terra.Dependencies {
	return alpi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alpi *Resource) LifecycleManagement() *terra.Lifecycle {
	return alpi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alpi *Resource) Attributes() awsLocationPlaceIndexAttributes {
	return awsLocationPlaceIndexAttributes{ref: terra.ReferenceResource(alpi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alpi *Resource) ImportState(state io.Reader) error {
	alpi.state = &awsLocationPlaceIndexState{}
	if err := json.NewDecoder(state).Decode(alpi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alpi.Type(), alpi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alpi *Resource) State() (*awsLocationPlaceIndexState, bool) {
	return alpi.state, alpi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alpi *Resource) StateMust() *awsLocationPlaceIndexState {
	if alpi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alpi.Type(), alpi.LocalName()))
	}
	return alpi.state
}

// Args contains the configurations for aws_location_place_index.
type Args struct {
	// DataSource: string, required
	DataSource terra.StringValue `hcl:"data_source,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IndexName: string, required
	IndexName terra.StringValue `hcl:"index_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DataSourceConfiguration: optional
	DataSourceConfiguration *DataSourceConfiguration `hcl:"data_source_configuration,block"`
}

type awsLocationPlaceIndexAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of aws_location_place_index.
func (alpi awsLocationPlaceIndexAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(alpi.ref.Append("create_time"))
}

// DataSource returns a reference to field data_source of aws_location_place_index.
func (alpi awsLocationPlaceIndexAttributes) DataSource() terra.StringValue {
	return terra.ReferenceAsString(alpi.ref.Append("data_source"))
}

// Description returns a reference to field description of aws_location_place_index.
func (alpi awsLocationPlaceIndexAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(alpi.ref.Append("description"))
}

// Id returns a reference to field id of aws_location_place_index.
func (alpi awsLocationPlaceIndexAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alpi.ref.Append("id"))
}

// IndexArn returns a reference to field index_arn of aws_location_place_index.
func (alpi awsLocationPlaceIndexAttributes) IndexArn() terra.StringValue {
	return terra.ReferenceAsString(alpi.ref.Append("index_arn"))
}

// IndexName returns a reference to field index_name of aws_location_place_index.
func (alpi awsLocationPlaceIndexAttributes) IndexName() terra.StringValue {
	return terra.ReferenceAsString(alpi.ref.Append("index_name"))
}

// Tags returns a reference to field tags of aws_location_place_index.
func (alpi awsLocationPlaceIndexAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alpi.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_location_place_index.
func (alpi awsLocationPlaceIndexAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alpi.ref.Append("tags_all"))
}

// UpdateTime returns a reference to field update_time of aws_location_place_index.
func (alpi awsLocationPlaceIndexAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(alpi.ref.Append("update_time"))
}

func (alpi awsLocationPlaceIndexAttributes) DataSourceConfiguration() terra.ListValue[DataSourceConfigurationAttributes] {
	return terra.ReferenceAsList[DataSourceConfigurationAttributes](alpi.ref.Append("data_source_configuration"))
}

type awsLocationPlaceIndexState struct {
	CreateTime              string                         `json:"create_time"`
	DataSource              string                         `json:"data_source"`
	Description             string                         `json:"description"`
	Id                      string                         `json:"id"`
	IndexArn                string                         `json:"index_arn"`
	IndexName               string                         `json:"index_name"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	UpdateTime              string                         `json:"update_time"`
	DataSourceConfiguration []DataSourceConfigurationState `json:"data_source_configuration"`
}
