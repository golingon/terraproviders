// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_securitylake_custom_log_source

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_securitylake_custom_log_source.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSecuritylakeCustomLogSourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascls *Resource) Type() string {
	return "aws_securitylake_custom_log_source"
}

// LocalName returns the local name for [Resource].
func (ascls *Resource) LocalName() string {
	return ascls.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascls *Resource) Configuration() interface{} {
	return ascls.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascls *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascls)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascls *Resource) Dependencies() terra.Dependencies {
	return ascls.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascls *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascls.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascls *Resource) Attributes() awsSecuritylakeCustomLogSourceAttributes {
	return awsSecuritylakeCustomLogSourceAttributes{ref: terra.ReferenceResource(ascls)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascls *Resource) ImportState(state io.Reader) error {
	ascls.state = &awsSecuritylakeCustomLogSourceState{}
	if err := json.NewDecoder(state).Decode(ascls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascls.Type(), ascls.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascls *Resource) State() (*awsSecuritylakeCustomLogSourceState, bool) {
	return ascls.state, ascls.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascls *Resource) StateMust() *awsSecuritylakeCustomLogSourceState {
	if ascls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascls.Type(), ascls.LocalName()))
	}
	return ascls.state
}

// Args contains the configurations for aws_securitylake_custom_log_source.
type Args struct {
	// EventClasses: set of string, optional
	EventClasses terra.SetValue[terra.StringValue] `hcl:"event_classes,attr"`
	// SourceName: string, required
	SourceName terra.StringValue `hcl:"source_name,attr" validate:"required"`
	// SourceVersion: string, optional
	SourceVersion terra.StringValue `hcl:"source_version,attr"`
	// Configuration: min=0
	Configuration []Configuration `hcl:"configuration,block" validate:"min=0"`
}

type awsSecuritylakeCustomLogSourceAttributes struct {
	ref terra.Reference
}

// EventClasses returns a reference to field event_classes of aws_securitylake_custom_log_source.
func (ascls awsSecuritylakeCustomLogSourceAttributes) EventClasses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ascls.ref.Append("event_classes"))
}

// Id returns a reference to field id of aws_securitylake_custom_log_source.
func (ascls awsSecuritylakeCustomLogSourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascls.ref.Append("id"))
}

// SourceName returns a reference to field source_name of aws_securitylake_custom_log_source.
func (ascls awsSecuritylakeCustomLogSourceAttributes) SourceName() terra.StringValue {
	return terra.ReferenceAsString(ascls.ref.Append("source_name"))
}

// SourceVersion returns a reference to field source_version of aws_securitylake_custom_log_source.
func (ascls awsSecuritylakeCustomLogSourceAttributes) SourceVersion() terra.StringValue {
	return terra.ReferenceAsString(ascls.ref.Append("source_version"))
}

func (ascls awsSecuritylakeCustomLogSourceAttributes) Attributes() terra.ListValue[AttributesAttributes] {
	return terra.ReferenceAsList[AttributesAttributes](ascls.ref.Append("attributes"))
}

func (ascls awsSecuritylakeCustomLogSourceAttributes) ProviderDetails() terra.ListValue[ProviderDetailsAttributes] {
	return terra.ReferenceAsList[ProviderDetailsAttributes](ascls.ref.Append("provider_details"))
}

func (ascls awsSecuritylakeCustomLogSourceAttributes) Configuration() terra.ListValue[ConfigurationAttributes] {
	return terra.ReferenceAsList[ConfigurationAttributes](ascls.ref.Append("configuration"))
}

type awsSecuritylakeCustomLogSourceState struct {
	EventClasses    []string               `json:"event_classes"`
	Id              string                 `json:"id"`
	SourceName      string                 `json:"source_name"`
	SourceVersion   string                 `json:"source_version"`
	Attributes      []AttributesState      `json:"attributes"`
	ProviderDetails []ProviderDetailsState `json:"provider_details"`
	Configuration   []ConfigurationState   `json:"configuration"`
}
