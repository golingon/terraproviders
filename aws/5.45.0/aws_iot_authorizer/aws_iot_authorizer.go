// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iot_authorizer

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iot_authorizer.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIotAuthorizerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aia *Resource) Type() string {
	return "aws_iot_authorizer"
}

// LocalName returns the local name for [Resource].
func (aia *Resource) LocalName() string {
	return aia.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aia *Resource) Configuration() interface{} {
	return aia.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aia *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aia)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aia *Resource) Dependencies() terra.Dependencies {
	return aia.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aia *Resource) LifecycleManagement() *terra.Lifecycle {
	return aia.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aia *Resource) Attributes() awsIotAuthorizerAttributes {
	return awsIotAuthorizerAttributes{ref: terra.ReferenceResource(aia)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aia *Resource) ImportState(state io.Reader) error {
	aia.state = &awsIotAuthorizerState{}
	if err := json.NewDecoder(state).Decode(aia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aia.Type(), aia.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aia *Resource) State() (*awsIotAuthorizerState, bool) {
	return aia.state, aia.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aia *Resource) StateMust() *awsIotAuthorizerState {
	if aia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aia.Type(), aia.LocalName()))
	}
	return aia.state
}

// Args contains the configurations for aws_iot_authorizer.
type Args struct {
	// AuthorizerFunctionArn: string, required
	AuthorizerFunctionArn terra.StringValue `hcl:"authorizer_function_arn,attr" validate:"required"`
	// EnableCachingForHttp: bool, optional
	EnableCachingForHttp terra.BoolValue `hcl:"enable_caching_for_http,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SigningDisabled: bool, optional
	SigningDisabled terra.BoolValue `hcl:"signing_disabled,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// TokenKeyName: string, optional
	TokenKeyName terra.StringValue `hcl:"token_key_name,attr"`
	// TokenSigningPublicKeys: map of string, optional
	TokenSigningPublicKeys terra.MapValue[terra.StringValue] `hcl:"token_signing_public_keys,attr"`
}

type awsIotAuthorizerAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iot_authorizer.
func (aia awsIotAuthorizerAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aia.ref.Append("arn"))
}

// AuthorizerFunctionArn returns a reference to field authorizer_function_arn of aws_iot_authorizer.
func (aia awsIotAuthorizerAttributes) AuthorizerFunctionArn() terra.StringValue {
	return terra.ReferenceAsString(aia.ref.Append("authorizer_function_arn"))
}

// EnableCachingForHttp returns a reference to field enable_caching_for_http of aws_iot_authorizer.
func (aia awsIotAuthorizerAttributes) EnableCachingForHttp() terra.BoolValue {
	return terra.ReferenceAsBool(aia.ref.Append("enable_caching_for_http"))
}

// Id returns a reference to field id of aws_iot_authorizer.
func (aia awsIotAuthorizerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aia.ref.Append("id"))
}

// Name returns a reference to field name of aws_iot_authorizer.
func (aia awsIotAuthorizerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aia.ref.Append("name"))
}

// SigningDisabled returns a reference to field signing_disabled of aws_iot_authorizer.
func (aia awsIotAuthorizerAttributes) SigningDisabled() terra.BoolValue {
	return terra.ReferenceAsBool(aia.ref.Append("signing_disabled"))
}

// Status returns a reference to field status of aws_iot_authorizer.
func (aia awsIotAuthorizerAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aia.ref.Append("status"))
}

// TokenKeyName returns a reference to field token_key_name of aws_iot_authorizer.
func (aia awsIotAuthorizerAttributes) TokenKeyName() terra.StringValue {
	return terra.ReferenceAsString(aia.ref.Append("token_key_name"))
}

// TokenSigningPublicKeys returns a reference to field token_signing_public_keys of aws_iot_authorizer.
func (aia awsIotAuthorizerAttributes) TokenSigningPublicKeys() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aia.ref.Append("token_signing_public_keys"))
}

type awsIotAuthorizerState struct {
	Arn                    string            `json:"arn"`
	AuthorizerFunctionArn  string            `json:"authorizer_function_arn"`
	EnableCachingForHttp   bool              `json:"enable_caching_for_http"`
	Id                     string            `json:"id"`
	Name                   string            `json:"name"`
	SigningDisabled        bool              `json:"signing_disabled"`
	Status                 string            `json:"status"`
	TokenKeyName           string            `json:"token_key_name"`
	TokenSigningPublicKeys map[string]string `json:"token_signing_public_keys"`
}
