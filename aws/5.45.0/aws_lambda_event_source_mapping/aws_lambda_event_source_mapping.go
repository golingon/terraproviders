// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lambda_event_source_mapping

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lambda_event_source_mapping.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLambdaEventSourceMappingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alesm *Resource) Type() string {
	return "aws_lambda_event_source_mapping"
}

// LocalName returns the local name for [Resource].
func (alesm *Resource) LocalName() string {
	return alesm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alesm *Resource) Configuration() interface{} {
	return alesm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alesm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alesm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alesm *Resource) Dependencies() terra.Dependencies {
	return alesm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alesm *Resource) LifecycleManagement() *terra.Lifecycle {
	return alesm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alesm *Resource) Attributes() awsLambdaEventSourceMappingAttributes {
	return awsLambdaEventSourceMappingAttributes{ref: terra.ReferenceResource(alesm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alesm *Resource) ImportState(state io.Reader) error {
	alesm.state = &awsLambdaEventSourceMappingState{}
	if err := json.NewDecoder(state).Decode(alesm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alesm.Type(), alesm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alesm *Resource) State() (*awsLambdaEventSourceMappingState, bool) {
	return alesm.state, alesm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alesm *Resource) StateMust() *awsLambdaEventSourceMappingState {
	if alesm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alesm.Type(), alesm.LocalName()))
	}
	return alesm.state
}

// Args contains the configurations for aws_lambda_event_source_mapping.
type Args struct {
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// BisectBatchOnFunctionError: bool, optional
	BisectBatchOnFunctionError terra.BoolValue `hcl:"bisect_batch_on_function_error,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// EventSourceArn: string, optional
	EventSourceArn terra.StringValue `hcl:"event_source_arn,attr"`
	// FunctionName: string, required
	FunctionName terra.StringValue `hcl:"function_name,attr" validate:"required"`
	// FunctionResponseTypes: set of string, optional
	FunctionResponseTypes terra.SetValue[terra.StringValue] `hcl:"function_response_types,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
	// MaximumRecordAgeInSeconds: number, optional
	MaximumRecordAgeInSeconds terra.NumberValue `hcl:"maximum_record_age_in_seconds,attr"`
	// MaximumRetryAttempts: number, optional
	MaximumRetryAttempts terra.NumberValue `hcl:"maximum_retry_attempts,attr"`
	// ParallelizationFactor: number, optional
	ParallelizationFactor terra.NumberValue `hcl:"parallelization_factor,attr"`
	// Queues: list of string, optional
	Queues terra.ListValue[terra.StringValue] `hcl:"queues,attr"`
	// StartingPosition: string, optional
	StartingPosition terra.StringValue `hcl:"starting_position,attr"`
	// StartingPositionTimestamp: string, optional
	StartingPositionTimestamp terra.StringValue `hcl:"starting_position_timestamp,attr"`
	// Topics: set of string, optional
	Topics terra.SetValue[terra.StringValue] `hcl:"topics,attr"`
	// TumblingWindowInSeconds: number, optional
	TumblingWindowInSeconds terra.NumberValue `hcl:"tumbling_window_in_seconds,attr"`
	// AmazonManagedKafkaEventSourceConfig: optional
	AmazonManagedKafkaEventSourceConfig *AmazonManagedKafkaEventSourceConfig `hcl:"amazon_managed_kafka_event_source_config,block"`
	// DestinationConfig: optional
	DestinationConfig *DestinationConfig `hcl:"destination_config,block"`
	// DocumentDbEventSourceConfig: optional
	DocumentDbEventSourceConfig *DocumentDbEventSourceConfig `hcl:"document_db_event_source_config,block"`
	// FilterCriteria: optional
	FilterCriteria *FilterCriteria `hcl:"filter_criteria,block"`
	// ScalingConfig: optional
	ScalingConfig *ScalingConfig `hcl:"scaling_config,block"`
	// SelfManagedEventSource: optional
	SelfManagedEventSource *SelfManagedEventSource `hcl:"self_managed_event_source,block"`
	// SelfManagedKafkaEventSourceConfig: optional
	SelfManagedKafkaEventSourceConfig *SelfManagedKafkaEventSourceConfig `hcl:"self_managed_kafka_event_source_config,block"`
	// SourceAccessConfiguration: min=0,max=22
	SourceAccessConfiguration []SourceAccessConfiguration `hcl:"source_access_configuration,block" validate:"min=0,max=22"`
}

type awsLambdaEventSourceMappingAttributes struct {
	ref terra.Reference
}

// BatchSize returns a reference to field batch_size of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(alesm.ref.Append("batch_size"))
}

// BisectBatchOnFunctionError returns a reference to field bisect_batch_on_function_error of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) BisectBatchOnFunctionError() terra.BoolValue {
	return terra.ReferenceAsBool(alesm.ref.Append("bisect_batch_on_function_error"))
}

// Enabled returns a reference to field enabled of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(alesm.ref.Append("enabled"))
}

// EventSourceArn returns a reference to field event_source_arn of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) EventSourceArn() terra.StringValue {
	return terra.ReferenceAsString(alesm.ref.Append("event_source_arn"))
}

// FunctionArn returns a reference to field function_arn of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) FunctionArn() terra.StringValue {
	return terra.ReferenceAsString(alesm.ref.Append("function_arn"))
}

// FunctionName returns a reference to field function_name of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) FunctionName() terra.StringValue {
	return terra.ReferenceAsString(alesm.ref.Append("function_name"))
}

// FunctionResponseTypes returns a reference to field function_response_types of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) FunctionResponseTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](alesm.ref.Append("function_response_types"))
}

// Id returns a reference to field id of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alesm.ref.Append("id"))
}

// LastModified returns a reference to field last_modified of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) LastModified() terra.StringValue {
	return terra.ReferenceAsString(alesm.ref.Append("last_modified"))
}

// LastProcessingResult returns a reference to field last_processing_result of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) LastProcessingResult() terra.StringValue {
	return terra.ReferenceAsString(alesm.ref.Append("last_processing_result"))
}

// MaximumBatchingWindowInSeconds returns a reference to field maximum_batching_window_in_seconds of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(alesm.ref.Append("maximum_batching_window_in_seconds"))
}

// MaximumRecordAgeInSeconds returns a reference to field maximum_record_age_in_seconds of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) MaximumRecordAgeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(alesm.ref.Append("maximum_record_age_in_seconds"))
}

// MaximumRetryAttempts returns a reference to field maximum_retry_attempts of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) MaximumRetryAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(alesm.ref.Append("maximum_retry_attempts"))
}

// ParallelizationFactor returns a reference to field parallelization_factor of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) ParallelizationFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(alesm.ref.Append("parallelization_factor"))
}

// Queues returns a reference to field queues of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) Queues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](alesm.ref.Append("queues"))
}

// StartingPosition returns a reference to field starting_position of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) StartingPosition() terra.StringValue {
	return terra.ReferenceAsString(alesm.ref.Append("starting_position"))
}

// StartingPositionTimestamp returns a reference to field starting_position_timestamp of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) StartingPositionTimestamp() terra.StringValue {
	return terra.ReferenceAsString(alesm.ref.Append("starting_position_timestamp"))
}

// State returns a reference to field state of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(alesm.ref.Append("state"))
}

// StateTransitionReason returns a reference to field state_transition_reason of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) StateTransitionReason() terra.StringValue {
	return terra.ReferenceAsString(alesm.ref.Append("state_transition_reason"))
}

// Topics returns a reference to field topics of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) Topics() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](alesm.ref.Append("topics"))
}

// TumblingWindowInSeconds returns a reference to field tumbling_window_in_seconds of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) TumblingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(alesm.ref.Append("tumbling_window_in_seconds"))
}

// Uuid returns a reference to field uuid of aws_lambda_event_source_mapping.
func (alesm awsLambdaEventSourceMappingAttributes) Uuid() terra.StringValue {
	return terra.ReferenceAsString(alesm.ref.Append("uuid"))
}

func (alesm awsLambdaEventSourceMappingAttributes) AmazonManagedKafkaEventSourceConfig() terra.ListValue[AmazonManagedKafkaEventSourceConfigAttributes] {
	return terra.ReferenceAsList[AmazonManagedKafkaEventSourceConfigAttributes](alesm.ref.Append("amazon_managed_kafka_event_source_config"))
}

func (alesm awsLambdaEventSourceMappingAttributes) DestinationConfig() terra.ListValue[DestinationConfigAttributes] {
	return terra.ReferenceAsList[DestinationConfigAttributes](alesm.ref.Append("destination_config"))
}

func (alesm awsLambdaEventSourceMappingAttributes) DocumentDbEventSourceConfig() terra.ListValue[DocumentDbEventSourceConfigAttributes] {
	return terra.ReferenceAsList[DocumentDbEventSourceConfigAttributes](alesm.ref.Append("document_db_event_source_config"))
}

func (alesm awsLambdaEventSourceMappingAttributes) FilterCriteria() terra.ListValue[FilterCriteriaAttributes] {
	return terra.ReferenceAsList[FilterCriteriaAttributes](alesm.ref.Append("filter_criteria"))
}

func (alesm awsLambdaEventSourceMappingAttributes) ScalingConfig() terra.ListValue[ScalingConfigAttributes] {
	return terra.ReferenceAsList[ScalingConfigAttributes](alesm.ref.Append("scaling_config"))
}

func (alesm awsLambdaEventSourceMappingAttributes) SelfManagedEventSource() terra.ListValue[SelfManagedEventSourceAttributes] {
	return terra.ReferenceAsList[SelfManagedEventSourceAttributes](alesm.ref.Append("self_managed_event_source"))
}

func (alesm awsLambdaEventSourceMappingAttributes) SelfManagedKafkaEventSourceConfig() terra.ListValue[SelfManagedKafkaEventSourceConfigAttributes] {
	return terra.ReferenceAsList[SelfManagedKafkaEventSourceConfigAttributes](alesm.ref.Append("self_managed_kafka_event_source_config"))
}

func (alesm awsLambdaEventSourceMappingAttributes) SourceAccessConfiguration() terra.SetValue[SourceAccessConfigurationAttributes] {
	return terra.ReferenceAsSet[SourceAccessConfigurationAttributes](alesm.ref.Append("source_access_configuration"))
}

type awsLambdaEventSourceMappingState struct {
	BatchSize                           float64                                    `json:"batch_size"`
	BisectBatchOnFunctionError          bool                                       `json:"bisect_batch_on_function_error"`
	Enabled                             bool                                       `json:"enabled"`
	EventSourceArn                      string                                     `json:"event_source_arn"`
	FunctionArn                         string                                     `json:"function_arn"`
	FunctionName                        string                                     `json:"function_name"`
	FunctionResponseTypes               []string                                   `json:"function_response_types"`
	Id                                  string                                     `json:"id"`
	LastModified                        string                                     `json:"last_modified"`
	LastProcessingResult                string                                     `json:"last_processing_result"`
	MaximumBatchingWindowInSeconds      float64                                    `json:"maximum_batching_window_in_seconds"`
	MaximumRecordAgeInSeconds           float64                                    `json:"maximum_record_age_in_seconds"`
	MaximumRetryAttempts                float64                                    `json:"maximum_retry_attempts"`
	ParallelizationFactor               float64                                    `json:"parallelization_factor"`
	Queues                              []string                                   `json:"queues"`
	StartingPosition                    string                                     `json:"starting_position"`
	StartingPositionTimestamp           string                                     `json:"starting_position_timestamp"`
	State                               string                                     `json:"state"`
	StateTransitionReason               string                                     `json:"state_transition_reason"`
	Topics                              []string                                   `json:"topics"`
	TumblingWindowInSeconds             float64                                    `json:"tumbling_window_in_seconds"`
	Uuid                                string                                     `json:"uuid"`
	AmazonManagedKafkaEventSourceConfig []AmazonManagedKafkaEventSourceConfigState `json:"amazon_managed_kafka_event_source_config"`
	DestinationConfig                   []DestinationConfigState                   `json:"destination_config"`
	DocumentDbEventSourceConfig         []DocumentDbEventSourceConfigState         `json:"document_db_event_source_config"`
	FilterCriteria                      []FilterCriteriaState                      `json:"filter_criteria"`
	ScalingConfig                       []ScalingConfigState                       `json:"scaling_config"`
	SelfManagedEventSource              []SelfManagedEventSourceState              `json:"self_managed_event_source"`
	SelfManagedKafkaEventSourceConfig   []SelfManagedKafkaEventSourceConfigState   `json:"self_managed_kafka_event_source_config"`
	SourceAccessConfiguration           []SourceAccessConfigurationState           `json:"source_access_configuration"`
}
