// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_workflow

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glue_workflow.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlueWorkflowState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agw *Resource) Type() string {
	return "aws_glue_workflow"
}

// LocalName returns the local name for [Resource].
func (agw *Resource) LocalName() string {
	return agw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agw *Resource) Configuration() interface{} {
	return agw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agw *Resource) Dependencies() terra.Dependencies {
	return agw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agw *Resource) LifecycleManagement() *terra.Lifecycle {
	return agw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agw *Resource) Attributes() awsGlueWorkflowAttributes {
	return awsGlueWorkflowAttributes{ref: terra.ReferenceResource(agw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agw *Resource) ImportState(state io.Reader) error {
	agw.state = &awsGlueWorkflowState{}
	if err := json.NewDecoder(state).Decode(agw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agw.Type(), agw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agw *Resource) State() (*awsGlueWorkflowState, bool) {
	return agw.state, agw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agw *Resource) StateMust() *awsGlueWorkflowState {
	if agw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agw.Type(), agw.LocalName()))
	}
	return agw.state
}

// Args contains the configurations for aws_glue_workflow.
type Args struct {
	// DefaultRunProperties: map of string, optional
	DefaultRunProperties terra.MapValue[terra.StringValue] `hcl:"default_run_properties,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxConcurrentRuns: number, optional
	MaxConcurrentRuns terra.NumberValue `hcl:"max_concurrent_runs,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsGlueWorkflowAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_glue_workflow.
func (agw awsGlueWorkflowAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("arn"))
}

// DefaultRunProperties returns a reference to field default_run_properties of aws_glue_workflow.
func (agw awsGlueWorkflowAttributes) DefaultRunProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agw.ref.Append("default_run_properties"))
}

// Description returns a reference to field description of aws_glue_workflow.
func (agw awsGlueWorkflowAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("description"))
}

// Id returns a reference to field id of aws_glue_workflow.
func (agw awsGlueWorkflowAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("id"))
}

// MaxConcurrentRuns returns a reference to field max_concurrent_runs of aws_glue_workflow.
func (agw awsGlueWorkflowAttributes) MaxConcurrentRuns() terra.NumberValue {
	return terra.ReferenceAsNumber(agw.ref.Append("max_concurrent_runs"))
}

// Name returns a reference to field name of aws_glue_workflow.
func (agw awsGlueWorkflowAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_glue_workflow.
func (agw awsGlueWorkflowAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agw.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_glue_workflow.
func (agw awsGlueWorkflowAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agw.ref.Append("tags_all"))
}

type awsGlueWorkflowState struct {
	Arn                  string            `json:"arn"`
	DefaultRunProperties map[string]string `json:"default_run_properties"`
	Description          string            `json:"description"`
	Id                   string            `json:"id"`
	MaxConcurrentRuns    float64           `json:"max_concurrent_runs"`
	Name                 string            `json:"name"`
	Tags                 map[string]string `json:"tags"`
	TagsAll              map[string]string `json:"tags_all"`
}
