// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssm_parameter

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ssm_parameter.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSsmParameterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asp *Resource) Type() string {
	return "aws_ssm_parameter"
}

// LocalName returns the local name for [Resource].
func (asp *Resource) LocalName() string {
	return asp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asp *Resource) Configuration() interface{} {
	return asp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asp *Resource) Dependencies() terra.Dependencies {
	return asp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asp *Resource) LifecycleManagement() *terra.Lifecycle {
	return asp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asp *Resource) Attributes() awsSsmParameterAttributes {
	return awsSsmParameterAttributes{ref: terra.ReferenceResource(asp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asp *Resource) ImportState(state io.Reader) error {
	asp.state = &awsSsmParameterState{}
	if err := json.NewDecoder(state).Decode(asp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asp.Type(), asp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asp *Resource) State() (*awsSsmParameterState, bool) {
	return asp.state, asp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asp *Resource) StateMust() *awsSsmParameterState {
	if asp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asp.Type(), asp.LocalName()))
	}
	return asp.state
}

// Args contains the configurations for aws_ssm_parameter.
type Args struct {
	// AllowedPattern: string, optional
	AllowedPattern terra.StringValue `hcl:"allowed_pattern,attr"`
	// Arn: string, optional
	Arn terra.StringValue `hcl:"arn,attr"`
	// DataType: string, optional
	DataType terra.StringValue `hcl:"data_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InsecureValue: string, optional
	InsecureValue terra.StringValue `hcl:"insecure_value,attr"`
	// KeyId: string, optional
	KeyId terra.StringValue `hcl:"key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Overwrite: bool, optional
	Overwrite terra.BoolValue `hcl:"overwrite,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type awsSsmParameterAttributes struct {
	ref terra.Reference
}

// AllowedPattern returns a reference to field allowed_pattern of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) AllowedPattern() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("allowed_pattern"))
}

// Arn returns a reference to field arn of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("arn"))
}

// DataType returns a reference to field data_type of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) DataType() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("data_type"))
}

// Description returns a reference to field description of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("description"))
}

// Id returns a reference to field id of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("id"))
}

// InsecureValue returns a reference to field insecure_value of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) InsecureValue() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("insecure_value"))
}

// KeyId returns a reference to field key_id of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("key_id"))
}

// Name returns a reference to field name of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("name"))
}

// Overwrite returns a reference to field overwrite of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) Overwrite() terra.BoolValue {
	return terra.ReferenceAsBool(asp.ref.Append("overwrite"))
}

// Tags returns a reference to field tags of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asp.ref.Append("tags_all"))
}

// Tier returns a reference to field tier of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("tier"))
}

// Type returns a reference to field type of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("type"))
}

// Value returns a reference to field value of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("value"))
}

// Version returns a reference to field version of aws_ssm_parameter.
func (asp awsSsmParameterAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(asp.ref.Append("version"))
}

type awsSsmParameterState struct {
	AllowedPattern string            `json:"allowed_pattern"`
	Arn            string            `json:"arn"`
	DataType       string            `json:"data_type"`
	Description    string            `json:"description"`
	Id             string            `json:"id"`
	InsecureValue  string            `json:"insecure_value"`
	KeyId          string            `json:"key_id"`
	Name           string            `json:"name"`
	Overwrite      bool              `json:"overwrite"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
	Tier           string            `json:"tier"`
	Type           string            `json:"type"`
	Value          string            `json:"value"`
	Version        float64           `json:"version"`
}
