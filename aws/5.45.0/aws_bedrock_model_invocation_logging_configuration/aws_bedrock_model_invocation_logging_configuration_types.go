// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_bedrock_model_invocation_logging_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type LoggingConfig struct {
	// EmbeddingDataDeliveryEnabled: bool, required
	EmbeddingDataDeliveryEnabled terra.BoolValue `hcl:"embedding_data_delivery_enabled,attr" validate:"required"`
	// ImageDataDeliveryEnabled: bool, required
	ImageDataDeliveryEnabled terra.BoolValue `hcl:"image_data_delivery_enabled,attr" validate:"required"`
	// TextDataDeliveryEnabled: bool, required
	TextDataDeliveryEnabled terra.BoolValue `hcl:"text_data_delivery_enabled,attr" validate:"required"`
	// LoggingConfigCloudwatchConfig: optional
	CloudwatchConfig *LoggingConfigCloudwatchConfig `hcl:"cloudwatch_config,block"`
	// LoggingConfigS3Config: optional
	S3Config *LoggingConfigS3Config `hcl:"s3_config,block"`
}

type LoggingConfigCloudwatchConfig struct {
	// LogGroupName: string, optional
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// LoggingConfigCloudwatchConfigLargeDataDeliveryS3Config: optional
	LargeDataDeliveryS3Config *LoggingConfigCloudwatchConfigLargeDataDeliveryS3Config `hcl:"large_data_delivery_s3_config,block"`
}

type LoggingConfigCloudwatchConfigLargeDataDeliveryS3Config struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// KeyPrefix: string, optional
	KeyPrefix terra.StringValue `hcl:"key_prefix,attr"`
}

type LoggingConfigS3Config struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// KeyPrefix: string, optional
	KeyPrefix terra.StringValue `hcl:"key_prefix,attr"`
}

type LoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc LoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LoggingConfigAttributes) InternalWithRef(ref terra.Reference) LoggingConfigAttributes {
	return LoggingConfigAttributes{ref: ref}
}

func (lc LoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LoggingConfigAttributes) EmbeddingDataDeliveryEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("embedding_data_delivery_enabled"))
}

func (lc LoggingConfigAttributes) ImageDataDeliveryEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("image_data_delivery_enabled"))
}

func (lc LoggingConfigAttributes) TextDataDeliveryEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("text_data_delivery_enabled"))
}

func (lc LoggingConfigAttributes) CloudwatchConfig() LoggingConfigCloudwatchConfigAttributes {
	return terra.ReferenceAsSingle[LoggingConfigCloudwatchConfigAttributes](lc.ref.Append("cloudwatch_config"))
}

func (lc LoggingConfigAttributes) S3Config() LoggingConfigS3ConfigAttributes {
	return terra.ReferenceAsSingle[LoggingConfigS3ConfigAttributes](lc.ref.Append("s3_config"))
}

type LoggingConfigCloudwatchConfigAttributes struct {
	ref terra.Reference
}

func (cc LoggingConfigCloudwatchConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc LoggingConfigCloudwatchConfigAttributes) InternalWithRef(ref terra.Reference) LoggingConfigCloudwatchConfigAttributes {
	return LoggingConfigCloudwatchConfigAttributes{ref: ref}
}

func (cc LoggingConfigCloudwatchConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc LoggingConfigCloudwatchConfigAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("log_group_name"))
}

func (cc LoggingConfigCloudwatchConfigAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("role_arn"))
}

func (cc LoggingConfigCloudwatchConfigAttributes) LargeDataDeliveryS3Config() LoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigAttributes {
	return terra.ReferenceAsSingle[LoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigAttributes](cc.ref.Append("large_data_delivery_s3_config"))
}

type LoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigAttributes struct {
	ref terra.Reference
}

func (lddsc LoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigAttributes) InternalRef() (terra.Reference, error) {
	return lddsc.ref, nil
}

func (lddsc LoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigAttributes) InternalWithRef(ref terra.Reference) LoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigAttributes {
	return LoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigAttributes{ref: ref}
}

func (lddsc LoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lddsc.ref.InternalTokens()
}

func (lddsc LoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(lddsc.ref.Append("bucket_name"))
}

func (lddsc LoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigAttributes) KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(lddsc.ref.Append("key_prefix"))
}

type LoggingConfigS3ConfigAttributes struct {
	ref terra.Reference
}

func (sc LoggingConfigS3ConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc LoggingConfigS3ConfigAttributes) InternalWithRef(ref terra.Reference) LoggingConfigS3ConfigAttributes {
	return LoggingConfigS3ConfigAttributes{ref: ref}
}

func (sc LoggingConfigS3ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc LoggingConfigS3ConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_name"))
}

func (sc LoggingConfigS3ConfigAttributes) KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("key_prefix"))
}

type LoggingConfigState struct {
	EmbeddingDataDeliveryEnabled bool                                `json:"embedding_data_delivery_enabled"`
	ImageDataDeliveryEnabled     bool                                `json:"image_data_delivery_enabled"`
	TextDataDeliveryEnabled      bool                                `json:"text_data_delivery_enabled"`
	CloudwatchConfig             *LoggingConfigCloudwatchConfigState `json:"cloudwatch_config"`
	S3Config                     *LoggingConfigS3ConfigState         `json:"s3_config"`
}

type LoggingConfigCloudwatchConfigState struct {
	LogGroupName              string                                                       `json:"log_group_name"`
	RoleArn                   string                                                       `json:"role_arn"`
	LargeDataDeliveryS3Config *LoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigState `json:"large_data_delivery_s3_config"`
}

type LoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigState struct {
	BucketName string `json:"bucket_name"`
	KeyPrefix  string `json:"key_prefix"`
}

type LoggingConfigS3ConfigState struct {
	BucketName string `json:"bucket_name"`
	KeyPrefix  string `json:"key_prefix"`
}
