// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_bedrock_model_invocation_logging_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_bedrock_model_invocation_logging_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsBedrockModelInvocationLoggingConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abmilc *Resource) Type() string {
	return "aws_bedrock_model_invocation_logging_configuration"
}

// LocalName returns the local name for [Resource].
func (abmilc *Resource) LocalName() string {
	return abmilc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abmilc *Resource) Configuration() interface{} {
	return abmilc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abmilc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abmilc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abmilc *Resource) Dependencies() terra.Dependencies {
	return abmilc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abmilc *Resource) LifecycleManagement() *terra.Lifecycle {
	return abmilc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abmilc *Resource) Attributes() awsBedrockModelInvocationLoggingConfigurationAttributes {
	return awsBedrockModelInvocationLoggingConfigurationAttributes{ref: terra.ReferenceResource(abmilc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abmilc *Resource) ImportState(state io.Reader) error {
	abmilc.state = &awsBedrockModelInvocationLoggingConfigurationState{}
	if err := json.NewDecoder(state).Decode(abmilc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abmilc.Type(), abmilc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abmilc *Resource) State() (*awsBedrockModelInvocationLoggingConfigurationState, bool) {
	return abmilc.state, abmilc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abmilc *Resource) StateMust() *awsBedrockModelInvocationLoggingConfigurationState {
	if abmilc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abmilc.Type(), abmilc.LocalName()))
	}
	return abmilc.state
}

// Args contains the configurations for aws_bedrock_model_invocation_logging_configuration.
type Args struct {
	// LoggingConfig: optional
	LoggingConfig *LoggingConfig `hcl:"logging_config,block"`
}

type awsBedrockModelInvocationLoggingConfigurationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_bedrock_model_invocation_logging_configuration.
func (abmilc awsBedrockModelInvocationLoggingConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abmilc.ref.Append("id"))
}

func (abmilc awsBedrockModelInvocationLoggingConfigurationAttributes) LoggingConfig() LoggingConfigAttributes {
	return terra.ReferenceAsSingle[LoggingConfigAttributes](abmilc.ref.Append("logging_config"))
}

type awsBedrockModelInvocationLoggingConfigurationState struct {
	Id            string              `json:"id"`
	LoggingConfig *LoggingConfigState `json:"logging_config"`
}
