// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_signer_signing_job

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataRevocationRecordAttributes struct {
	ref terra.Reference
}

func (rr DataRevocationRecordAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr DataRevocationRecordAttributes) InternalWithRef(ref terra.Reference) DataRevocationRecordAttributes {
	return DataRevocationRecordAttributes{ref: ref}
}

func (rr DataRevocationRecordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr DataRevocationRecordAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("reason"))
}

func (rr DataRevocationRecordAttributes) RevokedAt() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("revoked_at"))
}

func (rr DataRevocationRecordAttributes) RevokedBy() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("revoked_by"))
}

type DataSignedObjectAttributes struct {
	ref terra.Reference
}

func (so DataSignedObjectAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so DataSignedObjectAttributes) InternalWithRef(ref terra.Reference) DataSignedObjectAttributes {
	return DataSignedObjectAttributes{ref: ref}
}

func (so DataSignedObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so DataSignedObjectAttributes) S3() terra.ListValue[DataSignedObjectS3Attributes] {
	return terra.ReferenceAsList[DataSignedObjectS3Attributes](so.ref.Append("s3"))
}

type DataSignedObjectS3Attributes struct {
	ref terra.Reference
}

func (s DataSignedObjectS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataSignedObjectS3Attributes) InternalWithRef(ref terra.Reference) DataSignedObjectS3Attributes {
	return DataSignedObjectS3Attributes{ref: ref}
}

func (s DataSignedObjectS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataSignedObjectS3Attributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket"))
}

func (s DataSignedObjectS3Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key"))
}

type DataSourceAttributes struct {
	ref terra.Reference
}

func (s DataSourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataSourceAttributes) InternalWithRef(ref terra.Reference) DataSourceAttributes {
	return DataSourceAttributes{ref: ref}
}

func (s DataSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataSourceAttributes) S3() terra.ListValue[DataSourceS3Attributes] {
	return terra.ReferenceAsList[DataSourceS3Attributes](s.ref.Append("s3"))
}

type DataSourceS3Attributes struct {
	ref terra.Reference
}

func (s DataSourceS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataSourceS3Attributes) InternalWithRef(ref terra.Reference) DataSourceS3Attributes {
	return DataSourceS3Attributes{ref: ref}
}

func (s DataSourceS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataSourceS3Attributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket"))
}

func (s DataSourceS3Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key"))
}

func (s DataSourceS3Attributes) Version() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("version"))
}

type DataRevocationRecordState struct {
	Reason    string `json:"reason"`
	RevokedAt string `json:"revoked_at"`
	RevokedBy string `json:"revoked_by"`
}

type DataSignedObjectState struct {
	S3 []DataSignedObjectS3State `json:"s3"`
}

type DataSignedObjectS3State struct {
	Bucket string `json:"bucket"`
	Key    string `json:"key"`
}

type DataSourceState struct {
	S3 []DataSourceS3State `json:"s3"`
}

type DataSourceS3State struct {
	Bucket  string `json:"bucket"`
	Key     string `json:"key"`
	Version string `json:"version"`
}
