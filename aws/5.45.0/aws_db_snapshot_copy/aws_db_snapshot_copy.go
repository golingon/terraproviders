// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_db_snapshot_copy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_db_snapshot_copy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDbSnapshotCopyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adsc *Resource) Type() string {
	return "aws_db_snapshot_copy"
}

// LocalName returns the local name for [Resource].
func (adsc *Resource) LocalName() string {
	return adsc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adsc *Resource) Configuration() interface{} {
	return adsc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adsc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adsc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adsc *Resource) Dependencies() terra.Dependencies {
	return adsc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adsc *Resource) LifecycleManagement() *terra.Lifecycle {
	return adsc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adsc *Resource) Attributes() awsDbSnapshotCopyAttributes {
	return awsDbSnapshotCopyAttributes{ref: terra.ReferenceResource(adsc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adsc *Resource) ImportState(state io.Reader) error {
	adsc.state = &awsDbSnapshotCopyState{}
	if err := json.NewDecoder(state).Decode(adsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adsc.Type(), adsc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adsc *Resource) State() (*awsDbSnapshotCopyState, bool) {
	return adsc.state, adsc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adsc *Resource) StateMust() *awsDbSnapshotCopyState {
	if adsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adsc.Type(), adsc.LocalName()))
	}
	return adsc.state
}

// Args contains the configurations for aws_db_snapshot_copy.
type Args struct {
	// CopyTags: bool, optional
	CopyTags terra.BoolValue `hcl:"copy_tags,attr"`
	// DestinationRegion: string, optional
	DestinationRegion terra.StringValue `hcl:"destination_region,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// OptionGroupName: string, optional
	OptionGroupName terra.StringValue `hcl:"option_group_name,attr"`
	// PresignedUrl: string, optional
	PresignedUrl terra.StringValue `hcl:"presigned_url,attr"`
	// SourceDbSnapshotIdentifier: string, required
	SourceDbSnapshotIdentifier terra.StringValue `hcl:"source_db_snapshot_identifier,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetCustomAvailabilityZone: string, optional
	TargetCustomAvailabilityZone terra.StringValue `hcl:"target_custom_availability_zone,attr"`
	// TargetDbSnapshotIdentifier: string, required
	TargetDbSnapshotIdentifier terra.StringValue `hcl:"target_db_snapshot_identifier,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDbSnapshotCopyAttributes struct {
	ref terra.Reference
}

// AllocatedStorage returns a reference to field allocated_storage of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) AllocatedStorage() terra.NumberValue {
	return terra.ReferenceAsNumber(adsc.ref.Append("allocated_storage"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("availability_zone"))
}

// CopyTags returns a reference to field copy_tags of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) CopyTags() terra.BoolValue {
	return terra.ReferenceAsBool(adsc.ref.Append("copy_tags"))
}

// DbSnapshotArn returns a reference to field db_snapshot_arn of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) DbSnapshotArn() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("db_snapshot_arn"))
}

// DestinationRegion returns a reference to field destination_region of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) DestinationRegion() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("destination_region"))
}

// Encrypted returns a reference to field encrypted of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(adsc.ref.Append("encrypted"))
}

// Engine returns a reference to field engine of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) Engine() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("engine"))
}

// EngineVersion returns a reference to field engine_version of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("engine_version"))
}

// Id returns a reference to field id of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("id"))
}

// Iops returns a reference to field iops of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(adsc.ref.Append("iops"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("kms_key_id"))
}

// LicenseModel returns a reference to field license_model of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) LicenseModel() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("license_model"))
}

// OptionGroupName returns a reference to field option_group_name of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) OptionGroupName() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("option_group_name"))
}

// Port returns a reference to field port of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(adsc.ref.Append("port"))
}

// PresignedUrl returns a reference to field presigned_url of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) PresignedUrl() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("presigned_url"))
}

// SnapshotType returns a reference to field snapshot_type of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) SnapshotType() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("snapshot_type"))
}

// SourceDbSnapshotIdentifier returns a reference to field source_db_snapshot_identifier of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) SourceDbSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("source_db_snapshot_identifier"))
}

// SourceRegion returns a reference to field source_region of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) SourceRegion() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("source_region"))
}

// StorageType returns a reference to field storage_type of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) StorageType() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("storage_type"))
}

// Tags returns a reference to field tags of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adsc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adsc.ref.Append("tags_all"))
}

// TargetCustomAvailabilityZone returns a reference to field target_custom_availability_zone of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) TargetCustomAvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("target_custom_availability_zone"))
}

// TargetDbSnapshotIdentifier returns a reference to field target_db_snapshot_identifier of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) TargetDbSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("target_db_snapshot_identifier"))
}

// VpcId returns a reference to field vpc_id of aws_db_snapshot_copy.
func (adsc awsDbSnapshotCopyAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(adsc.ref.Append("vpc_id"))
}

func (adsc awsDbSnapshotCopyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adsc.ref.Append("timeouts"))
}

type awsDbSnapshotCopyState struct {
	AllocatedStorage             float64           `json:"allocated_storage"`
	AvailabilityZone             string            `json:"availability_zone"`
	CopyTags                     bool              `json:"copy_tags"`
	DbSnapshotArn                string            `json:"db_snapshot_arn"`
	DestinationRegion            string            `json:"destination_region"`
	Encrypted                    bool              `json:"encrypted"`
	Engine                       string            `json:"engine"`
	EngineVersion                string            `json:"engine_version"`
	Id                           string            `json:"id"`
	Iops                         float64           `json:"iops"`
	KmsKeyId                     string            `json:"kms_key_id"`
	LicenseModel                 string            `json:"license_model"`
	OptionGroupName              string            `json:"option_group_name"`
	Port                         float64           `json:"port"`
	PresignedUrl                 string            `json:"presigned_url"`
	SnapshotType                 string            `json:"snapshot_type"`
	SourceDbSnapshotIdentifier   string            `json:"source_db_snapshot_identifier"`
	SourceRegion                 string            `json:"source_region"`
	StorageType                  string            `json:"storage_type"`
	Tags                         map[string]string `json:"tags"`
	TagsAll                      map[string]string `json:"tags_all"`
	TargetCustomAvailabilityZone string            `json:"target_custom_availability_zone"`
	TargetDbSnapshotIdentifier   string            `json:"target_db_snapshot_identifier"`
	VpcId                        string            `json:"vpc_id"`
	Timeouts                     *TimeoutsState    `json:"timeouts"`
}
