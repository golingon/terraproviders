// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lightsail_database

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lightsail_database.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLightsailDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ald *Resource) Type() string {
	return "aws_lightsail_database"
}

// LocalName returns the local name for [Resource].
func (ald *Resource) LocalName() string {
	return ald.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ald *Resource) Configuration() interface{} {
	return ald.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ald *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ald)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ald *Resource) Dependencies() terra.Dependencies {
	return ald.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ald *Resource) LifecycleManagement() *terra.Lifecycle {
	return ald.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ald *Resource) Attributes() awsLightsailDatabaseAttributes {
	return awsLightsailDatabaseAttributes{ref: terra.ReferenceResource(ald)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ald *Resource) ImportState(state io.Reader) error {
	ald.state = &awsLightsailDatabaseState{}
	if err := json.NewDecoder(state).Decode(ald.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ald.Type(), ald.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ald *Resource) State() (*awsLightsailDatabaseState, bool) {
	return ald.state, ald.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ald *Resource) StateMust() *awsLightsailDatabaseState {
	if ald.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ald.Type(), ald.LocalName()))
	}
	return ald.state
}

// Args contains the configurations for aws_lightsail_database.
type Args struct {
	// ApplyImmediately: bool, optional
	ApplyImmediately terra.BoolValue `hcl:"apply_immediately,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// BackupRetentionEnabled: bool, optional
	BackupRetentionEnabled terra.BoolValue `hcl:"backup_retention_enabled,attr"`
	// BlueprintId: string, required
	BlueprintId terra.StringValue `hcl:"blueprint_id,attr" validate:"required"`
	// BundleId: string, required
	BundleId terra.StringValue `hcl:"bundle_id,attr" validate:"required"`
	// FinalSnapshotName: string, optional
	FinalSnapshotName terra.StringValue `hcl:"final_snapshot_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MasterDatabaseName: string, required
	MasterDatabaseName terra.StringValue `hcl:"master_database_name,attr" validate:"required"`
	// MasterPassword: string, required
	MasterPassword terra.StringValue `hcl:"master_password,attr" validate:"required"`
	// MasterUsername: string, required
	MasterUsername terra.StringValue `hcl:"master_username,attr" validate:"required"`
	// PreferredBackupWindow: string, optional
	PreferredBackupWindow terra.StringValue `hcl:"preferred_backup_window,attr"`
	// PreferredMaintenanceWindow: string, optional
	PreferredMaintenanceWindow terra.StringValue `hcl:"preferred_maintenance_window,attr"`
	// PubliclyAccessible: bool, optional
	PubliclyAccessible terra.BoolValue `hcl:"publicly_accessible,attr"`
	// RelationalDatabaseName: string, required
	RelationalDatabaseName terra.StringValue `hcl:"relational_database_name,attr" validate:"required"`
	// SkipFinalSnapshot: bool, optional
	SkipFinalSnapshot terra.BoolValue `hcl:"skip_final_snapshot,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsLightsailDatabaseAttributes struct {
	ref terra.Reference
}

// ApplyImmediately returns a reference to field apply_immediately of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) ApplyImmediately() terra.BoolValue {
	return terra.ReferenceAsBool(ald.ref.Append("apply_immediately"))
}

// Arn returns a reference to field arn of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("arn"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("availability_zone"))
}

// BackupRetentionEnabled returns a reference to field backup_retention_enabled of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) BackupRetentionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ald.ref.Append("backup_retention_enabled"))
}

// BlueprintId returns a reference to field blueprint_id of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) BlueprintId() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("blueprint_id"))
}

// BundleId returns a reference to field bundle_id of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) BundleId() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("bundle_id"))
}

// CaCertificateIdentifier returns a reference to field ca_certificate_identifier of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) CaCertificateIdentifier() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("ca_certificate_identifier"))
}

// CpuCount returns a reference to field cpu_count of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) CpuCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ald.ref.Append("cpu_count"))
}

// CreatedAt returns a reference to field created_at of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("created_at"))
}

// DiskSize returns a reference to field disk_size of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) DiskSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ald.ref.Append("disk_size"))
}

// Engine returns a reference to field engine of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) Engine() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("engine"))
}

// EngineVersion returns a reference to field engine_version of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("engine_version"))
}

// FinalSnapshotName returns a reference to field final_snapshot_name of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) FinalSnapshotName() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("final_snapshot_name"))
}

// Id returns a reference to field id of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("id"))
}

// MasterDatabaseName returns a reference to field master_database_name of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) MasterDatabaseName() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("master_database_name"))
}

// MasterEndpointAddress returns a reference to field master_endpoint_address of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) MasterEndpointAddress() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("master_endpoint_address"))
}

// MasterEndpointPort returns a reference to field master_endpoint_port of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) MasterEndpointPort() terra.NumberValue {
	return terra.ReferenceAsNumber(ald.ref.Append("master_endpoint_port"))
}

// MasterPassword returns a reference to field master_password of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) MasterPassword() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("master_password"))
}

// MasterUsername returns a reference to field master_username of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) MasterUsername() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("master_username"))
}

// PreferredBackupWindow returns a reference to field preferred_backup_window of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) PreferredBackupWindow() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("preferred_backup_window"))
}

// PreferredMaintenanceWindow returns a reference to field preferred_maintenance_window of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) PreferredMaintenanceWindow() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("preferred_maintenance_window"))
}

// PubliclyAccessible returns a reference to field publicly_accessible of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) PubliclyAccessible() terra.BoolValue {
	return terra.ReferenceAsBool(ald.ref.Append("publicly_accessible"))
}

// RamSize returns a reference to field ram_size of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) RamSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ald.ref.Append("ram_size"))
}

// RelationalDatabaseName returns a reference to field relational_database_name of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) RelationalDatabaseName() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("relational_database_name"))
}

// SecondaryAvailabilityZone returns a reference to field secondary_availability_zone of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) SecondaryAvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("secondary_availability_zone"))
}

// SkipFinalSnapshot returns a reference to field skip_final_snapshot of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) SkipFinalSnapshot() terra.BoolValue {
	return terra.ReferenceAsBool(ald.ref.Append("skip_final_snapshot"))
}

// SupportCode returns a reference to field support_code of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) SupportCode() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("support_code"))
}

// Tags returns a reference to field tags of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ald.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_lightsail_database.
func (ald awsLightsailDatabaseAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ald.ref.Append("tags_all"))
}

type awsLightsailDatabaseState struct {
	ApplyImmediately           bool              `json:"apply_immediately"`
	Arn                        string            `json:"arn"`
	AvailabilityZone           string            `json:"availability_zone"`
	BackupRetentionEnabled     bool              `json:"backup_retention_enabled"`
	BlueprintId                string            `json:"blueprint_id"`
	BundleId                   string            `json:"bundle_id"`
	CaCertificateIdentifier    string            `json:"ca_certificate_identifier"`
	CpuCount                   float64           `json:"cpu_count"`
	CreatedAt                  string            `json:"created_at"`
	DiskSize                   float64           `json:"disk_size"`
	Engine                     string            `json:"engine"`
	EngineVersion              string            `json:"engine_version"`
	FinalSnapshotName          string            `json:"final_snapshot_name"`
	Id                         string            `json:"id"`
	MasterDatabaseName         string            `json:"master_database_name"`
	MasterEndpointAddress      string            `json:"master_endpoint_address"`
	MasterEndpointPort         float64           `json:"master_endpoint_port"`
	MasterPassword             string            `json:"master_password"`
	MasterUsername             string            `json:"master_username"`
	PreferredBackupWindow      string            `json:"preferred_backup_window"`
	PreferredMaintenanceWindow string            `json:"preferred_maintenance_window"`
	PubliclyAccessible         bool              `json:"publicly_accessible"`
	RamSize                    float64           `json:"ram_size"`
	RelationalDatabaseName     string            `json:"relational_database_name"`
	SecondaryAvailabilityZone  string            `json:"secondary_availability_zone"`
	SkipFinalSnapshot          bool              `json:"skip_final_snapshot"`
	SupportCode                string            `json:"support_code"`
	Tags                       map[string]string `json:"tags"`
	TagsAll                    map[string]string `json:"tags_all"`
}
