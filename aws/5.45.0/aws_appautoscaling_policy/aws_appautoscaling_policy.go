// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appautoscaling_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_appautoscaling_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppautoscalingPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aap *Resource) Type() string {
	return "aws_appautoscaling_policy"
}

// LocalName returns the local name for [Resource].
func (aap *Resource) LocalName() string {
	return aap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aap *Resource) Configuration() interface{} {
	return aap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aap *Resource) Dependencies() terra.Dependencies {
	return aap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aap *Resource) LifecycleManagement() *terra.Lifecycle {
	return aap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aap *Resource) Attributes() awsAppautoscalingPolicyAttributes {
	return awsAppautoscalingPolicyAttributes{ref: terra.ReferenceResource(aap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aap *Resource) ImportState(state io.Reader) error {
	aap.state = &awsAppautoscalingPolicyState{}
	if err := json.NewDecoder(state).Decode(aap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aap.Type(), aap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aap *Resource) State() (*awsAppautoscalingPolicyState, bool) {
	return aap.state, aap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aap *Resource) StateMust() *awsAppautoscalingPolicyState {
	if aap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aap.Type(), aap.LocalName()))
	}
	return aap.state
}

// Args contains the configurations for aws_appautoscaling_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyType: string, optional
	PolicyType terra.StringValue `hcl:"policy_type,attr"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
	// ScalableDimension: string, required
	ScalableDimension terra.StringValue `hcl:"scalable_dimension,attr" validate:"required"`
	// ServiceNamespace: string, required
	ServiceNamespace terra.StringValue `hcl:"service_namespace,attr" validate:"required"`
	// StepScalingPolicyConfiguration: optional
	StepScalingPolicyConfiguration *StepScalingPolicyConfiguration `hcl:"step_scaling_policy_configuration,block"`
	// TargetTrackingScalingPolicyConfiguration: optional
	TargetTrackingScalingPolicyConfiguration *TargetTrackingScalingPolicyConfiguration `hcl:"target_tracking_scaling_policy_configuration,block"`
}

type awsAppautoscalingPolicyAttributes struct {
	ref terra.Reference
}

// AlarmArns returns a reference to field alarm_arns of aws_appautoscaling_policy.
func (aap awsAppautoscalingPolicyAttributes) AlarmArns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aap.ref.Append("alarm_arns"))
}

// Arn returns a reference to field arn of aws_appautoscaling_policy.
func (aap awsAppautoscalingPolicyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("arn"))
}

// Id returns a reference to field id of aws_appautoscaling_policy.
func (aap awsAppautoscalingPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("id"))
}

// Name returns a reference to field name of aws_appautoscaling_policy.
func (aap awsAppautoscalingPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("name"))
}

// PolicyType returns a reference to field policy_type of aws_appautoscaling_policy.
func (aap awsAppautoscalingPolicyAttributes) PolicyType() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("policy_type"))
}

// ResourceId returns a reference to field resource_id of aws_appautoscaling_policy.
func (aap awsAppautoscalingPolicyAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("resource_id"))
}

// ScalableDimension returns a reference to field scalable_dimension of aws_appautoscaling_policy.
func (aap awsAppautoscalingPolicyAttributes) ScalableDimension() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("scalable_dimension"))
}

// ServiceNamespace returns a reference to field service_namespace of aws_appautoscaling_policy.
func (aap awsAppautoscalingPolicyAttributes) ServiceNamespace() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("service_namespace"))
}

func (aap awsAppautoscalingPolicyAttributes) StepScalingPolicyConfiguration() terra.ListValue[StepScalingPolicyConfigurationAttributes] {
	return terra.ReferenceAsList[StepScalingPolicyConfigurationAttributes](aap.ref.Append("step_scaling_policy_configuration"))
}

func (aap awsAppautoscalingPolicyAttributes) TargetTrackingScalingPolicyConfiguration() terra.ListValue[TargetTrackingScalingPolicyConfigurationAttributes] {
	return terra.ReferenceAsList[TargetTrackingScalingPolicyConfigurationAttributes](aap.ref.Append("target_tracking_scaling_policy_configuration"))
}

type awsAppautoscalingPolicyState struct {
	AlarmArns                                []string                                        `json:"alarm_arns"`
	Arn                                      string                                          `json:"arn"`
	Id                                       string                                          `json:"id"`
	Name                                     string                                          `json:"name"`
	PolicyType                               string                                          `json:"policy_type"`
	ResourceId                               string                                          `json:"resource_id"`
	ScalableDimension                        string                                          `json:"scalable_dimension"`
	ServiceNamespace                         string                                          `json:"service_namespace"`
	StepScalingPolicyConfiguration           []StepScalingPolicyConfigurationState           `json:"step_scaling_policy_configuration"`
	TargetTrackingScalingPolicyConfiguration []TargetTrackingScalingPolicyConfigurationState `json:"target_tracking_scaling_policy_configuration"`
}
