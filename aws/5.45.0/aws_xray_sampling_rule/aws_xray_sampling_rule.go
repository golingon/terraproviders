// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_xray_sampling_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_xray_sampling_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsXraySamplingRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (axsr *Resource) Type() string {
	return "aws_xray_sampling_rule"
}

// LocalName returns the local name for [Resource].
func (axsr *Resource) LocalName() string {
	return axsr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (axsr *Resource) Configuration() interface{} {
	return axsr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (axsr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(axsr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (axsr *Resource) Dependencies() terra.Dependencies {
	return axsr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (axsr *Resource) LifecycleManagement() *terra.Lifecycle {
	return axsr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (axsr *Resource) Attributes() awsXraySamplingRuleAttributes {
	return awsXraySamplingRuleAttributes{ref: terra.ReferenceResource(axsr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (axsr *Resource) ImportState(state io.Reader) error {
	axsr.state = &awsXraySamplingRuleState{}
	if err := json.NewDecoder(state).Decode(axsr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", axsr.Type(), axsr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (axsr *Resource) State() (*awsXraySamplingRuleState, bool) {
	return axsr.state, axsr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (axsr *Resource) StateMust() *awsXraySamplingRuleState {
	if axsr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", axsr.Type(), axsr.LocalName()))
	}
	return axsr.state
}

// Args contains the configurations for aws_xray_sampling_rule.
type Args struct {
	// Attributes: map of string, optional
	Attributes terra.MapValue[terra.StringValue] `hcl:"attributes,attr"`
	// FixedRate: number, required
	FixedRate terra.NumberValue `hcl:"fixed_rate,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// HttpMethod: string, required
	HttpMethod terra.StringValue `hcl:"http_method,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// ReservoirSize: number, required
	ReservoirSize terra.NumberValue `hcl:"reservoir_size,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// RuleName: string, optional
	RuleName terra.StringValue `hcl:"rule_name,attr"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// ServiceType: string, required
	ServiceType terra.StringValue `hcl:"service_type,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UrlPath: string, required
	UrlPath terra.StringValue `hcl:"url_path,attr" validate:"required"`
	// Version: number, required
	Version terra.NumberValue `hcl:"version,attr" validate:"required"`
}

type awsXraySamplingRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(axsr.ref.Append("arn"))
}

// Attributes returns a reference to field attributes of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) Attributes() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](axsr.ref.Append("attributes"))
}

// FixedRate returns a reference to field fixed_rate of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) FixedRate() terra.NumberValue {
	return terra.ReferenceAsNumber(axsr.ref.Append("fixed_rate"))
}

// Host returns a reference to field host of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(axsr.ref.Append("host"))
}

// HttpMethod returns a reference to field http_method of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) HttpMethod() terra.StringValue {
	return terra.ReferenceAsString(axsr.ref.Append("http_method"))
}

// Id returns a reference to field id of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(axsr.ref.Append("id"))
}

// Priority returns a reference to field priority of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(axsr.ref.Append("priority"))
}

// ReservoirSize returns a reference to field reservoir_size of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) ReservoirSize() terra.NumberValue {
	return terra.ReferenceAsNumber(axsr.ref.Append("reservoir_size"))
}

// ResourceArn returns a reference to field resource_arn of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(axsr.ref.Append("resource_arn"))
}

// RuleName returns a reference to field rule_name of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) RuleName() terra.StringValue {
	return terra.ReferenceAsString(axsr.ref.Append("rule_name"))
}

// ServiceName returns a reference to field service_name of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(axsr.ref.Append("service_name"))
}

// ServiceType returns a reference to field service_type of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) ServiceType() terra.StringValue {
	return terra.ReferenceAsString(axsr.ref.Append("service_type"))
}

// Tags returns a reference to field tags of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](axsr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](axsr.ref.Append("tags_all"))
}

// UrlPath returns a reference to field url_path of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) UrlPath() terra.StringValue {
	return terra.ReferenceAsString(axsr.ref.Append("url_path"))
}

// Version returns a reference to field version of aws_xray_sampling_rule.
func (axsr awsXraySamplingRuleAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(axsr.ref.Append("version"))
}

type awsXraySamplingRuleState struct {
	Arn           string            `json:"arn"`
	Attributes    map[string]string `json:"attributes"`
	FixedRate     float64           `json:"fixed_rate"`
	Host          string            `json:"host"`
	HttpMethod    string            `json:"http_method"`
	Id            string            `json:"id"`
	Priority      float64           `json:"priority"`
	ReservoirSize float64           `json:"reservoir_size"`
	ResourceArn   string            `json:"resource_arn"`
	RuleName      string            `json:"rule_name"`
	ServiceName   string            `json:"service_name"`
	ServiceType   string            `json:"service_type"`
	Tags          map[string]string `json:"tags"`
	TagsAll       map[string]string `json:"tags_all"`
	UrlPath       string            `json:"url_path"`
	Version       float64           `json:"version"`
}
