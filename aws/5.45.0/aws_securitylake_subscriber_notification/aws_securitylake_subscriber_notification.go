// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_securitylake_subscriber_notification

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_securitylake_subscriber_notification.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSecuritylakeSubscriberNotificationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (assn *Resource) Type() string {
	return "aws_securitylake_subscriber_notification"
}

// LocalName returns the local name for [Resource].
func (assn *Resource) LocalName() string {
	return assn.Name
}

// Configuration returns the configuration (args) for [Resource].
func (assn *Resource) Configuration() interface{} {
	return assn.Args
}

// DependOn is used for other resources to depend on [Resource].
func (assn *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(assn)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (assn *Resource) Dependencies() terra.Dependencies {
	return assn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (assn *Resource) LifecycleManagement() *terra.Lifecycle {
	return assn.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (assn *Resource) Attributes() awsSecuritylakeSubscriberNotificationAttributes {
	return awsSecuritylakeSubscriberNotificationAttributes{ref: terra.ReferenceResource(assn)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (assn *Resource) ImportState(state io.Reader) error {
	assn.state = &awsSecuritylakeSubscriberNotificationState{}
	if err := json.NewDecoder(state).Decode(assn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", assn.Type(), assn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (assn *Resource) State() (*awsSecuritylakeSubscriberNotificationState, bool) {
	return assn.state, assn.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (assn *Resource) StateMust() *awsSecuritylakeSubscriberNotificationState {
	if assn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", assn.Type(), assn.LocalName()))
	}
	return assn.state
}

// Args contains the configurations for aws_securitylake_subscriber_notification.
type Args struct {
	// SubscriberId: string, required
	SubscriberId terra.StringValue `hcl:"subscriber_id,attr" validate:"required"`
	// Configuration: min=0
	Configuration []Configuration `hcl:"configuration,block" validate:"min=0"`
}

type awsSecuritylakeSubscriberNotificationAttributes struct {
	ref terra.Reference
}

// EndpointId returns a reference to field endpoint_id of aws_securitylake_subscriber_notification.
func (assn awsSecuritylakeSubscriberNotificationAttributes) EndpointId() terra.StringValue {
	return terra.ReferenceAsString(assn.ref.Append("endpoint_id"))
}

// Id returns a reference to field id of aws_securitylake_subscriber_notification.
func (assn awsSecuritylakeSubscriberNotificationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(assn.ref.Append("id"))
}

// SubscriberId returns a reference to field subscriber_id of aws_securitylake_subscriber_notification.
func (assn awsSecuritylakeSubscriberNotificationAttributes) SubscriberId() terra.StringValue {
	return terra.ReferenceAsString(assn.ref.Append("subscriber_id"))
}

func (assn awsSecuritylakeSubscriberNotificationAttributes) Configuration() terra.ListValue[ConfigurationAttributes] {
	return terra.ReferenceAsList[ConfigurationAttributes](assn.ref.Append("configuration"))
}

type awsSecuritylakeSubscriberNotificationState struct {
	EndpointId    string               `json:"endpoint_id"`
	Id            string               `json:"id"`
	SubscriberId  string               `json:"subscriber_id"`
	Configuration []ConfigurationState `json:"configuration"`
}
