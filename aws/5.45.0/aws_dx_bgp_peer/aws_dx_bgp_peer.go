// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dx_bgp_peer

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dx_bgp_peer.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDxBgpPeerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adbp *Resource) Type() string {
	return "aws_dx_bgp_peer"
}

// LocalName returns the local name for [Resource].
func (adbp *Resource) LocalName() string {
	return adbp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adbp *Resource) Configuration() interface{} {
	return adbp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adbp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adbp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adbp *Resource) Dependencies() terra.Dependencies {
	return adbp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adbp *Resource) LifecycleManagement() *terra.Lifecycle {
	return adbp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adbp *Resource) Attributes() awsDxBgpPeerAttributes {
	return awsDxBgpPeerAttributes{ref: terra.ReferenceResource(adbp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adbp *Resource) ImportState(state io.Reader) error {
	adbp.state = &awsDxBgpPeerState{}
	if err := json.NewDecoder(state).Decode(adbp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adbp.Type(), adbp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adbp *Resource) State() (*awsDxBgpPeerState, bool) {
	return adbp.state, adbp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adbp *Resource) StateMust() *awsDxBgpPeerState {
	if adbp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adbp.Type(), adbp.LocalName()))
	}
	return adbp.state
}

// Args contains the configurations for aws_dx_bgp_peer.
type Args struct {
	// AddressFamily: string, required
	AddressFamily terra.StringValue `hcl:"address_family,attr" validate:"required"`
	// AmazonAddress: string, optional
	AmazonAddress terra.StringValue `hcl:"amazon_address,attr"`
	// BgpAsn: number, required
	BgpAsn terra.NumberValue `hcl:"bgp_asn,attr" validate:"required"`
	// BgpAuthKey: string, optional
	BgpAuthKey terra.StringValue `hcl:"bgp_auth_key,attr"`
	// CustomerAddress: string, optional
	CustomerAddress terra.StringValue `hcl:"customer_address,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VirtualInterfaceId: string, required
	VirtualInterfaceId terra.StringValue `hcl:"virtual_interface_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDxBgpPeerAttributes struct {
	ref terra.Reference
}

// AddressFamily returns a reference to field address_family of aws_dx_bgp_peer.
func (adbp awsDxBgpPeerAttributes) AddressFamily() terra.StringValue {
	return terra.ReferenceAsString(adbp.ref.Append("address_family"))
}

// AmazonAddress returns a reference to field amazon_address of aws_dx_bgp_peer.
func (adbp awsDxBgpPeerAttributes) AmazonAddress() terra.StringValue {
	return terra.ReferenceAsString(adbp.ref.Append("amazon_address"))
}

// AwsDevice returns a reference to field aws_device of aws_dx_bgp_peer.
func (adbp awsDxBgpPeerAttributes) AwsDevice() terra.StringValue {
	return terra.ReferenceAsString(adbp.ref.Append("aws_device"))
}

// BgpAsn returns a reference to field bgp_asn of aws_dx_bgp_peer.
func (adbp awsDxBgpPeerAttributes) BgpAsn() terra.NumberValue {
	return terra.ReferenceAsNumber(adbp.ref.Append("bgp_asn"))
}

// BgpAuthKey returns a reference to field bgp_auth_key of aws_dx_bgp_peer.
func (adbp awsDxBgpPeerAttributes) BgpAuthKey() terra.StringValue {
	return terra.ReferenceAsString(adbp.ref.Append("bgp_auth_key"))
}

// BgpPeerId returns a reference to field bgp_peer_id of aws_dx_bgp_peer.
func (adbp awsDxBgpPeerAttributes) BgpPeerId() terra.StringValue {
	return terra.ReferenceAsString(adbp.ref.Append("bgp_peer_id"))
}

// BgpStatus returns a reference to field bgp_status of aws_dx_bgp_peer.
func (adbp awsDxBgpPeerAttributes) BgpStatus() terra.StringValue {
	return terra.ReferenceAsString(adbp.ref.Append("bgp_status"))
}

// CustomerAddress returns a reference to field customer_address of aws_dx_bgp_peer.
func (adbp awsDxBgpPeerAttributes) CustomerAddress() terra.StringValue {
	return terra.ReferenceAsString(adbp.ref.Append("customer_address"))
}

// Id returns a reference to field id of aws_dx_bgp_peer.
func (adbp awsDxBgpPeerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adbp.ref.Append("id"))
}

// VirtualInterfaceId returns a reference to field virtual_interface_id of aws_dx_bgp_peer.
func (adbp awsDxBgpPeerAttributes) VirtualInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(adbp.ref.Append("virtual_interface_id"))
}

func (adbp awsDxBgpPeerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adbp.ref.Append("timeouts"))
}

type awsDxBgpPeerState struct {
	AddressFamily      string         `json:"address_family"`
	AmazonAddress      string         `json:"amazon_address"`
	AwsDevice          string         `json:"aws_device"`
	BgpAsn             float64        `json:"bgp_asn"`
	BgpAuthKey         string         `json:"bgp_auth_key"`
	BgpPeerId          string         `json:"bgp_peer_id"`
	BgpStatus          string         `json:"bgp_status"`
	CustomerAddress    string         `json:"customer_address"`
	Id                 string         `json:"id"`
	VirtualInterfaceId string         `json:"virtual_interface_id"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
