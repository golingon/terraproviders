// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_event_permission

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudwatch_event_permission.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudwatchEventPermissionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acep *Resource) Type() string {
	return "aws_cloudwatch_event_permission"
}

// LocalName returns the local name for [Resource].
func (acep *Resource) LocalName() string {
	return acep.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acep *Resource) Configuration() interface{} {
	return acep.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acep *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acep)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acep *Resource) Dependencies() terra.Dependencies {
	return acep.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acep *Resource) LifecycleManagement() *terra.Lifecycle {
	return acep.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acep *Resource) Attributes() awsCloudwatchEventPermissionAttributes {
	return awsCloudwatchEventPermissionAttributes{ref: terra.ReferenceResource(acep)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acep *Resource) ImportState(state io.Reader) error {
	acep.state = &awsCloudwatchEventPermissionState{}
	if err := json.NewDecoder(state).Decode(acep.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acep.Type(), acep.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acep *Resource) State() (*awsCloudwatchEventPermissionState, bool) {
	return acep.state, acep.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acep *Resource) StateMust() *awsCloudwatchEventPermissionState {
	if acep.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acep.Type(), acep.LocalName()))
	}
	return acep.state
}

// Args contains the configurations for aws_cloudwatch_event_permission.
type Args struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// EventBusName: string, optional
	EventBusName terra.StringValue `hcl:"event_bus_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
	// StatementId: string, required
	StatementId terra.StringValue `hcl:"statement_id,attr" validate:"required"`
	// Condition: optional
	Condition *Condition `hcl:"condition,block"`
}

type awsCloudwatchEventPermissionAttributes struct {
	ref terra.Reference
}

// Action returns a reference to field action of aws_cloudwatch_event_permission.
func (acep awsCloudwatchEventPermissionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(acep.ref.Append("action"))
}

// EventBusName returns a reference to field event_bus_name of aws_cloudwatch_event_permission.
func (acep awsCloudwatchEventPermissionAttributes) EventBusName() terra.StringValue {
	return terra.ReferenceAsString(acep.ref.Append("event_bus_name"))
}

// Id returns a reference to field id of aws_cloudwatch_event_permission.
func (acep awsCloudwatchEventPermissionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acep.ref.Append("id"))
}

// Principal returns a reference to field principal of aws_cloudwatch_event_permission.
func (acep awsCloudwatchEventPermissionAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(acep.ref.Append("principal"))
}

// StatementId returns a reference to field statement_id of aws_cloudwatch_event_permission.
func (acep awsCloudwatchEventPermissionAttributes) StatementId() terra.StringValue {
	return terra.ReferenceAsString(acep.ref.Append("statement_id"))
}

func (acep awsCloudwatchEventPermissionAttributes) Condition() terra.ListValue[ConditionAttributes] {
	return terra.ReferenceAsList[ConditionAttributes](acep.ref.Append("condition"))
}

type awsCloudwatchEventPermissionState struct {
	Action       string           `json:"action"`
	EventBusName string           `json:"event_bus_name"`
	Id           string           `json:"id"`
	Principal    string           `json:"principal"`
	StatementId  string           `json:"statement_id"`
	Condition    []ConditionState `json:"condition"`
}
