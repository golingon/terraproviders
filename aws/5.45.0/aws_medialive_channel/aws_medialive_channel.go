// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_medialive_channel

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_medialive_channel.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMedialiveChannelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amc *Resource) Type() string {
	return "aws_medialive_channel"
}

// LocalName returns the local name for [Resource].
func (amc *Resource) LocalName() string {
	return amc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amc *Resource) Configuration() interface{} {
	return amc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amc *Resource) Dependencies() terra.Dependencies {
	return amc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amc *Resource) LifecycleManagement() *terra.Lifecycle {
	return amc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amc *Resource) Attributes() awsMedialiveChannelAttributes {
	return awsMedialiveChannelAttributes{ref: terra.ReferenceResource(amc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amc *Resource) ImportState(state io.Reader) error {
	amc.state = &awsMedialiveChannelState{}
	if err := json.NewDecoder(state).Decode(amc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amc.Type(), amc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amc *Resource) State() (*awsMedialiveChannelState, bool) {
	return amc.state, amc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amc *Resource) StateMust() *awsMedialiveChannelState {
	if amc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amc.Type(), amc.LocalName()))
	}
	return amc.state
}

// Args contains the configurations for aws_medialive_channel.
type Args struct {
	// ChannelClass: string, required
	ChannelClass terra.StringValue `hcl:"channel_class,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogLevel: string, optional
	LogLevel terra.StringValue `hcl:"log_level,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// StartChannel: bool, optional
	StartChannel terra.BoolValue `hcl:"start_channel,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CdiInputSpecification: optional
	CdiInputSpecification *CdiInputSpecification `hcl:"cdi_input_specification,block"`
	// Destinations: min=1
	Destinations []Destinations `hcl:"destinations,block" validate:"min=1"`
	// EncoderSettings: required
	EncoderSettings *EncoderSettings `hcl:"encoder_settings,block" validate:"required"`
	// InputAttachments: min=1
	InputAttachments []InputAttachments `hcl:"input_attachments,block" validate:"min=1"`
	// InputSpecification: required
	InputSpecification *InputSpecification `hcl:"input_specification,block" validate:"required"`
	// Maintenance: optional
	Maintenance *Maintenance `hcl:"maintenance,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Vpc: optional
	Vpc *Vpc `hcl:"vpc,block"`
}

type awsMedialiveChannelAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_medialive_channel.
func (amc awsMedialiveChannelAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("arn"))
}

// ChannelClass returns a reference to field channel_class of aws_medialive_channel.
func (amc awsMedialiveChannelAttributes) ChannelClass() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("channel_class"))
}

// ChannelId returns a reference to field channel_id of aws_medialive_channel.
func (amc awsMedialiveChannelAttributes) ChannelId() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("channel_id"))
}

// Id returns a reference to field id of aws_medialive_channel.
func (amc awsMedialiveChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("id"))
}

// LogLevel returns a reference to field log_level of aws_medialive_channel.
func (amc awsMedialiveChannelAttributes) LogLevel() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("log_level"))
}

// Name returns a reference to field name of aws_medialive_channel.
func (amc awsMedialiveChannelAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_medialive_channel.
func (amc awsMedialiveChannelAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("role_arn"))
}

// StartChannel returns a reference to field start_channel of aws_medialive_channel.
func (amc awsMedialiveChannelAttributes) StartChannel() terra.BoolValue {
	return terra.ReferenceAsBool(amc.ref.Append("start_channel"))
}

// Tags returns a reference to field tags of aws_medialive_channel.
func (amc awsMedialiveChannelAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_medialive_channel.
func (amc awsMedialiveChannelAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amc.ref.Append("tags_all"))
}

func (amc awsMedialiveChannelAttributes) CdiInputSpecification() terra.ListValue[CdiInputSpecificationAttributes] {
	return terra.ReferenceAsList[CdiInputSpecificationAttributes](amc.ref.Append("cdi_input_specification"))
}

func (amc awsMedialiveChannelAttributes) Destinations() terra.SetValue[DestinationsAttributes] {
	return terra.ReferenceAsSet[DestinationsAttributes](amc.ref.Append("destinations"))
}

func (amc awsMedialiveChannelAttributes) EncoderSettings() terra.ListValue[EncoderSettingsAttributes] {
	return terra.ReferenceAsList[EncoderSettingsAttributes](amc.ref.Append("encoder_settings"))
}

func (amc awsMedialiveChannelAttributes) InputAttachments() terra.SetValue[InputAttachmentsAttributes] {
	return terra.ReferenceAsSet[InputAttachmentsAttributes](amc.ref.Append("input_attachments"))
}

func (amc awsMedialiveChannelAttributes) InputSpecification() terra.ListValue[InputSpecificationAttributes] {
	return terra.ReferenceAsList[InputSpecificationAttributes](amc.ref.Append("input_specification"))
}

func (amc awsMedialiveChannelAttributes) Maintenance() terra.ListValue[MaintenanceAttributes] {
	return terra.ReferenceAsList[MaintenanceAttributes](amc.ref.Append("maintenance"))
}

func (amc awsMedialiveChannelAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amc.ref.Append("timeouts"))
}

func (amc awsMedialiveChannelAttributes) Vpc() terra.ListValue[VpcAttributes] {
	return terra.ReferenceAsList[VpcAttributes](amc.ref.Append("vpc"))
}

type awsMedialiveChannelState struct {
	Arn                   string                       `json:"arn"`
	ChannelClass          string                       `json:"channel_class"`
	ChannelId             string                       `json:"channel_id"`
	Id                    string                       `json:"id"`
	LogLevel              string                       `json:"log_level"`
	Name                  string                       `json:"name"`
	RoleArn               string                       `json:"role_arn"`
	StartChannel          bool                         `json:"start_channel"`
	Tags                  map[string]string            `json:"tags"`
	TagsAll               map[string]string            `json:"tags_all"`
	CdiInputSpecification []CdiInputSpecificationState `json:"cdi_input_specification"`
	Destinations          []DestinationsState          `json:"destinations"`
	EncoderSettings       []EncoderSettingsState       `json:"encoder_settings"`
	InputAttachments      []InputAttachmentsState      `json:"input_attachments"`
	InputSpecification    []InputSpecificationState    `json:"input_specification"`
	Maintenance           []MaintenanceState           `json:"maintenance"`
	Timeouts              *TimeoutsState               `json:"timeouts"`
	Vpc                   []VpcState                   `json:"vpc"`
}
