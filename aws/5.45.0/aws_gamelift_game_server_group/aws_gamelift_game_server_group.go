// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_gamelift_game_server_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_gamelift_game_server_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGameliftGameServerGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aggsg *Resource) Type() string {
	return "aws_gamelift_game_server_group"
}

// LocalName returns the local name for [Resource].
func (aggsg *Resource) LocalName() string {
	return aggsg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aggsg *Resource) Configuration() interface{} {
	return aggsg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aggsg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aggsg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aggsg *Resource) Dependencies() terra.Dependencies {
	return aggsg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aggsg *Resource) LifecycleManagement() *terra.Lifecycle {
	return aggsg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aggsg *Resource) Attributes() awsGameliftGameServerGroupAttributes {
	return awsGameliftGameServerGroupAttributes{ref: terra.ReferenceResource(aggsg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aggsg *Resource) ImportState(state io.Reader) error {
	aggsg.state = &awsGameliftGameServerGroupState{}
	if err := json.NewDecoder(state).Decode(aggsg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aggsg.Type(), aggsg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aggsg *Resource) State() (*awsGameliftGameServerGroupState, bool) {
	return aggsg.state, aggsg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aggsg *Resource) StateMust() *awsGameliftGameServerGroupState {
	if aggsg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aggsg.Type(), aggsg.LocalName()))
	}
	return aggsg.state
}

// Args contains the configurations for aws_gamelift_game_server_group.
type Args struct {
	// BalancingStrategy: string, optional
	BalancingStrategy terra.StringValue `hcl:"balancing_strategy,attr"`
	// GameServerGroupName: string, required
	GameServerGroupName terra.StringValue `hcl:"game_server_group_name,attr" validate:"required"`
	// GameServerProtectionPolicy: string, optional
	GameServerProtectionPolicy terra.StringValue `hcl:"game_server_protection_policy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxSize: number, required
	MaxSize terra.NumberValue `hcl:"max_size,attr" validate:"required"`
	// MinSize: number, required
	MinSize terra.NumberValue `hcl:"min_size,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcSubnets: set of string, optional
	VpcSubnets terra.SetValue[terra.StringValue] `hcl:"vpc_subnets,attr"`
	// AutoScalingPolicy: optional
	AutoScalingPolicy *AutoScalingPolicy `hcl:"auto_scaling_policy,block"`
	// InstanceDefinition: min=2,max=20
	InstanceDefinition []InstanceDefinition `hcl:"instance_definition,block" validate:"min=2,max=20"`
	// LaunchTemplate: required
	LaunchTemplate *LaunchTemplate `hcl:"launch_template,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsGameliftGameServerGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_gamelift_game_server_group.
func (aggsg awsGameliftGameServerGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aggsg.ref.Append("arn"))
}

// AutoScalingGroupArn returns a reference to field auto_scaling_group_arn of aws_gamelift_game_server_group.
func (aggsg awsGameliftGameServerGroupAttributes) AutoScalingGroupArn() terra.StringValue {
	return terra.ReferenceAsString(aggsg.ref.Append("auto_scaling_group_arn"))
}

// BalancingStrategy returns a reference to field balancing_strategy of aws_gamelift_game_server_group.
func (aggsg awsGameliftGameServerGroupAttributes) BalancingStrategy() terra.StringValue {
	return terra.ReferenceAsString(aggsg.ref.Append("balancing_strategy"))
}

// GameServerGroupName returns a reference to field game_server_group_name of aws_gamelift_game_server_group.
func (aggsg awsGameliftGameServerGroupAttributes) GameServerGroupName() terra.StringValue {
	return terra.ReferenceAsString(aggsg.ref.Append("game_server_group_name"))
}

// GameServerProtectionPolicy returns a reference to field game_server_protection_policy of aws_gamelift_game_server_group.
func (aggsg awsGameliftGameServerGroupAttributes) GameServerProtectionPolicy() terra.StringValue {
	return terra.ReferenceAsString(aggsg.ref.Append("game_server_protection_policy"))
}

// Id returns a reference to field id of aws_gamelift_game_server_group.
func (aggsg awsGameliftGameServerGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aggsg.ref.Append("id"))
}

// MaxSize returns a reference to field max_size of aws_gamelift_game_server_group.
func (aggsg awsGameliftGameServerGroupAttributes) MaxSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aggsg.ref.Append("max_size"))
}

// MinSize returns a reference to field min_size of aws_gamelift_game_server_group.
func (aggsg awsGameliftGameServerGroupAttributes) MinSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aggsg.ref.Append("min_size"))
}

// RoleArn returns a reference to field role_arn of aws_gamelift_game_server_group.
func (aggsg awsGameliftGameServerGroupAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(aggsg.ref.Append("role_arn"))
}

// Tags returns a reference to field tags of aws_gamelift_game_server_group.
func (aggsg awsGameliftGameServerGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aggsg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_gamelift_game_server_group.
func (aggsg awsGameliftGameServerGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aggsg.ref.Append("tags_all"))
}

// VpcSubnets returns a reference to field vpc_subnets of aws_gamelift_game_server_group.
func (aggsg awsGameliftGameServerGroupAttributes) VpcSubnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aggsg.ref.Append("vpc_subnets"))
}

func (aggsg awsGameliftGameServerGroupAttributes) AutoScalingPolicy() terra.ListValue[AutoScalingPolicyAttributes] {
	return terra.ReferenceAsList[AutoScalingPolicyAttributes](aggsg.ref.Append("auto_scaling_policy"))
}

func (aggsg awsGameliftGameServerGroupAttributes) InstanceDefinition() terra.SetValue[InstanceDefinitionAttributes] {
	return terra.ReferenceAsSet[InstanceDefinitionAttributes](aggsg.ref.Append("instance_definition"))
}

func (aggsg awsGameliftGameServerGroupAttributes) LaunchTemplate() terra.ListValue[LaunchTemplateAttributes] {
	return terra.ReferenceAsList[LaunchTemplateAttributes](aggsg.ref.Append("launch_template"))
}

func (aggsg awsGameliftGameServerGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aggsg.ref.Append("timeouts"))
}

type awsGameliftGameServerGroupState struct {
	Arn                        string                    `json:"arn"`
	AutoScalingGroupArn        string                    `json:"auto_scaling_group_arn"`
	BalancingStrategy          string                    `json:"balancing_strategy"`
	GameServerGroupName        string                    `json:"game_server_group_name"`
	GameServerProtectionPolicy string                    `json:"game_server_protection_policy"`
	Id                         string                    `json:"id"`
	MaxSize                    float64                   `json:"max_size"`
	MinSize                    float64                   `json:"min_size"`
	RoleArn                    string                    `json:"role_arn"`
	Tags                       map[string]string         `json:"tags"`
	TagsAll                    map[string]string         `json:"tags_all"`
	VpcSubnets                 []string                  `json:"vpc_subnets"`
	AutoScalingPolicy          []AutoScalingPolicyState  `json:"auto_scaling_policy"`
	InstanceDefinition         []InstanceDefinitionState `json:"instance_definition"`
	LaunchTemplate             []LaunchTemplateState     `json:"launch_template"`
	Timeouts                   *TimeoutsState            `json:"timeouts"`
}
