// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3control_access_grant

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3control_access_grant.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3ControlAccessGrantState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asag *Resource) Type() string {
	return "aws_s3control_access_grant"
}

// LocalName returns the local name for [Resource].
func (asag *Resource) LocalName() string {
	return asag.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asag *Resource) Configuration() interface{} {
	return asag.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asag *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asag)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asag *Resource) Dependencies() terra.Dependencies {
	return asag.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asag *Resource) LifecycleManagement() *terra.Lifecycle {
	return asag.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asag *Resource) Attributes() awsS3ControlAccessGrantAttributes {
	return awsS3ControlAccessGrantAttributes{ref: terra.ReferenceResource(asag)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asag *Resource) ImportState(state io.Reader) error {
	asag.state = &awsS3ControlAccessGrantState{}
	if err := json.NewDecoder(state).Decode(asag.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asag.Type(), asag.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asag *Resource) State() (*awsS3ControlAccessGrantState, bool) {
	return asag.state, asag.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asag *Resource) StateMust() *awsS3ControlAccessGrantState {
	if asag.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asag.Type(), asag.LocalName()))
	}
	return asag.state
}

// Args contains the configurations for aws_s3control_access_grant.
type Args struct {
	// AccessGrantsLocationId: string, required
	AccessGrantsLocationId terra.StringValue `hcl:"access_grants_location_id,attr" validate:"required"`
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Permission: string, required
	Permission terra.StringValue `hcl:"permission,attr" validate:"required"`
	// S3PrefixType: string, optional
	S3PrefixType terra.StringValue `hcl:"s3_prefix_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AccessGrantsLocationConfiguration: min=0
	AccessGrantsLocationConfiguration []AccessGrantsLocationConfiguration `hcl:"access_grants_location_configuration,block" validate:"min=0"`
	// Grantee: min=0
	Grantee []Grantee `hcl:"grantee,block" validate:"min=0"`
}

type awsS3ControlAccessGrantAttributes struct {
	ref terra.Reference
}

// AccessGrantArn returns a reference to field access_grant_arn of aws_s3control_access_grant.
func (asag awsS3ControlAccessGrantAttributes) AccessGrantArn() terra.StringValue {
	return terra.ReferenceAsString(asag.ref.Append("access_grant_arn"))
}

// AccessGrantId returns a reference to field access_grant_id of aws_s3control_access_grant.
func (asag awsS3ControlAccessGrantAttributes) AccessGrantId() terra.StringValue {
	return terra.ReferenceAsString(asag.ref.Append("access_grant_id"))
}

// AccessGrantsLocationId returns a reference to field access_grants_location_id of aws_s3control_access_grant.
func (asag awsS3ControlAccessGrantAttributes) AccessGrantsLocationId() terra.StringValue {
	return terra.ReferenceAsString(asag.ref.Append("access_grants_location_id"))
}

// AccountId returns a reference to field account_id of aws_s3control_access_grant.
func (asag awsS3ControlAccessGrantAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(asag.ref.Append("account_id"))
}

// GrantScope returns a reference to field grant_scope of aws_s3control_access_grant.
func (asag awsS3ControlAccessGrantAttributes) GrantScope() terra.StringValue {
	return terra.ReferenceAsString(asag.ref.Append("grant_scope"))
}

// Id returns a reference to field id of aws_s3control_access_grant.
func (asag awsS3ControlAccessGrantAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asag.ref.Append("id"))
}

// Permission returns a reference to field permission of aws_s3control_access_grant.
func (asag awsS3ControlAccessGrantAttributes) Permission() terra.StringValue {
	return terra.ReferenceAsString(asag.ref.Append("permission"))
}

// S3PrefixType returns a reference to field s3_prefix_type of aws_s3control_access_grant.
func (asag awsS3ControlAccessGrantAttributes) S3PrefixType() terra.StringValue {
	return terra.ReferenceAsString(asag.ref.Append("s3_prefix_type"))
}

// Tags returns a reference to field tags of aws_s3control_access_grant.
func (asag awsS3ControlAccessGrantAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asag.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_s3control_access_grant.
func (asag awsS3ControlAccessGrantAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asag.ref.Append("tags_all"))
}

func (asag awsS3ControlAccessGrantAttributes) AccessGrantsLocationConfiguration() terra.ListValue[AccessGrantsLocationConfigurationAttributes] {
	return terra.ReferenceAsList[AccessGrantsLocationConfigurationAttributes](asag.ref.Append("access_grants_location_configuration"))
}

func (asag awsS3ControlAccessGrantAttributes) Grantee() terra.ListValue[GranteeAttributes] {
	return terra.ReferenceAsList[GranteeAttributes](asag.ref.Append("grantee"))
}

type awsS3ControlAccessGrantState struct {
	AccessGrantArn                    string                                   `json:"access_grant_arn"`
	AccessGrantId                     string                                   `json:"access_grant_id"`
	AccessGrantsLocationId            string                                   `json:"access_grants_location_id"`
	AccountId                         string                                   `json:"account_id"`
	GrantScope                        string                                   `json:"grant_scope"`
	Id                                string                                   `json:"id"`
	Permission                        string                                   `json:"permission"`
	S3PrefixType                      string                                   `json:"s3_prefix_type"`
	Tags                              map[string]string                        `json:"tags"`
	TagsAll                           map[string]string                        `json:"tags_all"`
	AccessGrantsLocationConfiguration []AccessGrantsLocationConfigurationState `json:"access_grants_location_configuration"`
	Grantee                           []GranteeState                           `json:"grantee"`
}
