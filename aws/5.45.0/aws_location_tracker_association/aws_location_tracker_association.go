// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_location_tracker_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_location_tracker_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLocationTrackerAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alta *Resource) Type() string {
	return "aws_location_tracker_association"
}

// LocalName returns the local name for [Resource].
func (alta *Resource) LocalName() string {
	return alta.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alta *Resource) Configuration() interface{} {
	return alta.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alta *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alta)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alta *Resource) Dependencies() terra.Dependencies {
	return alta.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alta *Resource) LifecycleManagement() *terra.Lifecycle {
	return alta.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alta *Resource) Attributes() awsLocationTrackerAssociationAttributes {
	return awsLocationTrackerAssociationAttributes{ref: terra.ReferenceResource(alta)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alta *Resource) ImportState(state io.Reader) error {
	alta.state = &awsLocationTrackerAssociationState{}
	if err := json.NewDecoder(state).Decode(alta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alta.Type(), alta.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alta *Resource) State() (*awsLocationTrackerAssociationState, bool) {
	return alta.state, alta.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alta *Resource) StateMust() *awsLocationTrackerAssociationState {
	if alta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alta.Type(), alta.LocalName()))
	}
	return alta.state
}

// Args contains the configurations for aws_location_tracker_association.
type Args struct {
	// ConsumerArn: string, required
	ConsumerArn terra.StringValue `hcl:"consumer_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TrackerName: string, required
	TrackerName terra.StringValue `hcl:"tracker_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsLocationTrackerAssociationAttributes struct {
	ref terra.Reference
}

// ConsumerArn returns a reference to field consumer_arn of aws_location_tracker_association.
func (alta awsLocationTrackerAssociationAttributes) ConsumerArn() terra.StringValue {
	return terra.ReferenceAsString(alta.ref.Append("consumer_arn"))
}

// Id returns a reference to field id of aws_location_tracker_association.
func (alta awsLocationTrackerAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alta.ref.Append("id"))
}

// TrackerName returns a reference to field tracker_name of aws_location_tracker_association.
func (alta awsLocationTrackerAssociationAttributes) TrackerName() terra.StringValue {
	return terra.ReferenceAsString(alta.ref.Append("tracker_name"))
}

func (alta awsLocationTrackerAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alta.ref.Append("timeouts"))
}

type awsLocationTrackerAssociationState struct {
	ConsumerArn string         `json:"consumer_arn"`
	Id          string         `json:"id"`
	TrackerName string         `json:"tracker_name"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
