// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_transfer_connector

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type As2Config struct {
	// Compression: string, required
	Compression terra.StringValue `hcl:"compression,attr" validate:"required"`
	// EncryptionAlgorithm: string, required
	EncryptionAlgorithm terra.StringValue `hcl:"encryption_algorithm,attr" validate:"required"`
	// LocalProfileId: string, required
	LocalProfileId terra.StringValue `hcl:"local_profile_id,attr" validate:"required"`
	// MdnResponse: string, required
	MdnResponse terra.StringValue `hcl:"mdn_response,attr" validate:"required"`
	// MdnSigningAlgorithm: string, optional
	MdnSigningAlgorithm terra.StringValue `hcl:"mdn_signing_algorithm,attr"`
	// MessageSubject: string, optional
	MessageSubject terra.StringValue `hcl:"message_subject,attr"`
	// PartnerProfileId: string, required
	PartnerProfileId terra.StringValue `hcl:"partner_profile_id,attr" validate:"required"`
	// SigningAlgorithm: string, required
	SigningAlgorithm terra.StringValue `hcl:"signing_algorithm,attr" validate:"required"`
}

type SftpConfig struct {
	// TrustedHostKeys: set of string, optional
	TrustedHostKeys terra.SetValue[terra.StringValue] `hcl:"trusted_host_keys,attr"`
	// UserSecretId: string, optional
	UserSecretId terra.StringValue `hcl:"user_secret_id,attr"`
}

type As2ConfigAttributes struct {
	ref terra.Reference
}

func (ac As2ConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac As2ConfigAttributes) InternalWithRef(ref terra.Reference) As2ConfigAttributes {
	return As2ConfigAttributes{ref: ref}
}

func (ac As2ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac As2ConfigAttributes) Compression() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("compression"))
}

func (ac As2ConfigAttributes) EncryptionAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("encryption_algorithm"))
}

func (ac As2ConfigAttributes) LocalProfileId() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("local_profile_id"))
}

func (ac As2ConfigAttributes) MdnResponse() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("mdn_response"))
}

func (ac As2ConfigAttributes) MdnSigningAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("mdn_signing_algorithm"))
}

func (ac As2ConfigAttributes) MessageSubject() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("message_subject"))
}

func (ac As2ConfigAttributes) PartnerProfileId() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("partner_profile_id"))
}

func (ac As2ConfigAttributes) SigningAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("signing_algorithm"))
}

type SftpConfigAttributes struct {
	ref terra.Reference
}

func (sc SftpConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SftpConfigAttributes) InternalWithRef(ref terra.Reference) SftpConfigAttributes {
	return SftpConfigAttributes{ref: ref}
}

func (sc SftpConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SftpConfigAttributes) TrustedHostKeys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sc.ref.Append("trusted_host_keys"))
}

func (sc SftpConfigAttributes) UserSecretId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("user_secret_id"))
}

type As2ConfigState struct {
	Compression         string `json:"compression"`
	EncryptionAlgorithm string `json:"encryption_algorithm"`
	LocalProfileId      string `json:"local_profile_id"`
	MdnResponse         string `json:"mdn_response"`
	MdnSigningAlgorithm string `json:"mdn_signing_algorithm"`
	MessageSubject      string `json:"message_subject"`
	PartnerProfileId    string `json:"partner_profile_id"`
	SigningAlgorithm    string `json:"signing_algorithm"`
}

type SftpConfigState struct {
	TrustedHostKeys []string `json:"trusted_host_keys"`
	UserSecretId    string   `json:"user_secret_id"`
}
