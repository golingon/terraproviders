// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_transfer_connector

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_transfer_connector.
type Resource struct {
	Name      string
	Args      Args
	state     *awsTransferConnectorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (atc *Resource) Type() string {
	return "aws_transfer_connector"
}

// LocalName returns the local name for [Resource].
func (atc *Resource) LocalName() string {
	return atc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (atc *Resource) Configuration() interface{} {
	return atc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (atc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(atc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (atc *Resource) Dependencies() terra.Dependencies {
	return atc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (atc *Resource) LifecycleManagement() *terra.Lifecycle {
	return atc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (atc *Resource) Attributes() awsTransferConnectorAttributes {
	return awsTransferConnectorAttributes{ref: terra.ReferenceResource(atc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (atc *Resource) ImportState(state io.Reader) error {
	atc.state = &awsTransferConnectorState{}
	if err := json.NewDecoder(state).Decode(atc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", atc.Type(), atc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (atc *Resource) State() (*awsTransferConnectorState, bool) {
	return atc.state, atc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (atc *Resource) StateMust() *awsTransferConnectorState {
	if atc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", atc.Type(), atc.LocalName()))
	}
	return atc.state
}

// Args contains the configurations for aws_transfer_connector.
type Args struct {
	// AccessRole: string, required
	AccessRole terra.StringValue `hcl:"access_role,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoggingRole: string, optional
	LoggingRole terra.StringValue `hcl:"logging_role,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// As2Config: optional
	As2Config *As2Config `hcl:"as2_config,block"`
	// SftpConfig: optional
	SftpConfig *SftpConfig `hcl:"sftp_config,block"`
}

type awsTransferConnectorAttributes struct {
	ref terra.Reference
}

// AccessRole returns a reference to field access_role of aws_transfer_connector.
func (atc awsTransferConnectorAttributes) AccessRole() terra.StringValue {
	return terra.ReferenceAsString(atc.ref.Append("access_role"))
}

// Arn returns a reference to field arn of aws_transfer_connector.
func (atc awsTransferConnectorAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(atc.ref.Append("arn"))
}

// ConnectorId returns a reference to field connector_id of aws_transfer_connector.
func (atc awsTransferConnectorAttributes) ConnectorId() terra.StringValue {
	return terra.ReferenceAsString(atc.ref.Append("connector_id"))
}

// Id returns a reference to field id of aws_transfer_connector.
func (atc awsTransferConnectorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(atc.ref.Append("id"))
}

// LoggingRole returns a reference to field logging_role of aws_transfer_connector.
func (atc awsTransferConnectorAttributes) LoggingRole() terra.StringValue {
	return terra.ReferenceAsString(atc.ref.Append("logging_role"))
}

// Tags returns a reference to field tags of aws_transfer_connector.
func (atc awsTransferConnectorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](atc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_transfer_connector.
func (atc awsTransferConnectorAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](atc.ref.Append("tags_all"))
}

// Url returns a reference to field url of aws_transfer_connector.
func (atc awsTransferConnectorAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(atc.ref.Append("url"))
}

func (atc awsTransferConnectorAttributes) As2Config() terra.ListValue[As2ConfigAttributes] {
	return terra.ReferenceAsList[As2ConfigAttributes](atc.ref.Append("as2_config"))
}

func (atc awsTransferConnectorAttributes) SftpConfig() terra.ListValue[SftpConfigAttributes] {
	return terra.ReferenceAsList[SftpConfigAttributes](atc.ref.Append("sftp_config"))
}

type awsTransferConnectorState struct {
	AccessRole  string            `json:"access_role"`
	Arn         string            `json:"arn"`
	ConnectorId string            `json:"connector_id"`
	Id          string            `json:"id"`
	LoggingRole string            `json:"logging_role"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	Url         string            `json:"url"`
	As2Config   []As2ConfigState  `json:"as2_config"`
	SftpConfig  []SftpConfigState `json:"sftp_config"`
}
