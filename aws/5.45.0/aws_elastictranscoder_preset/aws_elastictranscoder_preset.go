// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elastictranscoder_preset

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_elastictranscoder_preset.
type Resource struct {
	Name      string
	Args      Args
	state     *awsElastictranscoderPresetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aep *Resource) Type() string {
	return "aws_elastictranscoder_preset"
}

// LocalName returns the local name for [Resource].
func (aep *Resource) LocalName() string {
	return aep.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aep *Resource) Configuration() interface{} {
	return aep.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aep *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aep)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aep *Resource) Dependencies() terra.Dependencies {
	return aep.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aep *Resource) LifecycleManagement() *terra.Lifecycle {
	return aep.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aep *Resource) Attributes() awsElastictranscoderPresetAttributes {
	return awsElastictranscoderPresetAttributes{ref: terra.ReferenceResource(aep)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aep *Resource) ImportState(state io.Reader) error {
	aep.state = &awsElastictranscoderPresetState{}
	if err := json.NewDecoder(state).Decode(aep.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aep.Type(), aep.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aep *Resource) State() (*awsElastictranscoderPresetState, bool) {
	return aep.state, aep.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aep *Resource) StateMust() *awsElastictranscoderPresetState {
	if aep.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aep.Type(), aep.LocalName()))
	}
	return aep.state
}

// Args contains the configurations for aws_elastictranscoder_preset.
type Args struct {
	// Container: string, required
	Container terra.StringValue `hcl:"container,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// VideoCodecOptions: map of string, optional
	VideoCodecOptions terra.MapValue[terra.StringValue] `hcl:"video_codec_options,attr"`
	// Audio: optional
	Audio *Audio `hcl:"audio,block"`
	// AudioCodecOptions: optional
	AudioCodecOptions *AudioCodecOptions `hcl:"audio_codec_options,block"`
	// Thumbnails: optional
	Thumbnails *Thumbnails `hcl:"thumbnails,block"`
	// Video: optional
	Video *Video `hcl:"video,block"`
	// VideoWatermarks: min=0
	VideoWatermarks []VideoWatermarks `hcl:"video_watermarks,block" validate:"min=0"`
}

type awsElastictranscoderPresetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_elastictranscoder_preset.
func (aep awsElastictranscoderPresetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aep.ref.Append("arn"))
}

// Container returns a reference to field container of aws_elastictranscoder_preset.
func (aep awsElastictranscoderPresetAttributes) Container() terra.StringValue {
	return terra.ReferenceAsString(aep.ref.Append("container"))
}

// Description returns a reference to field description of aws_elastictranscoder_preset.
func (aep awsElastictranscoderPresetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aep.ref.Append("description"))
}

// Id returns a reference to field id of aws_elastictranscoder_preset.
func (aep awsElastictranscoderPresetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aep.ref.Append("id"))
}

// Name returns a reference to field name of aws_elastictranscoder_preset.
func (aep awsElastictranscoderPresetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aep.ref.Append("name"))
}

// Type returns a reference to field type of aws_elastictranscoder_preset.
func (aep awsElastictranscoderPresetAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aep.ref.Append("type"))
}

// VideoCodecOptions returns a reference to field video_codec_options of aws_elastictranscoder_preset.
func (aep awsElastictranscoderPresetAttributes) VideoCodecOptions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aep.ref.Append("video_codec_options"))
}

func (aep awsElastictranscoderPresetAttributes) Audio() terra.ListValue[AudioAttributes] {
	return terra.ReferenceAsList[AudioAttributes](aep.ref.Append("audio"))
}

func (aep awsElastictranscoderPresetAttributes) AudioCodecOptions() terra.ListValue[AudioCodecOptionsAttributes] {
	return terra.ReferenceAsList[AudioCodecOptionsAttributes](aep.ref.Append("audio_codec_options"))
}

func (aep awsElastictranscoderPresetAttributes) Thumbnails() terra.ListValue[ThumbnailsAttributes] {
	return terra.ReferenceAsList[ThumbnailsAttributes](aep.ref.Append("thumbnails"))
}

func (aep awsElastictranscoderPresetAttributes) Video() terra.ListValue[VideoAttributes] {
	return terra.ReferenceAsList[VideoAttributes](aep.ref.Append("video"))
}

func (aep awsElastictranscoderPresetAttributes) VideoWatermarks() terra.SetValue[VideoWatermarksAttributes] {
	return terra.ReferenceAsSet[VideoWatermarksAttributes](aep.ref.Append("video_watermarks"))
}

type awsElastictranscoderPresetState struct {
	Arn               string                   `json:"arn"`
	Container         string                   `json:"container"`
	Description       string                   `json:"description"`
	Id                string                   `json:"id"`
	Name              string                   `json:"name"`
	Type              string                   `json:"type"`
	VideoCodecOptions map[string]string        `json:"video_codec_options"`
	Audio             []AudioState             `json:"audio"`
	AudioCodecOptions []AudioCodecOptionsState `json:"audio_codec_options"`
	Thumbnails        []ThumbnailsState        `json:"thumbnails"`
	Video             []VideoState             `json:"video"`
	VideoWatermarks   []VideoWatermarksState   `json:"video_watermarks"`
}
