// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ivschat_room

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ivschat_room.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIvschatRoomState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (air *Resource) Type() string {
	return "aws_ivschat_room"
}

// LocalName returns the local name for [Resource].
func (air *Resource) LocalName() string {
	return air.Name
}

// Configuration returns the configuration (args) for [Resource].
func (air *Resource) Configuration() interface{} {
	return air.Args
}

// DependOn is used for other resources to depend on [Resource].
func (air *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(air)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (air *Resource) Dependencies() terra.Dependencies {
	return air.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (air *Resource) LifecycleManagement() *terra.Lifecycle {
	return air.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (air *Resource) Attributes() awsIvschatRoomAttributes {
	return awsIvschatRoomAttributes{ref: terra.ReferenceResource(air)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (air *Resource) ImportState(state io.Reader) error {
	air.state = &awsIvschatRoomState{}
	if err := json.NewDecoder(state).Decode(air.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", air.Type(), air.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (air *Resource) State() (*awsIvschatRoomState, bool) {
	return air.state, air.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (air *Resource) StateMust() *awsIvschatRoomState {
	if air.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", air.Type(), air.LocalName()))
	}
	return air.state
}

// Args contains the configurations for aws_ivschat_room.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoggingConfigurationIdentifiers: list of string, optional
	LoggingConfigurationIdentifiers terra.ListValue[terra.StringValue] `hcl:"logging_configuration_identifiers,attr"`
	// MaximumMessageLength: number, optional
	MaximumMessageLength terra.NumberValue `hcl:"maximum_message_length,attr"`
	// MaximumMessageRatePerSecond: number, optional
	MaximumMessageRatePerSecond terra.NumberValue `hcl:"maximum_message_rate_per_second,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// MessageReviewHandler: optional
	MessageReviewHandler *MessageReviewHandler `hcl:"message_review_handler,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsIvschatRoomAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ivschat_room.
func (air awsIvschatRoomAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("arn"))
}

// Id returns a reference to field id of aws_ivschat_room.
func (air awsIvschatRoomAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("id"))
}

// LoggingConfigurationIdentifiers returns a reference to field logging_configuration_identifiers of aws_ivschat_room.
func (air awsIvschatRoomAttributes) LoggingConfigurationIdentifiers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](air.ref.Append("logging_configuration_identifiers"))
}

// MaximumMessageLength returns a reference to field maximum_message_length of aws_ivschat_room.
func (air awsIvschatRoomAttributes) MaximumMessageLength() terra.NumberValue {
	return terra.ReferenceAsNumber(air.ref.Append("maximum_message_length"))
}

// MaximumMessageRatePerSecond returns a reference to field maximum_message_rate_per_second of aws_ivschat_room.
func (air awsIvschatRoomAttributes) MaximumMessageRatePerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(air.ref.Append("maximum_message_rate_per_second"))
}

// Name returns a reference to field name of aws_ivschat_room.
func (air awsIvschatRoomAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_ivschat_room.
func (air awsIvschatRoomAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](air.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ivschat_room.
func (air awsIvschatRoomAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](air.ref.Append("tags_all"))
}

func (air awsIvschatRoomAttributes) MessageReviewHandler() terra.ListValue[MessageReviewHandlerAttributes] {
	return terra.ReferenceAsList[MessageReviewHandlerAttributes](air.ref.Append("message_review_handler"))
}

func (air awsIvschatRoomAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](air.ref.Append("timeouts"))
}

type awsIvschatRoomState struct {
	Arn                             string                      `json:"arn"`
	Id                              string                      `json:"id"`
	LoggingConfigurationIdentifiers []string                    `json:"logging_configuration_identifiers"`
	MaximumMessageLength            float64                     `json:"maximum_message_length"`
	MaximumMessageRatePerSecond     float64                     `json:"maximum_message_rate_per_second"`
	Name                            string                      `json:"name"`
	Tags                            map[string]string           `json:"tags"`
	TagsAll                         map[string]string           `json:"tags_all"`
	MessageReviewHandler            []MessageReviewHandlerState `json:"message_review_handler"`
	Timeouts                        *TimeoutsState              `json:"timeouts"`
}
