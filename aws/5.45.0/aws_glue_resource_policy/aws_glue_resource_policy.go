// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_resource_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glue_resource_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlueResourcePolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agrp *Resource) Type() string {
	return "aws_glue_resource_policy"
}

// LocalName returns the local name for [Resource].
func (agrp *Resource) LocalName() string {
	return agrp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agrp *Resource) Configuration() interface{} {
	return agrp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agrp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agrp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agrp *Resource) Dependencies() terra.Dependencies {
	return agrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agrp *Resource) LifecycleManagement() *terra.Lifecycle {
	return agrp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agrp *Resource) Attributes() awsGlueResourcePolicyAttributes {
	return awsGlueResourcePolicyAttributes{ref: terra.ReferenceResource(agrp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agrp *Resource) ImportState(state io.Reader) error {
	agrp.state = &awsGlueResourcePolicyState{}
	if err := json.NewDecoder(state).Decode(agrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agrp.Type(), agrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agrp *Resource) State() (*awsGlueResourcePolicyState, bool) {
	return agrp.state, agrp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agrp *Resource) StateMust() *awsGlueResourcePolicyState {
	if agrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agrp.Type(), agrp.LocalName()))
	}
	return agrp.state
}

// Args contains the configurations for aws_glue_resource_policy.
type Args struct {
	// EnableHybrid: string, optional
	EnableHybrid terra.StringValue `hcl:"enable_hybrid,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
}

type awsGlueResourcePolicyAttributes struct {
	ref terra.Reference
}

// EnableHybrid returns a reference to field enable_hybrid of aws_glue_resource_policy.
func (agrp awsGlueResourcePolicyAttributes) EnableHybrid() terra.StringValue {
	return terra.ReferenceAsString(agrp.ref.Append("enable_hybrid"))
}

// Id returns a reference to field id of aws_glue_resource_policy.
func (agrp awsGlueResourcePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agrp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_glue_resource_policy.
func (agrp awsGlueResourcePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(agrp.ref.Append("policy"))
}

type awsGlueResourcePolicyState struct {
	EnableHybrid string `json:"enable_hybrid"`
	Id           string `json:"id"`
	Policy       string `json:"policy"`
}
