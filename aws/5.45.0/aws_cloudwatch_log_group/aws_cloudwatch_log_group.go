// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_log_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudwatch_log_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudwatchLogGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aclg *Resource) Type() string {
	return "aws_cloudwatch_log_group"
}

// LocalName returns the local name for [Resource].
func (aclg *Resource) LocalName() string {
	return aclg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aclg *Resource) Configuration() interface{} {
	return aclg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aclg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aclg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aclg *Resource) Dependencies() terra.Dependencies {
	return aclg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aclg *Resource) LifecycleManagement() *terra.Lifecycle {
	return aclg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aclg *Resource) Attributes() awsCloudwatchLogGroupAttributes {
	return awsCloudwatchLogGroupAttributes{ref: terra.ReferenceResource(aclg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aclg *Resource) ImportState(state io.Reader) error {
	aclg.state = &awsCloudwatchLogGroupState{}
	if err := json.NewDecoder(state).Decode(aclg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aclg.Type(), aclg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aclg *Resource) State() (*awsCloudwatchLogGroupState, bool) {
	return aclg.state, aclg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aclg *Resource) StateMust() *awsCloudwatchLogGroupState {
	if aclg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aclg.Type(), aclg.LocalName()))
	}
	return aclg.state
}

// Args contains the configurations for aws_cloudwatch_log_group.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// LogGroupClass: string, optional
	LogGroupClass terra.StringValue `hcl:"log_group_class,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// RetentionInDays: number, optional
	RetentionInDays terra.NumberValue `hcl:"retention_in_days,attr"`
	// SkipDestroy: bool, optional
	SkipDestroy terra.BoolValue `hcl:"skip_destroy,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsCloudwatchLogGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudwatch_log_group.
func (aclg awsCloudwatchLogGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aclg.ref.Append("arn"))
}

// Id returns a reference to field id of aws_cloudwatch_log_group.
func (aclg awsCloudwatchLogGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aclg.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_cloudwatch_log_group.
func (aclg awsCloudwatchLogGroupAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(aclg.ref.Append("kms_key_id"))
}

// LogGroupClass returns a reference to field log_group_class of aws_cloudwatch_log_group.
func (aclg awsCloudwatchLogGroupAttributes) LogGroupClass() terra.StringValue {
	return terra.ReferenceAsString(aclg.ref.Append("log_group_class"))
}

// Name returns a reference to field name of aws_cloudwatch_log_group.
func (aclg awsCloudwatchLogGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aclg.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_cloudwatch_log_group.
func (aclg awsCloudwatchLogGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(aclg.ref.Append("name_prefix"))
}

// RetentionInDays returns a reference to field retention_in_days of aws_cloudwatch_log_group.
func (aclg awsCloudwatchLogGroupAttributes) RetentionInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(aclg.ref.Append("retention_in_days"))
}

// SkipDestroy returns a reference to field skip_destroy of aws_cloudwatch_log_group.
func (aclg awsCloudwatchLogGroupAttributes) SkipDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(aclg.ref.Append("skip_destroy"))
}

// Tags returns a reference to field tags of aws_cloudwatch_log_group.
func (aclg awsCloudwatchLogGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aclg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cloudwatch_log_group.
func (aclg awsCloudwatchLogGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aclg.ref.Append("tags_all"))
}

type awsCloudwatchLogGroupState struct {
	Arn             string            `json:"arn"`
	Id              string            `json:"id"`
	KmsKeyId        string            `json:"kms_key_id"`
	LogGroupClass   string            `json:"log_group_class"`
	Name            string            `json:"name"`
	NamePrefix      string            `json:"name_prefix"`
	RetentionInDays float64           `json:"retention_in_days"`
	SkipDestroy     bool              `json:"skip_destroy"`
	Tags            map[string]string `json:"tags"`
	TagsAll         map[string]string `json:"tags_all"`
}
