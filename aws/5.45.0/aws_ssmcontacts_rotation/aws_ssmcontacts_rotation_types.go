// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssmcontacts_rotation

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Recurrence struct {
	// NumberOfOnCalls: number, required
	NumberOfOnCalls terra.NumberValue `hcl:"number_of_on_calls,attr" validate:"required"`
	// RecurrenceMultiplier: number, required
	RecurrenceMultiplier terra.NumberValue `hcl:"recurrence_multiplier,attr" validate:"required"`
	// RecurrenceDailySettings: min=0
	DailySettings []RecurrenceDailySettings `hcl:"daily_settings,block" validate:"min=0"`
	// RecurrenceMonthlySettings: min=0
	MonthlySettings []RecurrenceMonthlySettings `hcl:"monthly_settings,block" validate:"min=0"`
	// RecurrenceShiftCoverages: min=0
	ShiftCoverages []RecurrenceShiftCoverages `hcl:"shift_coverages,block" validate:"min=0"`
	// RecurrenceWeeklySettings: min=0
	WeeklySettings []RecurrenceWeeklySettings `hcl:"weekly_settings,block" validate:"min=0"`
}

type RecurrenceDailySettings struct {
	// HourOfDay: number, required
	HourOfDay terra.NumberValue `hcl:"hour_of_day,attr" validate:"required"`
	// MinuteOfHour: number, required
	MinuteOfHour terra.NumberValue `hcl:"minute_of_hour,attr" validate:"required"`
}

type RecurrenceMonthlySettings struct {
	// DayOfMonth: number, required
	DayOfMonth terra.NumberValue `hcl:"day_of_month,attr" validate:"required"`
	// RecurrenceMonthlySettingsHandOffTime: min=0
	HandOffTime []RecurrenceMonthlySettingsHandOffTime `hcl:"hand_off_time,block" validate:"min=0"`
}

type RecurrenceMonthlySettingsHandOffTime struct {
	// HourOfDay: number, required
	HourOfDay terra.NumberValue `hcl:"hour_of_day,attr" validate:"required"`
	// MinuteOfHour: number, required
	MinuteOfHour terra.NumberValue `hcl:"minute_of_hour,attr" validate:"required"`
}

type RecurrenceShiftCoverages struct {
	// MapBlockKey: string, required
	MapBlockKey terra.StringValue `hcl:"map_block_key,attr" validate:"required"`
	// RecurrenceShiftCoveragesCoverageTimes: min=0
	CoverageTimes []RecurrenceShiftCoveragesCoverageTimes `hcl:"coverage_times,block" validate:"min=0"`
}

type RecurrenceShiftCoveragesCoverageTimes struct {
	// RecurrenceShiftCoveragesCoverageTimesEnd: min=0
	End []RecurrenceShiftCoveragesCoverageTimesEnd `hcl:"end,block" validate:"min=0"`
	// RecurrenceShiftCoveragesCoverageTimesStart: min=0
	Start []RecurrenceShiftCoveragesCoverageTimesStart `hcl:"start,block" validate:"min=0"`
}

type RecurrenceShiftCoveragesCoverageTimesEnd struct {
	// HourOfDay: number, required
	HourOfDay terra.NumberValue `hcl:"hour_of_day,attr" validate:"required"`
	// MinuteOfHour: number, required
	MinuteOfHour terra.NumberValue `hcl:"minute_of_hour,attr" validate:"required"`
}

type RecurrenceShiftCoveragesCoverageTimesStart struct {
	// HourOfDay: number, required
	HourOfDay terra.NumberValue `hcl:"hour_of_day,attr" validate:"required"`
	// MinuteOfHour: number, required
	MinuteOfHour terra.NumberValue `hcl:"minute_of_hour,attr" validate:"required"`
}

type RecurrenceWeeklySettings struct {
	// DayOfWeek: string, required
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr" validate:"required"`
	// RecurrenceWeeklySettingsHandOffTime: min=0
	HandOffTime []RecurrenceWeeklySettingsHandOffTime `hcl:"hand_off_time,block" validate:"min=0"`
}

type RecurrenceWeeklySettingsHandOffTime struct {
	// HourOfDay: number, required
	HourOfDay terra.NumberValue `hcl:"hour_of_day,attr" validate:"required"`
	// MinuteOfHour: number, required
	MinuteOfHour terra.NumberValue `hcl:"minute_of_hour,attr" validate:"required"`
}

type RecurrenceAttributes struct {
	ref terra.Reference
}

func (r RecurrenceAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RecurrenceAttributes) InternalWithRef(ref terra.Reference) RecurrenceAttributes {
	return RecurrenceAttributes{ref: ref}
}

func (r RecurrenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RecurrenceAttributes) NumberOfOnCalls() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("number_of_on_calls"))
}

func (r RecurrenceAttributes) RecurrenceMultiplier() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("recurrence_multiplier"))
}

func (r RecurrenceAttributes) DailySettings() terra.ListValue[RecurrenceDailySettingsAttributes] {
	return terra.ReferenceAsList[RecurrenceDailySettingsAttributes](r.ref.Append("daily_settings"))
}

func (r RecurrenceAttributes) MonthlySettings() terra.ListValue[RecurrenceMonthlySettingsAttributes] {
	return terra.ReferenceAsList[RecurrenceMonthlySettingsAttributes](r.ref.Append("monthly_settings"))
}

func (r RecurrenceAttributes) ShiftCoverages() terra.ListValue[RecurrenceShiftCoveragesAttributes] {
	return terra.ReferenceAsList[RecurrenceShiftCoveragesAttributes](r.ref.Append("shift_coverages"))
}

func (r RecurrenceAttributes) WeeklySettings() terra.ListValue[RecurrenceWeeklySettingsAttributes] {
	return terra.ReferenceAsList[RecurrenceWeeklySettingsAttributes](r.ref.Append("weekly_settings"))
}

type RecurrenceDailySettingsAttributes struct {
	ref terra.Reference
}

func (ds RecurrenceDailySettingsAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds RecurrenceDailySettingsAttributes) InternalWithRef(ref terra.Reference) RecurrenceDailySettingsAttributes {
	return RecurrenceDailySettingsAttributes{ref: ref}
}

func (ds RecurrenceDailySettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds RecurrenceDailySettingsAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceAsNumber(ds.ref.Append("hour_of_day"))
}

func (ds RecurrenceDailySettingsAttributes) MinuteOfHour() terra.NumberValue {
	return terra.ReferenceAsNumber(ds.ref.Append("minute_of_hour"))
}

type RecurrenceMonthlySettingsAttributes struct {
	ref terra.Reference
}

func (ms RecurrenceMonthlySettingsAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms RecurrenceMonthlySettingsAttributes) InternalWithRef(ref terra.Reference) RecurrenceMonthlySettingsAttributes {
	return RecurrenceMonthlySettingsAttributes{ref: ref}
}

func (ms RecurrenceMonthlySettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms RecurrenceMonthlySettingsAttributes) DayOfMonth() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("day_of_month"))
}

func (ms RecurrenceMonthlySettingsAttributes) HandOffTime() terra.ListValue[RecurrenceMonthlySettingsHandOffTimeAttributes] {
	return terra.ReferenceAsList[RecurrenceMonthlySettingsHandOffTimeAttributes](ms.ref.Append("hand_off_time"))
}

type RecurrenceMonthlySettingsHandOffTimeAttributes struct {
	ref terra.Reference
}

func (hot RecurrenceMonthlySettingsHandOffTimeAttributes) InternalRef() (terra.Reference, error) {
	return hot.ref, nil
}

func (hot RecurrenceMonthlySettingsHandOffTimeAttributes) InternalWithRef(ref terra.Reference) RecurrenceMonthlySettingsHandOffTimeAttributes {
	return RecurrenceMonthlySettingsHandOffTimeAttributes{ref: ref}
}

func (hot RecurrenceMonthlySettingsHandOffTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hot.ref.InternalTokens()
}

func (hot RecurrenceMonthlySettingsHandOffTimeAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceAsNumber(hot.ref.Append("hour_of_day"))
}

func (hot RecurrenceMonthlySettingsHandOffTimeAttributes) MinuteOfHour() terra.NumberValue {
	return terra.ReferenceAsNumber(hot.ref.Append("minute_of_hour"))
}

type RecurrenceShiftCoveragesAttributes struct {
	ref terra.Reference
}

func (sc RecurrenceShiftCoveragesAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc RecurrenceShiftCoveragesAttributes) InternalWithRef(ref terra.Reference) RecurrenceShiftCoveragesAttributes {
	return RecurrenceShiftCoveragesAttributes{ref: ref}
}

func (sc RecurrenceShiftCoveragesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc RecurrenceShiftCoveragesAttributes) MapBlockKey() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("map_block_key"))
}

func (sc RecurrenceShiftCoveragesAttributes) CoverageTimes() terra.ListValue[RecurrenceShiftCoveragesCoverageTimesAttributes] {
	return terra.ReferenceAsList[RecurrenceShiftCoveragesCoverageTimesAttributes](sc.ref.Append("coverage_times"))
}

type RecurrenceShiftCoveragesCoverageTimesAttributes struct {
	ref terra.Reference
}

func (ct RecurrenceShiftCoveragesCoverageTimesAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct RecurrenceShiftCoveragesCoverageTimesAttributes) InternalWithRef(ref terra.Reference) RecurrenceShiftCoveragesCoverageTimesAttributes {
	return RecurrenceShiftCoveragesCoverageTimesAttributes{ref: ref}
}

func (ct RecurrenceShiftCoveragesCoverageTimesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ct.ref.InternalTokens()
}

func (ct RecurrenceShiftCoveragesCoverageTimesAttributes) End() terra.ListValue[RecurrenceShiftCoveragesCoverageTimesEndAttributes] {
	return terra.ReferenceAsList[RecurrenceShiftCoveragesCoverageTimesEndAttributes](ct.ref.Append("end"))
}

func (ct RecurrenceShiftCoveragesCoverageTimesAttributes) Start() terra.ListValue[RecurrenceShiftCoveragesCoverageTimesStartAttributes] {
	return terra.ReferenceAsList[RecurrenceShiftCoveragesCoverageTimesStartAttributes](ct.ref.Append("start"))
}

type RecurrenceShiftCoveragesCoverageTimesEndAttributes struct {
	ref terra.Reference
}

func (e RecurrenceShiftCoveragesCoverageTimesEndAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e RecurrenceShiftCoveragesCoverageTimesEndAttributes) InternalWithRef(ref terra.Reference) RecurrenceShiftCoveragesCoverageTimesEndAttributes {
	return RecurrenceShiftCoveragesCoverageTimesEndAttributes{ref: ref}
}

func (e RecurrenceShiftCoveragesCoverageTimesEndAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e RecurrenceShiftCoveragesCoverageTimesEndAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("hour_of_day"))
}

func (e RecurrenceShiftCoveragesCoverageTimesEndAttributes) MinuteOfHour() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("minute_of_hour"))
}

type RecurrenceShiftCoveragesCoverageTimesStartAttributes struct {
	ref terra.Reference
}

func (s RecurrenceShiftCoveragesCoverageTimesStartAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s RecurrenceShiftCoveragesCoverageTimesStartAttributes) InternalWithRef(ref terra.Reference) RecurrenceShiftCoveragesCoverageTimesStartAttributes {
	return RecurrenceShiftCoveragesCoverageTimesStartAttributes{ref: ref}
}

func (s RecurrenceShiftCoveragesCoverageTimesStartAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s RecurrenceShiftCoveragesCoverageTimesStartAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("hour_of_day"))
}

func (s RecurrenceShiftCoveragesCoverageTimesStartAttributes) MinuteOfHour() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("minute_of_hour"))
}

type RecurrenceWeeklySettingsAttributes struct {
	ref terra.Reference
}

func (ws RecurrenceWeeklySettingsAttributes) InternalRef() (terra.Reference, error) {
	return ws.ref, nil
}

func (ws RecurrenceWeeklySettingsAttributes) InternalWithRef(ref terra.Reference) RecurrenceWeeklySettingsAttributes {
	return RecurrenceWeeklySettingsAttributes{ref: ref}
}

func (ws RecurrenceWeeklySettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ws.ref.InternalTokens()
}

func (ws RecurrenceWeeklySettingsAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(ws.ref.Append("day_of_week"))
}

func (ws RecurrenceWeeklySettingsAttributes) HandOffTime() terra.ListValue[RecurrenceWeeklySettingsHandOffTimeAttributes] {
	return terra.ReferenceAsList[RecurrenceWeeklySettingsHandOffTimeAttributes](ws.ref.Append("hand_off_time"))
}

type RecurrenceWeeklySettingsHandOffTimeAttributes struct {
	ref terra.Reference
}

func (hot RecurrenceWeeklySettingsHandOffTimeAttributes) InternalRef() (terra.Reference, error) {
	return hot.ref, nil
}

func (hot RecurrenceWeeklySettingsHandOffTimeAttributes) InternalWithRef(ref terra.Reference) RecurrenceWeeklySettingsHandOffTimeAttributes {
	return RecurrenceWeeklySettingsHandOffTimeAttributes{ref: ref}
}

func (hot RecurrenceWeeklySettingsHandOffTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hot.ref.InternalTokens()
}

func (hot RecurrenceWeeklySettingsHandOffTimeAttributes) HourOfDay() terra.NumberValue {
	return terra.ReferenceAsNumber(hot.ref.Append("hour_of_day"))
}

func (hot RecurrenceWeeklySettingsHandOffTimeAttributes) MinuteOfHour() terra.NumberValue {
	return terra.ReferenceAsNumber(hot.ref.Append("minute_of_hour"))
}

type RecurrenceState struct {
	NumberOfOnCalls      float64                          `json:"number_of_on_calls"`
	RecurrenceMultiplier float64                          `json:"recurrence_multiplier"`
	DailySettings        []RecurrenceDailySettingsState   `json:"daily_settings"`
	MonthlySettings      []RecurrenceMonthlySettingsState `json:"monthly_settings"`
	ShiftCoverages       []RecurrenceShiftCoveragesState  `json:"shift_coverages"`
	WeeklySettings       []RecurrenceWeeklySettingsState  `json:"weekly_settings"`
}

type RecurrenceDailySettingsState struct {
	HourOfDay    float64 `json:"hour_of_day"`
	MinuteOfHour float64 `json:"minute_of_hour"`
}

type RecurrenceMonthlySettingsState struct {
	DayOfMonth  float64                                     `json:"day_of_month"`
	HandOffTime []RecurrenceMonthlySettingsHandOffTimeState `json:"hand_off_time"`
}

type RecurrenceMonthlySettingsHandOffTimeState struct {
	HourOfDay    float64 `json:"hour_of_day"`
	MinuteOfHour float64 `json:"minute_of_hour"`
}

type RecurrenceShiftCoveragesState struct {
	MapBlockKey   string                                       `json:"map_block_key"`
	CoverageTimes []RecurrenceShiftCoveragesCoverageTimesState `json:"coverage_times"`
}

type RecurrenceShiftCoveragesCoverageTimesState struct {
	End   []RecurrenceShiftCoveragesCoverageTimesEndState   `json:"end"`
	Start []RecurrenceShiftCoveragesCoverageTimesStartState `json:"start"`
}

type RecurrenceShiftCoveragesCoverageTimesEndState struct {
	HourOfDay    float64 `json:"hour_of_day"`
	MinuteOfHour float64 `json:"minute_of_hour"`
}

type RecurrenceShiftCoveragesCoverageTimesStartState struct {
	HourOfDay    float64 `json:"hour_of_day"`
	MinuteOfHour float64 `json:"minute_of_hour"`
}

type RecurrenceWeeklySettingsState struct {
	DayOfWeek   string                                     `json:"day_of_week"`
	HandOffTime []RecurrenceWeeklySettingsHandOffTimeState `json:"hand_off_time"`
}

type RecurrenceWeeklySettingsHandOffTimeState struct {
	HourOfDay    float64 `json:"hour_of_day"`
	MinuteOfHour float64 `json:"minute_of_hour"`
}
