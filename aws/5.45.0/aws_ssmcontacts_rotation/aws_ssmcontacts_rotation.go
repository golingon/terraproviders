// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssmcontacts_rotation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ssmcontacts_rotation.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSsmcontactsRotationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asr *Resource) Type() string {
	return "aws_ssmcontacts_rotation"
}

// LocalName returns the local name for [Resource].
func (asr *Resource) LocalName() string {
	return asr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asr *Resource) Configuration() interface{} {
	return asr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asr *Resource) Dependencies() terra.Dependencies {
	return asr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asr *Resource) LifecycleManagement() *terra.Lifecycle {
	return asr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asr *Resource) Attributes() awsSsmcontactsRotationAttributes {
	return awsSsmcontactsRotationAttributes{ref: terra.ReferenceResource(asr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asr *Resource) ImportState(state io.Reader) error {
	asr.state = &awsSsmcontactsRotationState{}
	if err := json.NewDecoder(state).Decode(asr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asr.Type(), asr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asr *Resource) State() (*awsSsmcontactsRotationState, bool) {
	return asr.state, asr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asr *Resource) StateMust() *awsSsmcontactsRotationState {
	if asr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asr.Type(), asr.LocalName()))
	}
	return asr.state
}

// Args contains the configurations for aws_ssmcontacts_rotation.
type Args struct {
	// ContactIds: list of string, required
	ContactIds terra.ListValue[terra.StringValue] `hcl:"contact_ids,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TimeZoneId: string, required
	TimeZoneId terra.StringValue `hcl:"time_zone_id,attr" validate:"required"`
	// Recurrence: min=0
	Recurrence []Recurrence `hcl:"recurrence,block" validate:"min=0"`
}

type awsSsmcontactsRotationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ssmcontacts_rotation.
func (asr awsSsmcontactsRotationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asr.ref.Append("arn"))
}

// ContactIds returns a reference to field contact_ids of aws_ssmcontacts_rotation.
func (asr awsSsmcontactsRotationAttributes) ContactIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asr.ref.Append("contact_ids"))
}

// Id returns a reference to field id of aws_ssmcontacts_rotation.
func (asr awsSsmcontactsRotationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asr.ref.Append("id"))
}

// Name returns a reference to field name of aws_ssmcontacts_rotation.
func (asr awsSsmcontactsRotationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asr.ref.Append("name"))
}

// StartTime returns a reference to field start_time of aws_ssmcontacts_rotation.
func (asr awsSsmcontactsRotationAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(asr.ref.Append("start_time"))
}

// Tags returns a reference to field tags of aws_ssmcontacts_rotation.
func (asr awsSsmcontactsRotationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ssmcontacts_rotation.
func (asr awsSsmcontactsRotationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asr.ref.Append("tags_all"))
}

// TimeZoneId returns a reference to field time_zone_id of aws_ssmcontacts_rotation.
func (asr awsSsmcontactsRotationAttributes) TimeZoneId() terra.StringValue {
	return terra.ReferenceAsString(asr.ref.Append("time_zone_id"))
}

func (asr awsSsmcontactsRotationAttributes) Recurrence() terra.ListValue[RecurrenceAttributes] {
	return terra.ReferenceAsList[RecurrenceAttributes](asr.ref.Append("recurrence"))
}

type awsSsmcontactsRotationState struct {
	Arn        string            `json:"arn"`
	ContactIds []string          `json:"contact_ids"`
	Id         string            `json:"id"`
	Name       string            `json:"name"`
	StartTime  string            `json:"start_time"`
	Tags       map[string]string `json:"tags"`
	TagsAll    map[string]string `json:"tags_all"`
	TimeZoneId string            `json:"time_zone_id"`
	Recurrence []RecurrenceState `json:"recurrence"`
}
