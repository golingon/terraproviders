// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_api_gateway_api_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_api_gateway_api_key.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApiGatewayApiKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aagak *Resource) Type() string {
	return "aws_api_gateway_api_key"
}

// LocalName returns the local name for [Resource].
func (aagak *Resource) LocalName() string {
	return aagak.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aagak *Resource) Configuration() interface{} {
	return aagak.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aagak *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aagak)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aagak *Resource) Dependencies() terra.Dependencies {
	return aagak.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aagak *Resource) LifecycleManagement() *terra.Lifecycle {
	return aagak.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aagak *Resource) Attributes() awsApiGatewayApiKeyAttributes {
	return awsApiGatewayApiKeyAttributes{ref: terra.ReferenceResource(aagak)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aagak *Resource) ImportState(state io.Reader) error {
	aagak.state = &awsApiGatewayApiKeyState{}
	if err := json.NewDecoder(state).Decode(aagak.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aagak.Type(), aagak.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aagak *Resource) State() (*awsApiGatewayApiKeyState, bool) {
	return aagak.state, aagak.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aagak *Resource) StateMust() *awsApiGatewayApiKeyState {
	if aagak.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aagak.Type(), aagak.LocalName()))
	}
	return aagak.state
}

// Args contains the configurations for aws_api_gateway_api_key.
type Args struct {
	// CustomerId: string, optional
	CustomerId terra.StringValue `hcl:"customer_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type awsApiGatewayApiKeyAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_api_gateway_api_key.
func (aagak awsApiGatewayApiKeyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aagak.ref.Append("arn"))
}

// CreatedDate returns a reference to field created_date of aws_api_gateway_api_key.
func (aagak awsApiGatewayApiKeyAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceAsString(aagak.ref.Append("created_date"))
}

// CustomerId returns a reference to field customer_id of aws_api_gateway_api_key.
func (aagak awsApiGatewayApiKeyAttributes) CustomerId() terra.StringValue {
	return terra.ReferenceAsString(aagak.ref.Append("customer_id"))
}

// Description returns a reference to field description of aws_api_gateway_api_key.
func (aagak awsApiGatewayApiKeyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aagak.ref.Append("description"))
}

// Enabled returns a reference to field enabled of aws_api_gateway_api_key.
func (aagak awsApiGatewayApiKeyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aagak.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_api_gateway_api_key.
func (aagak awsApiGatewayApiKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aagak.ref.Append("id"))
}

// LastUpdatedDate returns a reference to field last_updated_date of aws_api_gateway_api_key.
func (aagak awsApiGatewayApiKeyAttributes) LastUpdatedDate() terra.StringValue {
	return terra.ReferenceAsString(aagak.ref.Append("last_updated_date"))
}

// Name returns a reference to field name of aws_api_gateway_api_key.
func (aagak awsApiGatewayApiKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aagak.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_api_gateway_api_key.
func (aagak awsApiGatewayApiKeyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aagak.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_api_gateway_api_key.
func (aagak awsApiGatewayApiKeyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aagak.ref.Append("tags_all"))
}

// Value returns a reference to field value of aws_api_gateway_api_key.
func (aagak awsApiGatewayApiKeyAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(aagak.ref.Append("value"))
}

type awsApiGatewayApiKeyState struct {
	Arn             string            `json:"arn"`
	CreatedDate     string            `json:"created_date"`
	CustomerId      string            `json:"customer_id"`
	Description     string            `json:"description"`
	Enabled         bool              `json:"enabled"`
	Id              string            `json:"id"`
	LastUpdatedDate string            `json:"last_updated_date"`
	Name            string            `json:"name"`
	Tags            map[string]string `json:"tags"`
	TagsAll         map[string]string `json:"tags_all"`
	Value           string            `json:"value"`
}
