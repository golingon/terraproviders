// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudfront_function

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudfront_function.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudfrontFunctionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acf *Resource) Type() string {
	return "aws_cloudfront_function"
}

// LocalName returns the local name for [Resource].
func (acf *Resource) LocalName() string {
	return acf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acf *Resource) Configuration() interface{} {
	return acf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acf *Resource) Dependencies() terra.Dependencies {
	return acf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acf *Resource) LifecycleManagement() *terra.Lifecycle {
	return acf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acf *Resource) Attributes() awsCloudfrontFunctionAttributes {
	return awsCloudfrontFunctionAttributes{ref: terra.ReferenceResource(acf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acf *Resource) ImportState(state io.Reader) error {
	acf.state = &awsCloudfrontFunctionState{}
	if err := json.NewDecoder(state).Decode(acf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acf.Type(), acf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acf *Resource) State() (*awsCloudfrontFunctionState, bool) {
	return acf.state, acf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acf *Resource) StateMust() *awsCloudfrontFunctionState {
	if acf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acf.Type(), acf.LocalName()))
	}
	return acf.state
}

// Args contains the configurations for aws_cloudfront_function.
type Args struct {
	// Code: string, required
	Code terra.StringValue `hcl:"code,attr" validate:"required"`
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyValueStoreAssociations: set of string, optional
	KeyValueStoreAssociations terra.SetValue[terra.StringValue] `hcl:"key_value_store_associations,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Publish: bool, optional
	Publish terra.BoolValue `hcl:"publish,attr"`
	// Runtime: string, required
	Runtime terra.StringValue `hcl:"runtime,attr" validate:"required"`
}

type awsCloudfrontFunctionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudfront_function.
func (acf awsCloudfrontFunctionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("arn"))
}

// Code returns a reference to field code of aws_cloudfront_function.
func (acf awsCloudfrontFunctionAttributes) Code() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("code"))
}

// Comment returns a reference to field comment of aws_cloudfront_function.
func (acf awsCloudfrontFunctionAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("comment"))
}

// Etag returns a reference to field etag of aws_cloudfront_function.
func (acf awsCloudfrontFunctionAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("etag"))
}

// Id returns a reference to field id of aws_cloudfront_function.
func (acf awsCloudfrontFunctionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("id"))
}

// KeyValueStoreAssociations returns a reference to field key_value_store_associations of aws_cloudfront_function.
func (acf awsCloudfrontFunctionAttributes) KeyValueStoreAssociations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acf.ref.Append("key_value_store_associations"))
}

// LiveStageEtag returns a reference to field live_stage_etag of aws_cloudfront_function.
func (acf awsCloudfrontFunctionAttributes) LiveStageEtag() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("live_stage_etag"))
}

// Name returns a reference to field name of aws_cloudfront_function.
func (acf awsCloudfrontFunctionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("name"))
}

// Publish returns a reference to field publish of aws_cloudfront_function.
func (acf awsCloudfrontFunctionAttributes) Publish() terra.BoolValue {
	return terra.ReferenceAsBool(acf.ref.Append("publish"))
}

// Runtime returns a reference to field runtime of aws_cloudfront_function.
func (acf awsCloudfrontFunctionAttributes) Runtime() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("runtime"))
}

// Status returns a reference to field status of aws_cloudfront_function.
func (acf awsCloudfrontFunctionAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(acf.ref.Append("status"))
}

type awsCloudfrontFunctionState struct {
	Arn                       string   `json:"arn"`
	Code                      string   `json:"code"`
	Comment                   string   `json:"comment"`
	Etag                      string   `json:"etag"`
	Id                        string   `json:"id"`
	KeyValueStoreAssociations []string `json:"key_value_store_associations"`
	LiveStageEtag             string   `json:"live_stage_etag"`
	Name                      string   `json:"name"`
	Publish                   bool     `json:"publish"`
	Runtime                   string   `json:"runtime"`
	Status                    string   `json:"status"`
}
