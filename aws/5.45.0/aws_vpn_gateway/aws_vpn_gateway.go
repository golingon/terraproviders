// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpn_gateway

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpn_gateway.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpnGatewayState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avg *Resource) Type() string {
	return "aws_vpn_gateway"
}

// LocalName returns the local name for [Resource].
func (avg *Resource) LocalName() string {
	return avg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avg *Resource) Configuration() interface{} {
	return avg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avg *Resource) Dependencies() terra.Dependencies {
	return avg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avg *Resource) LifecycleManagement() *terra.Lifecycle {
	return avg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avg *Resource) Attributes() awsVpnGatewayAttributes {
	return awsVpnGatewayAttributes{ref: terra.ReferenceResource(avg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avg *Resource) ImportState(state io.Reader) error {
	avg.state = &awsVpnGatewayState{}
	if err := json.NewDecoder(state).Decode(avg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avg.Type(), avg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avg *Resource) State() (*awsVpnGatewayState, bool) {
	return avg.state, avg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avg *Resource) StateMust() *awsVpnGatewayState {
	if avg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avg.Type(), avg.LocalName()))
	}
	return avg.state
}

// Args contains the configurations for aws_vpn_gateway.
type Args struct {
	// AmazonSideAsn: string, optional
	AmazonSideAsn terra.StringValue `hcl:"amazon_side_asn,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcId: string, optional
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
}

type awsVpnGatewayAttributes struct {
	ref terra.Reference
}

// AmazonSideAsn returns a reference to field amazon_side_asn of aws_vpn_gateway.
func (avg awsVpnGatewayAttributes) AmazonSideAsn() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("amazon_side_asn"))
}

// Arn returns a reference to field arn of aws_vpn_gateway.
func (avg awsVpnGatewayAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("arn"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_vpn_gateway.
func (avg awsVpnGatewayAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("availability_zone"))
}

// Id returns a reference to field id of aws_vpn_gateway.
func (avg awsVpnGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_vpn_gateway.
func (avg awsVpnGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpn_gateway.
func (avg awsVpnGatewayAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avg.ref.Append("tags_all"))
}

// VpcId returns a reference to field vpc_id of aws_vpn_gateway.
func (avg awsVpnGatewayAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("vpc_id"))
}

type awsVpnGatewayState struct {
	AmazonSideAsn    string            `json:"amazon_side_asn"`
	Arn              string            `json:"arn"`
	AvailabilityZone string            `json:"availability_zone"`
	Id               string            `json:"id"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
	VpcId            string            `json:"vpc_id"`
}
