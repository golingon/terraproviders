// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datasync_location_nfs

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_datasync_location_nfs.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDatasyncLocationNfsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adln *Resource) Type() string {
	return "aws_datasync_location_nfs"
}

// LocalName returns the local name for [Resource].
func (adln *Resource) LocalName() string {
	return adln.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adln *Resource) Configuration() interface{} {
	return adln.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adln *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adln)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adln *Resource) Dependencies() terra.Dependencies {
	return adln.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adln *Resource) LifecycleManagement() *terra.Lifecycle {
	return adln.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adln *Resource) Attributes() awsDatasyncLocationNfsAttributes {
	return awsDatasyncLocationNfsAttributes{ref: terra.ReferenceResource(adln)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adln *Resource) ImportState(state io.Reader) error {
	adln.state = &awsDatasyncLocationNfsState{}
	if err := json.NewDecoder(state).Decode(adln.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adln.Type(), adln.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adln *Resource) State() (*awsDatasyncLocationNfsState, bool) {
	return adln.state, adln.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adln *Resource) StateMust() *awsDatasyncLocationNfsState {
	if adln.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adln.Type(), adln.LocalName()))
	}
	return adln.state
}

// Args contains the configurations for aws_datasync_location_nfs.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServerHostname: string, required
	ServerHostname terra.StringValue `hcl:"server_hostname,attr" validate:"required"`
	// Subdirectory: string, required
	Subdirectory terra.StringValue `hcl:"subdirectory,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// MountOptions: optional
	MountOptions *MountOptions `hcl:"mount_options,block"`
	// OnPremConfig: required
	OnPremConfig *OnPremConfig `hcl:"on_prem_config,block" validate:"required"`
}

type awsDatasyncLocationNfsAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_datasync_location_nfs.
func (adln awsDatasyncLocationNfsAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adln.ref.Append("arn"))
}

// Id returns a reference to field id of aws_datasync_location_nfs.
func (adln awsDatasyncLocationNfsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adln.ref.Append("id"))
}

// ServerHostname returns a reference to field server_hostname of aws_datasync_location_nfs.
func (adln awsDatasyncLocationNfsAttributes) ServerHostname() terra.StringValue {
	return terra.ReferenceAsString(adln.ref.Append("server_hostname"))
}

// Subdirectory returns a reference to field subdirectory of aws_datasync_location_nfs.
func (adln awsDatasyncLocationNfsAttributes) Subdirectory() terra.StringValue {
	return terra.ReferenceAsString(adln.ref.Append("subdirectory"))
}

// Tags returns a reference to field tags of aws_datasync_location_nfs.
func (adln awsDatasyncLocationNfsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adln.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_datasync_location_nfs.
func (adln awsDatasyncLocationNfsAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adln.ref.Append("tags_all"))
}

// Uri returns a reference to field uri of aws_datasync_location_nfs.
func (adln awsDatasyncLocationNfsAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(adln.ref.Append("uri"))
}

func (adln awsDatasyncLocationNfsAttributes) MountOptions() terra.ListValue[MountOptionsAttributes] {
	return terra.ReferenceAsList[MountOptionsAttributes](adln.ref.Append("mount_options"))
}

func (adln awsDatasyncLocationNfsAttributes) OnPremConfig() terra.ListValue[OnPremConfigAttributes] {
	return terra.ReferenceAsList[OnPremConfigAttributes](adln.ref.Append("on_prem_config"))
}

type awsDatasyncLocationNfsState struct {
	Arn            string              `json:"arn"`
	Id             string              `json:"id"`
	ServerHostname string              `json:"server_hostname"`
	Subdirectory   string              `json:"subdirectory"`
	Tags           map[string]string   `json:"tags"`
	TagsAll        map[string]string   `json:"tags_all"`
	Uri            string              `json:"uri"`
	MountOptions   []MountOptionsState `json:"mount_options"`
	OnPremConfig   []OnPremConfigState `json:"on_prem_config"`
}
