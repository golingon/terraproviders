// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iot_topic_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iot_topic_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIotTopicRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aitr *Resource) Type() string {
	return "aws_iot_topic_rule"
}

// LocalName returns the local name for [Resource].
func (aitr *Resource) LocalName() string {
	return aitr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aitr *Resource) Configuration() interface{} {
	return aitr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aitr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aitr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aitr *Resource) Dependencies() terra.Dependencies {
	return aitr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aitr *Resource) LifecycleManagement() *terra.Lifecycle {
	return aitr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aitr *Resource) Attributes() awsIotTopicRuleAttributes {
	return awsIotTopicRuleAttributes{ref: terra.ReferenceResource(aitr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aitr *Resource) ImportState(state io.Reader) error {
	aitr.state = &awsIotTopicRuleState{}
	if err := json.NewDecoder(state).Decode(aitr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aitr.Type(), aitr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aitr *Resource) State() (*awsIotTopicRuleState, bool) {
	return aitr.state, aitr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aitr *Resource) StateMust() *awsIotTopicRuleState {
	if aitr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aitr.Type(), aitr.LocalName()))
	}
	return aitr.state
}

// Args contains the configurations for aws_iot_topic_rule.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Sql: string, required
	Sql terra.StringValue `hcl:"sql,attr" validate:"required"`
	// SqlVersion: string, required
	SqlVersion terra.StringValue `hcl:"sql_version,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CloudwatchAlarm: min=0
	CloudwatchAlarm []CloudwatchAlarm `hcl:"cloudwatch_alarm,block" validate:"min=0"`
	// CloudwatchLogs: min=0
	CloudwatchLogs []CloudwatchLogs `hcl:"cloudwatch_logs,block" validate:"min=0"`
	// CloudwatchMetric: min=0
	CloudwatchMetric []CloudwatchMetric `hcl:"cloudwatch_metric,block" validate:"min=0"`
	// Dynamodb: min=0
	Dynamodb []Dynamodb `hcl:"dynamodb,block" validate:"min=0"`
	// Dynamodbv2: min=0
	Dynamodbv2 []Dynamodbv2 `hcl:"dynamodbv2,block" validate:"min=0"`
	// Elasticsearch: min=0
	Elasticsearch []Elasticsearch `hcl:"elasticsearch,block" validate:"min=0"`
	// ErrorAction: optional
	ErrorAction *ErrorAction `hcl:"error_action,block"`
	// Firehose: min=0
	Firehose []Firehose `hcl:"firehose,block" validate:"min=0"`
	// Http: min=0
	Http []Http `hcl:"http,block" validate:"min=0"`
	// IotAnalytics: min=0
	IotAnalytics []IotAnalytics `hcl:"iot_analytics,block" validate:"min=0"`
	// IotEvents: min=0
	IotEvents []IotEvents `hcl:"iot_events,block" validate:"min=0"`
	// Kafka: min=0
	Kafka []Kafka `hcl:"kafka,block" validate:"min=0"`
	// Kinesis: min=0
	Kinesis []Kinesis `hcl:"kinesis,block" validate:"min=0"`
	// Lambda: min=0
	Lambda []Lambda `hcl:"lambda,block" validate:"min=0"`
	// Republish: min=0
	Republish []Republish `hcl:"republish,block" validate:"min=0"`
	// S3: min=0
	S3 []S3 `hcl:"s3,block" validate:"min=0"`
	// Sns: min=0
	Sns []Sns `hcl:"sns,block" validate:"min=0"`
	// Sqs: min=0
	Sqs []Sqs `hcl:"sqs,block" validate:"min=0"`
	// StepFunctions: min=0
	StepFunctions []StepFunctions `hcl:"step_functions,block" validate:"min=0"`
	// Timestream: min=0
	Timestream []Timestream `hcl:"timestream,block" validate:"min=0"`
}

type awsIotTopicRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iot_topic_rule.
func (aitr awsIotTopicRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aitr.ref.Append("arn"))
}

// Description returns a reference to field description of aws_iot_topic_rule.
func (aitr awsIotTopicRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aitr.ref.Append("description"))
}

// Enabled returns a reference to field enabled of aws_iot_topic_rule.
func (aitr awsIotTopicRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aitr.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_iot_topic_rule.
func (aitr awsIotTopicRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aitr.ref.Append("id"))
}

// Name returns a reference to field name of aws_iot_topic_rule.
func (aitr awsIotTopicRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aitr.ref.Append("name"))
}

// Sql returns a reference to field sql of aws_iot_topic_rule.
func (aitr awsIotTopicRuleAttributes) Sql() terra.StringValue {
	return terra.ReferenceAsString(aitr.ref.Append("sql"))
}

// SqlVersion returns a reference to field sql_version of aws_iot_topic_rule.
func (aitr awsIotTopicRuleAttributes) SqlVersion() terra.StringValue {
	return terra.ReferenceAsString(aitr.ref.Append("sql_version"))
}

// Tags returns a reference to field tags of aws_iot_topic_rule.
func (aitr awsIotTopicRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aitr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_iot_topic_rule.
func (aitr awsIotTopicRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aitr.ref.Append("tags_all"))
}

func (aitr awsIotTopicRuleAttributes) CloudwatchAlarm() terra.SetValue[CloudwatchAlarmAttributes] {
	return terra.ReferenceAsSet[CloudwatchAlarmAttributes](aitr.ref.Append("cloudwatch_alarm"))
}

func (aitr awsIotTopicRuleAttributes) CloudwatchLogs() terra.SetValue[CloudwatchLogsAttributes] {
	return terra.ReferenceAsSet[CloudwatchLogsAttributes](aitr.ref.Append("cloudwatch_logs"))
}

func (aitr awsIotTopicRuleAttributes) CloudwatchMetric() terra.SetValue[CloudwatchMetricAttributes] {
	return terra.ReferenceAsSet[CloudwatchMetricAttributes](aitr.ref.Append("cloudwatch_metric"))
}

func (aitr awsIotTopicRuleAttributes) Dynamodb() terra.SetValue[DynamodbAttributes] {
	return terra.ReferenceAsSet[DynamodbAttributes](aitr.ref.Append("dynamodb"))
}

func (aitr awsIotTopicRuleAttributes) Dynamodbv2() terra.SetValue[Dynamodbv2Attributes] {
	return terra.ReferenceAsSet[Dynamodbv2Attributes](aitr.ref.Append("dynamodbv2"))
}

func (aitr awsIotTopicRuleAttributes) Elasticsearch() terra.SetValue[ElasticsearchAttributes] {
	return terra.ReferenceAsSet[ElasticsearchAttributes](aitr.ref.Append("elasticsearch"))
}

func (aitr awsIotTopicRuleAttributes) ErrorAction() terra.ListValue[ErrorActionAttributes] {
	return terra.ReferenceAsList[ErrorActionAttributes](aitr.ref.Append("error_action"))
}

func (aitr awsIotTopicRuleAttributes) Firehose() terra.SetValue[FirehoseAttributes] {
	return terra.ReferenceAsSet[FirehoseAttributes](aitr.ref.Append("firehose"))
}

func (aitr awsIotTopicRuleAttributes) Http() terra.SetValue[HttpAttributes] {
	return terra.ReferenceAsSet[HttpAttributes](aitr.ref.Append("http"))
}

func (aitr awsIotTopicRuleAttributes) IotAnalytics() terra.SetValue[IotAnalyticsAttributes] {
	return terra.ReferenceAsSet[IotAnalyticsAttributes](aitr.ref.Append("iot_analytics"))
}

func (aitr awsIotTopicRuleAttributes) IotEvents() terra.SetValue[IotEventsAttributes] {
	return terra.ReferenceAsSet[IotEventsAttributes](aitr.ref.Append("iot_events"))
}

func (aitr awsIotTopicRuleAttributes) Kafka() terra.SetValue[KafkaAttributes] {
	return terra.ReferenceAsSet[KafkaAttributes](aitr.ref.Append("kafka"))
}

func (aitr awsIotTopicRuleAttributes) Kinesis() terra.SetValue[KinesisAttributes] {
	return terra.ReferenceAsSet[KinesisAttributes](aitr.ref.Append("kinesis"))
}

func (aitr awsIotTopicRuleAttributes) Lambda() terra.SetValue[LambdaAttributes] {
	return terra.ReferenceAsSet[LambdaAttributes](aitr.ref.Append("lambda"))
}

func (aitr awsIotTopicRuleAttributes) Republish() terra.SetValue[RepublishAttributes] {
	return terra.ReferenceAsSet[RepublishAttributes](aitr.ref.Append("republish"))
}

func (aitr awsIotTopicRuleAttributes) S3() terra.SetValue[S3Attributes] {
	return terra.ReferenceAsSet[S3Attributes](aitr.ref.Append("s3"))
}

func (aitr awsIotTopicRuleAttributes) Sns() terra.SetValue[SnsAttributes] {
	return terra.ReferenceAsSet[SnsAttributes](aitr.ref.Append("sns"))
}

func (aitr awsIotTopicRuleAttributes) Sqs() terra.SetValue[SqsAttributes] {
	return terra.ReferenceAsSet[SqsAttributes](aitr.ref.Append("sqs"))
}

func (aitr awsIotTopicRuleAttributes) StepFunctions() terra.SetValue[StepFunctionsAttributes] {
	return terra.ReferenceAsSet[StepFunctionsAttributes](aitr.ref.Append("step_functions"))
}

func (aitr awsIotTopicRuleAttributes) Timestream() terra.SetValue[TimestreamAttributes] {
	return terra.ReferenceAsSet[TimestreamAttributes](aitr.ref.Append("timestream"))
}

type awsIotTopicRuleState struct {
	Arn              string                  `json:"arn"`
	Description      string                  `json:"description"`
	Enabled          bool                    `json:"enabled"`
	Id               string                  `json:"id"`
	Name             string                  `json:"name"`
	Sql              string                  `json:"sql"`
	SqlVersion       string                  `json:"sql_version"`
	Tags             map[string]string       `json:"tags"`
	TagsAll          map[string]string       `json:"tags_all"`
	CloudwatchAlarm  []CloudwatchAlarmState  `json:"cloudwatch_alarm"`
	CloudwatchLogs   []CloudwatchLogsState   `json:"cloudwatch_logs"`
	CloudwatchMetric []CloudwatchMetricState `json:"cloudwatch_metric"`
	Dynamodb         []DynamodbState         `json:"dynamodb"`
	Dynamodbv2       []Dynamodbv2State       `json:"dynamodbv2"`
	Elasticsearch    []ElasticsearchState    `json:"elasticsearch"`
	ErrorAction      []ErrorActionState      `json:"error_action"`
	Firehose         []FirehoseState         `json:"firehose"`
	Http             []HttpState             `json:"http"`
	IotAnalytics     []IotAnalyticsState     `json:"iot_analytics"`
	IotEvents        []IotEventsState        `json:"iot_events"`
	Kafka            []KafkaState            `json:"kafka"`
	Kinesis          []KinesisState          `json:"kinesis"`
	Lambda           []LambdaState           `json:"lambda"`
	Republish        []RepublishState        `json:"republish"`
	S3               []S3State               `json:"s3"`
	Sns              []SnsState              `json:"sns"`
	Sqs              []SqsState              `json:"sqs"`
	StepFunctions    []StepFunctionsState    `json:"step_functions"`
	Timestream       []TimestreamState       `json:"timestream"`
}
