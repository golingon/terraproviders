// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_mq_broker

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataConfigurationAttributes struct {
	ref terra.Reference
}

func (c DataConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataConfigurationAttributes) InternalWithRef(ref terra.Reference) DataConfigurationAttributes {
	return DataConfigurationAttributes{ref: ref}
}

func (c DataConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("id"))
}

func (c DataConfigurationAttributes) Revision() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("revision"))
}

type DataEncryptionOptionsAttributes struct {
	ref terra.Reference
}

func (eo DataEncryptionOptionsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo DataEncryptionOptionsAttributes) InternalWithRef(ref terra.Reference) DataEncryptionOptionsAttributes {
	return DataEncryptionOptionsAttributes{ref: ref}
}

func (eo DataEncryptionOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo DataEncryptionOptionsAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(eo.ref.Append("kms_key_id"))
}

func (eo DataEncryptionOptionsAttributes) UseAwsOwnedKey() terra.BoolValue {
	return terra.ReferenceAsBool(eo.ref.Append("use_aws_owned_key"))
}

type DataInstancesAttributes struct {
	ref terra.Reference
}

func (i DataInstancesAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataInstancesAttributes) InternalWithRef(ref terra.Reference) DataInstancesAttributes {
	return DataInstancesAttributes{ref: ref}
}

func (i DataInstancesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataInstancesAttributes) ConsoleUrl() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("console_url"))
}

func (i DataInstancesAttributes) Endpoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("endpoints"))
}

func (i DataInstancesAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("ip_address"))
}

type DataLdapServerMetadataAttributes struct {
	ref terra.Reference
}

func (lsm DataLdapServerMetadataAttributes) InternalRef() (terra.Reference, error) {
	return lsm.ref, nil
}

func (lsm DataLdapServerMetadataAttributes) InternalWithRef(ref terra.Reference) DataLdapServerMetadataAttributes {
	return DataLdapServerMetadataAttributes{ref: ref}
}

func (lsm DataLdapServerMetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lsm.ref.InternalTokens()
}

func (lsm DataLdapServerMetadataAttributes) Hosts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lsm.ref.Append("hosts"))
}

func (lsm DataLdapServerMetadataAttributes) RoleBase() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("role_base"))
}

func (lsm DataLdapServerMetadataAttributes) RoleName() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("role_name"))
}

func (lsm DataLdapServerMetadataAttributes) RoleSearchMatching() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("role_search_matching"))
}

func (lsm DataLdapServerMetadataAttributes) RoleSearchSubtree() terra.BoolValue {
	return terra.ReferenceAsBool(lsm.ref.Append("role_search_subtree"))
}

func (lsm DataLdapServerMetadataAttributes) ServiceAccountPassword() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("service_account_password"))
}

func (lsm DataLdapServerMetadataAttributes) ServiceAccountUsername() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("service_account_username"))
}

func (lsm DataLdapServerMetadataAttributes) UserBase() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("user_base"))
}

func (lsm DataLdapServerMetadataAttributes) UserRoleName() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("user_role_name"))
}

func (lsm DataLdapServerMetadataAttributes) UserSearchMatching() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("user_search_matching"))
}

func (lsm DataLdapServerMetadataAttributes) UserSearchSubtree() terra.BoolValue {
	return terra.ReferenceAsBool(lsm.ref.Append("user_search_subtree"))
}

type DataLogsAttributes struct {
	ref terra.Reference
}

func (l DataLogsAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l DataLogsAttributes) InternalWithRef(ref terra.Reference) DataLogsAttributes {
	return DataLogsAttributes{ref: ref}
}

func (l DataLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l DataLogsAttributes) Audit() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("audit"))
}

func (l DataLogsAttributes) General() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("general"))
}

type DataMaintenanceWindowStartTimeAttributes struct {
	ref terra.Reference
}

func (mwst DataMaintenanceWindowStartTimeAttributes) InternalRef() (terra.Reference, error) {
	return mwst.ref, nil
}

func (mwst DataMaintenanceWindowStartTimeAttributes) InternalWithRef(ref terra.Reference) DataMaintenanceWindowStartTimeAttributes {
	return DataMaintenanceWindowStartTimeAttributes{ref: ref}
}

func (mwst DataMaintenanceWindowStartTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mwst.ref.InternalTokens()
}

func (mwst DataMaintenanceWindowStartTimeAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(mwst.ref.Append("day_of_week"))
}

func (mwst DataMaintenanceWindowStartTimeAttributes) TimeOfDay() terra.StringValue {
	return terra.ReferenceAsString(mwst.ref.Append("time_of_day"))
}

func (mwst DataMaintenanceWindowStartTimeAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(mwst.ref.Append("time_zone"))
}

type DataUserAttributes struct {
	ref terra.Reference
}

func (u DataUserAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u DataUserAttributes) InternalWithRef(ref terra.Reference) DataUserAttributes {
	return DataUserAttributes{ref: ref}
}

func (u DataUserAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return u.ref.InternalTokens()
}

func (u DataUserAttributes) ConsoleAccess() terra.BoolValue {
	return terra.ReferenceAsBool(u.ref.Append("console_access"))
}

func (u DataUserAttributes) Groups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](u.ref.Append("groups"))
}

func (u DataUserAttributes) ReplicationUser() terra.BoolValue {
	return terra.ReferenceAsBool(u.ref.Append("replication_user"))
}

func (u DataUserAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("username"))
}

type DataConfigurationState struct {
	Id       string  `json:"id"`
	Revision float64 `json:"revision"`
}

type DataEncryptionOptionsState struct {
	KmsKeyId       string `json:"kms_key_id"`
	UseAwsOwnedKey bool   `json:"use_aws_owned_key"`
}

type DataInstancesState struct {
	ConsoleUrl string   `json:"console_url"`
	Endpoints  []string `json:"endpoints"`
	IpAddress  string   `json:"ip_address"`
}

type DataLdapServerMetadataState struct {
	Hosts                  []string `json:"hosts"`
	RoleBase               string   `json:"role_base"`
	RoleName               string   `json:"role_name"`
	RoleSearchMatching     string   `json:"role_search_matching"`
	RoleSearchSubtree      bool     `json:"role_search_subtree"`
	ServiceAccountPassword string   `json:"service_account_password"`
	ServiceAccountUsername string   `json:"service_account_username"`
	UserBase               string   `json:"user_base"`
	UserRoleName           string   `json:"user_role_name"`
	UserSearchMatching     string   `json:"user_search_matching"`
	UserSearchSubtree      bool     `json:"user_search_subtree"`
}

type DataLogsState struct {
	Audit   string `json:"audit"`
	General bool   `json:"general"`
}

type DataMaintenanceWindowStartTimeState struct {
	DayOfWeek string `json:"day_of_week"`
	TimeOfDay string `json:"time_of_day"`
	TimeZone  string `json:"time_zone"`
}

type DataUserState struct {
	ConsoleAccess   bool     `json:"console_access"`
	Groups          []string `json:"groups"`
	ReplicationUser bool     `json:"replication_user"`
	Username        string   `json:"username"`
}
