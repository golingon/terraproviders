// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lambda_layer_version_permission

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lambda_layer_version_permission.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLambdaLayerVersionPermissionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (allvp *Resource) Type() string {
	return "aws_lambda_layer_version_permission"
}

// LocalName returns the local name for [Resource].
func (allvp *Resource) LocalName() string {
	return allvp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (allvp *Resource) Configuration() interface{} {
	return allvp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (allvp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(allvp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (allvp *Resource) Dependencies() terra.Dependencies {
	return allvp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (allvp *Resource) LifecycleManagement() *terra.Lifecycle {
	return allvp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (allvp *Resource) Attributes() awsLambdaLayerVersionPermissionAttributes {
	return awsLambdaLayerVersionPermissionAttributes{ref: terra.ReferenceResource(allvp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (allvp *Resource) ImportState(state io.Reader) error {
	allvp.state = &awsLambdaLayerVersionPermissionState{}
	if err := json.NewDecoder(state).Decode(allvp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", allvp.Type(), allvp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (allvp *Resource) State() (*awsLambdaLayerVersionPermissionState, bool) {
	return allvp.state, allvp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (allvp *Resource) StateMust() *awsLambdaLayerVersionPermissionState {
	if allvp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", allvp.Type(), allvp.LocalName()))
	}
	return allvp.state
}

// Args contains the configurations for aws_lambda_layer_version_permission.
type Args struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LayerName: string, required
	LayerName terra.StringValue `hcl:"layer_name,attr" validate:"required"`
	// OrganizationId: string, optional
	OrganizationId terra.StringValue `hcl:"organization_id,attr"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
	// SkipDestroy: bool, optional
	SkipDestroy terra.BoolValue `hcl:"skip_destroy,attr"`
	// StatementId: string, required
	StatementId terra.StringValue `hcl:"statement_id,attr" validate:"required"`
	// VersionNumber: number, required
	VersionNumber terra.NumberValue `hcl:"version_number,attr" validate:"required"`
}

type awsLambdaLayerVersionPermissionAttributes struct {
	ref terra.Reference
}

// Action returns a reference to field action of aws_lambda_layer_version_permission.
func (allvp awsLambdaLayerVersionPermissionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(allvp.ref.Append("action"))
}

// Id returns a reference to field id of aws_lambda_layer_version_permission.
func (allvp awsLambdaLayerVersionPermissionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(allvp.ref.Append("id"))
}

// LayerName returns a reference to field layer_name of aws_lambda_layer_version_permission.
func (allvp awsLambdaLayerVersionPermissionAttributes) LayerName() terra.StringValue {
	return terra.ReferenceAsString(allvp.ref.Append("layer_name"))
}

// OrganizationId returns a reference to field organization_id of aws_lambda_layer_version_permission.
func (allvp awsLambdaLayerVersionPermissionAttributes) OrganizationId() terra.StringValue {
	return terra.ReferenceAsString(allvp.ref.Append("organization_id"))
}

// Policy returns a reference to field policy of aws_lambda_layer_version_permission.
func (allvp awsLambdaLayerVersionPermissionAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(allvp.ref.Append("policy"))
}

// Principal returns a reference to field principal of aws_lambda_layer_version_permission.
func (allvp awsLambdaLayerVersionPermissionAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(allvp.ref.Append("principal"))
}

// RevisionId returns a reference to field revision_id of aws_lambda_layer_version_permission.
func (allvp awsLambdaLayerVersionPermissionAttributes) RevisionId() terra.StringValue {
	return terra.ReferenceAsString(allvp.ref.Append("revision_id"))
}

// SkipDestroy returns a reference to field skip_destroy of aws_lambda_layer_version_permission.
func (allvp awsLambdaLayerVersionPermissionAttributes) SkipDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(allvp.ref.Append("skip_destroy"))
}

// StatementId returns a reference to field statement_id of aws_lambda_layer_version_permission.
func (allvp awsLambdaLayerVersionPermissionAttributes) StatementId() terra.StringValue {
	return terra.ReferenceAsString(allvp.ref.Append("statement_id"))
}

// VersionNumber returns a reference to field version_number of aws_lambda_layer_version_permission.
func (allvp awsLambdaLayerVersionPermissionAttributes) VersionNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(allvp.ref.Append("version_number"))
}

type awsLambdaLayerVersionPermissionState struct {
	Action         string  `json:"action"`
	Id             string  `json:"id"`
	LayerName      string  `json:"layer_name"`
	OrganizationId string  `json:"organization_id"`
	Policy         string  `json:"policy"`
	Principal      string  `json:"principal"`
	RevisionId     string  `json:"revision_id"`
	SkipDestroy    bool    `json:"skip_destroy"`
	StatementId    string  `json:"statement_id"`
	VersionNumber  float64 `json:"version_number"`
}
