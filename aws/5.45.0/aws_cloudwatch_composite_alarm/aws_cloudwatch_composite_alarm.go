// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_composite_alarm

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudwatch_composite_alarm.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudwatchCompositeAlarmState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acca *Resource) Type() string {
	return "aws_cloudwatch_composite_alarm"
}

// LocalName returns the local name for [Resource].
func (acca *Resource) LocalName() string {
	return acca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acca *Resource) Configuration() interface{} {
	return acca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acca *Resource) Dependencies() terra.Dependencies {
	return acca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acca *Resource) LifecycleManagement() *terra.Lifecycle {
	return acca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acca *Resource) Attributes() awsCloudwatchCompositeAlarmAttributes {
	return awsCloudwatchCompositeAlarmAttributes{ref: terra.ReferenceResource(acca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acca *Resource) ImportState(state io.Reader) error {
	acca.state = &awsCloudwatchCompositeAlarmState{}
	if err := json.NewDecoder(state).Decode(acca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acca.Type(), acca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acca *Resource) State() (*awsCloudwatchCompositeAlarmState, bool) {
	return acca.state, acca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acca *Resource) StateMust() *awsCloudwatchCompositeAlarmState {
	if acca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acca.Type(), acca.LocalName()))
	}
	return acca.state
}

// Args contains the configurations for aws_cloudwatch_composite_alarm.
type Args struct {
	// ActionsEnabled: bool, optional
	ActionsEnabled terra.BoolValue `hcl:"actions_enabled,attr"`
	// AlarmActions: set of string, optional
	AlarmActions terra.SetValue[terra.StringValue] `hcl:"alarm_actions,attr"`
	// AlarmDescription: string, optional
	AlarmDescription terra.StringValue `hcl:"alarm_description,attr"`
	// AlarmName: string, required
	AlarmName terra.StringValue `hcl:"alarm_name,attr" validate:"required"`
	// AlarmRule: string, required
	AlarmRule terra.StringValue `hcl:"alarm_rule,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InsufficientDataActions: set of string, optional
	InsufficientDataActions terra.SetValue[terra.StringValue] `hcl:"insufficient_data_actions,attr"`
	// OkActions: set of string, optional
	OkActions terra.SetValue[terra.StringValue] `hcl:"ok_actions,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ActionsSuppressor: optional
	ActionsSuppressor *ActionsSuppressor `hcl:"actions_suppressor,block"`
}

type awsCloudwatchCompositeAlarmAttributes struct {
	ref terra.Reference
}

// ActionsEnabled returns a reference to field actions_enabled of aws_cloudwatch_composite_alarm.
func (acca awsCloudwatchCompositeAlarmAttributes) ActionsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(acca.ref.Append("actions_enabled"))
}

// AlarmActions returns a reference to field alarm_actions of aws_cloudwatch_composite_alarm.
func (acca awsCloudwatchCompositeAlarmAttributes) AlarmActions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acca.ref.Append("alarm_actions"))
}

// AlarmDescription returns a reference to field alarm_description of aws_cloudwatch_composite_alarm.
func (acca awsCloudwatchCompositeAlarmAttributes) AlarmDescription() terra.StringValue {
	return terra.ReferenceAsString(acca.ref.Append("alarm_description"))
}

// AlarmName returns a reference to field alarm_name of aws_cloudwatch_composite_alarm.
func (acca awsCloudwatchCompositeAlarmAttributes) AlarmName() terra.StringValue {
	return terra.ReferenceAsString(acca.ref.Append("alarm_name"))
}

// AlarmRule returns a reference to field alarm_rule of aws_cloudwatch_composite_alarm.
func (acca awsCloudwatchCompositeAlarmAttributes) AlarmRule() terra.StringValue {
	return terra.ReferenceAsString(acca.ref.Append("alarm_rule"))
}

// Arn returns a reference to field arn of aws_cloudwatch_composite_alarm.
func (acca awsCloudwatchCompositeAlarmAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acca.ref.Append("arn"))
}

// Id returns a reference to field id of aws_cloudwatch_composite_alarm.
func (acca awsCloudwatchCompositeAlarmAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acca.ref.Append("id"))
}

// InsufficientDataActions returns a reference to field insufficient_data_actions of aws_cloudwatch_composite_alarm.
func (acca awsCloudwatchCompositeAlarmAttributes) InsufficientDataActions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acca.ref.Append("insufficient_data_actions"))
}

// OkActions returns a reference to field ok_actions of aws_cloudwatch_composite_alarm.
func (acca awsCloudwatchCompositeAlarmAttributes) OkActions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acca.ref.Append("ok_actions"))
}

// Tags returns a reference to field tags of aws_cloudwatch_composite_alarm.
func (acca awsCloudwatchCompositeAlarmAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acca.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cloudwatch_composite_alarm.
func (acca awsCloudwatchCompositeAlarmAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acca.ref.Append("tags_all"))
}

func (acca awsCloudwatchCompositeAlarmAttributes) ActionsSuppressor() terra.ListValue[ActionsSuppressorAttributes] {
	return terra.ReferenceAsList[ActionsSuppressorAttributes](acca.ref.Append("actions_suppressor"))
}

type awsCloudwatchCompositeAlarmState struct {
	ActionsEnabled          bool                     `json:"actions_enabled"`
	AlarmActions            []string                 `json:"alarm_actions"`
	AlarmDescription        string                   `json:"alarm_description"`
	AlarmName               string                   `json:"alarm_name"`
	AlarmRule               string                   `json:"alarm_rule"`
	Arn                     string                   `json:"arn"`
	Id                      string                   `json:"id"`
	InsufficientDataActions []string                 `json:"insufficient_data_actions"`
	OkActions               []string                 `json:"ok_actions"`
	Tags                    map[string]string        `json:"tags"`
	TagsAll                 map[string]string        `json:"tags_all"`
	ActionsSuppressor       []ActionsSuppressorState `json:"actions_suppressor"`
}
