// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_config_organization_managed_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_config_organization_managed_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConfigOrganizationManagedRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acomr *Resource) Type() string {
	return "aws_config_organization_managed_rule"
}

// LocalName returns the local name for [Resource].
func (acomr *Resource) LocalName() string {
	return acomr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acomr *Resource) Configuration() interface{} {
	return acomr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acomr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acomr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acomr *Resource) Dependencies() terra.Dependencies {
	return acomr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acomr *Resource) LifecycleManagement() *terra.Lifecycle {
	return acomr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acomr *Resource) Attributes() awsConfigOrganizationManagedRuleAttributes {
	return awsConfigOrganizationManagedRuleAttributes{ref: terra.ReferenceResource(acomr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acomr *Resource) ImportState(state io.Reader) error {
	acomr.state = &awsConfigOrganizationManagedRuleState{}
	if err := json.NewDecoder(state).Decode(acomr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acomr.Type(), acomr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acomr *Resource) State() (*awsConfigOrganizationManagedRuleState, bool) {
	return acomr.state, acomr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acomr *Resource) StateMust() *awsConfigOrganizationManagedRuleState {
	if acomr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acomr.Type(), acomr.LocalName()))
	}
	return acomr.state
}

// Args contains the configurations for aws_config_organization_managed_rule.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExcludedAccounts: set of string, optional
	ExcludedAccounts terra.SetValue[terra.StringValue] `hcl:"excluded_accounts,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InputParameters: string, optional
	InputParameters terra.StringValue `hcl:"input_parameters,attr"`
	// MaximumExecutionFrequency: string, optional
	MaximumExecutionFrequency terra.StringValue `hcl:"maximum_execution_frequency,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceIdScope: string, optional
	ResourceIdScope terra.StringValue `hcl:"resource_id_scope,attr"`
	// ResourceTypesScope: set of string, optional
	ResourceTypesScope terra.SetValue[terra.StringValue] `hcl:"resource_types_scope,attr"`
	// RuleIdentifier: string, required
	RuleIdentifier terra.StringValue `hcl:"rule_identifier,attr" validate:"required"`
	// TagKeyScope: string, optional
	TagKeyScope terra.StringValue `hcl:"tag_key_scope,attr"`
	// TagValueScope: string, optional
	TagValueScope terra.StringValue `hcl:"tag_value_scope,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsConfigOrganizationManagedRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_config_organization_managed_rule.
func (acomr awsConfigOrganizationManagedRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acomr.ref.Append("arn"))
}

// Description returns a reference to field description of aws_config_organization_managed_rule.
func (acomr awsConfigOrganizationManagedRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acomr.ref.Append("description"))
}

// ExcludedAccounts returns a reference to field excluded_accounts of aws_config_organization_managed_rule.
func (acomr awsConfigOrganizationManagedRuleAttributes) ExcludedAccounts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acomr.ref.Append("excluded_accounts"))
}

// Id returns a reference to field id of aws_config_organization_managed_rule.
func (acomr awsConfigOrganizationManagedRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acomr.ref.Append("id"))
}

// InputParameters returns a reference to field input_parameters of aws_config_organization_managed_rule.
func (acomr awsConfigOrganizationManagedRuleAttributes) InputParameters() terra.StringValue {
	return terra.ReferenceAsString(acomr.ref.Append("input_parameters"))
}

// MaximumExecutionFrequency returns a reference to field maximum_execution_frequency of aws_config_organization_managed_rule.
func (acomr awsConfigOrganizationManagedRuleAttributes) MaximumExecutionFrequency() terra.StringValue {
	return terra.ReferenceAsString(acomr.ref.Append("maximum_execution_frequency"))
}

// Name returns a reference to field name of aws_config_organization_managed_rule.
func (acomr awsConfigOrganizationManagedRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acomr.ref.Append("name"))
}

// ResourceIdScope returns a reference to field resource_id_scope of aws_config_organization_managed_rule.
func (acomr awsConfigOrganizationManagedRuleAttributes) ResourceIdScope() terra.StringValue {
	return terra.ReferenceAsString(acomr.ref.Append("resource_id_scope"))
}

// ResourceTypesScope returns a reference to field resource_types_scope of aws_config_organization_managed_rule.
func (acomr awsConfigOrganizationManagedRuleAttributes) ResourceTypesScope() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acomr.ref.Append("resource_types_scope"))
}

// RuleIdentifier returns a reference to field rule_identifier of aws_config_organization_managed_rule.
func (acomr awsConfigOrganizationManagedRuleAttributes) RuleIdentifier() terra.StringValue {
	return terra.ReferenceAsString(acomr.ref.Append("rule_identifier"))
}

// TagKeyScope returns a reference to field tag_key_scope of aws_config_organization_managed_rule.
func (acomr awsConfigOrganizationManagedRuleAttributes) TagKeyScope() terra.StringValue {
	return terra.ReferenceAsString(acomr.ref.Append("tag_key_scope"))
}

// TagValueScope returns a reference to field tag_value_scope of aws_config_organization_managed_rule.
func (acomr awsConfigOrganizationManagedRuleAttributes) TagValueScope() terra.StringValue {
	return terra.ReferenceAsString(acomr.ref.Append("tag_value_scope"))
}

func (acomr awsConfigOrganizationManagedRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acomr.ref.Append("timeouts"))
}

type awsConfigOrganizationManagedRuleState struct {
	Arn                       string         `json:"arn"`
	Description               string         `json:"description"`
	ExcludedAccounts          []string       `json:"excluded_accounts"`
	Id                        string         `json:"id"`
	InputParameters           string         `json:"input_parameters"`
	MaximumExecutionFrequency string         `json:"maximum_execution_frequency"`
	Name                      string         `json:"name"`
	ResourceIdScope           string         `json:"resource_id_scope"`
	ResourceTypesScope        []string       `json:"resource_types_scope"`
	RuleIdentifier            string         `json:"rule_identifier"`
	TagKeyScope               string         `json:"tag_key_scope"`
	TagValueScope             string         `json:"tag_value_scope"`
	Timeouts                  *TimeoutsState `json:"timeouts"`
}
