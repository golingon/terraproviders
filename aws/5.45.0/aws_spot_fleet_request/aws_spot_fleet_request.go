// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_spot_fleet_request

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_spot_fleet_request.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSpotFleetRequestState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asfr *Resource) Type() string {
	return "aws_spot_fleet_request"
}

// LocalName returns the local name for [Resource].
func (asfr *Resource) LocalName() string {
	return asfr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asfr *Resource) Configuration() interface{} {
	return asfr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asfr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asfr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asfr *Resource) Dependencies() terra.Dependencies {
	return asfr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asfr *Resource) LifecycleManagement() *terra.Lifecycle {
	return asfr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asfr *Resource) Attributes() awsSpotFleetRequestAttributes {
	return awsSpotFleetRequestAttributes{ref: terra.ReferenceResource(asfr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asfr *Resource) ImportState(state io.Reader) error {
	asfr.state = &awsSpotFleetRequestState{}
	if err := json.NewDecoder(state).Decode(asfr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asfr.Type(), asfr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asfr *Resource) State() (*awsSpotFleetRequestState, bool) {
	return asfr.state, asfr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asfr *Resource) StateMust() *awsSpotFleetRequestState {
	if asfr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asfr.Type(), asfr.LocalName()))
	}
	return asfr.state
}

// Args contains the configurations for aws_spot_fleet_request.
type Args struct {
	// AllocationStrategy: string, optional
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr"`
	// Context: string, optional
	Context terra.StringValue `hcl:"context,attr"`
	// ExcessCapacityTerminationPolicy: string, optional
	ExcessCapacityTerminationPolicy terra.StringValue `hcl:"excess_capacity_termination_policy,attr"`
	// FleetType: string, optional
	FleetType terra.StringValue `hcl:"fleet_type,attr"`
	// IamFleetRole: string, required
	IamFleetRole terra.StringValue `hcl:"iam_fleet_role,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceInterruptionBehaviour: string, optional
	InstanceInterruptionBehaviour terra.StringValue `hcl:"instance_interruption_behaviour,attr"`
	// InstancePoolsToUseCount: number, optional
	InstancePoolsToUseCount terra.NumberValue `hcl:"instance_pools_to_use_count,attr"`
	// LoadBalancers: set of string, optional
	LoadBalancers terra.SetValue[terra.StringValue] `hcl:"load_balancers,attr"`
	// OnDemandAllocationStrategy: string, optional
	OnDemandAllocationStrategy terra.StringValue `hcl:"on_demand_allocation_strategy,attr"`
	// OnDemandMaxTotalPrice: string, optional
	OnDemandMaxTotalPrice terra.StringValue `hcl:"on_demand_max_total_price,attr"`
	// OnDemandTargetCapacity: number, optional
	OnDemandTargetCapacity terra.NumberValue `hcl:"on_demand_target_capacity,attr"`
	// ReplaceUnhealthyInstances: bool, optional
	ReplaceUnhealthyInstances terra.BoolValue `hcl:"replace_unhealthy_instances,attr"`
	// SpotPrice: string, optional
	SpotPrice terra.StringValue `hcl:"spot_price,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetCapacity: number, required
	TargetCapacity terra.NumberValue `hcl:"target_capacity,attr" validate:"required"`
	// TargetCapacityUnitType: string, optional
	TargetCapacityUnitType terra.StringValue `hcl:"target_capacity_unit_type,attr"`
	// TargetGroupArns: set of string, optional
	TargetGroupArns terra.SetValue[terra.StringValue] `hcl:"target_group_arns,attr"`
	// TerminateInstancesOnDelete: string, optional
	TerminateInstancesOnDelete terra.StringValue `hcl:"terminate_instances_on_delete,attr"`
	// TerminateInstancesWithExpiration: bool, optional
	TerminateInstancesWithExpiration terra.BoolValue `hcl:"terminate_instances_with_expiration,attr"`
	// ValidFrom: string, optional
	ValidFrom terra.StringValue `hcl:"valid_from,attr"`
	// ValidUntil: string, optional
	ValidUntil terra.StringValue `hcl:"valid_until,attr"`
	// WaitForFulfillment: bool, optional
	WaitForFulfillment terra.BoolValue `hcl:"wait_for_fulfillment,attr"`
	// LaunchSpecification: min=0
	LaunchSpecification []LaunchSpecification `hcl:"launch_specification,block" validate:"min=0"`
	// LaunchTemplateConfig: min=0
	LaunchTemplateConfig []LaunchTemplateConfig `hcl:"launch_template_config,block" validate:"min=0"`
	// SpotMaintenanceStrategies: optional
	SpotMaintenanceStrategies *SpotMaintenanceStrategies `hcl:"spot_maintenance_strategies,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsSpotFleetRequestAttributes struct {
	ref terra.Reference
}

// AllocationStrategy returns a reference to field allocation_strategy of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("allocation_strategy"))
}

// ClientToken returns a reference to field client_token of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) ClientToken() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("client_token"))
}

// Context returns a reference to field context of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) Context() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("context"))
}

// ExcessCapacityTerminationPolicy returns a reference to field excess_capacity_termination_policy of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) ExcessCapacityTerminationPolicy() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("excess_capacity_termination_policy"))
}

// FleetType returns a reference to field fleet_type of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) FleetType() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("fleet_type"))
}

// IamFleetRole returns a reference to field iam_fleet_role of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) IamFleetRole() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("iam_fleet_role"))
}

// Id returns a reference to field id of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("id"))
}

// InstanceInterruptionBehaviour returns a reference to field instance_interruption_behaviour of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) InstanceInterruptionBehaviour() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("instance_interruption_behaviour"))
}

// InstancePoolsToUseCount returns a reference to field instance_pools_to_use_count of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) InstancePoolsToUseCount() terra.NumberValue {
	return terra.ReferenceAsNumber(asfr.ref.Append("instance_pools_to_use_count"))
}

// LoadBalancers returns a reference to field load_balancers of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) LoadBalancers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asfr.ref.Append("load_balancers"))
}

// OnDemandAllocationStrategy returns a reference to field on_demand_allocation_strategy of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) OnDemandAllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("on_demand_allocation_strategy"))
}

// OnDemandMaxTotalPrice returns a reference to field on_demand_max_total_price of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) OnDemandMaxTotalPrice() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("on_demand_max_total_price"))
}

// OnDemandTargetCapacity returns a reference to field on_demand_target_capacity of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) OnDemandTargetCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(asfr.ref.Append("on_demand_target_capacity"))
}

// ReplaceUnhealthyInstances returns a reference to field replace_unhealthy_instances of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) ReplaceUnhealthyInstances() terra.BoolValue {
	return terra.ReferenceAsBool(asfr.ref.Append("replace_unhealthy_instances"))
}

// SpotPrice returns a reference to field spot_price of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) SpotPrice() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("spot_price"))
}

// SpotRequestState returns a reference to field spot_request_state of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) SpotRequestState() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("spot_request_state"))
}

// Tags returns a reference to field tags of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asfr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asfr.ref.Append("tags_all"))
}

// TargetCapacity returns a reference to field target_capacity of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) TargetCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(asfr.ref.Append("target_capacity"))
}

// TargetCapacityUnitType returns a reference to field target_capacity_unit_type of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) TargetCapacityUnitType() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("target_capacity_unit_type"))
}

// TargetGroupArns returns a reference to field target_group_arns of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) TargetGroupArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asfr.ref.Append("target_group_arns"))
}

// TerminateInstancesOnDelete returns a reference to field terminate_instances_on_delete of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) TerminateInstancesOnDelete() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("terminate_instances_on_delete"))
}

// TerminateInstancesWithExpiration returns a reference to field terminate_instances_with_expiration of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) TerminateInstancesWithExpiration() terra.BoolValue {
	return terra.ReferenceAsBool(asfr.ref.Append("terminate_instances_with_expiration"))
}

// ValidFrom returns a reference to field valid_from of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) ValidFrom() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("valid_from"))
}

// ValidUntil returns a reference to field valid_until of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) ValidUntil() terra.StringValue {
	return terra.ReferenceAsString(asfr.ref.Append("valid_until"))
}

// WaitForFulfillment returns a reference to field wait_for_fulfillment of aws_spot_fleet_request.
func (asfr awsSpotFleetRequestAttributes) WaitForFulfillment() terra.BoolValue {
	return terra.ReferenceAsBool(asfr.ref.Append("wait_for_fulfillment"))
}

func (asfr awsSpotFleetRequestAttributes) LaunchSpecification() terra.SetValue[LaunchSpecificationAttributes] {
	return terra.ReferenceAsSet[LaunchSpecificationAttributes](asfr.ref.Append("launch_specification"))
}

func (asfr awsSpotFleetRequestAttributes) LaunchTemplateConfig() terra.SetValue[LaunchTemplateConfigAttributes] {
	return terra.ReferenceAsSet[LaunchTemplateConfigAttributes](asfr.ref.Append("launch_template_config"))
}

func (asfr awsSpotFleetRequestAttributes) SpotMaintenanceStrategies() terra.ListValue[SpotMaintenanceStrategiesAttributes] {
	return terra.ReferenceAsList[SpotMaintenanceStrategiesAttributes](asfr.ref.Append("spot_maintenance_strategies"))
}

func (asfr awsSpotFleetRequestAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asfr.ref.Append("timeouts"))
}

type awsSpotFleetRequestState struct {
	AllocationStrategy               string                           `json:"allocation_strategy"`
	ClientToken                      string                           `json:"client_token"`
	Context                          string                           `json:"context"`
	ExcessCapacityTerminationPolicy  string                           `json:"excess_capacity_termination_policy"`
	FleetType                        string                           `json:"fleet_type"`
	IamFleetRole                     string                           `json:"iam_fleet_role"`
	Id                               string                           `json:"id"`
	InstanceInterruptionBehaviour    string                           `json:"instance_interruption_behaviour"`
	InstancePoolsToUseCount          float64                          `json:"instance_pools_to_use_count"`
	LoadBalancers                    []string                         `json:"load_balancers"`
	OnDemandAllocationStrategy       string                           `json:"on_demand_allocation_strategy"`
	OnDemandMaxTotalPrice            string                           `json:"on_demand_max_total_price"`
	OnDemandTargetCapacity           float64                          `json:"on_demand_target_capacity"`
	ReplaceUnhealthyInstances        bool                             `json:"replace_unhealthy_instances"`
	SpotPrice                        string                           `json:"spot_price"`
	SpotRequestState                 string                           `json:"spot_request_state"`
	Tags                             map[string]string                `json:"tags"`
	TagsAll                          map[string]string                `json:"tags_all"`
	TargetCapacity                   float64                          `json:"target_capacity"`
	TargetCapacityUnitType           string                           `json:"target_capacity_unit_type"`
	TargetGroupArns                  []string                         `json:"target_group_arns"`
	TerminateInstancesOnDelete       string                           `json:"terminate_instances_on_delete"`
	TerminateInstancesWithExpiration bool                             `json:"terminate_instances_with_expiration"`
	ValidFrom                        string                           `json:"valid_from"`
	ValidUntil                       string                           `json:"valid_until"`
	WaitForFulfillment               bool                             `json:"wait_for_fulfillment"`
	LaunchSpecification              []LaunchSpecificationState       `json:"launch_specification"`
	LaunchTemplateConfig             []LaunchTemplateConfigState      `json:"launch_template_config"`
	SpotMaintenanceStrategies        []SpotMaintenanceStrategiesState `json:"spot_maintenance_strategies"`
	Timeouts                         *TimeoutsState                   `json:"timeouts"`
}
