// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_m2_deployment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_m2_deployment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsM2DeploymentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amd *Resource) Type() string {
	return "aws_m2_deployment"
}

// LocalName returns the local name for [Resource].
func (amd *Resource) LocalName() string {
	return amd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amd *Resource) Configuration() interface{} {
	return amd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amd *Resource) Dependencies() terra.Dependencies {
	return amd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amd *Resource) LifecycleManagement() *terra.Lifecycle {
	return amd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amd *Resource) Attributes() awsM2DeploymentAttributes {
	return awsM2DeploymentAttributes{ref: terra.ReferenceResource(amd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amd *Resource) ImportState(state io.Reader) error {
	amd.state = &awsM2DeploymentState{}
	if err := json.NewDecoder(state).Decode(amd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amd.Type(), amd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amd *Resource) State() (*awsM2DeploymentState, bool) {
	return amd.state, amd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amd *Resource) StateMust() *awsM2DeploymentState {
	if amd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amd.Type(), amd.LocalName()))
	}
	return amd.state
}

// Args contains the configurations for aws_m2_deployment.
type Args struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// ApplicationVersion: number, required
	ApplicationVersion terra.NumberValue `hcl:"application_version,attr" validate:"required"`
	// EnvironmentId: string, required
	EnvironmentId terra.StringValue `hcl:"environment_id,attr" validate:"required"`
	// ForceStop: bool, optional
	ForceStop terra.BoolValue `hcl:"force_stop,attr"`
	// Start: bool, required
	Start terra.BoolValue `hcl:"start,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsM2DeploymentAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of aws_m2_deployment.
func (amd awsM2DeploymentAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("application_id"))
}

// ApplicationVersion returns a reference to field application_version of aws_m2_deployment.
func (amd awsM2DeploymentAttributes) ApplicationVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(amd.ref.Append("application_version"))
}

// DeploymentId returns a reference to field deployment_id of aws_m2_deployment.
func (amd awsM2DeploymentAttributes) DeploymentId() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("deployment_id"))
}

// EnvironmentId returns a reference to field environment_id of aws_m2_deployment.
func (amd awsM2DeploymentAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("environment_id"))
}

// ForceStop returns a reference to field force_stop of aws_m2_deployment.
func (amd awsM2DeploymentAttributes) ForceStop() terra.BoolValue {
	return terra.ReferenceAsBool(amd.ref.Append("force_stop"))
}

// Id returns a reference to field id of aws_m2_deployment.
func (amd awsM2DeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amd.ref.Append("id"))
}

// Start returns a reference to field start of aws_m2_deployment.
func (amd awsM2DeploymentAttributes) Start() terra.BoolValue {
	return terra.ReferenceAsBool(amd.ref.Append("start"))
}

func (amd awsM2DeploymentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amd.ref.Append("timeouts"))
}

type awsM2DeploymentState struct {
	ApplicationId      string         `json:"application_id"`
	ApplicationVersion float64        `json:"application_version"`
	DeploymentId       string         `json:"deployment_id"`
	EnvironmentId      string         `json:"environment_id"`
	ForceStop          bool           `json:"force_stop"`
	Id                 string         `json:"id"`
	Start              bool           `json:"start"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
