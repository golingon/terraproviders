// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dynamodb_contributor_insights

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dynamodb_contributor_insights.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDynamodbContributorInsightsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adci *Resource) Type() string {
	return "aws_dynamodb_contributor_insights"
}

// LocalName returns the local name for [Resource].
func (adci *Resource) LocalName() string {
	return adci.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adci *Resource) Configuration() interface{} {
	return adci.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adci *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adci)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adci *Resource) Dependencies() terra.Dependencies {
	return adci.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adci *Resource) LifecycleManagement() *terra.Lifecycle {
	return adci.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adci *Resource) Attributes() awsDynamodbContributorInsightsAttributes {
	return awsDynamodbContributorInsightsAttributes{ref: terra.ReferenceResource(adci)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adci *Resource) ImportState(state io.Reader) error {
	adci.state = &awsDynamodbContributorInsightsState{}
	if err := json.NewDecoder(state).Decode(adci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adci.Type(), adci.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adci *Resource) State() (*awsDynamodbContributorInsightsState, bool) {
	return adci.state, adci.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adci *Resource) StateMust() *awsDynamodbContributorInsightsState {
	if adci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adci.Type(), adci.LocalName()))
	}
	return adci.state
}

// Args contains the configurations for aws_dynamodb_contributor_insights.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IndexName: string, optional
	IndexName terra.StringValue `hcl:"index_name,attr"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDynamodbContributorInsightsAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_dynamodb_contributor_insights.
func (adci awsDynamodbContributorInsightsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adci.ref.Append("id"))
}

// IndexName returns a reference to field index_name of aws_dynamodb_contributor_insights.
func (adci awsDynamodbContributorInsightsAttributes) IndexName() terra.StringValue {
	return terra.ReferenceAsString(adci.ref.Append("index_name"))
}

// TableName returns a reference to field table_name of aws_dynamodb_contributor_insights.
func (adci awsDynamodbContributorInsightsAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(adci.ref.Append("table_name"))
}

func (adci awsDynamodbContributorInsightsAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adci.ref.Append("timeouts"))
}

type awsDynamodbContributorInsightsState struct {
	Id        string         `json:"id"`
	IndexName string         `json:"index_name"`
	TableName string         `json:"table_name"`
	Timeouts  *TimeoutsState `json:"timeouts"`
}
