// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_db_parameter_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_db_parameter_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDbParameterGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adpg *Resource) Type() string {
	return "aws_db_parameter_group"
}

// LocalName returns the local name for [Resource].
func (adpg *Resource) LocalName() string {
	return adpg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adpg *Resource) Configuration() interface{} {
	return adpg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adpg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adpg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adpg *Resource) Dependencies() terra.Dependencies {
	return adpg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adpg *Resource) LifecycleManagement() *terra.Lifecycle {
	return adpg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adpg *Resource) Attributes() awsDbParameterGroupAttributes {
	return awsDbParameterGroupAttributes{ref: terra.ReferenceResource(adpg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adpg *Resource) ImportState(state io.Reader) error {
	adpg.state = &awsDbParameterGroupState{}
	if err := json.NewDecoder(state).Decode(adpg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adpg.Type(), adpg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adpg *Resource) State() (*awsDbParameterGroupState, bool) {
	return adpg.state, adpg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adpg *Resource) StateMust() *awsDbParameterGroupState {
	if adpg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adpg.Type(), adpg.LocalName()))
	}
	return adpg.state
}

// Args contains the configurations for aws_db_parameter_group.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Family: string, required
	Family terra.StringValue `hcl:"family,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Parameter: min=0
	Parameter []Parameter `hcl:"parameter,block" validate:"min=0"`
}

type awsDbParameterGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_db_parameter_group.
func (adpg awsDbParameterGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adpg.ref.Append("arn"))
}

// Description returns a reference to field description of aws_db_parameter_group.
func (adpg awsDbParameterGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adpg.ref.Append("description"))
}

// Family returns a reference to field family of aws_db_parameter_group.
func (adpg awsDbParameterGroupAttributes) Family() terra.StringValue {
	return terra.ReferenceAsString(adpg.ref.Append("family"))
}

// Id returns a reference to field id of aws_db_parameter_group.
func (adpg awsDbParameterGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adpg.ref.Append("id"))
}

// Name returns a reference to field name of aws_db_parameter_group.
func (adpg awsDbParameterGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adpg.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_db_parameter_group.
func (adpg awsDbParameterGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(adpg.ref.Append("name_prefix"))
}

// Tags returns a reference to field tags of aws_db_parameter_group.
func (adpg awsDbParameterGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adpg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_db_parameter_group.
func (adpg awsDbParameterGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adpg.ref.Append("tags_all"))
}

func (adpg awsDbParameterGroupAttributes) Parameter() terra.SetValue[ParameterAttributes] {
	return terra.ReferenceAsSet[ParameterAttributes](adpg.ref.Append("parameter"))
}

type awsDbParameterGroupState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	Family      string            `json:"family"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	NamePrefix  string            `json:"name_prefix"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	Parameter   []ParameterState  `json:"parameter"`
}
