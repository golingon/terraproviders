// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lexv2models_bot

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataPrivacy struct {
	// ChildDirected: bool, required
	ChildDirected terra.BoolValue `hcl:"child_directed,attr" validate:"required"`
}

type Members struct {
	// AliasId: string, required
	AliasId terra.StringValue `hcl:"alias_id,attr" validate:"required"`
	// AliasName: string, required
	AliasName terra.StringValue `hcl:"alias_name,attr" validate:"required"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DataPrivacyAttributes struct {
	ref terra.Reference
}

func (dp DataPrivacyAttributes) InternalRef() (terra.Reference, error) {
	return dp.ref, nil
}

func (dp DataPrivacyAttributes) InternalWithRef(ref terra.Reference) DataPrivacyAttributes {
	return DataPrivacyAttributes{ref: ref}
}

func (dp DataPrivacyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dp.ref.InternalTokens()
}

func (dp DataPrivacyAttributes) ChildDirected() terra.BoolValue {
	return terra.ReferenceAsBool(dp.ref.Append("child_directed"))
}

type MembersAttributes struct {
	ref terra.Reference
}

func (m MembersAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MembersAttributes) InternalWithRef(ref terra.Reference) MembersAttributes {
	return MembersAttributes{ref: ref}
}

func (m MembersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MembersAttributes) AliasId() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("alias_id"))
}

func (m MembersAttributes) AliasName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("alias_name"))
}

func (m MembersAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("id"))
}

func (m MembersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("name"))
}

func (m MembersAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("version"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DataPrivacyState struct {
	ChildDirected bool `json:"child_directed"`
}

type MembersState struct {
	AliasId   string `json:"alias_id"`
	AliasName string `json:"alias_name"`
	Id        string `json:"id"`
	Name      string `json:"name"`
	Version   string `json:"version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
