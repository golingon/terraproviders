// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lexv2models_bot

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lexv2models_bot.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLexv2ModelsBotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alb *Resource) Type() string {
	return "aws_lexv2models_bot"
}

// LocalName returns the local name for [Resource].
func (alb *Resource) LocalName() string {
	return alb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alb *Resource) Configuration() interface{} {
	return alb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alb *Resource) Dependencies() terra.Dependencies {
	return alb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alb *Resource) LifecycleManagement() *terra.Lifecycle {
	return alb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alb *Resource) Attributes() awsLexv2ModelsBotAttributes {
	return awsLexv2ModelsBotAttributes{ref: terra.ReferenceResource(alb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alb *Resource) ImportState(state io.Reader) error {
	alb.state = &awsLexv2ModelsBotState{}
	if err := json.NewDecoder(state).Decode(alb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alb.Type(), alb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alb *Resource) State() (*awsLexv2ModelsBotState, bool) {
	return alb.state, alb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alb *Resource) StateMust() *awsLexv2ModelsBotState {
	if alb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alb.Type(), alb.LocalName()))
	}
	return alb.state
}

// Args contains the configurations for aws_lexv2models_bot.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// IdleSessionTtlInSeconds: number, required
	IdleSessionTtlInSeconds terra.NumberValue `hcl:"idle_session_ttl_in_seconds,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TestBotAliasTags: map of string, optional
	TestBotAliasTags terra.MapValue[terra.StringValue] `hcl:"test_bot_alias_tags,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// DataPrivacy: min=0
	DataPrivacy []DataPrivacy `hcl:"data_privacy,block" validate:"min=0"`
	// Members: min=0
	Members []Members `hcl:"members,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsLexv2ModelsBotAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_lexv2models_bot.
func (alb awsLexv2ModelsBotAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("arn"))
}

// Description returns a reference to field description of aws_lexv2models_bot.
func (alb awsLexv2ModelsBotAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("description"))
}

// Id returns a reference to field id of aws_lexv2models_bot.
func (alb awsLexv2ModelsBotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("id"))
}

// IdleSessionTtlInSeconds returns a reference to field idle_session_ttl_in_seconds of aws_lexv2models_bot.
func (alb awsLexv2ModelsBotAttributes) IdleSessionTtlInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(alb.ref.Append("idle_session_ttl_in_seconds"))
}

// Name returns a reference to field name of aws_lexv2models_bot.
func (alb awsLexv2ModelsBotAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_lexv2models_bot.
func (alb awsLexv2ModelsBotAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("role_arn"))
}

// Tags returns a reference to field tags of aws_lexv2models_bot.
func (alb awsLexv2ModelsBotAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alb.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_lexv2models_bot.
func (alb awsLexv2ModelsBotAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alb.ref.Append("tags_all"))
}

// TestBotAliasTags returns a reference to field test_bot_alias_tags of aws_lexv2models_bot.
func (alb awsLexv2ModelsBotAttributes) TestBotAliasTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alb.ref.Append("test_bot_alias_tags"))
}

// Type returns a reference to field type of aws_lexv2models_bot.
func (alb awsLexv2ModelsBotAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("type"))
}

func (alb awsLexv2ModelsBotAttributes) DataPrivacy() terra.ListValue[DataPrivacyAttributes] {
	return terra.ReferenceAsList[DataPrivacyAttributes](alb.ref.Append("data_privacy"))
}

func (alb awsLexv2ModelsBotAttributes) Members() terra.ListValue[MembersAttributes] {
	return terra.ReferenceAsList[MembersAttributes](alb.ref.Append("members"))
}

func (alb awsLexv2ModelsBotAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alb.ref.Append("timeouts"))
}

type awsLexv2ModelsBotState struct {
	Arn                     string             `json:"arn"`
	Description             string             `json:"description"`
	Id                      string             `json:"id"`
	IdleSessionTtlInSeconds float64            `json:"idle_session_ttl_in_seconds"`
	Name                    string             `json:"name"`
	RoleArn                 string             `json:"role_arn"`
	Tags                    map[string]string  `json:"tags"`
	TagsAll                 map[string]string  `json:"tags_all"`
	TestBotAliasTags        map[string]string  `json:"test_bot_alias_tags"`
	Type                    string             `json:"type"`
	DataPrivacy             []DataPrivacyState `json:"data_privacy"`
	Members                 []MembersState     `json:"members"`
	Timeouts                *TimeoutsState     `json:"timeouts"`
}
