// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_securityhub_automation_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_securityhub_automation_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSecurityhubAutomationRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asar *Resource) Type() string {
	return "aws_securityhub_automation_rule"
}

// LocalName returns the local name for [Resource].
func (asar *Resource) LocalName() string {
	return asar.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asar *Resource) Configuration() interface{} {
	return asar.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asar *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asar)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asar *Resource) Dependencies() terra.Dependencies {
	return asar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asar *Resource) LifecycleManagement() *terra.Lifecycle {
	return asar.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asar *Resource) Attributes() awsSecurityhubAutomationRuleAttributes {
	return awsSecurityhubAutomationRuleAttributes{ref: terra.ReferenceResource(asar)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asar *Resource) ImportState(state io.Reader) error {
	asar.state = &awsSecurityhubAutomationRuleState{}
	if err := json.NewDecoder(state).Decode(asar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asar.Type(), asar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asar *Resource) State() (*awsSecurityhubAutomationRuleState, bool) {
	return asar.state, asar.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asar *Resource) StateMust() *awsSecurityhubAutomationRuleState {
	if asar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asar.Type(), asar.LocalName()))
	}
	return asar.state
}

// Args contains the configurations for aws_securityhub_automation_rule.
type Args struct {
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// IsTerminal: bool, optional
	IsTerminal terra.BoolValue `hcl:"is_terminal,attr"`
	// RuleName: string, required
	RuleName terra.StringValue `hcl:"rule_name,attr" validate:"required"`
	// RuleOrder: number, required
	RuleOrder terra.NumberValue `hcl:"rule_order,attr" validate:"required"`
	// RuleStatus: string, optional
	RuleStatus terra.StringValue `hcl:"rule_status,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Actions: min=0
	Actions []Actions `hcl:"actions,block" validate:"min=0"`
	// Criteria: min=0
	Criteria []Criteria `hcl:"criteria,block" validate:"min=0"`
}

type awsSecurityhubAutomationRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_securityhub_automation_rule.
func (asar awsSecurityhubAutomationRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asar.ref.Append("arn"))
}

// Description returns a reference to field description of aws_securityhub_automation_rule.
func (asar awsSecurityhubAutomationRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asar.ref.Append("description"))
}

// Id returns a reference to field id of aws_securityhub_automation_rule.
func (asar awsSecurityhubAutomationRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asar.ref.Append("id"))
}

// IsTerminal returns a reference to field is_terminal of aws_securityhub_automation_rule.
func (asar awsSecurityhubAutomationRuleAttributes) IsTerminal() terra.BoolValue {
	return terra.ReferenceAsBool(asar.ref.Append("is_terminal"))
}

// RuleName returns a reference to field rule_name of aws_securityhub_automation_rule.
func (asar awsSecurityhubAutomationRuleAttributes) RuleName() terra.StringValue {
	return terra.ReferenceAsString(asar.ref.Append("rule_name"))
}

// RuleOrder returns a reference to field rule_order of aws_securityhub_automation_rule.
func (asar awsSecurityhubAutomationRuleAttributes) RuleOrder() terra.NumberValue {
	return terra.ReferenceAsNumber(asar.ref.Append("rule_order"))
}

// RuleStatus returns a reference to field rule_status of aws_securityhub_automation_rule.
func (asar awsSecurityhubAutomationRuleAttributes) RuleStatus() terra.StringValue {
	return terra.ReferenceAsString(asar.ref.Append("rule_status"))
}

// Tags returns a reference to field tags of aws_securityhub_automation_rule.
func (asar awsSecurityhubAutomationRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asar.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_securityhub_automation_rule.
func (asar awsSecurityhubAutomationRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asar.ref.Append("tags_all"))
}

func (asar awsSecurityhubAutomationRuleAttributes) Actions() terra.SetValue[ActionsAttributes] {
	return terra.ReferenceAsSet[ActionsAttributes](asar.ref.Append("actions"))
}

func (asar awsSecurityhubAutomationRuleAttributes) Criteria() terra.ListValue[CriteriaAttributes] {
	return terra.ReferenceAsList[CriteriaAttributes](asar.ref.Append("criteria"))
}

type awsSecurityhubAutomationRuleState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	IsTerminal  bool              `json:"is_terminal"`
	RuleName    string            `json:"rule_name"`
	RuleOrder   float64           `json:"rule_order"`
	RuleStatus  string            `json:"rule_status"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	Actions     []ActionsState    `json:"actions"`
	Criteria    []CriteriaState   `json:"criteria"`
}
