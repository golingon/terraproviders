// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_catalog_database

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glue_catalog_database.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlueCatalogDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agcd *Resource) Type() string {
	return "aws_glue_catalog_database"
}

// LocalName returns the local name for [Resource].
func (agcd *Resource) LocalName() string {
	return agcd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agcd *Resource) Configuration() interface{} {
	return agcd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agcd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agcd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agcd *Resource) Dependencies() terra.Dependencies {
	return agcd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agcd *Resource) LifecycleManagement() *terra.Lifecycle {
	return agcd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agcd *Resource) Attributes() awsGlueCatalogDatabaseAttributes {
	return awsGlueCatalogDatabaseAttributes{ref: terra.ReferenceResource(agcd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agcd *Resource) ImportState(state io.Reader) error {
	agcd.state = &awsGlueCatalogDatabaseState{}
	if err := json.NewDecoder(state).Decode(agcd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agcd.Type(), agcd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agcd *Resource) State() (*awsGlueCatalogDatabaseState, bool) {
	return agcd.state, agcd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agcd *Resource) StateMust() *awsGlueCatalogDatabaseState {
	if agcd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agcd.Type(), agcd.LocalName()))
	}
	return agcd.state
}

// Args contains the configurations for aws_glue_catalog_database.
type Args struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocationUri: string, optional
	LocationUri terra.StringValue `hcl:"location_uri,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CreateTableDefaultPermission: min=0
	CreateTableDefaultPermission []CreateTableDefaultPermission `hcl:"create_table_default_permission,block" validate:"min=0"`
	// FederatedDatabase: optional
	FederatedDatabase *FederatedDatabase `hcl:"federated_database,block"`
	// TargetDatabase: optional
	TargetDatabase *TargetDatabase `hcl:"target_database,block"`
}

type awsGlueCatalogDatabaseAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_glue_catalog_database.
func (agcd awsGlueCatalogDatabaseAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agcd.ref.Append("arn"))
}

// CatalogId returns a reference to field catalog_id of aws_glue_catalog_database.
func (agcd awsGlueCatalogDatabaseAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(agcd.ref.Append("catalog_id"))
}

// Description returns a reference to field description of aws_glue_catalog_database.
func (agcd awsGlueCatalogDatabaseAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(agcd.ref.Append("description"))
}

// Id returns a reference to field id of aws_glue_catalog_database.
func (agcd awsGlueCatalogDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agcd.ref.Append("id"))
}

// LocationUri returns a reference to field location_uri of aws_glue_catalog_database.
func (agcd awsGlueCatalogDatabaseAttributes) LocationUri() terra.StringValue {
	return terra.ReferenceAsString(agcd.ref.Append("location_uri"))
}

// Name returns a reference to field name of aws_glue_catalog_database.
func (agcd awsGlueCatalogDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agcd.ref.Append("name"))
}

// Parameters returns a reference to field parameters of aws_glue_catalog_database.
func (agcd awsGlueCatalogDatabaseAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agcd.ref.Append("parameters"))
}

// Tags returns a reference to field tags of aws_glue_catalog_database.
func (agcd awsGlueCatalogDatabaseAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agcd.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_glue_catalog_database.
func (agcd awsGlueCatalogDatabaseAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agcd.ref.Append("tags_all"))
}

func (agcd awsGlueCatalogDatabaseAttributes) CreateTableDefaultPermission() terra.ListValue[CreateTableDefaultPermissionAttributes] {
	return terra.ReferenceAsList[CreateTableDefaultPermissionAttributes](agcd.ref.Append("create_table_default_permission"))
}

func (agcd awsGlueCatalogDatabaseAttributes) FederatedDatabase() terra.ListValue[FederatedDatabaseAttributes] {
	return terra.ReferenceAsList[FederatedDatabaseAttributes](agcd.ref.Append("federated_database"))
}

func (agcd awsGlueCatalogDatabaseAttributes) TargetDatabase() terra.ListValue[TargetDatabaseAttributes] {
	return terra.ReferenceAsList[TargetDatabaseAttributes](agcd.ref.Append("target_database"))
}

type awsGlueCatalogDatabaseState struct {
	Arn                          string                              `json:"arn"`
	CatalogId                    string                              `json:"catalog_id"`
	Description                  string                              `json:"description"`
	Id                           string                              `json:"id"`
	LocationUri                  string                              `json:"location_uri"`
	Name                         string                              `json:"name"`
	Parameters                   map[string]string                   `json:"parameters"`
	Tags                         map[string]string                   `json:"tags"`
	TagsAll                      map[string]string                   `json:"tags_all"`
	CreateTableDefaultPermission []CreateTableDefaultPermissionState `json:"create_table_default_permission"`
	FederatedDatabase            []FederatedDatabaseState            `json:"federated_database"`
	TargetDatabase               []TargetDatabaseState               `json:"target_database"`
}
