// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkfirewall_firewall

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_networkfirewall_firewall.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkfirewallFirewallState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anf *Resource) Type() string {
	return "aws_networkfirewall_firewall"
}

// LocalName returns the local name for [Resource].
func (anf *Resource) LocalName() string {
	return anf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anf *Resource) Configuration() interface{} {
	return anf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anf *Resource) Dependencies() terra.Dependencies {
	return anf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anf *Resource) LifecycleManagement() *terra.Lifecycle {
	return anf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anf *Resource) Attributes() awsNetworkfirewallFirewallAttributes {
	return awsNetworkfirewallFirewallAttributes{ref: terra.ReferenceResource(anf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anf *Resource) ImportState(state io.Reader) error {
	anf.state = &awsNetworkfirewallFirewallState{}
	if err := json.NewDecoder(state).Decode(anf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anf.Type(), anf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anf *Resource) State() (*awsNetworkfirewallFirewallState, bool) {
	return anf.state, anf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anf *Resource) StateMust() *awsNetworkfirewallFirewallState {
	if anf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anf.Type(), anf.LocalName()))
	}
	return anf.state
}

// Args contains the configurations for aws_networkfirewall_firewall.
type Args struct {
	// DeleteProtection: bool, optional
	DeleteProtection terra.BoolValue `hcl:"delete_protection,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FirewallPolicyArn: string, required
	FirewallPolicyArn terra.StringValue `hcl:"firewall_policy_arn,attr" validate:"required"`
	// FirewallPolicyChangeProtection: bool, optional
	FirewallPolicyChangeProtection terra.BoolValue `hcl:"firewall_policy_change_protection,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubnetChangeProtection: bool, optional
	SubnetChangeProtection terra.BoolValue `hcl:"subnet_change_protection,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// EncryptionConfiguration: optional
	EncryptionConfiguration *EncryptionConfiguration `hcl:"encryption_configuration,block"`
	// SubnetMapping: min=1
	SubnetMapping []SubnetMapping `hcl:"subnet_mapping,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsNetworkfirewallFirewallAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_networkfirewall_firewall.
func (anf awsNetworkfirewallFirewallAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(anf.ref.Append("arn"))
}

// DeleteProtection returns a reference to field delete_protection of aws_networkfirewall_firewall.
func (anf awsNetworkfirewallFirewallAttributes) DeleteProtection() terra.BoolValue {
	return terra.ReferenceAsBool(anf.ref.Append("delete_protection"))
}

// Description returns a reference to field description of aws_networkfirewall_firewall.
func (anf awsNetworkfirewallFirewallAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(anf.ref.Append("description"))
}

// FirewallPolicyArn returns a reference to field firewall_policy_arn of aws_networkfirewall_firewall.
func (anf awsNetworkfirewallFirewallAttributes) FirewallPolicyArn() terra.StringValue {
	return terra.ReferenceAsString(anf.ref.Append("firewall_policy_arn"))
}

// FirewallPolicyChangeProtection returns a reference to field firewall_policy_change_protection of aws_networkfirewall_firewall.
func (anf awsNetworkfirewallFirewallAttributes) FirewallPolicyChangeProtection() terra.BoolValue {
	return terra.ReferenceAsBool(anf.ref.Append("firewall_policy_change_protection"))
}

// Id returns a reference to field id of aws_networkfirewall_firewall.
func (anf awsNetworkfirewallFirewallAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anf.ref.Append("id"))
}

// Name returns a reference to field name of aws_networkfirewall_firewall.
func (anf awsNetworkfirewallFirewallAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(anf.ref.Append("name"))
}

// SubnetChangeProtection returns a reference to field subnet_change_protection of aws_networkfirewall_firewall.
func (anf awsNetworkfirewallFirewallAttributes) SubnetChangeProtection() terra.BoolValue {
	return terra.ReferenceAsBool(anf.ref.Append("subnet_change_protection"))
}

// Tags returns a reference to field tags of aws_networkfirewall_firewall.
func (anf awsNetworkfirewallFirewallAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](anf.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_networkfirewall_firewall.
func (anf awsNetworkfirewallFirewallAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](anf.ref.Append("tags_all"))
}

// UpdateToken returns a reference to field update_token of aws_networkfirewall_firewall.
func (anf awsNetworkfirewallFirewallAttributes) UpdateToken() terra.StringValue {
	return terra.ReferenceAsString(anf.ref.Append("update_token"))
}

// VpcId returns a reference to field vpc_id of aws_networkfirewall_firewall.
func (anf awsNetworkfirewallFirewallAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(anf.ref.Append("vpc_id"))
}

func (anf awsNetworkfirewallFirewallAttributes) FirewallStatus() terra.ListValue[FirewallStatusAttributes] {
	return terra.ReferenceAsList[FirewallStatusAttributes](anf.ref.Append("firewall_status"))
}

func (anf awsNetworkfirewallFirewallAttributes) EncryptionConfiguration() terra.ListValue[EncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[EncryptionConfigurationAttributes](anf.ref.Append("encryption_configuration"))
}

func (anf awsNetworkfirewallFirewallAttributes) SubnetMapping() terra.SetValue[SubnetMappingAttributes] {
	return terra.ReferenceAsSet[SubnetMappingAttributes](anf.ref.Append("subnet_mapping"))
}

func (anf awsNetworkfirewallFirewallAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anf.ref.Append("timeouts"))
}

type awsNetworkfirewallFirewallState struct {
	Arn                            string                         `json:"arn"`
	DeleteProtection               bool                           `json:"delete_protection"`
	Description                    string                         `json:"description"`
	FirewallPolicyArn              string                         `json:"firewall_policy_arn"`
	FirewallPolicyChangeProtection bool                           `json:"firewall_policy_change_protection"`
	Id                             string                         `json:"id"`
	Name                           string                         `json:"name"`
	SubnetChangeProtection         bool                           `json:"subnet_change_protection"`
	Tags                           map[string]string              `json:"tags"`
	TagsAll                        map[string]string              `json:"tags_all"`
	UpdateToken                    string                         `json:"update_token"`
	VpcId                          string                         `json:"vpc_id"`
	FirewallStatus                 []FirewallStatusState          `json:"firewall_status"`
	EncryptionConfiguration        []EncryptionConfigurationState `json:"encryption_configuration"`
	SubnetMapping                  []SubnetMappingState           `json:"subnet_mapping"`
	Timeouts                       *TimeoutsState                 `json:"timeouts"`
}
