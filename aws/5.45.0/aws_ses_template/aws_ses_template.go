// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ses_template

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ses_template.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSesTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ast *Resource) Type() string {
	return "aws_ses_template"
}

// LocalName returns the local name for [Resource].
func (ast *Resource) LocalName() string {
	return ast.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ast *Resource) Configuration() interface{} {
	return ast.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ast *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ast)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ast *Resource) Dependencies() terra.Dependencies {
	return ast.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ast *Resource) LifecycleManagement() *terra.Lifecycle {
	return ast.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ast *Resource) Attributes() awsSesTemplateAttributes {
	return awsSesTemplateAttributes{ref: terra.ReferenceResource(ast)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ast *Resource) ImportState(state io.Reader) error {
	ast.state = &awsSesTemplateState{}
	if err := json.NewDecoder(state).Decode(ast.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ast.Type(), ast.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ast *Resource) State() (*awsSesTemplateState, bool) {
	return ast.state, ast.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ast *Resource) StateMust() *awsSesTemplateState {
	if ast.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ast.Type(), ast.LocalName()))
	}
	return ast.state
}

// Args contains the configurations for aws_ses_template.
type Args struct {
	// Html: string, optional
	Html terra.StringValue `hcl:"html,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Subject: string, optional
	Subject terra.StringValue `hcl:"subject,attr"`
	// Text: string, optional
	Text terra.StringValue `hcl:"text,attr"`
}

type awsSesTemplateAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ses_template.
func (ast awsSesTemplateAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ast.ref.Append("arn"))
}

// Html returns a reference to field html of aws_ses_template.
func (ast awsSesTemplateAttributes) Html() terra.StringValue {
	return terra.ReferenceAsString(ast.ref.Append("html"))
}

// Id returns a reference to field id of aws_ses_template.
func (ast awsSesTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ast.ref.Append("id"))
}

// Name returns a reference to field name of aws_ses_template.
func (ast awsSesTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ast.ref.Append("name"))
}

// Subject returns a reference to field subject of aws_ses_template.
func (ast awsSesTemplateAttributes) Subject() terra.StringValue {
	return terra.ReferenceAsString(ast.ref.Append("subject"))
}

// Text returns a reference to field text of aws_ses_template.
func (ast awsSesTemplateAttributes) Text() terra.StringValue {
	return terra.ReferenceAsString(ast.ref.Append("text"))
}

type awsSesTemplateState struct {
	Arn     string `json:"arn"`
	Html    string `json:"html"`
	Id      string `json:"id"`
	Name    string `json:"name"`
	Subject string `json:"subject"`
	Text    string `json:"text"`
}
