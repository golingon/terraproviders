// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53recoverycontrolconfig_control_panel

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53recoverycontrolconfig_control_panel.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53RecoverycontrolconfigControlPanelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arcp *Resource) Type() string {
	return "aws_route53recoverycontrolconfig_control_panel"
}

// LocalName returns the local name for [Resource].
func (arcp *Resource) LocalName() string {
	return arcp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arcp *Resource) Configuration() interface{} {
	return arcp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arcp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arcp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arcp *Resource) Dependencies() terra.Dependencies {
	return arcp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arcp *Resource) LifecycleManagement() *terra.Lifecycle {
	return arcp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arcp *Resource) Attributes() awsRoute53RecoverycontrolconfigControlPanelAttributes {
	return awsRoute53RecoverycontrolconfigControlPanelAttributes{ref: terra.ReferenceResource(arcp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arcp *Resource) ImportState(state io.Reader) error {
	arcp.state = &awsRoute53RecoverycontrolconfigControlPanelState{}
	if err := json.NewDecoder(state).Decode(arcp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arcp.Type(), arcp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arcp *Resource) State() (*awsRoute53RecoverycontrolconfigControlPanelState, bool) {
	return arcp.state, arcp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arcp *Resource) StateMust() *awsRoute53RecoverycontrolconfigControlPanelState {
	if arcp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arcp.Type(), arcp.LocalName()))
	}
	return arcp.state
}

// Args contains the configurations for aws_route53recoverycontrolconfig_control_panel.
type Args struct {
	// ClusterArn: string, required
	ClusterArn terra.StringValue `hcl:"cluster_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type awsRoute53RecoverycontrolconfigControlPanelAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_route53recoverycontrolconfig_control_panel.
func (arcp awsRoute53RecoverycontrolconfigControlPanelAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arcp.ref.Append("arn"))
}

// ClusterArn returns a reference to field cluster_arn of aws_route53recoverycontrolconfig_control_panel.
func (arcp awsRoute53RecoverycontrolconfigControlPanelAttributes) ClusterArn() terra.StringValue {
	return terra.ReferenceAsString(arcp.ref.Append("cluster_arn"))
}

// DefaultControlPanel returns a reference to field default_control_panel of aws_route53recoverycontrolconfig_control_panel.
func (arcp awsRoute53RecoverycontrolconfigControlPanelAttributes) DefaultControlPanel() terra.BoolValue {
	return terra.ReferenceAsBool(arcp.ref.Append("default_control_panel"))
}

// Id returns a reference to field id of aws_route53recoverycontrolconfig_control_panel.
func (arcp awsRoute53RecoverycontrolconfigControlPanelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arcp.ref.Append("id"))
}

// Name returns a reference to field name of aws_route53recoverycontrolconfig_control_panel.
func (arcp awsRoute53RecoverycontrolconfigControlPanelAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arcp.ref.Append("name"))
}

// RoutingControlCount returns a reference to field routing_control_count of aws_route53recoverycontrolconfig_control_panel.
func (arcp awsRoute53RecoverycontrolconfigControlPanelAttributes) RoutingControlCount() terra.NumberValue {
	return terra.ReferenceAsNumber(arcp.ref.Append("routing_control_count"))
}

// Status returns a reference to field status of aws_route53recoverycontrolconfig_control_panel.
func (arcp awsRoute53RecoverycontrolconfigControlPanelAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(arcp.ref.Append("status"))
}

type awsRoute53RecoverycontrolconfigControlPanelState struct {
	Arn                 string  `json:"arn"`
	ClusterArn          string  `json:"cluster_arn"`
	DefaultControlPanel bool    `json:"default_control_panel"`
	Id                  string  `json:"id"`
	Name                string  `json:"name"`
	RoutingControlCount float64 `json:"routing_control_count"`
	Status              string  `json:"status"`
}
