// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_directory_service_region

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_directory_service_region.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDirectoryServiceRegionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adsr *Resource) Type() string {
	return "aws_directory_service_region"
}

// LocalName returns the local name for [Resource].
func (adsr *Resource) LocalName() string {
	return adsr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adsr *Resource) Configuration() interface{} {
	return adsr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adsr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adsr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adsr *Resource) Dependencies() terra.Dependencies {
	return adsr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adsr *Resource) LifecycleManagement() *terra.Lifecycle {
	return adsr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adsr *Resource) Attributes() awsDirectoryServiceRegionAttributes {
	return awsDirectoryServiceRegionAttributes{ref: terra.ReferenceResource(adsr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adsr *Resource) ImportState(state io.Reader) error {
	adsr.state = &awsDirectoryServiceRegionState{}
	if err := json.NewDecoder(state).Decode(adsr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adsr.Type(), adsr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adsr *Resource) State() (*awsDirectoryServiceRegionState, bool) {
	return adsr.state, adsr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adsr *Resource) StateMust() *awsDirectoryServiceRegionState {
	if adsr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adsr.Type(), adsr.LocalName()))
	}
	return adsr.state
}

// Args contains the configurations for aws_directory_service_region.
type Args struct {
	// DesiredNumberOfDomainControllers: number, optional
	DesiredNumberOfDomainControllers terra.NumberValue `hcl:"desired_number_of_domain_controllers,attr"`
	// DirectoryId: string, required
	DirectoryId terra.StringValue `hcl:"directory_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RegionName: string, required
	RegionName terra.StringValue `hcl:"region_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcSettings: required
	VpcSettings *VpcSettings `hcl:"vpc_settings,block" validate:"required"`
}

type awsDirectoryServiceRegionAttributes struct {
	ref terra.Reference
}

// DesiredNumberOfDomainControllers returns a reference to field desired_number_of_domain_controllers of aws_directory_service_region.
func (adsr awsDirectoryServiceRegionAttributes) DesiredNumberOfDomainControllers() terra.NumberValue {
	return terra.ReferenceAsNumber(adsr.ref.Append("desired_number_of_domain_controllers"))
}

// DirectoryId returns a reference to field directory_id of aws_directory_service_region.
func (adsr awsDirectoryServiceRegionAttributes) DirectoryId() terra.StringValue {
	return terra.ReferenceAsString(adsr.ref.Append("directory_id"))
}

// Id returns a reference to field id of aws_directory_service_region.
func (adsr awsDirectoryServiceRegionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adsr.ref.Append("id"))
}

// RegionName returns a reference to field region_name of aws_directory_service_region.
func (adsr awsDirectoryServiceRegionAttributes) RegionName() terra.StringValue {
	return terra.ReferenceAsString(adsr.ref.Append("region_name"))
}

// Tags returns a reference to field tags of aws_directory_service_region.
func (adsr awsDirectoryServiceRegionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adsr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_directory_service_region.
func (adsr awsDirectoryServiceRegionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adsr.ref.Append("tags_all"))
}

func (adsr awsDirectoryServiceRegionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adsr.ref.Append("timeouts"))
}

func (adsr awsDirectoryServiceRegionAttributes) VpcSettings() terra.ListValue[VpcSettingsAttributes] {
	return terra.ReferenceAsList[VpcSettingsAttributes](adsr.ref.Append("vpc_settings"))
}

type awsDirectoryServiceRegionState struct {
	DesiredNumberOfDomainControllers float64            `json:"desired_number_of_domain_controllers"`
	DirectoryId                      string             `json:"directory_id"`
	Id                               string             `json:"id"`
	RegionName                       string             `json:"region_name"`
	Tags                             map[string]string  `json:"tags"`
	TagsAll                          map[string]string  `json:"tags_all"`
	Timeouts                         *TimeoutsState     `json:"timeouts"`
	VpcSettings                      []VpcSettingsState `json:"vpc_settings"`
}
