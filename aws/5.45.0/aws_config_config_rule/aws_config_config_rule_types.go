// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_config_config_rule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EvaluationMode struct {
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
}

type Scope struct {
	// ComplianceResourceId: string, optional
	ComplianceResourceId terra.StringValue `hcl:"compliance_resource_id,attr"`
	// ComplianceResourceTypes: set of string, optional
	ComplianceResourceTypes terra.SetValue[terra.StringValue] `hcl:"compliance_resource_types,attr"`
	// TagKey: string, optional
	TagKey terra.StringValue `hcl:"tag_key,attr"`
	// TagValue: string, optional
	TagValue terra.StringValue `hcl:"tag_value,attr"`
}

type Source struct {
	// Owner: string, required
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
	// SourceIdentifier: string, optional
	SourceIdentifier terra.StringValue `hcl:"source_identifier,attr"`
	// SourceCustomPolicyDetails: optional
	CustomPolicyDetails *SourceCustomPolicyDetails `hcl:"custom_policy_details,block"`
	// SourceSourceDetail: min=0,max=25
	SourceDetail []SourceSourceDetail `hcl:"source_detail,block" validate:"min=0,max=25"`
}

type SourceCustomPolicyDetails struct {
	// EnableDebugLogDelivery: bool, optional
	EnableDebugLogDelivery terra.BoolValue `hcl:"enable_debug_log_delivery,attr"`
	// PolicyRuntime: string, required
	PolicyRuntime terra.StringValue `hcl:"policy_runtime,attr" validate:"required"`
	// PolicyText: string, required
	PolicyText terra.StringValue `hcl:"policy_text,attr" validate:"required"`
}

type SourceSourceDetail struct {
	// EventSource: string, optional
	EventSource terra.StringValue `hcl:"event_source,attr"`
	// MaximumExecutionFrequency: string, optional
	MaximumExecutionFrequency terra.StringValue `hcl:"maximum_execution_frequency,attr"`
	// MessageType: string, optional
	MessageType terra.StringValue `hcl:"message_type,attr"`
}

type EvaluationModeAttributes struct {
	ref terra.Reference
}

func (em EvaluationModeAttributes) InternalRef() (terra.Reference, error) {
	return em.ref, nil
}

func (em EvaluationModeAttributes) InternalWithRef(ref terra.Reference) EvaluationModeAttributes {
	return EvaluationModeAttributes{ref: ref}
}

func (em EvaluationModeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return em.ref.InternalTokens()
}

func (em EvaluationModeAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(em.ref.Append("mode"))
}

type ScopeAttributes struct {
	ref terra.Reference
}

func (s ScopeAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScopeAttributes) InternalWithRef(ref terra.Reference) ScopeAttributes {
	return ScopeAttributes{ref: ref}
}

func (s ScopeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScopeAttributes) ComplianceResourceId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("compliance_resource_id"))
}

func (s ScopeAttributes) ComplianceResourceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("compliance_resource_types"))
}

func (s ScopeAttributes) TagKey() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tag_key"))
}

func (s ScopeAttributes) TagValue() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tag_value"))
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("owner"))
}

func (s SourceAttributes) SourceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("source_identifier"))
}

func (s SourceAttributes) CustomPolicyDetails() terra.ListValue[SourceCustomPolicyDetailsAttributes] {
	return terra.ReferenceAsList[SourceCustomPolicyDetailsAttributes](s.ref.Append("custom_policy_details"))
}

func (s SourceAttributes) SourceDetail() terra.SetValue[SourceSourceDetailAttributes] {
	return terra.ReferenceAsSet[SourceSourceDetailAttributes](s.ref.Append("source_detail"))
}

type SourceCustomPolicyDetailsAttributes struct {
	ref terra.Reference
}

func (cpd SourceCustomPolicyDetailsAttributes) InternalRef() (terra.Reference, error) {
	return cpd.ref, nil
}

func (cpd SourceCustomPolicyDetailsAttributes) InternalWithRef(ref terra.Reference) SourceCustomPolicyDetailsAttributes {
	return SourceCustomPolicyDetailsAttributes{ref: ref}
}

func (cpd SourceCustomPolicyDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpd.ref.InternalTokens()
}

func (cpd SourceCustomPolicyDetailsAttributes) EnableDebugLogDelivery() terra.BoolValue {
	return terra.ReferenceAsBool(cpd.ref.Append("enable_debug_log_delivery"))
}

func (cpd SourceCustomPolicyDetailsAttributes) PolicyRuntime() terra.StringValue {
	return terra.ReferenceAsString(cpd.ref.Append("policy_runtime"))
}

func (cpd SourceCustomPolicyDetailsAttributes) PolicyText() terra.StringValue {
	return terra.ReferenceAsString(cpd.ref.Append("policy_text"))
}

type SourceSourceDetailAttributes struct {
	ref terra.Reference
}

func (sd SourceSourceDetailAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd SourceSourceDetailAttributes) InternalWithRef(ref terra.Reference) SourceSourceDetailAttributes {
	return SourceSourceDetailAttributes{ref: ref}
}

func (sd SourceSourceDetailAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd SourceSourceDetailAttributes) EventSource() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("event_source"))
}

func (sd SourceSourceDetailAttributes) MaximumExecutionFrequency() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("maximum_execution_frequency"))
}

func (sd SourceSourceDetailAttributes) MessageType() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("message_type"))
}

type EvaluationModeState struct {
	Mode string `json:"mode"`
}

type ScopeState struct {
	ComplianceResourceId    string   `json:"compliance_resource_id"`
	ComplianceResourceTypes []string `json:"compliance_resource_types"`
	TagKey                  string   `json:"tag_key"`
	TagValue                string   `json:"tag_value"`
}

type SourceState struct {
	Owner               string                           `json:"owner"`
	SourceIdentifier    string                           `json:"source_identifier"`
	CustomPolicyDetails []SourceCustomPolicyDetailsState `json:"custom_policy_details"`
	SourceDetail        []SourceSourceDetailState        `json:"source_detail"`
}

type SourceCustomPolicyDetailsState struct {
	EnableDebugLogDelivery bool   `json:"enable_debug_log_delivery"`
	PolicyRuntime          string `json:"policy_runtime"`
	PolicyText             string `json:"policy_text"`
}

type SourceSourceDetailState struct {
	EventSource               string `json:"event_source"`
	MaximumExecutionFrequency string `json:"maximum_execution_frequency"`
	MessageType               string `json:"message_type"`
}
