// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_config_config_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_config_config_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConfigConfigRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (accr *Resource) Type() string {
	return "aws_config_config_rule"
}

// LocalName returns the local name for [Resource].
func (accr *Resource) LocalName() string {
	return accr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (accr *Resource) Configuration() interface{} {
	return accr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (accr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(accr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (accr *Resource) Dependencies() terra.Dependencies {
	return accr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (accr *Resource) LifecycleManagement() *terra.Lifecycle {
	return accr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (accr *Resource) Attributes() awsConfigConfigRuleAttributes {
	return awsConfigConfigRuleAttributes{ref: terra.ReferenceResource(accr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (accr *Resource) ImportState(state io.Reader) error {
	accr.state = &awsConfigConfigRuleState{}
	if err := json.NewDecoder(state).Decode(accr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", accr.Type(), accr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (accr *Resource) State() (*awsConfigConfigRuleState, bool) {
	return accr.state, accr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (accr *Resource) StateMust() *awsConfigConfigRuleState {
	if accr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", accr.Type(), accr.LocalName()))
	}
	return accr.state
}

// Args contains the configurations for aws_config_config_rule.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InputParameters: string, optional
	InputParameters terra.StringValue `hcl:"input_parameters,attr"`
	// MaximumExecutionFrequency: string, optional
	MaximumExecutionFrequency terra.StringValue `hcl:"maximum_execution_frequency,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// EvaluationMode: min=0
	EvaluationMode []EvaluationMode `hcl:"evaluation_mode,block" validate:"min=0"`
	// Scope: optional
	Scope *Scope `hcl:"scope,block"`
	// Source: required
	Source *Source `hcl:"source,block" validate:"required"`
}

type awsConfigConfigRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_config_config_rule.
func (accr awsConfigConfigRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("arn"))
}

// Description returns a reference to field description of aws_config_config_rule.
func (accr awsConfigConfigRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("description"))
}

// Id returns a reference to field id of aws_config_config_rule.
func (accr awsConfigConfigRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("id"))
}

// InputParameters returns a reference to field input_parameters of aws_config_config_rule.
func (accr awsConfigConfigRuleAttributes) InputParameters() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("input_parameters"))
}

// MaximumExecutionFrequency returns a reference to field maximum_execution_frequency of aws_config_config_rule.
func (accr awsConfigConfigRuleAttributes) MaximumExecutionFrequency() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("maximum_execution_frequency"))
}

// Name returns a reference to field name of aws_config_config_rule.
func (accr awsConfigConfigRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("name"))
}

// RuleId returns a reference to field rule_id of aws_config_config_rule.
func (accr awsConfigConfigRuleAttributes) RuleId() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("rule_id"))
}

// Tags returns a reference to field tags of aws_config_config_rule.
func (accr awsConfigConfigRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](accr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_config_config_rule.
func (accr awsConfigConfigRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](accr.ref.Append("tags_all"))
}

func (accr awsConfigConfigRuleAttributes) EvaluationMode() terra.SetValue[EvaluationModeAttributes] {
	return terra.ReferenceAsSet[EvaluationModeAttributes](accr.ref.Append("evaluation_mode"))
}

func (accr awsConfigConfigRuleAttributes) Scope() terra.ListValue[ScopeAttributes] {
	return terra.ReferenceAsList[ScopeAttributes](accr.ref.Append("scope"))
}

func (accr awsConfigConfigRuleAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](accr.ref.Append("source"))
}

type awsConfigConfigRuleState struct {
	Arn                       string                `json:"arn"`
	Description               string                `json:"description"`
	Id                        string                `json:"id"`
	InputParameters           string                `json:"input_parameters"`
	MaximumExecutionFrequency string                `json:"maximum_execution_frequency"`
	Name                      string                `json:"name"`
	RuleId                    string                `json:"rule_id"`
	Tags                      map[string]string     `json:"tags"`
	TagsAll                   map[string]string     `json:"tags_all"`
	EvaluationMode            []EvaluationModeState `json:"evaluation_mode"`
	Scope                     []ScopeState          `json:"scope"`
	Source                    []SourceState         `json:"source"`
}
