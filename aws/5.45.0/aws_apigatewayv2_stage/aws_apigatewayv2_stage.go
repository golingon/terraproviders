// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_apigatewayv2_stage

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_apigatewayv2_stage.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApigatewayv2StageState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aas *Resource) Type() string {
	return "aws_apigatewayv2_stage"
}

// LocalName returns the local name for [Resource].
func (aas *Resource) LocalName() string {
	return aas.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aas *Resource) Configuration() interface{} {
	return aas.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aas *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aas)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aas *Resource) Dependencies() terra.Dependencies {
	return aas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aas *Resource) LifecycleManagement() *terra.Lifecycle {
	return aas.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aas *Resource) Attributes() awsApigatewayv2StageAttributes {
	return awsApigatewayv2StageAttributes{ref: terra.ReferenceResource(aas)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aas *Resource) ImportState(state io.Reader) error {
	aas.state = &awsApigatewayv2StageState{}
	if err := json.NewDecoder(state).Decode(aas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aas.Type(), aas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aas *Resource) State() (*awsApigatewayv2StageState, bool) {
	return aas.state, aas.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aas *Resource) StateMust() *awsApigatewayv2StageState {
	if aas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aas.Type(), aas.LocalName()))
	}
	return aas.state
}

// Args contains the configurations for aws_apigatewayv2_stage.
type Args struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// AutoDeploy: bool, optional
	AutoDeploy terra.BoolValue `hcl:"auto_deploy,attr"`
	// ClientCertificateId: string, optional
	ClientCertificateId terra.StringValue `hcl:"client_certificate_id,attr"`
	// DeploymentId: string, optional
	DeploymentId terra.StringValue `hcl:"deployment_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StageVariables: map of string, optional
	StageVariables terra.MapValue[terra.StringValue] `hcl:"stage_variables,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// AccessLogSettings: optional
	AccessLogSettings *AccessLogSettings `hcl:"access_log_settings,block"`
	// DefaultRouteSettings: optional
	DefaultRouteSettings *DefaultRouteSettings `hcl:"default_route_settings,block"`
	// RouteSettings: min=0
	RouteSettings []RouteSettings `hcl:"route_settings,block" validate:"min=0"`
}

type awsApigatewayv2StageAttributes struct {
	ref terra.Reference
}

// ApiId returns a reference to field api_id of aws_apigatewayv2_stage.
func (aas awsApigatewayv2StageAttributes) ApiId() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("api_id"))
}

// Arn returns a reference to field arn of aws_apigatewayv2_stage.
func (aas awsApigatewayv2StageAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("arn"))
}

// AutoDeploy returns a reference to field auto_deploy of aws_apigatewayv2_stage.
func (aas awsApigatewayv2StageAttributes) AutoDeploy() terra.BoolValue {
	return terra.ReferenceAsBool(aas.ref.Append("auto_deploy"))
}

// ClientCertificateId returns a reference to field client_certificate_id of aws_apigatewayv2_stage.
func (aas awsApigatewayv2StageAttributes) ClientCertificateId() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("client_certificate_id"))
}

// DeploymentId returns a reference to field deployment_id of aws_apigatewayv2_stage.
func (aas awsApigatewayv2StageAttributes) DeploymentId() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("deployment_id"))
}

// Description returns a reference to field description of aws_apigatewayv2_stage.
func (aas awsApigatewayv2StageAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("description"))
}

// ExecutionArn returns a reference to field execution_arn of aws_apigatewayv2_stage.
func (aas awsApigatewayv2StageAttributes) ExecutionArn() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("execution_arn"))
}

// Id returns a reference to field id of aws_apigatewayv2_stage.
func (aas awsApigatewayv2StageAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("id"))
}

// InvokeUrl returns a reference to field invoke_url of aws_apigatewayv2_stage.
func (aas awsApigatewayv2StageAttributes) InvokeUrl() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("invoke_url"))
}

// Name returns a reference to field name of aws_apigatewayv2_stage.
func (aas awsApigatewayv2StageAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("name"))
}

// StageVariables returns a reference to field stage_variables of aws_apigatewayv2_stage.
func (aas awsApigatewayv2StageAttributes) StageVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aas.ref.Append("stage_variables"))
}

// Tags returns a reference to field tags of aws_apigatewayv2_stage.
func (aas awsApigatewayv2StageAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aas.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_apigatewayv2_stage.
func (aas awsApigatewayv2StageAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aas.ref.Append("tags_all"))
}

func (aas awsApigatewayv2StageAttributes) AccessLogSettings() terra.ListValue[AccessLogSettingsAttributes] {
	return terra.ReferenceAsList[AccessLogSettingsAttributes](aas.ref.Append("access_log_settings"))
}

func (aas awsApigatewayv2StageAttributes) DefaultRouteSettings() terra.ListValue[DefaultRouteSettingsAttributes] {
	return terra.ReferenceAsList[DefaultRouteSettingsAttributes](aas.ref.Append("default_route_settings"))
}

func (aas awsApigatewayv2StageAttributes) RouteSettings() terra.SetValue[RouteSettingsAttributes] {
	return terra.ReferenceAsSet[RouteSettingsAttributes](aas.ref.Append("route_settings"))
}

type awsApigatewayv2StageState struct {
	ApiId                string                      `json:"api_id"`
	Arn                  string                      `json:"arn"`
	AutoDeploy           bool                        `json:"auto_deploy"`
	ClientCertificateId  string                      `json:"client_certificate_id"`
	DeploymentId         string                      `json:"deployment_id"`
	Description          string                      `json:"description"`
	ExecutionArn         string                      `json:"execution_arn"`
	Id                   string                      `json:"id"`
	InvokeUrl            string                      `json:"invoke_url"`
	Name                 string                      `json:"name"`
	StageVariables       map[string]string           `json:"stage_variables"`
	Tags                 map[string]string           `json:"tags"`
	TagsAll              map[string]string           `json:"tags_all"`
	AccessLogSettings    []AccessLogSettingsState    `json:"access_log_settings"`
	DefaultRouteSettings []DefaultRouteSettingsState `json:"default_route_settings"`
	RouteSettings        []RouteSettingsState        `json:"route_settings"`
}
