// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_guardduty_detector_feature

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_guardduty_detector_feature.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGuarddutyDetectorFeatureState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agdf *Resource) Type() string {
	return "aws_guardduty_detector_feature"
}

// LocalName returns the local name for [Resource].
func (agdf *Resource) LocalName() string {
	return agdf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agdf *Resource) Configuration() interface{} {
	return agdf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agdf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agdf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agdf *Resource) Dependencies() terra.Dependencies {
	return agdf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agdf *Resource) LifecycleManagement() *terra.Lifecycle {
	return agdf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agdf *Resource) Attributes() awsGuarddutyDetectorFeatureAttributes {
	return awsGuarddutyDetectorFeatureAttributes{ref: terra.ReferenceResource(agdf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agdf *Resource) ImportState(state io.Reader) error {
	agdf.state = &awsGuarddutyDetectorFeatureState{}
	if err := json.NewDecoder(state).Decode(agdf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agdf.Type(), agdf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agdf *Resource) State() (*awsGuarddutyDetectorFeatureState, bool) {
	return agdf.state, agdf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agdf *Resource) StateMust() *awsGuarddutyDetectorFeatureState {
	if agdf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agdf.Type(), agdf.LocalName()))
	}
	return agdf.state
}

// Args contains the configurations for aws_guardduty_detector_feature.
type Args struct {
	// DetectorId: string, required
	DetectorId terra.StringValue `hcl:"detector_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// AdditionalConfiguration: min=0
	AdditionalConfiguration []AdditionalConfiguration `hcl:"additional_configuration,block" validate:"min=0"`
}

type awsGuarddutyDetectorFeatureAttributes struct {
	ref terra.Reference
}

// DetectorId returns a reference to field detector_id of aws_guardduty_detector_feature.
func (agdf awsGuarddutyDetectorFeatureAttributes) DetectorId() terra.StringValue {
	return terra.ReferenceAsString(agdf.ref.Append("detector_id"))
}

// Id returns a reference to field id of aws_guardduty_detector_feature.
func (agdf awsGuarddutyDetectorFeatureAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agdf.ref.Append("id"))
}

// Name returns a reference to field name of aws_guardduty_detector_feature.
func (agdf awsGuarddutyDetectorFeatureAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agdf.ref.Append("name"))
}

// Status returns a reference to field status of aws_guardduty_detector_feature.
func (agdf awsGuarddutyDetectorFeatureAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(agdf.ref.Append("status"))
}

func (agdf awsGuarddutyDetectorFeatureAttributes) AdditionalConfiguration() terra.ListValue[AdditionalConfigurationAttributes] {
	return terra.ReferenceAsList[AdditionalConfigurationAttributes](agdf.ref.Append("additional_configuration"))
}

type awsGuarddutyDetectorFeatureState struct {
	DetectorId              string                         `json:"detector_id"`
	Id                      string                         `json:"id"`
	Name                    string                         `json:"name"`
	Status                  string                         `json:"status"`
	AdditionalConfiguration []AdditionalConfigurationState `json:"additional_configuration"`
}
