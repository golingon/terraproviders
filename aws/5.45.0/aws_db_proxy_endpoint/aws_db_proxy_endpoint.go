// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_db_proxy_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_db_proxy_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDbProxyEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adpe *Resource) Type() string {
	return "aws_db_proxy_endpoint"
}

// LocalName returns the local name for [Resource].
func (adpe *Resource) LocalName() string {
	return adpe.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adpe *Resource) Configuration() interface{} {
	return adpe.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adpe *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adpe)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adpe *Resource) Dependencies() terra.Dependencies {
	return adpe.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adpe *Resource) LifecycleManagement() *terra.Lifecycle {
	return adpe.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adpe *Resource) Attributes() awsDbProxyEndpointAttributes {
	return awsDbProxyEndpointAttributes{ref: terra.ReferenceResource(adpe)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adpe *Resource) ImportState(state io.Reader) error {
	adpe.state = &awsDbProxyEndpointState{}
	if err := json.NewDecoder(state).Decode(adpe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adpe.Type(), adpe.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adpe *Resource) State() (*awsDbProxyEndpointState, bool) {
	return adpe.state, adpe.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adpe *Resource) StateMust() *awsDbProxyEndpointState {
	if adpe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adpe.Type(), adpe.LocalName()))
	}
	return adpe.state
}

// Args contains the configurations for aws_db_proxy_endpoint.
type Args struct {
	// DbProxyEndpointName: string, required
	DbProxyEndpointName terra.StringValue `hcl:"db_proxy_endpoint_name,attr" validate:"required"`
	// DbProxyName: string, required
	DbProxyName terra.StringValue `hcl:"db_proxy_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetRole: string, optional
	TargetRole terra.StringValue `hcl:"target_role,attr"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// VpcSubnetIds: set of string, required
	VpcSubnetIds terra.SetValue[terra.StringValue] `hcl:"vpc_subnet_ids,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDbProxyEndpointAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_db_proxy_endpoint.
func (adpe awsDbProxyEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adpe.ref.Append("arn"))
}

// DbProxyEndpointName returns a reference to field db_proxy_endpoint_name of aws_db_proxy_endpoint.
func (adpe awsDbProxyEndpointAttributes) DbProxyEndpointName() terra.StringValue {
	return terra.ReferenceAsString(adpe.ref.Append("db_proxy_endpoint_name"))
}

// DbProxyName returns a reference to field db_proxy_name of aws_db_proxy_endpoint.
func (adpe awsDbProxyEndpointAttributes) DbProxyName() terra.StringValue {
	return terra.ReferenceAsString(adpe.ref.Append("db_proxy_name"))
}

// Endpoint returns a reference to field endpoint of aws_db_proxy_endpoint.
func (adpe awsDbProxyEndpointAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(adpe.ref.Append("endpoint"))
}

// Id returns a reference to field id of aws_db_proxy_endpoint.
func (adpe awsDbProxyEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adpe.ref.Append("id"))
}

// IsDefault returns a reference to field is_default of aws_db_proxy_endpoint.
func (adpe awsDbProxyEndpointAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceAsBool(adpe.ref.Append("is_default"))
}

// Tags returns a reference to field tags of aws_db_proxy_endpoint.
func (adpe awsDbProxyEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adpe.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_db_proxy_endpoint.
func (adpe awsDbProxyEndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adpe.ref.Append("tags_all"))
}

// TargetRole returns a reference to field target_role of aws_db_proxy_endpoint.
func (adpe awsDbProxyEndpointAttributes) TargetRole() terra.StringValue {
	return terra.ReferenceAsString(adpe.ref.Append("target_role"))
}

// VpcId returns a reference to field vpc_id of aws_db_proxy_endpoint.
func (adpe awsDbProxyEndpointAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(adpe.ref.Append("vpc_id"))
}

// VpcSecurityGroupIds returns a reference to field vpc_security_group_ids of aws_db_proxy_endpoint.
func (adpe awsDbProxyEndpointAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adpe.ref.Append("vpc_security_group_ids"))
}

// VpcSubnetIds returns a reference to field vpc_subnet_ids of aws_db_proxy_endpoint.
func (adpe awsDbProxyEndpointAttributes) VpcSubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adpe.ref.Append("vpc_subnet_ids"))
}

func (adpe awsDbProxyEndpointAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adpe.ref.Append("timeouts"))
}

type awsDbProxyEndpointState struct {
	Arn                 string            `json:"arn"`
	DbProxyEndpointName string            `json:"db_proxy_endpoint_name"`
	DbProxyName         string            `json:"db_proxy_name"`
	Endpoint            string            `json:"endpoint"`
	Id                  string            `json:"id"`
	IsDefault           bool              `json:"is_default"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
	TargetRole          string            `json:"target_role"`
	VpcId               string            `json:"vpc_id"`
	VpcSecurityGroupIds []string          `json:"vpc_security_group_ids"`
	VpcSubnetIds        []string          `json:"vpc_subnet_ids"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
