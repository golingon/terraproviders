// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dms_replication_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dms_replication_config.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDmsReplicationConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adrc *Resource) Type() string {
	return "aws_dms_replication_config"
}

// LocalName returns the local name for [Resource].
func (adrc *Resource) LocalName() string {
	return adrc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adrc *Resource) Configuration() interface{} {
	return adrc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adrc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adrc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adrc *Resource) Dependencies() terra.Dependencies {
	return adrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adrc *Resource) LifecycleManagement() *terra.Lifecycle {
	return adrc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adrc *Resource) Attributes() awsDmsReplicationConfigAttributes {
	return awsDmsReplicationConfigAttributes{ref: terra.ReferenceResource(adrc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adrc *Resource) ImportState(state io.Reader) error {
	adrc.state = &awsDmsReplicationConfigState{}
	if err := json.NewDecoder(state).Decode(adrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adrc.Type(), adrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adrc *Resource) State() (*awsDmsReplicationConfigState, bool) {
	return adrc.state, adrc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adrc *Resource) StateMust() *awsDmsReplicationConfigState {
	if adrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adrc.Type(), adrc.LocalName()))
	}
	return adrc.state
}

// Args contains the configurations for aws_dms_replication_config.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ReplicationConfigIdentifier: string, required
	ReplicationConfigIdentifier terra.StringValue `hcl:"replication_config_identifier,attr" validate:"required"`
	// ReplicationSettings: string, optional
	ReplicationSettings terra.StringValue `hcl:"replication_settings,attr"`
	// ReplicationType: string, required
	ReplicationType terra.StringValue `hcl:"replication_type,attr" validate:"required"`
	// ResourceIdentifier: string, optional
	ResourceIdentifier terra.StringValue `hcl:"resource_identifier,attr"`
	// SourceEndpointArn: string, required
	SourceEndpointArn terra.StringValue `hcl:"source_endpoint_arn,attr" validate:"required"`
	// StartReplication: bool, optional
	StartReplication terra.BoolValue `hcl:"start_replication,attr"`
	// SupplementalSettings: string, optional
	SupplementalSettings terra.StringValue `hcl:"supplemental_settings,attr"`
	// TableMappings: string, required
	TableMappings terra.StringValue `hcl:"table_mappings,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetEndpointArn: string, required
	TargetEndpointArn terra.StringValue `hcl:"target_endpoint_arn,attr" validate:"required"`
	// ComputeConfig: required
	ComputeConfig *ComputeConfig `hcl:"compute_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDmsReplicationConfigAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_dms_replication_config.
func (adrc awsDmsReplicationConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adrc.ref.Append("arn"))
}

// Id returns a reference to field id of aws_dms_replication_config.
func (adrc awsDmsReplicationConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adrc.ref.Append("id"))
}

// ReplicationConfigIdentifier returns a reference to field replication_config_identifier of aws_dms_replication_config.
func (adrc awsDmsReplicationConfigAttributes) ReplicationConfigIdentifier() terra.StringValue {
	return terra.ReferenceAsString(adrc.ref.Append("replication_config_identifier"))
}

// ReplicationSettings returns a reference to field replication_settings of aws_dms_replication_config.
func (adrc awsDmsReplicationConfigAttributes) ReplicationSettings() terra.StringValue {
	return terra.ReferenceAsString(adrc.ref.Append("replication_settings"))
}

// ReplicationType returns a reference to field replication_type of aws_dms_replication_config.
func (adrc awsDmsReplicationConfigAttributes) ReplicationType() terra.StringValue {
	return terra.ReferenceAsString(adrc.ref.Append("replication_type"))
}

// ResourceIdentifier returns a reference to field resource_identifier of aws_dms_replication_config.
func (adrc awsDmsReplicationConfigAttributes) ResourceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(adrc.ref.Append("resource_identifier"))
}

// SourceEndpointArn returns a reference to field source_endpoint_arn of aws_dms_replication_config.
func (adrc awsDmsReplicationConfigAttributes) SourceEndpointArn() terra.StringValue {
	return terra.ReferenceAsString(adrc.ref.Append("source_endpoint_arn"))
}

// StartReplication returns a reference to field start_replication of aws_dms_replication_config.
func (adrc awsDmsReplicationConfigAttributes) StartReplication() terra.BoolValue {
	return terra.ReferenceAsBool(adrc.ref.Append("start_replication"))
}

// SupplementalSettings returns a reference to field supplemental_settings of aws_dms_replication_config.
func (adrc awsDmsReplicationConfigAttributes) SupplementalSettings() terra.StringValue {
	return terra.ReferenceAsString(adrc.ref.Append("supplemental_settings"))
}

// TableMappings returns a reference to field table_mappings of aws_dms_replication_config.
func (adrc awsDmsReplicationConfigAttributes) TableMappings() terra.StringValue {
	return terra.ReferenceAsString(adrc.ref.Append("table_mappings"))
}

// Tags returns a reference to field tags of aws_dms_replication_config.
func (adrc awsDmsReplicationConfigAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adrc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_dms_replication_config.
func (adrc awsDmsReplicationConfigAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adrc.ref.Append("tags_all"))
}

// TargetEndpointArn returns a reference to field target_endpoint_arn of aws_dms_replication_config.
func (adrc awsDmsReplicationConfigAttributes) TargetEndpointArn() terra.StringValue {
	return terra.ReferenceAsString(adrc.ref.Append("target_endpoint_arn"))
}

func (adrc awsDmsReplicationConfigAttributes) ComputeConfig() terra.ListValue[ComputeConfigAttributes] {
	return terra.ReferenceAsList[ComputeConfigAttributes](adrc.ref.Append("compute_config"))
}

func (adrc awsDmsReplicationConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adrc.ref.Append("timeouts"))
}

type awsDmsReplicationConfigState struct {
	Arn                         string               `json:"arn"`
	Id                          string               `json:"id"`
	ReplicationConfigIdentifier string               `json:"replication_config_identifier"`
	ReplicationSettings         string               `json:"replication_settings"`
	ReplicationType             string               `json:"replication_type"`
	ResourceIdentifier          string               `json:"resource_identifier"`
	SourceEndpointArn           string               `json:"source_endpoint_arn"`
	StartReplication            bool                 `json:"start_replication"`
	SupplementalSettings        string               `json:"supplemental_settings"`
	TableMappings               string               `json:"table_mappings"`
	Tags                        map[string]string    `json:"tags"`
	TagsAll                     map[string]string    `json:"tags_all"`
	TargetEndpointArn           string               `json:"target_endpoint_arn"`
	ComputeConfig               []ComputeConfigState `json:"compute_config"`
	Timeouts                    *TimeoutsState       `json:"timeouts"`
}
