// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_traffic_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53_traffic_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53TrafficPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (artp *Resource) Type() string {
	return "aws_route53_traffic_policy"
}

// LocalName returns the local name for [Resource].
func (artp *Resource) LocalName() string {
	return artp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (artp *Resource) Configuration() interface{} {
	return artp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (artp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(artp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (artp *Resource) Dependencies() terra.Dependencies {
	return artp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (artp *Resource) LifecycleManagement() *terra.Lifecycle {
	return artp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (artp *Resource) Attributes() awsRoute53TrafficPolicyAttributes {
	return awsRoute53TrafficPolicyAttributes{ref: terra.ReferenceResource(artp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (artp *Resource) ImportState(state io.Reader) error {
	artp.state = &awsRoute53TrafficPolicyState{}
	if err := json.NewDecoder(state).Decode(artp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", artp.Type(), artp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (artp *Resource) State() (*awsRoute53TrafficPolicyState, bool) {
	return artp.state, artp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (artp *Resource) StateMust() *awsRoute53TrafficPolicyState {
	if artp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", artp.Type(), artp.LocalName()))
	}
	return artp.state
}

// Args contains the configurations for aws_route53_traffic_policy.
type Args struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// Document: string, required
	Document terra.StringValue `hcl:"document,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type awsRoute53TrafficPolicyAttributes struct {
	ref terra.Reference
}

// Comment returns a reference to field comment of aws_route53_traffic_policy.
func (artp awsRoute53TrafficPolicyAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(artp.ref.Append("comment"))
}

// Document returns a reference to field document of aws_route53_traffic_policy.
func (artp awsRoute53TrafficPolicyAttributes) Document() terra.StringValue {
	return terra.ReferenceAsString(artp.ref.Append("document"))
}

// Id returns a reference to field id of aws_route53_traffic_policy.
func (artp awsRoute53TrafficPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(artp.ref.Append("id"))
}

// Name returns a reference to field name of aws_route53_traffic_policy.
func (artp awsRoute53TrafficPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(artp.ref.Append("name"))
}

// Type returns a reference to field type of aws_route53_traffic_policy.
func (artp awsRoute53TrafficPolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(artp.ref.Append("type"))
}

// Version returns a reference to field version of aws_route53_traffic_policy.
func (artp awsRoute53TrafficPolicyAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(artp.ref.Append("version"))
}

type awsRoute53TrafficPolicyState struct {
	Comment  string  `json:"comment"`
	Document string  `json:"document"`
	Id       string  `json:"id"`
	Name     string  `json:"name"`
	Type     string  `json:"type"`
	Version  float64 `json:"version"`
}
