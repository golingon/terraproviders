// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_waf_sql_injection_match_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_waf_sql_injection_match_set.
type Resource struct {
	Name      string
	Args      Args
	state     *awsWafSqlInjectionMatchSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (awsims *Resource) Type() string {
	return "aws_waf_sql_injection_match_set"
}

// LocalName returns the local name for [Resource].
func (awsims *Resource) LocalName() string {
	return awsims.Name
}

// Configuration returns the configuration (args) for [Resource].
func (awsims *Resource) Configuration() interface{} {
	return awsims.Args
}

// DependOn is used for other resources to depend on [Resource].
func (awsims *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(awsims)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (awsims *Resource) Dependencies() terra.Dependencies {
	return awsims.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (awsims *Resource) LifecycleManagement() *terra.Lifecycle {
	return awsims.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (awsims *Resource) Attributes() awsWafSqlInjectionMatchSetAttributes {
	return awsWafSqlInjectionMatchSetAttributes{ref: terra.ReferenceResource(awsims)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (awsims *Resource) ImportState(state io.Reader) error {
	awsims.state = &awsWafSqlInjectionMatchSetState{}
	if err := json.NewDecoder(state).Decode(awsims.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", awsims.Type(), awsims.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (awsims *Resource) State() (*awsWafSqlInjectionMatchSetState, bool) {
	return awsims.state, awsims.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (awsims *Resource) StateMust() *awsWafSqlInjectionMatchSetState {
	if awsims.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", awsims.Type(), awsims.LocalName()))
	}
	return awsims.state
}

// Args contains the configurations for aws_waf_sql_injection_match_set.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SqlInjectionMatchTuples: min=0
	SqlInjectionMatchTuples []SqlInjectionMatchTuples `hcl:"sql_injection_match_tuples,block" validate:"min=0"`
}

type awsWafSqlInjectionMatchSetAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_waf_sql_injection_match_set.
func (awsims awsWafSqlInjectionMatchSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(awsims.ref.Append("id"))
}

// Name returns a reference to field name of aws_waf_sql_injection_match_set.
func (awsims awsWafSqlInjectionMatchSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(awsims.ref.Append("name"))
}

func (awsims awsWafSqlInjectionMatchSetAttributes) SqlInjectionMatchTuples() terra.SetValue[SqlInjectionMatchTuplesAttributes] {
	return terra.ReferenceAsSet[SqlInjectionMatchTuplesAttributes](awsims.ref.Append("sql_injection_match_tuples"))
}

type awsWafSqlInjectionMatchSetState struct {
	Id                      string                         `json:"id"`
	Name                    string                         `json:"name"`
	SqlInjectionMatchTuples []SqlInjectionMatchTuplesState `json:"sql_injection_match_tuples"`
}
