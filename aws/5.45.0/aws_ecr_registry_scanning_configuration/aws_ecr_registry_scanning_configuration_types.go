// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecr_registry_scanning_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rule struct {
	// ScanFrequency: string, required
	ScanFrequency terra.StringValue `hcl:"scan_frequency,attr" validate:"required"`
	// RuleRepositoryFilter: min=1
	RepositoryFilter []RuleRepositoryFilter `hcl:"repository_filter,block" validate:"min=1"`
}

type RuleRepositoryFilter struct {
	// Filter: string, required
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// FilterType: string, required
	FilterType terra.StringValue `hcl:"filter_type,attr" validate:"required"`
}

type RuleAttributes struct {
	ref terra.Reference
}

func (r RuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RuleAttributes) InternalWithRef(ref terra.Reference) RuleAttributes {
	return RuleAttributes{ref: ref}
}

func (r RuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RuleAttributes) ScanFrequency() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("scan_frequency"))
}

func (r RuleAttributes) RepositoryFilter() terra.SetValue[RuleRepositoryFilterAttributes] {
	return terra.ReferenceAsSet[RuleRepositoryFilterAttributes](r.ref.Append("repository_filter"))
}

type RuleRepositoryFilterAttributes struct {
	ref terra.Reference
}

func (rf RuleRepositoryFilterAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf RuleRepositoryFilterAttributes) InternalWithRef(ref terra.Reference) RuleRepositoryFilterAttributes {
	return RuleRepositoryFilterAttributes{ref: ref}
}

func (rf RuleRepositoryFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf RuleRepositoryFilterAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("filter"))
}

func (rf RuleRepositoryFilterAttributes) FilterType() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("filter_type"))
}

type RuleState struct {
	ScanFrequency    string                      `json:"scan_frequency"`
	RepositoryFilter []RuleRepositoryFilterState `json:"repository_filter"`
}

type RuleRepositoryFilterState struct {
	Filter     string `json:"filter"`
	FilterType string `json:"filter_type"`
}
