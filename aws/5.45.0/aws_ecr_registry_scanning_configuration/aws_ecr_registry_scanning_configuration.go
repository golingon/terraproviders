// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecr_registry_scanning_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ecr_registry_scanning_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEcrRegistryScanningConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aersc *Resource) Type() string {
	return "aws_ecr_registry_scanning_configuration"
}

// LocalName returns the local name for [Resource].
func (aersc *Resource) LocalName() string {
	return aersc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aersc *Resource) Configuration() interface{} {
	return aersc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aersc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aersc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aersc *Resource) Dependencies() terra.Dependencies {
	return aersc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aersc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aersc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aersc *Resource) Attributes() awsEcrRegistryScanningConfigurationAttributes {
	return awsEcrRegistryScanningConfigurationAttributes{ref: terra.ReferenceResource(aersc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aersc *Resource) ImportState(state io.Reader) error {
	aersc.state = &awsEcrRegistryScanningConfigurationState{}
	if err := json.NewDecoder(state).Decode(aersc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aersc.Type(), aersc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aersc *Resource) State() (*awsEcrRegistryScanningConfigurationState, bool) {
	return aersc.state, aersc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aersc *Resource) StateMust() *awsEcrRegistryScanningConfigurationState {
	if aersc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aersc.Type(), aersc.LocalName()))
	}
	return aersc.state
}

// Args contains the configurations for aws_ecr_registry_scanning_configuration.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ScanType: string, required
	ScanType terra.StringValue `hcl:"scan_type,attr" validate:"required"`
	// Rule: min=0,max=100
	Rule []Rule `hcl:"rule,block" validate:"min=0,max=100"`
}

type awsEcrRegistryScanningConfigurationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ecr_registry_scanning_configuration.
func (aersc awsEcrRegistryScanningConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aersc.ref.Append("id"))
}

// RegistryId returns a reference to field registry_id of aws_ecr_registry_scanning_configuration.
func (aersc awsEcrRegistryScanningConfigurationAttributes) RegistryId() terra.StringValue {
	return terra.ReferenceAsString(aersc.ref.Append("registry_id"))
}

// ScanType returns a reference to field scan_type of aws_ecr_registry_scanning_configuration.
func (aersc awsEcrRegistryScanningConfigurationAttributes) ScanType() terra.StringValue {
	return terra.ReferenceAsString(aersc.ref.Append("scan_type"))
}

func (aersc awsEcrRegistryScanningConfigurationAttributes) Rule() terra.SetValue[RuleAttributes] {
	return terra.ReferenceAsSet[RuleAttributes](aersc.ref.Append("rule"))
}

type awsEcrRegistryScanningConfigurationState struct {
	Id         string      `json:"id"`
	RegistryId string      `json:"registry_id"`
	ScanType   string      `json:"scan_type"`
	Rule       []RuleState `json:"rule"`
}
