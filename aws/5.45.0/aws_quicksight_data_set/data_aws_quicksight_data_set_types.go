// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_data_set

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataColumnLevelPermissionRules struct{}

type DataColumnGroupsAttributes struct {
	ref terra.Reference
}

func (cg DataColumnGroupsAttributes) InternalRef() (terra.Reference, error) {
	return cg.ref, nil
}

func (cg DataColumnGroupsAttributes) InternalWithRef(ref terra.Reference) DataColumnGroupsAttributes {
	return DataColumnGroupsAttributes{ref: ref}
}

func (cg DataColumnGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cg.ref.InternalTokens()
}

func (cg DataColumnGroupsAttributes) GeoSpatialColumnGroup() terra.ListValue[DataColumnGroupsGeoSpatialColumnGroupAttributes] {
	return terra.ReferenceAsList[DataColumnGroupsGeoSpatialColumnGroupAttributes](cg.ref.Append("geo_spatial_column_group"))
}

type DataColumnGroupsGeoSpatialColumnGroupAttributes struct {
	ref terra.Reference
}

func (gscg DataColumnGroupsGeoSpatialColumnGroupAttributes) InternalRef() (terra.Reference, error) {
	return gscg.ref, nil
}

func (gscg DataColumnGroupsGeoSpatialColumnGroupAttributes) InternalWithRef(ref terra.Reference) DataColumnGroupsGeoSpatialColumnGroupAttributes {
	return DataColumnGroupsGeoSpatialColumnGroupAttributes{ref: ref}
}

func (gscg DataColumnGroupsGeoSpatialColumnGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gscg.ref.InternalTokens()
}

func (gscg DataColumnGroupsGeoSpatialColumnGroupAttributes) Columns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gscg.ref.Append("columns"))
}

func (gscg DataColumnGroupsGeoSpatialColumnGroupAttributes) CountryCode() terra.StringValue {
	return terra.ReferenceAsString(gscg.ref.Append("country_code"))
}

func (gscg DataColumnGroupsGeoSpatialColumnGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gscg.ref.Append("name"))
}

type DataDataSetUsageConfigurationAttributes struct {
	ref terra.Reference
}

func (dsuc DataDataSetUsageConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dsuc.ref, nil
}

func (dsuc DataDataSetUsageConfigurationAttributes) InternalWithRef(ref terra.Reference) DataDataSetUsageConfigurationAttributes {
	return DataDataSetUsageConfigurationAttributes{ref: ref}
}

func (dsuc DataDataSetUsageConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dsuc.ref.InternalTokens()
}

func (dsuc DataDataSetUsageConfigurationAttributes) DisableUseAsDirectQuerySource() terra.BoolValue {
	return terra.ReferenceAsBool(dsuc.ref.Append("disable_use_as_direct_query_source"))
}

func (dsuc DataDataSetUsageConfigurationAttributes) DisableUseAsImportedSource() terra.BoolValue {
	return terra.ReferenceAsBool(dsuc.ref.Append("disable_use_as_imported_source"))
}

type DataFieldFoldersAttributes struct {
	ref terra.Reference
}

func (ff DataFieldFoldersAttributes) InternalRef() (terra.Reference, error) {
	return ff.ref, nil
}

func (ff DataFieldFoldersAttributes) InternalWithRef(ref terra.Reference) DataFieldFoldersAttributes {
	return DataFieldFoldersAttributes{ref: ref}
}

func (ff DataFieldFoldersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ff.ref.InternalTokens()
}

func (ff DataFieldFoldersAttributes) Columns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ff.ref.Append("columns"))
}

func (ff DataFieldFoldersAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ff.ref.Append("description"))
}

func (ff DataFieldFoldersAttributes) FieldFoldersId() terra.StringValue {
	return terra.ReferenceAsString(ff.ref.Append("field_folders_id"))
}

type DataLogicalTableMapAttributes struct {
	ref terra.Reference
}

func (ltm DataLogicalTableMapAttributes) InternalRef() (terra.Reference, error) {
	return ltm.ref, nil
}

func (ltm DataLogicalTableMapAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapAttributes {
	return DataLogicalTableMapAttributes{ref: ref}
}

func (ltm DataLogicalTableMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ltm.ref.InternalTokens()
}

func (ltm DataLogicalTableMapAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(ltm.ref.Append("alias"))
}

func (ltm DataLogicalTableMapAttributes) LogicalTableMapId() terra.StringValue {
	return terra.ReferenceAsString(ltm.ref.Append("logical_table_map_id"))
}

func (ltm DataLogicalTableMapAttributes) DataTransforms() terra.ListValue[DataLogicalTableMapDataTransformsAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapDataTransformsAttributes](ltm.ref.Append("data_transforms"))
}

func (ltm DataLogicalTableMapAttributes) Source() terra.ListValue[DataLogicalTableMapSourceAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapSourceAttributes](ltm.ref.Append("source"))
}

type DataLogicalTableMapDataTransformsAttributes struct {
	ref terra.Reference
}

func (dt DataLogicalTableMapDataTransformsAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt DataLogicalTableMapDataTransformsAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapDataTransformsAttributes {
	return DataLogicalTableMapDataTransformsAttributes{ref: ref}
}

func (dt DataLogicalTableMapDataTransformsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt DataLogicalTableMapDataTransformsAttributes) CastColumnTypeOperation() terra.ListValue[DataLogicalTableMapDataTransformsCastColumnTypeOperationAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapDataTransformsCastColumnTypeOperationAttributes](dt.ref.Append("cast_column_type_operation"))
}

func (dt DataLogicalTableMapDataTransformsAttributes) CreateColumnsOperation() terra.ListValue[DataLogicalTableMapDataTransformsCreateColumnsOperationAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapDataTransformsCreateColumnsOperationAttributes](dt.ref.Append("create_columns_operation"))
}

func (dt DataLogicalTableMapDataTransformsAttributes) FilterOperation() terra.ListValue[DataLogicalTableMapDataTransformsFilterOperationAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapDataTransformsFilterOperationAttributes](dt.ref.Append("filter_operation"))
}

func (dt DataLogicalTableMapDataTransformsAttributes) ProjectOperation() terra.ListValue[DataLogicalTableMapDataTransformsProjectOperationAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapDataTransformsProjectOperationAttributes](dt.ref.Append("project_operation"))
}

func (dt DataLogicalTableMapDataTransformsAttributes) RenameColumnOperation() terra.ListValue[DataLogicalTableMapDataTransformsRenameColumnOperationAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapDataTransformsRenameColumnOperationAttributes](dt.ref.Append("rename_column_operation"))
}

func (dt DataLogicalTableMapDataTransformsAttributes) TagColumnOperation() terra.ListValue[DataLogicalTableMapDataTransformsTagColumnOperationAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapDataTransformsTagColumnOperationAttributes](dt.ref.Append("tag_column_operation"))
}

func (dt DataLogicalTableMapDataTransformsAttributes) UntagColumnOperation() terra.ListValue[DataLogicalTableMapDataTransformsUntagColumnOperationAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapDataTransformsUntagColumnOperationAttributes](dt.ref.Append("untag_column_operation"))
}

type DataLogicalTableMapDataTransformsCastColumnTypeOperationAttributes struct {
	ref terra.Reference
}

func (ccto DataLogicalTableMapDataTransformsCastColumnTypeOperationAttributes) InternalRef() (terra.Reference, error) {
	return ccto.ref, nil
}

func (ccto DataLogicalTableMapDataTransformsCastColumnTypeOperationAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapDataTransformsCastColumnTypeOperationAttributes {
	return DataLogicalTableMapDataTransformsCastColumnTypeOperationAttributes{ref: ref}
}

func (ccto DataLogicalTableMapDataTransformsCastColumnTypeOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccto.ref.InternalTokens()
}

func (ccto DataLogicalTableMapDataTransformsCastColumnTypeOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("column_name"))
}

func (ccto DataLogicalTableMapDataTransformsCastColumnTypeOperationAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("format"))
}

func (ccto DataLogicalTableMapDataTransformsCastColumnTypeOperationAttributes) NewColumnType() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("new_column_type"))
}

type DataLogicalTableMapDataTransformsCreateColumnsOperationAttributes struct {
	ref terra.Reference
}

func (cco DataLogicalTableMapDataTransformsCreateColumnsOperationAttributes) InternalRef() (terra.Reference, error) {
	return cco.ref, nil
}

func (cco DataLogicalTableMapDataTransformsCreateColumnsOperationAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapDataTransformsCreateColumnsOperationAttributes {
	return DataLogicalTableMapDataTransformsCreateColumnsOperationAttributes{ref: ref}
}

func (cco DataLogicalTableMapDataTransformsCreateColumnsOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cco.ref.InternalTokens()
}

func (cco DataLogicalTableMapDataTransformsCreateColumnsOperationAttributes) Columns() terra.ListValue[DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes](cco.ref.Append("columns"))
}

type DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes struct {
	ref terra.Reference
}

func (c DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes {
	return DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes{ref: ref}
}

func (c DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) ColumnId() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("column_id"))
}

func (c DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("column_name"))
}

func (c DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("expression"))
}

type DataLogicalTableMapDataTransformsFilterOperationAttributes struct {
	ref terra.Reference
}

func (fo DataLogicalTableMapDataTransformsFilterOperationAttributes) InternalRef() (terra.Reference, error) {
	return fo.ref, nil
}

func (fo DataLogicalTableMapDataTransformsFilterOperationAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapDataTransformsFilterOperationAttributes {
	return DataLogicalTableMapDataTransformsFilterOperationAttributes{ref: ref}
}

func (fo DataLogicalTableMapDataTransformsFilterOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fo.ref.InternalTokens()
}

func (fo DataLogicalTableMapDataTransformsFilterOperationAttributes) ConditionExpression() terra.StringValue {
	return terra.ReferenceAsString(fo.ref.Append("condition_expression"))
}

type DataLogicalTableMapDataTransformsProjectOperationAttributes struct {
	ref terra.Reference
}

func (po DataLogicalTableMapDataTransformsProjectOperationAttributes) InternalRef() (terra.Reference, error) {
	return po.ref, nil
}

func (po DataLogicalTableMapDataTransformsProjectOperationAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapDataTransformsProjectOperationAttributes {
	return DataLogicalTableMapDataTransformsProjectOperationAttributes{ref: ref}
}

func (po DataLogicalTableMapDataTransformsProjectOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return po.ref.InternalTokens()
}

func (po DataLogicalTableMapDataTransformsProjectOperationAttributes) ProjectedColumns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](po.ref.Append("projected_columns"))
}

type DataLogicalTableMapDataTransformsRenameColumnOperationAttributes struct {
	ref terra.Reference
}

func (rco DataLogicalTableMapDataTransformsRenameColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return rco.ref, nil
}

func (rco DataLogicalTableMapDataTransformsRenameColumnOperationAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapDataTransformsRenameColumnOperationAttributes {
	return DataLogicalTableMapDataTransformsRenameColumnOperationAttributes{ref: ref}
}

func (rco DataLogicalTableMapDataTransformsRenameColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rco.ref.InternalTokens()
}

func (rco DataLogicalTableMapDataTransformsRenameColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(rco.ref.Append("column_name"))
}

func (rco DataLogicalTableMapDataTransformsRenameColumnOperationAttributes) NewColumnName() terra.StringValue {
	return terra.ReferenceAsString(rco.ref.Append("new_column_name"))
}

type DataLogicalTableMapDataTransformsTagColumnOperationAttributes struct {
	ref terra.Reference
}

func (tco DataLogicalTableMapDataTransformsTagColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return tco.ref, nil
}

func (tco DataLogicalTableMapDataTransformsTagColumnOperationAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapDataTransformsTagColumnOperationAttributes {
	return DataLogicalTableMapDataTransformsTagColumnOperationAttributes{ref: ref}
}

func (tco DataLogicalTableMapDataTransformsTagColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tco.ref.InternalTokens()
}

func (tco DataLogicalTableMapDataTransformsTagColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(tco.ref.Append("column_name"))
}

func (tco DataLogicalTableMapDataTransformsTagColumnOperationAttributes) Tags() terra.ListValue[DataLogicalTableMapDataTransformsTagColumnOperationTagsAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapDataTransformsTagColumnOperationTagsAttributes](tco.ref.Append("tags"))
}

type DataLogicalTableMapDataTransformsTagColumnOperationTagsAttributes struct {
	ref terra.Reference
}

func (t DataLogicalTableMapDataTransformsTagColumnOperationTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataLogicalTableMapDataTransformsTagColumnOperationTagsAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapDataTransformsTagColumnOperationTagsAttributes {
	return DataLogicalTableMapDataTransformsTagColumnOperationTagsAttributes{ref: ref}
}

func (t DataLogicalTableMapDataTransformsTagColumnOperationTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataLogicalTableMapDataTransformsTagColumnOperationTagsAttributes) ColumnGeographicRole() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("column_geographic_role"))
}

func (t DataLogicalTableMapDataTransformsTagColumnOperationTagsAttributes) ColumnDescription() terra.ListValue[DataLogicalTableMapDataTransforms3Dab265BAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapDataTransforms3Dab265BAttributes](t.ref.Append("column_description"))
}

type DataLogicalTableMapDataTransforms3Dab265BAttributes struct {
	ref terra.Reference
}

func (cd DataLogicalTableMapDataTransforms3Dab265BAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd DataLogicalTableMapDataTransforms3Dab265BAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapDataTransforms3Dab265BAttributes {
	return DataLogicalTableMapDataTransforms3Dab265BAttributes{ref: ref}
}

func (cd DataLogicalTableMapDataTransforms3Dab265BAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd DataLogicalTableMapDataTransforms3Dab265BAttributes) Text() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("text"))
}

type DataLogicalTableMapDataTransformsUntagColumnOperationAttributes struct {
	ref terra.Reference
}

func (uco DataLogicalTableMapDataTransformsUntagColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return uco.ref, nil
}

func (uco DataLogicalTableMapDataTransformsUntagColumnOperationAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapDataTransformsUntagColumnOperationAttributes {
	return DataLogicalTableMapDataTransformsUntagColumnOperationAttributes{ref: ref}
}

func (uco DataLogicalTableMapDataTransformsUntagColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uco.ref.InternalTokens()
}

func (uco DataLogicalTableMapDataTransformsUntagColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(uco.ref.Append("column_name"))
}

func (uco DataLogicalTableMapDataTransformsUntagColumnOperationAttributes) TagNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](uco.ref.Append("tag_names"))
}

type DataLogicalTableMapSourceAttributes struct {
	ref terra.Reference
}

func (s DataLogicalTableMapSourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataLogicalTableMapSourceAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapSourceAttributes {
	return DataLogicalTableMapSourceAttributes{ref: ref}
}

func (s DataLogicalTableMapSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataLogicalTableMapSourceAttributes) DataSetArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("data_set_arn"))
}

func (s DataLogicalTableMapSourceAttributes) PhysicalTableId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("physical_table_id"))
}

func (s DataLogicalTableMapSourceAttributes) JoinInstruction() terra.ListValue[DataLogicalTableMapSourceJoinInstructionAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapSourceJoinInstructionAttributes](s.ref.Append("join_instruction"))
}

type DataLogicalTableMapSourceJoinInstructionAttributes struct {
	ref terra.Reference
}

func (ji DataLogicalTableMapSourceJoinInstructionAttributes) InternalRef() (terra.Reference, error) {
	return ji.ref, nil
}

func (ji DataLogicalTableMapSourceJoinInstructionAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapSourceJoinInstructionAttributes {
	return DataLogicalTableMapSourceJoinInstructionAttributes{ref: ref}
}

func (ji DataLogicalTableMapSourceJoinInstructionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ji.ref.InternalTokens()
}

func (ji DataLogicalTableMapSourceJoinInstructionAttributes) LeftOperand() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("left_operand"))
}

func (ji DataLogicalTableMapSourceJoinInstructionAttributes) OnClause() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("on_clause"))
}

func (ji DataLogicalTableMapSourceJoinInstructionAttributes) RightOperand() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("right_operand"))
}

func (ji DataLogicalTableMapSourceJoinInstructionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("type"))
}

func (ji DataLogicalTableMapSourceJoinInstructionAttributes) LeftJoinKeyProperties() terra.ListValue[DataLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes](ji.ref.Append("left_join_key_properties"))
}

func (ji DataLogicalTableMapSourceJoinInstructionAttributes) RightJoinKeyProperties() terra.ListValue[DataLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes] {
	return terra.ReferenceAsList[DataLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes](ji.ref.Append("right_join_key_properties"))
}

type DataLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes struct {
	ref terra.Reference
}

func (ljkp DataLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return ljkp.ref, nil
}

func (ljkp DataLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes {
	return DataLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes{ref: ref}
}

func (ljkp DataLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ljkp.ref.InternalTokens()
}

func (ljkp DataLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) UniqueKey() terra.BoolValue {
	return terra.ReferenceAsBool(ljkp.ref.Append("unique_key"))
}

type DataLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes struct {
	ref terra.Reference
}

func (rjkp DataLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return rjkp.ref, nil
}

func (rjkp DataLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) InternalWithRef(ref terra.Reference) DataLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes {
	return DataLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes{ref: ref}
}

func (rjkp DataLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rjkp.ref.InternalTokens()
}

func (rjkp DataLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) UniqueKey() terra.BoolValue {
	return terra.ReferenceAsBool(rjkp.ref.Append("unique_key"))
}

type DataPermissionsAttributes struct {
	ref terra.Reference
}

func (p DataPermissionsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DataPermissionsAttributes) InternalWithRef(ref terra.Reference) DataPermissionsAttributes {
	return DataPermissionsAttributes{ref: ref}
}

func (p DataPermissionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DataPermissionsAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("actions"))
}

func (p DataPermissionsAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("principal"))
}

type DataPhysicalTableMapAttributes struct {
	ref terra.Reference
}

func (ptm DataPhysicalTableMapAttributes) InternalRef() (terra.Reference, error) {
	return ptm.ref, nil
}

func (ptm DataPhysicalTableMapAttributes) InternalWithRef(ref terra.Reference) DataPhysicalTableMapAttributes {
	return DataPhysicalTableMapAttributes{ref: ref}
}

func (ptm DataPhysicalTableMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptm.ref.InternalTokens()
}

func (ptm DataPhysicalTableMapAttributes) PhysicalTableMapId() terra.StringValue {
	return terra.ReferenceAsString(ptm.ref.Append("physical_table_map_id"))
}

func (ptm DataPhysicalTableMapAttributes) CustomSql() terra.ListValue[DataPhysicalTableMapCustomSqlAttributes] {
	return terra.ReferenceAsList[DataPhysicalTableMapCustomSqlAttributes](ptm.ref.Append("custom_sql"))
}

func (ptm DataPhysicalTableMapAttributes) RelationalTable() terra.ListValue[DataPhysicalTableMapRelationalTableAttributes] {
	return terra.ReferenceAsList[DataPhysicalTableMapRelationalTableAttributes](ptm.ref.Append("relational_table"))
}

func (ptm DataPhysicalTableMapAttributes) S3Source() terra.ListValue[DataPhysicalTableMapS3SourceAttributes] {
	return terra.ReferenceAsList[DataPhysicalTableMapS3SourceAttributes](ptm.ref.Append("s3_source"))
}

type DataPhysicalTableMapCustomSqlAttributes struct {
	ref terra.Reference
}

func (cs DataPhysicalTableMapCustomSqlAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs DataPhysicalTableMapCustomSqlAttributes) InternalWithRef(ref terra.Reference) DataPhysicalTableMapCustomSqlAttributes {
	return DataPhysicalTableMapCustomSqlAttributes{ref: ref}
}

func (cs DataPhysicalTableMapCustomSqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs DataPhysicalTableMapCustomSqlAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("data_source_arn"))
}

func (cs DataPhysicalTableMapCustomSqlAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("name"))
}

func (cs DataPhysicalTableMapCustomSqlAttributes) SqlQuery() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("sql_query"))
}

func (cs DataPhysicalTableMapCustomSqlAttributes) Columns() terra.ListValue[DataPhysicalTableMapCustomSqlColumnsAttributes] {
	return terra.ReferenceAsList[DataPhysicalTableMapCustomSqlColumnsAttributes](cs.ref.Append("columns"))
}

type DataPhysicalTableMapCustomSqlColumnsAttributes struct {
	ref terra.Reference
}

func (c DataPhysicalTableMapCustomSqlColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataPhysicalTableMapCustomSqlColumnsAttributes) InternalWithRef(ref terra.Reference) DataPhysicalTableMapCustomSqlColumnsAttributes {
	return DataPhysicalTableMapCustomSqlColumnsAttributes{ref: ref}
}

func (c DataPhysicalTableMapCustomSqlColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataPhysicalTableMapCustomSqlColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c DataPhysicalTableMapCustomSqlColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type DataPhysicalTableMapRelationalTableAttributes struct {
	ref terra.Reference
}

func (rt DataPhysicalTableMapRelationalTableAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt DataPhysicalTableMapRelationalTableAttributes) InternalWithRef(ref terra.Reference) DataPhysicalTableMapRelationalTableAttributes {
	return DataPhysicalTableMapRelationalTableAttributes{ref: ref}
}

func (rt DataPhysicalTableMapRelationalTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt DataPhysicalTableMapRelationalTableAttributes) Catalog() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("catalog"))
}

func (rt DataPhysicalTableMapRelationalTableAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("data_source_arn"))
}

func (rt DataPhysicalTableMapRelationalTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("name"))
}

func (rt DataPhysicalTableMapRelationalTableAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("schema"))
}

func (rt DataPhysicalTableMapRelationalTableAttributes) InputColumns() terra.ListValue[DataPhysicalTableMapRelationalTableInputColumnsAttributes] {
	return terra.ReferenceAsList[DataPhysicalTableMapRelationalTableInputColumnsAttributes](rt.ref.Append("input_columns"))
}

type DataPhysicalTableMapRelationalTableInputColumnsAttributes struct {
	ref terra.Reference
}

func (ic DataPhysicalTableMapRelationalTableInputColumnsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic DataPhysicalTableMapRelationalTableInputColumnsAttributes) InternalWithRef(ref terra.Reference) DataPhysicalTableMapRelationalTableInputColumnsAttributes {
	return DataPhysicalTableMapRelationalTableInputColumnsAttributes{ref: ref}
}

func (ic DataPhysicalTableMapRelationalTableInputColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic DataPhysicalTableMapRelationalTableInputColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic DataPhysicalTableMapRelationalTableInputColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("type"))
}

type DataPhysicalTableMapS3SourceAttributes struct {
	ref terra.Reference
}

func (ss DataPhysicalTableMapS3SourceAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss DataPhysicalTableMapS3SourceAttributes) InternalWithRef(ref terra.Reference) DataPhysicalTableMapS3SourceAttributes {
	return DataPhysicalTableMapS3SourceAttributes{ref: ref}
}

func (ss DataPhysicalTableMapS3SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss DataPhysicalTableMapS3SourceAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("data_source_arn"))
}

func (ss DataPhysicalTableMapS3SourceAttributes) InputColumns() terra.ListValue[DataPhysicalTableMapS3SourceInputColumnsAttributes] {
	return terra.ReferenceAsList[DataPhysicalTableMapS3SourceInputColumnsAttributes](ss.ref.Append("input_columns"))
}

func (ss DataPhysicalTableMapS3SourceAttributes) UploadSettings() terra.ListValue[DataPhysicalTableMapS3SourceUploadSettingsAttributes] {
	return terra.ReferenceAsList[DataPhysicalTableMapS3SourceUploadSettingsAttributes](ss.ref.Append("upload_settings"))
}

type DataPhysicalTableMapS3SourceInputColumnsAttributes struct {
	ref terra.Reference
}

func (ic DataPhysicalTableMapS3SourceInputColumnsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic DataPhysicalTableMapS3SourceInputColumnsAttributes) InternalWithRef(ref terra.Reference) DataPhysicalTableMapS3SourceInputColumnsAttributes {
	return DataPhysicalTableMapS3SourceInputColumnsAttributes{ref: ref}
}

func (ic DataPhysicalTableMapS3SourceInputColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic DataPhysicalTableMapS3SourceInputColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic DataPhysicalTableMapS3SourceInputColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("type"))
}

type DataPhysicalTableMapS3SourceUploadSettingsAttributes struct {
	ref terra.Reference
}

func (us DataPhysicalTableMapS3SourceUploadSettingsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us DataPhysicalTableMapS3SourceUploadSettingsAttributes) InternalWithRef(ref terra.Reference) DataPhysicalTableMapS3SourceUploadSettingsAttributes {
	return DataPhysicalTableMapS3SourceUploadSettingsAttributes{ref: ref}
}

func (us DataPhysicalTableMapS3SourceUploadSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us DataPhysicalTableMapS3SourceUploadSettingsAttributes) ContainsHeader() terra.BoolValue {
	return terra.ReferenceAsBool(us.ref.Append("contains_header"))
}

func (us DataPhysicalTableMapS3SourceUploadSettingsAttributes) Delimiter() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("delimiter"))
}

func (us DataPhysicalTableMapS3SourceUploadSettingsAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("format"))
}

func (us DataPhysicalTableMapS3SourceUploadSettingsAttributes) StartFromRow() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("start_from_row"))
}

func (us DataPhysicalTableMapS3SourceUploadSettingsAttributes) TextQualifier() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("text_qualifier"))
}

type DataRowLevelPermissionDataSetAttributes struct {
	ref terra.Reference
}

func (rlpds DataRowLevelPermissionDataSetAttributes) InternalRef() (terra.Reference, error) {
	return rlpds.ref, nil
}

func (rlpds DataRowLevelPermissionDataSetAttributes) InternalWithRef(ref terra.Reference) DataRowLevelPermissionDataSetAttributes {
	return DataRowLevelPermissionDataSetAttributes{ref: ref}
}

func (rlpds DataRowLevelPermissionDataSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rlpds.ref.InternalTokens()
}

func (rlpds DataRowLevelPermissionDataSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("arn"))
}

func (rlpds DataRowLevelPermissionDataSetAttributes) FormatVersion() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("format_version"))
}

func (rlpds DataRowLevelPermissionDataSetAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("namespace"))
}

func (rlpds DataRowLevelPermissionDataSetAttributes) PermissionPolicy() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("permission_policy"))
}

func (rlpds DataRowLevelPermissionDataSetAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("status"))
}

type DataRowLevelPermissionTagConfigurationAttributes struct {
	ref terra.Reference
}

func (rlptc DataRowLevelPermissionTagConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rlptc.ref, nil
}

func (rlptc DataRowLevelPermissionTagConfigurationAttributes) InternalWithRef(ref terra.Reference) DataRowLevelPermissionTagConfigurationAttributes {
	return DataRowLevelPermissionTagConfigurationAttributes{ref: ref}
}

func (rlptc DataRowLevelPermissionTagConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rlptc.ref.InternalTokens()
}

func (rlptc DataRowLevelPermissionTagConfigurationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rlptc.ref.Append("status"))
}

func (rlptc DataRowLevelPermissionTagConfigurationAttributes) TagRules() terra.ListValue[DataRowLevelPermissionTagConfigurationTagRulesAttributes] {
	return terra.ReferenceAsList[DataRowLevelPermissionTagConfigurationTagRulesAttributes](rlptc.ref.Append("tag_rules"))
}

type DataRowLevelPermissionTagConfigurationTagRulesAttributes struct {
	ref terra.Reference
}

func (tr DataRowLevelPermissionTagConfigurationTagRulesAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr DataRowLevelPermissionTagConfigurationTagRulesAttributes) InternalWithRef(ref terra.Reference) DataRowLevelPermissionTagConfigurationTagRulesAttributes {
	return DataRowLevelPermissionTagConfigurationTagRulesAttributes{ref: ref}
}

func (tr DataRowLevelPermissionTagConfigurationTagRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr DataRowLevelPermissionTagConfigurationTagRulesAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("column_name"))
}

func (tr DataRowLevelPermissionTagConfigurationTagRulesAttributes) MatchAllValue() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("match_all_value"))
}

func (tr DataRowLevelPermissionTagConfigurationTagRulesAttributes) TagKey() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("tag_key"))
}

func (tr DataRowLevelPermissionTagConfigurationTagRulesAttributes) TagMultiValueDelimiter() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("tag_multi_value_delimiter"))
}

type DataColumnLevelPermissionRulesAttributes struct {
	ref terra.Reference
}

func (clpr DataColumnLevelPermissionRulesAttributes) InternalRef() (terra.Reference, error) {
	return clpr.ref, nil
}

func (clpr DataColumnLevelPermissionRulesAttributes) InternalWithRef(ref terra.Reference) DataColumnLevelPermissionRulesAttributes {
	return DataColumnLevelPermissionRulesAttributes{ref: ref}
}

func (clpr DataColumnLevelPermissionRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clpr.ref.InternalTokens()
}

func (clpr DataColumnLevelPermissionRulesAttributes) ColumnNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](clpr.ref.Append("column_names"))
}

func (clpr DataColumnLevelPermissionRulesAttributes) Principals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](clpr.ref.Append("principals"))
}

type DataColumnGroupsState struct {
	GeoSpatialColumnGroup []DataColumnGroupsGeoSpatialColumnGroupState `json:"geo_spatial_column_group"`
}

type DataColumnGroupsGeoSpatialColumnGroupState struct {
	Columns     []string `json:"columns"`
	CountryCode string   `json:"country_code"`
	Name        string   `json:"name"`
}

type DataDataSetUsageConfigurationState struct {
	DisableUseAsDirectQuerySource bool `json:"disable_use_as_direct_query_source"`
	DisableUseAsImportedSource    bool `json:"disable_use_as_imported_source"`
}

type DataFieldFoldersState struct {
	Columns        []string `json:"columns"`
	Description    string   `json:"description"`
	FieldFoldersId string   `json:"field_folders_id"`
}

type DataLogicalTableMapState struct {
	Alias             string                                   `json:"alias"`
	LogicalTableMapId string                                   `json:"logical_table_map_id"`
	DataTransforms    []DataLogicalTableMapDataTransformsState `json:"data_transforms"`
	Source            []DataLogicalTableMapSourceState         `json:"source"`
}

type DataLogicalTableMapDataTransformsState struct {
	CastColumnTypeOperation []DataLogicalTableMapDataTransformsCastColumnTypeOperationState `json:"cast_column_type_operation"`
	CreateColumnsOperation  []DataLogicalTableMapDataTransformsCreateColumnsOperationState  `json:"create_columns_operation"`
	FilterOperation         []DataLogicalTableMapDataTransformsFilterOperationState         `json:"filter_operation"`
	ProjectOperation        []DataLogicalTableMapDataTransformsProjectOperationState        `json:"project_operation"`
	RenameColumnOperation   []DataLogicalTableMapDataTransformsRenameColumnOperationState   `json:"rename_column_operation"`
	TagColumnOperation      []DataLogicalTableMapDataTransformsTagColumnOperationState      `json:"tag_column_operation"`
	UntagColumnOperation    []DataLogicalTableMapDataTransformsUntagColumnOperationState    `json:"untag_column_operation"`
}

type DataLogicalTableMapDataTransformsCastColumnTypeOperationState struct {
	ColumnName    string `json:"column_name"`
	Format        string `json:"format"`
	NewColumnType string `json:"new_column_type"`
}

type DataLogicalTableMapDataTransformsCreateColumnsOperationState struct {
	Columns []DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsState `json:"columns"`
}

type DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsState struct {
	ColumnId   string `json:"column_id"`
	ColumnName string `json:"column_name"`
	Expression string `json:"expression"`
}

type DataLogicalTableMapDataTransformsFilterOperationState struct {
	ConditionExpression string `json:"condition_expression"`
}

type DataLogicalTableMapDataTransformsProjectOperationState struct {
	ProjectedColumns []string `json:"projected_columns"`
}

type DataLogicalTableMapDataTransformsRenameColumnOperationState struct {
	ColumnName    string `json:"column_name"`
	NewColumnName string `json:"new_column_name"`
}

type DataLogicalTableMapDataTransformsTagColumnOperationState struct {
	ColumnName string                                                         `json:"column_name"`
	Tags       []DataLogicalTableMapDataTransformsTagColumnOperationTagsState `json:"tags"`
}

type DataLogicalTableMapDataTransformsTagColumnOperationTagsState struct {
	ColumnGeographicRole string                                           `json:"column_geographic_role"`
	ColumnDescription    []DataLogicalTableMapDataTransforms3Dab265BState `json:"column_description"`
}

type DataLogicalTableMapDataTransforms3Dab265BState struct {
	Text string `json:"text"`
}

type DataLogicalTableMapDataTransformsUntagColumnOperationState struct {
	ColumnName string   `json:"column_name"`
	TagNames   []string `json:"tag_names"`
}

type DataLogicalTableMapSourceState struct {
	DataSetArn      string                                          `json:"data_set_arn"`
	PhysicalTableId string                                          `json:"physical_table_id"`
	JoinInstruction []DataLogicalTableMapSourceJoinInstructionState `json:"join_instruction"`
}

type DataLogicalTableMapSourceJoinInstructionState struct {
	LeftOperand            string                                                                `json:"left_operand"`
	OnClause               string                                                                `json:"on_clause"`
	RightOperand           string                                                                `json:"right_operand"`
	Type                   string                                                                `json:"type"`
	LeftJoinKeyProperties  []DataLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesState  `json:"left_join_key_properties"`
	RightJoinKeyProperties []DataLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesState `json:"right_join_key_properties"`
}

type DataLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesState struct {
	UniqueKey bool `json:"unique_key"`
}

type DataLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesState struct {
	UniqueKey bool `json:"unique_key"`
}

type DataPermissionsState struct {
	Actions   []string `json:"actions"`
	Principal string   `json:"principal"`
}

type DataPhysicalTableMapState struct {
	PhysicalTableMapId string                                     `json:"physical_table_map_id"`
	CustomSql          []DataPhysicalTableMapCustomSqlState       `json:"custom_sql"`
	RelationalTable    []DataPhysicalTableMapRelationalTableState `json:"relational_table"`
	S3Source           []DataPhysicalTableMapS3SourceState        `json:"s3_source"`
}

type DataPhysicalTableMapCustomSqlState struct {
	DataSourceArn string                                      `json:"data_source_arn"`
	Name          string                                      `json:"name"`
	SqlQuery      string                                      `json:"sql_query"`
	Columns       []DataPhysicalTableMapCustomSqlColumnsState `json:"columns"`
}

type DataPhysicalTableMapCustomSqlColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type DataPhysicalTableMapRelationalTableState struct {
	Catalog       string                                                 `json:"catalog"`
	DataSourceArn string                                                 `json:"data_source_arn"`
	Name          string                                                 `json:"name"`
	Schema        string                                                 `json:"schema"`
	InputColumns  []DataPhysicalTableMapRelationalTableInputColumnsState `json:"input_columns"`
}

type DataPhysicalTableMapRelationalTableInputColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type DataPhysicalTableMapS3SourceState struct {
	DataSourceArn  string                                            `json:"data_source_arn"`
	InputColumns   []DataPhysicalTableMapS3SourceInputColumnsState   `json:"input_columns"`
	UploadSettings []DataPhysicalTableMapS3SourceUploadSettingsState `json:"upload_settings"`
}

type DataPhysicalTableMapS3SourceInputColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type DataPhysicalTableMapS3SourceUploadSettingsState struct {
	ContainsHeader bool    `json:"contains_header"`
	Delimiter      string  `json:"delimiter"`
	Format         string  `json:"format"`
	StartFromRow   float64 `json:"start_from_row"`
	TextQualifier  string  `json:"text_qualifier"`
}

type DataRowLevelPermissionDataSetState struct {
	Arn              string `json:"arn"`
	FormatVersion    string `json:"format_version"`
	Namespace        string `json:"namespace"`
	PermissionPolicy string `json:"permission_policy"`
	Status           string `json:"status"`
}

type DataRowLevelPermissionTagConfigurationState struct {
	Status   string                                                `json:"status"`
	TagRules []DataRowLevelPermissionTagConfigurationTagRulesState `json:"tag_rules"`
}

type DataRowLevelPermissionTagConfigurationTagRulesState struct {
	ColumnName             string `json:"column_name"`
	MatchAllValue          string `json:"match_all_value"`
	TagKey                 string `json:"tag_key"`
	TagMultiValueDelimiter string `json:"tag_multi_value_delimiter"`
}

type DataColumnLevelPermissionRulesState struct {
	ColumnNames []string `json:"column_names"`
	Principals  []string `json:"principals"`
}
