// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_data_set

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ColumnGroups struct {
	// ColumnGroupsGeoSpatialColumnGroup: optional
	GeoSpatialColumnGroup *ColumnGroupsGeoSpatialColumnGroup `hcl:"geo_spatial_column_group,block"`
}

type ColumnGroupsGeoSpatialColumnGroup struct {
	// Columns: list of string, required
	Columns terra.ListValue[terra.StringValue] `hcl:"columns,attr" validate:"required"`
	// CountryCode: string, required
	CountryCode terra.StringValue `hcl:"country_code,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type ColumnLevelPermissionRules struct {
	// ColumnNames: list of string, optional
	ColumnNames terra.ListValue[terra.StringValue] `hcl:"column_names,attr"`
	// Principals: list of string, optional
	Principals terra.ListValue[terra.StringValue] `hcl:"principals,attr"`
}

type DataSetUsageConfiguration struct {
	// DisableUseAsDirectQuerySource: bool, optional
	DisableUseAsDirectQuerySource terra.BoolValue `hcl:"disable_use_as_direct_query_source,attr"`
	// DisableUseAsImportedSource: bool, optional
	DisableUseAsImportedSource terra.BoolValue `hcl:"disable_use_as_imported_source,attr"`
}

type FieldFolders struct {
	// Columns: list of string, optional
	Columns terra.ListValue[terra.StringValue] `hcl:"columns,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FieldFoldersId: string, required
	FieldFoldersId terra.StringValue `hcl:"field_folders_id,attr" validate:"required"`
}

type LogicalTableMap struct {
	// Alias: string, required
	Alias terra.StringValue `hcl:"alias,attr" validate:"required"`
	// LogicalTableMapId: string, required
	LogicalTableMapId terra.StringValue `hcl:"logical_table_map_id,attr" validate:"required"`
	// LogicalTableMapDataTransforms: min=0,max=2048
	DataTransforms []LogicalTableMapDataTransforms `hcl:"data_transforms,block" validate:"min=0,max=2048"`
	// LogicalTableMapSource: required
	Source *LogicalTableMapSource `hcl:"source,block" validate:"required"`
}

type LogicalTableMapDataTransforms struct {
	// LogicalTableMapDataTransformsCastColumnTypeOperation: optional
	CastColumnTypeOperation *LogicalTableMapDataTransformsCastColumnTypeOperation `hcl:"cast_column_type_operation,block"`
	// LogicalTableMapDataTransformsCreateColumnsOperation: optional
	CreateColumnsOperation *LogicalTableMapDataTransformsCreateColumnsOperation `hcl:"create_columns_operation,block"`
	// LogicalTableMapDataTransformsFilterOperation: optional
	FilterOperation *LogicalTableMapDataTransformsFilterOperation `hcl:"filter_operation,block"`
	// LogicalTableMapDataTransformsProjectOperation: optional
	ProjectOperation *LogicalTableMapDataTransformsProjectOperation `hcl:"project_operation,block"`
	// LogicalTableMapDataTransformsRenameColumnOperation: optional
	RenameColumnOperation *LogicalTableMapDataTransformsRenameColumnOperation `hcl:"rename_column_operation,block"`
	// LogicalTableMapDataTransformsTagColumnOperation: optional
	TagColumnOperation *LogicalTableMapDataTransformsTagColumnOperation `hcl:"tag_column_operation,block"`
	// LogicalTableMapDataTransformsUntagColumnOperation: optional
	UntagColumnOperation *LogicalTableMapDataTransformsUntagColumnOperation `hcl:"untag_column_operation,block"`
}

type LogicalTableMapDataTransformsCastColumnTypeOperation struct {
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// Format: string, optional
	Format terra.StringValue `hcl:"format,attr"`
	// NewColumnType: string, required
	NewColumnType terra.StringValue `hcl:"new_column_type,attr" validate:"required"`
}

type LogicalTableMapDataTransformsCreateColumnsOperation struct {
	// LogicalTableMapDataTransformsCreateColumnsOperationColumns: min=1,max=128
	Columns []LogicalTableMapDataTransformsCreateColumnsOperationColumns `hcl:"columns,block" validate:"min=1,max=128"`
}

type LogicalTableMapDataTransformsCreateColumnsOperationColumns struct {
	// ColumnId: string, required
	ColumnId terra.StringValue `hcl:"column_id,attr" validate:"required"`
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// Expression: string, required
	Expression terra.StringValue `hcl:"expression,attr" validate:"required"`
}

type LogicalTableMapDataTransformsFilterOperation struct {
	// ConditionExpression: string, required
	ConditionExpression terra.StringValue `hcl:"condition_expression,attr" validate:"required"`
}

type LogicalTableMapDataTransformsProjectOperation struct {
	// ProjectedColumns: list of string, required
	ProjectedColumns terra.ListValue[terra.StringValue] `hcl:"projected_columns,attr" validate:"required"`
}

type LogicalTableMapDataTransformsRenameColumnOperation struct {
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// NewColumnName: string, required
	NewColumnName terra.StringValue `hcl:"new_column_name,attr" validate:"required"`
}

type LogicalTableMapDataTransformsTagColumnOperation struct {
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// LogicalTableMapDataTransformsTagColumnOperationTags: min=1,max=16
	Tags []LogicalTableMapDataTransformsTagColumnOperationTags `hcl:"tags,block" validate:"min=1,max=16"`
}

type LogicalTableMapDataTransformsTagColumnOperationTags struct {
	// ColumnGeographicRole: string, optional
	ColumnGeographicRole terra.StringValue `hcl:"column_geographic_role,attr"`
	// LogicalTableMapDataTransforms3Dab265B: optional
	ColumnDescription *LogicalTableMapDataTransforms3Dab265B `hcl:"column_description,block"`
}

type LogicalTableMapDataTransforms3Dab265B struct {
	// Text: string, optional
	Text terra.StringValue `hcl:"text,attr"`
}

type LogicalTableMapDataTransformsUntagColumnOperation struct {
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// TagNames: list of string, required
	TagNames terra.ListValue[terra.StringValue] `hcl:"tag_names,attr" validate:"required"`
}

type LogicalTableMapSource struct {
	// DataSetArn: string, optional
	DataSetArn terra.StringValue `hcl:"data_set_arn,attr"`
	// PhysicalTableId: string, optional
	PhysicalTableId terra.StringValue `hcl:"physical_table_id,attr"`
	// LogicalTableMapSourceJoinInstruction: optional
	JoinInstruction *LogicalTableMapSourceJoinInstruction `hcl:"join_instruction,block"`
}

type LogicalTableMapSourceJoinInstruction struct {
	// LeftOperand: string, required
	LeftOperand terra.StringValue `hcl:"left_operand,attr" validate:"required"`
	// OnClause: string, required
	OnClause terra.StringValue `hcl:"on_clause,attr" validate:"required"`
	// RightOperand: string, required
	RightOperand terra.StringValue `hcl:"right_operand,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// LogicalTableMapSourceJoinInstructionLeftJoinKeyProperties: optional
	LeftJoinKeyProperties *LogicalTableMapSourceJoinInstructionLeftJoinKeyProperties `hcl:"left_join_key_properties,block"`
	// LogicalTableMapSourceJoinInstructionRightJoinKeyProperties: optional
	RightJoinKeyProperties *LogicalTableMapSourceJoinInstructionRightJoinKeyProperties `hcl:"right_join_key_properties,block"`
}

type LogicalTableMapSourceJoinInstructionLeftJoinKeyProperties struct {
	// UniqueKey: bool, optional
	UniqueKey terra.BoolValue `hcl:"unique_key,attr"`
}

type LogicalTableMapSourceJoinInstructionRightJoinKeyProperties struct {
	// UniqueKey: bool, optional
	UniqueKey terra.BoolValue `hcl:"unique_key,attr"`
}

type Permissions struct {
	// Actions: set of string, required
	Actions terra.SetValue[terra.StringValue] `hcl:"actions,attr" validate:"required"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
}

type PhysicalTableMap struct {
	// PhysicalTableMapId: string, required
	PhysicalTableMapId terra.StringValue `hcl:"physical_table_map_id,attr" validate:"required"`
	// PhysicalTableMapCustomSql: optional
	CustomSql *PhysicalTableMapCustomSql `hcl:"custom_sql,block"`
	// PhysicalTableMapRelationalTable: optional
	RelationalTable *PhysicalTableMapRelationalTable `hcl:"relational_table,block"`
	// PhysicalTableMapS3Source: optional
	S3Source *PhysicalTableMapS3Source `hcl:"s3_source,block"`
}

type PhysicalTableMapCustomSql struct {
	// DataSourceArn: string, required
	DataSourceArn terra.StringValue `hcl:"data_source_arn,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SqlQuery: string, required
	SqlQuery terra.StringValue `hcl:"sql_query,attr" validate:"required"`
	// PhysicalTableMapCustomSqlColumns: min=0,max=2048
	Columns []PhysicalTableMapCustomSqlColumns `hcl:"columns,block" validate:"min=0,max=2048"`
}

type PhysicalTableMapCustomSqlColumns struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type PhysicalTableMapRelationalTable struct {
	// Catalog: string, optional
	Catalog terra.StringValue `hcl:"catalog,attr"`
	// DataSourceArn: string, required
	DataSourceArn terra.StringValue `hcl:"data_source_arn,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// PhysicalTableMapRelationalTableInputColumns: min=1,max=2048
	InputColumns []PhysicalTableMapRelationalTableInputColumns `hcl:"input_columns,block" validate:"min=1,max=2048"`
}

type PhysicalTableMapRelationalTableInputColumns struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type PhysicalTableMapS3Source struct {
	// DataSourceArn: string, required
	DataSourceArn terra.StringValue `hcl:"data_source_arn,attr" validate:"required"`
	// PhysicalTableMapS3SourceInputColumns: min=1,max=2048
	InputColumns []PhysicalTableMapS3SourceInputColumns `hcl:"input_columns,block" validate:"min=1,max=2048"`
	// PhysicalTableMapS3SourceUploadSettings: required
	UploadSettings *PhysicalTableMapS3SourceUploadSettings `hcl:"upload_settings,block" validate:"required"`
}

type PhysicalTableMapS3SourceInputColumns struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type PhysicalTableMapS3SourceUploadSettings struct {
	// ContainsHeader: bool, optional
	ContainsHeader terra.BoolValue `hcl:"contains_header,attr"`
	// Delimiter: string, optional
	Delimiter terra.StringValue `hcl:"delimiter,attr"`
	// Format: string, optional
	Format terra.StringValue `hcl:"format,attr"`
	// StartFromRow: number, optional
	StartFromRow terra.NumberValue `hcl:"start_from_row,attr"`
	// TextQualifier: string, optional
	TextQualifier terra.StringValue `hcl:"text_qualifier,attr"`
}

type RefreshProperties struct {
	// RefreshPropertiesRefreshConfiguration: required
	RefreshConfiguration *RefreshPropertiesRefreshConfiguration `hcl:"refresh_configuration,block" validate:"required"`
}

type RefreshPropertiesRefreshConfiguration struct {
	// RefreshPropertiesRefreshConfigurationIncrementalRefresh: required
	IncrementalRefresh *RefreshPropertiesRefreshConfigurationIncrementalRefresh `hcl:"incremental_refresh,block" validate:"required"`
}

type RefreshPropertiesRefreshConfigurationIncrementalRefresh struct {
	// RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow: required
	LookbackWindow *RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow `hcl:"lookback_window,block" validate:"required"`
}

type RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow struct {
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// SizeUnit: string, required
	SizeUnit terra.StringValue `hcl:"size_unit,attr" validate:"required"`
}

type RowLevelPermissionDataSet struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// FormatVersion: string, optional
	FormatVersion terra.StringValue `hcl:"format_version,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// PermissionPolicy: string, required
	PermissionPolicy terra.StringValue `hcl:"permission_policy,attr" validate:"required"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
}

type RowLevelPermissionTagConfiguration struct {
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// RowLevelPermissionTagConfigurationTagRules: min=1,max=50
	TagRules []RowLevelPermissionTagConfigurationTagRules `hcl:"tag_rules,block" validate:"min=1,max=50"`
}

type RowLevelPermissionTagConfigurationTagRules struct {
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// MatchAllValue: string, optional
	MatchAllValue terra.StringValue `hcl:"match_all_value,attr"`
	// TagKey: string, required
	TagKey terra.StringValue `hcl:"tag_key,attr" validate:"required"`
	// TagMultiValueDelimiter: string, optional
	TagMultiValueDelimiter terra.StringValue `hcl:"tag_multi_value_delimiter,attr"`
}

type OutputColumnsAttributes struct {
	ref terra.Reference
}

func (oc OutputColumnsAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc OutputColumnsAttributes) InternalWithRef(ref terra.Reference) OutputColumnsAttributes {
	return OutputColumnsAttributes{ref: ref}
}

func (oc OutputColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc OutputColumnsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("description"))
}

func (oc OutputColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("name"))
}

func (oc OutputColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("type"))
}

type ColumnGroupsAttributes struct {
	ref terra.Reference
}

func (cg ColumnGroupsAttributes) InternalRef() (terra.Reference, error) {
	return cg.ref, nil
}

func (cg ColumnGroupsAttributes) InternalWithRef(ref terra.Reference) ColumnGroupsAttributes {
	return ColumnGroupsAttributes{ref: ref}
}

func (cg ColumnGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cg.ref.InternalTokens()
}

func (cg ColumnGroupsAttributes) GeoSpatialColumnGroup() terra.ListValue[ColumnGroupsGeoSpatialColumnGroupAttributes] {
	return terra.ReferenceAsList[ColumnGroupsGeoSpatialColumnGroupAttributes](cg.ref.Append("geo_spatial_column_group"))
}

type ColumnGroupsGeoSpatialColumnGroupAttributes struct {
	ref terra.Reference
}

func (gscg ColumnGroupsGeoSpatialColumnGroupAttributes) InternalRef() (terra.Reference, error) {
	return gscg.ref, nil
}

func (gscg ColumnGroupsGeoSpatialColumnGroupAttributes) InternalWithRef(ref terra.Reference) ColumnGroupsGeoSpatialColumnGroupAttributes {
	return ColumnGroupsGeoSpatialColumnGroupAttributes{ref: ref}
}

func (gscg ColumnGroupsGeoSpatialColumnGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gscg.ref.InternalTokens()
}

func (gscg ColumnGroupsGeoSpatialColumnGroupAttributes) Columns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gscg.ref.Append("columns"))
}

func (gscg ColumnGroupsGeoSpatialColumnGroupAttributes) CountryCode() terra.StringValue {
	return terra.ReferenceAsString(gscg.ref.Append("country_code"))
}

func (gscg ColumnGroupsGeoSpatialColumnGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gscg.ref.Append("name"))
}

type ColumnLevelPermissionRulesAttributes struct {
	ref terra.Reference
}

func (clpr ColumnLevelPermissionRulesAttributes) InternalRef() (terra.Reference, error) {
	return clpr.ref, nil
}

func (clpr ColumnLevelPermissionRulesAttributes) InternalWithRef(ref terra.Reference) ColumnLevelPermissionRulesAttributes {
	return ColumnLevelPermissionRulesAttributes{ref: ref}
}

func (clpr ColumnLevelPermissionRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clpr.ref.InternalTokens()
}

func (clpr ColumnLevelPermissionRulesAttributes) ColumnNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](clpr.ref.Append("column_names"))
}

func (clpr ColumnLevelPermissionRulesAttributes) Principals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](clpr.ref.Append("principals"))
}

type DataSetUsageConfigurationAttributes struct {
	ref terra.Reference
}

func (dsuc DataSetUsageConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dsuc.ref, nil
}

func (dsuc DataSetUsageConfigurationAttributes) InternalWithRef(ref terra.Reference) DataSetUsageConfigurationAttributes {
	return DataSetUsageConfigurationAttributes{ref: ref}
}

func (dsuc DataSetUsageConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dsuc.ref.InternalTokens()
}

func (dsuc DataSetUsageConfigurationAttributes) DisableUseAsDirectQuerySource() terra.BoolValue {
	return terra.ReferenceAsBool(dsuc.ref.Append("disable_use_as_direct_query_source"))
}

func (dsuc DataSetUsageConfigurationAttributes) DisableUseAsImportedSource() terra.BoolValue {
	return terra.ReferenceAsBool(dsuc.ref.Append("disable_use_as_imported_source"))
}

type FieldFoldersAttributes struct {
	ref terra.Reference
}

func (ff FieldFoldersAttributes) InternalRef() (terra.Reference, error) {
	return ff.ref, nil
}

func (ff FieldFoldersAttributes) InternalWithRef(ref terra.Reference) FieldFoldersAttributes {
	return FieldFoldersAttributes{ref: ref}
}

func (ff FieldFoldersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ff.ref.InternalTokens()
}

func (ff FieldFoldersAttributes) Columns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ff.ref.Append("columns"))
}

func (ff FieldFoldersAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ff.ref.Append("description"))
}

func (ff FieldFoldersAttributes) FieldFoldersId() terra.StringValue {
	return terra.ReferenceAsString(ff.ref.Append("field_folders_id"))
}

type LogicalTableMapAttributes struct {
	ref terra.Reference
}

func (ltm LogicalTableMapAttributes) InternalRef() (terra.Reference, error) {
	return ltm.ref, nil
}

func (ltm LogicalTableMapAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapAttributes {
	return LogicalTableMapAttributes{ref: ref}
}

func (ltm LogicalTableMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ltm.ref.InternalTokens()
}

func (ltm LogicalTableMapAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(ltm.ref.Append("alias"))
}

func (ltm LogicalTableMapAttributes) LogicalTableMapId() terra.StringValue {
	return terra.ReferenceAsString(ltm.ref.Append("logical_table_map_id"))
}

func (ltm LogicalTableMapAttributes) DataTransforms() terra.ListValue[LogicalTableMapDataTransformsAttributes] {
	return terra.ReferenceAsList[LogicalTableMapDataTransformsAttributes](ltm.ref.Append("data_transforms"))
}

func (ltm LogicalTableMapAttributes) Source() terra.ListValue[LogicalTableMapSourceAttributes] {
	return terra.ReferenceAsList[LogicalTableMapSourceAttributes](ltm.ref.Append("source"))
}

type LogicalTableMapDataTransformsAttributes struct {
	ref terra.Reference
}

func (dt LogicalTableMapDataTransformsAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt LogicalTableMapDataTransformsAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapDataTransformsAttributes {
	return LogicalTableMapDataTransformsAttributes{ref: ref}
}

func (dt LogicalTableMapDataTransformsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt LogicalTableMapDataTransformsAttributes) CastColumnTypeOperation() terra.ListValue[LogicalTableMapDataTransformsCastColumnTypeOperationAttributes] {
	return terra.ReferenceAsList[LogicalTableMapDataTransformsCastColumnTypeOperationAttributes](dt.ref.Append("cast_column_type_operation"))
}

func (dt LogicalTableMapDataTransformsAttributes) CreateColumnsOperation() terra.ListValue[LogicalTableMapDataTransformsCreateColumnsOperationAttributes] {
	return terra.ReferenceAsList[LogicalTableMapDataTransformsCreateColumnsOperationAttributes](dt.ref.Append("create_columns_operation"))
}

func (dt LogicalTableMapDataTransformsAttributes) FilterOperation() terra.ListValue[LogicalTableMapDataTransformsFilterOperationAttributes] {
	return terra.ReferenceAsList[LogicalTableMapDataTransformsFilterOperationAttributes](dt.ref.Append("filter_operation"))
}

func (dt LogicalTableMapDataTransformsAttributes) ProjectOperation() terra.ListValue[LogicalTableMapDataTransformsProjectOperationAttributes] {
	return terra.ReferenceAsList[LogicalTableMapDataTransformsProjectOperationAttributes](dt.ref.Append("project_operation"))
}

func (dt LogicalTableMapDataTransformsAttributes) RenameColumnOperation() terra.ListValue[LogicalTableMapDataTransformsRenameColumnOperationAttributes] {
	return terra.ReferenceAsList[LogicalTableMapDataTransformsRenameColumnOperationAttributes](dt.ref.Append("rename_column_operation"))
}

func (dt LogicalTableMapDataTransformsAttributes) TagColumnOperation() terra.ListValue[LogicalTableMapDataTransformsTagColumnOperationAttributes] {
	return terra.ReferenceAsList[LogicalTableMapDataTransformsTagColumnOperationAttributes](dt.ref.Append("tag_column_operation"))
}

func (dt LogicalTableMapDataTransformsAttributes) UntagColumnOperation() terra.ListValue[LogicalTableMapDataTransformsUntagColumnOperationAttributes] {
	return terra.ReferenceAsList[LogicalTableMapDataTransformsUntagColumnOperationAttributes](dt.ref.Append("untag_column_operation"))
}

type LogicalTableMapDataTransformsCastColumnTypeOperationAttributes struct {
	ref terra.Reference
}

func (ccto LogicalTableMapDataTransformsCastColumnTypeOperationAttributes) InternalRef() (terra.Reference, error) {
	return ccto.ref, nil
}

func (ccto LogicalTableMapDataTransformsCastColumnTypeOperationAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapDataTransformsCastColumnTypeOperationAttributes {
	return LogicalTableMapDataTransformsCastColumnTypeOperationAttributes{ref: ref}
}

func (ccto LogicalTableMapDataTransformsCastColumnTypeOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccto.ref.InternalTokens()
}

func (ccto LogicalTableMapDataTransformsCastColumnTypeOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("column_name"))
}

func (ccto LogicalTableMapDataTransformsCastColumnTypeOperationAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("format"))
}

func (ccto LogicalTableMapDataTransformsCastColumnTypeOperationAttributes) NewColumnType() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("new_column_type"))
}

type LogicalTableMapDataTransformsCreateColumnsOperationAttributes struct {
	ref terra.Reference
}

func (cco LogicalTableMapDataTransformsCreateColumnsOperationAttributes) InternalRef() (terra.Reference, error) {
	return cco.ref, nil
}

func (cco LogicalTableMapDataTransformsCreateColumnsOperationAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapDataTransformsCreateColumnsOperationAttributes {
	return LogicalTableMapDataTransformsCreateColumnsOperationAttributes{ref: ref}
}

func (cco LogicalTableMapDataTransformsCreateColumnsOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cco.ref.InternalTokens()
}

func (cco LogicalTableMapDataTransformsCreateColumnsOperationAttributes) Columns() terra.ListValue[LogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes] {
	return terra.ReferenceAsList[LogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes](cco.ref.Append("columns"))
}

type LogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes struct {
	ref terra.Reference
}

func (c LogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c LogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes {
	return LogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes{ref: ref}
}

func (c LogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c LogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) ColumnId() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("column_id"))
}

func (c LogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("column_name"))
}

func (c LogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("expression"))
}

type LogicalTableMapDataTransformsFilterOperationAttributes struct {
	ref terra.Reference
}

func (fo LogicalTableMapDataTransformsFilterOperationAttributes) InternalRef() (terra.Reference, error) {
	return fo.ref, nil
}

func (fo LogicalTableMapDataTransformsFilterOperationAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapDataTransformsFilterOperationAttributes {
	return LogicalTableMapDataTransformsFilterOperationAttributes{ref: ref}
}

func (fo LogicalTableMapDataTransformsFilterOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fo.ref.InternalTokens()
}

func (fo LogicalTableMapDataTransformsFilterOperationAttributes) ConditionExpression() terra.StringValue {
	return terra.ReferenceAsString(fo.ref.Append("condition_expression"))
}

type LogicalTableMapDataTransformsProjectOperationAttributes struct {
	ref terra.Reference
}

func (po LogicalTableMapDataTransformsProjectOperationAttributes) InternalRef() (terra.Reference, error) {
	return po.ref, nil
}

func (po LogicalTableMapDataTransformsProjectOperationAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapDataTransformsProjectOperationAttributes {
	return LogicalTableMapDataTransformsProjectOperationAttributes{ref: ref}
}

func (po LogicalTableMapDataTransformsProjectOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return po.ref.InternalTokens()
}

func (po LogicalTableMapDataTransformsProjectOperationAttributes) ProjectedColumns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](po.ref.Append("projected_columns"))
}

type LogicalTableMapDataTransformsRenameColumnOperationAttributes struct {
	ref terra.Reference
}

func (rco LogicalTableMapDataTransformsRenameColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return rco.ref, nil
}

func (rco LogicalTableMapDataTransformsRenameColumnOperationAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapDataTransformsRenameColumnOperationAttributes {
	return LogicalTableMapDataTransformsRenameColumnOperationAttributes{ref: ref}
}

func (rco LogicalTableMapDataTransformsRenameColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rco.ref.InternalTokens()
}

func (rco LogicalTableMapDataTransformsRenameColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(rco.ref.Append("column_name"))
}

func (rco LogicalTableMapDataTransformsRenameColumnOperationAttributes) NewColumnName() terra.StringValue {
	return terra.ReferenceAsString(rco.ref.Append("new_column_name"))
}

type LogicalTableMapDataTransformsTagColumnOperationAttributes struct {
	ref terra.Reference
}

func (tco LogicalTableMapDataTransformsTagColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return tco.ref, nil
}

func (tco LogicalTableMapDataTransformsTagColumnOperationAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapDataTransformsTagColumnOperationAttributes {
	return LogicalTableMapDataTransformsTagColumnOperationAttributes{ref: ref}
}

func (tco LogicalTableMapDataTransformsTagColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tco.ref.InternalTokens()
}

func (tco LogicalTableMapDataTransformsTagColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(tco.ref.Append("column_name"))
}

func (tco LogicalTableMapDataTransformsTagColumnOperationAttributes) Tags() terra.ListValue[LogicalTableMapDataTransformsTagColumnOperationTagsAttributes] {
	return terra.ReferenceAsList[LogicalTableMapDataTransformsTagColumnOperationTagsAttributes](tco.ref.Append("tags"))
}

type LogicalTableMapDataTransformsTagColumnOperationTagsAttributes struct {
	ref terra.Reference
}

func (t LogicalTableMapDataTransformsTagColumnOperationTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t LogicalTableMapDataTransformsTagColumnOperationTagsAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapDataTransformsTagColumnOperationTagsAttributes {
	return LogicalTableMapDataTransformsTagColumnOperationTagsAttributes{ref: ref}
}

func (t LogicalTableMapDataTransformsTagColumnOperationTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t LogicalTableMapDataTransformsTagColumnOperationTagsAttributes) ColumnGeographicRole() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("column_geographic_role"))
}

func (t LogicalTableMapDataTransformsTagColumnOperationTagsAttributes) ColumnDescription() terra.ListValue[LogicalTableMapDataTransforms3Dab265BAttributes] {
	return terra.ReferenceAsList[LogicalTableMapDataTransforms3Dab265BAttributes](t.ref.Append("column_description"))
}

type LogicalTableMapDataTransforms3Dab265BAttributes struct {
	ref terra.Reference
}

func (cd LogicalTableMapDataTransforms3Dab265BAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd LogicalTableMapDataTransforms3Dab265BAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapDataTransforms3Dab265BAttributes {
	return LogicalTableMapDataTransforms3Dab265BAttributes{ref: ref}
}

func (cd LogicalTableMapDataTransforms3Dab265BAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd LogicalTableMapDataTransforms3Dab265BAttributes) Text() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("text"))
}

type LogicalTableMapDataTransformsUntagColumnOperationAttributes struct {
	ref terra.Reference
}

func (uco LogicalTableMapDataTransformsUntagColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return uco.ref, nil
}

func (uco LogicalTableMapDataTransformsUntagColumnOperationAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapDataTransformsUntagColumnOperationAttributes {
	return LogicalTableMapDataTransformsUntagColumnOperationAttributes{ref: ref}
}

func (uco LogicalTableMapDataTransformsUntagColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uco.ref.InternalTokens()
}

func (uco LogicalTableMapDataTransformsUntagColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(uco.ref.Append("column_name"))
}

func (uco LogicalTableMapDataTransformsUntagColumnOperationAttributes) TagNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](uco.ref.Append("tag_names"))
}

type LogicalTableMapSourceAttributes struct {
	ref terra.Reference
}

func (s LogicalTableMapSourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s LogicalTableMapSourceAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapSourceAttributes {
	return LogicalTableMapSourceAttributes{ref: ref}
}

func (s LogicalTableMapSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s LogicalTableMapSourceAttributes) DataSetArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("data_set_arn"))
}

func (s LogicalTableMapSourceAttributes) PhysicalTableId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("physical_table_id"))
}

func (s LogicalTableMapSourceAttributes) JoinInstruction() terra.ListValue[LogicalTableMapSourceJoinInstructionAttributes] {
	return terra.ReferenceAsList[LogicalTableMapSourceJoinInstructionAttributes](s.ref.Append("join_instruction"))
}

type LogicalTableMapSourceJoinInstructionAttributes struct {
	ref terra.Reference
}

func (ji LogicalTableMapSourceJoinInstructionAttributes) InternalRef() (terra.Reference, error) {
	return ji.ref, nil
}

func (ji LogicalTableMapSourceJoinInstructionAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapSourceJoinInstructionAttributes {
	return LogicalTableMapSourceJoinInstructionAttributes{ref: ref}
}

func (ji LogicalTableMapSourceJoinInstructionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ji.ref.InternalTokens()
}

func (ji LogicalTableMapSourceJoinInstructionAttributes) LeftOperand() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("left_operand"))
}

func (ji LogicalTableMapSourceJoinInstructionAttributes) OnClause() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("on_clause"))
}

func (ji LogicalTableMapSourceJoinInstructionAttributes) RightOperand() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("right_operand"))
}

func (ji LogicalTableMapSourceJoinInstructionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("type"))
}

func (ji LogicalTableMapSourceJoinInstructionAttributes) LeftJoinKeyProperties() terra.ListValue[LogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes] {
	return terra.ReferenceAsList[LogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes](ji.ref.Append("left_join_key_properties"))
}

func (ji LogicalTableMapSourceJoinInstructionAttributes) RightJoinKeyProperties() terra.ListValue[LogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes] {
	return terra.ReferenceAsList[LogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes](ji.ref.Append("right_join_key_properties"))
}

type LogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes struct {
	ref terra.Reference
}

func (ljkp LogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return ljkp.ref, nil
}

func (ljkp LogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes {
	return LogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes{ref: ref}
}

func (ljkp LogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ljkp.ref.InternalTokens()
}

func (ljkp LogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) UniqueKey() terra.BoolValue {
	return terra.ReferenceAsBool(ljkp.ref.Append("unique_key"))
}

type LogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes struct {
	ref terra.Reference
}

func (rjkp LogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return rjkp.ref, nil
}

func (rjkp LogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes {
	return LogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes{ref: ref}
}

func (rjkp LogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rjkp.ref.InternalTokens()
}

func (rjkp LogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) UniqueKey() terra.BoolValue {
	return terra.ReferenceAsBool(rjkp.ref.Append("unique_key"))
}

type PermissionsAttributes struct {
	ref terra.Reference
}

func (p PermissionsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PermissionsAttributes) InternalWithRef(ref terra.Reference) PermissionsAttributes {
	return PermissionsAttributes{ref: ref}
}

func (p PermissionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PermissionsAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("actions"))
}

func (p PermissionsAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("principal"))
}

type PhysicalTableMapAttributes struct {
	ref terra.Reference
}

func (ptm PhysicalTableMapAttributes) InternalRef() (terra.Reference, error) {
	return ptm.ref, nil
}

func (ptm PhysicalTableMapAttributes) InternalWithRef(ref terra.Reference) PhysicalTableMapAttributes {
	return PhysicalTableMapAttributes{ref: ref}
}

func (ptm PhysicalTableMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptm.ref.InternalTokens()
}

func (ptm PhysicalTableMapAttributes) PhysicalTableMapId() terra.StringValue {
	return terra.ReferenceAsString(ptm.ref.Append("physical_table_map_id"))
}

func (ptm PhysicalTableMapAttributes) CustomSql() terra.ListValue[PhysicalTableMapCustomSqlAttributes] {
	return terra.ReferenceAsList[PhysicalTableMapCustomSqlAttributes](ptm.ref.Append("custom_sql"))
}

func (ptm PhysicalTableMapAttributes) RelationalTable() terra.ListValue[PhysicalTableMapRelationalTableAttributes] {
	return terra.ReferenceAsList[PhysicalTableMapRelationalTableAttributes](ptm.ref.Append("relational_table"))
}

func (ptm PhysicalTableMapAttributes) S3Source() terra.ListValue[PhysicalTableMapS3SourceAttributes] {
	return terra.ReferenceAsList[PhysicalTableMapS3SourceAttributes](ptm.ref.Append("s3_source"))
}

type PhysicalTableMapCustomSqlAttributes struct {
	ref terra.Reference
}

func (cs PhysicalTableMapCustomSqlAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs PhysicalTableMapCustomSqlAttributes) InternalWithRef(ref terra.Reference) PhysicalTableMapCustomSqlAttributes {
	return PhysicalTableMapCustomSqlAttributes{ref: ref}
}

func (cs PhysicalTableMapCustomSqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs PhysicalTableMapCustomSqlAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("data_source_arn"))
}

func (cs PhysicalTableMapCustomSqlAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("name"))
}

func (cs PhysicalTableMapCustomSqlAttributes) SqlQuery() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("sql_query"))
}

func (cs PhysicalTableMapCustomSqlAttributes) Columns() terra.ListValue[PhysicalTableMapCustomSqlColumnsAttributes] {
	return terra.ReferenceAsList[PhysicalTableMapCustomSqlColumnsAttributes](cs.ref.Append("columns"))
}

type PhysicalTableMapCustomSqlColumnsAttributes struct {
	ref terra.Reference
}

func (c PhysicalTableMapCustomSqlColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c PhysicalTableMapCustomSqlColumnsAttributes) InternalWithRef(ref terra.Reference) PhysicalTableMapCustomSqlColumnsAttributes {
	return PhysicalTableMapCustomSqlColumnsAttributes{ref: ref}
}

func (c PhysicalTableMapCustomSqlColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c PhysicalTableMapCustomSqlColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c PhysicalTableMapCustomSqlColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type PhysicalTableMapRelationalTableAttributes struct {
	ref terra.Reference
}

func (rt PhysicalTableMapRelationalTableAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt PhysicalTableMapRelationalTableAttributes) InternalWithRef(ref terra.Reference) PhysicalTableMapRelationalTableAttributes {
	return PhysicalTableMapRelationalTableAttributes{ref: ref}
}

func (rt PhysicalTableMapRelationalTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt PhysicalTableMapRelationalTableAttributes) Catalog() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("catalog"))
}

func (rt PhysicalTableMapRelationalTableAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("data_source_arn"))
}

func (rt PhysicalTableMapRelationalTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("name"))
}

func (rt PhysicalTableMapRelationalTableAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("schema"))
}

func (rt PhysicalTableMapRelationalTableAttributes) InputColumns() terra.ListValue[PhysicalTableMapRelationalTableInputColumnsAttributes] {
	return terra.ReferenceAsList[PhysicalTableMapRelationalTableInputColumnsAttributes](rt.ref.Append("input_columns"))
}

type PhysicalTableMapRelationalTableInputColumnsAttributes struct {
	ref terra.Reference
}

func (ic PhysicalTableMapRelationalTableInputColumnsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic PhysicalTableMapRelationalTableInputColumnsAttributes) InternalWithRef(ref terra.Reference) PhysicalTableMapRelationalTableInputColumnsAttributes {
	return PhysicalTableMapRelationalTableInputColumnsAttributes{ref: ref}
}

func (ic PhysicalTableMapRelationalTableInputColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic PhysicalTableMapRelationalTableInputColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic PhysicalTableMapRelationalTableInputColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("type"))
}

type PhysicalTableMapS3SourceAttributes struct {
	ref terra.Reference
}

func (ss PhysicalTableMapS3SourceAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss PhysicalTableMapS3SourceAttributes) InternalWithRef(ref terra.Reference) PhysicalTableMapS3SourceAttributes {
	return PhysicalTableMapS3SourceAttributes{ref: ref}
}

func (ss PhysicalTableMapS3SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss PhysicalTableMapS3SourceAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("data_source_arn"))
}

func (ss PhysicalTableMapS3SourceAttributes) InputColumns() terra.ListValue[PhysicalTableMapS3SourceInputColumnsAttributes] {
	return terra.ReferenceAsList[PhysicalTableMapS3SourceInputColumnsAttributes](ss.ref.Append("input_columns"))
}

func (ss PhysicalTableMapS3SourceAttributes) UploadSettings() terra.ListValue[PhysicalTableMapS3SourceUploadSettingsAttributes] {
	return terra.ReferenceAsList[PhysicalTableMapS3SourceUploadSettingsAttributes](ss.ref.Append("upload_settings"))
}

type PhysicalTableMapS3SourceInputColumnsAttributes struct {
	ref terra.Reference
}

func (ic PhysicalTableMapS3SourceInputColumnsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic PhysicalTableMapS3SourceInputColumnsAttributes) InternalWithRef(ref terra.Reference) PhysicalTableMapS3SourceInputColumnsAttributes {
	return PhysicalTableMapS3SourceInputColumnsAttributes{ref: ref}
}

func (ic PhysicalTableMapS3SourceInputColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic PhysicalTableMapS3SourceInputColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic PhysicalTableMapS3SourceInputColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("type"))
}

type PhysicalTableMapS3SourceUploadSettingsAttributes struct {
	ref terra.Reference
}

func (us PhysicalTableMapS3SourceUploadSettingsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us PhysicalTableMapS3SourceUploadSettingsAttributes) InternalWithRef(ref terra.Reference) PhysicalTableMapS3SourceUploadSettingsAttributes {
	return PhysicalTableMapS3SourceUploadSettingsAttributes{ref: ref}
}

func (us PhysicalTableMapS3SourceUploadSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us PhysicalTableMapS3SourceUploadSettingsAttributes) ContainsHeader() terra.BoolValue {
	return terra.ReferenceAsBool(us.ref.Append("contains_header"))
}

func (us PhysicalTableMapS3SourceUploadSettingsAttributes) Delimiter() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("delimiter"))
}

func (us PhysicalTableMapS3SourceUploadSettingsAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("format"))
}

func (us PhysicalTableMapS3SourceUploadSettingsAttributes) StartFromRow() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("start_from_row"))
}

func (us PhysicalTableMapS3SourceUploadSettingsAttributes) TextQualifier() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("text_qualifier"))
}

type RefreshPropertiesAttributes struct {
	ref terra.Reference
}

func (rp RefreshPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RefreshPropertiesAttributes) InternalWithRef(ref terra.Reference) RefreshPropertiesAttributes {
	return RefreshPropertiesAttributes{ref: ref}
}

func (rp RefreshPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RefreshPropertiesAttributes) RefreshConfiguration() terra.ListValue[RefreshPropertiesRefreshConfigurationAttributes] {
	return terra.ReferenceAsList[RefreshPropertiesRefreshConfigurationAttributes](rp.ref.Append("refresh_configuration"))
}

type RefreshPropertiesRefreshConfigurationAttributes struct {
	ref terra.Reference
}

func (rc RefreshPropertiesRefreshConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc RefreshPropertiesRefreshConfigurationAttributes) InternalWithRef(ref terra.Reference) RefreshPropertiesRefreshConfigurationAttributes {
	return RefreshPropertiesRefreshConfigurationAttributes{ref: ref}
}

func (rc RefreshPropertiesRefreshConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc RefreshPropertiesRefreshConfigurationAttributes) IncrementalRefresh() terra.ListValue[RefreshPropertiesRefreshConfigurationIncrementalRefreshAttributes] {
	return terra.ReferenceAsList[RefreshPropertiesRefreshConfigurationIncrementalRefreshAttributes](rc.ref.Append("incremental_refresh"))
}

type RefreshPropertiesRefreshConfigurationIncrementalRefreshAttributes struct {
	ref terra.Reference
}

func (ir RefreshPropertiesRefreshConfigurationIncrementalRefreshAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir RefreshPropertiesRefreshConfigurationIncrementalRefreshAttributes) InternalWithRef(ref terra.Reference) RefreshPropertiesRefreshConfigurationIncrementalRefreshAttributes {
	return RefreshPropertiesRefreshConfigurationIncrementalRefreshAttributes{ref: ref}
}

func (ir RefreshPropertiesRefreshConfigurationIncrementalRefreshAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir RefreshPropertiesRefreshConfigurationIncrementalRefreshAttributes) LookbackWindow() terra.ListValue[RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes] {
	return terra.ReferenceAsList[RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes](ir.ref.Append("lookback_window"))
}

type RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes struct {
	ref terra.Reference
}

func (lw RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes) InternalRef() (terra.Reference, error) {
	return lw.ref, nil
}

func (lw RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes) InternalWithRef(ref terra.Reference) RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes {
	return RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes{ref: ref}
}

func (lw RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lw.ref.InternalTokens()
}

func (lw RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(lw.ref.Append("column_name"))
}

func (lw RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(lw.ref.Append("size"))
}

func (lw RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes) SizeUnit() terra.StringValue {
	return terra.ReferenceAsString(lw.ref.Append("size_unit"))
}

type RowLevelPermissionDataSetAttributes struct {
	ref terra.Reference
}

func (rlpds RowLevelPermissionDataSetAttributes) InternalRef() (terra.Reference, error) {
	return rlpds.ref, nil
}

func (rlpds RowLevelPermissionDataSetAttributes) InternalWithRef(ref terra.Reference) RowLevelPermissionDataSetAttributes {
	return RowLevelPermissionDataSetAttributes{ref: ref}
}

func (rlpds RowLevelPermissionDataSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rlpds.ref.InternalTokens()
}

func (rlpds RowLevelPermissionDataSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("arn"))
}

func (rlpds RowLevelPermissionDataSetAttributes) FormatVersion() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("format_version"))
}

func (rlpds RowLevelPermissionDataSetAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("namespace"))
}

func (rlpds RowLevelPermissionDataSetAttributes) PermissionPolicy() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("permission_policy"))
}

func (rlpds RowLevelPermissionDataSetAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("status"))
}

type RowLevelPermissionTagConfigurationAttributes struct {
	ref terra.Reference
}

func (rlptc RowLevelPermissionTagConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rlptc.ref, nil
}

func (rlptc RowLevelPermissionTagConfigurationAttributes) InternalWithRef(ref terra.Reference) RowLevelPermissionTagConfigurationAttributes {
	return RowLevelPermissionTagConfigurationAttributes{ref: ref}
}

func (rlptc RowLevelPermissionTagConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rlptc.ref.InternalTokens()
}

func (rlptc RowLevelPermissionTagConfigurationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rlptc.ref.Append("status"))
}

func (rlptc RowLevelPermissionTagConfigurationAttributes) TagRules() terra.ListValue[RowLevelPermissionTagConfigurationTagRulesAttributes] {
	return terra.ReferenceAsList[RowLevelPermissionTagConfigurationTagRulesAttributes](rlptc.ref.Append("tag_rules"))
}

type RowLevelPermissionTagConfigurationTagRulesAttributes struct {
	ref terra.Reference
}

func (tr RowLevelPermissionTagConfigurationTagRulesAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr RowLevelPermissionTagConfigurationTagRulesAttributes) InternalWithRef(ref terra.Reference) RowLevelPermissionTagConfigurationTagRulesAttributes {
	return RowLevelPermissionTagConfigurationTagRulesAttributes{ref: ref}
}

func (tr RowLevelPermissionTagConfigurationTagRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr RowLevelPermissionTagConfigurationTagRulesAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("column_name"))
}

func (tr RowLevelPermissionTagConfigurationTagRulesAttributes) MatchAllValue() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("match_all_value"))
}

func (tr RowLevelPermissionTagConfigurationTagRulesAttributes) TagKey() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("tag_key"))
}

func (tr RowLevelPermissionTagConfigurationTagRulesAttributes) TagMultiValueDelimiter() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("tag_multi_value_delimiter"))
}

type OutputColumnsState struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	Type        string `json:"type"`
}

type ColumnGroupsState struct {
	GeoSpatialColumnGroup []ColumnGroupsGeoSpatialColumnGroupState `json:"geo_spatial_column_group"`
}

type ColumnGroupsGeoSpatialColumnGroupState struct {
	Columns     []string `json:"columns"`
	CountryCode string   `json:"country_code"`
	Name        string   `json:"name"`
}

type ColumnLevelPermissionRulesState struct {
	ColumnNames []string `json:"column_names"`
	Principals  []string `json:"principals"`
}

type DataSetUsageConfigurationState struct {
	DisableUseAsDirectQuerySource bool `json:"disable_use_as_direct_query_source"`
	DisableUseAsImportedSource    bool `json:"disable_use_as_imported_source"`
}

type FieldFoldersState struct {
	Columns        []string `json:"columns"`
	Description    string   `json:"description"`
	FieldFoldersId string   `json:"field_folders_id"`
}

type LogicalTableMapState struct {
	Alias             string                               `json:"alias"`
	LogicalTableMapId string                               `json:"logical_table_map_id"`
	DataTransforms    []LogicalTableMapDataTransformsState `json:"data_transforms"`
	Source            []LogicalTableMapSourceState         `json:"source"`
}

type LogicalTableMapDataTransformsState struct {
	CastColumnTypeOperation []LogicalTableMapDataTransformsCastColumnTypeOperationState `json:"cast_column_type_operation"`
	CreateColumnsOperation  []LogicalTableMapDataTransformsCreateColumnsOperationState  `json:"create_columns_operation"`
	FilterOperation         []LogicalTableMapDataTransformsFilterOperationState         `json:"filter_operation"`
	ProjectOperation        []LogicalTableMapDataTransformsProjectOperationState        `json:"project_operation"`
	RenameColumnOperation   []LogicalTableMapDataTransformsRenameColumnOperationState   `json:"rename_column_operation"`
	TagColumnOperation      []LogicalTableMapDataTransformsTagColumnOperationState      `json:"tag_column_operation"`
	UntagColumnOperation    []LogicalTableMapDataTransformsUntagColumnOperationState    `json:"untag_column_operation"`
}

type LogicalTableMapDataTransformsCastColumnTypeOperationState struct {
	ColumnName    string `json:"column_name"`
	Format        string `json:"format"`
	NewColumnType string `json:"new_column_type"`
}

type LogicalTableMapDataTransformsCreateColumnsOperationState struct {
	Columns []LogicalTableMapDataTransformsCreateColumnsOperationColumnsState `json:"columns"`
}

type LogicalTableMapDataTransformsCreateColumnsOperationColumnsState struct {
	ColumnId   string `json:"column_id"`
	ColumnName string `json:"column_name"`
	Expression string `json:"expression"`
}

type LogicalTableMapDataTransformsFilterOperationState struct {
	ConditionExpression string `json:"condition_expression"`
}

type LogicalTableMapDataTransformsProjectOperationState struct {
	ProjectedColumns []string `json:"projected_columns"`
}

type LogicalTableMapDataTransformsRenameColumnOperationState struct {
	ColumnName    string `json:"column_name"`
	NewColumnName string `json:"new_column_name"`
}

type LogicalTableMapDataTransformsTagColumnOperationState struct {
	ColumnName string                                                     `json:"column_name"`
	Tags       []LogicalTableMapDataTransformsTagColumnOperationTagsState `json:"tags"`
}

type LogicalTableMapDataTransformsTagColumnOperationTagsState struct {
	ColumnGeographicRole string                                       `json:"column_geographic_role"`
	ColumnDescription    []LogicalTableMapDataTransforms3Dab265BState `json:"column_description"`
}

type LogicalTableMapDataTransforms3Dab265BState struct {
	Text string `json:"text"`
}

type LogicalTableMapDataTransformsUntagColumnOperationState struct {
	ColumnName string   `json:"column_name"`
	TagNames   []string `json:"tag_names"`
}

type LogicalTableMapSourceState struct {
	DataSetArn      string                                      `json:"data_set_arn"`
	PhysicalTableId string                                      `json:"physical_table_id"`
	JoinInstruction []LogicalTableMapSourceJoinInstructionState `json:"join_instruction"`
}

type LogicalTableMapSourceJoinInstructionState struct {
	LeftOperand            string                                                            `json:"left_operand"`
	OnClause               string                                                            `json:"on_clause"`
	RightOperand           string                                                            `json:"right_operand"`
	Type                   string                                                            `json:"type"`
	LeftJoinKeyProperties  []LogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesState  `json:"left_join_key_properties"`
	RightJoinKeyProperties []LogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesState `json:"right_join_key_properties"`
}

type LogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesState struct {
	UniqueKey bool `json:"unique_key"`
}

type LogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesState struct {
	UniqueKey bool `json:"unique_key"`
}

type PermissionsState struct {
	Actions   []string `json:"actions"`
	Principal string   `json:"principal"`
}

type PhysicalTableMapState struct {
	PhysicalTableMapId string                                 `json:"physical_table_map_id"`
	CustomSql          []PhysicalTableMapCustomSqlState       `json:"custom_sql"`
	RelationalTable    []PhysicalTableMapRelationalTableState `json:"relational_table"`
	S3Source           []PhysicalTableMapS3SourceState        `json:"s3_source"`
}

type PhysicalTableMapCustomSqlState struct {
	DataSourceArn string                                  `json:"data_source_arn"`
	Name          string                                  `json:"name"`
	SqlQuery      string                                  `json:"sql_query"`
	Columns       []PhysicalTableMapCustomSqlColumnsState `json:"columns"`
}

type PhysicalTableMapCustomSqlColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type PhysicalTableMapRelationalTableState struct {
	Catalog       string                                             `json:"catalog"`
	DataSourceArn string                                             `json:"data_source_arn"`
	Name          string                                             `json:"name"`
	Schema        string                                             `json:"schema"`
	InputColumns  []PhysicalTableMapRelationalTableInputColumnsState `json:"input_columns"`
}

type PhysicalTableMapRelationalTableInputColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type PhysicalTableMapS3SourceState struct {
	DataSourceArn  string                                        `json:"data_source_arn"`
	InputColumns   []PhysicalTableMapS3SourceInputColumnsState   `json:"input_columns"`
	UploadSettings []PhysicalTableMapS3SourceUploadSettingsState `json:"upload_settings"`
}

type PhysicalTableMapS3SourceInputColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type PhysicalTableMapS3SourceUploadSettingsState struct {
	ContainsHeader bool    `json:"contains_header"`
	Delimiter      string  `json:"delimiter"`
	Format         string  `json:"format"`
	StartFromRow   float64 `json:"start_from_row"`
	TextQualifier  string  `json:"text_qualifier"`
}

type RefreshPropertiesState struct {
	RefreshConfiguration []RefreshPropertiesRefreshConfigurationState `json:"refresh_configuration"`
}

type RefreshPropertiesRefreshConfigurationState struct {
	IncrementalRefresh []RefreshPropertiesRefreshConfigurationIncrementalRefreshState `json:"incremental_refresh"`
}

type RefreshPropertiesRefreshConfigurationIncrementalRefreshState struct {
	LookbackWindow []RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowState `json:"lookback_window"`
}

type RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowState struct {
	ColumnName string  `json:"column_name"`
	Size       float64 `json:"size"`
	SizeUnit   string  `json:"size_unit"`
}

type RowLevelPermissionDataSetState struct {
	Arn              string `json:"arn"`
	FormatVersion    string `json:"format_version"`
	Namespace        string `json:"namespace"`
	PermissionPolicy string `json:"permission_policy"`
	Status           string `json:"status"`
}

type RowLevelPermissionTagConfigurationState struct {
	Status   string                                            `json:"status"`
	TagRules []RowLevelPermissionTagConfigurationTagRulesState `json:"tag_rules"`
}

type RowLevelPermissionTagConfigurationTagRulesState struct {
	ColumnName             string `json:"column_name"`
	MatchAllValue          string `json:"match_all_value"`
	TagKey                 string `json:"tag_key"`
	TagMultiValueDelimiter string `json:"tag_multi_value_delimiter"`
}
