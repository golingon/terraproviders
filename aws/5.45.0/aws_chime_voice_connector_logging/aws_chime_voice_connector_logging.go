// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_chime_voice_connector_logging

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_chime_voice_connector_logging.
type Resource struct {
	Name      string
	Args      Args
	state     *awsChimeVoiceConnectorLoggingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acvcl *Resource) Type() string {
	return "aws_chime_voice_connector_logging"
}

// LocalName returns the local name for [Resource].
func (acvcl *Resource) LocalName() string {
	return acvcl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acvcl *Resource) Configuration() interface{} {
	return acvcl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acvcl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acvcl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acvcl *Resource) Dependencies() terra.Dependencies {
	return acvcl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acvcl *Resource) LifecycleManagement() *terra.Lifecycle {
	return acvcl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acvcl *Resource) Attributes() awsChimeVoiceConnectorLoggingAttributes {
	return awsChimeVoiceConnectorLoggingAttributes{ref: terra.ReferenceResource(acvcl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acvcl *Resource) ImportState(state io.Reader) error {
	acvcl.state = &awsChimeVoiceConnectorLoggingState{}
	if err := json.NewDecoder(state).Decode(acvcl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acvcl.Type(), acvcl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acvcl *Resource) State() (*awsChimeVoiceConnectorLoggingState, bool) {
	return acvcl.state, acvcl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acvcl *Resource) StateMust() *awsChimeVoiceConnectorLoggingState {
	if acvcl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acvcl.Type(), acvcl.LocalName()))
	}
	return acvcl.state
}

// Args contains the configurations for aws_chime_voice_connector_logging.
type Args struct {
	// EnableMediaMetricLogs: bool, optional
	EnableMediaMetricLogs terra.BoolValue `hcl:"enable_media_metric_logs,attr"`
	// EnableSipLogs: bool, optional
	EnableSipLogs terra.BoolValue `hcl:"enable_sip_logs,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VoiceConnectorId: string, required
	VoiceConnectorId terra.StringValue `hcl:"voice_connector_id,attr" validate:"required"`
}

type awsChimeVoiceConnectorLoggingAttributes struct {
	ref terra.Reference
}

// EnableMediaMetricLogs returns a reference to field enable_media_metric_logs of aws_chime_voice_connector_logging.
func (acvcl awsChimeVoiceConnectorLoggingAttributes) EnableMediaMetricLogs() terra.BoolValue {
	return terra.ReferenceAsBool(acvcl.ref.Append("enable_media_metric_logs"))
}

// EnableSipLogs returns a reference to field enable_sip_logs of aws_chime_voice_connector_logging.
func (acvcl awsChimeVoiceConnectorLoggingAttributes) EnableSipLogs() terra.BoolValue {
	return terra.ReferenceAsBool(acvcl.ref.Append("enable_sip_logs"))
}

// Id returns a reference to field id of aws_chime_voice_connector_logging.
func (acvcl awsChimeVoiceConnectorLoggingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acvcl.ref.Append("id"))
}

// VoiceConnectorId returns a reference to field voice_connector_id of aws_chime_voice_connector_logging.
func (acvcl awsChimeVoiceConnectorLoggingAttributes) VoiceConnectorId() terra.StringValue {
	return terra.ReferenceAsString(acvcl.ref.Append("voice_connector_id"))
}

type awsChimeVoiceConnectorLoggingState struct {
	EnableMediaMetricLogs bool   `json:"enable_media_metric_logs"`
	EnableSipLogs         bool   `json:"enable_sip_logs"`
	Id                    string `json:"id"`
	VoiceConnectorId      string `json:"voice_connector_id"`
}
