// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_tag_option

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_servicecatalog_tag_option.
type Resource struct {
	Name      string
	Args      Args
	state     *awsServicecatalogTagOptionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asto *Resource) Type() string {
	return "aws_servicecatalog_tag_option"
}

// LocalName returns the local name for [Resource].
func (asto *Resource) LocalName() string {
	return asto.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asto *Resource) Configuration() interface{} {
	return asto.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asto *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asto)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asto *Resource) Dependencies() terra.Dependencies {
	return asto.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asto *Resource) LifecycleManagement() *terra.Lifecycle {
	return asto.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asto *Resource) Attributes() awsServicecatalogTagOptionAttributes {
	return awsServicecatalogTagOptionAttributes{ref: terra.ReferenceResource(asto)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asto *Resource) ImportState(state io.Reader) error {
	asto.state = &awsServicecatalogTagOptionState{}
	if err := json.NewDecoder(state).Decode(asto.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asto.Type(), asto.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asto *Resource) State() (*awsServicecatalogTagOptionState, bool) {
	return asto.state, asto.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asto *Resource) StateMust() *awsServicecatalogTagOptionState {
	if asto.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asto.Type(), asto.LocalName()))
	}
	return asto.state
}

// Args contains the configurations for aws_servicecatalog_tag_option.
type Args struct {
	// Active: bool, optional
	Active terra.BoolValue `hcl:"active,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsServicecatalogTagOptionAttributes struct {
	ref terra.Reference
}

// Active returns a reference to field active of aws_servicecatalog_tag_option.
func (asto awsServicecatalogTagOptionAttributes) Active() terra.BoolValue {
	return terra.ReferenceAsBool(asto.ref.Append("active"))
}

// Id returns a reference to field id of aws_servicecatalog_tag_option.
func (asto awsServicecatalogTagOptionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asto.ref.Append("id"))
}

// Key returns a reference to field key of aws_servicecatalog_tag_option.
func (asto awsServicecatalogTagOptionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(asto.ref.Append("key"))
}

// Owner returns a reference to field owner of aws_servicecatalog_tag_option.
func (asto awsServicecatalogTagOptionAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(asto.ref.Append("owner"))
}

// Value returns a reference to field value of aws_servicecatalog_tag_option.
func (asto awsServicecatalogTagOptionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(asto.ref.Append("value"))
}

func (asto awsServicecatalogTagOptionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asto.ref.Append("timeouts"))
}

type awsServicecatalogTagOptionState struct {
	Active   bool           `json:"active"`
	Id       string         `json:"id"`
	Key      string         `json:"key"`
	Owner    string         `json:"owner"`
	Value    string         `json:"value"`
	Timeouts *TimeoutsState `json:"timeouts"`
}
