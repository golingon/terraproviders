// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dms_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dms_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDmsCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adc *Resource) Type() string {
	return "aws_dms_certificate"
}

// LocalName returns the local name for [Resource].
func (adc *Resource) LocalName() string {
	return adc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adc *Resource) Configuration() interface{} {
	return adc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adc *Resource) Dependencies() terra.Dependencies {
	return adc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adc *Resource) LifecycleManagement() *terra.Lifecycle {
	return adc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adc *Resource) Attributes() awsDmsCertificateAttributes {
	return awsDmsCertificateAttributes{ref: terra.ReferenceResource(adc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adc *Resource) ImportState(state io.Reader) error {
	adc.state = &awsDmsCertificateState{}
	if err := json.NewDecoder(state).Decode(adc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adc.Type(), adc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adc *Resource) State() (*awsDmsCertificateState, bool) {
	return adc.state, adc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adc *Resource) StateMust() *awsDmsCertificateState {
	if adc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adc.Type(), adc.LocalName()))
	}
	return adc.state
}

// Args contains the configurations for aws_dms_certificate.
type Args struct {
	// CertificateId: string, required
	CertificateId terra.StringValue `hcl:"certificate_id,attr" validate:"required"`
	// CertificatePem: string, optional
	CertificatePem terra.StringValue `hcl:"certificate_pem,attr"`
	// CertificateWallet: string, optional
	CertificateWallet terra.StringValue `hcl:"certificate_wallet,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsDmsCertificateAttributes struct {
	ref terra.Reference
}

// CertificateArn returns a reference to field certificate_arn of aws_dms_certificate.
func (adc awsDmsCertificateAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("certificate_arn"))
}

// CertificateId returns a reference to field certificate_id of aws_dms_certificate.
func (adc awsDmsCertificateAttributes) CertificateId() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("certificate_id"))
}

// CertificatePem returns a reference to field certificate_pem of aws_dms_certificate.
func (adc awsDmsCertificateAttributes) CertificatePem() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("certificate_pem"))
}

// CertificateWallet returns a reference to field certificate_wallet of aws_dms_certificate.
func (adc awsDmsCertificateAttributes) CertificateWallet() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("certificate_wallet"))
}

// Id returns a reference to field id of aws_dms_certificate.
func (adc awsDmsCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_dms_certificate.
func (adc awsDmsCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_dms_certificate.
func (adc awsDmsCertificateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adc.ref.Append("tags_all"))
}

type awsDmsCertificateState struct {
	CertificateArn    string            `json:"certificate_arn"`
	CertificateId     string            `json:"certificate_id"`
	CertificatePem    string            `json:"certificate_pem"`
	CertificateWallet string            `json:"certificate_wallet"`
	Id                string            `json:"id"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
}
