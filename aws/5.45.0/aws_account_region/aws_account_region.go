// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_account_region

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_account_region.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAccountRegionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aar *Resource) Type() string {
	return "aws_account_region"
}

// LocalName returns the local name for [Resource].
func (aar *Resource) LocalName() string {
	return aar.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aar *Resource) Configuration() interface{} {
	return aar.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aar *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aar)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aar *Resource) Dependencies() terra.Dependencies {
	return aar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aar *Resource) LifecycleManagement() *terra.Lifecycle {
	return aar.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aar *Resource) Attributes() awsAccountRegionAttributes {
	return awsAccountRegionAttributes{ref: terra.ReferenceResource(aar)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aar *Resource) ImportState(state io.Reader) error {
	aar.state = &awsAccountRegionState{}
	if err := json.NewDecoder(state).Decode(aar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aar.Type(), aar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aar *Resource) State() (*awsAccountRegionState, bool) {
	return aar.state, aar.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aar *Resource) StateMust() *awsAccountRegionState {
	if aar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aar.Type(), aar.LocalName()))
	}
	return aar.state
}

// Args contains the configurations for aws_account_region.
type Args struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RegionName: string, required
	RegionName terra.StringValue `hcl:"region_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsAccountRegionAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_account_region.
func (aar awsAccountRegionAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("account_id"))
}

// Enabled returns a reference to field enabled of aws_account_region.
func (aar awsAccountRegionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aar.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_account_region.
func (aar awsAccountRegionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("id"))
}

// OptStatus returns a reference to field opt_status of aws_account_region.
func (aar awsAccountRegionAttributes) OptStatus() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("opt_status"))
}

// RegionName returns a reference to field region_name of aws_account_region.
func (aar awsAccountRegionAttributes) RegionName() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("region_name"))
}

func (aar awsAccountRegionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aar.ref.Append("timeouts"))
}

type awsAccountRegionState struct {
	AccountId  string         `json:"account_id"`
	Enabled    bool           `json:"enabled"`
	Id         string         `json:"id"`
	OptStatus  string         `json:"opt_status"`
	RegionName string         `json:"region_name"`
	Timeouts   *TimeoutsState `json:"timeouts"`
}
