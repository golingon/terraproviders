// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_oam_sink_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_oam_sink_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsOamSinkPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aosp *Resource) Type() string {
	return "aws_oam_sink_policy"
}

// LocalName returns the local name for [Resource].
func (aosp *Resource) LocalName() string {
	return aosp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aosp *Resource) Configuration() interface{} {
	return aosp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aosp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aosp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aosp *Resource) Dependencies() terra.Dependencies {
	return aosp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aosp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aosp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aosp *Resource) Attributes() awsOamSinkPolicyAttributes {
	return awsOamSinkPolicyAttributes{ref: terra.ReferenceResource(aosp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aosp *Resource) ImportState(state io.Reader) error {
	aosp.state = &awsOamSinkPolicyState{}
	if err := json.NewDecoder(state).Decode(aosp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aosp.Type(), aosp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aosp *Resource) State() (*awsOamSinkPolicyState, bool) {
	return aosp.state, aosp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aosp *Resource) StateMust() *awsOamSinkPolicyState {
	if aosp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aosp.Type(), aosp.LocalName()))
	}
	return aosp.state
}

// Args contains the configurations for aws_oam_sink_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// SinkIdentifier: string, required
	SinkIdentifier terra.StringValue `hcl:"sink_identifier,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsOamSinkPolicyAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_oam_sink_policy.
func (aosp awsOamSinkPolicyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aosp.ref.Append("arn"))
}

// Id returns a reference to field id of aws_oam_sink_policy.
func (aosp awsOamSinkPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aosp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_oam_sink_policy.
func (aosp awsOamSinkPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(aosp.ref.Append("policy"))
}

// SinkId returns a reference to field sink_id of aws_oam_sink_policy.
func (aosp awsOamSinkPolicyAttributes) SinkId() terra.StringValue {
	return terra.ReferenceAsString(aosp.ref.Append("sink_id"))
}

// SinkIdentifier returns a reference to field sink_identifier of aws_oam_sink_policy.
func (aosp awsOamSinkPolicyAttributes) SinkIdentifier() terra.StringValue {
	return terra.ReferenceAsString(aosp.ref.Append("sink_identifier"))
}

func (aosp awsOamSinkPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aosp.ref.Append("timeouts"))
}

type awsOamSinkPolicyState struct {
	Arn            string         `json:"arn"`
	Id             string         `json:"id"`
	Policy         string         `json:"policy"`
	SinkId         string         `json:"sink_id"`
	SinkIdentifier string         `json:"sink_identifier"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
