// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkmanager_link_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_networkmanager_link_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkmanagerLinkAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anla *Resource) Type() string {
	return "aws_networkmanager_link_association"
}

// LocalName returns the local name for [Resource].
func (anla *Resource) LocalName() string {
	return anla.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anla *Resource) Configuration() interface{} {
	return anla.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anla *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anla)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anla *Resource) Dependencies() terra.Dependencies {
	return anla.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anla *Resource) LifecycleManagement() *terra.Lifecycle {
	return anla.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anla *Resource) Attributes() awsNetworkmanagerLinkAssociationAttributes {
	return awsNetworkmanagerLinkAssociationAttributes{ref: terra.ReferenceResource(anla)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anla *Resource) ImportState(state io.Reader) error {
	anla.state = &awsNetworkmanagerLinkAssociationState{}
	if err := json.NewDecoder(state).Decode(anla.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anla.Type(), anla.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anla *Resource) State() (*awsNetworkmanagerLinkAssociationState, bool) {
	return anla.state, anla.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anla *Resource) StateMust() *awsNetworkmanagerLinkAssociationState {
	if anla.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anla.Type(), anla.LocalName()))
	}
	return anla.state
}

// Args contains the configurations for aws_networkmanager_link_association.
type Args struct {
	// DeviceId: string, required
	DeviceId terra.StringValue `hcl:"device_id,attr" validate:"required"`
	// GlobalNetworkId: string, required
	GlobalNetworkId terra.StringValue `hcl:"global_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkId: string, required
	LinkId terra.StringValue `hcl:"link_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsNetworkmanagerLinkAssociationAttributes struct {
	ref terra.Reference
}

// DeviceId returns a reference to field device_id of aws_networkmanager_link_association.
func (anla awsNetworkmanagerLinkAssociationAttributes) DeviceId() terra.StringValue {
	return terra.ReferenceAsString(anla.ref.Append("device_id"))
}

// GlobalNetworkId returns a reference to field global_network_id of aws_networkmanager_link_association.
func (anla awsNetworkmanagerLinkAssociationAttributes) GlobalNetworkId() terra.StringValue {
	return terra.ReferenceAsString(anla.ref.Append("global_network_id"))
}

// Id returns a reference to field id of aws_networkmanager_link_association.
func (anla awsNetworkmanagerLinkAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anla.ref.Append("id"))
}

// LinkId returns a reference to field link_id of aws_networkmanager_link_association.
func (anla awsNetworkmanagerLinkAssociationAttributes) LinkId() terra.StringValue {
	return terra.ReferenceAsString(anla.ref.Append("link_id"))
}

func (anla awsNetworkmanagerLinkAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anla.ref.Append("timeouts"))
}

type awsNetworkmanagerLinkAssociationState struct {
	DeviceId        string         `json:"device_id"`
	GlobalNetworkId string         `json:"global_network_id"`
	Id              string         `json:"id"`
	LinkId          string         `json:"link_id"`
	Timeouts        *TimeoutsState `json:"timeouts"`
}
