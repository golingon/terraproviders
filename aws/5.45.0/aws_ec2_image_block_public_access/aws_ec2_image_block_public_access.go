// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_image_block_public_access

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_image_block_public_access.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2ImageBlockPublicAccessState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeibpa *Resource) Type() string {
	return "aws_ec2_image_block_public_access"
}

// LocalName returns the local name for [Resource].
func (aeibpa *Resource) LocalName() string {
	return aeibpa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeibpa *Resource) Configuration() interface{} {
	return aeibpa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeibpa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeibpa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeibpa *Resource) Dependencies() terra.Dependencies {
	return aeibpa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeibpa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeibpa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeibpa *Resource) Attributes() awsEc2ImageBlockPublicAccessAttributes {
	return awsEc2ImageBlockPublicAccessAttributes{ref: terra.ReferenceResource(aeibpa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeibpa *Resource) ImportState(state io.Reader) error {
	aeibpa.state = &awsEc2ImageBlockPublicAccessState{}
	if err := json.NewDecoder(state).Decode(aeibpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeibpa.Type(), aeibpa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeibpa *Resource) State() (*awsEc2ImageBlockPublicAccessState, bool) {
	return aeibpa.state, aeibpa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeibpa *Resource) StateMust() *awsEc2ImageBlockPublicAccessState {
	if aeibpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeibpa.Type(), aeibpa.LocalName()))
	}
	return aeibpa.state
}

// Args contains the configurations for aws_ec2_image_block_public_access.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// State: string, required
	State terra.StringValue `hcl:"state,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEc2ImageBlockPublicAccessAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ec2_image_block_public_access.
func (aeibpa awsEc2ImageBlockPublicAccessAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeibpa.ref.Append("id"))
}

// State returns a reference to field state of aws_ec2_image_block_public_access.
func (aeibpa awsEc2ImageBlockPublicAccessAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(aeibpa.ref.Append("state"))
}

func (aeibpa awsEc2ImageBlockPublicAccessAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aeibpa.ref.Append("timeouts"))
}

type awsEc2ImageBlockPublicAccessState struct {
	Id       string         `json:"id"`
	State    string         `json:"state"`
	Timeouts *TimeoutsState `json:"timeouts"`
}
