// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cognito_identity_pool_roles_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cognito_identity_pool_roles_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCognitoIdentityPoolRolesAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acipra *Resource) Type() string {
	return "aws_cognito_identity_pool_roles_attachment"
}

// LocalName returns the local name for [Resource].
func (acipra *Resource) LocalName() string {
	return acipra.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acipra *Resource) Configuration() interface{} {
	return acipra.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acipra *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acipra)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acipra *Resource) Dependencies() terra.Dependencies {
	return acipra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acipra *Resource) LifecycleManagement() *terra.Lifecycle {
	return acipra.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acipra *Resource) Attributes() awsCognitoIdentityPoolRolesAttachmentAttributes {
	return awsCognitoIdentityPoolRolesAttachmentAttributes{ref: terra.ReferenceResource(acipra)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acipra *Resource) ImportState(state io.Reader) error {
	acipra.state = &awsCognitoIdentityPoolRolesAttachmentState{}
	if err := json.NewDecoder(state).Decode(acipra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acipra.Type(), acipra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acipra *Resource) State() (*awsCognitoIdentityPoolRolesAttachmentState, bool) {
	return acipra.state, acipra.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acipra *Resource) StateMust() *awsCognitoIdentityPoolRolesAttachmentState {
	if acipra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acipra.Type(), acipra.LocalName()))
	}
	return acipra.state
}

// Args contains the configurations for aws_cognito_identity_pool_roles_attachment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityPoolId: string, required
	IdentityPoolId terra.StringValue `hcl:"identity_pool_id,attr" validate:"required"`
	// Roles: map of string, required
	Roles terra.MapValue[terra.StringValue] `hcl:"roles,attr" validate:"required"`
	// RoleMapping: min=0
	RoleMapping []RoleMapping `hcl:"role_mapping,block" validate:"min=0"`
}

type awsCognitoIdentityPoolRolesAttachmentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_cognito_identity_pool_roles_attachment.
func (acipra awsCognitoIdentityPoolRolesAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acipra.ref.Append("id"))
}

// IdentityPoolId returns a reference to field identity_pool_id of aws_cognito_identity_pool_roles_attachment.
func (acipra awsCognitoIdentityPoolRolesAttachmentAttributes) IdentityPoolId() terra.StringValue {
	return terra.ReferenceAsString(acipra.ref.Append("identity_pool_id"))
}

// Roles returns a reference to field roles of aws_cognito_identity_pool_roles_attachment.
func (acipra awsCognitoIdentityPoolRolesAttachmentAttributes) Roles() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acipra.ref.Append("roles"))
}

func (acipra awsCognitoIdentityPoolRolesAttachmentAttributes) RoleMapping() terra.SetValue[RoleMappingAttributes] {
	return terra.ReferenceAsSet[RoleMappingAttributes](acipra.ref.Append("role_mapping"))
}

type awsCognitoIdentityPoolRolesAttachmentState struct {
	Id             string             `json:"id"`
	IdentityPoolId string             `json:"identity_pool_id"`
	Roles          map[string]string  `json:"roles"`
	RoleMapping    []RoleMappingState `json:"role_mapping"`
}
