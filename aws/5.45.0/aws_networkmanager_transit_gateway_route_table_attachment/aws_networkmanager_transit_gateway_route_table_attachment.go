// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkmanager_transit_gateway_route_table_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_networkmanager_transit_gateway_route_table_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkmanagerTransitGatewayRouteTableAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (antgrta *Resource) Type() string {
	return "aws_networkmanager_transit_gateway_route_table_attachment"
}

// LocalName returns the local name for [Resource].
func (antgrta *Resource) LocalName() string {
	return antgrta.Name
}

// Configuration returns the configuration (args) for [Resource].
func (antgrta *Resource) Configuration() interface{} {
	return antgrta.Args
}

// DependOn is used for other resources to depend on [Resource].
func (antgrta *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(antgrta)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (antgrta *Resource) Dependencies() terra.Dependencies {
	return antgrta.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (antgrta *Resource) LifecycleManagement() *terra.Lifecycle {
	return antgrta.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (antgrta *Resource) Attributes() awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes {
	return awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes{ref: terra.ReferenceResource(antgrta)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (antgrta *Resource) ImportState(state io.Reader) error {
	antgrta.state = &awsNetworkmanagerTransitGatewayRouteTableAttachmentState{}
	if err := json.NewDecoder(state).Decode(antgrta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", antgrta.Type(), antgrta.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (antgrta *Resource) State() (*awsNetworkmanagerTransitGatewayRouteTableAttachmentState, bool) {
	return antgrta.state, antgrta.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (antgrta *Resource) StateMust() *awsNetworkmanagerTransitGatewayRouteTableAttachmentState {
	if antgrta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", antgrta.Type(), antgrta.LocalName()))
	}
	return antgrta.state
}

// Args contains the configurations for aws_networkmanager_transit_gateway_route_table_attachment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PeeringId: string, required
	PeeringId terra.StringValue `hcl:"peering_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitGatewayRouteTableArn: string, required
	TransitGatewayRouteTableArn terra.StringValue `hcl:"transit_gateway_route_table_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(antgrta.ref.Append("arn"))
}

// AttachmentPolicyRuleNumber returns a reference to field attachment_policy_rule_number of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) AttachmentPolicyRuleNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(antgrta.ref.Append("attachment_policy_rule_number"))
}

// AttachmentType returns a reference to field attachment_type of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) AttachmentType() terra.StringValue {
	return terra.ReferenceAsString(antgrta.ref.Append("attachment_type"))
}

// CoreNetworkArn returns a reference to field core_network_arn of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) CoreNetworkArn() terra.StringValue {
	return terra.ReferenceAsString(antgrta.ref.Append("core_network_arn"))
}

// CoreNetworkId returns a reference to field core_network_id of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) CoreNetworkId() terra.StringValue {
	return terra.ReferenceAsString(antgrta.ref.Append("core_network_id"))
}

// EdgeLocation returns a reference to field edge_location of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) EdgeLocation() terra.StringValue {
	return terra.ReferenceAsString(antgrta.ref.Append("edge_location"))
}

// Id returns a reference to field id of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(antgrta.ref.Append("id"))
}

// OwnerAccountId returns a reference to field owner_account_id of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) OwnerAccountId() terra.StringValue {
	return terra.ReferenceAsString(antgrta.ref.Append("owner_account_id"))
}

// PeeringId returns a reference to field peering_id of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) PeeringId() terra.StringValue {
	return terra.ReferenceAsString(antgrta.ref.Append("peering_id"))
}

// ResourceArn returns a reference to field resource_arn of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(antgrta.ref.Append("resource_arn"))
}

// SegmentName returns a reference to field segment_name of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) SegmentName() terra.StringValue {
	return terra.ReferenceAsString(antgrta.ref.Append("segment_name"))
}

// State returns a reference to field state of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(antgrta.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](antgrta.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](antgrta.ref.Append("tags_all"))
}

// TransitGatewayRouteTableArn returns a reference to field transit_gateway_route_table_arn of aws_networkmanager_transit_gateway_route_table_attachment.
func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) TransitGatewayRouteTableArn() terra.StringValue {
	return terra.ReferenceAsString(antgrta.ref.Append("transit_gateway_route_table_arn"))
}

func (antgrta awsNetworkmanagerTransitGatewayRouteTableAttachmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](antgrta.ref.Append("timeouts"))
}

type awsNetworkmanagerTransitGatewayRouteTableAttachmentState struct {
	Arn                         string            `json:"arn"`
	AttachmentPolicyRuleNumber  float64           `json:"attachment_policy_rule_number"`
	AttachmentType              string            `json:"attachment_type"`
	CoreNetworkArn              string            `json:"core_network_arn"`
	CoreNetworkId               string            `json:"core_network_id"`
	EdgeLocation                string            `json:"edge_location"`
	Id                          string            `json:"id"`
	OwnerAccountId              string            `json:"owner_account_id"`
	PeeringId                   string            `json:"peering_id"`
	ResourceArn                 string            `json:"resource_arn"`
	SegmentName                 string            `json:"segment_name"`
	State                       string            `json:"state"`
	Tags                        map[string]string `json:"tags"`
	TagsAll                     map[string]string `json:"tags_all"`
	TransitGatewayRouteTableArn string            `json:"transit_gateway_route_table_arn"`
	Timeouts                    *TimeoutsState    `json:"timeouts"`
}
