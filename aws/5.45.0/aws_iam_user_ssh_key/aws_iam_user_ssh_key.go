// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_user_ssh_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iam_user_ssh_key.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIamUserSshKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aiusk *Resource) Type() string {
	return "aws_iam_user_ssh_key"
}

// LocalName returns the local name for [Resource].
func (aiusk *Resource) LocalName() string {
	return aiusk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aiusk *Resource) Configuration() interface{} {
	return aiusk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aiusk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aiusk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aiusk *Resource) Dependencies() terra.Dependencies {
	return aiusk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aiusk *Resource) LifecycleManagement() *terra.Lifecycle {
	return aiusk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aiusk *Resource) Attributes() awsIamUserSshKeyAttributes {
	return awsIamUserSshKeyAttributes{ref: terra.ReferenceResource(aiusk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aiusk *Resource) ImportState(state io.Reader) error {
	aiusk.state = &awsIamUserSshKeyState{}
	if err := json.NewDecoder(state).Decode(aiusk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiusk.Type(), aiusk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aiusk *Resource) State() (*awsIamUserSshKeyState, bool) {
	return aiusk.state, aiusk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aiusk *Resource) StateMust() *awsIamUserSshKeyState {
	if aiusk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiusk.Type(), aiusk.LocalName()))
	}
	return aiusk.state
}

// Args contains the configurations for aws_iam_user_ssh_key.
type Args struct {
	// Encoding: string, required
	Encoding terra.StringValue `hcl:"encoding,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PublicKey: string, required
	PublicKey terra.StringValue `hcl:"public_key,attr" validate:"required"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type awsIamUserSshKeyAttributes struct {
	ref terra.Reference
}

// Encoding returns a reference to field encoding of aws_iam_user_ssh_key.
func (aiusk awsIamUserSshKeyAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(aiusk.ref.Append("encoding"))
}

// Fingerprint returns a reference to field fingerprint of aws_iam_user_ssh_key.
func (aiusk awsIamUserSshKeyAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(aiusk.ref.Append("fingerprint"))
}

// Id returns a reference to field id of aws_iam_user_ssh_key.
func (aiusk awsIamUserSshKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiusk.ref.Append("id"))
}

// PublicKey returns a reference to field public_key of aws_iam_user_ssh_key.
func (aiusk awsIamUserSshKeyAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceAsString(aiusk.ref.Append("public_key"))
}

// SshPublicKeyId returns a reference to field ssh_public_key_id of aws_iam_user_ssh_key.
func (aiusk awsIamUserSshKeyAttributes) SshPublicKeyId() terra.StringValue {
	return terra.ReferenceAsString(aiusk.ref.Append("ssh_public_key_id"))
}

// Status returns a reference to field status of aws_iam_user_ssh_key.
func (aiusk awsIamUserSshKeyAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aiusk.ref.Append("status"))
}

// Username returns a reference to field username of aws_iam_user_ssh_key.
func (aiusk awsIamUserSshKeyAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(aiusk.ref.Append("username"))
}

type awsIamUserSshKeyState struct {
	Encoding       string `json:"encoding"`
	Fingerprint    string `json:"fingerprint"`
	Id             string `json:"id"`
	PublicKey      string `json:"public_key"`
	SshPublicKeyId string `json:"ssh_public_key_id"`
	Status         string `json:"status"`
	Username       string `json:"username"`
}
