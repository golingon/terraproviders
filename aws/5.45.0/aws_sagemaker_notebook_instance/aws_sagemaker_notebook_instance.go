// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_notebook_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sagemaker_notebook_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSagemakerNotebookInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asni *Resource) Type() string {
	return "aws_sagemaker_notebook_instance"
}

// LocalName returns the local name for [Resource].
func (asni *Resource) LocalName() string {
	return asni.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asni *Resource) Configuration() interface{} {
	return asni.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asni *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asni)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asni *Resource) Dependencies() terra.Dependencies {
	return asni.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asni *Resource) LifecycleManagement() *terra.Lifecycle {
	return asni.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asni *Resource) Attributes() awsSagemakerNotebookInstanceAttributes {
	return awsSagemakerNotebookInstanceAttributes{ref: terra.ReferenceResource(asni)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asni *Resource) ImportState(state io.Reader) error {
	asni.state = &awsSagemakerNotebookInstanceState{}
	if err := json.NewDecoder(state).Decode(asni.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asni.Type(), asni.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asni *Resource) State() (*awsSagemakerNotebookInstanceState, bool) {
	return asni.state, asni.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asni *Resource) StateMust() *awsSagemakerNotebookInstanceState {
	if asni.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asni.Type(), asni.LocalName()))
	}
	return asni.state
}

// Args contains the configurations for aws_sagemaker_notebook_instance.
type Args struct {
	// AcceleratorTypes: set of string, optional
	AcceleratorTypes terra.SetValue[terra.StringValue] `hcl:"accelerator_types,attr"`
	// AdditionalCodeRepositories: set of string, optional
	AdditionalCodeRepositories terra.SetValue[terra.StringValue] `hcl:"additional_code_repositories,attr"`
	// DefaultCodeRepository: string, optional
	DefaultCodeRepository terra.StringValue `hcl:"default_code_repository,attr"`
	// DirectInternetAccess: string, optional
	DirectInternetAccess terra.StringValue `hcl:"direct_internet_access,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// LifecycleConfigName: string, optional
	LifecycleConfigName terra.StringValue `hcl:"lifecycle_config_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PlatformIdentifier: string, optional
	PlatformIdentifier terra.StringValue `hcl:"platform_identifier,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// RootAccess: string, optional
	RootAccess terra.StringValue `hcl:"root_access,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VolumeSize: number, optional
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// InstanceMetadataServiceConfiguration: optional
	InstanceMetadataServiceConfiguration *InstanceMetadataServiceConfiguration `hcl:"instance_metadata_service_configuration,block"`
}

type awsSagemakerNotebookInstanceAttributes struct {
	ref terra.Reference
}

// AcceleratorTypes returns a reference to field accelerator_types of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) AcceleratorTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asni.ref.Append("accelerator_types"))
}

// AdditionalCodeRepositories returns a reference to field additional_code_repositories of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) AdditionalCodeRepositories() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asni.ref.Append("additional_code_repositories"))
}

// Arn returns a reference to field arn of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("arn"))
}

// DefaultCodeRepository returns a reference to field default_code_repository of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) DefaultCodeRepository() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("default_code_repository"))
}

// DirectInternetAccess returns a reference to field direct_internet_access of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) DirectInternetAccess() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("direct_internet_access"))
}

// Id returns a reference to field id of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("id"))
}

// InstanceType returns a reference to field instance_type of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("instance_type"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("kms_key_id"))
}

// LifecycleConfigName returns a reference to field lifecycle_config_name of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) LifecycleConfigName() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("lifecycle_config_name"))
}

// Name returns a reference to field name of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("name"))
}

// NetworkInterfaceId returns a reference to field network_interface_id of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("network_interface_id"))
}

// PlatformIdentifier returns a reference to field platform_identifier of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) PlatformIdentifier() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("platform_identifier"))
}

// RoleArn returns a reference to field role_arn of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("role_arn"))
}

// RootAccess returns a reference to field root_access of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) RootAccess() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("root_access"))
}

// SecurityGroups returns a reference to field security_groups of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asni.ref.Append("security_groups"))
}

// SubnetId returns a reference to field subnet_id of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asni.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asni.ref.Append("tags_all"))
}

// Url returns a reference to field url of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(asni.ref.Append("url"))
}

// VolumeSize returns a reference to field volume_size of aws_sagemaker_notebook_instance.
func (asni awsSagemakerNotebookInstanceAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(asni.ref.Append("volume_size"))
}

func (asni awsSagemakerNotebookInstanceAttributes) InstanceMetadataServiceConfiguration() terra.ListValue[InstanceMetadataServiceConfigurationAttributes] {
	return terra.ReferenceAsList[InstanceMetadataServiceConfigurationAttributes](asni.ref.Append("instance_metadata_service_configuration"))
}

type awsSagemakerNotebookInstanceState struct {
	AcceleratorTypes                     []string                                    `json:"accelerator_types"`
	AdditionalCodeRepositories           []string                                    `json:"additional_code_repositories"`
	Arn                                  string                                      `json:"arn"`
	DefaultCodeRepository                string                                      `json:"default_code_repository"`
	DirectInternetAccess                 string                                      `json:"direct_internet_access"`
	Id                                   string                                      `json:"id"`
	InstanceType                         string                                      `json:"instance_type"`
	KmsKeyId                             string                                      `json:"kms_key_id"`
	LifecycleConfigName                  string                                      `json:"lifecycle_config_name"`
	Name                                 string                                      `json:"name"`
	NetworkInterfaceId                   string                                      `json:"network_interface_id"`
	PlatformIdentifier                   string                                      `json:"platform_identifier"`
	RoleArn                              string                                      `json:"role_arn"`
	RootAccess                           string                                      `json:"root_access"`
	SecurityGroups                       []string                                    `json:"security_groups"`
	SubnetId                             string                                      `json:"subnet_id"`
	Tags                                 map[string]string                           `json:"tags"`
	TagsAll                              map[string]string                           `json:"tags_all"`
	Url                                  string                                      `json:"url"`
	VolumeSize                           float64                                     `json:"volume_size"`
	InstanceMetadataServiceConfiguration []InstanceMetadataServiceConfigurationState `json:"instance_metadata_service_configuration"`
}
