// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssm_maintenance_window_task

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Targets struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type TaskInvocationParameters struct {
	// TaskInvocationParametersAutomationParameters: optional
	AutomationParameters *TaskInvocationParametersAutomationParameters `hcl:"automation_parameters,block"`
	// TaskInvocationParametersLambdaParameters: optional
	LambdaParameters *TaskInvocationParametersLambdaParameters `hcl:"lambda_parameters,block"`
	// TaskInvocationParametersRunCommandParameters: optional
	RunCommandParameters *TaskInvocationParametersRunCommandParameters `hcl:"run_command_parameters,block"`
	// TaskInvocationParametersStepFunctionsParameters: optional
	StepFunctionsParameters *TaskInvocationParametersStepFunctionsParameters `hcl:"step_functions_parameters,block"`
}

type TaskInvocationParametersAutomationParameters struct {
	// DocumentVersion: string, optional
	DocumentVersion terra.StringValue `hcl:"document_version,attr"`
	// TaskInvocationParametersAutomationParametersParameter: min=0
	Parameter []TaskInvocationParametersAutomationParametersParameter `hcl:"parameter,block" validate:"min=0"`
}

type TaskInvocationParametersAutomationParametersParameter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type TaskInvocationParametersLambdaParameters struct {
	// ClientContext: string, optional
	ClientContext terra.StringValue `hcl:"client_context,attr"`
	// Payload: string, optional
	Payload terra.StringValue `hcl:"payload,attr"`
	// Qualifier: string, optional
	Qualifier terra.StringValue `hcl:"qualifier,attr"`
}

type TaskInvocationParametersRunCommandParameters struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// DocumentHash: string, optional
	DocumentHash terra.StringValue `hcl:"document_hash,attr"`
	// DocumentHashType: string, optional
	DocumentHashType terra.StringValue `hcl:"document_hash_type,attr"`
	// DocumentVersion: string, optional
	DocumentVersion terra.StringValue `hcl:"document_version,attr"`
	// OutputS3Bucket: string, optional
	OutputS3Bucket terra.StringValue `hcl:"output_s3_bucket,attr"`
	// OutputS3KeyPrefix: string, optional
	OutputS3KeyPrefix terra.StringValue `hcl:"output_s3_key_prefix,attr"`
	// ServiceRoleArn: string, optional
	ServiceRoleArn terra.StringValue `hcl:"service_role_arn,attr"`
	// TimeoutSeconds: number, optional
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// TaskInvocationParametersRunCommandParametersCloudwatchConfig: optional
	CloudwatchConfig *TaskInvocationParametersRunCommandParametersCloudwatchConfig `hcl:"cloudwatch_config,block"`
	// TaskInvocationParametersRunCommandParametersNotificationConfig: optional
	NotificationConfig *TaskInvocationParametersRunCommandParametersNotificationConfig `hcl:"notification_config,block"`
	// TaskInvocationParametersRunCommandParametersParameter: min=0
	Parameter []TaskInvocationParametersRunCommandParametersParameter `hcl:"parameter,block" validate:"min=0"`
}

type TaskInvocationParametersRunCommandParametersCloudwatchConfig struct {
	// CloudwatchLogGroupName: string, optional
	CloudwatchLogGroupName terra.StringValue `hcl:"cloudwatch_log_group_name,attr"`
	// CloudwatchOutputEnabled: bool, optional
	CloudwatchOutputEnabled terra.BoolValue `hcl:"cloudwatch_output_enabled,attr"`
}

type TaskInvocationParametersRunCommandParametersNotificationConfig struct {
	// NotificationArn: string, optional
	NotificationArn terra.StringValue `hcl:"notification_arn,attr"`
	// NotificationEvents: list of string, optional
	NotificationEvents terra.ListValue[terra.StringValue] `hcl:"notification_events,attr"`
	// NotificationType: string, optional
	NotificationType terra.StringValue `hcl:"notification_type,attr"`
}

type TaskInvocationParametersRunCommandParametersParameter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type TaskInvocationParametersStepFunctionsParameters struct {
	// Input: string, optional
	Input terra.StringValue `hcl:"input,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type TargetsAttributes struct {
	ref terra.Reference
}

func (t TargetsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TargetsAttributes) InternalWithRef(ref terra.Reference) TargetsAttributes {
	return TargetsAttributes{ref: ref}
}

func (t TargetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TargetsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t TargetsAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("values"))
}

type TaskInvocationParametersAttributes struct {
	ref terra.Reference
}

func (tip TaskInvocationParametersAttributes) InternalRef() (terra.Reference, error) {
	return tip.ref, nil
}

func (tip TaskInvocationParametersAttributes) InternalWithRef(ref terra.Reference) TaskInvocationParametersAttributes {
	return TaskInvocationParametersAttributes{ref: ref}
}

func (tip TaskInvocationParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tip.ref.InternalTokens()
}

func (tip TaskInvocationParametersAttributes) AutomationParameters() terra.ListValue[TaskInvocationParametersAutomationParametersAttributes] {
	return terra.ReferenceAsList[TaskInvocationParametersAutomationParametersAttributes](tip.ref.Append("automation_parameters"))
}

func (tip TaskInvocationParametersAttributes) LambdaParameters() terra.ListValue[TaskInvocationParametersLambdaParametersAttributes] {
	return terra.ReferenceAsList[TaskInvocationParametersLambdaParametersAttributes](tip.ref.Append("lambda_parameters"))
}

func (tip TaskInvocationParametersAttributes) RunCommandParameters() terra.ListValue[TaskInvocationParametersRunCommandParametersAttributes] {
	return terra.ReferenceAsList[TaskInvocationParametersRunCommandParametersAttributes](tip.ref.Append("run_command_parameters"))
}

func (tip TaskInvocationParametersAttributes) StepFunctionsParameters() terra.ListValue[TaskInvocationParametersStepFunctionsParametersAttributes] {
	return terra.ReferenceAsList[TaskInvocationParametersStepFunctionsParametersAttributes](tip.ref.Append("step_functions_parameters"))
}

type TaskInvocationParametersAutomationParametersAttributes struct {
	ref terra.Reference
}

func (ap TaskInvocationParametersAutomationParametersAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap TaskInvocationParametersAutomationParametersAttributes) InternalWithRef(ref terra.Reference) TaskInvocationParametersAutomationParametersAttributes {
	return TaskInvocationParametersAutomationParametersAttributes{ref: ref}
}

func (ap TaskInvocationParametersAutomationParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap TaskInvocationParametersAutomationParametersAttributes) DocumentVersion() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("document_version"))
}

func (ap TaskInvocationParametersAutomationParametersAttributes) Parameter() terra.SetValue[TaskInvocationParametersAutomationParametersParameterAttributes] {
	return terra.ReferenceAsSet[TaskInvocationParametersAutomationParametersParameterAttributes](ap.ref.Append("parameter"))
}

type TaskInvocationParametersAutomationParametersParameterAttributes struct {
	ref terra.Reference
}

func (p TaskInvocationParametersAutomationParametersParameterAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p TaskInvocationParametersAutomationParametersParameterAttributes) InternalWithRef(ref terra.Reference) TaskInvocationParametersAutomationParametersParameterAttributes {
	return TaskInvocationParametersAutomationParametersParameterAttributes{ref: ref}
}

func (p TaskInvocationParametersAutomationParametersParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p TaskInvocationParametersAutomationParametersParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p TaskInvocationParametersAutomationParametersParameterAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("values"))
}

type TaskInvocationParametersLambdaParametersAttributes struct {
	ref terra.Reference
}

func (lp TaskInvocationParametersLambdaParametersAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp TaskInvocationParametersLambdaParametersAttributes) InternalWithRef(ref terra.Reference) TaskInvocationParametersLambdaParametersAttributes {
	return TaskInvocationParametersLambdaParametersAttributes{ref: ref}
}

func (lp TaskInvocationParametersLambdaParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp TaskInvocationParametersLambdaParametersAttributes) ClientContext() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("client_context"))
}

func (lp TaskInvocationParametersLambdaParametersAttributes) Payload() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("payload"))
}

func (lp TaskInvocationParametersLambdaParametersAttributes) Qualifier() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("qualifier"))
}

type TaskInvocationParametersRunCommandParametersAttributes struct {
	ref terra.Reference
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) InternalRef() (terra.Reference, error) {
	return rcp.ref, nil
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) InternalWithRef(ref terra.Reference) TaskInvocationParametersRunCommandParametersAttributes {
	return TaskInvocationParametersRunCommandParametersAttributes{ref: ref}
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rcp.ref.InternalTokens()
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("comment"))
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) DocumentHash() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("document_hash"))
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) DocumentHashType() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("document_hash_type"))
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) DocumentVersion() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("document_version"))
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) OutputS3Bucket() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("output_s3_bucket"))
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) OutputS3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("output_s3_key_prefix"))
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) ServiceRoleArn() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("service_role_arn"))
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rcp.ref.Append("timeout_seconds"))
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) CloudwatchConfig() terra.ListValue[TaskInvocationParametersRunCommandParametersCloudwatchConfigAttributes] {
	return terra.ReferenceAsList[TaskInvocationParametersRunCommandParametersCloudwatchConfigAttributes](rcp.ref.Append("cloudwatch_config"))
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) NotificationConfig() terra.ListValue[TaskInvocationParametersRunCommandParametersNotificationConfigAttributes] {
	return terra.ReferenceAsList[TaskInvocationParametersRunCommandParametersNotificationConfigAttributes](rcp.ref.Append("notification_config"))
}

func (rcp TaskInvocationParametersRunCommandParametersAttributes) Parameter() terra.SetValue[TaskInvocationParametersRunCommandParametersParameterAttributes] {
	return terra.ReferenceAsSet[TaskInvocationParametersRunCommandParametersParameterAttributes](rcp.ref.Append("parameter"))
}

type TaskInvocationParametersRunCommandParametersCloudwatchConfigAttributes struct {
	ref terra.Reference
}

func (cc TaskInvocationParametersRunCommandParametersCloudwatchConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc TaskInvocationParametersRunCommandParametersCloudwatchConfigAttributes) InternalWithRef(ref terra.Reference) TaskInvocationParametersRunCommandParametersCloudwatchConfigAttributes {
	return TaskInvocationParametersRunCommandParametersCloudwatchConfigAttributes{ref: ref}
}

func (cc TaskInvocationParametersRunCommandParametersCloudwatchConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc TaskInvocationParametersRunCommandParametersCloudwatchConfigAttributes) CloudwatchLogGroupName() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("cloudwatch_log_group_name"))
}

func (cc TaskInvocationParametersRunCommandParametersCloudwatchConfigAttributes) CloudwatchOutputEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("cloudwatch_output_enabled"))
}

type TaskInvocationParametersRunCommandParametersNotificationConfigAttributes struct {
	ref terra.Reference
}

func (nc TaskInvocationParametersRunCommandParametersNotificationConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc TaskInvocationParametersRunCommandParametersNotificationConfigAttributes) InternalWithRef(ref terra.Reference) TaskInvocationParametersRunCommandParametersNotificationConfigAttributes {
	return TaskInvocationParametersRunCommandParametersNotificationConfigAttributes{ref: ref}
}

func (nc TaskInvocationParametersRunCommandParametersNotificationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc TaskInvocationParametersRunCommandParametersNotificationConfigAttributes) NotificationArn() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("notification_arn"))
}

func (nc TaskInvocationParametersRunCommandParametersNotificationConfigAttributes) NotificationEvents() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("notification_events"))
}

func (nc TaskInvocationParametersRunCommandParametersNotificationConfigAttributes) NotificationType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("notification_type"))
}

type TaskInvocationParametersRunCommandParametersParameterAttributes struct {
	ref terra.Reference
}

func (p TaskInvocationParametersRunCommandParametersParameterAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p TaskInvocationParametersRunCommandParametersParameterAttributes) InternalWithRef(ref terra.Reference) TaskInvocationParametersRunCommandParametersParameterAttributes {
	return TaskInvocationParametersRunCommandParametersParameterAttributes{ref: ref}
}

func (p TaskInvocationParametersRunCommandParametersParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p TaskInvocationParametersRunCommandParametersParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p TaskInvocationParametersRunCommandParametersParameterAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("values"))
}

type TaskInvocationParametersStepFunctionsParametersAttributes struct {
	ref terra.Reference
}

func (sfp TaskInvocationParametersStepFunctionsParametersAttributes) InternalRef() (terra.Reference, error) {
	return sfp.ref, nil
}

func (sfp TaskInvocationParametersStepFunctionsParametersAttributes) InternalWithRef(ref terra.Reference) TaskInvocationParametersStepFunctionsParametersAttributes {
	return TaskInvocationParametersStepFunctionsParametersAttributes{ref: ref}
}

func (sfp TaskInvocationParametersStepFunctionsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sfp.ref.InternalTokens()
}

func (sfp TaskInvocationParametersStepFunctionsParametersAttributes) Input() terra.StringValue {
	return terra.ReferenceAsString(sfp.ref.Append("input"))
}

func (sfp TaskInvocationParametersStepFunctionsParametersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sfp.ref.Append("name"))
}

type TargetsState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type TaskInvocationParametersState struct {
	AutomationParameters    []TaskInvocationParametersAutomationParametersState    `json:"automation_parameters"`
	LambdaParameters        []TaskInvocationParametersLambdaParametersState        `json:"lambda_parameters"`
	RunCommandParameters    []TaskInvocationParametersRunCommandParametersState    `json:"run_command_parameters"`
	StepFunctionsParameters []TaskInvocationParametersStepFunctionsParametersState `json:"step_functions_parameters"`
}

type TaskInvocationParametersAutomationParametersState struct {
	DocumentVersion string                                                       `json:"document_version"`
	Parameter       []TaskInvocationParametersAutomationParametersParameterState `json:"parameter"`
}

type TaskInvocationParametersAutomationParametersParameterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type TaskInvocationParametersLambdaParametersState struct {
	ClientContext string `json:"client_context"`
	Payload       string `json:"payload"`
	Qualifier     string `json:"qualifier"`
}

type TaskInvocationParametersRunCommandParametersState struct {
	Comment            string                                                                `json:"comment"`
	DocumentHash       string                                                                `json:"document_hash"`
	DocumentHashType   string                                                                `json:"document_hash_type"`
	DocumentVersion    string                                                                `json:"document_version"`
	OutputS3Bucket     string                                                                `json:"output_s3_bucket"`
	OutputS3KeyPrefix  string                                                                `json:"output_s3_key_prefix"`
	ServiceRoleArn     string                                                                `json:"service_role_arn"`
	TimeoutSeconds     float64                                                               `json:"timeout_seconds"`
	CloudwatchConfig   []TaskInvocationParametersRunCommandParametersCloudwatchConfigState   `json:"cloudwatch_config"`
	NotificationConfig []TaskInvocationParametersRunCommandParametersNotificationConfigState `json:"notification_config"`
	Parameter          []TaskInvocationParametersRunCommandParametersParameterState          `json:"parameter"`
}

type TaskInvocationParametersRunCommandParametersCloudwatchConfigState struct {
	CloudwatchLogGroupName  string `json:"cloudwatch_log_group_name"`
	CloudwatchOutputEnabled bool   `json:"cloudwatch_output_enabled"`
}

type TaskInvocationParametersRunCommandParametersNotificationConfigState struct {
	NotificationArn    string   `json:"notification_arn"`
	NotificationEvents []string `json:"notification_events"`
	NotificationType   string   `json:"notification_type"`
}

type TaskInvocationParametersRunCommandParametersParameterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type TaskInvocationParametersStepFunctionsParametersState struct {
	Input string `json:"input"`
	Name  string `json:"name"`
}
