// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_template_alias

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_quicksight_template_alias.
type Resource struct {
	Name      string
	Args      Args
	state     *awsQuicksightTemplateAliasState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aqta *Resource) Type() string {
	return "aws_quicksight_template_alias"
}

// LocalName returns the local name for [Resource].
func (aqta *Resource) LocalName() string {
	return aqta.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aqta *Resource) Configuration() interface{} {
	return aqta.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aqta *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aqta)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aqta *Resource) Dependencies() terra.Dependencies {
	return aqta.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aqta *Resource) LifecycleManagement() *terra.Lifecycle {
	return aqta.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aqta *Resource) Attributes() awsQuicksightTemplateAliasAttributes {
	return awsQuicksightTemplateAliasAttributes{ref: terra.ReferenceResource(aqta)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aqta *Resource) ImportState(state io.Reader) error {
	aqta.state = &awsQuicksightTemplateAliasState{}
	if err := json.NewDecoder(state).Decode(aqta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aqta.Type(), aqta.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aqta *Resource) State() (*awsQuicksightTemplateAliasState, bool) {
	return aqta.state, aqta.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aqta *Resource) StateMust() *awsQuicksightTemplateAliasState {
	if aqta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aqta.Type(), aqta.LocalName()))
	}
	return aqta.state
}

// Args contains the configurations for aws_quicksight_template_alias.
type Args struct {
	// AliasName: string, required
	AliasName terra.StringValue `hcl:"alias_name,attr" validate:"required"`
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// TemplateId: string, required
	TemplateId terra.StringValue `hcl:"template_id,attr" validate:"required"`
	// TemplateVersionNumber: number, required
	TemplateVersionNumber terra.NumberValue `hcl:"template_version_number,attr" validate:"required"`
}

type awsQuicksightTemplateAliasAttributes struct {
	ref terra.Reference
}

// AliasName returns a reference to field alias_name of aws_quicksight_template_alias.
func (aqta awsQuicksightTemplateAliasAttributes) AliasName() terra.StringValue {
	return terra.ReferenceAsString(aqta.ref.Append("alias_name"))
}

// Arn returns a reference to field arn of aws_quicksight_template_alias.
func (aqta awsQuicksightTemplateAliasAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aqta.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_template_alias.
func (aqta awsQuicksightTemplateAliasAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(aqta.ref.Append("aws_account_id"))
}

// Id returns a reference to field id of aws_quicksight_template_alias.
func (aqta awsQuicksightTemplateAliasAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aqta.ref.Append("id"))
}

// TemplateId returns a reference to field template_id of aws_quicksight_template_alias.
func (aqta awsQuicksightTemplateAliasAttributes) TemplateId() terra.StringValue {
	return terra.ReferenceAsString(aqta.ref.Append("template_id"))
}

// TemplateVersionNumber returns a reference to field template_version_number of aws_quicksight_template_alias.
func (aqta awsQuicksightTemplateAliasAttributes) TemplateVersionNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(aqta.ref.Append("template_version_number"))
}

type awsQuicksightTemplateAliasState struct {
	AliasName             string  `json:"alias_name"`
	Arn                   string  `json:"arn"`
	AwsAccountId          string  `json:"aws_account_id"`
	Id                    string  `json:"id"`
	TemplateId            string  `json:"template_id"`
	TemplateVersionNumber float64 `json:"template_version_number"`
}
