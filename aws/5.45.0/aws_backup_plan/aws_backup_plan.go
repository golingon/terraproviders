// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_backup_plan

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_backup_plan.
type Resource struct {
	Name      string
	Args      Args
	state     *awsBackupPlanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abp *Resource) Type() string {
	return "aws_backup_plan"
}

// LocalName returns the local name for [Resource].
func (abp *Resource) LocalName() string {
	return abp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abp *Resource) Configuration() interface{} {
	return abp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abp *Resource) Dependencies() terra.Dependencies {
	return abp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abp *Resource) LifecycleManagement() *terra.Lifecycle {
	return abp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abp *Resource) Attributes() awsBackupPlanAttributes {
	return awsBackupPlanAttributes{ref: terra.ReferenceResource(abp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abp *Resource) ImportState(state io.Reader) error {
	abp.state = &awsBackupPlanState{}
	if err := json.NewDecoder(state).Decode(abp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abp.Type(), abp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abp *Resource) State() (*awsBackupPlanState, bool) {
	return abp.state, abp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abp *Resource) StateMust() *awsBackupPlanState {
	if abp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abp.Type(), abp.LocalName()))
	}
	return abp.state
}

// Args contains the configurations for aws_backup_plan.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// AdvancedBackupSetting: min=0
	AdvancedBackupSetting []AdvancedBackupSetting `hcl:"advanced_backup_setting,block" validate:"min=0"`
	// Rule: min=1
	Rule []Rule `hcl:"rule,block" validate:"min=1"`
}

type awsBackupPlanAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_backup_plan.
func (abp awsBackupPlanAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("arn"))
}

// Id returns a reference to field id of aws_backup_plan.
func (abp awsBackupPlanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("id"))
}

// Name returns a reference to field name of aws_backup_plan.
func (abp awsBackupPlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_backup_plan.
func (abp awsBackupPlanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_backup_plan.
func (abp awsBackupPlanAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abp.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_backup_plan.
func (abp awsBackupPlanAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("version"))
}

func (abp awsBackupPlanAttributes) AdvancedBackupSetting() terra.SetValue[AdvancedBackupSettingAttributes] {
	return terra.ReferenceAsSet[AdvancedBackupSettingAttributes](abp.ref.Append("advanced_backup_setting"))
}

func (abp awsBackupPlanAttributes) Rule() terra.SetValue[RuleAttributes] {
	return terra.ReferenceAsSet[RuleAttributes](abp.ref.Append("rule"))
}

type awsBackupPlanState struct {
	Arn                   string                       `json:"arn"`
	Id                    string                       `json:"id"`
	Name                  string                       `json:"name"`
	Tags                  map[string]string            `json:"tags"`
	TagsAll               map[string]string            `json:"tags_all"`
	Version               string                       `json:"version"`
	AdvancedBackupSetting []AdvancedBackupSettingState `json:"advanced_backup_setting"`
	Rule                  []RuleState                  `json:"rule"`
}
