// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_gamelift_game_session_queue

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_gamelift_game_session_queue.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGameliftGameSessionQueueState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aggsq *Resource) Type() string {
	return "aws_gamelift_game_session_queue"
}

// LocalName returns the local name for [Resource].
func (aggsq *Resource) LocalName() string {
	return aggsq.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aggsq *Resource) Configuration() interface{} {
	return aggsq.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aggsq *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aggsq)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aggsq *Resource) Dependencies() terra.Dependencies {
	return aggsq.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aggsq *Resource) LifecycleManagement() *terra.Lifecycle {
	return aggsq.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aggsq *Resource) Attributes() awsGameliftGameSessionQueueAttributes {
	return awsGameliftGameSessionQueueAttributes{ref: terra.ReferenceResource(aggsq)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aggsq *Resource) ImportState(state io.Reader) error {
	aggsq.state = &awsGameliftGameSessionQueueState{}
	if err := json.NewDecoder(state).Decode(aggsq.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aggsq.Type(), aggsq.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aggsq *Resource) State() (*awsGameliftGameSessionQueueState, bool) {
	return aggsq.state, aggsq.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aggsq *Resource) StateMust() *awsGameliftGameSessionQueueState {
	if aggsq.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aggsq.Type(), aggsq.LocalName()))
	}
	return aggsq.state
}

// Args contains the configurations for aws_gamelift_game_session_queue.
type Args struct {
	// CustomEventData: string, optional
	CustomEventData terra.StringValue `hcl:"custom_event_data,attr"`
	// Destinations: list of string, optional
	Destinations terra.ListValue[terra.StringValue] `hcl:"destinations,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NotificationTarget: string, optional
	NotificationTarget terra.StringValue `hcl:"notification_target,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TimeoutInSeconds: number, optional
	TimeoutInSeconds terra.NumberValue `hcl:"timeout_in_seconds,attr"`
	// PlayerLatencyPolicy: min=0
	PlayerLatencyPolicy []PlayerLatencyPolicy `hcl:"player_latency_policy,block" validate:"min=0"`
}

type awsGameliftGameSessionQueueAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_gamelift_game_session_queue.
func (aggsq awsGameliftGameSessionQueueAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aggsq.ref.Append("arn"))
}

// CustomEventData returns a reference to field custom_event_data of aws_gamelift_game_session_queue.
func (aggsq awsGameliftGameSessionQueueAttributes) CustomEventData() terra.StringValue {
	return terra.ReferenceAsString(aggsq.ref.Append("custom_event_data"))
}

// Destinations returns a reference to field destinations of aws_gamelift_game_session_queue.
func (aggsq awsGameliftGameSessionQueueAttributes) Destinations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aggsq.ref.Append("destinations"))
}

// Id returns a reference to field id of aws_gamelift_game_session_queue.
func (aggsq awsGameliftGameSessionQueueAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aggsq.ref.Append("id"))
}

// Name returns a reference to field name of aws_gamelift_game_session_queue.
func (aggsq awsGameliftGameSessionQueueAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aggsq.ref.Append("name"))
}

// NotificationTarget returns a reference to field notification_target of aws_gamelift_game_session_queue.
func (aggsq awsGameliftGameSessionQueueAttributes) NotificationTarget() terra.StringValue {
	return terra.ReferenceAsString(aggsq.ref.Append("notification_target"))
}

// Tags returns a reference to field tags of aws_gamelift_game_session_queue.
func (aggsq awsGameliftGameSessionQueueAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aggsq.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_gamelift_game_session_queue.
func (aggsq awsGameliftGameSessionQueueAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aggsq.ref.Append("tags_all"))
}

// TimeoutInSeconds returns a reference to field timeout_in_seconds of aws_gamelift_game_session_queue.
func (aggsq awsGameliftGameSessionQueueAttributes) TimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(aggsq.ref.Append("timeout_in_seconds"))
}

func (aggsq awsGameliftGameSessionQueueAttributes) PlayerLatencyPolicy() terra.ListValue[PlayerLatencyPolicyAttributes] {
	return terra.ReferenceAsList[PlayerLatencyPolicyAttributes](aggsq.ref.Append("player_latency_policy"))
}

type awsGameliftGameSessionQueueState struct {
	Arn                 string                     `json:"arn"`
	CustomEventData     string                     `json:"custom_event_data"`
	Destinations        []string                   `json:"destinations"`
	Id                  string                     `json:"id"`
	Name                string                     `json:"name"`
	NotificationTarget  string                     `json:"notification_target"`
	Tags                map[string]string          `json:"tags"`
	TagsAll             map[string]string          `json:"tags_all"`
	TimeoutInSeconds    float64                    `json:"timeout_in_seconds"`
	PlayerLatencyPolicy []PlayerLatencyPolicyState `json:"player_latency_policy"`
}
