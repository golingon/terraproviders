// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_efs_file_system_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_efs_file_system_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEfsFileSystemPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aefsp *Resource) Type() string {
	return "aws_efs_file_system_policy"
}

// LocalName returns the local name for [Resource].
func (aefsp *Resource) LocalName() string {
	return aefsp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aefsp *Resource) Configuration() interface{} {
	return aefsp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aefsp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aefsp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aefsp *Resource) Dependencies() terra.Dependencies {
	return aefsp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aefsp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aefsp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aefsp *Resource) Attributes() awsEfsFileSystemPolicyAttributes {
	return awsEfsFileSystemPolicyAttributes{ref: terra.ReferenceResource(aefsp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aefsp *Resource) ImportState(state io.Reader) error {
	aefsp.state = &awsEfsFileSystemPolicyState{}
	if err := json.NewDecoder(state).Decode(aefsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aefsp.Type(), aefsp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aefsp *Resource) State() (*awsEfsFileSystemPolicyState, bool) {
	return aefsp.state, aefsp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aefsp *Resource) StateMust() *awsEfsFileSystemPolicyState {
	if aefsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aefsp.Type(), aefsp.LocalName()))
	}
	return aefsp.state
}

// Args contains the configurations for aws_efs_file_system_policy.
type Args struct {
	// BypassPolicyLockoutSafetyCheck: bool, optional
	BypassPolicyLockoutSafetyCheck terra.BoolValue `hcl:"bypass_policy_lockout_safety_check,attr"`
	// FileSystemId: string, required
	FileSystemId terra.StringValue `hcl:"file_system_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
}

type awsEfsFileSystemPolicyAttributes struct {
	ref terra.Reference
}

// BypassPolicyLockoutSafetyCheck returns a reference to field bypass_policy_lockout_safety_check of aws_efs_file_system_policy.
func (aefsp awsEfsFileSystemPolicyAttributes) BypassPolicyLockoutSafetyCheck() terra.BoolValue {
	return terra.ReferenceAsBool(aefsp.ref.Append("bypass_policy_lockout_safety_check"))
}

// FileSystemId returns a reference to field file_system_id of aws_efs_file_system_policy.
func (aefsp awsEfsFileSystemPolicyAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceAsString(aefsp.ref.Append("file_system_id"))
}

// Id returns a reference to field id of aws_efs_file_system_policy.
func (aefsp awsEfsFileSystemPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aefsp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_efs_file_system_policy.
func (aefsp awsEfsFileSystemPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(aefsp.ref.Append("policy"))
}

type awsEfsFileSystemPolicyState struct {
	BypassPolicyLockoutSafetyCheck bool   `json:"bypass_policy_lockout_safety_check"`
	FileSystemId                   string `json:"file_system_id"`
	Id                             string `json:"id"`
	Policy                         string `json:"policy"`
}
