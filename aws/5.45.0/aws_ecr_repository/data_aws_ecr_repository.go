// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecr_repository

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_ecr_repository.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aer *DataSource) DataSource() string {
	return "aws_ecr_repository"
}

// LocalName returns the local name for [DataSource].
func (aer *DataSource) LocalName() string {
	return aer.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aer *DataSource) Configuration() interface{} {
	return aer.Args
}

// Attributes returns the attributes for [DataSource].
func (aer *DataSource) Attributes() dataAwsEcrRepositoryAttributes {
	return dataAwsEcrRepositoryAttributes{ref: terra.ReferenceDataSource(aer)}
}

// DataArgs contains the configurations for aws_ecr_repository.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RegistryId: string, optional
	RegistryId terra.StringValue `hcl:"registry_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type dataAwsEcrRepositoryAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ecr_repository.
func (aer dataAwsEcrRepositoryAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aer.ref.Append("arn"))
}

// Id returns a reference to field id of aws_ecr_repository.
func (aer dataAwsEcrRepositoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aer.ref.Append("id"))
}

// ImageTagMutability returns a reference to field image_tag_mutability of aws_ecr_repository.
func (aer dataAwsEcrRepositoryAttributes) ImageTagMutability() terra.StringValue {
	return terra.ReferenceAsString(aer.ref.Append("image_tag_mutability"))
}

// MostRecentImageTags returns a reference to field most_recent_image_tags of aws_ecr_repository.
func (aer dataAwsEcrRepositoryAttributes) MostRecentImageTags() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aer.ref.Append("most_recent_image_tags"))
}

// Name returns a reference to field name of aws_ecr_repository.
func (aer dataAwsEcrRepositoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aer.ref.Append("name"))
}

// RegistryId returns a reference to field registry_id of aws_ecr_repository.
func (aer dataAwsEcrRepositoryAttributes) RegistryId() terra.StringValue {
	return terra.ReferenceAsString(aer.ref.Append("registry_id"))
}

// RepositoryUrl returns a reference to field repository_url of aws_ecr_repository.
func (aer dataAwsEcrRepositoryAttributes) RepositoryUrl() terra.StringValue {
	return terra.ReferenceAsString(aer.ref.Append("repository_url"))
}

// Tags returns a reference to field tags of aws_ecr_repository.
func (aer dataAwsEcrRepositoryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aer.ref.Append("tags"))
}

func (aer dataAwsEcrRepositoryAttributes) EncryptionConfiguration() terra.ListValue[DataEncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[DataEncryptionConfigurationAttributes](aer.ref.Append("encryption_configuration"))
}

func (aer dataAwsEcrRepositoryAttributes) ImageScanningConfiguration() terra.ListValue[DataImageScanningConfigurationAttributes] {
	return terra.ReferenceAsList[DataImageScanningConfigurationAttributes](aer.ref.Append("image_scanning_configuration"))
}
