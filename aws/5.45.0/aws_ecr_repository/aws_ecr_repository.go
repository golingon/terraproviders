// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecr_repository

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ecr_repository.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEcrRepositoryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aer *Resource) Type() string {
	return "aws_ecr_repository"
}

// LocalName returns the local name for [Resource].
func (aer *Resource) LocalName() string {
	return aer.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aer *Resource) Configuration() interface{} {
	return aer.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aer *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aer)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aer *Resource) Dependencies() terra.Dependencies {
	return aer.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aer *Resource) LifecycleManagement() *terra.Lifecycle {
	return aer.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aer *Resource) Attributes() awsEcrRepositoryAttributes {
	return awsEcrRepositoryAttributes{ref: terra.ReferenceResource(aer)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aer *Resource) ImportState(state io.Reader) error {
	aer.state = &awsEcrRepositoryState{}
	if err := json.NewDecoder(state).Decode(aer.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aer.Type(), aer.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aer *Resource) State() (*awsEcrRepositoryState, bool) {
	return aer.state, aer.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aer *Resource) StateMust() *awsEcrRepositoryState {
	if aer.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aer.Type(), aer.LocalName()))
	}
	return aer.state
}

// Args contains the configurations for aws_ecr_repository.
type Args struct {
	// ForceDelete: bool, optional
	ForceDelete terra.BoolValue `hcl:"force_delete,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageTagMutability: string, optional
	ImageTagMutability terra.StringValue `hcl:"image_tag_mutability,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// EncryptionConfiguration: min=0
	EncryptionConfiguration []EncryptionConfiguration `hcl:"encryption_configuration,block" validate:"min=0"`
	// ImageScanningConfiguration: optional
	ImageScanningConfiguration *ImageScanningConfiguration `hcl:"image_scanning_configuration,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEcrRepositoryAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ecr_repository.
func (aer awsEcrRepositoryAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aer.ref.Append("arn"))
}

// ForceDelete returns a reference to field force_delete of aws_ecr_repository.
func (aer awsEcrRepositoryAttributes) ForceDelete() terra.BoolValue {
	return terra.ReferenceAsBool(aer.ref.Append("force_delete"))
}

// Id returns a reference to field id of aws_ecr_repository.
func (aer awsEcrRepositoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aer.ref.Append("id"))
}

// ImageTagMutability returns a reference to field image_tag_mutability of aws_ecr_repository.
func (aer awsEcrRepositoryAttributes) ImageTagMutability() terra.StringValue {
	return terra.ReferenceAsString(aer.ref.Append("image_tag_mutability"))
}

// Name returns a reference to field name of aws_ecr_repository.
func (aer awsEcrRepositoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aer.ref.Append("name"))
}

// RegistryId returns a reference to field registry_id of aws_ecr_repository.
func (aer awsEcrRepositoryAttributes) RegistryId() terra.StringValue {
	return terra.ReferenceAsString(aer.ref.Append("registry_id"))
}

// RepositoryUrl returns a reference to field repository_url of aws_ecr_repository.
func (aer awsEcrRepositoryAttributes) RepositoryUrl() terra.StringValue {
	return terra.ReferenceAsString(aer.ref.Append("repository_url"))
}

// Tags returns a reference to field tags of aws_ecr_repository.
func (aer awsEcrRepositoryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aer.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ecr_repository.
func (aer awsEcrRepositoryAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aer.ref.Append("tags_all"))
}

func (aer awsEcrRepositoryAttributes) EncryptionConfiguration() terra.ListValue[EncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[EncryptionConfigurationAttributes](aer.ref.Append("encryption_configuration"))
}

func (aer awsEcrRepositoryAttributes) ImageScanningConfiguration() terra.ListValue[ImageScanningConfigurationAttributes] {
	return terra.ReferenceAsList[ImageScanningConfigurationAttributes](aer.ref.Append("image_scanning_configuration"))
}

func (aer awsEcrRepositoryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aer.ref.Append("timeouts"))
}

type awsEcrRepositoryState struct {
	Arn                        string                            `json:"arn"`
	ForceDelete                bool                              `json:"force_delete"`
	Id                         string                            `json:"id"`
	ImageTagMutability         string                            `json:"image_tag_mutability"`
	Name                       string                            `json:"name"`
	RegistryId                 string                            `json:"registry_id"`
	RepositoryUrl              string                            `json:"repository_url"`
	Tags                       map[string]string                 `json:"tags"`
	TagsAll                    map[string]string                 `json:"tags_all"`
	EncryptionConfiguration    []EncryptionConfigurationState    `json:"encryption_configuration"`
	ImageScanningConfiguration []ImageScanningConfigurationState `json:"image_scanning_configuration"`
	Timeouts                   *TimeoutsState                    `json:"timeouts"`
}
