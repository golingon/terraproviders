// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_storagegateway_working_storage

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_storagegateway_working_storage.
type Resource struct {
	Name      string
	Args      Args
	state     *awsStoragegatewayWorkingStorageState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asws *Resource) Type() string {
	return "aws_storagegateway_working_storage"
}

// LocalName returns the local name for [Resource].
func (asws *Resource) LocalName() string {
	return asws.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asws *Resource) Configuration() interface{} {
	return asws.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asws *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asws)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asws *Resource) Dependencies() terra.Dependencies {
	return asws.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asws *Resource) LifecycleManagement() *terra.Lifecycle {
	return asws.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asws *Resource) Attributes() awsStoragegatewayWorkingStorageAttributes {
	return awsStoragegatewayWorkingStorageAttributes{ref: terra.ReferenceResource(asws)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asws *Resource) ImportState(state io.Reader) error {
	asws.state = &awsStoragegatewayWorkingStorageState{}
	if err := json.NewDecoder(state).Decode(asws.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asws.Type(), asws.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asws *Resource) State() (*awsStoragegatewayWorkingStorageState, bool) {
	return asws.state, asws.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asws *Resource) StateMust() *awsStoragegatewayWorkingStorageState {
	if asws.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asws.Type(), asws.LocalName()))
	}
	return asws.state
}

// Args contains the configurations for aws_storagegateway_working_storage.
type Args struct {
	// DiskId: string, required
	DiskId terra.StringValue `hcl:"disk_id,attr" validate:"required"`
	// GatewayArn: string, required
	GatewayArn terra.StringValue `hcl:"gateway_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsStoragegatewayWorkingStorageAttributes struct {
	ref terra.Reference
}

// DiskId returns a reference to field disk_id of aws_storagegateway_working_storage.
func (asws awsStoragegatewayWorkingStorageAttributes) DiskId() terra.StringValue {
	return terra.ReferenceAsString(asws.ref.Append("disk_id"))
}

// GatewayArn returns a reference to field gateway_arn of aws_storagegateway_working_storage.
func (asws awsStoragegatewayWorkingStorageAttributes) GatewayArn() terra.StringValue {
	return terra.ReferenceAsString(asws.ref.Append("gateway_arn"))
}

// Id returns a reference to field id of aws_storagegateway_working_storage.
func (asws awsStoragegatewayWorkingStorageAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asws.ref.Append("id"))
}

type awsStoragegatewayWorkingStorageState struct {
	DiskId     string `json:"disk_id"`
	GatewayArn string `json:"gateway_arn"`
	Id         string `json:"id"`
}
