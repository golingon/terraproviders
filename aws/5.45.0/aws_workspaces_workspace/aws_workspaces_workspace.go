// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_workspaces_workspace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_workspaces_workspace.
type Resource struct {
	Name      string
	Args      Args
	state     *awsWorkspacesWorkspaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aww *Resource) Type() string {
	return "aws_workspaces_workspace"
}

// LocalName returns the local name for [Resource].
func (aww *Resource) LocalName() string {
	return aww.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aww *Resource) Configuration() interface{} {
	return aww.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aww *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aww)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aww *Resource) Dependencies() terra.Dependencies {
	return aww.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aww *Resource) LifecycleManagement() *terra.Lifecycle {
	return aww.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aww *Resource) Attributes() awsWorkspacesWorkspaceAttributes {
	return awsWorkspacesWorkspaceAttributes{ref: terra.ReferenceResource(aww)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aww *Resource) ImportState(state io.Reader) error {
	aww.state = &awsWorkspacesWorkspaceState{}
	if err := json.NewDecoder(state).Decode(aww.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aww.Type(), aww.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aww *Resource) State() (*awsWorkspacesWorkspaceState, bool) {
	return aww.state, aww.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aww *Resource) StateMust() *awsWorkspacesWorkspaceState {
	if aww.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aww.Type(), aww.LocalName()))
	}
	return aww.state
}

// Args contains the configurations for aws_workspaces_workspace.
type Args struct {
	// BundleId: string, required
	BundleId terra.StringValue `hcl:"bundle_id,attr" validate:"required"`
	// DirectoryId: string, required
	DirectoryId terra.StringValue `hcl:"directory_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RootVolumeEncryptionEnabled: bool, optional
	RootVolumeEncryptionEnabled terra.BoolValue `hcl:"root_volume_encryption_enabled,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserName: string, required
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
	// UserVolumeEncryptionEnabled: bool, optional
	UserVolumeEncryptionEnabled terra.BoolValue `hcl:"user_volume_encryption_enabled,attr"`
	// VolumeEncryptionKey: string, optional
	VolumeEncryptionKey terra.StringValue `hcl:"volume_encryption_key,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// WorkspaceProperties: optional
	WorkspaceProperties *WorkspaceProperties `hcl:"workspace_properties,block"`
}

type awsWorkspacesWorkspaceAttributes struct {
	ref terra.Reference
}

// BundleId returns a reference to field bundle_id of aws_workspaces_workspace.
func (aww awsWorkspacesWorkspaceAttributes) BundleId() terra.StringValue {
	return terra.ReferenceAsString(aww.ref.Append("bundle_id"))
}

// ComputerName returns a reference to field computer_name of aws_workspaces_workspace.
func (aww awsWorkspacesWorkspaceAttributes) ComputerName() terra.StringValue {
	return terra.ReferenceAsString(aww.ref.Append("computer_name"))
}

// DirectoryId returns a reference to field directory_id of aws_workspaces_workspace.
func (aww awsWorkspacesWorkspaceAttributes) DirectoryId() terra.StringValue {
	return terra.ReferenceAsString(aww.ref.Append("directory_id"))
}

// Id returns a reference to field id of aws_workspaces_workspace.
func (aww awsWorkspacesWorkspaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aww.ref.Append("id"))
}

// IpAddress returns a reference to field ip_address of aws_workspaces_workspace.
func (aww awsWorkspacesWorkspaceAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(aww.ref.Append("ip_address"))
}

// RootVolumeEncryptionEnabled returns a reference to field root_volume_encryption_enabled of aws_workspaces_workspace.
func (aww awsWorkspacesWorkspaceAttributes) RootVolumeEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aww.ref.Append("root_volume_encryption_enabled"))
}

// State returns a reference to field state of aws_workspaces_workspace.
func (aww awsWorkspacesWorkspaceAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(aww.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_workspaces_workspace.
func (aww awsWorkspacesWorkspaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aww.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_workspaces_workspace.
func (aww awsWorkspacesWorkspaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aww.ref.Append("tags_all"))
}

// UserName returns a reference to field user_name of aws_workspaces_workspace.
func (aww awsWorkspacesWorkspaceAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(aww.ref.Append("user_name"))
}

// UserVolumeEncryptionEnabled returns a reference to field user_volume_encryption_enabled of aws_workspaces_workspace.
func (aww awsWorkspacesWorkspaceAttributes) UserVolumeEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aww.ref.Append("user_volume_encryption_enabled"))
}

// VolumeEncryptionKey returns a reference to field volume_encryption_key of aws_workspaces_workspace.
func (aww awsWorkspacesWorkspaceAttributes) VolumeEncryptionKey() terra.StringValue {
	return terra.ReferenceAsString(aww.ref.Append("volume_encryption_key"))
}

func (aww awsWorkspacesWorkspaceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aww.ref.Append("timeouts"))
}

func (aww awsWorkspacesWorkspaceAttributes) WorkspaceProperties() terra.ListValue[WorkspacePropertiesAttributes] {
	return terra.ReferenceAsList[WorkspacePropertiesAttributes](aww.ref.Append("workspace_properties"))
}

type awsWorkspacesWorkspaceState struct {
	BundleId                    string                     `json:"bundle_id"`
	ComputerName                string                     `json:"computer_name"`
	DirectoryId                 string                     `json:"directory_id"`
	Id                          string                     `json:"id"`
	IpAddress                   string                     `json:"ip_address"`
	RootVolumeEncryptionEnabled bool                       `json:"root_volume_encryption_enabled"`
	State                       string                     `json:"state"`
	Tags                        map[string]string          `json:"tags"`
	TagsAll                     map[string]string          `json:"tags_all"`
	UserName                    string                     `json:"user_name"`
	UserVolumeEncryptionEnabled bool                       `json:"user_volume_encryption_enabled"`
	VolumeEncryptionKey         string                     `json:"volume_encryption_key"`
	Timeouts                    *TimeoutsState             `json:"timeouts"`
	WorkspaceProperties         []WorkspacePropertiesState `json:"workspace_properties"`
}
