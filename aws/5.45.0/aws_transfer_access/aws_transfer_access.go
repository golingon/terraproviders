// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_transfer_access

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_transfer_access.
type Resource struct {
	Name      string
	Args      Args
	state     *awsTransferAccessState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ata *Resource) Type() string {
	return "aws_transfer_access"
}

// LocalName returns the local name for [Resource].
func (ata *Resource) LocalName() string {
	return ata.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ata *Resource) Configuration() interface{} {
	return ata.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ata *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ata)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ata *Resource) Dependencies() terra.Dependencies {
	return ata.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ata *Resource) LifecycleManagement() *terra.Lifecycle {
	return ata.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ata *Resource) Attributes() awsTransferAccessAttributes {
	return awsTransferAccessAttributes{ref: terra.ReferenceResource(ata)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ata *Resource) ImportState(state io.Reader) error {
	ata.state = &awsTransferAccessState{}
	if err := json.NewDecoder(state).Decode(ata.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ata.Type(), ata.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ata *Resource) State() (*awsTransferAccessState, bool) {
	return ata.state, ata.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ata *Resource) StateMust() *awsTransferAccessState {
	if ata.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ata.Type(), ata.LocalName()))
	}
	return ata.state
}

// Args contains the configurations for aws_transfer_access.
type Args struct {
	// ExternalId: string, required
	ExternalId terra.StringValue `hcl:"external_id,attr" validate:"required"`
	// HomeDirectory: string, optional
	HomeDirectory terra.StringValue `hcl:"home_directory,attr"`
	// HomeDirectoryType: string, optional
	HomeDirectoryType terra.StringValue `hcl:"home_directory_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
	// Role: string, optional
	Role terra.StringValue `hcl:"role,attr"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// HomeDirectoryMappings: min=0,max=50
	HomeDirectoryMappings []HomeDirectoryMappings `hcl:"home_directory_mappings,block" validate:"min=0,max=50"`
	// PosixProfile: optional
	PosixProfile *PosixProfile `hcl:"posix_profile,block"`
}

type awsTransferAccessAttributes struct {
	ref terra.Reference
}

// ExternalId returns a reference to field external_id of aws_transfer_access.
func (ata awsTransferAccessAttributes) ExternalId() terra.StringValue {
	return terra.ReferenceAsString(ata.ref.Append("external_id"))
}

// HomeDirectory returns a reference to field home_directory of aws_transfer_access.
func (ata awsTransferAccessAttributes) HomeDirectory() terra.StringValue {
	return terra.ReferenceAsString(ata.ref.Append("home_directory"))
}

// HomeDirectoryType returns a reference to field home_directory_type of aws_transfer_access.
func (ata awsTransferAccessAttributes) HomeDirectoryType() terra.StringValue {
	return terra.ReferenceAsString(ata.ref.Append("home_directory_type"))
}

// Id returns a reference to field id of aws_transfer_access.
func (ata awsTransferAccessAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ata.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_transfer_access.
func (ata awsTransferAccessAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(ata.ref.Append("policy"))
}

// Role returns a reference to field role of aws_transfer_access.
func (ata awsTransferAccessAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(ata.ref.Append("role"))
}

// ServerId returns a reference to field server_id of aws_transfer_access.
func (ata awsTransferAccessAttributes) ServerId() terra.StringValue {
	return terra.ReferenceAsString(ata.ref.Append("server_id"))
}

func (ata awsTransferAccessAttributes) HomeDirectoryMappings() terra.ListValue[HomeDirectoryMappingsAttributes] {
	return terra.ReferenceAsList[HomeDirectoryMappingsAttributes](ata.ref.Append("home_directory_mappings"))
}

func (ata awsTransferAccessAttributes) PosixProfile() terra.ListValue[PosixProfileAttributes] {
	return terra.ReferenceAsList[PosixProfileAttributes](ata.ref.Append("posix_profile"))
}

type awsTransferAccessState struct {
	ExternalId            string                       `json:"external_id"`
	HomeDirectory         string                       `json:"home_directory"`
	HomeDirectoryType     string                       `json:"home_directory_type"`
	Id                    string                       `json:"id"`
	Policy                string                       `json:"policy"`
	Role                  string                       `json:"role"`
	ServerId              string                       `json:"server_id"`
	HomeDirectoryMappings []HomeDirectoryMappingsState `json:"home_directory_mappings"`
	PosixProfile          []PosixProfileState          `json:"posix_profile"`
}
