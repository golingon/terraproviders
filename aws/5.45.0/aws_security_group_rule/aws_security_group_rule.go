// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_security_group_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_security_group_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSecurityGroupRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asgr *Resource) Type() string {
	return "aws_security_group_rule"
}

// LocalName returns the local name for [Resource].
func (asgr *Resource) LocalName() string {
	return asgr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asgr *Resource) Configuration() interface{} {
	return asgr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asgr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asgr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asgr *Resource) Dependencies() terra.Dependencies {
	return asgr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asgr *Resource) LifecycleManagement() *terra.Lifecycle {
	return asgr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asgr *Resource) Attributes() awsSecurityGroupRuleAttributes {
	return awsSecurityGroupRuleAttributes{ref: terra.ReferenceResource(asgr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asgr *Resource) ImportState(state io.Reader) error {
	asgr.state = &awsSecurityGroupRuleState{}
	if err := json.NewDecoder(state).Decode(asgr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asgr.Type(), asgr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asgr *Resource) State() (*awsSecurityGroupRuleState, bool) {
	return asgr.state, asgr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asgr *Resource) StateMust() *awsSecurityGroupRuleState {
	if asgr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asgr.Type(), asgr.LocalName()))
	}
	return asgr.state
}

// Args contains the configurations for aws_security_group_rule.
type Args struct {
	// CidrBlocks: list of string, optional
	CidrBlocks terra.ListValue[terra.StringValue] `hcl:"cidr_blocks,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FromPort: number, required
	FromPort terra.NumberValue `hcl:"from_port,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Ipv6CidrBlocks: list of string, optional
	Ipv6CidrBlocks terra.ListValue[terra.StringValue] `hcl:"ipv6_cidr_blocks,attr"`
	// PrefixListIds: list of string, optional
	PrefixListIds terra.ListValue[terra.StringValue] `hcl:"prefix_list_ids,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// SecurityGroupId: string, required
	SecurityGroupId terra.StringValue `hcl:"security_group_id,attr" validate:"required"`
	// Self: bool, optional
	Self terra.BoolValue `hcl:"self,attr"`
	// SourceSecurityGroupId: string, optional
	SourceSecurityGroupId terra.StringValue `hcl:"source_security_group_id,attr"`
	// ToPort: number, required
	ToPort terra.NumberValue `hcl:"to_port,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsSecurityGroupRuleAttributes struct {
	ref terra.Reference
}

// CidrBlocks returns a reference to field cidr_blocks of aws_security_group_rule.
func (asgr awsSecurityGroupRuleAttributes) CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asgr.ref.Append("cidr_blocks"))
}

// Description returns a reference to field description of aws_security_group_rule.
func (asgr awsSecurityGroupRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asgr.ref.Append("description"))
}

// FromPort returns a reference to field from_port of aws_security_group_rule.
func (asgr awsSecurityGroupRuleAttributes) FromPort() terra.NumberValue {
	return terra.ReferenceAsNumber(asgr.ref.Append("from_port"))
}

// Id returns a reference to field id of aws_security_group_rule.
func (asgr awsSecurityGroupRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asgr.ref.Append("id"))
}

// Ipv6CidrBlocks returns a reference to field ipv6_cidr_blocks of aws_security_group_rule.
func (asgr awsSecurityGroupRuleAttributes) Ipv6CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asgr.ref.Append("ipv6_cidr_blocks"))
}

// PrefixListIds returns a reference to field prefix_list_ids of aws_security_group_rule.
func (asgr awsSecurityGroupRuleAttributes) PrefixListIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](asgr.ref.Append("prefix_list_ids"))
}

// Protocol returns a reference to field protocol of aws_security_group_rule.
func (asgr awsSecurityGroupRuleAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(asgr.ref.Append("protocol"))
}

// SecurityGroupId returns a reference to field security_group_id of aws_security_group_rule.
func (asgr awsSecurityGroupRuleAttributes) SecurityGroupId() terra.StringValue {
	return terra.ReferenceAsString(asgr.ref.Append("security_group_id"))
}

// SecurityGroupRuleId returns a reference to field security_group_rule_id of aws_security_group_rule.
func (asgr awsSecurityGroupRuleAttributes) SecurityGroupRuleId() terra.StringValue {
	return terra.ReferenceAsString(asgr.ref.Append("security_group_rule_id"))
}

// Self returns a reference to field self of aws_security_group_rule.
func (asgr awsSecurityGroupRuleAttributes) Self() terra.BoolValue {
	return terra.ReferenceAsBool(asgr.ref.Append("self"))
}

// SourceSecurityGroupId returns a reference to field source_security_group_id of aws_security_group_rule.
func (asgr awsSecurityGroupRuleAttributes) SourceSecurityGroupId() terra.StringValue {
	return terra.ReferenceAsString(asgr.ref.Append("source_security_group_id"))
}

// ToPort returns a reference to field to_port of aws_security_group_rule.
func (asgr awsSecurityGroupRuleAttributes) ToPort() terra.NumberValue {
	return terra.ReferenceAsNumber(asgr.ref.Append("to_port"))
}

// Type returns a reference to field type of aws_security_group_rule.
func (asgr awsSecurityGroupRuleAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(asgr.ref.Append("type"))
}

func (asgr awsSecurityGroupRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asgr.ref.Append("timeouts"))
}

type awsSecurityGroupRuleState struct {
	CidrBlocks            []string       `json:"cidr_blocks"`
	Description           string         `json:"description"`
	FromPort              float64        `json:"from_port"`
	Id                    string         `json:"id"`
	Ipv6CidrBlocks        []string       `json:"ipv6_cidr_blocks"`
	PrefixListIds         []string       `json:"prefix_list_ids"`
	Protocol              string         `json:"protocol"`
	SecurityGroupId       string         `json:"security_group_id"`
	SecurityGroupRuleId   string         `json:"security_group_rule_id"`
	Self                  bool           `json:"self"`
	SourceSecurityGroupId string         `json:"source_security_group_id"`
	ToPort                float64        `json:"to_port"`
	Type                  string         `json:"type"`
	Timeouts              *TimeoutsState `json:"timeouts"`
}
