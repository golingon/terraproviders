// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lakeformation_data_lake_settings

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lakeformation_data_lake_settings.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLakeformationDataLakeSettingsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aldls *Resource) Type() string {
	return "aws_lakeformation_data_lake_settings"
}

// LocalName returns the local name for [Resource].
func (aldls *Resource) LocalName() string {
	return aldls.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aldls *Resource) Configuration() interface{} {
	return aldls.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aldls *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aldls)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aldls *Resource) Dependencies() terra.Dependencies {
	return aldls.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aldls *Resource) LifecycleManagement() *terra.Lifecycle {
	return aldls.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aldls *Resource) Attributes() awsLakeformationDataLakeSettingsAttributes {
	return awsLakeformationDataLakeSettingsAttributes{ref: terra.ReferenceResource(aldls)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aldls *Resource) ImportState(state io.Reader) error {
	aldls.state = &awsLakeformationDataLakeSettingsState{}
	if err := json.NewDecoder(state).Decode(aldls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aldls.Type(), aldls.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aldls *Resource) State() (*awsLakeformationDataLakeSettingsState, bool) {
	return aldls.state, aldls.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aldls *Resource) StateMust() *awsLakeformationDataLakeSettingsState {
	if aldls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aldls.Type(), aldls.LocalName()))
	}
	return aldls.state
}

// Args contains the configurations for aws_lakeformation_data_lake_settings.
type Args struct {
	// Admins: set of string, optional
	Admins terra.SetValue[terra.StringValue] `hcl:"admins,attr"`
	// AllowExternalDataFiltering: bool, optional
	AllowExternalDataFiltering terra.BoolValue `hcl:"allow_external_data_filtering,attr"`
	// AuthorizedSessionTagValueList: list of string, optional
	AuthorizedSessionTagValueList terra.ListValue[terra.StringValue] `hcl:"authorized_session_tag_value_list,attr"`
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// ExternalDataFilteringAllowList: set of string, optional
	ExternalDataFilteringAllowList terra.SetValue[terra.StringValue] `hcl:"external_data_filtering_allow_list,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ReadOnlyAdmins: set of string, optional
	ReadOnlyAdmins terra.SetValue[terra.StringValue] `hcl:"read_only_admins,attr"`
	// TrustedResourceOwners: list of string, optional
	TrustedResourceOwners terra.ListValue[terra.StringValue] `hcl:"trusted_resource_owners,attr"`
	// CreateDatabaseDefaultPermissions: min=0,max=3
	CreateDatabaseDefaultPermissions []CreateDatabaseDefaultPermissions `hcl:"create_database_default_permissions,block" validate:"min=0,max=3"`
	// CreateTableDefaultPermissions: min=0,max=3
	CreateTableDefaultPermissions []CreateTableDefaultPermissions `hcl:"create_table_default_permissions,block" validate:"min=0,max=3"`
}

type awsLakeformationDataLakeSettingsAttributes struct {
	ref terra.Reference
}

// Admins returns a reference to field admins of aws_lakeformation_data_lake_settings.
func (aldls awsLakeformationDataLakeSettingsAttributes) Admins() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aldls.ref.Append("admins"))
}

// AllowExternalDataFiltering returns a reference to field allow_external_data_filtering of aws_lakeformation_data_lake_settings.
func (aldls awsLakeformationDataLakeSettingsAttributes) AllowExternalDataFiltering() terra.BoolValue {
	return terra.ReferenceAsBool(aldls.ref.Append("allow_external_data_filtering"))
}

// AuthorizedSessionTagValueList returns a reference to field authorized_session_tag_value_list of aws_lakeformation_data_lake_settings.
func (aldls awsLakeformationDataLakeSettingsAttributes) AuthorizedSessionTagValueList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aldls.ref.Append("authorized_session_tag_value_list"))
}

// CatalogId returns a reference to field catalog_id of aws_lakeformation_data_lake_settings.
func (aldls awsLakeformationDataLakeSettingsAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(aldls.ref.Append("catalog_id"))
}

// ExternalDataFilteringAllowList returns a reference to field external_data_filtering_allow_list of aws_lakeformation_data_lake_settings.
func (aldls awsLakeformationDataLakeSettingsAttributes) ExternalDataFilteringAllowList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aldls.ref.Append("external_data_filtering_allow_list"))
}

// Id returns a reference to field id of aws_lakeformation_data_lake_settings.
func (aldls awsLakeformationDataLakeSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aldls.ref.Append("id"))
}

// ReadOnlyAdmins returns a reference to field read_only_admins of aws_lakeformation_data_lake_settings.
func (aldls awsLakeformationDataLakeSettingsAttributes) ReadOnlyAdmins() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aldls.ref.Append("read_only_admins"))
}

// TrustedResourceOwners returns a reference to field trusted_resource_owners of aws_lakeformation_data_lake_settings.
func (aldls awsLakeformationDataLakeSettingsAttributes) TrustedResourceOwners() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aldls.ref.Append("trusted_resource_owners"))
}

func (aldls awsLakeformationDataLakeSettingsAttributes) CreateDatabaseDefaultPermissions() terra.ListValue[CreateDatabaseDefaultPermissionsAttributes] {
	return terra.ReferenceAsList[CreateDatabaseDefaultPermissionsAttributes](aldls.ref.Append("create_database_default_permissions"))
}

func (aldls awsLakeformationDataLakeSettingsAttributes) CreateTableDefaultPermissions() terra.ListValue[CreateTableDefaultPermissionsAttributes] {
	return terra.ReferenceAsList[CreateTableDefaultPermissionsAttributes](aldls.ref.Append("create_table_default_permissions"))
}

type awsLakeformationDataLakeSettingsState struct {
	Admins                           []string                                `json:"admins"`
	AllowExternalDataFiltering       bool                                    `json:"allow_external_data_filtering"`
	AuthorizedSessionTagValueList    []string                                `json:"authorized_session_tag_value_list"`
	CatalogId                        string                                  `json:"catalog_id"`
	ExternalDataFilteringAllowList   []string                                `json:"external_data_filtering_allow_list"`
	Id                               string                                  `json:"id"`
	ReadOnlyAdmins                   []string                                `json:"read_only_admins"`
	TrustedResourceOwners            []string                                `json:"trusted_resource_owners"`
	CreateDatabaseDefaultPermissions []CreateDatabaseDefaultPermissionsState `json:"create_database_default_permissions"`
	CreateTableDefaultPermissions    []CreateTableDefaultPermissionsState    `json:"create_table_default_permissions"`
}
