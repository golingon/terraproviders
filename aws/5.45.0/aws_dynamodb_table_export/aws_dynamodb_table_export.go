// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dynamodb_table_export

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dynamodb_table_export.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDynamodbTableExportState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adte *Resource) Type() string {
	return "aws_dynamodb_table_export"
}

// LocalName returns the local name for [Resource].
func (adte *Resource) LocalName() string {
	return adte.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adte *Resource) Configuration() interface{} {
	return adte.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adte *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adte)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adte *Resource) Dependencies() terra.Dependencies {
	return adte.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adte *Resource) LifecycleManagement() *terra.Lifecycle {
	return adte.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adte *Resource) Attributes() awsDynamodbTableExportAttributes {
	return awsDynamodbTableExportAttributes{ref: terra.ReferenceResource(adte)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adte *Resource) ImportState(state io.Reader) error {
	adte.state = &awsDynamodbTableExportState{}
	if err := json.NewDecoder(state).Decode(adte.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adte.Type(), adte.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adte *Resource) State() (*awsDynamodbTableExportState, bool) {
	return adte.state, adte.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adte *Resource) StateMust() *awsDynamodbTableExportState {
	if adte.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adte.Type(), adte.LocalName()))
	}
	return adte.state
}

// Args contains the configurations for aws_dynamodb_table_export.
type Args struct {
	// ExportFormat: string, optional
	ExportFormat terra.StringValue `hcl:"export_format,attr"`
	// ExportTime: string, optional
	ExportTime terra.StringValue `hcl:"export_time,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// S3Bucket: string, required
	S3Bucket terra.StringValue `hcl:"s3_bucket,attr" validate:"required"`
	// S3BucketOwner: string, optional
	S3BucketOwner terra.StringValue `hcl:"s3_bucket_owner,attr"`
	// S3Prefix: string, optional
	S3Prefix terra.StringValue `hcl:"s3_prefix,attr"`
	// S3SseAlgorithm: string, optional
	S3SseAlgorithm terra.StringValue `hcl:"s3_sse_algorithm,attr"`
	// S3SseKmsKeyId: string, optional
	S3SseKmsKeyId terra.StringValue `hcl:"s3_sse_kms_key_id,attr"`
	// TableArn: string, required
	TableArn terra.StringValue `hcl:"table_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDynamodbTableExportAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("arn"))
}

// BilledSizeInBytes returns a reference to field billed_size_in_bytes of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) BilledSizeInBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(adte.ref.Append("billed_size_in_bytes"))
}

// EndTime returns a reference to field end_time of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("end_time"))
}

// ExportFormat returns a reference to field export_format of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) ExportFormat() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("export_format"))
}

// ExportStatus returns a reference to field export_status of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) ExportStatus() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("export_status"))
}

// ExportTime returns a reference to field export_time of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) ExportTime() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("export_time"))
}

// Id returns a reference to field id of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("id"))
}

// ItemCount returns a reference to field item_count of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) ItemCount() terra.NumberValue {
	return terra.ReferenceAsNumber(adte.ref.Append("item_count"))
}

// ManifestFilesS3Key returns a reference to field manifest_files_s3_key of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) ManifestFilesS3Key() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("manifest_files_s3_key"))
}

// S3Bucket returns a reference to field s3_bucket of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) S3Bucket() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("s3_bucket"))
}

// S3BucketOwner returns a reference to field s3_bucket_owner of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) S3BucketOwner() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("s3_bucket_owner"))
}

// S3Prefix returns a reference to field s3_prefix of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) S3Prefix() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("s3_prefix"))
}

// S3SseAlgorithm returns a reference to field s3_sse_algorithm of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) S3SseAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("s3_sse_algorithm"))
}

// S3SseKmsKeyId returns a reference to field s3_sse_kms_key_id of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) S3SseKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("s3_sse_kms_key_id"))
}

// StartTime returns a reference to field start_time of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("start_time"))
}

// TableArn returns a reference to field table_arn of aws_dynamodb_table_export.
func (adte awsDynamodbTableExportAttributes) TableArn() terra.StringValue {
	return terra.ReferenceAsString(adte.ref.Append("table_arn"))
}

func (adte awsDynamodbTableExportAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adte.ref.Append("timeouts"))
}

type awsDynamodbTableExportState struct {
	Arn                string         `json:"arn"`
	BilledSizeInBytes  float64        `json:"billed_size_in_bytes"`
	EndTime            string         `json:"end_time"`
	ExportFormat       string         `json:"export_format"`
	ExportStatus       string         `json:"export_status"`
	ExportTime         string         `json:"export_time"`
	Id                 string         `json:"id"`
	ItemCount          float64        `json:"item_count"`
	ManifestFilesS3Key string         `json:"manifest_files_s3_key"`
	S3Bucket           string         `json:"s3_bucket"`
	S3BucketOwner      string         `json:"s3_bucket_owner"`
	S3Prefix           string         `json:"s3_prefix"`
	S3SseAlgorithm     string         `json:"s3_sse_algorithm"`
	S3SseKmsKeyId      string         `json:"s3_sse_kms_key_id"`
	StartTime          string         `json:"start_time"`
	TableArn           string         `json:"table_arn"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
