// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_query_log

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53_query_log.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53QueryLogState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arql *Resource) Type() string {
	return "aws_route53_query_log"
}

// LocalName returns the local name for [Resource].
func (arql *Resource) LocalName() string {
	return arql.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arql *Resource) Configuration() interface{} {
	return arql.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arql *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arql)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arql *Resource) Dependencies() terra.Dependencies {
	return arql.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arql *Resource) LifecycleManagement() *terra.Lifecycle {
	return arql.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arql *Resource) Attributes() awsRoute53QueryLogAttributes {
	return awsRoute53QueryLogAttributes{ref: terra.ReferenceResource(arql)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arql *Resource) ImportState(state io.Reader) error {
	arql.state = &awsRoute53QueryLogState{}
	if err := json.NewDecoder(state).Decode(arql.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arql.Type(), arql.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arql *Resource) State() (*awsRoute53QueryLogState, bool) {
	return arql.state, arql.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arql *Resource) StateMust() *awsRoute53QueryLogState {
	if arql.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arql.Type(), arql.LocalName()))
	}
	return arql.state
}

// Args contains the configurations for aws_route53_query_log.
type Args struct {
	// CloudwatchLogGroupArn: string, required
	CloudwatchLogGroupArn terra.StringValue `hcl:"cloudwatch_log_group_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ZoneId: string, required
	ZoneId terra.StringValue `hcl:"zone_id,attr" validate:"required"`
}

type awsRoute53QueryLogAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_route53_query_log.
func (arql awsRoute53QueryLogAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arql.ref.Append("arn"))
}

// CloudwatchLogGroupArn returns a reference to field cloudwatch_log_group_arn of aws_route53_query_log.
func (arql awsRoute53QueryLogAttributes) CloudwatchLogGroupArn() terra.StringValue {
	return terra.ReferenceAsString(arql.ref.Append("cloudwatch_log_group_arn"))
}

// Id returns a reference to field id of aws_route53_query_log.
func (arql awsRoute53QueryLogAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arql.ref.Append("id"))
}

// ZoneId returns a reference to field zone_id of aws_route53_query_log.
func (arql awsRoute53QueryLogAttributes) ZoneId() terra.StringValue {
	return terra.ReferenceAsString(arql.ref.Append("zone_id"))
}

type awsRoute53QueryLogState struct {
	Arn                   string `json:"arn"`
	CloudwatchLogGroupArn string `json:"cloudwatch_log_group_arn"`
	Id                    string `json:"id"`
	ZoneId                string `json:"zone_id"`
}
