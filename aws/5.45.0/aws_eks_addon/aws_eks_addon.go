// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_eks_addon

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_eks_addon.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEksAddonState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aea *Resource) Type() string {
	return "aws_eks_addon"
}

// LocalName returns the local name for [Resource].
func (aea *Resource) LocalName() string {
	return aea.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aea *Resource) Configuration() interface{} {
	return aea.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aea *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aea)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aea *Resource) Dependencies() terra.Dependencies {
	return aea.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aea *Resource) LifecycleManagement() *terra.Lifecycle {
	return aea.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aea *Resource) Attributes() awsEksAddonAttributes {
	return awsEksAddonAttributes{ref: terra.ReferenceResource(aea)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aea *Resource) ImportState(state io.Reader) error {
	aea.state = &awsEksAddonState{}
	if err := json.NewDecoder(state).Decode(aea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aea.Type(), aea.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aea *Resource) State() (*awsEksAddonState, bool) {
	return aea.state, aea.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aea *Resource) StateMust() *awsEksAddonState {
	if aea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aea.Type(), aea.LocalName()))
	}
	return aea.state
}

// Args contains the configurations for aws_eks_addon.
type Args struct {
	// AddonName: string, required
	AddonName terra.StringValue `hcl:"addon_name,attr" validate:"required"`
	// AddonVersion: string, optional
	AddonVersion terra.StringValue `hcl:"addon_version,attr"`
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// ConfigurationValues: string, optional
	ConfigurationValues terra.StringValue `hcl:"configuration_values,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Preserve: bool, optional
	Preserve terra.BoolValue `hcl:"preserve,attr"`
	// ResolveConflicts: string, optional
	ResolveConflicts terra.StringValue `hcl:"resolve_conflicts,attr"`
	// ResolveConflictsOnCreate: string, optional
	ResolveConflictsOnCreate terra.StringValue `hcl:"resolve_conflicts_on_create,attr"`
	// ResolveConflictsOnUpdate: string, optional
	ResolveConflictsOnUpdate terra.StringValue `hcl:"resolve_conflicts_on_update,attr"`
	// ServiceAccountRoleArn: string, optional
	ServiceAccountRoleArn terra.StringValue `hcl:"service_account_role_arn,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEksAddonAttributes struct {
	ref terra.Reference
}

// AddonName returns a reference to field addon_name of aws_eks_addon.
func (aea awsEksAddonAttributes) AddonName() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("addon_name"))
}

// AddonVersion returns a reference to field addon_version of aws_eks_addon.
func (aea awsEksAddonAttributes) AddonVersion() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("addon_version"))
}

// Arn returns a reference to field arn of aws_eks_addon.
func (aea awsEksAddonAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("arn"))
}

// ClusterName returns a reference to field cluster_name of aws_eks_addon.
func (aea awsEksAddonAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("cluster_name"))
}

// ConfigurationValues returns a reference to field configuration_values of aws_eks_addon.
func (aea awsEksAddonAttributes) ConfigurationValues() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("configuration_values"))
}

// CreatedAt returns a reference to field created_at of aws_eks_addon.
func (aea awsEksAddonAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("created_at"))
}

// Id returns a reference to field id of aws_eks_addon.
func (aea awsEksAddonAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("id"))
}

// ModifiedAt returns a reference to field modified_at of aws_eks_addon.
func (aea awsEksAddonAttributes) ModifiedAt() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("modified_at"))
}

// Preserve returns a reference to field preserve of aws_eks_addon.
func (aea awsEksAddonAttributes) Preserve() terra.BoolValue {
	return terra.ReferenceAsBool(aea.ref.Append("preserve"))
}

// ResolveConflicts returns a reference to field resolve_conflicts of aws_eks_addon.
func (aea awsEksAddonAttributes) ResolveConflicts() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("resolve_conflicts"))
}

// ResolveConflictsOnCreate returns a reference to field resolve_conflicts_on_create of aws_eks_addon.
func (aea awsEksAddonAttributes) ResolveConflictsOnCreate() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("resolve_conflicts_on_create"))
}

// ResolveConflictsOnUpdate returns a reference to field resolve_conflicts_on_update of aws_eks_addon.
func (aea awsEksAddonAttributes) ResolveConflictsOnUpdate() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("resolve_conflicts_on_update"))
}

// ServiceAccountRoleArn returns a reference to field service_account_role_arn of aws_eks_addon.
func (aea awsEksAddonAttributes) ServiceAccountRoleArn() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("service_account_role_arn"))
}

// Tags returns a reference to field tags of aws_eks_addon.
func (aea awsEksAddonAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aea.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_eks_addon.
func (aea awsEksAddonAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aea.ref.Append("tags_all"))
}

func (aea awsEksAddonAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aea.ref.Append("timeouts"))
}

type awsEksAddonState struct {
	AddonName                string            `json:"addon_name"`
	AddonVersion             string            `json:"addon_version"`
	Arn                      string            `json:"arn"`
	ClusterName              string            `json:"cluster_name"`
	ConfigurationValues      string            `json:"configuration_values"`
	CreatedAt                string            `json:"created_at"`
	Id                       string            `json:"id"`
	ModifiedAt               string            `json:"modified_at"`
	Preserve                 bool              `json:"preserve"`
	ResolveConflicts         string            `json:"resolve_conflicts"`
	ResolveConflictsOnCreate string            `json:"resolve_conflicts_on_create"`
	ResolveConflictsOnUpdate string            `json:"resolve_conflicts_on_update"`
	ServiceAccountRoleArn    string            `json:"service_account_role_arn"`
	Tags                     map[string]string `json:"tags"`
	TagsAll                  map[string]string `json:"tags_all"`
	Timeouts                 *TimeoutsState    `json:"timeouts"`
}
