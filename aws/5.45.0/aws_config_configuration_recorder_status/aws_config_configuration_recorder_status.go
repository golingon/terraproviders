// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_config_configuration_recorder_status

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_config_configuration_recorder_status.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConfigConfigurationRecorderStatusState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (accrs *Resource) Type() string {
	return "aws_config_configuration_recorder_status"
}

// LocalName returns the local name for [Resource].
func (accrs *Resource) LocalName() string {
	return accrs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (accrs *Resource) Configuration() interface{} {
	return accrs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (accrs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(accrs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (accrs *Resource) Dependencies() terra.Dependencies {
	return accrs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (accrs *Resource) LifecycleManagement() *terra.Lifecycle {
	return accrs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (accrs *Resource) Attributes() awsConfigConfigurationRecorderStatusAttributes {
	return awsConfigConfigurationRecorderStatusAttributes{ref: terra.ReferenceResource(accrs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (accrs *Resource) ImportState(state io.Reader) error {
	accrs.state = &awsConfigConfigurationRecorderStatusState{}
	if err := json.NewDecoder(state).Decode(accrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", accrs.Type(), accrs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (accrs *Resource) State() (*awsConfigConfigurationRecorderStatusState, bool) {
	return accrs.state, accrs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (accrs *Resource) StateMust() *awsConfigConfigurationRecorderStatusState {
	if accrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", accrs.Type(), accrs.LocalName()))
	}
	return accrs.state
}

// Args contains the configurations for aws_config_configuration_recorder_status.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsEnabled: bool, required
	IsEnabled terra.BoolValue `hcl:"is_enabled,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type awsConfigConfigurationRecorderStatusAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_config_configuration_recorder_status.
func (accrs awsConfigConfigurationRecorderStatusAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(accrs.ref.Append("id"))
}

// IsEnabled returns a reference to field is_enabled of aws_config_configuration_recorder_status.
func (accrs awsConfigConfigurationRecorderStatusAttributes) IsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(accrs.ref.Append("is_enabled"))
}

// Name returns a reference to field name of aws_config_configuration_recorder_status.
func (accrs awsConfigConfigurationRecorderStatusAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(accrs.ref.Append("name"))
}

type awsConfigConfigurationRecorderStatusState struct {
	Id        string `json:"id"`
	IsEnabled bool   `json:"is_enabled"`
	Name      string `json:"name"`
}
