// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_mskconnect_connector

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_mskconnect_connector.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMskconnectConnectorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amc *Resource) Type() string {
	return "aws_mskconnect_connector"
}

// LocalName returns the local name for [Resource].
func (amc *Resource) LocalName() string {
	return amc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amc *Resource) Configuration() interface{} {
	return amc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amc *Resource) Dependencies() terra.Dependencies {
	return amc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amc *Resource) LifecycleManagement() *terra.Lifecycle {
	return amc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amc *Resource) Attributes() awsMskconnectConnectorAttributes {
	return awsMskconnectConnectorAttributes{ref: terra.ReferenceResource(amc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amc *Resource) ImportState(state io.Reader) error {
	amc.state = &awsMskconnectConnectorState{}
	if err := json.NewDecoder(state).Decode(amc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amc.Type(), amc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amc *Resource) State() (*awsMskconnectConnectorState, bool) {
	return amc.state, amc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amc *Resource) StateMust() *awsMskconnectConnectorState {
	if amc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amc.Type(), amc.LocalName()))
	}
	return amc.state
}

// Args contains the configurations for aws_mskconnect_connector.
type Args struct {
	// ConnectorConfiguration: map of string, required
	ConnectorConfiguration terra.MapValue[terra.StringValue] `hcl:"connector_configuration,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KafkaconnectVersion: string, required
	KafkaconnectVersion terra.StringValue `hcl:"kafkaconnect_version,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServiceExecutionRoleArn: string, required
	ServiceExecutionRoleArn terra.StringValue `hcl:"service_execution_role_arn,attr" validate:"required"`
	// Capacity: required
	Capacity *Capacity `hcl:"capacity,block" validate:"required"`
	// KafkaCluster: required
	KafkaCluster *KafkaCluster `hcl:"kafka_cluster,block" validate:"required"`
	// KafkaClusterClientAuthentication: required
	KafkaClusterClientAuthentication *KafkaClusterClientAuthentication `hcl:"kafka_cluster_client_authentication,block" validate:"required"`
	// KafkaClusterEncryptionInTransit: required
	KafkaClusterEncryptionInTransit *KafkaClusterEncryptionInTransit `hcl:"kafka_cluster_encryption_in_transit,block" validate:"required"`
	// LogDelivery: optional
	LogDelivery *LogDelivery `hcl:"log_delivery,block"`
	// Plugin: min=1
	Plugin []Plugin `hcl:"plugin,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// WorkerConfiguration: optional
	WorkerConfiguration *WorkerConfiguration `hcl:"worker_configuration,block"`
}

type awsMskconnectConnectorAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_mskconnect_connector.
func (amc awsMskconnectConnectorAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("arn"))
}

// ConnectorConfiguration returns a reference to field connector_configuration of aws_mskconnect_connector.
func (amc awsMskconnectConnectorAttributes) ConnectorConfiguration() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amc.ref.Append("connector_configuration"))
}

// Description returns a reference to field description of aws_mskconnect_connector.
func (amc awsMskconnectConnectorAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("description"))
}

// Id returns a reference to field id of aws_mskconnect_connector.
func (amc awsMskconnectConnectorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("id"))
}

// KafkaconnectVersion returns a reference to field kafkaconnect_version of aws_mskconnect_connector.
func (amc awsMskconnectConnectorAttributes) KafkaconnectVersion() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("kafkaconnect_version"))
}

// Name returns a reference to field name of aws_mskconnect_connector.
func (amc awsMskconnectConnectorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("name"))
}

// ServiceExecutionRoleArn returns a reference to field service_execution_role_arn of aws_mskconnect_connector.
func (amc awsMskconnectConnectorAttributes) ServiceExecutionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("service_execution_role_arn"))
}

// Version returns a reference to field version of aws_mskconnect_connector.
func (amc awsMskconnectConnectorAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("version"))
}

func (amc awsMskconnectConnectorAttributes) Capacity() terra.ListValue[CapacityAttributes] {
	return terra.ReferenceAsList[CapacityAttributes](amc.ref.Append("capacity"))
}

func (amc awsMskconnectConnectorAttributes) KafkaCluster() terra.ListValue[KafkaClusterAttributes] {
	return terra.ReferenceAsList[KafkaClusterAttributes](amc.ref.Append("kafka_cluster"))
}

func (amc awsMskconnectConnectorAttributes) KafkaClusterClientAuthentication() terra.ListValue[KafkaClusterClientAuthenticationAttributes] {
	return terra.ReferenceAsList[KafkaClusterClientAuthenticationAttributes](amc.ref.Append("kafka_cluster_client_authentication"))
}

func (amc awsMskconnectConnectorAttributes) KafkaClusterEncryptionInTransit() terra.ListValue[KafkaClusterEncryptionInTransitAttributes] {
	return terra.ReferenceAsList[KafkaClusterEncryptionInTransitAttributes](amc.ref.Append("kafka_cluster_encryption_in_transit"))
}

func (amc awsMskconnectConnectorAttributes) LogDelivery() terra.ListValue[LogDeliveryAttributes] {
	return terra.ReferenceAsList[LogDeliveryAttributes](amc.ref.Append("log_delivery"))
}

func (amc awsMskconnectConnectorAttributes) Plugin() terra.SetValue[PluginAttributes] {
	return terra.ReferenceAsSet[PluginAttributes](amc.ref.Append("plugin"))
}

func (amc awsMskconnectConnectorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amc.ref.Append("timeouts"))
}

func (amc awsMskconnectConnectorAttributes) WorkerConfiguration() terra.ListValue[WorkerConfigurationAttributes] {
	return terra.ReferenceAsList[WorkerConfigurationAttributes](amc.ref.Append("worker_configuration"))
}

type awsMskconnectConnectorState struct {
	Arn                              string                                  `json:"arn"`
	ConnectorConfiguration           map[string]string                       `json:"connector_configuration"`
	Description                      string                                  `json:"description"`
	Id                               string                                  `json:"id"`
	KafkaconnectVersion              string                                  `json:"kafkaconnect_version"`
	Name                             string                                  `json:"name"`
	ServiceExecutionRoleArn          string                                  `json:"service_execution_role_arn"`
	Version                          string                                  `json:"version"`
	Capacity                         []CapacityState                         `json:"capacity"`
	KafkaCluster                     []KafkaClusterState                     `json:"kafka_cluster"`
	KafkaClusterClientAuthentication []KafkaClusterClientAuthenticationState `json:"kafka_cluster_client_authentication"`
	KafkaClusterEncryptionInTransit  []KafkaClusterEncryptionInTransitState  `json:"kafka_cluster_encryption_in_transit"`
	LogDelivery                      []LogDeliveryState                      `json:"log_delivery"`
	Plugin                           []PluginState                           `json:"plugin"`
	Timeouts                         *TimeoutsState                          `json:"timeouts"`
	WorkerConfiguration              []WorkerConfigurationState              `json:"worker_configuration"`
}
