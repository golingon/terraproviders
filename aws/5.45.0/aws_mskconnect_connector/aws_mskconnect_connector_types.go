// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_mskconnect_connector

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Capacity struct {
	// CapacityAutoscaling: optional
	Autoscaling *CapacityAutoscaling `hcl:"autoscaling,block"`
	// CapacityProvisionedCapacity: optional
	ProvisionedCapacity *CapacityProvisionedCapacity `hcl:"provisioned_capacity,block"`
}

type CapacityAutoscaling struct {
	// MaxWorkerCount: number, required
	MaxWorkerCount terra.NumberValue `hcl:"max_worker_count,attr" validate:"required"`
	// McuCount: number, optional
	McuCount terra.NumberValue `hcl:"mcu_count,attr"`
	// MinWorkerCount: number, required
	MinWorkerCount terra.NumberValue `hcl:"min_worker_count,attr" validate:"required"`
	// CapacityAutoscalingScaleInPolicy: optional
	ScaleInPolicy *CapacityAutoscalingScaleInPolicy `hcl:"scale_in_policy,block"`
	// CapacityAutoscalingScaleOutPolicy: optional
	ScaleOutPolicy *CapacityAutoscalingScaleOutPolicy `hcl:"scale_out_policy,block"`
}

type CapacityAutoscalingScaleInPolicy struct {
	// CpuUtilizationPercentage: number, optional
	CpuUtilizationPercentage terra.NumberValue `hcl:"cpu_utilization_percentage,attr"`
}

type CapacityAutoscalingScaleOutPolicy struct {
	// CpuUtilizationPercentage: number, optional
	CpuUtilizationPercentage terra.NumberValue `hcl:"cpu_utilization_percentage,attr"`
}

type CapacityProvisionedCapacity struct {
	// McuCount: number, optional
	McuCount terra.NumberValue `hcl:"mcu_count,attr"`
	// WorkerCount: number, required
	WorkerCount terra.NumberValue `hcl:"worker_count,attr" validate:"required"`
}

type KafkaCluster struct {
	// KafkaClusterApacheKafkaCluster: required
	ApacheKafkaCluster *KafkaClusterApacheKafkaCluster `hcl:"apache_kafka_cluster,block" validate:"required"`
}

type KafkaClusterApacheKafkaCluster struct {
	// BootstrapServers: string, required
	BootstrapServers terra.StringValue `hcl:"bootstrap_servers,attr" validate:"required"`
	// KafkaClusterApacheKafkaClusterVpc: required
	Vpc *KafkaClusterApacheKafkaClusterVpc `hcl:"vpc,block" validate:"required"`
}

type KafkaClusterApacheKafkaClusterVpc struct {
	// SecurityGroups: set of string, required
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr" validate:"required"`
	// Subnets: set of string, required
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type KafkaClusterClientAuthentication struct {
	// AuthenticationType: string, optional
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr"`
}

type KafkaClusterEncryptionInTransit struct {
	// EncryptionType: string, optional
	EncryptionType terra.StringValue `hcl:"encryption_type,attr"`
}

type LogDelivery struct {
	// LogDeliveryWorkerLogDelivery: required
	WorkerLogDelivery *LogDeliveryWorkerLogDelivery `hcl:"worker_log_delivery,block" validate:"required"`
}

type LogDeliveryWorkerLogDelivery struct {
	// LogDeliveryWorkerLogDeliveryCloudwatchLogs: optional
	CloudwatchLogs *LogDeliveryWorkerLogDeliveryCloudwatchLogs `hcl:"cloudwatch_logs,block"`
	// LogDeliveryWorkerLogDeliveryFirehose: optional
	Firehose *LogDeliveryWorkerLogDeliveryFirehose `hcl:"firehose,block"`
	// LogDeliveryWorkerLogDeliveryS3: optional
	S3 *LogDeliveryWorkerLogDeliveryS3 `hcl:"s3,block"`
}

type LogDeliveryWorkerLogDeliveryCloudwatchLogs struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// LogGroup: string, optional
	LogGroup terra.StringValue `hcl:"log_group,attr"`
}

type LogDeliveryWorkerLogDeliveryFirehose struct {
	// DeliveryStream: string, optional
	DeliveryStream terra.StringValue `hcl:"delivery_stream,attr"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type LogDeliveryWorkerLogDeliveryS3 struct {
	// Bucket: string, optional
	Bucket terra.StringValue `hcl:"bucket,attr"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type Plugin struct {
	// PluginCustomPlugin: required
	CustomPlugin *PluginCustomPlugin `hcl:"custom_plugin,block" validate:"required"`
}

type PluginCustomPlugin struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// Revision: number, required
	Revision terra.NumberValue `hcl:"revision,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type WorkerConfiguration struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// Revision: number, required
	Revision terra.NumberValue `hcl:"revision,attr" validate:"required"`
}

type CapacityAttributes struct {
	ref terra.Reference
}

func (c CapacityAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CapacityAttributes) InternalWithRef(ref terra.Reference) CapacityAttributes {
	return CapacityAttributes{ref: ref}
}

func (c CapacityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CapacityAttributes) Autoscaling() terra.ListValue[CapacityAutoscalingAttributes] {
	return terra.ReferenceAsList[CapacityAutoscalingAttributes](c.ref.Append("autoscaling"))
}

func (c CapacityAttributes) ProvisionedCapacity() terra.ListValue[CapacityProvisionedCapacityAttributes] {
	return terra.ReferenceAsList[CapacityProvisionedCapacityAttributes](c.ref.Append("provisioned_capacity"))
}

type CapacityAutoscalingAttributes struct {
	ref terra.Reference
}

func (a CapacityAutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a CapacityAutoscalingAttributes) InternalWithRef(ref terra.Reference) CapacityAutoscalingAttributes {
	return CapacityAutoscalingAttributes{ref: ref}
}

func (a CapacityAutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a CapacityAutoscalingAttributes) MaxWorkerCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("max_worker_count"))
}

func (a CapacityAutoscalingAttributes) McuCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("mcu_count"))
}

func (a CapacityAutoscalingAttributes) MinWorkerCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("min_worker_count"))
}

func (a CapacityAutoscalingAttributes) ScaleInPolicy() terra.ListValue[CapacityAutoscalingScaleInPolicyAttributes] {
	return terra.ReferenceAsList[CapacityAutoscalingScaleInPolicyAttributes](a.ref.Append("scale_in_policy"))
}

func (a CapacityAutoscalingAttributes) ScaleOutPolicy() terra.ListValue[CapacityAutoscalingScaleOutPolicyAttributes] {
	return terra.ReferenceAsList[CapacityAutoscalingScaleOutPolicyAttributes](a.ref.Append("scale_out_policy"))
}

type CapacityAutoscalingScaleInPolicyAttributes struct {
	ref terra.Reference
}

func (sip CapacityAutoscalingScaleInPolicyAttributes) InternalRef() (terra.Reference, error) {
	return sip.ref, nil
}

func (sip CapacityAutoscalingScaleInPolicyAttributes) InternalWithRef(ref terra.Reference) CapacityAutoscalingScaleInPolicyAttributes {
	return CapacityAutoscalingScaleInPolicyAttributes{ref: ref}
}

func (sip CapacityAutoscalingScaleInPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sip.ref.InternalTokens()
}

func (sip CapacityAutoscalingScaleInPolicyAttributes) CpuUtilizationPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(sip.ref.Append("cpu_utilization_percentage"))
}

type CapacityAutoscalingScaleOutPolicyAttributes struct {
	ref terra.Reference
}

func (sop CapacityAutoscalingScaleOutPolicyAttributes) InternalRef() (terra.Reference, error) {
	return sop.ref, nil
}

func (sop CapacityAutoscalingScaleOutPolicyAttributes) InternalWithRef(ref terra.Reference) CapacityAutoscalingScaleOutPolicyAttributes {
	return CapacityAutoscalingScaleOutPolicyAttributes{ref: ref}
}

func (sop CapacityAutoscalingScaleOutPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sop.ref.InternalTokens()
}

func (sop CapacityAutoscalingScaleOutPolicyAttributes) CpuUtilizationPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(sop.ref.Append("cpu_utilization_percentage"))
}

type CapacityProvisionedCapacityAttributes struct {
	ref terra.Reference
}

func (pc CapacityProvisionedCapacityAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc CapacityProvisionedCapacityAttributes) InternalWithRef(ref terra.Reference) CapacityProvisionedCapacityAttributes {
	return CapacityProvisionedCapacityAttributes{ref: ref}
}

func (pc CapacityProvisionedCapacityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc CapacityProvisionedCapacityAttributes) McuCount() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("mcu_count"))
}

func (pc CapacityProvisionedCapacityAttributes) WorkerCount() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("worker_count"))
}

type KafkaClusterAttributes struct {
	ref terra.Reference
}

func (kc KafkaClusterAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc KafkaClusterAttributes) InternalWithRef(ref terra.Reference) KafkaClusterAttributes {
	return KafkaClusterAttributes{ref: ref}
}

func (kc KafkaClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc KafkaClusterAttributes) ApacheKafkaCluster() terra.ListValue[KafkaClusterApacheKafkaClusterAttributes] {
	return terra.ReferenceAsList[KafkaClusterApacheKafkaClusterAttributes](kc.ref.Append("apache_kafka_cluster"))
}

type KafkaClusterApacheKafkaClusterAttributes struct {
	ref terra.Reference
}

func (akc KafkaClusterApacheKafkaClusterAttributes) InternalRef() (terra.Reference, error) {
	return akc.ref, nil
}

func (akc KafkaClusterApacheKafkaClusterAttributes) InternalWithRef(ref terra.Reference) KafkaClusterApacheKafkaClusterAttributes {
	return KafkaClusterApacheKafkaClusterAttributes{ref: ref}
}

func (akc KafkaClusterApacheKafkaClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return akc.ref.InternalTokens()
}

func (akc KafkaClusterApacheKafkaClusterAttributes) BootstrapServers() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("bootstrap_servers"))
}

func (akc KafkaClusterApacheKafkaClusterAttributes) Vpc() terra.ListValue[KafkaClusterApacheKafkaClusterVpcAttributes] {
	return terra.ReferenceAsList[KafkaClusterApacheKafkaClusterVpcAttributes](akc.ref.Append("vpc"))
}

type KafkaClusterApacheKafkaClusterVpcAttributes struct {
	ref terra.Reference
}

func (v KafkaClusterApacheKafkaClusterVpcAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v KafkaClusterApacheKafkaClusterVpcAttributes) InternalWithRef(ref terra.Reference) KafkaClusterApacheKafkaClusterVpcAttributes {
	return KafkaClusterApacheKafkaClusterVpcAttributes{ref: ref}
}

func (v KafkaClusterApacheKafkaClusterVpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v KafkaClusterApacheKafkaClusterVpcAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](v.ref.Append("security_groups"))
}

func (v KafkaClusterApacheKafkaClusterVpcAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](v.ref.Append("subnets"))
}

type KafkaClusterClientAuthenticationAttributes struct {
	ref terra.Reference
}

func (kcca KafkaClusterClientAuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return kcca.ref, nil
}

func (kcca KafkaClusterClientAuthenticationAttributes) InternalWithRef(ref terra.Reference) KafkaClusterClientAuthenticationAttributes {
	return KafkaClusterClientAuthenticationAttributes{ref: ref}
}

func (kcca KafkaClusterClientAuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kcca.ref.InternalTokens()
}

func (kcca KafkaClusterClientAuthenticationAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceAsString(kcca.ref.Append("authentication_type"))
}

type KafkaClusterEncryptionInTransitAttributes struct {
	ref terra.Reference
}

func (kceit KafkaClusterEncryptionInTransitAttributes) InternalRef() (terra.Reference, error) {
	return kceit.ref, nil
}

func (kceit KafkaClusterEncryptionInTransitAttributes) InternalWithRef(ref terra.Reference) KafkaClusterEncryptionInTransitAttributes {
	return KafkaClusterEncryptionInTransitAttributes{ref: ref}
}

func (kceit KafkaClusterEncryptionInTransitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kceit.ref.InternalTokens()
}

func (kceit KafkaClusterEncryptionInTransitAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(kceit.ref.Append("encryption_type"))
}

type LogDeliveryAttributes struct {
	ref terra.Reference
}

func (ld LogDeliveryAttributes) InternalRef() (terra.Reference, error) {
	return ld.ref, nil
}

func (ld LogDeliveryAttributes) InternalWithRef(ref terra.Reference) LogDeliveryAttributes {
	return LogDeliveryAttributes{ref: ref}
}

func (ld LogDeliveryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ld.ref.InternalTokens()
}

func (ld LogDeliveryAttributes) WorkerLogDelivery() terra.ListValue[LogDeliveryWorkerLogDeliveryAttributes] {
	return terra.ReferenceAsList[LogDeliveryWorkerLogDeliveryAttributes](ld.ref.Append("worker_log_delivery"))
}

type LogDeliveryWorkerLogDeliveryAttributes struct {
	ref terra.Reference
}

func (wld LogDeliveryWorkerLogDeliveryAttributes) InternalRef() (terra.Reference, error) {
	return wld.ref, nil
}

func (wld LogDeliveryWorkerLogDeliveryAttributes) InternalWithRef(ref terra.Reference) LogDeliveryWorkerLogDeliveryAttributes {
	return LogDeliveryWorkerLogDeliveryAttributes{ref: ref}
}

func (wld LogDeliveryWorkerLogDeliveryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wld.ref.InternalTokens()
}

func (wld LogDeliveryWorkerLogDeliveryAttributes) CloudwatchLogs() terra.ListValue[LogDeliveryWorkerLogDeliveryCloudwatchLogsAttributes] {
	return terra.ReferenceAsList[LogDeliveryWorkerLogDeliveryCloudwatchLogsAttributes](wld.ref.Append("cloudwatch_logs"))
}

func (wld LogDeliveryWorkerLogDeliveryAttributes) Firehose() terra.ListValue[LogDeliveryWorkerLogDeliveryFirehoseAttributes] {
	return terra.ReferenceAsList[LogDeliveryWorkerLogDeliveryFirehoseAttributes](wld.ref.Append("firehose"))
}

func (wld LogDeliveryWorkerLogDeliveryAttributes) S3() terra.ListValue[LogDeliveryWorkerLogDeliveryS3Attributes] {
	return terra.ReferenceAsList[LogDeliveryWorkerLogDeliveryS3Attributes](wld.ref.Append("s3"))
}

type LogDeliveryWorkerLogDeliveryCloudwatchLogsAttributes struct {
	ref terra.Reference
}

func (cl LogDeliveryWorkerLogDeliveryCloudwatchLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl LogDeliveryWorkerLogDeliveryCloudwatchLogsAttributes) InternalWithRef(ref terra.Reference) LogDeliveryWorkerLogDeliveryCloudwatchLogsAttributes {
	return LogDeliveryWorkerLogDeliveryCloudwatchLogsAttributes{ref: ref}
}

func (cl LogDeliveryWorkerLogDeliveryCloudwatchLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl LogDeliveryWorkerLogDeliveryCloudwatchLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cl.ref.Append("enabled"))
}

func (cl LogDeliveryWorkerLogDeliveryCloudwatchLogsAttributes) LogGroup() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("log_group"))
}

type LogDeliveryWorkerLogDeliveryFirehoseAttributes struct {
	ref terra.Reference
}

func (f LogDeliveryWorkerLogDeliveryFirehoseAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f LogDeliveryWorkerLogDeliveryFirehoseAttributes) InternalWithRef(ref terra.Reference) LogDeliveryWorkerLogDeliveryFirehoseAttributes {
	return LogDeliveryWorkerLogDeliveryFirehoseAttributes{ref: ref}
}

func (f LogDeliveryWorkerLogDeliveryFirehoseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f LogDeliveryWorkerLogDeliveryFirehoseAttributes) DeliveryStream() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("delivery_stream"))
}

func (f LogDeliveryWorkerLogDeliveryFirehoseAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("enabled"))
}

type LogDeliveryWorkerLogDeliveryS3Attributes struct {
	ref terra.Reference
}

func (s LogDeliveryWorkerLogDeliveryS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s LogDeliveryWorkerLogDeliveryS3Attributes) InternalWithRef(ref terra.Reference) LogDeliveryWorkerLogDeliveryS3Attributes {
	return LogDeliveryWorkerLogDeliveryS3Attributes{ref: ref}
}

func (s LogDeliveryWorkerLogDeliveryS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s LogDeliveryWorkerLogDeliveryS3Attributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket"))
}

func (s LogDeliveryWorkerLogDeliveryS3Attributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("enabled"))
}

func (s LogDeliveryWorkerLogDeliveryS3Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("prefix"))
}

type PluginAttributes struct {
	ref terra.Reference
}

func (p PluginAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PluginAttributes) InternalWithRef(ref terra.Reference) PluginAttributes {
	return PluginAttributes{ref: ref}
}

func (p PluginAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PluginAttributes) CustomPlugin() terra.ListValue[PluginCustomPluginAttributes] {
	return terra.ReferenceAsList[PluginCustomPluginAttributes](p.ref.Append("custom_plugin"))
}

type PluginCustomPluginAttributes struct {
	ref terra.Reference
}

func (cp PluginCustomPluginAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp PluginCustomPluginAttributes) InternalWithRef(ref terra.Reference) PluginCustomPluginAttributes {
	return PluginCustomPluginAttributes{ref: ref}
}

func (cp PluginCustomPluginAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp PluginCustomPluginAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("arn"))
}

func (cp PluginCustomPluginAttributes) Revision() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("revision"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type WorkerConfigurationAttributes struct {
	ref terra.Reference
}

func (wc WorkerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc WorkerConfigurationAttributes) InternalWithRef(ref terra.Reference) WorkerConfigurationAttributes {
	return WorkerConfigurationAttributes{ref: ref}
}

func (wc WorkerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc WorkerConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("arn"))
}

func (wc WorkerConfigurationAttributes) Revision() terra.NumberValue {
	return terra.ReferenceAsNumber(wc.ref.Append("revision"))
}

type CapacityState struct {
	Autoscaling         []CapacityAutoscalingState         `json:"autoscaling"`
	ProvisionedCapacity []CapacityProvisionedCapacityState `json:"provisioned_capacity"`
}

type CapacityAutoscalingState struct {
	MaxWorkerCount float64                                  `json:"max_worker_count"`
	McuCount       float64                                  `json:"mcu_count"`
	MinWorkerCount float64                                  `json:"min_worker_count"`
	ScaleInPolicy  []CapacityAutoscalingScaleInPolicyState  `json:"scale_in_policy"`
	ScaleOutPolicy []CapacityAutoscalingScaleOutPolicyState `json:"scale_out_policy"`
}

type CapacityAutoscalingScaleInPolicyState struct {
	CpuUtilizationPercentage float64 `json:"cpu_utilization_percentage"`
}

type CapacityAutoscalingScaleOutPolicyState struct {
	CpuUtilizationPercentage float64 `json:"cpu_utilization_percentage"`
}

type CapacityProvisionedCapacityState struct {
	McuCount    float64 `json:"mcu_count"`
	WorkerCount float64 `json:"worker_count"`
}

type KafkaClusterState struct {
	ApacheKafkaCluster []KafkaClusterApacheKafkaClusterState `json:"apache_kafka_cluster"`
}

type KafkaClusterApacheKafkaClusterState struct {
	BootstrapServers string                                   `json:"bootstrap_servers"`
	Vpc              []KafkaClusterApacheKafkaClusterVpcState `json:"vpc"`
}

type KafkaClusterApacheKafkaClusterVpcState struct {
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type KafkaClusterClientAuthenticationState struct {
	AuthenticationType string `json:"authentication_type"`
}

type KafkaClusterEncryptionInTransitState struct {
	EncryptionType string `json:"encryption_type"`
}

type LogDeliveryState struct {
	WorkerLogDelivery []LogDeliveryWorkerLogDeliveryState `json:"worker_log_delivery"`
}

type LogDeliveryWorkerLogDeliveryState struct {
	CloudwatchLogs []LogDeliveryWorkerLogDeliveryCloudwatchLogsState `json:"cloudwatch_logs"`
	Firehose       []LogDeliveryWorkerLogDeliveryFirehoseState       `json:"firehose"`
	S3             []LogDeliveryWorkerLogDeliveryS3State             `json:"s3"`
}

type LogDeliveryWorkerLogDeliveryCloudwatchLogsState struct {
	Enabled  bool   `json:"enabled"`
	LogGroup string `json:"log_group"`
}

type LogDeliveryWorkerLogDeliveryFirehoseState struct {
	DeliveryStream string `json:"delivery_stream"`
	Enabled        bool   `json:"enabled"`
}

type LogDeliveryWorkerLogDeliveryS3State struct {
	Bucket  string `json:"bucket"`
	Enabled bool   `json:"enabled"`
	Prefix  string `json:"prefix"`
}

type PluginState struct {
	CustomPlugin []PluginCustomPluginState `json:"custom_plugin"`
}

type PluginCustomPluginState struct {
	Arn      string  `json:"arn"`
	Revision float64 `json:"revision"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type WorkerConfigurationState struct {
	Arn      string  `json:"arn"`
	Revision float64 `json:"revision"`
}
