// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lambda_invocation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lambda_invocation.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLambdaInvocationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ali *Resource) Type() string {
	return "aws_lambda_invocation"
}

// LocalName returns the local name for [Resource].
func (ali *Resource) LocalName() string {
	return ali.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ali *Resource) Configuration() interface{} {
	return ali.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ali *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ali)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ali *Resource) Dependencies() terra.Dependencies {
	return ali.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ali *Resource) LifecycleManagement() *terra.Lifecycle {
	return ali.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ali *Resource) Attributes() awsLambdaInvocationAttributes {
	return awsLambdaInvocationAttributes{ref: terra.ReferenceResource(ali)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ali *Resource) ImportState(state io.Reader) error {
	ali.state = &awsLambdaInvocationState{}
	if err := json.NewDecoder(state).Decode(ali.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ali.Type(), ali.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ali *Resource) State() (*awsLambdaInvocationState, bool) {
	return ali.state, ali.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ali *Resource) StateMust() *awsLambdaInvocationState {
	if ali.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ali.Type(), ali.LocalName()))
	}
	return ali.state
}

// Args contains the configurations for aws_lambda_invocation.
type Args struct {
	// FunctionName: string, required
	FunctionName terra.StringValue `hcl:"function_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Input: string, required
	Input terra.StringValue `hcl:"input,attr" validate:"required"`
	// LifecycleScope: string, optional
	LifecycleScope terra.StringValue `hcl:"lifecycle_scope,attr"`
	// Qualifier: string, optional
	Qualifier terra.StringValue `hcl:"qualifier,attr"`
	// TerraformKey: string, optional
	TerraformKey terra.StringValue `hcl:"terraform_key,attr"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
}

type awsLambdaInvocationAttributes struct {
	ref terra.Reference
}

// FunctionName returns a reference to field function_name of aws_lambda_invocation.
func (ali awsLambdaInvocationAttributes) FunctionName() terra.StringValue {
	return terra.ReferenceAsString(ali.ref.Append("function_name"))
}

// Id returns a reference to field id of aws_lambda_invocation.
func (ali awsLambdaInvocationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ali.ref.Append("id"))
}

// Input returns a reference to field input of aws_lambda_invocation.
func (ali awsLambdaInvocationAttributes) Input() terra.StringValue {
	return terra.ReferenceAsString(ali.ref.Append("input"))
}

// LifecycleScope returns a reference to field lifecycle_scope of aws_lambda_invocation.
func (ali awsLambdaInvocationAttributes) LifecycleScope() terra.StringValue {
	return terra.ReferenceAsString(ali.ref.Append("lifecycle_scope"))
}

// Qualifier returns a reference to field qualifier of aws_lambda_invocation.
func (ali awsLambdaInvocationAttributes) Qualifier() terra.StringValue {
	return terra.ReferenceAsString(ali.ref.Append("qualifier"))
}

// Result returns a reference to field result of aws_lambda_invocation.
func (ali awsLambdaInvocationAttributes) Result() terra.StringValue {
	return terra.ReferenceAsString(ali.ref.Append("result"))
}

// TerraformKey returns a reference to field terraform_key of aws_lambda_invocation.
func (ali awsLambdaInvocationAttributes) TerraformKey() terra.StringValue {
	return terra.ReferenceAsString(ali.ref.Append("terraform_key"))
}

// Triggers returns a reference to field triggers of aws_lambda_invocation.
func (ali awsLambdaInvocationAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ali.ref.Append("triggers"))
}

type awsLambdaInvocationState struct {
	FunctionName   string            `json:"function_name"`
	Id             string            `json:"id"`
	Input          string            `json:"input"`
	LifecycleScope string            `json:"lifecycle_scope"`
	Qualifier      string            `json:"qualifier"`
	Result         string            `json:"result"`
	TerraformKey   string            `json:"terraform_key"`
	Triggers       map[string]string `json:"triggers"`
}
