// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dx_hosted_private_virtual_interface_accepter

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dx_hosted_private_virtual_interface_accepter.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDxHostedPrivateVirtualInterfaceAccepterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adhpvia *Resource) Type() string {
	return "aws_dx_hosted_private_virtual_interface_accepter"
}

// LocalName returns the local name for [Resource].
func (adhpvia *Resource) LocalName() string {
	return adhpvia.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adhpvia *Resource) Configuration() interface{} {
	return adhpvia.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adhpvia *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adhpvia)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adhpvia *Resource) Dependencies() terra.Dependencies {
	return adhpvia.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adhpvia *Resource) LifecycleManagement() *terra.Lifecycle {
	return adhpvia.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adhpvia *Resource) Attributes() awsDxHostedPrivateVirtualInterfaceAccepterAttributes {
	return awsDxHostedPrivateVirtualInterfaceAccepterAttributes{ref: terra.ReferenceResource(adhpvia)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adhpvia *Resource) ImportState(state io.Reader) error {
	adhpvia.state = &awsDxHostedPrivateVirtualInterfaceAccepterState{}
	if err := json.NewDecoder(state).Decode(adhpvia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adhpvia.Type(), adhpvia.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adhpvia *Resource) State() (*awsDxHostedPrivateVirtualInterfaceAccepterState, bool) {
	return adhpvia.state, adhpvia.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adhpvia *Resource) StateMust() *awsDxHostedPrivateVirtualInterfaceAccepterState {
	if adhpvia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adhpvia.Type(), adhpvia.LocalName()))
	}
	return adhpvia.state
}

// Args contains the configurations for aws_dx_hosted_private_virtual_interface_accepter.
type Args struct {
	// DxGatewayId: string, optional
	DxGatewayId terra.StringValue `hcl:"dx_gateway_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VirtualInterfaceId: string, required
	VirtualInterfaceId terra.StringValue `hcl:"virtual_interface_id,attr" validate:"required"`
	// VpnGatewayId: string, optional
	VpnGatewayId terra.StringValue `hcl:"vpn_gateway_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDxHostedPrivateVirtualInterfaceAccepterAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_dx_hosted_private_virtual_interface_accepter.
func (adhpvia awsDxHostedPrivateVirtualInterfaceAccepterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adhpvia.ref.Append("arn"))
}

// DxGatewayId returns a reference to field dx_gateway_id of aws_dx_hosted_private_virtual_interface_accepter.
func (adhpvia awsDxHostedPrivateVirtualInterfaceAccepterAttributes) DxGatewayId() terra.StringValue {
	return terra.ReferenceAsString(adhpvia.ref.Append("dx_gateway_id"))
}

// Id returns a reference to field id of aws_dx_hosted_private_virtual_interface_accepter.
func (adhpvia awsDxHostedPrivateVirtualInterfaceAccepterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adhpvia.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_dx_hosted_private_virtual_interface_accepter.
func (adhpvia awsDxHostedPrivateVirtualInterfaceAccepterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adhpvia.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_dx_hosted_private_virtual_interface_accepter.
func (adhpvia awsDxHostedPrivateVirtualInterfaceAccepterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adhpvia.ref.Append("tags_all"))
}

// VirtualInterfaceId returns a reference to field virtual_interface_id of aws_dx_hosted_private_virtual_interface_accepter.
func (adhpvia awsDxHostedPrivateVirtualInterfaceAccepterAttributes) VirtualInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(adhpvia.ref.Append("virtual_interface_id"))
}

// VpnGatewayId returns a reference to field vpn_gateway_id of aws_dx_hosted_private_virtual_interface_accepter.
func (adhpvia awsDxHostedPrivateVirtualInterfaceAccepterAttributes) VpnGatewayId() terra.StringValue {
	return terra.ReferenceAsString(adhpvia.ref.Append("vpn_gateway_id"))
}

func (adhpvia awsDxHostedPrivateVirtualInterfaceAccepterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adhpvia.ref.Append("timeouts"))
}

type awsDxHostedPrivateVirtualInterfaceAccepterState struct {
	Arn                string            `json:"arn"`
	DxGatewayId        string            `json:"dx_gateway_id"`
	Id                 string            `json:"id"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
	VirtualInterfaceId string            `json:"virtual_interface_id"`
	VpnGatewayId       string            `json:"vpn_gateway_id"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
