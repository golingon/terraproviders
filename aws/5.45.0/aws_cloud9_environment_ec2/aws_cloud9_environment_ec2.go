// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloud9_environment_ec2

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloud9_environment_ec2.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloud9EnvironmentEc2State
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acee *Resource) Type() string {
	return "aws_cloud9_environment_ec2"
}

// LocalName returns the local name for [Resource].
func (acee *Resource) LocalName() string {
	return acee.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acee *Resource) Configuration() interface{} {
	return acee.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acee *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acee)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acee *Resource) Dependencies() terra.Dependencies {
	return acee.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acee *Resource) LifecycleManagement() *terra.Lifecycle {
	return acee.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acee *Resource) Attributes() awsCloud9EnvironmentEc2Attributes {
	return awsCloud9EnvironmentEc2Attributes{ref: terra.ReferenceResource(acee)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acee *Resource) ImportState(state io.Reader) error {
	acee.state = &awsCloud9EnvironmentEc2State{}
	if err := json.NewDecoder(state).Decode(acee.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acee.Type(), acee.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acee *Resource) State() (*awsCloud9EnvironmentEc2State, bool) {
	return acee.state, acee.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acee *Resource) StateMust() *awsCloud9EnvironmentEc2State {
	if acee.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acee.Type(), acee.LocalName()))
	}
	return acee.state
}

// Args contains the configurations for aws_cloud9_environment_ec2.
type Args struct {
	// AutomaticStopTimeMinutes: number, optional
	AutomaticStopTimeMinutes terra.NumberValue `hcl:"automatic_stop_time_minutes,attr"`
	// ConnectionType: string, optional
	ConnectionType terra.StringValue `hcl:"connection_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageId: string, required
	ImageId terra.StringValue `hcl:"image_id,attr" validate:"required"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OwnerArn: string, optional
	OwnerArn terra.StringValue `hcl:"owner_arn,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsCloud9EnvironmentEc2Attributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloud9_environment_ec2.
func (acee awsCloud9EnvironmentEc2Attributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("arn"))
}

// AutomaticStopTimeMinutes returns a reference to field automatic_stop_time_minutes of aws_cloud9_environment_ec2.
func (acee awsCloud9EnvironmentEc2Attributes) AutomaticStopTimeMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(acee.ref.Append("automatic_stop_time_minutes"))
}

// ConnectionType returns a reference to field connection_type of aws_cloud9_environment_ec2.
func (acee awsCloud9EnvironmentEc2Attributes) ConnectionType() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("connection_type"))
}

// Description returns a reference to field description of aws_cloud9_environment_ec2.
func (acee awsCloud9EnvironmentEc2Attributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("description"))
}

// Id returns a reference to field id of aws_cloud9_environment_ec2.
func (acee awsCloud9EnvironmentEc2Attributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("id"))
}

// ImageId returns a reference to field image_id of aws_cloud9_environment_ec2.
func (acee awsCloud9EnvironmentEc2Attributes) ImageId() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("image_id"))
}

// InstanceType returns a reference to field instance_type of aws_cloud9_environment_ec2.
func (acee awsCloud9EnvironmentEc2Attributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("instance_type"))
}

// Name returns a reference to field name of aws_cloud9_environment_ec2.
func (acee awsCloud9EnvironmentEc2Attributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("name"))
}

// OwnerArn returns a reference to field owner_arn of aws_cloud9_environment_ec2.
func (acee awsCloud9EnvironmentEc2Attributes) OwnerArn() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("owner_arn"))
}

// SubnetId returns a reference to field subnet_id of aws_cloud9_environment_ec2.
func (acee awsCloud9EnvironmentEc2Attributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of aws_cloud9_environment_ec2.
func (acee awsCloud9EnvironmentEc2Attributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acee.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cloud9_environment_ec2.
func (acee awsCloud9EnvironmentEc2Attributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acee.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_cloud9_environment_ec2.
func (acee awsCloud9EnvironmentEc2Attributes) Type() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("type"))
}

type awsCloud9EnvironmentEc2State struct {
	Arn                      string            `json:"arn"`
	AutomaticStopTimeMinutes float64           `json:"automatic_stop_time_minutes"`
	ConnectionType           string            `json:"connection_type"`
	Description              string            `json:"description"`
	Id                       string            `json:"id"`
	ImageId                  string            `json:"image_id"`
	InstanceType             string            `json:"instance_type"`
	Name                     string            `json:"name"`
	OwnerArn                 string            `json:"owner_arn"`
	SubnetId                 string            `json:"subnet_id"`
	Tags                     map[string]string `json:"tags"`
	TagsAll                  map[string]string `json:"tags_all"`
	Type                     string            `json:"type"`
}
