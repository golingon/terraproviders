// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elb_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_elb_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsElbAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aea *Resource) Type() string {
	return "aws_elb_attachment"
}

// LocalName returns the local name for [Resource].
func (aea *Resource) LocalName() string {
	return aea.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aea *Resource) Configuration() interface{} {
	return aea.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aea *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aea)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aea *Resource) Dependencies() terra.Dependencies {
	return aea.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aea *Resource) LifecycleManagement() *terra.Lifecycle {
	return aea.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aea *Resource) Attributes() awsElbAttachmentAttributes {
	return awsElbAttachmentAttributes{ref: terra.ReferenceResource(aea)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aea *Resource) ImportState(state io.Reader) error {
	aea.state = &awsElbAttachmentState{}
	if err := json.NewDecoder(state).Decode(aea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aea.Type(), aea.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aea *Resource) State() (*awsElbAttachmentState, bool) {
	return aea.state, aea.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aea *Resource) StateMust() *awsElbAttachmentState {
	if aea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aea.Type(), aea.LocalName()))
	}
	return aea.state
}

// Args contains the configurations for aws_elb_attachment.
type Args struct {
	// Elb: string, required
	Elb terra.StringValue `hcl:"elb,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
}

type awsElbAttachmentAttributes struct {
	ref terra.Reference
}

// Elb returns a reference to field elb of aws_elb_attachment.
func (aea awsElbAttachmentAttributes) Elb() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("elb"))
}

// Id returns a reference to field id of aws_elb_attachment.
func (aea awsElbAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("id"))
}

// Instance returns a reference to field instance of aws_elb_attachment.
func (aea awsElbAttachmentAttributes) Instance() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("instance"))
}

type awsElbAttachmentState struct {
	Elb      string `json:"elb"`
	Id       string `json:"id"`
	Instance string `json:"instance"`
}
