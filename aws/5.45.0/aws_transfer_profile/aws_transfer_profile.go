// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_transfer_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_transfer_profile.
type Resource struct {
	Name      string
	Args      Args
	state     *awsTransferProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (atp *Resource) Type() string {
	return "aws_transfer_profile"
}

// LocalName returns the local name for [Resource].
func (atp *Resource) LocalName() string {
	return atp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (atp *Resource) Configuration() interface{} {
	return atp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (atp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(atp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (atp *Resource) Dependencies() terra.Dependencies {
	return atp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (atp *Resource) LifecycleManagement() *terra.Lifecycle {
	return atp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (atp *Resource) Attributes() awsTransferProfileAttributes {
	return awsTransferProfileAttributes{ref: terra.ReferenceResource(atp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (atp *Resource) ImportState(state io.Reader) error {
	atp.state = &awsTransferProfileState{}
	if err := json.NewDecoder(state).Decode(atp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", atp.Type(), atp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (atp *Resource) State() (*awsTransferProfileState, bool) {
	return atp.state, atp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (atp *Resource) StateMust() *awsTransferProfileState {
	if atp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", atp.Type(), atp.LocalName()))
	}
	return atp.state
}

// Args contains the configurations for aws_transfer_profile.
type Args struct {
	// As2Id: string, required
	As2Id terra.StringValue `hcl:"as2_id,attr" validate:"required"`
	// CertificateIds: set of string, optional
	CertificateIds terra.SetValue[terra.StringValue] `hcl:"certificate_ids,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProfileType: string, required
	ProfileType terra.StringValue `hcl:"profile_type,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsTransferProfileAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_transfer_profile.
func (atp awsTransferProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(atp.ref.Append("arn"))
}

// As2Id returns a reference to field as2_id of aws_transfer_profile.
func (atp awsTransferProfileAttributes) As2Id() terra.StringValue {
	return terra.ReferenceAsString(atp.ref.Append("as2_id"))
}

// CertificateIds returns a reference to field certificate_ids of aws_transfer_profile.
func (atp awsTransferProfileAttributes) CertificateIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](atp.ref.Append("certificate_ids"))
}

// Id returns a reference to field id of aws_transfer_profile.
func (atp awsTransferProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(atp.ref.Append("id"))
}

// ProfileId returns a reference to field profile_id of aws_transfer_profile.
func (atp awsTransferProfileAttributes) ProfileId() terra.StringValue {
	return terra.ReferenceAsString(atp.ref.Append("profile_id"))
}

// ProfileType returns a reference to field profile_type of aws_transfer_profile.
func (atp awsTransferProfileAttributes) ProfileType() terra.StringValue {
	return terra.ReferenceAsString(atp.ref.Append("profile_type"))
}

// Tags returns a reference to field tags of aws_transfer_profile.
func (atp awsTransferProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](atp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_transfer_profile.
func (atp awsTransferProfileAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](atp.ref.Append("tags_all"))
}

type awsTransferProfileState struct {
	Arn            string            `json:"arn"`
	As2Id          string            `json:"as2_id"`
	CertificateIds []string          `json:"certificate_ids"`
	Id             string            `json:"id"`
	ProfileId      string            `json:"profile_id"`
	ProfileType    string            `json:"profile_type"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
}
