// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_cors_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3_bucket_cors_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3BucketCorsConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asbcc *Resource) Type() string {
	return "aws_s3_bucket_cors_configuration"
}

// LocalName returns the local name for [Resource].
func (asbcc *Resource) LocalName() string {
	return asbcc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asbcc *Resource) Configuration() interface{} {
	return asbcc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asbcc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asbcc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asbcc *Resource) Dependencies() terra.Dependencies {
	return asbcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asbcc *Resource) LifecycleManagement() *terra.Lifecycle {
	return asbcc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asbcc *Resource) Attributes() awsS3BucketCorsConfigurationAttributes {
	return awsS3BucketCorsConfigurationAttributes{ref: terra.ReferenceResource(asbcc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asbcc *Resource) ImportState(state io.Reader) error {
	asbcc.state = &awsS3BucketCorsConfigurationState{}
	if err := json.NewDecoder(state).Decode(asbcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asbcc.Type(), asbcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asbcc *Resource) State() (*awsS3BucketCorsConfigurationState, bool) {
	return asbcc.state, asbcc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asbcc *Resource) StateMust() *awsS3BucketCorsConfigurationState {
	if asbcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asbcc.Type(), asbcc.LocalName()))
	}
	return asbcc.state
}

// Args contains the configurations for aws_s3_bucket_cors_configuration.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// CorsRule: min=1,max=100
	CorsRule []CorsRule `hcl:"cors_rule,block" validate:"min=1,max=100"`
}

type awsS3BucketCorsConfigurationAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of aws_s3_bucket_cors_configuration.
func (asbcc awsS3BucketCorsConfigurationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(asbcc.ref.Append("bucket"))
}

// ExpectedBucketOwner returns a reference to field expected_bucket_owner of aws_s3_bucket_cors_configuration.
func (asbcc awsS3BucketCorsConfigurationAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceAsString(asbcc.ref.Append("expected_bucket_owner"))
}

// Id returns a reference to field id of aws_s3_bucket_cors_configuration.
func (asbcc awsS3BucketCorsConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asbcc.ref.Append("id"))
}

func (asbcc awsS3BucketCorsConfigurationAttributes) CorsRule() terra.SetValue[CorsRuleAttributes] {
	return terra.ReferenceAsSet[CorsRuleAttributes](asbcc.ref.Append("cors_rule"))
}

type awsS3BucketCorsConfigurationState struct {
	Bucket              string          `json:"bucket"`
	ExpectedBucketOwner string          `json:"expected_bucket_owner"`
	Id                  string          `json:"id"`
	CorsRule            []CorsRuleState `json:"cors_rule"`
}
