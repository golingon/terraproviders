// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_pinpoint_sms_channel

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_pinpoint_sms_channel.
type Resource struct {
	Name      string
	Args      Args
	state     *awsPinpointSmsChannelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apsc *Resource) Type() string {
	return "aws_pinpoint_sms_channel"
}

// LocalName returns the local name for [Resource].
func (apsc *Resource) LocalName() string {
	return apsc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apsc *Resource) Configuration() interface{} {
	return apsc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apsc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apsc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apsc *Resource) Dependencies() terra.Dependencies {
	return apsc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apsc *Resource) LifecycleManagement() *terra.Lifecycle {
	return apsc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apsc *Resource) Attributes() awsPinpointSmsChannelAttributes {
	return awsPinpointSmsChannelAttributes{ref: terra.ReferenceResource(apsc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apsc *Resource) ImportState(state io.Reader) error {
	apsc.state = &awsPinpointSmsChannelState{}
	if err := json.NewDecoder(state).Decode(apsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apsc.Type(), apsc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apsc *Resource) State() (*awsPinpointSmsChannelState, bool) {
	return apsc.state, apsc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apsc *Resource) StateMust() *awsPinpointSmsChannelState {
	if apsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apsc.Type(), apsc.LocalName()))
	}
	return apsc.state
}

// Args contains the configurations for aws_pinpoint_sms_channel.
type Args struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SenderId: string, optional
	SenderId terra.StringValue `hcl:"sender_id,attr"`
	// ShortCode: string, optional
	ShortCode terra.StringValue `hcl:"short_code,attr"`
}

type awsPinpointSmsChannelAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of aws_pinpoint_sms_channel.
func (apsc awsPinpointSmsChannelAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(apsc.ref.Append("application_id"))
}

// Enabled returns a reference to field enabled of aws_pinpoint_sms_channel.
func (apsc awsPinpointSmsChannelAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(apsc.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_pinpoint_sms_channel.
func (apsc awsPinpointSmsChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apsc.ref.Append("id"))
}

// PromotionalMessagesPerSecond returns a reference to field promotional_messages_per_second of aws_pinpoint_sms_channel.
func (apsc awsPinpointSmsChannelAttributes) PromotionalMessagesPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(apsc.ref.Append("promotional_messages_per_second"))
}

// SenderId returns a reference to field sender_id of aws_pinpoint_sms_channel.
func (apsc awsPinpointSmsChannelAttributes) SenderId() terra.StringValue {
	return terra.ReferenceAsString(apsc.ref.Append("sender_id"))
}

// ShortCode returns a reference to field short_code of aws_pinpoint_sms_channel.
func (apsc awsPinpointSmsChannelAttributes) ShortCode() terra.StringValue {
	return terra.ReferenceAsString(apsc.ref.Append("short_code"))
}

// TransactionalMessagesPerSecond returns a reference to field transactional_messages_per_second of aws_pinpoint_sms_channel.
func (apsc awsPinpointSmsChannelAttributes) TransactionalMessagesPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(apsc.ref.Append("transactional_messages_per_second"))
}

type awsPinpointSmsChannelState struct {
	ApplicationId                  string  `json:"application_id"`
	Enabled                        bool    `json:"enabled"`
	Id                             string  `json:"id"`
	PromotionalMessagesPerSecond   float64 `json:"promotional_messages_per_second"`
	SenderId                       string  `json:"sender_id"`
	ShortCode                      string  `json:"short_code"`
	TransactionalMessagesPerSecond float64 `json:"transactional_messages_per_second"`
}
