// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_rds_global_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_rds_global_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRdsGlobalClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (argc *Resource) Type() string {
	return "aws_rds_global_cluster"
}

// LocalName returns the local name for [Resource].
func (argc *Resource) LocalName() string {
	return argc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (argc *Resource) Configuration() interface{} {
	return argc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (argc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(argc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (argc *Resource) Dependencies() terra.Dependencies {
	return argc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (argc *Resource) LifecycleManagement() *terra.Lifecycle {
	return argc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (argc *Resource) Attributes() awsRdsGlobalClusterAttributes {
	return awsRdsGlobalClusterAttributes{ref: terra.ReferenceResource(argc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (argc *Resource) ImportState(state io.Reader) error {
	argc.state = &awsRdsGlobalClusterState{}
	if err := json.NewDecoder(state).Decode(argc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", argc.Type(), argc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (argc *Resource) State() (*awsRdsGlobalClusterState, bool) {
	return argc.state, argc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (argc *Resource) StateMust() *awsRdsGlobalClusterState {
	if argc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", argc.Type(), argc.LocalName()))
	}
	return argc.state
}

// Args contains the configurations for aws_rds_global_cluster.
type Args struct {
	// DatabaseName: string, optional
	DatabaseName terra.StringValue `hcl:"database_name,attr"`
	// DeletionProtection: bool, optional
	DeletionProtection terra.BoolValue `hcl:"deletion_protection,attr"`
	// Engine: string, optional
	Engine terra.StringValue `hcl:"engine,attr"`
	// EngineVersion: string, optional
	EngineVersion terra.StringValue `hcl:"engine_version,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// GlobalClusterIdentifier: string, required
	GlobalClusterIdentifier terra.StringValue `hcl:"global_cluster_identifier,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SourceDbClusterIdentifier: string, optional
	SourceDbClusterIdentifier terra.StringValue `hcl:"source_db_cluster_identifier,attr"`
	// StorageEncrypted: bool, optional
	StorageEncrypted terra.BoolValue `hcl:"storage_encrypted,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRdsGlobalClusterAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_rds_global_cluster.
func (argc awsRdsGlobalClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(argc.ref.Append("arn"))
}

// DatabaseName returns a reference to field database_name of aws_rds_global_cluster.
func (argc awsRdsGlobalClusterAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(argc.ref.Append("database_name"))
}

// DeletionProtection returns a reference to field deletion_protection of aws_rds_global_cluster.
func (argc awsRdsGlobalClusterAttributes) DeletionProtection() terra.BoolValue {
	return terra.ReferenceAsBool(argc.ref.Append("deletion_protection"))
}

// Engine returns a reference to field engine of aws_rds_global_cluster.
func (argc awsRdsGlobalClusterAttributes) Engine() terra.StringValue {
	return terra.ReferenceAsString(argc.ref.Append("engine"))
}

// EngineVersion returns a reference to field engine_version of aws_rds_global_cluster.
func (argc awsRdsGlobalClusterAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(argc.ref.Append("engine_version"))
}

// EngineVersionActual returns a reference to field engine_version_actual of aws_rds_global_cluster.
func (argc awsRdsGlobalClusterAttributes) EngineVersionActual() terra.StringValue {
	return terra.ReferenceAsString(argc.ref.Append("engine_version_actual"))
}

// ForceDestroy returns a reference to field force_destroy of aws_rds_global_cluster.
func (argc awsRdsGlobalClusterAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(argc.ref.Append("force_destroy"))
}

// GlobalClusterIdentifier returns a reference to field global_cluster_identifier of aws_rds_global_cluster.
func (argc awsRdsGlobalClusterAttributes) GlobalClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(argc.ref.Append("global_cluster_identifier"))
}

// GlobalClusterResourceId returns a reference to field global_cluster_resource_id of aws_rds_global_cluster.
func (argc awsRdsGlobalClusterAttributes) GlobalClusterResourceId() terra.StringValue {
	return terra.ReferenceAsString(argc.ref.Append("global_cluster_resource_id"))
}

// Id returns a reference to field id of aws_rds_global_cluster.
func (argc awsRdsGlobalClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(argc.ref.Append("id"))
}

// SourceDbClusterIdentifier returns a reference to field source_db_cluster_identifier of aws_rds_global_cluster.
func (argc awsRdsGlobalClusterAttributes) SourceDbClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(argc.ref.Append("source_db_cluster_identifier"))
}

// StorageEncrypted returns a reference to field storage_encrypted of aws_rds_global_cluster.
func (argc awsRdsGlobalClusterAttributes) StorageEncrypted() terra.BoolValue {
	return terra.ReferenceAsBool(argc.ref.Append("storage_encrypted"))
}

func (argc awsRdsGlobalClusterAttributes) GlobalClusterMembers() terra.SetValue[GlobalClusterMembersAttributes] {
	return terra.ReferenceAsSet[GlobalClusterMembersAttributes](argc.ref.Append("global_cluster_members"))
}

func (argc awsRdsGlobalClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](argc.ref.Append("timeouts"))
}

type awsRdsGlobalClusterState struct {
	Arn                       string                      `json:"arn"`
	DatabaseName              string                      `json:"database_name"`
	DeletionProtection        bool                        `json:"deletion_protection"`
	Engine                    string                      `json:"engine"`
	EngineVersion             string                      `json:"engine_version"`
	EngineVersionActual       string                      `json:"engine_version_actual"`
	ForceDestroy              bool                        `json:"force_destroy"`
	GlobalClusterIdentifier   string                      `json:"global_cluster_identifier"`
	GlobalClusterResourceId   string                      `json:"global_cluster_resource_id"`
	Id                        string                      `json:"id"`
	SourceDbClusterIdentifier string                      `json:"source_db_cluster_identifier"`
	StorageEncrypted          bool                        `json:"storage_encrypted"`
	GlobalClusterMembers      []GlobalClusterMembersState `json:"global_cluster_members"`
	Timeouts                  *TimeoutsState              `json:"timeouts"`
}
