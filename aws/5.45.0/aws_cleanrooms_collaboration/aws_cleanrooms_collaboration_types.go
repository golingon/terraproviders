// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cleanrooms_collaboration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataEncryptionMetadata struct {
	// AllowClearText: bool, required
	AllowClearText terra.BoolValue `hcl:"allow_clear_text,attr" validate:"required"`
	// AllowDuplicates: bool, required
	AllowDuplicates terra.BoolValue `hcl:"allow_duplicates,attr" validate:"required"`
	// AllowJoinsOnColumnsWithDifferentNames: bool, required
	AllowJoinsOnColumnsWithDifferentNames terra.BoolValue `hcl:"allow_joins_on_columns_with_different_names,attr" validate:"required"`
	// PreserveNulls: bool, required
	PreserveNulls terra.BoolValue `hcl:"preserve_nulls,attr" validate:"required"`
}

type Member struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// MemberAbilities: list of string, required
	MemberAbilities terra.ListValue[terra.StringValue] `hcl:"member_abilities,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type DataEncryptionMetadataAttributes struct {
	ref terra.Reference
}

func (dem DataEncryptionMetadataAttributes) InternalRef() (terra.Reference, error) {
	return dem.ref, nil
}

func (dem DataEncryptionMetadataAttributes) InternalWithRef(ref terra.Reference) DataEncryptionMetadataAttributes {
	return DataEncryptionMetadataAttributes{ref: ref}
}

func (dem DataEncryptionMetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dem.ref.InternalTokens()
}

func (dem DataEncryptionMetadataAttributes) AllowClearText() terra.BoolValue {
	return terra.ReferenceAsBool(dem.ref.Append("allow_clear_text"))
}

func (dem DataEncryptionMetadataAttributes) AllowDuplicates() terra.BoolValue {
	return terra.ReferenceAsBool(dem.ref.Append("allow_duplicates"))
}

func (dem DataEncryptionMetadataAttributes) AllowJoinsOnColumnsWithDifferentNames() terra.BoolValue {
	return terra.ReferenceAsBool(dem.ref.Append("allow_joins_on_columns_with_different_names"))
}

func (dem DataEncryptionMetadataAttributes) PreserveNulls() terra.BoolValue {
	return terra.ReferenceAsBool(dem.ref.Append("preserve_nulls"))
}

type MemberAttributes struct {
	ref terra.Reference
}

func (m MemberAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MemberAttributes) InternalWithRef(ref terra.Reference) MemberAttributes {
	return MemberAttributes{ref: ref}
}

func (m MemberAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MemberAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("account_id"))
}

func (m MemberAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("display_name"))
}

func (m MemberAttributes) MemberAbilities() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](m.ref.Append("member_abilities"))
}

func (m MemberAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("status"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DataEncryptionMetadataState struct {
	AllowClearText                        bool `json:"allow_clear_text"`
	AllowDuplicates                       bool `json:"allow_duplicates"`
	AllowJoinsOnColumnsWithDifferentNames bool `json:"allow_joins_on_columns_with_different_names"`
	PreserveNulls                         bool `json:"preserve_nulls"`
}

type MemberState struct {
	AccountId       string   `json:"account_id"`
	DisplayName     string   `json:"display_name"`
	MemberAbilities []string `json:"member_abilities"`
	Status          string   `json:"status"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
