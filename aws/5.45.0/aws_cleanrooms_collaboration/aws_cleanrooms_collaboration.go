// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cleanrooms_collaboration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cleanrooms_collaboration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCleanroomsCollaborationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acc *Resource) Type() string {
	return "aws_cleanrooms_collaboration"
}

// LocalName returns the local name for [Resource].
func (acc *Resource) LocalName() string {
	return acc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acc *Resource) Configuration() interface{} {
	return acc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acc *Resource) Dependencies() terra.Dependencies {
	return acc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acc *Resource) Attributes() awsCleanroomsCollaborationAttributes {
	return awsCleanroomsCollaborationAttributes{ref: terra.ReferenceResource(acc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acc *Resource) ImportState(state io.Reader) error {
	acc.state = &awsCleanroomsCollaborationState{}
	if err := json.NewDecoder(state).Decode(acc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acc.Type(), acc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acc *Resource) State() (*awsCleanroomsCollaborationState, bool) {
	return acc.state, acc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acc *Resource) StateMust() *awsCleanroomsCollaborationState {
	if acc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acc.Type(), acc.LocalName()))
	}
	return acc.state
}

// Args contains the configurations for aws_cleanrooms_collaboration.
type Args struct {
	// CreatorDisplayName: string, required
	CreatorDisplayName terra.StringValue `hcl:"creator_display_name,attr" validate:"required"`
	// CreatorMemberAbilities: list of string, required
	CreatorMemberAbilities terra.ListValue[terra.StringValue] `hcl:"creator_member_abilities,attr" validate:"required"`
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// QueryLogStatus: string, required
	QueryLogStatus terra.StringValue `hcl:"query_log_status,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DataEncryptionMetadata: optional
	DataEncryptionMetadata *DataEncryptionMetadata `hcl:"data_encryption_metadata,block"`
	// Member: min=0
	Member []Member `hcl:"member,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsCleanroomsCollaborationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cleanrooms_collaboration.
func (acc awsCleanroomsCollaborationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("arn"))
}

// CreateTime returns a reference to field create_time of aws_cleanrooms_collaboration.
func (acc awsCleanroomsCollaborationAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("create_time"))
}

// CreatorDisplayName returns a reference to field creator_display_name of aws_cleanrooms_collaboration.
func (acc awsCleanroomsCollaborationAttributes) CreatorDisplayName() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("creator_display_name"))
}

// CreatorMemberAbilities returns a reference to field creator_member_abilities of aws_cleanrooms_collaboration.
func (acc awsCleanroomsCollaborationAttributes) CreatorMemberAbilities() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](acc.ref.Append("creator_member_abilities"))
}

// Description returns a reference to field description of aws_cleanrooms_collaboration.
func (acc awsCleanroomsCollaborationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("description"))
}

// Id returns a reference to field id of aws_cleanrooms_collaboration.
func (acc awsCleanroomsCollaborationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("id"))
}

// Name returns a reference to field name of aws_cleanrooms_collaboration.
func (acc awsCleanroomsCollaborationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("name"))
}

// QueryLogStatus returns a reference to field query_log_status of aws_cleanrooms_collaboration.
func (acc awsCleanroomsCollaborationAttributes) QueryLogStatus() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("query_log_status"))
}

// Tags returns a reference to field tags of aws_cleanrooms_collaboration.
func (acc awsCleanroomsCollaborationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cleanrooms_collaboration.
func (acc awsCleanroomsCollaborationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acc.ref.Append("tags_all"))
}

// UpdateTime returns a reference to field update_time of aws_cleanrooms_collaboration.
func (acc awsCleanroomsCollaborationAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("update_time"))
}

func (acc awsCleanroomsCollaborationAttributes) DataEncryptionMetadata() terra.ListValue[DataEncryptionMetadataAttributes] {
	return terra.ReferenceAsList[DataEncryptionMetadataAttributes](acc.ref.Append("data_encryption_metadata"))
}

func (acc awsCleanroomsCollaborationAttributes) Member() terra.SetValue[MemberAttributes] {
	return terra.ReferenceAsSet[MemberAttributes](acc.ref.Append("member"))
}

func (acc awsCleanroomsCollaborationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acc.ref.Append("timeouts"))
}

type awsCleanroomsCollaborationState struct {
	Arn                    string                        `json:"arn"`
	CreateTime             string                        `json:"create_time"`
	CreatorDisplayName     string                        `json:"creator_display_name"`
	CreatorMemberAbilities []string                      `json:"creator_member_abilities"`
	Description            string                        `json:"description"`
	Id                     string                        `json:"id"`
	Name                   string                        `json:"name"`
	QueryLogStatus         string                        `json:"query_log_status"`
	Tags                   map[string]string             `json:"tags"`
	TagsAll                map[string]string             `json:"tags_all"`
	UpdateTime             string                        `json:"update_time"`
	DataEncryptionMetadata []DataEncryptionMetadataState `json:"data_encryption_metadata"`
	Member                 []MemberState                 `json:"member"`
	Timeouts               *TimeoutsState                `json:"timeouts"`
}
