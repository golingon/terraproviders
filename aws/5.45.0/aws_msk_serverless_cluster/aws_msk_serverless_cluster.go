// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_msk_serverless_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_msk_serverless_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMskServerlessClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amsc *Resource) Type() string {
	return "aws_msk_serverless_cluster"
}

// LocalName returns the local name for [Resource].
func (amsc *Resource) LocalName() string {
	return amsc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amsc *Resource) Configuration() interface{} {
	return amsc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amsc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amsc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amsc *Resource) Dependencies() terra.Dependencies {
	return amsc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amsc *Resource) LifecycleManagement() *terra.Lifecycle {
	return amsc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amsc *Resource) Attributes() awsMskServerlessClusterAttributes {
	return awsMskServerlessClusterAttributes{ref: terra.ReferenceResource(amsc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amsc *Resource) ImportState(state io.Reader) error {
	amsc.state = &awsMskServerlessClusterState{}
	if err := json.NewDecoder(state).Decode(amsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amsc.Type(), amsc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amsc *Resource) State() (*awsMskServerlessClusterState, bool) {
	return amsc.state, amsc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amsc *Resource) StateMust() *awsMskServerlessClusterState {
	if amsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amsc.Type(), amsc.LocalName()))
	}
	return amsc.state
}

// Args contains the configurations for aws_msk_serverless_cluster.
type Args struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ClientAuthentication: required
	ClientAuthentication *ClientAuthentication `hcl:"client_authentication,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcConfig: min=1
	VpcConfig []VpcConfig `hcl:"vpc_config,block" validate:"min=1"`
}

type awsMskServerlessClusterAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_msk_serverless_cluster.
func (amsc awsMskServerlessClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(amsc.ref.Append("arn"))
}

// ClusterName returns a reference to field cluster_name of aws_msk_serverless_cluster.
func (amsc awsMskServerlessClusterAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(amsc.ref.Append("cluster_name"))
}

// ClusterUuid returns a reference to field cluster_uuid of aws_msk_serverless_cluster.
func (amsc awsMskServerlessClusterAttributes) ClusterUuid() terra.StringValue {
	return terra.ReferenceAsString(amsc.ref.Append("cluster_uuid"))
}

// Id returns a reference to field id of aws_msk_serverless_cluster.
func (amsc awsMskServerlessClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amsc.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_msk_serverless_cluster.
func (amsc awsMskServerlessClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amsc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_msk_serverless_cluster.
func (amsc awsMskServerlessClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amsc.ref.Append("tags_all"))
}

func (amsc awsMskServerlessClusterAttributes) ClientAuthentication() terra.ListValue[ClientAuthenticationAttributes] {
	return terra.ReferenceAsList[ClientAuthenticationAttributes](amsc.ref.Append("client_authentication"))
}

func (amsc awsMskServerlessClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amsc.ref.Append("timeouts"))
}

func (amsc awsMskServerlessClusterAttributes) VpcConfig() terra.ListValue[VpcConfigAttributes] {
	return terra.ReferenceAsList[VpcConfigAttributes](amsc.ref.Append("vpc_config"))
}

type awsMskServerlessClusterState struct {
	Arn                  string                      `json:"arn"`
	ClusterName          string                      `json:"cluster_name"`
	ClusterUuid          string                      `json:"cluster_uuid"`
	Id                   string                      `json:"id"`
	Tags                 map[string]string           `json:"tags"`
	TagsAll              map[string]string           `json:"tags_all"`
	ClientAuthentication []ClientAuthenticationState `json:"client_authentication"`
	Timeouts             *TimeoutsState              `json:"timeouts"`
	VpcConfig            []VpcConfigState            `json:"vpc_config"`
}
