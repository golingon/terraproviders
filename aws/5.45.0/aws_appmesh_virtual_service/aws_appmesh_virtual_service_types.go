// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appmesh_virtual_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Spec struct {
	// SpecProvider: optional
	Provider *SpecProvider `hcl:"provider,block"`
}

type SpecProvider struct {
	// SpecProviderVirtualNode: optional
	VirtualNode *SpecProviderVirtualNode `hcl:"virtual_node,block"`
	// SpecProviderVirtualRouter: optional
	VirtualRouter *SpecProviderVirtualRouter `hcl:"virtual_router,block"`
}

type SpecProviderVirtualNode struct {
	// VirtualNodeName: string, required
	VirtualNodeName terra.StringValue `hcl:"virtual_node_name,attr" validate:"required"`
}

type SpecProviderVirtualRouter struct {
	// VirtualRouterName: string, required
	VirtualRouterName terra.StringValue `hcl:"virtual_router_name,attr" validate:"required"`
}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) Provider() terra.ListValue[SpecProviderAttributes] {
	return terra.ReferenceAsList[SpecProviderAttributes](s.ref.Append("provider"))
}

type SpecProviderAttributes struct {
	ref terra.Reference
}

func (p SpecProviderAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p SpecProviderAttributes) InternalWithRef(ref terra.Reference) SpecProviderAttributes {
	return SpecProviderAttributes{ref: ref}
}

func (p SpecProviderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p SpecProviderAttributes) VirtualNode() terra.ListValue[SpecProviderVirtualNodeAttributes] {
	return terra.ReferenceAsList[SpecProviderVirtualNodeAttributes](p.ref.Append("virtual_node"))
}

func (p SpecProviderAttributes) VirtualRouter() terra.ListValue[SpecProviderVirtualRouterAttributes] {
	return terra.ReferenceAsList[SpecProviderVirtualRouterAttributes](p.ref.Append("virtual_router"))
}

type SpecProviderVirtualNodeAttributes struct {
	ref terra.Reference
}

func (vn SpecProviderVirtualNodeAttributes) InternalRef() (terra.Reference, error) {
	return vn.ref, nil
}

func (vn SpecProviderVirtualNodeAttributes) InternalWithRef(ref terra.Reference) SpecProviderVirtualNodeAttributes {
	return SpecProviderVirtualNodeAttributes{ref: ref}
}

func (vn SpecProviderVirtualNodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vn.ref.InternalTokens()
}

func (vn SpecProviderVirtualNodeAttributes) VirtualNodeName() terra.StringValue {
	return terra.ReferenceAsString(vn.ref.Append("virtual_node_name"))
}

type SpecProviderVirtualRouterAttributes struct {
	ref terra.Reference
}

func (vr SpecProviderVirtualRouterAttributes) InternalRef() (terra.Reference, error) {
	return vr.ref, nil
}

func (vr SpecProviderVirtualRouterAttributes) InternalWithRef(ref terra.Reference) SpecProviderVirtualRouterAttributes {
	return SpecProviderVirtualRouterAttributes{ref: ref}
}

func (vr SpecProviderVirtualRouterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vr.ref.InternalTokens()
}

func (vr SpecProviderVirtualRouterAttributes) VirtualRouterName() terra.StringValue {
	return terra.ReferenceAsString(vr.ref.Append("virtual_router_name"))
}

type SpecState struct {
	Provider []SpecProviderState `json:"provider"`
}

type SpecProviderState struct {
	VirtualNode   []SpecProviderVirtualNodeState   `json:"virtual_node"`
	VirtualRouter []SpecProviderVirtualRouterState `json:"virtual_router"`
}

type SpecProviderVirtualNodeState struct {
	VirtualNodeName string `json:"virtual_node_name"`
}

type SpecProviderVirtualRouterState struct {
	VirtualRouterName string `json:"virtual_router_name"`
}
