// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lambda_function

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DeadLetterConfig struct {
	// TargetArn: string, required
	TargetArn terra.StringValue `hcl:"target_arn,attr" validate:"required"`
}

type Environment struct {
	// Variables: map of string, optional
	Variables terra.MapValue[terra.StringValue] `hcl:"variables,attr"`
}

type EphemeralStorage struct {
	// Size: number, optional
	Size terra.NumberValue `hcl:"size,attr"`
}

type FileSystemConfig struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// LocalMountPath: string, required
	LocalMountPath terra.StringValue `hcl:"local_mount_path,attr" validate:"required"`
}

type ImageConfig struct {
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// EntryPoint: list of string, optional
	EntryPoint terra.ListValue[terra.StringValue] `hcl:"entry_point,attr"`
	// WorkingDirectory: string, optional
	WorkingDirectory terra.StringValue `hcl:"working_directory,attr"`
}

type LoggingConfig struct {
	// ApplicationLogLevel: string, optional
	ApplicationLogLevel terra.StringValue `hcl:"application_log_level,attr"`
	// LogFormat: string, required
	LogFormat terra.StringValue `hcl:"log_format,attr" validate:"required"`
	// LogGroup: string, optional
	LogGroup terra.StringValue `hcl:"log_group,attr"`
	// SystemLogLevel: string, optional
	SystemLogLevel terra.StringValue `hcl:"system_log_level,attr"`
}

type SnapStart struct {
	// ApplyOn: string, required
	ApplyOn terra.StringValue `hcl:"apply_on,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type TracingConfig struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type VpcConfig struct {
	// Ipv6AllowedForDualStack: bool, optional
	Ipv6AllowedForDualStack terra.BoolValue `hcl:"ipv6_allowed_for_dual_stack,attr"`
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type DeadLetterConfigAttributes struct {
	ref terra.Reference
}

func (dlc DeadLetterConfigAttributes) InternalRef() (terra.Reference, error) {
	return dlc.ref, nil
}

func (dlc DeadLetterConfigAttributes) InternalWithRef(ref terra.Reference) DeadLetterConfigAttributes {
	return DeadLetterConfigAttributes{ref: ref}
}

func (dlc DeadLetterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dlc.ref.InternalTokens()
}

func (dlc DeadLetterConfigAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceAsString(dlc.ref.Append("target_arn"))
}

type EnvironmentAttributes struct {
	ref terra.Reference
}

func (e EnvironmentAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EnvironmentAttributes) InternalWithRef(ref terra.Reference) EnvironmentAttributes {
	return EnvironmentAttributes{ref: ref}
}

func (e EnvironmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EnvironmentAttributes) Variables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](e.ref.Append("variables"))
}

type EphemeralStorageAttributes struct {
	ref terra.Reference
}

func (es EphemeralStorageAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es EphemeralStorageAttributes) InternalWithRef(ref terra.Reference) EphemeralStorageAttributes {
	return EphemeralStorageAttributes{ref: ref}
}

func (es EphemeralStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es EphemeralStorageAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("size"))
}

type FileSystemConfigAttributes struct {
	ref terra.Reference
}

func (fsc FileSystemConfigAttributes) InternalRef() (terra.Reference, error) {
	return fsc.ref, nil
}

func (fsc FileSystemConfigAttributes) InternalWithRef(ref terra.Reference) FileSystemConfigAttributes {
	return FileSystemConfigAttributes{ref: ref}
}

func (fsc FileSystemConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fsc.ref.InternalTokens()
}

func (fsc FileSystemConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("arn"))
}

func (fsc FileSystemConfigAttributes) LocalMountPath() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("local_mount_path"))
}

type ImageConfigAttributes struct {
	ref terra.Reference
}

func (ic ImageConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic ImageConfigAttributes) InternalWithRef(ref terra.Reference) ImageConfigAttributes {
	return ImageConfigAttributes{ref: ref}
}

func (ic ImageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic ImageConfigAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ic.ref.Append("command"))
}

func (ic ImageConfigAttributes) EntryPoint() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ic.ref.Append("entry_point"))
}

func (ic ImageConfigAttributes) WorkingDirectory() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("working_directory"))
}

type LoggingConfigAttributes struct {
	ref terra.Reference
}

func (lc LoggingConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LoggingConfigAttributes) InternalWithRef(ref terra.Reference) LoggingConfigAttributes {
	return LoggingConfigAttributes{ref: ref}
}

func (lc LoggingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LoggingConfigAttributes) ApplicationLogLevel() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("application_log_level"))
}

func (lc LoggingConfigAttributes) LogFormat() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("log_format"))
}

func (lc LoggingConfigAttributes) LogGroup() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("log_group"))
}

func (lc LoggingConfigAttributes) SystemLogLevel() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("system_log_level"))
}

type SnapStartAttributes struct {
	ref terra.Reference
}

func (ss SnapStartAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss SnapStartAttributes) InternalWithRef(ref terra.Reference) SnapStartAttributes {
	return SnapStartAttributes{ref: ref}
}

func (ss SnapStartAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss SnapStartAttributes) ApplyOn() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("apply_on"))
}

func (ss SnapStartAttributes) OptimizationStatus() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("optimization_status"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TracingConfigAttributes struct {
	ref terra.Reference
}

func (tc TracingConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TracingConfigAttributes) InternalWithRef(ref terra.Reference) TracingConfigAttributes {
	return TracingConfigAttributes{ref: ref}
}

func (tc TracingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TracingConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("mode"))
}

type VpcConfigAttributes struct {
	ref terra.Reference
}

func (vc VpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VpcConfigAttributes) InternalWithRef(ref terra.Reference) VpcConfigAttributes {
	return VpcConfigAttributes{ref: ref}
}

func (vc VpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VpcConfigAttributes) Ipv6AllowedForDualStack() terra.BoolValue {
	return terra.ReferenceAsBool(vc.ref.Append("ipv6_allowed_for_dual_stack"))
}

func (vc VpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc VpcConfigAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

func (vc VpcConfigAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_id"))
}

type DeadLetterConfigState struct {
	TargetArn string `json:"target_arn"`
}

type EnvironmentState struct {
	Variables map[string]string `json:"variables"`
}

type EphemeralStorageState struct {
	Size float64 `json:"size"`
}

type FileSystemConfigState struct {
	Arn            string `json:"arn"`
	LocalMountPath string `json:"local_mount_path"`
}

type ImageConfigState struct {
	Command          []string `json:"command"`
	EntryPoint       []string `json:"entry_point"`
	WorkingDirectory string   `json:"working_directory"`
}

type LoggingConfigState struct {
	ApplicationLogLevel string `json:"application_log_level"`
	LogFormat           string `json:"log_format"`
	LogGroup            string `json:"log_group"`
	SystemLogLevel      string `json:"system_log_level"`
}

type SnapStartState struct {
	ApplyOn            string `json:"apply_on"`
	OptimizationStatus string `json:"optimization_status"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TracingConfigState struct {
	Mode string `json:"mode"`
}

type VpcConfigState struct {
	Ipv6AllowedForDualStack bool     `json:"ipv6_allowed_for_dual_stack"`
	SecurityGroupIds        []string `json:"security_group_ids"`
	SubnetIds               []string `json:"subnet_ids"`
	VpcId                   string   `json:"vpc_id"`
}
