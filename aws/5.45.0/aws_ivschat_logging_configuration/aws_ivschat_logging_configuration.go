// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ivschat_logging_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ivschat_logging_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIvschatLoggingConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ailc *Resource) Type() string {
	return "aws_ivschat_logging_configuration"
}

// LocalName returns the local name for [Resource].
func (ailc *Resource) LocalName() string {
	return ailc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ailc *Resource) Configuration() interface{} {
	return ailc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ailc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ailc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ailc *Resource) Dependencies() terra.Dependencies {
	return ailc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ailc *Resource) LifecycleManagement() *terra.Lifecycle {
	return ailc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ailc *Resource) Attributes() awsIvschatLoggingConfigurationAttributes {
	return awsIvschatLoggingConfigurationAttributes{ref: terra.ReferenceResource(ailc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ailc *Resource) ImportState(state io.Reader) error {
	ailc.state = &awsIvschatLoggingConfigurationState{}
	if err := json.NewDecoder(state).Decode(ailc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ailc.Type(), ailc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ailc *Resource) State() (*awsIvschatLoggingConfigurationState, bool) {
	return ailc.state, ailc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ailc *Resource) StateMust() *awsIvschatLoggingConfigurationState {
	if ailc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ailc.Type(), ailc.LocalName()))
	}
	return ailc.state
}

// Args contains the configurations for aws_ivschat_logging_configuration.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DestinationConfiguration: optional
	DestinationConfiguration *DestinationConfiguration `hcl:"destination_configuration,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsIvschatLoggingConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ivschat_logging_configuration.
func (ailc awsIvschatLoggingConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ailc.ref.Append("arn"))
}

// Id returns a reference to field id of aws_ivschat_logging_configuration.
func (ailc awsIvschatLoggingConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ailc.ref.Append("id"))
}

// Name returns a reference to field name of aws_ivschat_logging_configuration.
func (ailc awsIvschatLoggingConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ailc.ref.Append("name"))
}

// State returns a reference to field state of aws_ivschat_logging_configuration.
func (ailc awsIvschatLoggingConfigurationAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(ailc.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_ivschat_logging_configuration.
func (ailc awsIvschatLoggingConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ailc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ivschat_logging_configuration.
func (ailc awsIvschatLoggingConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ailc.ref.Append("tags_all"))
}

func (ailc awsIvschatLoggingConfigurationAttributes) DestinationConfiguration() terra.ListValue[DestinationConfigurationAttributes] {
	return terra.ReferenceAsList[DestinationConfigurationAttributes](ailc.ref.Append("destination_configuration"))
}

func (ailc awsIvschatLoggingConfigurationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ailc.ref.Append("timeouts"))
}

type awsIvschatLoggingConfigurationState struct {
	Arn                      string                          `json:"arn"`
	Id                       string                          `json:"id"`
	Name                     string                          `json:"name"`
	State                    string                          `json:"state"`
	Tags                     map[string]string               `json:"tags"`
	TagsAll                  map[string]string               `json:"tags_all"`
	DestinationConfiguration []DestinationConfigurationState `json:"destination_configuration"`
	Timeouts                 *TimeoutsState                  `json:"timeouts"`
}
