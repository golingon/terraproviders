// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_log_subscription_filter

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudwatch_log_subscription_filter.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudwatchLogSubscriptionFilterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aclsf *Resource) Type() string {
	return "aws_cloudwatch_log_subscription_filter"
}

// LocalName returns the local name for [Resource].
func (aclsf *Resource) LocalName() string {
	return aclsf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aclsf *Resource) Configuration() interface{} {
	return aclsf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aclsf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aclsf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aclsf *Resource) Dependencies() terra.Dependencies {
	return aclsf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aclsf *Resource) LifecycleManagement() *terra.Lifecycle {
	return aclsf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aclsf *Resource) Attributes() awsCloudwatchLogSubscriptionFilterAttributes {
	return awsCloudwatchLogSubscriptionFilterAttributes{ref: terra.ReferenceResource(aclsf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aclsf *Resource) ImportState(state io.Reader) error {
	aclsf.state = &awsCloudwatchLogSubscriptionFilterState{}
	if err := json.NewDecoder(state).Decode(aclsf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aclsf.Type(), aclsf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aclsf *Resource) State() (*awsCloudwatchLogSubscriptionFilterState, bool) {
	return aclsf.state, aclsf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aclsf *Resource) StateMust() *awsCloudwatchLogSubscriptionFilterState {
	if aclsf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aclsf.Type(), aclsf.LocalName()))
	}
	return aclsf.state
}

// Args contains the configurations for aws_cloudwatch_log_subscription_filter.
type Args struct {
	// DestinationArn: string, required
	DestinationArn terra.StringValue `hcl:"destination_arn,attr" validate:"required"`
	// Distribution: string, optional
	Distribution terra.StringValue `hcl:"distribution,attr"`
	// FilterPattern: string, required
	FilterPattern terra.StringValue `hcl:"filter_pattern,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogGroupName: string, required
	LogGroupName terra.StringValue `hcl:"log_group_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
}

type awsCloudwatchLogSubscriptionFilterAttributes struct {
	ref terra.Reference
}

// DestinationArn returns a reference to field destination_arn of aws_cloudwatch_log_subscription_filter.
func (aclsf awsCloudwatchLogSubscriptionFilterAttributes) DestinationArn() terra.StringValue {
	return terra.ReferenceAsString(aclsf.ref.Append("destination_arn"))
}

// Distribution returns a reference to field distribution of aws_cloudwatch_log_subscription_filter.
func (aclsf awsCloudwatchLogSubscriptionFilterAttributes) Distribution() terra.StringValue {
	return terra.ReferenceAsString(aclsf.ref.Append("distribution"))
}

// FilterPattern returns a reference to field filter_pattern of aws_cloudwatch_log_subscription_filter.
func (aclsf awsCloudwatchLogSubscriptionFilterAttributes) FilterPattern() terra.StringValue {
	return terra.ReferenceAsString(aclsf.ref.Append("filter_pattern"))
}

// Id returns a reference to field id of aws_cloudwatch_log_subscription_filter.
func (aclsf awsCloudwatchLogSubscriptionFilterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aclsf.ref.Append("id"))
}

// LogGroupName returns a reference to field log_group_name of aws_cloudwatch_log_subscription_filter.
func (aclsf awsCloudwatchLogSubscriptionFilterAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(aclsf.ref.Append("log_group_name"))
}

// Name returns a reference to field name of aws_cloudwatch_log_subscription_filter.
func (aclsf awsCloudwatchLogSubscriptionFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aclsf.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_cloudwatch_log_subscription_filter.
func (aclsf awsCloudwatchLogSubscriptionFilterAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(aclsf.ref.Append("role_arn"))
}

type awsCloudwatchLogSubscriptionFilterState struct {
	DestinationArn string `json:"destination_arn"`
	Distribution   string `json:"distribution"`
	FilterPattern  string `json:"filter_pattern"`
	Id             string `json:"id"`
	LogGroupName   string `json:"log_group_name"`
	Name           string `json:"name"`
	RoleArn        string `json:"role_arn"`
}
