// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opensearch_package

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_opensearch_package.
type Resource struct {
	Name      string
	Args      Args
	state     *awsOpensearchPackageState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aop *Resource) Type() string {
	return "aws_opensearch_package"
}

// LocalName returns the local name for [Resource].
func (aop *Resource) LocalName() string {
	return aop.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aop *Resource) Configuration() interface{} {
	return aop.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aop *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aop)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aop *Resource) Dependencies() terra.Dependencies {
	return aop.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aop *Resource) LifecycleManagement() *terra.Lifecycle {
	return aop.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aop *Resource) Attributes() awsOpensearchPackageAttributes {
	return awsOpensearchPackageAttributes{ref: terra.ReferenceResource(aop)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aop *Resource) ImportState(state io.Reader) error {
	aop.state = &awsOpensearchPackageState{}
	if err := json.NewDecoder(state).Decode(aop.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aop.Type(), aop.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aop *Resource) State() (*awsOpensearchPackageState, bool) {
	return aop.state, aop.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aop *Resource) StateMust() *awsOpensearchPackageState {
	if aop.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aop.Type(), aop.LocalName()))
	}
	return aop.state
}

// Args contains the configurations for aws_opensearch_package.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PackageDescription: string, optional
	PackageDescription terra.StringValue `hcl:"package_description,attr"`
	// PackageName: string, required
	PackageName terra.StringValue `hcl:"package_name,attr" validate:"required"`
	// PackageType: string, required
	PackageType terra.StringValue `hcl:"package_type,attr" validate:"required"`
	// PackageSource: required
	PackageSource *PackageSource `hcl:"package_source,block" validate:"required"`
}

type awsOpensearchPackageAttributes struct {
	ref terra.Reference
}

// AvailablePackageVersion returns a reference to field available_package_version of aws_opensearch_package.
func (aop awsOpensearchPackageAttributes) AvailablePackageVersion() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("available_package_version"))
}

// Id returns a reference to field id of aws_opensearch_package.
func (aop awsOpensearchPackageAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("id"))
}

// PackageDescription returns a reference to field package_description of aws_opensearch_package.
func (aop awsOpensearchPackageAttributes) PackageDescription() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("package_description"))
}

// PackageId returns a reference to field package_id of aws_opensearch_package.
func (aop awsOpensearchPackageAttributes) PackageId() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("package_id"))
}

// PackageName returns a reference to field package_name of aws_opensearch_package.
func (aop awsOpensearchPackageAttributes) PackageName() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("package_name"))
}

// PackageType returns a reference to field package_type of aws_opensearch_package.
func (aop awsOpensearchPackageAttributes) PackageType() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("package_type"))
}

func (aop awsOpensearchPackageAttributes) PackageSource() terra.ListValue[PackageSourceAttributes] {
	return terra.ReferenceAsList[PackageSourceAttributes](aop.ref.Append("package_source"))
}

type awsOpensearchPackageState struct {
	AvailablePackageVersion string               `json:"available_package_version"`
	Id                      string               `json:"id"`
	PackageDescription      string               `json:"package_description"`
	PackageId               string               `json:"package_id"`
	PackageName             string               `json:"package_name"`
	PackageType             string               `json:"package_type"`
	PackageSource           []PackageSourceState `json:"package_source"`
}
