// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_memorydb_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataClusterEndpointAttributes struct {
	ref terra.Reference
}

func (ce DataClusterEndpointAttributes) InternalRef() (terra.Reference, error) {
	return ce.ref, nil
}

func (ce DataClusterEndpointAttributes) InternalWithRef(ref terra.Reference) DataClusterEndpointAttributes {
	return DataClusterEndpointAttributes{ref: ref}
}

func (ce DataClusterEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ce.ref.InternalTokens()
}

func (ce DataClusterEndpointAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("address"))
}

func (ce DataClusterEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ce.ref.Append("port"))
}

type DataShardsAttributes struct {
	ref terra.Reference
}

func (s DataShardsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataShardsAttributes) InternalWithRef(ref terra.Reference) DataShardsAttributes {
	return DataShardsAttributes{ref: ref}
}

func (s DataShardsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataShardsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s DataShardsAttributes) NumNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("num_nodes"))
}

func (s DataShardsAttributes) Slots() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("slots"))
}

func (s DataShardsAttributes) Nodes() terra.SetValue[DataShardsNodesAttributes] {
	return terra.ReferenceAsSet[DataShardsNodesAttributes](s.ref.Append("nodes"))
}

type DataShardsNodesAttributes struct {
	ref terra.Reference
}

func (n DataShardsNodesAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n DataShardsNodesAttributes) InternalWithRef(ref terra.Reference) DataShardsNodesAttributes {
	return DataShardsNodesAttributes{ref: ref}
}

func (n DataShardsNodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n DataShardsNodesAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("availability_zone"))
}

func (n DataShardsNodesAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("create_time"))
}

func (n DataShardsNodesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("name"))
}

func (n DataShardsNodesAttributes) Endpoint() terra.ListValue[DataShardsNodesEndpointAttributes] {
	return terra.ReferenceAsList[DataShardsNodesEndpointAttributes](n.ref.Append("endpoint"))
}

type DataShardsNodesEndpointAttributes struct {
	ref terra.Reference
}

func (e DataShardsNodesEndpointAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e DataShardsNodesEndpointAttributes) InternalWithRef(ref terra.Reference) DataShardsNodesEndpointAttributes {
	return DataShardsNodesEndpointAttributes{ref: ref}
}

func (e DataShardsNodesEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e DataShardsNodesEndpointAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("address"))
}

func (e DataShardsNodesEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("port"))
}

type DataClusterEndpointState struct {
	Address string  `json:"address"`
	Port    float64 `json:"port"`
}

type DataShardsState struct {
	Name     string                 `json:"name"`
	NumNodes float64                `json:"num_nodes"`
	Slots    string                 `json:"slots"`
	Nodes    []DataShardsNodesState `json:"nodes"`
}

type DataShardsNodesState struct {
	AvailabilityZone string                         `json:"availability_zone"`
	CreateTime       string                         `json:"create_time"`
	Name             string                         `json:"name"`
	Endpoint         []DataShardsNodesEndpointState `json:"endpoint"`
}

type DataShardsNodesEndpointState struct {
	Address string  `json:"address"`
	Port    float64 `json:"port"`
}
