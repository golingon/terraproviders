// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lakeformation_data_cells_filter

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lakeformation_data_cells_filter.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLakeformationDataCellsFilterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aldcf *Resource) Type() string {
	return "aws_lakeformation_data_cells_filter"
}

// LocalName returns the local name for [Resource].
func (aldcf *Resource) LocalName() string {
	return aldcf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aldcf *Resource) Configuration() interface{} {
	return aldcf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aldcf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aldcf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aldcf *Resource) Dependencies() terra.Dependencies {
	return aldcf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aldcf *Resource) LifecycleManagement() *terra.Lifecycle {
	return aldcf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aldcf *Resource) Attributes() awsLakeformationDataCellsFilterAttributes {
	return awsLakeformationDataCellsFilterAttributes{ref: terra.ReferenceResource(aldcf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aldcf *Resource) ImportState(state io.Reader) error {
	aldcf.state = &awsLakeformationDataCellsFilterState{}
	if err := json.NewDecoder(state).Decode(aldcf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aldcf.Type(), aldcf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aldcf *Resource) State() (*awsLakeformationDataCellsFilterState, bool) {
	return aldcf.state, aldcf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aldcf *Resource) StateMust() *awsLakeformationDataCellsFilterState {
	if aldcf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aldcf.Type(), aldcf.LocalName()))
	}
	return aldcf.state
}

// Args contains the configurations for aws_lakeformation_data_cells_filter.
type Args struct {
	// TableData: min=0
	TableData []TableData `hcl:"table_data,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsLakeformationDataCellsFilterAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_lakeformation_data_cells_filter.
func (aldcf awsLakeformationDataCellsFilterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aldcf.ref.Append("id"))
}

func (aldcf awsLakeformationDataCellsFilterAttributes) TableData() terra.ListValue[TableDataAttributes] {
	return terra.ReferenceAsList[TableDataAttributes](aldcf.ref.Append("table_data"))
}

func (aldcf awsLakeformationDataCellsFilterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aldcf.ref.Append("timeouts"))
}

type awsLakeformationDataCellsFilterState struct {
	Id        string           `json:"id"`
	TableData []TableDataState `json:"table_data"`
	Timeouts  *TimeoutsState   `json:"timeouts"`
}
