// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opsworks_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_opsworks_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *awsOpsworksInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aoi *Resource) Type() string {
	return "aws_opsworks_instance"
}

// LocalName returns the local name for [Resource].
func (aoi *Resource) LocalName() string {
	return aoi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aoi *Resource) Configuration() interface{} {
	return aoi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aoi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aoi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aoi *Resource) Dependencies() terra.Dependencies {
	return aoi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aoi *Resource) LifecycleManagement() *terra.Lifecycle {
	return aoi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aoi *Resource) Attributes() awsOpsworksInstanceAttributes {
	return awsOpsworksInstanceAttributes{ref: terra.ReferenceResource(aoi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aoi *Resource) ImportState(state io.Reader) error {
	aoi.state = &awsOpsworksInstanceState{}
	if err := json.NewDecoder(state).Decode(aoi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aoi.Type(), aoi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aoi *Resource) State() (*awsOpsworksInstanceState, bool) {
	return aoi.state, aoi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aoi *Resource) StateMust() *awsOpsworksInstanceState {
	if aoi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aoi.Type(), aoi.LocalName()))
	}
	return aoi.state
}

// Args contains the configurations for aws_opsworks_instance.
type Args struct {
	// AgentVersion: string, optional
	AgentVersion terra.StringValue `hcl:"agent_version,attr"`
	// AmiId: string, optional
	AmiId terra.StringValue `hcl:"ami_id,attr"`
	// Architecture: string, optional
	Architecture terra.StringValue `hcl:"architecture,attr"`
	// AutoScalingType: string, optional
	AutoScalingType terra.StringValue `hcl:"auto_scaling_type,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// CreatedAt: string, optional
	CreatedAt terra.StringValue `hcl:"created_at,attr"`
	// DeleteEbs: bool, optional
	DeleteEbs terra.BoolValue `hcl:"delete_ebs,attr"`
	// DeleteEip: bool, optional
	DeleteEip terra.BoolValue `hcl:"delete_eip,attr"`
	// EbsOptimized: bool, optional
	EbsOptimized terra.BoolValue `hcl:"ebs_optimized,attr"`
	// EcsClusterArn: string, optional
	EcsClusterArn terra.StringValue `hcl:"ecs_cluster_arn,attr"`
	// ElasticIp: string, optional
	ElasticIp terra.StringValue `hcl:"elastic_ip,attr"`
	// Hostname: string, optional
	Hostname terra.StringValue `hcl:"hostname,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InfrastructureClass: string, optional
	InfrastructureClass terra.StringValue `hcl:"infrastructure_class,attr"`
	// InstallUpdatesOnBoot: bool, optional
	InstallUpdatesOnBoot terra.BoolValue `hcl:"install_updates_on_boot,attr"`
	// InstanceProfileArn: string, optional
	InstanceProfileArn terra.StringValue `hcl:"instance_profile_arn,attr"`
	// InstanceType: string, optional
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// LayerIds: list of string, required
	LayerIds terra.ListValue[terra.StringValue] `hcl:"layer_ids,attr" validate:"required"`
	// Os: string, optional
	Os terra.StringValue `hcl:"os,attr"`
	// RootDeviceType: string, optional
	RootDeviceType terra.StringValue `hcl:"root_device_type,attr"`
	// SecurityGroupIds: list of string, optional
	SecurityGroupIds terra.ListValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SshKeyName: string, optional
	SshKeyName terra.StringValue `hcl:"ssh_key_name,attr"`
	// StackId: string, required
	StackId terra.StringValue `hcl:"stack_id,attr" validate:"required"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Tenancy: string, optional
	Tenancy terra.StringValue `hcl:"tenancy,attr"`
	// VirtualizationType: string, optional
	VirtualizationType terra.StringValue `hcl:"virtualization_type,attr"`
	// EbsBlockDevice: min=0
	EbsBlockDevice []EbsBlockDevice `hcl:"ebs_block_device,block" validate:"min=0"`
	// EphemeralBlockDevice: min=0
	EphemeralBlockDevice []EphemeralBlockDevice `hcl:"ephemeral_block_device,block" validate:"min=0"`
	// RootBlockDevice: min=0
	RootBlockDevice []RootBlockDevice `hcl:"root_block_device,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsOpsworksInstanceAttributes struct {
	ref terra.Reference
}

// AgentVersion returns a reference to field agent_version of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) AgentVersion() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("agent_version"))
}

// AmiId returns a reference to field ami_id of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) AmiId() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("ami_id"))
}

// Architecture returns a reference to field architecture of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) Architecture() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("architecture"))
}

// AutoScalingType returns a reference to field auto_scaling_type of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) AutoScalingType() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("auto_scaling_type"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("availability_zone"))
}

// CreatedAt returns a reference to field created_at of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("created_at"))
}

// DeleteEbs returns a reference to field delete_ebs of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) DeleteEbs() terra.BoolValue {
	return terra.ReferenceAsBool(aoi.ref.Append("delete_ebs"))
}

// DeleteEip returns a reference to field delete_eip of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) DeleteEip() terra.BoolValue {
	return terra.ReferenceAsBool(aoi.ref.Append("delete_eip"))
}

// EbsOptimized returns a reference to field ebs_optimized of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) EbsOptimized() terra.BoolValue {
	return terra.ReferenceAsBool(aoi.ref.Append("ebs_optimized"))
}

// Ec2InstanceId returns a reference to field ec2_instance_id of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) Ec2InstanceId() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("ec2_instance_id"))
}

// EcsClusterArn returns a reference to field ecs_cluster_arn of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) EcsClusterArn() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("ecs_cluster_arn"))
}

// ElasticIp returns a reference to field elastic_ip of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) ElasticIp() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("elastic_ip"))
}

// Hostname returns a reference to field hostname of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("hostname"))
}

// Id returns a reference to field id of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("id"))
}

// InfrastructureClass returns a reference to field infrastructure_class of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) InfrastructureClass() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("infrastructure_class"))
}

// InstallUpdatesOnBoot returns a reference to field install_updates_on_boot of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) InstallUpdatesOnBoot() terra.BoolValue {
	return terra.ReferenceAsBool(aoi.ref.Append("install_updates_on_boot"))
}

// InstanceProfileArn returns a reference to field instance_profile_arn of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) InstanceProfileArn() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("instance_profile_arn"))
}

// InstanceType returns a reference to field instance_type of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("instance_type"))
}

// LastServiceErrorId returns a reference to field last_service_error_id of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) LastServiceErrorId() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("last_service_error_id"))
}

// LayerIds returns a reference to field layer_ids of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) LayerIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aoi.ref.Append("layer_ids"))
}

// Os returns a reference to field os of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) Os() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("os"))
}

// Platform returns a reference to field platform of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) Platform() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("platform"))
}

// PrivateDns returns a reference to field private_dns of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) PrivateDns() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("private_dns"))
}

// PrivateIp returns a reference to field private_ip of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) PrivateIp() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("private_ip"))
}

// PublicDns returns a reference to field public_dns of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) PublicDns() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("public_dns"))
}

// PublicIp returns a reference to field public_ip of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) PublicIp() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("public_ip"))
}

// RegisteredBy returns a reference to field registered_by of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) RegisteredBy() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("registered_by"))
}

// ReportedAgentVersion returns a reference to field reported_agent_version of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) ReportedAgentVersion() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("reported_agent_version"))
}

// ReportedOsFamily returns a reference to field reported_os_family of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) ReportedOsFamily() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("reported_os_family"))
}

// ReportedOsName returns a reference to field reported_os_name of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) ReportedOsName() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("reported_os_name"))
}

// ReportedOsVersion returns a reference to field reported_os_version of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) ReportedOsVersion() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("reported_os_version"))
}

// RootDeviceType returns a reference to field root_device_type of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) RootDeviceType() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("root_device_type"))
}

// RootDeviceVolumeId returns a reference to field root_device_volume_id of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) RootDeviceVolumeId() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("root_device_volume_id"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) SecurityGroupIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aoi.ref.Append("security_group_ids"))
}

// SshHostDsaKeyFingerprint returns a reference to field ssh_host_dsa_key_fingerprint of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) SshHostDsaKeyFingerprint() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("ssh_host_dsa_key_fingerprint"))
}

// SshHostRsaKeyFingerprint returns a reference to field ssh_host_rsa_key_fingerprint of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) SshHostRsaKeyFingerprint() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("ssh_host_rsa_key_fingerprint"))
}

// SshKeyName returns a reference to field ssh_key_name of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) SshKeyName() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("ssh_key_name"))
}

// StackId returns a reference to field stack_id of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) StackId() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("stack_id"))
}

// State returns a reference to field state of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("state"))
}

// Status returns a reference to field status of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("status"))
}

// SubnetId returns a reference to field subnet_id of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("subnet_id"))
}

// Tenancy returns a reference to field tenancy of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) Tenancy() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("tenancy"))
}

// VirtualizationType returns a reference to field virtualization_type of aws_opsworks_instance.
func (aoi awsOpsworksInstanceAttributes) VirtualizationType() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("virtualization_type"))
}

func (aoi awsOpsworksInstanceAttributes) EbsBlockDevice() terra.SetValue[EbsBlockDeviceAttributes] {
	return terra.ReferenceAsSet[EbsBlockDeviceAttributes](aoi.ref.Append("ebs_block_device"))
}

func (aoi awsOpsworksInstanceAttributes) EphemeralBlockDevice() terra.SetValue[EphemeralBlockDeviceAttributes] {
	return terra.ReferenceAsSet[EphemeralBlockDeviceAttributes](aoi.ref.Append("ephemeral_block_device"))
}

func (aoi awsOpsworksInstanceAttributes) RootBlockDevice() terra.SetValue[RootBlockDeviceAttributes] {
	return terra.ReferenceAsSet[RootBlockDeviceAttributes](aoi.ref.Append("root_block_device"))
}

func (aoi awsOpsworksInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aoi.ref.Append("timeouts"))
}

type awsOpsworksInstanceState struct {
	AgentVersion             string                      `json:"agent_version"`
	AmiId                    string                      `json:"ami_id"`
	Architecture             string                      `json:"architecture"`
	AutoScalingType          string                      `json:"auto_scaling_type"`
	AvailabilityZone         string                      `json:"availability_zone"`
	CreatedAt                string                      `json:"created_at"`
	DeleteEbs                bool                        `json:"delete_ebs"`
	DeleteEip                bool                        `json:"delete_eip"`
	EbsOptimized             bool                        `json:"ebs_optimized"`
	Ec2InstanceId            string                      `json:"ec2_instance_id"`
	EcsClusterArn            string                      `json:"ecs_cluster_arn"`
	ElasticIp                string                      `json:"elastic_ip"`
	Hostname                 string                      `json:"hostname"`
	Id                       string                      `json:"id"`
	InfrastructureClass      string                      `json:"infrastructure_class"`
	InstallUpdatesOnBoot     bool                        `json:"install_updates_on_boot"`
	InstanceProfileArn       string                      `json:"instance_profile_arn"`
	InstanceType             string                      `json:"instance_type"`
	LastServiceErrorId       string                      `json:"last_service_error_id"`
	LayerIds                 []string                    `json:"layer_ids"`
	Os                       string                      `json:"os"`
	Platform                 string                      `json:"platform"`
	PrivateDns               string                      `json:"private_dns"`
	PrivateIp                string                      `json:"private_ip"`
	PublicDns                string                      `json:"public_dns"`
	PublicIp                 string                      `json:"public_ip"`
	RegisteredBy             string                      `json:"registered_by"`
	ReportedAgentVersion     string                      `json:"reported_agent_version"`
	ReportedOsFamily         string                      `json:"reported_os_family"`
	ReportedOsName           string                      `json:"reported_os_name"`
	ReportedOsVersion        string                      `json:"reported_os_version"`
	RootDeviceType           string                      `json:"root_device_type"`
	RootDeviceVolumeId       string                      `json:"root_device_volume_id"`
	SecurityGroupIds         []string                    `json:"security_group_ids"`
	SshHostDsaKeyFingerprint string                      `json:"ssh_host_dsa_key_fingerprint"`
	SshHostRsaKeyFingerprint string                      `json:"ssh_host_rsa_key_fingerprint"`
	SshKeyName               string                      `json:"ssh_key_name"`
	StackId                  string                      `json:"stack_id"`
	State                    string                      `json:"state"`
	Status                   string                      `json:"status"`
	SubnetId                 string                      `json:"subnet_id"`
	Tenancy                  string                      `json:"tenancy"`
	VirtualizationType       string                      `json:"virtualization_type"`
	EbsBlockDevice           []EbsBlockDeviceState       `json:"ebs_block_device"`
	EphemeralBlockDevice     []EphemeralBlockDeviceState `json:"ephemeral_block_device"`
	RootBlockDevice          []RootBlockDeviceState      `json:"root_block_device"`
	Timeouts                 *TimeoutsState              `json:"timeouts"`
}
