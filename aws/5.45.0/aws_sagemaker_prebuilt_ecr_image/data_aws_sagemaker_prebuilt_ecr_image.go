// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_prebuilt_ecr_image

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_sagemaker_prebuilt_ecr_image.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aspei *DataSource) DataSource() string {
	return "aws_sagemaker_prebuilt_ecr_image"
}

// LocalName returns the local name for [DataSource].
func (aspei *DataSource) LocalName() string {
	return aspei.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aspei *DataSource) Configuration() interface{} {
	return aspei.Args
}

// Attributes returns the attributes for [DataSource].
func (aspei *DataSource) Attributes() dataAwsSagemakerPrebuiltEcrImageAttributes {
	return dataAwsSagemakerPrebuiltEcrImageAttributes{ref: terra.ReferenceDataSource(aspei)}
}

// DataArgs contains the configurations for aws_sagemaker_prebuilt_ecr_image.
type DataArgs struct {
	// DnsSuffix: string, optional
	DnsSuffix terra.StringValue `hcl:"dns_suffix,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageTag: string, optional
	ImageTag terra.StringValue `hcl:"image_tag,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// RepositoryName: string, required
	RepositoryName terra.StringValue `hcl:"repository_name,attr" validate:"required"`
}

type dataAwsSagemakerPrebuiltEcrImageAttributes struct {
	ref terra.Reference
}

// DnsSuffix returns a reference to field dns_suffix of aws_sagemaker_prebuilt_ecr_image.
func (aspei dataAwsSagemakerPrebuiltEcrImageAttributes) DnsSuffix() terra.StringValue {
	return terra.ReferenceAsString(aspei.ref.Append("dns_suffix"))
}

// Id returns a reference to field id of aws_sagemaker_prebuilt_ecr_image.
func (aspei dataAwsSagemakerPrebuiltEcrImageAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aspei.ref.Append("id"))
}

// ImageTag returns a reference to field image_tag of aws_sagemaker_prebuilt_ecr_image.
func (aspei dataAwsSagemakerPrebuiltEcrImageAttributes) ImageTag() terra.StringValue {
	return terra.ReferenceAsString(aspei.ref.Append("image_tag"))
}

// Region returns a reference to field region of aws_sagemaker_prebuilt_ecr_image.
func (aspei dataAwsSagemakerPrebuiltEcrImageAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(aspei.ref.Append("region"))
}

// RegistryId returns a reference to field registry_id of aws_sagemaker_prebuilt_ecr_image.
func (aspei dataAwsSagemakerPrebuiltEcrImageAttributes) RegistryId() terra.StringValue {
	return terra.ReferenceAsString(aspei.ref.Append("registry_id"))
}

// RegistryPath returns a reference to field registry_path of aws_sagemaker_prebuilt_ecr_image.
func (aspei dataAwsSagemakerPrebuiltEcrImageAttributes) RegistryPath() terra.StringValue {
	return terra.ReferenceAsString(aspei.ref.Append("registry_path"))
}

// RepositoryName returns a reference to field repository_name of aws_sagemaker_prebuilt_ecr_image.
func (aspei dataAwsSagemakerPrebuiltEcrImageAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(aspei.ref.Append("repository_name"))
}
