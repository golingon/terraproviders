// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecs_capacity_provider

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ecs_capacity_provider.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEcsCapacityProviderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aecp *Resource) Type() string {
	return "aws_ecs_capacity_provider"
}

// LocalName returns the local name for [Resource].
func (aecp *Resource) LocalName() string {
	return aecp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aecp *Resource) Configuration() interface{} {
	return aecp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aecp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aecp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aecp *Resource) Dependencies() terra.Dependencies {
	return aecp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aecp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aecp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aecp *Resource) Attributes() awsEcsCapacityProviderAttributes {
	return awsEcsCapacityProviderAttributes{ref: terra.ReferenceResource(aecp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aecp *Resource) ImportState(state io.Reader) error {
	aecp.state = &awsEcsCapacityProviderState{}
	if err := json.NewDecoder(state).Decode(aecp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aecp.Type(), aecp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aecp *Resource) State() (*awsEcsCapacityProviderState, bool) {
	return aecp.state, aecp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aecp *Resource) StateMust() *awsEcsCapacityProviderState {
	if aecp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aecp.Type(), aecp.LocalName()))
	}
	return aecp.state
}

// Args contains the configurations for aws_ecs_capacity_provider.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// AutoScalingGroupProvider: required
	AutoScalingGroupProvider *AutoScalingGroupProvider `hcl:"auto_scaling_group_provider,block" validate:"required"`
}

type awsEcsCapacityProviderAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ecs_capacity_provider.
func (aecp awsEcsCapacityProviderAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aecp.ref.Append("arn"))
}

// Id returns a reference to field id of aws_ecs_capacity_provider.
func (aecp awsEcsCapacityProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aecp.ref.Append("id"))
}

// Name returns a reference to field name of aws_ecs_capacity_provider.
func (aecp awsEcsCapacityProviderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aecp.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_ecs_capacity_provider.
func (aecp awsEcsCapacityProviderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aecp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ecs_capacity_provider.
func (aecp awsEcsCapacityProviderAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aecp.ref.Append("tags_all"))
}

func (aecp awsEcsCapacityProviderAttributes) AutoScalingGroupProvider() terra.ListValue[AutoScalingGroupProviderAttributes] {
	return terra.ReferenceAsList[AutoScalingGroupProviderAttributes](aecp.ref.Append("auto_scaling_group_provider"))
}

type awsEcsCapacityProviderState struct {
	Arn                      string                          `json:"arn"`
	Id                       string                          `json:"id"`
	Name                     string                          `json:"name"`
	Tags                     map[string]string               `json:"tags"`
	TagsAll                  map[string]string               `json:"tags_all"`
	AutoScalingGroupProvider []AutoScalingGroupProviderState `json:"auto_scaling_group_provider"`
}
