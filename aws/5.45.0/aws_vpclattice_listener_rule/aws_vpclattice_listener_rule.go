// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpclattice_listener_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpclattice_listener_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpclatticeListenerRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avlr *Resource) Type() string {
	return "aws_vpclattice_listener_rule"
}

// LocalName returns the local name for [Resource].
func (avlr *Resource) LocalName() string {
	return avlr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avlr *Resource) Configuration() interface{} {
	return avlr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avlr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avlr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avlr *Resource) Dependencies() terra.Dependencies {
	return avlr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avlr *Resource) LifecycleManagement() *terra.Lifecycle {
	return avlr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avlr *Resource) Attributes() awsVpclatticeListenerRuleAttributes {
	return awsVpclatticeListenerRuleAttributes{ref: terra.ReferenceResource(avlr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avlr *Resource) ImportState(state io.Reader) error {
	avlr.state = &awsVpclatticeListenerRuleState{}
	if err := json.NewDecoder(state).Decode(avlr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avlr.Type(), avlr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avlr *Resource) State() (*awsVpclatticeListenerRuleState, bool) {
	return avlr.state, avlr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avlr *Resource) StateMust() *awsVpclatticeListenerRuleState {
	if avlr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avlr.Type(), avlr.LocalName()))
	}
	return avlr.state
}

// Args contains the configurations for aws_vpclattice_listener_rule.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListenerIdentifier: string, required
	ListenerIdentifier terra.StringValue `hcl:"listener_identifier,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// ServiceIdentifier: string, required
	ServiceIdentifier terra.StringValue `hcl:"service_identifier,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Action: required
	Action *Action `hcl:"action,block" validate:"required"`
	// Match: required
	Match *Match `hcl:"match,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVpclatticeListenerRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpclattice_listener_rule.
func (avlr awsVpclatticeListenerRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(avlr.ref.Append("arn"))
}

// Id returns a reference to field id of aws_vpclattice_listener_rule.
func (avlr awsVpclatticeListenerRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avlr.ref.Append("id"))
}

// ListenerIdentifier returns a reference to field listener_identifier of aws_vpclattice_listener_rule.
func (avlr awsVpclatticeListenerRuleAttributes) ListenerIdentifier() terra.StringValue {
	return terra.ReferenceAsString(avlr.ref.Append("listener_identifier"))
}

// Name returns a reference to field name of aws_vpclattice_listener_rule.
func (avlr awsVpclatticeListenerRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avlr.ref.Append("name"))
}

// Priority returns a reference to field priority of aws_vpclattice_listener_rule.
func (avlr awsVpclatticeListenerRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(avlr.ref.Append("priority"))
}

// RuleId returns a reference to field rule_id of aws_vpclattice_listener_rule.
func (avlr awsVpclatticeListenerRuleAttributes) RuleId() terra.StringValue {
	return terra.ReferenceAsString(avlr.ref.Append("rule_id"))
}

// ServiceIdentifier returns a reference to field service_identifier of aws_vpclattice_listener_rule.
func (avlr awsVpclatticeListenerRuleAttributes) ServiceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(avlr.ref.Append("service_identifier"))
}

// Tags returns a reference to field tags of aws_vpclattice_listener_rule.
func (avlr awsVpclatticeListenerRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avlr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpclattice_listener_rule.
func (avlr awsVpclatticeListenerRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avlr.ref.Append("tags_all"))
}

func (avlr awsVpclatticeListenerRuleAttributes) Action() terra.ListValue[ActionAttributes] {
	return terra.ReferenceAsList[ActionAttributes](avlr.ref.Append("action"))
}

func (avlr awsVpclatticeListenerRuleAttributes) Match() terra.ListValue[MatchAttributes] {
	return terra.ReferenceAsList[MatchAttributes](avlr.ref.Append("match"))
}

func (avlr awsVpclatticeListenerRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avlr.ref.Append("timeouts"))
}

type awsVpclatticeListenerRuleState struct {
	Arn                string            `json:"arn"`
	Id                 string            `json:"id"`
	ListenerIdentifier string            `json:"listener_identifier"`
	Name               string            `json:"name"`
	Priority           float64           `json:"priority"`
	RuleId             string            `json:"rule_id"`
	ServiceIdentifier  string            `json:"service_identifier"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
	Action             []ActionState     `json:"action"`
	Match              []MatchState      `json:"match"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
