// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codestarconnections_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codestarconnections_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodestarconnectionsConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acc *Resource) Type() string {
	return "aws_codestarconnections_connection"
}

// LocalName returns the local name for [Resource].
func (acc *Resource) LocalName() string {
	return acc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acc *Resource) Configuration() interface{} {
	return acc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acc *Resource) Dependencies() terra.Dependencies {
	return acc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acc *Resource) Attributes() awsCodestarconnectionsConnectionAttributes {
	return awsCodestarconnectionsConnectionAttributes{ref: terra.ReferenceResource(acc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acc *Resource) ImportState(state io.Reader) error {
	acc.state = &awsCodestarconnectionsConnectionState{}
	if err := json.NewDecoder(state).Decode(acc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acc.Type(), acc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acc *Resource) State() (*awsCodestarconnectionsConnectionState, bool) {
	return acc.state, acc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acc *Resource) StateMust() *awsCodestarconnectionsConnectionState {
	if acc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acc.Type(), acc.LocalName()))
	}
	return acc.state
}

// Args contains the configurations for aws_codestarconnections_connection.
type Args struct {
	// HostArn: string, optional
	HostArn terra.StringValue `hcl:"host_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProviderType: string, optional
	ProviderType terra.StringValue `hcl:"provider_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsCodestarconnectionsConnectionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_codestarconnections_connection.
func (acc awsCodestarconnectionsConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("arn"))
}

// ConnectionStatus returns a reference to field connection_status of aws_codestarconnections_connection.
func (acc awsCodestarconnectionsConnectionAttributes) ConnectionStatus() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("connection_status"))
}

// HostArn returns a reference to field host_arn of aws_codestarconnections_connection.
func (acc awsCodestarconnectionsConnectionAttributes) HostArn() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("host_arn"))
}

// Id returns a reference to field id of aws_codestarconnections_connection.
func (acc awsCodestarconnectionsConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("id"))
}

// Name returns a reference to field name of aws_codestarconnections_connection.
func (acc awsCodestarconnectionsConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("name"))
}

// ProviderType returns a reference to field provider_type of aws_codestarconnections_connection.
func (acc awsCodestarconnectionsConnectionAttributes) ProviderType() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("provider_type"))
}

// Tags returns a reference to field tags of aws_codestarconnections_connection.
func (acc awsCodestarconnectionsConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_codestarconnections_connection.
func (acc awsCodestarconnectionsConnectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acc.ref.Append("tags_all"))
}

type awsCodestarconnectionsConnectionState struct {
	Arn              string            `json:"arn"`
	ConnectionStatus string            `json:"connection_status"`
	HostArn          string            `json:"host_arn"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	ProviderType     string            `json:"provider_type"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
}
