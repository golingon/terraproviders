// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ram_resource_share

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_ram_resource_share.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (arrs *DataSource) DataSource() string {
	return "aws_ram_resource_share"
}

// LocalName returns the local name for [DataSource].
func (arrs *DataSource) LocalName() string {
	return arrs.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (arrs *DataSource) Configuration() interface{} {
	return arrs.Args
}

// Attributes returns the attributes for [DataSource].
func (arrs *DataSource) Attributes() dataAwsRamResourceShareAttributes {
	return dataAwsRamResourceShareAttributes{ref: terra.ReferenceDataSource(arrs)}
}

// DataArgs contains the configurations for aws_ram_resource_share.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ResourceOwner: string, required
	ResourceOwner terra.StringValue `hcl:"resource_owner,attr" validate:"required"`
	// ResourceShareStatus: string, optional
	ResourceShareStatus terra.StringValue `hcl:"resource_share_status,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filter: min=0
	Filter []DataFilter `hcl:"filter,block" validate:"min=0"`
}

type dataAwsRamResourceShareAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ram_resource_share.
func (arrs dataAwsRamResourceShareAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arrs.ref.Append("arn"))
}

// Id returns a reference to field id of aws_ram_resource_share.
func (arrs dataAwsRamResourceShareAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arrs.ref.Append("id"))
}

// Name returns a reference to field name of aws_ram_resource_share.
func (arrs dataAwsRamResourceShareAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arrs.ref.Append("name"))
}

// OwningAccountId returns a reference to field owning_account_id of aws_ram_resource_share.
func (arrs dataAwsRamResourceShareAttributes) OwningAccountId() terra.StringValue {
	return terra.ReferenceAsString(arrs.ref.Append("owning_account_id"))
}

// ResourceArns returns a reference to field resource_arns of aws_ram_resource_share.
func (arrs dataAwsRamResourceShareAttributes) ResourceArns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](arrs.ref.Append("resource_arns"))
}

// ResourceOwner returns a reference to field resource_owner of aws_ram_resource_share.
func (arrs dataAwsRamResourceShareAttributes) ResourceOwner() terra.StringValue {
	return terra.ReferenceAsString(arrs.ref.Append("resource_owner"))
}

// ResourceShareStatus returns a reference to field resource_share_status of aws_ram_resource_share.
func (arrs dataAwsRamResourceShareAttributes) ResourceShareStatus() terra.StringValue {
	return terra.ReferenceAsString(arrs.ref.Append("resource_share_status"))
}

// Status returns a reference to field status of aws_ram_resource_share.
func (arrs dataAwsRamResourceShareAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(arrs.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_ram_resource_share.
func (arrs dataAwsRamResourceShareAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arrs.ref.Append("tags"))
}

func (arrs dataAwsRamResourceShareAttributes) Filter() terra.SetValue[DataFilterAttributes] {
	return terra.ReferenceAsSet[DataFilterAttributes](arrs.ref.Append("filter"))
}
