// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ses_domain_identity

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ses_domain_identity.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSesDomainIdentityState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asdi *Resource) Type() string {
	return "aws_ses_domain_identity"
}

// LocalName returns the local name for [Resource].
func (asdi *Resource) LocalName() string {
	return asdi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asdi *Resource) Configuration() interface{} {
	return asdi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asdi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asdi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asdi *Resource) Dependencies() terra.Dependencies {
	return asdi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asdi *Resource) LifecycleManagement() *terra.Lifecycle {
	return asdi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asdi *Resource) Attributes() awsSesDomainIdentityAttributes {
	return awsSesDomainIdentityAttributes{ref: terra.ReferenceResource(asdi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asdi *Resource) ImportState(state io.Reader) error {
	asdi.state = &awsSesDomainIdentityState{}
	if err := json.NewDecoder(state).Decode(asdi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asdi.Type(), asdi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asdi *Resource) State() (*awsSesDomainIdentityState, bool) {
	return asdi.state, asdi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asdi *Resource) StateMust() *awsSesDomainIdentityState {
	if asdi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asdi.Type(), asdi.LocalName()))
	}
	return asdi.state
}

// Args contains the configurations for aws_ses_domain_identity.
type Args struct {
	// Domain: string, required
	Domain terra.StringValue `hcl:"domain,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsSesDomainIdentityAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ses_domain_identity.
func (asdi awsSesDomainIdentityAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asdi.ref.Append("arn"))
}

// Domain returns a reference to field domain of aws_ses_domain_identity.
func (asdi awsSesDomainIdentityAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(asdi.ref.Append("domain"))
}

// Id returns a reference to field id of aws_ses_domain_identity.
func (asdi awsSesDomainIdentityAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asdi.ref.Append("id"))
}

// VerificationToken returns a reference to field verification_token of aws_ses_domain_identity.
func (asdi awsSesDomainIdentityAttributes) VerificationToken() terra.StringValue {
	return terra.ReferenceAsString(asdi.ref.Append("verification_token"))
}

type awsSesDomainIdentityState struct {
	Arn               string `json:"arn"`
	Domain            string `json:"domain"`
	Id                string `json:"id"`
	VerificationToken string `json:"verification_token"`
}
