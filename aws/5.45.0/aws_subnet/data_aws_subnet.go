// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_subnet

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_subnet.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (as *DataSource) DataSource() string {
	return "aws_subnet"
}

// LocalName returns the local name for [DataSource].
func (as *DataSource) LocalName() string {
	return as.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (as *DataSource) Configuration() interface{} {
	return as.Args
}

// Attributes returns the attributes for [DataSource].
func (as *DataSource) Attributes() dataAwsSubnetAttributes {
	return dataAwsSubnetAttributes{ref: terra.ReferenceDataSource(as)}
}

// DataArgs contains the configurations for aws_subnet.
type DataArgs struct {
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// AvailabilityZoneId: string, optional
	AvailabilityZoneId terra.StringValue `hcl:"availability_zone_id,attr"`
	// CidrBlock: string, optional
	CidrBlock terra.StringValue `hcl:"cidr_block,attr"`
	// DefaultForAz: bool, optional
	DefaultForAz terra.BoolValue `hcl:"default_for_az,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Ipv6CidrBlock: string, optional
	Ipv6CidrBlock terra.StringValue `hcl:"ipv6_cidr_block,attr"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VpcId: string, optional
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// Filter: min=0
	Filter []DataFilter `hcl:"filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *DataTimeouts `hcl:"timeouts,block"`
}

type dataAwsSubnetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_subnet.
func (as dataAwsSubnetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("arn"))
}

// AssignIpv6AddressOnCreation returns a reference to field assign_ipv6_address_on_creation of aws_subnet.
func (as dataAwsSubnetAttributes) AssignIpv6AddressOnCreation() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("assign_ipv6_address_on_creation"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_subnet.
func (as dataAwsSubnetAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("availability_zone"))
}

// AvailabilityZoneId returns a reference to field availability_zone_id of aws_subnet.
func (as dataAwsSubnetAttributes) AvailabilityZoneId() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("availability_zone_id"))
}

// AvailableIpAddressCount returns a reference to field available_ip_address_count of aws_subnet.
func (as dataAwsSubnetAttributes) AvailableIpAddressCount() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("available_ip_address_count"))
}

// CidrBlock returns a reference to field cidr_block of aws_subnet.
func (as dataAwsSubnetAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("cidr_block"))
}

// CustomerOwnedIpv4Pool returns a reference to field customer_owned_ipv4_pool of aws_subnet.
func (as dataAwsSubnetAttributes) CustomerOwnedIpv4Pool() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("customer_owned_ipv4_pool"))
}

// DefaultForAz returns a reference to field default_for_az of aws_subnet.
func (as dataAwsSubnetAttributes) DefaultForAz() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("default_for_az"))
}

// EnableDns64 returns a reference to field enable_dns64 of aws_subnet.
func (as dataAwsSubnetAttributes) EnableDns64() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("enable_dns64"))
}

// EnableLniAtDeviceIndex returns a reference to field enable_lni_at_device_index of aws_subnet.
func (as dataAwsSubnetAttributes) EnableLniAtDeviceIndex() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("enable_lni_at_device_index"))
}

// EnableResourceNameDnsARecordOnLaunch returns a reference to field enable_resource_name_dns_a_record_on_launch of aws_subnet.
func (as dataAwsSubnetAttributes) EnableResourceNameDnsARecordOnLaunch() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("enable_resource_name_dns_a_record_on_launch"))
}

// EnableResourceNameDnsAaaaRecordOnLaunch returns a reference to field enable_resource_name_dns_aaaa_record_on_launch of aws_subnet.
func (as dataAwsSubnetAttributes) EnableResourceNameDnsAaaaRecordOnLaunch() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("enable_resource_name_dns_aaaa_record_on_launch"))
}

// Id returns a reference to field id of aws_subnet.
func (as dataAwsSubnetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("id"))
}

// Ipv6CidrBlock returns a reference to field ipv6_cidr_block of aws_subnet.
func (as dataAwsSubnetAttributes) Ipv6CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("ipv6_cidr_block"))
}

// Ipv6CidrBlockAssociationId returns a reference to field ipv6_cidr_block_association_id of aws_subnet.
func (as dataAwsSubnetAttributes) Ipv6CidrBlockAssociationId() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("ipv6_cidr_block_association_id"))
}

// Ipv6Native returns a reference to field ipv6_native of aws_subnet.
func (as dataAwsSubnetAttributes) Ipv6Native() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("ipv6_native"))
}

// MapCustomerOwnedIpOnLaunch returns a reference to field map_customer_owned_ip_on_launch of aws_subnet.
func (as dataAwsSubnetAttributes) MapCustomerOwnedIpOnLaunch() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("map_customer_owned_ip_on_launch"))
}

// MapPublicIpOnLaunch returns a reference to field map_public_ip_on_launch of aws_subnet.
func (as dataAwsSubnetAttributes) MapPublicIpOnLaunch() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("map_public_ip_on_launch"))
}

// OutpostArn returns a reference to field outpost_arn of aws_subnet.
func (as dataAwsSubnetAttributes) OutpostArn() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("outpost_arn"))
}

// OwnerId returns a reference to field owner_id of aws_subnet.
func (as dataAwsSubnetAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("owner_id"))
}

// PrivateDnsHostnameTypeOnLaunch returns a reference to field private_dns_hostname_type_on_launch of aws_subnet.
func (as dataAwsSubnetAttributes) PrivateDnsHostnameTypeOnLaunch() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("private_dns_hostname_type_on_launch"))
}

// State returns a reference to field state of aws_subnet.
func (as dataAwsSubnetAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_subnet.
func (as dataAwsSubnetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](as.ref.Append("tags"))
}

// VpcId returns a reference to field vpc_id of aws_subnet.
func (as dataAwsSubnetAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("vpc_id"))
}

func (as dataAwsSubnetAttributes) Filter() terra.SetValue[DataFilterAttributes] {
	return terra.ReferenceAsSet[DataFilterAttributes](as.ref.Append("filter"))
}

func (as dataAwsSubnetAttributes) Timeouts() DataTimeoutsAttributes {
	return terra.ReferenceAsSingle[DataTimeoutsAttributes](as.ref.Append("timeouts"))
}
