// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_routing_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_connect_routing_profile.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConnectRoutingProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acrp *Resource) Type() string {
	return "aws_connect_routing_profile"
}

// LocalName returns the local name for [Resource].
func (acrp *Resource) LocalName() string {
	return acrp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acrp *Resource) Configuration() interface{} {
	return acrp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acrp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acrp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acrp *Resource) Dependencies() terra.Dependencies {
	return acrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acrp *Resource) LifecycleManagement() *terra.Lifecycle {
	return acrp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acrp *Resource) Attributes() awsConnectRoutingProfileAttributes {
	return awsConnectRoutingProfileAttributes{ref: terra.ReferenceResource(acrp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acrp *Resource) ImportState(state io.Reader) error {
	acrp.state = &awsConnectRoutingProfileState{}
	if err := json.NewDecoder(state).Decode(acrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acrp.Type(), acrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acrp *Resource) State() (*awsConnectRoutingProfileState, bool) {
	return acrp.state, acrp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acrp *Resource) StateMust() *awsConnectRoutingProfileState {
	if acrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acrp.Type(), acrp.LocalName()))
	}
	return acrp.state
}

// Args contains the configurations for aws_connect_routing_profile.
type Args struct {
	// DefaultOutboundQueueId: string, required
	DefaultOutboundQueueId terra.StringValue `hcl:"default_outbound_queue_id,attr" validate:"required"`
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// MediaConcurrencies: min=1
	MediaConcurrencies []MediaConcurrencies `hcl:"media_concurrencies,block" validate:"min=1"`
	// QueueConfigs: min=0
	QueueConfigs []QueueConfigs `hcl:"queue_configs,block" validate:"min=0"`
}

type awsConnectRoutingProfileAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_connect_routing_profile.
func (acrp awsConnectRoutingProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acrp.ref.Append("arn"))
}

// DefaultOutboundQueueId returns a reference to field default_outbound_queue_id of aws_connect_routing_profile.
func (acrp awsConnectRoutingProfileAttributes) DefaultOutboundQueueId() terra.StringValue {
	return terra.ReferenceAsString(acrp.ref.Append("default_outbound_queue_id"))
}

// Description returns a reference to field description of aws_connect_routing_profile.
func (acrp awsConnectRoutingProfileAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acrp.ref.Append("description"))
}

// Id returns a reference to field id of aws_connect_routing_profile.
func (acrp awsConnectRoutingProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acrp.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_connect_routing_profile.
func (acrp awsConnectRoutingProfileAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(acrp.ref.Append("instance_id"))
}

// Name returns a reference to field name of aws_connect_routing_profile.
func (acrp awsConnectRoutingProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acrp.ref.Append("name"))
}

// RoutingProfileId returns a reference to field routing_profile_id of aws_connect_routing_profile.
func (acrp awsConnectRoutingProfileAttributes) RoutingProfileId() terra.StringValue {
	return terra.ReferenceAsString(acrp.ref.Append("routing_profile_id"))
}

// Tags returns a reference to field tags of aws_connect_routing_profile.
func (acrp awsConnectRoutingProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acrp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_connect_routing_profile.
func (acrp awsConnectRoutingProfileAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acrp.ref.Append("tags_all"))
}

func (acrp awsConnectRoutingProfileAttributes) MediaConcurrencies() terra.SetValue[MediaConcurrenciesAttributes] {
	return terra.ReferenceAsSet[MediaConcurrenciesAttributes](acrp.ref.Append("media_concurrencies"))
}

func (acrp awsConnectRoutingProfileAttributes) QueueConfigs() terra.SetValue[QueueConfigsAttributes] {
	return terra.ReferenceAsSet[QueueConfigsAttributes](acrp.ref.Append("queue_configs"))
}

type awsConnectRoutingProfileState struct {
	Arn                    string                    `json:"arn"`
	DefaultOutboundQueueId string                    `json:"default_outbound_queue_id"`
	Description            string                    `json:"description"`
	Id                     string                    `json:"id"`
	InstanceId             string                    `json:"instance_id"`
	Name                   string                    `json:"name"`
	RoutingProfileId       string                    `json:"routing_profile_id"`
	Tags                   map[string]string         `json:"tags"`
	TagsAll                map[string]string         `json:"tags_all"`
	MediaConcurrencies     []MediaConcurrenciesState `json:"media_concurrencies"`
	QueueConfigs           []QueueConfigsState       `json:"queue_configs"`
}
