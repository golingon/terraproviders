// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_user_hierarchy_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_connect_user_hierarchy_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConnectUserHierarchyGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acuhg *Resource) Type() string {
	return "aws_connect_user_hierarchy_group"
}

// LocalName returns the local name for [Resource].
func (acuhg *Resource) LocalName() string {
	return acuhg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acuhg *Resource) Configuration() interface{} {
	return acuhg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acuhg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acuhg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acuhg *Resource) Dependencies() terra.Dependencies {
	return acuhg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acuhg *Resource) LifecycleManagement() *terra.Lifecycle {
	return acuhg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acuhg *Resource) Attributes() awsConnectUserHierarchyGroupAttributes {
	return awsConnectUserHierarchyGroupAttributes{ref: terra.ReferenceResource(acuhg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acuhg *Resource) ImportState(state io.Reader) error {
	acuhg.state = &awsConnectUserHierarchyGroupState{}
	if err := json.NewDecoder(state).Decode(acuhg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acuhg.Type(), acuhg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acuhg *Resource) State() (*awsConnectUserHierarchyGroupState, bool) {
	return acuhg.state, acuhg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acuhg *Resource) StateMust() *awsConnectUserHierarchyGroupState {
	if acuhg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acuhg.Type(), acuhg.LocalName()))
	}
	return acuhg.state
}

// Args contains the configurations for aws_connect_user_hierarchy_group.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParentGroupId: string, optional
	ParentGroupId terra.StringValue `hcl:"parent_group_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsConnectUserHierarchyGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_connect_user_hierarchy_group.
func (acuhg awsConnectUserHierarchyGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acuhg.ref.Append("arn"))
}

// HierarchyGroupId returns a reference to field hierarchy_group_id of aws_connect_user_hierarchy_group.
func (acuhg awsConnectUserHierarchyGroupAttributes) HierarchyGroupId() terra.StringValue {
	return terra.ReferenceAsString(acuhg.ref.Append("hierarchy_group_id"))
}

// Id returns a reference to field id of aws_connect_user_hierarchy_group.
func (acuhg awsConnectUserHierarchyGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acuhg.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_connect_user_hierarchy_group.
func (acuhg awsConnectUserHierarchyGroupAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(acuhg.ref.Append("instance_id"))
}

// LevelId returns a reference to field level_id of aws_connect_user_hierarchy_group.
func (acuhg awsConnectUserHierarchyGroupAttributes) LevelId() terra.StringValue {
	return terra.ReferenceAsString(acuhg.ref.Append("level_id"))
}

// Name returns a reference to field name of aws_connect_user_hierarchy_group.
func (acuhg awsConnectUserHierarchyGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acuhg.ref.Append("name"))
}

// ParentGroupId returns a reference to field parent_group_id of aws_connect_user_hierarchy_group.
func (acuhg awsConnectUserHierarchyGroupAttributes) ParentGroupId() terra.StringValue {
	return terra.ReferenceAsString(acuhg.ref.Append("parent_group_id"))
}

// Tags returns a reference to field tags of aws_connect_user_hierarchy_group.
func (acuhg awsConnectUserHierarchyGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acuhg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_connect_user_hierarchy_group.
func (acuhg awsConnectUserHierarchyGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acuhg.ref.Append("tags_all"))
}

func (acuhg awsConnectUserHierarchyGroupAttributes) HierarchyPath() terra.ListValue[HierarchyPathAttributes] {
	return terra.ReferenceAsList[HierarchyPathAttributes](acuhg.ref.Append("hierarchy_path"))
}

type awsConnectUserHierarchyGroupState struct {
	Arn              string               `json:"arn"`
	HierarchyGroupId string               `json:"hierarchy_group_id"`
	Id               string               `json:"id"`
	InstanceId       string               `json:"instance_id"`
	LevelId          string               `json:"level_id"`
	Name             string               `json:"name"`
	ParentGroupId    string               `json:"parent_group_id"`
	Tags             map[string]string    `json:"tags"`
	TagsAll          map[string]string    `json:"tags_all"`
	HierarchyPath    []HierarchyPathState `json:"hierarchy_path"`
}
