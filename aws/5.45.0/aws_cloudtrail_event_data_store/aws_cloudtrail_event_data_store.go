// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudtrail_event_data_store

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudtrail_event_data_store.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudtrailEventDataStoreState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aceds *Resource) Type() string {
	return "aws_cloudtrail_event_data_store"
}

// LocalName returns the local name for [Resource].
func (aceds *Resource) LocalName() string {
	return aceds.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aceds *Resource) Configuration() interface{} {
	return aceds.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aceds *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aceds)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aceds *Resource) Dependencies() terra.Dependencies {
	return aceds.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aceds *Resource) LifecycleManagement() *terra.Lifecycle {
	return aceds.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aceds *Resource) Attributes() awsCloudtrailEventDataStoreAttributes {
	return awsCloudtrailEventDataStoreAttributes{ref: terra.ReferenceResource(aceds)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aceds *Resource) ImportState(state io.Reader) error {
	aceds.state = &awsCloudtrailEventDataStoreState{}
	if err := json.NewDecoder(state).Decode(aceds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aceds.Type(), aceds.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aceds *Resource) State() (*awsCloudtrailEventDataStoreState, bool) {
	return aceds.state, aceds.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aceds *Resource) StateMust() *awsCloudtrailEventDataStoreState {
	if aceds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aceds.Type(), aceds.LocalName()))
	}
	return aceds.state
}

// Args contains the configurations for aws_cloudtrail_event_data_store.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// MultiRegionEnabled: bool, optional
	MultiRegionEnabled terra.BoolValue `hcl:"multi_region_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OrganizationEnabled: bool, optional
	OrganizationEnabled terra.BoolValue `hcl:"organization_enabled,attr"`
	// RetentionPeriod: number, optional
	RetentionPeriod terra.NumberValue `hcl:"retention_period,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TerminationProtectionEnabled: bool, optional
	TerminationProtectionEnabled terra.BoolValue `hcl:"termination_protection_enabled,attr"`
	// AdvancedEventSelector: min=0
	AdvancedEventSelector []AdvancedEventSelector `hcl:"advanced_event_selector,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsCloudtrailEventDataStoreAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudtrail_event_data_store.
func (aceds awsCloudtrailEventDataStoreAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aceds.ref.Append("arn"))
}

// Id returns a reference to field id of aws_cloudtrail_event_data_store.
func (aceds awsCloudtrailEventDataStoreAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aceds.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_cloudtrail_event_data_store.
func (aceds awsCloudtrailEventDataStoreAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(aceds.ref.Append("kms_key_id"))
}

// MultiRegionEnabled returns a reference to field multi_region_enabled of aws_cloudtrail_event_data_store.
func (aceds awsCloudtrailEventDataStoreAttributes) MultiRegionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aceds.ref.Append("multi_region_enabled"))
}

// Name returns a reference to field name of aws_cloudtrail_event_data_store.
func (aceds awsCloudtrailEventDataStoreAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aceds.ref.Append("name"))
}

// OrganizationEnabled returns a reference to field organization_enabled of aws_cloudtrail_event_data_store.
func (aceds awsCloudtrailEventDataStoreAttributes) OrganizationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aceds.ref.Append("organization_enabled"))
}

// RetentionPeriod returns a reference to field retention_period of aws_cloudtrail_event_data_store.
func (aceds awsCloudtrailEventDataStoreAttributes) RetentionPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(aceds.ref.Append("retention_period"))
}

// Tags returns a reference to field tags of aws_cloudtrail_event_data_store.
func (aceds awsCloudtrailEventDataStoreAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aceds.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cloudtrail_event_data_store.
func (aceds awsCloudtrailEventDataStoreAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aceds.ref.Append("tags_all"))
}

// TerminationProtectionEnabled returns a reference to field termination_protection_enabled of aws_cloudtrail_event_data_store.
func (aceds awsCloudtrailEventDataStoreAttributes) TerminationProtectionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aceds.ref.Append("termination_protection_enabled"))
}

func (aceds awsCloudtrailEventDataStoreAttributes) AdvancedEventSelector() terra.ListValue[AdvancedEventSelectorAttributes] {
	return terra.ReferenceAsList[AdvancedEventSelectorAttributes](aceds.ref.Append("advanced_event_selector"))
}

func (aceds awsCloudtrailEventDataStoreAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aceds.ref.Append("timeouts"))
}

type awsCloudtrailEventDataStoreState struct {
	Arn                          string                       `json:"arn"`
	Id                           string                       `json:"id"`
	KmsKeyId                     string                       `json:"kms_key_id"`
	MultiRegionEnabled           bool                         `json:"multi_region_enabled"`
	Name                         string                       `json:"name"`
	OrganizationEnabled          bool                         `json:"organization_enabled"`
	RetentionPeriod              float64                      `json:"retention_period"`
	Tags                         map[string]string            `json:"tags"`
	TagsAll                      map[string]string            `json:"tags_all"`
	TerminationProtectionEnabled bool                         `json:"termination_protection_enabled"`
	AdvancedEventSelector        []AdvancedEventSelectorState `json:"advanced_event_selector"`
	Timeouts                     *TimeoutsState               `json:"timeouts"`
}
