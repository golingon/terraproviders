// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudtrail_event_data_store

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AdvancedEventSelector struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// AdvancedEventSelectorFieldSelector: min=0
	FieldSelector []AdvancedEventSelectorFieldSelector `hcl:"field_selector,block" validate:"min=0"`
}

type AdvancedEventSelectorFieldSelector struct {
	// EndsWith: list of string, optional
	EndsWith terra.ListValue[terra.StringValue] `hcl:"ends_with,attr"`
	// Equals: list of string, optional
	Equals terra.ListValue[terra.StringValue] `hcl:"equals,attr"`
	// Field: string, optional
	Field terra.StringValue `hcl:"field,attr"`
	// NotEndsWith: list of string, optional
	NotEndsWith terra.ListValue[terra.StringValue] `hcl:"not_ends_with,attr"`
	// NotEquals: list of string, optional
	NotEquals terra.ListValue[terra.StringValue] `hcl:"not_equals,attr"`
	// NotStartsWith: list of string, optional
	NotStartsWith terra.ListValue[terra.StringValue] `hcl:"not_starts_with,attr"`
	// StartsWith: list of string, optional
	StartsWith terra.ListValue[terra.StringValue] `hcl:"starts_with,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type AdvancedEventSelectorAttributes struct {
	ref terra.Reference
}

func (aes AdvancedEventSelectorAttributes) InternalRef() (terra.Reference, error) {
	return aes.ref, nil
}

func (aes AdvancedEventSelectorAttributes) InternalWithRef(ref terra.Reference) AdvancedEventSelectorAttributes {
	return AdvancedEventSelectorAttributes{ref: ref}
}

func (aes AdvancedEventSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aes.ref.InternalTokens()
}

func (aes AdvancedEventSelectorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("name"))
}

func (aes AdvancedEventSelectorAttributes) FieldSelector() terra.SetValue[AdvancedEventSelectorFieldSelectorAttributes] {
	return terra.ReferenceAsSet[AdvancedEventSelectorFieldSelectorAttributes](aes.ref.Append("field_selector"))
}

type AdvancedEventSelectorFieldSelectorAttributes struct {
	ref terra.Reference
}

func (fs AdvancedEventSelectorFieldSelectorAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs AdvancedEventSelectorFieldSelectorAttributes) InternalWithRef(ref terra.Reference) AdvancedEventSelectorFieldSelectorAttributes {
	return AdvancedEventSelectorFieldSelectorAttributes{ref: ref}
}

func (fs AdvancedEventSelectorFieldSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs AdvancedEventSelectorFieldSelectorAttributes) EndsWith() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fs.ref.Append("ends_with"))
}

func (fs AdvancedEventSelectorFieldSelectorAttributes) Equals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fs.ref.Append("equals"))
}

func (fs AdvancedEventSelectorFieldSelectorAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("field"))
}

func (fs AdvancedEventSelectorFieldSelectorAttributes) NotEndsWith() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fs.ref.Append("not_ends_with"))
}

func (fs AdvancedEventSelectorFieldSelectorAttributes) NotEquals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fs.ref.Append("not_equals"))
}

func (fs AdvancedEventSelectorFieldSelectorAttributes) NotStartsWith() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fs.ref.Append("not_starts_with"))
}

func (fs AdvancedEventSelectorFieldSelectorAttributes) StartsWith() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fs.ref.Append("starts_with"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AdvancedEventSelectorState struct {
	Name          string                                    `json:"name"`
	FieldSelector []AdvancedEventSelectorFieldSelectorState `json:"field_selector"`
}

type AdvancedEventSelectorFieldSelectorState struct {
	EndsWith      []string `json:"ends_with"`
	Equals        []string `json:"equals"`
	Field         string   `json:"field"`
	NotEndsWith   []string `json:"not_ends_with"`
	NotEquals     []string `json:"not_equals"`
	NotStartsWith []string `json:"not_starts_with"`
	StartsWith    []string `json:"starts_with"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
