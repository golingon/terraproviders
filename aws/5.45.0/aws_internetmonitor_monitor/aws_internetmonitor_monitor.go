// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_internetmonitor_monitor

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_internetmonitor_monitor.
type Resource struct {
	Name      string
	Args      Args
	state     *awsInternetmonitorMonitorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aim *Resource) Type() string {
	return "aws_internetmonitor_monitor"
}

// LocalName returns the local name for [Resource].
func (aim *Resource) LocalName() string {
	return aim.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aim *Resource) Configuration() interface{} {
	return aim.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aim *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aim)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aim *Resource) Dependencies() terra.Dependencies {
	return aim.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aim *Resource) LifecycleManagement() *terra.Lifecycle {
	return aim.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aim *Resource) Attributes() awsInternetmonitorMonitorAttributes {
	return awsInternetmonitorMonitorAttributes{ref: terra.ReferenceResource(aim)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aim *Resource) ImportState(state io.Reader) error {
	aim.state = &awsInternetmonitorMonitorState{}
	if err := json.NewDecoder(state).Decode(aim.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aim.Type(), aim.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aim *Resource) State() (*awsInternetmonitorMonitorState, bool) {
	return aim.state, aim.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aim *Resource) StateMust() *awsInternetmonitorMonitorState {
	if aim.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aim.Type(), aim.LocalName()))
	}
	return aim.state
}

// Args contains the configurations for aws_internetmonitor_monitor.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxCityNetworksToMonitor: number, optional
	MaxCityNetworksToMonitor terra.NumberValue `hcl:"max_city_networks_to_monitor,attr"`
	// MonitorName: string, required
	MonitorName terra.StringValue `hcl:"monitor_name,attr" validate:"required"`
	// Resources: set of string, optional
	Resources terra.SetValue[terra.StringValue] `hcl:"resources,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TrafficPercentageToMonitor: number, optional
	TrafficPercentageToMonitor terra.NumberValue `hcl:"traffic_percentage_to_monitor,attr"`
	// HealthEventsConfig: optional
	HealthEventsConfig *HealthEventsConfig `hcl:"health_events_config,block"`
	// InternetMeasurementsLogDelivery: optional
	InternetMeasurementsLogDelivery *InternetMeasurementsLogDelivery `hcl:"internet_measurements_log_delivery,block"`
}

type awsInternetmonitorMonitorAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_internetmonitor_monitor.
func (aim awsInternetmonitorMonitorAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aim.ref.Append("arn"))
}

// Id returns a reference to field id of aws_internetmonitor_monitor.
func (aim awsInternetmonitorMonitorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aim.ref.Append("id"))
}

// MaxCityNetworksToMonitor returns a reference to field max_city_networks_to_monitor of aws_internetmonitor_monitor.
func (aim awsInternetmonitorMonitorAttributes) MaxCityNetworksToMonitor() terra.NumberValue {
	return terra.ReferenceAsNumber(aim.ref.Append("max_city_networks_to_monitor"))
}

// MonitorName returns a reference to field monitor_name of aws_internetmonitor_monitor.
func (aim awsInternetmonitorMonitorAttributes) MonitorName() terra.StringValue {
	return terra.ReferenceAsString(aim.ref.Append("monitor_name"))
}

// Resources returns a reference to field resources of aws_internetmonitor_monitor.
func (aim awsInternetmonitorMonitorAttributes) Resources() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aim.ref.Append("resources"))
}

// Status returns a reference to field status of aws_internetmonitor_monitor.
func (aim awsInternetmonitorMonitorAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aim.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_internetmonitor_monitor.
func (aim awsInternetmonitorMonitorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aim.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_internetmonitor_monitor.
func (aim awsInternetmonitorMonitorAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aim.ref.Append("tags_all"))
}

// TrafficPercentageToMonitor returns a reference to field traffic_percentage_to_monitor of aws_internetmonitor_monitor.
func (aim awsInternetmonitorMonitorAttributes) TrafficPercentageToMonitor() terra.NumberValue {
	return terra.ReferenceAsNumber(aim.ref.Append("traffic_percentage_to_monitor"))
}

func (aim awsInternetmonitorMonitorAttributes) HealthEventsConfig() terra.ListValue[HealthEventsConfigAttributes] {
	return terra.ReferenceAsList[HealthEventsConfigAttributes](aim.ref.Append("health_events_config"))
}

func (aim awsInternetmonitorMonitorAttributes) InternetMeasurementsLogDelivery() terra.ListValue[InternetMeasurementsLogDeliveryAttributes] {
	return terra.ReferenceAsList[InternetMeasurementsLogDeliveryAttributes](aim.ref.Append("internet_measurements_log_delivery"))
}

type awsInternetmonitorMonitorState struct {
	Arn                             string                                 `json:"arn"`
	Id                              string                                 `json:"id"`
	MaxCityNetworksToMonitor        float64                                `json:"max_city_networks_to_monitor"`
	MonitorName                     string                                 `json:"monitor_name"`
	Resources                       []string                               `json:"resources"`
	Status                          string                                 `json:"status"`
	Tags                            map[string]string                      `json:"tags"`
	TagsAll                         map[string]string                      `json:"tags_all"`
	TrafficPercentageToMonitor      float64                                `json:"traffic_percentage_to_monitor"`
	HealthEventsConfig              []HealthEventsConfigState              `json:"health_events_config"`
	InternetMeasurementsLogDelivery []InternetMeasurementsLogDeliveryState `json:"internet_measurements_log_delivery"`
}
