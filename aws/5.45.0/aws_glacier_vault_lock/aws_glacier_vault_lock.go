// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glacier_vault_lock

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glacier_vault_lock.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlacierVaultLockState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agvl *Resource) Type() string {
	return "aws_glacier_vault_lock"
}

// LocalName returns the local name for [Resource].
func (agvl *Resource) LocalName() string {
	return agvl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agvl *Resource) Configuration() interface{} {
	return agvl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agvl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agvl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agvl *Resource) Dependencies() terra.Dependencies {
	return agvl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agvl *Resource) LifecycleManagement() *terra.Lifecycle {
	return agvl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agvl *Resource) Attributes() awsGlacierVaultLockAttributes {
	return awsGlacierVaultLockAttributes{ref: terra.ReferenceResource(agvl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agvl *Resource) ImportState(state io.Reader) error {
	agvl.state = &awsGlacierVaultLockState{}
	if err := json.NewDecoder(state).Decode(agvl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agvl.Type(), agvl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agvl *Resource) State() (*awsGlacierVaultLockState, bool) {
	return agvl.state, agvl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agvl *Resource) StateMust() *awsGlacierVaultLockState {
	if agvl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agvl.Type(), agvl.LocalName()))
	}
	return agvl.state
}

// Args contains the configurations for aws_glacier_vault_lock.
type Args struct {
	// CompleteLock: bool, required
	CompleteLock terra.BoolValue `hcl:"complete_lock,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreDeletionError: bool, optional
	IgnoreDeletionError terra.BoolValue `hcl:"ignore_deletion_error,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// VaultName: string, required
	VaultName terra.StringValue `hcl:"vault_name,attr" validate:"required"`
}

type awsGlacierVaultLockAttributes struct {
	ref terra.Reference
}

// CompleteLock returns a reference to field complete_lock of aws_glacier_vault_lock.
func (agvl awsGlacierVaultLockAttributes) CompleteLock() terra.BoolValue {
	return terra.ReferenceAsBool(agvl.ref.Append("complete_lock"))
}

// Id returns a reference to field id of aws_glacier_vault_lock.
func (agvl awsGlacierVaultLockAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agvl.ref.Append("id"))
}

// IgnoreDeletionError returns a reference to field ignore_deletion_error of aws_glacier_vault_lock.
func (agvl awsGlacierVaultLockAttributes) IgnoreDeletionError() terra.BoolValue {
	return terra.ReferenceAsBool(agvl.ref.Append("ignore_deletion_error"))
}

// Policy returns a reference to field policy of aws_glacier_vault_lock.
func (agvl awsGlacierVaultLockAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(agvl.ref.Append("policy"))
}

// VaultName returns a reference to field vault_name of aws_glacier_vault_lock.
func (agvl awsGlacierVaultLockAttributes) VaultName() terra.StringValue {
	return terra.ReferenceAsString(agvl.ref.Append("vault_name"))
}

type awsGlacierVaultLockState struct {
	CompleteLock        bool   `json:"complete_lock"`
	Id                  string `json:"id"`
	IgnoreDeletionError bool   `json:"ignore_deletion_error"`
	Policy              string `json:"policy"`
	VaultName           string `json:"vault_name"`
}
