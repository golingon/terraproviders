// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kinesis_video_stream

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kinesis_video_stream.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKinesisVideoStreamState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akvs *Resource) Type() string {
	return "aws_kinesis_video_stream"
}

// LocalName returns the local name for [Resource].
func (akvs *Resource) LocalName() string {
	return akvs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akvs *Resource) Configuration() interface{} {
	return akvs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akvs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akvs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akvs *Resource) Dependencies() terra.Dependencies {
	return akvs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akvs *Resource) LifecycleManagement() *terra.Lifecycle {
	return akvs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akvs *Resource) Attributes() awsKinesisVideoStreamAttributes {
	return awsKinesisVideoStreamAttributes{ref: terra.ReferenceResource(akvs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akvs *Resource) ImportState(state io.Reader) error {
	akvs.state = &awsKinesisVideoStreamState{}
	if err := json.NewDecoder(state).Decode(akvs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akvs.Type(), akvs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akvs *Resource) State() (*awsKinesisVideoStreamState, bool) {
	return akvs.state, akvs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akvs *Resource) StateMust() *awsKinesisVideoStreamState {
	if akvs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akvs.Type(), akvs.LocalName()))
	}
	return akvs.state
}

// Args contains the configurations for aws_kinesis_video_stream.
type Args struct {
	// DataRetentionInHours: number, optional
	DataRetentionInHours terra.NumberValue `hcl:"data_retention_in_hours,attr"`
	// DeviceName: string, optional
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// MediaType: string, optional
	MediaType terra.StringValue `hcl:"media_type,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsKinesisVideoStreamAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_kinesis_video_stream.
func (akvs awsKinesisVideoStreamAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("arn"))
}

// CreationTime returns a reference to field creation_time of aws_kinesis_video_stream.
func (akvs awsKinesisVideoStreamAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("creation_time"))
}

// DataRetentionInHours returns a reference to field data_retention_in_hours of aws_kinesis_video_stream.
func (akvs awsKinesisVideoStreamAttributes) DataRetentionInHours() terra.NumberValue {
	return terra.ReferenceAsNumber(akvs.ref.Append("data_retention_in_hours"))
}

// DeviceName returns a reference to field device_name of aws_kinesis_video_stream.
func (akvs awsKinesisVideoStreamAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("device_name"))
}

// Id returns a reference to field id of aws_kinesis_video_stream.
func (akvs awsKinesisVideoStreamAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_kinesis_video_stream.
func (akvs awsKinesisVideoStreamAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("kms_key_id"))
}

// MediaType returns a reference to field media_type of aws_kinesis_video_stream.
func (akvs awsKinesisVideoStreamAttributes) MediaType() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("media_type"))
}

// Name returns a reference to field name of aws_kinesis_video_stream.
func (akvs awsKinesisVideoStreamAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_kinesis_video_stream.
func (akvs awsKinesisVideoStreamAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akvs.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_kinesis_video_stream.
func (akvs awsKinesisVideoStreamAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akvs.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_kinesis_video_stream.
func (akvs awsKinesisVideoStreamAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(akvs.ref.Append("version"))
}

func (akvs awsKinesisVideoStreamAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akvs.ref.Append("timeouts"))
}

type awsKinesisVideoStreamState struct {
	Arn                  string            `json:"arn"`
	CreationTime         string            `json:"creation_time"`
	DataRetentionInHours float64           `json:"data_retention_in_hours"`
	DeviceName           string            `json:"device_name"`
	Id                   string            `json:"id"`
	KmsKeyId             string            `json:"kms_key_id"`
	MediaType            string            `json:"media_type"`
	Name                 string            `json:"name"`
	Tags                 map[string]string `json:"tags"`
	TagsAll              map[string]string `json:"tags_all"`
	Version              string            `json:"version"`
	Timeouts             *TimeoutsState    `json:"timeouts"`
}
