// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codecatalyst_source_repository

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codecatalyst_source_repository.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodecatalystSourceRepositoryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acsr *Resource) Type() string {
	return "aws_codecatalyst_source_repository"
}

// LocalName returns the local name for [Resource].
func (acsr *Resource) LocalName() string {
	return acsr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acsr *Resource) Configuration() interface{} {
	return acsr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acsr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acsr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acsr *Resource) Dependencies() terra.Dependencies {
	return acsr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acsr *Resource) LifecycleManagement() *terra.Lifecycle {
	return acsr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acsr *Resource) Attributes() awsCodecatalystSourceRepositoryAttributes {
	return awsCodecatalystSourceRepositoryAttributes{ref: terra.ReferenceResource(acsr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acsr *Resource) ImportState(state io.Reader) error {
	acsr.state = &awsCodecatalystSourceRepositoryState{}
	if err := json.NewDecoder(state).Decode(acsr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acsr.Type(), acsr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acsr *Resource) State() (*awsCodecatalystSourceRepositoryState, bool) {
	return acsr.state, acsr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acsr *Resource) StateMust() *awsCodecatalystSourceRepositoryState {
	if acsr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acsr.Type(), acsr.LocalName()))
	}
	return acsr.state
}

// Args contains the configurations for aws_codecatalyst_source_repository.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProjectName: string, required
	ProjectName terra.StringValue `hcl:"project_name,attr" validate:"required"`
	// SpaceName: string, required
	SpaceName terra.StringValue `hcl:"space_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsCodecatalystSourceRepositoryAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_codecatalyst_source_repository.
func (acsr awsCodecatalystSourceRepositoryAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acsr.ref.Append("description"))
}

// Id returns a reference to field id of aws_codecatalyst_source_repository.
func (acsr awsCodecatalystSourceRepositoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acsr.ref.Append("id"))
}

// Name returns a reference to field name of aws_codecatalyst_source_repository.
func (acsr awsCodecatalystSourceRepositoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acsr.ref.Append("name"))
}

// ProjectName returns a reference to field project_name of aws_codecatalyst_source_repository.
func (acsr awsCodecatalystSourceRepositoryAttributes) ProjectName() terra.StringValue {
	return terra.ReferenceAsString(acsr.ref.Append("project_name"))
}

// SpaceName returns a reference to field space_name of aws_codecatalyst_source_repository.
func (acsr awsCodecatalystSourceRepositoryAttributes) SpaceName() terra.StringValue {
	return terra.ReferenceAsString(acsr.ref.Append("space_name"))
}

func (acsr awsCodecatalystSourceRepositoryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acsr.ref.Append("timeouts"))
}

type awsCodecatalystSourceRepositoryState struct {
	Description string         `json:"description"`
	Id          string         `json:"id"`
	Name        string         `json:"name"`
	ProjectName string         `json:"project_name"`
	SpaceName   string         `json:"space_name"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
