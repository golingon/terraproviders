// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iot_role_alias

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iot_role_alias.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIotRoleAliasState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aira *Resource) Type() string {
	return "aws_iot_role_alias"
}

// LocalName returns the local name for [Resource].
func (aira *Resource) LocalName() string {
	return aira.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aira *Resource) Configuration() interface{} {
	return aira.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aira *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aira)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aira *Resource) Dependencies() terra.Dependencies {
	return aira.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aira *Resource) LifecycleManagement() *terra.Lifecycle {
	return aira.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aira *Resource) Attributes() awsIotRoleAliasAttributes {
	return awsIotRoleAliasAttributes{ref: terra.ReferenceResource(aira)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aira *Resource) ImportState(state io.Reader) error {
	aira.state = &awsIotRoleAliasState{}
	if err := json.NewDecoder(state).Decode(aira.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aira.Type(), aira.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aira *Resource) State() (*awsIotRoleAliasState, bool) {
	return aira.state, aira.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aira *Resource) StateMust() *awsIotRoleAliasState {
	if aira.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aira.Type(), aira.LocalName()))
	}
	return aira.state
}

// Args contains the configurations for aws_iot_role_alias.
type Args struct {
	// Alias: string, required
	Alias terra.StringValue `hcl:"alias,attr" validate:"required"`
	// CredentialDuration: number, optional
	CredentialDuration terra.NumberValue `hcl:"credential_duration,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsIotRoleAliasAttributes struct {
	ref terra.Reference
}

// Alias returns a reference to field alias of aws_iot_role_alias.
func (aira awsIotRoleAliasAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(aira.ref.Append("alias"))
}

// Arn returns a reference to field arn of aws_iot_role_alias.
func (aira awsIotRoleAliasAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aira.ref.Append("arn"))
}

// CredentialDuration returns a reference to field credential_duration of aws_iot_role_alias.
func (aira awsIotRoleAliasAttributes) CredentialDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(aira.ref.Append("credential_duration"))
}

// Id returns a reference to field id of aws_iot_role_alias.
func (aira awsIotRoleAliasAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aira.ref.Append("id"))
}

// RoleArn returns a reference to field role_arn of aws_iot_role_alias.
func (aira awsIotRoleAliasAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(aira.ref.Append("role_arn"))
}

// Tags returns a reference to field tags of aws_iot_role_alias.
func (aira awsIotRoleAliasAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aira.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_iot_role_alias.
func (aira awsIotRoleAliasAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aira.ref.Append("tags_all"))
}

type awsIotRoleAliasState struct {
	Alias              string            `json:"alias"`
	Arn                string            `json:"arn"`
	CredentialDuration float64           `json:"credential_duration"`
	Id                 string            `json:"id"`
	RoleArn            string            `json:"role_arn"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
}
