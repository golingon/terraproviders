// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_service_discovery_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_service_discovery_service.
type Resource struct {
	Name      string
	Args      Args
	state     *awsServiceDiscoveryServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asds *Resource) Type() string {
	return "aws_service_discovery_service"
}

// LocalName returns the local name for [Resource].
func (asds *Resource) LocalName() string {
	return asds.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asds *Resource) Configuration() interface{} {
	return asds.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asds *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asds)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asds *Resource) Dependencies() terra.Dependencies {
	return asds.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asds *Resource) LifecycleManagement() *terra.Lifecycle {
	return asds.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asds *Resource) Attributes() awsServiceDiscoveryServiceAttributes {
	return awsServiceDiscoveryServiceAttributes{ref: terra.ReferenceResource(asds)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asds *Resource) ImportState(state io.Reader) error {
	asds.state = &awsServiceDiscoveryServiceState{}
	if err := json.NewDecoder(state).Decode(asds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asds.Type(), asds.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asds *Resource) State() (*awsServiceDiscoveryServiceState, bool) {
	return asds.state, asds.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asds *Resource) StateMust() *awsServiceDiscoveryServiceState {
	if asds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asds.Type(), asds.LocalName()))
	}
	return asds.state
}

// Args contains the configurations for aws_service_discovery_service.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NamespaceId: string, optional
	NamespaceId terra.StringValue `hcl:"namespace_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// DnsConfig: optional
	DnsConfig *DnsConfig `hcl:"dns_config,block"`
	// HealthCheckConfig: optional
	HealthCheckConfig *HealthCheckConfig `hcl:"health_check_config,block"`
	// HealthCheckCustomConfig: optional
	HealthCheckCustomConfig *HealthCheckCustomConfig `hcl:"health_check_custom_config,block"`
}

type awsServiceDiscoveryServiceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_service_discovery_service.
func (asds awsServiceDiscoveryServiceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asds.ref.Append("arn"))
}

// Description returns a reference to field description of aws_service_discovery_service.
func (asds awsServiceDiscoveryServiceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asds.ref.Append("description"))
}

// ForceDestroy returns a reference to field force_destroy of aws_service_discovery_service.
func (asds awsServiceDiscoveryServiceAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(asds.ref.Append("force_destroy"))
}

// Id returns a reference to field id of aws_service_discovery_service.
func (asds awsServiceDiscoveryServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asds.ref.Append("id"))
}

// Name returns a reference to field name of aws_service_discovery_service.
func (asds awsServiceDiscoveryServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asds.ref.Append("name"))
}

// NamespaceId returns a reference to field namespace_id of aws_service_discovery_service.
func (asds awsServiceDiscoveryServiceAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceAsString(asds.ref.Append("namespace_id"))
}

// Tags returns a reference to field tags of aws_service_discovery_service.
func (asds awsServiceDiscoveryServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asds.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_service_discovery_service.
func (asds awsServiceDiscoveryServiceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asds.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_service_discovery_service.
func (asds awsServiceDiscoveryServiceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(asds.ref.Append("type"))
}

func (asds awsServiceDiscoveryServiceAttributes) DnsConfig() terra.ListValue[DnsConfigAttributes] {
	return terra.ReferenceAsList[DnsConfigAttributes](asds.ref.Append("dns_config"))
}

func (asds awsServiceDiscoveryServiceAttributes) HealthCheckConfig() terra.ListValue[HealthCheckConfigAttributes] {
	return terra.ReferenceAsList[HealthCheckConfigAttributes](asds.ref.Append("health_check_config"))
}

func (asds awsServiceDiscoveryServiceAttributes) HealthCheckCustomConfig() terra.ListValue[HealthCheckCustomConfigAttributes] {
	return terra.ReferenceAsList[HealthCheckCustomConfigAttributes](asds.ref.Append("health_check_custom_config"))
}

type awsServiceDiscoveryServiceState struct {
	Arn                     string                         `json:"arn"`
	Description             string                         `json:"description"`
	ForceDestroy            bool                           `json:"force_destroy"`
	Id                      string                         `json:"id"`
	Name                    string                         `json:"name"`
	NamespaceId             string                         `json:"namespace_id"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	Type                    string                         `json:"type"`
	DnsConfig               []DnsConfigState               `json:"dns_config"`
	HealthCheckConfig       []HealthCheckConfigState       `json:"health_check_config"`
	HealthCheckCustomConfig []HealthCheckCustomConfigState `json:"health_check_custom_config"`
}
