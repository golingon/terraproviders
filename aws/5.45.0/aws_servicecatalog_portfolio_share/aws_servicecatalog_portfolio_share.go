// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_portfolio_share

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_servicecatalog_portfolio_share.
type Resource struct {
	Name      string
	Args      Args
	state     *awsServicecatalogPortfolioShareState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asps *Resource) Type() string {
	return "aws_servicecatalog_portfolio_share"
}

// LocalName returns the local name for [Resource].
func (asps *Resource) LocalName() string {
	return asps.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asps *Resource) Configuration() interface{} {
	return asps.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asps *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asps)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asps *Resource) Dependencies() terra.Dependencies {
	return asps.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asps *Resource) LifecycleManagement() *terra.Lifecycle {
	return asps.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asps *Resource) Attributes() awsServicecatalogPortfolioShareAttributes {
	return awsServicecatalogPortfolioShareAttributes{ref: terra.ReferenceResource(asps)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asps *Resource) ImportState(state io.Reader) error {
	asps.state = &awsServicecatalogPortfolioShareState{}
	if err := json.NewDecoder(state).Decode(asps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asps.Type(), asps.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asps *Resource) State() (*awsServicecatalogPortfolioShareState, bool) {
	return asps.state, asps.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asps *Resource) StateMust() *awsServicecatalogPortfolioShareState {
	if asps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asps.Type(), asps.LocalName()))
	}
	return asps.state
}

// Args contains the configurations for aws_servicecatalog_portfolio_share.
type Args struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PortfolioId: string, required
	PortfolioId terra.StringValue `hcl:"portfolio_id,attr" validate:"required"`
	// PrincipalId: string, required
	PrincipalId terra.StringValue `hcl:"principal_id,attr" validate:"required"`
	// SharePrincipals: bool, optional
	SharePrincipals terra.BoolValue `hcl:"share_principals,attr"`
	// ShareTagOptions: bool, optional
	ShareTagOptions terra.BoolValue `hcl:"share_tag_options,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// WaitForAcceptance: bool, optional
	WaitForAcceptance terra.BoolValue `hcl:"wait_for_acceptance,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsServicecatalogPortfolioShareAttributes struct {
	ref terra.Reference
}

// AcceptLanguage returns a reference to field accept_language of aws_servicecatalog_portfolio_share.
func (asps awsServicecatalogPortfolioShareAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceAsString(asps.ref.Append("accept_language"))
}

// Accepted returns a reference to field accepted of aws_servicecatalog_portfolio_share.
func (asps awsServicecatalogPortfolioShareAttributes) Accepted() terra.BoolValue {
	return terra.ReferenceAsBool(asps.ref.Append("accepted"))
}

// Id returns a reference to field id of aws_servicecatalog_portfolio_share.
func (asps awsServicecatalogPortfolioShareAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asps.ref.Append("id"))
}

// PortfolioId returns a reference to field portfolio_id of aws_servicecatalog_portfolio_share.
func (asps awsServicecatalogPortfolioShareAttributes) PortfolioId() terra.StringValue {
	return terra.ReferenceAsString(asps.ref.Append("portfolio_id"))
}

// PrincipalId returns a reference to field principal_id of aws_servicecatalog_portfolio_share.
func (asps awsServicecatalogPortfolioShareAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(asps.ref.Append("principal_id"))
}

// SharePrincipals returns a reference to field share_principals of aws_servicecatalog_portfolio_share.
func (asps awsServicecatalogPortfolioShareAttributes) SharePrincipals() terra.BoolValue {
	return terra.ReferenceAsBool(asps.ref.Append("share_principals"))
}

// ShareTagOptions returns a reference to field share_tag_options of aws_servicecatalog_portfolio_share.
func (asps awsServicecatalogPortfolioShareAttributes) ShareTagOptions() terra.BoolValue {
	return terra.ReferenceAsBool(asps.ref.Append("share_tag_options"))
}

// Type returns a reference to field type of aws_servicecatalog_portfolio_share.
func (asps awsServicecatalogPortfolioShareAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(asps.ref.Append("type"))
}

// WaitForAcceptance returns a reference to field wait_for_acceptance of aws_servicecatalog_portfolio_share.
func (asps awsServicecatalogPortfolioShareAttributes) WaitForAcceptance() terra.BoolValue {
	return terra.ReferenceAsBool(asps.ref.Append("wait_for_acceptance"))
}

func (asps awsServicecatalogPortfolioShareAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asps.ref.Append("timeouts"))
}

type awsServicecatalogPortfolioShareState struct {
	AcceptLanguage    string         `json:"accept_language"`
	Accepted          bool           `json:"accepted"`
	Id                string         `json:"id"`
	PortfolioId       string         `json:"portfolio_id"`
	PrincipalId       string         `json:"principal_id"`
	SharePrincipals   bool           `json:"share_principals"`
	ShareTagOptions   bool           `json:"share_tag_options"`
	Type              string         `json:"type"`
	WaitForAcceptance bool           `json:"wait_for_acceptance"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
