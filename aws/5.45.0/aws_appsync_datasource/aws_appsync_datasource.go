// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appsync_datasource

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_appsync_datasource.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppsyncDatasourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aad *Resource) Type() string {
	return "aws_appsync_datasource"
}

// LocalName returns the local name for [Resource].
func (aad *Resource) LocalName() string {
	return aad.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aad *Resource) Configuration() interface{} {
	return aad.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aad *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aad)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aad *Resource) Dependencies() terra.Dependencies {
	return aad.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aad *Resource) LifecycleManagement() *terra.Lifecycle {
	return aad.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aad *Resource) Attributes() awsAppsyncDatasourceAttributes {
	return awsAppsyncDatasourceAttributes{ref: terra.ReferenceResource(aad)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aad *Resource) ImportState(state io.Reader) error {
	aad.state = &awsAppsyncDatasourceState{}
	if err := json.NewDecoder(state).Decode(aad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aad.Type(), aad.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aad *Resource) State() (*awsAppsyncDatasourceState, bool) {
	return aad.state, aad.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aad *Resource) StateMust() *awsAppsyncDatasourceState {
	if aad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aad.Type(), aad.LocalName()))
	}
	return aad.state
}

// Args contains the configurations for aws_appsync_datasource.
type Args struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServiceRoleArn: string, optional
	ServiceRoleArn terra.StringValue `hcl:"service_role_arn,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// DynamodbConfig: optional
	DynamodbConfig *DynamodbConfig `hcl:"dynamodb_config,block"`
	// ElasticsearchConfig: optional
	ElasticsearchConfig *ElasticsearchConfig `hcl:"elasticsearch_config,block"`
	// EventBridgeConfig: optional
	EventBridgeConfig *EventBridgeConfig `hcl:"event_bridge_config,block"`
	// HttpConfig: optional
	HttpConfig *HttpConfig `hcl:"http_config,block"`
	// LambdaConfig: optional
	LambdaConfig *LambdaConfig `hcl:"lambda_config,block"`
	// OpensearchserviceConfig: optional
	OpensearchserviceConfig *OpensearchserviceConfig `hcl:"opensearchservice_config,block"`
	// RelationalDatabaseConfig: optional
	RelationalDatabaseConfig *RelationalDatabaseConfig `hcl:"relational_database_config,block"`
}

type awsAppsyncDatasourceAttributes struct {
	ref terra.Reference
}

// ApiId returns a reference to field api_id of aws_appsync_datasource.
func (aad awsAppsyncDatasourceAttributes) ApiId() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("api_id"))
}

// Arn returns a reference to field arn of aws_appsync_datasource.
func (aad awsAppsyncDatasourceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("arn"))
}

// Description returns a reference to field description of aws_appsync_datasource.
func (aad awsAppsyncDatasourceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("description"))
}

// Id returns a reference to field id of aws_appsync_datasource.
func (aad awsAppsyncDatasourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("id"))
}

// Name returns a reference to field name of aws_appsync_datasource.
func (aad awsAppsyncDatasourceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("name"))
}

// ServiceRoleArn returns a reference to field service_role_arn of aws_appsync_datasource.
func (aad awsAppsyncDatasourceAttributes) ServiceRoleArn() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("service_role_arn"))
}

// Type returns a reference to field type of aws_appsync_datasource.
func (aad awsAppsyncDatasourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("type"))
}

func (aad awsAppsyncDatasourceAttributes) DynamodbConfig() terra.ListValue[DynamodbConfigAttributes] {
	return terra.ReferenceAsList[DynamodbConfigAttributes](aad.ref.Append("dynamodb_config"))
}

func (aad awsAppsyncDatasourceAttributes) ElasticsearchConfig() terra.ListValue[ElasticsearchConfigAttributes] {
	return terra.ReferenceAsList[ElasticsearchConfigAttributes](aad.ref.Append("elasticsearch_config"))
}

func (aad awsAppsyncDatasourceAttributes) EventBridgeConfig() terra.ListValue[EventBridgeConfigAttributes] {
	return terra.ReferenceAsList[EventBridgeConfigAttributes](aad.ref.Append("event_bridge_config"))
}

func (aad awsAppsyncDatasourceAttributes) HttpConfig() terra.ListValue[HttpConfigAttributes] {
	return terra.ReferenceAsList[HttpConfigAttributes](aad.ref.Append("http_config"))
}

func (aad awsAppsyncDatasourceAttributes) LambdaConfig() terra.ListValue[LambdaConfigAttributes] {
	return terra.ReferenceAsList[LambdaConfigAttributes](aad.ref.Append("lambda_config"))
}

func (aad awsAppsyncDatasourceAttributes) OpensearchserviceConfig() terra.ListValue[OpensearchserviceConfigAttributes] {
	return terra.ReferenceAsList[OpensearchserviceConfigAttributes](aad.ref.Append("opensearchservice_config"))
}

func (aad awsAppsyncDatasourceAttributes) RelationalDatabaseConfig() terra.ListValue[RelationalDatabaseConfigAttributes] {
	return terra.ReferenceAsList[RelationalDatabaseConfigAttributes](aad.ref.Append("relational_database_config"))
}

type awsAppsyncDatasourceState struct {
	ApiId                    string                          `json:"api_id"`
	Arn                      string                          `json:"arn"`
	Description              string                          `json:"description"`
	Id                       string                          `json:"id"`
	Name                     string                          `json:"name"`
	ServiceRoleArn           string                          `json:"service_role_arn"`
	Type                     string                          `json:"type"`
	DynamodbConfig           []DynamodbConfigState           `json:"dynamodb_config"`
	ElasticsearchConfig      []ElasticsearchConfigState      `json:"elasticsearch_config"`
	EventBridgeConfig        []EventBridgeConfigState        `json:"event_bridge_config"`
	HttpConfig               []HttpConfigState               `json:"http_config"`
	LambdaConfig             []LambdaConfigState             `json:"lambda_config"`
	OpensearchserviceConfig  []OpensearchserviceConfigState  `json:"opensearchservice_config"`
	RelationalDatabaseConfig []RelationalDatabaseConfigState `json:"relational_database_config"`
}
