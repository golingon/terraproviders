// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_peering_connection_options

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpc_peering_connection_options.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpcPeeringConnectionOptionsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avpco *Resource) Type() string {
	return "aws_vpc_peering_connection_options"
}

// LocalName returns the local name for [Resource].
func (avpco *Resource) LocalName() string {
	return avpco.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avpco *Resource) Configuration() interface{} {
	return avpco.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avpco *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avpco)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avpco *Resource) Dependencies() terra.Dependencies {
	return avpco.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avpco *Resource) LifecycleManagement() *terra.Lifecycle {
	return avpco.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avpco *Resource) Attributes() awsVpcPeeringConnectionOptionsAttributes {
	return awsVpcPeeringConnectionOptionsAttributes{ref: terra.ReferenceResource(avpco)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avpco *Resource) ImportState(state io.Reader) error {
	avpco.state = &awsVpcPeeringConnectionOptionsState{}
	if err := json.NewDecoder(state).Decode(avpco.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avpco.Type(), avpco.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avpco *Resource) State() (*awsVpcPeeringConnectionOptionsState, bool) {
	return avpco.state, avpco.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avpco *Resource) StateMust() *awsVpcPeeringConnectionOptionsState {
	if avpco.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avpco.Type(), avpco.LocalName()))
	}
	return avpco.state
}

// Args contains the configurations for aws_vpc_peering_connection_options.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VpcPeeringConnectionId: string, required
	VpcPeeringConnectionId terra.StringValue `hcl:"vpc_peering_connection_id,attr" validate:"required"`
	// Accepter: optional
	Accepter *Accepter `hcl:"accepter,block"`
	// Requester: optional
	Requester *Requester `hcl:"requester,block"`
}

type awsVpcPeeringConnectionOptionsAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_vpc_peering_connection_options.
func (avpco awsVpcPeeringConnectionOptionsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avpco.ref.Append("id"))
}

// VpcPeeringConnectionId returns a reference to field vpc_peering_connection_id of aws_vpc_peering_connection_options.
func (avpco awsVpcPeeringConnectionOptionsAttributes) VpcPeeringConnectionId() terra.StringValue {
	return terra.ReferenceAsString(avpco.ref.Append("vpc_peering_connection_id"))
}

func (avpco awsVpcPeeringConnectionOptionsAttributes) Accepter() terra.ListValue[AccepterAttributes] {
	return terra.ReferenceAsList[AccepterAttributes](avpco.ref.Append("accepter"))
}

func (avpco awsVpcPeeringConnectionOptionsAttributes) Requester() terra.ListValue[RequesterAttributes] {
	return terra.ReferenceAsList[RequesterAttributes](avpco.ref.Append("requester"))
}

type awsVpcPeeringConnectionOptionsState struct {
	Id                     string           `json:"id"`
	VpcPeeringConnectionId string           `json:"vpc_peering_connection_id"`
	Accepter               []AccepterState  `json:"accepter"`
	Requester              []RequesterState `json:"requester"`
}
