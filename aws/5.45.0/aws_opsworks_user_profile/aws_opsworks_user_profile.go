// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opsworks_user_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_opsworks_user_profile.
type Resource struct {
	Name      string
	Args      Args
	state     *awsOpsworksUserProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aoup *Resource) Type() string {
	return "aws_opsworks_user_profile"
}

// LocalName returns the local name for [Resource].
func (aoup *Resource) LocalName() string {
	return aoup.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aoup *Resource) Configuration() interface{} {
	return aoup.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aoup *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aoup)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aoup *Resource) Dependencies() terra.Dependencies {
	return aoup.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aoup *Resource) LifecycleManagement() *terra.Lifecycle {
	return aoup.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aoup *Resource) Attributes() awsOpsworksUserProfileAttributes {
	return awsOpsworksUserProfileAttributes{ref: terra.ReferenceResource(aoup)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aoup *Resource) ImportState(state io.Reader) error {
	aoup.state = &awsOpsworksUserProfileState{}
	if err := json.NewDecoder(state).Decode(aoup.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aoup.Type(), aoup.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aoup *Resource) State() (*awsOpsworksUserProfileState, bool) {
	return aoup.state, aoup.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aoup *Resource) StateMust() *awsOpsworksUserProfileState {
	if aoup.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aoup.Type(), aoup.LocalName()))
	}
	return aoup.state
}

// Args contains the configurations for aws_opsworks_user_profile.
type Args struct {
	// AllowSelfManagement: bool, optional
	AllowSelfManagement terra.BoolValue `hcl:"allow_self_management,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SshPublicKey: string, optional
	SshPublicKey terra.StringValue `hcl:"ssh_public_key,attr"`
	// SshUsername: string, required
	SshUsername terra.StringValue `hcl:"ssh_username,attr" validate:"required"`
	// UserArn: string, required
	UserArn terra.StringValue `hcl:"user_arn,attr" validate:"required"`
}

type awsOpsworksUserProfileAttributes struct {
	ref terra.Reference
}

// AllowSelfManagement returns a reference to field allow_self_management of aws_opsworks_user_profile.
func (aoup awsOpsworksUserProfileAttributes) AllowSelfManagement() terra.BoolValue {
	return terra.ReferenceAsBool(aoup.ref.Append("allow_self_management"))
}

// Id returns a reference to field id of aws_opsworks_user_profile.
func (aoup awsOpsworksUserProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aoup.ref.Append("id"))
}

// SshPublicKey returns a reference to field ssh_public_key of aws_opsworks_user_profile.
func (aoup awsOpsworksUserProfileAttributes) SshPublicKey() terra.StringValue {
	return terra.ReferenceAsString(aoup.ref.Append("ssh_public_key"))
}

// SshUsername returns a reference to field ssh_username of aws_opsworks_user_profile.
func (aoup awsOpsworksUserProfileAttributes) SshUsername() terra.StringValue {
	return terra.ReferenceAsString(aoup.ref.Append("ssh_username"))
}

// UserArn returns a reference to field user_arn of aws_opsworks_user_profile.
func (aoup awsOpsworksUserProfileAttributes) UserArn() terra.StringValue {
	return terra.ReferenceAsString(aoup.ref.Append("user_arn"))
}

type awsOpsworksUserProfileState struct {
	AllowSelfManagement bool   `json:"allow_self_management"`
	Id                  string `json:"id"`
	SshPublicKey        string `json:"ssh_public_key"`
	SshUsername         string `json:"ssh_username"`
	UserArn             string `json:"user_arn"`
}
