// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_securityhub_insight

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_securityhub_insight.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSecurityhubInsightState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asi *Resource) Type() string {
	return "aws_securityhub_insight"
}

// LocalName returns the local name for [Resource].
func (asi *Resource) LocalName() string {
	return asi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asi *Resource) Configuration() interface{} {
	return asi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asi *Resource) Dependencies() terra.Dependencies {
	return asi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asi *Resource) LifecycleManagement() *terra.Lifecycle {
	return asi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asi *Resource) Attributes() awsSecurityhubInsightAttributes {
	return awsSecurityhubInsightAttributes{ref: terra.ReferenceResource(asi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asi *Resource) ImportState(state io.Reader) error {
	asi.state = &awsSecurityhubInsightState{}
	if err := json.NewDecoder(state).Decode(asi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asi.Type(), asi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asi *Resource) State() (*awsSecurityhubInsightState, bool) {
	return asi.state, asi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asi *Resource) StateMust() *awsSecurityhubInsightState {
	if asi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asi.Type(), asi.LocalName()))
	}
	return asi.state
}

// Args contains the configurations for aws_securityhub_insight.
type Args struct {
	// GroupByAttribute: string, required
	GroupByAttribute terra.StringValue `hcl:"group_by_attribute,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Filters: required
	Filters *Filters `hcl:"filters,block" validate:"required"`
}

type awsSecurityhubInsightAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_securityhub_insight.
func (asi awsSecurityhubInsightAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asi.ref.Append("arn"))
}

// GroupByAttribute returns a reference to field group_by_attribute of aws_securityhub_insight.
func (asi awsSecurityhubInsightAttributes) GroupByAttribute() terra.StringValue {
	return terra.ReferenceAsString(asi.ref.Append("group_by_attribute"))
}

// Id returns a reference to field id of aws_securityhub_insight.
func (asi awsSecurityhubInsightAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asi.ref.Append("id"))
}

// Name returns a reference to field name of aws_securityhub_insight.
func (asi awsSecurityhubInsightAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asi.ref.Append("name"))
}

func (asi awsSecurityhubInsightAttributes) Filters() terra.ListValue[FiltersAttributes] {
	return terra.ReferenceAsList[FiltersAttributes](asi.ref.Append("filters"))
}

type awsSecurityhubInsightState struct {
	Arn              string         `json:"arn"`
	GroupByAttribute string         `json:"group_by_attribute"`
	Id               string         `json:"id"`
	Name             string         `json:"name"`
	Filters          []FiltersState `json:"filters"`
}
