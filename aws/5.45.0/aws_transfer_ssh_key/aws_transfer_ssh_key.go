// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_transfer_ssh_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_transfer_ssh_key.
type Resource struct {
	Name      string
	Args      Args
	state     *awsTransferSshKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (atsk *Resource) Type() string {
	return "aws_transfer_ssh_key"
}

// LocalName returns the local name for [Resource].
func (atsk *Resource) LocalName() string {
	return atsk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (atsk *Resource) Configuration() interface{} {
	return atsk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (atsk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(atsk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (atsk *Resource) Dependencies() terra.Dependencies {
	return atsk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (atsk *Resource) LifecycleManagement() *terra.Lifecycle {
	return atsk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (atsk *Resource) Attributes() awsTransferSshKeyAttributes {
	return awsTransferSshKeyAttributes{ref: terra.ReferenceResource(atsk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (atsk *Resource) ImportState(state io.Reader) error {
	atsk.state = &awsTransferSshKeyState{}
	if err := json.NewDecoder(state).Decode(atsk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", atsk.Type(), atsk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (atsk *Resource) State() (*awsTransferSshKeyState, bool) {
	return atsk.state, atsk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (atsk *Resource) StateMust() *awsTransferSshKeyState {
	if atsk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", atsk.Type(), atsk.LocalName()))
	}
	return atsk.state
}

// Args contains the configurations for aws_transfer_ssh_key.
type Args struct {
	// Body: string, required
	Body terra.StringValue `hcl:"body,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServerId: string, required
	ServerId terra.StringValue `hcl:"server_id,attr" validate:"required"`
	// UserName: string, required
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
}

type awsTransferSshKeyAttributes struct {
	ref terra.Reference
}

// Body returns a reference to field body of aws_transfer_ssh_key.
func (atsk awsTransferSshKeyAttributes) Body() terra.StringValue {
	return terra.ReferenceAsString(atsk.ref.Append("body"))
}

// Id returns a reference to field id of aws_transfer_ssh_key.
func (atsk awsTransferSshKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(atsk.ref.Append("id"))
}

// ServerId returns a reference to field server_id of aws_transfer_ssh_key.
func (atsk awsTransferSshKeyAttributes) ServerId() terra.StringValue {
	return terra.ReferenceAsString(atsk.ref.Append("server_id"))
}

// UserName returns a reference to field user_name of aws_transfer_ssh_key.
func (atsk awsTransferSshKeyAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(atsk.ref.Append("user_name"))
}

type awsTransferSshKeyState struct {
	Body     string `json:"body"`
	Id       string `json:"id"`
	ServerId string `json:"server_id"`
	UserName string `json:"user_name"`
}
