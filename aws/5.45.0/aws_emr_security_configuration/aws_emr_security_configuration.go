// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_emr_security_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_emr_security_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEmrSecurityConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aesc *Resource) Type() string {
	return "aws_emr_security_configuration"
}

// LocalName returns the local name for [Resource].
func (aesc *Resource) LocalName() string {
	return aesc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aesc *Resource) Configuration() interface{} {
	return aesc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aesc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aesc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aesc *Resource) Dependencies() terra.Dependencies {
	return aesc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aesc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aesc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aesc *Resource) Attributes() awsEmrSecurityConfigurationAttributes {
	return awsEmrSecurityConfigurationAttributes{ref: terra.ReferenceResource(aesc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aesc *Resource) ImportState(state io.Reader) error {
	aesc.state = &awsEmrSecurityConfigurationState{}
	if err := json.NewDecoder(state).Decode(aesc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aesc.Type(), aesc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aesc *Resource) State() (*awsEmrSecurityConfigurationState, bool) {
	return aesc.state, aesc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aesc *Resource) StateMust() *awsEmrSecurityConfigurationState {
	if aesc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aesc.Type(), aesc.LocalName()))
	}
	return aesc.state
}

// Args contains the configurations for aws_emr_security_configuration.
type Args struct {
	// Configuration: string, required
	Configuration terra.StringValue `hcl:"configuration,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
}

type awsEmrSecurityConfigurationAttributes struct {
	ref terra.Reference
}

// Configuration returns a reference to field configuration of aws_emr_security_configuration.
func (aesc awsEmrSecurityConfigurationAttributes) Configuration() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("configuration"))
}

// CreationDate returns a reference to field creation_date of aws_emr_security_configuration.
func (aesc awsEmrSecurityConfigurationAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("creation_date"))
}

// Id returns a reference to field id of aws_emr_security_configuration.
func (aesc awsEmrSecurityConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("id"))
}

// Name returns a reference to field name of aws_emr_security_configuration.
func (aesc awsEmrSecurityConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_emr_security_configuration.
func (aesc awsEmrSecurityConfigurationAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(aesc.ref.Append("name_prefix"))
}

type awsEmrSecurityConfigurationState struct {
	Configuration string `json:"configuration"`
	CreationDate  string `json:"creation_date"`
	Id            string `json:"id"`
	Name          string `json:"name"`
	NamePrefix    string `json:"name_prefix"`
}
