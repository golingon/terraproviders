// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ami

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ami.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAmiState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aa *Resource) Type() string {
	return "aws_ami"
}

// LocalName returns the local name for [Resource].
func (aa *Resource) LocalName() string {
	return aa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aa *Resource) Configuration() interface{} {
	return aa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aa *Resource) Dependencies() terra.Dependencies {
	return aa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aa *Resource) Attributes() awsAmiAttributes {
	return awsAmiAttributes{ref: terra.ReferenceResource(aa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aa *Resource) ImportState(state io.Reader) error {
	aa.state = &awsAmiState{}
	if err := json.NewDecoder(state).Decode(aa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aa.Type(), aa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aa *Resource) State() (*awsAmiState, bool) {
	return aa.state, aa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aa *Resource) StateMust() *awsAmiState {
	if aa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aa.Type(), aa.LocalName()))
	}
	return aa.state
}

// Args contains the configurations for aws_ami.
type Args struct {
	// Architecture: string, optional
	Architecture terra.StringValue `hcl:"architecture,attr"`
	// BootMode: string, optional
	BootMode terra.StringValue `hcl:"boot_mode,attr"`
	// DeprecationTime: string, optional
	DeprecationTime terra.StringValue `hcl:"deprecation_time,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnaSupport: bool, optional
	EnaSupport terra.BoolValue `hcl:"ena_support,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageLocation: string, optional
	ImageLocation terra.StringValue `hcl:"image_location,attr"`
	// ImdsSupport: string, optional
	ImdsSupport terra.StringValue `hcl:"imds_support,attr"`
	// KernelId: string, optional
	KernelId terra.StringValue `hcl:"kernel_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RamdiskId: string, optional
	RamdiskId terra.StringValue `hcl:"ramdisk_id,attr"`
	// RootDeviceName: string, optional
	RootDeviceName terra.StringValue `hcl:"root_device_name,attr"`
	// SriovNetSupport: string, optional
	SriovNetSupport terra.StringValue `hcl:"sriov_net_support,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TpmSupport: string, optional
	TpmSupport terra.StringValue `hcl:"tpm_support,attr"`
	// VirtualizationType: string, optional
	VirtualizationType terra.StringValue `hcl:"virtualization_type,attr"`
	// EbsBlockDevice: min=0
	EbsBlockDevice []EbsBlockDevice `hcl:"ebs_block_device,block" validate:"min=0"`
	// EphemeralBlockDevice: min=0
	EphemeralBlockDevice []EphemeralBlockDevice `hcl:"ephemeral_block_device,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsAmiAttributes struct {
	ref terra.Reference
}

// Architecture returns a reference to field architecture of aws_ami.
func (aa awsAmiAttributes) Architecture() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("architecture"))
}

// Arn returns a reference to field arn of aws_ami.
func (aa awsAmiAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("arn"))
}

// BootMode returns a reference to field boot_mode of aws_ami.
func (aa awsAmiAttributes) BootMode() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("boot_mode"))
}

// DeprecationTime returns a reference to field deprecation_time of aws_ami.
func (aa awsAmiAttributes) DeprecationTime() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("deprecation_time"))
}

// Description returns a reference to field description of aws_ami.
func (aa awsAmiAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("description"))
}

// EnaSupport returns a reference to field ena_support of aws_ami.
func (aa awsAmiAttributes) EnaSupport() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("ena_support"))
}

// Hypervisor returns a reference to field hypervisor of aws_ami.
func (aa awsAmiAttributes) Hypervisor() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("hypervisor"))
}

// Id returns a reference to field id of aws_ami.
func (aa awsAmiAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("id"))
}

// ImageLocation returns a reference to field image_location of aws_ami.
func (aa awsAmiAttributes) ImageLocation() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("image_location"))
}

// ImageOwnerAlias returns a reference to field image_owner_alias of aws_ami.
func (aa awsAmiAttributes) ImageOwnerAlias() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("image_owner_alias"))
}

// ImageType returns a reference to field image_type of aws_ami.
func (aa awsAmiAttributes) ImageType() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("image_type"))
}

// ImdsSupport returns a reference to field imds_support of aws_ami.
func (aa awsAmiAttributes) ImdsSupport() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("imds_support"))
}

// KernelId returns a reference to field kernel_id of aws_ami.
func (aa awsAmiAttributes) KernelId() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("kernel_id"))
}

// ManageEbsSnapshots returns a reference to field manage_ebs_snapshots of aws_ami.
func (aa awsAmiAttributes) ManageEbsSnapshots() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("manage_ebs_snapshots"))
}

// Name returns a reference to field name of aws_ami.
func (aa awsAmiAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("name"))
}

// OwnerId returns a reference to field owner_id of aws_ami.
func (aa awsAmiAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("owner_id"))
}

// Platform returns a reference to field platform of aws_ami.
func (aa awsAmiAttributes) Platform() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("platform"))
}

// PlatformDetails returns a reference to field platform_details of aws_ami.
func (aa awsAmiAttributes) PlatformDetails() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("platform_details"))
}

// Public returns a reference to field public of aws_ami.
func (aa awsAmiAttributes) Public() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("public"))
}

// RamdiskId returns a reference to field ramdisk_id of aws_ami.
func (aa awsAmiAttributes) RamdiskId() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("ramdisk_id"))
}

// RootDeviceName returns a reference to field root_device_name of aws_ami.
func (aa awsAmiAttributes) RootDeviceName() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("root_device_name"))
}

// RootSnapshotId returns a reference to field root_snapshot_id of aws_ami.
func (aa awsAmiAttributes) RootSnapshotId() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("root_snapshot_id"))
}

// SriovNetSupport returns a reference to field sriov_net_support of aws_ami.
func (aa awsAmiAttributes) SriovNetSupport() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("sriov_net_support"))
}

// Tags returns a reference to field tags of aws_ami.
func (aa awsAmiAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aa.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ami.
func (aa awsAmiAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aa.ref.Append("tags_all"))
}

// TpmSupport returns a reference to field tpm_support of aws_ami.
func (aa awsAmiAttributes) TpmSupport() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("tpm_support"))
}

// UsageOperation returns a reference to field usage_operation of aws_ami.
func (aa awsAmiAttributes) UsageOperation() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("usage_operation"))
}

// VirtualizationType returns a reference to field virtualization_type of aws_ami.
func (aa awsAmiAttributes) VirtualizationType() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("virtualization_type"))
}

func (aa awsAmiAttributes) EbsBlockDevice() terra.SetValue[EbsBlockDeviceAttributes] {
	return terra.ReferenceAsSet[EbsBlockDeviceAttributes](aa.ref.Append("ebs_block_device"))
}

func (aa awsAmiAttributes) EphemeralBlockDevice() terra.SetValue[EphemeralBlockDeviceAttributes] {
	return terra.ReferenceAsSet[EphemeralBlockDeviceAttributes](aa.ref.Append("ephemeral_block_device"))
}

func (aa awsAmiAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aa.ref.Append("timeouts"))
}

type awsAmiState struct {
	Architecture         string                      `json:"architecture"`
	Arn                  string                      `json:"arn"`
	BootMode             string                      `json:"boot_mode"`
	DeprecationTime      string                      `json:"deprecation_time"`
	Description          string                      `json:"description"`
	EnaSupport           bool                        `json:"ena_support"`
	Hypervisor           string                      `json:"hypervisor"`
	Id                   string                      `json:"id"`
	ImageLocation        string                      `json:"image_location"`
	ImageOwnerAlias      string                      `json:"image_owner_alias"`
	ImageType            string                      `json:"image_type"`
	ImdsSupport          string                      `json:"imds_support"`
	KernelId             string                      `json:"kernel_id"`
	ManageEbsSnapshots   bool                        `json:"manage_ebs_snapshots"`
	Name                 string                      `json:"name"`
	OwnerId              string                      `json:"owner_id"`
	Platform             string                      `json:"platform"`
	PlatformDetails      string                      `json:"platform_details"`
	Public               bool                        `json:"public"`
	RamdiskId            string                      `json:"ramdisk_id"`
	RootDeviceName       string                      `json:"root_device_name"`
	RootSnapshotId       string                      `json:"root_snapshot_id"`
	SriovNetSupport      string                      `json:"sriov_net_support"`
	Tags                 map[string]string           `json:"tags"`
	TagsAll              map[string]string           `json:"tags_all"`
	TpmSupport           string                      `json:"tpm_support"`
	UsageOperation       string                      `json:"usage_operation"`
	VirtualizationType   string                      `json:"virtualization_type"`
	EbsBlockDevice       []EbsBlockDeviceState       `json:"ebs_block_device"`
	EphemeralBlockDevice []EphemeralBlockDeviceState `json:"ephemeral_block_device"`
	Timeouts             *TimeoutsState              `json:"timeouts"`
}
