// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sns_topic_subscription

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sns_topic_subscription.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSnsTopicSubscriptionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asts *Resource) Type() string {
	return "aws_sns_topic_subscription"
}

// LocalName returns the local name for [Resource].
func (asts *Resource) LocalName() string {
	return asts.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asts *Resource) Configuration() interface{} {
	return asts.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asts *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asts)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asts *Resource) Dependencies() terra.Dependencies {
	return asts.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asts *Resource) LifecycleManagement() *terra.Lifecycle {
	return asts.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asts *Resource) Attributes() awsSnsTopicSubscriptionAttributes {
	return awsSnsTopicSubscriptionAttributes{ref: terra.ReferenceResource(asts)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asts *Resource) ImportState(state io.Reader) error {
	asts.state = &awsSnsTopicSubscriptionState{}
	if err := json.NewDecoder(state).Decode(asts.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asts.Type(), asts.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asts *Resource) State() (*awsSnsTopicSubscriptionState, bool) {
	return asts.state, asts.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asts *Resource) StateMust() *awsSnsTopicSubscriptionState {
	if asts.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asts.Type(), asts.LocalName()))
	}
	return asts.state
}

// Args contains the configurations for aws_sns_topic_subscription.
type Args struct {
	// ConfirmationTimeoutInMinutes: number, optional
	ConfirmationTimeoutInMinutes terra.NumberValue `hcl:"confirmation_timeout_in_minutes,attr"`
	// DeliveryPolicy: string, optional
	DeliveryPolicy terra.StringValue `hcl:"delivery_policy,attr"`
	// Endpoint: string, required
	Endpoint terra.StringValue `hcl:"endpoint,attr" validate:"required"`
	// EndpointAutoConfirms: bool, optional
	EndpointAutoConfirms terra.BoolValue `hcl:"endpoint_auto_confirms,attr"`
	// FilterPolicy: string, optional
	FilterPolicy terra.StringValue `hcl:"filter_policy,attr"`
	// FilterPolicyScope: string, optional
	FilterPolicyScope terra.StringValue `hcl:"filter_policy_scope,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// RawMessageDelivery: bool, optional
	RawMessageDelivery terra.BoolValue `hcl:"raw_message_delivery,attr"`
	// RedrivePolicy: string, optional
	RedrivePolicy terra.StringValue `hcl:"redrive_policy,attr"`
	// ReplayPolicy: string, optional
	ReplayPolicy terra.StringValue `hcl:"replay_policy,attr"`
	// SubscriptionRoleArn: string, optional
	SubscriptionRoleArn terra.StringValue `hcl:"subscription_role_arn,attr"`
	// TopicArn: string, required
	TopicArn terra.StringValue `hcl:"topic_arn,attr" validate:"required"`
}

type awsSnsTopicSubscriptionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asts.ref.Append("arn"))
}

// ConfirmationTimeoutInMinutes returns a reference to field confirmation_timeout_in_minutes of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) ConfirmationTimeoutInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(asts.ref.Append("confirmation_timeout_in_minutes"))
}

// ConfirmationWasAuthenticated returns a reference to field confirmation_was_authenticated of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) ConfirmationWasAuthenticated() terra.BoolValue {
	return terra.ReferenceAsBool(asts.ref.Append("confirmation_was_authenticated"))
}

// DeliveryPolicy returns a reference to field delivery_policy of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) DeliveryPolicy() terra.StringValue {
	return terra.ReferenceAsString(asts.ref.Append("delivery_policy"))
}

// Endpoint returns a reference to field endpoint of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(asts.ref.Append("endpoint"))
}

// EndpointAutoConfirms returns a reference to field endpoint_auto_confirms of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) EndpointAutoConfirms() terra.BoolValue {
	return terra.ReferenceAsBool(asts.ref.Append("endpoint_auto_confirms"))
}

// FilterPolicy returns a reference to field filter_policy of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) FilterPolicy() terra.StringValue {
	return terra.ReferenceAsString(asts.ref.Append("filter_policy"))
}

// FilterPolicyScope returns a reference to field filter_policy_scope of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) FilterPolicyScope() terra.StringValue {
	return terra.ReferenceAsString(asts.ref.Append("filter_policy_scope"))
}

// Id returns a reference to field id of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asts.ref.Append("id"))
}

// OwnerId returns a reference to field owner_id of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(asts.ref.Append("owner_id"))
}

// PendingConfirmation returns a reference to field pending_confirmation of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) PendingConfirmation() terra.BoolValue {
	return terra.ReferenceAsBool(asts.ref.Append("pending_confirmation"))
}

// Protocol returns a reference to field protocol of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(asts.ref.Append("protocol"))
}

// RawMessageDelivery returns a reference to field raw_message_delivery of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) RawMessageDelivery() terra.BoolValue {
	return terra.ReferenceAsBool(asts.ref.Append("raw_message_delivery"))
}

// RedrivePolicy returns a reference to field redrive_policy of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) RedrivePolicy() terra.StringValue {
	return terra.ReferenceAsString(asts.ref.Append("redrive_policy"))
}

// ReplayPolicy returns a reference to field replay_policy of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) ReplayPolicy() terra.StringValue {
	return terra.ReferenceAsString(asts.ref.Append("replay_policy"))
}

// SubscriptionRoleArn returns a reference to field subscription_role_arn of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) SubscriptionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(asts.ref.Append("subscription_role_arn"))
}

// TopicArn returns a reference to field topic_arn of aws_sns_topic_subscription.
func (asts awsSnsTopicSubscriptionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceAsString(asts.ref.Append("topic_arn"))
}

type awsSnsTopicSubscriptionState struct {
	Arn                          string  `json:"arn"`
	ConfirmationTimeoutInMinutes float64 `json:"confirmation_timeout_in_minutes"`
	ConfirmationWasAuthenticated bool    `json:"confirmation_was_authenticated"`
	DeliveryPolicy               string  `json:"delivery_policy"`
	Endpoint                     string  `json:"endpoint"`
	EndpointAutoConfirms         bool    `json:"endpoint_auto_confirms"`
	FilterPolicy                 string  `json:"filter_policy"`
	FilterPolicyScope            string  `json:"filter_policy_scope"`
	Id                           string  `json:"id"`
	OwnerId                      string  `json:"owner_id"`
	PendingConfirmation          bool    `json:"pending_confirmation"`
	Protocol                     string  `json:"protocol"`
	RawMessageDelivery           bool    `json:"raw_message_delivery"`
	RedrivePolicy                string  `json:"redrive_policy"`
	ReplayPolicy                 string  `json:"replay_policy"`
	SubscriptionRoleArn          string  `json:"subscription_role_arn"`
	TopicArn                     string  `json:"topic_arn"`
}
