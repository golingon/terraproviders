// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codedeploy_app

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codedeploy_app.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodedeployAppState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aca *Resource) Type() string {
	return "aws_codedeploy_app"
}

// LocalName returns the local name for [Resource].
func (aca *Resource) LocalName() string {
	return aca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aca *Resource) Configuration() interface{} {
	return aca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aca *Resource) Dependencies() terra.Dependencies {
	return aca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aca *Resource) LifecycleManagement() *terra.Lifecycle {
	return aca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aca *Resource) Attributes() awsCodedeployAppAttributes {
	return awsCodedeployAppAttributes{ref: terra.ReferenceResource(aca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aca *Resource) ImportState(state io.Reader) error {
	aca.state = &awsCodedeployAppState{}
	if err := json.NewDecoder(state).Decode(aca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aca.Type(), aca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aca *Resource) State() (*awsCodedeployAppState, bool) {
	return aca.state, aca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aca *Resource) StateMust() *awsCodedeployAppState {
	if aca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aca.Type(), aca.LocalName()))
	}
	return aca.state
}

// Args contains the configurations for aws_codedeploy_app.
type Args struct {
	// ComputePlatform: string, optional
	ComputePlatform terra.StringValue `hcl:"compute_platform,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsCodedeployAppAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of aws_codedeploy_app.
func (aca awsCodedeployAppAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("application_id"))
}

// Arn returns a reference to field arn of aws_codedeploy_app.
func (aca awsCodedeployAppAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("arn"))
}

// ComputePlatform returns a reference to field compute_platform of aws_codedeploy_app.
func (aca awsCodedeployAppAttributes) ComputePlatform() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("compute_platform"))
}

// GithubAccountName returns a reference to field github_account_name of aws_codedeploy_app.
func (aca awsCodedeployAppAttributes) GithubAccountName() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("github_account_name"))
}

// Id returns a reference to field id of aws_codedeploy_app.
func (aca awsCodedeployAppAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("id"))
}

// LinkedToGithub returns a reference to field linked_to_github of aws_codedeploy_app.
func (aca awsCodedeployAppAttributes) LinkedToGithub() terra.BoolValue {
	return terra.ReferenceAsBool(aca.ref.Append("linked_to_github"))
}

// Name returns a reference to field name of aws_codedeploy_app.
func (aca awsCodedeployAppAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aca.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_codedeploy_app.
func (aca awsCodedeployAppAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aca.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_codedeploy_app.
func (aca awsCodedeployAppAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aca.ref.Append("tags_all"))
}

type awsCodedeployAppState struct {
	ApplicationId     string            `json:"application_id"`
	Arn               string            `json:"arn"`
	ComputePlatform   string            `json:"compute_platform"`
	GithubAccountName string            `json:"github_account_name"`
	Id                string            `json:"id"`
	LinkedToGithub    bool              `json:"linked_to_github"`
	Name              string            `json:"name"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
}
