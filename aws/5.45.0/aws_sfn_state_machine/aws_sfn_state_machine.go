// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sfn_state_machine

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sfn_state_machine.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSfnStateMachineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (assm *Resource) Type() string {
	return "aws_sfn_state_machine"
}

// LocalName returns the local name for [Resource].
func (assm *Resource) LocalName() string {
	return assm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (assm *Resource) Configuration() interface{} {
	return assm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (assm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(assm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (assm *Resource) Dependencies() terra.Dependencies {
	return assm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (assm *Resource) LifecycleManagement() *terra.Lifecycle {
	return assm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (assm *Resource) Attributes() awsSfnStateMachineAttributes {
	return awsSfnStateMachineAttributes{ref: terra.ReferenceResource(assm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (assm *Resource) ImportState(state io.Reader) error {
	assm.state = &awsSfnStateMachineState{}
	if err := json.NewDecoder(state).Decode(assm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", assm.Type(), assm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (assm *Resource) State() (*awsSfnStateMachineState, bool) {
	return assm.state, assm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (assm *Resource) StateMust() *awsSfnStateMachineState {
	if assm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", assm.Type(), assm.LocalName()))
	}
	return assm.state
}

// Args contains the configurations for aws_sfn_state_machine.
type Args struct {
	// Definition: string, required
	Definition terra.StringValue `hcl:"definition,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Publish: bool, optional
	Publish terra.BoolValue `hcl:"publish,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// LoggingConfiguration: optional
	LoggingConfiguration *LoggingConfiguration `hcl:"logging_configuration,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// TracingConfiguration: optional
	TracingConfiguration *TracingConfiguration `hcl:"tracing_configuration,block"`
}

type awsSfnStateMachineAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(assm.ref.Append("arn"))
}

// CreationDate returns a reference to field creation_date of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceAsString(assm.ref.Append("creation_date"))
}

// Definition returns a reference to field definition of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) Definition() terra.StringValue {
	return terra.ReferenceAsString(assm.ref.Append("definition"))
}

// Description returns a reference to field description of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(assm.ref.Append("description"))
}

// Id returns a reference to field id of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(assm.ref.Append("id"))
}

// Name returns a reference to field name of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(assm.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(assm.ref.Append("name_prefix"))
}

// Publish returns a reference to field publish of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) Publish() terra.BoolValue {
	return terra.ReferenceAsBool(assm.ref.Append("publish"))
}

// RevisionId returns a reference to field revision_id of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) RevisionId() terra.StringValue {
	return terra.ReferenceAsString(assm.ref.Append("revision_id"))
}

// RoleArn returns a reference to field role_arn of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(assm.ref.Append("role_arn"))
}

// StateMachineVersionArn returns a reference to field state_machine_version_arn of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) StateMachineVersionArn() terra.StringValue {
	return terra.ReferenceAsString(assm.ref.Append("state_machine_version_arn"))
}

// Status returns a reference to field status of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(assm.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](assm.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](assm.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(assm.ref.Append("type"))
}

// VersionDescription returns a reference to field version_description of aws_sfn_state_machine.
func (assm awsSfnStateMachineAttributes) VersionDescription() terra.StringValue {
	return terra.ReferenceAsString(assm.ref.Append("version_description"))
}

func (assm awsSfnStateMachineAttributes) LoggingConfiguration() terra.ListValue[LoggingConfigurationAttributes] {
	return terra.ReferenceAsList[LoggingConfigurationAttributes](assm.ref.Append("logging_configuration"))
}

func (assm awsSfnStateMachineAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](assm.ref.Append("timeouts"))
}

func (assm awsSfnStateMachineAttributes) TracingConfiguration() terra.ListValue[TracingConfigurationAttributes] {
	return terra.ReferenceAsList[TracingConfigurationAttributes](assm.ref.Append("tracing_configuration"))
}

type awsSfnStateMachineState struct {
	Arn                    string                      `json:"arn"`
	CreationDate           string                      `json:"creation_date"`
	Definition             string                      `json:"definition"`
	Description            string                      `json:"description"`
	Id                     string                      `json:"id"`
	Name                   string                      `json:"name"`
	NamePrefix             string                      `json:"name_prefix"`
	Publish                bool                        `json:"publish"`
	RevisionId             string                      `json:"revision_id"`
	RoleArn                string                      `json:"role_arn"`
	StateMachineVersionArn string                      `json:"state_machine_version_arn"`
	Status                 string                      `json:"status"`
	Tags                   map[string]string           `json:"tags"`
	TagsAll                map[string]string           `json:"tags_all"`
	Type                   string                      `json:"type"`
	VersionDescription     string                      `json:"version_description"`
	LoggingConfiguration   []LoggingConfigurationState `json:"logging_configuration"`
	Timeouts               *TimeoutsState              `json:"timeouts"`
	TracingConfiguration   []TracingConfigurationState `json:"tracing_configuration"`
}
