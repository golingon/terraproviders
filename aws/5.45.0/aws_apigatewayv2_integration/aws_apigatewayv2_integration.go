// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_apigatewayv2_integration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_apigatewayv2_integration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApigatewayv2IntegrationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aai *Resource) Type() string {
	return "aws_apigatewayv2_integration"
}

// LocalName returns the local name for [Resource].
func (aai *Resource) LocalName() string {
	return aai.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aai *Resource) Configuration() interface{} {
	return aai.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aai *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aai)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aai *Resource) Dependencies() terra.Dependencies {
	return aai.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aai *Resource) LifecycleManagement() *terra.Lifecycle {
	return aai.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aai *Resource) Attributes() awsApigatewayv2IntegrationAttributes {
	return awsApigatewayv2IntegrationAttributes{ref: terra.ReferenceResource(aai)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aai *Resource) ImportState(state io.Reader) error {
	aai.state = &awsApigatewayv2IntegrationState{}
	if err := json.NewDecoder(state).Decode(aai.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aai.Type(), aai.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aai *Resource) State() (*awsApigatewayv2IntegrationState, bool) {
	return aai.state, aai.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aai *Resource) StateMust() *awsApigatewayv2IntegrationState {
	if aai.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aai.Type(), aai.LocalName()))
	}
	return aai.state
}

// Args contains the configurations for aws_apigatewayv2_integration.
type Args struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// ConnectionId: string, optional
	ConnectionId terra.StringValue `hcl:"connection_id,attr"`
	// ConnectionType: string, optional
	ConnectionType terra.StringValue `hcl:"connection_type,attr"`
	// ContentHandlingStrategy: string, optional
	ContentHandlingStrategy terra.StringValue `hcl:"content_handling_strategy,attr"`
	// CredentialsArn: string, optional
	CredentialsArn terra.StringValue `hcl:"credentials_arn,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationMethod: string, optional
	IntegrationMethod terra.StringValue `hcl:"integration_method,attr"`
	// IntegrationSubtype: string, optional
	IntegrationSubtype terra.StringValue `hcl:"integration_subtype,attr"`
	// IntegrationType: string, required
	IntegrationType terra.StringValue `hcl:"integration_type,attr" validate:"required"`
	// IntegrationUri: string, optional
	IntegrationUri terra.StringValue `hcl:"integration_uri,attr"`
	// PassthroughBehavior: string, optional
	PassthroughBehavior terra.StringValue `hcl:"passthrough_behavior,attr"`
	// PayloadFormatVersion: string, optional
	PayloadFormatVersion terra.StringValue `hcl:"payload_format_version,attr"`
	// RequestParameters: map of string, optional
	RequestParameters terra.MapValue[terra.StringValue] `hcl:"request_parameters,attr"`
	// RequestTemplates: map of string, optional
	RequestTemplates terra.MapValue[terra.StringValue] `hcl:"request_templates,attr"`
	// TemplateSelectionExpression: string, optional
	TemplateSelectionExpression terra.StringValue `hcl:"template_selection_expression,attr"`
	// TimeoutMilliseconds: number, optional
	TimeoutMilliseconds terra.NumberValue `hcl:"timeout_milliseconds,attr"`
	// ResponseParameters: min=0
	ResponseParameters []ResponseParameters `hcl:"response_parameters,block" validate:"min=0"`
	// TlsConfig: optional
	TlsConfig *TlsConfig `hcl:"tls_config,block"`
}

type awsApigatewayv2IntegrationAttributes struct {
	ref terra.Reference
}

// ApiId returns a reference to field api_id of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) ApiId() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("api_id"))
}

// ConnectionId returns a reference to field connection_id of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("connection_id"))
}

// ConnectionType returns a reference to field connection_type of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) ConnectionType() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("connection_type"))
}

// ContentHandlingStrategy returns a reference to field content_handling_strategy of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) ContentHandlingStrategy() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("content_handling_strategy"))
}

// CredentialsArn returns a reference to field credentials_arn of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) CredentialsArn() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("credentials_arn"))
}

// Description returns a reference to field description of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("description"))
}

// Id returns a reference to field id of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("id"))
}

// IntegrationMethod returns a reference to field integration_method of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) IntegrationMethod() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("integration_method"))
}

// IntegrationResponseSelectionExpression returns a reference to field integration_response_selection_expression of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) IntegrationResponseSelectionExpression() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("integration_response_selection_expression"))
}

// IntegrationSubtype returns a reference to field integration_subtype of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) IntegrationSubtype() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("integration_subtype"))
}

// IntegrationType returns a reference to field integration_type of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) IntegrationType() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("integration_type"))
}

// IntegrationUri returns a reference to field integration_uri of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) IntegrationUri() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("integration_uri"))
}

// PassthroughBehavior returns a reference to field passthrough_behavior of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) PassthroughBehavior() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("passthrough_behavior"))
}

// PayloadFormatVersion returns a reference to field payload_format_version of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) PayloadFormatVersion() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("payload_format_version"))
}

// RequestParameters returns a reference to field request_parameters of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) RequestParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aai.ref.Append("request_parameters"))
}

// RequestTemplates returns a reference to field request_templates of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) RequestTemplates() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aai.ref.Append("request_templates"))
}

// TemplateSelectionExpression returns a reference to field template_selection_expression of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) TemplateSelectionExpression() terra.StringValue {
	return terra.ReferenceAsString(aai.ref.Append("template_selection_expression"))
}

// TimeoutMilliseconds returns a reference to field timeout_milliseconds of aws_apigatewayv2_integration.
func (aai awsApigatewayv2IntegrationAttributes) TimeoutMilliseconds() terra.NumberValue {
	return terra.ReferenceAsNumber(aai.ref.Append("timeout_milliseconds"))
}

func (aai awsApigatewayv2IntegrationAttributes) ResponseParameters() terra.SetValue[ResponseParametersAttributes] {
	return terra.ReferenceAsSet[ResponseParametersAttributes](aai.ref.Append("response_parameters"))
}

func (aai awsApigatewayv2IntegrationAttributes) TlsConfig() terra.ListValue[TlsConfigAttributes] {
	return terra.ReferenceAsList[TlsConfigAttributes](aai.ref.Append("tls_config"))
}

type awsApigatewayv2IntegrationState struct {
	ApiId                                  string                    `json:"api_id"`
	ConnectionId                           string                    `json:"connection_id"`
	ConnectionType                         string                    `json:"connection_type"`
	ContentHandlingStrategy                string                    `json:"content_handling_strategy"`
	CredentialsArn                         string                    `json:"credentials_arn"`
	Description                            string                    `json:"description"`
	Id                                     string                    `json:"id"`
	IntegrationMethod                      string                    `json:"integration_method"`
	IntegrationResponseSelectionExpression string                    `json:"integration_response_selection_expression"`
	IntegrationSubtype                     string                    `json:"integration_subtype"`
	IntegrationType                        string                    `json:"integration_type"`
	IntegrationUri                         string                    `json:"integration_uri"`
	PassthroughBehavior                    string                    `json:"passthrough_behavior"`
	PayloadFormatVersion                   string                    `json:"payload_format_version"`
	RequestParameters                      map[string]string         `json:"request_parameters"`
	RequestTemplates                       map[string]string         `json:"request_templates"`
	TemplateSelectionExpression            string                    `json:"template_selection_expression"`
	TimeoutMilliseconds                    float64                   `json:"timeout_milliseconds"`
	ResponseParameters                     []ResponseParametersState `json:"response_parameters"`
	TlsConfig                              []TlsConfigState          `json:"tls_config"`
}
