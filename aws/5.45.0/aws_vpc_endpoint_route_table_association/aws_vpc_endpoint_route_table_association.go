// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_endpoint_route_table_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpc_endpoint_route_table_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpcEndpointRouteTableAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (averta *Resource) Type() string {
	return "aws_vpc_endpoint_route_table_association"
}

// LocalName returns the local name for [Resource].
func (averta *Resource) LocalName() string {
	return averta.Name
}

// Configuration returns the configuration (args) for [Resource].
func (averta *Resource) Configuration() interface{} {
	return averta.Args
}

// DependOn is used for other resources to depend on [Resource].
func (averta *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(averta)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (averta *Resource) Dependencies() terra.Dependencies {
	return averta.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (averta *Resource) LifecycleManagement() *terra.Lifecycle {
	return averta.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (averta *Resource) Attributes() awsVpcEndpointRouteTableAssociationAttributes {
	return awsVpcEndpointRouteTableAssociationAttributes{ref: terra.ReferenceResource(averta)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (averta *Resource) ImportState(state io.Reader) error {
	averta.state = &awsVpcEndpointRouteTableAssociationState{}
	if err := json.NewDecoder(state).Decode(averta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", averta.Type(), averta.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (averta *Resource) State() (*awsVpcEndpointRouteTableAssociationState, bool) {
	return averta.state, averta.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (averta *Resource) StateMust() *awsVpcEndpointRouteTableAssociationState {
	if averta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", averta.Type(), averta.LocalName()))
	}
	return averta.state
}

// Args contains the configurations for aws_vpc_endpoint_route_table_association.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RouteTableId: string, required
	RouteTableId terra.StringValue `hcl:"route_table_id,attr" validate:"required"`
	// VpcEndpointId: string, required
	VpcEndpointId terra.StringValue `hcl:"vpc_endpoint_id,attr" validate:"required"`
}

type awsVpcEndpointRouteTableAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_vpc_endpoint_route_table_association.
func (averta awsVpcEndpointRouteTableAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(averta.ref.Append("id"))
}

// RouteTableId returns a reference to field route_table_id of aws_vpc_endpoint_route_table_association.
func (averta awsVpcEndpointRouteTableAssociationAttributes) RouteTableId() terra.StringValue {
	return terra.ReferenceAsString(averta.ref.Append("route_table_id"))
}

// VpcEndpointId returns a reference to field vpc_endpoint_id of aws_vpc_endpoint_route_table_association.
func (averta awsVpcEndpointRouteTableAssociationAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceAsString(averta.ref.Append("vpc_endpoint_id"))
}

type awsVpcEndpointRouteTableAssociationState struct {
	Id            string `json:"id"`
	RouteTableId  string `json:"route_table_id"`
	VpcEndpointId string `json:"vpc_endpoint_id"`
}
