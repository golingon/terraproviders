// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kinesisanalyticsv2_application_snapshot

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kinesisanalyticsv2_application_snapshot.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKinesisanalyticsv2ApplicationSnapshotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akas *Resource) Type() string {
	return "aws_kinesisanalyticsv2_application_snapshot"
}

// LocalName returns the local name for [Resource].
func (akas *Resource) LocalName() string {
	return akas.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akas *Resource) Configuration() interface{} {
	return akas.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akas *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akas)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akas *Resource) Dependencies() terra.Dependencies {
	return akas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akas *Resource) LifecycleManagement() *terra.Lifecycle {
	return akas.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akas *Resource) Attributes() awsKinesisanalyticsv2ApplicationSnapshotAttributes {
	return awsKinesisanalyticsv2ApplicationSnapshotAttributes{ref: terra.ReferenceResource(akas)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akas *Resource) ImportState(state io.Reader) error {
	akas.state = &awsKinesisanalyticsv2ApplicationSnapshotState{}
	if err := json.NewDecoder(state).Decode(akas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akas.Type(), akas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akas *Resource) State() (*awsKinesisanalyticsv2ApplicationSnapshotState, bool) {
	return akas.state, akas.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akas *Resource) StateMust() *awsKinesisanalyticsv2ApplicationSnapshotState {
	if akas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akas.Type(), akas.LocalName()))
	}
	return akas.state
}

// Args contains the configurations for aws_kinesisanalyticsv2_application_snapshot.
type Args struct {
	// ApplicationName: string, required
	ApplicationName terra.StringValue `hcl:"application_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SnapshotName: string, required
	SnapshotName terra.StringValue `hcl:"snapshot_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsKinesisanalyticsv2ApplicationSnapshotAttributes struct {
	ref terra.Reference
}

// ApplicationName returns a reference to field application_name of aws_kinesisanalyticsv2_application_snapshot.
func (akas awsKinesisanalyticsv2ApplicationSnapshotAttributes) ApplicationName() terra.StringValue {
	return terra.ReferenceAsString(akas.ref.Append("application_name"))
}

// ApplicationVersionId returns a reference to field application_version_id of aws_kinesisanalyticsv2_application_snapshot.
func (akas awsKinesisanalyticsv2ApplicationSnapshotAttributes) ApplicationVersionId() terra.NumberValue {
	return terra.ReferenceAsNumber(akas.ref.Append("application_version_id"))
}

// Id returns a reference to field id of aws_kinesisanalyticsv2_application_snapshot.
func (akas awsKinesisanalyticsv2ApplicationSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akas.ref.Append("id"))
}

// SnapshotCreationTimestamp returns a reference to field snapshot_creation_timestamp of aws_kinesisanalyticsv2_application_snapshot.
func (akas awsKinesisanalyticsv2ApplicationSnapshotAttributes) SnapshotCreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(akas.ref.Append("snapshot_creation_timestamp"))
}

// SnapshotName returns a reference to field snapshot_name of aws_kinesisanalyticsv2_application_snapshot.
func (akas awsKinesisanalyticsv2ApplicationSnapshotAttributes) SnapshotName() terra.StringValue {
	return terra.ReferenceAsString(akas.ref.Append("snapshot_name"))
}

func (akas awsKinesisanalyticsv2ApplicationSnapshotAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akas.ref.Append("timeouts"))
}

type awsKinesisanalyticsv2ApplicationSnapshotState struct {
	ApplicationName           string         `json:"application_name"`
	ApplicationVersionId      float64        `json:"application_version_id"`
	Id                        string         `json:"id"`
	SnapshotCreationTimestamp string         `json:"snapshot_creation_timestamp"`
	SnapshotName              string         `json:"snapshot_name"`
	Timeouts                  *TimeoutsState `json:"timeouts"`
}
