// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_image_pipeline

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_imagebuilder_image_pipeline.
type Resource struct {
	Name      string
	Args      Args
	state     *awsImagebuilderImagePipelineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aiip *Resource) Type() string {
	return "aws_imagebuilder_image_pipeline"
}

// LocalName returns the local name for [Resource].
func (aiip *Resource) LocalName() string {
	return aiip.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aiip *Resource) Configuration() interface{} {
	return aiip.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aiip *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aiip)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aiip *Resource) Dependencies() terra.Dependencies {
	return aiip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aiip *Resource) LifecycleManagement() *terra.Lifecycle {
	return aiip.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aiip *Resource) Attributes() awsImagebuilderImagePipelineAttributes {
	return awsImagebuilderImagePipelineAttributes{ref: terra.ReferenceResource(aiip)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aiip *Resource) ImportState(state io.Reader) error {
	aiip.state = &awsImagebuilderImagePipelineState{}
	if err := json.NewDecoder(state).Decode(aiip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiip.Type(), aiip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aiip *Resource) State() (*awsImagebuilderImagePipelineState, bool) {
	return aiip.state, aiip.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aiip *Resource) StateMust() *awsImagebuilderImagePipelineState {
	if aiip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiip.Type(), aiip.LocalName()))
	}
	return aiip.state
}

// Args contains the configurations for aws_imagebuilder_image_pipeline.
type Args struct {
	// ContainerRecipeArn: string, optional
	ContainerRecipeArn terra.StringValue `hcl:"container_recipe_arn,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DistributionConfigurationArn: string, optional
	DistributionConfigurationArn terra.StringValue `hcl:"distribution_configuration_arn,attr"`
	// EnhancedImageMetadataEnabled: bool, optional
	EnhancedImageMetadataEnabled terra.BoolValue `hcl:"enhanced_image_metadata_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageRecipeArn: string, optional
	ImageRecipeArn terra.StringValue `hcl:"image_recipe_arn,attr"`
	// InfrastructureConfigurationArn: string, required
	InfrastructureConfigurationArn terra.StringValue `hcl:"infrastructure_configuration_arn,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ImageScanningConfiguration: optional
	ImageScanningConfiguration *ImageScanningConfiguration `hcl:"image_scanning_configuration,block"`
	// ImageTestsConfiguration: optional
	ImageTestsConfiguration *ImageTestsConfiguration `hcl:"image_tests_configuration,block"`
	// Schedule: optional
	Schedule *Schedule `hcl:"schedule,block"`
}

type awsImagebuilderImagePipelineAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("arn"))
}

// ContainerRecipeArn returns a reference to field container_recipe_arn of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) ContainerRecipeArn() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("container_recipe_arn"))
}

// DateCreated returns a reference to field date_created of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) DateCreated() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("date_created"))
}

// DateLastRun returns a reference to field date_last_run of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) DateLastRun() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("date_last_run"))
}

// DateNextRun returns a reference to field date_next_run of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) DateNextRun() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("date_next_run"))
}

// DateUpdated returns a reference to field date_updated of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) DateUpdated() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("date_updated"))
}

// Description returns a reference to field description of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("description"))
}

// DistributionConfigurationArn returns a reference to field distribution_configuration_arn of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) DistributionConfigurationArn() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("distribution_configuration_arn"))
}

// EnhancedImageMetadataEnabled returns a reference to field enhanced_image_metadata_enabled of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) EnhancedImageMetadataEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aiip.ref.Append("enhanced_image_metadata_enabled"))
}

// Id returns a reference to field id of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("id"))
}

// ImageRecipeArn returns a reference to field image_recipe_arn of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) ImageRecipeArn() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("image_recipe_arn"))
}

// InfrastructureConfigurationArn returns a reference to field infrastructure_configuration_arn of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) InfrastructureConfigurationArn() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("infrastructure_configuration_arn"))
}

// Name returns a reference to field name of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("name"))
}

// Platform returns a reference to field platform of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) Platform() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("platform"))
}

// Status returns a reference to field status of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiip.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_imagebuilder_image_pipeline.
func (aiip awsImagebuilderImagePipelineAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiip.ref.Append("tags_all"))
}

func (aiip awsImagebuilderImagePipelineAttributes) ImageScanningConfiguration() terra.ListValue[ImageScanningConfigurationAttributes] {
	return terra.ReferenceAsList[ImageScanningConfigurationAttributes](aiip.ref.Append("image_scanning_configuration"))
}

func (aiip awsImagebuilderImagePipelineAttributes) ImageTestsConfiguration() terra.ListValue[ImageTestsConfigurationAttributes] {
	return terra.ReferenceAsList[ImageTestsConfigurationAttributes](aiip.ref.Append("image_tests_configuration"))
}

func (aiip awsImagebuilderImagePipelineAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](aiip.ref.Append("schedule"))
}

type awsImagebuilderImagePipelineState struct {
	Arn                            string                            `json:"arn"`
	ContainerRecipeArn             string                            `json:"container_recipe_arn"`
	DateCreated                    string                            `json:"date_created"`
	DateLastRun                    string                            `json:"date_last_run"`
	DateNextRun                    string                            `json:"date_next_run"`
	DateUpdated                    string                            `json:"date_updated"`
	Description                    string                            `json:"description"`
	DistributionConfigurationArn   string                            `json:"distribution_configuration_arn"`
	EnhancedImageMetadataEnabled   bool                              `json:"enhanced_image_metadata_enabled"`
	Id                             string                            `json:"id"`
	ImageRecipeArn                 string                            `json:"image_recipe_arn"`
	InfrastructureConfigurationArn string                            `json:"infrastructure_configuration_arn"`
	Name                           string                            `json:"name"`
	Platform                       string                            `json:"platform"`
	Status                         string                            `json:"status"`
	Tags                           map[string]string                 `json:"tags"`
	TagsAll                        map[string]string                 `json:"tags_all"`
	ImageScanningConfiguration     []ImageScanningConfigurationState `json:"image_scanning_configuration"`
	ImageTestsConfiguration        []ImageTestsConfigurationState    `json:"image_tests_configuration"`
	Schedule                       []ScheduleState                   `json:"schedule"`
}
