// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_image_pipeline

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataImageScanningConfigurationAttributes struct {
	ref terra.Reference
}

func (isc DataImageScanningConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return isc.ref, nil
}

func (isc DataImageScanningConfigurationAttributes) InternalWithRef(ref terra.Reference) DataImageScanningConfigurationAttributes {
	return DataImageScanningConfigurationAttributes{ref: ref}
}

func (isc DataImageScanningConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return isc.ref.InternalTokens()
}

func (isc DataImageScanningConfigurationAttributes) ImageScanningEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(isc.ref.Append("image_scanning_enabled"))
}

func (isc DataImageScanningConfigurationAttributes) EcrConfiguration() terra.ListValue[DataImageScanningConfigurationEcrConfigurationAttributes] {
	return terra.ReferenceAsList[DataImageScanningConfigurationEcrConfigurationAttributes](isc.ref.Append("ecr_configuration"))
}

type DataImageScanningConfigurationEcrConfigurationAttributes struct {
	ref terra.Reference
}

func (ec DataImageScanningConfigurationEcrConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec DataImageScanningConfigurationEcrConfigurationAttributes) InternalWithRef(ref terra.Reference) DataImageScanningConfigurationEcrConfigurationAttributes {
	return DataImageScanningConfigurationEcrConfigurationAttributes{ref: ref}
}

func (ec DataImageScanningConfigurationEcrConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec DataImageScanningConfigurationEcrConfigurationAttributes) ContainerTags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ec.ref.Append("container_tags"))
}

func (ec DataImageScanningConfigurationEcrConfigurationAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("repository_name"))
}

type DataImageTestsConfigurationAttributes struct {
	ref terra.Reference
}

func (itc DataImageTestsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return itc.ref, nil
}

func (itc DataImageTestsConfigurationAttributes) InternalWithRef(ref terra.Reference) DataImageTestsConfigurationAttributes {
	return DataImageTestsConfigurationAttributes{ref: ref}
}

func (itc DataImageTestsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return itc.ref.InternalTokens()
}

func (itc DataImageTestsConfigurationAttributes) ImageTestsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(itc.ref.Append("image_tests_enabled"))
}

func (itc DataImageTestsConfigurationAttributes) TimeoutMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("timeout_minutes"))
}

type DataScheduleAttributes struct {
	ref terra.Reference
}

func (s DataScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataScheduleAttributes) InternalWithRef(ref terra.Reference) DataScheduleAttributes {
	return DataScheduleAttributes{ref: ref}
}

func (s DataScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataScheduleAttributes) PipelineExecutionStartCondition() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("pipeline_execution_start_condition"))
}

func (s DataScheduleAttributes) ScheduleExpression() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("schedule_expression"))
}

type DataImageScanningConfigurationState struct {
	ImageScanningEnabled bool                                                  `json:"image_scanning_enabled"`
	EcrConfiguration     []DataImageScanningConfigurationEcrConfigurationState `json:"ecr_configuration"`
}

type DataImageScanningConfigurationEcrConfigurationState struct {
	ContainerTags  []string `json:"container_tags"`
	RepositoryName string   `json:"repository_name"`
}

type DataImageTestsConfigurationState struct {
	ImageTestsEnabled bool    `json:"image_tests_enabled"`
	TimeoutMinutes    float64 `json:"timeout_minutes"`
}

type DataScheduleState struct {
	PipelineExecutionStartCondition string `json:"pipeline_execution_start_condition"`
	ScheduleExpression              string `json:"schedule_expression"`
}
