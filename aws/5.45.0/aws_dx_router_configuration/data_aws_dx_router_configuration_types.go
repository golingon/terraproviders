// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dx_router_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataRouterAttributes struct {
	ref terra.Reference
}

func (r DataRouterAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataRouterAttributes) InternalWithRef(ref terra.Reference) DataRouterAttributes {
	return DataRouterAttributes{ref: ref}
}

func (r DataRouterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataRouterAttributes) Platform() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("platform"))
}

func (r DataRouterAttributes) RouterTypeIdentifier() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("router_type_identifier"))
}

func (r DataRouterAttributes) Software() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("software"))
}

func (r DataRouterAttributes) Vendor() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("vendor"))
}

func (r DataRouterAttributes) XsltTemplateName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("xslt_template_name"))
}

func (r DataRouterAttributes) XsltTemplateNameForMacSec() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("xslt_template_name_for_mac_sec"))
}

type DataRouterState struct {
	Platform                  string `json:"platform"`
	RouterTypeIdentifier      string `json:"router_type_identifier"`
	Software                  string `json:"software"`
	Vendor                    string `json:"vendor"`
	XsltTemplateName          string `json:"xslt_template_name"`
	XsltTemplateNameForMacSec string `json:"xslt_template_name_for_mac_sec"`
}
