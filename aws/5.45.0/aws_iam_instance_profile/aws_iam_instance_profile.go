// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_instance_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iam_instance_profile.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIamInstanceProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aiip *Resource) Type() string {
	return "aws_iam_instance_profile"
}

// LocalName returns the local name for [Resource].
func (aiip *Resource) LocalName() string {
	return aiip.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aiip *Resource) Configuration() interface{} {
	return aiip.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aiip *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aiip)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aiip *Resource) Dependencies() terra.Dependencies {
	return aiip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aiip *Resource) LifecycleManagement() *terra.Lifecycle {
	return aiip.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aiip *Resource) Attributes() awsIamInstanceProfileAttributes {
	return awsIamInstanceProfileAttributes{ref: terra.ReferenceResource(aiip)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aiip *Resource) ImportState(state io.Reader) error {
	aiip.state = &awsIamInstanceProfileState{}
	if err := json.NewDecoder(state).Decode(aiip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiip.Type(), aiip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aiip *Resource) State() (*awsIamInstanceProfileState, bool) {
	return aiip.state, aiip.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aiip *Resource) StateMust() *awsIamInstanceProfileState {
	if aiip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiip.Type(), aiip.LocalName()))
	}
	return aiip.state
}

// Args contains the configurations for aws_iam_instance_profile.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Role: string, optional
	Role terra.StringValue `hcl:"role,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsIamInstanceProfileAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iam_instance_profile.
func (aiip awsIamInstanceProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("arn"))
}

// CreateDate returns a reference to field create_date of aws_iam_instance_profile.
func (aiip awsIamInstanceProfileAttributes) CreateDate() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("create_date"))
}

// Id returns a reference to field id of aws_iam_instance_profile.
func (aiip awsIamInstanceProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("id"))
}

// Name returns a reference to field name of aws_iam_instance_profile.
func (aiip awsIamInstanceProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_iam_instance_profile.
func (aiip awsIamInstanceProfileAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("name_prefix"))
}

// Path returns a reference to field path of aws_iam_instance_profile.
func (aiip awsIamInstanceProfileAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("path"))
}

// Role returns a reference to field role of aws_iam_instance_profile.
func (aiip awsIamInstanceProfileAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("role"))
}

// Tags returns a reference to field tags of aws_iam_instance_profile.
func (aiip awsIamInstanceProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiip.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_iam_instance_profile.
func (aiip awsIamInstanceProfileAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiip.ref.Append("tags_all"))
}

// UniqueId returns a reference to field unique_id of aws_iam_instance_profile.
func (aiip awsIamInstanceProfileAttributes) UniqueId() terra.StringValue {
	return terra.ReferenceAsString(aiip.ref.Append("unique_id"))
}

type awsIamInstanceProfileState struct {
	Arn        string            `json:"arn"`
	CreateDate string            `json:"create_date"`
	Id         string            `json:"id"`
	Name       string            `json:"name"`
	NamePrefix string            `json:"name_prefix"`
	Path       string            `json:"path"`
	Role       string            `json:"role"`
	Tags       map[string]string `json:"tags"`
	TagsAll    map[string]string `json:"tags_all"`
	UniqueId   string            `json:"unique_id"`
}
