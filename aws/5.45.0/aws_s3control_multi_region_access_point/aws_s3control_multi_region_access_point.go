// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3control_multi_region_access_point

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3control_multi_region_access_point.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3ControlMultiRegionAccessPointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asmrap *Resource) Type() string {
	return "aws_s3control_multi_region_access_point"
}

// LocalName returns the local name for [Resource].
func (asmrap *Resource) LocalName() string {
	return asmrap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asmrap *Resource) Configuration() interface{} {
	return asmrap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asmrap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asmrap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asmrap *Resource) Dependencies() terra.Dependencies {
	return asmrap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asmrap *Resource) LifecycleManagement() *terra.Lifecycle {
	return asmrap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asmrap *Resource) Attributes() awsS3ControlMultiRegionAccessPointAttributes {
	return awsS3ControlMultiRegionAccessPointAttributes{ref: terra.ReferenceResource(asmrap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asmrap *Resource) ImportState(state io.Reader) error {
	asmrap.state = &awsS3ControlMultiRegionAccessPointState{}
	if err := json.NewDecoder(state).Decode(asmrap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asmrap.Type(), asmrap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asmrap *Resource) State() (*awsS3ControlMultiRegionAccessPointState, bool) {
	return asmrap.state, asmrap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asmrap *Resource) StateMust() *awsS3ControlMultiRegionAccessPointState {
	if asmrap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asmrap.Type(), asmrap.LocalName()))
	}
	return asmrap.state
}

// Args contains the configurations for aws_s3control_multi_region_access_point.
type Args struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Details: required
	Details *Details `hcl:"details,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsS3ControlMultiRegionAccessPointAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_s3control_multi_region_access_point.
func (asmrap awsS3ControlMultiRegionAccessPointAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(asmrap.ref.Append("account_id"))
}

// Alias returns a reference to field alias of aws_s3control_multi_region_access_point.
func (asmrap awsS3ControlMultiRegionAccessPointAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(asmrap.ref.Append("alias"))
}

// Arn returns a reference to field arn of aws_s3control_multi_region_access_point.
func (asmrap awsS3ControlMultiRegionAccessPointAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asmrap.ref.Append("arn"))
}

// DomainName returns a reference to field domain_name of aws_s3control_multi_region_access_point.
func (asmrap awsS3ControlMultiRegionAccessPointAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(asmrap.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_s3control_multi_region_access_point.
func (asmrap awsS3ControlMultiRegionAccessPointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asmrap.ref.Append("id"))
}

// Status returns a reference to field status of aws_s3control_multi_region_access_point.
func (asmrap awsS3ControlMultiRegionAccessPointAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(asmrap.ref.Append("status"))
}

func (asmrap awsS3ControlMultiRegionAccessPointAttributes) Details() terra.ListValue[DetailsAttributes] {
	return terra.ReferenceAsList[DetailsAttributes](asmrap.ref.Append("details"))
}

func (asmrap awsS3ControlMultiRegionAccessPointAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asmrap.ref.Append("timeouts"))
}

type awsS3ControlMultiRegionAccessPointState struct {
	AccountId  string         `json:"account_id"`
	Alias      string         `json:"alias"`
	Arn        string         `json:"arn"`
	DomainName string         `json:"domain_name"`
	Id         string         `json:"id"`
	Status     string         `json:"status"`
	Details    []DetailsState `json:"details"`
	Timeouts   *TimeoutsState `json:"timeouts"`
}
