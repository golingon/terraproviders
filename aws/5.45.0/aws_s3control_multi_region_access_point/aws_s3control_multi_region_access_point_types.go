// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3control_multi_region_access_point

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Details struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// DetailsPublicAccessBlock: optional
	PublicAccessBlock *DetailsPublicAccessBlock `hcl:"public_access_block,block"`
	// DetailsRegion: min=1,max=20
	Region []DetailsRegion `hcl:"region,block" validate:"min=1,max=20"`
}

type DetailsPublicAccessBlock struct {
	// BlockPublicAcls: bool, optional
	BlockPublicAcls terra.BoolValue `hcl:"block_public_acls,attr"`
	// BlockPublicPolicy: bool, optional
	BlockPublicPolicy terra.BoolValue `hcl:"block_public_policy,attr"`
	// IgnorePublicAcls: bool, optional
	IgnorePublicAcls terra.BoolValue `hcl:"ignore_public_acls,attr"`
	// RestrictPublicBuckets: bool, optional
	RestrictPublicBuckets terra.BoolValue `hcl:"restrict_public_buckets,attr"`
}

type DetailsRegion struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// BucketAccountId: string, optional
	BucketAccountId terra.StringValue `hcl:"bucket_account_id,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type DetailsAttributes struct {
	ref terra.Reference
}

func (d DetailsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DetailsAttributes) InternalWithRef(ref terra.Reference) DetailsAttributes {
	return DetailsAttributes{ref: ref}
}

func (d DetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DetailsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d DetailsAttributes) PublicAccessBlock() terra.ListValue[DetailsPublicAccessBlockAttributes] {
	return terra.ReferenceAsList[DetailsPublicAccessBlockAttributes](d.ref.Append("public_access_block"))
}

func (d DetailsAttributes) Region() terra.SetValue[DetailsRegionAttributes] {
	return terra.ReferenceAsSet[DetailsRegionAttributes](d.ref.Append("region"))
}

type DetailsPublicAccessBlockAttributes struct {
	ref terra.Reference
}

func (pab DetailsPublicAccessBlockAttributes) InternalRef() (terra.Reference, error) {
	return pab.ref, nil
}

func (pab DetailsPublicAccessBlockAttributes) InternalWithRef(ref terra.Reference) DetailsPublicAccessBlockAttributes {
	return DetailsPublicAccessBlockAttributes{ref: ref}
}

func (pab DetailsPublicAccessBlockAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pab.ref.InternalTokens()
}

func (pab DetailsPublicAccessBlockAttributes) BlockPublicAcls() terra.BoolValue {
	return terra.ReferenceAsBool(pab.ref.Append("block_public_acls"))
}

func (pab DetailsPublicAccessBlockAttributes) BlockPublicPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(pab.ref.Append("block_public_policy"))
}

func (pab DetailsPublicAccessBlockAttributes) IgnorePublicAcls() terra.BoolValue {
	return terra.ReferenceAsBool(pab.ref.Append("ignore_public_acls"))
}

func (pab DetailsPublicAccessBlockAttributes) RestrictPublicBuckets() terra.BoolValue {
	return terra.ReferenceAsBool(pab.ref.Append("restrict_public_buckets"))
}

type DetailsRegionAttributes struct {
	ref terra.Reference
}

func (r DetailsRegionAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DetailsRegionAttributes) InternalWithRef(ref terra.Reference) DetailsRegionAttributes {
	return DetailsRegionAttributes{ref: ref}
}

func (r DetailsRegionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DetailsRegionAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("bucket"))
}

func (r DetailsRegionAttributes) BucketAccountId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("bucket_account_id"))
}

func (r DetailsRegionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("region"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type DetailsState struct {
	Name              string                          `json:"name"`
	PublicAccessBlock []DetailsPublicAccessBlockState `json:"public_access_block"`
	Region            []DetailsRegionState            `json:"region"`
}

type DetailsPublicAccessBlockState struct {
	BlockPublicAcls       bool `json:"block_public_acls"`
	BlockPublicPolicy     bool `json:"block_public_policy"`
	IgnorePublicAcls      bool `json:"ignore_public_acls"`
	RestrictPublicBuckets bool `json:"restrict_public_buckets"`
}

type DetailsRegionState struct {
	Bucket          string `json:"bucket"`
	BucketAccountId string `json:"bucket_account_id"`
	Region          string `json:"region"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
