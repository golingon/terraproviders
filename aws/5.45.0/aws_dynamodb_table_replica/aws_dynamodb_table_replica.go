// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dynamodb_table_replica

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dynamodb_table_replica.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDynamodbTableReplicaState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adtr *Resource) Type() string {
	return "aws_dynamodb_table_replica"
}

// LocalName returns the local name for [Resource].
func (adtr *Resource) LocalName() string {
	return adtr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adtr *Resource) Configuration() interface{} {
	return adtr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adtr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adtr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adtr *Resource) Dependencies() terra.Dependencies {
	return adtr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adtr *Resource) LifecycleManagement() *terra.Lifecycle {
	return adtr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adtr *Resource) Attributes() awsDynamodbTableReplicaAttributes {
	return awsDynamodbTableReplicaAttributes{ref: terra.ReferenceResource(adtr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adtr *Resource) ImportState(state io.Reader) error {
	adtr.state = &awsDynamodbTableReplicaState{}
	if err := json.NewDecoder(state).Decode(adtr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adtr.Type(), adtr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adtr *Resource) State() (*awsDynamodbTableReplicaState, bool) {
	return adtr.state, adtr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adtr *Resource) StateMust() *awsDynamodbTableReplicaState {
	if adtr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adtr.Type(), adtr.LocalName()))
	}
	return adtr.state
}

// Args contains the configurations for aws_dynamodb_table_replica.
type Args struct {
	// GlobalTableArn: string, required
	GlobalTableArn terra.StringValue `hcl:"global_table_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// PointInTimeRecovery: bool, optional
	PointInTimeRecovery terra.BoolValue `hcl:"point_in_time_recovery,attr"`
	// TableClassOverride: string, optional
	TableClassOverride terra.StringValue `hcl:"table_class_override,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDynamodbTableReplicaAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_dynamodb_table_replica.
func (adtr awsDynamodbTableReplicaAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adtr.ref.Append("arn"))
}

// GlobalTableArn returns a reference to field global_table_arn of aws_dynamodb_table_replica.
func (adtr awsDynamodbTableReplicaAttributes) GlobalTableArn() terra.StringValue {
	return terra.ReferenceAsString(adtr.ref.Append("global_table_arn"))
}

// Id returns a reference to field id of aws_dynamodb_table_replica.
func (adtr awsDynamodbTableReplicaAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adtr.ref.Append("id"))
}

// KmsKeyArn returns a reference to field kms_key_arn of aws_dynamodb_table_replica.
func (adtr awsDynamodbTableReplicaAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(adtr.ref.Append("kms_key_arn"))
}

// PointInTimeRecovery returns a reference to field point_in_time_recovery of aws_dynamodb_table_replica.
func (adtr awsDynamodbTableReplicaAttributes) PointInTimeRecovery() terra.BoolValue {
	return terra.ReferenceAsBool(adtr.ref.Append("point_in_time_recovery"))
}

// TableClassOverride returns a reference to field table_class_override of aws_dynamodb_table_replica.
func (adtr awsDynamodbTableReplicaAttributes) TableClassOverride() terra.StringValue {
	return terra.ReferenceAsString(adtr.ref.Append("table_class_override"))
}

// Tags returns a reference to field tags of aws_dynamodb_table_replica.
func (adtr awsDynamodbTableReplicaAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adtr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_dynamodb_table_replica.
func (adtr awsDynamodbTableReplicaAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adtr.ref.Append("tags_all"))
}

func (adtr awsDynamodbTableReplicaAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adtr.ref.Append("timeouts"))
}

type awsDynamodbTableReplicaState struct {
	Arn                 string            `json:"arn"`
	GlobalTableArn      string            `json:"global_table_arn"`
	Id                  string            `json:"id"`
	KmsKeyArn           string            `json:"kms_key_arn"`
	PointInTimeRecovery bool              `json:"point_in_time_recovery"`
	TableClassOverride  string            `json:"table_class_override"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
