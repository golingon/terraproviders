// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lb_trust_store

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lb_trust_store.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLbTrustStoreState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alts *Resource) Type() string {
	return "aws_lb_trust_store"
}

// LocalName returns the local name for [Resource].
func (alts *Resource) LocalName() string {
	return alts.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alts *Resource) Configuration() interface{} {
	return alts.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alts *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alts)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alts *Resource) Dependencies() terra.Dependencies {
	return alts.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alts *Resource) LifecycleManagement() *terra.Lifecycle {
	return alts.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alts *Resource) Attributes() awsLbTrustStoreAttributes {
	return awsLbTrustStoreAttributes{ref: terra.ReferenceResource(alts)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alts *Resource) ImportState(state io.Reader) error {
	alts.state = &awsLbTrustStoreState{}
	if err := json.NewDecoder(state).Decode(alts.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alts.Type(), alts.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alts *Resource) State() (*awsLbTrustStoreState, bool) {
	return alts.state, alts.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alts *Resource) StateMust() *awsLbTrustStoreState {
	if alts.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alts.Type(), alts.LocalName()))
	}
	return alts.state
}

// Args contains the configurations for aws_lb_trust_store.
type Args struct {
	// CaCertificatesBundleS3Bucket: string, required
	CaCertificatesBundleS3Bucket terra.StringValue `hcl:"ca_certificates_bundle_s3_bucket,attr" validate:"required"`
	// CaCertificatesBundleS3Key: string, required
	CaCertificatesBundleS3Key terra.StringValue `hcl:"ca_certificates_bundle_s3_key,attr" validate:"required"`
	// CaCertificatesBundleS3ObjectVersion: string, optional
	CaCertificatesBundleS3ObjectVersion terra.StringValue `hcl:"ca_certificates_bundle_s3_object_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsLbTrustStoreAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_lb_trust_store.
func (alts awsLbTrustStoreAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(alts.ref.Append("arn"))
}

// ArnSuffix returns a reference to field arn_suffix of aws_lb_trust_store.
func (alts awsLbTrustStoreAttributes) ArnSuffix() terra.StringValue {
	return terra.ReferenceAsString(alts.ref.Append("arn_suffix"))
}

// CaCertificatesBundleS3Bucket returns a reference to field ca_certificates_bundle_s3_bucket of aws_lb_trust_store.
func (alts awsLbTrustStoreAttributes) CaCertificatesBundleS3Bucket() terra.StringValue {
	return terra.ReferenceAsString(alts.ref.Append("ca_certificates_bundle_s3_bucket"))
}

// CaCertificatesBundleS3Key returns a reference to field ca_certificates_bundle_s3_key of aws_lb_trust_store.
func (alts awsLbTrustStoreAttributes) CaCertificatesBundleS3Key() terra.StringValue {
	return terra.ReferenceAsString(alts.ref.Append("ca_certificates_bundle_s3_key"))
}

// CaCertificatesBundleS3ObjectVersion returns a reference to field ca_certificates_bundle_s3_object_version of aws_lb_trust_store.
func (alts awsLbTrustStoreAttributes) CaCertificatesBundleS3ObjectVersion() terra.StringValue {
	return terra.ReferenceAsString(alts.ref.Append("ca_certificates_bundle_s3_object_version"))
}

// Id returns a reference to field id of aws_lb_trust_store.
func (alts awsLbTrustStoreAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alts.ref.Append("id"))
}

// Name returns a reference to field name of aws_lb_trust_store.
func (alts awsLbTrustStoreAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alts.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_lb_trust_store.
func (alts awsLbTrustStoreAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(alts.ref.Append("name_prefix"))
}

// Tags returns a reference to field tags of aws_lb_trust_store.
func (alts awsLbTrustStoreAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alts.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_lb_trust_store.
func (alts awsLbTrustStoreAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alts.ref.Append("tags_all"))
}

func (alts awsLbTrustStoreAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alts.ref.Append("timeouts"))
}

type awsLbTrustStoreState struct {
	Arn                                 string            `json:"arn"`
	ArnSuffix                           string            `json:"arn_suffix"`
	CaCertificatesBundleS3Bucket        string            `json:"ca_certificates_bundle_s3_bucket"`
	CaCertificatesBundleS3Key           string            `json:"ca_certificates_bundle_s3_key"`
	CaCertificatesBundleS3ObjectVersion string            `json:"ca_certificates_bundle_s3_object_version"`
	Id                                  string            `json:"id"`
	Name                                string            `json:"name"`
	NamePrefix                          string            `json:"name_prefix"`
	Tags                                map[string]string `json:"tags"`
	TagsAll                             map[string]string `json:"tags_all"`
	Timeouts                            *TimeoutsState    `json:"timeouts"`
}
