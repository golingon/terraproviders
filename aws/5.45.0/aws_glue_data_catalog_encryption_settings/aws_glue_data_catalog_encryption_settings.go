// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_data_catalog_encryption_settings

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glue_data_catalog_encryption_settings.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlueDataCatalogEncryptionSettingsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agdces *Resource) Type() string {
	return "aws_glue_data_catalog_encryption_settings"
}

// LocalName returns the local name for [Resource].
func (agdces *Resource) LocalName() string {
	return agdces.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agdces *Resource) Configuration() interface{} {
	return agdces.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agdces *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agdces)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agdces *Resource) Dependencies() terra.Dependencies {
	return agdces.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agdces *Resource) LifecycleManagement() *terra.Lifecycle {
	return agdces.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agdces *Resource) Attributes() awsGlueDataCatalogEncryptionSettingsAttributes {
	return awsGlueDataCatalogEncryptionSettingsAttributes{ref: terra.ReferenceResource(agdces)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agdces *Resource) ImportState(state io.Reader) error {
	agdces.state = &awsGlueDataCatalogEncryptionSettingsState{}
	if err := json.NewDecoder(state).Decode(agdces.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agdces.Type(), agdces.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agdces *Resource) State() (*awsGlueDataCatalogEncryptionSettingsState, bool) {
	return agdces.state, agdces.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agdces *Resource) StateMust() *awsGlueDataCatalogEncryptionSettingsState {
	if agdces.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agdces.Type(), agdces.LocalName()))
	}
	return agdces.state
}

// Args contains the configurations for aws_glue_data_catalog_encryption_settings.
type Args struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DataCatalogEncryptionSettings: required
	DataCatalogEncryptionSettings *DataCatalogEncryptionSettings `hcl:"data_catalog_encryption_settings,block" validate:"required"`
}

type awsGlueDataCatalogEncryptionSettingsAttributes struct {
	ref terra.Reference
}

// CatalogId returns a reference to field catalog_id of aws_glue_data_catalog_encryption_settings.
func (agdces awsGlueDataCatalogEncryptionSettingsAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(agdces.ref.Append("catalog_id"))
}

// Id returns a reference to field id of aws_glue_data_catalog_encryption_settings.
func (agdces awsGlueDataCatalogEncryptionSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agdces.ref.Append("id"))
}

func (agdces awsGlueDataCatalogEncryptionSettingsAttributes) DataCatalogEncryptionSettings() terra.ListValue[DataCatalogEncryptionSettingsAttributes] {
	return terra.ReferenceAsList[DataCatalogEncryptionSettingsAttributes](agdces.ref.Append("data_catalog_encryption_settings"))
}

type awsGlueDataCatalogEncryptionSettingsState struct {
	CatalogId                     string                               `json:"catalog_id"`
	Id                            string                               `json:"id"`
	DataCatalogEncryptionSettings []DataCatalogEncryptionSettingsState `json:"data_catalog_encryption_settings"`
}
