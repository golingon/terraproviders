// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_data_catalog_encryption_settings

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataCatalogEncryptionSettings struct {
	// DataCatalogEncryptionSettingsConnectionPasswordEncryption: required
	ConnectionPasswordEncryption *DataCatalogEncryptionSettingsConnectionPasswordEncryption `hcl:"connection_password_encryption,block" validate:"required"`
	// DataCatalogEncryptionSettingsEncryptionAtRest: required
	EncryptionAtRest *DataCatalogEncryptionSettingsEncryptionAtRest `hcl:"encryption_at_rest,block" validate:"required"`
}

type DataCatalogEncryptionSettingsConnectionPasswordEncryption struct {
	// AwsKmsKeyId: string, optional
	AwsKmsKeyId terra.StringValue `hcl:"aws_kms_key_id,attr"`
	// ReturnConnectionPasswordEncrypted: bool, required
	ReturnConnectionPasswordEncrypted terra.BoolValue `hcl:"return_connection_password_encrypted,attr" validate:"required"`
}

type DataCatalogEncryptionSettingsEncryptionAtRest struct {
	// CatalogEncryptionMode: string, required
	CatalogEncryptionMode terra.StringValue `hcl:"catalog_encryption_mode,attr" validate:"required"`
	// CatalogEncryptionServiceRole: string, optional
	CatalogEncryptionServiceRole terra.StringValue `hcl:"catalog_encryption_service_role,attr"`
	// SseAwsKmsKeyId: string, optional
	SseAwsKmsKeyId terra.StringValue `hcl:"sse_aws_kms_key_id,attr"`
}

type DataCatalogEncryptionSettingsAttributes struct {
	ref terra.Reference
}

func (dces DataCatalogEncryptionSettingsAttributes) InternalRef() (terra.Reference, error) {
	return dces.ref, nil
}

func (dces DataCatalogEncryptionSettingsAttributes) InternalWithRef(ref terra.Reference) DataCatalogEncryptionSettingsAttributes {
	return DataCatalogEncryptionSettingsAttributes{ref: ref}
}

func (dces DataCatalogEncryptionSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dces.ref.InternalTokens()
}

func (dces DataCatalogEncryptionSettingsAttributes) ConnectionPasswordEncryption() terra.ListValue[DataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes] {
	return terra.ReferenceAsList[DataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes](dces.ref.Append("connection_password_encryption"))
}

func (dces DataCatalogEncryptionSettingsAttributes) EncryptionAtRest() terra.ListValue[DataCatalogEncryptionSettingsEncryptionAtRestAttributes] {
	return terra.ReferenceAsList[DataCatalogEncryptionSettingsEncryptionAtRestAttributes](dces.ref.Append("encryption_at_rest"))
}

type DataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes struct {
	ref terra.Reference
}

func (cpe DataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return cpe.ref, nil
}

func (cpe DataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes) InternalWithRef(ref terra.Reference) DataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes {
	return DataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes{ref: ref}
}

func (cpe DataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpe.ref.InternalTokens()
}

func (cpe DataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes) AwsKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(cpe.ref.Append("aws_kms_key_id"))
}

func (cpe DataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes) ReturnConnectionPasswordEncrypted() terra.BoolValue {
	return terra.ReferenceAsBool(cpe.ref.Append("return_connection_password_encrypted"))
}

type DataCatalogEncryptionSettingsEncryptionAtRestAttributes struct {
	ref terra.Reference
}

func (ear DataCatalogEncryptionSettingsEncryptionAtRestAttributes) InternalRef() (terra.Reference, error) {
	return ear.ref, nil
}

func (ear DataCatalogEncryptionSettingsEncryptionAtRestAttributes) InternalWithRef(ref terra.Reference) DataCatalogEncryptionSettingsEncryptionAtRestAttributes {
	return DataCatalogEncryptionSettingsEncryptionAtRestAttributes{ref: ref}
}

func (ear DataCatalogEncryptionSettingsEncryptionAtRestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ear.ref.InternalTokens()
}

func (ear DataCatalogEncryptionSettingsEncryptionAtRestAttributes) CatalogEncryptionMode() terra.StringValue {
	return terra.ReferenceAsString(ear.ref.Append("catalog_encryption_mode"))
}

func (ear DataCatalogEncryptionSettingsEncryptionAtRestAttributes) CatalogEncryptionServiceRole() terra.StringValue {
	return terra.ReferenceAsString(ear.ref.Append("catalog_encryption_service_role"))
}

func (ear DataCatalogEncryptionSettingsEncryptionAtRestAttributes) SseAwsKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ear.ref.Append("sse_aws_kms_key_id"))
}

type DataCatalogEncryptionSettingsState struct {
	ConnectionPasswordEncryption []DataCatalogEncryptionSettingsConnectionPasswordEncryptionState `json:"connection_password_encryption"`
	EncryptionAtRest             []DataCatalogEncryptionSettingsEncryptionAtRestState             `json:"encryption_at_rest"`
}

type DataCatalogEncryptionSettingsConnectionPasswordEncryptionState struct {
	AwsKmsKeyId                       string `json:"aws_kms_key_id"`
	ReturnConnectionPasswordEncrypted bool   `json:"return_connection_password_encrypted"`
}

type DataCatalogEncryptionSettingsEncryptionAtRestState struct {
	CatalogEncryptionMode        string `json:"catalog_encryption_mode"`
	CatalogEncryptionServiceRole string `json:"catalog_encryption_service_role"`
	SseAwsKmsKeyId               string `json:"sse_aws_kms_key_id"`
}
