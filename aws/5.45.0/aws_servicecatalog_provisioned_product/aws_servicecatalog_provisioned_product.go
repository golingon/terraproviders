// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_provisioned_product

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_servicecatalog_provisioned_product.
type Resource struct {
	Name      string
	Args      Args
	state     *awsServicecatalogProvisionedProductState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aspp *Resource) Type() string {
	return "aws_servicecatalog_provisioned_product"
}

// LocalName returns the local name for [Resource].
func (aspp *Resource) LocalName() string {
	return aspp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aspp *Resource) Configuration() interface{} {
	return aspp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aspp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aspp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aspp *Resource) Dependencies() terra.Dependencies {
	return aspp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aspp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aspp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aspp *Resource) Attributes() awsServicecatalogProvisionedProductAttributes {
	return awsServicecatalogProvisionedProductAttributes{ref: terra.ReferenceResource(aspp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aspp *Resource) ImportState(state io.Reader) error {
	aspp.state = &awsServicecatalogProvisionedProductState{}
	if err := json.NewDecoder(state).Decode(aspp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aspp.Type(), aspp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aspp *Resource) State() (*awsServicecatalogProvisionedProductState, bool) {
	return aspp.state, aspp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aspp *Resource) StateMust() *awsServicecatalogProvisionedProductState {
	if aspp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aspp.Type(), aspp.LocalName()))
	}
	return aspp.state
}

// Args contains the configurations for aws_servicecatalog_provisioned_product.
type Args struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreErrors: bool, optional
	IgnoreErrors terra.BoolValue `hcl:"ignore_errors,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NotificationArns: list of string, optional
	NotificationArns terra.ListValue[terra.StringValue] `hcl:"notification_arns,attr"`
	// PathId: string, optional
	PathId terra.StringValue `hcl:"path_id,attr"`
	// PathName: string, optional
	PathName terra.StringValue `hcl:"path_name,attr"`
	// ProductId: string, optional
	ProductId terra.StringValue `hcl:"product_id,attr"`
	// ProductName: string, optional
	ProductName terra.StringValue `hcl:"product_name,attr"`
	// ProvisioningArtifactId: string, optional
	ProvisioningArtifactId terra.StringValue `hcl:"provisioning_artifact_id,attr"`
	// ProvisioningArtifactName: string, optional
	ProvisioningArtifactName terra.StringValue `hcl:"provisioning_artifact_name,attr"`
	// RetainPhysicalResources: bool, optional
	RetainPhysicalResources terra.BoolValue `hcl:"retain_physical_resources,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ProvisioningParameters: min=0
	ProvisioningParameters []ProvisioningParameters `hcl:"provisioning_parameters,block" validate:"min=0"`
	// StackSetProvisioningPreferences: optional
	StackSetProvisioningPreferences *StackSetProvisioningPreferences `hcl:"stack_set_provisioning_preferences,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsServicecatalogProvisionedProductAttributes struct {
	ref terra.Reference
}

// AcceptLanguage returns a reference to field accept_language of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("accept_language"))
}

// Arn returns a reference to field arn of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("arn"))
}

// CloudwatchDashboardNames returns a reference to field cloudwatch_dashboard_names of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) CloudwatchDashboardNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aspp.ref.Append("cloudwatch_dashboard_names"))
}

// CreatedTime returns a reference to field created_time of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("created_time"))
}

// Id returns a reference to field id of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("id"))
}

// IgnoreErrors returns a reference to field ignore_errors of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) IgnoreErrors() terra.BoolValue {
	return terra.ReferenceAsBool(aspp.ref.Append("ignore_errors"))
}

// LastProvisioningRecordId returns a reference to field last_provisioning_record_id of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) LastProvisioningRecordId() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("last_provisioning_record_id"))
}

// LastRecordId returns a reference to field last_record_id of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) LastRecordId() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("last_record_id"))
}

// LastSuccessfulProvisioningRecordId returns a reference to field last_successful_provisioning_record_id of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) LastSuccessfulProvisioningRecordId() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("last_successful_provisioning_record_id"))
}

// LaunchRoleArn returns a reference to field launch_role_arn of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) LaunchRoleArn() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("launch_role_arn"))
}

// Name returns a reference to field name of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("name"))
}

// NotificationArns returns a reference to field notification_arns of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) NotificationArns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aspp.ref.Append("notification_arns"))
}

// PathId returns a reference to field path_id of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) PathId() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("path_id"))
}

// PathName returns a reference to field path_name of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) PathName() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("path_name"))
}

// ProductId returns a reference to field product_id of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) ProductId() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("product_id"))
}

// ProductName returns a reference to field product_name of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) ProductName() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("product_name"))
}

// ProvisioningArtifactId returns a reference to field provisioning_artifact_id of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) ProvisioningArtifactId() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("provisioning_artifact_id"))
}

// ProvisioningArtifactName returns a reference to field provisioning_artifact_name of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) ProvisioningArtifactName() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("provisioning_artifact_name"))
}

// RetainPhysicalResources returns a reference to field retain_physical_resources of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) RetainPhysicalResources() terra.BoolValue {
	return terra.ReferenceAsBool(aspp.ref.Append("retain_physical_resources"))
}

// Status returns a reference to field status of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("status"))
}

// StatusMessage returns a reference to field status_message of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) StatusMessage() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("status_message"))
}

// Tags returns a reference to field tags of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aspp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aspp.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_servicecatalog_provisioned_product.
func (aspp awsServicecatalogProvisionedProductAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aspp.ref.Append("type"))
}

func (aspp awsServicecatalogProvisionedProductAttributes) Outputs() terra.SetValue[OutputsAttributes] {
	return terra.ReferenceAsSet[OutputsAttributes](aspp.ref.Append("outputs"))
}

func (aspp awsServicecatalogProvisionedProductAttributes) ProvisioningParameters() terra.ListValue[ProvisioningParametersAttributes] {
	return terra.ReferenceAsList[ProvisioningParametersAttributes](aspp.ref.Append("provisioning_parameters"))
}

func (aspp awsServicecatalogProvisionedProductAttributes) StackSetProvisioningPreferences() terra.ListValue[StackSetProvisioningPreferencesAttributes] {
	return terra.ReferenceAsList[StackSetProvisioningPreferencesAttributes](aspp.ref.Append("stack_set_provisioning_preferences"))
}

func (aspp awsServicecatalogProvisionedProductAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aspp.ref.Append("timeouts"))
}

type awsServicecatalogProvisionedProductState struct {
	AcceptLanguage                     string                                 `json:"accept_language"`
	Arn                                string                                 `json:"arn"`
	CloudwatchDashboardNames           []string                               `json:"cloudwatch_dashboard_names"`
	CreatedTime                        string                                 `json:"created_time"`
	Id                                 string                                 `json:"id"`
	IgnoreErrors                       bool                                   `json:"ignore_errors"`
	LastProvisioningRecordId           string                                 `json:"last_provisioning_record_id"`
	LastRecordId                       string                                 `json:"last_record_id"`
	LastSuccessfulProvisioningRecordId string                                 `json:"last_successful_provisioning_record_id"`
	LaunchRoleArn                      string                                 `json:"launch_role_arn"`
	Name                               string                                 `json:"name"`
	NotificationArns                   []string                               `json:"notification_arns"`
	PathId                             string                                 `json:"path_id"`
	PathName                           string                                 `json:"path_name"`
	ProductId                          string                                 `json:"product_id"`
	ProductName                        string                                 `json:"product_name"`
	ProvisioningArtifactId             string                                 `json:"provisioning_artifact_id"`
	ProvisioningArtifactName           string                                 `json:"provisioning_artifact_name"`
	RetainPhysicalResources            bool                                   `json:"retain_physical_resources"`
	Status                             string                                 `json:"status"`
	StatusMessage                      string                                 `json:"status_message"`
	Tags                               map[string]string                      `json:"tags"`
	TagsAll                            map[string]string                      `json:"tags_all"`
	Type                               string                                 `json:"type"`
	Outputs                            []OutputsState                         `json:"outputs"`
	ProvisioningParameters             []ProvisioningParametersState          `json:"provisioning_parameters"`
	StackSetProvisioningPreferences    []StackSetProvisioningPreferencesState `json:"stack_set_provisioning_preferences"`
	Timeouts                           *TimeoutsState                         `json:"timeouts"`
}
