// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_config_configuration_recorder

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type RecordingGroup struct {
	// AllSupported: bool, optional
	AllSupported terra.BoolValue `hcl:"all_supported,attr"`
	// IncludeGlobalResourceTypes: bool, optional
	IncludeGlobalResourceTypes terra.BoolValue `hcl:"include_global_resource_types,attr"`
	// ResourceTypes: set of string, optional
	ResourceTypes terra.SetValue[terra.StringValue] `hcl:"resource_types,attr"`
	// RecordingGroupExclusionByResourceTypes: min=0
	ExclusionByResourceTypes []RecordingGroupExclusionByResourceTypes `hcl:"exclusion_by_resource_types,block" validate:"min=0"`
	// RecordingGroupRecordingStrategy: min=0
	RecordingStrategy []RecordingGroupRecordingStrategy `hcl:"recording_strategy,block" validate:"min=0"`
}

type RecordingGroupExclusionByResourceTypes struct {
	// ResourceTypes: set of string, optional
	ResourceTypes terra.SetValue[terra.StringValue] `hcl:"resource_types,attr"`
}

type RecordingGroupRecordingStrategy struct {
	// UseOnly: string, optional
	UseOnly terra.StringValue `hcl:"use_only,attr"`
}

type RecordingMode struct {
	// RecordingFrequency: string, optional
	RecordingFrequency terra.StringValue `hcl:"recording_frequency,attr"`
	// RecordingModeRecordingModeOverride: optional
	RecordingModeOverride *RecordingModeRecordingModeOverride `hcl:"recording_mode_override,block"`
}

type RecordingModeRecordingModeOverride struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// RecordingFrequency: string, required
	RecordingFrequency terra.StringValue `hcl:"recording_frequency,attr" validate:"required"`
	// ResourceTypes: set of string, required
	ResourceTypes terra.SetValue[terra.StringValue] `hcl:"resource_types,attr" validate:"required"`
}

type RecordingGroupAttributes struct {
	ref terra.Reference
}

func (rg RecordingGroupAttributes) InternalRef() (terra.Reference, error) {
	return rg.ref, nil
}

func (rg RecordingGroupAttributes) InternalWithRef(ref terra.Reference) RecordingGroupAttributes {
	return RecordingGroupAttributes{ref: ref}
}

func (rg RecordingGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rg.ref.InternalTokens()
}

func (rg RecordingGroupAttributes) AllSupported() terra.BoolValue {
	return terra.ReferenceAsBool(rg.ref.Append("all_supported"))
}

func (rg RecordingGroupAttributes) IncludeGlobalResourceTypes() terra.BoolValue {
	return terra.ReferenceAsBool(rg.ref.Append("include_global_resource_types"))
}

func (rg RecordingGroupAttributes) ResourceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rg.ref.Append("resource_types"))
}

func (rg RecordingGroupAttributes) ExclusionByResourceTypes() terra.ListValue[RecordingGroupExclusionByResourceTypesAttributes] {
	return terra.ReferenceAsList[RecordingGroupExclusionByResourceTypesAttributes](rg.ref.Append("exclusion_by_resource_types"))
}

func (rg RecordingGroupAttributes) RecordingStrategy() terra.ListValue[RecordingGroupRecordingStrategyAttributes] {
	return terra.ReferenceAsList[RecordingGroupRecordingStrategyAttributes](rg.ref.Append("recording_strategy"))
}

type RecordingGroupExclusionByResourceTypesAttributes struct {
	ref terra.Reference
}

func (ebrt RecordingGroupExclusionByResourceTypesAttributes) InternalRef() (terra.Reference, error) {
	return ebrt.ref, nil
}

func (ebrt RecordingGroupExclusionByResourceTypesAttributes) InternalWithRef(ref terra.Reference) RecordingGroupExclusionByResourceTypesAttributes {
	return RecordingGroupExclusionByResourceTypesAttributes{ref: ref}
}

func (ebrt RecordingGroupExclusionByResourceTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebrt.ref.InternalTokens()
}

func (ebrt RecordingGroupExclusionByResourceTypesAttributes) ResourceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ebrt.ref.Append("resource_types"))
}

type RecordingGroupRecordingStrategyAttributes struct {
	ref terra.Reference
}

func (rs RecordingGroupRecordingStrategyAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RecordingGroupRecordingStrategyAttributes) InternalWithRef(ref terra.Reference) RecordingGroupRecordingStrategyAttributes {
	return RecordingGroupRecordingStrategyAttributes{ref: ref}
}

func (rs RecordingGroupRecordingStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RecordingGroupRecordingStrategyAttributes) UseOnly() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("use_only"))
}

type RecordingModeAttributes struct {
	ref terra.Reference
}

func (rm RecordingModeAttributes) InternalRef() (terra.Reference, error) {
	return rm.ref, nil
}

func (rm RecordingModeAttributes) InternalWithRef(ref terra.Reference) RecordingModeAttributes {
	return RecordingModeAttributes{ref: ref}
}

func (rm RecordingModeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rm.ref.InternalTokens()
}

func (rm RecordingModeAttributes) RecordingFrequency() terra.StringValue {
	return terra.ReferenceAsString(rm.ref.Append("recording_frequency"))
}

func (rm RecordingModeAttributes) RecordingModeOverride() terra.ListValue[RecordingModeRecordingModeOverrideAttributes] {
	return terra.ReferenceAsList[RecordingModeRecordingModeOverrideAttributes](rm.ref.Append("recording_mode_override"))
}

type RecordingModeRecordingModeOverrideAttributes struct {
	ref terra.Reference
}

func (rmo RecordingModeRecordingModeOverrideAttributes) InternalRef() (terra.Reference, error) {
	return rmo.ref, nil
}

func (rmo RecordingModeRecordingModeOverrideAttributes) InternalWithRef(ref terra.Reference) RecordingModeRecordingModeOverrideAttributes {
	return RecordingModeRecordingModeOverrideAttributes{ref: ref}
}

func (rmo RecordingModeRecordingModeOverrideAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rmo.ref.InternalTokens()
}

func (rmo RecordingModeRecordingModeOverrideAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(rmo.ref.Append("description"))
}

func (rmo RecordingModeRecordingModeOverrideAttributes) RecordingFrequency() terra.StringValue {
	return terra.ReferenceAsString(rmo.ref.Append("recording_frequency"))
}

func (rmo RecordingModeRecordingModeOverrideAttributes) ResourceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rmo.ref.Append("resource_types"))
}

type RecordingGroupState struct {
	AllSupported               bool                                          `json:"all_supported"`
	IncludeGlobalResourceTypes bool                                          `json:"include_global_resource_types"`
	ResourceTypes              []string                                      `json:"resource_types"`
	ExclusionByResourceTypes   []RecordingGroupExclusionByResourceTypesState `json:"exclusion_by_resource_types"`
	RecordingStrategy          []RecordingGroupRecordingStrategyState        `json:"recording_strategy"`
}

type RecordingGroupExclusionByResourceTypesState struct {
	ResourceTypes []string `json:"resource_types"`
}

type RecordingGroupRecordingStrategyState struct {
	UseOnly string `json:"use_only"`
}

type RecordingModeState struct {
	RecordingFrequency    string                                    `json:"recording_frequency"`
	RecordingModeOverride []RecordingModeRecordingModeOverrideState `json:"recording_mode_override"`
}

type RecordingModeRecordingModeOverrideState struct {
	Description        string   `json:"description"`
	RecordingFrequency string   `json:"recording_frequency"`
	ResourceTypes      []string `json:"resource_types"`
}
