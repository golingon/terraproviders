// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_config_configuration_recorder

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_config_configuration_recorder.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConfigConfigurationRecorderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (accr *Resource) Type() string {
	return "aws_config_configuration_recorder"
}

// LocalName returns the local name for [Resource].
func (accr *Resource) LocalName() string {
	return accr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (accr *Resource) Configuration() interface{} {
	return accr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (accr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(accr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (accr *Resource) Dependencies() terra.Dependencies {
	return accr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (accr *Resource) LifecycleManagement() *terra.Lifecycle {
	return accr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (accr *Resource) Attributes() awsConfigConfigurationRecorderAttributes {
	return awsConfigConfigurationRecorderAttributes{ref: terra.ReferenceResource(accr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (accr *Resource) ImportState(state io.Reader) error {
	accr.state = &awsConfigConfigurationRecorderState{}
	if err := json.NewDecoder(state).Decode(accr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", accr.Type(), accr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (accr *Resource) State() (*awsConfigConfigurationRecorderState, bool) {
	return accr.state, accr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (accr *Resource) StateMust() *awsConfigConfigurationRecorderState {
	if accr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", accr.Type(), accr.LocalName()))
	}
	return accr.state
}

// Args contains the configurations for aws_config_configuration_recorder.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// RecordingGroup: optional
	RecordingGroup *RecordingGroup `hcl:"recording_group,block"`
	// RecordingMode: optional
	RecordingMode *RecordingMode `hcl:"recording_mode,block"`
}

type awsConfigConfigurationRecorderAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_config_configuration_recorder.
func (accr awsConfigConfigurationRecorderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("id"))
}

// Name returns a reference to field name of aws_config_configuration_recorder.
func (accr awsConfigConfigurationRecorderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_config_configuration_recorder.
func (accr awsConfigConfigurationRecorderAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(accr.ref.Append("role_arn"))
}

func (accr awsConfigConfigurationRecorderAttributes) RecordingGroup() terra.ListValue[RecordingGroupAttributes] {
	return terra.ReferenceAsList[RecordingGroupAttributes](accr.ref.Append("recording_group"))
}

func (accr awsConfigConfigurationRecorderAttributes) RecordingMode() terra.ListValue[RecordingModeAttributes] {
	return terra.ReferenceAsList[RecordingModeAttributes](accr.ref.Append("recording_mode"))
}

type awsConfigConfigurationRecorderState struct {
	Id             string                `json:"id"`
	Name           string                `json:"name"`
	RoleArn        string                `json:"role_arn"`
	RecordingGroup []RecordingGroupState `json:"recording_group"`
	RecordingMode  []RecordingModeState  `json:"recording_mode"`
}
