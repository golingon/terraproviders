// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ami_launch_permission

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ami_launch_permission.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAmiLaunchPermissionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aalp *Resource) Type() string {
	return "aws_ami_launch_permission"
}

// LocalName returns the local name for [Resource].
func (aalp *Resource) LocalName() string {
	return aalp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aalp *Resource) Configuration() interface{} {
	return aalp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aalp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aalp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aalp *Resource) Dependencies() terra.Dependencies {
	return aalp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aalp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aalp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aalp *Resource) Attributes() awsAmiLaunchPermissionAttributes {
	return awsAmiLaunchPermissionAttributes{ref: terra.ReferenceResource(aalp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aalp *Resource) ImportState(state io.Reader) error {
	aalp.state = &awsAmiLaunchPermissionState{}
	if err := json.NewDecoder(state).Decode(aalp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aalp.Type(), aalp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aalp *Resource) State() (*awsAmiLaunchPermissionState, bool) {
	return aalp.state, aalp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aalp *Resource) StateMust() *awsAmiLaunchPermissionState {
	if aalp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aalp.Type(), aalp.LocalName()))
	}
	return aalp.state
}

// Args contains the configurations for aws_ami_launch_permission.
type Args struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Group: string, optional
	Group terra.StringValue `hcl:"group,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageId: string, required
	ImageId terra.StringValue `hcl:"image_id,attr" validate:"required"`
	// OrganizationArn: string, optional
	OrganizationArn terra.StringValue `hcl:"organization_arn,attr"`
	// OrganizationalUnitArn: string, optional
	OrganizationalUnitArn terra.StringValue `hcl:"organizational_unit_arn,attr"`
}

type awsAmiLaunchPermissionAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_ami_launch_permission.
func (aalp awsAmiLaunchPermissionAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(aalp.ref.Append("account_id"))
}

// Group returns a reference to field group of aws_ami_launch_permission.
func (aalp awsAmiLaunchPermissionAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(aalp.ref.Append("group"))
}

// Id returns a reference to field id of aws_ami_launch_permission.
func (aalp awsAmiLaunchPermissionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aalp.ref.Append("id"))
}

// ImageId returns a reference to field image_id of aws_ami_launch_permission.
func (aalp awsAmiLaunchPermissionAttributes) ImageId() terra.StringValue {
	return terra.ReferenceAsString(aalp.ref.Append("image_id"))
}

// OrganizationArn returns a reference to field organization_arn of aws_ami_launch_permission.
func (aalp awsAmiLaunchPermissionAttributes) OrganizationArn() terra.StringValue {
	return terra.ReferenceAsString(aalp.ref.Append("organization_arn"))
}

// OrganizationalUnitArn returns a reference to field organizational_unit_arn of aws_ami_launch_permission.
func (aalp awsAmiLaunchPermissionAttributes) OrganizationalUnitArn() terra.StringValue {
	return terra.ReferenceAsString(aalp.ref.Append("organizational_unit_arn"))
}

type awsAmiLaunchPermissionState struct {
	AccountId             string `json:"account_id"`
	Group                 string `json:"group"`
	Id                    string `json:"id"`
	ImageId               string `json:"image_id"`
	OrganizationArn       string `json:"organization_arn"`
	OrganizationalUnitArn string `json:"organizational_unit_arn"`
}
