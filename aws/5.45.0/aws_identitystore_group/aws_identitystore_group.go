// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_identitystore_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_identitystore_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIdentitystoreGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aig *Resource) Type() string {
	return "aws_identitystore_group"
}

// LocalName returns the local name for [Resource].
func (aig *Resource) LocalName() string {
	return aig.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aig *Resource) Configuration() interface{} {
	return aig.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aig *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aig)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aig *Resource) Dependencies() terra.Dependencies {
	return aig.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aig *Resource) LifecycleManagement() *terra.Lifecycle {
	return aig.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aig *Resource) Attributes() awsIdentitystoreGroupAttributes {
	return awsIdentitystoreGroupAttributes{ref: terra.ReferenceResource(aig)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aig *Resource) ImportState(state io.Reader) error {
	aig.state = &awsIdentitystoreGroupState{}
	if err := json.NewDecoder(state).Decode(aig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aig.Type(), aig.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aig *Resource) State() (*awsIdentitystoreGroupState, bool) {
	return aig.state, aig.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aig *Resource) StateMust() *awsIdentitystoreGroupState {
	if aig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aig.Type(), aig.LocalName()))
	}
	return aig.state
}

// Args contains the configurations for aws_identitystore_group.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityStoreId: string, required
	IdentityStoreId terra.StringValue `hcl:"identity_store_id,attr" validate:"required"`
}

type awsIdentitystoreGroupAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_identitystore_group.
func (aig awsIdentitystoreGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aig.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of aws_identitystore_group.
func (aig awsIdentitystoreGroupAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aig.ref.Append("display_name"))
}

// GroupId returns a reference to field group_id of aws_identitystore_group.
func (aig awsIdentitystoreGroupAttributes) GroupId() terra.StringValue {
	return terra.ReferenceAsString(aig.ref.Append("group_id"))
}

// Id returns a reference to field id of aws_identitystore_group.
func (aig awsIdentitystoreGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aig.ref.Append("id"))
}

// IdentityStoreId returns a reference to field identity_store_id of aws_identitystore_group.
func (aig awsIdentitystoreGroupAttributes) IdentityStoreId() terra.StringValue {
	return terra.ReferenceAsString(aig.ref.Append("identity_store_id"))
}

func (aig awsIdentitystoreGroupAttributes) ExternalIds() terra.ListValue[ExternalIdsAttributes] {
	return terra.ReferenceAsList[ExternalIdsAttributes](aig.ref.Append("external_ids"))
}

type awsIdentitystoreGroupState struct {
	Description     string             `json:"description"`
	DisplayName     string             `json:"display_name"`
	GroupId         string             `json:"group_id"`
	Id              string             `json:"id"`
	IdentityStoreId string             `json:"identity_store_id"`
	ExternalIds     []ExternalIdsState `json:"external_ids"`
}
