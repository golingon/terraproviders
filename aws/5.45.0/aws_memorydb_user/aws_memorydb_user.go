// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_memorydb_user

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_memorydb_user.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMemorydbUserState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amu *Resource) Type() string {
	return "aws_memorydb_user"
}

// LocalName returns the local name for [Resource].
func (amu *Resource) LocalName() string {
	return amu.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amu *Resource) Configuration() interface{} {
	return amu.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amu *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amu)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amu *Resource) Dependencies() terra.Dependencies {
	return amu.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amu *Resource) LifecycleManagement() *terra.Lifecycle {
	return amu.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amu *Resource) Attributes() awsMemorydbUserAttributes {
	return awsMemorydbUserAttributes{ref: terra.ReferenceResource(amu)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amu *Resource) ImportState(state io.Reader) error {
	amu.state = &awsMemorydbUserState{}
	if err := json.NewDecoder(state).Decode(amu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amu.Type(), amu.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amu *Resource) State() (*awsMemorydbUserState, bool) {
	return amu.state, amu.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amu *Resource) StateMust() *awsMemorydbUserState {
	if amu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amu.Type(), amu.LocalName()))
	}
	return amu.state
}

// Args contains the configurations for aws_memorydb_user.
type Args struct {
	// AccessString: string, required
	AccessString terra.StringValue `hcl:"access_string,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserName: string, required
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
	// AuthenticationMode: required
	AuthenticationMode *AuthenticationMode `hcl:"authentication_mode,block" validate:"required"`
}

type awsMemorydbUserAttributes struct {
	ref terra.Reference
}

// AccessString returns a reference to field access_string of aws_memorydb_user.
func (amu awsMemorydbUserAttributes) AccessString() terra.StringValue {
	return terra.ReferenceAsString(amu.ref.Append("access_string"))
}

// Arn returns a reference to field arn of aws_memorydb_user.
func (amu awsMemorydbUserAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(amu.ref.Append("arn"))
}

// Id returns a reference to field id of aws_memorydb_user.
func (amu awsMemorydbUserAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amu.ref.Append("id"))
}

// MinimumEngineVersion returns a reference to field minimum_engine_version of aws_memorydb_user.
func (amu awsMemorydbUserAttributes) MinimumEngineVersion() terra.StringValue {
	return terra.ReferenceAsString(amu.ref.Append("minimum_engine_version"))
}

// Tags returns a reference to field tags of aws_memorydb_user.
func (amu awsMemorydbUserAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amu.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_memorydb_user.
func (amu awsMemorydbUserAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amu.ref.Append("tags_all"))
}

// UserName returns a reference to field user_name of aws_memorydb_user.
func (amu awsMemorydbUserAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(amu.ref.Append("user_name"))
}

func (amu awsMemorydbUserAttributes) AuthenticationMode() terra.ListValue[AuthenticationModeAttributes] {
	return terra.ReferenceAsList[AuthenticationModeAttributes](amu.ref.Append("authentication_mode"))
}

type awsMemorydbUserState struct {
	AccessString         string                    `json:"access_string"`
	Arn                  string                    `json:"arn"`
	Id                   string                    `json:"id"`
	MinimumEngineVersion string                    `json:"minimum_engine_version"`
	Tags                 map[string]string         `json:"tags"`
	TagsAll              map[string]string         `json:"tags_all"`
	UserName             string                    `json:"user_name"`
	AuthenticationMode   []AuthenticationModeState `json:"authentication_mode"`
}
