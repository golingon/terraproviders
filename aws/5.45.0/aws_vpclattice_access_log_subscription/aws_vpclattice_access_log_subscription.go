// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpclattice_access_log_subscription

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpclattice_access_log_subscription.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpclatticeAccessLogSubscriptionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avals *Resource) Type() string {
	return "aws_vpclattice_access_log_subscription"
}

// LocalName returns the local name for [Resource].
func (avals *Resource) LocalName() string {
	return avals.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avals *Resource) Configuration() interface{} {
	return avals.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avals *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avals)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avals *Resource) Dependencies() terra.Dependencies {
	return avals.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avals *Resource) LifecycleManagement() *terra.Lifecycle {
	return avals.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avals *Resource) Attributes() awsVpclatticeAccessLogSubscriptionAttributes {
	return awsVpclatticeAccessLogSubscriptionAttributes{ref: terra.ReferenceResource(avals)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avals *Resource) ImportState(state io.Reader) error {
	avals.state = &awsVpclatticeAccessLogSubscriptionState{}
	if err := json.NewDecoder(state).Decode(avals.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avals.Type(), avals.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avals *Resource) State() (*awsVpclatticeAccessLogSubscriptionState, bool) {
	return avals.state, avals.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avals *Resource) StateMust() *awsVpclatticeAccessLogSubscriptionState {
	if avals.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avals.Type(), avals.LocalName()))
	}
	return avals.state
}

// Args contains the configurations for aws_vpclattice_access_log_subscription.
type Args struct {
	// DestinationArn: string, required
	DestinationArn terra.StringValue `hcl:"destination_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceIdentifier: string, required
	ResourceIdentifier terra.StringValue `hcl:"resource_identifier,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsVpclatticeAccessLogSubscriptionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpclattice_access_log_subscription.
func (avals awsVpclatticeAccessLogSubscriptionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(avals.ref.Append("arn"))
}

// DestinationArn returns a reference to field destination_arn of aws_vpclattice_access_log_subscription.
func (avals awsVpclatticeAccessLogSubscriptionAttributes) DestinationArn() terra.StringValue {
	return terra.ReferenceAsString(avals.ref.Append("destination_arn"))
}

// Id returns a reference to field id of aws_vpclattice_access_log_subscription.
func (avals awsVpclatticeAccessLogSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avals.ref.Append("id"))
}

// ResourceArn returns a reference to field resource_arn of aws_vpclattice_access_log_subscription.
func (avals awsVpclatticeAccessLogSubscriptionAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(avals.ref.Append("resource_arn"))
}

// ResourceIdentifier returns a reference to field resource_identifier of aws_vpclattice_access_log_subscription.
func (avals awsVpclatticeAccessLogSubscriptionAttributes) ResourceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(avals.ref.Append("resource_identifier"))
}

// Tags returns a reference to field tags of aws_vpclattice_access_log_subscription.
func (avals awsVpclatticeAccessLogSubscriptionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avals.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpclattice_access_log_subscription.
func (avals awsVpclatticeAccessLogSubscriptionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avals.ref.Append("tags_all"))
}

type awsVpclatticeAccessLogSubscriptionState struct {
	Arn                string            `json:"arn"`
	DestinationArn     string            `json:"destination_arn"`
	Id                 string            `json:"id"`
	ResourceArn        string            `json:"resource_arn"`
	ResourceIdentifier string            `json:"resource_identifier"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
}
