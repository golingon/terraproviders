// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudformation_type

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudformation_type.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudformationTypeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (act *Resource) Type() string {
	return "aws_cloudformation_type"
}

// LocalName returns the local name for [Resource].
func (act *Resource) LocalName() string {
	return act.Name
}

// Configuration returns the configuration (args) for [Resource].
func (act *Resource) Configuration() interface{} {
	return act.Args
}

// DependOn is used for other resources to depend on [Resource].
func (act *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(act)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (act *Resource) Dependencies() terra.Dependencies {
	return act.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (act *Resource) LifecycleManagement() *terra.Lifecycle {
	return act.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (act *Resource) Attributes() awsCloudformationTypeAttributes {
	return awsCloudformationTypeAttributes{ref: terra.ReferenceResource(act)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (act *Resource) ImportState(state io.Reader) error {
	act.state = &awsCloudformationTypeState{}
	if err := json.NewDecoder(state).Decode(act.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", act.Type(), act.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (act *Resource) State() (*awsCloudformationTypeState, bool) {
	return act.state, act.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (act *Resource) StateMust() *awsCloudformationTypeState {
	if act.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", act.Type(), act.LocalName()))
	}
	return act.state
}

// Args contains the configurations for aws_cloudformation_type.
type Args struct {
	// ExecutionRoleArn: string, optional
	ExecutionRoleArn terra.StringValue `hcl:"execution_role_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SchemaHandlerPackage: string, required
	SchemaHandlerPackage terra.StringValue `hcl:"schema_handler_package,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// TypeName: string, required
	TypeName terra.StringValue `hcl:"type_name,attr" validate:"required"`
	// LoggingConfig: optional
	LoggingConfig *LoggingConfig `hcl:"logging_config,block"`
}

type awsCloudformationTypeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("arn"))
}

// DefaultVersionId returns a reference to field default_version_id of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) DefaultVersionId() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("default_version_id"))
}

// DeprecatedStatus returns a reference to field deprecated_status of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) DeprecatedStatus() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("deprecated_status"))
}

// Description returns a reference to field description of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("description"))
}

// DocumentationUrl returns a reference to field documentation_url of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) DocumentationUrl() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("documentation_url"))
}

// ExecutionRoleArn returns a reference to field execution_role_arn of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) ExecutionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("execution_role_arn"))
}

// Id returns a reference to field id of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("id"))
}

// IsDefaultVersion returns a reference to field is_default_version of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) IsDefaultVersion() terra.BoolValue {
	return terra.ReferenceAsBool(act.ref.Append("is_default_version"))
}

// ProvisioningType returns a reference to field provisioning_type of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) ProvisioningType() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("provisioning_type"))
}

// Schema returns a reference to field schema of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("schema"))
}

// SchemaHandlerPackage returns a reference to field schema_handler_package of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) SchemaHandlerPackage() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("schema_handler_package"))
}

// SourceUrl returns a reference to field source_url of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) SourceUrl() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("source_url"))
}

// Type returns a reference to field type of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("type"))
}

// TypeArn returns a reference to field type_arn of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) TypeArn() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("type_arn"))
}

// TypeName returns a reference to field type_name of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) TypeName() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("type_name"))
}

// VersionId returns a reference to field version_id of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) VersionId() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("version_id"))
}

// Visibility returns a reference to field visibility of aws_cloudformation_type.
func (act awsCloudformationTypeAttributes) Visibility() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("visibility"))
}

func (act awsCloudformationTypeAttributes) LoggingConfig() terra.ListValue[LoggingConfigAttributes] {
	return terra.ReferenceAsList[LoggingConfigAttributes](act.ref.Append("logging_config"))
}

type awsCloudformationTypeState struct {
	Arn                  string               `json:"arn"`
	DefaultVersionId     string               `json:"default_version_id"`
	DeprecatedStatus     string               `json:"deprecated_status"`
	Description          string               `json:"description"`
	DocumentationUrl     string               `json:"documentation_url"`
	ExecutionRoleArn     string               `json:"execution_role_arn"`
	Id                   string               `json:"id"`
	IsDefaultVersion     bool                 `json:"is_default_version"`
	ProvisioningType     string               `json:"provisioning_type"`
	Schema               string               `json:"schema"`
	SchemaHandlerPackage string               `json:"schema_handler_package"`
	SourceUrl            string               `json:"source_url"`
	Type                 string               `json:"type"`
	TypeArn              string               `json:"type_arn"`
	TypeName             string               `json:"type_name"`
	VersionId            string               `json:"version_id"`
	Visibility           string               `json:"visibility"`
	LoggingConfig        []LoggingConfigState `json:"logging_config"`
}
