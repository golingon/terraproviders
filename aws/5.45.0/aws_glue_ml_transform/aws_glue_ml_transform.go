// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_ml_transform

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glue_ml_transform.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlueMlTransformState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agmt *Resource) Type() string {
	return "aws_glue_ml_transform"
}

// LocalName returns the local name for [Resource].
func (agmt *Resource) LocalName() string {
	return agmt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agmt *Resource) Configuration() interface{} {
	return agmt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agmt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agmt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agmt *Resource) Dependencies() terra.Dependencies {
	return agmt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agmt *Resource) LifecycleManagement() *terra.Lifecycle {
	return agmt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agmt *Resource) Attributes() awsGlueMlTransformAttributes {
	return awsGlueMlTransformAttributes{ref: terra.ReferenceResource(agmt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agmt *Resource) ImportState(state io.Reader) error {
	agmt.state = &awsGlueMlTransformState{}
	if err := json.NewDecoder(state).Decode(agmt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agmt.Type(), agmt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agmt *Resource) State() (*awsGlueMlTransformState, bool) {
	return agmt.state, agmt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agmt *Resource) StateMust() *awsGlueMlTransformState {
	if agmt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agmt.Type(), agmt.LocalName()))
	}
	return agmt.state
}

// Args contains the configurations for aws_glue_ml_transform.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GlueVersion: string, optional
	GlueVersion terra.StringValue `hcl:"glue_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxCapacity: number, optional
	MaxCapacity terra.NumberValue `hcl:"max_capacity,attr"`
	// MaxRetries: number, optional
	MaxRetries terra.NumberValue `hcl:"max_retries,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NumberOfWorkers: number, optional
	NumberOfWorkers terra.NumberValue `hcl:"number_of_workers,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeout: number, optional
	Timeout terra.NumberValue `hcl:"timeout,attr"`
	// WorkerType: string, optional
	WorkerType terra.StringValue `hcl:"worker_type,attr"`
	// InputRecordTables: min=1
	InputRecordTables []InputRecordTables `hcl:"input_record_tables,block" validate:"min=1"`
	// Parameters: required
	Parameters *Parameters `hcl:"parameters,block" validate:"required"`
}

type awsGlueMlTransformAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agmt.ref.Append("arn"))
}

// Description returns a reference to field description of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(agmt.ref.Append("description"))
}

// GlueVersion returns a reference to field glue_version of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) GlueVersion() terra.StringValue {
	return terra.ReferenceAsString(agmt.ref.Append("glue_version"))
}

// Id returns a reference to field id of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agmt.ref.Append("id"))
}

// LabelCount returns a reference to field label_count of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) LabelCount() terra.NumberValue {
	return terra.ReferenceAsNumber(agmt.ref.Append("label_count"))
}

// MaxCapacity returns a reference to field max_capacity of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) MaxCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(agmt.ref.Append("max_capacity"))
}

// MaxRetries returns a reference to field max_retries of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(agmt.ref.Append("max_retries"))
}

// Name returns a reference to field name of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agmt.ref.Append("name"))
}

// NumberOfWorkers returns a reference to field number_of_workers of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) NumberOfWorkers() terra.NumberValue {
	return terra.ReferenceAsNumber(agmt.ref.Append("number_of_workers"))
}

// RoleArn returns a reference to field role_arn of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(agmt.ref.Append("role_arn"))
}

// Tags returns a reference to field tags of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agmt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agmt.ref.Append("tags_all"))
}

// Timeout returns a reference to field timeout of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(agmt.ref.Append("timeout"))
}

// WorkerType returns a reference to field worker_type of aws_glue_ml_transform.
func (agmt awsGlueMlTransformAttributes) WorkerType() terra.StringValue {
	return terra.ReferenceAsString(agmt.ref.Append("worker_type"))
}

func (agmt awsGlueMlTransformAttributes) Schema() terra.ListValue[SchemaAttributes] {
	return terra.ReferenceAsList[SchemaAttributes](agmt.ref.Append("schema"))
}

func (agmt awsGlueMlTransformAttributes) InputRecordTables() terra.ListValue[InputRecordTablesAttributes] {
	return terra.ReferenceAsList[InputRecordTablesAttributes](agmt.ref.Append("input_record_tables"))
}

func (agmt awsGlueMlTransformAttributes) Parameters() terra.ListValue[ParametersAttributes] {
	return terra.ReferenceAsList[ParametersAttributes](agmt.ref.Append("parameters"))
}

type awsGlueMlTransformState struct {
	Arn               string                   `json:"arn"`
	Description       string                   `json:"description"`
	GlueVersion       string                   `json:"glue_version"`
	Id                string                   `json:"id"`
	LabelCount        float64                  `json:"label_count"`
	MaxCapacity       float64                  `json:"max_capacity"`
	MaxRetries        float64                  `json:"max_retries"`
	Name              string                   `json:"name"`
	NumberOfWorkers   float64                  `json:"number_of_workers"`
	RoleArn           string                   `json:"role_arn"`
	Tags              map[string]string        `json:"tags"`
	TagsAll           map[string]string        `json:"tags_all"`
	Timeout           float64                  `json:"timeout"`
	WorkerType        string                   `json:"worker_type"`
	Schema            []SchemaState            `json:"schema"`
	InputRecordTables []InputRecordTablesState `json:"input_record_tables"`
	Parameters        []ParametersState        `json:"parameters"`
}
