// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_provisioning_artifact

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_servicecatalog_provisioning_artifact.
type Resource struct {
	Name      string
	Args      Args
	state     *awsServicecatalogProvisioningArtifactState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aspa *Resource) Type() string {
	return "aws_servicecatalog_provisioning_artifact"
}

// LocalName returns the local name for [Resource].
func (aspa *Resource) LocalName() string {
	return aspa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aspa *Resource) Configuration() interface{} {
	return aspa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aspa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aspa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aspa *Resource) Dependencies() terra.Dependencies {
	return aspa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aspa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aspa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aspa *Resource) Attributes() awsServicecatalogProvisioningArtifactAttributes {
	return awsServicecatalogProvisioningArtifactAttributes{ref: terra.ReferenceResource(aspa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aspa *Resource) ImportState(state io.Reader) error {
	aspa.state = &awsServicecatalogProvisioningArtifactState{}
	if err := json.NewDecoder(state).Decode(aspa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aspa.Type(), aspa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aspa *Resource) State() (*awsServicecatalogProvisioningArtifactState, bool) {
	return aspa.state, aspa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aspa *Resource) StateMust() *awsServicecatalogProvisioningArtifactState {
	if aspa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aspa.Type(), aspa.LocalName()))
	}
	return aspa.state
}

// Args contains the configurations for aws_servicecatalog_provisioning_artifact.
type Args struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Active: bool, optional
	Active terra.BoolValue `hcl:"active,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableTemplateValidation: bool, optional
	DisableTemplateValidation terra.BoolValue `hcl:"disable_template_validation,attr"`
	// Guidance: string, optional
	Guidance terra.StringValue `hcl:"guidance,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ProductId: string, required
	ProductId terra.StringValue `hcl:"product_id,attr" validate:"required"`
	// TemplatePhysicalId: string, optional
	TemplatePhysicalId terra.StringValue `hcl:"template_physical_id,attr"`
	// TemplateUrl: string, optional
	TemplateUrl terra.StringValue `hcl:"template_url,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsServicecatalogProvisioningArtifactAttributes struct {
	ref terra.Reference
}

// AcceptLanguage returns a reference to field accept_language of aws_servicecatalog_provisioning_artifact.
func (aspa awsServicecatalogProvisioningArtifactAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("accept_language"))
}

// Active returns a reference to field active of aws_servicecatalog_provisioning_artifact.
func (aspa awsServicecatalogProvisioningArtifactAttributes) Active() terra.BoolValue {
	return terra.ReferenceAsBool(aspa.ref.Append("active"))
}

// CreatedTime returns a reference to field created_time of aws_servicecatalog_provisioning_artifact.
func (aspa awsServicecatalogProvisioningArtifactAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("created_time"))
}

// Description returns a reference to field description of aws_servicecatalog_provisioning_artifact.
func (aspa awsServicecatalogProvisioningArtifactAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("description"))
}

// DisableTemplateValidation returns a reference to field disable_template_validation of aws_servicecatalog_provisioning_artifact.
func (aspa awsServicecatalogProvisioningArtifactAttributes) DisableTemplateValidation() terra.BoolValue {
	return terra.ReferenceAsBool(aspa.ref.Append("disable_template_validation"))
}

// Guidance returns a reference to field guidance of aws_servicecatalog_provisioning_artifact.
func (aspa awsServicecatalogProvisioningArtifactAttributes) Guidance() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("guidance"))
}

// Id returns a reference to field id of aws_servicecatalog_provisioning_artifact.
func (aspa awsServicecatalogProvisioningArtifactAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("id"))
}

// Name returns a reference to field name of aws_servicecatalog_provisioning_artifact.
func (aspa awsServicecatalogProvisioningArtifactAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("name"))
}

// ProductId returns a reference to field product_id of aws_servicecatalog_provisioning_artifact.
func (aspa awsServicecatalogProvisioningArtifactAttributes) ProductId() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("product_id"))
}

// ProvisioningArtifactId returns a reference to field provisioning_artifact_id of aws_servicecatalog_provisioning_artifact.
func (aspa awsServicecatalogProvisioningArtifactAttributes) ProvisioningArtifactId() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("provisioning_artifact_id"))
}

// TemplatePhysicalId returns a reference to field template_physical_id of aws_servicecatalog_provisioning_artifact.
func (aspa awsServicecatalogProvisioningArtifactAttributes) TemplatePhysicalId() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("template_physical_id"))
}

// TemplateUrl returns a reference to field template_url of aws_servicecatalog_provisioning_artifact.
func (aspa awsServicecatalogProvisioningArtifactAttributes) TemplateUrl() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("template_url"))
}

// Type returns a reference to field type of aws_servicecatalog_provisioning_artifact.
func (aspa awsServicecatalogProvisioningArtifactAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aspa.ref.Append("type"))
}

func (aspa awsServicecatalogProvisioningArtifactAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aspa.ref.Append("timeouts"))
}

type awsServicecatalogProvisioningArtifactState struct {
	AcceptLanguage            string         `json:"accept_language"`
	Active                    bool           `json:"active"`
	CreatedTime               string         `json:"created_time"`
	Description               string         `json:"description"`
	DisableTemplateValidation bool           `json:"disable_template_validation"`
	Guidance                  string         `json:"guidance"`
	Id                        string         `json:"id"`
	Name                      string         `json:"name"`
	ProductId                 string         `json:"product_id"`
	ProvisioningArtifactId    string         `json:"provisioning_artifact_id"`
	TemplatePhysicalId        string         `json:"template_physical_id"`
	TemplateUrl               string         `json:"template_url"`
	Type                      string         `json:"type"`
	Timeouts                  *TimeoutsState `json:"timeouts"`
}
