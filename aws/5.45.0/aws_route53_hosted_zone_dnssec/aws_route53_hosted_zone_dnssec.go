// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_hosted_zone_dnssec

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53_hosted_zone_dnssec.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53HostedZoneDnssecState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arhzd *Resource) Type() string {
	return "aws_route53_hosted_zone_dnssec"
}

// LocalName returns the local name for [Resource].
func (arhzd *Resource) LocalName() string {
	return arhzd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arhzd *Resource) Configuration() interface{} {
	return arhzd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arhzd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arhzd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arhzd *Resource) Dependencies() terra.Dependencies {
	return arhzd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arhzd *Resource) LifecycleManagement() *terra.Lifecycle {
	return arhzd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arhzd *Resource) Attributes() awsRoute53HostedZoneDnssecAttributes {
	return awsRoute53HostedZoneDnssecAttributes{ref: terra.ReferenceResource(arhzd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arhzd *Resource) ImportState(state io.Reader) error {
	arhzd.state = &awsRoute53HostedZoneDnssecState{}
	if err := json.NewDecoder(state).Decode(arhzd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arhzd.Type(), arhzd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arhzd *Resource) State() (*awsRoute53HostedZoneDnssecState, bool) {
	return arhzd.state, arhzd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arhzd *Resource) StateMust() *awsRoute53HostedZoneDnssecState {
	if arhzd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arhzd.Type(), arhzd.LocalName()))
	}
	return arhzd.state
}

// Args contains the configurations for aws_route53_hosted_zone_dnssec.
type Args struct {
	// HostedZoneId: string, required
	HostedZoneId terra.StringValue `hcl:"hosted_zone_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SigningStatus: string, optional
	SigningStatus terra.StringValue `hcl:"signing_status,attr"`
}

type awsRoute53HostedZoneDnssecAttributes struct {
	ref terra.Reference
}

// HostedZoneId returns a reference to field hosted_zone_id of aws_route53_hosted_zone_dnssec.
func (arhzd awsRoute53HostedZoneDnssecAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceAsString(arhzd.ref.Append("hosted_zone_id"))
}

// Id returns a reference to field id of aws_route53_hosted_zone_dnssec.
func (arhzd awsRoute53HostedZoneDnssecAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arhzd.ref.Append("id"))
}

// SigningStatus returns a reference to field signing_status of aws_route53_hosted_zone_dnssec.
func (arhzd awsRoute53HostedZoneDnssecAttributes) SigningStatus() terra.StringValue {
	return terra.ReferenceAsString(arhzd.ref.Append("signing_status"))
}

type awsRoute53HostedZoneDnssecState struct {
	HostedZoneId  string `json:"hosted_zone_id"`
	Id            string `json:"id"`
	SigningStatus string `json:"signing_status"`
}
