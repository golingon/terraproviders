// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datasync_location_efs

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_datasync_location_efs.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDatasyncLocationEfsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adle *Resource) Type() string {
	return "aws_datasync_location_efs"
}

// LocalName returns the local name for [Resource].
func (adle *Resource) LocalName() string {
	return adle.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adle *Resource) Configuration() interface{} {
	return adle.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adle *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adle)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adle *Resource) Dependencies() terra.Dependencies {
	return adle.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adle *Resource) LifecycleManagement() *terra.Lifecycle {
	return adle.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adle *Resource) Attributes() awsDatasyncLocationEfsAttributes {
	return awsDatasyncLocationEfsAttributes{ref: terra.ReferenceResource(adle)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adle *Resource) ImportState(state io.Reader) error {
	adle.state = &awsDatasyncLocationEfsState{}
	if err := json.NewDecoder(state).Decode(adle.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adle.Type(), adle.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adle *Resource) State() (*awsDatasyncLocationEfsState, bool) {
	return adle.state, adle.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adle *Resource) StateMust() *awsDatasyncLocationEfsState {
	if adle.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adle.Type(), adle.LocalName()))
	}
	return adle.state
}

// Args contains the configurations for aws_datasync_location_efs.
type Args struct {
	// AccessPointArn: string, optional
	AccessPointArn terra.StringValue `hcl:"access_point_arn,attr"`
	// EfsFileSystemArn: string, required
	EfsFileSystemArn terra.StringValue `hcl:"efs_file_system_arn,attr" validate:"required"`
	// FileSystemAccessRoleArn: string, optional
	FileSystemAccessRoleArn terra.StringValue `hcl:"file_system_access_role_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InTransitEncryption: string, optional
	InTransitEncryption terra.StringValue `hcl:"in_transit_encryption,attr"`
	// Subdirectory: string, optional
	Subdirectory terra.StringValue `hcl:"subdirectory,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Ec2Config: required
	Ec2Config *Ec2Config `hcl:"ec2_config,block" validate:"required"`
}

type awsDatasyncLocationEfsAttributes struct {
	ref terra.Reference
}

// AccessPointArn returns a reference to field access_point_arn of aws_datasync_location_efs.
func (adle awsDatasyncLocationEfsAttributes) AccessPointArn() terra.StringValue {
	return terra.ReferenceAsString(adle.ref.Append("access_point_arn"))
}

// Arn returns a reference to field arn of aws_datasync_location_efs.
func (adle awsDatasyncLocationEfsAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adle.ref.Append("arn"))
}

// EfsFileSystemArn returns a reference to field efs_file_system_arn of aws_datasync_location_efs.
func (adle awsDatasyncLocationEfsAttributes) EfsFileSystemArn() terra.StringValue {
	return terra.ReferenceAsString(adle.ref.Append("efs_file_system_arn"))
}

// FileSystemAccessRoleArn returns a reference to field file_system_access_role_arn of aws_datasync_location_efs.
func (adle awsDatasyncLocationEfsAttributes) FileSystemAccessRoleArn() terra.StringValue {
	return terra.ReferenceAsString(adle.ref.Append("file_system_access_role_arn"))
}

// Id returns a reference to field id of aws_datasync_location_efs.
func (adle awsDatasyncLocationEfsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adle.ref.Append("id"))
}

// InTransitEncryption returns a reference to field in_transit_encryption of aws_datasync_location_efs.
func (adle awsDatasyncLocationEfsAttributes) InTransitEncryption() terra.StringValue {
	return terra.ReferenceAsString(adle.ref.Append("in_transit_encryption"))
}

// Subdirectory returns a reference to field subdirectory of aws_datasync_location_efs.
func (adle awsDatasyncLocationEfsAttributes) Subdirectory() terra.StringValue {
	return terra.ReferenceAsString(adle.ref.Append("subdirectory"))
}

// Tags returns a reference to field tags of aws_datasync_location_efs.
func (adle awsDatasyncLocationEfsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adle.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_datasync_location_efs.
func (adle awsDatasyncLocationEfsAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adle.ref.Append("tags_all"))
}

// Uri returns a reference to field uri of aws_datasync_location_efs.
func (adle awsDatasyncLocationEfsAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(adle.ref.Append("uri"))
}

func (adle awsDatasyncLocationEfsAttributes) Ec2Config() terra.ListValue[Ec2ConfigAttributes] {
	return terra.ReferenceAsList[Ec2ConfigAttributes](adle.ref.Append("ec2_config"))
}

type awsDatasyncLocationEfsState struct {
	AccessPointArn          string            `json:"access_point_arn"`
	Arn                     string            `json:"arn"`
	EfsFileSystemArn        string            `json:"efs_file_system_arn"`
	FileSystemAccessRoleArn string            `json:"file_system_access_role_arn"`
	Id                      string            `json:"id"`
	InTransitEncryption     string            `json:"in_transit_encryption"`
	Subdirectory            string            `json:"subdirectory"`
	Tags                    map[string]string `json:"tags"`
	TagsAll                 map[string]string `json:"tags_all"`
	Uri                     string            `json:"uri"`
	Ec2Config               []Ec2ConfigState  `json:"ec2_config"`
}
