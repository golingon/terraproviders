// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opsworks_application

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_opsworks_application.
type Resource struct {
	Name      string
	Args      Args
	state     *awsOpsworksApplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aoa *Resource) Type() string {
	return "aws_opsworks_application"
}

// LocalName returns the local name for [Resource].
func (aoa *Resource) LocalName() string {
	return aoa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aoa *Resource) Configuration() interface{} {
	return aoa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aoa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aoa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aoa *Resource) Dependencies() terra.Dependencies {
	return aoa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aoa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aoa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aoa *Resource) Attributes() awsOpsworksApplicationAttributes {
	return awsOpsworksApplicationAttributes{ref: terra.ReferenceResource(aoa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aoa *Resource) ImportState(state io.Reader) error {
	aoa.state = &awsOpsworksApplicationState{}
	if err := json.NewDecoder(state).Decode(aoa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aoa.Type(), aoa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aoa *Resource) State() (*awsOpsworksApplicationState, bool) {
	return aoa.state, aoa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aoa *Resource) StateMust() *awsOpsworksApplicationState {
	if aoa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aoa.Type(), aoa.LocalName()))
	}
	return aoa.state
}

// Args contains the configurations for aws_opsworks_application.
type Args struct {
	// AutoBundleOnDeploy: string, optional
	AutoBundleOnDeploy terra.StringValue `hcl:"auto_bundle_on_deploy,attr"`
	// AwsFlowRubySettings: string, optional
	AwsFlowRubySettings terra.StringValue `hcl:"aws_flow_ruby_settings,attr"`
	// DataSourceArn: string, optional
	DataSourceArn terra.StringValue `hcl:"data_source_arn,attr"`
	// DataSourceDatabaseName: string, optional
	DataSourceDatabaseName terra.StringValue `hcl:"data_source_database_name,attr"`
	// DataSourceType: string, optional
	DataSourceType terra.StringValue `hcl:"data_source_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DocumentRoot: string, optional
	DocumentRoot terra.StringValue `hcl:"document_root,attr"`
	// Domains: list of string, optional
	Domains terra.ListValue[terra.StringValue] `hcl:"domains,attr"`
	// EnableSsl: bool, optional
	EnableSsl terra.BoolValue `hcl:"enable_ssl,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RailsEnv: string, optional
	RailsEnv terra.StringValue `hcl:"rails_env,attr"`
	// ShortName: string, optional
	ShortName terra.StringValue `hcl:"short_name,attr"`
	// StackId: string, required
	StackId terra.StringValue `hcl:"stack_id,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// AppSource: min=0
	AppSource []AppSource `hcl:"app_source,block" validate:"min=0"`
	// Environment: min=0
	Environment []Environment `hcl:"environment,block" validate:"min=0"`
	// SslConfiguration: min=0
	SslConfiguration []SslConfiguration `hcl:"ssl_configuration,block" validate:"min=0"`
}

type awsOpsworksApplicationAttributes struct {
	ref terra.Reference
}

// AutoBundleOnDeploy returns a reference to field auto_bundle_on_deploy of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) AutoBundleOnDeploy() terra.StringValue {
	return terra.ReferenceAsString(aoa.ref.Append("auto_bundle_on_deploy"))
}

// AwsFlowRubySettings returns a reference to field aws_flow_ruby_settings of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) AwsFlowRubySettings() terra.StringValue {
	return terra.ReferenceAsString(aoa.ref.Append("aws_flow_ruby_settings"))
}

// DataSourceArn returns a reference to field data_source_arn of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(aoa.ref.Append("data_source_arn"))
}

// DataSourceDatabaseName returns a reference to field data_source_database_name of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) DataSourceDatabaseName() terra.StringValue {
	return terra.ReferenceAsString(aoa.ref.Append("data_source_database_name"))
}

// DataSourceType returns a reference to field data_source_type of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) DataSourceType() terra.StringValue {
	return terra.ReferenceAsString(aoa.ref.Append("data_source_type"))
}

// Description returns a reference to field description of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aoa.ref.Append("description"))
}

// DocumentRoot returns a reference to field document_root of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) DocumentRoot() terra.StringValue {
	return terra.ReferenceAsString(aoa.ref.Append("document_root"))
}

// Domains returns a reference to field domains of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) Domains() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aoa.ref.Append("domains"))
}

// EnableSsl returns a reference to field enable_ssl of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) EnableSsl() terra.BoolValue {
	return terra.ReferenceAsBool(aoa.ref.Append("enable_ssl"))
}

// Id returns a reference to field id of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aoa.ref.Append("id"))
}

// Name returns a reference to field name of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aoa.ref.Append("name"))
}

// RailsEnv returns a reference to field rails_env of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) RailsEnv() terra.StringValue {
	return terra.ReferenceAsString(aoa.ref.Append("rails_env"))
}

// ShortName returns a reference to field short_name of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) ShortName() terra.StringValue {
	return terra.ReferenceAsString(aoa.ref.Append("short_name"))
}

// StackId returns a reference to field stack_id of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) StackId() terra.StringValue {
	return terra.ReferenceAsString(aoa.ref.Append("stack_id"))
}

// Type returns a reference to field type of aws_opsworks_application.
func (aoa awsOpsworksApplicationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aoa.ref.Append("type"))
}

func (aoa awsOpsworksApplicationAttributes) AppSource() terra.ListValue[AppSourceAttributes] {
	return terra.ReferenceAsList[AppSourceAttributes](aoa.ref.Append("app_source"))
}

func (aoa awsOpsworksApplicationAttributes) Environment() terra.SetValue[EnvironmentAttributes] {
	return terra.ReferenceAsSet[EnvironmentAttributes](aoa.ref.Append("environment"))
}

func (aoa awsOpsworksApplicationAttributes) SslConfiguration() terra.ListValue[SslConfigurationAttributes] {
	return terra.ReferenceAsList[SslConfigurationAttributes](aoa.ref.Append("ssl_configuration"))
}

type awsOpsworksApplicationState struct {
	AutoBundleOnDeploy     string                  `json:"auto_bundle_on_deploy"`
	AwsFlowRubySettings    string                  `json:"aws_flow_ruby_settings"`
	DataSourceArn          string                  `json:"data_source_arn"`
	DataSourceDatabaseName string                  `json:"data_source_database_name"`
	DataSourceType         string                  `json:"data_source_type"`
	Description            string                  `json:"description"`
	DocumentRoot           string                  `json:"document_root"`
	Domains                []string                `json:"domains"`
	EnableSsl              bool                    `json:"enable_ssl"`
	Id                     string                  `json:"id"`
	Name                   string                  `json:"name"`
	RailsEnv               string                  `json:"rails_env"`
	ShortName              string                  `json:"short_name"`
	StackId                string                  `json:"stack_id"`
	Type                   string                  `json:"type"`
	AppSource              []AppSourceState        `json:"app_source"`
	Environment            []EnvironmentState      `json:"environment"`
	SslConfiguration       []SslConfigurationState `json:"ssl_configuration"`
}
