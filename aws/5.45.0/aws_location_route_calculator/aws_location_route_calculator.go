// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_location_route_calculator

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_location_route_calculator.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLocationRouteCalculatorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alrc *Resource) Type() string {
	return "aws_location_route_calculator"
}

// LocalName returns the local name for [Resource].
func (alrc *Resource) LocalName() string {
	return alrc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alrc *Resource) Configuration() interface{} {
	return alrc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alrc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alrc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alrc *Resource) Dependencies() terra.Dependencies {
	return alrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alrc *Resource) LifecycleManagement() *terra.Lifecycle {
	return alrc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alrc *Resource) Attributes() awsLocationRouteCalculatorAttributes {
	return awsLocationRouteCalculatorAttributes{ref: terra.ReferenceResource(alrc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alrc *Resource) ImportState(state io.Reader) error {
	alrc.state = &awsLocationRouteCalculatorState{}
	if err := json.NewDecoder(state).Decode(alrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alrc.Type(), alrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alrc *Resource) State() (*awsLocationRouteCalculatorState, bool) {
	return alrc.state, alrc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alrc *Resource) StateMust() *awsLocationRouteCalculatorState {
	if alrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alrc.Type(), alrc.LocalName()))
	}
	return alrc.state
}

// Args contains the configurations for aws_location_route_calculator.
type Args struct {
	// CalculatorName: string, required
	CalculatorName terra.StringValue `hcl:"calculator_name,attr" validate:"required"`
	// DataSource: string, required
	DataSource terra.StringValue `hcl:"data_source,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsLocationRouteCalculatorAttributes struct {
	ref terra.Reference
}

// CalculatorArn returns a reference to field calculator_arn of aws_location_route_calculator.
func (alrc awsLocationRouteCalculatorAttributes) CalculatorArn() terra.StringValue {
	return terra.ReferenceAsString(alrc.ref.Append("calculator_arn"))
}

// CalculatorName returns a reference to field calculator_name of aws_location_route_calculator.
func (alrc awsLocationRouteCalculatorAttributes) CalculatorName() terra.StringValue {
	return terra.ReferenceAsString(alrc.ref.Append("calculator_name"))
}

// CreateTime returns a reference to field create_time of aws_location_route_calculator.
func (alrc awsLocationRouteCalculatorAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(alrc.ref.Append("create_time"))
}

// DataSource returns a reference to field data_source of aws_location_route_calculator.
func (alrc awsLocationRouteCalculatorAttributes) DataSource() terra.StringValue {
	return terra.ReferenceAsString(alrc.ref.Append("data_source"))
}

// Description returns a reference to field description of aws_location_route_calculator.
func (alrc awsLocationRouteCalculatorAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(alrc.ref.Append("description"))
}

// Id returns a reference to field id of aws_location_route_calculator.
func (alrc awsLocationRouteCalculatorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alrc.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_location_route_calculator.
func (alrc awsLocationRouteCalculatorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alrc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_location_route_calculator.
func (alrc awsLocationRouteCalculatorAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alrc.ref.Append("tags_all"))
}

// UpdateTime returns a reference to field update_time of aws_location_route_calculator.
func (alrc awsLocationRouteCalculatorAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(alrc.ref.Append("update_time"))
}

func (alrc awsLocationRouteCalculatorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alrc.ref.Append("timeouts"))
}

type awsLocationRouteCalculatorState struct {
	CalculatorArn  string            `json:"calculator_arn"`
	CalculatorName string            `json:"calculator_name"`
	CreateTime     string            `json:"create_time"`
	DataSource     string            `json:"data_source"`
	Description    string            `json:"description"`
	Id             string            `json:"id"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
	UpdateTime     string            `json:"update_time"`
	Timeouts       *TimeoutsState    `json:"timeouts"`
}
