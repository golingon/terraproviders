// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lakeformation_resource_lf_tags

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lakeformation_resource_lf_tags.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLakeformationResourceLfTagsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alrlt *Resource) Type() string {
	return "aws_lakeformation_resource_lf_tags"
}

// LocalName returns the local name for [Resource].
func (alrlt *Resource) LocalName() string {
	return alrlt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alrlt *Resource) Configuration() interface{} {
	return alrlt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alrlt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alrlt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alrlt *Resource) Dependencies() terra.Dependencies {
	return alrlt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alrlt *Resource) LifecycleManagement() *terra.Lifecycle {
	return alrlt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alrlt *Resource) Attributes() awsLakeformationResourceLfTagsAttributes {
	return awsLakeformationResourceLfTagsAttributes{ref: terra.ReferenceResource(alrlt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alrlt *Resource) ImportState(state io.Reader) error {
	alrlt.state = &awsLakeformationResourceLfTagsState{}
	if err := json.NewDecoder(state).Decode(alrlt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alrlt.Type(), alrlt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alrlt *Resource) State() (*awsLakeformationResourceLfTagsState, bool) {
	return alrlt.state, alrlt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alrlt *Resource) StateMust() *awsLakeformationResourceLfTagsState {
	if alrlt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alrlt.Type(), alrlt.LocalName()))
	}
	return alrlt.state
}

// Args contains the configurations for aws_lakeformation_resource_lf_tags.
type Args struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Database: optional
	Database *Database `hcl:"database,block"`
	// LfTag: min=1
	LfTag []LfTag `hcl:"lf_tag,block" validate:"min=1"`
	// Table: optional
	Table *Table `hcl:"table,block"`
	// TableWithColumns: optional
	TableWithColumns *TableWithColumns `hcl:"table_with_columns,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsLakeformationResourceLfTagsAttributes struct {
	ref terra.Reference
}

// CatalogId returns a reference to field catalog_id of aws_lakeformation_resource_lf_tags.
func (alrlt awsLakeformationResourceLfTagsAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(alrlt.ref.Append("catalog_id"))
}

// Id returns a reference to field id of aws_lakeformation_resource_lf_tags.
func (alrlt awsLakeformationResourceLfTagsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alrlt.ref.Append("id"))
}

func (alrlt awsLakeformationResourceLfTagsAttributes) Database() terra.ListValue[DatabaseAttributes] {
	return terra.ReferenceAsList[DatabaseAttributes](alrlt.ref.Append("database"))
}

func (alrlt awsLakeformationResourceLfTagsAttributes) LfTag() terra.SetValue[LfTagAttributes] {
	return terra.ReferenceAsSet[LfTagAttributes](alrlt.ref.Append("lf_tag"))
}

func (alrlt awsLakeformationResourceLfTagsAttributes) Table() terra.ListValue[TableAttributes] {
	return terra.ReferenceAsList[TableAttributes](alrlt.ref.Append("table"))
}

func (alrlt awsLakeformationResourceLfTagsAttributes) TableWithColumns() terra.ListValue[TableWithColumnsAttributes] {
	return terra.ReferenceAsList[TableWithColumnsAttributes](alrlt.ref.Append("table_with_columns"))
}

func (alrlt awsLakeformationResourceLfTagsAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alrlt.ref.Append("timeouts"))
}

type awsLakeformationResourceLfTagsState struct {
	CatalogId        string                  `json:"catalog_id"`
	Id               string                  `json:"id"`
	Database         []DatabaseState         `json:"database"`
	LfTag            []LfTagState            `json:"lf_tag"`
	Table            []TableState            `json:"table"`
	TableWithColumns []TableWithColumnsState `json:"table_with_columns"`
	Timeouts         *TimeoutsState          `json:"timeouts"`
}
