// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_workteam

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sagemaker_workteam.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSagemakerWorkteamState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asw *Resource) Type() string {
	return "aws_sagemaker_workteam"
}

// LocalName returns the local name for [Resource].
func (asw *Resource) LocalName() string {
	return asw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asw *Resource) Configuration() interface{} {
	return asw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asw *Resource) Dependencies() terra.Dependencies {
	return asw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asw *Resource) LifecycleManagement() *terra.Lifecycle {
	return asw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asw *Resource) Attributes() awsSagemakerWorkteamAttributes {
	return awsSagemakerWorkteamAttributes{ref: terra.ReferenceResource(asw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asw *Resource) ImportState(state io.Reader) error {
	asw.state = &awsSagemakerWorkteamState{}
	if err := json.NewDecoder(state).Decode(asw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asw.Type(), asw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asw *Resource) State() (*awsSagemakerWorkteamState, bool) {
	return asw.state, asw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asw *Resource) StateMust() *awsSagemakerWorkteamState {
	if asw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asw.Type(), asw.LocalName()))
	}
	return asw.state
}

// Args contains the configurations for aws_sagemaker_workteam.
type Args struct {
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// WorkforceName: string, required
	WorkforceName terra.StringValue `hcl:"workforce_name,attr" validate:"required"`
	// WorkteamName: string, required
	WorkteamName terra.StringValue `hcl:"workteam_name,attr" validate:"required"`
	// MemberDefinition: min=1,max=10
	MemberDefinition []MemberDefinition `hcl:"member_definition,block" validate:"min=1,max=10"`
	// NotificationConfiguration: optional
	NotificationConfiguration *NotificationConfiguration `hcl:"notification_configuration,block"`
}

type awsSagemakerWorkteamAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_workteam.
func (asw awsSagemakerWorkteamAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("arn"))
}

// Description returns a reference to field description of aws_sagemaker_workteam.
func (asw awsSagemakerWorkteamAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("description"))
}

// Id returns a reference to field id of aws_sagemaker_workteam.
func (asw awsSagemakerWorkteamAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("id"))
}

// Subdomain returns a reference to field subdomain of aws_sagemaker_workteam.
func (asw awsSagemakerWorkteamAttributes) Subdomain() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("subdomain"))
}

// Tags returns a reference to field tags of aws_sagemaker_workteam.
func (asw awsSagemakerWorkteamAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asw.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_workteam.
func (asw awsSagemakerWorkteamAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asw.ref.Append("tags_all"))
}

// WorkforceName returns a reference to field workforce_name of aws_sagemaker_workteam.
func (asw awsSagemakerWorkteamAttributes) WorkforceName() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("workforce_name"))
}

// WorkteamName returns a reference to field workteam_name of aws_sagemaker_workteam.
func (asw awsSagemakerWorkteamAttributes) WorkteamName() terra.StringValue {
	return terra.ReferenceAsString(asw.ref.Append("workteam_name"))
}

func (asw awsSagemakerWorkteamAttributes) MemberDefinition() terra.ListValue[MemberDefinitionAttributes] {
	return terra.ReferenceAsList[MemberDefinitionAttributes](asw.ref.Append("member_definition"))
}

func (asw awsSagemakerWorkteamAttributes) NotificationConfiguration() terra.ListValue[NotificationConfigurationAttributes] {
	return terra.ReferenceAsList[NotificationConfigurationAttributes](asw.ref.Append("notification_configuration"))
}

type awsSagemakerWorkteamState struct {
	Arn                       string                           `json:"arn"`
	Description               string                           `json:"description"`
	Id                        string                           `json:"id"`
	Subdomain                 string                           `json:"subdomain"`
	Tags                      map[string]string                `json:"tags"`
	TagsAll                   map[string]string                `json:"tags_all"`
	WorkforceName             string                           `json:"workforce_name"`
	WorkteamName              string                           `json:"workteam_name"`
	MemberDefinition          []MemberDefinitionState          `json:"member_definition"`
	NotificationConfiguration []NotificationConfigurationState `json:"notification_configuration"`
}
