// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kendra_faq

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kendra_faq.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKendraFaqState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akf *Resource) Type() string {
	return "aws_kendra_faq"
}

// LocalName returns the local name for [Resource].
func (akf *Resource) LocalName() string {
	return akf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akf *Resource) Configuration() interface{} {
	return akf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akf *Resource) Dependencies() terra.Dependencies {
	return akf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akf *Resource) LifecycleManagement() *terra.Lifecycle {
	return akf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akf *Resource) Attributes() awsKendraFaqAttributes {
	return awsKendraFaqAttributes{ref: terra.ReferenceResource(akf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akf *Resource) ImportState(state io.Reader) error {
	akf.state = &awsKendraFaqState{}
	if err := json.NewDecoder(state).Decode(akf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akf.Type(), akf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akf *Resource) State() (*awsKendraFaqState, bool) {
	return akf.state, akf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akf *Resource) StateMust() *awsKendraFaqState {
	if akf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akf.Type(), akf.LocalName()))
	}
	return akf.state
}

// Args contains the configurations for aws_kendra_faq.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FileFormat: string, optional
	FileFormat terra.StringValue `hcl:"file_format,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IndexId: string, required
	IndexId terra.StringValue `hcl:"index_id,attr" validate:"required"`
	// LanguageCode: string, optional
	LanguageCode terra.StringValue `hcl:"language_code,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// S3Path: required
	S3Path *S3Path `hcl:"s3_path,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsKendraFaqAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_kendra_faq.
func (akf awsKendraFaqAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(akf.ref.Append("arn"))
}

// CreatedAt returns a reference to field created_at of aws_kendra_faq.
func (akf awsKendraFaqAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(akf.ref.Append("created_at"))
}

// Description returns a reference to field description of aws_kendra_faq.
func (akf awsKendraFaqAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(akf.ref.Append("description"))
}

// ErrorMessage returns a reference to field error_message of aws_kendra_faq.
func (akf awsKendraFaqAttributes) ErrorMessage() terra.StringValue {
	return terra.ReferenceAsString(akf.ref.Append("error_message"))
}

// FaqId returns a reference to field faq_id of aws_kendra_faq.
func (akf awsKendraFaqAttributes) FaqId() terra.StringValue {
	return terra.ReferenceAsString(akf.ref.Append("faq_id"))
}

// FileFormat returns a reference to field file_format of aws_kendra_faq.
func (akf awsKendraFaqAttributes) FileFormat() terra.StringValue {
	return terra.ReferenceAsString(akf.ref.Append("file_format"))
}

// Id returns a reference to field id of aws_kendra_faq.
func (akf awsKendraFaqAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akf.ref.Append("id"))
}

// IndexId returns a reference to field index_id of aws_kendra_faq.
func (akf awsKendraFaqAttributes) IndexId() terra.StringValue {
	return terra.ReferenceAsString(akf.ref.Append("index_id"))
}

// LanguageCode returns a reference to field language_code of aws_kendra_faq.
func (akf awsKendraFaqAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(akf.ref.Append("language_code"))
}

// Name returns a reference to field name of aws_kendra_faq.
func (akf awsKendraFaqAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akf.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_kendra_faq.
func (akf awsKendraFaqAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(akf.ref.Append("role_arn"))
}

// Status returns a reference to field status of aws_kendra_faq.
func (akf awsKendraFaqAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(akf.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_kendra_faq.
func (akf awsKendraFaqAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akf.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_kendra_faq.
func (akf awsKendraFaqAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akf.ref.Append("tags_all"))
}

// UpdatedAt returns a reference to field updated_at of aws_kendra_faq.
func (akf awsKendraFaqAttributes) UpdatedAt() terra.StringValue {
	return terra.ReferenceAsString(akf.ref.Append("updated_at"))
}

func (akf awsKendraFaqAttributes) S3Path() terra.ListValue[S3PathAttributes] {
	return terra.ReferenceAsList[S3PathAttributes](akf.ref.Append("s3_path"))
}

func (akf awsKendraFaqAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akf.ref.Append("timeouts"))
}

type awsKendraFaqState struct {
	Arn          string            `json:"arn"`
	CreatedAt    string            `json:"created_at"`
	Description  string            `json:"description"`
	ErrorMessage string            `json:"error_message"`
	FaqId        string            `json:"faq_id"`
	FileFormat   string            `json:"file_format"`
	Id           string            `json:"id"`
	IndexId      string            `json:"index_id"`
	LanguageCode string            `json:"language_code"`
	Name         string            `json:"name"`
	RoleArn      string            `json:"role_arn"`
	Status       string            `json:"status"`
	Tags         map[string]string `json:"tags"`
	TagsAll      map[string]string `json:"tags_all"`
	UpdatedAt    string            `json:"updated_at"`
	S3Path       []S3PathState     `json:"s3_path"`
	Timeouts     *TimeoutsState    `json:"timeouts"`
}
