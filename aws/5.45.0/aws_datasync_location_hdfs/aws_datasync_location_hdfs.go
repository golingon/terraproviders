// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datasync_location_hdfs

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_datasync_location_hdfs.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDatasyncLocationHdfsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adlh *Resource) Type() string {
	return "aws_datasync_location_hdfs"
}

// LocalName returns the local name for [Resource].
func (adlh *Resource) LocalName() string {
	return adlh.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adlh *Resource) Configuration() interface{} {
	return adlh.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adlh *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adlh)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adlh *Resource) Dependencies() terra.Dependencies {
	return adlh.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adlh *Resource) LifecycleManagement() *terra.Lifecycle {
	return adlh.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adlh *Resource) Attributes() awsDatasyncLocationHdfsAttributes {
	return awsDatasyncLocationHdfsAttributes{ref: terra.ReferenceResource(adlh)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adlh *Resource) ImportState(state io.Reader) error {
	adlh.state = &awsDatasyncLocationHdfsState{}
	if err := json.NewDecoder(state).Decode(adlh.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adlh.Type(), adlh.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adlh *Resource) State() (*awsDatasyncLocationHdfsState, bool) {
	return adlh.state, adlh.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adlh *Resource) StateMust() *awsDatasyncLocationHdfsState {
	if adlh.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adlh.Type(), adlh.LocalName()))
	}
	return adlh.state
}

// Args contains the configurations for aws_datasync_location_hdfs.
type Args struct {
	// AgentArns: set of string, required
	AgentArns terra.SetValue[terra.StringValue] `hcl:"agent_arns,attr" validate:"required"`
	// AuthenticationType: string, optional
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr"`
	// BlockSize: number, optional
	BlockSize terra.NumberValue `hcl:"block_size,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KerberosKeytab: string, optional
	KerberosKeytab terra.StringValue `hcl:"kerberos_keytab,attr"`
	// KerberosKeytabBase64: string, optional
	KerberosKeytabBase64 terra.StringValue `hcl:"kerberos_keytab_base64,attr"`
	// KerberosKrb5Conf: string, optional
	KerberosKrb5Conf terra.StringValue `hcl:"kerberos_krb5_conf,attr"`
	// KerberosKrb5ConfBase64: string, optional
	KerberosKrb5ConfBase64 terra.StringValue `hcl:"kerberos_krb5_conf_base64,attr"`
	// KerberosPrincipal: string, optional
	KerberosPrincipal terra.StringValue `hcl:"kerberos_principal,attr"`
	// KmsKeyProviderUri: string, optional
	KmsKeyProviderUri terra.StringValue `hcl:"kms_key_provider_uri,attr"`
	// ReplicationFactor: number, optional
	ReplicationFactor terra.NumberValue `hcl:"replication_factor,attr"`
	// SimpleUser: string, optional
	SimpleUser terra.StringValue `hcl:"simple_user,attr"`
	// Subdirectory: string, optional
	Subdirectory terra.StringValue `hcl:"subdirectory,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// NameNode: min=1
	NameNode []NameNode `hcl:"name_node,block" validate:"min=1"`
	// QopConfiguration: optional
	QopConfiguration *QopConfiguration `hcl:"qop_configuration,block"`
}

type awsDatasyncLocationHdfsAttributes struct {
	ref terra.Reference
}

// AgentArns returns a reference to field agent_arns of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) AgentArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adlh.ref.Append("agent_arns"))
}

// Arn returns a reference to field arn of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adlh.ref.Append("arn"))
}

// AuthenticationType returns a reference to field authentication_type of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceAsString(adlh.ref.Append("authentication_type"))
}

// BlockSize returns a reference to field block_size of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) BlockSize() terra.NumberValue {
	return terra.ReferenceAsNumber(adlh.ref.Append("block_size"))
}

// Id returns a reference to field id of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adlh.ref.Append("id"))
}

// KerberosKeytab returns a reference to field kerberos_keytab of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) KerberosKeytab() terra.StringValue {
	return terra.ReferenceAsString(adlh.ref.Append("kerberos_keytab"))
}

// KerberosKeytabBase64 returns a reference to field kerberos_keytab_base64 of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) KerberosKeytabBase64() terra.StringValue {
	return terra.ReferenceAsString(adlh.ref.Append("kerberos_keytab_base64"))
}

// KerberosKrb5Conf returns a reference to field kerberos_krb5_conf of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) KerberosKrb5Conf() terra.StringValue {
	return terra.ReferenceAsString(adlh.ref.Append("kerberos_krb5_conf"))
}

// KerberosKrb5ConfBase64 returns a reference to field kerberos_krb5_conf_base64 of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) KerberosKrb5ConfBase64() terra.StringValue {
	return terra.ReferenceAsString(adlh.ref.Append("kerberos_krb5_conf_base64"))
}

// KerberosPrincipal returns a reference to field kerberos_principal of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) KerberosPrincipal() terra.StringValue {
	return terra.ReferenceAsString(adlh.ref.Append("kerberos_principal"))
}

// KmsKeyProviderUri returns a reference to field kms_key_provider_uri of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) KmsKeyProviderUri() terra.StringValue {
	return terra.ReferenceAsString(adlh.ref.Append("kms_key_provider_uri"))
}

// ReplicationFactor returns a reference to field replication_factor of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) ReplicationFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(adlh.ref.Append("replication_factor"))
}

// SimpleUser returns a reference to field simple_user of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) SimpleUser() terra.StringValue {
	return terra.ReferenceAsString(adlh.ref.Append("simple_user"))
}

// Subdirectory returns a reference to field subdirectory of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) Subdirectory() terra.StringValue {
	return terra.ReferenceAsString(adlh.ref.Append("subdirectory"))
}

// Tags returns a reference to field tags of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adlh.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adlh.ref.Append("tags_all"))
}

// Uri returns a reference to field uri of aws_datasync_location_hdfs.
func (adlh awsDatasyncLocationHdfsAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(adlh.ref.Append("uri"))
}

func (adlh awsDatasyncLocationHdfsAttributes) NameNode() terra.SetValue[NameNodeAttributes] {
	return terra.ReferenceAsSet[NameNodeAttributes](adlh.ref.Append("name_node"))
}

func (adlh awsDatasyncLocationHdfsAttributes) QopConfiguration() terra.ListValue[QopConfigurationAttributes] {
	return terra.ReferenceAsList[QopConfigurationAttributes](adlh.ref.Append("qop_configuration"))
}

type awsDatasyncLocationHdfsState struct {
	AgentArns              []string                `json:"agent_arns"`
	Arn                    string                  `json:"arn"`
	AuthenticationType     string                  `json:"authentication_type"`
	BlockSize              float64                 `json:"block_size"`
	Id                     string                  `json:"id"`
	KerberosKeytab         string                  `json:"kerberos_keytab"`
	KerberosKeytabBase64   string                  `json:"kerberos_keytab_base64"`
	KerberosKrb5Conf       string                  `json:"kerberos_krb5_conf"`
	KerberosKrb5ConfBase64 string                  `json:"kerberos_krb5_conf_base64"`
	KerberosPrincipal      string                  `json:"kerberos_principal"`
	KmsKeyProviderUri      string                  `json:"kms_key_provider_uri"`
	ReplicationFactor      float64                 `json:"replication_factor"`
	SimpleUser             string                  `json:"simple_user"`
	Subdirectory           string                  `json:"subdirectory"`
	Tags                   map[string]string       `json:"tags"`
	TagsAll                map[string]string       `json:"tags_all"`
	Uri                    string                  `json:"uri"`
	NameNode               []NameNodeState         `json:"name_node"`
	QopConfiguration       []QopConfigurationState `json:"qop_configuration"`
}
