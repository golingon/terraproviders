// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_distribution_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_imagebuilder_distribution_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsImagebuilderDistributionConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aidc *Resource) Type() string {
	return "aws_imagebuilder_distribution_configuration"
}

// LocalName returns the local name for [Resource].
func (aidc *Resource) LocalName() string {
	return aidc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aidc *Resource) Configuration() interface{} {
	return aidc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aidc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aidc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aidc *Resource) Dependencies() terra.Dependencies {
	return aidc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aidc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aidc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aidc *Resource) Attributes() awsImagebuilderDistributionConfigurationAttributes {
	return awsImagebuilderDistributionConfigurationAttributes{ref: terra.ReferenceResource(aidc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aidc *Resource) ImportState(state io.Reader) error {
	aidc.state = &awsImagebuilderDistributionConfigurationState{}
	if err := json.NewDecoder(state).Decode(aidc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aidc.Type(), aidc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aidc *Resource) State() (*awsImagebuilderDistributionConfigurationState, bool) {
	return aidc.state, aidc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aidc *Resource) StateMust() *awsImagebuilderDistributionConfigurationState {
	if aidc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aidc.Type(), aidc.LocalName()))
	}
	return aidc.state
}

// Args contains the configurations for aws_imagebuilder_distribution_configuration.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Distribution: min=1
	Distribution []Distribution `hcl:"distribution,block" validate:"min=1"`
}

type awsImagebuilderDistributionConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_imagebuilder_distribution_configuration.
func (aidc awsImagebuilderDistributionConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("arn"))
}

// DateCreated returns a reference to field date_created of aws_imagebuilder_distribution_configuration.
func (aidc awsImagebuilderDistributionConfigurationAttributes) DateCreated() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("date_created"))
}

// DateUpdated returns a reference to field date_updated of aws_imagebuilder_distribution_configuration.
func (aidc awsImagebuilderDistributionConfigurationAttributes) DateUpdated() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("date_updated"))
}

// Description returns a reference to field description of aws_imagebuilder_distribution_configuration.
func (aidc awsImagebuilderDistributionConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("description"))
}

// Id returns a reference to field id of aws_imagebuilder_distribution_configuration.
func (aidc awsImagebuilderDistributionConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("id"))
}

// Name returns a reference to field name of aws_imagebuilder_distribution_configuration.
func (aidc awsImagebuilderDistributionConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_imagebuilder_distribution_configuration.
func (aidc awsImagebuilderDistributionConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aidc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_imagebuilder_distribution_configuration.
func (aidc awsImagebuilderDistributionConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aidc.ref.Append("tags_all"))
}

func (aidc awsImagebuilderDistributionConfigurationAttributes) Distribution() terra.SetValue[DistributionAttributes] {
	return terra.ReferenceAsSet[DistributionAttributes](aidc.ref.Append("distribution"))
}

type awsImagebuilderDistributionConfigurationState struct {
	Arn          string              `json:"arn"`
	DateCreated  string              `json:"date_created"`
	DateUpdated  string              `json:"date_updated"`
	Description  string              `json:"description"`
	Id           string              `json:"id"`
	Name         string              `json:"name"`
	Tags         map[string]string   `json:"tags"`
	TagsAll      map[string]string   `json:"tags_all"`
	Distribution []DistributionState `json:"distribution"`
}
