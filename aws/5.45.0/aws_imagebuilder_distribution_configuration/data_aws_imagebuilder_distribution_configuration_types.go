// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_distribution_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataDistributionAttributes struct {
	ref terra.Reference
}

func (d DataDistributionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DataDistributionAttributes) InternalWithRef(ref terra.Reference) DataDistributionAttributes {
	return DataDistributionAttributes{ref: ref}
}

func (d DataDistributionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DataDistributionAttributes) LicenseConfigurationArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("license_configuration_arns"))
}

func (d DataDistributionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("region"))
}

func (d DataDistributionAttributes) AmiDistributionConfiguration() terra.SetValue[DataDistributionAmiDistributionConfigurationAttributes] {
	return terra.ReferenceAsSet[DataDistributionAmiDistributionConfigurationAttributes](d.ref.Append("ami_distribution_configuration"))
}

func (d DataDistributionAttributes) ContainerDistributionConfiguration() terra.SetValue[DataDistributionContainerDistributionConfigurationAttributes] {
	return terra.ReferenceAsSet[DataDistributionContainerDistributionConfigurationAttributes](d.ref.Append("container_distribution_configuration"))
}

func (d DataDistributionAttributes) FastLaunchConfiguration() terra.SetValue[DataDistributionFastLaunchConfigurationAttributes] {
	return terra.ReferenceAsSet[DataDistributionFastLaunchConfigurationAttributes](d.ref.Append("fast_launch_configuration"))
}

func (d DataDistributionAttributes) LaunchTemplateConfiguration() terra.SetValue[DataDistributionLaunchTemplateConfigurationAttributes] {
	return terra.ReferenceAsSet[DataDistributionLaunchTemplateConfigurationAttributes](d.ref.Append("launch_template_configuration"))
}

type DataDistributionAmiDistributionConfigurationAttributes struct {
	ref terra.Reference
}

func (adc DataDistributionAmiDistributionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return adc.ref, nil
}

func (adc DataDistributionAmiDistributionConfigurationAttributes) InternalWithRef(ref terra.Reference) DataDistributionAmiDistributionConfigurationAttributes {
	return DataDistributionAmiDistributionConfigurationAttributes{ref: ref}
}

func (adc DataDistributionAmiDistributionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return adc.ref.InternalTokens()
}

func (adc DataDistributionAmiDistributionConfigurationAttributes) AmiTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adc.ref.Append("ami_tags"))
}

func (adc DataDistributionAmiDistributionConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("description"))
}

func (adc DataDistributionAmiDistributionConfigurationAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("kms_key_id"))
}

func (adc DataDistributionAmiDistributionConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("name"))
}

func (adc DataDistributionAmiDistributionConfigurationAttributes) TargetAccountIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adc.ref.Append("target_account_ids"))
}

func (adc DataDistributionAmiDistributionConfigurationAttributes) LaunchPermission() terra.SetValue[DataDistributionAmiDistributionConfigurationLaunchPermissionAttributes] {
	return terra.ReferenceAsSet[DataDistributionAmiDistributionConfigurationLaunchPermissionAttributes](adc.ref.Append("launch_permission"))
}

type DataDistributionAmiDistributionConfigurationLaunchPermissionAttributes struct {
	ref terra.Reference
}

func (lp DataDistributionAmiDistributionConfigurationLaunchPermissionAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp DataDistributionAmiDistributionConfigurationLaunchPermissionAttributes) InternalWithRef(ref terra.Reference) DataDistributionAmiDistributionConfigurationLaunchPermissionAttributes {
	return DataDistributionAmiDistributionConfigurationLaunchPermissionAttributes{ref: ref}
}

func (lp DataDistributionAmiDistributionConfigurationLaunchPermissionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp DataDistributionAmiDistributionConfigurationLaunchPermissionAttributes) OrganizationArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("organization_arns"))
}

func (lp DataDistributionAmiDistributionConfigurationLaunchPermissionAttributes) OrganizationalUnitArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("organizational_unit_arns"))
}

func (lp DataDistributionAmiDistributionConfigurationLaunchPermissionAttributes) UserGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("user_groups"))
}

func (lp DataDistributionAmiDistributionConfigurationLaunchPermissionAttributes) UserIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("user_ids"))
}

type DataDistributionContainerDistributionConfigurationAttributes struct {
	ref terra.Reference
}

func (cdc DataDistributionContainerDistributionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cdc.ref, nil
}

func (cdc DataDistributionContainerDistributionConfigurationAttributes) InternalWithRef(ref terra.Reference) DataDistributionContainerDistributionConfigurationAttributes {
	return DataDistributionContainerDistributionConfigurationAttributes{ref: ref}
}

func (cdc DataDistributionContainerDistributionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cdc.ref.InternalTokens()
}

func (cdc DataDistributionContainerDistributionConfigurationAttributes) ContainerTags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cdc.ref.Append("container_tags"))
}

func (cdc DataDistributionContainerDistributionConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cdc.ref.Append("description"))
}

func (cdc DataDistributionContainerDistributionConfigurationAttributes) TargetRepository() terra.SetValue[DataDistributionContainerDistributionConfigurationTargetRepositoryAttributes] {
	return terra.ReferenceAsSet[DataDistributionContainerDistributionConfigurationTargetRepositoryAttributes](cdc.ref.Append("target_repository"))
}

type DataDistributionContainerDistributionConfigurationTargetRepositoryAttributes struct {
	ref terra.Reference
}

func (tr DataDistributionContainerDistributionConfigurationTargetRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr DataDistributionContainerDistributionConfigurationTargetRepositoryAttributes) InternalWithRef(ref terra.Reference) DataDistributionContainerDistributionConfigurationTargetRepositoryAttributes {
	return DataDistributionContainerDistributionConfigurationTargetRepositoryAttributes{ref: ref}
}

func (tr DataDistributionContainerDistributionConfigurationTargetRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr DataDistributionContainerDistributionConfigurationTargetRepositoryAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("repository_name"))
}

func (tr DataDistributionContainerDistributionConfigurationTargetRepositoryAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("service"))
}

type DataDistributionFastLaunchConfigurationAttributes struct {
	ref terra.Reference
}

func (flc DataDistributionFastLaunchConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return flc.ref, nil
}

func (flc DataDistributionFastLaunchConfigurationAttributes) InternalWithRef(ref terra.Reference) DataDistributionFastLaunchConfigurationAttributes {
	return DataDistributionFastLaunchConfigurationAttributes{ref: ref}
}

func (flc DataDistributionFastLaunchConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return flc.ref.InternalTokens()
}

func (flc DataDistributionFastLaunchConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(flc.ref.Append("account_id"))
}

func (flc DataDistributionFastLaunchConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(flc.ref.Append("enabled"))
}

func (flc DataDistributionFastLaunchConfigurationAttributes) MaxParallelLaunches() terra.NumberValue {
	return terra.ReferenceAsNumber(flc.ref.Append("max_parallel_launches"))
}

func (flc DataDistributionFastLaunchConfigurationAttributes) LaunchTemplate() terra.SetValue[DataDistributionFastLaunchConfigurationLaunchTemplateAttributes] {
	return terra.ReferenceAsSet[DataDistributionFastLaunchConfigurationLaunchTemplateAttributes](flc.ref.Append("launch_template"))
}

func (flc DataDistributionFastLaunchConfigurationAttributes) SnapshotConfiguration() terra.SetValue[DataDistributionFastLaunchConfigurationSnapshotConfigurationAttributes] {
	return terra.ReferenceAsSet[DataDistributionFastLaunchConfigurationSnapshotConfigurationAttributes](flc.ref.Append("snapshot_configuration"))
}

type DataDistributionFastLaunchConfigurationLaunchTemplateAttributes struct {
	ref terra.Reference
}

func (lt DataDistributionFastLaunchConfigurationLaunchTemplateAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt DataDistributionFastLaunchConfigurationLaunchTemplateAttributes) InternalWithRef(ref terra.Reference) DataDistributionFastLaunchConfigurationLaunchTemplateAttributes {
	return DataDistributionFastLaunchConfigurationLaunchTemplateAttributes{ref: ref}
}

func (lt DataDistributionFastLaunchConfigurationLaunchTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt DataDistributionFastLaunchConfigurationLaunchTemplateAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_id"))
}

func (lt DataDistributionFastLaunchConfigurationLaunchTemplateAttributes) LaunchTemplateName() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_name"))
}

func (lt DataDistributionFastLaunchConfigurationLaunchTemplateAttributes) LaunchTemplateVersion() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_version"))
}

type DataDistributionFastLaunchConfigurationSnapshotConfigurationAttributes struct {
	ref terra.Reference
}

func (sc DataDistributionFastLaunchConfigurationSnapshotConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DataDistributionFastLaunchConfigurationSnapshotConfigurationAttributes) InternalWithRef(ref terra.Reference) DataDistributionFastLaunchConfigurationSnapshotConfigurationAttributes {
	return DataDistributionFastLaunchConfigurationSnapshotConfigurationAttributes{ref: ref}
}

func (sc DataDistributionFastLaunchConfigurationSnapshotConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DataDistributionFastLaunchConfigurationSnapshotConfigurationAttributes) TargetResourceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("target_resource_count"))
}

type DataDistributionLaunchTemplateConfigurationAttributes struct {
	ref terra.Reference
}

func (ltc DataDistributionLaunchTemplateConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ltc.ref, nil
}

func (ltc DataDistributionLaunchTemplateConfigurationAttributes) InternalWithRef(ref terra.Reference) DataDistributionLaunchTemplateConfigurationAttributes {
	return DataDistributionLaunchTemplateConfigurationAttributes{ref: ref}
}

func (ltc DataDistributionLaunchTemplateConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ltc.ref.InternalTokens()
}

func (ltc DataDistributionLaunchTemplateConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(ltc.ref.Append("account_id"))
}

func (ltc DataDistributionLaunchTemplateConfigurationAttributes) Default() terra.BoolValue {
	return terra.ReferenceAsBool(ltc.ref.Append("default"))
}

func (ltc DataDistributionLaunchTemplateConfigurationAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(ltc.ref.Append("launch_template_id"))
}

type DataDistributionState struct {
	LicenseConfigurationArns           []string                                                  `json:"license_configuration_arns"`
	Region                             string                                                    `json:"region"`
	AmiDistributionConfiguration       []DataDistributionAmiDistributionConfigurationState       `json:"ami_distribution_configuration"`
	ContainerDistributionConfiguration []DataDistributionContainerDistributionConfigurationState `json:"container_distribution_configuration"`
	FastLaunchConfiguration            []DataDistributionFastLaunchConfigurationState            `json:"fast_launch_configuration"`
	LaunchTemplateConfiguration        []DataDistributionLaunchTemplateConfigurationState        `json:"launch_template_configuration"`
}

type DataDistributionAmiDistributionConfigurationState struct {
	AmiTags          map[string]string                                                   `json:"ami_tags"`
	Description      string                                                              `json:"description"`
	KmsKeyId         string                                                              `json:"kms_key_id"`
	Name             string                                                              `json:"name"`
	TargetAccountIds []string                                                            `json:"target_account_ids"`
	LaunchPermission []DataDistributionAmiDistributionConfigurationLaunchPermissionState `json:"launch_permission"`
}

type DataDistributionAmiDistributionConfigurationLaunchPermissionState struct {
	OrganizationArns       []string `json:"organization_arns"`
	OrganizationalUnitArns []string `json:"organizational_unit_arns"`
	UserGroups             []string `json:"user_groups"`
	UserIds                []string `json:"user_ids"`
}

type DataDistributionContainerDistributionConfigurationState struct {
	ContainerTags    []string                                                                  `json:"container_tags"`
	Description      string                                                                    `json:"description"`
	TargetRepository []DataDistributionContainerDistributionConfigurationTargetRepositoryState `json:"target_repository"`
}

type DataDistributionContainerDistributionConfigurationTargetRepositoryState struct {
	RepositoryName string `json:"repository_name"`
	Service        string `json:"service"`
}

type DataDistributionFastLaunchConfigurationState struct {
	AccountId             string                                                              `json:"account_id"`
	Enabled               bool                                                                `json:"enabled"`
	MaxParallelLaunches   float64                                                             `json:"max_parallel_launches"`
	LaunchTemplate        []DataDistributionFastLaunchConfigurationLaunchTemplateState        `json:"launch_template"`
	SnapshotConfiguration []DataDistributionFastLaunchConfigurationSnapshotConfigurationState `json:"snapshot_configuration"`
}

type DataDistributionFastLaunchConfigurationLaunchTemplateState struct {
	LaunchTemplateId      string `json:"launch_template_id"`
	LaunchTemplateName    string `json:"launch_template_name"`
	LaunchTemplateVersion string `json:"launch_template_version"`
}

type DataDistributionFastLaunchConfigurationSnapshotConfigurationState struct {
	TargetResourceCount float64 `json:"target_resource_count"`
}

type DataDistributionLaunchTemplateConfigurationState struct {
	AccountId        string `json:"account_id"`
	Default          bool   `json:"default"`
	LaunchTemplateId string `json:"launch_template_id"`
}
