// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_distribution_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Distribution struct {
	// LicenseConfigurationArns: set of string, optional
	LicenseConfigurationArns terra.SetValue[terra.StringValue] `hcl:"license_configuration_arns,attr"`
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
	// DistributionAmiDistributionConfiguration: optional
	AmiDistributionConfiguration *DistributionAmiDistributionConfiguration `hcl:"ami_distribution_configuration,block"`
	// DistributionContainerDistributionConfiguration: optional
	ContainerDistributionConfiguration *DistributionContainerDistributionConfiguration `hcl:"container_distribution_configuration,block"`
	// DistributionFastLaunchConfiguration: min=0,max=1000
	FastLaunchConfiguration []DistributionFastLaunchConfiguration `hcl:"fast_launch_configuration,block" validate:"min=0,max=1000"`
	// DistributionLaunchTemplateConfiguration: min=0,max=100
	LaunchTemplateConfiguration []DistributionLaunchTemplateConfiguration `hcl:"launch_template_configuration,block" validate:"min=0,max=100"`
}

type DistributionAmiDistributionConfiguration struct {
	// AmiTags: map of string, optional
	AmiTags terra.MapValue[terra.StringValue] `hcl:"ami_tags,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// TargetAccountIds: set of string, optional
	TargetAccountIds terra.SetValue[terra.StringValue] `hcl:"target_account_ids,attr"`
	// DistributionAmiDistributionConfigurationLaunchPermission: optional
	LaunchPermission *DistributionAmiDistributionConfigurationLaunchPermission `hcl:"launch_permission,block"`
}

type DistributionAmiDistributionConfigurationLaunchPermission struct {
	// OrganizationArns: set of string, optional
	OrganizationArns terra.SetValue[terra.StringValue] `hcl:"organization_arns,attr"`
	// OrganizationalUnitArns: set of string, optional
	OrganizationalUnitArns terra.SetValue[terra.StringValue] `hcl:"organizational_unit_arns,attr"`
	// UserGroups: set of string, optional
	UserGroups terra.SetValue[terra.StringValue] `hcl:"user_groups,attr"`
	// UserIds: set of string, optional
	UserIds terra.SetValue[terra.StringValue] `hcl:"user_ids,attr"`
}

type DistributionContainerDistributionConfiguration struct {
	// ContainerTags: set of string, optional
	ContainerTags terra.SetValue[terra.StringValue] `hcl:"container_tags,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DistributionContainerDistributionConfigurationTargetRepository: required
	TargetRepository *DistributionContainerDistributionConfigurationTargetRepository `hcl:"target_repository,block" validate:"required"`
}

type DistributionContainerDistributionConfigurationTargetRepository struct {
	// RepositoryName: string, required
	RepositoryName terra.StringValue `hcl:"repository_name,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type DistributionFastLaunchConfiguration struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// MaxParallelLaunches: number, optional
	MaxParallelLaunches terra.NumberValue `hcl:"max_parallel_launches,attr"`
	// DistributionFastLaunchConfigurationLaunchTemplate: optional
	LaunchTemplate *DistributionFastLaunchConfigurationLaunchTemplate `hcl:"launch_template,block"`
	// DistributionFastLaunchConfigurationSnapshotConfiguration: optional
	SnapshotConfiguration *DistributionFastLaunchConfigurationSnapshotConfiguration `hcl:"snapshot_configuration,block"`
}

type DistributionFastLaunchConfigurationLaunchTemplate struct {
	// LaunchTemplateId: string, optional
	LaunchTemplateId terra.StringValue `hcl:"launch_template_id,attr"`
	// LaunchTemplateName: string, optional
	LaunchTemplateName terra.StringValue `hcl:"launch_template_name,attr"`
	// LaunchTemplateVersion: string, optional
	LaunchTemplateVersion terra.StringValue `hcl:"launch_template_version,attr"`
}

type DistributionFastLaunchConfigurationSnapshotConfiguration struct {
	// TargetResourceCount: number, optional
	TargetResourceCount terra.NumberValue `hcl:"target_resource_count,attr"`
}

type DistributionLaunchTemplateConfiguration struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Default: bool, optional
	Default terra.BoolValue `hcl:"default,attr"`
	// LaunchTemplateId: string, required
	LaunchTemplateId terra.StringValue `hcl:"launch_template_id,attr" validate:"required"`
}

type DistributionAttributes struct {
	ref terra.Reference
}

func (d DistributionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DistributionAttributes) InternalWithRef(ref terra.Reference) DistributionAttributes {
	return DistributionAttributes{ref: ref}
}

func (d DistributionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DistributionAttributes) LicenseConfigurationArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("license_configuration_arns"))
}

func (d DistributionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("region"))
}

func (d DistributionAttributes) AmiDistributionConfiguration() terra.ListValue[DistributionAmiDistributionConfigurationAttributes] {
	return terra.ReferenceAsList[DistributionAmiDistributionConfigurationAttributes](d.ref.Append("ami_distribution_configuration"))
}

func (d DistributionAttributes) ContainerDistributionConfiguration() terra.ListValue[DistributionContainerDistributionConfigurationAttributes] {
	return terra.ReferenceAsList[DistributionContainerDistributionConfigurationAttributes](d.ref.Append("container_distribution_configuration"))
}

func (d DistributionAttributes) FastLaunchConfiguration() terra.SetValue[DistributionFastLaunchConfigurationAttributes] {
	return terra.ReferenceAsSet[DistributionFastLaunchConfigurationAttributes](d.ref.Append("fast_launch_configuration"))
}

func (d DistributionAttributes) LaunchTemplateConfiguration() terra.SetValue[DistributionLaunchTemplateConfigurationAttributes] {
	return terra.ReferenceAsSet[DistributionLaunchTemplateConfigurationAttributes](d.ref.Append("launch_template_configuration"))
}

type DistributionAmiDistributionConfigurationAttributes struct {
	ref terra.Reference
}

func (adc DistributionAmiDistributionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return adc.ref, nil
}

func (adc DistributionAmiDistributionConfigurationAttributes) InternalWithRef(ref terra.Reference) DistributionAmiDistributionConfigurationAttributes {
	return DistributionAmiDistributionConfigurationAttributes{ref: ref}
}

func (adc DistributionAmiDistributionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return adc.ref.InternalTokens()
}

func (adc DistributionAmiDistributionConfigurationAttributes) AmiTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adc.ref.Append("ami_tags"))
}

func (adc DistributionAmiDistributionConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("description"))
}

func (adc DistributionAmiDistributionConfigurationAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("kms_key_id"))
}

func (adc DistributionAmiDistributionConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("name"))
}

func (adc DistributionAmiDistributionConfigurationAttributes) TargetAccountIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adc.ref.Append("target_account_ids"))
}

func (adc DistributionAmiDistributionConfigurationAttributes) LaunchPermission() terra.ListValue[DistributionAmiDistributionConfigurationLaunchPermissionAttributes] {
	return terra.ReferenceAsList[DistributionAmiDistributionConfigurationLaunchPermissionAttributes](adc.ref.Append("launch_permission"))
}

type DistributionAmiDistributionConfigurationLaunchPermissionAttributes struct {
	ref terra.Reference
}

func (lp DistributionAmiDistributionConfigurationLaunchPermissionAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp DistributionAmiDistributionConfigurationLaunchPermissionAttributes) InternalWithRef(ref terra.Reference) DistributionAmiDistributionConfigurationLaunchPermissionAttributes {
	return DistributionAmiDistributionConfigurationLaunchPermissionAttributes{ref: ref}
}

func (lp DistributionAmiDistributionConfigurationLaunchPermissionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp DistributionAmiDistributionConfigurationLaunchPermissionAttributes) OrganizationArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("organization_arns"))
}

func (lp DistributionAmiDistributionConfigurationLaunchPermissionAttributes) OrganizationalUnitArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("organizational_unit_arns"))
}

func (lp DistributionAmiDistributionConfigurationLaunchPermissionAttributes) UserGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("user_groups"))
}

func (lp DistributionAmiDistributionConfigurationLaunchPermissionAttributes) UserIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("user_ids"))
}

type DistributionContainerDistributionConfigurationAttributes struct {
	ref terra.Reference
}

func (cdc DistributionContainerDistributionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cdc.ref, nil
}

func (cdc DistributionContainerDistributionConfigurationAttributes) InternalWithRef(ref terra.Reference) DistributionContainerDistributionConfigurationAttributes {
	return DistributionContainerDistributionConfigurationAttributes{ref: ref}
}

func (cdc DistributionContainerDistributionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cdc.ref.InternalTokens()
}

func (cdc DistributionContainerDistributionConfigurationAttributes) ContainerTags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cdc.ref.Append("container_tags"))
}

func (cdc DistributionContainerDistributionConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cdc.ref.Append("description"))
}

func (cdc DistributionContainerDistributionConfigurationAttributes) TargetRepository() terra.ListValue[DistributionContainerDistributionConfigurationTargetRepositoryAttributes] {
	return terra.ReferenceAsList[DistributionContainerDistributionConfigurationTargetRepositoryAttributes](cdc.ref.Append("target_repository"))
}

type DistributionContainerDistributionConfigurationTargetRepositoryAttributes struct {
	ref terra.Reference
}

func (tr DistributionContainerDistributionConfigurationTargetRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr DistributionContainerDistributionConfigurationTargetRepositoryAttributes) InternalWithRef(ref terra.Reference) DistributionContainerDistributionConfigurationTargetRepositoryAttributes {
	return DistributionContainerDistributionConfigurationTargetRepositoryAttributes{ref: ref}
}

func (tr DistributionContainerDistributionConfigurationTargetRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr DistributionContainerDistributionConfigurationTargetRepositoryAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("repository_name"))
}

func (tr DistributionContainerDistributionConfigurationTargetRepositoryAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("service"))
}

type DistributionFastLaunchConfigurationAttributes struct {
	ref terra.Reference
}

func (flc DistributionFastLaunchConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return flc.ref, nil
}

func (flc DistributionFastLaunchConfigurationAttributes) InternalWithRef(ref terra.Reference) DistributionFastLaunchConfigurationAttributes {
	return DistributionFastLaunchConfigurationAttributes{ref: ref}
}

func (flc DistributionFastLaunchConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return flc.ref.InternalTokens()
}

func (flc DistributionFastLaunchConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(flc.ref.Append("account_id"))
}

func (flc DistributionFastLaunchConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(flc.ref.Append("enabled"))
}

func (flc DistributionFastLaunchConfigurationAttributes) MaxParallelLaunches() terra.NumberValue {
	return terra.ReferenceAsNumber(flc.ref.Append("max_parallel_launches"))
}

func (flc DistributionFastLaunchConfigurationAttributes) LaunchTemplate() terra.ListValue[DistributionFastLaunchConfigurationLaunchTemplateAttributes] {
	return terra.ReferenceAsList[DistributionFastLaunchConfigurationLaunchTemplateAttributes](flc.ref.Append("launch_template"))
}

func (flc DistributionFastLaunchConfigurationAttributes) SnapshotConfiguration() terra.ListValue[DistributionFastLaunchConfigurationSnapshotConfigurationAttributes] {
	return terra.ReferenceAsList[DistributionFastLaunchConfigurationSnapshotConfigurationAttributes](flc.ref.Append("snapshot_configuration"))
}

type DistributionFastLaunchConfigurationLaunchTemplateAttributes struct {
	ref terra.Reference
}

func (lt DistributionFastLaunchConfigurationLaunchTemplateAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt DistributionFastLaunchConfigurationLaunchTemplateAttributes) InternalWithRef(ref terra.Reference) DistributionFastLaunchConfigurationLaunchTemplateAttributes {
	return DistributionFastLaunchConfigurationLaunchTemplateAttributes{ref: ref}
}

func (lt DistributionFastLaunchConfigurationLaunchTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt DistributionFastLaunchConfigurationLaunchTemplateAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_id"))
}

func (lt DistributionFastLaunchConfigurationLaunchTemplateAttributes) LaunchTemplateName() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_name"))
}

func (lt DistributionFastLaunchConfigurationLaunchTemplateAttributes) LaunchTemplateVersion() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_version"))
}

type DistributionFastLaunchConfigurationSnapshotConfigurationAttributes struct {
	ref terra.Reference
}

func (sc DistributionFastLaunchConfigurationSnapshotConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DistributionFastLaunchConfigurationSnapshotConfigurationAttributes) InternalWithRef(ref terra.Reference) DistributionFastLaunchConfigurationSnapshotConfigurationAttributes {
	return DistributionFastLaunchConfigurationSnapshotConfigurationAttributes{ref: ref}
}

func (sc DistributionFastLaunchConfigurationSnapshotConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DistributionFastLaunchConfigurationSnapshotConfigurationAttributes) TargetResourceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("target_resource_count"))
}

type DistributionLaunchTemplateConfigurationAttributes struct {
	ref terra.Reference
}

func (ltc DistributionLaunchTemplateConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ltc.ref, nil
}

func (ltc DistributionLaunchTemplateConfigurationAttributes) InternalWithRef(ref terra.Reference) DistributionLaunchTemplateConfigurationAttributes {
	return DistributionLaunchTemplateConfigurationAttributes{ref: ref}
}

func (ltc DistributionLaunchTemplateConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ltc.ref.InternalTokens()
}

func (ltc DistributionLaunchTemplateConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(ltc.ref.Append("account_id"))
}

func (ltc DistributionLaunchTemplateConfigurationAttributes) Default() terra.BoolValue {
	return terra.ReferenceAsBool(ltc.ref.Append("default"))
}

func (ltc DistributionLaunchTemplateConfigurationAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(ltc.ref.Append("launch_template_id"))
}

type DistributionState struct {
	LicenseConfigurationArns           []string                                              `json:"license_configuration_arns"`
	Region                             string                                                `json:"region"`
	AmiDistributionConfiguration       []DistributionAmiDistributionConfigurationState       `json:"ami_distribution_configuration"`
	ContainerDistributionConfiguration []DistributionContainerDistributionConfigurationState `json:"container_distribution_configuration"`
	FastLaunchConfiguration            []DistributionFastLaunchConfigurationState            `json:"fast_launch_configuration"`
	LaunchTemplateConfiguration        []DistributionLaunchTemplateConfigurationState        `json:"launch_template_configuration"`
}

type DistributionAmiDistributionConfigurationState struct {
	AmiTags          map[string]string                                               `json:"ami_tags"`
	Description      string                                                          `json:"description"`
	KmsKeyId         string                                                          `json:"kms_key_id"`
	Name             string                                                          `json:"name"`
	TargetAccountIds []string                                                        `json:"target_account_ids"`
	LaunchPermission []DistributionAmiDistributionConfigurationLaunchPermissionState `json:"launch_permission"`
}

type DistributionAmiDistributionConfigurationLaunchPermissionState struct {
	OrganizationArns       []string `json:"organization_arns"`
	OrganizationalUnitArns []string `json:"organizational_unit_arns"`
	UserGroups             []string `json:"user_groups"`
	UserIds                []string `json:"user_ids"`
}

type DistributionContainerDistributionConfigurationState struct {
	ContainerTags    []string                                                              `json:"container_tags"`
	Description      string                                                                `json:"description"`
	TargetRepository []DistributionContainerDistributionConfigurationTargetRepositoryState `json:"target_repository"`
}

type DistributionContainerDistributionConfigurationTargetRepositoryState struct {
	RepositoryName string `json:"repository_name"`
	Service        string `json:"service"`
}

type DistributionFastLaunchConfigurationState struct {
	AccountId             string                                                          `json:"account_id"`
	Enabled               bool                                                            `json:"enabled"`
	MaxParallelLaunches   float64                                                         `json:"max_parallel_launches"`
	LaunchTemplate        []DistributionFastLaunchConfigurationLaunchTemplateState        `json:"launch_template"`
	SnapshotConfiguration []DistributionFastLaunchConfigurationSnapshotConfigurationState `json:"snapshot_configuration"`
}

type DistributionFastLaunchConfigurationLaunchTemplateState struct {
	LaunchTemplateId      string `json:"launch_template_id"`
	LaunchTemplateName    string `json:"launch_template_name"`
	LaunchTemplateVersion string `json:"launch_template_version"`
}

type DistributionFastLaunchConfigurationSnapshotConfigurationState struct {
	TargetResourceCount float64 `json:"target_resource_count"`
}

type DistributionLaunchTemplateConfigurationState struct {
	AccountId        string `json:"account_id"`
	Default          bool   `json:"default"`
	LaunchTemplateId string `json:"launch_template_id"`
}
