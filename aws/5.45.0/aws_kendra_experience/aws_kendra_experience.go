// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kendra_experience

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kendra_experience.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKendraExperienceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ake *Resource) Type() string {
	return "aws_kendra_experience"
}

// LocalName returns the local name for [Resource].
func (ake *Resource) LocalName() string {
	return ake.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ake *Resource) Configuration() interface{} {
	return ake.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ake *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ake)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ake *Resource) Dependencies() terra.Dependencies {
	return ake.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ake *Resource) LifecycleManagement() *terra.Lifecycle {
	return ake.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ake *Resource) Attributes() awsKendraExperienceAttributes {
	return awsKendraExperienceAttributes{ref: terra.ReferenceResource(ake)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ake *Resource) ImportState(state io.Reader) error {
	ake.state = &awsKendraExperienceState{}
	if err := json.NewDecoder(state).Decode(ake.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ake.Type(), ake.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ake *Resource) State() (*awsKendraExperienceState, bool) {
	return ake.state, ake.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ake *Resource) StateMust() *awsKendraExperienceState {
	if ake.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ake.Type(), ake.LocalName()))
	}
	return ake.state
}

// Args contains the configurations for aws_kendra_experience.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IndexId: string, required
	IndexId terra.StringValue `hcl:"index_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Configuration: optional
	Configuration *Configuration `hcl:"configuration,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsKendraExperienceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_kendra_experience.
func (ake awsKendraExperienceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ake.ref.Append("arn"))
}

// Description returns a reference to field description of aws_kendra_experience.
func (ake awsKendraExperienceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ake.ref.Append("description"))
}

// ExperienceId returns a reference to field experience_id of aws_kendra_experience.
func (ake awsKendraExperienceAttributes) ExperienceId() terra.StringValue {
	return terra.ReferenceAsString(ake.ref.Append("experience_id"))
}

// Id returns a reference to field id of aws_kendra_experience.
func (ake awsKendraExperienceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ake.ref.Append("id"))
}

// IndexId returns a reference to field index_id of aws_kendra_experience.
func (ake awsKendraExperienceAttributes) IndexId() terra.StringValue {
	return terra.ReferenceAsString(ake.ref.Append("index_id"))
}

// Name returns a reference to field name of aws_kendra_experience.
func (ake awsKendraExperienceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ake.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_kendra_experience.
func (ake awsKendraExperienceAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ake.ref.Append("role_arn"))
}

// Status returns a reference to field status of aws_kendra_experience.
func (ake awsKendraExperienceAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ake.ref.Append("status"))
}

func (ake awsKendraExperienceAttributes) Endpoints() terra.SetValue[EndpointsAttributes] {
	return terra.ReferenceAsSet[EndpointsAttributes](ake.ref.Append("endpoints"))
}

func (ake awsKendraExperienceAttributes) Configuration() terra.ListValue[ConfigurationAttributes] {
	return terra.ReferenceAsList[ConfigurationAttributes](ake.ref.Append("configuration"))
}

func (ake awsKendraExperienceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ake.ref.Append("timeouts"))
}

type awsKendraExperienceState struct {
	Arn           string               `json:"arn"`
	Description   string               `json:"description"`
	ExperienceId  string               `json:"experience_id"`
	Id            string               `json:"id"`
	IndexId       string               `json:"index_id"`
	Name          string               `json:"name"`
	RoleArn       string               `json:"role_arn"`
	Status        string               `json:"status"`
	Endpoints     []EndpointsState     `json:"endpoints"`
	Configuration []ConfigurationState `json:"configuration"`
	Timeouts      *TimeoutsState       `json:"timeouts"`
}
