// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_ipam_resource_discovery

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpc_ipam_resource_discovery.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpcIpamResourceDiscoveryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avird *Resource) Type() string {
	return "aws_vpc_ipam_resource_discovery"
}

// LocalName returns the local name for [Resource].
func (avird *Resource) LocalName() string {
	return avird.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avird *Resource) Configuration() interface{} {
	return avird.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avird *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avird)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avird *Resource) Dependencies() terra.Dependencies {
	return avird.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avird *Resource) LifecycleManagement() *terra.Lifecycle {
	return avird.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avird *Resource) Attributes() awsVpcIpamResourceDiscoveryAttributes {
	return awsVpcIpamResourceDiscoveryAttributes{ref: terra.ReferenceResource(avird)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avird *Resource) ImportState(state io.Reader) error {
	avird.state = &awsVpcIpamResourceDiscoveryState{}
	if err := json.NewDecoder(state).Decode(avird.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avird.Type(), avird.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avird *Resource) State() (*awsVpcIpamResourceDiscoveryState, bool) {
	return avird.state, avird.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avird *Resource) StateMust() *awsVpcIpamResourceDiscoveryState {
	if avird.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avird.Type(), avird.LocalName()))
	}
	return avird.state
}

// Args contains the configurations for aws_vpc_ipam_resource_discovery.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// OperatingRegions: min=1
	OperatingRegions []OperatingRegions `hcl:"operating_regions,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVpcIpamResourceDiscoveryAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpc_ipam_resource_discovery.
func (avird awsVpcIpamResourceDiscoveryAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(avird.ref.Append("arn"))
}

// Description returns a reference to field description of aws_vpc_ipam_resource_discovery.
func (avird awsVpcIpamResourceDiscoveryAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(avird.ref.Append("description"))
}

// Id returns a reference to field id of aws_vpc_ipam_resource_discovery.
func (avird awsVpcIpamResourceDiscoveryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avird.ref.Append("id"))
}

// IpamResourceDiscoveryRegion returns a reference to field ipam_resource_discovery_region of aws_vpc_ipam_resource_discovery.
func (avird awsVpcIpamResourceDiscoveryAttributes) IpamResourceDiscoveryRegion() terra.StringValue {
	return terra.ReferenceAsString(avird.ref.Append("ipam_resource_discovery_region"))
}

// IsDefault returns a reference to field is_default of aws_vpc_ipam_resource_discovery.
func (avird awsVpcIpamResourceDiscoveryAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceAsBool(avird.ref.Append("is_default"))
}

// OwnerId returns a reference to field owner_id of aws_vpc_ipam_resource_discovery.
func (avird awsVpcIpamResourceDiscoveryAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(avird.ref.Append("owner_id"))
}

// Tags returns a reference to field tags of aws_vpc_ipam_resource_discovery.
func (avird awsVpcIpamResourceDiscoveryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avird.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpc_ipam_resource_discovery.
func (avird awsVpcIpamResourceDiscoveryAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avird.ref.Append("tags_all"))
}

func (avird awsVpcIpamResourceDiscoveryAttributes) OperatingRegions() terra.SetValue[OperatingRegionsAttributes] {
	return terra.ReferenceAsSet[OperatingRegionsAttributes](avird.ref.Append("operating_regions"))
}

func (avird awsVpcIpamResourceDiscoveryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avird.ref.Append("timeouts"))
}

type awsVpcIpamResourceDiscoveryState struct {
	Arn                         string                  `json:"arn"`
	Description                 string                  `json:"description"`
	Id                          string                  `json:"id"`
	IpamResourceDiscoveryRegion string                  `json:"ipam_resource_discovery_region"`
	IsDefault                   bool                    `json:"is_default"`
	OwnerId                     string                  `json:"owner_id"`
	Tags                        map[string]string       `json:"tags"`
	TagsAll                     map[string]string       `json:"tags_all"`
	OperatingRegions            []OperatingRegionsState `json:"operating_regions"`
	Timeouts                    *TimeoutsState          `json:"timeouts"`
}
