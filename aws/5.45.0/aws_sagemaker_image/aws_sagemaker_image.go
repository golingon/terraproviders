// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_image

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sagemaker_image.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSagemakerImageState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asi *Resource) Type() string {
	return "aws_sagemaker_image"
}

// LocalName returns the local name for [Resource].
func (asi *Resource) LocalName() string {
	return asi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asi *Resource) Configuration() interface{} {
	return asi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asi *Resource) Dependencies() terra.Dependencies {
	return asi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asi *Resource) LifecycleManagement() *terra.Lifecycle {
	return asi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asi *Resource) Attributes() awsSagemakerImageAttributes {
	return awsSagemakerImageAttributes{ref: terra.ReferenceResource(asi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asi *Resource) ImportState(state io.Reader) error {
	asi.state = &awsSagemakerImageState{}
	if err := json.NewDecoder(state).Decode(asi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asi.Type(), asi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asi *Resource) State() (*awsSagemakerImageState, bool) {
	return asi.state, asi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asi *Resource) StateMust() *awsSagemakerImageState {
	if asi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asi.Type(), asi.LocalName()))
	}
	return asi.state
}

// Args contains the configurations for aws_sagemaker_image.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageName: string, required
	ImageName terra.StringValue `hcl:"image_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsSagemakerImageAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_image.
func (asi awsSagemakerImageAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asi.ref.Append("arn"))
}

// Description returns a reference to field description of aws_sagemaker_image.
func (asi awsSagemakerImageAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asi.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of aws_sagemaker_image.
func (asi awsSagemakerImageAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(asi.ref.Append("display_name"))
}

// Id returns a reference to field id of aws_sagemaker_image.
func (asi awsSagemakerImageAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asi.ref.Append("id"))
}

// ImageName returns a reference to field image_name of aws_sagemaker_image.
func (asi awsSagemakerImageAttributes) ImageName() terra.StringValue {
	return terra.ReferenceAsString(asi.ref.Append("image_name"))
}

// RoleArn returns a reference to field role_arn of aws_sagemaker_image.
func (asi awsSagemakerImageAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(asi.ref.Append("role_arn"))
}

// Tags returns a reference to field tags of aws_sagemaker_image.
func (asi awsSagemakerImageAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asi.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_image.
func (asi awsSagemakerImageAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asi.ref.Append("tags_all"))
}

type awsSagemakerImageState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	DisplayName string            `json:"display_name"`
	Id          string            `json:"id"`
	ImageName   string            `json:"image_name"`
	RoleArn     string            `json:"role_arn"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
