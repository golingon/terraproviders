// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_devicefarm_upload

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_devicefarm_upload.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDevicefarmUploadState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adu *Resource) Type() string {
	return "aws_devicefarm_upload"
}

// LocalName returns the local name for [Resource].
func (adu *Resource) LocalName() string {
	return adu.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adu *Resource) Configuration() interface{} {
	return adu.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adu *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adu)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adu *Resource) Dependencies() terra.Dependencies {
	return adu.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adu *Resource) LifecycleManagement() *terra.Lifecycle {
	return adu.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adu *Resource) Attributes() awsDevicefarmUploadAttributes {
	return awsDevicefarmUploadAttributes{ref: terra.ReferenceResource(adu)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adu *Resource) ImportState(state io.Reader) error {
	adu.state = &awsDevicefarmUploadState{}
	if err := json.NewDecoder(state).Decode(adu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adu.Type(), adu.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adu *Resource) State() (*awsDevicefarmUploadState, bool) {
	return adu.state, adu.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adu *Resource) StateMust() *awsDevicefarmUploadState {
	if adu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adu.Type(), adu.LocalName()))
	}
	return adu.state
}

// Args contains the configurations for aws_devicefarm_upload.
type Args struct {
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProjectArn: string, required
	ProjectArn terra.StringValue `hcl:"project_arn,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type awsDevicefarmUploadAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_devicefarm_upload.
func (adu awsDevicefarmUploadAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adu.ref.Append("arn"))
}

// Category returns a reference to field category of aws_devicefarm_upload.
func (adu awsDevicefarmUploadAttributes) Category() terra.StringValue {
	return terra.ReferenceAsString(adu.ref.Append("category"))
}

// ContentType returns a reference to field content_type of aws_devicefarm_upload.
func (adu awsDevicefarmUploadAttributes) ContentType() terra.StringValue {
	return terra.ReferenceAsString(adu.ref.Append("content_type"))
}

// Id returns a reference to field id of aws_devicefarm_upload.
func (adu awsDevicefarmUploadAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adu.ref.Append("id"))
}

// Metadata returns a reference to field metadata of aws_devicefarm_upload.
func (adu awsDevicefarmUploadAttributes) Metadata() terra.StringValue {
	return terra.ReferenceAsString(adu.ref.Append("metadata"))
}

// Name returns a reference to field name of aws_devicefarm_upload.
func (adu awsDevicefarmUploadAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adu.ref.Append("name"))
}

// ProjectArn returns a reference to field project_arn of aws_devicefarm_upload.
func (adu awsDevicefarmUploadAttributes) ProjectArn() terra.StringValue {
	return terra.ReferenceAsString(adu.ref.Append("project_arn"))
}

// Type returns a reference to field type of aws_devicefarm_upload.
func (adu awsDevicefarmUploadAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(adu.ref.Append("type"))
}

// Url returns a reference to field url of aws_devicefarm_upload.
func (adu awsDevicefarmUploadAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(adu.ref.Append("url"))
}

type awsDevicefarmUploadState struct {
	Arn         string `json:"arn"`
	Category    string `json:"category"`
	ContentType string `json:"content_type"`
	Id          string `json:"id"`
	Metadata    string `json:"metadata"`
	Name        string `json:"name"`
	ProjectArn  string `json:"project_arn"`
	Type        string `json:"type"`
	Url         string `json:"url"`
}
