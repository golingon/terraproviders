// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssmcontacts_plan

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataStageAttributes struct {
	ref terra.Reference
}

func (s DataStageAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataStageAttributes) InternalWithRef(ref terra.Reference) DataStageAttributes {
	return DataStageAttributes{ref: ref}
}

func (s DataStageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataStageAttributes) DurationInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("duration_in_minutes"))
}

func (s DataStageAttributes) Target() terra.ListValue[DataStageTargetAttributes] {
	return terra.ReferenceAsList[DataStageTargetAttributes](s.ref.Append("target"))
}

type DataStageTargetAttributes struct {
	ref terra.Reference
}

func (t DataStageTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataStageTargetAttributes) InternalWithRef(ref terra.Reference) DataStageTargetAttributes {
	return DataStageTargetAttributes{ref: ref}
}

func (t DataStageTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataStageTargetAttributes) ChannelTargetInfo() terra.ListValue[DataStageTargetChannelTargetInfoAttributes] {
	return terra.ReferenceAsList[DataStageTargetChannelTargetInfoAttributes](t.ref.Append("channel_target_info"))
}

func (t DataStageTargetAttributes) ContactTargetInfo() terra.ListValue[DataStageTargetContactTargetInfoAttributes] {
	return terra.ReferenceAsList[DataStageTargetContactTargetInfoAttributes](t.ref.Append("contact_target_info"))
}

type DataStageTargetChannelTargetInfoAttributes struct {
	ref terra.Reference
}

func (cti DataStageTargetChannelTargetInfoAttributes) InternalRef() (terra.Reference, error) {
	return cti.ref, nil
}

func (cti DataStageTargetChannelTargetInfoAttributes) InternalWithRef(ref terra.Reference) DataStageTargetChannelTargetInfoAttributes {
	return DataStageTargetChannelTargetInfoAttributes{ref: ref}
}

func (cti DataStageTargetChannelTargetInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cti.ref.InternalTokens()
}

func (cti DataStageTargetChannelTargetInfoAttributes) ContactChannelId() terra.StringValue {
	return terra.ReferenceAsString(cti.ref.Append("contact_channel_id"))
}

func (cti DataStageTargetChannelTargetInfoAttributes) RetryIntervalInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(cti.ref.Append("retry_interval_in_minutes"))
}

type DataStageTargetContactTargetInfoAttributes struct {
	ref terra.Reference
}

func (cti DataStageTargetContactTargetInfoAttributes) InternalRef() (terra.Reference, error) {
	return cti.ref, nil
}

func (cti DataStageTargetContactTargetInfoAttributes) InternalWithRef(ref terra.Reference) DataStageTargetContactTargetInfoAttributes {
	return DataStageTargetContactTargetInfoAttributes{ref: ref}
}

func (cti DataStageTargetContactTargetInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cti.ref.InternalTokens()
}

func (cti DataStageTargetContactTargetInfoAttributes) ContactId() terra.StringValue {
	return terra.ReferenceAsString(cti.ref.Append("contact_id"))
}

func (cti DataStageTargetContactTargetInfoAttributes) IsEssential() terra.BoolValue {
	return terra.ReferenceAsBool(cti.ref.Append("is_essential"))
}

type DataStageState struct {
	DurationInMinutes float64                `json:"duration_in_minutes"`
	Target            []DataStageTargetState `json:"target"`
}

type DataStageTargetState struct {
	ChannelTargetInfo []DataStageTargetChannelTargetInfoState `json:"channel_target_info"`
	ContactTargetInfo []DataStageTargetContactTargetInfoState `json:"contact_target_info"`
}

type DataStageTargetChannelTargetInfoState struct {
	ContactChannelId       string  `json:"contact_channel_id"`
	RetryIntervalInMinutes float64 `json:"retry_interval_in_minutes"`
}

type DataStageTargetContactTargetInfoState struct {
	ContactId   string `json:"contact_id"`
	IsEssential bool   `json:"is_essential"`
}
