// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codepipeline

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ArtifactStore struct {
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ArtifactStoreEncryptionKey: optional
	EncryptionKey *ArtifactStoreEncryptionKey `hcl:"encryption_key,block"`
}

type ArtifactStoreEncryptionKey struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Stage struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StageAction: min=1
	Action []StageAction `hcl:"action,block" validate:"min=1"`
}

type StageAction struct {
	// Category: string, required
	Category terra.StringValue `hcl:"category,attr" validate:"required"`
	// Configuration: map of string, optional
	Configuration terra.MapValue[terra.StringValue] `hcl:"configuration,attr"`
	// InputArtifacts: list of string, optional
	InputArtifacts terra.ListValue[terra.StringValue] `hcl:"input_artifacts,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// OutputArtifacts: list of string, optional
	OutputArtifacts terra.ListValue[terra.StringValue] `hcl:"output_artifacts,attr"`
	// Owner: string, required
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
	// Provider: string, required
	Provider terra.StringValue `hcl:"provider,attr" validate:"required"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// RunOrder: number, optional
	RunOrder terra.NumberValue `hcl:"run_order,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type Trigger struct {
	// ProviderType: string, required
	ProviderType terra.StringValue `hcl:"provider_type,attr" validate:"required"`
	// TriggerGitConfiguration: required
	GitConfiguration *TriggerGitConfiguration `hcl:"git_configuration,block" validate:"required"`
}

type TriggerGitConfiguration struct {
	// SourceActionName: string, required
	SourceActionName terra.StringValue `hcl:"source_action_name,attr" validate:"required"`
	// TriggerGitConfigurationPullRequest: min=0,max=3
	PullRequest []TriggerGitConfigurationPullRequest `hcl:"pull_request,block" validate:"min=0,max=3"`
	// TriggerGitConfigurationPush: min=0,max=3
	Push []TriggerGitConfigurationPush `hcl:"push,block" validate:"min=0,max=3"`
}

type TriggerGitConfigurationPullRequest struct {
	// Events: list of string, optional
	Events terra.ListValue[terra.StringValue] `hcl:"events,attr"`
	// TriggerGitConfigurationPullRequestBranches: optional
	Branches *TriggerGitConfigurationPullRequestBranches `hcl:"branches,block"`
	// TriggerGitConfigurationPullRequestFilePaths: optional
	FilePaths *TriggerGitConfigurationPullRequestFilePaths `hcl:"file_paths,block"`
}

type TriggerGitConfigurationPullRequestBranches struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// Includes: list of string, optional
	Includes terra.ListValue[terra.StringValue] `hcl:"includes,attr"`
}

type TriggerGitConfigurationPullRequestFilePaths struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// Includes: list of string, optional
	Includes terra.ListValue[terra.StringValue] `hcl:"includes,attr"`
}

type TriggerGitConfigurationPush struct {
	// TriggerGitConfigurationPushBranches: optional
	Branches *TriggerGitConfigurationPushBranches `hcl:"branches,block"`
	// TriggerGitConfigurationPushFilePaths: optional
	FilePaths *TriggerGitConfigurationPushFilePaths `hcl:"file_paths,block"`
	// TriggerGitConfigurationPushTags: optional
	Tags *TriggerGitConfigurationPushTags `hcl:"tags,block"`
}

type TriggerGitConfigurationPushBranches struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// Includes: list of string, optional
	Includes terra.ListValue[terra.StringValue] `hcl:"includes,attr"`
}

type TriggerGitConfigurationPushFilePaths struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// Includes: list of string, optional
	Includes terra.ListValue[terra.StringValue] `hcl:"includes,attr"`
}

type TriggerGitConfigurationPushTags struct {
	// Excludes: list of string, optional
	Excludes terra.ListValue[terra.StringValue] `hcl:"excludes,attr"`
	// Includes: list of string, optional
	Includes terra.ListValue[terra.StringValue] `hcl:"includes,attr"`
}

type Variable struct {
	// DefaultValue: string, optional
	DefaultValue terra.StringValue `hcl:"default_value,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type ArtifactStoreAttributes struct {
	ref terra.Reference
}

func (as ArtifactStoreAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as ArtifactStoreAttributes) InternalWithRef(ref terra.Reference) ArtifactStoreAttributes {
	return ArtifactStoreAttributes{ref: ref}
}

func (as ArtifactStoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as ArtifactStoreAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("location"))
}

func (as ArtifactStoreAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("region"))
}

func (as ArtifactStoreAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("type"))
}

func (as ArtifactStoreAttributes) EncryptionKey() terra.ListValue[ArtifactStoreEncryptionKeyAttributes] {
	return terra.ReferenceAsList[ArtifactStoreEncryptionKeyAttributes](as.ref.Append("encryption_key"))
}

type ArtifactStoreEncryptionKeyAttributes struct {
	ref terra.Reference
}

func (ek ArtifactStoreEncryptionKeyAttributes) InternalRef() (terra.Reference, error) {
	return ek.ref, nil
}

func (ek ArtifactStoreEncryptionKeyAttributes) InternalWithRef(ref terra.Reference) ArtifactStoreEncryptionKeyAttributes {
	return ArtifactStoreEncryptionKeyAttributes{ref: ref}
}

func (ek ArtifactStoreEncryptionKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ek.ref.InternalTokens()
}

func (ek ArtifactStoreEncryptionKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ek.ref.Append("id"))
}

func (ek ArtifactStoreEncryptionKeyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ek.ref.Append("type"))
}

type StageAttributes struct {
	ref terra.Reference
}

func (s StageAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StageAttributes) InternalWithRef(ref terra.Reference) StageAttributes {
	return StageAttributes{ref: ref}
}

func (s StageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StageAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s StageAttributes) Action() terra.ListValue[StageActionAttributes] {
	return terra.ReferenceAsList[StageActionAttributes](s.ref.Append("action"))
}

type StageActionAttributes struct {
	ref terra.Reference
}

func (a StageActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a StageActionAttributes) InternalWithRef(ref terra.Reference) StageActionAttributes {
	return StageActionAttributes{ref: ref}
}

func (a StageActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a StageActionAttributes) Category() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("category"))
}

func (a StageActionAttributes) Configuration() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("configuration"))
}

func (a StageActionAttributes) InputArtifacts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("input_artifacts"))
}

func (a StageActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a StageActionAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("namespace"))
}

func (a StageActionAttributes) OutputArtifacts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("output_artifacts"))
}

func (a StageActionAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("owner"))
}

func (a StageActionAttributes) Provider() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("provider"))
}

func (a StageActionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("region"))
}

func (a StageActionAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("role_arn"))
}

func (a StageActionAttributes) RunOrder() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("run_order"))
}

func (a StageActionAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("version"))
}

type TriggerAttributes struct {
	ref terra.Reference
}

func (t TriggerAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TriggerAttributes) InternalWithRef(ref terra.Reference) TriggerAttributes {
	return TriggerAttributes{ref: ref}
}

func (t TriggerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TriggerAttributes) ProviderType() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("provider_type"))
}

func (t TriggerAttributes) GitConfiguration() terra.ListValue[TriggerGitConfigurationAttributes] {
	return terra.ReferenceAsList[TriggerGitConfigurationAttributes](t.ref.Append("git_configuration"))
}

type TriggerGitConfigurationAttributes struct {
	ref terra.Reference
}

func (gc TriggerGitConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return gc.ref, nil
}

func (gc TriggerGitConfigurationAttributes) InternalWithRef(ref terra.Reference) TriggerGitConfigurationAttributes {
	return TriggerGitConfigurationAttributes{ref: ref}
}

func (gc TriggerGitConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gc.ref.InternalTokens()
}

func (gc TriggerGitConfigurationAttributes) SourceActionName() terra.StringValue {
	return terra.ReferenceAsString(gc.ref.Append("source_action_name"))
}

func (gc TriggerGitConfigurationAttributes) PullRequest() terra.ListValue[TriggerGitConfigurationPullRequestAttributes] {
	return terra.ReferenceAsList[TriggerGitConfigurationPullRequestAttributes](gc.ref.Append("pull_request"))
}

func (gc TriggerGitConfigurationAttributes) Push() terra.ListValue[TriggerGitConfigurationPushAttributes] {
	return terra.ReferenceAsList[TriggerGitConfigurationPushAttributes](gc.ref.Append("push"))
}

type TriggerGitConfigurationPullRequestAttributes struct {
	ref terra.Reference
}

func (pr TriggerGitConfigurationPullRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr TriggerGitConfigurationPullRequestAttributes) InternalWithRef(ref terra.Reference) TriggerGitConfigurationPullRequestAttributes {
	return TriggerGitConfigurationPullRequestAttributes{ref: ref}
}

func (pr TriggerGitConfigurationPullRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr TriggerGitConfigurationPullRequestAttributes) Events() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pr.ref.Append("events"))
}

func (pr TriggerGitConfigurationPullRequestAttributes) Branches() terra.ListValue[TriggerGitConfigurationPullRequestBranchesAttributes] {
	return terra.ReferenceAsList[TriggerGitConfigurationPullRequestBranchesAttributes](pr.ref.Append("branches"))
}

func (pr TriggerGitConfigurationPullRequestAttributes) FilePaths() terra.ListValue[TriggerGitConfigurationPullRequestFilePathsAttributes] {
	return terra.ReferenceAsList[TriggerGitConfigurationPullRequestFilePathsAttributes](pr.ref.Append("file_paths"))
}

type TriggerGitConfigurationPullRequestBranchesAttributes struct {
	ref terra.Reference
}

func (b TriggerGitConfigurationPullRequestBranchesAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b TriggerGitConfigurationPullRequestBranchesAttributes) InternalWithRef(ref terra.Reference) TriggerGitConfigurationPullRequestBranchesAttributes {
	return TriggerGitConfigurationPullRequestBranchesAttributes{ref: ref}
}

func (b TriggerGitConfigurationPullRequestBranchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b TriggerGitConfigurationPullRequestBranchesAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("excludes"))
}

func (b TriggerGitConfigurationPullRequestBranchesAttributes) Includes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("includes"))
}

type TriggerGitConfigurationPullRequestFilePathsAttributes struct {
	ref terra.Reference
}

func (fp TriggerGitConfigurationPullRequestFilePathsAttributes) InternalRef() (terra.Reference, error) {
	return fp.ref, nil
}

func (fp TriggerGitConfigurationPullRequestFilePathsAttributes) InternalWithRef(ref terra.Reference) TriggerGitConfigurationPullRequestFilePathsAttributes {
	return TriggerGitConfigurationPullRequestFilePathsAttributes{ref: ref}
}

func (fp TriggerGitConfigurationPullRequestFilePathsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fp.ref.InternalTokens()
}

func (fp TriggerGitConfigurationPullRequestFilePathsAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fp.ref.Append("excludes"))
}

func (fp TriggerGitConfigurationPullRequestFilePathsAttributes) Includes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fp.ref.Append("includes"))
}

type TriggerGitConfigurationPushAttributes struct {
	ref terra.Reference
}

func (p TriggerGitConfigurationPushAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p TriggerGitConfigurationPushAttributes) InternalWithRef(ref terra.Reference) TriggerGitConfigurationPushAttributes {
	return TriggerGitConfigurationPushAttributes{ref: ref}
}

func (p TriggerGitConfigurationPushAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p TriggerGitConfigurationPushAttributes) Branches() terra.ListValue[TriggerGitConfigurationPushBranchesAttributes] {
	return terra.ReferenceAsList[TriggerGitConfigurationPushBranchesAttributes](p.ref.Append("branches"))
}

func (p TriggerGitConfigurationPushAttributes) FilePaths() terra.ListValue[TriggerGitConfigurationPushFilePathsAttributes] {
	return terra.ReferenceAsList[TriggerGitConfigurationPushFilePathsAttributes](p.ref.Append("file_paths"))
}

func (p TriggerGitConfigurationPushAttributes) Tags() terra.ListValue[TriggerGitConfigurationPushTagsAttributes] {
	return terra.ReferenceAsList[TriggerGitConfigurationPushTagsAttributes](p.ref.Append("tags"))
}

type TriggerGitConfigurationPushBranchesAttributes struct {
	ref terra.Reference
}

func (b TriggerGitConfigurationPushBranchesAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b TriggerGitConfigurationPushBranchesAttributes) InternalWithRef(ref terra.Reference) TriggerGitConfigurationPushBranchesAttributes {
	return TriggerGitConfigurationPushBranchesAttributes{ref: ref}
}

func (b TriggerGitConfigurationPushBranchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b TriggerGitConfigurationPushBranchesAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("excludes"))
}

func (b TriggerGitConfigurationPushBranchesAttributes) Includes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](b.ref.Append("includes"))
}

type TriggerGitConfigurationPushFilePathsAttributes struct {
	ref terra.Reference
}

func (fp TriggerGitConfigurationPushFilePathsAttributes) InternalRef() (terra.Reference, error) {
	return fp.ref, nil
}

func (fp TriggerGitConfigurationPushFilePathsAttributes) InternalWithRef(ref terra.Reference) TriggerGitConfigurationPushFilePathsAttributes {
	return TriggerGitConfigurationPushFilePathsAttributes{ref: ref}
}

func (fp TriggerGitConfigurationPushFilePathsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fp.ref.InternalTokens()
}

func (fp TriggerGitConfigurationPushFilePathsAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fp.ref.Append("excludes"))
}

func (fp TriggerGitConfigurationPushFilePathsAttributes) Includes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fp.ref.Append("includes"))
}

type TriggerGitConfigurationPushTagsAttributes struct {
	ref terra.Reference
}

func (t TriggerGitConfigurationPushTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TriggerGitConfigurationPushTagsAttributes) InternalWithRef(ref terra.Reference) TriggerGitConfigurationPushTagsAttributes {
	return TriggerGitConfigurationPushTagsAttributes{ref: ref}
}

func (t TriggerGitConfigurationPushTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TriggerGitConfigurationPushTagsAttributes) Excludes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("excludes"))
}

func (t TriggerGitConfigurationPushTagsAttributes) Includes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("includes"))
}

type VariableAttributes struct {
	ref terra.Reference
}

func (v VariableAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VariableAttributes) InternalWithRef(ref terra.Reference) VariableAttributes {
	return VariableAttributes{ref: ref}
}

func (v VariableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VariableAttributes) DefaultValue() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("default_value"))
}

func (v VariableAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("description"))
}

func (v VariableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

type ArtifactStoreState struct {
	Location      string                            `json:"location"`
	Region        string                            `json:"region"`
	Type          string                            `json:"type"`
	EncryptionKey []ArtifactStoreEncryptionKeyState `json:"encryption_key"`
}

type ArtifactStoreEncryptionKeyState struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

type StageState struct {
	Name   string             `json:"name"`
	Action []StageActionState `json:"action"`
}

type StageActionState struct {
	Category        string            `json:"category"`
	Configuration   map[string]string `json:"configuration"`
	InputArtifacts  []string          `json:"input_artifacts"`
	Name            string            `json:"name"`
	Namespace       string            `json:"namespace"`
	OutputArtifacts []string          `json:"output_artifacts"`
	Owner           string            `json:"owner"`
	Provider        string            `json:"provider"`
	Region          string            `json:"region"`
	RoleArn         string            `json:"role_arn"`
	RunOrder        float64           `json:"run_order"`
	Version         string            `json:"version"`
}

type TriggerState struct {
	ProviderType     string                         `json:"provider_type"`
	GitConfiguration []TriggerGitConfigurationState `json:"git_configuration"`
}

type TriggerGitConfigurationState struct {
	SourceActionName string                                    `json:"source_action_name"`
	PullRequest      []TriggerGitConfigurationPullRequestState `json:"pull_request"`
	Push             []TriggerGitConfigurationPushState        `json:"push"`
}

type TriggerGitConfigurationPullRequestState struct {
	Events    []string                                           `json:"events"`
	Branches  []TriggerGitConfigurationPullRequestBranchesState  `json:"branches"`
	FilePaths []TriggerGitConfigurationPullRequestFilePathsState `json:"file_paths"`
}

type TriggerGitConfigurationPullRequestBranchesState struct {
	Excludes []string `json:"excludes"`
	Includes []string `json:"includes"`
}

type TriggerGitConfigurationPullRequestFilePathsState struct {
	Excludes []string `json:"excludes"`
	Includes []string `json:"includes"`
}

type TriggerGitConfigurationPushState struct {
	Branches  []TriggerGitConfigurationPushBranchesState  `json:"branches"`
	FilePaths []TriggerGitConfigurationPushFilePathsState `json:"file_paths"`
	Tags      []TriggerGitConfigurationPushTagsState      `json:"tags"`
}

type TriggerGitConfigurationPushBranchesState struct {
	Excludes []string `json:"excludes"`
	Includes []string `json:"includes"`
}

type TriggerGitConfigurationPushFilePathsState struct {
	Excludes []string `json:"excludes"`
	Includes []string `json:"includes"`
}

type TriggerGitConfigurationPushTagsState struct {
	Excludes []string `json:"excludes"`
	Includes []string `json:"includes"`
}

type VariableState struct {
	DefaultValue string `json:"default_value"`
	Description  string `json:"description"`
	Name         string `json:"name"`
}
