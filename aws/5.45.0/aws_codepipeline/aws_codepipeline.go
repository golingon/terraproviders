// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codepipeline

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codepipeline.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodepipelineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ac *Resource) Type() string {
	return "aws_codepipeline"
}

// LocalName returns the local name for [Resource].
func (ac *Resource) LocalName() string {
	return ac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ac *Resource) Configuration() interface{} {
	return ac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ac *Resource) Dependencies() terra.Dependencies {
	return ac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ac *Resource) LifecycleManagement() *terra.Lifecycle {
	return ac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ac *Resource) Attributes() awsCodepipelineAttributes {
	return awsCodepipelineAttributes{ref: terra.ReferenceResource(ac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ac *Resource) ImportState(state io.Reader) error {
	ac.state = &awsCodepipelineState{}
	if err := json.NewDecoder(state).Decode(ac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ac.Type(), ac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ac *Resource) State() (*awsCodepipelineState, bool) {
	return ac.state, ac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ac *Resource) StateMust() *awsCodepipelineState {
	if ac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ac.Type(), ac.LocalName()))
	}
	return ac.state
}

// Args contains the configurations for aws_codepipeline.
type Args struct {
	// ExecutionMode: string, optional
	ExecutionMode terra.StringValue `hcl:"execution_mode,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PipelineType: string, optional
	PipelineType terra.StringValue `hcl:"pipeline_type,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ArtifactStore: min=1
	ArtifactStore []ArtifactStore `hcl:"artifact_store,block" validate:"min=1"`
	// Stage: min=2
	Stage []Stage `hcl:"stage,block" validate:"min=2"`
	// Trigger: min=0,max=50
	Trigger []Trigger `hcl:"trigger,block" validate:"min=0,max=50"`
	// Variable: min=0
	Variable []Variable `hcl:"variable,block" validate:"min=0"`
}

type awsCodepipelineAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_codepipeline.
func (ac awsCodepipelineAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("arn"))
}

// ExecutionMode returns a reference to field execution_mode of aws_codepipeline.
func (ac awsCodepipelineAttributes) ExecutionMode() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("execution_mode"))
}

// Id returns a reference to field id of aws_codepipeline.
func (ac awsCodepipelineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("id"))
}

// Name returns a reference to field name of aws_codepipeline.
func (ac awsCodepipelineAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("name"))
}

// PipelineType returns a reference to field pipeline_type of aws_codepipeline.
func (ac awsCodepipelineAttributes) PipelineType() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("pipeline_type"))
}

// RoleArn returns a reference to field role_arn of aws_codepipeline.
func (ac awsCodepipelineAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("role_arn"))
}

// Tags returns a reference to field tags of aws_codepipeline.
func (ac awsCodepipelineAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ac.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_codepipeline.
func (ac awsCodepipelineAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ac.ref.Append("tags_all"))
}

func (ac awsCodepipelineAttributes) ArtifactStore() terra.SetValue[ArtifactStoreAttributes] {
	return terra.ReferenceAsSet[ArtifactStoreAttributes](ac.ref.Append("artifact_store"))
}

func (ac awsCodepipelineAttributes) Stage() terra.ListValue[StageAttributes] {
	return terra.ReferenceAsList[StageAttributes](ac.ref.Append("stage"))
}

func (ac awsCodepipelineAttributes) Trigger() terra.ListValue[TriggerAttributes] {
	return terra.ReferenceAsList[TriggerAttributes](ac.ref.Append("trigger"))
}

func (ac awsCodepipelineAttributes) Variable() terra.ListValue[VariableAttributes] {
	return terra.ReferenceAsList[VariableAttributes](ac.ref.Append("variable"))
}

type awsCodepipelineState struct {
	Arn           string               `json:"arn"`
	ExecutionMode string               `json:"execution_mode"`
	Id            string               `json:"id"`
	Name          string               `json:"name"`
	PipelineType  string               `json:"pipeline_type"`
	RoleArn       string               `json:"role_arn"`
	Tags          map[string]string    `json:"tags"`
	TagsAll       map[string]string    `json:"tags_all"`
	ArtifactStore []ArtifactStoreState `json:"artifact_store"`
	Stage         []StageState         `json:"stage"`
	Trigger       []TriggerState       `json:"trigger"`
	Variable      []VariableState      `json:"variable"`
}
