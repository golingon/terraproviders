// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_autoscaling_traffic_source_attachment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type TrafficSource struct {
	// Identifier: string, required
	Identifier terra.StringValue `hcl:"identifier,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type TrafficSourceAttributes struct {
	ref terra.Reference
}

func (ts TrafficSourceAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts TrafficSourceAttributes) InternalWithRef(ref terra.Reference) TrafficSourceAttributes {
	return TrafficSourceAttributes{ref: ref}
}

func (ts TrafficSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts TrafficSourceAttributes) Identifier() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("identifier"))
}

func (ts TrafficSourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("type"))
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}

type TrafficSourceState struct {
	Identifier string `json:"identifier"`
	Type       string `json:"type"`
}
