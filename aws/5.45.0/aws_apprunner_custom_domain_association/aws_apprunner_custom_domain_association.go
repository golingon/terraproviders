// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_apprunner_custom_domain_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_apprunner_custom_domain_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApprunnerCustomDomainAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aacda *Resource) Type() string {
	return "aws_apprunner_custom_domain_association"
}

// LocalName returns the local name for [Resource].
func (aacda *Resource) LocalName() string {
	return aacda.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aacda *Resource) Configuration() interface{} {
	return aacda.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aacda *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aacda)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aacda *Resource) Dependencies() terra.Dependencies {
	return aacda.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aacda *Resource) LifecycleManagement() *terra.Lifecycle {
	return aacda.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aacda *Resource) Attributes() awsApprunnerCustomDomainAssociationAttributes {
	return awsApprunnerCustomDomainAssociationAttributes{ref: terra.ReferenceResource(aacda)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aacda *Resource) ImportState(state io.Reader) error {
	aacda.state = &awsApprunnerCustomDomainAssociationState{}
	if err := json.NewDecoder(state).Decode(aacda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aacda.Type(), aacda.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aacda *Resource) State() (*awsApprunnerCustomDomainAssociationState, bool) {
	return aacda.state, aacda.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aacda *Resource) StateMust() *awsApprunnerCustomDomainAssociationState {
	if aacda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aacda.Type(), aacda.LocalName()))
	}
	return aacda.state
}

// Args contains the configurations for aws_apprunner_custom_domain_association.
type Args struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// EnableWwwSubdomain: bool, optional
	EnableWwwSubdomain terra.BoolValue `hcl:"enable_www_subdomain,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServiceArn: string, required
	ServiceArn terra.StringValue `hcl:"service_arn,attr" validate:"required"`
}

type awsApprunnerCustomDomainAssociationAttributes struct {
	ref terra.Reference
}

// DnsTarget returns a reference to field dns_target of aws_apprunner_custom_domain_association.
func (aacda awsApprunnerCustomDomainAssociationAttributes) DnsTarget() terra.StringValue {
	return terra.ReferenceAsString(aacda.ref.Append("dns_target"))
}

// DomainName returns a reference to field domain_name of aws_apprunner_custom_domain_association.
func (aacda awsApprunnerCustomDomainAssociationAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(aacda.ref.Append("domain_name"))
}

// EnableWwwSubdomain returns a reference to field enable_www_subdomain of aws_apprunner_custom_domain_association.
func (aacda awsApprunnerCustomDomainAssociationAttributes) EnableWwwSubdomain() terra.BoolValue {
	return terra.ReferenceAsBool(aacda.ref.Append("enable_www_subdomain"))
}

// Id returns a reference to field id of aws_apprunner_custom_domain_association.
func (aacda awsApprunnerCustomDomainAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aacda.ref.Append("id"))
}

// ServiceArn returns a reference to field service_arn of aws_apprunner_custom_domain_association.
func (aacda awsApprunnerCustomDomainAssociationAttributes) ServiceArn() terra.StringValue {
	return terra.ReferenceAsString(aacda.ref.Append("service_arn"))
}

// Status returns a reference to field status of aws_apprunner_custom_domain_association.
func (aacda awsApprunnerCustomDomainAssociationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aacda.ref.Append("status"))
}

func (aacda awsApprunnerCustomDomainAssociationAttributes) CertificateValidationRecords() terra.SetValue[CertificateValidationRecordsAttributes] {
	return terra.ReferenceAsSet[CertificateValidationRecordsAttributes](aacda.ref.Append("certificate_validation_records"))
}

type awsApprunnerCustomDomainAssociationState struct {
	DnsTarget                    string                              `json:"dns_target"`
	DomainName                   string                              `json:"domain_name"`
	EnableWwwSubdomain           bool                                `json:"enable_www_subdomain"`
	Id                           string                              `json:"id"`
	ServiceArn                   string                              `json:"service_arn"`
	Status                       string                              `json:"status"`
	CertificateValidationRecords []CertificateValidationRecordsState `json:"certificate_validation_records"`
}
