// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dynamodb_tag

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dynamodb_tag.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDynamodbTagState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adt *Resource) Type() string {
	return "aws_dynamodb_tag"
}

// LocalName returns the local name for [Resource].
func (adt *Resource) LocalName() string {
	return adt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adt *Resource) Configuration() interface{} {
	return adt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adt *Resource) Dependencies() terra.Dependencies {
	return adt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adt *Resource) LifecycleManagement() *terra.Lifecycle {
	return adt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adt *Resource) Attributes() awsDynamodbTagAttributes {
	return awsDynamodbTagAttributes{ref: terra.ReferenceResource(adt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adt *Resource) ImportState(state io.Reader) error {
	adt.state = &awsDynamodbTagState{}
	if err := json.NewDecoder(state).Decode(adt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adt.Type(), adt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adt *Resource) State() (*awsDynamodbTagState, bool) {
	return adt.state, adt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adt *Resource) StateMust() *awsDynamodbTagState {
	if adt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adt.Type(), adt.LocalName()))
	}
	return adt.state
}

// Args contains the configurations for aws_dynamodb_tag.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type awsDynamodbTagAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_dynamodb_tag.
func (adt awsDynamodbTagAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("id"))
}

// Key returns a reference to field key of aws_dynamodb_tag.
func (adt awsDynamodbTagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("key"))
}

// ResourceArn returns a reference to field resource_arn of aws_dynamodb_tag.
func (adt awsDynamodbTagAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("resource_arn"))
}

// Value returns a reference to field value of aws_dynamodb_tag.
func (adt awsDynamodbTagAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("value"))
}

type awsDynamodbTagState struct {
	Id          string `json:"id"`
	Key         string `json:"key"`
	ResourceArn string `json:"resource_arn"`
	Value       string `json:"value"`
}
