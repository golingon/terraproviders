// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_replication_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3_bucket_replication_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3BucketReplicationConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asbrc *Resource) Type() string {
	return "aws_s3_bucket_replication_configuration"
}

// LocalName returns the local name for [Resource].
func (asbrc *Resource) LocalName() string {
	return asbrc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asbrc *Resource) Configuration() interface{} {
	return asbrc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asbrc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asbrc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asbrc *Resource) Dependencies() terra.Dependencies {
	return asbrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asbrc *Resource) LifecycleManagement() *terra.Lifecycle {
	return asbrc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asbrc *Resource) Attributes() awsS3BucketReplicationConfigurationAttributes {
	return awsS3BucketReplicationConfigurationAttributes{ref: terra.ReferenceResource(asbrc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asbrc *Resource) ImportState(state io.Reader) error {
	asbrc.state = &awsS3BucketReplicationConfigurationState{}
	if err := json.NewDecoder(state).Decode(asbrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asbrc.Type(), asbrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asbrc *Resource) State() (*awsS3BucketReplicationConfigurationState, bool) {
	return asbrc.state, asbrc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asbrc *Resource) StateMust() *awsS3BucketReplicationConfigurationState {
	if asbrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asbrc.Type(), asbrc.LocalName()))
	}
	return asbrc.state
}

// Args contains the configurations for aws_s3_bucket_replication_configuration.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Token: string, optional
	Token terra.StringValue `hcl:"token,attr"`
	// Rule: min=1,max=1000
	Rule []Rule `hcl:"rule,block" validate:"min=1,max=1000"`
}

type awsS3BucketReplicationConfigurationAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of aws_s3_bucket_replication_configuration.
func (asbrc awsS3BucketReplicationConfigurationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(asbrc.ref.Append("bucket"))
}

// Id returns a reference to field id of aws_s3_bucket_replication_configuration.
func (asbrc awsS3BucketReplicationConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asbrc.ref.Append("id"))
}

// Role returns a reference to field role of aws_s3_bucket_replication_configuration.
func (asbrc awsS3BucketReplicationConfigurationAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(asbrc.ref.Append("role"))
}

// Token returns a reference to field token of aws_s3_bucket_replication_configuration.
func (asbrc awsS3BucketReplicationConfigurationAttributes) Token() terra.StringValue {
	return terra.ReferenceAsString(asbrc.ref.Append("token"))
}

func (asbrc awsS3BucketReplicationConfigurationAttributes) Rule() terra.ListValue[RuleAttributes] {
	return terra.ReferenceAsList[RuleAttributes](asbrc.ref.Append("rule"))
}

type awsS3BucketReplicationConfigurationState struct {
	Bucket string      `json:"bucket"`
	Id     string      `json:"id"`
	Role   string      `json:"role"`
	Token  string      `json:"token"`
	Rule   []RuleState `json:"rule"`
}
