// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_replication_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rule struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// RuleDeleteMarkerReplication: optional
	DeleteMarkerReplication *RuleDeleteMarkerReplication `hcl:"delete_marker_replication,block"`
	// RuleDestination: required
	Destination *RuleDestination `hcl:"destination,block" validate:"required"`
	// RuleExistingObjectReplication: optional
	ExistingObjectReplication *RuleExistingObjectReplication `hcl:"existing_object_replication,block"`
	// RuleFilter: optional
	Filter *RuleFilter `hcl:"filter,block"`
	// RuleSourceSelectionCriteria: optional
	SourceSelectionCriteria *RuleSourceSelectionCriteria `hcl:"source_selection_criteria,block"`
}

type RuleDeleteMarkerReplication struct {
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
}

type RuleDestination struct {
	// Account: string, optional
	Account terra.StringValue `hcl:"account,attr"`
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// StorageClass: string, optional
	StorageClass terra.StringValue `hcl:"storage_class,attr"`
	// RuleDestinationAccessControlTranslation: optional
	AccessControlTranslation *RuleDestinationAccessControlTranslation `hcl:"access_control_translation,block"`
	// RuleDestinationEncryptionConfiguration: optional
	EncryptionConfiguration *RuleDestinationEncryptionConfiguration `hcl:"encryption_configuration,block"`
	// RuleDestinationMetrics: optional
	Metrics *RuleDestinationMetrics `hcl:"metrics,block"`
	// RuleDestinationReplicationTime: optional
	ReplicationTime *RuleDestinationReplicationTime `hcl:"replication_time,block"`
}

type RuleDestinationAccessControlTranslation struct {
	// Owner: string, required
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
}

type RuleDestinationEncryptionConfiguration struct {
	// ReplicaKmsKeyId: string, required
	ReplicaKmsKeyId terra.StringValue `hcl:"replica_kms_key_id,attr" validate:"required"`
}

type RuleDestinationMetrics struct {
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// RuleDestinationMetricsEventThreshold: optional
	EventThreshold *RuleDestinationMetricsEventThreshold `hcl:"event_threshold,block"`
}

type RuleDestinationMetricsEventThreshold struct {
	// Minutes: number, required
	Minutes terra.NumberValue `hcl:"minutes,attr" validate:"required"`
}

type RuleDestinationReplicationTime struct {
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// RuleDestinationReplicationTimeTime: required
	Time *RuleDestinationReplicationTimeTime `hcl:"time,block" validate:"required"`
}

type RuleDestinationReplicationTimeTime struct {
	// Minutes: number, required
	Minutes terra.NumberValue `hcl:"minutes,attr" validate:"required"`
}

type RuleExistingObjectReplication struct {
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
}

type RuleFilter struct {
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RuleFilterAnd: optional
	And *RuleFilterAnd `hcl:"and,block"`
	// RuleFilterTag: optional
	Tag *RuleFilterTag `hcl:"tag,block"`
}

type RuleFilterAnd struct {
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type RuleFilterTag struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type RuleSourceSelectionCriteria struct {
	// RuleSourceSelectionCriteriaReplicaModifications: optional
	ReplicaModifications *RuleSourceSelectionCriteriaReplicaModifications `hcl:"replica_modifications,block"`
	// RuleSourceSelectionCriteriaSseKmsEncryptedObjects: optional
	SseKmsEncryptedObjects *RuleSourceSelectionCriteriaSseKmsEncryptedObjects `hcl:"sse_kms_encrypted_objects,block"`
}

type RuleSourceSelectionCriteriaReplicaModifications struct {
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
}

type RuleSourceSelectionCriteriaSseKmsEncryptedObjects struct {
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
}

type RuleAttributes struct {
	ref terra.Reference
}

func (r RuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RuleAttributes) InternalWithRef(ref terra.Reference) RuleAttributes {
	return RuleAttributes{ref: ref}
}

func (r RuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r RuleAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("prefix"))
}

func (r RuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("priority"))
}

func (r RuleAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("status"))
}

func (r RuleAttributes) DeleteMarkerReplication() terra.ListValue[RuleDeleteMarkerReplicationAttributes] {
	return terra.ReferenceAsList[RuleDeleteMarkerReplicationAttributes](r.ref.Append("delete_marker_replication"))
}

func (r RuleAttributes) Destination() terra.ListValue[RuleDestinationAttributes] {
	return terra.ReferenceAsList[RuleDestinationAttributes](r.ref.Append("destination"))
}

func (r RuleAttributes) ExistingObjectReplication() terra.ListValue[RuleExistingObjectReplicationAttributes] {
	return terra.ReferenceAsList[RuleExistingObjectReplicationAttributes](r.ref.Append("existing_object_replication"))
}

func (r RuleAttributes) Filter() terra.ListValue[RuleFilterAttributes] {
	return terra.ReferenceAsList[RuleFilterAttributes](r.ref.Append("filter"))
}

func (r RuleAttributes) SourceSelectionCriteria() terra.ListValue[RuleSourceSelectionCriteriaAttributes] {
	return terra.ReferenceAsList[RuleSourceSelectionCriteriaAttributes](r.ref.Append("source_selection_criteria"))
}

type RuleDeleteMarkerReplicationAttributes struct {
	ref terra.Reference
}

func (dmr RuleDeleteMarkerReplicationAttributes) InternalRef() (terra.Reference, error) {
	return dmr.ref, nil
}

func (dmr RuleDeleteMarkerReplicationAttributes) InternalWithRef(ref terra.Reference) RuleDeleteMarkerReplicationAttributes {
	return RuleDeleteMarkerReplicationAttributes{ref: ref}
}

func (dmr RuleDeleteMarkerReplicationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dmr.ref.InternalTokens()
}

func (dmr RuleDeleteMarkerReplicationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(dmr.ref.Append("status"))
}

type RuleDestinationAttributes struct {
	ref terra.Reference
}

func (d RuleDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d RuleDestinationAttributes) InternalWithRef(ref terra.Reference) RuleDestinationAttributes {
	return RuleDestinationAttributes{ref: ref}
}

func (d RuleDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d RuleDestinationAttributes) Account() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("account"))
}

func (d RuleDestinationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("bucket"))
}

func (d RuleDestinationAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("storage_class"))
}

func (d RuleDestinationAttributes) AccessControlTranslation() terra.ListValue[RuleDestinationAccessControlTranslationAttributes] {
	return terra.ReferenceAsList[RuleDestinationAccessControlTranslationAttributes](d.ref.Append("access_control_translation"))
}

func (d RuleDestinationAttributes) EncryptionConfiguration() terra.ListValue[RuleDestinationEncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[RuleDestinationEncryptionConfigurationAttributes](d.ref.Append("encryption_configuration"))
}

func (d RuleDestinationAttributes) Metrics() terra.ListValue[RuleDestinationMetricsAttributes] {
	return terra.ReferenceAsList[RuleDestinationMetricsAttributes](d.ref.Append("metrics"))
}

func (d RuleDestinationAttributes) ReplicationTime() terra.ListValue[RuleDestinationReplicationTimeAttributes] {
	return terra.ReferenceAsList[RuleDestinationReplicationTimeAttributes](d.ref.Append("replication_time"))
}

type RuleDestinationAccessControlTranslationAttributes struct {
	ref terra.Reference
}

func (act RuleDestinationAccessControlTranslationAttributes) InternalRef() (terra.Reference, error) {
	return act.ref, nil
}

func (act RuleDestinationAccessControlTranslationAttributes) InternalWithRef(ref terra.Reference) RuleDestinationAccessControlTranslationAttributes {
	return RuleDestinationAccessControlTranslationAttributes{ref: ref}
}

func (act RuleDestinationAccessControlTranslationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return act.ref.InternalTokens()
}

func (act RuleDestinationAccessControlTranslationAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("owner"))
}

type RuleDestinationEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec RuleDestinationEncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec RuleDestinationEncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) RuleDestinationEncryptionConfigurationAttributes {
	return RuleDestinationEncryptionConfigurationAttributes{ref: ref}
}

func (ec RuleDestinationEncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec RuleDestinationEncryptionConfigurationAttributes) ReplicaKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("replica_kms_key_id"))
}

type RuleDestinationMetricsAttributes struct {
	ref terra.Reference
}

func (m RuleDestinationMetricsAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m RuleDestinationMetricsAttributes) InternalWithRef(ref terra.Reference) RuleDestinationMetricsAttributes {
	return RuleDestinationMetricsAttributes{ref: ref}
}

func (m RuleDestinationMetricsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m RuleDestinationMetricsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("status"))
}

func (m RuleDestinationMetricsAttributes) EventThreshold() terra.ListValue[RuleDestinationMetricsEventThresholdAttributes] {
	return terra.ReferenceAsList[RuleDestinationMetricsEventThresholdAttributes](m.ref.Append("event_threshold"))
}

type RuleDestinationMetricsEventThresholdAttributes struct {
	ref terra.Reference
}

func (et RuleDestinationMetricsEventThresholdAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et RuleDestinationMetricsEventThresholdAttributes) InternalWithRef(ref terra.Reference) RuleDestinationMetricsEventThresholdAttributes {
	return RuleDestinationMetricsEventThresholdAttributes{ref: ref}
}

func (et RuleDestinationMetricsEventThresholdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et RuleDestinationMetricsEventThresholdAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(et.ref.Append("minutes"))
}

type RuleDestinationReplicationTimeAttributes struct {
	ref terra.Reference
}

func (rt RuleDestinationReplicationTimeAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt RuleDestinationReplicationTimeAttributes) InternalWithRef(ref terra.Reference) RuleDestinationReplicationTimeAttributes {
	return RuleDestinationReplicationTimeAttributes{ref: ref}
}

func (rt RuleDestinationReplicationTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt RuleDestinationReplicationTimeAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("status"))
}

func (rt RuleDestinationReplicationTimeAttributes) Time() terra.ListValue[RuleDestinationReplicationTimeTimeAttributes] {
	return terra.ReferenceAsList[RuleDestinationReplicationTimeTimeAttributes](rt.ref.Append("time"))
}

type RuleDestinationReplicationTimeTimeAttributes struct {
	ref terra.Reference
}

func (t RuleDestinationReplicationTimeTimeAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t RuleDestinationReplicationTimeTimeAttributes) InternalWithRef(ref terra.Reference) RuleDestinationReplicationTimeTimeAttributes {
	return RuleDestinationReplicationTimeTimeAttributes{ref: ref}
}

func (t RuleDestinationReplicationTimeTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t RuleDestinationReplicationTimeTimeAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("minutes"))
}

type RuleExistingObjectReplicationAttributes struct {
	ref terra.Reference
}

func (eor RuleExistingObjectReplicationAttributes) InternalRef() (terra.Reference, error) {
	return eor.ref, nil
}

func (eor RuleExistingObjectReplicationAttributes) InternalWithRef(ref terra.Reference) RuleExistingObjectReplicationAttributes {
	return RuleExistingObjectReplicationAttributes{ref: ref}
}

func (eor RuleExistingObjectReplicationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eor.ref.InternalTokens()
}

func (eor RuleExistingObjectReplicationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(eor.ref.Append("status"))
}

type RuleFilterAttributes struct {
	ref terra.Reference
}

func (f RuleFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f RuleFilterAttributes) InternalWithRef(ref terra.Reference) RuleFilterAttributes {
	return RuleFilterAttributes{ref: ref}
}

func (f RuleFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f RuleFilterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

func (f RuleFilterAttributes) And() terra.ListValue[RuleFilterAndAttributes] {
	return terra.ReferenceAsList[RuleFilterAndAttributes](f.ref.Append("and"))
}

func (f RuleFilterAttributes) Tag() terra.ListValue[RuleFilterTagAttributes] {
	return terra.ReferenceAsList[RuleFilterTagAttributes](f.ref.Append("tag"))
}

type RuleFilterAndAttributes struct {
	ref terra.Reference
}

func (a RuleFilterAndAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a RuleFilterAndAttributes) InternalWithRef(ref terra.Reference) RuleFilterAndAttributes {
	return RuleFilterAndAttributes{ref: ref}
}

func (a RuleFilterAndAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a RuleFilterAndAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("prefix"))
}

func (a RuleFilterAndAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("tags"))
}

type RuleFilterTagAttributes struct {
	ref terra.Reference
}

func (t RuleFilterTagAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t RuleFilterTagAttributes) InternalWithRef(ref terra.Reference) RuleFilterTagAttributes {
	return RuleFilterTagAttributes{ref: ref}
}

func (t RuleFilterTagAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t RuleFilterTagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t RuleFilterTagAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type RuleSourceSelectionCriteriaAttributes struct {
	ref terra.Reference
}

func (ssc RuleSourceSelectionCriteriaAttributes) InternalRef() (terra.Reference, error) {
	return ssc.ref, nil
}

func (ssc RuleSourceSelectionCriteriaAttributes) InternalWithRef(ref terra.Reference) RuleSourceSelectionCriteriaAttributes {
	return RuleSourceSelectionCriteriaAttributes{ref: ref}
}

func (ssc RuleSourceSelectionCriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssc.ref.InternalTokens()
}

func (ssc RuleSourceSelectionCriteriaAttributes) ReplicaModifications() terra.ListValue[RuleSourceSelectionCriteriaReplicaModificationsAttributes] {
	return terra.ReferenceAsList[RuleSourceSelectionCriteriaReplicaModificationsAttributes](ssc.ref.Append("replica_modifications"))
}

func (ssc RuleSourceSelectionCriteriaAttributes) SseKmsEncryptedObjects() terra.ListValue[RuleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes] {
	return terra.ReferenceAsList[RuleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes](ssc.ref.Append("sse_kms_encrypted_objects"))
}

type RuleSourceSelectionCriteriaReplicaModificationsAttributes struct {
	ref terra.Reference
}

func (rm RuleSourceSelectionCriteriaReplicaModificationsAttributes) InternalRef() (terra.Reference, error) {
	return rm.ref, nil
}

func (rm RuleSourceSelectionCriteriaReplicaModificationsAttributes) InternalWithRef(ref terra.Reference) RuleSourceSelectionCriteriaReplicaModificationsAttributes {
	return RuleSourceSelectionCriteriaReplicaModificationsAttributes{ref: ref}
}

func (rm RuleSourceSelectionCriteriaReplicaModificationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rm.ref.InternalTokens()
}

func (rm RuleSourceSelectionCriteriaReplicaModificationsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rm.ref.Append("status"))
}

type RuleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes struct {
	ref terra.Reference
}

func (skeo RuleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes) InternalRef() (terra.Reference, error) {
	return skeo.ref, nil
}

func (skeo RuleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes) InternalWithRef(ref terra.Reference) RuleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes {
	return RuleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes{ref: ref}
}

func (skeo RuleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return skeo.ref.InternalTokens()
}

func (skeo RuleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(skeo.ref.Append("status"))
}

type RuleState struct {
	Id                        string                               `json:"id"`
	Prefix                    string                               `json:"prefix"`
	Priority                  float64                              `json:"priority"`
	Status                    string                               `json:"status"`
	DeleteMarkerReplication   []RuleDeleteMarkerReplicationState   `json:"delete_marker_replication"`
	Destination               []RuleDestinationState               `json:"destination"`
	ExistingObjectReplication []RuleExistingObjectReplicationState `json:"existing_object_replication"`
	Filter                    []RuleFilterState                    `json:"filter"`
	SourceSelectionCriteria   []RuleSourceSelectionCriteriaState   `json:"source_selection_criteria"`
}

type RuleDeleteMarkerReplicationState struct {
	Status string `json:"status"`
}

type RuleDestinationState struct {
	Account                  string                                         `json:"account"`
	Bucket                   string                                         `json:"bucket"`
	StorageClass             string                                         `json:"storage_class"`
	AccessControlTranslation []RuleDestinationAccessControlTranslationState `json:"access_control_translation"`
	EncryptionConfiguration  []RuleDestinationEncryptionConfigurationState  `json:"encryption_configuration"`
	Metrics                  []RuleDestinationMetricsState                  `json:"metrics"`
	ReplicationTime          []RuleDestinationReplicationTimeState          `json:"replication_time"`
}

type RuleDestinationAccessControlTranslationState struct {
	Owner string `json:"owner"`
}

type RuleDestinationEncryptionConfigurationState struct {
	ReplicaKmsKeyId string `json:"replica_kms_key_id"`
}

type RuleDestinationMetricsState struct {
	Status         string                                      `json:"status"`
	EventThreshold []RuleDestinationMetricsEventThresholdState `json:"event_threshold"`
}

type RuleDestinationMetricsEventThresholdState struct {
	Minutes float64 `json:"minutes"`
}

type RuleDestinationReplicationTimeState struct {
	Status string                                    `json:"status"`
	Time   []RuleDestinationReplicationTimeTimeState `json:"time"`
}

type RuleDestinationReplicationTimeTimeState struct {
	Minutes float64 `json:"minutes"`
}

type RuleExistingObjectReplicationState struct {
	Status string `json:"status"`
}

type RuleFilterState struct {
	Prefix string               `json:"prefix"`
	And    []RuleFilterAndState `json:"and"`
	Tag    []RuleFilterTagState `json:"tag"`
}

type RuleFilterAndState struct {
	Prefix string            `json:"prefix"`
	Tags   map[string]string `json:"tags"`
}

type RuleFilterTagState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type RuleSourceSelectionCriteriaState struct {
	ReplicaModifications   []RuleSourceSelectionCriteriaReplicaModificationsState   `json:"replica_modifications"`
	SseKmsEncryptedObjects []RuleSourceSelectionCriteriaSseKmsEncryptedObjectsState `json:"sse_kms_encrypted_objects"`
}

type RuleSourceSelectionCriteriaReplicaModificationsState struct {
	Status string `json:"status"`
}

type RuleSourceSelectionCriteriaSseKmsEncryptedObjectsState struct {
	Status string `json:"status"`
}
