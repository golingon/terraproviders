// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_rds_reserved_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_rds_reserved_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRdsReservedInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arri *Resource) Type() string {
	return "aws_rds_reserved_instance"
}

// LocalName returns the local name for [Resource].
func (arri *Resource) LocalName() string {
	return arri.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arri *Resource) Configuration() interface{} {
	return arri.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arri *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arri)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arri *Resource) Dependencies() terra.Dependencies {
	return arri.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arri *Resource) LifecycleManagement() *terra.Lifecycle {
	return arri.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arri *Resource) Attributes() awsRdsReservedInstanceAttributes {
	return awsRdsReservedInstanceAttributes{ref: terra.ReferenceResource(arri)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arri *Resource) ImportState(state io.Reader) error {
	arri.state = &awsRdsReservedInstanceState{}
	if err := json.NewDecoder(state).Decode(arri.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arri.Type(), arri.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arri *Resource) State() (*awsRdsReservedInstanceState, bool) {
	return arri.state, arri.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arri *Resource) StateMust() *awsRdsReservedInstanceState {
	if arri.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arri.Type(), arri.LocalName()))
	}
	return arri.state
}

// Args contains the configurations for aws_rds_reserved_instance.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceCount: number, optional
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// OfferingId: string, required
	OfferingId terra.StringValue `hcl:"offering_id,attr" validate:"required"`
	// ReservationId: string, optional
	ReservationId terra.StringValue `hcl:"reservation_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRdsReservedInstanceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arri.ref.Append("arn"))
}

// CurrencyCode returns a reference to field currency_code of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) CurrencyCode() terra.StringValue {
	return terra.ReferenceAsString(arri.ref.Append("currency_code"))
}

// DbInstanceClass returns a reference to field db_instance_class of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) DbInstanceClass() terra.StringValue {
	return terra.ReferenceAsString(arri.ref.Append("db_instance_class"))
}

// Duration returns a reference to field duration of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) Duration() terra.NumberValue {
	return terra.ReferenceAsNumber(arri.ref.Append("duration"))
}

// FixedPrice returns a reference to field fixed_price of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) FixedPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(arri.ref.Append("fixed_price"))
}

// Id returns a reference to field id of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arri.ref.Append("id"))
}

// InstanceCount returns a reference to field instance_count of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(arri.ref.Append("instance_count"))
}

// LeaseId returns a reference to field lease_id of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) LeaseId() terra.StringValue {
	return terra.ReferenceAsString(arri.ref.Append("lease_id"))
}

// MultiAz returns a reference to field multi_az of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) MultiAz() terra.BoolValue {
	return terra.ReferenceAsBool(arri.ref.Append("multi_az"))
}

// OfferingId returns a reference to field offering_id of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) OfferingId() terra.StringValue {
	return terra.ReferenceAsString(arri.ref.Append("offering_id"))
}

// OfferingType returns a reference to field offering_type of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) OfferingType() terra.StringValue {
	return terra.ReferenceAsString(arri.ref.Append("offering_type"))
}

// ProductDescription returns a reference to field product_description of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) ProductDescription() terra.StringValue {
	return terra.ReferenceAsString(arri.ref.Append("product_description"))
}

// ReservationId returns a reference to field reservation_id of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) ReservationId() terra.StringValue {
	return terra.ReferenceAsString(arri.ref.Append("reservation_id"))
}

// StartTime returns a reference to field start_time of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(arri.ref.Append("start_time"))
}

// State returns a reference to field state of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(arri.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arri.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arri.ref.Append("tags_all"))
}

// UsagePrice returns a reference to field usage_price of aws_rds_reserved_instance.
func (arri awsRdsReservedInstanceAttributes) UsagePrice() terra.NumberValue {
	return terra.ReferenceAsNumber(arri.ref.Append("usage_price"))
}

func (arri awsRdsReservedInstanceAttributes) RecurringCharges() terra.ListValue[RecurringChargesAttributes] {
	return terra.ReferenceAsList[RecurringChargesAttributes](arri.ref.Append("recurring_charges"))
}

func (arri awsRdsReservedInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arri.ref.Append("timeouts"))
}

type awsRdsReservedInstanceState struct {
	Arn                string                  `json:"arn"`
	CurrencyCode       string                  `json:"currency_code"`
	DbInstanceClass    string                  `json:"db_instance_class"`
	Duration           float64                 `json:"duration"`
	FixedPrice         float64                 `json:"fixed_price"`
	Id                 string                  `json:"id"`
	InstanceCount      float64                 `json:"instance_count"`
	LeaseId            string                  `json:"lease_id"`
	MultiAz            bool                    `json:"multi_az"`
	OfferingId         string                  `json:"offering_id"`
	OfferingType       string                  `json:"offering_type"`
	ProductDescription string                  `json:"product_description"`
	ReservationId      string                  `json:"reservation_id"`
	StartTime          string                  `json:"start_time"`
	State              string                  `json:"state"`
	Tags               map[string]string       `json:"tags"`
	TagsAll            map[string]string       `json:"tags_all"`
	UsagePrice         float64                 `json:"usage_price"`
	RecurringCharges   []RecurringChargesState `json:"recurring_charges"`
	Timeouts           *TimeoutsState          `json:"timeouts"`
}
