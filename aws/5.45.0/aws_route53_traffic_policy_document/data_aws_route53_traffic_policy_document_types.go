// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_traffic_policy_document

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataEndpoint struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type DataRule struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// RuleGeoProximityLocation: min=0
	GeoProximityLocation []DataRuleGeoProximityLocation `hcl:"geo_proximity_location,block" validate:"min=0"`
	// RuleItems: min=0
	Items []DataRuleItems `hcl:"items,block" validate:"min=0"`
	// RuleLocation: min=0
	Location []DataRuleLocation `hcl:"location,block" validate:"min=0"`
	// RulePrimary: optional
	Primary *DataRulePrimary `hcl:"primary,block"`
	// RuleRegion: min=0
	Region []DataRuleRegion `hcl:"region,block" validate:"min=0"`
	// RuleSecondary: optional
	Secondary *DataRuleSecondary `hcl:"secondary,block"`
}

type DataRuleGeoProximityLocation struct {
	// Bias: string, optional
	Bias terra.StringValue `hcl:"bias,attr"`
	// EndpointReference: string, optional
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth: bool, optional
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck: string, optional
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// Latitude: string, optional
	Latitude terra.StringValue `hcl:"latitude,attr"`
	// Longitude: string, optional
	Longitude terra.StringValue `hcl:"longitude,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// RuleReference: string, optional
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
}

type DataRuleItems struct {
	// EndpointReference: string, optional
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// HealthCheck: string, optional
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
}

type DataRuleLocation struct {
	// Continent: string, optional
	Continent terra.StringValue `hcl:"continent,attr"`
	// Country: string, optional
	Country terra.StringValue `hcl:"country,attr"`
	// EndpointReference: string, optional
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth: bool, optional
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck: string, optional
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// IsDefault: bool, optional
	IsDefault terra.BoolValue `hcl:"is_default,attr"`
	// RuleReference: string, optional
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
	// Subdivision: string, optional
	Subdivision terra.StringValue `hcl:"subdivision,attr"`
}

type DataRulePrimary struct {
	// EndpointReference: string, optional
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth: bool, optional
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck: string, optional
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// RuleReference: string, optional
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
}

type DataRuleRegion struct {
	// EndpointReference: string, optional
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth: bool, optional
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck: string, optional
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// RuleReference: string, optional
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
}

type DataRuleSecondary struct {
	// EndpointReference: string, optional
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth: bool, optional
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck: string, optional
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// RuleReference: string, optional
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
}

type DataEndpointAttributes struct {
	ref terra.Reference
}

func (e DataEndpointAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e DataEndpointAttributes) InternalWithRef(ref terra.Reference) DataEndpointAttributes {
	return DataEndpointAttributes{ref: ref}
}

func (e DataEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e DataEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("id"))
}

func (e DataEndpointAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("region"))
}

func (e DataEndpointAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type"))
}

func (e DataEndpointAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type DataRuleAttributes struct {
	ref terra.Reference
}

func (r DataRuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataRuleAttributes) InternalWithRef(ref terra.Reference) DataRuleAttributes {
	return DataRuleAttributes{ref: ref}
}

func (r DataRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r DataRuleAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("type"))
}

func (r DataRuleAttributes) GeoProximityLocation() terra.SetValue[DataRuleGeoProximityLocationAttributes] {
	return terra.ReferenceAsSet[DataRuleGeoProximityLocationAttributes](r.ref.Append("geo_proximity_location"))
}

func (r DataRuleAttributes) Items() terra.SetValue[DataRuleItemsAttributes] {
	return terra.ReferenceAsSet[DataRuleItemsAttributes](r.ref.Append("items"))
}

func (r DataRuleAttributes) Location() terra.SetValue[DataRuleLocationAttributes] {
	return terra.ReferenceAsSet[DataRuleLocationAttributes](r.ref.Append("location"))
}

func (r DataRuleAttributes) Primary() terra.ListValue[DataRulePrimaryAttributes] {
	return terra.ReferenceAsList[DataRulePrimaryAttributes](r.ref.Append("primary"))
}

func (r DataRuleAttributes) Region() terra.SetValue[DataRuleRegionAttributes] {
	return terra.ReferenceAsSet[DataRuleRegionAttributes](r.ref.Append("region"))
}

func (r DataRuleAttributes) Secondary() terra.ListValue[DataRuleSecondaryAttributes] {
	return terra.ReferenceAsList[DataRuleSecondaryAttributes](r.ref.Append("secondary"))
}

type DataRuleGeoProximityLocationAttributes struct {
	ref terra.Reference
}

func (gpl DataRuleGeoProximityLocationAttributes) InternalRef() (terra.Reference, error) {
	return gpl.ref, nil
}

func (gpl DataRuleGeoProximityLocationAttributes) InternalWithRef(ref terra.Reference) DataRuleGeoProximityLocationAttributes {
	return DataRuleGeoProximityLocationAttributes{ref: ref}
}

func (gpl DataRuleGeoProximityLocationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gpl.ref.InternalTokens()
}

func (gpl DataRuleGeoProximityLocationAttributes) Bias() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("bias"))
}

func (gpl DataRuleGeoProximityLocationAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("endpoint_reference"))
}

func (gpl DataRuleGeoProximityLocationAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceAsBool(gpl.ref.Append("evaluate_target_health"))
}

func (gpl DataRuleGeoProximityLocationAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("health_check"))
}

func (gpl DataRuleGeoProximityLocationAttributes) Latitude() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("latitude"))
}

func (gpl DataRuleGeoProximityLocationAttributes) Longitude() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("longitude"))
}

func (gpl DataRuleGeoProximityLocationAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("region"))
}

func (gpl DataRuleGeoProximityLocationAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("rule_reference"))
}

type DataRuleItemsAttributes struct {
	ref terra.Reference
}

func (i DataRuleItemsAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataRuleItemsAttributes) InternalWithRef(ref terra.Reference) DataRuleItemsAttributes {
	return DataRuleItemsAttributes{ref: ref}
}

func (i DataRuleItemsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataRuleItemsAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("endpoint_reference"))
}

func (i DataRuleItemsAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("health_check"))
}

type DataRuleLocationAttributes struct {
	ref terra.Reference
}

func (l DataRuleLocationAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l DataRuleLocationAttributes) InternalWithRef(ref terra.Reference) DataRuleLocationAttributes {
	return DataRuleLocationAttributes{ref: ref}
}

func (l DataRuleLocationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l DataRuleLocationAttributes) Continent() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("continent"))
}

func (l DataRuleLocationAttributes) Country() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("country"))
}

func (l DataRuleLocationAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("endpoint_reference"))
}

func (l DataRuleLocationAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("evaluate_target_health"))
}

func (l DataRuleLocationAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("health_check"))
}

func (l DataRuleLocationAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("is_default"))
}

func (l DataRuleLocationAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("rule_reference"))
}

func (l DataRuleLocationAttributes) Subdivision() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("subdivision"))
}

type DataRulePrimaryAttributes struct {
	ref terra.Reference
}

func (p DataRulePrimaryAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DataRulePrimaryAttributes) InternalWithRef(ref terra.Reference) DataRulePrimaryAttributes {
	return DataRulePrimaryAttributes{ref: ref}
}

func (p DataRulePrimaryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DataRulePrimaryAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("endpoint_reference"))
}

func (p DataRulePrimaryAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("evaluate_target_health"))
}

func (p DataRulePrimaryAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("health_check"))
}

func (p DataRulePrimaryAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("rule_reference"))
}

type DataRuleRegionAttributes struct {
	ref terra.Reference
}

func (r DataRuleRegionAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataRuleRegionAttributes) InternalWithRef(ref terra.Reference) DataRuleRegionAttributes {
	return DataRuleRegionAttributes{ref: ref}
}

func (r DataRuleRegionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataRuleRegionAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("endpoint_reference"))
}

func (r DataRuleRegionAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("evaluate_target_health"))
}

func (r DataRuleRegionAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("health_check"))
}

func (r DataRuleRegionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("region"))
}

func (r DataRuleRegionAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rule_reference"))
}

type DataRuleSecondaryAttributes struct {
	ref terra.Reference
}

func (s DataRuleSecondaryAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataRuleSecondaryAttributes) InternalWithRef(ref terra.Reference) DataRuleSecondaryAttributes {
	return DataRuleSecondaryAttributes{ref: ref}
}

func (s DataRuleSecondaryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataRuleSecondaryAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("endpoint_reference"))
}

func (s DataRuleSecondaryAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("evaluate_target_health"))
}

func (s DataRuleSecondaryAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("health_check"))
}

func (s DataRuleSecondaryAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("rule_reference"))
}

type DataEndpointState struct {
	Id     string `json:"id"`
	Region string `json:"region"`
	Type   string `json:"type"`
	Value  string `json:"value"`
}

type DataRuleState struct {
	Id                   string                              `json:"id"`
	Type                 string                              `json:"type"`
	GeoProximityLocation []DataRuleGeoProximityLocationState `json:"geo_proximity_location"`
	Items                []DataRuleItemsState                `json:"items"`
	Location             []DataRuleLocationState             `json:"location"`
	Primary              []DataRulePrimaryState              `json:"primary"`
	Region               []DataRuleRegionState               `json:"region"`
	Secondary            []DataRuleSecondaryState            `json:"secondary"`
}

type DataRuleGeoProximityLocationState struct {
	Bias                 string `json:"bias"`
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	Latitude             string `json:"latitude"`
	Longitude            string `json:"longitude"`
	Region               string `json:"region"`
	RuleReference        string `json:"rule_reference"`
}

type DataRuleItemsState struct {
	EndpointReference string `json:"endpoint_reference"`
	HealthCheck       string `json:"health_check"`
}

type DataRuleLocationState struct {
	Continent            string `json:"continent"`
	Country              string `json:"country"`
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	IsDefault            bool   `json:"is_default"`
	RuleReference        string `json:"rule_reference"`
	Subdivision          string `json:"subdivision"`
}

type DataRulePrimaryState struct {
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	RuleReference        string `json:"rule_reference"`
}

type DataRuleRegionState struct {
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	Region               string `json:"region"`
	RuleReference        string `json:"rule_reference"`
}

type DataRuleSecondaryState struct {
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	RuleReference        string `json:"rule_reference"`
}
