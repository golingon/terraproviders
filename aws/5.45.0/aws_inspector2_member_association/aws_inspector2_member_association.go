// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_inspector2_member_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_inspector2_member_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsInspector2MemberAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aima *Resource) Type() string {
	return "aws_inspector2_member_association"
}

// LocalName returns the local name for [Resource].
func (aima *Resource) LocalName() string {
	return aima.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aima *Resource) Configuration() interface{} {
	return aima.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aima *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aima)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aima *Resource) Dependencies() terra.Dependencies {
	return aima.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aima *Resource) LifecycleManagement() *terra.Lifecycle {
	return aima.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aima *Resource) Attributes() awsInspector2MemberAssociationAttributes {
	return awsInspector2MemberAssociationAttributes{ref: terra.ReferenceResource(aima)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aima *Resource) ImportState(state io.Reader) error {
	aima.state = &awsInspector2MemberAssociationState{}
	if err := json.NewDecoder(state).Decode(aima.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aima.Type(), aima.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aima *Resource) State() (*awsInspector2MemberAssociationState, bool) {
	return aima.state, aima.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aima *Resource) StateMust() *awsInspector2MemberAssociationState {
	if aima.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aima.Type(), aima.LocalName()))
	}
	return aima.state
}

// Args contains the configurations for aws_inspector2_member_association.
type Args struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsInspector2MemberAssociationAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_inspector2_member_association.
func (aima awsInspector2MemberAssociationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(aima.ref.Append("account_id"))
}

// DelegatedAdminAccountId returns a reference to field delegated_admin_account_id of aws_inspector2_member_association.
func (aima awsInspector2MemberAssociationAttributes) DelegatedAdminAccountId() terra.StringValue {
	return terra.ReferenceAsString(aima.ref.Append("delegated_admin_account_id"))
}

// Id returns a reference to field id of aws_inspector2_member_association.
func (aima awsInspector2MemberAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aima.ref.Append("id"))
}

// RelationshipStatus returns a reference to field relationship_status of aws_inspector2_member_association.
func (aima awsInspector2MemberAssociationAttributes) RelationshipStatus() terra.StringValue {
	return terra.ReferenceAsString(aima.ref.Append("relationship_status"))
}

// UpdatedAt returns a reference to field updated_at of aws_inspector2_member_association.
func (aima awsInspector2MemberAssociationAttributes) UpdatedAt() terra.StringValue {
	return terra.ReferenceAsString(aima.ref.Append("updated_at"))
}

func (aima awsInspector2MemberAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aima.ref.Append("timeouts"))
}

type awsInspector2MemberAssociationState struct {
	AccountId               string         `json:"account_id"`
	DelegatedAdminAccountId string         `json:"delegated_admin_account_id"`
	Id                      string         `json:"id"`
	RelationshipStatus      string         `json:"relationship_status"`
	UpdatedAt               string         `json:"updated_at"`
	Timeouts                *TimeoutsState `json:"timeouts"`
}
