// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kms_ciphertext

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kms_ciphertext.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKmsCiphertextState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akc *Resource) Type() string {
	return "aws_kms_ciphertext"
}

// LocalName returns the local name for [Resource].
func (akc *Resource) LocalName() string {
	return akc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akc *Resource) Configuration() interface{} {
	return akc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akc *Resource) Dependencies() terra.Dependencies {
	return akc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akc *Resource) LifecycleManagement() *terra.Lifecycle {
	return akc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akc *Resource) Attributes() awsKmsCiphertextAttributes {
	return awsKmsCiphertextAttributes{ref: terra.ReferenceResource(akc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akc *Resource) ImportState(state io.Reader) error {
	akc.state = &awsKmsCiphertextState{}
	if err := json.NewDecoder(state).Decode(akc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akc.Type(), akc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akc *Resource) State() (*awsKmsCiphertextState, bool) {
	return akc.state, akc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akc *Resource) StateMust() *awsKmsCiphertextState {
	if akc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akc.Type(), akc.LocalName()))
	}
	return akc.state
}

// Args contains the configurations for aws_kms_ciphertext.
type Args struct {
	// Context: map of string, optional
	Context terra.MapValue[terra.StringValue] `hcl:"context,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyId: string, required
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
	// Plaintext: string, required
	Plaintext terra.StringValue `hcl:"plaintext,attr" validate:"required"`
}

type awsKmsCiphertextAttributes struct {
	ref terra.Reference
}

// CiphertextBlob returns a reference to field ciphertext_blob of aws_kms_ciphertext.
func (akc awsKmsCiphertextAttributes) CiphertextBlob() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("ciphertext_blob"))
}

// Context returns a reference to field context of aws_kms_ciphertext.
func (akc awsKmsCiphertextAttributes) Context() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akc.ref.Append("context"))
}

// Id returns a reference to field id of aws_kms_ciphertext.
func (akc awsKmsCiphertextAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("id"))
}

// KeyId returns a reference to field key_id of aws_kms_ciphertext.
func (akc awsKmsCiphertextAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("key_id"))
}

// Plaintext returns a reference to field plaintext of aws_kms_ciphertext.
func (akc awsKmsCiphertextAttributes) Plaintext() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("plaintext"))
}

type awsKmsCiphertextState struct {
	CiphertextBlob string            `json:"ciphertext_blob"`
	Context        map[string]string `json:"context"`
	Id             string            `json:"id"`
	KeyId          string            `json:"key_id"`
	Plaintext      string            `json:"plaintext"`
}
