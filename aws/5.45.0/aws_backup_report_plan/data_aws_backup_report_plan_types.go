// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_backup_report_plan

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataReportDeliveryChannelAttributes struct {
	ref terra.Reference
}

func (rdc DataReportDeliveryChannelAttributes) InternalRef() (terra.Reference, error) {
	return rdc.ref, nil
}

func (rdc DataReportDeliveryChannelAttributes) InternalWithRef(ref terra.Reference) DataReportDeliveryChannelAttributes {
	return DataReportDeliveryChannelAttributes{ref: ref}
}

func (rdc DataReportDeliveryChannelAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rdc.ref.InternalTokens()
}

func (rdc DataReportDeliveryChannelAttributes) Formats() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rdc.ref.Append("formats"))
}

func (rdc DataReportDeliveryChannelAttributes) S3BucketName() terra.StringValue {
	return terra.ReferenceAsString(rdc.ref.Append("s3_bucket_name"))
}

func (rdc DataReportDeliveryChannelAttributes) S3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(rdc.ref.Append("s3_key_prefix"))
}

type DataReportSettingAttributes struct {
	ref terra.Reference
}

func (rs DataReportSettingAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs DataReportSettingAttributes) InternalWithRef(ref terra.Reference) DataReportSettingAttributes {
	return DataReportSettingAttributes{ref: ref}
}

func (rs DataReportSettingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs DataReportSettingAttributes) Accounts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rs.ref.Append("accounts"))
}

func (rs DataReportSettingAttributes) FrameworkArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rs.ref.Append("framework_arns"))
}

func (rs DataReportSettingAttributes) NumberOfFrameworks() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("number_of_frameworks"))
}

func (rs DataReportSettingAttributes) OrganizationUnits() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rs.ref.Append("organization_units"))
}

func (rs DataReportSettingAttributes) Regions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rs.ref.Append("regions"))
}

func (rs DataReportSettingAttributes) ReportTemplate() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("report_template"))
}

type DataReportDeliveryChannelState struct {
	Formats      []string `json:"formats"`
	S3BucketName string   `json:"s3_bucket_name"`
	S3KeyPrefix  string   `json:"s3_key_prefix"`
}

type DataReportSettingState struct {
	Accounts           []string `json:"accounts"`
	FrameworkArns      []string `json:"framework_arns"`
	NumberOfFrameworks float64  `json:"number_of_frameworks"`
	OrganizationUnits  []string `json:"organization_units"`
	Regions            []string `json:"regions"`
	ReportTemplate     string   `json:"report_template"`
}
