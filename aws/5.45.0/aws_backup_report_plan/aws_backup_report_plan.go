// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_backup_report_plan

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_backup_report_plan.
type Resource struct {
	Name      string
	Args      Args
	state     *awsBackupReportPlanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abrp *Resource) Type() string {
	return "aws_backup_report_plan"
}

// LocalName returns the local name for [Resource].
func (abrp *Resource) LocalName() string {
	return abrp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abrp *Resource) Configuration() interface{} {
	return abrp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abrp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abrp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abrp *Resource) Dependencies() terra.Dependencies {
	return abrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abrp *Resource) LifecycleManagement() *terra.Lifecycle {
	return abrp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abrp *Resource) Attributes() awsBackupReportPlanAttributes {
	return awsBackupReportPlanAttributes{ref: terra.ReferenceResource(abrp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abrp *Resource) ImportState(state io.Reader) error {
	abrp.state = &awsBackupReportPlanState{}
	if err := json.NewDecoder(state).Decode(abrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abrp.Type(), abrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abrp *Resource) State() (*awsBackupReportPlanState, bool) {
	return abrp.state, abrp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abrp *Resource) StateMust() *awsBackupReportPlanState {
	if abrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abrp.Type(), abrp.LocalName()))
	}
	return abrp.state
}

// Args contains the configurations for aws_backup_report_plan.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ReportDeliveryChannel: required
	ReportDeliveryChannel *ReportDeliveryChannel `hcl:"report_delivery_channel,block" validate:"required"`
	// ReportSetting: required
	ReportSetting *ReportSetting `hcl:"report_setting,block" validate:"required"`
}

type awsBackupReportPlanAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_backup_report_plan.
func (abrp awsBackupReportPlanAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(abrp.ref.Append("arn"))
}

// CreationTime returns a reference to field creation_time of aws_backup_report_plan.
func (abrp awsBackupReportPlanAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(abrp.ref.Append("creation_time"))
}

// DeploymentStatus returns a reference to field deployment_status of aws_backup_report_plan.
func (abrp awsBackupReportPlanAttributes) DeploymentStatus() terra.StringValue {
	return terra.ReferenceAsString(abrp.ref.Append("deployment_status"))
}

// Description returns a reference to field description of aws_backup_report_plan.
func (abrp awsBackupReportPlanAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(abrp.ref.Append("description"))
}

// Id returns a reference to field id of aws_backup_report_plan.
func (abrp awsBackupReportPlanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abrp.ref.Append("id"))
}

// Name returns a reference to field name of aws_backup_report_plan.
func (abrp awsBackupReportPlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abrp.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_backup_report_plan.
func (abrp awsBackupReportPlanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abrp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_backup_report_plan.
func (abrp awsBackupReportPlanAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abrp.ref.Append("tags_all"))
}

func (abrp awsBackupReportPlanAttributes) ReportDeliveryChannel() terra.ListValue[ReportDeliveryChannelAttributes] {
	return terra.ReferenceAsList[ReportDeliveryChannelAttributes](abrp.ref.Append("report_delivery_channel"))
}

func (abrp awsBackupReportPlanAttributes) ReportSetting() terra.ListValue[ReportSettingAttributes] {
	return terra.ReferenceAsList[ReportSettingAttributes](abrp.ref.Append("report_setting"))
}

type awsBackupReportPlanState struct {
	Arn                   string                       `json:"arn"`
	CreationTime          string                       `json:"creation_time"`
	DeploymentStatus      string                       `json:"deployment_status"`
	Description           string                       `json:"description"`
	Id                    string                       `json:"id"`
	Name                  string                       `json:"name"`
	Tags                  map[string]string            `json:"tags"`
	TagsAll               map[string]string            `json:"tags_all"`
	ReportDeliveryChannel []ReportDeliveryChannelState `json:"report_delivery_channel"`
	ReportSetting         []ReportSettingState         `json:"report_setting"`
}
