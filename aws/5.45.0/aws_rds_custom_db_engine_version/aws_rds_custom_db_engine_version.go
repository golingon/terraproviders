// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_rds_custom_db_engine_version

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_rds_custom_db_engine_version.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRdsCustomDbEngineVersionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arcdev *Resource) Type() string {
	return "aws_rds_custom_db_engine_version"
}

// LocalName returns the local name for [Resource].
func (arcdev *Resource) LocalName() string {
	return arcdev.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arcdev *Resource) Configuration() interface{} {
	return arcdev.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arcdev *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arcdev)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arcdev *Resource) Dependencies() terra.Dependencies {
	return arcdev.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arcdev *Resource) LifecycleManagement() *terra.Lifecycle {
	return arcdev.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arcdev *Resource) Attributes() awsRdsCustomDbEngineVersionAttributes {
	return awsRdsCustomDbEngineVersionAttributes{ref: terra.ReferenceResource(arcdev)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arcdev *Resource) ImportState(state io.Reader) error {
	arcdev.state = &awsRdsCustomDbEngineVersionState{}
	if err := json.NewDecoder(state).Decode(arcdev.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arcdev.Type(), arcdev.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arcdev *Resource) State() (*awsRdsCustomDbEngineVersionState, bool) {
	return arcdev.state, arcdev.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arcdev *Resource) StateMust() *awsRdsCustomDbEngineVersionState {
	if arcdev.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arcdev.Type(), arcdev.LocalName()))
	}
	return arcdev.state
}

// Args contains the configurations for aws_rds_custom_db_engine_version.
type Args struct {
	// DatabaseInstallationFilesS3BucketName: string, optional
	DatabaseInstallationFilesS3BucketName terra.StringValue `hcl:"database_installation_files_s3_bucket_name,attr"`
	// DatabaseInstallationFilesS3Prefix: string, optional
	DatabaseInstallationFilesS3Prefix terra.StringValue `hcl:"database_installation_files_s3_prefix,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Engine: string, required
	Engine terra.StringValue `hcl:"engine,attr" validate:"required"`
	// EngineVersion: string, required
	EngineVersion terra.StringValue `hcl:"engine_version,attr" validate:"required"`
	// Filename: string, optional
	Filename terra.StringValue `hcl:"filename,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Manifest: string, optional
	Manifest terra.StringValue `hcl:"manifest,attr"`
	// ManifestHash: string, optional
	ManifestHash terra.StringValue `hcl:"manifest_hash,attr"`
	// SourceImageId: string, optional
	SourceImageId terra.StringValue `hcl:"source_image_id,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRdsCustomDbEngineVersionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("arn"))
}

// CreateTime returns a reference to field create_time of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("create_time"))
}

// DatabaseInstallationFilesS3BucketName returns a reference to field database_installation_files_s3_bucket_name of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) DatabaseInstallationFilesS3BucketName() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("database_installation_files_s3_bucket_name"))
}

// DatabaseInstallationFilesS3Prefix returns a reference to field database_installation_files_s3_prefix of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) DatabaseInstallationFilesS3Prefix() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("database_installation_files_s3_prefix"))
}

// DbParameterGroupFamily returns a reference to field db_parameter_group_family of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) DbParameterGroupFamily() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("db_parameter_group_family"))
}

// Description returns a reference to field description of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("description"))
}

// Engine returns a reference to field engine of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) Engine() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("engine"))
}

// EngineVersion returns a reference to field engine_version of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("engine_version"))
}

// Filename returns a reference to field filename of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) Filename() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("filename"))
}

// Id returns a reference to field id of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("id"))
}

// ImageId returns a reference to field image_id of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) ImageId() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("image_id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("kms_key_id"))
}

// MajorEngineVersion returns a reference to field major_engine_version of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) MajorEngineVersion() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("major_engine_version"))
}

// Manifest returns a reference to field manifest of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) Manifest() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("manifest"))
}

// ManifestComputed returns a reference to field manifest_computed of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) ManifestComputed() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("manifest_computed"))
}

// ManifestHash returns a reference to field manifest_hash of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) ManifestHash() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("manifest_hash"))
}

// SourceImageId returns a reference to field source_image_id of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) SourceImageId() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("source_image_id"))
}

// Status returns a reference to field status of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(arcdev.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arcdev.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_rds_custom_db_engine_version.
func (arcdev awsRdsCustomDbEngineVersionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arcdev.ref.Append("tags_all"))
}

func (arcdev awsRdsCustomDbEngineVersionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arcdev.ref.Append("timeouts"))
}

type awsRdsCustomDbEngineVersionState struct {
	Arn                                   string            `json:"arn"`
	CreateTime                            string            `json:"create_time"`
	DatabaseInstallationFilesS3BucketName string            `json:"database_installation_files_s3_bucket_name"`
	DatabaseInstallationFilesS3Prefix     string            `json:"database_installation_files_s3_prefix"`
	DbParameterGroupFamily                string            `json:"db_parameter_group_family"`
	Description                           string            `json:"description"`
	Engine                                string            `json:"engine"`
	EngineVersion                         string            `json:"engine_version"`
	Filename                              string            `json:"filename"`
	Id                                    string            `json:"id"`
	ImageId                               string            `json:"image_id"`
	KmsKeyId                              string            `json:"kms_key_id"`
	MajorEngineVersion                    string            `json:"major_engine_version"`
	Manifest                              string            `json:"manifest"`
	ManifestComputed                      string            `json:"manifest_computed"`
	ManifestHash                          string            `json:"manifest_hash"`
	SourceImageId                         string            `json:"source_image_id"`
	Status                                string            `json:"status"`
	Tags                                  map[string]string `json:"tags"`
	TagsAll                               map[string]string `json:"tags_all"`
	Timeouts                              *TimeoutsState    `json:"timeouts"`
}
