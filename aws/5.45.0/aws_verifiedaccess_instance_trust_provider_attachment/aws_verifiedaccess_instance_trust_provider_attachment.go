// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_verifiedaccess_instance_trust_provider_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_verifiedaccess_instance_trust_provider_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVerifiedaccessInstanceTrustProviderAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avitpa *Resource) Type() string {
	return "aws_verifiedaccess_instance_trust_provider_attachment"
}

// LocalName returns the local name for [Resource].
func (avitpa *Resource) LocalName() string {
	return avitpa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avitpa *Resource) Configuration() interface{} {
	return avitpa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avitpa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avitpa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avitpa *Resource) Dependencies() terra.Dependencies {
	return avitpa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avitpa *Resource) LifecycleManagement() *terra.Lifecycle {
	return avitpa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avitpa *Resource) Attributes() awsVerifiedaccessInstanceTrustProviderAttachmentAttributes {
	return awsVerifiedaccessInstanceTrustProviderAttachmentAttributes{ref: terra.ReferenceResource(avitpa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avitpa *Resource) ImportState(state io.Reader) error {
	avitpa.state = &awsVerifiedaccessInstanceTrustProviderAttachmentState{}
	if err := json.NewDecoder(state).Decode(avitpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avitpa.Type(), avitpa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avitpa *Resource) State() (*awsVerifiedaccessInstanceTrustProviderAttachmentState, bool) {
	return avitpa.state, avitpa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avitpa *Resource) StateMust() *awsVerifiedaccessInstanceTrustProviderAttachmentState {
	if avitpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avitpa.Type(), avitpa.LocalName()))
	}
	return avitpa.state
}

// Args contains the configurations for aws_verifiedaccess_instance_trust_provider_attachment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VerifiedaccessInstanceId: string, required
	VerifiedaccessInstanceId terra.StringValue `hcl:"verifiedaccess_instance_id,attr" validate:"required"`
	// VerifiedaccessTrustProviderId: string, required
	VerifiedaccessTrustProviderId terra.StringValue `hcl:"verifiedaccess_trust_provider_id,attr" validate:"required"`
}

type awsVerifiedaccessInstanceTrustProviderAttachmentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_verifiedaccess_instance_trust_provider_attachment.
func (avitpa awsVerifiedaccessInstanceTrustProviderAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avitpa.ref.Append("id"))
}

// VerifiedaccessInstanceId returns a reference to field verifiedaccess_instance_id of aws_verifiedaccess_instance_trust_provider_attachment.
func (avitpa awsVerifiedaccessInstanceTrustProviderAttachmentAttributes) VerifiedaccessInstanceId() terra.StringValue {
	return terra.ReferenceAsString(avitpa.ref.Append("verifiedaccess_instance_id"))
}

// VerifiedaccessTrustProviderId returns a reference to field verifiedaccess_trust_provider_id of aws_verifiedaccess_instance_trust_provider_attachment.
func (avitpa awsVerifiedaccessInstanceTrustProviderAttachmentAttributes) VerifiedaccessTrustProviderId() terra.StringValue {
	return terra.ReferenceAsString(avitpa.ref.Append("verifiedaccess_trust_provider_id"))
}

type awsVerifiedaccessInstanceTrustProviderAttachmentState struct {
	Id                            string `json:"id"`
	VerifiedaccessInstanceId      string `json:"verifiedaccess_instance_id"`
	VerifiedaccessTrustProviderId string `json:"verifiedaccess_trust_provider_id"`
}
