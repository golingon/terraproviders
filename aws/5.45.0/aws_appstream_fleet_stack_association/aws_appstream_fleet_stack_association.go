// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appstream_fleet_stack_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_appstream_fleet_stack_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppstreamFleetStackAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aafsa *Resource) Type() string {
	return "aws_appstream_fleet_stack_association"
}

// LocalName returns the local name for [Resource].
func (aafsa *Resource) LocalName() string {
	return aafsa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aafsa *Resource) Configuration() interface{} {
	return aafsa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aafsa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aafsa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aafsa *Resource) Dependencies() terra.Dependencies {
	return aafsa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aafsa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aafsa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aafsa *Resource) Attributes() awsAppstreamFleetStackAssociationAttributes {
	return awsAppstreamFleetStackAssociationAttributes{ref: terra.ReferenceResource(aafsa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aafsa *Resource) ImportState(state io.Reader) error {
	aafsa.state = &awsAppstreamFleetStackAssociationState{}
	if err := json.NewDecoder(state).Decode(aafsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aafsa.Type(), aafsa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aafsa *Resource) State() (*awsAppstreamFleetStackAssociationState, bool) {
	return aafsa.state, aafsa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aafsa *Resource) StateMust() *awsAppstreamFleetStackAssociationState {
	if aafsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aafsa.Type(), aafsa.LocalName()))
	}
	return aafsa.state
}

// Args contains the configurations for aws_appstream_fleet_stack_association.
type Args struct {
	// FleetName: string, required
	FleetName terra.StringValue `hcl:"fleet_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// StackName: string, required
	StackName terra.StringValue `hcl:"stack_name,attr" validate:"required"`
}

type awsAppstreamFleetStackAssociationAttributes struct {
	ref terra.Reference
}

// FleetName returns a reference to field fleet_name of aws_appstream_fleet_stack_association.
func (aafsa awsAppstreamFleetStackAssociationAttributes) FleetName() terra.StringValue {
	return terra.ReferenceAsString(aafsa.ref.Append("fleet_name"))
}

// Id returns a reference to field id of aws_appstream_fleet_stack_association.
func (aafsa awsAppstreamFleetStackAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aafsa.ref.Append("id"))
}

// StackName returns a reference to field stack_name of aws_appstream_fleet_stack_association.
func (aafsa awsAppstreamFleetStackAssociationAttributes) StackName() terra.StringValue {
	return terra.ReferenceAsString(aafsa.ref.Append("stack_name"))
}

type awsAppstreamFleetStackAssociationState struct {
	FleetName string `json:"fleet_name"`
	Id        string `json:"id"`
	StackName string `json:"stack_name"`
}
