// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshift_cluster_iam_roles

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_redshift_cluster_iam_roles.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRedshiftClusterIamRolesState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arcir *Resource) Type() string {
	return "aws_redshift_cluster_iam_roles"
}

// LocalName returns the local name for [Resource].
func (arcir *Resource) LocalName() string {
	return arcir.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arcir *Resource) Configuration() interface{} {
	return arcir.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arcir *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arcir)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arcir *Resource) Dependencies() terra.Dependencies {
	return arcir.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arcir *Resource) LifecycleManagement() *terra.Lifecycle {
	return arcir.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arcir *Resource) Attributes() awsRedshiftClusterIamRolesAttributes {
	return awsRedshiftClusterIamRolesAttributes{ref: terra.ReferenceResource(arcir)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arcir *Resource) ImportState(state io.Reader) error {
	arcir.state = &awsRedshiftClusterIamRolesState{}
	if err := json.NewDecoder(state).Decode(arcir.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arcir.Type(), arcir.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arcir *Resource) State() (*awsRedshiftClusterIamRolesState, bool) {
	return arcir.state, arcir.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arcir *Resource) StateMust() *awsRedshiftClusterIamRolesState {
	if arcir.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arcir.Type(), arcir.LocalName()))
	}
	return arcir.state
}

// Args contains the configurations for aws_redshift_cluster_iam_roles.
type Args struct {
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// DefaultIamRoleArn: string, optional
	DefaultIamRoleArn terra.StringValue `hcl:"default_iam_role_arn,attr"`
	// IamRoleArns: set of string, optional
	IamRoleArns terra.SetValue[terra.StringValue] `hcl:"iam_role_arns,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRedshiftClusterIamRolesAttributes struct {
	ref terra.Reference
}

// ClusterIdentifier returns a reference to field cluster_identifier of aws_redshift_cluster_iam_roles.
func (arcir awsRedshiftClusterIamRolesAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(arcir.ref.Append("cluster_identifier"))
}

// DefaultIamRoleArn returns a reference to field default_iam_role_arn of aws_redshift_cluster_iam_roles.
func (arcir awsRedshiftClusterIamRolesAttributes) DefaultIamRoleArn() terra.StringValue {
	return terra.ReferenceAsString(arcir.ref.Append("default_iam_role_arn"))
}

// IamRoleArns returns a reference to field iam_role_arns of aws_redshift_cluster_iam_roles.
func (arcir awsRedshiftClusterIamRolesAttributes) IamRoleArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arcir.ref.Append("iam_role_arns"))
}

// Id returns a reference to field id of aws_redshift_cluster_iam_roles.
func (arcir awsRedshiftClusterIamRolesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arcir.ref.Append("id"))
}

func (arcir awsRedshiftClusterIamRolesAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arcir.ref.Append("timeouts"))
}

type awsRedshiftClusterIamRolesState struct {
	ClusterIdentifier string         `json:"cluster_identifier"`
	DefaultIamRoleArn string         `json:"default_iam_role_arn"`
	IamRoleArns       []string       `json:"iam_role_arns"`
	Id                string         `json:"id"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
