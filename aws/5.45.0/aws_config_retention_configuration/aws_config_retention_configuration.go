// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_config_retention_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_config_retention_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConfigRetentionConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acrc *Resource) Type() string {
	return "aws_config_retention_configuration"
}

// LocalName returns the local name for [Resource].
func (acrc *Resource) LocalName() string {
	return acrc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acrc *Resource) Configuration() interface{} {
	return acrc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acrc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acrc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acrc *Resource) Dependencies() terra.Dependencies {
	return acrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acrc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acrc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acrc *Resource) Attributes() awsConfigRetentionConfigurationAttributes {
	return awsConfigRetentionConfigurationAttributes{ref: terra.ReferenceResource(acrc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acrc *Resource) ImportState(state io.Reader) error {
	acrc.state = &awsConfigRetentionConfigurationState{}
	if err := json.NewDecoder(state).Decode(acrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acrc.Type(), acrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acrc *Resource) State() (*awsConfigRetentionConfigurationState, bool) {
	return acrc.state, acrc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acrc *Resource) StateMust() *awsConfigRetentionConfigurationState {
	if acrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acrc.Type(), acrc.LocalName()))
	}
	return acrc.state
}

// Args contains the configurations for aws_config_retention_configuration.
type Args struct {
	// RetentionPeriodInDays: number, required
	RetentionPeriodInDays terra.NumberValue `hcl:"retention_period_in_days,attr" validate:"required"`
}

type awsConfigRetentionConfigurationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_config_retention_configuration.
func (acrc awsConfigRetentionConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acrc.ref.Append("id"))
}

// Name returns a reference to field name of aws_config_retention_configuration.
func (acrc awsConfigRetentionConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acrc.ref.Append("name"))
}

// RetentionPeriodInDays returns a reference to field retention_period_in_days of aws_config_retention_configuration.
func (acrc awsConfigRetentionConfigurationAttributes) RetentionPeriodInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(acrc.ref.Append("retention_period_in_days"))
}

type awsConfigRetentionConfigurationState struct {
	Id                    string  `json:"id"`
	Name                  string  `json:"name"`
	RetentionPeriodInDays float64 `json:"retention_period_in_days"`
}
