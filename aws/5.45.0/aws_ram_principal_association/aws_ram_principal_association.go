// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ram_principal_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ram_principal_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRamPrincipalAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arpa *Resource) Type() string {
	return "aws_ram_principal_association"
}

// LocalName returns the local name for [Resource].
func (arpa *Resource) LocalName() string {
	return arpa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arpa *Resource) Configuration() interface{} {
	return arpa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arpa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arpa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arpa *Resource) Dependencies() terra.Dependencies {
	return arpa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arpa *Resource) LifecycleManagement() *terra.Lifecycle {
	return arpa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arpa *Resource) Attributes() awsRamPrincipalAssociationAttributes {
	return awsRamPrincipalAssociationAttributes{ref: terra.ReferenceResource(arpa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arpa *Resource) ImportState(state io.Reader) error {
	arpa.state = &awsRamPrincipalAssociationState{}
	if err := json.NewDecoder(state).Decode(arpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arpa.Type(), arpa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arpa *Resource) State() (*awsRamPrincipalAssociationState, bool) {
	return arpa.state, arpa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arpa *Resource) StateMust() *awsRamPrincipalAssociationState {
	if arpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arpa.Type(), arpa.LocalName()))
	}
	return arpa.state
}

// Args contains the configurations for aws_ram_principal_association.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
	// ResourceShareArn: string, required
	ResourceShareArn terra.StringValue `hcl:"resource_share_arn,attr" validate:"required"`
}

type awsRamPrincipalAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ram_principal_association.
func (arpa awsRamPrincipalAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arpa.ref.Append("id"))
}

// Principal returns a reference to field principal of aws_ram_principal_association.
func (arpa awsRamPrincipalAssociationAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(arpa.ref.Append("principal"))
}

// ResourceShareArn returns a reference to field resource_share_arn of aws_ram_principal_association.
func (arpa awsRamPrincipalAssociationAttributes) ResourceShareArn() terra.StringValue {
	return terra.ReferenceAsString(arpa.ref.Append("resource_share_arn"))
}

type awsRamPrincipalAssociationState struct {
	Id               string `json:"id"`
	Principal        string `json:"principal"`
	ResourceShareArn string `json:"resource_share_arn"`
}
