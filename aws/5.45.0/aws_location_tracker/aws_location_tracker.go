// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_location_tracker

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_location_tracker.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLocationTrackerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alt *Resource) Type() string {
	return "aws_location_tracker"
}

// LocalName returns the local name for [Resource].
func (alt *Resource) LocalName() string {
	return alt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alt *Resource) Configuration() interface{} {
	return alt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alt *Resource) Dependencies() terra.Dependencies {
	return alt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alt *Resource) LifecycleManagement() *terra.Lifecycle {
	return alt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alt *Resource) Attributes() awsLocationTrackerAttributes {
	return awsLocationTrackerAttributes{ref: terra.ReferenceResource(alt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alt *Resource) ImportState(state io.Reader) error {
	alt.state = &awsLocationTrackerState{}
	if err := json.NewDecoder(state).Decode(alt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alt.Type(), alt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alt *Resource) State() (*awsLocationTrackerState, bool) {
	return alt.state, alt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alt *Resource) StateMust() *awsLocationTrackerState {
	if alt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alt.Type(), alt.LocalName()))
	}
	return alt.state
}

// Args contains the configurations for aws_location_tracker.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// PositionFiltering: string, optional
	PositionFiltering terra.StringValue `hcl:"position_filtering,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TrackerName: string, required
	TrackerName terra.StringValue `hcl:"tracker_name,attr" validate:"required"`
}

type awsLocationTrackerAttributes struct {
	ref terra.Reference
}

// CreateTime returns a reference to field create_time of aws_location_tracker.
func (alt awsLocationTrackerAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(alt.ref.Append("create_time"))
}

// Description returns a reference to field description of aws_location_tracker.
func (alt awsLocationTrackerAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(alt.ref.Append("description"))
}

// Id returns a reference to field id of aws_location_tracker.
func (alt awsLocationTrackerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alt.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_location_tracker.
func (alt awsLocationTrackerAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(alt.ref.Append("kms_key_id"))
}

// PositionFiltering returns a reference to field position_filtering of aws_location_tracker.
func (alt awsLocationTrackerAttributes) PositionFiltering() terra.StringValue {
	return terra.ReferenceAsString(alt.ref.Append("position_filtering"))
}

// Tags returns a reference to field tags of aws_location_tracker.
func (alt awsLocationTrackerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_location_tracker.
func (alt awsLocationTrackerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alt.ref.Append("tags_all"))
}

// TrackerArn returns a reference to field tracker_arn of aws_location_tracker.
func (alt awsLocationTrackerAttributes) TrackerArn() terra.StringValue {
	return terra.ReferenceAsString(alt.ref.Append("tracker_arn"))
}

// TrackerName returns a reference to field tracker_name of aws_location_tracker.
func (alt awsLocationTrackerAttributes) TrackerName() terra.StringValue {
	return terra.ReferenceAsString(alt.ref.Append("tracker_name"))
}

// UpdateTime returns a reference to field update_time of aws_location_tracker.
func (alt awsLocationTrackerAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(alt.ref.Append("update_time"))
}

type awsLocationTrackerState struct {
	CreateTime        string            `json:"create_time"`
	Description       string            `json:"description"`
	Id                string            `json:"id"`
	KmsKeyId          string            `json:"kms_key_id"`
	PositionFiltering string            `json:"position_filtering"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
	TrackerArn        string            `json:"tracker_arn"`
	TrackerName       string            `json:"tracker_name"`
	UpdateTime        string            `json:"update_time"`
}
