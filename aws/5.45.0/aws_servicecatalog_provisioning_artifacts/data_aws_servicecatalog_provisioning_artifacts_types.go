// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_provisioning_artifacts

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataProvisioningArtifactDetailsAttributes struct {
	ref terra.Reference
}

func (pad DataProvisioningArtifactDetailsAttributes) InternalRef() (terra.Reference, error) {
	return pad.ref, nil
}

func (pad DataProvisioningArtifactDetailsAttributes) InternalWithRef(ref terra.Reference) DataProvisioningArtifactDetailsAttributes {
	return DataProvisioningArtifactDetailsAttributes{ref: ref}
}

func (pad DataProvisioningArtifactDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pad.ref.InternalTokens()
}

func (pad DataProvisioningArtifactDetailsAttributes) Active() terra.BoolValue {
	return terra.ReferenceAsBool(pad.ref.Append("active"))
}

func (pad DataProvisioningArtifactDetailsAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(pad.ref.Append("created_time"))
}

func (pad DataProvisioningArtifactDetailsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(pad.ref.Append("description"))
}

func (pad DataProvisioningArtifactDetailsAttributes) Guidance() terra.StringValue {
	return terra.ReferenceAsString(pad.ref.Append("guidance"))
}

func (pad DataProvisioningArtifactDetailsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pad.ref.Append("id"))
}

func (pad DataProvisioningArtifactDetailsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pad.ref.Append("name"))
}

func (pad DataProvisioningArtifactDetailsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pad.ref.Append("type"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataProvisioningArtifactDetailsState struct {
	Active      bool   `json:"active"`
	CreatedTime string `json:"created_time"`
	Description string `json:"description"`
	Guidance    string `json:"guidance"`
	Id          string `json:"id"`
	Name        string `json:"name"`
	Type        string `json:"type"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
