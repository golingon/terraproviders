// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_dhcp_options

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpc_dhcp_options.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpcDhcpOptionsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avdo *Resource) Type() string {
	return "aws_vpc_dhcp_options"
}

// LocalName returns the local name for [Resource].
func (avdo *Resource) LocalName() string {
	return avdo.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avdo *Resource) Configuration() interface{} {
	return avdo.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avdo *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avdo)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avdo *Resource) Dependencies() terra.Dependencies {
	return avdo.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avdo *Resource) LifecycleManagement() *terra.Lifecycle {
	return avdo.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avdo *Resource) Attributes() awsVpcDhcpOptionsAttributes {
	return awsVpcDhcpOptionsAttributes{ref: terra.ReferenceResource(avdo)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avdo *Resource) ImportState(state io.Reader) error {
	avdo.state = &awsVpcDhcpOptionsState{}
	if err := json.NewDecoder(state).Decode(avdo.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avdo.Type(), avdo.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avdo *Resource) State() (*awsVpcDhcpOptionsState, bool) {
	return avdo.state, avdo.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avdo *Resource) StateMust() *awsVpcDhcpOptionsState {
	if avdo.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avdo.Type(), avdo.LocalName()))
	}
	return avdo.state
}

// Args contains the configurations for aws_vpc_dhcp_options.
type Args struct {
	// DomainName: string, optional
	DomainName terra.StringValue `hcl:"domain_name,attr"`
	// DomainNameServers: list of string, optional
	DomainNameServers terra.ListValue[terra.StringValue] `hcl:"domain_name_servers,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetbiosNameServers: list of string, optional
	NetbiosNameServers terra.ListValue[terra.StringValue] `hcl:"netbios_name_servers,attr"`
	// NetbiosNodeType: string, optional
	NetbiosNodeType terra.StringValue `hcl:"netbios_node_type,attr"`
	// NtpServers: list of string, optional
	NtpServers terra.ListValue[terra.StringValue] `hcl:"ntp_servers,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsVpcDhcpOptionsAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpc_dhcp_options.
func (avdo awsVpcDhcpOptionsAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(avdo.ref.Append("arn"))
}

// DomainName returns a reference to field domain_name of aws_vpc_dhcp_options.
func (avdo awsVpcDhcpOptionsAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(avdo.ref.Append("domain_name"))
}

// DomainNameServers returns a reference to field domain_name_servers of aws_vpc_dhcp_options.
func (avdo awsVpcDhcpOptionsAttributes) DomainNameServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](avdo.ref.Append("domain_name_servers"))
}

// Id returns a reference to field id of aws_vpc_dhcp_options.
func (avdo awsVpcDhcpOptionsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avdo.ref.Append("id"))
}

// NetbiosNameServers returns a reference to field netbios_name_servers of aws_vpc_dhcp_options.
func (avdo awsVpcDhcpOptionsAttributes) NetbiosNameServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](avdo.ref.Append("netbios_name_servers"))
}

// NetbiosNodeType returns a reference to field netbios_node_type of aws_vpc_dhcp_options.
func (avdo awsVpcDhcpOptionsAttributes) NetbiosNodeType() terra.StringValue {
	return terra.ReferenceAsString(avdo.ref.Append("netbios_node_type"))
}

// NtpServers returns a reference to field ntp_servers of aws_vpc_dhcp_options.
func (avdo awsVpcDhcpOptionsAttributes) NtpServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](avdo.ref.Append("ntp_servers"))
}

// OwnerId returns a reference to field owner_id of aws_vpc_dhcp_options.
func (avdo awsVpcDhcpOptionsAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(avdo.ref.Append("owner_id"))
}

// Tags returns a reference to field tags of aws_vpc_dhcp_options.
func (avdo awsVpcDhcpOptionsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avdo.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpc_dhcp_options.
func (avdo awsVpcDhcpOptionsAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avdo.ref.Append("tags_all"))
}

type awsVpcDhcpOptionsState struct {
	Arn                string            `json:"arn"`
	DomainName         string            `json:"domain_name"`
	DomainNameServers  []string          `json:"domain_name_servers"`
	Id                 string            `json:"id"`
	NetbiosNameServers []string          `json:"netbios_name_servers"`
	NetbiosNodeType    string            `json:"netbios_node_type"`
	NtpServers         []string          `json:"ntp_servers"`
	OwnerId            string            `json:"owner_id"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
}
