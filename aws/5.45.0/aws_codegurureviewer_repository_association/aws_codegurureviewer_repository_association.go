// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codegurureviewer_repository_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codegurureviewer_repository_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodegurureviewerRepositoryAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acra *Resource) Type() string {
	return "aws_codegurureviewer_repository_association"
}

// LocalName returns the local name for [Resource].
func (acra *Resource) LocalName() string {
	return acra.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acra *Resource) Configuration() interface{} {
	return acra.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acra *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acra)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acra *Resource) Dependencies() terra.Dependencies {
	return acra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acra *Resource) LifecycleManagement() *terra.Lifecycle {
	return acra.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acra *Resource) Attributes() awsCodegurureviewerRepositoryAssociationAttributes {
	return awsCodegurureviewerRepositoryAssociationAttributes{ref: terra.ReferenceResource(acra)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acra *Resource) ImportState(state io.Reader) error {
	acra.state = &awsCodegurureviewerRepositoryAssociationState{}
	if err := json.NewDecoder(state).Decode(acra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acra.Type(), acra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acra *Resource) State() (*awsCodegurureviewerRepositoryAssociationState, bool) {
	return acra.state, acra.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acra *Resource) StateMust() *awsCodegurureviewerRepositoryAssociationState {
	if acra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acra.Type(), acra.LocalName()))
	}
	return acra.state
}

// Args contains the configurations for aws_codegurureviewer_repository_association.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// KmsKeyDetails: optional
	KmsKeyDetails *KmsKeyDetails `hcl:"kms_key_details,block"`
	// Repository: required
	Repository *Repository `hcl:"repository,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsCodegurureviewerRepositoryAssociationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_codegurureviewer_repository_association.
func (acra awsCodegurureviewerRepositoryAssociationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acra.ref.Append("arn"))
}

// AssociationId returns a reference to field association_id of aws_codegurureviewer_repository_association.
func (acra awsCodegurureviewerRepositoryAssociationAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceAsString(acra.ref.Append("association_id"))
}

// ConnectionArn returns a reference to field connection_arn of aws_codegurureviewer_repository_association.
func (acra awsCodegurureviewerRepositoryAssociationAttributes) ConnectionArn() terra.StringValue {
	return terra.ReferenceAsString(acra.ref.Append("connection_arn"))
}

// Id returns a reference to field id of aws_codegurureviewer_repository_association.
func (acra awsCodegurureviewerRepositoryAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acra.ref.Append("id"))
}

// Name returns a reference to field name of aws_codegurureviewer_repository_association.
func (acra awsCodegurureviewerRepositoryAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acra.ref.Append("name"))
}

// Owner returns a reference to field owner of aws_codegurureviewer_repository_association.
func (acra awsCodegurureviewerRepositoryAssociationAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(acra.ref.Append("owner"))
}

// ProviderType returns a reference to field provider_type of aws_codegurureviewer_repository_association.
func (acra awsCodegurureviewerRepositoryAssociationAttributes) ProviderType() terra.StringValue {
	return terra.ReferenceAsString(acra.ref.Append("provider_type"))
}

// State returns a reference to field state of aws_codegurureviewer_repository_association.
func (acra awsCodegurureviewerRepositoryAssociationAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(acra.ref.Append("state"))
}

// StateReason returns a reference to field state_reason of aws_codegurureviewer_repository_association.
func (acra awsCodegurureviewerRepositoryAssociationAttributes) StateReason() terra.StringValue {
	return terra.ReferenceAsString(acra.ref.Append("state_reason"))
}

// Tags returns a reference to field tags of aws_codegurureviewer_repository_association.
func (acra awsCodegurureviewerRepositoryAssociationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acra.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_codegurureviewer_repository_association.
func (acra awsCodegurureviewerRepositoryAssociationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acra.ref.Append("tags_all"))
}

func (acra awsCodegurureviewerRepositoryAssociationAttributes) S3RepositoryDetails() terra.ListValue[S3RepositoryDetailsAttributes] {
	return terra.ReferenceAsList[S3RepositoryDetailsAttributes](acra.ref.Append("s3_repository_details"))
}

func (acra awsCodegurureviewerRepositoryAssociationAttributes) KmsKeyDetails() terra.ListValue[KmsKeyDetailsAttributes] {
	return terra.ReferenceAsList[KmsKeyDetailsAttributes](acra.ref.Append("kms_key_details"))
}

func (acra awsCodegurureviewerRepositoryAssociationAttributes) Repository() terra.ListValue[RepositoryAttributes] {
	return terra.ReferenceAsList[RepositoryAttributes](acra.ref.Append("repository"))
}

func (acra awsCodegurureviewerRepositoryAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acra.ref.Append("timeouts"))
}

type awsCodegurureviewerRepositoryAssociationState struct {
	Arn                 string                     `json:"arn"`
	AssociationId       string                     `json:"association_id"`
	ConnectionArn       string                     `json:"connection_arn"`
	Id                  string                     `json:"id"`
	Name                string                     `json:"name"`
	Owner               string                     `json:"owner"`
	ProviderType        string                     `json:"provider_type"`
	State               string                     `json:"state"`
	StateReason         string                     `json:"state_reason"`
	Tags                map[string]string          `json:"tags"`
	TagsAll             map[string]string          `json:"tags_all"`
	S3RepositoryDetails []S3RepositoryDetailsState `json:"s3_repository_details"`
	KmsKeyDetails       []KmsKeyDetailsState       `json:"kms_key_details"`
	Repository          []RepositoryState          `json:"repository"`
	Timeouts            *TimeoutsState             `json:"timeouts"`
}
