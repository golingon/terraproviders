// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codegurureviewer_repository_association

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type KmsKeyDetails struct {
	// EncryptionOption: string, optional
	EncryptionOption terra.StringValue `hcl:"encryption_option,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
}

type Repository struct {
	// RepositoryBitbucket: optional
	Bitbucket *RepositoryBitbucket `hcl:"bitbucket,block"`
	// RepositoryCodecommit: optional
	Codecommit *RepositoryCodecommit `hcl:"codecommit,block"`
	// RepositoryGithubEnterpriseServer: optional
	GithubEnterpriseServer *RepositoryGithubEnterpriseServer `hcl:"github_enterprise_server,block"`
	// RepositoryS3Bucket: optional
	S3Bucket *RepositoryS3Bucket `hcl:"s3_bucket,block"`
}

type RepositoryBitbucket struct {
	// ConnectionArn: string, required
	ConnectionArn terra.StringValue `hcl:"connection_arn,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Owner: string, required
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
}

type RepositoryCodecommit struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type RepositoryGithubEnterpriseServer struct {
	// ConnectionArn: string, required
	ConnectionArn terra.StringValue `hcl:"connection_arn,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Owner: string, required
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
}

type RepositoryS3Bucket struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type S3RepositoryDetailsAttributes struct {
	ref terra.Reference
}

func (srd S3RepositoryDetailsAttributes) InternalRef() (terra.Reference, error) {
	return srd.ref, nil
}

func (srd S3RepositoryDetailsAttributes) InternalWithRef(ref terra.Reference) S3RepositoryDetailsAttributes {
	return S3RepositoryDetailsAttributes{ref: ref}
}

func (srd S3RepositoryDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return srd.ref.InternalTokens()
}

func (srd S3RepositoryDetailsAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(srd.ref.Append("bucket_name"))
}

func (srd S3RepositoryDetailsAttributes) CodeArtifacts() terra.ListValue[S3RepositoryDetailsCodeArtifactsAttributes] {
	return terra.ReferenceAsList[S3RepositoryDetailsCodeArtifactsAttributes](srd.ref.Append("code_artifacts"))
}

type S3RepositoryDetailsCodeArtifactsAttributes struct {
	ref terra.Reference
}

func (ca S3RepositoryDetailsCodeArtifactsAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca S3RepositoryDetailsCodeArtifactsAttributes) InternalWithRef(ref terra.Reference) S3RepositoryDetailsCodeArtifactsAttributes {
	return S3RepositoryDetailsCodeArtifactsAttributes{ref: ref}
}

func (ca S3RepositoryDetailsCodeArtifactsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca S3RepositoryDetailsCodeArtifactsAttributes) BuildArtifactsObjectKey() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("build_artifacts_object_key"))
}

func (ca S3RepositoryDetailsCodeArtifactsAttributes) SourceCodeArtifactsObjectKey() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("source_code_artifacts_object_key"))
}

type KmsKeyDetailsAttributes struct {
	ref terra.Reference
}

func (kkd KmsKeyDetailsAttributes) InternalRef() (terra.Reference, error) {
	return kkd.ref, nil
}

func (kkd KmsKeyDetailsAttributes) InternalWithRef(ref terra.Reference) KmsKeyDetailsAttributes {
	return KmsKeyDetailsAttributes{ref: ref}
}

func (kkd KmsKeyDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kkd.ref.InternalTokens()
}

func (kkd KmsKeyDetailsAttributes) EncryptionOption() terra.StringValue {
	return terra.ReferenceAsString(kkd.ref.Append("encryption_option"))
}

func (kkd KmsKeyDetailsAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(kkd.ref.Append("kms_key_id"))
}

type RepositoryAttributes struct {
	ref terra.Reference
}

func (r RepositoryAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RepositoryAttributes) InternalWithRef(ref terra.Reference) RepositoryAttributes {
	return RepositoryAttributes{ref: ref}
}

func (r RepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RepositoryAttributes) Bitbucket() terra.ListValue[RepositoryBitbucketAttributes] {
	return terra.ReferenceAsList[RepositoryBitbucketAttributes](r.ref.Append("bitbucket"))
}

func (r RepositoryAttributes) Codecommit() terra.ListValue[RepositoryCodecommitAttributes] {
	return terra.ReferenceAsList[RepositoryCodecommitAttributes](r.ref.Append("codecommit"))
}

func (r RepositoryAttributes) GithubEnterpriseServer() terra.ListValue[RepositoryGithubEnterpriseServerAttributes] {
	return terra.ReferenceAsList[RepositoryGithubEnterpriseServerAttributes](r.ref.Append("github_enterprise_server"))
}

func (r RepositoryAttributes) S3Bucket() terra.ListValue[RepositoryS3BucketAttributes] {
	return terra.ReferenceAsList[RepositoryS3BucketAttributes](r.ref.Append("s3_bucket"))
}

type RepositoryBitbucketAttributes struct {
	ref terra.Reference
}

func (b RepositoryBitbucketAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b RepositoryBitbucketAttributes) InternalWithRef(ref terra.Reference) RepositoryBitbucketAttributes {
	return RepositoryBitbucketAttributes{ref: ref}
}

func (b RepositoryBitbucketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b RepositoryBitbucketAttributes) ConnectionArn() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("connection_arn"))
}

func (b RepositoryBitbucketAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("name"))
}

func (b RepositoryBitbucketAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("owner"))
}

type RepositoryCodecommitAttributes struct {
	ref terra.Reference
}

func (c RepositoryCodecommitAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c RepositoryCodecommitAttributes) InternalWithRef(ref terra.Reference) RepositoryCodecommitAttributes {
	return RepositoryCodecommitAttributes{ref: ref}
}

func (c RepositoryCodecommitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c RepositoryCodecommitAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

type RepositoryGithubEnterpriseServerAttributes struct {
	ref terra.Reference
}

func (ges RepositoryGithubEnterpriseServerAttributes) InternalRef() (terra.Reference, error) {
	return ges.ref, nil
}

func (ges RepositoryGithubEnterpriseServerAttributes) InternalWithRef(ref terra.Reference) RepositoryGithubEnterpriseServerAttributes {
	return RepositoryGithubEnterpriseServerAttributes{ref: ref}
}

func (ges RepositoryGithubEnterpriseServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ges.ref.InternalTokens()
}

func (ges RepositoryGithubEnterpriseServerAttributes) ConnectionArn() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("connection_arn"))
}

func (ges RepositoryGithubEnterpriseServerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("name"))
}

func (ges RepositoryGithubEnterpriseServerAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("owner"))
}

type RepositoryS3BucketAttributes struct {
	ref terra.Reference
}

func (sb RepositoryS3BucketAttributes) InternalRef() (terra.Reference, error) {
	return sb.ref, nil
}

func (sb RepositoryS3BucketAttributes) InternalWithRef(ref terra.Reference) RepositoryS3BucketAttributes {
	return RepositoryS3BucketAttributes{ref: ref}
}

func (sb RepositoryS3BucketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sb.ref.InternalTokens()
}

func (sb RepositoryS3BucketAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("bucket_name"))
}

func (sb RepositoryS3BucketAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type S3RepositoryDetailsState struct {
	BucketName    string                                  `json:"bucket_name"`
	CodeArtifacts []S3RepositoryDetailsCodeArtifactsState `json:"code_artifacts"`
}

type S3RepositoryDetailsCodeArtifactsState struct {
	BuildArtifactsObjectKey      string `json:"build_artifacts_object_key"`
	SourceCodeArtifactsObjectKey string `json:"source_code_artifacts_object_key"`
}

type KmsKeyDetailsState struct {
	EncryptionOption string `json:"encryption_option"`
	KmsKeyId         string `json:"kms_key_id"`
}

type RepositoryState struct {
	Bitbucket              []RepositoryBitbucketState              `json:"bitbucket"`
	Codecommit             []RepositoryCodecommitState             `json:"codecommit"`
	GithubEnterpriseServer []RepositoryGithubEnterpriseServerState `json:"github_enterprise_server"`
	S3Bucket               []RepositoryS3BucketState               `json:"s3_bucket"`
}

type RepositoryBitbucketState struct {
	ConnectionArn string `json:"connection_arn"`
	Name          string `json:"name"`
	Owner         string `json:"owner"`
}

type RepositoryCodecommitState struct {
	Name string `json:"name"`
}

type RepositoryGithubEnterpriseServerState struct {
	ConnectionArn string `json:"connection_arn"`
	Name          string `json:"name"`
	Owner         string `json:"owner"`
}

type RepositoryS3BucketState struct {
	BucketName string `json:"bucket_name"`
	Name       string `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
