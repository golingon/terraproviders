// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshift_hsm_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_redshift_hsm_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRedshiftHsmConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arhc *Resource) Type() string {
	return "aws_redshift_hsm_configuration"
}

// LocalName returns the local name for [Resource].
func (arhc *Resource) LocalName() string {
	return arhc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arhc *Resource) Configuration() interface{} {
	return arhc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arhc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arhc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arhc *Resource) Dependencies() terra.Dependencies {
	return arhc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arhc *Resource) LifecycleManagement() *terra.Lifecycle {
	return arhc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arhc *Resource) Attributes() awsRedshiftHsmConfigurationAttributes {
	return awsRedshiftHsmConfigurationAttributes{ref: terra.ReferenceResource(arhc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arhc *Resource) ImportState(state io.Reader) error {
	arhc.state = &awsRedshiftHsmConfigurationState{}
	if err := json.NewDecoder(state).Decode(arhc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arhc.Type(), arhc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arhc *Resource) State() (*awsRedshiftHsmConfigurationState, bool) {
	return arhc.state, arhc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arhc *Resource) StateMust() *awsRedshiftHsmConfigurationState {
	if arhc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arhc.Type(), arhc.LocalName()))
	}
	return arhc.state
}

// Args contains the configurations for aws_redshift_hsm_configuration.
type Args struct {
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// HsmConfigurationIdentifier: string, required
	HsmConfigurationIdentifier terra.StringValue `hcl:"hsm_configuration_identifier,attr" validate:"required"`
	// HsmIpAddress: string, required
	HsmIpAddress terra.StringValue `hcl:"hsm_ip_address,attr" validate:"required"`
	// HsmPartitionName: string, required
	HsmPartitionName terra.StringValue `hcl:"hsm_partition_name,attr" validate:"required"`
	// HsmPartitionPassword: string, required
	HsmPartitionPassword terra.StringValue `hcl:"hsm_partition_password,attr" validate:"required"`
	// HsmServerPublicCertificate: string, required
	HsmServerPublicCertificate terra.StringValue `hcl:"hsm_server_public_certificate,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsRedshiftHsmConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_redshift_hsm_configuration.
func (arhc awsRedshiftHsmConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arhc.ref.Append("arn"))
}

// Description returns a reference to field description of aws_redshift_hsm_configuration.
func (arhc awsRedshiftHsmConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(arhc.ref.Append("description"))
}

// HsmConfigurationIdentifier returns a reference to field hsm_configuration_identifier of aws_redshift_hsm_configuration.
func (arhc awsRedshiftHsmConfigurationAttributes) HsmConfigurationIdentifier() terra.StringValue {
	return terra.ReferenceAsString(arhc.ref.Append("hsm_configuration_identifier"))
}

// HsmIpAddress returns a reference to field hsm_ip_address of aws_redshift_hsm_configuration.
func (arhc awsRedshiftHsmConfigurationAttributes) HsmIpAddress() terra.StringValue {
	return terra.ReferenceAsString(arhc.ref.Append("hsm_ip_address"))
}

// HsmPartitionName returns a reference to field hsm_partition_name of aws_redshift_hsm_configuration.
func (arhc awsRedshiftHsmConfigurationAttributes) HsmPartitionName() terra.StringValue {
	return terra.ReferenceAsString(arhc.ref.Append("hsm_partition_name"))
}

// HsmPartitionPassword returns a reference to field hsm_partition_password of aws_redshift_hsm_configuration.
func (arhc awsRedshiftHsmConfigurationAttributes) HsmPartitionPassword() terra.StringValue {
	return terra.ReferenceAsString(arhc.ref.Append("hsm_partition_password"))
}

// HsmServerPublicCertificate returns a reference to field hsm_server_public_certificate of aws_redshift_hsm_configuration.
func (arhc awsRedshiftHsmConfigurationAttributes) HsmServerPublicCertificate() terra.StringValue {
	return terra.ReferenceAsString(arhc.ref.Append("hsm_server_public_certificate"))
}

// Id returns a reference to field id of aws_redshift_hsm_configuration.
func (arhc awsRedshiftHsmConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arhc.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_redshift_hsm_configuration.
func (arhc awsRedshiftHsmConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arhc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_redshift_hsm_configuration.
func (arhc awsRedshiftHsmConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arhc.ref.Append("tags_all"))
}

type awsRedshiftHsmConfigurationState struct {
	Arn                        string            `json:"arn"`
	Description                string            `json:"description"`
	HsmConfigurationIdentifier string            `json:"hsm_configuration_identifier"`
	HsmIpAddress               string            `json:"hsm_ip_address"`
	HsmPartitionName           string            `json:"hsm_partition_name"`
	HsmPartitionPassword       string            `json:"hsm_partition_password"`
	HsmServerPublicCertificate string            `json:"hsm_server_public_certificate"`
	Id                         string            `json:"id"`
	Tags                       map[string]string `json:"tags"`
	TagsAll                    map[string]string `json:"tags_all"`
}
