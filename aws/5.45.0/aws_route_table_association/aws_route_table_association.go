// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route_table_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route_table_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRouteTableAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arta *Resource) Type() string {
	return "aws_route_table_association"
}

// LocalName returns the local name for [Resource].
func (arta *Resource) LocalName() string {
	return arta.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arta *Resource) Configuration() interface{} {
	return arta.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arta *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arta)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arta *Resource) Dependencies() terra.Dependencies {
	return arta.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arta *Resource) LifecycleManagement() *terra.Lifecycle {
	return arta.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arta *Resource) Attributes() awsRouteTableAssociationAttributes {
	return awsRouteTableAssociationAttributes{ref: terra.ReferenceResource(arta)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arta *Resource) ImportState(state io.Reader) error {
	arta.state = &awsRouteTableAssociationState{}
	if err := json.NewDecoder(state).Decode(arta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arta.Type(), arta.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arta *Resource) State() (*awsRouteTableAssociationState, bool) {
	return arta.state, arta.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arta *Resource) StateMust() *awsRouteTableAssociationState {
	if arta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arta.Type(), arta.LocalName()))
	}
	return arta.state
}

// Args contains the configurations for aws_route_table_association.
type Args struct {
	// GatewayId: string, optional
	GatewayId terra.StringValue `hcl:"gateway_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RouteTableId: string, required
	RouteTableId terra.StringValue `hcl:"route_table_id,attr" validate:"required"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRouteTableAssociationAttributes struct {
	ref terra.Reference
}

// GatewayId returns a reference to field gateway_id of aws_route_table_association.
func (arta awsRouteTableAssociationAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceAsString(arta.ref.Append("gateway_id"))
}

// Id returns a reference to field id of aws_route_table_association.
func (arta awsRouteTableAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arta.ref.Append("id"))
}

// RouteTableId returns a reference to field route_table_id of aws_route_table_association.
func (arta awsRouteTableAssociationAttributes) RouteTableId() terra.StringValue {
	return terra.ReferenceAsString(arta.ref.Append("route_table_id"))
}

// SubnetId returns a reference to field subnet_id of aws_route_table_association.
func (arta awsRouteTableAssociationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(arta.ref.Append("subnet_id"))
}

func (arta awsRouteTableAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arta.ref.Append("timeouts"))
}

type awsRouteTableAssociationState struct {
	GatewayId    string         `json:"gateway_id"`
	Id           string         `json:"id"`
	RouteTableId string         `json:"route_table_id"`
	SubnetId     string         `json:"subnet_id"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
