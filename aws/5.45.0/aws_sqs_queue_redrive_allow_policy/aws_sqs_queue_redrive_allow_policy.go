// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sqs_queue_redrive_allow_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sqs_queue_redrive_allow_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSqsQueueRedriveAllowPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asqrap *Resource) Type() string {
	return "aws_sqs_queue_redrive_allow_policy"
}

// LocalName returns the local name for [Resource].
func (asqrap *Resource) LocalName() string {
	return asqrap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asqrap *Resource) Configuration() interface{} {
	return asqrap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asqrap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asqrap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asqrap *Resource) Dependencies() terra.Dependencies {
	return asqrap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asqrap *Resource) LifecycleManagement() *terra.Lifecycle {
	return asqrap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asqrap *Resource) Attributes() awsSqsQueueRedriveAllowPolicyAttributes {
	return awsSqsQueueRedriveAllowPolicyAttributes{ref: terra.ReferenceResource(asqrap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asqrap *Resource) ImportState(state io.Reader) error {
	asqrap.state = &awsSqsQueueRedriveAllowPolicyState{}
	if err := json.NewDecoder(state).Decode(asqrap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asqrap.Type(), asqrap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asqrap *Resource) State() (*awsSqsQueueRedriveAllowPolicyState, bool) {
	return asqrap.state, asqrap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asqrap *Resource) StateMust() *awsSqsQueueRedriveAllowPolicyState {
	if asqrap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asqrap.Type(), asqrap.LocalName()))
	}
	return asqrap.state
}

// Args contains the configurations for aws_sqs_queue_redrive_allow_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// QueueUrl: string, required
	QueueUrl terra.StringValue `hcl:"queue_url,attr" validate:"required"`
	// RedriveAllowPolicy: string, required
	RedriveAllowPolicy terra.StringValue `hcl:"redrive_allow_policy,attr" validate:"required"`
}

type awsSqsQueueRedriveAllowPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_sqs_queue_redrive_allow_policy.
func (asqrap awsSqsQueueRedriveAllowPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asqrap.ref.Append("id"))
}

// QueueUrl returns a reference to field queue_url of aws_sqs_queue_redrive_allow_policy.
func (asqrap awsSqsQueueRedriveAllowPolicyAttributes) QueueUrl() terra.StringValue {
	return terra.ReferenceAsString(asqrap.ref.Append("queue_url"))
}

// RedriveAllowPolicy returns a reference to field redrive_allow_policy of aws_sqs_queue_redrive_allow_policy.
func (asqrap awsSqsQueueRedriveAllowPolicyAttributes) RedriveAllowPolicy() terra.StringValue {
	return terra.ReferenceAsString(asqrap.ref.Append("redrive_allow_policy"))
}

type awsSqsQueueRedriveAllowPolicyState struct {
	Id                 string `json:"id"`
	QueueUrl           string `json:"queue_url"`
	RedriveAllowPolicy string `json:"redrive_allow_policy"`
}
