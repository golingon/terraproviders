// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_launch_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_launch_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLaunchConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alc *Resource) Type() string {
	return "aws_launch_configuration"
}

// LocalName returns the local name for [Resource].
func (alc *Resource) LocalName() string {
	return alc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alc *Resource) Configuration() interface{} {
	return alc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alc *Resource) Dependencies() terra.Dependencies {
	return alc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alc *Resource) LifecycleManagement() *terra.Lifecycle {
	return alc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alc *Resource) Attributes() awsLaunchConfigurationAttributes {
	return awsLaunchConfigurationAttributes{ref: terra.ReferenceResource(alc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alc *Resource) ImportState(state io.Reader) error {
	alc.state = &awsLaunchConfigurationState{}
	if err := json.NewDecoder(state).Decode(alc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alc.Type(), alc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alc *Resource) State() (*awsLaunchConfigurationState, bool) {
	return alc.state, alc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alc *Resource) StateMust() *awsLaunchConfigurationState {
	if alc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alc.Type(), alc.LocalName()))
	}
	return alc.state
}

// Args contains the configurations for aws_launch_configuration.
type Args struct {
	// AssociatePublicIpAddress: bool, optional
	AssociatePublicIpAddress terra.BoolValue `hcl:"associate_public_ip_address,attr"`
	// EbsOptimized: bool, optional
	EbsOptimized terra.BoolValue `hcl:"ebs_optimized,attr"`
	// EnableMonitoring: bool, optional
	EnableMonitoring terra.BoolValue `hcl:"enable_monitoring,attr"`
	// IamInstanceProfile: string, optional
	IamInstanceProfile terra.StringValue `hcl:"iam_instance_profile,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageId: string, required
	ImageId terra.StringValue `hcl:"image_id,attr" validate:"required"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// KeyName: string, optional
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// PlacementTenancy: string, optional
	PlacementTenancy terra.StringValue `hcl:"placement_tenancy,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// SpotPrice: string, optional
	SpotPrice terra.StringValue `hcl:"spot_price,attr"`
	// UserData: string, optional
	UserData terra.StringValue `hcl:"user_data,attr"`
	// UserDataBase64: string, optional
	UserDataBase64 terra.StringValue `hcl:"user_data_base64,attr"`
	// EbsBlockDevice: min=0
	EbsBlockDevice []EbsBlockDevice `hcl:"ebs_block_device,block" validate:"min=0"`
	// EphemeralBlockDevice: min=0
	EphemeralBlockDevice []EphemeralBlockDevice `hcl:"ephemeral_block_device,block" validate:"min=0"`
	// MetadataOptions: optional
	MetadataOptions *MetadataOptions `hcl:"metadata_options,block"`
	// RootBlockDevice: optional
	RootBlockDevice *RootBlockDevice `hcl:"root_block_device,block"`
}

type awsLaunchConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("arn"))
}

// AssociatePublicIpAddress returns a reference to field associate_public_ip_address of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) AssociatePublicIpAddress() terra.BoolValue {
	return terra.ReferenceAsBool(alc.ref.Append("associate_public_ip_address"))
}

// EbsOptimized returns a reference to field ebs_optimized of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) EbsOptimized() terra.BoolValue {
	return terra.ReferenceAsBool(alc.ref.Append("ebs_optimized"))
}

// EnableMonitoring returns a reference to field enable_monitoring of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) EnableMonitoring() terra.BoolValue {
	return terra.ReferenceAsBool(alc.ref.Append("enable_monitoring"))
}

// IamInstanceProfile returns a reference to field iam_instance_profile of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) IamInstanceProfile() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("iam_instance_profile"))
}

// Id returns a reference to field id of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("id"))
}

// ImageId returns a reference to field image_id of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) ImageId() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("image_id"))
}

// InstanceType returns a reference to field instance_type of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("instance_type"))
}

// KeyName returns a reference to field key_name of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("key_name"))
}

// Name returns a reference to field name of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("name_prefix"))
}

// PlacementTenancy returns a reference to field placement_tenancy of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) PlacementTenancy() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("placement_tenancy"))
}

// SecurityGroups returns a reference to field security_groups of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](alc.ref.Append("security_groups"))
}

// SpotPrice returns a reference to field spot_price of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) SpotPrice() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("spot_price"))
}

// UserData returns a reference to field user_data of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) UserData() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("user_data"))
}

// UserDataBase64 returns a reference to field user_data_base64 of aws_launch_configuration.
func (alc awsLaunchConfigurationAttributes) UserDataBase64() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("user_data_base64"))
}

func (alc awsLaunchConfigurationAttributes) EbsBlockDevice() terra.SetValue[EbsBlockDeviceAttributes] {
	return terra.ReferenceAsSet[EbsBlockDeviceAttributes](alc.ref.Append("ebs_block_device"))
}

func (alc awsLaunchConfigurationAttributes) EphemeralBlockDevice() terra.SetValue[EphemeralBlockDeviceAttributes] {
	return terra.ReferenceAsSet[EphemeralBlockDeviceAttributes](alc.ref.Append("ephemeral_block_device"))
}

func (alc awsLaunchConfigurationAttributes) MetadataOptions() terra.ListValue[MetadataOptionsAttributes] {
	return terra.ReferenceAsList[MetadataOptionsAttributes](alc.ref.Append("metadata_options"))
}

func (alc awsLaunchConfigurationAttributes) RootBlockDevice() terra.ListValue[RootBlockDeviceAttributes] {
	return terra.ReferenceAsList[RootBlockDeviceAttributes](alc.ref.Append("root_block_device"))
}

type awsLaunchConfigurationState struct {
	Arn                      string                      `json:"arn"`
	AssociatePublicIpAddress bool                        `json:"associate_public_ip_address"`
	EbsOptimized             bool                        `json:"ebs_optimized"`
	EnableMonitoring         bool                        `json:"enable_monitoring"`
	IamInstanceProfile       string                      `json:"iam_instance_profile"`
	Id                       string                      `json:"id"`
	ImageId                  string                      `json:"image_id"`
	InstanceType             string                      `json:"instance_type"`
	KeyName                  string                      `json:"key_name"`
	Name                     string                      `json:"name"`
	NamePrefix               string                      `json:"name_prefix"`
	PlacementTenancy         string                      `json:"placement_tenancy"`
	SecurityGroups           []string                    `json:"security_groups"`
	SpotPrice                string                      `json:"spot_price"`
	UserData                 string                      `json:"user_data"`
	UserDataBase64           string                      `json:"user_data_base64"`
	EbsBlockDevice           []EbsBlockDeviceState       `json:"ebs_block_device"`
	EphemeralBlockDevice     []EphemeralBlockDeviceState `json:"ephemeral_block_device"`
	MetadataOptions          []MetadataOptionsState      `json:"metadata_options"`
	RootBlockDevice          []RootBlockDeviceState      `json:"root_block_device"`
}
