// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appmesh_route

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Spec struct {
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// SpecGrpcRoute: optional
	GrpcRoute *SpecGrpcRoute `hcl:"grpc_route,block"`
	// SpecHttp2Route: optional
	Http2Route *SpecHttp2Route `hcl:"http2_route,block"`
	// SpecHttpRoute: optional
	HttpRoute *SpecHttpRoute `hcl:"http_route,block"`
	// SpecTcpRoute: optional
	TcpRoute *SpecTcpRoute `hcl:"tcp_route,block"`
}

type SpecGrpcRoute struct {
	// SpecGrpcRouteAction: required
	Action *SpecGrpcRouteAction `hcl:"action,block" validate:"required"`
	// SpecGrpcRouteMatch: optional
	Match *SpecGrpcRouteMatch `hcl:"match,block"`
	// SpecGrpcRouteRetryPolicy: optional
	RetryPolicy *SpecGrpcRouteRetryPolicy `hcl:"retry_policy,block"`
	// SpecGrpcRouteTimeout: optional
	Timeout *SpecGrpcRouteTimeout `hcl:"timeout,block"`
}

type SpecGrpcRouteAction struct {
	// SpecGrpcRouteActionWeightedTarget: min=1,max=10
	WeightedTarget []SpecGrpcRouteActionWeightedTarget `hcl:"weighted_target,block" validate:"min=1,max=10"`
}

type SpecGrpcRouteActionWeightedTarget struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// VirtualNode: string, required
	VirtualNode terra.StringValue `hcl:"virtual_node,attr" validate:"required"`
	// Weight: number, required
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
}

type SpecGrpcRouteMatch struct {
	// MethodName: string, optional
	MethodName terra.StringValue `hcl:"method_name,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// ServiceName: string, optional
	ServiceName terra.StringValue `hcl:"service_name,attr"`
	// SpecGrpcRouteMatchMetadata: min=0,max=10
	Metadata []SpecGrpcRouteMatchMetadata `hcl:"metadata,block" validate:"min=0,max=10"`
}

type SpecGrpcRouteMatchMetadata struct {
	// Invert: bool, optional
	Invert terra.BoolValue `hcl:"invert,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecGrpcRouteD86B2967: optional
	Match *SpecGrpcRouteD86B2967 `hcl:"match,block"`
}

type SpecGrpcRouteD86B2967 struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Regex: string, optional
	Regex terra.StringValue `hcl:"regex,attr"`
	// Suffix: string, optional
	Suffix terra.StringValue `hcl:"suffix,attr"`
	// SpecGrpcRoute8B0C9706: optional
	Range *SpecGrpcRoute8B0C9706 `hcl:"range,block"`
}

type SpecGrpcRoute8B0C9706 struct {
	// End: number, required
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Start: number, required
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type SpecGrpcRouteRetryPolicy struct {
	// GrpcRetryEvents: set of string, optional
	GrpcRetryEvents terra.SetValue[terra.StringValue] `hcl:"grpc_retry_events,attr"`
	// HttpRetryEvents: set of string, optional
	HttpRetryEvents terra.SetValue[terra.StringValue] `hcl:"http_retry_events,attr"`
	// MaxRetries: number, required
	MaxRetries terra.NumberValue `hcl:"max_retries,attr" validate:"required"`
	// TcpRetryEvents: set of string, optional
	TcpRetryEvents terra.SetValue[terra.StringValue] `hcl:"tcp_retry_events,attr"`
	// SpecGrpcRouteRetryPolicyPerRetryTimeout: required
	PerRetryTimeout *SpecGrpcRouteRetryPolicyPerRetryTimeout `hcl:"per_retry_timeout,block" validate:"required"`
}

type SpecGrpcRouteRetryPolicyPerRetryTimeout struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecGrpcRouteTimeout struct {
	// SpecGrpcRouteTimeoutIdle: optional
	Idle *SpecGrpcRouteTimeoutIdle `hcl:"idle,block"`
	// SpecGrpcRouteTimeoutPerRequest: optional
	PerRequest *SpecGrpcRouteTimeoutPerRequest `hcl:"per_request,block"`
}

type SpecGrpcRouteTimeoutIdle struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecGrpcRouteTimeoutPerRequest struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecHttp2Route struct {
	// SpecHttp2RouteAction: required
	Action *SpecHttp2RouteAction `hcl:"action,block" validate:"required"`
	// SpecHttp2RouteMatch: required
	Match *SpecHttp2RouteMatch `hcl:"match,block" validate:"required"`
	// SpecHttp2RouteRetryPolicy: optional
	RetryPolicy *SpecHttp2RouteRetryPolicy `hcl:"retry_policy,block"`
	// SpecHttp2RouteTimeout: optional
	Timeout *SpecHttp2RouteTimeout `hcl:"timeout,block"`
}

type SpecHttp2RouteAction struct {
	// SpecHttp2RouteActionWeightedTarget: min=1,max=10
	WeightedTarget []SpecHttp2RouteActionWeightedTarget `hcl:"weighted_target,block" validate:"min=1,max=10"`
}

type SpecHttp2RouteActionWeightedTarget struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// VirtualNode: string, required
	VirtualNode terra.StringValue `hcl:"virtual_node,attr" validate:"required"`
	// Weight: number, required
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
}

type SpecHttp2RouteMatch struct {
	// Method: string, optional
	Method terra.StringValue `hcl:"method,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Scheme: string, optional
	Scheme terra.StringValue `hcl:"scheme,attr"`
	// SpecHttp2RouteMatchHeader: min=0,max=10
	Header []SpecHttp2RouteMatchHeader `hcl:"header,block" validate:"min=0,max=10"`
	// SpecHttp2RouteMatchPath: optional
	Path *SpecHttp2RouteMatchPath `hcl:"path,block"`
	// SpecHttp2RouteMatchQueryParameter: min=0,max=10
	QueryParameter []SpecHttp2RouteMatchQueryParameter `hcl:"query_parameter,block" validate:"min=0,max=10"`
}

type SpecHttp2RouteMatchHeader struct {
	// Invert: bool, optional
	Invert terra.BoolValue `hcl:"invert,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttp2Route30Dd3523: optional
	Match *SpecHttp2Route30Dd3523 `hcl:"match,block"`
}

type SpecHttp2Route30Dd3523 struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Regex: string, optional
	Regex terra.StringValue `hcl:"regex,attr"`
	// Suffix: string, optional
	Suffix terra.StringValue `hcl:"suffix,attr"`
	// SpecHttp2Route31605981: optional
	Range *SpecHttp2Route31605981 `hcl:"range,block"`
}

type SpecHttp2Route31605981 struct {
	// End: number, required
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Start: number, required
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type SpecHttp2RouteMatchPath struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
	// Regex: string, optional
	Regex terra.StringValue `hcl:"regex,attr"`
}

type SpecHttp2RouteMatchQueryParameter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttp2RouteD36Dd47D: optional
	Match *SpecHttp2RouteD36Dd47D `hcl:"match,block"`
}

type SpecHttp2RouteD36Dd47D struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
}

type SpecHttp2RouteRetryPolicy struct {
	// HttpRetryEvents: set of string, optional
	HttpRetryEvents terra.SetValue[terra.StringValue] `hcl:"http_retry_events,attr"`
	// MaxRetries: number, required
	MaxRetries terra.NumberValue `hcl:"max_retries,attr" validate:"required"`
	// TcpRetryEvents: set of string, optional
	TcpRetryEvents terra.SetValue[terra.StringValue] `hcl:"tcp_retry_events,attr"`
	// SpecHttp2RouteRetryPolicyPerRetryTimeout: required
	PerRetryTimeout *SpecHttp2RouteRetryPolicyPerRetryTimeout `hcl:"per_retry_timeout,block" validate:"required"`
}

type SpecHttp2RouteRetryPolicyPerRetryTimeout struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecHttp2RouteTimeout struct {
	// SpecHttp2RouteTimeoutIdle: optional
	Idle *SpecHttp2RouteTimeoutIdle `hcl:"idle,block"`
	// SpecHttp2RouteTimeoutPerRequest: optional
	PerRequest *SpecHttp2RouteTimeoutPerRequest `hcl:"per_request,block"`
}

type SpecHttp2RouteTimeoutIdle struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecHttp2RouteTimeoutPerRequest struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecHttpRoute struct {
	// SpecHttpRouteAction: required
	Action *SpecHttpRouteAction `hcl:"action,block" validate:"required"`
	// SpecHttpRouteMatch: required
	Match *SpecHttpRouteMatch `hcl:"match,block" validate:"required"`
	// SpecHttpRouteRetryPolicy: optional
	RetryPolicy *SpecHttpRouteRetryPolicy `hcl:"retry_policy,block"`
	// SpecHttpRouteTimeout: optional
	Timeout *SpecHttpRouteTimeout `hcl:"timeout,block"`
}

type SpecHttpRouteAction struct {
	// SpecHttpRouteActionWeightedTarget: min=1,max=10
	WeightedTarget []SpecHttpRouteActionWeightedTarget `hcl:"weighted_target,block" validate:"min=1,max=10"`
}

type SpecHttpRouteActionWeightedTarget struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// VirtualNode: string, required
	VirtualNode terra.StringValue `hcl:"virtual_node,attr" validate:"required"`
	// Weight: number, required
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
}

type SpecHttpRouteMatch struct {
	// Method: string, optional
	Method terra.StringValue `hcl:"method,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Scheme: string, optional
	Scheme terra.StringValue `hcl:"scheme,attr"`
	// SpecHttpRouteMatchHeader: min=0,max=10
	Header []SpecHttpRouteMatchHeader `hcl:"header,block" validate:"min=0,max=10"`
	// SpecHttpRouteMatchPath: optional
	Path *SpecHttpRouteMatchPath `hcl:"path,block"`
	// SpecHttpRouteMatchQueryParameter: min=0,max=10
	QueryParameter []SpecHttpRouteMatchQueryParameter `hcl:"query_parameter,block" validate:"min=0,max=10"`
}

type SpecHttpRouteMatchHeader struct {
	// Invert: bool, optional
	Invert terra.BoolValue `hcl:"invert,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttpRoute30Dd3523: optional
	Match *SpecHttpRoute30Dd3523 `hcl:"match,block"`
}

type SpecHttpRoute30Dd3523 struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Regex: string, optional
	Regex terra.StringValue `hcl:"regex,attr"`
	// Suffix: string, optional
	Suffix terra.StringValue `hcl:"suffix,attr"`
	// SpecHttpRoute31605981: optional
	Range *SpecHttpRoute31605981 `hcl:"range,block"`
}

type SpecHttpRoute31605981 struct {
	// End: number, required
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Start: number, required
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type SpecHttpRouteMatchPath struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
	// Regex: string, optional
	Regex terra.StringValue `hcl:"regex,attr"`
}

type SpecHttpRouteMatchQueryParameter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttpRouteD36Dd47D: optional
	Match *SpecHttpRouteD36Dd47D `hcl:"match,block"`
}

type SpecHttpRouteD36Dd47D struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
}

type SpecHttpRouteRetryPolicy struct {
	// HttpRetryEvents: set of string, optional
	HttpRetryEvents terra.SetValue[terra.StringValue] `hcl:"http_retry_events,attr"`
	// MaxRetries: number, required
	MaxRetries terra.NumberValue `hcl:"max_retries,attr" validate:"required"`
	// TcpRetryEvents: set of string, optional
	TcpRetryEvents terra.SetValue[terra.StringValue] `hcl:"tcp_retry_events,attr"`
	// SpecHttpRouteRetryPolicyPerRetryTimeout: required
	PerRetryTimeout *SpecHttpRouteRetryPolicyPerRetryTimeout `hcl:"per_retry_timeout,block" validate:"required"`
}

type SpecHttpRouteRetryPolicyPerRetryTimeout struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecHttpRouteTimeout struct {
	// SpecHttpRouteTimeoutIdle: optional
	Idle *SpecHttpRouteTimeoutIdle `hcl:"idle,block"`
	// SpecHttpRouteTimeoutPerRequest: optional
	PerRequest *SpecHttpRouteTimeoutPerRequest `hcl:"per_request,block"`
}

type SpecHttpRouteTimeoutIdle struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecHttpRouteTimeoutPerRequest struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecTcpRoute struct {
	// SpecTcpRouteAction: required
	Action *SpecTcpRouteAction `hcl:"action,block" validate:"required"`
	// SpecTcpRouteMatch: optional
	Match *SpecTcpRouteMatch `hcl:"match,block"`
	// SpecTcpRouteTimeout: optional
	Timeout *SpecTcpRouteTimeout `hcl:"timeout,block"`
}

type SpecTcpRouteAction struct {
	// SpecTcpRouteActionWeightedTarget: min=1,max=10
	WeightedTarget []SpecTcpRouteActionWeightedTarget `hcl:"weighted_target,block" validate:"min=1,max=10"`
}

type SpecTcpRouteActionWeightedTarget struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// VirtualNode: string, required
	VirtualNode terra.StringValue `hcl:"virtual_node,attr" validate:"required"`
	// Weight: number, required
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
}

type SpecTcpRouteMatch struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
}

type SpecTcpRouteTimeout struct {
	// SpecTcpRouteTimeoutIdle: optional
	Idle *SpecTcpRouteTimeoutIdle `hcl:"idle,block"`
}

type SpecTcpRouteTimeoutIdle struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("priority"))
}

func (s SpecAttributes) GrpcRoute() terra.ListValue[SpecGrpcRouteAttributes] {
	return terra.ReferenceAsList[SpecGrpcRouteAttributes](s.ref.Append("grpc_route"))
}

func (s SpecAttributes) Http2Route() terra.ListValue[SpecHttp2RouteAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteAttributes](s.ref.Append("http2_route"))
}

func (s SpecAttributes) HttpRoute() terra.ListValue[SpecHttpRouteAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteAttributes](s.ref.Append("http_route"))
}

func (s SpecAttributes) TcpRoute() terra.ListValue[SpecTcpRouteAttributes] {
	return terra.ReferenceAsList[SpecTcpRouteAttributes](s.ref.Append("tcp_route"))
}

type SpecGrpcRouteAttributes struct {
	ref terra.Reference
}

func (gr SpecGrpcRouteAttributes) InternalRef() (terra.Reference, error) {
	return gr.ref, nil
}

func (gr SpecGrpcRouteAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteAttributes {
	return SpecGrpcRouteAttributes{ref: ref}
}

func (gr SpecGrpcRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gr.ref.InternalTokens()
}

func (gr SpecGrpcRouteAttributes) Action() terra.ListValue[SpecGrpcRouteActionAttributes] {
	return terra.ReferenceAsList[SpecGrpcRouteActionAttributes](gr.ref.Append("action"))
}

func (gr SpecGrpcRouteAttributes) Match() terra.ListValue[SpecGrpcRouteMatchAttributes] {
	return terra.ReferenceAsList[SpecGrpcRouteMatchAttributes](gr.ref.Append("match"))
}

func (gr SpecGrpcRouteAttributes) RetryPolicy() terra.ListValue[SpecGrpcRouteRetryPolicyAttributes] {
	return terra.ReferenceAsList[SpecGrpcRouteRetryPolicyAttributes](gr.ref.Append("retry_policy"))
}

func (gr SpecGrpcRouteAttributes) Timeout() terra.ListValue[SpecGrpcRouteTimeoutAttributes] {
	return terra.ReferenceAsList[SpecGrpcRouteTimeoutAttributes](gr.ref.Append("timeout"))
}

type SpecGrpcRouteActionAttributes struct {
	ref terra.Reference
}

func (a SpecGrpcRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a SpecGrpcRouteActionAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteActionAttributes {
	return SpecGrpcRouteActionAttributes{ref: ref}
}

func (a SpecGrpcRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a SpecGrpcRouteActionAttributes) WeightedTarget() terra.SetValue[SpecGrpcRouteActionWeightedTargetAttributes] {
	return terra.ReferenceAsSet[SpecGrpcRouteActionWeightedTargetAttributes](a.ref.Append("weighted_target"))
}

type SpecGrpcRouteActionWeightedTargetAttributes struct {
	ref terra.Reference
}

func (wt SpecGrpcRouteActionWeightedTargetAttributes) InternalRef() (terra.Reference, error) {
	return wt.ref, nil
}

func (wt SpecGrpcRouteActionWeightedTargetAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteActionWeightedTargetAttributes {
	return SpecGrpcRouteActionWeightedTargetAttributes{ref: ref}
}

func (wt SpecGrpcRouteActionWeightedTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wt.ref.InternalTokens()
}

func (wt SpecGrpcRouteActionWeightedTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("port"))
}

func (wt SpecGrpcRouteActionWeightedTargetAttributes) VirtualNode() terra.StringValue {
	return terra.ReferenceAsString(wt.ref.Append("virtual_node"))
}

func (wt SpecGrpcRouteActionWeightedTargetAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("weight"))
}

type SpecGrpcRouteMatchAttributes struct {
	ref terra.Reference
}

func (m SpecGrpcRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecGrpcRouteMatchAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteMatchAttributes {
	return SpecGrpcRouteMatchAttributes{ref: ref}
}

func (m SpecGrpcRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecGrpcRouteMatchAttributes) MethodName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("method_name"))
}

func (m SpecGrpcRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m SpecGrpcRouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m SpecGrpcRouteMatchAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("service_name"))
}

func (m SpecGrpcRouteMatchAttributes) Metadata() terra.SetValue[SpecGrpcRouteMatchMetadataAttributes] {
	return terra.ReferenceAsSet[SpecGrpcRouteMatchMetadataAttributes](m.ref.Append("metadata"))
}

type SpecGrpcRouteMatchMetadataAttributes struct {
	ref terra.Reference
}

func (m SpecGrpcRouteMatchMetadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecGrpcRouteMatchMetadataAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteMatchMetadataAttributes {
	return SpecGrpcRouteMatchMetadataAttributes{ref: ref}
}

func (m SpecGrpcRouteMatchMetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecGrpcRouteMatchMetadataAttributes) Invert() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("invert"))
}

func (m SpecGrpcRouteMatchMetadataAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("name"))
}

func (m SpecGrpcRouteMatchMetadataAttributes) Match() terra.ListValue[SpecGrpcRouteD86B2967Attributes] {
	return terra.ReferenceAsList[SpecGrpcRouteD86B2967Attributes](m.ref.Append("match"))
}

type SpecGrpcRouteD86B2967Attributes struct {
	ref terra.Reference
}

func (m SpecGrpcRouteD86B2967Attributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecGrpcRouteD86B2967Attributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteD86B2967Attributes {
	return SpecGrpcRouteD86B2967Attributes{ref: ref}
}

func (m SpecGrpcRouteD86B2967Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecGrpcRouteD86B2967Attributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m SpecGrpcRouteD86B2967Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m SpecGrpcRouteD86B2967Attributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex"))
}

func (m SpecGrpcRouteD86B2967Attributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("suffix"))
}

func (m SpecGrpcRouteD86B2967Attributes) Range() terra.ListValue[SpecGrpcRoute8B0C9706Attributes] {
	return terra.ReferenceAsList[SpecGrpcRoute8B0C9706Attributes](m.ref.Append("range"))
}

type SpecGrpcRoute8B0C9706Attributes struct {
	ref terra.Reference
}

func (r SpecGrpcRoute8B0C9706Attributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r SpecGrpcRoute8B0C9706Attributes) InternalWithRef(ref terra.Reference) SpecGrpcRoute8B0C9706Attributes {
	return SpecGrpcRoute8B0C9706Attributes{ref: ref}
}

func (r SpecGrpcRoute8B0C9706Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r SpecGrpcRoute8B0C9706Attributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r SpecGrpcRoute8B0C9706Attributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type SpecGrpcRouteRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp SpecGrpcRouteRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp SpecGrpcRouteRetryPolicyAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteRetryPolicyAttributes {
	return SpecGrpcRouteRetryPolicyAttributes{ref: ref}
}

func (rp SpecGrpcRouteRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp SpecGrpcRouteRetryPolicyAttributes) GrpcRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("grpc_retry_events"))
}

func (rp SpecGrpcRouteRetryPolicyAttributes) HttpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("http_retry_events"))
}

func (rp SpecGrpcRouteRetryPolicyAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("max_retries"))
}

func (rp SpecGrpcRouteRetryPolicyAttributes) TcpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("tcp_retry_events"))
}

func (rp SpecGrpcRouteRetryPolicyAttributes) PerRetryTimeout() terra.ListValue[SpecGrpcRouteRetryPolicyPerRetryTimeoutAttributes] {
	return terra.ReferenceAsList[SpecGrpcRouteRetryPolicyPerRetryTimeoutAttributes](rp.ref.Append("per_retry_timeout"))
}

type SpecGrpcRouteRetryPolicyPerRetryTimeoutAttributes struct {
	ref terra.Reference
}

func (prt SpecGrpcRouteRetryPolicyPerRetryTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return prt.ref, nil
}

func (prt SpecGrpcRouteRetryPolicyPerRetryTimeoutAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteRetryPolicyPerRetryTimeoutAttributes {
	return SpecGrpcRouteRetryPolicyPerRetryTimeoutAttributes{ref: ref}
}

func (prt SpecGrpcRouteRetryPolicyPerRetryTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return prt.ref.InternalTokens()
}

func (prt SpecGrpcRouteRetryPolicyPerRetryTimeoutAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(prt.ref.Append("unit"))
}

func (prt SpecGrpcRouteRetryPolicyPerRetryTimeoutAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(prt.ref.Append("value"))
}

type SpecGrpcRouteTimeoutAttributes struct {
	ref terra.Reference
}

func (t SpecGrpcRouteTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t SpecGrpcRouteTimeoutAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteTimeoutAttributes {
	return SpecGrpcRouteTimeoutAttributes{ref: ref}
}

func (t SpecGrpcRouteTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t SpecGrpcRouteTimeoutAttributes) Idle() terra.ListValue[SpecGrpcRouteTimeoutIdleAttributes] {
	return terra.ReferenceAsList[SpecGrpcRouteTimeoutIdleAttributes](t.ref.Append("idle"))
}

func (t SpecGrpcRouteTimeoutAttributes) PerRequest() terra.ListValue[SpecGrpcRouteTimeoutPerRequestAttributes] {
	return terra.ReferenceAsList[SpecGrpcRouteTimeoutPerRequestAttributes](t.ref.Append("per_request"))
}

type SpecGrpcRouteTimeoutIdleAttributes struct {
	ref terra.Reference
}

func (i SpecGrpcRouteTimeoutIdleAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i SpecGrpcRouteTimeoutIdleAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteTimeoutIdleAttributes {
	return SpecGrpcRouteTimeoutIdleAttributes{ref: ref}
}

func (i SpecGrpcRouteTimeoutIdleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i SpecGrpcRouteTimeoutIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("unit"))
}

func (i SpecGrpcRouteTimeoutIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type SpecGrpcRouteTimeoutPerRequestAttributes struct {
	ref terra.Reference
}

func (pr SpecGrpcRouteTimeoutPerRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr SpecGrpcRouteTimeoutPerRequestAttributes) InternalWithRef(ref terra.Reference) SpecGrpcRouteTimeoutPerRequestAttributes {
	return SpecGrpcRouteTimeoutPerRequestAttributes{ref: ref}
}

func (pr SpecGrpcRouteTimeoutPerRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr SpecGrpcRouteTimeoutPerRequestAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("unit"))
}

func (pr SpecGrpcRouteTimeoutPerRequestAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("value"))
}

type SpecHttp2RouteAttributes struct {
	ref terra.Reference
}

func (hr SpecHttp2RouteAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr SpecHttp2RouteAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteAttributes {
	return SpecHttp2RouteAttributes{ref: ref}
}

func (hr SpecHttp2RouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr SpecHttp2RouteAttributes) Action() terra.ListValue[SpecHttp2RouteActionAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteActionAttributes](hr.ref.Append("action"))
}

func (hr SpecHttp2RouteAttributes) Match() terra.ListValue[SpecHttp2RouteMatchAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteMatchAttributes](hr.ref.Append("match"))
}

func (hr SpecHttp2RouteAttributes) RetryPolicy() terra.ListValue[SpecHttp2RouteRetryPolicyAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteRetryPolicyAttributes](hr.ref.Append("retry_policy"))
}

func (hr SpecHttp2RouteAttributes) Timeout() terra.ListValue[SpecHttp2RouteTimeoutAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteTimeoutAttributes](hr.ref.Append("timeout"))
}

type SpecHttp2RouteActionAttributes struct {
	ref terra.Reference
}

func (a SpecHttp2RouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a SpecHttp2RouteActionAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteActionAttributes {
	return SpecHttp2RouteActionAttributes{ref: ref}
}

func (a SpecHttp2RouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a SpecHttp2RouteActionAttributes) WeightedTarget() terra.SetValue[SpecHttp2RouteActionWeightedTargetAttributes] {
	return terra.ReferenceAsSet[SpecHttp2RouteActionWeightedTargetAttributes](a.ref.Append("weighted_target"))
}

type SpecHttp2RouteActionWeightedTargetAttributes struct {
	ref terra.Reference
}

func (wt SpecHttp2RouteActionWeightedTargetAttributes) InternalRef() (terra.Reference, error) {
	return wt.ref, nil
}

func (wt SpecHttp2RouteActionWeightedTargetAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteActionWeightedTargetAttributes {
	return SpecHttp2RouteActionWeightedTargetAttributes{ref: ref}
}

func (wt SpecHttp2RouteActionWeightedTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wt.ref.InternalTokens()
}

func (wt SpecHttp2RouteActionWeightedTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("port"))
}

func (wt SpecHttp2RouteActionWeightedTargetAttributes) VirtualNode() terra.StringValue {
	return terra.ReferenceAsString(wt.ref.Append("virtual_node"))
}

func (wt SpecHttp2RouteActionWeightedTargetAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("weight"))
}

type SpecHttp2RouteMatchAttributes struct {
	ref terra.Reference
}

func (m SpecHttp2RouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecHttp2RouteMatchAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteMatchAttributes {
	return SpecHttp2RouteMatchAttributes{ref: ref}
}

func (m SpecHttp2RouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecHttp2RouteMatchAttributes) Method() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("method"))
}

func (m SpecHttp2RouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m SpecHttp2RouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m SpecHttp2RouteMatchAttributes) Scheme() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("scheme"))
}

func (m SpecHttp2RouteMatchAttributes) Header() terra.SetValue[SpecHttp2RouteMatchHeaderAttributes] {
	return terra.ReferenceAsSet[SpecHttp2RouteMatchHeaderAttributes](m.ref.Append("header"))
}

func (m SpecHttp2RouteMatchAttributes) Path() terra.ListValue[SpecHttp2RouteMatchPathAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteMatchPathAttributes](m.ref.Append("path"))
}

func (m SpecHttp2RouteMatchAttributes) QueryParameter() terra.SetValue[SpecHttp2RouteMatchQueryParameterAttributes] {
	return terra.ReferenceAsSet[SpecHttp2RouteMatchQueryParameterAttributes](m.ref.Append("query_parameter"))
}

type SpecHttp2RouteMatchHeaderAttributes struct {
	ref terra.Reference
}

func (h SpecHttp2RouteMatchHeaderAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h SpecHttp2RouteMatchHeaderAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteMatchHeaderAttributes {
	return SpecHttp2RouteMatchHeaderAttributes{ref: ref}
}

func (h SpecHttp2RouteMatchHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h SpecHttp2RouteMatchHeaderAttributes) Invert() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("invert"))
}

func (h SpecHttp2RouteMatchHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("name"))
}

func (h SpecHttp2RouteMatchHeaderAttributes) Match() terra.ListValue[SpecHttp2Route30Dd3523Attributes] {
	return terra.ReferenceAsList[SpecHttp2Route30Dd3523Attributes](h.ref.Append("match"))
}

type SpecHttp2Route30Dd3523Attributes struct {
	ref terra.Reference
}

func (m SpecHttp2Route30Dd3523Attributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecHttp2Route30Dd3523Attributes) InternalWithRef(ref terra.Reference) SpecHttp2Route30Dd3523Attributes {
	return SpecHttp2Route30Dd3523Attributes{ref: ref}
}

func (m SpecHttp2Route30Dd3523Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecHttp2Route30Dd3523Attributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m SpecHttp2Route30Dd3523Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m SpecHttp2Route30Dd3523Attributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex"))
}

func (m SpecHttp2Route30Dd3523Attributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("suffix"))
}

func (m SpecHttp2Route30Dd3523Attributes) Range() terra.ListValue[SpecHttp2Route31605981Attributes] {
	return terra.ReferenceAsList[SpecHttp2Route31605981Attributes](m.ref.Append("range"))
}

type SpecHttp2Route31605981Attributes struct {
	ref terra.Reference
}

func (r SpecHttp2Route31605981Attributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r SpecHttp2Route31605981Attributes) InternalWithRef(ref terra.Reference) SpecHttp2Route31605981Attributes {
	return SpecHttp2Route31605981Attributes{ref: ref}
}

func (r SpecHttp2Route31605981Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r SpecHttp2Route31605981Attributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r SpecHttp2Route31605981Attributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type SpecHttp2RouteMatchPathAttributes struct {
	ref terra.Reference
}

func (p SpecHttp2RouteMatchPathAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p SpecHttp2RouteMatchPathAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteMatchPathAttributes {
	return SpecHttp2RouteMatchPathAttributes{ref: ref}
}

func (p SpecHttp2RouteMatchPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p SpecHttp2RouteMatchPathAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

func (p SpecHttp2RouteMatchPathAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("regex"))
}

type SpecHttp2RouteMatchQueryParameterAttributes struct {
	ref terra.Reference
}

func (qp SpecHttp2RouteMatchQueryParameterAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp SpecHttp2RouteMatchQueryParameterAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteMatchQueryParameterAttributes {
	return SpecHttp2RouteMatchQueryParameterAttributes{ref: ref}
}

func (qp SpecHttp2RouteMatchQueryParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp SpecHttp2RouteMatchQueryParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("name"))
}

func (qp SpecHttp2RouteMatchQueryParameterAttributes) Match() terra.ListValue[SpecHttp2RouteD36Dd47DAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteD36Dd47DAttributes](qp.ref.Append("match"))
}

type SpecHttp2RouteD36Dd47DAttributes struct {
	ref terra.Reference
}

func (m SpecHttp2RouteD36Dd47DAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecHttp2RouteD36Dd47DAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteD36Dd47DAttributes {
	return SpecHttp2RouteD36Dd47DAttributes{ref: ref}
}

func (m SpecHttp2RouteD36Dd47DAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecHttp2RouteD36Dd47DAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

type SpecHttp2RouteRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp SpecHttp2RouteRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp SpecHttp2RouteRetryPolicyAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteRetryPolicyAttributes {
	return SpecHttp2RouteRetryPolicyAttributes{ref: ref}
}

func (rp SpecHttp2RouteRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp SpecHttp2RouteRetryPolicyAttributes) HttpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("http_retry_events"))
}

func (rp SpecHttp2RouteRetryPolicyAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("max_retries"))
}

func (rp SpecHttp2RouteRetryPolicyAttributes) TcpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("tcp_retry_events"))
}

func (rp SpecHttp2RouteRetryPolicyAttributes) PerRetryTimeout() terra.ListValue[SpecHttp2RouteRetryPolicyPerRetryTimeoutAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteRetryPolicyPerRetryTimeoutAttributes](rp.ref.Append("per_retry_timeout"))
}

type SpecHttp2RouteRetryPolicyPerRetryTimeoutAttributes struct {
	ref terra.Reference
}

func (prt SpecHttp2RouteRetryPolicyPerRetryTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return prt.ref, nil
}

func (prt SpecHttp2RouteRetryPolicyPerRetryTimeoutAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteRetryPolicyPerRetryTimeoutAttributes {
	return SpecHttp2RouteRetryPolicyPerRetryTimeoutAttributes{ref: ref}
}

func (prt SpecHttp2RouteRetryPolicyPerRetryTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return prt.ref.InternalTokens()
}

func (prt SpecHttp2RouteRetryPolicyPerRetryTimeoutAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(prt.ref.Append("unit"))
}

func (prt SpecHttp2RouteRetryPolicyPerRetryTimeoutAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(prt.ref.Append("value"))
}

type SpecHttp2RouteTimeoutAttributes struct {
	ref terra.Reference
}

func (t SpecHttp2RouteTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t SpecHttp2RouteTimeoutAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteTimeoutAttributes {
	return SpecHttp2RouteTimeoutAttributes{ref: ref}
}

func (t SpecHttp2RouteTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t SpecHttp2RouteTimeoutAttributes) Idle() terra.ListValue[SpecHttp2RouteTimeoutIdleAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteTimeoutIdleAttributes](t.ref.Append("idle"))
}

func (t SpecHttp2RouteTimeoutAttributes) PerRequest() terra.ListValue[SpecHttp2RouteTimeoutPerRequestAttributes] {
	return terra.ReferenceAsList[SpecHttp2RouteTimeoutPerRequestAttributes](t.ref.Append("per_request"))
}

type SpecHttp2RouteTimeoutIdleAttributes struct {
	ref terra.Reference
}

func (i SpecHttp2RouteTimeoutIdleAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i SpecHttp2RouteTimeoutIdleAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteTimeoutIdleAttributes {
	return SpecHttp2RouteTimeoutIdleAttributes{ref: ref}
}

func (i SpecHttp2RouteTimeoutIdleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i SpecHttp2RouteTimeoutIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("unit"))
}

func (i SpecHttp2RouteTimeoutIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type SpecHttp2RouteTimeoutPerRequestAttributes struct {
	ref terra.Reference
}

func (pr SpecHttp2RouteTimeoutPerRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr SpecHttp2RouteTimeoutPerRequestAttributes) InternalWithRef(ref terra.Reference) SpecHttp2RouteTimeoutPerRequestAttributes {
	return SpecHttp2RouteTimeoutPerRequestAttributes{ref: ref}
}

func (pr SpecHttp2RouteTimeoutPerRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr SpecHttp2RouteTimeoutPerRequestAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("unit"))
}

func (pr SpecHttp2RouteTimeoutPerRequestAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("value"))
}

type SpecHttpRouteAttributes struct {
	ref terra.Reference
}

func (hr SpecHttpRouteAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr SpecHttpRouteAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteAttributes {
	return SpecHttpRouteAttributes{ref: ref}
}

func (hr SpecHttpRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr SpecHttpRouteAttributes) Action() terra.ListValue[SpecHttpRouteActionAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteActionAttributes](hr.ref.Append("action"))
}

func (hr SpecHttpRouteAttributes) Match() terra.ListValue[SpecHttpRouteMatchAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteMatchAttributes](hr.ref.Append("match"))
}

func (hr SpecHttpRouteAttributes) RetryPolicy() terra.ListValue[SpecHttpRouteRetryPolicyAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteRetryPolicyAttributes](hr.ref.Append("retry_policy"))
}

func (hr SpecHttpRouteAttributes) Timeout() terra.ListValue[SpecHttpRouteTimeoutAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteTimeoutAttributes](hr.ref.Append("timeout"))
}

type SpecHttpRouteActionAttributes struct {
	ref terra.Reference
}

func (a SpecHttpRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a SpecHttpRouteActionAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteActionAttributes {
	return SpecHttpRouteActionAttributes{ref: ref}
}

func (a SpecHttpRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a SpecHttpRouteActionAttributes) WeightedTarget() terra.SetValue[SpecHttpRouteActionWeightedTargetAttributes] {
	return terra.ReferenceAsSet[SpecHttpRouteActionWeightedTargetAttributes](a.ref.Append("weighted_target"))
}

type SpecHttpRouteActionWeightedTargetAttributes struct {
	ref terra.Reference
}

func (wt SpecHttpRouteActionWeightedTargetAttributes) InternalRef() (terra.Reference, error) {
	return wt.ref, nil
}

func (wt SpecHttpRouteActionWeightedTargetAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteActionWeightedTargetAttributes {
	return SpecHttpRouteActionWeightedTargetAttributes{ref: ref}
}

func (wt SpecHttpRouteActionWeightedTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wt.ref.InternalTokens()
}

func (wt SpecHttpRouteActionWeightedTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("port"))
}

func (wt SpecHttpRouteActionWeightedTargetAttributes) VirtualNode() terra.StringValue {
	return terra.ReferenceAsString(wt.ref.Append("virtual_node"))
}

func (wt SpecHttpRouteActionWeightedTargetAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("weight"))
}

type SpecHttpRouteMatchAttributes struct {
	ref terra.Reference
}

func (m SpecHttpRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecHttpRouteMatchAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteMatchAttributes {
	return SpecHttpRouteMatchAttributes{ref: ref}
}

func (m SpecHttpRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecHttpRouteMatchAttributes) Method() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("method"))
}

func (m SpecHttpRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m SpecHttpRouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m SpecHttpRouteMatchAttributes) Scheme() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("scheme"))
}

func (m SpecHttpRouteMatchAttributes) Header() terra.SetValue[SpecHttpRouteMatchHeaderAttributes] {
	return terra.ReferenceAsSet[SpecHttpRouteMatchHeaderAttributes](m.ref.Append("header"))
}

func (m SpecHttpRouteMatchAttributes) Path() terra.ListValue[SpecHttpRouteMatchPathAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteMatchPathAttributes](m.ref.Append("path"))
}

func (m SpecHttpRouteMatchAttributes) QueryParameter() terra.SetValue[SpecHttpRouteMatchQueryParameterAttributes] {
	return terra.ReferenceAsSet[SpecHttpRouteMatchQueryParameterAttributes](m.ref.Append("query_parameter"))
}

type SpecHttpRouteMatchHeaderAttributes struct {
	ref terra.Reference
}

func (h SpecHttpRouteMatchHeaderAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h SpecHttpRouteMatchHeaderAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteMatchHeaderAttributes {
	return SpecHttpRouteMatchHeaderAttributes{ref: ref}
}

func (h SpecHttpRouteMatchHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h SpecHttpRouteMatchHeaderAttributes) Invert() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("invert"))
}

func (h SpecHttpRouteMatchHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("name"))
}

func (h SpecHttpRouteMatchHeaderAttributes) Match() terra.ListValue[SpecHttpRoute30Dd3523Attributes] {
	return terra.ReferenceAsList[SpecHttpRoute30Dd3523Attributes](h.ref.Append("match"))
}

type SpecHttpRoute30Dd3523Attributes struct {
	ref terra.Reference
}

func (m SpecHttpRoute30Dd3523Attributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecHttpRoute30Dd3523Attributes) InternalWithRef(ref terra.Reference) SpecHttpRoute30Dd3523Attributes {
	return SpecHttpRoute30Dd3523Attributes{ref: ref}
}

func (m SpecHttpRoute30Dd3523Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecHttpRoute30Dd3523Attributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m SpecHttpRoute30Dd3523Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m SpecHttpRoute30Dd3523Attributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex"))
}

func (m SpecHttpRoute30Dd3523Attributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("suffix"))
}

func (m SpecHttpRoute30Dd3523Attributes) Range() terra.ListValue[SpecHttpRoute31605981Attributes] {
	return terra.ReferenceAsList[SpecHttpRoute31605981Attributes](m.ref.Append("range"))
}

type SpecHttpRoute31605981Attributes struct {
	ref terra.Reference
}

func (r SpecHttpRoute31605981Attributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r SpecHttpRoute31605981Attributes) InternalWithRef(ref terra.Reference) SpecHttpRoute31605981Attributes {
	return SpecHttpRoute31605981Attributes{ref: ref}
}

func (r SpecHttpRoute31605981Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r SpecHttpRoute31605981Attributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r SpecHttpRoute31605981Attributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type SpecHttpRouteMatchPathAttributes struct {
	ref terra.Reference
}

func (p SpecHttpRouteMatchPathAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p SpecHttpRouteMatchPathAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteMatchPathAttributes {
	return SpecHttpRouteMatchPathAttributes{ref: ref}
}

func (p SpecHttpRouteMatchPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p SpecHttpRouteMatchPathAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

func (p SpecHttpRouteMatchPathAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("regex"))
}

type SpecHttpRouteMatchQueryParameterAttributes struct {
	ref terra.Reference
}

func (qp SpecHttpRouteMatchQueryParameterAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp SpecHttpRouteMatchQueryParameterAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteMatchQueryParameterAttributes {
	return SpecHttpRouteMatchQueryParameterAttributes{ref: ref}
}

func (qp SpecHttpRouteMatchQueryParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp SpecHttpRouteMatchQueryParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("name"))
}

func (qp SpecHttpRouteMatchQueryParameterAttributes) Match() terra.ListValue[SpecHttpRouteD36Dd47DAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteD36Dd47DAttributes](qp.ref.Append("match"))
}

type SpecHttpRouteD36Dd47DAttributes struct {
	ref terra.Reference
}

func (m SpecHttpRouteD36Dd47DAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecHttpRouteD36Dd47DAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteD36Dd47DAttributes {
	return SpecHttpRouteD36Dd47DAttributes{ref: ref}
}

func (m SpecHttpRouteD36Dd47DAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecHttpRouteD36Dd47DAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

type SpecHttpRouteRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp SpecHttpRouteRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp SpecHttpRouteRetryPolicyAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteRetryPolicyAttributes {
	return SpecHttpRouteRetryPolicyAttributes{ref: ref}
}

func (rp SpecHttpRouteRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp SpecHttpRouteRetryPolicyAttributes) HttpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("http_retry_events"))
}

func (rp SpecHttpRouteRetryPolicyAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("max_retries"))
}

func (rp SpecHttpRouteRetryPolicyAttributes) TcpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("tcp_retry_events"))
}

func (rp SpecHttpRouteRetryPolicyAttributes) PerRetryTimeout() terra.ListValue[SpecHttpRouteRetryPolicyPerRetryTimeoutAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteRetryPolicyPerRetryTimeoutAttributes](rp.ref.Append("per_retry_timeout"))
}

type SpecHttpRouteRetryPolicyPerRetryTimeoutAttributes struct {
	ref terra.Reference
}

func (prt SpecHttpRouteRetryPolicyPerRetryTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return prt.ref, nil
}

func (prt SpecHttpRouteRetryPolicyPerRetryTimeoutAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteRetryPolicyPerRetryTimeoutAttributes {
	return SpecHttpRouteRetryPolicyPerRetryTimeoutAttributes{ref: ref}
}

func (prt SpecHttpRouteRetryPolicyPerRetryTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return prt.ref.InternalTokens()
}

func (prt SpecHttpRouteRetryPolicyPerRetryTimeoutAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(prt.ref.Append("unit"))
}

func (prt SpecHttpRouteRetryPolicyPerRetryTimeoutAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(prt.ref.Append("value"))
}

type SpecHttpRouteTimeoutAttributes struct {
	ref terra.Reference
}

func (t SpecHttpRouteTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t SpecHttpRouteTimeoutAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteTimeoutAttributes {
	return SpecHttpRouteTimeoutAttributes{ref: ref}
}

func (t SpecHttpRouteTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t SpecHttpRouteTimeoutAttributes) Idle() terra.ListValue[SpecHttpRouteTimeoutIdleAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteTimeoutIdleAttributes](t.ref.Append("idle"))
}

func (t SpecHttpRouteTimeoutAttributes) PerRequest() terra.ListValue[SpecHttpRouteTimeoutPerRequestAttributes] {
	return terra.ReferenceAsList[SpecHttpRouteTimeoutPerRequestAttributes](t.ref.Append("per_request"))
}

type SpecHttpRouteTimeoutIdleAttributes struct {
	ref terra.Reference
}

func (i SpecHttpRouteTimeoutIdleAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i SpecHttpRouteTimeoutIdleAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteTimeoutIdleAttributes {
	return SpecHttpRouteTimeoutIdleAttributes{ref: ref}
}

func (i SpecHttpRouteTimeoutIdleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i SpecHttpRouteTimeoutIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("unit"))
}

func (i SpecHttpRouteTimeoutIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type SpecHttpRouteTimeoutPerRequestAttributes struct {
	ref terra.Reference
}

func (pr SpecHttpRouteTimeoutPerRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr SpecHttpRouteTimeoutPerRequestAttributes) InternalWithRef(ref terra.Reference) SpecHttpRouteTimeoutPerRequestAttributes {
	return SpecHttpRouteTimeoutPerRequestAttributes{ref: ref}
}

func (pr SpecHttpRouteTimeoutPerRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr SpecHttpRouteTimeoutPerRequestAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("unit"))
}

func (pr SpecHttpRouteTimeoutPerRequestAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("value"))
}

type SpecTcpRouteAttributes struct {
	ref terra.Reference
}

func (tr SpecTcpRouteAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr SpecTcpRouteAttributes) InternalWithRef(ref terra.Reference) SpecTcpRouteAttributes {
	return SpecTcpRouteAttributes{ref: ref}
}

func (tr SpecTcpRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr SpecTcpRouteAttributes) Action() terra.ListValue[SpecTcpRouteActionAttributes] {
	return terra.ReferenceAsList[SpecTcpRouteActionAttributes](tr.ref.Append("action"))
}

func (tr SpecTcpRouteAttributes) Match() terra.ListValue[SpecTcpRouteMatchAttributes] {
	return terra.ReferenceAsList[SpecTcpRouteMatchAttributes](tr.ref.Append("match"))
}

func (tr SpecTcpRouteAttributes) Timeout() terra.ListValue[SpecTcpRouteTimeoutAttributes] {
	return terra.ReferenceAsList[SpecTcpRouteTimeoutAttributes](tr.ref.Append("timeout"))
}

type SpecTcpRouteActionAttributes struct {
	ref terra.Reference
}

func (a SpecTcpRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a SpecTcpRouteActionAttributes) InternalWithRef(ref terra.Reference) SpecTcpRouteActionAttributes {
	return SpecTcpRouteActionAttributes{ref: ref}
}

func (a SpecTcpRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a SpecTcpRouteActionAttributes) WeightedTarget() terra.SetValue[SpecTcpRouteActionWeightedTargetAttributes] {
	return terra.ReferenceAsSet[SpecTcpRouteActionWeightedTargetAttributes](a.ref.Append("weighted_target"))
}

type SpecTcpRouteActionWeightedTargetAttributes struct {
	ref terra.Reference
}

func (wt SpecTcpRouteActionWeightedTargetAttributes) InternalRef() (terra.Reference, error) {
	return wt.ref, nil
}

func (wt SpecTcpRouteActionWeightedTargetAttributes) InternalWithRef(ref terra.Reference) SpecTcpRouteActionWeightedTargetAttributes {
	return SpecTcpRouteActionWeightedTargetAttributes{ref: ref}
}

func (wt SpecTcpRouteActionWeightedTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wt.ref.InternalTokens()
}

func (wt SpecTcpRouteActionWeightedTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("port"))
}

func (wt SpecTcpRouteActionWeightedTargetAttributes) VirtualNode() terra.StringValue {
	return terra.ReferenceAsString(wt.ref.Append("virtual_node"))
}

func (wt SpecTcpRouteActionWeightedTargetAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("weight"))
}

type SpecTcpRouteMatchAttributes struct {
	ref terra.Reference
}

func (m SpecTcpRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SpecTcpRouteMatchAttributes) InternalWithRef(ref terra.Reference) SpecTcpRouteMatchAttributes {
	return SpecTcpRouteMatchAttributes{ref: ref}
}

func (m SpecTcpRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m SpecTcpRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

type SpecTcpRouteTimeoutAttributes struct {
	ref terra.Reference
}

func (t SpecTcpRouteTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t SpecTcpRouteTimeoutAttributes) InternalWithRef(ref terra.Reference) SpecTcpRouteTimeoutAttributes {
	return SpecTcpRouteTimeoutAttributes{ref: ref}
}

func (t SpecTcpRouteTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t SpecTcpRouteTimeoutAttributes) Idle() terra.ListValue[SpecTcpRouteTimeoutIdleAttributes] {
	return terra.ReferenceAsList[SpecTcpRouteTimeoutIdleAttributes](t.ref.Append("idle"))
}

type SpecTcpRouteTimeoutIdleAttributes struct {
	ref terra.Reference
}

func (i SpecTcpRouteTimeoutIdleAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i SpecTcpRouteTimeoutIdleAttributes) InternalWithRef(ref terra.Reference) SpecTcpRouteTimeoutIdleAttributes {
	return SpecTcpRouteTimeoutIdleAttributes{ref: ref}
}

func (i SpecTcpRouteTimeoutIdleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i SpecTcpRouteTimeoutIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("unit"))
}

func (i SpecTcpRouteTimeoutIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type SpecState struct {
	Priority   float64               `json:"priority"`
	GrpcRoute  []SpecGrpcRouteState  `json:"grpc_route"`
	Http2Route []SpecHttp2RouteState `json:"http2_route"`
	HttpRoute  []SpecHttpRouteState  `json:"http_route"`
	TcpRoute   []SpecTcpRouteState   `json:"tcp_route"`
}

type SpecGrpcRouteState struct {
	Action      []SpecGrpcRouteActionState      `json:"action"`
	Match       []SpecGrpcRouteMatchState       `json:"match"`
	RetryPolicy []SpecGrpcRouteRetryPolicyState `json:"retry_policy"`
	Timeout     []SpecGrpcRouteTimeoutState     `json:"timeout"`
}

type SpecGrpcRouteActionState struct {
	WeightedTarget []SpecGrpcRouteActionWeightedTargetState `json:"weighted_target"`
}

type SpecGrpcRouteActionWeightedTargetState struct {
	Port        float64 `json:"port"`
	VirtualNode string  `json:"virtual_node"`
	Weight      float64 `json:"weight"`
}

type SpecGrpcRouteMatchState struct {
	MethodName  string                            `json:"method_name"`
	Port        float64                           `json:"port"`
	Prefix      string                            `json:"prefix"`
	ServiceName string                            `json:"service_name"`
	Metadata    []SpecGrpcRouteMatchMetadataState `json:"metadata"`
}

type SpecGrpcRouteMatchMetadataState struct {
	Invert bool                         `json:"invert"`
	Name   string                       `json:"name"`
	Match  []SpecGrpcRouteD86B2967State `json:"match"`
}

type SpecGrpcRouteD86B2967State struct {
	Exact  string                       `json:"exact"`
	Prefix string                       `json:"prefix"`
	Regex  string                       `json:"regex"`
	Suffix string                       `json:"suffix"`
	Range  []SpecGrpcRoute8B0C9706State `json:"range"`
}

type SpecGrpcRoute8B0C9706State struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type SpecGrpcRouteRetryPolicyState struct {
	GrpcRetryEvents []string                                       `json:"grpc_retry_events"`
	HttpRetryEvents []string                                       `json:"http_retry_events"`
	MaxRetries      float64                                        `json:"max_retries"`
	TcpRetryEvents  []string                                       `json:"tcp_retry_events"`
	PerRetryTimeout []SpecGrpcRouteRetryPolicyPerRetryTimeoutState `json:"per_retry_timeout"`
}

type SpecGrpcRouteRetryPolicyPerRetryTimeoutState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecGrpcRouteTimeoutState struct {
	Idle       []SpecGrpcRouteTimeoutIdleState       `json:"idle"`
	PerRequest []SpecGrpcRouteTimeoutPerRequestState `json:"per_request"`
}

type SpecGrpcRouteTimeoutIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecGrpcRouteTimeoutPerRequestState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecHttp2RouteState struct {
	Action      []SpecHttp2RouteActionState      `json:"action"`
	Match       []SpecHttp2RouteMatchState       `json:"match"`
	RetryPolicy []SpecHttp2RouteRetryPolicyState `json:"retry_policy"`
	Timeout     []SpecHttp2RouteTimeoutState     `json:"timeout"`
}

type SpecHttp2RouteActionState struct {
	WeightedTarget []SpecHttp2RouteActionWeightedTargetState `json:"weighted_target"`
}

type SpecHttp2RouteActionWeightedTargetState struct {
	Port        float64 `json:"port"`
	VirtualNode string  `json:"virtual_node"`
	Weight      float64 `json:"weight"`
}

type SpecHttp2RouteMatchState struct {
	Method         string                                   `json:"method"`
	Port           float64                                  `json:"port"`
	Prefix         string                                   `json:"prefix"`
	Scheme         string                                   `json:"scheme"`
	Header         []SpecHttp2RouteMatchHeaderState         `json:"header"`
	Path           []SpecHttp2RouteMatchPathState           `json:"path"`
	QueryParameter []SpecHttp2RouteMatchQueryParameterState `json:"query_parameter"`
}

type SpecHttp2RouteMatchHeaderState struct {
	Invert bool                          `json:"invert"`
	Name   string                        `json:"name"`
	Match  []SpecHttp2Route30Dd3523State `json:"match"`
}

type SpecHttp2Route30Dd3523State struct {
	Exact  string                        `json:"exact"`
	Prefix string                        `json:"prefix"`
	Regex  string                        `json:"regex"`
	Suffix string                        `json:"suffix"`
	Range  []SpecHttp2Route31605981State `json:"range"`
}

type SpecHttp2Route31605981State struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type SpecHttp2RouteMatchPathState struct {
	Exact string `json:"exact"`
	Regex string `json:"regex"`
}

type SpecHttp2RouteMatchQueryParameterState struct {
	Name  string                        `json:"name"`
	Match []SpecHttp2RouteD36Dd47DState `json:"match"`
}

type SpecHttp2RouteD36Dd47DState struct {
	Exact string `json:"exact"`
}

type SpecHttp2RouteRetryPolicyState struct {
	HttpRetryEvents []string                                        `json:"http_retry_events"`
	MaxRetries      float64                                         `json:"max_retries"`
	TcpRetryEvents  []string                                        `json:"tcp_retry_events"`
	PerRetryTimeout []SpecHttp2RouteRetryPolicyPerRetryTimeoutState `json:"per_retry_timeout"`
}

type SpecHttp2RouteRetryPolicyPerRetryTimeoutState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecHttp2RouteTimeoutState struct {
	Idle       []SpecHttp2RouteTimeoutIdleState       `json:"idle"`
	PerRequest []SpecHttp2RouteTimeoutPerRequestState `json:"per_request"`
}

type SpecHttp2RouteTimeoutIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecHttp2RouteTimeoutPerRequestState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecHttpRouteState struct {
	Action      []SpecHttpRouteActionState      `json:"action"`
	Match       []SpecHttpRouteMatchState       `json:"match"`
	RetryPolicy []SpecHttpRouteRetryPolicyState `json:"retry_policy"`
	Timeout     []SpecHttpRouteTimeoutState     `json:"timeout"`
}

type SpecHttpRouteActionState struct {
	WeightedTarget []SpecHttpRouteActionWeightedTargetState `json:"weighted_target"`
}

type SpecHttpRouteActionWeightedTargetState struct {
	Port        float64 `json:"port"`
	VirtualNode string  `json:"virtual_node"`
	Weight      float64 `json:"weight"`
}

type SpecHttpRouteMatchState struct {
	Method         string                                  `json:"method"`
	Port           float64                                 `json:"port"`
	Prefix         string                                  `json:"prefix"`
	Scheme         string                                  `json:"scheme"`
	Header         []SpecHttpRouteMatchHeaderState         `json:"header"`
	Path           []SpecHttpRouteMatchPathState           `json:"path"`
	QueryParameter []SpecHttpRouteMatchQueryParameterState `json:"query_parameter"`
}

type SpecHttpRouteMatchHeaderState struct {
	Invert bool                         `json:"invert"`
	Name   string                       `json:"name"`
	Match  []SpecHttpRoute30Dd3523State `json:"match"`
}

type SpecHttpRoute30Dd3523State struct {
	Exact  string                       `json:"exact"`
	Prefix string                       `json:"prefix"`
	Regex  string                       `json:"regex"`
	Suffix string                       `json:"suffix"`
	Range  []SpecHttpRoute31605981State `json:"range"`
}

type SpecHttpRoute31605981State struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type SpecHttpRouteMatchPathState struct {
	Exact string `json:"exact"`
	Regex string `json:"regex"`
}

type SpecHttpRouteMatchQueryParameterState struct {
	Name  string                       `json:"name"`
	Match []SpecHttpRouteD36Dd47DState `json:"match"`
}

type SpecHttpRouteD36Dd47DState struct {
	Exact string `json:"exact"`
}

type SpecHttpRouteRetryPolicyState struct {
	HttpRetryEvents []string                                       `json:"http_retry_events"`
	MaxRetries      float64                                        `json:"max_retries"`
	TcpRetryEvents  []string                                       `json:"tcp_retry_events"`
	PerRetryTimeout []SpecHttpRouteRetryPolicyPerRetryTimeoutState `json:"per_retry_timeout"`
}

type SpecHttpRouteRetryPolicyPerRetryTimeoutState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecHttpRouteTimeoutState struct {
	Idle       []SpecHttpRouteTimeoutIdleState       `json:"idle"`
	PerRequest []SpecHttpRouteTimeoutPerRequestState `json:"per_request"`
}

type SpecHttpRouteTimeoutIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecHttpRouteTimeoutPerRequestState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecTcpRouteState struct {
	Action  []SpecTcpRouteActionState  `json:"action"`
	Match   []SpecTcpRouteMatchState   `json:"match"`
	Timeout []SpecTcpRouteTimeoutState `json:"timeout"`
}

type SpecTcpRouteActionState struct {
	WeightedTarget []SpecTcpRouteActionWeightedTargetState `json:"weighted_target"`
}

type SpecTcpRouteActionWeightedTargetState struct {
	Port        float64 `json:"port"`
	VirtualNode string  `json:"virtual_node"`
	Weight      float64 `json:"weight"`
}

type SpecTcpRouteMatchState struct {
	Port float64 `json:"port"`
}

type SpecTcpRouteTimeoutState struct {
	Idle []SpecTcpRouteTimeoutIdleState `json:"idle"`
}

type SpecTcpRouteTimeoutIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}
