// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshift_data_shares

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_redshift_data_shares.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (ards *DataSource) DataSource() string {
	return "aws_redshift_data_shares"
}

// LocalName returns the local name for [DataSource].
func (ards *DataSource) LocalName() string {
	return ards.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (ards *DataSource) Configuration() interface{} {
	return ards.Args
}

// Attributes returns the attributes for [DataSource].
func (ards *DataSource) Attributes() dataAwsRedshiftDataSharesAttributes {
	return dataAwsRedshiftDataSharesAttributes{ref: terra.ReferenceDataSource(ards)}
}

// DataArgs contains the configurations for aws_redshift_data_shares.
type DataArgs struct {
	// DataShares: min=0
	DataShares []DataDataShares `hcl:"data_shares,block" validate:"min=0"`
}

type dataAwsRedshiftDataSharesAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_redshift_data_shares.
func (ards dataAwsRedshiftDataSharesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ards.ref.Append("id"))
}

func (ards dataAwsRedshiftDataSharesAttributes) DataShares() terra.ListValue[DataDataSharesAttributes] {
	return terra.ReferenceAsList[DataDataSharesAttributes](ards.ref.Append("data_shares"))
}
