// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_batch_job_queue

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_batch_job_queue.
type Resource struct {
	Name      string
	Args      Args
	state     *awsBatchJobQueueState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abjq *Resource) Type() string {
	return "aws_batch_job_queue"
}

// LocalName returns the local name for [Resource].
func (abjq *Resource) LocalName() string {
	return abjq.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abjq *Resource) Configuration() interface{} {
	return abjq.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abjq *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abjq)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abjq *Resource) Dependencies() terra.Dependencies {
	return abjq.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abjq *Resource) LifecycleManagement() *terra.Lifecycle {
	return abjq.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abjq *Resource) Attributes() awsBatchJobQueueAttributes {
	return awsBatchJobQueueAttributes{ref: terra.ReferenceResource(abjq)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abjq *Resource) ImportState(state io.Reader) error {
	abjq.state = &awsBatchJobQueueState{}
	if err := json.NewDecoder(state).Decode(abjq.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abjq.Type(), abjq.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abjq *Resource) State() (*awsBatchJobQueueState, bool) {
	return abjq.state, abjq.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abjq *Resource) StateMust() *awsBatchJobQueueState {
	if abjq.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abjq.Type(), abjq.LocalName()))
	}
	return abjq.state
}

// Args contains the configurations for aws_batch_job_queue.
type Args struct {
	// ComputeEnvironments: list of string, optional
	ComputeEnvironments terra.ListValue[terra.StringValue] `hcl:"compute_environments,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// SchedulingPolicyArn: string, optional
	SchedulingPolicyArn terra.StringValue `hcl:"scheduling_policy_arn,attr"`
	// State: string, required
	State terra.StringValue `hcl:"state,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ComputeEnvironmentOrder: min=0
	ComputeEnvironmentOrder []ComputeEnvironmentOrder `hcl:"compute_environment_order,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsBatchJobQueueAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_batch_job_queue.
func (abjq awsBatchJobQueueAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(abjq.ref.Append("arn"))
}

// ComputeEnvironments returns a reference to field compute_environments of aws_batch_job_queue.
func (abjq awsBatchJobQueueAttributes) ComputeEnvironments() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](abjq.ref.Append("compute_environments"))
}

// Id returns a reference to field id of aws_batch_job_queue.
func (abjq awsBatchJobQueueAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abjq.ref.Append("id"))
}

// Name returns a reference to field name of aws_batch_job_queue.
func (abjq awsBatchJobQueueAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abjq.ref.Append("name"))
}

// Priority returns a reference to field priority of aws_batch_job_queue.
func (abjq awsBatchJobQueueAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(abjq.ref.Append("priority"))
}

// SchedulingPolicyArn returns a reference to field scheduling_policy_arn of aws_batch_job_queue.
func (abjq awsBatchJobQueueAttributes) SchedulingPolicyArn() terra.StringValue {
	return terra.ReferenceAsString(abjq.ref.Append("scheduling_policy_arn"))
}

// State returns a reference to field state of aws_batch_job_queue.
func (abjq awsBatchJobQueueAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(abjq.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_batch_job_queue.
func (abjq awsBatchJobQueueAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abjq.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_batch_job_queue.
func (abjq awsBatchJobQueueAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abjq.ref.Append("tags_all"))
}

func (abjq awsBatchJobQueueAttributes) ComputeEnvironmentOrder() terra.ListValue[ComputeEnvironmentOrderAttributes] {
	return terra.ReferenceAsList[ComputeEnvironmentOrderAttributes](abjq.ref.Append("compute_environment_order"))
}

func (abjq awsBatchJobQueueAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abjq.ref.Append("timeouts"))
}

type awsBatchJobQueueState struct {
	Arn                     string                         `json:"arn"`
	ComputeEnvironments     []string                       `json:"compute_environments"`
	Id                      string                         `json:"id"`
	Name                    string                         `json:"name"`
	Priority                float64                        `json:"priority"`
	SchedulingPolicyArn     string                         `json:"scheduling_policy_arn"`
	State                   string                         `json:"state"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	ComputeEnvironmentOrder []ComputeEnvironmentOrderState `json:"compute_environment_order"`
	Timeouts                *TimeoutsState                 `json:"timeouts"`
}
