// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codebuild_report_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codebuild_report_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodebuildReportGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acrg *Resource) Type() string {
	return "aws_codebuild_report_group"
}

// LocalName returns the local name for [Resource].
func (acrg *Resource) LocalName() string {
	return acrg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acrg *Resource) Configuration() interface{} {
	return acrg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acrg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acrg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acrg *Resource) Dependencies() terra.Dependencies {
	return acrg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acrg *Resource) LifecycleManagement() *terra.Lifecycle {
	return acrg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acrg *Resource) Attributes() awsCodebuildReportGroupAttributes {
	return awsCodebuildReportGroupAttributes{ref: terra.ReferenceResource(acrg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acrg *Resource) ImportState(state io.Reader) error {
	acrg.state = &awsCodebuildReportGroupState{}
	if err := json.NewDecoder(state).Decode(acrg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acrg.Type(), acrg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acrg *Resource) State() (*awsCodebuildReportGroupState, bool) {
	return acrg.state, acrg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acrg *Resource) StateMust() *awsCodebuildReportGroupState {
	if acrg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acrg.Type(), acrg.LocalName()))
	}
	return acrg.state
}

// Args contains the configurations for aws_codebuild_report_group.
type Args struct {
	// DeleteReports: bool, optional
	DeleteReports terra.BoolValue `hcl:"delete_reports,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ExportConfig: required
	ExportConfig *ExportConfig `hcl:"export_config,block" validate:"required"`
}

type awsCodebuildReportGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_codebuild_report_group.
func (acrg awsCodebuildReportGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acrg.ref.Append("arn"))
}

// Created returns a reference to field created of aws_codebuild_report_group.
func (acrg awsCodebuildReportGroupAttributes) Created() terra.StringValue {
	return terra.ReferenceAsString(acrg.ref.Append("created"))
}

// DeleteReports returns a reference to field delete_reports of aws_codebuild_report_group.
func (acrg awsCodebuildReportGroupAttributes) DeleteReports() terra.BoolValue {
	return terra.ReferenceAsBool(acrg.ref.Append("delete_reports"))
}

// Id returns a reference to field id of aws_codebuild_report_group.
func (acrg awsCodebuildReportGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acrg.ref.Append("id"))
}

// Name returns a reference to field name of aws_codebuild_report_group.
func (acrg awsCodebuildReportGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acrg.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_codebuild_report_group.
func (acrg awsCodebuildReportGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acrg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_codebuild_report_group.
func (acrg awsCodebuildReportGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acrg.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_codebuild_report_group.
func (acrg awsCodebuildReportGroupAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(acrg.ref.Append("type"))
}

func (acrg awsCodebuildReportGroupAttributes) ExportConfig() terra.ListValue[ExportConfigAttributes] {
	return terra.ReferenceAsList[ExportConfigAttributes](acrg.ref.Append("export_config"))
}

type awsCodebuildReportGroupState struct {
	Arn           string              `json:"arn"`
	Created       string              `json:"created"`
	DeleteReports bool                `json:"delete_reports"`
	Id            string              `json:"id"`
	Name          string              `json:"name"`
	Tags          map[string]string   `json:"tags"`
	TagsAll       map[string]string   `json:"tags_all"`
	Type          string              `json:"type"`
	ExportConfig  []ExportConfigState `json:"export_config"`
}
