// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lambda_permission

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lambda_permission.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLambdaPermissionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alp *Resource) Type() string {
	return "aws_lambda_permission"
}

// LocalName returns the local name for [Resource].
func (alp *Resource) LocalName() string {
	return alp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alp *Resource) Configuration() interface{} {
	return alp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alp *Resource) Dependencies() terra.Dependencies {
	return alp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alp *Resource) LifecycleManagement() *terra.Lifecycle {
	return alp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alp *Resource) Attributes() awsLambdaPermissionAttributes {
	return awsLambdaPermissionAttributes{ref: terra.ReferenceResource(alp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alp *Resource) ImportState(state io.Reader) error {
	alp.state = &awsLambdaPermissionState{}
	if err := json.NewDecoder(state).Decode(alp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alp.Type(), alp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alp *Resource) State() (*awsLambdaPermissionState, bool) {
	return alp.state, alp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alp *Resource) StateMust() *awsLambdaPermissionState {
	if alp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alp.Type(), alp.LocalName()))
	}
	return alp.state
}

// Args contains the configurations for aws_lambda_permission.
type Args struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// EventSourceToken: string, optional
	EventSourceToken terra.StringValue `hcl:"event_source_token,attr"`
	// FunctionName: string, required
	FunctionName terra.StringValue `hcl:"function_name,attr" validate:"required"`
	// FunctionUrlAuthType: string, optional
	FunctionUrlAuthType terra.StringValue `hcl:"function_url_auth_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
	// PrincipalOrgId: string, optional
	PrincipalOrgId terra.StringValue `hcl:"principal_org_id,attr"`
	// Qualifier: string, optional
	Qualifier terra.StringValue `hcl:"qualifier,attr"`
	// SourceAccount: string, optional
	SourceAccount terra.StringValue `hcl:"source_account,attr"`
	// SourceArn: string, optional
	SourceArn terra.StringValue `hcl:"source_arn,attr"`
	// StatementId: string, optional
	StatementId terra.StringValue `hcl:"statement_id,attr"`
	// StatementIdPrefix: string, optional
	StatementIdPrefix terra.StringValue `hcl:"statement_id_prefix,attr"`
}

type awsLambdaPermissionAttributes struct {
	ref terra.Reference
}

// Action returns a reference to field action of aws_lambda_permission.
func (alp awsLambdaPermissionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("action"))
}

// EventSourceToken returns a reference to field event_source_token of aws_lambda_permission.
func (alp awsLambdaPermissionAttributes) EventSourceToken() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("event_source_token"))
}

// FunctionName returns a reference to field function_name of aws_lambda_permission.
func (alp awsLambdaPermissionAttributes) FunctionName() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("function_name"))
}

// FunctionUrlAuthType returns a reference to field function_url_auth_type of aws_lambda_permission.
func (alp awsLambdaPermissionAttributes) FunctionUrlAuthType() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("function_url_auth_type"))
}

// Id returns a reference to field id of aws_lambda_permission.
func (alp awsLambdaPermissionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("id"))
}

// Principal returns a reference to field principal of aws_lambda_permission.
func (alp awsLambdaPermissionAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("principal"))
}

// PrincipalOrgId returns a reference to field principal_org_id of aws_lambda_permission.
func (alp awsLambdaPermissionAttributes) PrincipalOrgId() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("principal_org_id"))
}

// Qualifier returns a reference to field qualifier of aws_lambda_permission.
func (alp awsLambdaPermissionAttributes) Qualifier() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("qualifier"))
}

// SourceAccount returns a reference to field source_account of aws_lambda_permission.
func (alp awsLambdaPermissionAttributes) SourceAccount() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("source_account"))
}

// SourceArn returns a reference to field source_arn of aws_lambda_permission.
func (alp awsLambdaPermissionAttributes) SourceArn() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("source_arn"))
}

// StatementId returns a reference to field statement_id of aws_lambda_permission.
func (alp awsLambdaPermissionAttributes) StatementId() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("statement_id"))
}

// StatementIdPrefix returns a reference to field statement_id_prefix of aws_lambda_permission.
func (alp awsLambdaPermissionAttributes) StatementIdPrefix() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("statement_id_prefix"))
}

type awsLambdaPermissionState struct {
	Action              string `json:"action"`
	EventSourceToken    string `json:"event_source_token"`
	FunctionName        string `json:"function_name"`
	FunctionUrlAuthType string `json:"function_url_auth_type"`
	Id                  string `json:"id"`
	Principal           string `json:"principal"`
	PrincipalOrgId      string `json:"principal_org_id"`
	Qualifier           string `json:"qualifier"`
	SourceAccount       string `json:"source_account"`
	SourceArn           string `json:"source_arn"`
	StatementId         string `json:"statement_id"`
	StatementIdPrefix   string `json:"statement_id_prefix"`
}
