// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kms_grant

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kms_grant.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKmsGrantState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akg *Resource) Type() string {
	return "aws_kms_grant"
}

// LocalName returns the local name for [Resource].
func (akg *Resource) LocalName() string {
	return akg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akg *Resource) Configuration() interface{} {
	return akg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akg *Resource) Dependencies() terra.Dependencies {
	return akg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akg *Resource) LifecycleManagement() *terra.Lifecycle {
	return akg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akg *Resource) Attributes() awsKmsGrantAttributes {
	return awsKmsGrantAttributes{ref: terra.ReferenceResource(akg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akg *Resource) ImportState(state io.Reader) error {
	akg.state = &awsKmsGrantState{}
	if err := json.NewDecoder(state).Decode(akg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akg.Type(), akg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akg *Resource) State() (*awsKmsGrantState, bool) {
	return akg.state, akg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akg *Resource) StateMust() *awsKmsGrantState {
	if akg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akg.Type(), akg.LocalName()))
	}
	return akg.state
}

// Args contains the configurations for aws_kms_grant.
type Args struct {
	// GrantCreationTokens: set of string, optional
	GrantCreationTokens terra.SetValue[terra.StringValue] `hcl:"grant_creation_tokens,attr"`
	// GranteePrincipal: string, required
	GranteePrincipal terra.StringValue `hcl:"grantee_principal,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyId: string, required
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Operations: set of string, required
	Operations terra.SetValue[terra.StringValue] `hcl:"operations,attr" validate:"required"`
	// RetireOnDelete: bool, optional
	RetireOnDelete terra.BoolValue `hcl:"retire_on_delete,attr"`
	// RetiringPrincipal: string, optional
	RetiringPrincipal terra.StringValue `hcl:"retiring_principal,attr"`
	// Constraints: min=0
	Constraints []Constraints `hcl:"constraints,block" validate:"min=0"`
}

type awsKmsGrantAttributes struct {
	ref terra.Reference
}

// GrantCreationTokens returns a reference to field grant_creation_tokens of aws_kms_grant.
func (akg awsKmsGrantAttributes) GrantCreationTokens() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](akg.ref.Append("grant_creation_tokens"))
}

// GrantId returns a reference to field grant_id of aws_kms_grant.
func (akg awsKmsGrantAttributes) GrantId() terra.StringValue {
	return terra.ReferenceAsString(akg.ref.Append("grant_id"))
}

// GrantToken returns a reference to field grant_token of aws_kms_grant.
func (akg awsKmsGrantAttributes) GrantToken() terra.StringValue {
	return terra.ReferenceAsString(akg.ref.Append("grant_token"))
}

// GranteePrincipal returns a reference to field grantee_principal of aws_kms_grant.
func (akg awsKmsGrantAttributes) GranteePrincipal() terra.StringValue {
	return terra.ReferenceAsString(akg.ref.Append("grantee_principal"))
}

// Id returns a reference to field id of aws_kms_grant.
func (akg awsKmsGrantAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akg.ref.Append("id"))
}

// KeyId returns a reference to field key_id of aws_kms_grant.
func (akg awsKmsGrantAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(akg.ref.Append("key_id"))
}

// Name returns a reference to field name of aws_kms_grant.
func (akg awsKmsGrantAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akg.ref.Append("name"))
}

// Operations returns a reference to field operations of aws_kms_grant.
func (akg awsKmsGrantAttributes) Operations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](akg.ref.Append("operations"))
}

// RetireOnDelete returns a reference to field retire_on_delete of aws_kms_grant.
func (akg awsKmsGrantAttributes) RetireOnDelete() terra.BoolValue {
	return terra.ReferenceAsBool(akg.ref.Append("retire_on_delete"))
}

// RetiringPrincipal returns a reference to field retiring_principal of aws_kms_grant.
func (akg awsKmsGrantAttributes) RetiringPrincipal() terra.StringValue {
	return terra.ReferenceAsString(akg.ref.Append("retiring_principal"))
}

func (akg awsKmsGrantAttributes) Constraints() terra.SetValue[ConstraintsAttributes] {
	return terra.ReferenceAsSet[ConstraintsAttributes](akg.ref.Append("constraints"))
}

type awsKmsGrantState struct {
	GrantCreationTokens []string           `json:"grant_creation_tokens"`
	GrantId             string             `json:"grant_id"`
	GrantToken          string             `json:"grant_token"`
	GranteePrincipal    string             `json:"grantee_principal"`
	Id                  string             `json:"id"`
	KeyId               string             `json:"key_id"`
	Name                string             `json:"name"`
	Operations          []string           `json:"operations"`
	RetireOnDelete      bool               `json:"retire_on_delete"`
	RetiringPrincipal   string             `json:"retiring_principal"`
	Constraints         []ConstraintsState `json:"constraints"`
}
