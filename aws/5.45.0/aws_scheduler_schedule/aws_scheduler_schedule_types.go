// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_scheduler_schedule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type FlexibleTimeWindow struct {
	// MaximumWindowInMinutes: number, optional
	MaximumWindowInMinutes terra.NumberValue `hcl:"maximum_window_in_minutes,attr"`
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type Target struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// Input: string, optional
	Input terra.StringValue `hcl:"input,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TargetDeadLetterConfig: optional
	DeadLetterConfig *TargetDeadLetterConfig `hcl:"dead_letter_config,block"`
	// TargetEcsParameters: optional
	EcsParameters *TargetEcsParameters `hcl:"ecs_parameters,block"`
	// TargetEventbridgeParameters: optional
	EventbridgeParameters *TargetEventbridgeParameters `hcl:"eventbridge_parameters,block"`
	// TargetKinesisParameters: optional
	KinesisParameters *TargetKinesisParameters `hcl:"kinesis_parameters,block"`
	// TargetRetryPolicy: optional
	RetryPolicy *TargetRetryPolicy `hcl:"retry_policy,block"`
	// TargetSagemakerPipelineParameters: optional
	SagemakerPipelineParameters *TargetSagemakerPipelineParameters `hcl:"sagemaker_pipeline_parameters,block"`
	// TargetSqsParameters: optional
	SqsParameters *TargetSqsParameters `hcl:"sqs_parameters,block"`
}

type TargetDeadLetterConfig struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
}

type TargetEcsParameters struct {
	// EnableEcsManagedTags: bool, optional
	EnableEcsManagedTags terra.BoolValue `hcl:"enable_ecs_managed_tags,attr"`
	// EnableExecuteCommand: bool, optional
	EnableExecuteCommand terra.BoolValue `hcl:"enable_execute_command,attr"`
	// Group: string, optional
	Group terra.StringValue `hcl:"group,attr"`
	// LaunchType: string, optional
	LaunchType terra.StringValue `hcl:"launch_type,attr"`
	// PlatformVersion: string, optional
	PlatformVersion terra.StringValue `hcl:"platform_version,attr"`
	// PropagateTags: string, optional
	PropagateTags terra.StringValue `hcl:"propagate_tags,attr"`
	// ReferenceId: string, optional
	ReferenceId terra.StringValue `hcl:"reference_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TaskCount: number, optional
	TaskCount terra.NumberValue `hcl:"task_count,attr"`
	// TaskDefinitionArn: string, required
	TaskDefinitionArn terra.StringValue `hcl:"task_definition_arn,attr" validate:"required"`
	// TargetEcsParametersCapacityProviderStrategy: min=0,max=6
	CapacityProviderStrategy []TargetEcsParametersCapacityProviderStrategy `hcl:"capacity_provider_strategy,block" validate:"min=0,max=6"`
	// TargetEcsParametersNetworkConfiguration: optional
	NetworkConfiguration *TargetEcsParametersNetworkConfiguration `hcl:"network_configuration,block"`
	// TargetEcsParametersPlacementConstraints: min=0,max=10
	PlacementConstraints []TargetEcsParametersPlacementConstraints `hcl:"placement_constraints,block" validate:"min=0,max=10"`
	// TargetEcsParametersPlacementStrategy: min=0,max=5
	PlacementStrategy []TargetEcsParametersPlacementStrategy `hcl:"placement_strategy,block" validate:"min=0,max=5"`
}

type TargetEcsParametersCapacityProviderStrategy struct {
	// Base: number, optional
	Base terra.NumberValue `hcl:"base,attr"`
	// CapacityProvider: string, required
	CapacityProvider terra.StringValue `hcl:"capacity_provider,attr" validate:"required"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type TargetEcsParametersNetworkConfiguration struct {
	// AssignPublicIp: bool, optional
	AssignPublicIp terra.BoolValue `hcl:"assign_public_ip,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Subnets: set of string, required
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type TargetEcsParametersPlacementConstraints struct {
	// Expression: string, optional
	Expression terra.StringValue `hcl:"expression,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type TargetEcsParametersPlacementStrategy struct {
	// Field: string, optional
	Field terra.StringValue `hcl:"field,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type TargetEventbridgeParameters struct {
	// DetailType: string, required
	DetailType terra.StringValue `hcl:"detail_type,attr" validate:"required"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
}

type TargetKinesisParameters struct {
	// PartitionKey: string, required
	PartitionKey terra.StringValue `hcl:"partition_key,attr" validate:"required"`
}

type TargetRetryPolicy struct {
	// MaximumEventAgeInSeconds: number, optional
	MaximumEventAgeInSeconds terra.NumberValue `hcl:"maximum_event_age_in_seconds,attr"`
	// MaximumRetryAttempts: number, optional
	MaximumRetryAttempts terra.NumberValue `hcl:"maximum_retry_attempts,attr"`
}

type TargetSagemakerPipelineParameters struct {
	// TargetSagemakerPipelineParametersPipelineParameter: min=0,max=200
	PipelineParameter []TargetSagemakerPipelineParametersPipelineParameter `hcl:"pipeline_parameter,block" validate:"min=0,max=200"`
}

type TargetSagemakerPipelineParametersPipelineParameter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type TargetSqsParameters struct {
	// MessageGroupId: string, optional
	MessageGroupId terra.StringValue `hcl:"message_group_id,attr"`
}

type FlexibleTimeWindowAttributes struct {
	ref terra.Reference
}

func (ftw FlexibleTimeWindowAttributes) InternalRef() (terra.Reference, error) {
	return ftw.ref, nil
}

func (ftw FlexibleTimeWindowAttributes) InternalWithRef(ref terra.Reference) FlexibleTimeWindowAttributes {
	return FlexibleTimeWindowAttributes{ref: ref}
}

func (ftw FlexibleTimeWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ftw.ref.InternalTokens()
}

func (ftw FlexibleTimeWindowAttributes) MaximumWindowInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ftw.ref.Append("maximum_window_in_minutes"))
}

func (ftw FlexibleTimeWindowAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(ftw.ref.Append("mode"))
}

type TargetAttributes struct {
	ref terra.Reference
}

func (t TargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TargetAttributes) InternalWithRef(ref terra.Reference) TargetAttributes {
	return TargetAttributes{ref: ref}
}

func (t TargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TargetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("arn"))
}

func (t TargetAttributes) Input() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("input"))
}

func (t TargetAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("role_arn"))
}

func (t TargetAttributes) DeadLetterConfig() terra.ListValue[TargetDeadLetterConfigAttributes] {
	return terra.ReferenceAsList[TargetDeadLetterConfigAttributes](t.ref.Append("dead_letter_config"))
}

func (t TargetAttributes) EcsParameters() terra.ListValue[TargetEcsParametersAttributes] {
	return terra.ReferenceAsList[TargetEcsParametersAttributes](t.ref.Append("ecs_parameters"))
}

func (t TargetAttributes) EventbridgeParameters() terra.ListValue[TargetEventbridgeParametersAttributes] {
	return terra.ReferenceAsList[TargetEventbridgeParametersAttributes](t.ref.Append("eventbridge_parameters"))
}

func (t TargetAttributes) KinesisParameters() terra.ListValue[TargetKinesisParametersAttributes] {
	return terra.ReferenceAsList[TargetKinesisParametersAttributes](t.ref.Append("kinesis_parameters"))
}

func (t TargetAttributes) RetryPolicy() terra.ListValue[TargetRetryPolicyAttributes] {
	return terra.ReferenceAsList[TargetRetryPolicyAttributes](t.ref.Append("retry_policy"))
}

func (t TargetAttributes) SagemakerPipelineParameters() terra.ListValue[TargetSagemakerPipelineParametersAttributes] {
	return terra.ReferenceAsList[TargetSagemakerPipelineParametersAttributes](t.ref.Append("sagemaker_pipeline_parameters"))
}

func (t TargetAttributes) SqsParameters() terra.ListValue[TargetSqsParametersAttributes] {
	return terra.ReferenceAsList[TargetSqsParametersAttributes](t.ref.Append("sqs_parameters"))
}

type TargetDeadLetterConfigAttributes struct {
	ref terra.Reference
}

func (dlc TargetDeadLetterConfigAttributes) InternalRef() (terra.Reference, error) {
	return dlc.ref, nil
}

func (dlc TargetDeadLetterConfigAttributes) InternalWithRef(ref terra.Reference) TargetDeadLetterConfigAttributes {
	return TargetDeadLetterConfigAttributes{ref: ref}
}

func (dlc TargetDeadLetterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dlc.ref.InternalTokens()
}

func (dlc TargetDeadLetterConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dlc.ref.Append("arn"))
}

type TargetEcsParametersAttributes struct {
	ref terra.Reference
}

func (ep TargetEcsParametersAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep TargetEcsParametersAttributes) InternalWithRef(ref terra.Reference) TargetEcsParametersAttributes {
	return TargetEcsParametersAttributes{ref: ref}
}

func (ep TargetEcsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep TargetEcsParametersAttributes) EnableEcsManagedTags() terra.BoolValue {
	return terra.ReferenceAsBool(ep.ref.Append("enable_ecs_managed_tags"))
}

func (ep TargetEcsParametersAttributes) EnableExecuteCommand() terra.BoolValue {
	return terra.ReferenceAsBool(ep.ref.Append("enable_execute_command"))
}

func (ep TargetEcsParametersAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("group"))
}

func (ep TargetEcsParametersAttributes) LaunchType() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("launch_type"))
}

func (ep TargetEcsParametersAttributes) PlatformVersion() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("platform_version"))
}

func (ep TargetEcsParametersAttributes) PropagateTags() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("propagate_tags"))
}

func (ep TargetEcsParametersAttributes) ReferenceId() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("reference_id"))
}

func (ep TargetEcsParametersAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ep.ref.Append("tags"))
}

func (ep TargetEcsParametersAttributes) TaskCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ep.ref.Append("task_count"))
}

func (ep TargetEcsParametersAttributes) TaskDefinitionArn() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("task_definition_arn"))
}

func (ep TargetEcsParametersAttributes) CapacityProviderStrategy() terra.SetValue[TargetEcsParametersCapacityProviderStrategyAttributes] {
	return terra.ReferenceAsSet[TargetEcsParametersCapacityProviderStrategyAttributes](ep.ref.Append("capacity_provider_strategy"))
}

func (ep TargetEcsParametersAttributes) NetworkConfiguration() terra.ListValue[TargetEcsParametersNetworkConfigurationAttributes] {
	return terra.ReferenceAsList[TargetEcsParametersNetworkConfigurationAttributes](ep.ref.Append("network_configuration"))
}

func (ep TargetEcsParametersAttributes) PlacementConstraints() terra.SetValue[TargetEcsParametersPlacementConstraintsAttributes] {
	return terra.ReferenceAsSet[TargetEcsParametersPlacementConstraintsAttributes](ep.ref.Append("placement_constraints"))
}

func (ep TargetEcsParametersAttributes) PlacementStrategy() terra.SetValue[TargetEcsParametersPlacementStrategyAttributes] {
	return terra.ReferenceAsSet[TargetEcsParametersPlacementStrategyAttributes](ep.ref.Append("placement_strategy"))
}

type TargetEcsParametersCapacityProviderStrategyAttributes struct {
	ref terra.Reference
}

func (cps TargetEcsParametersCapacityProviderStrategyAttributes) InternalRef() (terra.Reference, error) {
	return cps.ref, nil
}

func (cps TargetEcsParametersCapacityProviderStrategyAttributes) InternalWithRef(ref terra.Reference) TargetEcsParametersCapacityProviderStrategyAttributes {
	return TargetEcsParametersCapacityProviderStrategyAttributes{ref: ref}
}

func (cps TargetEcsParametersCapacityProviderStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cps.ref.InternalTokens()
}

func (cps TargetEcsParametersCapacityProviderStrategyAttributes) Base() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("base"))
}

func (cps TargetEcsParametersCapacityProviderStrategyAttributes) CapacityProvider() terra.StringValue {
	return terra.ReferenceAsString(cps.ref.Append("capacity_provider"))
}

func (cps TargetEcsParametersCapacityProviderStrategyAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("weight"))
}

type TargetEcsParametersNetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc TargetEcsParametersNetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc TargetEcsParametersNetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) TargetEcsParametersNetworkConfigurationAttributes {
	return TargetEcsParametersNetworkConfigurationAttributes{ref: ref}
}

func (nc TargetEcsParametersNetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc TargetEcsParametersNetworkConfigurationAttributes) AssignPublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("assign_public_ip"))
}

func (nc TargetEcsParametersNetworkConfigurationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("security_groups"))
}

func (nc TargetEcsParametersNetworkConfigurationAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("subnets"))
}

type TargetEcsParametersPlacementConstraintsAttributes struct {
	ref terra.Reference
}

func (pc TargetEcsParametersPlacementConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc TargetEcsParametersPlacementConstraintsAttributes) InternalWithRef(ref terra.Reference) TargetEcsParametersPlacementConstraintsAttributes {
	return TargetEcsParametersPlacementConstraintsAttributes{ref: ref}
}

func (pc TargetEcsParametersPlacementConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc TargetEcsParametersPlacementConstraintsAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("expression"))
}

func (pc TargetEcsParametersPlacementConstraintsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("type"))
}

type TargetEcsParametersPlacementStrategyAttributes struct {
	ref terra.Reference
}

func (ps TargetEcsParametersPlacementStrategyAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps TargetEcsParametersPlacementStrategyAttributes) InternalWithRef(ref terra.Reference) TargetEcsParametersPlacementStrategyAttributes {
	return TargetEcsParametersPlacementStrategyAttributes{ref: ref}
}

func (ps TargetEcsParametersPlacementStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps TargetEcsParametersPlacementStrategyAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("field"))
}

func (ps TargetEcsParametersPlacementStrategyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("type"))
}

type TargetEventbridgeParametersAttributes struct {
	ref terra.Reference
}

func (ep TargetEventbridgeParametersAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep TargetEventbridgeParametersAttributes) InternalWithRef(ref terra.Reference) TargetEventbridgeParametersAttributes {
	return TargetEventbridgeParametersAttributes{ref: ref}
}

func (ep TargetEventbridgeParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep TargetEventbridgeParametersAttributes) DetailType() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("detail_type"))
}

func (ep TargetEventbridgeParametersAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("source"))
}

type TargetKinesisParametersAttributes struct {
	ref terra.Reference
}

func (kp TargetKinesisParametersAttributes) InternalRef() (terra.Reference, error) {
	return kp.ref, nil
}

func (kp TargetKinesisParametersAttributes) InternalWithRef(ref terra.Reference) TargetKinesisParametersAttributes {
	return TargetKinesisParametersAttributes{ref: ref}
}

func (kp TargetKinesisParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kp.ref.InternalTokens()
}

func (kp TargetKinesisParametersAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceAsString(kp.ref.Append("partition_key"))
}

type TargetRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp TargetRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp TargetRetryPolicyAttributes) InternalWithRef(ref terra.Reference) TargetRetryPolicyAttributes {
	return TargetRetryPolicyAttributes{ref: ref}
}

func (rp TargetRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp TargetRetryPolicyAttributes) MaximumEventAgeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("maximum_event_age_in_seconds"))
}

func (rp TargetRetryPolicyAttributes) MaximumRetryAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("maximum_retry_attempts"))
}

type TargetSagemakerPipelineParametersAttributes struct {
	ref terra.Reference
}

func (spp TargetSagemakerPipelineParametersAttributes) InternalRef() (terra.Reference, error) {
	return spp.ref, nil
}

func (spp TargetSagemakerPipelineParametersAttributes) InternalWithRef(ref terra.Reference) TargetSagemakerPipelineParametersAttributes {
	return TargetSagemakerPipelineParametersAttributes{ref: ref}
}

func (spp TargetSagemakerPipelineParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spp.ref.InternalTokens()
}

func (spp TargetSagemakerPipelineParametersAttributes) PipelineParameter() terra.SetValue[TargetSagemakerPipelineParametersPipelineParameterAttributes] {
	return terra.ReferenceAsSet[TargetSagemakerPipelineParametersPipelineParameterAttributes](spp.ref.Append("pipeline_parameter"))
}

type TargetSagemakerPipelineParametersPipelineParameterAttributes struct {
	ref terra.Reference
}

func (pp TargetSagemakerPipelineParametersPipelineParameterAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp TargetSagemakerPipelineParametersPipelineParameterAttributes) InternalWithRef(ref terra.Reference) TargetSagemakerPipelineParametersPipelineParameterAttributes {
	return TargetSagemakerPipelineParametersPipelineParameterAttributes{ref: ref}
}

func (pp TargetSagemakerPipelineParametersPipelineParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp TargetSagemakerPipelineParametersPipelineParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("name"))
}

func (pp TargetSagemakerPipelineParametersPipelineParameterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("value"))
}

type TargetSqsParametersAttributes struct {
	ref terra.Reference
}

func (sp TargetSqsParametersAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp TargetSqsParametersAttributes) InternalWithRef(ref terra.Reference) TargetSqsParametersAttributes {
	return TargetSqsParametersAttributes{ref: ref}
}

func (sp TargetSqsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp TargetSqsParametersAttributes) MessageGroupId() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("message_group_id"))
}

type FlexibleTimeWindowState struct {
	MaximumWindowInMinutes float64 `json:"maximum_window_in_minutes"`
	Mode                   string  `json:"mode"`
}

type TargetState struct {
	Arn                         string                                   `json:"arn"`
	Input                       string                                   `json:"input"`
	RoleArn                     string                                   `json:"role_arn"`
	DeadLetterConfig            []TargetDeadLetterConfigState            `json:"dead_letter_config"`
	EcsParameters               []TargetEcsParametersState               `json:"ecs_parameters"`
	EventbridgeParameters       []TargetEventbridgeParametersState       `json:"eventbridge_parameters"`
	KinesisParameters           []TargetKinesisParametersState           `json:"kinesis_parameters"`
	RetryPolicy                 []TargetRetryPolicyState                 `json:"retry_policy"`
	SagemakerPipelineParameters []TargetSagemakerPipelineParametersState `json:"sagemaker_pipeline_parameters"`
	SqsParameters               []TargetSqsParametersState               `json:"sqs_parameters"`
}

type TargetDeadLetterConfigState struct {
	Arn string `json:"arn"`
}

type TargetEcsParametersState struct {
	EnableEcsManagedTags     bool                                               `json:"enable_ecs_managed_tags"`
	EnableExecuteCommand     bool                                               `json:"enable_execute_command"`
	Group                    string                                             `json:"group"`
	LaunchType               string                                             `json:"launch_type"`
	PlatformVersion          string                                             `json:"platform_version"`
	PropagateTags            string                                             `json:"propagate_tags"`
	ReferenceId              string                                             `json:"reference_id"`
	Tags                     map[string]string                                  `json:"tags"`
	TaskCount                float64                                            `json:"task_count"`
	TaskDefinitionArn        string                                             `json:"task_definition_arn"`
	CapacityProviderStrategy []TargetEcsParametersCapacityProviderStrategyState `json:"capacity_provider_strategy"`
	NetworkConfiguration     []TargetEcsParametersNetworkConfigurationState     `json:"network_configuration"`
	PlacementConstraints     []TargetEcsParametersPlacementConstraintsState     `json:"placement_constraints"`
	PlacementStrategy        []TargetEcsParametersPlacementStrategyState        `json:"placement_strategy"`
}

type TargetEcsParametersCapacityProviderStrategyState struct {
	Base             float64 `json:"base"`
	CapacityProvider string  `json:"capacity_provider"`
	Weight           float64 `json:"weight"`
}

type TargetEcsParametersNetworkConfigurationState struct {
	AssignPublicIp bool     `json:"assign_public_ip"`
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type TargetEcsParametersPlacementConstraintsState struct {
	Expression string `json:"expression"`
	Type       string `json:"type"`
}

type TargetEcsParametersPlacementStrategyState struct {
	Field string `json:"field"`
	Type  string `json:"type"`
}

type TargetEventbridgeParametersState struct {
	DetailType string `json:"detail_type"`
	Source     string `json:"source"`
}

type TargetKinesisParametersState struct {
	PartitionKey string `json:"partition_key"`
}

type TargetRetryPolicyState struct {
	MaximumEventAgeInSeconds float64 `json:"maximum_event_age_in_seconds"`
	MaximumRetryAttempts     float64 `json:"maximum_retry_attempts"`
}

type TargetSagemakerPipelineParametersState struct {
	PipelineParameter []TargetSagemakerPipelineParametersPipelineParameterState `json:"pipeline_parameter"`
}

type TargetSagemakerPipelineParametersPipelineParameterState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TargetSqsParametersState struct {
	MessageGroupId string `json:"message_group_id"`
}
