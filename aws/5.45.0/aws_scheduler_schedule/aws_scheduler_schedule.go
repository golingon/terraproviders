// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_scheduler_schedule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_scheduler_schedule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSchedulerScheduleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ass *Resource) Type() string {
	return "aws_scheduler_schedule"
}

// LocalName returns the local name for [Resource].
func (ass *Resource) LocalName() string {
	return ass.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ass *Resource) Configuration() interface{} {
	return ass.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ass *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ass)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ass *Resource) Dependencies() terra.Dependencies {
	return ass.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ass *Resource) LifecycleManagement() *terra.Lifecycle {
	return ass.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ass *Resource) Attributes() awsSchedulerScheduleAttributes {
	return awsSchedulerScheduleAttributes{ref: terra.ReferenceResource(ass)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ass *Resource) ImportState(state io.Reader) error {
	ass.state = &awsSchedulerScheduleState{}
	if err := json.NewDecoder(state).Decode(ass.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ass.Type(), ass.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ass *Resource) State() (*awsSchedulerScheduleState, bool) {
	return ass.state, ass.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ass *Resource) StateMust() *awsSchedulerScheduleState {
	if ass.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ass.Type(), ass.LocalName()))
	}
	return ass.state
}

// Args contains the configurations for aws_scheduler_schedule.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EndDate: string, optional
	EndDate terra.StringValue `hcl:"end_date,attr"`
	// GroupName: string, optional
	GroupName terra.StringValue `hcl:"group_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// ScheduleExpression: string, required
	ScheduleExpression terra.StringValue `hcl:"schedule_expression,attr" validate:"required"`
	// ScheduleExpressionTimezone: string, optional
	ScheduleExpressionTimezone terra.StringValue `hcl:"schedule_expression_timezone,attr"`
	// StartDate: string, optional
	StartDate terra.StringValue `hcl:"start_date,attr"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// FlexibleTimeWindow: required
	FlexibleTimeWindow *FlexibleTimeWindow `hcl:"flexible_time_window,block" validate:"required"`
	// Target: required
	Target *Target `hcl:"target,block" validate:"required"`
}

type awsSchedulerScheduleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_scheduler_schedule.
func (ass awsSchedulerScheduleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("arn"))
}

// Description returns a reference to field description of aws_scheduler_schedule.
func (ass awsSchedulerScheduleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("description"))
}

// EndDate returns a reference to field end_date of aws_scheduler_schedule.
func (ass awsSchedulerScheduleAttributes) EndDate() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("end_date"))
}

// GroupName returns a reference to field group_name of aws_scheduler_schedule.
func (ass awsSchedulerScheduleAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("group_name"))
}

// Id returns a reference to field id of aws_scheduler_schedule.
func (ass awsSchedulerScheduleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("id"))
}

// KmsKeyArn returns a reference to field kms_key_arn of aws_scheduler_schedule.
func (ass awsSchedulerScheduleAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("kms_key_arn"))
}

// Name returns a reference to field name of aws_scheduler_schedule.
func (ass awsSchedulerScheduleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_scheduler_schedule.
func (ass awsSchedulerScheduleAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("name_prefix"))
}

// ScheduleExpression returns a reference to field schedule_expression of aws_scheduler_schedule.
func (ass awsSchedulerScheduleAttributes) ScheduleExpression() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("schedule_expression"))
}

// ScheduleExpressionTimezone returns a reference to field schedule_expression_timezone of aws_scheduler_schedule.
func (ass awsSchedulerScheduleAttributes) ScheduleExpressionTimezone() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("schedule_expression_timezone"))
}

// StartDate returns a reference to field start_date of aws_scheduler_schedule.
func (ass awsSchedulerScheduleAttributes) StartDate() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("start_date"))
}

// State returns a reference to field state of aws_scheduler_schedule.
func (ass awsSchedulerScheduleAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("state"))
}

func (ass awsSchedulerScheduleAttributes) FlexibleTimeWindow() terra.ListValue[FlexibleTimeWindowAttributes] {
	return terra.ReferenceAsList[FlexibleTimeWindowAttributes](ass.ref.Append("flexible_time_window"))
}

func (ass awsSchedulerScheduleAttributes) Target() terra.ListValue[TargetAttributes] {
	return terra.ReferenceAsList[TargetAttributes](ass.ref.Append("target"))
}

type awsSchedulerScheduleState struct {
	Arn                        string                    `json:"arn"`
	Description                string                    `json:"description"`
	EndDate                    string                    `json:"end_date"`
	GroupName                  string                    `json:"group_name"`
	Id                         string                    `json:"id"`
	KmsKeyArn                  string                    `json:"kms_key_arn"`
	Name                       string                    `json:"name"`
	NamePrefix                 string                    `json:"name_prefix"`
	ScheduleExpression         string                    `json:"schedule_expression"`
	ScheduleExpressionTimezone string                    `json:"schedule_expression_timezone"`
	StartDate                  string                    `json:"start_date"`
	State                      string                    `json:"state"`
	FlexibleTimeWindow         []FlexibleTimeWindowState `json:"flexible_time_window"`
	Target                     []TargetState             `json:"target"`
}
