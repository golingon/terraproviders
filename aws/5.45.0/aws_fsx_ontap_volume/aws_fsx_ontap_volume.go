// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_ontap_volume

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_fsx_ontap_volume.
type Resource struct {
	Name      string
	Args      Args
	state     *awsFsxOntapVolumeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (afov *Resource) Type() string {
	return "aws_fsx_ontap_volume"
}

// LocalName returns the local name for [Resource].
func (afov *Resource) LocalName() string {
	return afov.Name
}

// Configuration returns the configuration (args) for [Resource].
func (afov *Resource) Configuration() interface{} {
	return afov.Args
}

// DependOn is used for other resources to depend on [Resource].
func (afov *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(afov)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (afov *Resource) Dependencies() terra.Dependencies {
	return afov.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (afov *Resource) LifecycleManagement() *terra.Lifecycle {
	return afov.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (afov *Resource) Attributes() awsFsxOntapVolumeAttributes {
	return awsFsxOntapVolumeAttributes{ref: terra.ReferenceResource(afov)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (afov *Resource) ImportState(state io.Reader) error {
	afov.state = &awsFsxOntapVolumeState{}
	if err := json.NewDecoder(state).Decode(afov.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afov.Type(), afov.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (afov *Resource) State() (*awsFsxOntapVolumeState, bool) {
	return afov.state, afov.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (afov *Resource) StateMust() *awsFsxOntapVolumeState {
	if afov.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afov.Type(), afov.LocalName()))
	}
	return afov.state
}

// Args contains the configurations for aws_fsx_ontap_volume.
type Args struct {
	// BypassSnaplockEnterpriseRetention: bool, optional
	BypassSnaplockEnterpriseRetention terra.BoolValue `hcl:"bypass_snaplock_enterprise_retention,attr"`
	// CopyTagsToBackups: bool, optional
	CopyTagsToBackups terra.BoolValue `hcl:"copy_tags_to_backups,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// JunctionPath: string, optional
	JunctionPath terra.StringValue `hcl:"junction_path,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OntapVolumeType: string, optional
	OntapVolumeType terra.StringValue `hcl:"ontap_volume_type,attr"`
	// SecurityStyle: string, optional
	SecurityStyle terra.StringValue `hcl:"security_style,attr"`
	// SizeInMegabytes: number, required
	SizeInMegabytes terra.NumberValue `hcl:"size_in_megabytes,attr" validate:"required"`
	// SkipFinalBackup: bool, optional
	SkipFinalBackup terra.BoolValue `hcl:"skip_final_backup,attr"`
	// SnapshotPolicy: string, optional
	SnapshotPolicy terra.StringValue `hcl:"snapshot_policy,attr"`
	// StorageEfficiencyEnabled: bool, optional
	StorageEfficiencyEnabled terra.BoolValue `hcl:"storage_efficiency_enabled,attr"`
	// StorageVirtualMachineId: string, required
	StorageVirtualMachineId terra.StringValue `hcl:"storage_virtual_machine_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VolumeType: string, optional
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
	// SnaplockConfiguration: optional
	SnaplockConfiguration *SnaplockConfiguration `hcl:"snaplock_configuration,block"`
	// TieringPolicy: optional
	TieringPolicy *TieringPolicy `hcl:"tiering_policy,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsFsxOntapVolumeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(afov.ref.Append("arn"))
}

// BypassSnaplockEnterpriseRetention returns a reference to field bypass_snaplock_enterprise_retention of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) BypassSnaplockEnterpriseRetention() terra.BoolValue {
	return terra.ReferenceAsBool(afov.ref.Append("bypass_snaplock_enterprise_retention"))
}

// CopyTagsToBackups returns a reference to field copy_tags_to_backups of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) CopyTagsToBackups() terra.BoolValue {
	return terra.ReferenceAsBool(afov.ref.Append("copy_tags_to_backups"))
}

// FileSystemId returns a reference to field file_system_id of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceAsString(afov.ref.Append("file_system_id"))
}

// FlexcacheEndpointType returns a reference to field flexcache_endpoint_type of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) FlexcacheEndpointType() terra.StringValue {
	return terra.ReferenceAsString(afov.ref.Append("flexcache_endpoint_type"))
}

// Id returns a reference to field id of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(afov.ref.Append("id"))
}

// JunctionPath returns a reference to field junction_path of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) JunctionPath() terra.StringValue {
	return terra.ReferenceAsString(afov.ref.Append("junction_path"))
}

// Name returns a reference to field name of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(afov.ref.Append("name"))
}

// OntapVolumeType returns a reference to field ontap_volume_type of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) OntapVolumeType() terra.StringValue {
	return terra.ReferenceAsString(afov.ref.Append("ontap_volume_type"))
}

// SecurityStyle returns a reference to field security_style of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) SecurityStyle() terra.StringValue {
	return terra.ReferenceAsString(afov.ref.Append("security_style"))
}

// SizeInMegabytes returns a reference to field size_in_megabytes of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) SizeInMegabytes() terra.NumberValue {
	return terra.ReferenceAsNumber(afov.ref.Append("size_in_megabytes"))
}

// SkipFinalBackup returns a reference to field skip_final_backup of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) SkipFinalBackup() terra.BoolValue {
	return terra.ReferenceAsBool(afov.ref.Append("skip_final_backup"))
}

// SnapshotPolicy returns a reference to field snapshot_policy of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) SnapshotPolicy() terra.StringValue {
	return terra.ReferenceAsString(afov.ref.Append("snapshot_policy"))
}

// StorageEfficiencyEnabled returns a reference to field storage_efficiency_enabled of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) StorageEfficiencyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(afov.ref.Append("storage_efficiency_enabled"))
}

// StorageVirtualMachineId returns a reference to field storage_virtual_machine_id of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) StorageVirtualMachineId() terra.StringValue {
	return terra.ReferenceAsString(afov.ref.Append("storage_virtual_machine_id"))
}

// Tags returns a reference to field tags of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afov.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afov.ref.Append("tags_all"))
}

// Uuid returns a reference to field uuid of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) Uuid() terra.StringValue {
	return terra.ReferenceAsString(afov.ref.Append("uuid"))
}

// VolumeType returns a reference to field volume_type of aws_fsx_ontap_volume.
func (afov awsFsxOntapVolumeAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(afov.ref.Append("volume_type"))
}

func (afov awsFsxOntapVolumeAttributes) SnaplockConfiguration() terra.ListValue[SnaplockConfigurationAttributes] {
	return terra.ReferenceAsList[SnaplockConfigurationAttributes](afov.ref.Append("snaplock_configuration"))
}

func (afov awsFsxOntapVolumeAttributes) TieringPolicy() terra.ListValue[TieringPolicyAttributes] {
	return terra.ReferenceAsList[TieringPolicyAttributes](afov.ref.Append("tiering_policy"))
}

func (afov awsFsxOntapVolumeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](afov.ref.Append("timeouts"))
}

type awsFsxOntapVolumeState struct {
	Arn                               string                       `json:"arn"`
	BypassSnaplockEnterpriseRetention bool                         `json:"bypass_snaplock_enterprise_retention"`
	CopyTagsToBackups                 bool                         `json:"copy_tags_to_backups"`
	FileSystemId                      string                       `json:"file_system_id"`
	FlexcacheEndpointType             string                       `json:"flexcache_endpoint_type"`
	Id                                string                       `json:"id"`
	JunctionPath                      string                       `json:"junction_path"`
	Name                              string                       `json:"name"`
	OntapVolumeType                   string                       `json:"ontap_volume_type"`
	SecurityStyle                     string                       `json:"security_style"`
	SizeInMegabytes                   float64                      `json:"size_in_megabytes"`
	SkipFinalBackup                   bool                         `json:"skip_final_backup"`
	SnapshotPolicy                    string                       `json:"snapshot_policy"`
	StorageEfficiencyEnabled          bool                         `json:"storage_efficiency_enabled"`
	StorageVirtualMachineId           string                       `json:"storage_virtual_machine_id"`
	Tags                              map[string]string            `json:"tags"`
	TagsAll                           map[string]string            `json:"tags_all"`
	Uuid                              string                       `json:"uuid"`
	VolumeType                        string                       `json:"volume_type"`
	SnaplockConfiguration             []SnaplockConfigurationState `json:"snaplock_configuration"`
	TieringPolicy                     []TieringPolicyState         `json:"tiering_policy"`
	Timeouts                          *TimeoutsState               `json:"timeouts"`
}
