// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_ontap_volume

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type SnaplockConfiguration struct {
	// AuditLogVolume: bool, optional
	AuditLogVolume terra.BoolValue `hcl:"audit_log_volume,attr"`
	// PrivilegedDelete: string, optional
	PrivilegedDelete terra.StringValue `hcl:"privileged_delete,attr"`
	// SnaplockType: string, required
	SnaplockType terra.StringValue `hcl:"snaplock_type,attr" validate:"required"`
	// VolumeAppendModeEnabled: bool, optional
	VolumeAppendModeEnabled terra.BoolValue `hcl:"volume_append_mode_enabled,attr"`
	// SnaplockConfigurationAutocommitPeriod: optional
	AutocommitPeriod *SnaplockConfigurationAutocommitPeriod `hcl:"autocommit_period,block"`
	// SnaplockConfigurationRetentionPeriod: optional
	RetentionPeriod *SnaplockConfigurationRetentionPeriod `hcl:"retention_period,block"`
}

type SnaplockConfigurationAutocommitPeriod struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: number, optional
	Value terra.NumberValue `hcl:"value,attr"`
}

type SnaplockConfigurationRetentionPeriod struct {
	// SnaplockConfigurationRetentionPeriodDefaultRetention: optional
	DefaultRetention *SnaplockConfigurationRetentionPeriodDefaultRetention `hcl:"default_retention,block"`
	// SnaplockConfigurationRetentionPeriodMaximumRetention: optional
	MaximumRetention *SnaplockConfigurationRetentionPeriodMaximumRetention `hcl:"maximum_retention,block"`
	// SnaplockConfigurationRetentionPeriodMinimumRetention: optional
	MinimumRetention *SnaplockConfigurationRetentionPeriodMinimumRetention `hcl:"minimum_retention,block"`
}

type SnaplockConfigurationRetentionPeriodDefaultRetention struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: number, optional
	Value terra.NumberValue `hcl:"value,attr"`
}

type SnaplockConfigurationRetentionPeriodMaximumRetention struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: number, optional
	Value terra.NumberValue `hcl:"value,attr"`
}

type SnaplockConfigurationRetentionPeriodMinimumRetention struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: number, optional
	Value terra.NumberValue `hcl:"value,attr"`
}

type TieringPolicy struct {
	// CoolingPeriod: number, optional
	CoolingPeriod terra.NumberValue `hcl:"cooling_period,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type SnaplockConfigurationAttributes struct {
	ref terra.Reference
}

func (sc SnaplockConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SnaplockConfigurationAttributes) InternalWithRef(ref terra.Reference) SnaplockConfigurationAttributes {
	return SnaplockConfigurationAttributes{ref: ref}
}

func (sc SnaplockConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SnaplockConfigurationAttributes) AuditLogVolume() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("audit_log_volume"))
}

func (sc SnaplockConfigurationAttributes) PrivilegedDelete() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("privileged_delete"))
}

func (sc SnaplockConfigurationAttributes) SnaplockType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("snaplock_type"))
}

func (sc SnaplockConfigurationAttributes) VolumeAppendModeEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("volume_append_mode_enabled"))
}

func (sc SnaplockConfigurationAttributes) AutocommitPeriod() terra.ListValue[SnaplockConfigurationAutocommitPeriodAttributes] {
	return terra.ReferenceAsList[SnaplockConfigurationAutocommitPeriodAttributes](sc.ref.Append("autocommit_period"))
}

func (sc SnaplockConfigurationAttributes) RetentionPeriod() terra.ListValue[SnaplockConfigurationRetentionPeriodAttributes] {
	return terra.ReferenceAsList[SnaplockConfigurationRetentionPeriodAttributes](sc.ref.Append("retention_period"))
}

type SnaplockConfigurationAutocommitPeriodAttributes struct {
	ref terra.Reference
}

func (ap SnaplockConfigurationAutocommitPeriodAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap SnaplockConfigurationAutocommitPeriodAttributes) InternalWithRef(ref terra.Reference) SnaplockConfigurationAutocommitPeriodAttributes {
	return SnaplockConfigurationAutocommitPeriodAttributes{ref: ref}
}

func (ap SnaplockConfigurationAutocommitPeriodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap SnaplockConfigurationAutocommitPeriodAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("type"))
}

func (ap SnaplockConfigurationAutocommitPeriodAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(ap.ref.Append("value"))
}

type SnaplockConfigurationRetentionPeriodAttributes struct {
	ref terra.Reference
}

func (rp SnaplockConfigurationRetentionPeriodAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp SnaplockConfigurationRetentionPeriodAttributes) InternalWithRef(ref terra.Reference) SnaplockConfigurationRetentionPeriodAttributes {
	return SnaplockConfigurationRetentionPeriodAttributes{ref: ref}
}

func (rp SnaplockConfigurationRetentionPeriodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp SnaplockConfigurationRetentionPeriodAttributes) DefaultRetention() terra.ListValue[SnaplockConfigurationRetentionPeriodDefaultRetentionAttributes] {
	return terra.ReferenceAsList[SnaplockConfigurationRetentionPeriodDefaultRetentionAttributes](rp.ref.Append("default_retention"))
}

func (rp SnaplockConfigurationRetentionPeriodAttributes) MaximumRetention() terra.ListValue[SnaplockConfigurationRetentionPeriodMaximumRetentionAttributes] {
	return terra.ReferenceAsList[SnaplockConfigurationRetentionPeriodMaximumRetentionAttributes](rp.ref.Append("maximum_retention"))
}

func (rp SnaplockConfigurationRetentionPeriodAttributes) MinimumRetention() terra.ListValue[SnaplockConfigurationRetentionPeriodMinimumRetentionAttributes] {
	return terra.ReferenceAsList[SnaplockConfigurationRetentionPeriodMinimumRetentionAttributes](rp.ref.Append("minimum_retention"))
}

type SnaplockConfigurationRetentionPeriodDefaultRetentionAttributes struct {
	ref terra.Reference
}

func (dr SnaplockConfigurationRetentionPeriodDefaultRetentionAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr SnaplockConfigurationRetentionPeriodDefaultRetentionAttributes) InternalWithRef(ref terra.Reference) SnaplockConfigurationRetentionPeriodDefaultRetentionAttributes {
	return SnaplockConfigurationRetentionPeriodDefaultRetentionAttributes{ref: ref}
}

func (dr SnaplockConfigurationRetentionPeriodDefaultRetentionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr SnaplockConfigurationRetentionPeriodDefaultRetentionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("type"))
}

func (dr SnaplockConfigurationRetentionPeriodDefaultRetentionAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("value"))
}

type SnaplockConfigurationRetentionPeriodMaximumRetentionAttributes struct {
	ref terra.Reference
}

func (mr SnaplockConfigurationRetentionPeriodMaximumRetentionAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr SnaplockConfigurationRetentionPeriodMaximumRetentionAttributes) InternalWithRef(ref terra.Reference) SnaplockConfigurationRetentionPeriodMaximumRetentionAttributes {
	return SnaplockConfigurationRetentionPeriodMaximumRetentionAttributes{ref: ref}
}

func (mr SnaplockConfigurationRetentionPeriodMaximumRetentionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr SnaplockConfigurationRetentionPeriodMaximumRetentionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("type"))
}

func (mr SnaplockConfigurationRetentionPeriodMaximumRetentionAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(mr.ref.Append("value"))
}

type SnaplockConfigurationRetentionPeriodMinimumRetentionAttributes struct {
	ref terra.Reference
}

func (mr SnaplockConfigurationRetentionPeriodMinimumRetentionAttributes) InternalRef() (terra.Reference, error) {
	return mr.ref, nil
}

func (mr SnaplockConfigurationRetentionPeriodMinimumRetentionAttributes) InternalWithRef(ref terra.Reference) SnaplockConfigurationRetentionPeriodMinimumRetentionAttributes {
	return SnaplockConfigurationRetentionPeriodMinimumRetentionAttributes{ref: ref}
}

func (mr SnaplockConfigurationRetentionPeriodMinimumRetentionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mr.ref.InternalTokens()
}

func (mr SnaplockConfigurationRetentionPeriodMinimumRetentionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(mr.ref.Append("type"))
}

func (mr SnaplockConfigurationRetentionPeriodMinimumRetentionAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(mr.ref.Append("value"))
}

type TieringPolicyAttributes struct {
	ref terra.Reference
}

func (tp TieringPolicyAttributes) InternalRef() (terra.Reference, error) {
	return tp.ref, nil
}

func (tp TieringPolicyAttributes) InternalWithRef(ref terra.Reference) TieringPolicyAttributes {
	return TieringPolicyAttributes{ref: ref}
}

func (tp TieringPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tp.ref.InternalTokens()
}

func (tp TieringPolicyAttributes) CoolingPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(tp.ref.Append("cooling_period"))
}

func (tp TieringPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("name"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type SnaplockConfigurationState struct {
	AuditLogVolume          bool                                         `json:"audit_log_volume"`
	PrivilegedDelete        string                                       `json:"privileged_delete"`
	SnaplockType            string                                       `json:"snaplock_type"`
	VolumeAppendModeEnabled bool                                         `json:"volume_append_mode_enabled"`
	AutocommitPeriod        []SnaplockConfigurationAutocommitPeriodState `json:"autocommit_period"`
	RetentionPeriod         []SnaplockConfigurationRetentionPeriodState  `json:"retention_period"`
}

type SnaplockConfigurationAutocommitPeriodState struct {
	Type  string  `json:"type"`
	Value float64 `json:"value"`
}

type SnaplockConfigurationRetentionPeriodState struct {
	DefaultRetention []SnaplockConfigurationRetentionPeriodDefaultRetentionState `json:"default_retention"`
	MaximumRetention []SnaplockConfigurationRetentionPeriodMaximumRetentionState `json:"maximum_retention"`
	MinimumRetention []SnaplockConfigurationRetentionPeriodMinimumRetentionState `json:"minimum_retention"`
}

type SnaplockConfigurationRetentionPeriodDefaultRetentionState struct {
	Type  string  `json:"type"`
	Value float64 `json:"value"`
}

type SnaplockConfigurationRetentionPeriodMaximumRetentionState struct {
	Type  string  `json:"type"`
	Value float64 `json:"value"`
}

type SnaplockConfigurationRetentionPeriodMinimumRetentionState struct {
	Type  string  `json:"type"`
	Value float64 `json:"value"`
}

type TieringPolicyState struct {
	CoolingPeriod float64 `json:"cooling_period"`
	Name          string  `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
