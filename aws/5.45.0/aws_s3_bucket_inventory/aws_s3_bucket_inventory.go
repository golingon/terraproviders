// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_inventory

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3_bucket_inventory.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3BucketInventoryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asbi *Resource) Type() string {
	return "aws_s3_bucket_inventory"
}

// LocalName returns the local name for [Resource].
func (asbi *Resource) LocalName() string {
	return asbi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asbi *Resource) Configuration() interface{} {
	return asbi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asbi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asbi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asbi *Resource) Dependencies() terra.Dependencies {
	return asbi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asbi *Resource) LifecycleManagement() *terra.Lifecycle {
	return asbi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asbi *Resource) Attributes() awsS3BucketInventoryAttributes {
	return awsS3BucketInventoryAttributes{ref: terra.ReferenceResource(asbi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asbi *Resource) ImportState(state io.Reader) error {
	asbi.state = &awsS3BucketInventoryState{}
	if err := json.NewDecoder(state).Decode(asbi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asbi.Type(), asbi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asbi *Resource) State() (*awsS3BucketInventoryState, bool) {
	return asbi.state, asbi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asbi *Resource) StateMust() *awsS3BucketInventoryState {
	if asbi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asbi.Type(), asbi.LocalName()))
	}
	return asbi.state
}

// Args contains the configurations for aws_s3_bucket_inventory.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IncludedObjectVersions: string, required
	IncludedObjectVersions terra.StringValue `hcl:"included_object_versions,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OptionalFields: set of string, optional
	OptionalFields terra.SetValue[terra.StringValue] `hcl:"optional_fields,attr"`
	// Destination: required
	Destination *Destination `hcl:"destination,block" validate:"required"`
	// Filter: optional
	Filter *Filter `hcl:"filter,block"`
	// Schedule: required
	Schedule *Schedule `hcl:"schedule,block" validate:"required"`
}

type awsS3BucketInventoryAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of aws_s3_bucket_inventory.
func (asbi awsS3BucketInventoryAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(asbi.ref.Append("bucket"))
}

// Enabled returns a reference to field enabled of aws_s3_bucket_inventory.
func (asbi awsS3BucketInventoryAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(asbi.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_s3_bucket_inventory.
func (asbi awsS3BucketInventoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asbi.ref.Append("id"))
}

// IncludedObjectVersions returns a reference to field included_object_versions of aws_s3_bucket_inventory.
func (asbi awsS3BucketInventoryAttributes) IncludedObjectVersions() terra.StringValue {
	return terra.ReferenceAsString(asbi.ref.Append("included_object_versions"))
}

// Name returns a reference to field name of aws_s3_bucket_inventory.
func (asbi awsS3BucketInventoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asbi.ref.Append("name"))
}

// OptionalFields returns a reference to field optional_fields of aws_s3_bucket_inventory.
func (asbi awsS3BucketInventoryAttributes) OptionalFields() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asbi.ref.Append("optional_fields"))
}

func (asbi awsS3BucketInventoryAttributes) Destination() terra.ListValue[DestinationAttributes] {
	return terra.ReferenceAsList[DestinationAttributes](asbi.ref.Append("destination"))
}

func (asbi awsS3BucketInventoryAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](asbi.ref.Append("filter"))
}

func (asbi awsS3BucketInventoryAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](asbi.ref.Append("schedule"))
}

type awsS3BucketInventoryState struct {
	Bucket                 string             `json:"bucket"`
	Enabled                bool               `json:"enabled"`
	Id                     string             `json:"id"`
	IncludedObjectVersions string             `json:"included_object_versions"`
	Name                   string             `json:"name"`
	OptionalFields         []string           `json:"optional_fields"`
	Destination            []DestinationState `json:"destination"`
	Filter                 []FilterState      `json:"filter"`
	Schedule               []ScheduleState    `json:"schedule"`
}
