// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_inventory

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Destination struct {
	// DestinationBucket: required
	Bucket *DestinationBucket `hcl:"bucket,block" validate:"required"`
}

type DestinationBucket struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// DestinationBucketEncryption: optional
	Encryption *DestinationBucketEncryption `hcl:"encryption,block"`
}

type DestinationBucketEncryption struct {
	// DestinationBucketEncryptionSseKms: optional
	SseKms *DestinationBucketEncryptionSseKms `hcl:"sse_kms,block"`
	// DestinationBucketEncryptionSseS3: optional
	SseS3 *DestinationBucketEncryptionSseS3 `hcl:"sse_s3,block"`
}

type DestinationBucketEncryptionSseKms struct {
	// KeyId: string, required
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
}

type DestinationBucketEncryptionSseS3 struct{}

type Filter struct {
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type Schedule struct {
	// Frequency: string, required
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
}

type DestinationAttributes struct {
	ref terra.Reference
}

func (d DestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationAttributes) InternalWithRef(ref terra.Reference) DestinationAttributes {
	return DestinationAttributes{ref: ref}
}

func (d DestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationAttributes) Bucket() terra.ListValue[DestinationBucketAttributes] {
	return terra.ReferenceAsList[DestinationBucketAttributes](d.ref.Append("bucket"))
}

type DestinationBucketAttributes struct {
	ref terra.Reference
}

func (b DestinationBucketAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b DestinationBucketAttributes) InternalWithRef(ref terra.Reference) DestinationBucketAttributes {
	return DestinationBucketAttributes{ref: ref}
}

func (b DestinationBucketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b DestinationBucketAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("account_id"))
}

func (b DestinationBucketAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("bucket_arn"))
}

func (b DestinationBucketAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("format"))
}

func (b DestinationBucketAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("prefix"))
}

func (b DestinationBucketAttributes) Encryption() terra.ListValue[DestinationBucketEncryptionAttributes] {
	return terra.ReferenceAsList[DestinationBucketEncryptionAttributes](b.ref.Append("encryption"))
}

type DestinationBucketEncryptionAttributes struct {
	ref terra.Reference
}

func (e DestinationBucketEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e DestinationBucketEncryptionAttributes) InternalWithRef(ref terra.Reference) DestinationBucketEncryptionAttributes {
	return DestinationBucketEncryptionAttributes{ref: ref}
}

func (e DestinationBucketEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e DestinationBucketEncryptionAttributes) SseKms() terra.ListValue[DestinationBucketEncryptionSseKmsAttributes] {
	return terra.ReferenceAsList[DestinationBucketEncryptionSseKmsAttributes](e.ref.Append("sse_kms"))
}

func (e DestinationBucketEncryptionAttributes) SseS3() terra.ListValue[DestinationBucketEncryptionSseS3Attributes] {
	return terra.ReferenceAsList[DestinationBucketEncryptionSseS3Attributes](e.ref.Append("sse_s3"))
}

type DestinationBucketEncryptionSseKmsAttributes struct {
	ref terra.Reference
}

func (sk DestinationBucketEncryptionSseKmsAttributes) InternalRef() (terra.Reference, error) {
	return sk.ref, nil
}

func (sk DestinationBucketEncryptionSseKmsAttributes) InternalWithRef(ref terra.Reference) DestinationBucketEncryptionSseKmsAttributes {
	return DestinationBucketEncryptionSseKmsAttributes{ref: ref}
}

func (sk DestinationBucketEncryptionSseKmsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sk.ref.InternalTokens()
}

func (sk DestinationBucketEncryptionSseKmsAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(sk.ref.Append("key_id"))
}

type DestinationBucketEncryptionSseS3Attributes struct {
	ref terra.Reference
}

func (ss DestinationBucketEncryptionSseS3Attributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss DestinationBucketEncryptionSseS3Attributes) InternalWithRef(ref terra.Reference) DestinationBucketEncryptionSseS3Attributes {
	return DestinationBucketEncryptionSseS3Attributes{ref: ref}
}

func (ss DestinationBucketEncryptionSseS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) Frequency() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("frequency"))
}

type DestinationState struct {
	Bucket []DestinationBucketState `json:"bucket"`
}

type DestinationBucketState struct {
	AccountId  string                             `json:"account_id"`
	BucketArn  string                             `json:"bucket_arn"`
	Format     string                             `json:"format"`
	Prefix     string                             `json:"prefix"`
	Encryption []DestinationBucketEncryptionState `json:"encryption"`
}

type DestinationBucketEncryptionState struct {
	SseKms []DestinationBucketEncryptionSseKmsState `json:"sse_kms"`
	SseS3  []DestinationBucketEncryptionSseS3State  `json:"sse_s3"`
}

type DestinationBucketEncryptionSseKmsState struct {
	KeyId string `json:"key_id"`
}

type DestinationBucketEncryptionSseS3State struct{}

type FilterState struct {
	Prefix string `json:"prefix"`
}

type ScheduleState struct {
	Frequency string `json:"frequency"`
}
