// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshift_scheduled_action

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type TargetAction struct {
	// TargetActionPauseCluster: optional
	PauseCluster *TargetActionPauseCluster `hcl:"pause_cluster,block"`
	// TargetActionResizeCluster: optional
	ResizeCluster *TargetActionResizeCluster `hcl:"resize_cluster,block"`
	// TargetActionResumeCluster: optional
	ResumeCluster *TargetActionResumeCluster `hcl:"resume_cluster,block"`
}

type TargetActionPauseCluster struct {
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
}

type TargetActionResizeCluster struct {
	// Classic: bool, optional
	Classic terra.BoolValue `hcl:"classic,attr"`
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// ClusterType: string, optional
	ClusterType terra.StringValue `hcl:"cluster_type,attr"`
	// NodeType: string, optional
	NodeType terra.StringValue `hcl:"node_type,attr"`
	// NumberOfNodes: number, optional
	NumberOfNodes terra.NumberValue `hcl:"number_of_nodes,attr"`
}

type TargetActionResumeCluster struct {
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
}

type TargetActionAttributes struct {
	ref terra.Reference
}

func (ta TargetActionAttributes) InternalRef() (terra.Reference, error) {
	return ta.ref, nil
}

func (ta TargetActionAttributes) InternalWithRef(ref terra.Reference) TargetActionAttributes {
	return TargetActionAttributes{ref: ref}
}

func (ta TargetActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ta.ref.InternalTokens()
}

func (ta TargetActionAttributes) PauseCluster() terra.ListValue[TargetActionPauseClusterAttributes] {
	return terra.ReferenceAsList[TargetActionPauseClusterAttributes](ta.ref.Append("pause_cluster"))
}

func (ta TargetActionAttributes) ResizeCluster() terra.ListValue[TargetActionResizeClusterAttributes] {
	return terra.ReferenceAsList[TargetActionResizeClusterAttributes](ta.ref.Append("resize_cluster"))
}

func (ta TargetActionAttributes) ResumeCluster() terra.ListValue[TargetActionResumeClusterAttributes] {
	return terra.ReferenceAsList[TargetActionResumeClusterAttributes](ta.ref.Append("resume_cluster"))
}

type TargetActionPauseClusterAttributes struct {
	ref terra.Reference
}

func (pc TargetActionPauseClusterAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc TargetActionPauseClusterAttributes) InternalWithRef(ref terra.Reference) TargetActionPauseClusterAttributes {
	return TargetActionPauseClusterAttributes{ref: ref}
}

func (pc TargetActionPauseClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc TargetActionPauseClusterAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("cluster_identifier"))
}

type TargetActionResizeClusterAttributes struct {
	ref terra.Reference
}

func (rc TargetActionResizeClusterAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc TargetActionResizeClusterAttributes) InternalWithRef(ref terra.Reference) TargetActionResizeClusterAttributes {
	return TargetActionResizeClusterAttributes{ref: ref}
}

func (rc TargetActionResizeClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc TargetActionResizeClusterAttributes) Classic() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("classic"))
}

func (rc TargetActionResizeClusterAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("cluster_identifier"))
}

func (rc TargetActionResizeClusterAttributes) ClusterType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("cluster_type"))
}

func (rc TargetActionResizeClusterAttributes) NodeType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("node_type"))
}

func (rc TargetActionResizeClusterAttributes) NumberOfNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("number_of_nodes"))
}

type TargetActionResumeClusterAttributes struct {
	ref terra.Reference
}

func (rc TargetActionResumeClusterAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc TargetActionResumeClusterAttributes) InternalWithRef(ref terra.Reference) TargetActionResumeClusterAttributes {
	return TargetActionResumeClusterAttributes{ref: ref}
}

func (rc TargetActionResumeClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc TargetActionResumeClusterAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("cluster_identifier"))
}

type TargetActionState struct {
	PauseCluster  []TargetActionPauseClusterState  `json:"pause_cluster"`
	ResizeCluster []TargetActionResizeClusterState `json:"resize_cluster"`
	ResumeCluster []TargetActionResumeClusterState `json:"resume_cluster"`
}

type TargetActionPauseClusterState struct {
	ClusterIdentifier string `json:"cluster_identifier"`
}

type TargetActionResizeClusterState struct {
	Classic           bool    `json:"classic"`
	ClusterIdentifier string  `json:"cluster_identifier"`
	ClusterType       string  `json:"cluster_type"`
	NodeType          string  `json:"node_type"`
	NumberOfNodes     float64 `json:"number_of_nodes"`
}

type TargetActionResumeClusterState struct {
	ClusterIdentifier string `json:"cluster_identifier"`
}
