// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshift_logging

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_redshift_logging.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRedshiftLoggingState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arl *Resource) Type() string {
	return "aws_redshift_logging"
}

// LocalName returns the local name for [Resource].
func (arl *Resource) LocalName() string {
	return arl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arl *Resource) Configuration() interface{} {
	return arl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arl *Resource) Dependencies() terra.Dependencies {
	return arl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arl *Resource) LifecycleManagement() *terra.Lifecycle {
	return arl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arl *Resource) Attributes() awsRedshiftLoggingAttributes {
	return awsRedshiftLoggingAttributes{ref: terra.ReferenceResource(arl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arl *Resource) ImportState(state io.Reader) error {
	arl.state = &awsRedshiftLoggingState{}
	if err := json.NewDecoder(state).Decode(arl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arl.Type(), arl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arl *Resource) State() (*awsRedshiftLoggingState, bool) {
	return arl.state, arl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arl *Resource) StateMust() *awsRedshiftLoggingState {
	if arl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arl.Type(), arl.LocalName()))
	}
	return arl.state
}

// Args contains the configurations for aws_redshift_logging.
type Args struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// LogDestinationType: string, optional
	LogDestinationType terra.StringValue `hcl:"log_destination_type,attr"`
	// LogExports: set of string, optional
	LogExports terra.SetValue[terra.StringValue] `hcl:"log_exports,attr"`
	// S3KeyPrefix: string, optional
	S3KeyPrefix terra.StringValue `hcl:"s3_key_prefix,attr"`
}

type awsRedshiftLoggingAttributes struct {
	ref terra.Reference
}

// BucketName returns a reference to field bucket_name of aws_redshift_logging.
func (arl awsRedshiftLoggingAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(arl.ref.Append("bucket_name"))
}

// ClusterIdentifier returns a reference to field cluster_identifier of aws_redshift_logging.
func (arl awsRedshiftLoggingAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(arl.ref.Append("cluster_identifier"))
}

// Id returns a reference to field id of aws_redshift_logging.
func (arl awsRedshiftLoggingAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arl.ref.Append("id"))
}

// LogDestinationType returns a reference to field log_destination_type of aws_redshift_logging.
func (arl awsRedshiftLoggingAttributes) LogDestinationType() terra.StringValue {
	return terra.ReferenceAsString(arl.ref.Append("log_destination_type"))
}

// LogExports returns a reference to field log_exports of aws_redshift_logging.
func (arl awsRedshiftLoggingAttributes) LogExports() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arl.ref.Append("log_exports"))
}

// S3KeyPrefix returns a reference to field s3_key_prefix of aws_redshift_logging.
func (arl awsRedshiftLoggingAttributes) S3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(arl.ref.Append("s3_key_prefix"))
}

type awsRedshiftLoggingState struct {
	BucketName         string   `json:"bucket_name"`
	ClusterIdentifier  string   `json:"cluster_identifier"`
	Id                 string   `json:"id"`
	LogDestinationType string   `json:"log_destination_type"`
	LogExports         []string `json:"log_exports"`
	S3KeyPrefix        string   `json:"s3_key_prefix"`
}
