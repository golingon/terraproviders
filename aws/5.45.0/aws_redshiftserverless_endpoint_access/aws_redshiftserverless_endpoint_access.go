// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshiftserverless_endpoint_access

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_redshiftserverless_endpoint_access.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRedshiftserverlessEndpointAccessState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (area *Resource) Type() string {
	return "aws_redshiftserverless_endpoint_access"
}

// LocalName returns the local name for [Resource].
func (area *Resource) LocalName() string {
	return area.Name
}

// Configuration returns the configuration (args) for [Resource].
func (area *Resource) Configuration() interface{} {
	return area.Args
}

// DependOn is used for other resources to depend on [Resource].
func (area *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(area)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (area *Resource) Dependencies() terra.Dependencies {
	return area.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (area *Resource) LifecycleManagement() *terra.Lifecycle {
	return area.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (area *Resource) Attributes() awsRedshiftserverlessEndpointAccessAttributes {
	return awsRedshiftserverlessEndpointAccessAttributes{ref: terra.ReferenceResource(area)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (area *Resource) ImportState(state io.Reader) error {
	area.state = &awsRedshiftserverlessEndpointAccessState{}
	if err := json.NewDecoder(state).Decode(area.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", area.Type(), area.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (area *Resource) State() (*awsRedshiftserverlessEndpointAccessState, bool) {
	return area.state, area.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (area *Resource) StateMust() *awsRedshiftserverlessEndpointAccessState {
	if area.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", area.Type(), area.LocalName()))
	}
	return area.state
}

// Args contains the configurations for aws_redshiftserverless_endpoint_access.
type Args struct {
	// EndpointName: string, required
	EndpointName terra.StringValue `hcl:"endpoint_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OwnerAccount: string, optional
	OwnerAccount terra.StringValue `hcl:"owner_account,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// WorkgroupName: string, required
	WorkgroupName terra.StringValue `hcl:"workgroup_name,attr" validate:"required"`
}

type awsRedshiftserverlessEndpointAccessAttributes struct {
	ref terra.Reference
}

// Address returns a reference to field address of aws_redshiftserverless_endpoint_access.
func (area awsRedshiftserverlessEndpointAccessAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(area.ref.Append("address"))
}

// Arn returns a reference to field arn of aws_redshiftserverless_endpoint_access.
func (area awsRedshiftserverlessEndpointAccessAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(area.ref.Append("arn"))
}

// EndpointName returns a reference to field endpoint_name of aws_redshiftserverless_endpoint_access.
func (area awsRedshiftserverlessEndpointAccessAttributes) EndpointName() terra.StringValue {
	return terra.ReferenceAsString(area.ref.Append("endpoint_name"))
}

// Id returns a reference to field id of aws_redshiftserverless_endpoint_access.
func (area awsRedshiftserverlessEndpointAccessAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(area.ref.Append("id"))
}

// OwnerAccount returns a reference to field owner_account of aws_redshiftserverless_endpoint_access.
func (area awsRedshiftserverlessEndpointAccessAttributes) OwnerAccount() terra.StringValue {
	return terra.ReferenceAsString(area.ref.Append("owner_account"))
}

// Port returns a reference to field port of aws_redshiftserverless_endpoint_access.
func (area awsRedshiftserverlessEndpointAccessAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(area.ref.Append("port"))
}

// SubnetIds returns a reference to field subnet_ids of aws_redshiftserverless_endpoint_access.
func (area awsRedshiftserverlessEndpointAccessAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](area.ref.Append("subnet_ids"))
}

// VpcSecurityGroupIds returns a reference to field vpc_security_group_ids of aws_redshiftserverless_endpoint_access.
func (area awsRedshiftserverlessEndpointAccessAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](area.ref.Append("vpc_security_group_ids"))
}

// WorkgroupName returns a reference to field workgroup_name of aws_redshiftserverless_endpoint_access.
func (area awsRedshiftserverlessEndpointAccessAttributes) WorkgroupName() terra.StringValue {
	return terra.ReferenceAsString(area.ref.Append("workgroup_name"))
}

func (area awsRedshiftserverlessEndpointAccessAttributes) VpcEndpoint() terra.ListValue[VpcEndpointAttributes] {
	return terra.ReferenceAsList[VpcEndpointAttributes](area.ref.Append("vpc_endpoint"))
}

type awsRedshiftserverlessEndpointAccessState struct {
	Address             string             `json:"address"`
	Arn                 string             `json:"arn"`
	EndpointName        string             `json:"endpoint_name"`
	Id                  string             `json:"id"`
	OwnerAccount        string             `json:"owner_account"`
	Port                float64            `json:"port"`
	SubnetIds           []string           `json:"subnet_ids"`
	VpcSecurityGroupIds []string           `json:"vpc_security_group_ids"`
	WorkgroupName       string             `json:"workgroup_name"`
	VpcEndpoint         []VpcEndpointState `json:"vpc_endpoint"`
}
