// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_resolver_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53_resolver_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53ResolverEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arre *Resource) Type() string {
	return "aws_route53_resolver_endpoint"
}

// LocalName returns the local name for [Resource].
func (arre *Resource) LocalName() string {
	return arre.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arre *Resource) Configuration() interface{} {
	return arre.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arre *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arre)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arre *Resource) Dependencies() terra.Dependencies {
	return arre.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arre *Resource) LifecycleManagement() *terra.Lifecycle {
	return arre.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arre *Resource) Attributes() awsRoute53ResolverEndpointAttributes {
	return awsRoute53ResolverEndpointAttributes{ref: terra.ReferenceResource(arre)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arre *Resource) ImportState(state io.Reader) error {
	arre.state = &awsRoute53ResolverEndpointState{}
	if err := json.NewDecoder(state).Decode(arre.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arre.Type(), arre.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arre *Resource) State() (*awsRoute53ResolverEndpointState, bool) {
	return arre.state, arre.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arre *Resource) StateMust() *awsRoute53ResolverEndpointState {
	if arre.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arre.Type(), arre.LocalName()))
	}
	return arre.state
}

// Args contains the configurations for aws_route53_resolver_endpoint.
type Args struct {
	// Direction: string, required
	Direction terra.StringValue `hcl:"direction,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Protocols: set of string, optional
	Protocols terra.SetValue[terra.StringValue] `hcl:"protocols,attr"`
	// ResolverEndpointType: string, optional
	ResolverEndpointType terra.StringValue `hcl:"resolver_endpoint_type,attr"`
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// IpAddress: min=2,max=10
	IpAddress []IpAddress `hcl:"ip_address,block" validate:"min=2,max=10"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRoute53ResolverEndpointAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_route53_resolver_endpoint.
func (arre awsRoute53ResolverEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arre.ref.Append("arn"))
}

// Direction returns a reference to field direction of aws_route53_resolver_endpoint.
func (arre awsRoute53ResolverEndpointAttributes) Direction() terra.StringValue {
	return terra.ReferenceAsString(arre.ref.Append("direction"))
}

// HostVpcId returns a reference to field host_vpc_id of aws_route53_resolver_endpoint.
func (arre awsRoute53ResolverEndpointAttributes) HostVpcId() terra.StringValue {
	return terra.ReferenceAsString(arre.ref.Append("host_vpc_id"))
}

// Id returns a reference to field id of aws_route53_resolver_endpoint.
func (arre awsRoute53ResolverEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arre.ref.Append("id"))
}

// Name returns a reference to field name of aws_route53_resolver_endpoint.
func (arre awsRoute53ResolverEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arre.ref.Append("name"))
}

// Protocols returns a reference to field protocols of aws_route53_resolver_endpoint.
func (arre awsRoute53ResolverEndpointAttributes) Protocols() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arre.ref.Append("protocols"))
}

// ResolverEndpointType returns a reference to field resolver_endpoint_type of aws_route53_resolver_endpoint.
func (arre awsRoute53ResolverEndpointAttributes) ResolverEndpointType() terra.StringValue {
	return terra.ReferenceAsString(arre.ref.Append("resolver_endpoint_type"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_route53_resolver_endpoint.
func (arre awsRoute53ResolverEndpointAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arre.ref.Append("security_group_ids"))
}

// Tags returns a reference to field tags of aws_route53_resolver_endpoint.
func (arre awsRoute53ResolverEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arre.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_route53_resolver_endpoint.
func (arre awsRoute53ResolverEndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arre.ref.Append("tags_all"))
}

func (arre awsRoute53ResolverEndpointAttributes) IpAddress() terra.SetValue[IpAddressAttributes] {
	return terra.ReferenceAsSet[IpAddressAttributes](arre.ref.Append("ip_address"))
}

func (arre awsRoute53ResolverEndpointAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arre.ref.Append("timeouts"))
}

type awsRoute53ResolverEndpointState struct {
	Arn                  string            `json:"arn"`
	Direction            string            `json:"direction"`
	HostVpcId            string            `json:"host_vpc_id"`
	Id                   string            `json:"id"`
	Name                 string            `json:"name"`
	Protocols            []string          `json:"protocols"`
	ResolverEndpointType string            `json:"resolver_endpoint_type"`
	SecurityGroupIds     []string          `json:"security_group_ids"`
	Tags                 map[string]string `json:"tags"`
	TagsAll              map[string]string `json:"tags_all"`
	IpAddress            []IpAddressState  `json:"ip_address"`
	Timeouts             *TimeoutsState    `json:"timeouts"`
}
