// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lightsail_lb_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lightsail_lb_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLightsailLbAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alla *Resource) Type() string {
	return "aws_lightsail_lb_attachment"
}

// LocalName returns the local name for [Resource].
func (alla *Resource) LocalName() string {
	return alla.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alla *Resource) Configuration() interface{} {
	return alla.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alla *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alla)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alla *Resource) Dependencies() terra.Dependencies {
	return alla.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alla *Resource) LifecycleManagement() *terra.Lifecycle {
	return alla.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alla *Resource) Attributes() awsLightsailLbAttachmentAttributes {
	return awsLightsailLbAttachmentAttributes{ref: terra.ReferenceResource(alla)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alla *Resource) ImportState(state io.Reader) error {
	alla.state = &awsLightsailLbAttachmentState{}
	if err := json.NewDecoder(state).Decode(alla.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alla.Type(), alla.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alla *Resource) State() (*awsLightsailLbAttachmentState, bool) {
	return alla.state, alla.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alla *Resource) StateMust() *awsLightsailLbAttachmentState {
	if alla.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alla.Type(), alla.LocalName()))
	}
	return alla.state
}

// Args contains the configurations for aws_lightsail_lb_attachment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceName: string, required
	InstanceName terra.StringValue `hcl:"instance_name,attr" validate:"required"`
	// LbName: string, required
	LbName terra.StringValue `hcl:"lb_name,attr" validate:"required"`
}

type awsLightsailLbAttachmentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_lightsail_lb_attachment.
func (alla awsLightsailLbAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alla.ref.Append("id"))
}

// InstanceName returns a reference to field instance_name of aws_lightsail_lb_attachment.
func (alla awsLightsailLbAttachmentAttributes) InstanceName() terra.StringValue {
	return terra.ReferenceAsString(alla.ref.Append("instance_name"))
}

// LbName returns a reference to field lb_name of aws_lightsail_lb_attachment.
func (alla awsLightsailLbAttachmentAttributes) LbName() terra.StringValue {
	return terra.ReferenceAsString(alla.ref.Append("lb_name"))
}

type awsLightsailLbAttachmentState struct {
	Id           string `json:"id"`
	InstanceName string `json:"instance_name"`
	LbName       string `json:"lb_name"`
}
