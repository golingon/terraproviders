// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_event_bus

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudwatch_event_bus.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudwatchEventBusState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aceb *Resource) Type() string {
	return "aws_cloudwatch_event_bus"
}

// LocalName returns the local name for [Resource].
func (aceb *Resource) LocalName() string {
	return aceb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aceb *Resource) Configuration() interface{} {
	return aceb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aceb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aceb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aceb *Resource) Dependencies() terra.Dependencies {
	return aceb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aceb *Resource) LifecycleManagement() *terra.Lifecycle {
	return aceb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aceb *Resource) Attributes() awsCloudwatchEventBusAttributes {
	return awsCloudwatchEventBusAttributes{ref: terra.ReferenceResource(aceb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aceb *Resource) ImportState(state io.Reader) error {
	aceb.state = &awsCloudwatchEventBusState{}
	if err := json.NewDecoder(state).Decode(aceb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aceb.Type(), aceb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aceb *Resource) State() (*awsCloudwatchEventBusState, bool) {
	return aceb.state, aceb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aceb *Resource) StateMust() *awsCloudwatchEventBusState {
	if aceb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aceb.Type(), aceb.LocalName()))
	}
	return aceb.state
}

// Args contains the configurations for aws_cloudwatch_event_bus.
type Args struct {
	// EventSourceName: string, optional
	EventSourceName terra.StringValue `hcl:"event_source_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsCloudwatchEventBusAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudwatch_event_bus.
func (aceb awsCloudwatchEventBusAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aceb.ref.Append("arn"))
}

// EventSourceName returns a reference to field event_source_name of aws_cloudwatch_event_bus.
func (aceb awsCloudwatchEventBusAttributes) EventSourceName() terra.StringValue {
	return terra.ReferenceAsString(aceb.ref.Append("event_source_name"))
}

// Id returns a reference to field id of aws_cloudwatch_event_bus.
func (aceb awsCloudwatchEventBusAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aceb.ref.Append("id"))
}

// Name returns a reference to field name of aws_cloudwatch_event_bus.
func (aceb awsCloudwatchEventBusAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aceb.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_cloudwatch_event_bus.
func (aceb awsCloudwatchEventBusAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aceb.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cloudwatch_event_bus.
func (aceb awsCloudwatchEventBusAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aceb.ref.Append("tags_all"))
}

type awsCloudwatchEventBusState struct {
	Arn             string            `json:"arn"`
	EventSourceName string            `json:"event_source_name"`
	Id              string            `json:"id"`
	Name            string            `json:"name"`
	Tags            map[string]string `json:"tags"`
	TagsAll         map[string]string `json:"tags_all"`
}
