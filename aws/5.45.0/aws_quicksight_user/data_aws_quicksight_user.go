// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_user

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_quicksight_user.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aqu *DataSource) DataSource() string {
	return "aws_quicksight_user"
}

// LocalName returns the local name for [DataSource].
func (aqu *DataSource) LocalName() string {
	return aqu.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aqu *DataSource) Configuration() interface{} {
	return aqu.Args
}

// Attributes returns the attributes for [DataSource].
func (aqu *DataSource) Attributes() dataAwsQuicksightUserAttributes {
	return dataAwsQuicksightUserAttributes{ref: terra.ReferenceDataSource(aqu)}
}

// DataArgs contains the configurations for aws_quicksight_user.
type DataArgs struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// UserName: string, required
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
}

type dataAwsQuicksightUserAttributes struct {
	ref terra.Reference
}

// Active returns a reference to field active of aws_quicksight_user.
func (aqu dataAwsQuicksightUserAttributes) Active() terra.BoolValue {
	return terra.ReferenceAsBool(aqu.ref.Append("active"))
}

// Arn returns a reference to field arn of aws_quicksight_user.
func (aqu dataAwsQuicksightUserAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_user.
func (aqu dataAwsQuicksightUserAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("aws_account_id"))
}

// Email returns a reference to field email of aws_quicksight_user.
func (aqu dataAwsQuicksightUserAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("email"))
}

// Id returns a reference to field id of aws_quicksight_user.
func (aqu dataAwsQuicksightUserAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("id"))
}

// IdentityType returns a reference to field identity_type of aws_quicksight_user.
func (aqu dataAwsQuicksightUserAttributes) IdentityType() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("identity_type"))
}

// Namespace returns a reference to field namespace of aws_quicksight_user.
func (aqu dataAwsQuicksightUserAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("namespace"))
}

// PrincipalId returns a reference to field principal_id of aws_quicksight_user.
func (aqu dataAwsQuicksightUserAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("principal_id"))
}

// UserName returns a reference to field user_name of aws_quicksight_user.
func (aqu dataAwsQuicksightUserAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("user_name"))
}

// UserRole returns a reference to field user_role of aws_quicksight_user.
func (aqu dataAwsQuicksightUserAttributes) UserRole() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("user_role"))
}
