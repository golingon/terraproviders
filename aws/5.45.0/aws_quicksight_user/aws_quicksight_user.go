// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_user

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_quicksight_user.
type Resource struct {
	Name      string
	Args      Args
	state     *awsQuicksightUserState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aqu *Resource) Type() string {
	return "aws_quicksight_user"
}

// LocalName returns the local name for [Resource].
func (aqu *Resource) LocalName() string {
	return aqu.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aqu *Resource) Configuration() interface{} {
	return aqu.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aqu *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aqu)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aqu *Resource) Dependencies() terra.Dependencies {
	return aqu.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aqu *Resource) LifecycleManagement() *terra.Lifecycle {
	return aqu.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aqu *Resource) Attributes() awsQuicksightUserAttributes {
	return awsQuicksightUserAttributes{ref: terra.ReferenceResource(aqu)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aqu *Resource) ImportState(state io.Reader) error {
	aqu.state = &awsQuicksightUserState{}
	if err := json.NewDecoder(state).Decode(aqu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aqu.Type(), aqu.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aqu *Resource) State() (*awsQuicksightUserState, bool) {
	return aqu.state, aqu.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aqu *Resource) StateMust() *awsQuicksightUserState {
	if aqu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aqu.Type(), aqu.LocalName()))
	}
	return aqu.state
}

// Args contains the configurations for aws_quicksight_user.
type Args struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// Email: string, required
	Email terra.StringValue `hcl:"email,attr" validate:"required"`
	// IamArn: string, optional
	IamArn terra.StringValue `hcl:"iam_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityType: string, required
	IdentityType terra.StringValue `hcl:"identity_type,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// SessionName: string, optional
	SessionName terra.StringValue `hcl:"session_name,attr"`
	// UserName: string, optional
	UserName terra.StringValue `hcl:"user_name,attr"`
	// UserRole: string, required
	UserRole terra.StringValue `hcl:"user_role,attr" validate:"required"`
}

type awsQuicksightUserAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_quicksight_user.
func (aqu awsQuicksightUserAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_user.
func (aqu awsQuicksightUserAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("aws_account_id"))
}

// Email returns a reference to field email of aws_quicksight_user.
func (aqu awsQuicksightUserAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("email"))
}

// IamArn returns a reference to field iam_arn of aws_quicksight_user.
func (aqu awsQuicksightUserAttributes) IamArn() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("iam_arn"))
}

// Id returns a reference to field id of aws_quicksight_user.
func (aqu awsQuicksightUserAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("id"))
}

// IdentityType returns a reference to field identity_type of aws_quicksight_user.
func (aqu awsQuicksightUserAttributes) IdentityType() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("identity_type"))
}

// Namespace returns a reference to field namespace of aws_quicksight_user.
func (aqu awsQuicksightUserAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("namespace"))
}

// SessionName returns a reference to field session_name of aws_quicksight_user.
func (aqu awsQuicksightUserAttributes) SessionName() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("session_name"))
}

// UserName returns a reference to field user_name of aws_quicksight_user.
func (aqu awsQuicksightUserAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("user_name"))
}

// UserRole returns a reference to field user_role of aws_quicksight_user.
func (aqu awsQuicksightUserAttributes) UserRole() terra.StringValue {
	return terra.ReferenceAsString(aqu.ref.Append("user_role"))
}

type awsQuicksightUserState struct {
	Arn          string `json:"arn"`
	AwsAccountId string `json:"aws_account_id"`
	Email        string `json:"email"`
	IamArn       string `json:"iam_arn"`
	Id           string `json:"id"`
	IdentityType string `json:"identity_type"`
	Namespace    string `json:"namespace"`
	SessionName  string `json:"session_name"`
	UserName     string `json:"user_name"`
	UserRole     string `json:"user_role"`
}
