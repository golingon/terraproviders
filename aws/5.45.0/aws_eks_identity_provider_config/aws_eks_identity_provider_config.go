// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_eks_identity_provider_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_eks_identity_provider_config.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEksIdentityProviderConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeipc *Resource) Type() string {
	return "aws_eks_identity_provider_config"
}

// LocalName returns the local name for [Resource].
func (aeipc *Resource) LocalName() string {
	return aeipc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeipc *Resource) Configuration() interface{} {
	return aeipc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeipc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeipc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeipc *Resource) Dependencies() terra.Dependencies {
	return aeipc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeipc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeipc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeipc *Resource) Attributes() awsEksIdentityProviderConfigAttributes {
	return awsEksIdentityProviderConfigAttributes{ref: terra.ReferenceResource(aeipc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeipc *Resource) ImportState(state io.Reader) error {
	aeipc.state = &awsEksIdentityProviderConfigState{}
	if err := json.NewDecoder(state).Decode(aeipc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeipc.Type(), aeipc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeipc *Resource) State() (*awsEksIdentityProviderConfigState, bool) {
	return aeipc.state, aeipc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeipc *Resource) StateMust() *awsEksIdentityProviderConfigState {
	if aeipc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeipc.Type(), aeipc.LocalName()))
	}
	return aeipc.state
}

// Args contains the configurations for aws_eks_identity_provider_config.
type Args struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Oidc: required
	Oidc *Oidc `hcl:"oidc,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEksIdentityProviderConfigAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_eks_identity_provider_config.
func (aeipc awsEksIdentityProviderConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aeipc.ref.Append("arn"))
}

// ClusterName returns a reference to field cluster_name of aws_eks_identity_provider_config.
func (aeipc awsEksIdentityProviderConfigAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(aeipc.ref.Append("cluster_name"))
}

// Id returns a reference to field id of aws_eks_identity_provider_config.
func (aeipc awsEksIdentityProviderConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeipc.ref.Append("id"))
}

// Status returns a reference to field status of aws_eks_identity_provider_config.
func (aeipc awsEksIdentityProviderConfigAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aeipc.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_eks_identity_provider_config.
func (aeipc awsEksIdentityProviderConfigAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeipc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_eks_identity_provider_config.
func (aeipc awsEksIdentityProviderConfigAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeipc.ref.Append("tags_all"))
}

func (aeipc awsEksIdentityProviderConfigAttributes) Oidc() terra.ListValue[OidcAttributes] {
	return terra.ReferenceAsList[OidcAttributes](aeipc.ref.Append("oidc"))
}

func (aeipc awsEksIdentityProviderConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aeipc.ref.Append("timeouts"))
}

type awsEksIdentityProviderConfigState struct {
	Arn         string            `json:"arn"`
	ClusterName string            `json:"cluster_name"`
	Id          string            `json:"id"`
	Status      string            `json:"status"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	Oidc        []OidcState       `json:"oidc"`
	Timeouts    *TimeoutsState    `json:"timeouts"`
}
