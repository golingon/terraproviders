// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_log_stream

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudwatch_log_stream.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudwatchLogStreamState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acls *Resource) Type() string {
	return "aws_cloudwatch_log_stream"
}

// LocalName returns the local name for [Resource].
func (acls *Resource) LocalName() string {
	return acls.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acls *Resource) Configuration() interface{} {
	return acls.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acls *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acls)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acls *Resource) Dependencies() terra.Dependencies {
	return acls.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acls *Resource) LifecycleManagement() *terra.Lifecycle {
	return acls.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acls *Resource) Attributes() awsCloudwatchLogStreamAttributes {
	return awsCloudwatchLogStreamAttributes{ref: terra.ReferenceResource(acls)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acls *Resource) ImportState(state io.Reader) error {
	acls.state = &awsCloudwatchLogStreamState{}
	if err := json.NewDecoder(state).Decode(acls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acls.Type(), acls.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acls *Resource) State() (*awsCloudwatchLogStreamState, bool) {
	return acls.state, acls.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acls *Resource) StateMust() *awsCloudwatchLogStreamState {
	if acls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acls.Type(), acls.LocalName()))
	}
	return acls.state
}

// Args contains the configurations for aws_cloudwatch_log_stream.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogGroupName: string, required
	LogGroupName terra.StringValue `hcl:"log_group_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type awsCloudwatchLogStreamAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudwatch_log_stream.
func (acls awsCloudwatchLogStreamAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acls.ref.Append("arn"))
}

// Id returns a reference to field id of aws_cloudwatch_log_stream.
func (acls awsCloudwatchLogStreamAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acls.ref.Append("id"))
}

// LogGroupName returns a reference to field log_group_name of aws_cloudwatch_log_stream.
func (acls awsCloudwatchLogStreamAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(acls.ref.Append("log_group_name"))
}

// Name returns a reference to field name of aws_cloudwatch_log_stream.
func (acls awsCloudwatchLogStreamAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acls.ref.Append("name"))
}

type awsCloudwatchLogStreamState struct {
	Arn          string `json:"arn"`
	Id           string `json:"id"`
	LogGroupName string `json:"log_group_name"`
	Name         string `json:"name"`
}
