// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kendra_data_source

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kendra_data_source.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKendraDataSourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akds *Resource) Type() string {
	return "aws_kendra_data_source"
}

// LocalName returns the local name for [Resource].
func (akds *Resource) LocalName() string {
	return akds.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akds *Resource) Configuration() interface{} {
	return akds.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akds *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akds)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akds *Resource) Dependencies() terra.Dependencies {
	return akds.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akds *Resource) LifecycleManagement() *terra.Lifecycle {
	return akds.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akds *Resource) Attributes() awsKendraDataSourceAttributes {
	return awsKendraDataSourceAttributes{ref: terra.ReferenceResource(akds)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akds *Resource) ImportState(state io.Reader) error {
	akds.state = &awsKendraDataSourceState{}
	if err := json.NewDecoder(state).Decode(akds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akds.Type(), akds.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akds *Resource) State() (*awsKendraDataSourceState, bool) {
	return akds.state, akds.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akds *Resource) StateMust() *awsKendraDataSourceState {
	if akds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akds.Type(), akds.LocalName()))
	}
	return akds.state
}

// Args contains the configurations for aws_kendra_data_source.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IndexId: string, required
	IndexId terra.StringValue `hcl:"index_id,attr" validate:"required"`
	// LanguageCode: string, optional
	LanguageCode terra.StringValue `hcl:"language_code,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// Schedule: string, optional
	Schedule terra.StringValue `hcl:"schedule,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Configuration: optional
	Configuration *Configuration `hcl:"configuration,block"`
	// CustomDocumentEnrichmentConfiguration: optional
	CustomDocumentEnrichmentConfiguration *CustomDocumentEnrichmentConfiguration `hcl:"custom_document_enrichment_configuration,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsKendraDataSourceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("arn"))
}

// CreatedAt returns a reference to field created_at of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("created_at"))
}

// DataSourceId returns a reference to field data_source_id of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) DataSourceId() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("data_source_id"))
}

// Description returns a reference to field description of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("description"))
}

// ErrorMessage returns a reference to field error_message of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) ErrorMessage() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("error_message"))
}

// Id returns a reference to field id of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("id"))
}

// IndexId returns a reference to field index_id of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) IndexId() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("index_id"))
}

// LanguageCode returns a reference to field language_code of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("language_code"))
}

// Name returns a reference to field name of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("role_arn"))
}

// Schedule returns a reference to field schedule of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("schedule"))
}

// Status returns a reference to field status of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akds.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akds.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("type"))
}

// UpdatedAt returns a reference to field updated_at of aws_kendra_data_source.
func (akds awsKendraDataSourceAttributes) UpdatedAt() terra.StringValue {
	return terra.ReferenceAsString(akds.ref.Append("updated_at"))
}

func (akds awsKendraDataSourceAttributes) Configuration() terra.ListValue[ConfigurationAttributes] {
	return terra.ReferenceAsList[ConfigurationAttributes](akds.ref.Append("configuration"))
}

func (akds awsKendraDataSourceAttributes) CustomDocumentEnrichmentConfiguration() terra.ListValue[CustomDocumentEnrichmentConfigurationAttributes] {
	return terra.ReferenceAsList[CustomDocumentEnrichmentConfigurationAttributes](akds.ref.Append("custom_document_enrichment_configuration"))
}

func (akds awsKendraDataSourceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akds.ref.Append("timeouts"))
}

type awsKendraDataSourceState struct {
	Arn                                   string                                       `json:"arn"`
	CreatedAt                             string                                       `json:"created_at"`
	DataSourceId                          string                                       `json:"data_source_id"`
	Description                           string                                       `json:"description"`
	ErrorMessage                          string                                       `json:"error_message"`
	Id                                    string                                       `json:"id"`
	IndexId                               string                                       `json:"index_id"`
	LanguageCode                          string                                       `json:"language_code"`
	Name                                  string                                       `json:"name"`
	RoleArn                               string                                       `json:"role_arn"`
	Schedule                              string                                       `json:"schedule"`
	Status                                string                                       `json:"status"`
	Tags                                  map[string]string                            `json:"tags"`
	TagsAll                               map[string]string                            `json:"tags_all"`
	Type                                  string                                       `json:"type"`
	UpdatedAt                             string                                       `json:"updated_at"`
	Configuration                         []ConfigurationState                         `json:"configuration"`
	CustomDocumentEnrichmentConfiguration []CustomDocumentEnrichmentConfigurationState `json:"custom_document_enrichment_configuration"`
	Timeouts                              *TimeoutsState                               `json:"timeouts"`
}
