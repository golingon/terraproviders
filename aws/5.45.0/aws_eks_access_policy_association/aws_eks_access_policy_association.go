// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_eks_access_policy_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_eks_access_policy_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEksAccessPolicyAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeapa *Resource) Type() string {
	return "aws_eks_access_policy_association"
}

// LocalName returns the local name for [Resource].
func (aeapa *Resource) LocalName() string {
	return aeapa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeapa *Resource) Configuration() interface{} {
	return aeapa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeapa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeapa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeapa *Resource) Dependencies() terra.Dependencies {
	return aeapa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeapa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeapa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeapa *Resource) Attributes() awsEksAccessPolicyAssociationAttributes {
	return awsEksAccessPolicyAssociationAttributes{ref: terra.ReferenceResource(aeapa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeapa *Resource) ImportState(state io.Reader) error {
	aeapa.state = &awsEksAccessPolicyAssociationState{}
	if err := json.NewDecoder(state).Decode(aeapa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeapa.Type(), aeapa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeapa *Resource) State() (*awsEksAccessPolicyAssociationState, bool) {
	return aeapa.state, aeapa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeapa *Resource) StateMust() *awsEksAccessPolicyAssociationState {
	if aeapa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeapa.Type(), aeapa.LocalName()))
	}
	return aeapa.state
}

// Args contains the configurations for aws_eks_access_policy_association.
type Args struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyArn: string, required
	PolicyArn terra.StringValue `hcl:"policy_arn,attr" validate:"required"`
	// PrincipalArn: string, required
	PrincipalArn terra.StringValue `hcl:"principal_arn,attr" validate:"required"`
	// AccessScope: required
	AccessScope *AccessScope `hcl:"access_scope,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEksAccessPolicyAssociationAttributes struct {
	ref terra.Reference
}

// AssociatedAt returns a reference to field associated_at of aws_eks_access_policy_association.
func (aeapa awsEksAccessPolicyAssociationAttributes) AssociatedAt() terra.StringValue {
	return terra.ReferenceAsString(aeapa.ref.Append("associated_at"))
}

// ClusterName returns a reference to field cluster_name of aws_eks_access_policy_association.
func (aeapa awsEksAccessPolicyAssociationAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(aeapa.ref.Append("cluster_name"))
}

// Id returns a reference to field id of aws_eks_access_policy_association.
func (aeapa awsEksAccessPolicyAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeapa.ref.Append("id"))
}

// ModifiedAt returns a reference to field modified_at of aws_eks_access_policy_association.
func (aeapa awsEksAccessPolicyAssociationAttributes) ModifiedAt() terra.StringValue {
	return terra.ReferenceAsString(aeapa.ref.Append("modified_at"))
}

// PolicyArn returns a reference to field policy_arn of aws_eks_access_policy_association.
func (aeapa awsEksAccessPolicyAssociationAttributes) PolicyArn() terra.StringValue {
	return terra.ReferenceAsString(aeapa.ref.Append("policy_arn"))
}

// PrincipalArn returns a reference to field principal_arn of aws_eks_access_policy_association.
func (aeapa awsEksAccessPolicyAssociationAttributes) PrincipalArn() terra.StringValue {
	return terra.ReferenceAsString(aeapa.ref.Append("principal_arn"))
}

func (aeapa awsEksAccessPolicyAssociationAttributes) AccessScope() terra.ListValue[AccessScopeAttributes] {
	return terra.ReferenceAsList[AccessScopeAttributes](aeapa.ref.Append("access_scope"))
}

func (aeapa awsEksAccessPolicyAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aeapa.ref.Append("timeouts"))
}

type awsEksAccessPolicyAssociationState struct {
	AssociatedAt string             `json:"associated_at"`
	ClusterName  string             `json:"cluster_name"`
	Id           string             `json:"id"`
	ModifiedAt   string             `json:"modified_at"`
	PolicyArn    string             `json:"policy_arn"`
	PrincipalArn string             `json:"principal_arn"`
	AccessScope  []AccessScopeState `json:"access_scope"`
	Timeouts     *TimeoutsState     `json:"timeouts"`
}
