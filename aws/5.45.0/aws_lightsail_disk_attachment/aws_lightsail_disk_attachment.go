// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lightsail_disk_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lightsail_disk_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLightsailDiskAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alda *Resource) Type() string {
	return "aws_lightsail_disk_attachment"
}

// LocalName returns the local name for [Resource].
func (alda *Resource) LocalName() string {
	return alda.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alda *Resource) Configuration() interface{} {
	return alda.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alda *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alda)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alda *Resource) Dependencies() terra.Dependencies {
	return alda.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alda *Resource) LifecycleManagement() *terra.Lifecycle {
	return alda.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alda *Resource) Attributes() awsLightsailDiskAttachmentAttributes {
	return awsLightsailDiskAttachmentAttributes{ref: terra.ReferenceResource(alda)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alda *Resource) ImportState(state io.Reader) error {
	alda.state = &awsLightsailDiskAttachmentState{}
	if err := json.NewDecoder(state).Decode(alda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alda.Type(), alda.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alda *Resource) State() (*awsLightsailDiskAttachmentState, bool) {
	return alda.state, alda.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alda *Resource) StateMust() *awsLightsailDiskAttachmentState {
	if alda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alda.Type(), alda.LocalName()))
	}
	return alda.state
}

// Args contains the configurations for aws_lightsail_disk_attachment.
type Args struct {
	// DiskName: string, required
	DiskName terra.StringValue `hcl:"disk_name,attr" validate:"required"`
	// DiskPath: string, required
	DiskPath terra.StringValue `hcl:"disk_path,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceName: string, required
	InstanceName terra.StringValue `hcl:"instance_name,attr" validate:"required"`
}

type awsLightsailDiskAttachmentAttributes struct {
	ref terra.Reference
}

// DiskName returns a reference to field disk_name of aws_lightsail_disk_attachment.
func (alda awsLightsailDiskAttachmentAttributes) DiskName() terra.StringValue {
	return terra.ReferenceAsString(alda.ref.Append("disk_name"))
}

// DiskPath returns a reference to field disk_path of aws_lightsail_disk_attachment.
func (alda awsLightsailDiskAttachmentAttributes) DiskPath() terra.StringValue {
	return terra.ReferenceAsString(alda.ref.Append("disk_path"))
}

// Id returns a reference to field id of aws_lightsail_disk_attachment.
func (alda awsLightsailDiskAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alda.ref.Append("id"))
}

// InstanceName returns a reference to field instance_name of aws_lightsail_disk_attachment.
func (alda awsLightsailDiskAttachmentAttributes) InstanceName() terra.StringValue {
	return terra.ReferenceAsString(alda.ref.Append("instance_name"))
}

type awsLightsailDiskAttachmentState struct {
	DiskName     string `json:"disk_name"`
	DiskPath     string `json:"disk_path"`
	Id           string `json:"id"`
	InstanceName string `json:"instance_name"`
}
