// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_security_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_connect_security_profile.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConnectSecurityProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acsp *Resource) Type() string {
	return "aws_connect_security_profile"
}

// LocalName returns the local name for [Resource].
func (acsp *Resource) LocalName() string {
	return acsp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acsp *Resource) Configuration() interface{} {
	return acsp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acsp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acsp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acsp *Resource) Dependencies() terra.Dependencies {
	return acsp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acsp *Resource) LifecycleManagement() *terra.Lifecycle {
	return acsp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acsp *Resource) Attributes() awsConnectSecurityProfileAttributes {
	return awsConnectSecurityProfileAttributes{ref: terra.ReferenceResource(acsp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acsp *Resource) ImportState(state io.Reader) error {
	acsp.state = &awsConnectSecurityProfileState{}
	if err := json.NewDecoder(state).Decode(acsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acsp.Type(), acsp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acsp *Resource) State() (*awsConnectSecurityProfileState, bool) {
	return acsp.state, acsp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acsp *Resource) StateMust() *awsConnectSecurityProfileState {
	if acsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acsp.Type(), acsp.LocalName()))
	}
	return acsp.state
}

// Args contains the configurations for aws_connect_security_profile.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Permissions: set of string, optional
	Permissions terra.SetValue[terra.StringValue] `hcl:"permissions,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsConnectSecurityProfileAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_connect_security_profile.
func (acsp awsConnectSecurityProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acsp.ref.Append("arn"))
}

// Description returns a reference to field description of aws_connect_security_profile.
func (acsp awsConnectSecurityProfileAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acsp.ref.Append("description"))
}

// Id returns a reference to field id of aws_connect_security_profile.
func (acsp awsConnectSecurityProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acsp.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_connect_security_profile.
func (acsp awsConnectSecurityProfileAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(acsp.ref.Append("instance_id"))
}

// Name returns a reference to field name of aws_connect_security_profile.
func (acsp awsConnectSecurityProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acsp.ref.Append("name"))
}

// OrganizationResourceId returns a reference to field organization_resource_id of aws_connect_security_profile.
func (acsp awsConnectSecurityProfileAttributes) OrganizationResourceId() terra.StringValue {
	return terra.ReferenceAsString(acsp.ref.Append("organization_resource_id"))
}

// Permissions returns a reference to field permissions of aws_connect_security_profile.
func (acsp awsConnectSecurityProfileAttributes) Permissions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acsp.ref.Append("permissions"))
}

// SecurityProfileId returns a reference to field security_profile_id of aws_connect_security_profile.
func (acsp awsConnectSecurityProfileAttributes) SecurityProfileId() terra.StringValue {
	return terra.ReferenceAsString(acsp.ref.Append("security_profile_id"))
}

// Tags returns a reference to field tags of aws_connect_security_profile.
func (acsp awsConnectSecurityProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acsp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_connect_security_profile.
func (acsp awsConnectSecurityProfileAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acsp.ref.Append("tags_all"))
}

type awsConnectSecurityProfileState struct {
	Arn                    string            `json:"arn"`
	Description            string            `json:"description"`
	Id                     string            `json:"id"`
	InstanceId             string            `json:"instance_id"`
	Name                   string            `json:"name"`
	OrganizationResourceId string            `json:"organization_resource_id"`
	Permissions            []string          `json:"permissions"`
	SecurityProfileId      string            `json:"security_profile_id"`
	Tags                   map[string]string `json:"tags"`
	TagsAll                map[string]string `json:"tags_all"`
}
