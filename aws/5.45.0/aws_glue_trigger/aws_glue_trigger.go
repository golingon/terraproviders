// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_trigger

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glue_trigger.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlueTriggerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agt *Resource) Type() string {
	return "aws_glue_trigger"
}

// LocalName returns the local name for [Resource].
func (agt *Resource) LocalName() string {
	return agt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agt *Resource) Configuration() interface{} {
	return agt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agt *Resource) Dependencies() terra.Dependencies {
	return agt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agt *Resource) LifecycleManagement() *terra.Lifecycle {
	return agt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agt *Resource) Attributes() awsGlueTriggerAttributes {
	return awsGlueTriggerAttributes{ref: terra.ReferenceResource(agt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agt *Resource) ImportState(state io.Reader) error {
	agt.state = &awsGlueTriggerState{}
	if err := json.NewDecoder(state).Decode(agt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agt.Type(), agt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agt *Resource) State() (*awsGlueTriggerState, bool) {
	return agt.state, agt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agt *Resource) StateMust() *awsGlueTriggerState {
	if agt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agt.Type(), agt.LocalName()))
	}
	return agt.state
}

// Args contains the configurations for aws_glue_trigger.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Schedule: string, optional
	Schedule terra.StringValue `hcl:"schedule,attr"`
	// StartOnCreation: bool, optional
	StartOnCreation terra.BoolValue `hcl:"start_on_creation,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// WorkflowName: string, optional
	WorkflowName terra.StringValue `hcl:"workflow_name,attr"`
	// Actions: min=1
	Actions []Actions `hcl:"actions,block" validate:"min=1"`
	// EventBatchingCondition: min=0
	EventBatchingCondition []EventBatchingCondition `hcl:"event_batching_condition,block" validate:"min=0"`
	// Predicate: optional
	Predicate *Predicate `hcl:"predicate,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsGlueTriggerAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_glue_trigger.
func (agt awsGlueTriggerAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agt.ref.Append("arn"))
}

// Description returns a reference to field description of aws_glue_trigger.
func (agt awsGlueTriggerAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(agt.ref.Append("description"))
}

// Enabled returns a reference to field enabled of aws_glue_trigger.
func (agt awsGlueTriggerAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(agt.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_glue_trigger.
func (agt awsGlueTriggerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agt.ref.Append("id"))
}

// Name returns a reference to field name of aws_glue_trigger.
func (agt awsGlueTriggerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agt.ref.Append("name"))
}

// Schedule returns a reference to field schedule of aws_glue_trigger.
func (agt awsGlueTriggerAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(agt.ref.Append("schedule"))
}

// StartOnCreation returns a reference to field start_on_creation of aws_glue_trigger.
func (agt awsGlueTriggerAttributes) StartOnCreation() terra.BoolValue {
	return terra.ReferenceAsBool(agt.ref.Append("start_on_creation"))
}

// State returns a reference to field state of aws_glue_trigger.
func (agt awsGlueTriggerAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(agt.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_glue_trigger.
func (agt awsGlueTriggerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_glue_trigger.
func (agt awsGlueTriggerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agt.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_glue_trigger.
func (agt awsGlueTriggerAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(agt.ref.Append("type"))
}

// WorkflowName returns a reference to field workflow_name of aws_glue_trigger.
func (agt awsGlueTriggerAttributes) WorkflowName() terra.StringValue {
	return terra.ReferenceAsString(agt.ref.Append("workflow_name"))
}

func (agt awsGlueTriggerAttributes) Actions() terra.ListValue[ActionsAttributes] {
	return terra.ReferenceAsList[ActionsAttributes](agt.ref.Append("actions"))
}

func (agt awsGlueTriggerAttributes) EventBatchingCondition() terra.ListValue[EventBatchingConditionAttributes] {
	return terra.ReferenceAsList[EventBatchingConditionAttributes](agt.ref.Append("event_batching_condition"))
}

func (agt awsGlueTriggerAttributes) Predicate() terra.ListValue[PredicateAttributes] {
	return terra.ReferenceAsList[PredicateAttributes](agt.ref.Append("predicate"))
}

func (agt awsGlueTriggerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](agt.ref.Append("timeouts"))
}

type awsGlueTriggerState struct {
	Arn                    string                        `json:"arn"`
	Description            string                        `json:"description"`
	Enabled                bool                          `json:"enabled"`
	Id                     string                        `json:"id"`
	Name                   string                        `json:"name"`
	Schedule               string                        `json:"schedule"`
	StartOnCreation        bool                          `json:"start_on_creation"`
	State                  string                        `json:"state"`
	Tags                   map[string]string             `json:"tags"`
	TagsAll                map[string]string             `json:"tags_all"`
	Type                   string                        `json:"type"`
	WorkflowName           string                        `json:"workflow_name"`
	Actions                []ActionsState                `json:"actions"`
	EventBatchingCondition []EventBatchingConditionState `json:"event_batching_condition"`
	Predicate              []PredicateState              `json:"predicate"`
	Timeouts               *TimeoutsState                `json:"timeouts"`
}
