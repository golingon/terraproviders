// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecs_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ecs_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEcsClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aec *Resource) Type() string {
	return "aws_ecs_cluster"
}

// LocalName returns the local name for [Resource].
func (aec *Resource) LocalName() string {
	return aec.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aec *Resource) Configuration() interface{} {
	return aec.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aec *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aec)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aec *Resource) Dependencies() terra.Dependencies {
	return aec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aec *Resource) LifecycleManagement() *terra.Lifecycle {
	return aec.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aec *Resource) Attributes() awsEcsClusterAttributes {
	return awsEcsClusterAttributes{ref: terra.ReferenceResource(aec)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aec *Resource) ImportState(state io.Reader) error {
	aec.state = &awsEcsClusterState{}
	if err := json.NewDecoder(state).Decode(aec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aec.Type(), aec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aec *Resource) State() (*awsEcsClusterState, bool) {
	return aec.state, aec.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aec *Resource) StateMust() *awsEcsClusterState {
	if aec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aec.Type(), aec.LocalName()))
	}
	return aec.state
}

// Args contains the configurations for aws_ecs_cluster.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Configuration: optional
	Configuration *Configuration `hcl:"configuration,block"`
	// ServiceConnectDefaults: optional
	ServiceConnectDefaults *ServiceConnectDefaults `hcl:"service_connect_defaults,block"`
	// Setting: min=0
	Setting []Setting `hcl:"setting,block" validate:"min=0"`
}

type awsEcsClusterAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ecs_cluster.
func (aec awsEcsClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("arn"))
}

// Id returns a reference to field id of aws_ecs_cluster.
func (aec awsEcsClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("id"))
}

// Name returns a reference to field name of aws_ecs_cluster.
func (aec awsEcsClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_ecs_cluster.
func (aec awsEcsClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aec.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ecs_cluster.
func (aec awsEcsClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aec.ref.Append("tags_all"))
}

func (aec awsEcsClusterAttributes) Configuration() terra.ListValue[ConfigurationAttributes] {
	return terra.ReferenceAsList[ConfigurationAttributes](aec.ref.Append("configuration"))
}

func (aec awsEcsClusterAttributes) ServiceConnectDefaults() terra.ListValue[ServiceConnectDefaultsAttributes] {
	return terra.ReferenceAsList[ServiceConnectDefaultsAttributes](aec.ref.Append("service_connect_defaults"))
}

func (aec awsEcsClusterAttributes) Setting() terra.SetValue[SettingAttributes] {
	return terra.ReferenceAsSet[SettingAttributes](aec.ref.Append("setting"))
}

type awsEcsClusterState struct {
	Arn                    string                        `json:"arn"`
	Id                     string                        `json:"id"`
	Name                   string                        `json:"name"`
	Tags                   map[string]string             `json:"tags"`
	TagsAll                map[string]string             `json:"tags_all"`
	Configuration          []ConfigurationState          `json:"configuration"`
	ServiceConnectDefaults []ServiceConnectDefaultsState `json:"service_connect_defaults"`
	Setting                []SettingState                `json:"setting"`
}
