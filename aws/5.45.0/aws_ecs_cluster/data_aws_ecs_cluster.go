// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecs_cluster

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_ecs_cluster.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aec *DataSource) DataSource() string {
	return "aws_ecs_cluster"
}

// LocalName returns the local name for [DataSource].
func (aec *DataSource) LocalName() string {
	return aec.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aec *DataSource) Configuration() interface{} {
	return aec.Args
}

// Attributes returns the attributes for [DataSource].
func (aec *DataSource) Attributes() dataAwsEcsClusterAttributes {
	return dataAwsEcsClusterAttributes{ref: terra.ReferenceDataSource(aec)}
}

// DataArgs contains the configurations for aws_ecs_cluster.
type DataArgs struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type dataAwsEcsClusterAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ecs_cluster.
func (aec dataAwsEcsClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("arn"))
}

// ClusterName returns a reference to field cluster_name of aws_ecs_cluster.
func (aec dataAwsEcsClusterAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("cluster_name"))
}

// Id returns a reference to field id of aws_ecs_cluster.
func (aec dataAwsEcsClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("id"))
}

// PendingTasksCount returns a reference to field pending_tasks_count of aws_ecs_cluster.
func (aec dataAwsEcsClusterAttributes) PendingTasksCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aec.ref.Append("pending_tasks_count"))
}

// RegisteredContainerInstancesCount returns a reference to field registered_container_instances_count of aws_ecs_cluster.
func (aec dataAwsEcsClusterAttributes) RegisteredContainerInstancesCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aec.ref.Append("registered_container_instances_count"))
}

// RunningTasksCount returns a reference to field running_tasks_count of aws_ecs_cluster.
func (aec dataAwsEcsClusterAttributes) RunningTasksCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aec.ref.Append("running_tasks_count"))
}

// Status returns a reference to field status of aws_ecs_cluster.
func (aec dataAwsEcsClusterAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_ecs_cluster.
func (aec dataAwsEcsClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aec.ref.Append("tags"))
}

func (aec dataAwsEcsClusterAttributes) ServiceConnectDefaults() terra.ListValue[DataServiceConnectDefaultsAttributes] {
	return terra.ReferenceAsList[DataServiceConnectDefaultsAttributes](aec.ref.Append("service_connect_defaults"))
}

func (aec dataAwsEcsClusterAttributes) Setting() terra.SetValue[DataSettingAttributes] {
	return terra.ReferenceAsSet[DataSettingAttributes](aec.ref.Append("setting"))
}
