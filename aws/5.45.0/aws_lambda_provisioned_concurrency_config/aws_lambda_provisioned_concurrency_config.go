// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lambda_provisioned_concurrency_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lambda_provisioned_concurrency_config.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLambdaProvisionedConcurrencyConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alpcc *Resource) Type() string {
	return "aws_lambda_provisioned_concurrency_config"
}

// LocalName returns the local name for [Resource].
func (alpcc *Resource) LocalName() string {
	return alpcc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alpcc *Resource) Configuration() interface{} {
	return alpcc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alpcc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alpcc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alpcc *Resource) Dependencies() terra.Dependencies {
	return alpcc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alpcc *Resource) LifecycleManagement() *terra.Lifecycle {
	return alpcc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alpcc *Resource) Attributes() awsLambdaProvisionedConcurrencyConfigAttributes {
	return awsLambdaProvisionedConcurrencyConfigAttributes{ref: terra.ReferenceResource(alpcc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alpcc *Resource) ImportState(state io.Reader) error {
	alpcc.state = &awsLambdaProvisionedConcurrencyConfigState{}
	if err := json.NewDecoder(state).Decode(alpcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alpcc.Type(), alpcc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alpcc *Resource) State() (*awsLambdaProvisionedConcurrencyConfigState, bool) {
	return alpcc.state, alpcc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alpcc *Resource) StateMust() *awsLambdaProvisionedConcurrencyConfigState {
	if alpcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alpcc.Type(), alpcc.LocalName()))
	}
	return alpcc.state
}

// Args contains the configurations for aws_lambda_provisioned_concurrency_config.
type Args struct {
	// FunctionName: string, required
	FunctionName terra.StringValue `hcl:"function_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProvisionedConcurrentExecutions: number, required
	ProvisionedConcurrentExecutions terra.NumberValue `hcl:"provisioned_concurrent_executions,attr" validate:"required"`
	// Qualifier: string, required
	Qualifier terra.StringValue `hcl:"qualifier,attr" validate:"required"`
	// SkipDestroy: bool, optional
	SkipDestroy terra.BoolValue `hcl:"skip_destroy,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsLambdaProvisionedConcurrencyConfigAttributes struct {
	ref terra.Reference
}

// FunctionName returns a reference to field function_name of aws_lambda_provisioned_concurrency_config.
func (alpcc awsLambdaProvisionedConcurrencyConfigAttributes) FunctionName() terra.StringValue {
	return terra.ReferenceAsString(alpcc.ref.Append("function_name"))
}

// Id returns a reference to field id of aws_lambda_provisioned_concurrency_config.
func (alpcc awsLambdaProvisionedConcurrencyConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alpcc.ref.Append("id"))
}

// ProvisionedConcurrentExecutions returns a reference to field provisioned_concurrent_executions of aws_lambda_provisioned_concurrency_config.
func (alpcc awsLambdaProvisionedConcurrencyConfigAttributes) ProvisionedConcurrentExecutions() terra.NumberValue {
	return terra.ReferenceAsNumber(alpcc.ref.Append("provisioned_concurrent_executions"))
}

// Qualifier returns a reference to field qualifier of aws_lambda_provisioned_concurrency_config.
func (alpcc awsLambdaProvisionedConcurrencyConfigAttributes) Qualifier() terra.StringValue {
	return terra.ReferenceAsString(alpcc.ref.Append("qualifier"))
}

// SkipDestroy returns a reference to field skip_destroy of aws_lambda_provisioned_concurrency_config.
func (alpcc awsLambdaProvisionedConcurrencyConfigAttributes) SkipDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(alpcc.ref.Append("skip_destroy"))
}

func (alpcc awsLambdaProvisionedConcurrencyConfigAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alpcc.ref.Append("timeouts"))
}

type awsLambdaProvisionedConcurrencyConfigState struct {
	FunctionName                    string         `json:"function_name"`
	Id                              string         `json:"id"`
	ProvisionedConcurrentExecutions float64        `json:"provisioned_concurrent_executions"`
	Qualifier                       string         `json:"qualifier"`
	SkipDestroy                     bool           `json:"skip_destroy"`
	Timeouts                        *TimeoutsState `json:"timeouts"`
}
