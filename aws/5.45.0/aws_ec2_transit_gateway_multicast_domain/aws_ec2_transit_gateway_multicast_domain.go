// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_transit_gateway_multicast_domain

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_transit_gateway_multicast_domain.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2TransitGatewayMulticastDomainState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aetgmd *Resource) Type() string {
	return "aws_ec2_transit_gateway_multicast_domain"
}

// LocalName returns the local name for [Resource].
func (aetgmd *Resource) LocalName() string {
	return aetgmd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aetgmd *Resource) Configuration() interface{} {
	return aetgmd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aetgmd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aetgmd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aetgmd *Resource) Dependencies() terra.Dependencies {
	return aetgmd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aetgmd *Resource) LifecycleManagement() *terra.Lifecycle {
	return aetgmd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aetgmd *Resource) Attributes() awsEc2TransitGatewayMulticastDomainAttributes {
	return awsEc2TransitGatewayMulticastDomainAttributes{ref: terra.ReferenceResource(aetgmd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aetgmd *Resource) ImportState(state io.Reader) error {
	aetgmd.state = &awsEc2TransitGatewayMulticastDomainState{}
	if err := json.NewDecoder(state).Decode(aetgmd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aetgmd.Type(), aetgmd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aetgmd *Resource) State() (*awsEc2TransitGatewayMulticastDomainState, bool) {
	return aetgmd.state, aetgmd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aetgmd *Resource) StateMust() *awsEc2TransitGatewayMulticastDomainState {
	if aetgmd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aetgmd.Type(), aetgmd.LocalName()))
	}
	return aetgmd.state
}

// Args contains the configurations for aws_ec2_transit_gateway_multicast_domain.
type Args struct {
	// AutoAcceptSharedAssociations: string, optional
	AutoAcceptSharedAssociations terra.StringValue `hcl:"auto_accept_shared_associations,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Igmpv2Support: string, optional
	Igmpv2Support terra.StringValue `hcl:"igmpv2_support,attr"`
	// StaticSourcesSupport: string, optional
	StaticSourcesSupport terra.StringValue `hcl:"static_sources_support,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitGatewayId: string, required
	TransitGatewayId terra.StringValue `hcl:"transit_gateway_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEc2TransitGatewayMulticastDomainAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ec2_transit_gateway_multicast_domain.
func (aetgmd awsEc2TransitGatewayMulticastDomainAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aetgmd.ref.Append("arn"))
}

// AutoAcceptSharedAssociations returns a reference to field auto_accept_shared_associations of aws_ec2_transit_gateway_multicast_domain.
func (aetgmd awsEc2TransitGatewayMulticastDomainAttributes) AutoAcceptSharedAssociations() terra.StringValue {
	return terra.ReferenceAsString(aetgmd.ref.Append("auto_accept_shared_associations"))
}

// Id returns a reference to field id of aws_ec2_transit_gateway_multicast_domain.
func (aetgmd awsEc2TransitGatewayMulticastDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aetgmd.ref.Append("id"))
}

// Igmpv2Support returns a reference to field igmpv2_support of aws_ec2_transit_gateway_multicast_domain.
func (aetgmd awsEc2TransitGatewayMulticastDomainAttributes) Igmpv2Support() terra.StringValue {
	return terra.ReferenceAsString(aetgmd.ref.Append("igmpv2_support"))
}

// OwnerId returns a reference to field owner_id of aws_ec2_transit_gateway_multicast_domain.
func (aetgmd awsEc2TransitGatewayMulticastDomainAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(aetgmd.ref.Append("owner_id"))
}

// StaticSourcesSupport returns a reference to field static_sources_support of aws_ec2_transit_gateway_multicast_domain.
func (aetgmd awsEc2TransitGatewayMulticastDomainAttributes) StaticSourcesSupport() terra.StringValue {
	return terra.ReferenceAsString(aetgmd.ref.Append("static_sources_support"))
}

// Tags returns a reference to field tags of aws_ec2_transit_gateway_multicast_domain.
func (aetgmd awsEc2TransitGatewayMulticastDomainAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetgmd.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_transit_gateway_multicast_domain.
func (aetgmd awsEc2TransitGatewayMulticastDomainAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetgmd.ref.Append("tags_all"))
}

// TransitGatewayId returns a reference to field transit_gateway_id of aws_ec2_transit_gateway_multicast_domain.
func (aetgmd awsEc2TransitGatewayMulticastDomainAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceAsString(aetgmd.ref.Append("transit_gateway_id"))
}

func (aetgmd awsEc2TransitGatewayMulticastDomainAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aetgmd.ref.Append("timeouts"))
}

type awsEc2TransitGatewayMulticastDomainState struct {
	Arn                          string            `json:"arn"`
	AutoAcceptSharedAssociations string            `json:"auto_accept_shared_associations"`
	Id                           string            `json:"id"`
	Igmpv2Support                string            `json:"igmpv2_support"`
	OwnerId                      string            `json:"owner_id"`
	StaticSourcesSupport         string            `json:"static_sources_support"`
	Tags                         map[string]string `json:"tags"`
	TagsAll                      map[string]string `json:"tags_all"`
	TransitGatewayId             string            `json:"transit_gateway_id"`
	Timeouts                     *TimeoutsState    `json:"timeouts"`
}
