// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_secretsmanager_secret_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_secretsmanager_secret_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSecretsmanagerSecretPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (assp *Resource) Type() string {
	return "aws_secretsmanager_secret_policy"
}

// LocalName returns the local name for [Resource].
func (assp *Resource) LocalName() string {
	return assp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (assp *Resource) Configuration() interface{} {
	return assp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (assp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(assp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (assp *Resource) Dependencies() terra.Dependencies {
	return assp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (assp *Resource) LifecycleManagement() *terra.Lifecycle {
	return assp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (assp *Resource) Attributes() awsSecretsmanagerSecretPolicyAttributes {
	return awsSecretsmanagerSecretPolicyAttributes{ref: terra.ReferenceResource(assp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (assp *Resource) ImportState(state io.Reader) error {
	assp.state = &awsSecretsmanagerSecretPolicyState{}
	if err := json.NewDecoder(state).Decode(assp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", assp.Type(), assp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (assp *Resource) State() (*awsSecretsmanagerSecretPolicyState, bool) {
	return assp.state, assp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (assp *Resource) StateMust() *awsSecretsmanagerSecretPolicyState {
	if assp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", assp.Type(), assp.LocalName()))
	}
	return assp.state
}

// Args contains the configurations for aws_secretsmanager_secret_policy.
type Args struct {
	// BlockPublicPolicy: bool, optional
	BlockPublicPolicy terra.BoolValue `hcl:"block_public_policy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// SecretArn: string, required
	SecretArn terra.StringValue `hcl:"secret_arn,attr" validate:"required"`
}

type awsSecretsmanagerSecretPolicyAttributes struct {
	ref terra.Reference
}

// BlockPublicPolicy returns a reference to field block_public_policy of aws_secretsmanager_secret_policy.
func (assp awsSecretsmanagerSecretPolicyAttributes) BlockPublicPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(assp.ref.Append("block_public_policy"))
}

// Id returns a reference to field id of aws_secretsmanager_secret_policy.
func (assp awsSecretsmanagerSecretPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_secretsmanager_secret_policy.
func (assp awsSecretsmanagerSecretPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("policy"))
}

// SecretArn returns a reference to field secret_arn of aws_secretsmanager_secret_policy.
func (assp awsSecretsmanagerSecretPolicyAttributes) SecretArn() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("secret_arn"))
}

type awsSecretsmanagerSecretPolicyState struct {
	BlockPublicPolicy bool   `json:"block_public_policy"`
	Id                string `json:"id"`
	Policy            string `json:"policy"`
	SecretArn         string `json:"secret_arn"`
}
