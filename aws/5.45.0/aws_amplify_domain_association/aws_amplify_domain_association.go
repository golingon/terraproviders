// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_amplify_domain_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_amplify_domain_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAmplifyDomainAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aada *Resource) Type() string {
	return "aws_amplify_domain_association"
}

// LocalName returns the local name for [Resource].
func (aada *Resource) LocalName() string {
	return aada.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aada *Resource) Configuration() interface{} {
	return aada.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aada *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aada)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aada *Resource) Dependencies() terra.Dependencies {
	return aada.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aada *Resource) LifecycleManagement() *terra.Lifecycle {
	return aada.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aada *Resource) Attributes() awsAmplifyDomainAssociationAttributes {
	return awsAmplifyDomainAssociationAttributes{ref: terra.ReferenceResource(aada)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aada *Resource) ImportState(state io.Reader) error {
	aada.state = &awsAmplifyDomainAssociationState{}
	if err := json.NewDecoder(state).Decode(aada.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aada.Type(), aada.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aada *Resource) State() (*awsAmplifyDomainAssociationState, bool) {
	return aada.state, aada.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aada *Resource) StateMust() *awsAmplifyDomainAssociationState {
	if aada.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aada.Type(), aada.LocalName()))
	}
	return aada.state
}

// Args contains the configurations for aws_amplify_domain_association.
type Args struct {
	// AppId: string, required
	AppId terra.StringValue `hcl:"app_id,attr" validate:"required"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// EnableAutoSubDomain: bool, optional
	EnableAutoSubDomain terra.BoolValue `hcl:"enable_auto_sub_domain,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// WaitForVerification: bool, optional
	WaitForVerification terra.BoolValue `hcl:"wait_for_verification,attr"`
	// SubDomain: min=1
	SubDomain []SubDomain `hcl:"sub_domain,block" validate:"min=1"`
}

type awsAmplifyDomainAssociationAttributes struct {
	ref terra.Reference
}

// AppId returns a reference to field app_id of aws_amplify_domain_association.
func (aada awsAmplifyDomainAssociationAttributes) AppId() terra.StringValue {
	return terra.ReferenceAsString(aada.ref.Append("app_id"))
}

// Arn returns a reference to field arn of aws_amplify_domain_association.
func (aada awsAmplifyDomainAssociationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aada.ref.Append("arn"))
}

// CertificateVerificationDnsRecord returns a reference to field certificate_verification_dns_record of aws_amplify_domain_association.
func (aada awsAmplifyDomainAssociationAttributes) CertificateVerificationDnsRecord() terra.StringValue {
	return terra.ReferenceAsString(aada.ref.Append("certificate_verification_dns_record"))
}

// DomainName returns a reference to field domain_name of aws_amplify_domain_association.
func (aada awsAmplifyDomainAssociationAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(aada.ref.Append("domain_name"))
}

// EnableAutoSubDomain returns a reference to field enable_auto_sub_domain of aws_amplify_domain_association.
func (aada awsAmplifyDomainAssociationAttributes) EnableAutoSubDomain() terra.BoolValue {
	return terra.ReferenceAsBool(aada.ref.Append("enable_auto_sub_domain"))
}

// Id returns a reference to field id of aws_amplify_domain_association.
func (aada awsAmplifyDomainAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aada.ref.Append("id"))
}

// WaitForVerification returns a reference to field wait_for_verification of aws_amplify_domain_association.
func (aada awsAmplifyDomainAssociationAttributes) WaitForVerification() terra.BoolValue {
	return terra.ReferenceAsBool(aada.ref.Append("wait_for_verification"))
}

func (aada awsAmplifyDomainAssociationAttributes) SubDomain() terra.SetValue[SubDomainAttributes] {
	return terra.ReferenceAsSet[SubDomainAttributes](aada.ref.Append("sub_domain"))
}

type awsAmplifyDomainAssociationState struct {
	AppId                            string           `json:"app_id"`
	Arn                              string           `json:"arn"`
	CertificateVerificationDnsRecord string           `json:"certificate_verification_dns_record"`
	DomainName                       string           `json:"domain_name"`
	EnableAutoSubDomain              bool             `json:"enable_auto_sub_domain"`
	Id                               string           `json:"id"`
	WaitForVerification              bool             `json:"wait_for_verification"`
	SubDomain                        []SubDomainState `json:"sub_domain"`
}
