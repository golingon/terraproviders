// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glue_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlueConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agc *Resource) Type() string {
	return "aws_glue_connection"
}

// LocalName returns the local name for [Resource].
func (agc *Resource) LocalName() string {
	return agc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agc *Resource) Configuration() interface{} {
	return agc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agc *Resource) Dependencies() terra.Dependencies {
	return agc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agc *Resource) LifecycleManagement() *terra.Lifecycle {
	return agc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agc *Resource) Attributes() awsGlueConnectionAttributes {
	return awsGlueConnectionAttributes{ref: terra.ReferenceResource(agc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agc *Resource) ImportState(state io.Reader) error {
	agc.state = &awsGlueConnectionState{}
	if err := json.NewDecoder(state).Decode(agc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agc.Type(), agc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agc *Resource) State() (*awsGlueConnectionState, bool) {
	return agc.state, agc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agc *Resource) StateMust() *awsGlueConnectionState {
	if agc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agc.Type(), agc.LocalName()))
	}
	return agc.state
}

// Args contains the configurations for aws_glue_connection.
type Args struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// ConnectionProperties: map of string, optional
	ConnectionProperties terra.MapValue[terra.StringValue] `hcl:"connection_properties,attr"`
	// ConnectionType: string, optional
	ConnectionType terra.StringValue `hcl:"connection_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MatchCriteria: list of string, optional
	MatchCriteria terra.ListValue[terra.StringValue] `hcl:"match_criteria,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// PhysicalConnectionRequirements: optional
	PhysicalConnectionRequirements *PhysicalConnectionRequirements `hcl:"physical_connection_requirements,block"`
}

type awsGlueConnectionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_glue_connection.
func (agc awsGlueConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("arn"))
}

// CatalogId returns a reference to field catalog_id of aws_glue_connection.
func (agc awsGlueConnectionAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("catalog_id"))
}

// ConnectionProperties returns a reference to field connection_properties of aws_glue_connection.
func (agc awsGlueConnectionAttributes) ConnectionProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agc.ref.Append("connection_properties"))
}

// ConnectionType returns a reference to field connection_type of aws_glue_connection.
func (agc awsGlueConnectionAttributes) ConnectionType() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("connection_type"))
}

// Description returns a reference to field description of aws_glue_connection.
func (agc awsGlueConnectionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("description"))
}

// Id returns a reference to field id of aws_glue_connection.
func (agc awsGlueConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("id"))
}

// MatchCriteria returns a reference to field match_criteria of aws_glue_connection.
func (agc awsGlueConnectionAttributes) MatchCriteria() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](agc.ref.Append("match_criteria"))
}

// Name returns a reference to field name of aws_glue_connection.
func (agc awsGlueConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_glue_connection.
func (agc awsGlueConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_glue_connection.
func (agc awsGlueConnectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agc.ref.Append("tags_all"))
}

func (agc awsGlueConnectionAttributes) PhysicalConnectionRequirements() terra.ListValue[PhysicalConnectionRequirementsAttributes] {
	return terra.ReferenceAsList[PhysicalConnectionRequirementsAttributes](agc.ref.Append("physical_connection_requirements"))
}

type awsGlueConnectionState struct {
	Arn                            string                                `json:"arn"`
	CatalogId                      string                                `json:"catalog_id"`
	ConnectionProperties           map[string]string                     `json:"connection_properties"`
	ConnectionType                 string                                `json:"connection_type"`
	Description                    string                                `json:"description"`
	Id                             string                                `json:"id"`
	MatchCriteria                  []string                              `json:"match_criteria"`
	Name                           string                                `json:"name"`
	Tags                           map[string]string                     `json:"tags"`
	TagsAll                        map[string]string                     `json:"tags_all"`
	PhysicalConnectionRequirements []PhysicalConnectionRequirementsState `json:"physical_connection_requirements"`
}
