// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_endpoint_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpc_endpoint_service.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpcEndpointServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aves *Resource) Type() string {
	return "aws_vpc_endpoint_service"
}

// LocalName returns the local name for [Resource].
func (aves *Resource) LocalName() string {
	return aves.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aves *Resource) Configuration() interface{} {
	return aves.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aves *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aves)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aves *Resource) Dependencies() terra.Dependencies {
	return aves.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aves *Resource) LifecycleManagement() *terra.Lifecycle {
	return aves.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aves *Resource) Attributes() awsVpcEndpointServiceAttributes {
	return awsVpcEndpointServiceAttributes{ref: terra.ReferenceResource(aves)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aves *Resource) ImportState(state io.Reader) error {
	aves.state = &awsVpcEndpointServiceState{}
	if err := json.NewDecoder(state).Decode(aves.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aves.Type(), aves.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aves *Resource) State() (*awsVpcEndpointServiceState, bool) {
	return aves.state, aves.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aves *Resource) StateMust() *awsVpcEndpointServiceState {
	if aves.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aves.Type(), aves.LocalName()))
	}
	return aves.state
}

// Args contains the configurations for aws_vpc_endpoint_service.
type Args struct {
	// AcceptanceRequired: bool, required
	AcceptanceRequired terra.BoolValue `hcl:"acceptance_required,attr" validate:"required"`
	// AllowedPrincipals: set of string, optional
	AllowedPrincipals terra.SetValue[terra.StringValue] `hcl:"allowed_principals,attr"`
	// GatewayLoadBalancerArns: set of string, optional
	GatewayLoadBalancerArns terra.SetValue[terra.StringValue] `hcl:"gateway_load_balancer_arns,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetworkLoadBalancerArns: set of string, optional
	NetworkLoadBalancerArns terra.SetValue[terra.StringValue] `hcl:"network_load_balancer_arns,attr"`
	// PrivateDnsName: string, optional
	PrivateDnsName terra.StringValue `hcl:"private_dns_name,attr"`
	// SupportedIpAddressTypes: set of string, optional
	SupportedIpAddressTypes terra.SetValue[terra.StringValue] `hcl:"supported_ip_address_types,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVpcEndpointServiceAttributes struct {
	ref terra.Reference
}

// AcceptanceRequired returns a reference to field acceptance_required of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) AcceptanceRequired() terra.BoolValue {
	return terra.ReferenceAsBool(aves.ref.Append("acceptance_required"))
}

// AllowedPrincipals returns a reference to field allowed_principals of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) AllowedPrincipals() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aves.ref.Append("allowed_principals"))
}

// Arn returns a reference to field arn of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("arn"))
}

// AvailabilityZones returns a reference to field availability_zones of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aves.ref.Append("availability_zones"))
}

// BaseEndpointDnsNames returns a reference to field base_endpoint_dns_names of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) BaseEndpointDnsNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aves.ref.Append("base_endpoint_dns_names"))
}

// GatewayLoadBalancerArns returns a reference to field gateway_load_balancer_arns of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) GatewayLoadBalancerArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aves.ref.Append("gateway_load_balancer_arns"))
}

// Id returns a reference to field id of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("id"))
}

// ManagesVpcEndpoints returns a reference to field manages_vpc_endpoints of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) ManagesVpcEndpoints() terra.BoolValue {
	return terra.ReferenceAsBool(aves.ref.Append("manages_vpc_endpoints"))
}

// NetworkLoadBalancerArns returns a reference to field network_load_balancer_arns of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) NetworkLoadBalancerArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aves.ref.Append("network_load_balancer_arns"))
}

// PrivateDnsName returns a reference to field private_dns_name of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) PrivateDnsName() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("private_dns_name"))
}

// ServiceName returns a reference to field service_name of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("service_name"))
}

// ServiceType returns a reference to field service_type of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) ServiceType() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("service_type"))
}

// State returns a reference to field state of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("state"))
}

// SupportedIpAddressTypes returns a reference to field supported_ip_address_types of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) SupportedIpAddressTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aves.ref.Append("supported_ip_address_types"))
}

// Tags returns a reference to field tags of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aves.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpc_endpoint_service.
func (aves awsVpcEndpointServiceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aves.ref.Append("tags_all"))
}

func (aves awsVpcEndpointServiceAttributes) PrivateDnsNameConfiguration() terra.ListValue[PrivateDnsNameConfigurationAttributes] {
	return terra.ReferenceAsList[PrivateDnsNameConfigurationAttributes](aves.ref.Append("private_dns_name_configuration"))
}

func (aves awsVpcEndpointServiceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aves.ref.Append("timeouts"))
}

type awsVpcEndpointServiceState struct {
	AcceptanceRequired          bool                               `json:"acceptance_required"`
	AllowedPrincipals           []string                           `json:"allowed_principals"`
	Arn                         string                             `json:"arn"`
	AvailabilityZones           []string                           `json:"availability_zones"`
	BaseEndpointDnsNames        []string                           `json:"base_endpoint_dns_names"`
	GatewayLoadBalancerArns     []string                           `json:"gateway_load_balancer_arns"`
	Id                          string                             `json:"id"`
	ManagesVpcEndpoints         bool                               `json:"manages_vpc_endpoints"`
	NetworkLoadBalancerArns     []string                           `json:"network_load_balancer_arns"`
	PrivateDnsName              string                             `json:"private_dns_name"`
	ServiceName                 string                             `json:"service_name"`
	ServiceType                 string                             `json:"service_type"`
	State                       string                             `json:"state"`
	SupportedIpAddressTypes     []string                           `json:"supported_ip_address_types"`
	Tags                        map[string]string                  `json:"tags"`
	TagsAll                     map[string]string                  `json:"tags_all"`
	PrivateDnsNameConfiguration []PrivateDnsNameConfigurationState `json:"private_dns_name_configuration"`
	Timeouts                    *TimeoutsState                     `json:"timeouts"`
}
