// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_endpoint_service

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_vpc_endpoint_service.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aves *DataSource) DataSource() string {
	return "aws_vpc_endpoint_service"
}

// LocalName returns the local name for [DataSource].
func (aves *DataSource) LocalName() string {
	return aves.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aves *DataSource) Configuration() interface{} {
	return aves.Args
}

// Attributes returns the attributes for [DataSource].
func (aves *DataSource) Attributes() dataAwsVpcEndpointServiceAttributes {
	return dataAwsVpcEndpointServiceAttributes{ref: terra.ReferenceDataSource(aves)}
}

// DataArgs contains the configurations for aws_vpc_endpoint_service.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Service: string, optional
	Service terra.StringValue `hcl:"service,attr"`
	// ServiceName: string, optional
	ServiceName terra.StringValue `hcl:"service_name,attr"`
	// ServiceType: string, optional
	ServiceType terra.StringValue `hcl:"service_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filter: min=0
	Filter []DataFilter `hcl:"filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *DataTimeouts `hcl:"timeouts,block"`
}

type dataAwsVpcEndpointServiceAttributes struct {
	ref terra.Reference
}

// AcceptanceRequired returns a reference to field acceptance_required of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) AcceptanceRequired() terra.BoolValue {
	return terra.ReferenceAsBool(aves.ref.Append("acceptance_required"))
}

// Arn returns a reference to field arn of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("arn"))
}

// AvailabilityZones returns a reference to field availability_zones of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aves.ref.Append("availability_zones"))
}

// BaseEndpointDnsNames returns a reference to field base_endpoint_dns_names of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) BaseEndpointDnsNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aves.ref.Append("base_endpoint_dns_names"))
}

// Id returns a reference to field id of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("id"))
}

// ManagesVpcEndpoints returns a reference to field manages_vpc_endpoints of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) ManagesVpcEndpoints() terra.BoolValue {
	return terra.ReferenceAsBool(aves.ref.Append("manages_vpc_endpoints"))
}

// Owner returns a reference to field owner of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("owner"))
}

// PrivateDnsName returns a reference to field private_dns_name of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) PrivateDnsName() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("private_dns_name"))
}

// Service returns a reference to field service of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("service"))
}

// ServiceId returns a reference to field service_id of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("service_id"))
}

// ServiceName returns a reference to field service_name of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("service_name"))
}

// ServiceType returns a reference to field service_type of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) ServiceType() terra.StringValue {
	return terra.ReferenceAsString(aves.ref.Append("service_type"))
}

// SupportedIpAddressTypes returns a reference to field supported_ip_address_types of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) SupportedIpAddressTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aves.ref.Append("supported_ip_address_types"))
}

// Tags returns a reference to field tags of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aves.ref.Append("tags"))
}

// VpcEndpointPolicySupported returns a reference to field vpc_endpoint_policy_supported of aws_vpc_endpoint_service.
func (aves dataAwsVpcEndpointServiceAttributes) VpcEndpointPolicySupported() terra.BoolValue {
	return terra.ReferenceAsBool(aves.ref.Append("vpc_endpoint_policy_supported"))
}

func (aves dataAwsVpcEndpointServiceAttributes) Filter() terra.SetValue[DataFilterAttributes] {
	return terra.ReferenceAsSet[DataFilterAttributes](aves.ref.Append("filter"))
}

func (aves dataAwsVpcEndpointServiceAttributes) Timeouts() DataTimeoutsAttributes {
	return terra.ReferenceAsSingle[DataTimeoutsAttributes](aves.ref.Append("timeouts"))
}
