// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3control_access_point_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3control_access_point_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3ControlAccessPointPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asapp *Resource) Type() string {
	return "aws_s3control_access_point_policy"
}

// LocalName returns the local name for [Resource].
func (asapp *Resource) LocalName() string {
	return asapp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asapp *Resource) Configuration() interface{} {
	return asapp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asapp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asapp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asapp *Resource) Dependencies() terra.Dependencies {
	return asapp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asapp *Resource) LifecycleManagement() *terra.Lifecycle {
	return asapp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asapp *Resource) Attributes() awsS3ControlAccessPointPolicyAttributes {
	return awsS3ControlAccessPointPolicyAttributes{ref: terra.ReferenceResource(asapp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asapp *Resource) ImportState(state io.Reader) error {
	asapp.state = &awsS3ControlAccessPointPolicyState{}
	if err := json.NewDecoder(state).Decode(asapp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asapp.Type(), asapp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asapp *Resource) State() (*awsS3ControlAccessPointPolicyState, bool) {
	return asapp.state, asapp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asapp *Resource) StateMust() *awsS3ControlAccessPointPolicyState {
	if asapp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asapp.Type(), asapp.LocalName()))
	}
	return asapp.state
}

// Args contains the configurations for aws_s3control_access_point_policy.
type Args struct {
	// AccessPointArn: string, required
	AccessPointArn terra.StringValue `hcl:"access_point_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
}

type awsS3ControlAccessPointPolicyAttributes struct {
	ref terra.Reference
}

// AccessPointArn returns a reference to field access_point_arn of aws_s3control_access_point_policy.
func (asapp awsS3ControlAccessPointPolicyAttributes) AccessPointArn() terra.StringValue {
	return terra.ReferenceAsString(asapp.ref.Append("access_point_arn"))
}

// HasPublicAccessPolicy returns a reference to field has_public_access_policy of aws_s3control_access_point_policy.
func (asapp awsS3ControlAccessPointPolicyAttributes) HasPublicAccessPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(asapp.ref.Append("has_public_access_policy"))
}

// Id returns a reference to field id of aws_s3control_access_point_policy.
func (asapp awsS3ControlAccessPointPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asapp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_s3control_access_point_policy.
func (asapp awsS3ControlAccessPointPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(asapp.ref.Append("policy"))
}

type awsS3ControlAccessPointPolicyState struct {
	AccessPointArn        string `json:"access_point_arn"`
	HasPublicAccessPolicy bool   `json:"has_public_access_policy"`
	Id                    string `json:"id"`
	Policy                string `json:"policy"`
}
