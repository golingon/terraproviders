// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_neptune_cluster_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_neptune_cluster_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNeptuneClusterInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anci *Resource) Type() string {
	return "aws_neptune_cluster_instance"
}

// LocalName returns the local name for [Resource].
func (anci *Resource) LocalName() string {
	return anci.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anci *Resource) Configuration() interface{} {
	return anci.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anci *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anci)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anci *Resource) Dependencies() terra.Dependencies {
	return anci.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anci *Resource) LifecycleManagement() *terra.Lifecycle {
	return anci.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anci *Resource) Attributes() awsNeptuneClusterInstanceAttributes {
	return awsNeptuneClusterInstanceAttributes{ref: terra.ReferenceResource(anci)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anci *Resource) ImportState(state io.Reader) error {
	anci.state = &awsNeptuneClusterInstanceState{}
	if err := json.NewDecoder(state).Decode(anci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anci.Type(), anci.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anci *Resource) State() (*awsNeptuneClusterInstanceState, bool) {
	return anci.state, anci.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anci *Resource) StateMust() *awsNeptuneClusterInstanceState {
	if anci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anci.Type(), anci.LocalName()))
	}
	return anci.state
}

// Args contains the configurations for aws_neptune_cluster_instance.
type Args struct {
	// ApplyImmediately: bool, optional
	ApplyImmediately terra.BoolValue `hcl:"apply_immediately,attr"`
	// AutoMinorVersionUpgrade: bool, optional
	AutoMinorVersionUpgrade terra.BoolValue `hcl:"auto_minor_version_upgrade,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// Engine: string, optional
	Engine terra.StringValue `hcl:"engine,attr"`
	// EngineVersion: string, optional
	EngineVersion terra.StringValue `hcl:"engine_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Identifier: string, optional
	Identifier terra.StringValue `hcl:"identifier,attr"`
	// IdentifierPrefix: string, optional
	IdentifierPrefix terra.StringValue `hcl:"identifier_prefix,attr"`
	// InstanceClass: string, required
	InstanceClass terra.StringValue `hcl:"instance_class,attr" validate:"required"`
	// NeptuneParameterGroupName: string, optional
	NeptuneParameterGroupName terra.StringValue `hcl:"neptune_parameter_group_name,attr"`
	// NeptuneSubnetGroupName: string, optional
	NeptuneSubnetGroupName terra.StringValue `hcl:"neptune_subnet_group_name,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// PreferredBackupWindow: string, optional
	PreferredBackupWindow terra.StringValue `hcl:"preferred_backup_window,attr"`
	// PreferredMaintenanceWindow: string, optional
	PreferredMaintenanceWindow terra.StringValue `hcl:"preferred_maintenance_window,attr"`
	// PromotionTier: number, optional
	PromotionTier terra.NumberValue `hcl:"promotion_tier,attr"`
	// PubliclyAccessible: bool, optional
	PubliclyAccessible terra.BoolValue `hcl:"publicly_accessible,attr"`
	// SkipFinalSnapshot: bool, optional
	SkipFinalSnapshot terra.BoolValue `hcl:"skip_final_snapshot,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsNeptuneClusterInstanceAttributes struct {
	ref terra.Reference
}

// Address returns a reference to field address of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("address"))
}

// ApplyImmediately returns a reference to field apply_immediately of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) ApplyImmediately() terra.BoolValue {
	return terra.ReferenceAsBool(anci.ref.Append("apply_immediately"))
}

// Arn returns a reference to field arn of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("arn"))
}

// AutoMinorVersionUpgrade returns a reference to field auto_minor_version_upgrade of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) AutoMinorVersionUpgrade() terra.BoolValue {
	return terra.ReferenceAsBool(anci.ref.Append("auto_minor_version_upgrade"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("availability_zone"))
}

// ClusterIdentifier returns a reference to field cluster_identifier of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("cluster_identifier"))
}

// DbiResourceId returns a reference to field dbi_resource_id of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) DbiResourceId() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("dbi_resource_id"))
}

// Endpoint returns a reference to field endpoint of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("endpoint"))
}

// Engine returns a reference to field engine of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) Engine() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("engine"))
}

// EngineVersion returns a reference to field engine_version of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("engine_version"))
}

// Id returns a reference to field id of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("id"))
}

// Identifier returns a reference to field identifier of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) Identifier() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("identifier"))
}

// IdentifierPrefix returns a reference to field identifier_prefix of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) IdentifierPrefix() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("identifier_prefix"))
}

// InstanceClass returns a reference to field instance_class of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) InstanceClass() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("instance_class"))
}

// KmsKeyArn returns a reference to field kms_key_arn of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("kms_key_arn"))
}

// NeptuneParameterGroupName returns a reference to field neptune_parameter_group_name of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) NeptuneParameterGroupName() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("neptune_parameter_group_name"))
}

// NeptuneSubnetGroupName returns a reference to field neptune_subnet_group_name of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) NeptuneSubnetGroupName() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("neptune_subnet_group_name"))
}

// Port returns a reference to field port of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(anci.ref.Append("port"))
}

// PreferredBackupWindow returns a reference to field preferred_backup_window of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) PreferredBackupWindow() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("preferred_backup_window"))
}

// PreferredMaintenanceWindow returns a reference to field preferred_maintenance_window of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) PreferredMaintenanceWindow() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("preferred_maintenance_window"))
}

// PromotionTier returns a reference to field promotion_tier of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) PromotionTier() terra.NumberValue {
	return terra.ReferenceAsNumber(anci.ref.Append("promotion_tier"))
}

// PubliclyAccessible returns a reference to field publicly_accessible of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) PubliclyAccessible() terra.BoolValue {
	return terra.ReferenceAsBool(anci.ref.Append("publicly_accessible"))
}

// SkipFinalSnapshot returns a reference to field skip_final_snapshot of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) SkipFinalSnapshot() terra.BoolValue {
	return terra.ReferenceAsBool(anci.ref.Append("skip_final_snapshot"))
}

// StorageEncrypted returns a reference to field storage_encrypted of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) StorageEncrypted() terra.BoolValue {
	return terra.ReferenceAsBool(anci.ref.Append("storage_encrypted"))
}

// StorageType returns a reference to field storage_type of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) StorageType() terra.StringValue {
	return terra.ReferenceAsString(anci.ref.Append("storage_type"))
}

// Tags returns a reference to field tags of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](anci.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](anci.ref.Append("tags_all"))
}

// Writer returns a reference to field writer of aws_neptune_cluster_instance.
func (anci awsNeptuneClusterInstanceAttributes) Writer() terra.BoolValue {
	return terra.ReferenceAsBool(anci.ref.Append("writer"))
}

func (anci awsNeptuneClusterInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anci.ref.Append("timeouts"))
}

type awsNeptuneClusterInstanceState struct {
	Address                    string            `json:"address"`
	ApplyImmediately           bool              `json:"apply_immediately"`
	Arn                        string            `json:"arn"`
	AutoMinorVersionUpgrade    bool              `json:"auto_minor_version_upgrade"`
	AvailabilityZone           string            `json:"availability_zone"`
	ClusterIdentifier          string            `json:"cluster_identifier"`
	DbiResourceId              string            `json:"dbi_resource_id"`
	Endpoint                   string            `json:"endpoint"`
	Engine                     string            `json:"engine"`
	EngineVersion              string            `json:"engine_version"`
	Id                         string            `json:"id"`
	Identifier                 string            `json:"identifier"`
	IdentifierPrefix           string            `json:"identifier_prefix"`
	InstanceClass              string            `json:"instance_class"`
	KmsKeyArn                  string            `json:"kms_key_arn"`
	NeptuneParameterGroupName  string            `json:"neptune_parameter_group_name"`
	NeptuneSubnetGroupName     string            `json:"neptune_subnet_group_name"`
	Port                       float64           `json:"port"`
	PreferredBackupWindow      string            `json:"preferred_backup_window"`
	PreferredMaintenanceWindow string            `json:"preferred_maintenance_window"`
	PromotionTier              float64           `json:"promotion_tier"`
	PubliclyAccessible         bool              `json:"publicly_accessible"`
	SkipFinalSnapshot          bool              `json:"skip_final_snapshot"`
	StorageEncrypted           bool              `json:"storage_encrypted"`
	StorageType                string            `json:"storage_type"`
	Tags                       map[string]string `json:"tags"`
	TagsAll                    map[string]string `json:"tags_all"`
	Writer                     bool              `json:"writer"`
	Timeouts                   *TimeoutsState    `json:"timeouts"`
}
