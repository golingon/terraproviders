// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_pinpoint_email_channel

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_pinpoint_email_channel.
type Resource struct {
	Name      string
	Args      Args
	state     *awsPinpointEmailChannelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apec *Resource) Type() string {
	return "aws_pinpoint_email_channel"
}

// LocalName returns the local name for [Resource].
func (apec *Resource) LocalName() string {
	return apec.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apec *Resource) Configuration() interface{} {
	return apec.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apec *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apec)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apec *Resource) Dependencies() terra.Dependencies {
	return apec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apec *Resource) LifecycleManagement() *terra.Lifecycle {
	return apec.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apec *Resource) Attributes() awsPinpointEmailChannelAttributes {
	return awsPinpointEmailChannelAttributes{ref: terra.ReferenceResource(apec)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apec *Resource) ImportState(state io.Reader) error {
	apec.state = &awsPinpointEmailChannelState{}
	if err := json.NewDecoder(state).Decode(apec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apec.Type(), apec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apec *Resource) State() (*awsPinpointEmailChannelState, bool) {
	return apec.state, apec.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apec *Resource) StateMust() *awsPinpointEmailChannelState {
	if apec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apec.Type(), apec.LocalName()))
	}
	return apec.state
}

// Args contains the configurations for aws_pinpoint_email_channel.
type Args struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// ConfigurationSet: string, optional
	ConfigurationSet terra.StringValue `hcl:"configuration_set,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// FromAddress: string, required
	FromAddress terra.StringValue `hcl:"from_address,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Identity: string, required
	Identity terra.StringValue `hcl:"identity,attr" validate:"required"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
}

type awsPinpointEmailChannelAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of aws_pinpoint_email_channel.
func (apec awsPinpointEmailChannelAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(apec.ref.Append("application_id"))
}

// ConfigurationSet returns a reference to field configuration_set of aws_pinpoint_email_channel.
func (apec awsPinpointEmailChannelAttributes) ConfigurationSet() terra.StringValue {
	return terra.ReferenceAsString(apec.ref.Append("configuration_set"))
}

// Enabled returns a reference to field enabled of aws_pinpoint_email_channel.
func (apec awsPinpointEmailChannelAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(apec.ref.Append("enabled"))
}

// FromAddress returns a reference to field from_address of aws_pinpoint_email_channel.
func (apec awsPinpointEmailChannelAttributes) FromAddress() terra.StringValue {
	return terra.ReferenceAsString(apec.ref.Append("from_address"))
}

// Id returns a reference to field id of aws_pinpoint_email_channel.
func (apec awsPinpointEmailChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apec.ref.Append("id"))
}

// Identity returns a reference to field identity of aws_pinpoint_email_channel.
func (apec awsPinpointEmailChannelAttributes) Identity() terra.StringValue {
	return terra.ReferenceAsString(apec.ref.Append("identity"))
}

// MessagesPerSecond returns a reference to field messages_per_second of aws_pinpoint_email_channel.
func (apec awsPinpointEmailChannelAttributes) MessagesPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(apec.ref.Append("messages_per_second"))
}

// RoleArn returns a reference to field role_arn of aws_pinpoint_email_channel.
func (apec awsPinpointEmailChannelAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(apec.ref.Append("role_arn"))
}

type awsPinpointEmailChannelState struct {
	ApplicationId     string  `json:"application_id"`
	ConfigurationSet  string  `json:"configuration_set"`
	Enabled           bool    `json:"enabled"`
	FromAddress       string  `json:"from_address"`
	Id                string  `json:"id"`
	Identity          string  `json:"identity"`
	MessagesPerSecond float64 `json:"messages_per_second"`
	RoleArn           string  `json:"role_arn"`
}
