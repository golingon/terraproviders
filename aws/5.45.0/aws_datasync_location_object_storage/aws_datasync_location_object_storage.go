// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datasync_location_object_storage

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_datasync_location_object_storage.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDatasyncLocationObjectStorageState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adlos *Resource) Type() string {
	return "aws_datasync_location_object_storage"
}

// LocalName returns the local name for [Resource].
func (adlos *Resource) LocalName() string {
	return adlos.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adlos *Resource) Configuration() interface{} {
	return adlos.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adlos *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adlos)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adlos *Resource) Dependencies() terra.Dependencies {
	return adlos.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adlos *Resource) LifecycleManagement() *terra.Lifecycle {
	return adlos.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adlos *Resource) Attributes() awsDatasyncLocationObjectStorageAttributes {
	return awsDatasyncLocationObjectStorageAttributes{ref: terra.ReferenceResource(adlos)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adlos *Resource) ImportState(state io.Reader) error {
	adlos.state = &awsDatasyncLocationObjectStorageState{}
	if err := json.NewDecoder(state).Decode(adlos.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adlos.Type(), adlos.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adlos *Resource) State() (*awsDatasyncLocationObjectStorageState, bool) {
	return adlos.state, adlos.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adlos *Resource) StateMust() *awsDatasyncLocationObjectStorageState {
	if adlos.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adlos.Type(), adlos.LocalName()))
	}
	return adlos.state
}

// Args contains the configurations for aws_datasync_location_object_storage.
type Args struct {
	// AccessKey: string, optional
	AccessKey terra.StringValue `hcl:"access_key,attr"`
	// AgentArns: set of string, required
	AgentArns terra.SetValue[terra.StringValue] `hcl:"agent_arns,attr" validate:"required"`
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SecretKey: string, optional
	SecretKey terra.StringValue `hcl:"secret_key,attr"`
	// ServerCertificate: string, optional
	ServerCertificate terra.StringValue `hcl:"server_certificate,attr"`
	// ServerHostname: string, required
	ServerHostname terra.StringValue `hcl:"server_hostname,attr" validate:"required"`
	// ServerPort: number, optional
	ServerPort terra.NumberValue `hcl:"server_port,attr"`
	// ServerProtocol: string, optional
	ServerProtocol terra.StringValue `hcl:"server_protocol,attr"`
	// Subdirectory: string, optional
	Subdirectory terra.StringValue `hcl:"subdirectory,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsDatasyncLocationObjectStorageAttributes struct {
	ref terra.Reference
}

// AccessKey returns a reference to field access_key of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) AccessKey() terra.StringValue {
	return terra.ReferenceAsString(adlos.ref.Append("access_key"))
}

// AgentArns returns a reference to field agent_arns of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) AgentArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adlos.ref.Append("agent_arns"))
}

// Arn returns a reference to field arn of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adlos.ref.Append("arn"))
}

// BucketName returns a reference to field bucket_name of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(adlos.ref.Append("bucket_name"))
}

// Id returns a reference to field id of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adlos.ref.Append("id"))
}

// SecretKey returns a reference to field secret_key of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) SecretKey() terra.StringValue {
	return terra.ReferenceAsString(adlos.ref.Append("secret_key"))
}

// ServerCertificate returns a reference to field server_certificate of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) ServerCertificate() terra.StringValue {
	return terra.ReferenceAsString(adlos.ref.Append("server_certificate"))
}

// ServerHostname returns a reference to field server_hostname of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) ServerHostname() terra.StringValue {
	return terra.ReferenceAsString(adlos.ref.Append("server_hostname"))
}

// ServerPort returns a reference to field server_port of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) ServerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(adlos.ref.Append("server_port"))
}

// ServerProtocol returns a reference to field server_protocol of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) ServerProtocol() terra.StringValue {
	return terra.ReferenceAsString(adlos.ref.Append("server_protocol"))
}

// Subdirectory returns a reference to field subdirectory of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) Subdirectory() terra.StringValue {
	return terra.ReferenceAsString(adlos.ref.Append("subdirectory"))
}

// Tags returns a reference to field tags of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adlos.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adlos.ref.Append("tags_all"))
}

// Uri returns a reference to field uri of aws_datasync_location_object_storage.
func (adlos awsDatasyncLocationObjectStorageAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(adlos.ref.Append("uri"))
}

type awsDatasyncLocationObjectStorageState struct {
	AccessKey         string            `json:"access_key"`
	AgentArns         []string          `json:"agent_arns"`
	Arn               string            `json:"arn"`
	BucketName        string            `json:"bucket_name"`
	Id                string            `json:"id"`
	SecretKey         string            `json:"secret_key"`
	ServerCertificate string            `json:"server_certificate"`
	ServerHostname    string            `json:"server_hostname"`
	ServerPort        float64           `json:"server_port"`
	ServerProtocol    string            `json:"server_protocol"`
	Subdirectory      string            `json:"subdirectory"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
	Uri               string            `json:"uri"`
}
