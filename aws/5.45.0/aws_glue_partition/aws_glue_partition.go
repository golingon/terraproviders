// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_partition

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glue_partition.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGluePartitionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agp *Resource) Type() string {
	return "aws_glue_partition"
}

// LocalName returns the local name for [Resource].
func (agp *Resource) LocalName() string {
	return agp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agp *Resource) Configuration() interface{} {
	return agp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agp *Resource) Dependencies() terra.Dependencies {
	return agp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agp *Resource) LifecycleManagement() *terra.Lifecycle {
	return agp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agp *Resource) Attributes() awsGluePartitionAttributes {
	return awsGluePartitionAttributes{ref: terra.ReferenceResource(agp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agp *Resource) ImportState(state io.Reader) error {
	agp.state = &awsGluePartitionState{}
	if err := json.NewDecoder(state).Decode(agp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agp.Type(), agp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agp *Resource) State() (*awsGluePartitionState, bool) {
	return agp.state, agp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agp *Resource) StateMust() *awsGluePartitionState {
	if agp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agp.Type(), agp.LocalName()))
	}
	return agp.state
}

// Args contains the configurations for aws_glue_partition.
type Args struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// PartitionValues: list of string, required
	PartitionValues terra.ListValue[terra.StringValue] `hcl:"partition_values,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// StorageDescriptor: optional
	StorageDescriptor *StorageDescriptor `hcl:"storage_descriptor,block"`
}

type awsGluePartitionAttributes struct {
	ref terra.Reference
}

// CatalogId returns a reference to field catalog_id of aws_glue_partition.
func (agp awsGluePartitionAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(agp.ref.Append("catalog_id"))
}

// CreationTime returns a reference to field creation_time of aws_glue_partition.
func (agp awsGluePartitionAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(agp.ref.Append("creation_time"))
}

// DatabaseName returns a reference to field database_name of aws_glue_partition.
func (agp awsGluePartitionAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(agp.ref.Append("database_name"))
}

// Id returns a reference to field id of aws_glue_partition.
func (agp awsGluePartitionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agp.ref.Append("id"))
}

// LastAccessedTime returns a reference to field last_accessed_time of aws_glue_partition.
func (agp awsGluePartitionAttributes) LastAccessedTime() terra.StringValue {
	return terra.ReferenceAsString(agp.ref.Append("last_accessed_time"))
}

// LastAnalyzedTime returns a reference to field last_analyzed_time of aws_glue_partition.
func (agp awsGluePartitionAttributes) LastAnalyzedTime() terra.StringValue {
	return terra.ReferenceAsString(agp.ref.Append("last_analyzed_time"))
}

// Parameters returns a reference to field parameters of aws_glue_partition.
func (agp awsGluePartitionAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agp.ref.Append("parameters"))
}

// PartitionValues returns a reference to field partition_values of aws_glue_partition.
func (agp awsGluePartitionAttributes) PartitionValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](agp.ref.Append("partition_values"))
}

// TableName returns a reference to field table_name of aws_glue_partition.
func (agp awsGluePartitionAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(agp.ref.Append("table_name"))
}

func (agp awsGluePartitionAttributes) StorageDescriptor() terra.ListValue[StorageDescriptorAttributes] {
	return terra.ReferenceAsList[StorageDescriptorAttributes](agp.ref.Append("storage_descriptor"))
}

type awsGluePartitionState struct {
	CatalogId         string                   `json:"catalog_id"`
	CreationTime      string                   `json:"creation_time"`
	DatabaseName      string                   `json:"database_name"`
	Id                string                   `json:"id"`
	LastAccessedTime  string                   `json:"last_accessed_time"`
	LastAnalyzedTime  string                   `json:"last_analyzed_time"`
	Parameters        map[string]string        `json:"parameters"`
	PartitionValues   []string                 `json:"partition_values"`
	TableName         string                   `json:"table_name"`
	StorageDescriptor []StorageDescriptorState `json:"storage_descriptor"`
}
