// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_partition

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type StorageDescriptor struct {
	// BucketColumns: list of string, optional
	BucketColumns terra.ListValue[terra.StringValue] `hcl:"bucket_columns,attr"`
	// Compressed: bool, optional
	Compressed terra.BoolValue `hcl:"compressed,attr"`
	// InputFormat: string, optional
	InputFormat terra.StringValue `hcl:"input_format,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// NumberOfBuckets: number, optional
	NumberOfBuckets terra.NumberValue `hcl:"number_of_buckets,attr"`
	// OutputFormat: string, optional
	OutputFormat terra.StringValue `hcl:"output_format,attr"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// StoredAsSubDirectories: bool, optional
	StoredAsSubDirectories terra.BoolValue `hcl:"stored_as_sub_directories,attr"`
	// StorageDescriptorColumns: min=0
	Columns []StorageDescriptorColumns `hcl:"columns,block" validate:"min=0"`
	// StorageDescriptorSerDeInfo: optional
	SerDeInfo *StorageDescriptorSerDeInfo `hcl:"ser_de_info,block"`
	// StorageDescriptorSkewedInfo: optional
	SkewedInfo *StorageDescriptorSkewedInfo `hcl:"skewed_info,block"`
	// StorageDescriptorSortColumns: min=0
	SortColumns []StorageDescriptorSortColumns `hcl:"sort_columns,block" validate:"min=0"`
}

type StorageDescriptorColumns struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type StorageDescriptorSerDeInfo struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// SerializationLibrary: string, optional
	SerializationLibrary terra.StringValue `hcl:"serialization_library,attr"`
}

type StorageDescriptorSkewedInfo struct {
	// SkewedColumnNames: list of string, optional
	SkewedColumnNames terra.ListValue[terra.StringValue] `hcl:"skewed_column_names,attr"`
	// SkewedColumnValueLocationMaps: map of string, optional
	SkewedColumnValueLocationMaps terra.MapValue[terra.StringValue] `hcl:"skewed_column_value_location_maps,attr"`
	// SkewedColumnValues: list of string, optional
	SkewedColumnValues terra.ListValue[terra.StringValue] `hcl:"skewed_column_values,attr"`
}

type StorageDescriptorSortColumns struct {
	// Column: string, required
	Column terra.StringValue `hcl:"column,attr" validate:"required"`
	// SortOrder: number, required
	SortOrder terra.NumberValue `hcl:"sort_order,attr" validate:"required"`
}

type StorageDescriptorAttributes struct {
	ref terra.Reference
}

func (sd StorageDescriptorAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd StorageDescriptorAttributes) InternalWithRef(ref terra.Reference) StorageDescriptorAttributes {
	return StorageDescriptorAttributes{ref: ref}
}

func (sd StorageDescriptorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd StorageDescriptorAttributes) BucketColumns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sd.ref.Append("bucket_columns"))
}

func (sd StorageDescriptorAttributes) Compressed() terra.BoolValue {
	return terra.ReferenceAsBool(sd.ref.Append("compressed"))
}

func (sd StorageDescriptorAttributes) InputFormat() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("input_format"))
}

func (sd StorageDescriptorAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("location"))
}

func (sd StorageDescriptorAttributes) NumberOfBuckets() terra.NumberValue {
	return terra.ReferenceAsNumber(sd.ref.Append("number_of_buckets"))
}

func (sd StorageDescriptorAttributes) OutputFormat() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("output_format"))
}

func (sd StorageDescriptorAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sd.ref.Append("parameters"))
}

func (sd StorageDescriptorAttributes) StoredAsSubDirectories() terra.BoolValue {
	return terra.ReferenceAsBool(sd.ref.Append("stored_as_sub_directories"))
}

func (sd StorageDescriptorAttributes) Columns() terra.ListValue[StorageDescriptorColumnsAttributes] {
	return terra.ReferenceAsList[StorageDescriptorColumnsAttributes](sd.ref.Append("columns"))
}

func (sd StorageDescriptorAttributes) SerDeInfo() terra.ListValue[StorageDescriptorSerDeInfoAttributes] {
	return terra.ReferenceAsList[StorageDescriptorSerDeInfoAttributes](sd.ref.Append("ser_de_info"))
}

func (sd StorageDescriptorAttributes) SkewedInfo() terra.ListValue[StorageDescriptorSkewedInfoAttributes] {
	return terra.ReferenceAsList[StorageDescriptorSkewedInfoAttributes](sd.ref.Append("skewed_info"))
}

func (sd StorageDescriptorAttributes) SortColumns() terra.ListValue[StorageDescriptorSortColumnsAttributes] {
	return terra.ReferenceAsList[StorageDescriptorSortColumnsAttributes](sd.ref.Append("sort_columns"))
}

type StorageDescriptorColumnsAttributes struct {
	ref terra.Reference
}

func (c StorageDescriptorColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c StorageDescriptorColumnsAttributes) InternalWithRef(ref terra.Reference) StorageDescriptorColumnsAttributes {
	return StorageDescriptorColumnsAttributes{ref: ref}
}

func (c StorageDescriptorColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c StorageDescriptorColumnsAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("comment"))
}

func (c StorageDescriptorColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c StorageDescriptorColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type StorageDescriptorSerDeInfoAttributes struct {
	ref terra.Reference
}

func (sdi StorageDescriptorSerDeInfoAttributes) InternalRef() (terra.Reference, error) {
	return sdi.ref, nil
}

func (sdi StorageDescriptorSerDeInfoAttributes) InternalWithRef(ref terra.Reference) StorageDescriptorSerDeInfoAttributes {
	return StorageDescriptorSerDeInfoAttributes{ref: ref}
}

func (sdi StorageDescriptorSerDeInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sdi.ref.InternalTokens()
}

func (sdi StorageDescriptorSerDeInfoAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sdi.ref.Append("name"))
}

func (sdi StorageDescriptorSerDeInfoAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sdi.ref.Append("parameters"))
}

func (sdi StorageDescriptorSerDeInfoAttributes) SerializationLibrary() terra.StringValue {
	return terra.ReferenceAsString(sdi.ref.Append("serialization_library"))
}

type StorageDescriptorSkewedInfoAttributes struct {
	ref terra.Reference
}

func (si StorageDescriptorSkewedInfoAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si StorageDescriptorSkewedInfoAttributes) InternalWithRef(ref terra.Reference) StorageDescriptorSkewedInfoAttributes {
	return StorageDescriptorSkewedInfoAttributes{ref: ref}
}

func (si StorageDescriptorSkewedInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si StorageDescriptorSkewedInfoAttributes) SkewedColumnNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](si.ref.Append("skewed_column_names"))
}

func (si StorageDescriptorSkewedInfoAttributes) SkewedColumnValueLocationMaps() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](si.ref.Append("skewed_column_value_location_maps"))
}

func (si StorageDescriptorSkewedInfoAttributes) SkewedColumnValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](si.ref.Append("skewed_column_values"))
}

type StorageDescriptorSortColumnsAttributes struct {
	ref terra.Reference
}

func (sc StorageDescriptorSortColumnsAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc StorageDescriptorSortColumnsAttributes) InternalWithRef(ref terra.Reference) StorageDescriptorSortColumnsAttributes {
	return StorageDescriptorSortColumnsAttributes{ref: ref}
}

func (sc StorageDescriptorSortColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc StorageDescriptorSortColumnsAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("column"))
}

func (sc StorageDescriptorSortColumnsAttributes) SortOrder() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("sort_order"))
}

type StorageDescriptorState struct {
	BucketColumns          []string                            `json:"bucket_columns"`
	Compressed             bool                                `json:"compressed"`
	InputFormat            string                              `json:"input_format"`
	Location               string                              `json:"location"`
	NumberOfBuckets        float64                             `json:"number_of_buckets"`
	OutputFormat           string                              `json:"output_format"`
	Parameters             map[string]string                   `json:"parameters"`
	StoredAsSubDirectories bool                                `json:"stored_as_sub_directories"`
	Columns                []StorageDescriptorColumnsState     `json:"columns"`
	SerDeInfo              []StorageDescriptorSerDeInfoState   `json:"ser_de_info"`
	SkewedInfo             []StorageDescriptorSkewedInfoState  `json:"skewed_info"`
	SortColumns            []StorageDescriptorSortColumnsState `json:"sort_columns"`
}

type StorageDescriptorColumnsState struct {
	Comment string `json:"comment"`
	Name    string `json:"name"`
	Type    string `json:"type"`
}

type StorageDescriptorSerDeInfoState struct {
	Name                 string            `json:"name"`
	Parameters           map[string]string `json:"parameters"`
	SerializationLibrary string            `json:"serialization_library"`
}

type StorageDescriptorSkewedInfoState struct {
	SkewedColumnNames             []string          `json:"skewed_column_names"`
	SkewedColumnValueLocationMaps map[string]string `json:"skewed_column_value_location_maps"`
	SkewedColumnValues            []string          `json:"skewed_column_values"`
}

type StorageDescriptorSortColumnsState struct {
	Column    string  `json:"column"`
	SortOrder float64 `json:"sort_order"`
}
