// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_event_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudwatch_event_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudwatchEventEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acee *Resource) Type() string {
	return "aws_cloudwatch_event_endpoint"
}

// LocalName returns the local name for [Resource].
func (acee *Resource) LocalName() string {
	return acee.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acee *Resource) Configuration() interface{} {
	return acee.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acee *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acee)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acee *Resource) Dependencies() terra.Dependencies {
	return acee.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acee *Resource) LifecycleManagement() *terra.Lifecycle {
	return acee.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acee *Resource) Attributes() awsCloudwatchEventEndpointAttributes {
	return awsCloudwatchEventEndpointAttributes{ref: terra.ReferenceResource(acee)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acee *Resource) ImportState(state io.Reader) error {
	acee.state = &awsCloudwatchEventEndpointState{}
	if err := json.NewDecoder(state).Decode(acee.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acee.Type(), acee.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acee *Resource) State() (*awsCloudwatchEventEndpointState, bool) {
	return acee.state, acee.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acee *Resource) StateMust() *awsCloudwatchEventEndpointState {
	if acee.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acee.Type(), acee.LocalName()))
	}
	return acee.state
}

// Args contains the configurations for aws_cloudwatch_event_endpoint.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// EventBus: min=2,max=2
	EventBus []EventBus `hcl:"event_bus,block" validate:"min=2,max=2"`
	// ReplicationConfig: optional
	ReplicationConfig *ReplicationConfig `hcl:"replication_config,block"`
	// RoutingConfig: required
	RoutingConfig *RoutingConfig `hcl:"routing_config,block" validate:"required"`
}

type awsCloudwatchEventEndpointAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudwatch_event_endpoint.
func (acee awsCloudwatchEventEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("arn"))
}

// Description returns a reference to field description of aws_cloudwatch_event_endpoint.
func (acee awsCloudwatchEventEndpointAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("description"))
}

// EndpointUrl returns a reference to field endpoint_url of aws_cloudwatch_event_endpoint.
func (acee awsCloudwatchEventEndpointAttributes) EndpointUrl() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("endpoint_url"))
}

// Id returns a reference to field id of aws_cloudwatch_event_endpoint.
func (acee awsCloudwatchEventEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("id"))
}

// Name returns a reference to field name of aws_cloudwatch_event_endpoint.
func (acee awsCloudwatchEventEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_cloudwatch_event_endpoint.
func (acee awsCloudwatchEventEndpointAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(acee.ref.Append("role_arn"))
}

func (acee awsCloudwatchEventEndpointAttributes) EventBus() terra.ListValue[EventBusAttributes] {
	return terra.ReferenceAsList[EventBusAttributes](acee.ref.Append("event_bus"))
}

func (acee awsCloudwatchEventEndpointAttributes) ReplicationConfig() terra.ListValue[ReplicationConfigAttributes] {
	return terra.ReferenceAsList[ReplicationConfigAttributes](acee.ref.Append("replication_config"))
}

func (acee awsCloudwatchEventEndpointAttributes) RoutingConfig() terra.ListValue[RoutingConfigAttributes] {
	return terra.ReferenceAsList[RoutingConfigAttributes](acee.ref.Append("routing_config"))
}

type awsCloudwatchEventEndpointState struct {
	Arn               string                   `json:"arn"`
	Description       string                   `json:"description"`
	EndpointUrl       string                   `json:"endpoint_url"`
	Id                string                   `json:"id"`
	Name              string                   `json:"name"`
	RoleArn           string                   `json:"role_arn"`
	EventBus          []EventBusState          `json:"event_bus"`
	ReplicationConfig []ReplicationConfigState `json:"replication_config"`
	RoutingConfig     []RoutingConfigState     `json:"routing_config"`
}
