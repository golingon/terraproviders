// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_osis_pipeline

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BufferOptions struct {
	// PersistentBufferEnabled: bool, required
	PersistentBufferEnabled terra.BoolValue `hcl:"persistent_buffer_enabled,attr" validate:"required"`
}

type EncryptionAtRestOptions struct {
	// KmsKeyArn: string, required
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr" validate:"required"`
}

type LogPublishingOptions struct {
	// IsLoggingEnabled: bool, optional
	IsLoggingEnabled terra.BoolValue `hcl:"is_logging_enabled,attr"`
	// LogPublishingOptionsCloudwatchLogDestination: min=0
	CloudwatchLogDestination []LogPublishingOptionsCloudwatchLogDestination `hcl:"cloudwatch_log_destination,block" validate:"min=0"`
}

type LogPublishingOptionsCloudwatchLogDestination struct {
	// LogGroup: string, required
	LogGroup terra.StringValue `hcl:"log_group,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VpcOptions struct {
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type BufferOptionsAttributes struct {
	ref terra.Reference
}

func (bo BufferOptionsAttributes) InternalRef() (terra.Reference, error) {
	return bo.ref, nil
}

func (bo BufferOptionsAttributes) InternalWithRef(ref terra.Reference) BufferOptionsAttributes {
	return BufferOptionsAttributes{ref: ref}
}

func (bo BufferOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bo.ref.InternalTokens()
}

func (bo BufferOptionsAttributes) PersistentBufferEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(bo.ref.Append("persistent_buffer_enabled"))
}

type EncryptionAtRestOptionsAttributes struct {
	ref terra.Reference
}

func (earo EncryptionAtRestOptionsAttributes) InternalRef() (terra.Reference, error) {
	return earo.ref, nil
}

func (earo EncryptionAtRestOptionsAttributes) InternalWithRef(ref terra.Reference) EncryptionAtRestOptionsAttributes {
	return EncryptionAtRestOptionsAttributes{ref: ref}
}

func (earo EncryptionAtRestOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return earo.ref.InternalTokens()
}

func (earo EncryptionAtRestOptionsAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(earo.ref.Append("kms_key_arn"))
}

type LogPublishingOptionsAttributes struct {
	ref terra.Reference
}

func (lpo LogPublishingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return lpo.ref, nil
}

func (lpo LogPublishingOptionsAttributes) InternalWithRef(ref terra.Reference) LogPublishingOptionsAttributes {
	return LogPublishingOptionsAttributes{ref: ref}
}

func (lpo LogPublishingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lpo.ref.InternalTokens()
}

func (lpo LogPublishingOptionsAttributes) IsLoggingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(lpo.ref.Append("is_logging_enabled"))
}

func (lpo LogPublishingOptionsAttributes) CloudwatchLogDestination() terra.ListValue[LogPublishingOptionsCloudwatchLogDestinationAttributes] {
	return terra.ReferenceAsList[LogPublishingOptionsCloudwatchLogDestinationAttributes](lpo.ref.Append("cloudwatch_log_destination"))
}

type LogPublishingOptionsCloudwatchLogDestinationAttributes struct {
	ref terra.Reference
}

func (cld LogPublishingOptionsCloudwatchLogDestinationAttributes) InternalRef() (terra.Reference, error) {
	return cld.ref, nil
}

func (cld LogPublishingOptionsCloudwatchLogDestinationAttributes) InternalWithRef(ref terra.Reference) LogPublishingOptionsCloudwatchLogDestinationAttributes {
	return LogPublishingOptionsCloudwatchLogDestinationAttributes{ref: ref}
}

func (cld LogPublishingOptionsCloudwatchLogDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cld.ref.InternalTokens()
}

func (cld LogPublishingOptionsCloudwatchLogDestinationAttributes) LogGroup() terra.StringValue {
	return terra.ReferenceAsString(cld.ref.Append("log_group"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VpcOptionsAttributes struct {
	ref terra.Reference
}

func (vo VpcOptionsAttributes) InternalRef() (terra.Reference, error) {
	return vo.ref, nil
}

func (vo VpcOptionsAttributes) InternalWithRef(ref terra.Reference) VpcOptionsAttributes {
	return VpcOptionsAttributes{ref: ref}
}

func (vo VpcOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vo.ref.InternalTokens()
}

func (vo VpcOptionsAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vo.ref.Append("security_group_ids"))
}

func (vo VpcOptionsAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vo.ref.Append("subnet_ids"))
}

type BufferOptionsState struct {
	PersistentBufferEnabled bool `json:"persistent_buffer_enabled"`
}

type EncryptionAtRestOptionsState struct {
	KmsKeyArn string `json:"kms_key_arn"`
}

type LogPublishingOptionsState struct {
	IsLoggingEnabled         bool                                                `json:"is_logging_enabled"`
	CloudwatchLogDestination []LogPublishingOptionsCloudwatchLogDestinationState `json:"cloudwatch_log_destination"`
}

type LogPublishingOptionsCloudwatchLogDestinationState struct {
	LogGroup string `json:"log_group"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcOptionsState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
}
