// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_osis_pipeline

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_osis_pipeline.
type Resource struct {
	Name      string
	Args      Args
	state     *awsOsisPipelineState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aop *Resource) Type() string {
	return "aws_osis_pipeline"
}

// LocalName returns the local name for [Resource].
func (aop *Resource) LocalName() string {
	return aop.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aop *Resource) Configuration() interface{} {
	return aop.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aop *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aop)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aop *Resource) Dependencies() terra.Dependencies {
	return aop.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aop *Resource) LifecycleManagement() *terra.Lifecycle {
	return aop.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aop *Resource) Attributes() awsOsisPipelineAttributes {
	return awsOsisPipelineAttributes{ref: terra.ReferenceResource(aop)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aop *Resource) ImportState(state io.Reader) error {
	aop.state = &awsOsisPipelineState{}
	if err := json.NewDecoder(state).Decode(aop.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aop.Type(), aop.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aop *Resource) State() (*awsOsisPipelineState, bool) {
	return aop.state, aop.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aop *Resource) StateMust() *awsOsisPipelineState {
	if aop.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aop.Type(), aop.LocalName()))
	}
	return aop.state
}

// Args contains the configurations for aws_osis_pipeline.
type Args struct {
	// MaxUnits: number, required
	MaxUnits terra.NumberValue `hcl:"max_units,attr" validate:"required"`
	// MinUnits: number, required
	MinUnits terra.NumberValue `hcl:"min_units,attr" validate:"required"`
	// PipelineConfigurationBody: string, required
	PipelineConfigurationBody terra.StringValue `hcl:"pipeline_configuration_body,attr" validate:"required"`
	// PipelineName: string, required
	PipelineName terra.StringValue `hcl:"pipeline_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// BufferOptions: min=0
	BufferOptions []BufferOptions `hcl:"buffer_options,block" validate:"min=0"`
	// EncryptionAtRestOptions: min=0
	EncryptionAtRestOptions []EncryptionAtRestOptions `hcl:"encryption_at_rest_options,block" validate:"min=0"`
	// LogPublishingOptions: min=0
	LogPublishingOptions []LogPublishingOptions `hcl:"log_publishing_options,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcOptions: min=0
	VpcOptions []VpcOptions `hcl:"vpc_options,block" validate:"min=0"`
}

type awsOsisPipelineAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_osis_pipeline.
func (aop awsOsisPipelineAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("id"))
}

// IngestEndpointUrls returns a reference to field ingest_endpoint_urls of aws_osis_pipeline.
func (aop awsOsisPipelineAttributes) IngestEndpointUrls() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aop.ref.Append("ingest_endpoint_urls"))
}

// MaxUnits returns a reference to field max_units of aws_osis_pipeline.
func (aop awsOsisPipelineAttributes) MaxUnits() terra.NumberValue {
	return terra.ReferenceAsNumber(aop.ref.Append("max_units"))
}

// MinUnits returns a reference to field min_units of aws_osis_pipeline.
func (aop awsOsisPipelineAttributes) MinUnits() terra.NumberValue {
	return terra.ReferenceAsNumber(aop.ref.Append("min_units"))
}

// PipelineArn returns a reference to field pipeline_arn of aws_osis_pipeline.
func (aop awsOsisPipelineAttributes) PipelineArn() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("pipeline_arn"))
}

// PipelineConfigurationBody returns a reference to field pipeline_configuration_body of aws_osis_pipeline.
func (aop awsOsisPipelineAttributes) PipelineConfigurationBody() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("pipeline_configuration_body"))
}

// PipelineName returns a reference to field pipeline_name of aws_osis_pipeline.
func (aop awsOsisPipelineAttributes) PipelineName() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("pipeline_name"))
}

// Tags returns a reference to field tags of aws_osis_pipeline.
func (aop awsOsisPipelineAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aop.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_osis_pipeline.
func (aop awsOsisPipelineAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aop.ref.Append("tags_all"))
}

func (aop awsOsisPipelineAttributes) BufferOptions() terra.ListValue[BufferOptionsAttributes] {
	return terra.ReferenceAsList[BufferOptionsAttributes](aop.ref.Append("buffer_options"))
}

func (aop awsOsisPipelineAttributes) EncryptionAtRestOptions() terra.ListValue[EncryptionAtRestOptionsAttributes] {
	return terra.ReferenceAsList[EncryptionAtRestOptionsAttributes](aop.ref.Append("encryption_at_rest_options"))
}

func (aop awsOsisPipelineAttributes) LogPublishingOptions() terra.ListValue[LogPublishingOptionsAttributes] {
	return terra.ReferenceAsList[LogPublishingOptionsAttributes](aop.ref.Append("log_publishing_options"))
}

func (aop awsOsisPipelineAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aop.ref.Append("timeouts"))
}

func (aop awsOsisPipelineAttributes) VpcOptions() terra.ListValue[VpcOptionsAttributes] {
	return terra.ReferenceAsList[VpcOptionsAttributes](aop.ref.Append("vpc_options"))
}

type awsOsisPipelineState struct {
	Id                        string                         `json:"id"`
	IngestEndpointUrls        []string                       `json:"ingest_endpoint_urls"`
	MaxUnits                  float64                        `json:"max_units"`
	MinUnits                  float64                        `json:"min_units"`
	PipelineArn               string                         `json:"pipeline_arn"`
	PipelineConfigurationBody string                         `json:"pipeline_configuration_body"`
	PipelineName              string                         `json:"pipeline_name"`
	Tags                      map[string]string              `json:"tags"`
	TagsAll                   map[string]string              `json:"tags_all"`
	BufferOptions             []BufferOptionsState           `json:"buffer_options"`
	EncryptionAtRestOptions   []EncryptionAtRestOptionsState `json:"encryption_at_rest_options"`
	LogPublishingOptions      []LogPublishingOptionsState    `json:"log_publishing_options"`
	Timeouts                  *TimeoutsState                 `json:"timeouts"`
	VpcOptions                []VpcOptionsState              `json:"vpc_options"`
}
