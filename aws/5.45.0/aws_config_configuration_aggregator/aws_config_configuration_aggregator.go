// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_config_configuration_aggregator

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_config_configuration_aggregator.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConfigConfigurationAggregatorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acca *Resource) Type() string {
	return "aws_config_configuration_aggregator"
}

// LocalName returns the local name for [Resource].
func (acca *Resource) LocalName() string {
	return acca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acca *Resource) Configuration() interface{} {
	return acca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acca *Resource) Dependencies() terra.Dependencies {
	return acca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acca *Resource) LifecycleManagement() *terra.Lifecycle {
	return acca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acca *Resource) Attributes() awsConfigConfigurationAggregatorAttributes {
	return awsConfigConfigurationAggregatorAttributes{ref: terra.ReferenceResource(acca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acca *Resource) ImportState(state io.Reader) error {
	acca.state = &awsConfigConfigurationAggregatorState{}
	if err := json.NewDecoder(state).Decode(acca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acca.Type(), acca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acca *Resource) State() (*awsConfigConfigurationAggregatorState, bool) {
	return acca.state, acca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acca *Resource) StateMust() *awsConfigConfigurationAggregatorState {
	if acca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acca.Type(), acca.LocalName()))
	}
	return acca.state
}

// Args contains the configurations for aws_config_configuration_aggregator.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// AccountAggregationSource: optional
	AccountAggregationSource *AccountAggregationSource `hcl:"account_aggregation_source,block"`
	// OrganizationAggregationSource: optional
	OrganizationAggregationSource *OrganizationAggregationSource `hcl:"organization_aggregation_source,block"`
}

type awsConfigConfigurationAggregatorAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_config_configuration_aggregator.
func (acca awsConfigConfigurationAggregatorAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acca.ref.Append("arn"))
}

// Id returns a reference to field id of aws_config_configuration_aggregator.
func (acca awsConfigConfigurationAggregatorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acca.ref.Append("id"))
}

// Name returns a reference to field name of aws_config_configuration_aggregator.
func (acca awsConfigConfigurationAggregatorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acca.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_config_configuration_aggregator.
func (acca awsConfigConfigurationAggregatorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acca.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_config_configuration_aggregator.
func (acca awsConfigConfigurationAggregatorAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acca.ref.Append("tags_all"))
}

func (acca awsConfigConfigurationAggregatorAttributes) AccountAggregationSource() terra.ListValue[AccountAggregationSourceAttributes] {
	return terra.ReferenceAsList[AccountAggregationSourceAttributes](acca.ref.Append("account_aggregation_source"))
}

func (acca awsConfigConfigurationAggregatorAttributes) OrganizationAggregationSource() terra.ListValue[OrganizationAggregationSourceAttributes] {
	return terra.ReferenceAsList[OrganizationAggregationSourceAttributes](acca.ref.Append("organization_aggregation_source"))
}

type awsConfigConfigurationAggregatorState struct {
	Arn                           string                               `json:"arn"`
	Id                            string                               `json:"id"`
	Name                          string                               `json:"name"`
	Tags                          map[string]string                    `json:"tags"`
	TagsAll                       map[string]string                    `json:"tags_all"`
	AccountAggregationSource      []AccountAggregationSourceState      `json:"account_aggregation_source"`
	OrganizationAggregationSource []OrganizationAggregationSourceState `json:"organization_aggregation_source"`
}
