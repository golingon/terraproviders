// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_resourceexplorer2_search

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataResourceCount struct{}

type DataResources struct {
	// ResourcesResourceProperty: min=0
	ResourceProperty []DataResourcesResourceProperty `hcl:"resource_property,block" validate:"min=0"`
}

type DataResourcesResourceProperty struct{}

type DataResourceCountAttributes struct {
	ref terra.Reference
}

func (rc DataResourceCountAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc DataResourceCountAttributes) InternalWithRef(ref terra.Reference) DataResourceCountAttributes {
	return DataResourceCountAttributes{ref: ref}
}

func (rc DataResourceCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc DataResourceCountAttributes) Complete() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("complete"))
}

func (rc DataResourceCountAttributes) TotalResources() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("total_resources"))
}

type DataResourcesAttributes struct {
	ref terra.Reference
}

func (r DataResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataResourcesAttributes) InternalWithRef(ref terra.Reference) DataResourcesAttributes {
	return DataResourcesAttributes{ref: ref}
}

func (r DataResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataResourcesAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("arn"))
}

func (r DataResourcesAttributes) LastReportedAt() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("last_reported_at"))
}

func (r DataResourcesAttributes) OwningAccountId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("owning_account_id"))
}

func (r DataResourcesAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("region"))
}

func (r DataResourcesAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("resource_type"))
}

func (r DataResourcesAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("service"))
}

func (r DataResourcesAttributes) ResourceProperty() terra.ListValue[DataResourcesResourcePropertyAttributes] {
	return terra.ReferenceAsList[DataResourcesResourcePropertyAttributes](r.ref.Append("resource_property"))
}

type DataResourcesResourcePropertyAttributes struct {
	ref terra.Reference
}

func (rp DataResourcesResourcePropertyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp DataResourcesResourcePropertyAttributes) InternalWithRef(ref terra.Reference) DataResourcesResourcePropertyAttributes {
	return DataResourcesResourcePropertyAttributes{ref: ref}
}

func (rp DataResourcesResourcePropertyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp DataResourcesResourcePropertyAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("data"))
}

func (rp DataResourcesResourcePropertyAttributes) LastReportedAt() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("last_reported_at"))
}

func (rp DataResourcesResourcePropertyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("name"))
}

type DataResourceCountState struct {
	Complete       bool    `json:"complete"`
	TotalResources float64 `json:"total_resources"`
}

type DataResourcesState struct {
	Arn              string                               `json:"arn"`
	LastReportedAt   string                               `json:"last_reported_at"`
	OwningAccountId  string                               `json:"owning_account_id"`
	Region           string                               `json:"region"`
	ResourceType     string                               `json:"resource_type"`
	Service          string                               `json:"service"`
	ResourceProperty []DataResourcesResourcePropertyState `json:"resource_property"`
}

type DataResourcesResourcePropertyState struct {
	Data           string `json:"data"`
	LastReportedAt string `json:"last_reported_at"`
	Name           string `json:"name"`
}
