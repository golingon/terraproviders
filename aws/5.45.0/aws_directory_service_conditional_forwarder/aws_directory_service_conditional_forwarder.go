// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_directory_service_conditional_forwarder

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_directory_service_conditional_forwarder.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDirectoryServiceConditionalForwarderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adscf *Resource) Type() string {
	return "aws_directory_service_conditional_forwarder"
}

// LocalName returns the local name for [Resource].
func (adscf *Resource) LocalName() string {
	return adscf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adscf *Resource) Configuration() interface{} {
	return adscf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adscf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adscf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adscf *Resource) Dependencies() terra.Dependencies {
	return adscf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adscf *Resource) LifecycleManagement() *terra.Lifecycle {
	return adscf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adscf *Resource) Attributes() awsDirectoryServiceConditionalForwarderAttributes {
	return awsDirectoryServiceConditionalForwarderAttributes{ref: terra.ReferenceResource(adscf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adscf *Resource) ImportState(state io.Reader) error {
	adscf.state = &awsDirectoryServiceConditionalForwarderState{}
	if err := json.NewDecoder(state).Decode(adscf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adscf.Type(), adscf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adscf *Resource) State() (*awsDirectoryServiceConditionalForwarderState, bool) {
	return adscf.state, adscf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adscf *Resource) StateMust() *awsDirectoryServiceConditionalForwarderState {
	if adscf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adscf.Type(), adscf.LocalName()))
	}
	return adscf.state
}

// Args contains the configurations for aws_directory_service_conditional_forwarder.
type Args struct {
	// DirectoryId: string, required
	DirectoryId terra.StringValue `hcl:"directory_id,attr" validate:"required"`
	// DnsIps: list of string, required
	DnsIps terra.ListValue[terra.StringValue] `hcl:"dns_ips,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RemoteDomainName: string, required
	RemoteDomainName terra.StringValue `hcl:"remote_domain_name,attr" validate:"required"`
}

type awsDirectoryServiceConditionalForwarderAttributes struct {
	ref terra.Reference
}

// DirectoryId returns a reference to field directory_id of aws_directory_service_conditional_forwarder.
func (adscf awsDirectoryServiceConditionalForwarderAttributes) DirectoryId() terra.StringValue {
	return terra.ReferenceAsString(adscf.ref.Append("directory_id"))
}

// DnsIps returns a reference to field dns_ips of aws_directory_service_conditional_forwarder.
func (adscf awsDirectoryServiceConditionalForwarderAttributes) DnsIps() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](adscf.ref.Append("dns_ips"))
}

// Id returns a reference to field id of aws_directory_service_conditional_forwarder.
func (adscf awsDirectoryServiceConditionalForwarderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adscf.ref.Append("id"))
}

// RemoteDomainName returns a reference to field remote_domain_name of aws_directory_service_conditional_forwarder.
func (adscf awsDirectoryServiceConditionalForwarderAttributes) RemoteDomainName() terra.StringValue {
	return terra.ReferenceAsString(adscf.ref.Append("remote_domain_name"))
}

type awsDirectoryServiceConditionalForwarderState struct {
	DirectoryId      string   `json:"directory_id"`
	DnsIps           []string `json:"dns_ips"`
	Id               string   `json:"id"`
	RemoteDomainName string   `json:"remote_domain_name"`
}
