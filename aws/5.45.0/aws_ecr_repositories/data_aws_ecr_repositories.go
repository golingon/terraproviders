// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecr_repositories

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_ecr_repositories.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aer *DataSource) DataSource() string {
	return "aws_ecr_repositories"
}

// LocalName returns the local name for [DataSource].
func (aer *DataSource) LocalName() string {
	return aer.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aer *DataSource) Configuration() interface{} {
	return aer.Args
}

// Attributes returns the attributes for [DataSource].
func (aer *DataSource) Attributes() dataAwsEcrRepositoriesAttributes {
	return dataAwsEcrRepositoriesAttributes{ref: terra.ReferenceDataSource(aer)}
}

// DataArgs contains the configurations for aws_ecr_repositories.
type DataArgs struct{}

type dataAwsEcrRepositoriesAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ecr_repositories.
func (aer dataAwsEcrRepositoriesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aer.ref.Append("id"))
}

// Names returns a reference to field names of aws_ecr_repositories.
func (aer dataAwsEcrRepositoriesAttributes) Names() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aer.ref.Append("names"))
}
