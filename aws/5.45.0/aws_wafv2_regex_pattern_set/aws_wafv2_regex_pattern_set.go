// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_wafv2_regex_pattern_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_wafv2_regex_pattern_set.
type Resource struct {
	Name      string
	Args      Args
	state     *awsWafv2RegexPatternSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (awrps *Resource) Type() string {
	return "aws_wafv2_regex_pattern_set"
}

// LocalName returns the local name for [Resource].
func (awrps *Resource) LocalName() string {
	return awrps.Name
}

// Configuration returns the configuration (args) for [Resource].
func (awrps *Resource) Configuration() interface{} {
	return awrps.Args
}

// DependOn is used for other resources to depend on [Resource].
func (awrps *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(awrps)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (awrps *Resource) Dependencies() terra.Dependencies {
	return awrps.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (awrps *Resource) LifecycleManagement() *terra.Lifecycle {
	return awrps.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (awrps *Resource) Attributes() awsWafv2RegexPatternSetAttributes {
	return awsWafv2RegexPatternSetAttributes{ref: terra.ReferenceResource(awrps)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (awrps *Resource) ImportState(state io.Reader) error {
	awrps.state = &awsWafv2RegexPatternSetState{}
	if err := json.NewDecoder(state).Decode(awrps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", awrps.Type(), awrps.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (awrps *Resource) State() (*awsWafv2RegexPatternSetState, bool) {
	return awrps.state, awrps.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (awrps *Resource) StateMust() *awsWafv2RegexPatternSetState {
	if awrps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", awrps.Type(), awrps.LocalName()))
	}
	return awrps.state
}

// Args contains the configurations for aws_wafv2_regex_pattern_set.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// RegularExpression: min=0,max=10
	RegularExpression []RegularExpression `hcl:"regular_expression,block" validate:"min=0,max=10"`
}

type awsWafv2RegexPatternSetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_wafv2_regex_pattern_set.
func (awrps awsWafv2RegexPatternSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(awrps.ref.Append("arn"))
}

// Description returns a reference to field description of aws_wafv2_regex_pattern_set.
func (awrps awsWafv2RegexPatternSetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(awrps.ref.Append("description"))
}

// Id returns a reference to field id of aws_wafv2_regex_pattern_set.
func (awrps awsWafv2RegexPatternSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(awrps.ref.Append("id"))
}

// LockToken returns a reference to field lock_token of aws_wafv2_regex_pattern_set.
func (awrps awsWafv2RegexPatternSetAttributes) LockToken() terra.StringValue {
	return terra.ReferenceAsString(awrps.ref.Append("lock_token"))
}

// Name returns a reference to field name of aws_wafv2_regex_pattern_set.
func (awrps awsWafv2RegexPatternSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(awrps.ref.Append("name"))
}

// Scope returns a reference to field scope of aws_wafv2_regex_pattern_set.
func (awrps awsWafv2RegexPatternSetAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(awrps.ref.Append("scope"))
}

// Tags returns a reference to field tags of aws_wafv2_regex_pattern_set.
func (awrps awsWafv2RegexPatternSetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](awrps.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_wafv2_regex_pattern_set.
func (awrps awsWafv2RegexPatternSetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](awrps.ref.Append("tags_all"))
}

func (awrps awsWafv2RegexPatternSetAttributes) RegularExpression() terra.SetValue[RegularExpressionAttributes] {
	return terra.ReferenceAsSet[RegularExpressionAttributes](awrps.ref.Append("regular_expression"))
}

type awsWafv2RegexPatternSetState struct {
	Arn               string                   `json:"arn"`
	Description       string                   `json:"description"`
	Id                string                   `json:"id"`
	LockToken         string                   `json:"lock_token"`
	Name              string                   `json:"name"`
	Scope             string                   `json:"scope"`
	Tags              map[string]string        `json:"tags"`
	TagsAll           map[string]string        `json:"tags_all"`
	RegularExpression []RegularExpressionState `json:"regular_expression"`
}
