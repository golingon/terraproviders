// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshiftdata_statement

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_redshiftdata_statement.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRedshiftdataStatementState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ars *Resource) Type() string {
	return "aws_redshiftdata_statement"
}

// LocalName returns the local name for [Resource].
func (ars *Resource) LocalName() string {
	return ars.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ars *Resource) Configuration() interface{} {
	return ars.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ars *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ars)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ars *Resource) Dependencies() terra.Dependencies {
	return ars.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ars *Resource) LifecycleManagement() *terra.Lifecycle {
	return ars.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ars *Resource) Attributes() awsRedshiftdataStatementAttributes {
	return awsRedshiftdataStatementAttributes{ref: terra.ReferenceResource(ars)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ars *Resource) ImportState(state io.Reader) error {
	ars.state = &awsRedshiftdataStatementState{}
	if err := json.NewDecoder(state).Decode(ars.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ars.Type(), ars.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ars *Resource) State() (*awsRedshiftdataStatementState, bool) {
	return ars.state, ars.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ars *Resource) StateMust() *awsRedshiftdataStatementState {
	if ars.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ars.Type(), ars.LocalName()))
	}
	return ars.state
}

// Args contains the configurations for aws_redshiftdata_statement.
type Args struct {
	// ClusterIdentifier: string, optional
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr"`
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// DbUser: string, optional
	DbUser terra.StringValue `hcl:"db_user,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SecretArn: string, optional
	SecretArn terra.StringValue `hcl:"secret_arn,attr"`
	// Sql: string, required
	Sql terra.StringValue `hcl:"sql,attr" validate:"required"`
	// StatementName: string, optional
	StatementName terra.StringValue `hcl:"statement_name,attr"`
	// WithEvent: bool, optional
	WithEvent terra.BoolValue `hcl:"with_event,attr"`
	// WorkgroupName: string, optional
	WorkgroupName terra.StringValue `hcl:"workgroup_name,attr"`
	// Parameters: min=0
	Parameters []Parameters `hcl:"parameters,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRedshiftdataStatementAttributes struct {
	ref terra.Reference
}

// ClusterIdentifier returns a reference to field cluster_identifier of aws_redshiftdata_statement.
func (ars awsRedshiftdataStatementAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("cluster_identifier"))
}

// Database returns a reference to field database of aws_redshiftdata_statement.
func (ars awsRedshiftdataStatementAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("database"))
}

// DbUser returns a reference to field db_user of aws_redshiftdata_statement.
func (ars awsRedshiftdataStatementAttributes) DbUser() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("db_user"))
}

// Id returns a reference to field id of aws_redshiftdata_statement.
func (ars awsRedshiftdataStatementAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("id"))
}

// SecretArn returns a reference to field secret_arn of aws_redshiftdata_statement.
func (ars awsRedshiftdataStatementAttributes) SecretArn() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("secret_arn"))
}

// Sql returns a reference to field sql of aws_redshiftdata_statement.
func (ars awsRedshiftdataStatementAttributes) Sql() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("sql"))
}

// StatementName returns a reference to field statement_name of aws_redshiftdata_statement.
func (ars awsRedshiftdataStatementAttributes) StatementName() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("statement_name"))
}

// WithEvent returns a reference to field with_event of aws_redshiftdata_statement.
func (ars awsRedshiftdataStatementAttributes) WithEvent() terra.BoolValue {
	return terra.ReferenceAsBool(ars.ref.Append("with_event"))
}

// WorkgroupName returns a reference to field workgroup_name of aws_redshiftdata_statement.
func (ars awsRedshiftdataStatementAttributes) WorkgroupName() terra.StringValue {
	return terra.ReferenceAsString(ars.ref.Append("workgroup_name"))
}

func (ars awsRedshiftdataStatementAttributes) Parameters() terra.ListValue[ParametersAttributes] {
	return terra.ReferenceAsList[ParametersAttributes](ars.ref.Append("parameters"))
}

func (ars awsRedshiftdataStatementAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ars.ref.Append("timeouts"))
}

type awsRedshiftdataStatementState struct {
	ClusterIdentifier string            `json:"cluster_identifier"`
	Database          string            `json:"database"`
	DbUser            string            `json:"db_user"`
	Id                string            `json:"id"`
	SecretArn         string            `json:"secret_arn"`
	Sql               string            `json:"sql"`
	StatementName     string            `json:"statement_name"`
	WithEvent         bool              `json:"with_event"`
	WorkgroupName     string            `json:"workgroup_name"`
	Parameters        []ParametersState `json:"parameters"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
