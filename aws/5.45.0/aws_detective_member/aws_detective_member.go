// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_detective_member

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_detective_member.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDetectiveMemberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adm *Resource) Type() string {
	return "aws_detective_member"
}

// LocalName returns the local name for [Resource].
func (adm *Resource) LocalName() string {
	return adm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adm *Resource) Configuration() interface{} {
	return adm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adm *Resource) Dependencies() terra.Dependencies {
	return adm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adm *Resource) LifecycleManagement() *terra.Lifecycle {
	return adm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adm *Resource) Attributes() awsDetectiveMemberAttributes {
	return awsDetectiveMemberAttributes{ref: terra.ReferenceResource(adm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adm *Resource) ImportState(state io.Reader) error {
	adm.state = &awsDetectiveMemberState{}
	if err := json.NewDecoder(state).Decode(adm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adm.Type(), adm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adm *Resource) State() (*awsDetectiveMemberState, bool) {
	return adm.state, adm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adm *Resource) StateMust() *awsDetectiveMemberState {
	if adm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adm.Type(), adm.LocalName()))
	}
	return adm.state
}

// Args contains the configurations for aws_detective_member.
type Args struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// DisableEmailNotification: bool, optional
	DisableEmailNotification terra.BoolValue `hcl:"disable_email_notification,attr"`
	// EmailAddress: string, required
	EmailAddress terra.StringValue `hcl:"email_address,attr" validate:"required"`
	// GraphArn: string, required
	GraphArn terra.StringValue `hcl:"graph_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Message: string, optional
	Message terra.StringValue `hcl:"message,attr"`
}

type awsDetectiveMemberAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_detective_member.
func (adm awsDetectiveMemberAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("account_id"))
}

// AdministratorId returns a reference to field administrator_id of aws_detective_member.
func (adm awsDetectiveMemberAttributes) AdministratorId() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("administrator_id"))
}

// DisableEmailNotification returns a reference to field disable_email_notification of aws_detective_member.
func (adm awsDetectiveMemberAttributes) DisableEmailNotification() terra.BoolValue {
	return terra.ReferenceAsBool(adm.ref.Append("disable_email_notification"))
}

// DisabledReason returns a reference to field disabled_reason of aws_detective_member.
func (adm awsDetectiveMemberAttributes) DisabledReason() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("disabled_reason"))
}

// EmailAddress returns a reference to field email_address of aws_detective_member.
func (adm awsDetectiveMemberAttributes) EmailAddress() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("email_address"))
}

// GraphArn returns a reference to field graph_arn of aws_detective_member.
func (adm awsDetectiveMemberAttributes) GraphArn() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("graph_arn"))
}

// Id returns a reference to field id of aws_detective_member.
func (adm awsDetectiveMemberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("id"))
}

// InvitedTime returns a reference to field invited_time of aws_detective_member.
func (adm awsDetectiveMemberAttributes) InvitedTime() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("invited_time"))
}

// Message returns a reference to field message of aws_detective_member.
func (adm awsDetectiveMemberAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("message"))
}

// Status returns a reference to field status of aws_detective_member.
func (adm awsDetectiveMemberAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("status"))
}

// UpdatedTime returns a reference to field updated_time of aws_detective_member.
func (adm awsDetectiveMemberAttributes) UpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("updated_time"))
}

// VolumeUsageInBytes returns a reference to field volume_usage_in_bytes of aws_detective_member.
func (adm awsDetectiveMemberAttributes) VolumeUsageInBytes() terra.StringValue {
	return terra.ReferenceAsString(adm.ref.Append("volume_usage_in_bytes"))
}

type awsDetectiveMemberState struct {
	AccountId                string `json:"account_id"`
	AdministratorId          string `json:"administrator_id"`
	DisableEmailNotification bool   `json:"disable_email_notification"`
	DisabledReason           string `json:"disabled_reason"`
	EmailAddress             string `json:"email_address"`
	GraphArn                 string `json:"graph_arn"`
	Id                       string `json:"id"`
	InvitedTime              string `json:"invited_time"`
	Message                  string `json:"message"`
	Status                   string `json:"status"`
	UpdatedTime              string `json:"updated_time"`
	VolumeUsageInBytes       string `json:"volume_usage_in_bytes"`
}
