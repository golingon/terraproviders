// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_emr_block_public_access_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_emr_block_public_access_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEmrBlockPublicAccessConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aebpac *Resource) Type() string {
	return "aws_emr_block_public_access_configuration"
}

// LocalName returns the local name for [Resource].
func (aebpac *Resource) LocalName() string {
	return aebpac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aebpac *Resource) Configuration() interface{} {
	return aebpac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aebpac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aebpac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aebpac *Resource) Dependencies() terra.Dependencies {
	return aebpac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aebpac *Resource) LifecycleManagement() *terra.Lifecycle {
	return aebpac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aebpac *Resource) Attributes() awsEmrBlockPublicAccessConfigurationAttributes {
	return awsEmrBlockPublicAccessConfigurationAttributes{ref: terra.ReferenceResource(aebpac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aebpac *Resource) ImportState(state io.Reader) error {
	aebpac.state = &awsEmrBlockPublicAccessConfigurationState{}
	if err := json.NewDecoder(state).Decode(aebpac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aebpac.Type(), aebpac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aebpac *Resource) State() (*awsEmrBlockPublicAccessConfigurationState, bool) {
	return aebpac.state, aebpac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aebpac *Resource) StateMust() *awsEmrBlockPublicAccessConfigurationState {
	if aebpac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aebpac.Type(), aebpac.LocalName()))
	}
	return aebpac.state
}

// Args contains the configurations for aws_emr_block_public_access_configuration.
type Args struct {
	// BlockPublicSecurityGroupRules: bool, required
	BlockPublicSecurityGroupRules terra.BoolValue `hcl:"block_public_security_group_rules,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PermittedPublicSecurityGroupRuleRange: min=0
	PermittedPublicSecurityGroupRuleRange []PermittedPublicSecurityGroupRuleRange `hcl:"permitted_public_security_group_rule_range,block" validate:"min=0"`
}

type awsEmrBlockPublicAccessConfigurationAttributes struct {
	ref terra.Reference
}

// BlockPublicSecurityGroupRules returns a reference to field block_public_security_group_rules of aws_emr_block_public_access_configuration.
func (aebpac awsEmrBlockPublicAccessConfigurationAttributes) BlockPublicSecurityGroupRules() terra.BoolValue {
	return terra.ReferenceAsBool(aebpac.ref.Append("block_public_security_group_rules"))
}

// Id returns a reference to field id of aws_emr_block_public_access_configuration.
func (aebpac awsEmrBlockPublicAccessConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aebpac.ref.Append("id"))
}

func (aebpac awsEmrBlockPublicAccessConfigurationAttributes) PermittedPublicSecurityGroupRuleRange() terra.ListValue[PermittedPublicSecurityGroupRuleRangeAttributes] {
	return terra.ReferenceAsList[PermittedPublicSecurityGroupRuleRangeAttributes](aebpac.ref.Append("permitted_public_security_group_rule_range"))
}

type awsEmrBlockPublicAccessConfigurationState struct {
	BlockPublicSecurityGroupRules         bool                                         `json:"block_public_security_group_rules"`
	Id                                    string                                       `json:"id"`
	PermittedPublicSecurityGroupRuleRange []PermittedPublicSecurityGroupRuleRangeState `json:"permitted_public_security_group_rule_range"`
}
