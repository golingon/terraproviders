// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_transit_gateway_connect

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_transit_gateway_connect.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2TransitGatewayConnectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aetgc *Resource) Type() string {
	return "aws_ec2_transit_gateway_connect"
}

// LocalName returns the local name for [Resource].
func (aetgc *Resource) LocalName() string {
	return aetgc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aetgc *Resource) Configuration() interface{} {
	return aetgc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aetgc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aetgc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aetgc *Resource) Dependencies() terra.Dependencies {
	return aetgc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aetgc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aetgc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aetgc *Resource) Attributes() awsEc2TransitGatewayConnectAttributes {
	return awsEc2TransitGatewayConnectAttributes{ref: terra.ReferenceResource(aetgc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aetgc *Resource) ImportState(state io.Reader) error {
	aetgc.state = &awsEc2TransitGatewayConnectState{}
	if err := json.NewDecoder(state).Decode(aetgc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aetgc.Type(), aetgc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aetgc *Resource) State() (*awsEc2TransitGatewayConnectState, bool) {
	return aetgc.state, aetgc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aetgc *Resource) StateMust() *awsEc2TransitGatewayConnectState {
	if aetgc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aetgc.Type(), aetgc.LocalName()))
	}
	return aetgc.state
}

// Args contains the configurations for aws_ec2_transit_gateway_connect.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitGatewayDefaultRouteTableAssociation: bool, optional
	TransitGatewayDefaultRouteTableAssociation terra.BoolValue `hcl:"transit_gateway_default_route_table_association,attr"`
	// TransitGatewayDefaultRouteTablePropagation: bool, optional
	TransitGatewayDefaultRouteTablePropagation terra.BoolValue `hcl:"transit_gateway_default_route_table_propagation,attr"`
	// TransitGatewayId: string, required
	TransitGatewayId terra.StringValue `hcl:"transit_gateway_id,attr" validate:"required"`
	// TransportAttachmentId: string, required
	TransportAttachmentId terra.StringValue `hcl:"transport_attachment_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEc2TransitGatewayConnectAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ec2_transit_gateway_connect.
func (aetgc awsEc2TransitGatewayConnectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aetgc.ref.Append("id"))
}

// Protocol returns a reference to field protocol of aws_ec2_transit_gateway_connect.
func (aetgc awsEc2TransitGatewayConnectAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(aetgc.ref.Append("protocol"))
}

// Tags returns a reference to field tags of aws_ec2_transit_gateway_connect.
func (aetgc awsEc2TransitGatewayConnectAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetgc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_transit_gateway_connect.
func (aetgc awsEc2TransitGatewayConnectAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetgc.ref.Append("tags_all"))
}

// TransitGatewayDefaultRouteTableAssociation returns a reference to field transit_gateway_default_route_table_association of aws_ec2_transit_gateway_connect.
func (aetgc awsEc2TransitGatewayConnectAttributes) TransitGatewayDefaultRouteTableAssociation() terra.BoolValue {
	return terra.ReferenceAsBool(aetgc.ref.Append("transit_gateway_default_route_table_association"))
}

// TransitGatewayDefaultRouteTablePropagation returns a reference to field transit_gateway_default_route_table_propagation of aws_ec2_transit_gateway_connect.
func (aetgc awsEc2TransitGatewayConnectAttributes) TransitGatewayDefaultRouteTablePropagation() terra.BoolValue {
	return terra.ReferenceAsBool(aetgc.ref.Append("transit_gateway_default_route_table_propagation"))
}

// TransitGatewayId returns a reference to field transit_gateway_id of aws_ec2_transit_gateway_connect.
func (aetgc awsEc2TransitGatewayConnectAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceAsString(aetgc.ref.Append("transit_gateway_id"))
}

// TransportAttachmentId returns a reference to field transport_attachment_id of aws_ec2_transit_gateway_connect.
func (aetgc awsEc2TransitGatewayConnectAttributes) TransportAttachmentId() terra.StringValue {
	return terra.ReferenceAsString(aetgc.ref.Append("transport_attachment_id"))
}

func (aetgc awsEc2TransitGatewayConnectAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aetgc.ref.Append("timeouts"))
}

type awsEc2TransitGatewayConnectState struct {
	Id                                         string            `json:"id"`
	Protocol                                   string            `json:"protocol"`
	Tags                                       map[string]string `json:"tags"`
	TagsAll                                    map[string]string `json:"tags_all"`
	TransitGatewayDefaultRouteTableAssociation bool              `json:"transit_gateway_default_route_table_association"`
	TransitGatewayDefaultRouteTablePropagation bool              `json:"transit_gateway_default_route_table_propagation"`
	TransitGatewayId                           string            `json:"transit_gateway_id"`
	TransportAttachmentId                      string            `json:"transport_attachment_id"`
	Timeouts                                   *TimeoutsState    `json:"timeouts"`
}
