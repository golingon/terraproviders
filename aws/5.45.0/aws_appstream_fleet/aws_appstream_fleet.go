// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appstream_fleet

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_appstream_fleet.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppstreamFleetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaf *Resource) Type() string {
	return "aws_appstream_fleet"
}

// LocalName returns the local name for [Resource].
func (aaf *Resource) LocalName() string {
	return aaf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaf *Resource) Configuration() interface{} {
	return aaf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaf *Resource) Dependencies() terra.Dependencies {
	return aaf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaf *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaf *Resource) Attributes() awsAppstreamFleetAttributes {
	return awsAppstreamFleetAttributes{ref: terra.ReferenceResource(aaf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaf *Resource) ImportState(state io.Reader) error {
	aaf.state = &awsAppstreamFleetState{}
	if err := json.NewDecoder(state).Decode(aaf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaf.Type(), aaf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaf *Resource) State() (*awsAppstreamFleetState, bool) {
	return aaf.state, aaf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaf *Resource) StateMust() *awsAppstreamFleetState {
	if aaf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaf.Type(), aaf.LocalName()))
	}
	return aaf.state
}

// Args contains the configurations for aws_appstream_fleet.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisconnectTimeoutInSeconds: number, optional
	DisconnectTimeoutInSeconds terra.NumberValue `hcl:"disconnect_timeout_in_seconds,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// EnableDefaultInternetAccess: bool, optional
	EnableDefaultInternetAccess terra.BoolValue `hcl:"enable_default_internet_access,attr"`
	// FleetType: string, optional
	FleetType terra.StringValue `hcl:"fleet_type,attr"`
	// IamRoleArn: string, optional
	IamRoleArn terra.StringValue `hcl:"iam_role_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdleDisconnectTimeoutInSeconds: number, optional
	IdleDisconnectTimeoutInSeconds terra.NumberValue `hcl:"idle_disconnect_timeout_in_seconds,attr"`
	// ImageArn: string, optional
	ImageArn terra.StringValue `hcl:"image_arn,attr"`
	// ImageName: string, optional
	ImageName terra.StringValue `hcl:"image_name,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// MaxSessionsPerInstance: number, optional
	MaxSessionsPerInstance terra.NumberValue `hcl:"max_sessions_per_instance,attr"`
	// MaxUserDurationInSeconds: number, optional
	MaxUserDurationInSeconds terra.NumberValue `hcl:"max_user_duration_in_seconds,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StreamView: string, optional
	StreamView terra.StringValue `hcl:"stream_view,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ComputeCapacity: required
	ComputeCapacity *ComputeCapacity `hcl:"compute_capacity,block" validate:"required"`
	// DomainJoinInfo: optional
	DomainJoinInfo *DomainJoinInfo `hcl:"domain_join_info,block"`
	// VpcConfig: optional
	VpcConfig *VpcConfig `hcl:"vpc_config,block"`
}

type awsAppstreamFleetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("arn"))
}

// CreatedTime returns a reference to field created_time of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("created_time"))
}

// Description returns a reference to field description of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("description"))
}

// DisconnectTimeoutInSeconds returns a reference to field disconnect_timeout_in_seconds of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) DisconnectTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(aaf.ref.Append("disconnect_timeout_in_seconds"))
}

// DisplayName returns a reference to field display_name of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("display_name"))
}

// EnableDefaultInternetAccess returns a reference to field enable_default_internet_access of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) EnableDefaultInternetAccess() terra.BoolValue {
	return terra.ReferenceAsBool(aaf.ref.Append("enable_default_internet_access"))
}

// FleetType returns a reference to field fleet_type of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) FleetType() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("fleet_type"))
}

// IamRoleArn returns a reference to field iam_role_arn of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) IamRoleArn() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("iam_role_arn"))
}

// Id returns a reference to field id of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("id"))
}

// IdleDisconnectTimeoutInSeconds returns a reference to field idle_disconnect_timeout_in_seconds of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) IdleDisconnectTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(aaf.ref.Append("idle_disconnect_timeout_in_seconds"))
}

// ImageArn returns a reference to field image_arn of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) ImageArn() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("image_arn"))
}

// ImageName returns a reference to field image_name of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) ImageName() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("image_name"))
}

// InstanceType returns a reference to field instance_type of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("instance_type"))
}

// MaxSessionsPerInstance returns a reference to field max_sessions_per_instance of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) MaxSessionsPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(aaf.ref.Append("max_sessions_per_instance"))
}

// MaxUserDurationInSeconds returns a reference to field max_user_duration_in_seconds of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) MaxUserDurationInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(aaf.ref.Append("max_user_duration_in_seconds"))
}

// Name returns a reference to field name of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("name"))
}

// State returns a reference to field state of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("state"))
}

// StreamView returns a reference to field stream_view of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) StreamView() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("stream_view"))
}

// Tags returns a reference to field tags of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaf.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_appstream_fleet.
func (aaf awsAppstreamFleetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaf.ref.Append("tags_all"))
}

func (aaf awsAppstreamFleetAttributes) ComputeCapacity() terra.ListValue[ComputeCapacityAttributes] {
	return terra.ReferenceAsList[ComputeCapacityAttributes](aaf.ref.Append("compute_capacity"))
}

func (aaf awsAppstreamFleetAttributes) DomainJoinInfo() terra.ListValue[DomainJoinInfoAttributes] {
	return terra.ReferenceAsList[DomainJoinInfoAttributes](aaf.ref.Append("domain_join_info"))
}

func (aaf awsAppstreamFleetAttributes) VpcConfig() terra.ListValue[VpcConfigAttributes] {
	return terra.ReferenceAsList[VpcConfigAttributes](aaf.ref.Append("vpc_config"))
}

type awsAppstreamFleetState struct {
	Arn                            string                 `json:"arn"`
	CreatedTime                    string                 `json:"created_time"`
	Description                    string                 `json:"description"`
	DisconnectTimeoutInSeconds     float64                `json:"disconnect_timeout_in_seconds"`
	DisplayName                    string                 `json:"display_name"`
	EnableDefaultInternetAccess    bool                   `json:"enable_default_internet_access"`
	FleetType                      string                 `json:"fleet_type"`
	IamRoleArn                     string                 `json:"iam_role_arn"`
	Id                             string                 `json:"id"`
	IdleDisconnectTimeoutInSeconds float64                `json:"idle_disconnect_timeout_in_seconds"`
	ImageArn                       string                 `json:"image_arn"`
	ImageName                      string                 `json:"image_name"`
	InstanceType                   string                 `json:"instance_type"`
	MaxSessionsPerInstance         float64                `json:"max_sessions_per_instance"`
	MaxUserDurationInSeconds       float64                `json:"max_user_duration_in_seconds"`
	Name                           string                 `json:"name"`
	State                          string                 `json:"state"`
	StreamView                     string                 `json:"stream_view"`
	Tags                           map[string]string      `json:"tags"`
	TagsAll                        map[string]string      `json:"tags_all"`
	ComputeCapacity                []ComputeCapacityState `json:"compute_capacity"`
	DomainJoinInfo                 []DomainJoinInfoState  `json:"domain_join_info"`
	VpcConfig                      []VpcConfigState       `json:"vpc_config"`
}
