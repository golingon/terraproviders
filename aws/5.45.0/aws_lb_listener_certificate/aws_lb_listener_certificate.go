// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lb_listener_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lb_listener_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLbListenerCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (allc *Resource) Type() string {
	return "aws_lb_listener_certificate"
}

// LocalName returns the local name for [Resource].
func (allc *Resource) LocalName() string {
	return allc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (allc *Resource) Configuration() interface{} {
	return allc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (allc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(allc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (allc *Resource) Dependencies() terra.Dependencies {
	return allc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (allc *Resource) LifecycleManagement() *terra.Lifecycle {
	return allc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (allc *Resource) Attributes() awsLbListenerCertificateAttributes {
	return awsLbListenerCertificateAttributes{ref: terra.ReferenceResource(allc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (allc *Resource) ImportState(state io.Reader) error {
	allc.state = &awsLbListenerCertificateState{}
	if err := json.NewDecoder(state).Decode(allc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", allc.Type(), allc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (allc *Resource) State() (*awsLbListenerCertificateState, bool) {
	return allc.state, allc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (allc *Resource) StateMust() *awsLbListenerCertificateState {
	if allc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", allc.Type(), allc.LocalName()))
	}
	return allc.state
}

// Args contains the configurations for aws_lb_listener_certificate.
type Args struct {
	// CertificateArn: string, required
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListenerArn: string, required
	ListenerArn terra.StringValue `hcl:"listener_arn,attr" validate:"required"`
}

type awsLbListenerCertificateAttributes struct {
	ref terra.Reference
}

// CertificateArn returns a reference to field certificate_arn of aws_lb_listener_certificate.
func (allc awsLbListenerCertificateAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("certificate_arn"))
}

// Id returns a reference to field id of aws_lb_listener_certificate.
func (allc awsLbListenerCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("id"))
}

// ListenerArn returns a reference to field listener_arn of aws_lb_listener_certificate.
func (allc awsLbListenerCertificateAttributes) ListenerArn() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("listener_arn"))
}

type awsLbListenerCertificateState struct {
	CertificateArn string `json:"certificate_arn"`
	Id             string `json:"id"`
	ListenerArn    string `json:"listener_arn"`
}
