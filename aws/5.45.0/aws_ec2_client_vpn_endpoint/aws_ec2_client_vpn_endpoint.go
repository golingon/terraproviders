// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_client_vpn_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_client_vpn_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2ClientVpnEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aecve *Resource) Type() string {
	return "aws_ec2_client_vpn_endpoint"
}

// LocalName returns the local name for [Resource].
func (aecve *Resource) LocalName() string {
	return aecve.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aecve *Resource) Configuration() interface{} {
	return aecve.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aecve *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aecve)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aecve *Resource) Dependencies() terra.Dependencies {
	return aecve.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aecve *Resource) LifecycleManagement() *terra.Lifecycle {
	return aecve.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aecve *Resource) Attributes() awsEc2ClientVpnEndpointAttributes {
	return awsEc2ClientVpnEndpointAttributes{ref: terra.ReferenceResource(aecve)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aecve *Resource) ImportState(state io.Reader) error {
	aecve.state = &awsEc2ClientVpnEndpointState{}
	if err := json.NewDecoder(state).Decode(aecve.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aecve.Type(), aecve.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aecve *Resource) State() (*awsEc2ClientVpnEndpointState, bool) {
	return aecve.state, aecve.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aecve *Resource) StateMust() *awsEc2ClientVpnEndpointState {
	if aecve.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aecve.Type(), aecve.LocalName()))
	}
	return aecve.state
}

// Args contains the configurations for aws_ec2_client_vpn_endpoint.
type Args struct {
	// ClientCidrBlock: string, required
	ClientCidrBlock terra.StringValue `hcl:"client_cidr_block,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DnsServers: list of string, optional
	DnsServers terra.ListValue[terra.StringValue] `hcl:"dns_servers,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SelfServicePortal: string, optional
	SelfServicePortal terra.StringValue `hcl:"self_service_portal,attr"`
	// ServerCertificateArn: string, required
	ServerCertificateArn terra.StringValue `hcl:"server_certificate_arn,attr" validate:"required"`
	// SessionTimeoutHours: number, optional
	SessionTimeoutHours terra.NumberValue `hcl:"session_timeout_hours,attr"`
	// SplitTunnel: bool, optional
	SplitTunnel terra.BoolValue `hcl:"split_tunnel,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransportProtocol: string, optional
	TransportProtocol terra.StringValue `hcl:"transport_protocol,attr"`
	// VpcId: string, optional
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// VpnPort: number, optional
	VpnPort terra.NumberValue `hcl:"vpn_port,attr"`
	// AuthenticationOptions: min=1,max=2
	AuthenticationOptions []AuthenticationOptions `hcl:"authentication_options,block" validate:"min=1,max=2"`
	// ClientConnectOptions: optional
	ClientConnectOptions *ClientConnectOptions `hcl:"client_connect_options,block"`
	// ClientLoginBannerOptions: optional
	ClientLoginBannerOptions *ClientLoginBannerOptions `hcl:"client_login_banner_options,block"`
	// ConnectionLogOptions: required
	ConnectionLogOptions *ConnectionLogOptions `hcl:"connection_log_options,block" validate:"required"`
}

type awsEc2ClientVpnEndpointAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aecve.ref.Append("arn"))
}

// ClientCidrBlock returns a reference to field client_cidr_block of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) ClientCidrBlock() terra.StringValue {
	return terra.ReferenceAsString(aecve.ref.Append("client_cidr_block"))
}

// Description returns a reference to field description of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aecve.ref.Append("description"))
}

// DnsName returns a reference to field dns_name of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(aecve.ref.Append("dns_name"))
}

// DnsServers returns a reference to field dns_servers of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) DnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aecve.ref.Append("dns_servers"))
}

// Id returns a reference to field id of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aecve.ref.Append("id"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aecve.ref.Append("security_group_ids"))
}

// SelfServicePortal returns a reference to field self_service_portal of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) SelfServicePortal() terra.StringValue {
	return terra.ReferenceAsString(aecve.ref.Append("self_service_portal"))
}

// SelfServicePortalUrl returns a reference to field self_service_portal_url of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) SelfServicePortalUrl() terra.StringValue {
	return terra.ReferenceAsString(aecve.ref.Append("self_service_portal_url"))
}

// ServerCertificateArn returns a reference to field server_certificate_arn of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) ServerCertificateArn() terra.StringValue {
	return terra.ReferenceAsString(aecve.ref.Append("server_certificate_arn"))
}

// SessionTimeoutHours returns a reference to field session_timeout_hours of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) SessionTimeoutHours() terra.NumberValue {
	return terra.ReferenceAsNumber(aecve.ref.Append("session_timeout_hours"))
}

// SplitTunnel returns a reference to field split_tunnel of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) SplitTunnel() terra.BoolValue {
	return terra.ReferenceAsBool(aecve.ref.Append("split_tunnel"))
}

// Tags returns a reference to field tags of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aecve.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aecve.ref.Append("tags_all"))
}

// TransportProtocol returns a reference to field transport_protocol of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) TransportProtocol() terra.StringValue {
	return terra.ReferenceAsString(aecve.ref.Append("transport_protocol"))
}

// VpcId returns a reference to field vpc_id of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(aecve.ref.Append("vpc_id"))
}

// VpnPort returns a reference to field vpn_port of aws_ec2_client_vpn_endpoint.
func (aecve awsEc2ClientVpnEndpointAttributes) VpnPort() terra.NumberValue {
	return terra.ReferenceAsNumber(aecve.ref.Append("vpn_port"))
}

func (aecve awsEc2ClientVpnEndpointAttributes) AuthenticationOptions() terra.SetValue[AuthenticationOptionsAttributes] {
	return terra.ReferenceAsSet[AuthenticationOptionsAttributes](aecve.ref.Append("authentication_options"))
}

func (aecve awsEc2ClientVpnEndpointAttributes) ClientConnectOptions() terra.ListValue[ClientConnectOptionsAttributes] {
	return terra.ReferenceAsList[ClientConnectOptionsAttributes](aecve.ref.Append("client_connect_options"))
}

func (aecve awsEc2ClientVpnEndpointAttributes) ClientLoginBannerOptions() terra.ListValue[ClientLoginBannerOptionsAttributes] {
	return terra.ReferenceAsList[ClientLoginBannerOptionsAttributes](aecve.ref.Append("client_login_banner_options"))
}

func (aecve awsEc2ClientVpnEndpointAttributes) ConnectionLogOptions() terra.ListValue[ConnectionLogOptionsAttributes] {
	return terra.ReferenceAsList[ConnectionLogOptionsAttributes](aecve.ref.Append("connection_log_options"))
}

type awsEc2ClientVpnEndpointState struct {
	Arn                      string                          `json:"arn"`
	ClientCidrBlock          string                          `json:"client_cidr_block"`
	Description              string                          `json:"description"`
	DnsName                  string                          `json:"dns_name"`
	DnsServers               []string                        `json:"dns_servers"`
	Id                       string                          `json:"id"`
	SecurityGroupIds         []string                        `json:"security_group_ids"`
	SelfServicePortal        string                          `json:"self_service_portal"`
	SelfServicePortalUrl     string                          `json:"self_service_portal_url"`
	ServerCertificateArn     string                          `json:"server_certificate_arn"`
	SessionTimeoutHours      float64                         `json:"session_timeout_hours"`
	SplitTunnel              bool                            `json:"split_tunnel"`
	Tags                     map[string]string               `json:"tags"`
	TagsAll                  map[string]string               `json:"tags_all"`
	TransportProtocol        string                          `json:"transport_protocol"`
	VpcId                    string                          `json:"vpc_id"`
	VpnPort                  float64                         `json:"vpn_port"`
	AuthenticationOptions    []AuthenticationOptionsState    `json:"authentication_options"`
	ClientConnectOptions     []ClientConnectOptionsState     `json:"client_connect_options"`
	ClientLoginBannerOptions []ClientLoginBannerOptionsState `json:"client_login_banner_options"`
	ConnectionLogOptions     []ConnectionLogOptionsState     `json:"connection_log_options"`
}
