// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudtrail

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudtrail.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudtrailState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ac *Resource) Type() string {
	return "aws_cloudtrail"
}

// LocalName returns the local name for [Resource].
func (ac *Resource) LocalName() string {
	return ac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ac *Resource) Configuration() interface{} {
	return ac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ac *Resource) Dependencies() terra.Dependencies {
	return ac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ac *Resource) LifecycleManagement() *terra.Lifecycle {
	return ac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ac *Resource) Attributes() awsCloudtrailAttributes {
	return awsCloudtrailAttributes{ref: terra.ReferenceResource(ac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ac *Resource) ImportState(state io.Reader) error {
	ac.state = &awsCloudtrailState{}
	if err := json.NewDecoder(state).Decode(ac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ac.Type(), ac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ac *Resource) State() (*awsCloudtrailState, bool) {
	return ac.state, ac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ac *Resource) StateMust() *awsCloudtrailState {
	if ac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ac.Type(), ac.LocalName()))
	}
	return ac.state
}

// Args contains the configurations for aws_cloudtrail.
type Args struct {
	// CloudWatchLogsGroupArn: string, optional
	CloudWatchLogsGroupArn terra.StringValue `hcl:"cloud_watch_logs_group_arn,attr"`
	// CloudWatchLogsRoleArn: string, optional
	CloudWatchLogsRoleArn terra.StringValue `hcl:"cloud_watch_logs_role_arn,attr"`
	// EnableLogFileValidation: bool, optional
	EnableLogFileValidation terra.BoolValue `hcl:"enable_log_file_validation,attr"`
	// EnableLogging: bool, optional
	EnableLogging terra.BoolValue `hcl:"enable_logging,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IncludeGlobalServiceEvents: bool, optional
	IncludeGlobalServiceEvents terra.BoolValue `hcl:"include_global_service_events,attr"`
	// IsMultiRegionTrail: bool, optional
	IsMultiRegionTrail terra.BoolValue `hcl:"is_multi_region_trail,attr"`
	// IsOrganizationTrail: bool, optional
	IsOrganizationTrail terra.BoolValue `hcl:"is_organization_trail,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// S3BucketName: string, required
	S3BucketName terra.StringValue `hcl:"s3_bucket_name,attr" validate:"required"`
	// S3KeyPrefix: string, optional
	S3KeyPrefix terra.StringValue `hcl:"s3_key_prefix,attr"`
	// SnsTopicName: string, optional
	SnsTopicName terra.StringValue `hcl:"sns_topic_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// AdvancedEventSelector: min=0
	AdvancedEventSelector []AdvancedEventSelector `hcl:"advanced_event_selector,block" validate:"min=0"`
	// EventSelector: min=0,max=5
	EventSelector []EventSelector `hcl:"event_selector,block" validate:"min=0,max=5"`
	// InsightSelector: min=0
	InsightSelector []InsightSelector `hcl:"insight_selector,block" validate:"min=0"`
}

type awsCloudtrailAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudtrail.
func (ac awsCloudtrailAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("arn"))
}

// CloudWatchLogsGroupArn returns a reference to field cloud_watch_logs_group_arn of aws_cloudtrail.
func (ac awsCloudtrailAttributes) CloudWatchLogsGroupArn() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("cloud_watch_logs_group_arn"))
}

// CloudWatchLogsRoleArn returns a reference to field cloud_watch_logs_role_arn of aws_cloudtrail.
func (ac awsCloudtrailAttributes) CloudWatchLogsRoleArn() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("cloud_watch_logs_role_arn"))
}

// EnableLogFileValidation returns a reference to field enable_log_file_validation of aws_cloudtrail.
func (ac awsCloudtrailAttributes) EnableLogFileValidation() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("enable_log_file_validation"))
}

// EnableLogging returns a reference to field enable_logging of aws_cloudtrail.
func (ac awsCloudtrailAttributes) EnableLogging() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("enable_logging"))
}

// HomeRegion returns a reference to field home_region of aws_cloudtrail.
func (ac awsCloudtrailAttributes) HomeRegion() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("home_region"))
}

// Id returns a reference to field id of aws_cloudtrail.
func (ac awsCloudtrailAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("id"))
}

// IncludeGlobalServiceEvents returns a reference to field include_global_service_events of aws_cloudtrail.
func (ac awsCloudtrailAttributes) IncludeGlobalServiceEvents() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("include_global_service_events"))
}

// IsMultiRegionTrail returns a reference to field is_multi_region_trail of aws_cloudtrail.
func (ac awsCloudtrailAttributes) IsMultiRegionTrail() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("is_multi_region_trail"))
}

// IsOrganizationTrail returns a reference to field is_organization_trail of aws_cloudtrail.
func (ac awsCloudtrailAttributes) IsOrganizationTrail() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("is_organization_trail"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_cloudtrail.
func (ac awsCloudtrailAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("kms_key_id"))
}

// Name returns a reference to field name of aws_cloudtrail.
func (ac awsCloudtrailAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("name"))
}

// S3BucketName returns a reference to field s3_bucket_name of aws_cloudtrail.
func (ac awsCloudtrailAttributes) S3BucketName() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("s3_bucket_name"))
}

// S3KeyPrefix returns a reference to field s3_key_prefix of aws_cloudtrail.
func (ac awsCloudtrailAttributes) S3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("s3_key_prefix"))
}

// SnsTopicName returns a reference to field sns_topic_name of aws_cloudtrail.
func (ac awsCloudtrailAttributes) SnsTopicName() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("sns_topic_name"))
}

// Tags returns a reference to field tags of aws_cloudtrail.
func (ac awsCloudtrailAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ac.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cloudtrail.
func (ac awsCloudtrailAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ac.ref.Append("tags_all"))
}

func (ac awsCloudtrailAttributes) AdvancedEventSelector() terra.ListValue[AdvancedEventSelectorAttributes] {
	return terra.ReferenceAsList[AdvancedEventSelectorAttributes](ac.ref.Append("advanced_event_selector"))
}

func (ac awsCloudtrailAttributes) EventSelector() terra.ListValue[EventSelectorAttributes] {
	return terra.ReferenceAsList[EventSelectorAttributes](ac.ref.Append("event_selector"))
}

func (ac awsCloudtrailAttributes) InsightSelector() terra.ListValue[InsightSelectorAttributes] {
	return terra.ReferenceAsList[InsightSelectorAttributes](ac.ref.Append("insight_selector"))
}

type awsCloudtrailState struct {
	Arn                        string                       `json:"arn"`
	CloudWatchLogsGroupArn     string                       `json:"cloud_watch_logs_group_arn"`
	CloudWatchLogsRoleArn      string                       `json:"cloud_watch_logs_role_arn"`
	EnableLogFileValidation    bool                         `json:"enable_log_file_validation"`
	EnableLogging              bool                         `json:"enable_logging"`
	HomeRegion                 string                       `json:"home_region"`
	Id                         string                       `json:"id"`
	IncludeGlobalServiceEvents bool                         `json:"include_global_service_events"`
	IsMultiRegionTrail         bool                         `json:"is_multi_region_trail"`
	IsOrganizationTrail        bool                         `json:"is_organization_trail"`
	KmsKeyId                   string                       `json:"kms_key_id"`
	Name                       string                       `json:"name"`
	S3BucketName               string                       `json:"s3_bucket_name"`
	S3KeyPrefix                string                       `json:"s3_key_prefix"`
	SnsTopicName               string                       `json:"sns_topic_name"`
	Tags                       map[string]string            `json:"tags"`
	TagsAll                    map[string]string            `json:"tags_all"`
	AdvancedEventSelector      []AdvancedEventSelectorState `json:"advanced_event_selector"`
	EventSelector              []EventSelectorState         `json:"event_selector"`
	InsightSelector            []InsightSelectorState       `json:"insight_selector"`
}
