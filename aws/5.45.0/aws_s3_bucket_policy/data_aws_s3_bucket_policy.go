// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_policy

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_s3_bucket_policy.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (asbp *DataSource) DataSource() string {
	return "aws_s3_bucket_policy"
}

// LocalName returns the local name for [DataSource].
func (asbp *DataSource) LocalName() string {
	return asbp.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (asbp *DataSource) Configuration() interface{} {
	return asbp.Args
}

// Attributes returns the attributes for [DataSource].
func (asbp *DataSource) Attributes() dataAwsS3BucketPolicyAttributes {
	return dataAwsS3BucketPolicyAttributes{ref: terra.ReferenceDataSource(asbp)}
}

// DataArgs contains the configurations for aws_s3_bucket_policy.
type DataArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type dataAwsS3BucketPolicyAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of aws_s3_bucket_policy.
func (asbp dataAwsS3BucketPolicyAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(asbp.ref.Append("bucket"))
}

// Id returns a reference to field id of aws_s3_bucket_policy.
func (asbp dataAwsS3BucketPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asbp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_s3_bucket_policy.
func (asbp dataAwsS3BucketPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(asbp.ref.Append("policy"))
}
