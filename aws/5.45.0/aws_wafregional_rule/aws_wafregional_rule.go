// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_wafregional_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_wafregional_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsWafregionalRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (awr *Resource) Type() string {
	return "aws_wafregional_rule"
}

// LocalName returns the local name for [Resource].
func (awr *Resource) LocalName() string {
	return awr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (awr *Resource) Configuration() interface{} {
	return awr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (awr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(awr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (awr *Resource) Dependencies() terra.Dependencies {
	return awr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (awr *Resource) LifecycleManagement() *terra.Lifecycle {
	return awr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (awr *Resource) Attributes() awsWafregionalRuleAttributes {
	return awsWafregionalRuleAttributes{ref: terra.ReferenceResource(awr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (awr *Resource) ImportState(state io.Reader) error {
	awr.state = &awsWafregionalRuleState{}
	if err := json.NewDecoder(state).Decode(awr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", awr.Type(), awr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (awr *Resource) State() (*awsWafregionalRuleState, bool) {
	return awr.state, awr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (awr *Resource) StateMust() *awsWafregionalRuleState {
	if awr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", awr.Type(), awr.LocalName()))
	}
	return awr.state
}

// Args contains the configurations for aws_wafregional_rule.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MetricName: string, required
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Predicate: min=0
	Predicate []Predicate `hcl:"predicate,block" validate:"min=0"`
}

type awsWafregionalRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_wafregional_rule.
func (awr awsWafregionalRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(awr.ref.Append("arn"))
}

// Id returns a reference to field id of aws_wafregional_rule.
func (awr awsWafregionalRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(awr.ref.Append("id"))
}

// MetricName returns a reference to field metric_name of aws_wafregional_rule.
func (awr awsWafregionalRuleAttributes) MetricName() terra.StringValue {
	return terra.ReferenceAsString(awr.ref.Append("metric_name"))
}

// Name returns a reference to field name of aws_wafregional_rule.
func (awr awsWafregionalRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(awr.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_wafregional_rule.
func (awr awsWafregionalRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](awr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_wafregional_rule.
func (awr awsWafregionalRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](awr.ref.Append("tags_all"))
}

func (awr awsWafregionalRuleAttributes) Predicate() terra.SetValue[PredicateAttributes] {
	return terra.ReferenceAsSet[PredicateAttributes](awr.ref.Append("predicate"))
}

type awsWafregionalRuleState struct {
	Arn        string            `json:"arn"`
	Id         string            `json:"id"`
	MetricName string            `json:"metric_name"`
	Name       string            `json:"name"`
	Tags       map[string]string `json:"tags"`
	TagsAll    map[string]string `json:"tags_all"`
	Predicate  []PredicateState  `json:"predicate"`
}
