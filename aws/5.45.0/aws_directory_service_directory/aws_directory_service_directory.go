// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_directory_service_directory

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_directory_service_directory.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDirectoryServiceDirectoryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adsd *Resource) Type() string {
	return "aws_directory_service_directory"
}

// LocalName returns the local name for [Resource].
func (adsd *Resource) LocalName() string {
	return adsd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adsd *Resource) Configuration() interface{} {
	return adsd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adsd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adsd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adsd *Resource) Dependencies() terra.Dependencies {
	return adsd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adsd *Resource) LifecycleManagement() *terra.Lifecycle {
	return adsd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adsd *Resource) Attributes() awsDirectoryServiceDirectoryAttributes {
	return awsDirectoryServiceDirectoryAttributes{ref: terra.ReferenceResource(adsd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adsd *Resource) ImportState(state io.Reader) error {
	adsd.state = &awsDirectoryServiceDirectoryState{}
	if err := json.NewDecoder(state).Decode(adsd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adsd.Type(), adsd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adsd *Resource) State() (*awsDirectoryServiceDirectoryState, bool) {
	return adsd.state, adsd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adsd *Resource) StateMust() *awsDirectoryServiceDirectoryState {
	if adsd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adsd.Type(), adsd.LocalName()))
	}
	return adsd.state
}

// Args contains the configurations for aws_directory_service_directory.
type Args struct {
	// Alias: string, optional
	Alias terra.StringValue `hcl:"alias,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DesiredNumberOfDomainControllers: number, optional
	DesiredNumberOfDomainControllers terra.NumberValue `hcl:"desired_number_of_domain_controllers,attr"`
	// Edition: string, optional
	Edition terra.StringValue `hcl:"edition,attr"`
	// EnableSso: bool, optional
	EnableSso terra.BoolValue `hcl:"enable_sso,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// ShortName: string, optional
	ShortName terra.StringValue `hcl:"short_name,attr"`
	// Size: string, optional
	Size terra.StringValue `hcl:"size,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// ConnectSettings: optional
	ConnectSettings *ConnectSettings `hcl:"connect_settings,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcSettings: optional
	VpcSettings *VpcSettings `hcl:"vpc_settings,block"`
}

type awsDirectoryServiceDirectoryAttributes struct {
	ref terra.Reference
}

// AccessUrl returns a reference to field access_url of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) AccessUrl() terra.StringValue {
	return terra.ReferenceAsString(adsd.ref.Append("access_url"))
}

// Alias returns a reference to field alias of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(adsd.ref.Append("alias"))
}

// Description returns a reference to field description of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adsd.ref.Append("description"))
}

// DesiredNumberOfDomainControllers returns a reference to field desired_number_of_domain_controllers of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) DesiredNumberOfDomainControllers() terra.NumberValue {
	return terra.ReferenceAsNumber(adsd.ref.Append("desired_number_of_domain_controllers"))
}

// DnsIpAddresses returns a reference to field dns_ip_addresses of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) DnsIpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adsd.ref.Append("dns_ip_addresses"))
}

// Edition returns a reference to field edition of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) Edition() terra.StringValue {
	return terra.ReferenceAsString(adsd.ref.Append("edition"))
}

// EnableSso returns a reference to field enable_sso of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) EnableSso() terra.BoolValue {
	return terra.ReferenceAsBool(adsd.ref.Append("enable_sso"))
}

// Id returns a reference to field id of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adsd.ref.Append("id"))
}

// Name returns a reference to field name of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adsd.ref.Append("name"))
}

// Password returns a reference to field password of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(adsd.ref.Append("password"))
}

// SecurityGroupId returns a reference to field security_group_id of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) SecurityGroupId() terra.StringValue {
	return terra.ReferenceAsString(adsd.ref.Append("security_group_id"))
}

// ShortName returns a reference to field short_name of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) ShortName() terra.StringValue {
	return terra.ReferenceAsString(adsd.ref.Append("short_name"))
}

// Size returns a reference to field size of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) Size() terra.StringValue {
	return terra.ReferenceAsString(adsd.ref.Append("size"))
}

// Tags returns a reference to field tags of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adsd.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adsd.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_directory_service_directory.
func (adsd awsDirectoryServiceDirectoryAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(adsd.ref.Append("type"))
}

func (adsd awsDirectoryServiceDirectoryAttributes) ConnectSettings() terra.ListValue[ConnectSettingsAttributes] {
	return terra.ReferenceAsList[ConnectSettingsAttributes](adsd.ref.Append("connect_settings"))
}

func (adsd awsDirectoryServiceDirectoryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adsd.ref.Append("timeouts"))
}

func (adsd awsDirectoryServiceDirectoryAttributes) VpcSettings() terra.ListValue[VpcSettingsAttributes] {
	return terra.ReferenceAsList[VpcSettingsAttributes](adsd.ref.Append("vpc_settings"))
}

type awsDirectoryServiceDirectoryState struct {
	AccessUrl                        string                 `json:"access_url"`
	Alias                            string                 `json:"alias"`
	Description                      string                 `json:"description"`
	DesiredNumberOfDomainControllers float64                `json:"desired_number_of_domain_controllers"`
	DnsIpAddresses                   []string               `json:"dns_ip_addresses"`
	Edition                          string                 `json:"edition"`
	EnableSso                        bool                   `json:"enable_sso"`
	Id                               string                 `json:"id"`
	Name                             string                 `json:"name"`
	Password                         string                 `json:"password"`
	SecurityGroupId                  string                 `json:"security_group_id"`
	ShortName                        string                 `json:"short_name"`
	Size                             string                 `json:"size"`
	Tags                             map[string]string      `json:"tags"`
	TagsAll                          map[string]string      `json:"tags_all"`
	Type                             string                 `json:"type"`
	ConnectSettings                  []ConnectSettingsState `json:"connect_settings"`
	Timeouts                         *TimeoutsState         `json:"timeouts"`
	VpcSettings                      []VpcSettingsState     `json:"vpc_settings"`
}
