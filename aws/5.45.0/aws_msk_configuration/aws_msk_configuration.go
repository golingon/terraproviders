// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_msk_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_msk_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMskConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amc *Resource) Type() string {
	return "aws_msk_configuration"
}

// LocalName returns the local name for [Resource].
func (amc *Resource) LocalName() string {
	return amc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amc *Resource) Configuration() interface{} {
	return amc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amc *Resource) Dependencies() terra.Dependencies {
	return amc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amc *Resource) LifecycleManagement() *terra.Lifecycle {
	return amc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amc *Resource) Attributes() awsMskConfigurationAttributes {
	return awsMskConfigurationAttributes{ref: terra.ReferenceResource(amc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amc *Resource) ImportState(state io.Reader) error {
	amc.state = &awsMskConfigurationState{}
	if err := json.NewDecoder(state).Decode(amc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amc.Type(), amc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amc *Resource) State() (*awsMskConfigurationState, bool) {
	return amc.state, amc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amc *Resource) StateMust() *awsMskConfigurationState {
	if amc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amc.Type(), amc.LocalName()))
	}
	return amc.state
}

// Args contains the configurations for aws_msk_configuration.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KafkaVersions: set of string, optional
	KafkaVersions terra.SetValue[terra.StringValue] `hcl:"kafka_versions,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServerProperties: string, required
	ServerProperties terra.StringValue `hcl:"server_properties,attr" validate:"required"`
}

type awsMskConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_msk_configuration.
func (amc awsMskConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("arn"))
}

// Description returns a reference to field description of aws_msk_configuration.
func (amc awsMskConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("description"))
}

// Id returns a reference to field id of aws_msk_configuration.
func (amc awsMskConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("id"))
}

// KafkaVersions returns a reference to field kafka_versions of aws_msk_configuration.
func (amc awsMskConfigurationAttributes) KafkaVersions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](amc.ref.Append("kafka_versions"))
}

// LatestRevision returns a reference to field latest_revision of aws_msk_configuration.
func (amc awsMskConfigurationAttributes) LatestRevision() terra.NumberValue {
	return terra.ReferenceAsNumber(amc.ref.Append("latest_revision"))
}

// Name returns a reference to field name of aws_msk_configuration.
func (amc awsMskConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("name"))
}

// ServerProperties returns a reference to field server_properties of aws_msk_configuration.
func (amc awsMskConfigurationAttributes) ServerProperties() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("server_properties"))
}

type awsMskConfigurationState struct {
	Arn              string   `json:"arn"`
	Description      string   `json:"description"`
	Id               string   `json:"id"`
	KafkaVersions    []string `json:"kafka_versions"`
	LatestRevision   float64  `json:"latest_revision"`
	Name             string   `json:"name"`
	ServerProperties string   `json:"server_properties"`
}
