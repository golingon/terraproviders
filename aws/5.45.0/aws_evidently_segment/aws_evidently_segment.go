// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_evidently_segment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_evidently_segment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEvidentlySegmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aes *Resource) Type() string {
	return "aws_evidently_segment"
}

// LocalName returns the local name for [Resource].
func (aes *Resource) LocalName() string {
	return aes.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aes *Resource) Configuration() interface{} {
	return aes.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aes *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aes)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aes *Resource) Dependencies() terra.Dependencies {
	return aes.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aes *Resource) LifecycleManagement() *terra.Lifecycle {
	return aes.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aes *Resource) Attributes() awsEvidentlySegmentAttributes {
	return awsEvidentlySegmentAttributes{ref: terra.ReferenceResource(aes)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aes *Resource) ImportState(state io.Reader) error {
	aes.state = &awsEvidentlySegmentState{}
	if err := json.NewDecoder(state).Decode(aes.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aes.Type(), aes.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aes *Resource) State() (*awsEvidentlySegmentState, bool) {
	return aes.state, aes.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aes *Resource) StateMust() *awsEvidentlySegmentState {
	if aes.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aes.Type(), aes.LocalName()))
	}
	return aes.state
}

// Args contains the configurations for aws_evidently_segment.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Pattern: string, required
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsEvidentlySegmentAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_evidently_segment.
func (aes awsEvidentlySegmentAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("arn"))
}

// CreatedTime returns a reference to field created_time of aws_evidently_segment.
func (aes awsEvidentlySegmentAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("created_time"))
}

// Description returns a reference to field description of aws_evidently_segment.
func (aes awsEvidentlySegmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("description"))
}

// ExperimentCount returns a reference to field experiment_count of aws_evidently_segment.
func (aes awsEvidentlySegmentAttributes) ExperimentCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aes.ref.Append("experiment_count"))
}

// Id returns a reference to field id of aws_evidently_segment.
func (aes awsEvidentlySegmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("id"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_evidently_segment.
func (aes awsEvidentlySegmentAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("last_updated_time"))
}

// LaunchCount returns a reference to field launch_count of aws_evidently_segment.
func (aes awsEvidentlySegmentAttributes) LaunchCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aes.ref.Append("launch_count"))
}

// Name returns a reference to field name of aws_evidently_segment.
func (aes awsEvidentlySegmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("name"))
}

// Pattern returns a reference to field pattern of aws_evidently_segment.
func (aes awsEvidentlySegmentAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("pattern"))
}

// Tags returns a reference to field tags of aws_evidently_segment.
func (aes awsEvidentlySegmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aes.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_evidently_segment.
func (aes awsEvidentlySegmentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aes.ref.Append("tags_all"))
}

type awsEvidentlySegmentState struct {
	Arn             string            `json:"arn"`
	CreatedTime     string            `json:"created_time"`
	Description     string            `json:"description"`
	ExperimentCount float64           `json:"experiment_count"`
	Id              string            `json:"id"`
	LastUpdatedTime string            `json:"last_updated_time"`
	LaunchCount     float64           `json:"launch_count"`
	Name            string            `json:"name"`
	Pattern         string            `json:"pattern"`
	Tags            map[string]string `json:"tags"`
	TagsAll         map[string]string `json:"tags_all"`
}
