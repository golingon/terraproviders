// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ce_cost_category

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_ce_cost_category.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (accc *DataSource) DataSource() string {
	return "aws_ce_cost_category"
}

// LocalName returns the local name for [DataSource].
func (accc *DataSource) LocalName() string {
	return accc.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (accc *DataSource) Configuration() interface{} {
	return accc.Args
}

// Attributes returns the attributes for [DataSource].
func (accc *DataSource) Attributes() dataAwsCeCostCategoryAttributes {
	return dataAwsCeCostCategoryAttributes{ref: terra.ReferenceDataSource(accc)}
}

// DataArgs contains the configurations for aws_ce_cost_category.
type DataArgs struct {
	// CostCategoryArn: string, required
	CostCategoryArn terra.StringValue `hcl:"cost_category_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type dataAwsCeCostCategoryAttributes struct {
	ref terra.Reference
}

// CostCategoryArn returns a reference to field cost_category_arn of aws_ce_cost_category.
func (accc dataAwsCeCostCategoryAttributes) CostCategoryArn() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("cost_category_arn"))
}

// DefaultValue returns a reference to field default_value of aws_ce_cost_category.
func (accc dataAwsCeCostCategoryAttributes) DefaultValue() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("default_value"))
}

// EffectiveEnd returns a reference to field effective_end of aws_ce_cost_category.
func (accc dataAwsCeCostCategoryAttributes) EffectiveEnd() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("effective_end"))
}

// EffectiveStart returns a reference to field effective_start of aws_ce_cost_category.
func (accc dataAwsCeCostCategoryAttributes) EffectiveStart() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("effective_start"))
}

// Id returns a reference to field id of aws_ce_cost_category.
func (accc dataAwsCeCostCategoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("id"))
}

// Name returns a reference to field name of aws_ce_cost_category.
func (accc dataAwsCeCostCategoryAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("name"))
}

// RuleVersion returns a reference to field rule_version of aws_ce_cost_category.
func (accc dataAwsCeCostCategoryAttributes) RuleVersion() terra.StringValue {
	return terra.ReferenceAsString(accc.ref.Append("rule_version"))
}

// Tags returns a reference to field tags of aws_ce_cost_category.
func (accc dataAwsCeCostCategoryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](accc.ref.Append("tags"))
}

func (accc dataAwsCeCostCategoryAttributes) Rule() terra.SetValue[DataRuleAttributes] {
	return terra.ReferenceAsSet[DataRuleAttributes](accc.ref.Append("rule"))
}

func (accc dataAwsCeCostCategoryAttributes) SplitChargeRule() terra.SetValue[DataSplitChargeRuleAttributes] {
	return terra.ReferenceAsSet[DataSplitChargeRuleAttributes](accc.ref.Append("split_charge_rule"))
}
