// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_medialive_multiplex_program

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_medialive_multiplex_program.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMedialiveMultiplexProgramState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ammp *Resource) Type() string {
	return "aws_medialive_multiplex_program"
}

// LocalName returns the local name for [Resource].
func (ammp *Resource) LocalName() string {
	return ammp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ammp *Resource) Configuration() interface{} {
	return ammp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ammp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ammp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ammp *Resource) Dependencies() terra.Dependencies {
	return ammp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ammp *Resource) LifecycleManagement() *terra.Lifecycle {
	return ammp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ammp *Resource) Attributes() awsMedialiveMultiplexProgramAttributes {
	return awsMedialiveMultiplexProgramAttributes{ref: terra.ReferenceResource(ammp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ammp *Resource) ImportState(state io.Reader) error {
	ammp.state = &awsMedialiveMultiplexProgramState{}
	if err := json.NewDecoder(state).Decode(ammp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ammp.Type(), ammp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ammp *Resource) State() (*awsMedialiveMultiplexProgramState, bool) {
	return ammp.state, ammp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ammp *Resource) StateMust() *awsMedialiveMultiplexProgramState {
	if ammp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ammp.Type(), ammp.LocalName()))
	}
	return ammp.state
}

// Args contains the configurations for aws_medialive_multiplex_program.
type Args struct {
	// MultiplexId: string, required
	MultiplexId terra.StringValue `hcl:"multiplex_id,attr" validate:"required"`
	// ProgramName: string, required
	ProgramName terra.StringValue `hcl:"program_name,attr" validate:"required"`
	// MultiplexProgramSettings: min=0
	MultiplexProgramSettings []MultiplexProgramSettings `hcl:"multiplex_program_settings,block" validate:"min=0"`
}

type awsMedialiveMultiplexProgramAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_medialive_multiplex_program.
func (ammp awsMedialiveMultiplexProgramAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ammp.ref.Append("id"))
}

// MultiplexId returns a reference to field multiplex_id of aws_medialive_multiplex_program.
func (ammp awsMedialiveMultiplexProgramAttributes) MultiplexId() terra.StringValue {
	return terra.ReferenceAsString(ammp.ref.Append("multiplex_id"))
}

// ProgramName returns a reference to field program_name of aws_medialive_multiplex_program.
func (ammp awsMedialiveMultiplexProgramAttributes) ProgramName() terra.StringValue {
	return terra.ReferenceAsString(ammp.ref.Append("program_name"))
}

func (ammp awsMedialiveMultiplexProgramAttributes) MultiplexProgramSettings() terra.ListValue[MultiplexProgramSettingsAttributes] {
	return terra.ReferenceAsList[MultiplexProgramSettingsAttributes](ammp.ref.Append("multiplex_program_settings"))
}

type awsMedialiveMultiplexProgramState struct {
	Id                       string                          `json:"id"`
	MultiplexId              string                          `json:"multiplex_id"`
	ProgramName              string                          `json:"program_name"`
	MultiplexProgramSettings []MultiplexProgramSettingsState `json:"multiplex_program_settings"`
}
