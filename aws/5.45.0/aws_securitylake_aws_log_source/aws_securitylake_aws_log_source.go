// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_securitylake_aws_log_source

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_securitylake_aws_log_source.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSecuritylakeAwsLogSourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asals *Resource) Type() string {
	return "aws_securitylake_aws_log_source"
}

// LocalName returns the local name for [Resource].
func (asals *Resource) LocalName() string {
	return asals.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asals *Resource) Configuration() interface{} {
	return asals.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asals *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asals)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asals *Resource) Dependencies() terra.Dependencies {
	return asals.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asals *Resource) LifecycleManagement() *terra.Lifecycle {
	return asals.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asals *Resource) Attributes() awsSecuritylakeAwsLogSourceAttributes {
	return awsSecuritylakeAwsLogSourceAttributes{ref: terra.ReferenceResource(asals)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asals *Resource) ImportState(state io.Reader) error {
	asals.state = &awsSecuritylakeAwsLogSourceState{}
	if err := json.NewDecoder(state).Decode(asals.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asals.Type(), asals.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asals *Resource) State() (*awsSecuritylakeAwsLogSourceState, bool) {
	return asals.state, asals.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asals *Resource) StateMust() *awsSecuritylakeAwsLogSourceState {
	if asals.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asals.Type(), asals.LocalName()))
	}
	return asals.state
}

// Args contains the configurations for aws_securitylake_aws_log_source.
type Args struct {
	// Source: min=0
	Source []Source `hcl:"source,block" validate:"min=0"`
}

type awsSecuritylakeAwsLogSourceAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_securitylake_aws_log_source.
func (asals awsSecuritylakeAwsLogSourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asals.ref.Append("id"))
}

func (asals awsSecuritylakeAwsLogSourceAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](asals.ref.Append("source"))
}

type awsSecuritylakeAwsLogSourceState struct {
	Id     string        `json:"id"`
	Source []SourceState `json:"source"`
}
