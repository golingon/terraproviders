// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_macie2_invitation_accepter

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_macie2_invitation_accepter.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMacie2InvitationAccepterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amia *Resource) Type() string {
	return "aws_macie2_invitation_accepter"
}

// LocalName returns the local name for [Resource].
func (amia *Resource) LocalName() string {
	return amia.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amia *Resource) Configuration() interface{} {
	return amia.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amia *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amia)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amia *Resource) Dependencies() terra.Dependencies {
	return amia.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amia *Resource) LifecycleManagement() *terra.Lifecycle {
	return amia.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amia *Resource) Attributes() awsMacie2InvitationAccepterAttributes {
	return awsMacie2InvitationAccepterAttributes{ref: terra.ReferenceResource(amia)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amia *Resource) ImportState(state io.Reader) error {
	amia.state = &awsMacie2InvitationAccepterState{}
	if err := json.NewDecoder(state).Decode(amia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amia.Type(), amia.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amia *Resource) State() (*awsMacie2InvitationAccepterState, bool) {
	return amia.state, amia.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amia *Resource) StateMust() *awsMacie2InvitationAccepterState {
	if amia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amia.Type(), amia.LocalName()))
	}
	return amia.state
}

// Args contains the configurations for aws_macie2_invitation_accepter.
type Args struct {
	// AdministratorAccountId: string, required
	AdministratorAccountId terra.StringValue `hcl:"administrator_account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsMacie2InvitationAccepterAttributes struct {
	ref terra.Reference
}

// AdministratorAccountId returns a reference to field administrator_account_id of aws_macie2_invitation_accepter.
func (amia awsMacie2InvitationAccepterAttributes) AdministratorAccountId() terra.StringValue {
	return terra.ReferenceAsString(amia.ref.Append("administrator_account_id"))
}

// Id returns a reference to field id of aws_macie2_invitation_accepter.
func (amia awsMacie2InvitationAccepterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amia.ref.Append("id"))
}

// InvitationId returns a reference to field invitation_id of aws_macie2_invitation_accepter.
func (amia awsMacie2InvitationAccepterAttributes) InvitationId() terra.StringValue {
	return terra.ReferenceAsString(amia.ref.Append("invitation_id"))
}

func (amia awsMacie2InvitationAccepterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amia.ref.Append("timeouts"))
}

type awsMacie2InvitationAccepterState struct {
	AdministratorAccountId string         `json:"administrator_account_id"`
	Id                     string         `json:"id"`
	InvitationId           string         `json:"invitation_id"`
	Timeouts               *TimeoutsState `json:"timeouts"`
}
