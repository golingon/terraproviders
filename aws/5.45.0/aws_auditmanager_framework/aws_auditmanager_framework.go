// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_auditmanager_framework

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_auditmanager_framework.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAuditmanagerFrameworkState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaf *Resource) Type() string {
	return "aws_auditmanager_framework"
}

// LocalName returns the local name for [Resource].
func (aaf *Resource) LocalName() string {
	return aaf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaf *Resource) Configuration() interface{} {
	return aaf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaf *Resource) Dependencies() terra.Dependencies {
	return aaf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaf *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaf *Resource) Attributes() awsAuditmanagerFrameworkAttributes {
	return awsAuditmanagerFrameworkAttributes{ref: terra.ReferenceResource(aaf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaf *Resource) ImportState(state io.Reader) error {
	aaf.state = &awsAuditmanagerFrameworkState{}
	if err := json.NewDecoder(state).Decode(aaf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaf.Type(), aaf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaf *Resource) State() (*awsAuditmanagerFrameworkState, bool) {
	return aaf.state, aaf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaf *Resource) StateMust() *awsAuditmanagerFrameworkState {
	if aaf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaf.Type(), aaf.LocalName()))
	}
	return aaf.state
}

// Args contains the configurations for aws_auditmanager_framework.
type Args struct {
	// ComplianceType: string, optional
	ComplianceType terra.StringValue `hcl:"compliance_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ControlSets: min=0
	ControlSets []ControlSets `hcl:"control_sets,block" validate:"min=0"`
}

type awsAuditmanagerFrameworkAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_auditmanager_framework.
func (aaf awsAuditmanagerFrameworkAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("arn"))
}

// ComplianceType returns a reference to field compliance_type of aws_auditmanager_framework.
func (aaf awsAuditmanagerFrameworkAttributes) ComplianceType() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("compliance_type"))
}

// Description returns a reference to field description of aws_auditmanager_framework.
func (aaf awsAuditmanagerFrameworkAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("description"))
}

// FrameworkType returns a reference to field framework_type of aws_auditmanager_framework.
func (aaf awsAuditmanagerFrameworkAttributes) FrameworkType() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("framework_type"))
}

// Id returns a reference to field id of aws_auditmanager_framework.
func (aaf awsAuditmanagerFrameworkAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("id"))
}

// Name returns a reference to field name of aws_auditmanager_framework.
func (aaf awsAuditmanagerFrameworkAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_auditmanager_framework.
func (aaf awsAuditmanagerFrameworkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaf.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_auditmanager_framework.
func (aaf awsAuditmanagerFrameworkAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaf.ref.Append("tags_all"))
}

func (aaf awsAuditmanagerFrameworkAttributes) ControlSets() terra.SetValue[ControlSetsAttributes] {
	return terra.ReferenceAsSet[ControlSetsAttributes](aaf.ref.Append("control_sets"))
}

type awsAuditmanagerFrameworkState struct {
	Arn            string             `json:"arn"`
	ComplianceType string             `json:"compliance_type"`
	Description    string             `json:"description"`
	FrameworkType  string             `json:"framework_type"`
	Id             string             `json:"id"`
	Name           string             `json:"name"`
	Tags           map[string]string  `json:"tags"`
	TagsAll        map[string]string  `json:"tags_all"`
	ControlSets    []ControlSetsState `json:"control_sets"`
}
