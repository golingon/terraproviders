// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_resourceexplorer2_view

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_resourceexplorer2_view.
type Resource struct {
	Name      string
	Args      Args
	state     *awsResourceexplorer2ViewState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arv *Resource) Type() string {
	return "aws_resourceexplorer2_view"
}

// LocalName returns the local name for [Resource].
func (arv *Resource) LocalName() string {
	return arv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arv *Resource) Configuration() interface{} {
	return arv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arv *Resource) Dependencies() terra.Dependencies {
	return arv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arv *Resource) LifecycleManagement() *terra.Lifecycle {
	return arv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arv *Resource) Attributes() awsResourceexplorer2ViewAttributes {
	return awsResourceexplorer2ViewAttributes{ref: terra.ReferenceResource(arv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arv *Resource) ImportState(state io.Reader) error {
	arv.state = &awsResourceexplorer2ViewState{}
	if err := json.NewDecoder(state).Decode(arv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arv.Type(), arv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arv *Resource) State() (*awsResourceexplorer2ViewState, bool) {
	return arv.state, arv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arv *Resource) StateMust() *awsResourceexplorer2ViewState {
	if arv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arv.Type(), arv.LocalName()))
	}
	return arv.state
}

// Args contains the configurations for aws_resourceexplorer2_view.
type Args struct {
	// DefaultView: bool, optional
	DefaultView terra.BoolValue `hcl:"default_view,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filters: min=0
	Filters []Filters `hcl:"filters,block" validate:"min=0"`
	// IncludedProperty: min=0
	IncludedProperty []IncludedProperty `hcl:"included_property,block" validate:"min=0"`
}

type awsResourceexplorer2ViewAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_resourceexplorer2_view.
func (arv awsResourceexplorer2ViewAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arv.ref.Append("arn"))
}

// DefaultView returns a reference to field default_view of aws_resourceexplorer2_view.
func (arv awsResourceexplorer2ViewAttributes) DefaultView() terra.BoolValue {
	return terra.ReferenceAsBool(arv.ref.Append("default_view"))
}

// Id returns a reference to field id of aws_resourceexplorer2_view.
func (arv awsResourceexplorer2ViewAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arv.ref.Append("id"))
}

// Name returns a reference to field name of aws_resourceexplorer2_view.
func (arv awsResourceexplorer2ViewAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arv.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_resourceexplorer2_view.
func (arv awsResourceexplorer2ViewAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arv.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_resourceexplorer2_view.
func (arv awsResourceexplorer2ViewAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arv.ref.Append("tags_all"))
}

func (arv awsResourceexplorer2ViewAttributes) Filters() terra.ListValue[FiltersAttributes] {
	return terra.ReferenceAsList[FiltersAttributes](arv.ref.Append("filters"))
}

func (arv awsResourceexplorer2ViewAttributes) IncludedProperty() terra.ListValue[IncludedPropertyAttributes] {
	return terra.ReferenceAsList[IncludedPropertyAttributes](arv.ref.Append("included_property"))
}

type awsResourceexplorer2ViewState struct {
	Arn              string                  `json:"arn"`
	DefaultView      bool                    `json:"default_view"`
	Id               string                  `json:"id"`
	Name             string                  `json:"name"`
	Tags             map[string]string       `json:"tags"`
	TagsAll          map[string]string       `json:"tags_all"`
	Filters          []FiltersState          `json:"filters"`
	IncludedProperty []IncludedPropertyState `json:"included_property"`
}
