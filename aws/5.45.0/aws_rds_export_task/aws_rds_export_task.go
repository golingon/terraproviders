// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_rds_export_task

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_rds_export_task.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRdsExportTaskState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aret *Resource) Type() string {
	return "aws_rds_export_task"
}

// LocalName returns the local name for [Resource].
func (aret *Resource) LocalName() string {
	return aret.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aret *Resource) Configuration() interface{} {
	return aret.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aret *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aret)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aret *Resource) Dependencies() terra.Dependencies {
	return aret.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aret *Resource) LifecycleManagement() *terra.Lifecycle {
	return aret.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aret *Resource) Attributes() awsRdsExportTaskAttributes {
	return awsRdsExportTaskAttributes{ref: terra.ReferenceResource(aret)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aret *Resource) ImportState(state io.Reader) error {
	aret.state = &awsRdsExportTaskState{}
	if err := json.NewDecoder(state).Decode(aret.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aret.Type(), aret.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aret *Resource) State() (*awsRdsExportTaskState, bool) {
	return aret.state, aret.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aret *Resource) StateMust() *awsRdsExportTaskState {
	if aret.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aret.Type(), aret.LocalName()))
	}
	return aret.state
}

// Args contains the configurations for aws_rds_export_task.
type Args struct {
	// ExportOnly: list of string, optional
	ExportOnly terra.ListValue[terra.StringValue] `hcl:"export_only,attr"`
	// ExportTaskIdentifier: string, required
	ExportTaskIdentifier terra.StringValue `hcl:"export_task_identifier,attr" validate:"required"`
	// IamRoleArn: string, required
	IamRoleArn terra.StringValue `hcl:"iam_role_arn,attr" validate:"required"`
	// KmsKeyId: string, required
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr" validate:"required"`
	// S3BucketName: string, required
	S3BucketName terra.StringValue `hcl:"s3_bucket_name,attr" validate:"required"`
	// S3Prefix: string, optional
	S3Prefix terra.StringValue `hcl:"s3_prefix,attr"`
	// SourceArn: string, required
	SourceArn terra.StringValue `hcl:"source_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRdsExportTaskAttributes struct {
	ref terra.Reference
}

// ExportOnly returns a reference to field export_only of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) ExportOnly() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aret.ref.Append("export_only"))
}

// ExportTaskIdentifier returns a reference to field export_task_identifier of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) ExportTaskIdentifier() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("export_task_identifier"))
}

// FailureCause returns a reference to field failure_cause of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) FailureCause() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("failure_cause"))
}

// IamRoleArn returns a reference to field iam_role_arn of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) IamRoleArn() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("iam_role_arn"))
}

// Id returns a reference to field id of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("kms_key_id"))
}

// PercentProgress returns a reference to field percent_progress of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) PercentProgress() terra.NumberValue {
	return terra.ReferenceAsNumber(aret.ref.Append("percent_progress"))
}

// S3BucketName returns a reference to field s3_bucket_name of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) S3BucketName() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("s3_bucket_name"))
}

// S3Prefix returns a reference to field s3_prefix of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) S3Prefix() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("s3_prefix"))
}

// SnapshotTime returns a reference to field snapshot_time of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) SnapshotTime() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("snapshot_time"))
}

// SourceArn returns a reference to field source_arn of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) SourceArn() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("source_arn"))
}

// SourceType returns a reference to field source_type of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) SourceType() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("source_type"))
}

// Status returns a reference to field status of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("status"))
}

// TaskEndTime returns a reference to field task_end_time of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) TaskEndTime() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("task_end_time"))
}

// TaskStartTime returns a reference to field task_start_time of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) TaskStartTime() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("task_start_time"))
}

// WarningMessage returns a reference to field warning_message of aws_rds_export_task.
func (aret awsRdsExportTaskAttributes) WarningMessage() terra.StringValue {
	return terra.ReferenceAsString(aret.ref.Append("warning_message"))
}

func (aret awsRdsExportTaskAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aret.ref.Append("timeouts"))
}

type awsRdsExportTaskState struct {
	ExportOnly           []string       `json:"export_only"`
	ExportTaskIdentifier string         `json:"export_task_identifier"`
	FailureCause         string         `json:"failure_cause"`
	IamRoleArn           string         `json:"iam_role_arn"`
	Id                   string         `json:"id"`
	KmsKeyId             string         `json:"kms_key_id"`
	PercentProgress      float64        `json:"percent_progress"`
	S3BucketName         string         `json:"s3_bucket_name"`
	S3Prefix             string         `json:"s3_prefix"`
	SnapshotTime         string         `json:"snapshot_time"`
	SourceArn            string         `json:"source_arn"`
	SourceType           string         `json:"source_type"`
	Status               string         `json:"status"`
	TaskEndTime          string         `json:"task_end_time"`
	TaskStartTime        string         `json:"task_start_time"`
	WarningMessage       string         `json:"warning_message"`
	Timeouts             *TimeoutsState `json:"timeouts"`
}
