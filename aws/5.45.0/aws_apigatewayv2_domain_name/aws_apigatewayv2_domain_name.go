// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_apigatewayv2_domain_name

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_apigatewayv2_domain_name.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApigatewayv2DomainNameState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aadn *Resource) Type() string {
	return "aws_apigatewayv2_domain_name"
}

// LocalName returns the local name for [Resource].
func (aadn *Resource) LocalName() string {
	return aadn.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aadn *Resource) Configuration() interface{} {
	return aadn.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aadn *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aadn)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aadn *Resource) Dependencies() terra.Dependencies {
	return aadn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aadn *Resource) LifecycleManagement() *terra.Lifecycle {
	return aadn.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aadn *Resource) Attributes() awsApigatewayv2DomainNameAttributes {
	return awsApigatewayv2DomainNameAttributes{ref: terra.ReferenceResource(aadn)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aadn *Resource) ImportState(state io.Reader) error {
	aadn.state = &awsApigatewayv2DomainNameState{}
	if err := json.NewDecoder(state).Decode(aadn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aadn.Type(), aadn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aadn *Resource) State() (*awsApigatewayv2DomainNameState, bool) {
	return aadn.state, aadn.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aadn *Resource) StateMust() *awsApigatewayv2DomainNameState {
	if aadn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aadn.Type(), aadn.LocalName()))
	}
	return aadn.state
}

// Args contains the configurations for aws_apigatewayv2_domain_name.
type Args struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DomainNameConfiguration: required
	DomainNameConfiguration *DomainNameConfiguration `hcl:"domain_name_configuration,block" validate:"required"`
	// MutualTlsAuthentication: optional
	MutualTlsAuthentication *MutualTlsAuthentication `hcl:"mutual_tls_authentication,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsApigatewayv2DomainNameAttributes struct {
	ref terra.Reference
}

// ApiMappingSelectionExpression returns a reference to field api_mapping_selection_expression of aws_apigatewayv2_domain_name.
func (aadn awsApigatewayv2DomainNameAttributes) ApiMappingSelectionExpression() terra.StringValue {
	return terra.ReferenceAsString(aadn.ref.Append("api_mapping_selection_expression"))
}

// Arn returns a reference to field arn of aws_apigatewayv2_domain_name.
func (aadn awsApigatewayv2DomainNameAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aadn.ref.Append("arn"))
}

// DomainName returns a reference to field domain_name of aws_apigatewayv2_domain_name.
func (aadn awsApigatewayv2DomainNameAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(aadn.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_apigatewayv2_domain_name.
func (aadn awsApigatewayv2DomainNameAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aadn.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_apigatewayv2_domain_name.
func (aadn awsApigatewayv2DomainNameAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aadn.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_apigatewayv2_domain_name.
func (aadn awsApigatewayv2DomainNameAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aadn.ref.Append("tags_all"))
}

func (aadn awsApigatewayv2DomainNameAttributes) DomainNameConfiguration() terra.ListValue[DomainNameConfigurationAttributes] {
	return terra.ReferenceAsList[DomainNameConfigurationAttributes](aadn.ref.Append("domain_name_configuration"))
}

func (aadn awsApigatewayv2DomainNameAttributes) MutualTlsAuthentication() terra.ListValue[MutualTlsAuthenticationAttributes] {
	return terra.ReferenceAsList[MutualTlsAuthenticationAttributes](aadn.ref.Append("mutual_tls_authentication"))
}

func (aadn awsApigatewayv2DomainNameAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aadn.ref.Append("timeouts"))
}

type awsApigatewayv2DomainNameState struct {
	ApiMappingSelectionExpression string                         `json:"api_mapping_selection_expression"`
	Arn                           string                         `json:"arn"`
	DomainName                    string                         `json:"domain_name"`
	Id                            string                         `json:"id"`
	Tags                          map[string]string              `json:"tags"`
	TagsAll                       map[string]string              `json:"tags_all"`
	DomainNameConfiguration       []DomainNameConfigurationState `json:"domain_name_configuration"`
	MutualTlsAuthentication       []MutualTlsAuthenticationState `json:"mutual_tls_authentication"`
	Timeouts                      *TimeoutsState                 `json:"timeouts"`
}
