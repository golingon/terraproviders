// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkmanager_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_networkmanager_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkmanagerConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anc *Resource) Type() string {
	return "aws_networkmanager_connection"
}

// LocalName returns the local name for [Resource].
func (anc *Resource) LocalName() string {
	return anc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anc *Resource) Configuration() interface{} {
	return anc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anc *Resource) Dependencies() terra.Dependencies {
	return anc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anc *Resource) LifecycleManagement() *terra.Lifecycle {
	return anc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anc *Resource) Attributes() awsNetworkmanagerConnectionAttributes {
	return awsNetworkmanagerConnectionAttributes{ref: terra.ReferenceResource(anc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anc *Resource) ImportState(state io.Reader) error {
	anc.state = &awsNetworkmanagerConnectionState{}
	if err := json.NewDecoder(state).Decode(anc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anc.Type(), anc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anc *Resource) State() (*awsNetworkmanagerConnectionState, bool) {
	return anc.state, anc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anc *Resource) StateMust() *awsNetworkmanagerConnectionState {
	if anc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anc.Type(), anc.LocalName()))
	}
	return anc.state
}

// Args contains the configurations for aws_networkmanager_connection.
type Args struct {
	// ConnectedDeviceId: string, required
	ConnectedDeviceId terra.StringValue `hcl:"connected_device_id,attr" validate:"required"`
	// ConnectedLinkId: string, optional
	ConnectedLinkId terra.StringValue `hcl:"connected_link_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DeviceId: string, required
	DeviceId terra.StringValue `hcl:"device_id,attr" validate:"required"`
	// GlobalNetworkId: string, required
	GlobalNetworkId terra.StringValue `hcl:"global_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkId: string, optional
	LinkId terra.StringValue `hcl:"link_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsNetworkmanagerConnectionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_networkmanager_connection.
func (anc awsNetworkmanagerConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("arn"))
}

// ConnectedDeviceId returns a reference to field connected_device_id of aws_networkmanager_connection.
func (anc awsNetworkmanagerConnectionAttributes) ConnectedDeviceId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("connected_device_id"))
}

// ConnectedLinkId returns a reference to field connected_link_id of aws_networkmanager_connection.
func (anc awsNetworkmanagerConnectionAttributes) ConnectedLinkId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("connected_link_id"))
}

// Description returns a reference to field description of aws_networkmanager_connection.
func (anc awsNetworkmanagerConnectionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("description"))
}

// DeviceId returns a reference to field device_id of aws_networkmanager_connection.
func (anc awsNetworkmanagerConnectionAttributes) DeviceId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("device_id"))
}

// GlobalNetworkId returns a reference to field global_network_id of aws_networkmanager_connection.
func (anc awsNetworkmanagerConnectionAttributes) GlobalNetworkId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("global_network_id"))
}

// Id returns a reference to field id of aws_networkmanager_connection.
func (anc awsNetworkmanagerConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("id"))
}

// LinkId returns a reference to field link_id of aws_networkmanager_connection.
func (anc awsNetworkmanagerConnectionAttributes) LinkId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("link_id"))
}

// Tags returns a reference to field tags of aws_networkmanager_connection.
func (anc awsNetworkmanagerConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](anc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_networkmanager_connection.
func (anc awsNetworkmanagerConnectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](anc.ref.Append("tags_all"))
}

func (anc awsNetworkmanagerConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](anc.ref.Append("timeouts"))
}

type awsNetworkmanagerConnectionState struct {
	Arn               string            `json:"arn"`
	ConnectedDeviceId string            `json:"connected_device_id"`
	ConnectedLinkId   string            `json:"connected_link_id"`
	Description       string            `json:"description"`
	DeviceId          string            `json:"device_id"`
	GlobalNetworkId   string            `json:"global_network_id"`
	Id                string            `json:"id"`
	LinkId            string            `json:"link_id"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
