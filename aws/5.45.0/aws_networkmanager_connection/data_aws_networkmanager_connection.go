// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkmanager_connection

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_networkmanager_connection.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (anc *DataSource) DataSource() string {
	return "aws_networkmanager_connection"
}

// LocalName returns the local name for [DataSource].
func (anc *DataSource) LocalName() string {
	return anc.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (anc *DataSource) Configuration() interface{} {
	return anc.Args
}

// Attributes returns the attributes for [DataSource].
func (anc *DataSource) Attributes() dataAwsNetworkmanagerConnectionAttributes {
	return dataAwsNetworkmanagerConnectionAttributes{ref: terra.ReferenceDataSource(anc)}
}

// DataArgs contains the configurations for aws_networkmanager_connection.
type DataArgs struct {
	// ConnectionId: string, required
	ConnectionId terra.StringValue `hcl:"connection_id,attr" validate:"required"`
	// GlobalNetworkId: string, required
	GlobalNetworkId terra.StringValue `hcl:"global_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type dataAwsNetworkmanagerConnectionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_networkmanager_connection.
func (anc dataAwsNetworkmanagerConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("arn"))
}

// ConnectedDeviceId returns a reference to field connected_device_id of aws_networkmanager_connection.
func (anc dataAwsNetworkmanagerConnectionAttributes) ConnectedDeviceId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("connected_device_id"))
}

// ConnectedLinkId returns a reference to field connected_link_id of aws_networkmanager_connection.
func (anc dataAwsNetworkmanagerConnectionAttributes) ConnectedLinkId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("connected_link_id"))
}

// ConnectionId returns a reference to field connection_id of aws_networkmanager_connection.
func (anc dataAwsNetworkmanagerConnectionAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("connection_id"))
}

// Description returns a reference to field description of aws_networkmanager_connection.
func (anc dataAwsNetworkmanagerConnectionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("description"))
}

// DeviceId returns a reference to field device_id of aws_networkmanager_connection.
func (anc dataAwsNetworkmanagerConnectionAttributes) DeviceId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("device_id"))
}

// GlobalNetworkId returns a reference to field global_network_id of aws_networkmanager_connection.
func (anc dataAwsNetworkmanagerConnectionAttributes) GlobalNetworkId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("global_network_id"))
}

// Id returns a reference to field id of aws_networkmanager_connection.
func (anc dataAwsNetworkmanagerConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("id"))
}

// LinkId returns a reference to field link_id of aws_networkmanager_connection.
func (anc dataAwsNetworkmanagerConnectionAttributes) LinkId() terra.StringValue {
	return terra.ReferenceAsString(anc.ref.Append("link_id"))
}

// Tags returns a reference to field tags of aws_networkmanager_connection.
func (anc dataAwsNetworkmanagerConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](anc.ref.Append("tags"))
}
