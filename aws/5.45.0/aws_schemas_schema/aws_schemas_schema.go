// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_schemas_schema

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_schemas_schema.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSchemasSchemaState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ass *Resource) Type() string {
	return "aws_schemas_schema"
}

// LocalName returns the local name for [Resource].
func (ass *Resource) LocalName() string {
	return ass.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ass *Resource) Configuration() interface{} {
	return ass.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ass *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ass)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ass *Resource) Dependencies() terra.Dependencies {
	return ass.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ass *Resource) LifecycleManagement() *terra.Lifecycle {
	return ass.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ass *Resource) Attributes() awsSchemasSchemaAttributes {
	return awsSchemasSchemaAttributes{ref: terra.ReferenceResource(ass)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ass *Resource) ImportState(state io.Reader) error {
	ass.state = &awsSchemasSchemaState{}
	if err := json.NewDecoder(state).Decode(ass.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ass.Type(), ass.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ass *Resource) State() (*awsSchemasSchemaState, bool) {
	return ass.state, ass.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ass *Resource) StateMust() *awsSchemasSchemaState {
	if ass.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ass.Type(), ass.LocalName()))
	}
	return ass.state
}

// Args contains the configurations for aws_schemas_schema.
type Args struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RegistryName: string, required
	RegistryName terra.StringValue `hcl:"registry_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type awsSchemasSchemaAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_schemas_schema.
func (ass awsSchemasSchemaAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("arn"))
}

// Content returns a reference to field content of aws_schemas_schema.
func (ass awsSchemasSchemaAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("content"))
}

// Description returns a reference to field description of aws_schemas_schema.
func (ass awsSchemasSchemaAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("description"))
}

// Id returns a reference to field id of aws_schemas_schema.
func (ass awsSchemasSchemaAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("id"))
}

// LastModified returns a reference to field last_modified of aws_schemas_schema.
func (ass awsSchemasSchemaAttributes) LastModified() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("last_modified"))
}

// Name returns a reference to field name of aws_schemas_schema.
func (ass awsSchemasSchemaAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("name"))
}

// RegistryName returns a reference to field registry_name of aws_schemas_schema.
func (ass awsSchemasSchemaAttributes) RegistryName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("registry_name"))
}

// Tags returns a reference to field tags of aws_schemas_schema.
func (ass awsSchemasSchemaAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ass.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_schemas_schema.
func (ass awsSchemasSchemaAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ass.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_schemas_schema.
func (ass awsSchemasSchemaAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("type"))
}

// Version returns a reference to field version of aws_schemas_schema.
func (ass awsSchemasSchemaAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("version"))
}

// VersionCreatedDate returns a reference to field version_created_date of aws_schemas_schema.
func (ass awsSchemasSchemaAttributes) VersionCreatedDate() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("version_created_date"))
}

type awsSchemasSchemaState struct {
	Arn                string            `json:"arn"`
	Content            string            `json:"content"`
	Description        string            `json:"description"`
	Id                 string            `json:"id"`
	LastModified       string            `json:"last_modified"`
	Name               string            `json:"name"`
	RegistryName       string            `json:"registry_name"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
	Type               string            `json:"type"`
	Version            string            `json:"version"`
	VersionCreatedDate string            `json:"version_created_date"`
}
