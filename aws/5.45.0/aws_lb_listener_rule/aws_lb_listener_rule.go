// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lb_listener_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lb_listener_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLbListenerRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (allr *Resource) Type() string {
	return "aws_lb_listener_rule"
}

// LocalName returns the local name for [Resource].
func (allr *Resource) LocalName() string {
	return allr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (allr *Resource) Configuration() interface{} {
	return allr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (allr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(allr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (allr *Resource) Dependencies() terra.Dependencies {
	return allr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (allr *Resource) LifecycleManagement() *terra.Lifecycle {
	return allr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (allr *Resource) Attributes() awsLbListenerRuleAttributes {
	return awsLbListenerRuleAttributes{ref: terra.ReferenceResource(allr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (allr *Resource) ImportState(state io.Reader) error {
	allr.state = &awsLbListenerRuleState{}
	if err := json.NewDecoder(state).Decode(allr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", allr.Type(), allr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (allr *Resource) State() (*awsLbListenerRuleState, bool) {
	return allr.state, allr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (allr *Resource) StateMust() *awsLbListenerRuleState {
	if allr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", allr.Type(), allr.LocalName()))
	}
	return allr.state
}

// Args contains the configurations for aws_lb_listener_rule.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListenerArn: string, required
	ListenerArn terra.StringValue `hcl:"listener_arn,attr" validate:"required"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Action: min=1
	Action []Action `hcl:"action,block" validate:"min=1"`
	// Condition: min=1
	Condition []Condition `hcl:"condition,block" validate:"min=1"`
}

type awsLbListenerRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_lb_listener_rule.
func (allr awsLbListenerRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(allr.ref.Append("arn"))
}

// Id returns a reference to field id of aws_lb_listener_rule.
func (allr awsLbListenerRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(allr.ref.Append("id"))
}

// ListenerArn returns a reference to field listener_arn of aws_lb_listener_rule.
func (allr awsLbListenerRuleAttributes) ListenerArn() terra.StringValue {
	return terra.ReferenceAsString(allr.ref.Append("listener_arn"))
}

// Priority returns a reference to field priority of aws_lb_listener_rule.
func (allr awsLbListenerRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(allr.ref.Append("priority"))
}

// Tags returns a reference to field tags of aws_lb_listener_rule.
func (allr awsLbListenerRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](allr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_lb_listener_rule.
func (allr awsLbListenerRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](allr.ref.Append("tags_all"))
}

func (allr awsLbListenerRuleAttributes) Action() terra.ListValue[ActionAttributes] {
	return terra.ReferenceAsList[ActionAttributes](allr.ref.Append("action"))
}

func (allr awsLbListenerRuleAttributes) Condition() terra.SetValue[ConditionAttributes] {
	return terra.ReferenceAsSet[ConditionAttributes](allr.ref.Append("condition"))
}

type awsLbListenerRuleState struct {
	Arn         string            `json:"arn"`
	Id          string            `json:"id"`
	ListenerArn string            `json:"listener_arn"`
	Priority    float64           `json:"priority"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	Action      []ActionState     `json:"action"`
	Condition   []ConditionState  `json:"condition"`
}
