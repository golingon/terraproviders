// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_catalog_table

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glue_catalog_table.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlueCatalogTableState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agct *Resource) Type() string {
	return "aws_glue_catalog_table"
}

// LocalName returns the local name for [Resource].
func (agct *Resource) LocalName() string {
	return agct.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agct *Resource) Configuration() interface{} {
	return agct.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agct *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agct)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agct *Resource) Dependencies() terra.Dependencies {
	return agct.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agct *Resource) LifecycleManagement() *terra.Lifecycle {
	return agct.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agct *Resource) Attributes() awsGlueCatalogTableAttributes {
	return awsGlueCatalogTableAttributes{ref: terra.ReferenceResource(agct)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agct *Resource) ImportState(state io.Reader) error {
	agct.state = &awsGlueCatalogTableState{}
	if err := json.NewDecoder(state).Decode(agct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agct.Type(), agct.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agct *Resource) State() (*awsGlueCatalogTableState, bool) {
	return agct.state, agct.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agct *Resource) StateMust() *awsGlueCatalogTableState {
	if agct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agct.Type(), agct.LocalName()))
	}
	return agct.state
}

// Args contains the configurations for aws_glue_catalog_table.
type Args struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Owner: string, optional
	Owner terra.StringValue `hcl:"owner,attr"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Retention: number, optional
	Retention terra.NumberValue `hcl:"retention,attr"`
	// TableType: string, optional
	TableType terra.StringValue `hcl:"table_type,attr"`
	// ViewExpandedText: string, optional
	ViewExpandedText terra.StringValue `hcl:"view_expanded_text,attr"`
	// ViewOriginalText: string, optional
	ViewOriginalText terra.StringValue `hcl:"view_original_text,attr"`
	// OpenTableFormatInput: optional
	OpenTableFormatInput *OpenTableFormatInput `hcl:"open_table_format_input,block"`
	// PartitionIndex: min=0,max=3
	PartitionIndex []PartitionIndex `hcl:"partition_index,block" validate:"min=0,max=3"`
	// PartitionKeys: min=0
	PartitionKeys []PartitionKeys `hcl:"partition_keys,block" validate:"min=0"`
	// StorageDescriptor: optional
	StorageDescriptor *StorageDescriptor `hcl:"storage_descriptor,block"`
	// TargetTable: optional
	TargetTable *TargetTable `hcl:"target_table,block"`
}

type awsGlueCatalogTableAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_glue_catalog_table.
func (agct awsGlueCatalogTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("arn"))
}

// CatalogId returns a reference to field catalog_id of aws_glue_catalog_table.
func (agct awsGlueCatalogTableAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("catalog_id"))
}

// DatabaseName returns a reference to field database_name of aws_glue_catalog_table.
func (agct awsGlueCatalogTableAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("database_name"))
}

// Description returns a reference to field description of aws_glue_catalog_table.
func (agct awsGlueCatalogTableAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("description"))
}

// Id returns a reference to field id of aws_glue_catalog_table.
func (agct awsGlueCatalogTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("id"))
}

// Name returns a reference to field name of aws_glue_catalog_table.
func (agct awsGlueCatalogTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("name"))
}

// Owner returns a reference to field owner of aws_glue_catalog_table.
func (agct awsGlueCatalogTableAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("owner"))
}

// Parameters returns a reference to field parameters of aws_glue_catalog_table.
func (agct awsGlueCatalogTableAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agct.ref.Append("parameters"))
}

// Retention returns a reference to field retention of aws_glue_catalog_table.
func (agct awsGlueCatalogTableAttributes) Retention() terra.NumberValue {
	return terra.ReferenceAsNumber(agct.ref.Append("retention"))
}

// TableType returns a reference to field table_type of aws_glue_catalog_table.
func (agct awsGlueCatalogTableAttributes) TableType() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("table_type"))
}

// ViewExpandedText returns a reference to field view_expanded_text of aws_glue_catalog_table.
func (agct awsGlueCatalogTableAttributes) ViewExpandedText() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("view_expanded_text"))
}

// ViewOriginalText returns a reference to field view_original_text of aws_glue_catalog_table.
func (agct awsGlueCatalogTableAttributes) ViewOriginalText() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("view_original_text"))
}

func (agct awsGlueCatalogTableAttributes) OpenTableFormatInput() terra.ListValue[OpenTableFormatInputAttributes] {
	return terra.ReferenceAsList[OpenTableFormatInputAttributes](agct.ref.Append("open_table_format_input"))
}

func (agct awsGlueCatalogTableAttributes) PartitionIndex() terra.ListValue[PartitionIndexAttributes] {
	return terra.ReferenceAsList[PartitionIndexAttributes](agct.ref.Append("partition_index"))
}

func (agct awsGlueCatalogTableAttributes) PartitionKeys() terra.ListValue[PartitionKeysAttributes] {
	return terra.ReferenceAsList[PartitionKeysAttributes](agct.ref.Append("partition_keys"))
}

func (agct awsGlueCatalogTableAttributes) StorageDescriptor() terra.ListValue[StorageDescriptorAttributes] {
	return terra.ReferenceAsList[StorageDescriptorAttributes](agct.ref.Append("storage_descriptor"))
}

func (agct awsGlueCatalogTableAttributes) TargetTable() terra.ListValue[TargetTableAttributes] {
	return terra.ReferenceAsList[TargetTableAttributes](agct.ref.Append("target_table"))
}

type awsGlueCatalogTableState struct {
	Arn                  string                      `json:"arn"`
	CatalogId            string                      `json:"catalog_id"`
	DatabaseName         string                      `json:"database_name"`
	Description          string                      `json:"description"`
	Id                   string                      `json:"id"`
	Name                 string                      `json:"name"`
	Owner                string                      `json:"owner"`
	Parameters           map[string]string           `json:"parameters"`
	Retention            float64                     `json:"retention"`
	TableType            string                      `json:"table_type"`
	ViewExpandedText     string                      `json:"view_expanded_text"`
	ViewOriginalText     string                      `json:"view_original_text"`
	OpenTableFormatInput []OpenTableFormatInputState `json:"open_table_format_input"`
	PartitionIndex       []PartitionIndexState       `json:"partition_index"`
	PartitionKeys        []PartitionKeysState        `json:"partition_keys"`
	StorageDescriptor    []StorageDescriptorState    `json:"storage_descriptor"`
	TargetTable          []TargetTableState          `json:"target_table"`
}
