// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_catalog_table

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataPartitionIndexAttributes struct {
	ref terra.Reference
}

func (pi DataPartitionIndexAttributes) InternalRef() (terra.Reference, error) {
	return pi.ref, nil
}

func (pi DataPartitionIndexAttributes) InternalWithRef(ref terra.Reference) DataPartitionIndexAttributes {
	return DataPartitionIndexAttributes{ref: ref}
}

func (pi DataPartitionIndexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pi.ref.InternalTokens()
}

func (pi DataPartitionIndexAttributes) IndexName() terra.StringValue {
	return terra.ReferenceAsString(pi.ref.Append("index_name"))
}

func (pi DataPartitionIndexAttributes) IndexStatus() terra.StringValue {
	return terra.ReferenceAsString(pi.ref.Append("index_status"))
}

func (pi DataPartitionIndexAttributes) Keys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pi.ref.Append("keys"))
}

type DataPartitionKeysAttributes struct {
	ref terra.Reference
}

func (pk DataPartitionKeysAttributes) InternalRef() (terra.Reference, error) {
	return pk.ref, nil
}

func (pk DataPartitionKeysAttributes) InternalWithRef(ref terra.Reference) DataPartitionKeysAttributes {
	return DataPartitionKeysAttributes{ref: ref}
}

func (pk DataPartitionKeysAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pk.ref.InternalTokens()
}

func (pk DataPartitionKeysAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(pk.ref.Append("comment"))
}

func (pk DataPartitionKeysAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pk.ref.Append("name"))
}

func (pk DataPartitionKeysAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pk.ref.Append("type"))
}

type DataStorageDescriptorAttributes struct {
	ref terra.Reference
}

func (sd DataStorageDescriptorAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd DataStorageDescriptorAttributes) InternalWithRef(ref terra.Reference) DataStorageDescriptorAttributes {
	return DataStorageDescriptorAttributes{ref: ref}
}

func (sd DataStorageDescriptorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd DataStorageDescriptorAttributes) BucketColumns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sd.ref.Append("bucket_columns"))
}

func (sd DataStorageDescriptorAttributes) Compressed() terra.BoolValue {
	return terra.ReferenceAsBool(sd.ref.Append("compressed"))
}

func (sd DataStorageDescriptorAttributes) InputFormat() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("input_format"))
}

func (sd DataStorageDescriptorAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("location"))
}

func (sd DataStorageDescriptorAttributes) NumberOfBuckets() terra.NumberValue {
	return terra.ReferenceAsNumber(sd.ref.Append("number_of_buckets"))
}

func (sd DataStorageDescriptorAttributes) OutputFormat() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("output_format"))
}

func (sd DataStorageDescriptorAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sd.ref.Append("parameters"))
}

func (sd DataStorageDescriptorAttributes) StoredAsSubDirectories() terra.BoolValue {
	return terra.ReferenceAsBool(sd.ref.Append("stored_as_sub_directories"))
}

func (sd DataStorageDescriptorAttributes) Columns() terra.ListValue[DataStorageDescriptorColumnsAttributes] {
	return terra.ReferenceAsList[DataStorageDescriptorColumnsAttributes](sd.ref.Append("columns"))
}

func (sd DataStorageDescriptorAttributes) SchemaReference() terra.ListValue[DataStorageDescriptorSchemaReferenceAttributes] {
	return terra.ReferenceAsList[DataStorageDescriptorSchemaReferenceAttributes](sd.ref.Append("schema_reference"))
}

func (sd DataStorageDescriptorAttributes) SerDeInfo() terra.ListValue[DataStorageDescriptorSerDeInfoAttributes] {
	return terra.ReferenceAsList[DataStorageDescriptorSerDeInfoAttributes](sd.ref.Append("ser_de_info"))
}

func (sd DataStorageDescriptorAttributes) SkewedInfo() terra.ListValue[DataStorageDescriptorSkewedInfoAttributes] {
	return terra.ReferenceAsList[DataStorageDescriptorSkewedInfoAttributes](sd.ref.Append("skewed_info"))
}

func (sd DataStorageDescriptorAttributes) SortColumns() terra.ListValue[DataStorageDescriptorSortColumnsAttributes] {
	return terra.ReferenceAsList[DataStorageDescriptorSortColumnsAttributes](sd.ref.Append("sort_columns"))
}

type DataStorageDescriptorColumnsAttributes struct {
	ref terra.Reference
}

func (c DataStorageDescriptorColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataStorageDescriptorColumnsAttributes) InternalWithRef(ref terra.Reference) DataStorageDescriptorColumnsAttributes {
	return DataStorageDescriptorColumnsAttributes{ref: ref}
}

func (c DataStorageDescriptorColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataStorageDescriptorColumnsAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("comment"))
}

func (c DataStorageDescriptorColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c DataStorageDescriptorColumnsAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("parameters"))
}

func (c DataStorageDescriptorColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type DataStorageDescriptorSchemaReferenceAttributes struct {
	ref terra.Reference
}

func (sr DataStorageDescriptorSchemaReferenceAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr DataStorageDescriptorSchemaReferenceAttributes) InternalWithRef(ref terra.Reference) DataStorageDescriptorSchemaReferenceAttributes {
	return DataStorageDescriptorSchemaReferenceAttributes{ref: ref}
}

func (sr DataStorageDescriptorSchemaReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr DataStorageDescriptorSchemaReferenceAttributes) SchemaVersionId() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("schema_version_id"))
}

func (sr DataStorageDescriptorSchemaReferenceAttributes) SchemaVersionNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(sr.ref.Append("schema_version_number"))
}

func (sr DataStorageDescriptorSchemaReferenceAttributes) SchemaId() terra.ListValue[DataStorageDescriptorSchemaReferenceSchemaIdAttributes] {
	return terra.ReferenceAsList[DataStorageDescriptorSchemaReferenceSchemaIdAttributes](sr.ref.Append("schema_id"))
}

type DataStorageDescriptorSchemaReferenceSchemaIdAttributes struct {
	ref terra.Reference
}

func (si DataStorageDescriptorSchemaReferenceSchemaIdAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si DataStorageDescriptorSchemaReferenceSchemaIdAttributes) InternalWithRef(ref terra.Reference) DataStorageDescriptorSchemaReferenceSchemaIdAttributes {
	return DataStorageDescriptorSchemaReferenceSchemaIdAttributes{ref: ref}
}

func (si DataStorageDescriptorSchemaReferenceSchemaIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si DataStorageDescriptorSchemaReferenceSchemaIdAttributes) RegistryName() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("registry_name"))
}

func (si DataStorageDescriptorSchemaReferenceSchemaIdAttributes) SchemaArn() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("schema_arn"))
}

func (si DataStorageDescriptorSchemaReferenceSchemaIdAttributes) SchemaName() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("schema_name"))
}

type DataStorageDescriptorSerDeInfoAttributes struct {
	ref terra.Reference
}

func (sdi DataStorageDescriptorSerDeInfoAttributes) InternalRef() (terra.Reference, error) {
	return sdi.ref, nil
}

func (sdi DataStorageDescriptorSerDeInfoAttributes) InternalWithRef(ref terra.Reference) DataStorageDescriptorSerDeInfoAttributes {
	return DataStorageDescriptorSerDeInfoAttributes{ref: ref}
}

func (sdi DataStorageDescriptorSerDeInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sdi.ref.InternalTokens()
}

func (sdi DataStorageDescriptorSerDeInfoAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sdi.ref.Append("name"))
}

func (sdi DataStorageDescriptorSerDeInfoAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sdi.ref.Append("parameters"))
}

func (sdi DataStorageDescriptorSerDeInfoAttributes) SerializationLibrary() terra.StringValue {
	return terra.ReferenceAsString(sdi.ref.Append("serialization_library"))
}

type DataStorageDescriptorSkewedInfoAttributes struct {
	ref terra.Reference
}

func (si DataStorageDescriptorSkewedInfoAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si DataStorageDescriptorSkewedInfoAttributes) InternalWithRef(ref terra.Reference) DataStorageDescriptorSkewedInfoAttributes {
	return DataStorageDescriptorSkewedInfoAttributes{ref: ref}
}

func (si DataStorageDescriptorSkewedInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si DataStorageDescriptorSkewedInfoAttributes) SkewedColumnNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](si.ref.Append("skewed_column_names"))
}

func (si DataStorageDescriptorSkewedInfoAttributes) SkewedColumnValueLocationMaps() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](si.ref.Append("skewed_column_value_location_maps"))
}

func (si DataStorageDescriptorSkewedInfoAttributes) SkewedColumnValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](si.ref.Append("skewed_column_values"))
}

type DataStorageDescriptorSortColumnsAttributes struct {
	ref terra.Reference
}

func (sc DataStorageDescriptorSortColumnsAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DataStorageDescriptorSortColumnsAttributes) InternalWithRef(ref terra.Reference) DataStorageDescriptorSortColumnsAttributes {
	return DataStorageDescriptorSortColumnsAttributes{ref: ref}
}

func (sc DataStorageDescriptorSortColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DataStorageDescriptorSortColumnsAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("column"))
}

func (sc DataStorageDescriptorSortColumnsAttributes) SortOrder() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("sort_order"))
}

type DataTargetTableAttributes struct {
	ref terra.Reference
}

func (tt DataTargetTableAttributes) InternalRef() (terra.Reference, error) {
	return tt.ref, nil
}

func (tt DataTargetTableAttributes) InternalWithRef(ref terra.Reference) DataTargetTableAttributes {
	return DataTargetTableAttributes{ref: ref}
}

func (tt DataTargetTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tt.ref.InternalTokens()
}

func (tt DataTargetTableAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("catalog_id"))
}

func (tt DataTargetTableAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("database_name"))
}

func (tt DataTargetTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("name"))
}

func (tt DataTargetTableAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("region"))
}

type DataPartitionIndexState struct {
	IndexName   string   `json:"index_name"`
	IndexStatus string   `json:"index_status"`
	Keys        []string `json:"keys"`
}

type DataPartitionKeysState struct {
	Comment string `json:"comment"`
	Name    string `json:"name"`
	Type    string `json:"type"`
}

type DataStorageDescriptorState struct {
	BucketColumns          []string                                    `json:"bucket_columns"`
	Compressed             bool                                        `json:"compressed"`
	InputFormat            string                                      `json:"input_format"`
	Location               string                                      `json:"location"`
	NumberOfBuckets        float64                                     `json:"number_of_buckets"`
	OutputFormat           string                                      `json:"output_format"`
	Parameters             map[string]string                           `json:"parameters"`
	StoredAsSubDirectories bool                                        `json:"stored_as_sub_directories"`
	Columns                []DataStorageDescriptorColumnsState         `json:"columns"`
	SchemaReference        []DataStorageDescriptorSchemaReferenceState `json:"schema_reference"`
	SerDeInfo              []DataStorageDescriptorSerDeInfoState       `json:"ser_de_info"`
	SkewedInfo             []DataStorageDescriptorSkewedInfoState      `json:"skewed_info"`
	SortColumns            []DataStorageDescriptorSortColumnsState     `json:"sort_columns"`
}

type DataStorageDescriptorColumnsState struct {
	Comment    string            `json:"comment"`
	Name       string            `json:"name"`
	Parameters map[string]string `json:"parameters"`
	Type       string            `json:"type"`
}

type DataStorageDescriptorSchemaReferenceState struct {
	SchemaVersionId     string                                              `json:"schema_version_id"`
	SchemaVersionNumber float64                                             `json:"schema_version_number"`
	SchemaId            []DataStorageDescriptorSchemaReferenceSchemaIdState `json:"schema_id"`
}

type DataStorageDescriptorSchemaReferenceSchemaIdState struct {
	RegistryName string `json:"registry_name"`
	SchemaArn    string `json:"schema_arn"`
	SchemaName   string `json:"schema_name"`
}

type DataStorageDescriptorSerDeInfoState struct {
	Name                 string            `json:"name"`
	Parameters           map[string]string `json:"parameters"`
	SerializationLibrary string            `json:"serialization_library"`
}

type DataStorageDescriptorSkewedInfoState struct {
	SkewedColumnNames             []string          `json:"skewed_column_names"`
	SkewedColumnValueLocationMaps map[string]string `json:"skewed_column_value_location_maps"`
	SkewedColumnValues            []string          `json:"skewed_column_values"`
}

type DataStorageDescriptorSortColumnsState struct {
	Column    string  `json:"column"`
	SortOrder float64 `json:"sort_order"`
}

type DataTargetTableState struct {
	CatalogId    string `json:"catalog_id"`
	DatabaseName string `json:"database_name"`
	Name         string `json:"name"`
	Region       string `json:"region"`
}
