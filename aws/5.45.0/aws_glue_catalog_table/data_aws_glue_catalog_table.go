// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_catalog_table

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_glue_catalog_table.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (agct *DataSource) DataSource() string {
	return "aws_glue_catalog_table"
}

// LocalName returns the local name for [DataSource].
func (agct *DataSource) LocalName() string {
	return agct.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (agct *DataSource) Configuration() interface{} {
	return agct.Args
}

// Attributes returns the attributes for [DataSource].
func (agct *DataSource) Attributes() dataAwsGlueCatalogTableAttributes {
	return dataAwsGlueCatalogTableAttributes{ref: terra.ReferenceDataSource(agct)}
}

// DataArgs contains the configurations for aws_glue_catalog_table.
type DataArgs struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// QueryAsOfTime: string, optional
	QueryAsOfTime terra.StringValue `hcl:"query_as_of_time,attr"`
	// TransactionId: number, optional
	TransactionId terra.NumberValue `hcl:"transaction_id,attr"`
}

type dataAwsGlueCatalogTableAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("arn"))
}

// CatalogId returns a reference to field catalog_id of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("catalog_id"))
}

// DatabaseName returns a reference to field database_name of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("database_name"))
}

// Description returns a reference to field description of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("description"))
}

// Id returns a reference to field id of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("id"))
}

// Name returns a reference to field name of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("name"))
}

// Owner returns a reference to field owner of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("owner"))
}

// Parameters returns a reference to field parameters of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agct.ref.Append("parameters"))
}

// QueryAsOfTime returns a reference to field query_as_of_time of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) QueryAsOfTime() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("query_as_of_time"))
}

// Retention returns a reference to field retention of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) Retention() terra.NumberValue {
	return terra.ReferenceAsNumber(agct.ref.Append("retention"))
}

// TableType returns a reference to field table_type of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) TableType() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("table_type"))
}

// TransactionId returns a reference to field transaction_id of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) TransactionId() terra.NumberValue {
	return terra.ReferenceAsNumber(agct.ref.Append("transaction_id"))
}

// ViewExpandedText returns a reference to field view_expanded_text of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) ViewExpandedText() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("view_expanded_text"))
}

// ViewOriginalText returns a reference to field view_original_text of aws_glue_catalog_table.
func (agct dataAwsGlueCatalogTableAttributes) ViewOriginalText() terra.StringValue {
	return terra.ReferenceAsString(agct.ref.Append("view_original_text"))
}

func (agct dataAwsGlueCatalogTableAttributes) PartitionIndex() terra.ListValue[DataPartitionIndexAttributes] {
	return terra.ReferenceAsList[DataPartitionIndexAttributes](agct.ref.Append("partition_index"))
}

func (agct dataAwsGlueCatalogTableAttributes) PartitionKeys() terra.ListValue[DataPartitionKeysAttributes] {
	return terra.ReferenceAsList[DataPartitionKeysAttributes](agct.ref.Append("partition_keys"))
}

func (agct dataAwsGlueCatalogTableAttributes) StorageDescriptor() terra.ListValue[DataStorageDescriptorAttributes] {
	return terra.ReferenceAsList[DataStorageDescriptorAttributes](agct.ref.Append("storage_descriptor"))
}

func (agct dataAwsGlueCatalogTableAttributes) TargetTable() terra.ListValue[DataTargetTableAttributes] {
	return terra.ReferenceAsList[DataTargetTableAttributes](agct.ref.Append("target_table"))
}
