// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cognito_risk_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cognito_risk_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCognitoRiskConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acrc *Resource) Type() string {
	return "aws_cognito_risk_configuration"
}

// LocalName returns the local name for [Resource].
func (acrc *Resource) LocalName() string {
	return acrc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acrc *Resource) Configuration() interface{} {
	return acrc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acrc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acrc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acrc *Resource) Dependencies() terra.Dependencies {
	return acrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acrc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acrc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acrc *Resource) Attributes() awsCognitoRiskConfigurationAttributes {
	return awsCognitoRiskConfigurationAttributes{ref: terra.ReferenceResource(acrc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acrc *Resource) ImportState(state io.Reader) error {
	acrc.state = &awsCognitoRiskConfigurationState{}
	if err := json.NewDecoder(state).Decode(acrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acrc.Type(), acrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acrc *Resource) State() (*awsCognitoRiskConfigurationState, bool) {
	return acrc.state, acrc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acrc *Resource) StateMust() *awsCognitoRiskConfigurationState {
	if acrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acrc.Type(), acrc.LocalName()))
	}
	return acrc.state
}

// Args contains the configurations for aws_cognito_risk_configuration.
type Args struct {
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// UserPoolId: string, required
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
	// AccountTakeoverRiskConfiguration: optional
	AccountTakeoverRiskConfiguration *AccountTakeoverRiskConfiguration `hcl:"account_takeover_risk_configuration,block"`
	// CompromisedCredentialsRiskConfiguration: optional
	CompromisedCredentialsRiskConfiguration *CompromisedCredentialsRiskConfiguration `hcl:"compromised_credentials_risk_configuration,block"`
	// RiskExceptionConfiguration: optional
	RiskExceptionConfiguration *RiskExceptionConfiguration `hcl:"risk_exception_configuration,block"`
}

type awsCognitoRiskConfigurationAttributes struct {
	ref terra.Reference
}

// ClientId returns a reference to field client_id of aws_cognito_risk_configuration.
func (acrc awsCognitoRiskConfigurationAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(acrc.ref.Append("client_id"))
}

// Id returns a reference to field id of aws_cognito_risk_configuration.
func (acrc awsCognitoRiskConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acrc.ref.Append("id"))
}

// UserPoolId returns a reference to field user_pool_id of aws_cognito_risk_configuration.
func (acrc awsCognitoRiskConfigurationAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceAsString(acrc.ref.Append("user_pool_id"))
}

func (acrc awsCognitoRiskConfigurationAttributes) AccountTakeoverRiskConfiguration() terra.ListValue[AccountTakeoverRiskConfigurationAttributes] {
	return terra.ReferenceAsList[AccountTakeoverRiskConfigurationAttributes](acrc.ref.Append("account_takeover_risk_configuration"))
}

func (acrc awsCognitoRiskConfigurationAttributes) CompromisedCredentialsRiskConfiguration() terra.ListValue[CompromisedCredentialsRiskConfigurationAttributes] {
	return terra.ReferenceAsList[CompromisedCredentialsRiskConfigurationAttributes](acrc.ref.Append("compromised_credentials_risk_configuration"))
}

func (acrc awsCognitoRiskConfigurationAttributes) RiskExceptionConfiguration() terra.ListValue[RiskExceptionConfigurationAttributes] {
	return terra.ReferenceAsList[RiskExceptionConfigurationAttributes](acrc.ref.Append("risk_exception_configuration"))
}

type awsCognitoRiskConfigurationState struct {
	ClientId                                string                                         `json:"client_id"`
	Id                                      string                                         `json:"id"`
	UserPoolId                              string                                         `json:"user_pool_id"`
	AccountTakeoverRiskConfiguration        []AccountTakeoverRiskConfigurationState        `json:"account_takeover_risk_configuration"`
	CompromisedCredentialsRiskConfiguration []CompromisedCredentialsRiskConfigurationState `json:"compromised_credentials_risk_configuration"`
	RiskExceptionConfiguration              []RiskExceptionConfigurationState              `json:"risk_exception_configuration"`
}
