// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_monitoring_schedule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sagemaker_monitoring_schedule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSagemakerMonitoringScheduleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asms *Resource) Type() string {
	return "aws_sagemaker_monitoring_schedule"
}

// LocalName returns the local name for [Resource].
func (asms *Resource) LocalName() string {
	return asms.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asms *Resource) Configuration() interface{} {
	return asms.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asms *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asms)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asms *Resource) Dependencies() terra.Dependencies {
	return asms.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asms *Resource) LifecycleManagement() *terra.Lifecycle {
	return asms.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asms *Resource) Attributes() awsSagemakerMonitoringScheduleAttributes {
	return awsSagemakerMonitoringScheduleAttributes{ref: terra.ReferenceResource(asms)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asms *Resource) ImportState(state io.Reader) error {
	asms.state = &awsSagemakerMonitoringScheduleState{}
	if err := json.NewDecoder(state).Decode(asms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asms.Type(), asms.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asms *Resource) State() (*awsSagemakerMonitoringScheduleState, bool) {
	return asms.state, asms.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asms *Resource) StateMust() *awsSagemakerMonitoringScheduleState {
	if asms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asms.Type(), asms.LocalName()))
	}
	return asms.state
}

// Args contains the configurations for aws_sagemaker_monitoring_schedule.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// MonitoringScheduleConfig: required
	MonitoringScheduleConfig *MonitoringScheduleConfig `hcl:"monitoring_schedule_config,block" validate:"required"`
}

type awsSagemakerMonitoringScheduleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_monitoring_schedule.
func (asms awsSagemakerMonitoringScheduleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asms.ref.Append("arn"))
}

// Id returns a reference to field id of aws_sagemaker_monitoring_schedule.
func (asms awsSagemakerMonitoringScheduleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asms.ref.Append("id"))
}

// Name returns a reference to field name of aws_sagemaker_monitoring_schedule.
func (asms awsSagemakerMonitoringScheduleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asms.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_sagemaker_monitoring_schedule.
func (asms awsSagemakerMonitoringScheduleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asms.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_monitoring_schedule.
func (asms awsSagemakerMonitoringScheduleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asms.ref.Append("tags_all"))
}

func (asms awsSagemakerMonitoringScheduleAttributes) MonitoringScheduleConfig() terra.ListValue[MonitoringScheduleConfigAttributes] {
	return terra.ReferenceAsList[MonitoringScheduleConfigAttributes](asms.ref.Append("monitoring_schedule_config"))
}

type awsSagemakerMonitoringScheduleState struct {
	Arn                      string                          `json:"arn"`
	Id                       string                          `json:"id"`
	Name                     string                          `json:"name"`
	Tags                     map[string]string               `json:"tags"`
	TagsAll                  map[string]string               `json:"tags_all"`
	MonitoringScheduleConfig []MonitoringScheduleConfigState `json:"monitoring_schedule_config"`
}
