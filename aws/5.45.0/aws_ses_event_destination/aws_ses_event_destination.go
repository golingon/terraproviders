// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ses_event_destination

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ses_event_destination.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSesEventDestinationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ased *Resource) Type() string {
	return "aws_ses_event_destination"
}

// LocalName returns the local name for [Resource].
func (ased *Resource) LocalName() string {
	return ased.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ased *Resource) Configuration() interface{} {
	return ased.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ased *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ased)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ased *Resource) Dependencies() terra.Dependencies {
	return ased.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ased *Resource) LifecycleManagement() *terra.Lifecycle {
	return ased.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ased *Resource) Attributes() awsSesEventDestinationAttributes {
	return awsSesEventDestinationAttributes{ref: terra.ReferenceResource(ased)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ased *Resource) ImportState(state io.Reader) error {
	ased.state = &awsSesEventDestinationState{}
	if err := json.NewDecoder(state).Decode(ased.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ased.Type(), ased.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ased *Resource) State() (*awsSesEventDestinationState, bool) {
	return ased.state, ased.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ased *Resource) StateMust() *awsSesEventDestinationState {
	if ased.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ased.Type(), ased.LocalName()))
	}
	return ased.state
}

// Args contains the configurations for aws_ses_event_destination.
type Args struct {
	// ConfigurationSetName: string, required
	ConfigurationSetName terra.StringValue `hcl:"configuration_set_name,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MatchingTypes: set of string, required
	MatchingTypes terra.SetValue[terra.StringValue] `hcl:"matching_types,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// CloudwatchDestination: min=0
	CloudwatchDestination []CloudwatchDestination `hcl:"cloudwatch_destination,block" validate:"min=0"`
	// KinesisDestination: optional
	KinesisDestination *KinesisDestination `hcl:"kinesis_destination,block"`
	// SnsDestination: optional
	SnsDestination *SnsDestination `hcl:"sns_destination,block"`
}

type awsSesEventDestinationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ses_event_destination.
func (ased awsSesEventDestinationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ased.ref.Append("arn"))
}

// ConfigurationSetName returns a reference to field configuration_set_name of aws_ses_event_destination.
func (ased awsSesEventDestinationAttributes) ConfigurationSetName() terra.StringValue {
	return terra.ReferenceAsString(ased.ref.Append("configuration_set_name"))
}

// Enabled returns a reference to field enabled of aws_ses_event_destination.
func (ased awsSesEventDestinationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ased.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_ses_event_destination.
func (ased awsSesEventDestinationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ased.ref.Append("id"))
}

// MatchingTypes returns a reference to field matching_types of aws_ses_event_destination.
func (ased awsSesEventDestinationAttributes) MatchingTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ased.ref.Append("matching_types"))
}

// Name returns a reference to field name of aws_ses_event_destination.
func (ased awsSesEventDestinationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ased.ref.Append("name"))
}

func (ased awsSesEventDestinationAttributes) CloudwatchDestination() terra.SetValue[CloudwatchDestinationAttributes] {
	return terra.ReferenceAsSet[CloudwatchDestinationAttributes](ased.ref.Append("cloudwatch_destination"))
}

func (ased awsSesEventDestinationAttributes) KinesisDestination() terra.ListValue[KinesisDestinationAttributes] {
	return terra.ReferenceAsList[KinesisDestinationAttributes](ased.ref.Append("kinesis_destination"))
}

func (ased awsSesEventDestinationAttributes) SnsDestination() terra.ListValue[SnsDestinationAttributes] {
	return terra.ReferenceAsList[SnsDestinationAttributes](ased.ref.Append("sns_destination"))
}

type awsSesEventDestinationState struct {
	Arn                   string                       `json:"arn"`
	ConfigurationSetName  string                       `json:"configuration_set_name"`
	Enabled               bool                         `json:"enabled"`
	Id                    string                       `json:"id"`
	MatchingTypes         []string                     `json:"matching_types"`
	Name                  string                       `json:"name"`
	CloudwatchDestination []CloudwatchDestinationState `json:"cloudwatch_destination"`
	KinesisDestination    []KinesisDestinationState    `json:"kinesis_destination"`
	SnsDestination        []SnsDestinationState        `json:"sns_destination"`
}
