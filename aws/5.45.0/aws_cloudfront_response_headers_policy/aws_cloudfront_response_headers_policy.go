// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudfront_response_headers_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudfront_response_headers_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudfrontResponseHeadersPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acrhp *Resource) Type() string {
	return "aws_cloudfront_response_headers_policy"
}

// LocalName returns the local name for [Resource].
func (acrhp *Resource) LocalName() string {
	return acrhp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acrhp *Resource) Configuration() interface{} {
	return acrhp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acrhp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acrhp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acrhp *Resource) Dependencies() terra.Dependencies {
	return acrhp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acrhp *Resource) LifecycleManagement() *terra.Lifecycle {
	return acrhp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acrhp *Resource) Attributes() awsCloudfrontResponseHeadersPolicyAttributes {
	return awsCloudfrontResponseHeadersPolicyAttributes{ref: terra.ReferenceResource(acrhp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acrhp *Resource) ImportState(state io.Reader) error {
	acrhp.state = &awsCloudfrontResponseHeadersPolicyState{}
	if err := json.NewDecoder(state).Decode(acrhp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acrhp.Type(), acrhp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acrhp *Resource) State() (*awsCloudfrontResponseHeadersPolicyState, bool) {
	return acrhp.state, acrhp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acrhp *Resource) StateMust() *awsCloudfrontResponseHeadersPolicyState {
	if acrhp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acrhp.Type(), acrhp.LocalName()))
	}
	return acrhp.state
}

// Args contains the configurations for aws_cloudfront_response_headers_policy.
type Args struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// Etag: string, optional
	Etag terra.StringValue `hcl:"etag,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// CorsConfig: optional
	CorsConfig *CorsConfig `hcl:"cors_config,block"`
	// CustomHeadersConfig: optional
	CustomHeadersConfig *CustomHeadersConfig `hcl:"custom_headers_config,block"`
	// RemoveHeadersConfig: optional
	RemoveHeadersConfig *RemoveHeadersConfig `hcl:"remove_headers_config,block"`
	// SecurityHeadersConfig: optional
	SecurityHeadersConfig *SecurityHeadersConfig `hcl:"security_headers_config,block"`
	// ServerTimingHeadersConfig: optional
	ServerTimingHeadersConfig *ServerTimingHeadersConfig `hcl:"server_timing_headers_config,block"`
}

type awsCloudfrontResponseHeadersPolicyAttributes struct {
	ref terra.Reference
}

// Comment returns a reference to field comment of aws_cloudfront_response_headers_policy.
func (acrhp awsCloudfrontResponseHeadersPolicyAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(acrhp.ref.Append("comment"))
}

// Etag returns a reference to field etag of aws_cloudfront_response_headers_policy.
func (acrhp awsCloudfrontResponseHeadersPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(acrhp.ref.Append("etag"))
}

// Id returns a reference to field id of aws_cloudfront_response_headers_policy.
func (acrhp awsCloudfrontResponseHeadersPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acrhp.ref.Append("id"))
}

// Name returns a reference to field name of aws_cloudfront_response_headers_policy.
func (acrhp awsCloudfrontResponseHeadersPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acrhp.ref.Append("name"))
}

func (acrhp awsCloudfrontResponseHeadersPolicyAttributes) CorsConfig() terra.ListValue[CorsConfigAttributes] {
	return terra.ReferenceAsList[CorsConfigAttributes](acrhp.ref.Append("cors_config"))
}

func (acrhp awsCloudfrontResponseHeadersPolicyAttributes) CustomHeadersConfig() terra.ListValue[CustomHeadersConfigAttributes] {
	return terra.ReferenceAsList[CustomHeadersConfigAttributes](acrhp.ref.Append("custom_headers_config"))
}

func (acrhp awsCloudfrontResponseHeadersPolicyAttributes) RemoveHeadersConfig() terra.ListValue[RemoveHeadersConfigAttributes] {
	return terra.ReferenceAsList[RemoveHeadersConfigAttributes](acrhp.ref.Append("remove_headers_config"))
}

func (acrhp awsCloudfrontResponseHeadersPolicyAttributes) SecurityHeadersConfig() terra.ListValue[SecurityHeadersConfigAttributes] {
	return terra.ReferenceAsList[SecurityHeadersConfigAttributes](acrhp.ref.Append("security_headers_config"))
}

func (acrhp awsCloudfrontResponseHeadersPolicyAttributes) ServerTimingHeadersConfig() terra.ListValue[ServerTimingHeadersConfigAttributes] {
	return terra.ReferenceAsList[ServerTimingHeadersConfigAttributes](acrhp.ref.Append("server_timing_headers_config"))
}

type awsCloudfrontResponseHeadersPolicyState struct {
	Comment                   string                           `json:"comment"`
	Etag                      string                           `json:"etag"`
	Id                        string                           `json:"id"`
	Name                      string                           `json:"name"`
	CorsConfig                []CorsConfigState                `json:"cors_config"`
	CustomHeadersConfig       []CustomHeadersConfigState       `json:"custom_headers_config"`
	RemoveHeadersConfig       []RemoveHeadersConfigState       `json:"remove_headers_config"`
	SecurityHeadersConfig     []SecurityHeadersConfigState     `json:"security_headers_config"`
	ServerTimingHeadersConfig []ServerTimingHeadersConfigState `json:"server_timing_headers_config"`
}
