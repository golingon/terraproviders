// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_ipam_scope

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpc_ipam_scope.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpcIpamScopeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avis *Resource) Type() string {
	return "aws_vpc_ipam_scope"
}

// LocalName returns the local name for [Resource].
func (avis *Resource) LocalName() string {
	return avis.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avis *Resource) Configuration() interface{} {
	return avis.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avis *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avis)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avis *Resource) Dependencies() terra.Dependencies {
	return avis.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avis *Resource) LifecycleManagement() *terra.Lifecycle {
	return avis.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avis *Resource) Attributes() awsVpcIpamScopeAttributes {
	return awsVpcIpamScopeAttributes{ref: terra.ReferenceResource(avis)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avis *Resource) ImportState(state io.Reader) error {
	avis.state = &awsVpcIpamScopeState{}
	if err := json.NewDecoder(state).Decode(avis.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avis.Type(), avis.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avis *Resource) State() (*awsVpcIpamScopeState, bool) {
	return avis.state, avis.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avis *Resource) StateMust() *awsVpcIpamScopeState {
	if avis.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avis.Type(), avis.LocalName()))
	}
	return avis.state
}

// Args contains the configurations for aws_vpc_ipam_scope.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpamId: string, required
	IpamId terra.StringValue `hcl:"ipam_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVpcIpamScopeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpc_ipam_scope.
func (avis awsVpcIpamScopeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(avis.ref.Append("arn"))
}

// Description returns a reference to field description of aws_vpc_ipam_scope.
func (avis awsVpcIpamScopeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(avis.ref.Append("description"))
}

// Id returns a reference to field id of aws_vpc_ipam_scope.
func (avis awsVpcIpamScopeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avis.ref.Append("id"))
}

// IpamArn returns a reference to field ipam_arn of aws_vpc_ipam_scope.
func (avis awsVpcIpamScopeAttributes) IpamArn() terra.StringValue {
	return terra.ReferenceAsString(avis.ref.Append("ipam_arn"))
}

// IpamId returns a reference to field ipam_id of aws_vpc_ipam_scope.
func (avis awsVpcIpamScopeAttributes) IpamId() terra.StringValue {
	return terra.ReferenceAsString(avis.ref.Append("ipam_id"))
}

// IpamScopeType returns a reference to field ipam_scope_type of aws_vpc_ipam_scope.
func (avis awsVpcIpamScopeAttributes) IpamScopeType() terra.StringValue {
	return terra.ReferenceAsString(avis.ref.Append("ipam_scope_type"))
}

// IsDefault returns a reference to field is_default of aws_vpc_ipam_scope.
func (avis awsVpcIpamScopeAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceAsBool(avis.ref.Append("is_default"))
}

// PoolCount returns a reference to field pool_count of aws_vpc_ipam_scope.
func (avis awsVpcIpamScopeAttributes) PoolCount() terra.NumberValue {
	return terra.ReferenceAsNumber(avis.ref.Append("pool_count"))
}

// Tags returns a reference to field tags of aws_vpc_ipam_scope.
func (avis awsVpcIpamScopeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avis.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpc_ipam_scope.
func (avis awsVpcIpamScopeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avis.ref.Append("tags_all"))
}

func (avis awsVpcIpamScopeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avis.ref.Append("timeouts"))
}

type awsVpcIpamScopeState struct {
	Arn           string            `json:"arn"`
	Description   string            `json:"description"`
	Id            string            `json:"id"`
	IpamArn       string            `json:"ipam_arn"`
	IpamId        string            `json:"ipam_id"`
	IpamScopeType string            `json:"ipam_scope_type"`
	IsDefault     bool              `json:"is_default"`
	PoolCount     float64           `json:"pool_count"`
	Tags          map[string]string `json:"tags"`
	TagsAll       map[string]string `json:"tags_all"`
	Timeouts      *TimeoutsState    `json:"timeouts"`
}
