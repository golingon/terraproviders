// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_main_route_table_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_main_route_table_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMainRouteTableAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amrta *Resource) Type() string {
	return "aws_main_route_table_association"
}

// LocalName returns the local name for [Resource].
func (amrta *Resource) LocalName() string {
	return amrta.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amrta *Resource) Configuration() interface{} {
	return amrta.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amrta *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amrta)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amrta *Resource) Dependencies() terra.Dependencies {
	return amrta.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amrta *Resource) LifecycleManagement() *terra.Lifecycle {
	return amrta.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amrta *Resource) Attributes() awsMainRouteTableAssociationAttributes {
	return awsMainRouteTableAssociationAttributes{ref: terra.ReferenceResource(amrta)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amrta *Resource) ImportState(state io.Reader) error {
	amrta.state = &awsMainRouteTableAssociationState{}
	if err := json.NewDecoder(state).Decode(amrta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amrta.Type(), amrta.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amrta *Resource) State() (*awsMainRouteTableAssociationState, bool) {
	return amrta.state, amrta.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amrta *Resource) StateMust() *awsMainRouteTableAssociationState {
	if amrta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amrta.Type(), amrta.LocalName()))
	}
	return amrta.state
}

// Args contains the configurations for aws_main_route_table_association.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RouteTableId: string, required
	RouteTableId terra.StringValue `hcl:"route_table_id,attr" validate:"required"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsMainRouteTableAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_main_route_table_association.
func (amrta awsMainRouteTableAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amrta.ref.Append("id"))
}

// OriginalRouteTableId returns a reference to field original_route_table_id of aws_main_route_table_association.
func (amrta awsMainRouteTableAssociationAttributes) OriginalRouteTableId() terra.StringValue {
	return terra.ReferenceAsString(amrta.ref.Append("original_route_table_id"))
}

// RouteTableId returns a reference to field route_table_id of aws_main_route_table_association.
func (amrta awsMainRouteTableAssociationAttributes) RouteTableId() terra.StringValue {
	return terra.ReferenceAsString(amrta.ref.Append("route_table_id"))
}

// VpcId returns a reference to field vpc_id of aws_main_route_table_association.
func (amrta awsMainRouteTableAssociationAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(amrta.ref.Append("vpc_id"))
}

func (amrta awsMainRouteTableAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amrta.ref.Append("timeouts"))
}

type awsMainRouteTableAssociationState struct {
	Id                   string         `json:"id"`
	OriginalRouteTableId string         `json:"original_route_table_id"`
	RouteTableId         string         `json:"route_table_id"`
	VpcId                string         `json:"vpc_id"`
	Timeouts             *TimeoutsState `json:"timeouts"`
}
