// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fis_experiment_template

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Action struct {
	// ActionId: string, required
	ActionId terra.StringValue `hcl:"action_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StartAfter: set of string, optional
	StartAfter terra.SetValue[terra.StringValue] `hcl:"start_after,attr"`
	// ActionParameter: min=0
	Parameter []ActionParameter `hcl:"parameter,block" validate:"min=0"`
	// ActionTarget: optional
	Target *ActionTarget `hcl:"target,block"`
}

type ActionParameter struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ActionTarget struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type LogConfiguration struct {
	// LogSchemaVersion: number, required
	LogSchemaVersion terra.NumberValue `hcl:"log_schema_version,attr" validate:"required"`
	// LogConfigurationCloudwatchLogsConfiguration: optional
	CloudwatchLogsConfiguration *LogConfigurationCloudwatchLogsConfiguration `hcl:"cloudwatch_logs_configuration,block"`
	// LogConfigurationS3Configuration: optional
	S3Configuration *LogConfigurationS3Configuration `hcl:"s3_configuration,block"`
}

type LogConfigurationCloudwatchLogsConfiguration struct {
	// LogGroupArn: string, required
	LogGroupArn terra.StringValue `hcl:"log_group_arn,attr" validate:"required"`
}

type LogConfigurationS3Configuration struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type StopCondition struct {
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Target struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// ResourceArns: set of string, optional
	ResourceArns terra.SetValue[terra.StringValue] `hcl:"resource_arns,attr"`
	// ResourceType: string, required
	ResourceType terra.StringValue `hcl:"resource_type,attr" validate:"required"`
	// SelectionMode: string, required
	SelectionMode terra.StringValue `hcl:"selection_mode,attr" validate:"required"`
	// TargetFilter: min=0
	Filter []TargetFilter `hcl:"filter,block" validate:"min=0"`
	// TargetResourceTag: min=0,max=50
	ResourceTag []TargetResourceTag `hcl:"resource_tag,block" validate:"min=0,max=50"`
}

type TargetFilter struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type TargetResourceTag struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ActionAttributes struct {
	ref terra.Reference
}

func (a ActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionAttributes) InternalWithRef(ref terra.Reference) ActionAttributes {
	return ActionAttributes{ref: ref}
}

func (a ActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ActionAttributes) ActionId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("action_id"))
}

func (a ActionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("description"))
}

func (a ActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a ActionAttributes) StartAfter() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](a.ref.Append("start_after"))
}

func (a ActionAttributes) Parameter() terra.SetValue[ActionParameterAttributes] {
	return terra.ReferenceAsSet[ActionParameterAttributes](a.ref.Append("parameter"))
}

func (a ActionAttributes) Target() terra.ListValue[ActionTargetAttributes] {
	return terra.ReferenceAsList[ActionTargetAttributes](a.ref.Append("target"))
}

type ActionParameterAttributes struct {
	ref terra.Reference
}

func (p ActionParameterAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ActionParameterAttributes) InternalWithRef(ref terra.Reference) ActionParameterAttributes {
	return ActionParameterAttributes{ref: ref}
}

func (p ActionParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ActionParameterAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("key"))
}

func (p ActionParameterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value"))
}

type ActionTargetAttributes struct {
	ref terra.Reference
}

func (t ActionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ActionTargetAttributes) InternalWithRef(ref terra.Reference) ActionTargetAttributes {
	return ActionTargetAttributes{ref: ref}
}

func (t ActionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ActionTargetAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t ActionTargetAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type LogConfigurationAttributes struct {
	ref terra.Reference
}

func (lc LogConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LogConfigurationAttributes) InternalWithRef(ref terra.Reference) LogConfigurationAttributes {
	return LogConfigurationAttributes{ref: ref}
}

func (lc LogConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LogConfigurationAttributes) LogSchemaVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(lc.ref.Append("log_schema_version"))
}

func (lc LogConfigurationAttributes) CloudwatchLogsConfiguration() terra.ListValue[LogConfigurationCloudwatchLogsConfigurationAttributes] {
	return terra.ReferenceAsList[LogConfigurationCloudwatchLogsConfigurationAttributes](lc.ref.Append("cloudwatch_logs_configuration"))
}

func (lc LogConfigurationAttributes) S3Configuration() terra.ListValue[LogConfigurationS3ConfigurationAttributes] {
	return terra.ReferenceAsList[LogConfigurationS3ConfigurationAttributes](lc.ref.Append("s3_configuration"))
}

type LogConfigurationCloudwatchLogsConfigurationAttributes struct {
	ref terra.Reference
}

func (clc LogConfigurationCloudwatchLogsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return clc.ref, nil
}

func (clc LogConfigurationCloudwatchLogsConfigurationAttributes) InternalWithRef(ref terra.Reference) LogConfigurationCloudwatchLogsConfigurationAttributes {
	return LogConfigurationCloudwatchLogsConfigurationAttributes{ref: ref}
}

func (clc LogConfigurationCloudwatchLogsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clc.ref.InternalTokens()
}

func (clc LogConfigurationCloudwatchLogsConfigurationAttributes) LogGroupArn() terra.StringValue {
	return terra.ReferenceAsString(clc.ref.Append("log_group_arn"))
}

type LogConfigurationS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (sc LogConfigurationS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc LogConfigurationS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) LogConfigurationS3ConfigurationAttributes {
	return LogConfigurationS3ConfigurationAttributes{ref: ref}
}

func (sc LogConfigurationS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc LogConfigurationS3ConfigurationAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_name"))
}

func (sc LogConfigurationS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("prefix"))
}

type StopConditionAttributes struct {
	ref terra.Reference
}

func (sc StopConditionAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc StopConditionAttributes) InternalWithRef(ref terra.Reference) StopConditionAttributes {
	return StopConditionAttributes{ref: ref}
}

func (sc StopConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc StopConditionAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("source"))
}

func (sc StopConditionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("value"))
}

type TargetAttributes struct {
	ref terra.Reference
}

func (t TargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TargetAttributes) InternalWithRef(ref terra.Reference) TargetAttributes {
	return TargetAttributes{ref: ref}
}

func (t TargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TargetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("name"))
}

func (t TargetAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](t.ref.Append("parameters"))
}

func (t TargetAttributes) ResourceArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("resource_arns"))
}

func (t TargetAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("resource_type"))
}

func (t TargetAttributes) SelectionMode() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("selection_mode"))
}

func (t TargetAttributes) Filter() terra.ListValue[TargetFilterAttributes] {
	return terra.ReferenceAsList[TargetFilterAttributes](t.ref.Append("filter"))
}

func (t TargetAttributes) ResourceTag() terra.SetValue[TargetResourceTagAttributes] {
	return terra.ReferenceAsSet[TargetResourceTagAttributes](t.ref.Append("resource_tag"))
}

type TargetFilterAttributes struct {
	ref terra.Reference
}

func (f TargetFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f TargetFilterAttributes) InternalWithRef(ref terra.Reference) TargetFilterAttributes {
	return TargetFilterAttributes{ref: ref}
}

func (f TargetFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f TargetFilterAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("path"))
}

func (f TargetFilterAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](f.ref.Append("values"))
}

type TargetResourceTagAttributes struct {
	ref terra.Reference
}

func (rt TargetResourceTagAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt TargetResourceTagAttributes) InternalWithRef(ref terra.Reference) TargetResourceTagAttributes {
	return TargetResourceTagAttributes{ref: ref}
}

func (rt TargetResourceTagAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt TargetResourceTagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("key"))
}

func (rt TargetResourceTagAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ActionState struct {
	ActionId    string                 `json:"action_id"`
	Description string                 `json:"description"`
	Name        string                 `json:"name"`
	StartAfter  []string               `json:"start_after"`
	Parameter   []ActionParameterState `json:"parameter"`
	Target      []ActionTargetState    `json:"target"`
}

type ActionParameterState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type ActionTargetState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type LogConfigurationState struct {
	LogSchemaVersion            float64                                            `json:"log_schema_version"`
	CloudwatchLogsConfiguration []LogConfigurationCloudwatchLogsConfigurationState `json:"cloudwatch_logs_configuration"`
	S3Configuration             []LogConfigurationS3ConfigurationState             `json:"s3_configuration"`
}

type LogConfigurationCloudwatchLogsConfigurationState struct {
	LogGroupArn string `json:"log_group_arn"`
}

type LogConfigurationS3ConfigurationState struct {
	BucketName string `json:"bucket_name"`
	Prefix     string `json:"prefix"`
}

type StopConditionState struct {
	Source string `json:"source"`
	Value  string `json:"value"`
}

type TargetState struct {
	Name          string                   `json:"name"`
	Parameters    map[string]string        `json:"parameters"`
	ResourceArns  []string                 `json:"resource_arns"`
	ResourceType  string                   `json:"resource_type"`
	SelectionMode string                   `json:"selection_mode"`
	Filter        []TargetFilterState      `json:"filter"`
	ResourceTag   []TargetResourceTagState `json:"resource_tag"`
}

type TargetFilterState struct {
	Path   string   `json:"path"`
	Values []string `json:"values"`
}

type TargetResourceTagState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
