// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fis_experiment_template

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_fis_experiment_template.
type Resource struct {
	Name      string
	Args      Args
	state     *awsFisExperimentTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (afet *Resource) Type() string {
	return "aws_fis_experiment_template"
}

// LocalName returns the local name for [Resource].
func (afet *Resource) LocalName() string {
	return afet.Name
}

// Configuration returns the configuration (args) for [Resource].
func (afet *Resource) Configuration() interface{} {
	return afet.Args
}

// DependOn is used for other resources to depend on [Resource].
func (afet *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(afet)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (afet *Resource) Dependencies() terra.Dependencies {
	return afet.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (afet *Resource) LifecycleManagement() *terra.Lifecycle {
	return afet.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (afet *Resource) Attributes() awsFisExperimentTemplateAttributes {
	return awsFisExperimentTemplateAttributes{ref: terra.ReferenceResource(afet)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (afet *Resource) ImportState(state io.Reader) error {
	afet.state = &awsFisExperimentTemplateState{}
	if err := json.NewDecoder(state).Decode(afet.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afet.Type(), afet.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (afet *Resource) State() (*awsFisExperimentTemplateState, bool) {
	return afet.state, afet.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (afet *Resource) StateMust() *awsFisExperimentTemplateState {
	if afet.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afet.Type(), afet.LocalName()))
	}
	return afet.state
}

// Args contains the configurations for aws_fis_experiment_template.
type Args struct {
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Action: min=1
	Action []Action `hcl:"action,block" validate:"min=1"`
	// LogConfiguration: optional
	LogConfiguration *LogConfiguration `hcl:"log_configuration,block"`
	// StopCondition: min=1
	StopCondition []StopCondition `hcl:"stop_condition,block" validate:"min=1"`
	// Target: min=0
	Target []Target `hcl:"target,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsFisExperimentTemplateAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_fis_experiment_template.
func (afet awsFisExperimentTemplateAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(afet.ref.Append("description"))
}

// Id returns a reference to field id of aws_fis_experiment_template.
func (afet awsFisExperimentTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(afet.ref.Append("id"))
}

// RoleArn returns a reference to field role_arn of aws_fis_experiment_template.
func (afet awsFisExperimentTemplateAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(afet.ref.Append("role_arn"))
}

// Tags returns a reference to field tags of aws_fis_experiment_template.
func (afet awsFisExperimentTemplateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afet.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_fis_experiment_template.
func (afet awsFisExperimentTemplateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afet.ref.Append("tags_all"))
}

func (afet awsFisExperimentTemplateAttributes) Action() terra.SetValue[ActionAttributes] {
	return terra.ReferenceAsSet[ActionAttributes](afet.ref.Append("action"))
}

func (afet awsFisExperimentTemplateAttributes) LogConfiguration() terra.ListValue[LogConfigurationAttributes] {
	return terra.ReferenceAsList[LogConfigurationAttributes](afet.ref.Append("log_configuration"))
}

func (afet awsFisExperimentTemplateAttributes) StopCondition() terra.SetValue[StopConditionAttributes] {
	return terra.ReferenceAsSet[StopConditionAttributes](afet.ref.Append("stop_condition"))
}

func (afet awsFisExperimentTemplateAttributes) Target() terra.SetValue[TargetAttributes] {
	return terra.ReferenceAsSet[TargetAttributes](afet.ref.Append("target"))
}

func (afet awsFisExperimentTemplateAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](afet.ref.Append("timeouts"))
}

type awsFisExperimentTemplateState struct {
	Description      string                  `json:"description"`
	Id               string                  `json:"id"`
	RoleArn          string                  `json:"role_arn"`
	Tags             map[string]string       `json:"tags"`
	TagsAll          map[string]string       `json:"tags_all"`
	Action           []ActionState           `json:"action"`
	LogConfiguration []LogConfigurationState `json:"log_configuration"`
	StopCondition    []StopConditionState    `json:"stop_condition"`
	Target           []TargetState           `json:"target"`
	Timeouts         *TimeoutsState          `json:"timeouts"`
}
