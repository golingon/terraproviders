// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dax_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dax_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDaxClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adc *Resource) Type() string {
	return "aws_dax_cluster"
}

// LocalName returns the local name for [Resource].
func (adc *Resource) LocalName() string {
	return adc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adc *Resource) Configuration() interface{} {
	return adc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adc *Resource) Dependencies() terra.Dependencies {
	return adc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adc *Resource) LifecycleManagement() *terra.Lifecycle {
	return adc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adc *Resource) Attributes() awsDaxClusterAttributes {
	return awsDaxClusterAttributes{ref: terra.ReferenceResource(adc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adc *Resource) ImportState(state io.Reader) error {
	adc.state = &awsDaxClusterState{}
	if err := json.NewDecoder(state).Decode(adc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adc.Type(), adc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adc *Resource) State() (*awsDaxClusterState, bool) {
	return adc.state, adc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adc *Resource) StateMust() *awsDaxClusterState {
	if adc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adc.Type(), adc.LocalName()))
	}
	return adc.state
}

// Args contains the configurations for aws_dax_cluster.
type Args struct {
	// AvailabilityZones: set of string, optional
	AvailabilityZones terra.SetValue[terra.StringValue] `hcl:"availability_zones,attr"`
	// ClusterEndpointEncryptionType: string, optional
	ClusterEndpointEncryptionType terra.StringValue `hcl:"cluster_endpoint_encryption_type,attr"`
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// IamRoleArn: string, required
	IamRoleArn terra.StringValue `hcl:"iam_role_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaintenanceWindow: string, optional
	MaintenanceWindow terra.StringValue `hcl:"maintenance_window,attr"`
	// NodeType: string, required
	NodeType terra.StringValue `hcl:"node_type,attr" validate:"required"`
	// NotificationTopicArn: string, optional
	NotificationTopicArn terra.StringValue `hcl:"notification_topic_arn,attr"`
	// ParameterGroupName: string, optional
	ParameterGroupName terra.StringValue `hcl:"parameter_group_name,attr"`
	// ReplicationFactor: number, required
	ReplicationFactor terra.NumberValue `hcl:"replication_factor,attr" validate:"required"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetGroupName: string, optional
	SubnetGroupName terra.StringValue `hcl:"subnet_group_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ServerSideEncryption: optional
	ServerSideEncryption *ServerSideEncryption `hcl:"server_side_encryption,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDaxClusterAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_dax_cluster.
func (adc awsDaxClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("arn"))
}

// AvailabilityZones returns a reference to field availability_zones of aws_dax_cluster.
func (adc awsDaxClusterAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adc.ref.Append("availability_zones"))
}

// ClusterAddress returns a reference to field cluster_address of aws_dax_cluster.
func (adc awsDaxClusterAttributes) ClusterAddress() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("cluster_address"))
}

// ClusterEndpointEncryptionType returns a reference to field cluster_endpoint_encryption_type of aws_dax_cluster.
func (adc awsDaxClusterAttributes) ClusterEndpointEncryptionType() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("cluster_endpoint_encryption_type"))
}

// ClusterName returns a reference to field cluster_name of aws_dax_cluster.
func (adc awsDaxClusterAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("cluster_name"))
}

// ConfigurationEndpoint returns a reference to field configuration_endpoint of aws_dax_cluster.
func (adc awsDaxClusterAttributes) ConfigurationEndpoint() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("configuration_endpoint"))
}

// Description returns a reference to field description of aws_dax_cluster.
func (adc awsDaxClusterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("description"))
}

// IamRoleArn returns a reference to field iam_role_arn of aws_dax_cluster.
func (adc awsDaxClusterAttributes) IamRoleArn() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("iam_role_arn"))
}

// Id returns a reference to field id of aws_dax_cluster.
func (adc awsDaxClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("id"))
}

// MaintenanceWindow returns a reference to field maintenance_window of aws_dax_cluster.
func (adc awsDaxClusterAttributes) MaintenanceWindow() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("maintenance_window"))
}

// NodeType returns a reference to field node_type of aws_dax_cluster.
func (adc awsDaxClusterAttributes) NodeType() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("node_type"))
}

// NotificationTopicArn returns a reference to field notification_topic_arn of aws_dax_cluster.
func (adc awsDaxClusterAttributes) NotificationTopicArn() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("notification_topic_arn"))
}

// ParameterGroupName returns a reference to field parameter_group_name of aws_dax_cluster.
func (adc awsDaxClusterAttributes) ParameterGroupName() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("parameter_group_name"))
}

// Port returns a reference to field port of aws_dax_cluster.
func (adc awsDaxClusterAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(adc.ref.Append("port"))
}

// ReplicationFactor returns a reference to field replication_factor of aws_dax_cluster.
func (adc awsDaxClusterAttributes) ReplicationFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(adc.ref.Append("replication_factor"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_dax_cluster.
func (adc awsDaxClusterAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adc.ref.Append("security_group_ids"))
}

// SubnetGroupName returns a reference to field subnet_group_name of aws_dax_cluster.
func (adc awsDaxClusterAttributes) SubnetGroupName() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("subnet_group_name"))
}

// Tags returns a reference to field tags of aws_dax_cluster.
func (adc awsDaxClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_dax_cluster.
func (adc awsDaxClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adc.ref.Append("tags_all"))
}

func (adc awsDaxClusterAttributes) Nodes() terra.ListValue[NodesAttributes] {
	return terra.ReferenceAsList[NodesAttributes](adc.ref.Append("nodes"))
}

func (adc awsDaxClusterAttributes) ServerSideEncryption() terra.ListValue[ServerSideEncryptionAttributes] {
	return terra.ReferenceAsList[ServerSideEncryptionAttributes](adc.ref.Append("server_side_encryption"))
}

func (adc awsDaxClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adc.ref.Append("timeouts"))
}

type awsDaxClusterState struct {
	Arn                           string                      `json:"arn"`
	AvailabilityZones             []string                    `json:"availability_zones"`
	ClusterAddress                string                      `json:"cluster_address"`
	ClusterEndpointEncryptionType string                      `json:"cluster_endpoint_encryption_type"`
	ClusterName                   string                      `json:"cluster_name"`
	ConfigurationEndpoint         string                      `json:"configuration_endpoint"`
	Description                   string                      `json:"description"`
	IamRoleArn                    string                      `json:"iam_role_arn"`
	Id                            string                      `json:"id"`
	MaintenanceWindow             string                      `json:"maintenance_window"`
	NodeType                      string                      `json:"node_type"`
	NotificationTopicArn          string                      `json:"notification_topic_arn"`
	ParameterGroupName            string                      `json:"parameter_group_name"`
	Port                          float64                     `json:"port"`
	ReplicationFactor             float64                     `json:"replication_factor"`
	SecurityGroupIds              []string                    `json:"security_group_ids"`
	SubnetGroupName               string                      `json:"subnet_group_name"`
	Tags                          map[string]string           `json:"tags"`
	TagsAll                       map[string]string           `json:"tags_all"`
	Nodes                         []NodesState                `json:"nodes"`
	ServerSideEncryption          []ServerSideEncryptionState `json:"server_side_encryption"`
	Timeouts                      *TimeoutsState              `json:"timeouts"`
}
