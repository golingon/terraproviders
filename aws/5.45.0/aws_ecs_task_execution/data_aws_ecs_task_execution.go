// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecs_task_execution

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_ecs_task_execution.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aete *DataSource) DataSource() string {
	return "aws_ecs_task_execution"
}

// LocalName returns the local name for [DataSource].
func (aete *DataSource) LocalName() string {
	return aete.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aete *DataSource) Configuration() interface{} {
	return aete.Args
}

// Attributes returns the attributes for [DataSource].
func (aete *DataSource) Attributes() dataAwsEcsTaskExecutionAttributes {
	return dataAwsEcsTaskExecutionAttributes{ref: terra.ReferenceDataSource(aete)}
}

// DataArgs contains the configurations for aws_ecs_task_execution.
type DataArgs struct {
	// ClientToken: string, optional
	ClientToken terra.StringValue `hcl:"client_token,attr"`
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// DesiredCount: number, optional
	DesiredCount terra.NumberValue `hcl:"desired_count,attr"`
	// EnableEcsManagedTags: bool, optional
	EnableEcsManagedTags terra.BoolValue `hcl:"enable_ecs_managed_tags,attr"`
	// EnableExecuteCommand: bool, optional
	EnableExecuteCommand terra.BoolValue `hcl:"enable_execute_command,attr"`
	// Group: string, optional
	Group terra.StringValue `hcl:"group,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LaunchType: string, optional
	LaunchType terra.StringValue `hcl:"launch_type,attr"`
	// PlatformVersion: string, optional
	PlatformVersion terra.StringValue `hcl:"platform_version,attr"`
	// PropagateTags: string, optional
	PropagateTags terra.StringValue `hcl:"propagate_tags,attr"`
	// ReferenceId: string, optional
	ReferenceId terra.StringValue `hcl:"reference_id,attr"`
	// StartedBy: string, optional
	StartedBy terra.StringValue `hcl:"started_by,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TaskDefinition: string, required
	TaskDefinition terra.StringValue `hcl:"task_definition,attr" validate:"required"`
	// CapacityProviderStrategy: min=0
	CapacityProviderStrategy []DataCapacityProviderStrategy `hcl:"capacity_provider_strategy,block" validate:"min=0"`
	// NetworkConfiguration: optional
	NetworkConfiguration *DataNetworkConfiguration `hcl:"network_configuration,block"`
	// Overrides: optional
	Overrides *DataOverrides `hcl:"overrides,block"`
	// PlacementConstraints: min=0,max=10
	PlacementConstraints []DataPlacementConstraints `hcl:"placement_constraints,block" validate:"min=0,max=10"`
	// PlacementStrategy: min=0,max=5
	PlacementStrategy []DataPlacementStrategy `hcl:"placement_strategy,block" validate:"min=0,max=5"`
}

type dataAwsEcsTaskExecutionAttributes struct {
	ref terra.Reference
}

// ClientToken returns a reference to field client_token of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) ClientToken() terra.StringValue {
	return terra.ReferenceAsString(aete.ref.Append("client_token"))
}

// Cluster returns a reference to field cluster of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(aete.ref.Append("cluster"))
}

// DesiredCount returns a reference to field desired_count of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) DesiredCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aete.ref.Append("desired_count"))
}

// EnableEcsManagedTags returns a reference to field enable_ecs_managed_tags of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) EnableEcsManagedTags() terra.BoolValue {
	return terra.ReferenceAsBool(aete.ref.Append("enable_ecs_managed_tags"))
}

// EnableExecuteCommand returns a reference to field enable_execute_command of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) EnableExecuteCommand() terra.BoolValue {
	return terra.ReferenceAsBool(aete.ref.Append("enable_execute_command"))
}

// Group returns a reference to field group of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(aete.ref.Append("group"))
}

// Id returns a reference to field id of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aete.ref.Append("id"))
}

// LaunchType returns a reference to field launch_type of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) LaunchType() terra.StringValue {
	return terra.ReferenceAsString(aete.ref.Append("launch_type"))
}

// PlatformVersion returns a reference to field platform_version of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) PlatformVersion() terra.StringValue {
	return terra.ReferenceAsString(aete.ref.Append("platform_version"))
}

// PropagateTags returns a reference to field propagate_tags of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) PropagateTags() terra.StringValue {
	return terra.ReferenceAsString(aete.ref.Append("propagate_tags"))
}

// ReferenceId returns a reference to field reference_id of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) ReferenceId() terra.StringValue {
	return terra.ReferenceAsString(aete.ref.Append("reference_id"))
}

// StartedBy returns a reference to field started_by of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) StartedBy() terra.StringValue {
	return terra.ReferenceAsString(aete.ref.Append("started_by"))
}

// Tags returns a reference to field tags of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aete.ref.Append("tags"))
}

// TaskArns returns a reference to field task_arns of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) TaskArns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aete.ref.Append("task_arns"))
}

// TaskDefinition returns a reference to field task_definition of aws_ecs_task_execution.
func (aete dataAwsEcsTaskExecutionAttributes) TaskDefinition() terra.StringValue {
	return terra.ReferenceAsString(aete.ref.Append("task_definition"))
}

func (aete dataAwsEcsTaskExecutionAttributes) CapacityProviderStrategy() terra.SetValue[DataCapacityProviderStrategyAttributes] {
	return terra.ReferenceAsSet[DataCapacityProviderStrategyAttributes](aete.ref.Append("capacity_provider_strategy"))
}

func (aete dataAwsEcsTaskExecutionAttributes) NetworkConfiguration() terra.ListValue[DataNetworkConfigurationAttributes] {
	return terra.ReferenceAsList[DataNetworkConfigurationAttributes](aete.ref.Append("network_configuration"))
}

func (aete dataAwsEcsTaskExecutionAttributes) Overrides() terra.ListValue[DataOverridesAttributes] {
	return terra.ReferenceAsList[DataOverridesAttributes](aete.ref.Append("overrides"))
}

func (aete dataAwsEcsTaskExecutionAttributes) PlacementConstraints() terra.SetValue[DataPlacementConstraintsAttributes] {
	return terra.ReferenceAsSet[DataPlacementConstraintsAttributes](aete.ref.Append("placement_constraints"))
}

func (aete dataAwsEcsTaskExecutionAttributes) PlacementStrategy() terra.ListValue[DataPlacementStrategyAttributes] {
	return terra.ReferenceAsList[DataPlacementStrategyAttributes](aete.ref.Append("placement_strategy"))
}
