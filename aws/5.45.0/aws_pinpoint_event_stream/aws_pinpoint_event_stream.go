// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_pinpoint_event_stream

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_pinpoint_event_stream.
type Resource struct {
	Name      string
	Args      Args
	state     *awsPinpointEventStreamState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apes *Resource) Type() string {
	return "aws_pinpoint_event_stream"
}

// LocalName returns the local name for [Resource].
func (apes *Resource) LocalName() string {
	return apes.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apes *Resource) Configuration() interface{} {
	return apes.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apes *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apes)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apes *Resource) Dependencies() terra.Dependencies {
	return apes.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apes *Resource) LifecycleManagement() *terra.Lifecycle {
	return apes.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apes *Resource) Attributes() awsPinpointEventStreamAttributes {
	return awsPinpointEventStreamAttributes{ref: terra.ReferenceResource(apes)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apes *Resource) ImportState(state io.Reader) error {
	apes.state = &awsPinpointEventStreamState{}
	if err := json.NewDecoder(state).Decode(apes.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apes.Type(), apes.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apes *Resource) State() (*awsPinpointEventStreamState, bool) {
	return apes.state, apes.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apes *Resource) StateMust() *awsPinpointEventStreamState {
	if apes.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apes.Type(), apes.LocalName()))
	}
	return apes.state
}

// Args contains the configurations for aws_pinpoint_event_stream.
type Args struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// DestinationStreamArn: string, required
	DestinationStreamArn terra.StringValue `hcl:"destination_stream_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type awsPinpointEventStreamAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of aws_pinpoint_event_stream.
func (apes awsPinpointEventStreamAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(apes.ref.Append("application_id"))
}

// DestinationStreamArn returns a reference to field destination_stream_arn of aws_pinpoint_event_stream.
func (apes awsPinpointEventStreamAttributes) DestinationStreamArn() terra.StringValue {
	return terra.ReferenceAsString(apes.ref.Append("destination_stream_arn"))
}

// Id returns a reference to field id of aws_pinpoint_event_stream.
func (apes awsPinpointEventStreamAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apes.ref.Append("id"))
}

// RoleArn returns a reference to field role_arn of aws_pinpoint_event_stream.
func (apes awsPinpointEventStreamAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(apes.ref.Append("role_arn"))
}

type awsPinpointEventStreamState struct {
	ApplicationId        string `json:"application_id"`
	DestinationStreamArn string `json:"destination_stream_arn"`
	Id                   string `json:"id"`
	RoleArn              string `json:"role_arn"`
}
