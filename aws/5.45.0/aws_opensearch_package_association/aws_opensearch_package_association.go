// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opensearch_package_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_opensearch_package_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsOpensearchPackageAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aopa *Resource) Type() string {
	return "aws_opensearch_package_association"
}

// LocalName returns the local name for [Resource].
func (aopa *Resource) LocalName() string {
	return aopa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aopa *Resource) Configuration() interface{} {
	return aopa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aopa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aopa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aopa *Resource) Dependencies() terra.Dependencies {
	return aopa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aopa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aopa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aopa *Resource) Attributes() awsOpensearchPackageAssociationAttributes {
	return awsOpensearchPackageAssociationAttributes{ref: terra.ReferenceResource(aopa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aopa *Resource) ImportState(state io.Reader) error {
	aopa.state = &awsOpensearchPackageAssociationState{}
	if err := json.NewDecoder(state).Decode(aopa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aopa.Type(), aopa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aopa *Resource) State() (*awsOpensearchPackageAssociationState, bool) {
	return aopa.state, aopa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aopa *Resource) StateMust() *awsOpensearchPackageAssociationState {
	if aopa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aopa.Type(), aopa.LocalName()))
	}
	return aopa.state
}

// Args contains the configurations for aws_opensearch_package_association.
type Args struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PackageId: string, required
	PackageId terra.StringValue `hcl:"package_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsOpensearchPackageAssociationAttributes struct {
	ref terra.Reference
}

// DomainName returns a reference to field domain_name of aws_opensearch_package_association.
func (aopa awsOpensearchPackageAssociationAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(aopa.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_opensearch_package_association.
func (aopa awsOpensearchPackageAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aopa.ref.Append("id"))
}

// PackageId returns a reference to field package_id of aws_opensearch_package_association.
func (aopa awsOpensearchPackageAssociationAttributes) PackageId() terra.StringValue {
	return terra.ReferenceAsString(aopa.ref.Append("package_id"))
}

// ReferencePath returns a reference to field reference_path of aws_opensearch_package_association.
func (aopa awsOpensearchPackageAssociationAttributes) ReferencePath() terra.StringValue {
	return terra.ReferenceAsString(aopa.ref.Append("reference_path"))
}

func (aopa awsOpensearchPackageAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aopa.ref.Append("timeouts"))
}

type awsOpensearchPackageAssociationState struct {
	DomainName    string         `json:"domain_name"`
	Id            string         `json:"id"`
	PackageId     string         `json:"package_id"`
	ReferencePath string         `json:"reference_path"`
	Timeouts      *TimeoutsState `json:"timeouts"`
}
