// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lb_ssl_negotiation_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lb_ssl_negotiation_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLbSslNegotiationPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alsnp *Resource) Type() string {
	return "aws_lb_ssl_negotiation_policy"
}

// LocalName returns the local name for [Resource].
func (alsnp *Resource) LocalName() string {
	return alsnp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alsnp *Resource) Configuration() interface{} {
	return alsnp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alsnp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alsnp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alsnp *Resource) Dependencies() terra.Dependencies {
	return alsnp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alsnp *Resource) LifecycleManagement() *terra.Lifecycle {
	return alsnp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alsnp *Resource) Attributes() awsLbSslNegotiationPolicyAttributes {
	return awsLbSslNegotiationPolicyAttributes{ref: terra.ReferenceResource(alsnp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alsnp *Resource) ImportState(state io.Reader) error {
	alsnp.state = &awsLbSslNegotiationPolicyState{}
	if err := json.NewDecoder(state).Decode(alsnp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alsnp.Type(), alsnp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alsnp *Resource) State() (*awsLbSslNegotiationPolicyState, bool) {
	return alsnp.state, alsnp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alsnp *Resource) StateMust() *awsLbSslNegotiationPolicyState {
	if alsnp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alsnp.Type(), alsnp.LocalName()))
	}
	return alsnp.state
}

// Args contains the configurations for aws_lb_ssl_negotiation_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LbPort: number, required
	LbPort terra.NumberValue `hcl:"lb_port,attr" validate:"required"`
	// LoadBalancer: string, required
	LoadBalancer terra.StringValue `hcl:"load_balancer,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
	// Attribute: min=0
	Attribute []Attribute `hcl:"attribute,block" validate:"min=0"`
}

type awsLbSslNegotiationPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_lb_ssl_negotiation_policy.
func (alsnp awsLbSslNegotiationPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alsnp.ref.Append("id"))
}

// LbPort returns a reference to field lb_port of aws_lb_ssl_negotiation_policy.
func (alsnp awsLbSslNegotiationPolicyAttributes) LbPort() terra.NumberValue {
	return terra.ReferenceAsNumber(alsnp.ref.Append("lb_port"))
}

// LoadBalancer returns a reference to field load_balancer of aws_lb_ssl_negotiation_policy.
func (alsnp awsLbSslNegotiationPolicyAttributes) LoadBalancer() terra.StringValue {
	return terra.ReferenceAsString(alsnp.ref.Append("load_balancer"))
}

// Name returns a reference to field name of aws_lb_ssl_negotiation_policy.
func (alsnp awsLbSslNegotiationPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alsnp.ref.Append("name"))
}

// Triggers returns a reference to field triggers of aws_lb_ssl_negotiation_policy.
func (alsnp awsLbSslNegotiationPolicyAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alsnp.ref.Append("triggers"))
}

func (alsnp awsLbSslNegotiationPolicyAttributes) Attribute() terra.SetValue[AttributeAttributes] {
	return terra.ReferenceAsSet[AttributeAttributes](alsnp.ref.Append("attribute"))
}

type awsLbSslNegotiationPolicyState struct {
	Id           string            `json:"id"`
	LbPort       float64           `json:"lb_port"`
	LoadBalancer string            `json:"load_balancer"`
	Name         string            `json:"name"`
	Triggers     map[string]string `json:"triggers"`
	Attribute    []AttributeState  `json:"attribute"`
}
