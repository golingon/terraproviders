// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_guardduty_detector

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Datasources struct {
	// DatasourcesKubernetes: optional
	Kubernetes *DatasourcesKubernetes `hcl:"kubernetes,block"`
	// DatasourcesMalwareProtection: optional
	MalwareProtection *DatasourcesMalwareProtection `hcl:"malware_protection,block"`
	// DatasourcesS3Logs: optional
	S3Logs *DatasourcesS3Logs `hcl:"s3_logs,block"`
}

type DatasourcesKubernetes struct {
	// DatasourcesKubernetesAuditLogs: required
	AuditLogs *DatasourcesKubernetesAuditLogs `hcl:"audit_logs,block" validate:"required"`
}

type DatasourcesKubernetesAuditLogs struct {
	// Enable: bool, required
	Enable terra.BoolValue `hcl:"enable,attr" validate:"required"`
}

type DatasourcesMalwareProtection struct {
	// DatasourcesMalwareProtectionScanEc2InstanceWithFindings: required
	ScanEc2InstanceWithFindings *DatasourcesMalwareProtectionScanEc2InstanceWithFindings `hcl:"scan_ec2_instance_with_findings,block" validate:"required"`
}

type DatasourcesMalwareProtectionScanEc2InstanceWithFindings struct {
	// DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumes: required
	EbsVolumes *DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumes `hcl:"ebs_volumes,block" validate:"required"`
}

type DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumes struct {
	// Enable: bool, required
	Enable terra.BoolValue `hcl:"enable,attr" validate:"required"`
}

type DatasourcesS3Logs struct {
	// Enable: bool, required
	Enable terra.BoolValue `hcl:"enable,attr" validate:"required"`
}

type DatasourcesAttributes struct {
	ref terra.Reference
}

func (d DatasourcesAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DatasourcesAttributes) InternalWithRef(ref terra.Reference) DatasourcesAttributes {
	return DatasourcesAttributes{ref: ref}
}

func (d DatasourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DatasourcesAttributes) Kubernetes() terra.ListValue[DatasourcesKubernetesAttributes] {
	return terra.ReferenceAsList[DatasourcesKubernetesAttributes](d.ref.Append("kubernetes"))
}

func (d DatasourcesAttributes) MalwareProtection() terra.ListValue[DatasourcesMalwareProtectionAttributes] {
	return terra.ReferenceAsList[DatasourcesMalwareProtectionAttributes](d.ref.Append("malware_protection"))
}

func (d DatasourcesAttributes) S3Logs() terra.ListValue[DatasourcesS3LogsAttributes] {
	return terra.ReferenceAsList[DatasourcesS3LogsAttributes](d.ref.Append("s3_logs"))
}

type DatasourcesKubernetesAttributes struct {
	ref terra.Reference
}

func (k DatasourcesKubernetesAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k DatasourcesKubernetesAttributes) InternalWithRef(ref terra.Reference) DatasourcesKubernetesAttributes {
	return DatasourcesKubernetesAttributes{ref: ref}
}

func (k DatasourcesKubernetesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k DatasourcesKubernetesAttributes) AuditLogs() terra.ListValue[DatasourcesKubernetesAuditLogsAttributes] {
	return terra.ReferenceAsList[DatasourcesKubernetesAuditLogsAttributes](k.ref.Append("audit_logs"))
}

type DatasourcesKubernetesAuditLogsAttributes struct {
	ref terra.Reference
}

func (al DatasourcesKubernetesAuditLogsAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al DatasourcesKubernetesAuditLogsAttributes) InternalWithRef(ref terra.Reference) DatasourcesKubernetesAuditLogsAttributes {
	return DatasourcesKubernetesAuditLogsAttributes{ref: ref}
}

func (al DatasourcesKubernetesAuditLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al DatasourcesKubernetesAuditLogsAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(al.ref.Append("enable"))
}

type DatasourcesMalwareProtectionAttributes struct {
	ref terra.Reference
}

func (mp DatasourcesMalwareProtectionAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp DatasourcesMalwareProtectionAttributes) InternalWithRef(ref terra.Reference) DatasourcesMalwareProtectionAttributes {
	return DatasourcesMalwareProtectionAttributes{ref: ref}
}

func (mp DatasourcesMalwareProtectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp DatasourcesMalwareProtectionAttributes) ScanEc2InstanceWithFindings() terra.ListValue[DatasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes] {
	return terra.ReferenceAsList[DatasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes](mp.ref.Append("scan_ec2_instance_with_findings"))
}

type DatasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes struct {
	ref terra.Reference
}

func (seiwf DatasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes) InternalRef() (terra.Reference, error) {
	return seiwf.ref, nil
}

func (seiwf DatasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes) InternalWithRef(ref terra.Reference) DatasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes {
	return DatasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes{ref: ref}
}

func (seiwf DatasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return seiwf.ref.InternalTokens()
}

func (seiwf DatasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes) EbsVolumes() terra.ListValue[DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes] {
	return terra.ReferenceAsList[DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes](seiwf.ref.Append("ebs_volumes"))
}

type DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes struct {
	ref terra.Reference
}

func (ev DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes) InternalRef() (terra.Reference, error) {
	return ev.ref, nil
}

func (ev DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes) InternalWithRef(ref terra.Reference) DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes {
	return DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes{ref: ref}
}

func (ev DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ev.ref.InternalTokens()
}

func (ev DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(ev.ref.Append("enable"))
}

type DatasourcesS3LogsAttributes struct {
	ref terra.Reference
}

func (sl DatasourcesS3LogsAttributes) InternalRef() (terra.Reference, error) {
	return sl.ref, nil
}

func (sl DatasourcesS3LogsAttributes) InternalWithRef(ref terra.Reference) DatasourcesS3LogsAttributes {
	return DatasourcesS3LogsAttributes{ref: ref}
}

func (sl DatasourcesS3LogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sl.ref.InternalTokens()
}

func (sl DatasourcesS3LogsAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(sl.ref.Append("enable"))
}

type DatasourcesState struct {
	Kubernetes        []DatasourcesKubernetesState        `json:"kubernetes"`
	MalwareProtection []DatasourcesMalwareProtectionState `json:"malware_protection"`
	S3Logs            []DatasourcesS3LogsState            `json:"s3_logs"`
}

type DatasourcesKubernetesState struct {
	AuditLogs []DatasourcesKubernetesAuditLogsState `json:"audit_logs"`
}

type DatasourcesKubernetesAuditLogsState struct {
	Enable bool `json:"enable"`
}

type DatasourcesMalwareProtectionState struct {
	ScanEc2InstanceWithFindings []DatasourcesMalwareProtectionScanEc2InstanceWithFindingsState `json:"scan_ec2_instance_with_findings"`
}

type DatasourcesMalwareProtectionScanEc2InstanceWithFindingsState struct {
	EbsVolumes []DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesState `json:"ebs_volumes"`
}

type DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesState struct {
	Enable bool `json:"enable"`
}

type DatasourcesS3LogsState struct {
	Enable bool `json:"enable"`
}
