// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_model

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Container struct {
	// ContainerHostname: string, optional
	ContainerHostname terra.StringValue `hcl:"container_hostname,attr"`
	// Environment: map of string, optional
	Environment terra.MapValue[terra.StringValue] `hcl:"environment,attr"`
	// Image: string, optional
	Image terra.StringValue `hcl:"image,attr"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// ModelDataUrl: string, optional
	ModelDataUrl terra.StringValue `hcl:"model_data_url,attr"`
	// ModelPackageName: string, optional
	ModelPackageName terra.StringValue `hcl:"model_package_name,attr"`
	// ContainerImageConfig: optional
	ImageConfig *ContainerImageConfig `hcl:"image_config,block"`
	// ContainerModelDataSource: optional
	ModelDataSource *ContainerModelDataSource `hcl:"model_data_source,block"`
}

type ContainerImageConfig struct {
	// RepositoryAccessMode: string, required
	RepositoryAccessMode terra.StringValue `hcl:"repository_access_mode,attr" validate:"required"`
	// ContainerImageConfigRepositoryAuthConfig: optional
	RepositoryAuthConfig *ContainerImageConfigRepositoryAuthConfig `hcl:"repository_auth_config,block"`
}

type ContainerImageConfigRepositoryAuthConfig struct {
	// RepositoryCredentialsProviderArn: string, required
	RepositoryCredentialsProviderArn terra.StringValue `hcl:"repository_credentials_provider_arn,attr" validate:"required"`
}

type ContainerModelDataSource struct {
	// ContainerModelDataSourceS3DataSource: min=1
	S3DataSource []ContainerModelDataSourceS3DataSource `hcl:"s3_data_source,block" validate:"min=1"`
}

type ContainerModelDataSourceS3DataSource struct {
	// CompressionType: string, required
	CompressionType terra.StringValue `hcl:"compression_type,attr" validate:"required"`
	// S3DataType: string, required
	S3DataType terra.StringValue `hcl:"s3_data_type,attr" validate:"required"`
	// S3Uri: string, required
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
}

type InferenceExecutionConfig struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type PrimaryContainer struct {
	// ContainerHostname: string, optional
	ContainerHostname terra.StringValue `hcl:"container_hostname,attr"`
	// Environment: map of string, optional
	Environment terra.MapValue[terra.StringValue] `hcl:"environment,attr"`
	// Image: string, optional
	Image terra.StringValue `hcl:"image,attr"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// ModelDataUrl: string, optional
	ModelDataUrl terra.StringValue `hcl:"model_data_url,attr"`
	// ModelPackageName: string, optional
	ModelPackageName terra.StringValue `hcl:"model_package_name,attr"`
	// PrimaryContainerImageConfig: optional
	ImageConfig *PrimaryContainerImageConfig `hcl:"image_config,block"`
	// PrimaryContainerModelDataSource: optional
	ModelDataSource *PrimaryContainerModelDataSource `hcl:"model_data_source,block"`
}

type PrimaryContainerImageConfig struct {
	// RepositoryAccessMode: string, required
	RepositoryAccessMode terra.StringValue `hcl:"repository_access_mode,attr" validate:"required"`
	// PrimaryContainerImageConfigRepositoryAuthConfig: optional
	RepositoryAuthConfig *PrimaryContainerImageConfigRepositoryAuthConfig `hcl:"repository_auth_config,block"`
}

type PrimaryContainerImageConfigRepositoryAuthConfig struct {
	// RepositoryCredentialsProviderArn: string, required
	RepositoryCredentialsProviderArn terra.StringValue `hcl:"repository_credentials_provider_arn,attr" validate:"required"`
}

type PrimaryContainerModelDataSource struct {
	// PrimaryContainerModelDataSourceS3DataSource: min=1
	S3DataSource []PrimaryContainerModelDataSourceS3DataSource `hcl:"s3_data_source,block" validate:"min=1"`
}

type PrimaryContainerModelDataSourceS3DataSource struct {
	// CompressionType: string, required
	CompressionType terra.StringValue `hcl:"compression_type,attr" validate:"required"`
	// S3DataType: string, required
	S3DataType terra.StringValue `hcl:"s3_data_type,attr" validate:"required"`
	// S3Uri: string, required
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
}

type VpcConfig struct {
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// Subnets: set of string, required
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type ContainerAttributes struct {
	ref terra.Reference
}

func (c ContainerAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ContainerAttributes) InternalWithRef(ref terra.Reference) ContainerAttributes {
	return ContainerAttributes{ref: ref}
}

func (c ContainerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ContainerAttributes) ContainerHostname() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("container_hostname"))
}

func (c ContainerAttributes) Environment() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("environment"))
}

func (c ContainerAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c ContainerAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("mode"))
}

func (c ContainerAttributes) ModelDataUrl() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("model_data_url"))
}

func (c ContainerAttributes) ModelPackageName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("model_package_name"))
}

func (c ContainerAttributes) ImageConfig() terra.ListValue[ContainerImageConfigAttributes] {
	return terra.ReferenceAsList[ContainerImageConfigAttributes](c.ref.Append("image_config"))
}

func (c ContainerAttributes) ModelDataSource() terra.ListValue[ContainerModelDataSourceAttributes] {
	return terra.ReferenceAsList[ContainerModelDataSourceAttributes](c.ref.Append("model_data_source"))
}

type ContainerImageConfigAttributes struct {
	ref terra.Reference
}

func (ic ContainerImageConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic ContainerImageConfigAttributes) InternalWithRef(ref terra.Reference) ContainerImageConfigAttributes {
	return ContainerImageConfigAttributes{ref: ref}
}

func (ic ContainerImageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic ContainerImageConfigAttributes) RepositoryAccessMode() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("repository_access_mode"))
}

func (ic ContainerImageConfigAttributes) RepositoryAuthConfig() terra.ListValue[ContainerImageConfigRepositoryAuthConfigAttributes] {
	return terra.ReferenceAsList[ContainerImageConfigRepositoryAuthConfigAttributes](ic.ref.Append("repository_auth_config"))
}

type ContainerImageConfigRepositoryAuthConfigAttributes struct {
	ref terra.Reference
}

func (rac ContainerImageConfigRepositoryAuthConfigAttributes) InternalRef() (terra.Reference, error) {
	return rac.ref, nil
}

func (rac ContainerImageConfigRepositoryAuthConfigAttributes) InternalWithRef(ref terra.Reference) ContainerImageConfigRepositoryAuthConfigAttributes {
	return ContainerImageConfigRepositoryAuthConfigAttributes{ref: ref}
}

func (rac ContainerImageConfigRepositoryAuthConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rac.ref.InternalTokens()
}

func (rac ContainerImageConfigRepositoryAuthConfigAttributes) RepositoryCredentialsProviderArn() terra.StringValue {
	return terra.ReferenceAsString(rac.ref.Append("repository_credentials_provider_arn"))
}

type ContainerModelDataSourceAttributes struct {
	ref terra.Reference
}

func (mds ContainerModelDataSourceAttributes) InternalRef() (terra.Reference, error) {
	return mds.ref, nil
}

func (mds ContainerModelDataSourceAttributes) InternalWithRef(ref terra.Reference) ContainerModelDataSourceAttributes {
	return ContainerModelDataSourceAttributes{ref: ref}
}

func (mds ContainerModelDataSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mds.ref.InternalTokens()
}

func (mds ContainerModelDataSourceAttributes) S3DataSource() terra.ListValue[ContainerModelDataSourceS3DataSourceAttributes] {
	return terra.ReferenceAsList[ContainerModelDataSourceS3DataSourceAttributes](mds.ref.Append("s3_data_source"))
}

type ContainerModelDataSourceS3DataSourceAttributes struct {
	ref terra.Reference
}

func (sds ContainerModelDataSourceS3DataSourceAttributes) InternalRef() (terra.Reference, error) {
	return sds.ref, nil
}

func (sds ContainerModelDataSourceS3DataSourceAttributes) InternalWithRef(ref terra.Reference) ContainerModelDataSourceS3DataSourceAttributes {
	return ContainerModelDataSourceS3DataSourceAttributes{ref: ref}
}

func (sds ContainerModelDataSourceS3DataSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sds.ref.InternalTokens()
}

func (sds ContainerModelDataSourceS3DataSourceAttributes) CompressionType() terra.StringValue {
	return terra.ReferenceAsString(sds.ref.Append("compression_type"))
}

func (sds ContainerModelDataSourceS3DataSourceAttributes) S3DataType() terra.StringValue {
	return terra.ReferenceAsString(sds.ref.Append("s3_data_type"))
}

func (sds ContainerModelDataSourceS3DataSourceAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(sds.ref.Append("s3_uri"))
}

type InferenceExecutionConfigAttributes struct {
	ref terra.Reference
}

func (iec InferenceExecutionConfigAttributes) InternalRef() (terra.Reference, error) {
	return iec.ref, nil
}

func (iec InferenceExecutionConfigAttributes) InternalWithRef(ref terra.Reference) InferenceExecutionConfigAttributes {
	return InferenceExecutionConfigAttributes{ref: ref}
}

func (iec InferenceExecutionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iec.ref.InternalTokens()
}

func (iec InferenceExecutionConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(iec.ref.Append("mode"))
}

type PrimaryContainerAttributes struct {
	ref terra.Reference
}

func (pc PrimaryContainerAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PrimaryContainerAttributes) InternalWithRef(ref terra.Reference) PrimaryContainerAttributes {
	return PrimaryContainerAttributes{ref: ref}
}

func (pc PrimaryContainerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PrimaryContainerAttributes) ContainerHostname() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("container_hostname"))
}

func (pc PrimaryContainerAttributes) Environment() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pc.ref.Append("environment"))
}

func (pc PrimaryContainerAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("image"))
}

func (pc PrimaryContainerAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("mode"))
}

func (pc PrimaryContainerAttributes) ModelDataUrl() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("model_data_url"))
}

func (pc PrimaryContainerAttributes) ModelPackageName() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("model_package_name"))
}

func (pc PrimaryContainerAttributes) ImageConfig() terra.ListValue[PrimaryContainerImageConfigAttributes] {
	return terra.ReferenceAsList[PrimaryContainerImageConfigAttributes](pc.ref.Append("image_config"))
}

func (pc PrimaryContainerAttributes) ModelDataSource() terra.ListValue[PrimaryContainerModelDataSourceAttributes] {
	return terra.ReferenceAsList[PrimaryContainerModelDataSourceAttributes](pc.ref.Append("model_data_source"))
}

type PrimaryContainerImageConfigAttributes struct {
	ref terra.Reference
}

func (ic PrimaryContainerImageConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic PrimaryContainerImageConfigAttributes) InternalWithRef(ref terra.Reference) PrimaryContainerImageConfigAttributes {
	return PrimaryContainerImageConfigAttributes{ref: ref}
}

func (ic PrimaryContainerImageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic PrimaryContainerImageConfigAttributes) RepositoryAccessMode() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("repository_access_mode"))
}

func (ic PrimaryContainerImageConfigAttributes) RepositoryAuthConfig() terra.ListValue[PrimaryContainerImageConfigRepositoryAuthConfigAttributes] {
	return terra.ReferenceAsList[PrimaryContainerImageConfigRepositoryAuthConfigAttributes](ic.ref.Append("repository_auth_config"))
}

type PrimaryContainerImageConfigRepositoryAuthConfigAttributes struct {
	ref terra.Reference
}

func (rac PrimaryContainerImageConfigRepositoryAuthConfigAttributes) InternalRef() (terra.Reference, error) {
	return rac.ref, nil
}

func (rac PrimaryContainerImageConfigRepositoryAuthConfigAttributes) InternalWithRef(ref terra.Reference) PrimaryContainerImageConfigRepositoryAuthConfigAttributes {
	return PrimaryContainerImageConfigRepositoryAuthConfigAttributes{ref: ref}
}

func (rac PrimaryContainerImageConfigRepositoryAuthConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rac.ref.InternalTokens()
}

func (rac PrimaryContainerImageConfigRepositoryAuthConfigAttributes) RepositoryCredentialsProviderArn() terra.StringValue {
	return terra.ReferenceAsString(rac.ref.Append("repository_credentials_provider_arn"))
}

type PrimaryContainerModelDataSourceAttributes struct {
	ref terra.Reference
}

func (mds PrimaryContainerModelDataSourceAttributes) InternalRef() (terra.Reference, error) {
	return mds.ref, nil
}

func (mds PrimaryContainerModelDataSourceAttributes) InternalWithRef(ref terra.Reference) PrimaryContainerModelDataSourceAttributes {
	return PrimaryContainerModelDataSourceAttributes{ref: ref}
}

func (mds PrimaryContainerModelDataSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mds.ref.InternalTokens()
}

func (mds PrimaryContainerModelDataSourceAttributes) S3DataSource() terra.ListValue[PrimaryContainerModelDataSourceS3DataSourceAttributes] {
	return terra.ReferenceAsList[PrimaryContainerModelDataSourceS3DataSourceAttributes](mds.ref.Append("s3_data_source"))
}

type PrimaryContainerModelDataSourceS3DataSourceAttributes struct {
	ref terra.Reference
}

func (sds PrimaryContainerModelDataSourceS3DataSourceAttributes) InternalRef() (terra.Reference, error) {
	return sds.ref, nil
}

func (sds PrimaryContainerModelDataSourceS3DataSourceAttributes) InternalWithRef(ref terra.Reference) PrimaryContainerModelDataSourceS3DataSourceAttributes {
	return PrimaryContainerModelDataSourceS3DataSourceAttributes{ref: ref}
}

func (sds PrimaryContainerModelDataSourceS3DataSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sds.ref.InternalTokens()
}

func (sds PrimaryContainerModelDataSourceS3DataSourceAttributes) CompressionType() terra.StringValue {
	return terra.ReferenceAsString(sds.ref.Append("compression_type"))
}

func (sds PrimaryContainerModelDataSourceS3DataSourceAttributes) S3DataType() terra.StringValue {
	return terra.ReferenceAsString(sds.ref.Append("s3_data_type"))
}

func (sds PrimaryContainerModelDataSourceS3DataSourceAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(sds.ref.Append("s3_uri"))
}

type VpcConfigAttributes struct {
	ref terra.Reference
}

func (vc VpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VpcConfigAttributes) InternalWithRef(ref terra.Reference) VpcConfigAttributes {
	return VpcConfigAttributes{ref: ref}
}

func (vc VpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc VpcConfigAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnets"))
}

type ContainerState struct {
	ContainerHostname string                          `json:"container_hostname"`
	Environment       map[string]string               `json:"environment"`
	Image             string                          `json:"image"`
	Mode              string                          `json:"mode"`
	ModelDataUrl      string                          `json:"model_data_url"`
	ModelPackageName  string                          `json:"model_package_name"`
	ImageConfig       []ContainerImageConfigState     `json:"image_config"`
	ModelDataSource   []ContainerModelDataSourceState `json:"model_data_source"`
}

type ContainerImageConfigState struct {
	RepositoryAccessMode string                                          `json:"repository_access_mode"`
	RepositoryAuthConfig []ContainerImageConfigRepositoryAuthConfigState `json:"repository_auth_config"`
}

type ContainerImageConfigRepositoryAuthConfigState struct {
	RepositoryCredentialsProviderArn string `json:"repository_credentials_provider_arn"`
}

type ContainerModelDataSourceState struct {
	S3DataSource []ContainerModelDataSourceS3DataSourceState `json:"s3_data_source"`
}

type ContainerModelDataSourceS3DataSourceState struct {
	CompressionType string `json:"compression_type"`
	S3DataType      string `json:"s3_data_type"`
	S3Uri           string `json:"s3_uri"`
}

type InferenceExecutionConfigState struct {
	Mode string `json:"mode"`
}

type PrimaryContainerState struct {
	ContainerHostname string                                 `json:"container_hostname"`
	Environment       map[string]string                      `json:"environment"`
	Image             string                                 `json:"image"`
	Mode              string                                 `json:"mode"`
	ModelDataUrl      string                                 `json:"model_data_url"`
	ModelPackageName  string                                 `json:"model_package_name"`
	ImageConfig       []PrimaryContainerImageConfigState     `json:"image_config"`
	ModelDataSource   []PrimaryContainerModelDataSourceState `json:"model_data_source"`
}

type PrimaryContainerImageConfigState struct {
	RepositoryAccessMode string                                                 `json:"repository_access_mode"`
	RepositoryAuthConfig []PrimaryContainerImageConfigRepositoryAuthConfigState `json:"repository_auth_config"`
}

type PrimaryContainerImageConfigRepositoryAuthConfigState struct {
	RepositoryCredentialsProviderArn string `json:"repository_credentials_provider_arn"`
}

type PrimaryContainerModelDataSourceState struct {
	S3DataSource []PrimaryContainerModelDataSourceS3DataSourceState `json:"s3_data_source"`
}

type PrimaryContainerModelDataSourceS3DataSourceState struct {
	CompressionType string `json:"compression_type"`
	S3DataType      string `json:"s3_data_type"`
	S3Uri           string `json:"s3_uri"`
}

type VpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	Subnets          []string `json:"subnets"`
}
