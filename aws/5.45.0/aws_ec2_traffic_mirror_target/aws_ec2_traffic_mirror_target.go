// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_traffic_mirror_target

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_traffic_mirror_target.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2TrafficMirrorTargetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aetmt *Resource) Type() string {
	return "aws_ec2_traffic_mirror_target"
}

// LocalName returns the local name for [Resource].
func (aetmt *Resource) LocalName() string {
	return aetmt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aetmt *Resource) Configuration() interface{} {
	return aetmt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aetmt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aetmt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aetmt *Resource) Dependencies() terra.Dependencies {
	return aetmt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aetmt *Resource) LifecycleManagement() *terra.Lifecycle {
	return aetmt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aetmt *Resource) Attributes() awsEc2TrafficMirrorTargetAttributes {
	return awsEc2TrafficMirrorTargetAttributes{ref: terra.ReferenceResource(aetmt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aetmt *Resource) ImportState(state io.Reader) error {
	aetmt.state = &awsEc2TrafficMirrorTargetState{}
	if err := json.NewDecoder(state).Decode(aetmt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aetmt.Type(), aetmt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aetmt *Resource) State() (*awsEc2TrafficMirrorTargetState, bool) {
	return aetmt.state, aetmt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aetmt *Resource) StateMust() *awsEc2TrafficMirrorTargetState {
	if aetmt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aetmt.Type(), aetmt.LocalName()))
	}
	return aetmt.state
}

// Args contains the configurations for aws_ec2_traffic_mirror_target.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GatewayLoadBalancerEndpointId: string, optional
	GatewayLoadBalancerEndpointId terra.StringValue `hcl:"gateway_load_balancer_endpoint_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetworkInterfaceId: string, optional
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr"`
	// NetworkLoadBalancerArn: string, optional
	NetworkLoadBalancerArn terra.StringValue `hcl:"network_load_balancer_arn,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsEc2TrafficMirrorTargetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ec2_traffic_mirror_target.
func (aetmt awsEc2TrafficMirrorTargetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aetmt.ref.Append("arn"))
}

// Description returns a reference to field description of aws_ec2_traffic_mirror_target.
func (aetmt awsEc2TrafficMirrorTargetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aetmt.ref.Append("description"))
}

// GatewayLoadBalancerEndpointId returns a reference to field gateway_load_balancer_endpoint_id of aws_ec2_traffic_mirror_target.
func (aetmt awsEc2TrafficMirrorTargetAttributes) GatewayLoadBalancerEndpointId() terra.StringValue {
	return terra.ReferenceAsString(aetmt.ref.Append("gateway_load_balancer_endpoint_id"))
}

// Id returns a reference to field id of aws_ec2_traffic_mirror_target.
func (aetmt awsEc2TrafficMirrorTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aetmt.ref.Append("id"))
}

// NetworkInterfaceId returns a reference to field network_interface_id of aws_ec2_traffic_mirror_target.
func (aetmt awsEc2TrafficMirrorTargetAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(aetmt.ref.Append("network_interface_id"))
}

// NetworkLoadBalancerArn returns a reference to field network_load_balancer_arn of aws_ec2_traffic_mirror_target.
func (aetmt awsEc2TrafficMirrorTargetAttributes) NetworkLoadBalancerArn() terra.StringValue {
	return terra.ReferenceAsString(aetmt.ref.Append("network_load_balancer_arn"))
}

// OwnerId returns a reference to field owner_id of aws_ec2_traffic_mirror_target.
func (aetmt awsEc2TrafficMirrorTargetAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(aetmt.ref.Append("owner_id"))
}

// Tags returns a reference to field tags of aws_ec2_traffic_mirror_target.
func (aetmt awsEc2TrafficMirrorTargetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetmt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_traffic_mirror_target.
func (aetmt awsEc2TrafficMirrorTargetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetmt.ref.Append("tags_all"))
}

type awsEc2TrafficMirrorTargetState struct {
	Arn                           string            `json:"arn"`
	Description                   string            `json:"description"`
	GatewayLoadBalancerEndpointId string            `json:"gateway_load_balancer_endpoint_id"`
	Id                            string            `json:"id"`
	NetworkInterfaceId            string            `json:"network_interface_id"`
	NetworkLoadBalancerArn        string            `json:"network_load_balancer_arn"`
	OwnerId                       string            `json:"owner_id"`
	Tags                          map[string]string `json:"tags"`
	TagsAll                       map[string]string `json:"tags_all"`
}
