// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ivs_recording_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ivs_recording_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIvsRecordingConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (airc *Resource) Type() string {
	return "aws_ivs_recording_configuration"
}

// LocalName returns the local name for [Resource].
func (airc *Resource) LocalName() string {
	return airc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (airc *Resource) Configuration() interface{} {
	return airc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (airc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(airc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (airc *Resource) Dependencies() terra.Dependencies {
	return airc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (airc *Resource) LifecycleManagement() *terra.Lifecycle {
	return airc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (airc *Resource) Attributes() awsIvsRecordingConfigurationAttributes {
	return awsIvsRecordingConfigurationAttributes{ref: terra.ReferenceResource(airc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (airc *Resource) ImportState(state io.Reader) error {
	airc.state = &awsIvsRecordingConfigurationState{}
	if err := json.NewDecoder(state).Decode(airc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", airc.Type(), airc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (airc *Resource) State() (*awsIvsRecordingConfigurationState, bool) {
	return airc.state, airc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (airc *Resource) StateMust() *awsIvsRecordingConfigurationState {
	if airc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", airc.Type(), airc.LocalName()))
	}
	return airc.state
}

// Args contains the configurations for aws_ivs_recording_configuration.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// RecordingReconnectWindowSeconds: number, optional
	RecordingReconnectWindowSeconds terra.NumberValue `hcl:"recording_reconnect_window_seconds,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DestinationConfiguration: required
	DestinationConfiguration *DestinationConfiguration `hcl:"destination_configuration,block" validate:"required"`
	// ThumbnailConfiguration: optional
	ThumbnailConfiguration *ThumbnailConfiguration `hcl:"thumbnail_configuration,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsIvsRecordingConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ivs_recording_configuration.
func (airc awsIvsRecordingConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(airc.ref.Append("arn"))
}

// Id returns a reference to field id of aws_ivs_recording_configuration.
func (airc awsIvsRecordingConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(airc.ref.Append("id"))
}

// Name returns a reference to field name of aws_ivs_recording_configuration.
func (airc awsIvsRecordingConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(airc.ref.Append("name"))
}

// RecordingReconnectWindowSeconds returns a reference to field recording_reconnect_window_seconds of aws_ivs_recording_configuration.
func (airc awsIvsRecordingConfigurationAttributes) RecordingReconnectWindowSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(airc.ref.Append("recording_reconnect_window_seconds"))
}

// State returns a reference to field state of aws_ivs_recording_configuration.
func (airc awsIvsRecordingConfigurationAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(airc.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_ivs_recording_configuration.
func (airc awsIvsRecordingConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](airc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ivs_recording_configuration.
func (airc awsIvsRecordingConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](airc.ref.Append("tags_all"))
}

func (airc awsIvsRecordingConfigurationAttributes) DestinationConfiguration() terra.ListValue[DestinationConfigurationAttributes] {
	return terra.ReferenceAsList[DestinationConfigurationAttributes](airc.ref.Append("destination_configuration"))
}

func (airc awsIvsRecordingConfigurationAttributes) ThumbnailConfiguration() terra.ListValue[ThumbnailConfigurationAttributes] {
	return terra.ReferenceAsList[ThumbnailConfigurationAttributes](airc.ref.Append("thumbnail_configuration"))
}

func (airc awsIvsRecordingConfigurationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](airc.ref.Append("timeouts"))
}

type awsIvsRecordingConfigurationState struct {
	Arn                             string                          `json:"arn"`
	Id                              string                          `json:"id"`
	Name                            string                          `json:"name"`
	RecordingReconnectWindowSeconds float64                         `json:"recording_reconnect_window_seconds"`
	State                           string                          `json:"state"`
	Tags                            map[string]string               `json:"tags"`
	TagsAll                         map[string]string               `json:"tags_all"`
	DestinationConfiguration        []DestinationConfigurationState `json:"destination_configuration"`
	ThumbnailConfiguration          []ThumbnailConfigurationState   `json:"thumbnail_configuration"`
	Timeouts                        *TimeoutsState                  `json:"timeouts"`
}
