// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_customer_gateway

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_customer_gateway.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCustomerGatewayState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acg *Resource) Type() string {
	return "aws_customer_gateway"
}

// LocalName returns the local name for [Resource].
func (acg *Resource) LocalName() string {
	return acg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acg *Resource) Configuration() interface{} {
	return acg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acg *Resource) Dependencies() terra.Dependencies {
	return acg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acg *Resource) LifecycleManagement() *terra.Lifecycle {
	return acg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acg *Resource) Attributes() awsCustomerGatewayAttributes {
	return awsCustomerGatewayAttributes{ref: terra.ReferenceResource(acg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acg *Resource) ImportState(state io.Reader) error {
	acg.state = &awsCustomerGatewayState{}
	if err := json.NewDecoder(state).Decode(acg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acg.Type(), acg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acg *Resource) State() (*awsCustomerGatewayState, bool) {
	return acg.state, acg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acg *Resource) StateMust() *awsCustomerGatewayState {
	if acg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acg.Type(), acg.LocalName()))
	}
	return acg.state
}

// Args contains the configurations for aws_customer_gateway.
type Args struct {
	// BgpAsn: string, required
	BgpAsn terra.StringValue `hcl:"bgp_asn,attr" validate:"required"`
	// CertificateArn: string, optional
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr"`
	// DeviceName: string, optional
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type awsCustomerGatewayAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_customer_gateway.
func (acg awsCustomerGatewayAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("arn"))
}

// BgpAsn returns a reference to field bgp_asn of aws_customer_gateway.
func (acg awsCustomerGatewayAttributes) BgpAsn() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("bgp_asn"))
}

// CertificateArn returns a reference to field certificate_arn of aws_customer_gateway.
func (acg awsCustomerGatewayAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("certificate_arn"))
}

// DeviceName returns a reference to field device_name of aws_customer_gateway.
func (acg awsCustomerGatewayAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("device_name"))
}

// Id returns a reference to field id of aws_customer_gateway.
func (acg awsCustomerGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("id"))
}

// IpAddress returns a reference to field ip_address of aws_customer_gateway.
func (acg awsCustomerGatewayAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("ip_address"))
}

// Tags returns a reference to field tags of aws_customer_gateway.
func (acg awsCustomerGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_customer_gateway.
func (acg awsCustomerGatewayAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acg.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_customer_gateway.
func (acg awsCustomerGatewayAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(acg.ref.Append("type"))
}

type awsCustomerGatewayState struct {
	Arn            string            `json:"arn"`
	BgpAsn         string            `json:"bgp_asn"`
	CertificateArn string            `json:"certificate_arn"`
	DeviceName     string            `json:"device_name"`
	Id             string            `json:"id"`
	IpAddress      string            `json:"ip_address"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
	Type           string            `json:"type"`
}
