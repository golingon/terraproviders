// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_alb

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_alb.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAlbState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aa *Resource) Type() string {
	return "aws_alb"
}

// LocalName returns the local name for [Resource].
func (aa *Resource) LocalName() string {
	return aa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aa *Resource) Configuration() interface{} {
	return aa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aa *Resource) Dependencies() terra.Dependencies {
	return aa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aa *Resource) Attributes() awsAlbAttributes {
	return awsAlbAttributes{ref: terra.ReferenceResource(aa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aa *Resource) ImportState(state io.Reader) error {
	aa.state = &awsAlbState{}
	if err := json.NewDecoder(state).Decode(aa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aa.Type(), aa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aa *Resource) State() (*awsAlbState, bool) {
	return aa.state, aa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aa *Resource) StateMust() *awsAlbState {
	if aa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aa.Type(), aa.LocalName()))
	}
	return aa.state
}

// Args contains the configurations for aws_alb.
type Args struct {
	// CustomerOwnedIpv4Pool: string, optional
	CustomerOwnedIpv4Pool terra.StringValue `hcl:"customer_owned_ipv4_pool,attr"`
	// DesyncMitigationMode: string, optional
	DesyncMitigationMode terra.StringValue `hcl:"desync_mitigation_mode,attr"`
	// DnsRecordClientRoutingPolicy: string, optional
	DnsRecordClientRoutingPolicy terra.StringValue `hcl:"dns_record_client_routing_policy,attr"`
	// DropInvalidHeaderFields: bool, optional
	DropInvalidHeaderFields terra.BoolValue `hcl:"drop_invalid_header_fields,attr"`
	// EnableCrossZoneLoadBalancing: bool, optional
	EnableCrossZoneLoadBalancing terra.BoolValue `hcl:"enable_cross_zone_load_balancing,attr"`
	// EnableDeletionProtection: bool, optional
	EnableDeletionProtection terra.BoolValue `hcl:"enable_deletion_protection,attr"`
	// EnableHttp2: bool, optional
	EnableHttp2 terra.BoolValue `hcl:"enable_http2,attr"`
	// EnableTlsVersionAndCipherSuiteHeaders: bool, optional
	EnableTlsVersionAndCipherSuiteHeaders terra.BoolValue `hcl:"enable_tls_version_and_cipher_suite_headers,attr"`
	// EnableWafFailOpen: bool, optional
	EnableWafFailOpen terra.BoolValue `hcl:"enable_waf_fail_open,attr"`
	// EnableXffClientPort: bool, optional
	EnableXffClientPort terra.BoolValue `hcl:"enable_xff_client_port,attr"`
	// EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic: string, optional
	EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic terra.StringValue `hcl:"enforce_security_group_inbound_rules_on_private_link_traffic,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdleTimeout: number, optional
	IdleTimeout terra.NumberValue `hcl:"idle_timeout,attr"`
	// Internal: bool, optional
	Internal terra.BoolValue `hcl:"internal,attr"`
	// IpAddressType: string, optional
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr"`
	// LoadBalancerType: string, optional
	LoadBalancerType terra.StringValue `hcl:"load_balancer_type,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// PreserveHostHeader: bool, optional
	PreserveHostHeader terra.BoolValue `hcl:"preserve_host_header,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Subnets: set of string, optional
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// XffHeaderProcessingMode: string, optional
	XffHeaderProcessingMode terra.StringValue `hcl:"xff_header_processing_mode,attr"`
	// AccessLogs: optional
	AccessLogs *AccessLogs `hcl:"access_logs,block"`
	// ConnectionLogs: optional
	ConnectionLogs *ConnectionLogs `hcl:"connection_logs,block"`
	// SubnetMapping: min=0
	SubnetMapping []SubnetMapping `hcl:"subnet_mapping,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsAlbAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_alb.
func (aa awsAlbAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("arn"))
}

// ArnSuffix returns a reference to field arn_suffix of aws_alb.
func (aa awsAlbAttributes) ArnSuffix() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("arn_suffix"))
}

// CustomerOwnedIpv4Pool returns a reference to field customer_owned_ipv4_pool of aws_alb.
func (aa awsAlbAttributes) CustomerOwnedIpv4Pool() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("customer_owned_ipv4_pool"))
}

// DesyncMitigationMode returns a reference to field desync_mitigation_mode of aws_alb.
func (aa awsAlbAttributes) DesyncMitigationMode() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("desync_mitigation_mode"))
}

// DnsName returns a reference to field dns_name of aws_alb.
func (aa awsAlbAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("dns_name"))
}

// DnsRecordClientRoutingPolicy returns a reference to field dns_record_client_routing_policy of aws_alb.
func (aa awsAlbAttributes) DnsRecordClientRoutingPolicy() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("dns_record_client_routing_policy"))
}

// DropInvalidHeaderFields returns a reference to field drop_invalid_header_fields of aws_alb.
func (aa awsAlbAttributes) DropInvalidHeaderFields() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("drop_invalid_header_fields"))
}

// EnableCrossZoneLoadBalancing returns a reference to field enable_cross_zone_load_balancing of aws_alb.
func (aa awsAlbAttributes) EnableCrossZoneLoadBalancing() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("enable_cross_zone_load_balancing"))
}

// EnableDeletionProtection returns a reference to field enable_deletion_protection of aws_alb.
func (aa awsAlbAttributes) EnableDeletionProtection() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("enable_deletion_protection"))
}

// EnableHttp2 returns a reference to field enable_http2 of aws_alb.
func (aa awsAlbAttributes) EnableHttp2() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("enable_http2"))
}

// EnableTlsVersionAndCipherSuiteHeaders returns a reference to field enable_tls_version_and_cipher_suite_headers of aws_alb.
func (aa awsAlbAttributes) EnableTlsVersionAndCipherSuiteHeaders() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("enable_tls_version_and_cipher_suite_headers"))
}

// EnableWafFailOpen returns a reference to field enable_waf_fail_open of aws_alb.
func (aa awsAlbAttributes) EnableWafFailOpen() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("enable_waf_fail_open"))
}

// EnableXffClientPort returns a reference to field enable_xff_client_port of aws_alb.
func (aa awsAlbAttributes) EnableXffClientPort() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("enable_xff_client_port"))
}

// EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic returns a reference to field enforce_security_group_inbound_rules_on_private_link_traffic of aws_alb.
func (aa awsAlbAttributes) EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("enforce_security_group_inbound_rules_on_private_link_traffic"))
}

// Id returns a reference to field id of aws_alb.
func (aa awsAlbAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("id"))
}

// IdleTimeout returns a reference to field idle_timeout of aws_alb.
func (aa awsAlbAttributes) IdleTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(aa.ref.Append("idle_timeout"))
}

// Internal returns a reference to field internal of aws_alb.
func (aa awsAlbAttributes) Internal() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("internal"))
}

// IpAddressType returns a reference to field ip_address_type of aws_alb.
func (aa awsAlbAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("ip_address_type"))
}

// LoadBalancerType returns a reference to field load_balancer_type of aws_alb.
func (aa awsAlbAttributes) LoadBalancerType() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("load_balancer_type"))
}

// Name returns a reference to field name of aws_alb.
func (aa awsAlbAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_alb.
func (aa awsAlbAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("name_prefix"))
}

// PreserveHostHeader returns a reference to field preserve_host_header of aws_alb.
func (aa awsAlbAttributes) PreserveHostHeader() terra.BoolValue {
	return terra.ReferenceAsBool(aa.ref.Append("preserve_host_header"))
}

// SecurityGroups returns a reference to field security_groups of aws_alb.
func (aa awsAlbAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aa.ref.Append("security_groups"))
}

// Subnets returns a reference to field subnets of aws_alb.
func (aa awsAlbAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aa.ref.Append("subnets"))
}

// Tags returns a reference to field tags of aws_alb.
func (aa awsAlbAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aa.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_alb.
func (aa awsAlbAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aa.ref.Append("tags_all"))
}

// VpcId returns a reference to field vpc_id of aws_alb.
func (aa awsAlbAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("vpc_id"))
}

// XffHeaderProcessingMode returns a reference to field xff_header_processing_mode of aws_alb.
func (aa awsAlbAttributes) XffHeaderProcessingMode() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("xff_header_processing_mode"))
}

// ZoneId returns a reference to field zone_id of aws_alb.
func (aa awsAlbAttributes) ZoneId() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("zone_id"))
}

func (aa awsAlbAttributes) AccessLogs() terra.ListValue[AccessLogsAttributes] {
	return terra.ReferenceAsList[AccessLogsAttributes](aa.ref.Append("access_logs"))
}

func (aa awsAlbAttributes) ConnectionLogs() terra.ListValue[ConnectionLogsAttributes] {
	return terra.ReferenceAsList[ConnectionLogsAttributes](aa.ref.Append("connection_logs"))
}

func (aa awsAlbAttributes) SubnetMapping() terra.SetValue[SubnetMappingAttributes] {
	return terra.ReferenceAsSet[SubnetMappingAttributes](aa.ref.Append("subnet_mapping"))
}

func (aa awsAlbAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aa.ref.Append("timeouts"))
}

type awsAlbState struct {
	Arn                                                  string                `json:"arn"`
	ArnSuffix                                            string                `json:"arn_suffix"`
	CustomerOwnedIpv4Pool                                string                `json:"customer_owned_ipv4_pool"`
	DesyncMitigationMode                                 string                `json:"desync_mitigation_mode"`
	DnsName                                              string                `json:"dns_name"`
	DnsRecordClientRoutingPolicy                         string                `json:"dns_record_client_routing_policy"`
	DropInvalidHeaderFields                              bool                  `json:"drop_invalid_header_fields"`
	EnableCrossZoneLoadBalancing                         bool                  `json:"enable_cross_zone_load_balancing"`
	EnableDeletionProtection                             bool                  `json:"enable_deletion_protection"`
	EnableHttp2                                          bool                  `json:"enable_http2"`
	EnableTlsVersionAndCipherSuiteHeaders                bool                  `json:"enable_tls_version_and_cipher_suite_headers"`
	EnableWafFailOpen                                    bool                  `json:"enable_waf_fail_open"`
	EnableXffClientPort                                  bool                  `json:"enable_xff_client_port"`
	EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic string                `json:"enforce_security_group_inbound_rules_on_private_link_traffic"`
	Id                                                   string                `json:"id"`
	IdleTimeout                                          float64               `json:"idle_timeout"`
	Internal                                             bool                  `json:"internal"`
	IpAddressType                                        string                `json:"ip_address_type"`
	LoadBalancerType                                     string                `json:"load_balancer_type"`
	Name                                                 string                `json:"name"`
	NamePrefix                                           string                `json:"name_prefix"`
	PreserveHostHeader                                   bool                  `json:"preserve_host_header"`
	SecurityGroups                                       []string              `json:"security_groups"`
	Subnets                                              []string              `json:"subnets"`
	Tags                                                 map[string]string     `json:"tags"`
	TagsAll                                              map[string]string     `json:"tags_all"`
	VpcId                                                string                `json:"vpc_id"`
	XffHeaderProcessingMode                              string                `json:"xff_header_processing_mode"`
	ZoneId                                               string                `json:"zone_id"`
	AccessLogs                                           []AccessLogsState     `json:"access_logs"`
	ConnectionLogs                                       []ConnectionLogsState `json:"connection_logs"`
	SubnetMapping                                        []SubnetMappingState  `json:"subnet_mapping"`
	Timeouts                                             *TimeoutsState        `json:"timeouts"`
}
