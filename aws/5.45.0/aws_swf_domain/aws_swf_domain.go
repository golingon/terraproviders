// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_swf_domain

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_swf_domain.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSwfDomainState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asd *Resource) Type() string {
	return "aws_swf_domain"
}

// LocalName returns the local name for [Resource].
func (asd *Resource) LocalName() string {
	return asd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asd *Resource) Configuration() interface{} {
	return asd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asd *Resource) Dependencies() terra.Dependencies {
	return asd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asd *Resource) LifecycleManagement() *terra.Lifecycle {
	return asd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asd *Resource) Attributes() awsSwfDomainAttributes {
	return awsSwfDomainAttributes{ref: terra.ReferenceResource(asd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asd *Resource) ImportState(state io.Reader) error {
	asd.state = &awsSwfDomainState{}
	if err := json.NewDecoder(state).Decode(asd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asd.Type(), asd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asd *Resource) State() (*awsSwfDomainState, bool) {
	return asd.state, asd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asd *Resource) StateMust() *awsSwfDomainState {
	if asd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asd.Type(), asd.LocalName()))
	}
	return asd.state
}

// Args contains the configurations for aws_swf_domain.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// WorkflowExecutionRetentionPeriodInDays: string, required
	WorkflowExecutionRetentionPeriodInDays terra.StringValue `hcl:"workflow_execution_retention_period_in_days,attr" validate:"required"`
}

type awsSwfDomainAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_swf_domain.
func (asd awsSwfDomainAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asd.ref.Append("arn"))
}

// Description returns a reference to field description of aws_swf_domain.
func (asd awsSwfDomainAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asd.ref.Append("description"))
}

// Id returns a reference to field id of aws_swf_domain.
func (asd awsSwfDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asd.ref.Append("id"))
}

// Name returns a reference to field name of aws_swf_domain.
func (asd awsSwfDomainAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asd.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_swf_domain.
func (asd awsSwfDomainAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(asd.ref.Append("name_prefix"))
}

// Tags returns a reference to field tags of aws_swf_domain.
func (asd awsSwfDomainAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asd.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_swf_domain.
func (asd awsSwfDomainAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asd.ref.Append("tags_all"))
}

// WorkflowExecutionRetentionPeriodInDays returns a reference to field workflow_execution_retention_period_in_days of aws_swf_domain.
func (asd awsSwfDomainAttributes) WorkflowExecutionRetentionPeriodInDays() terra.StringValue {
	return terra.ReferenceAsString(asd.ref.Append("workflow_execution_retention_period_in_days"))
}

type awsSwfDomainState struct {
	Arn                                    string            `json:"arn"`
	Description                            string            `json:"description"`
	Id                                     string            `json:"id"`
	Name                                   string            `json:"name"`
	NamePrefix                             string            `json:"name_prefix"`
	Tags                                   map[string]string `json:"tags"`
	TagsAll                                map[string]string `json:"tags_all"`
	WorkflowExecutionRetentionPeriodInDays string            `json:"workflow_execution_retention_period_in_days"`
}
