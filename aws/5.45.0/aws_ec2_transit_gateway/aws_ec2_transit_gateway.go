// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_transit_gateway

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_transit_gateway.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2TransitGatewayState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aetg *Resource) Type() string {
	return "aws_ec2_transit_gateway"
}

// LocalName returns the local name for [Resource].
func (aetg *Resource) LocalName() string {
	return aetg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aetg *Resource) Configuration() interface{} {
	return aetg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aetg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aetg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aetg *Resource) Dependencies() terra.Dependencies {
	return aetg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aetg *Resource) LifecycleManagement() *terra.Lifecycle {
	return aetg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aetg *Resource) Attributes() awsEc2TransitGatewayAttributes {
	return awsEc2TransitGatewayAttributes{ref: terra.ReferenceResource(aetg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aetg *Resource) ImportState(state io.Reader) error {
	aetg.state = &awsEc2TransitGatewayState{}
	if err := json.NewDecoder(state).Decode(aetg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aetg.Type(), aetg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aetg *Resource) State() (*awsEc2TransitGatewayState, bool) {
	return aetg.state, aetg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aetg *Resource) StateMust() *awsEc2TransitGatewayState {
	if aetg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aetg.Type(), aetg.LocalName()))
	}
	return aetg.state
}

// Args contains the configurations for aws_ec2_transit_gateway.
type Args struct {
	// AmazonSideAsn: number, optional
	AmazonSideAsn terra.NumberValue `hcl:"amazon_side_asn,attr"`
	// AutoAcceptSharedAttachments: string, optional
	AutoAcceptSharedAttachments terra.StringValue `hcl:"auto_accept_shared_attachments,attr"`
	// DefaultRouteTableAssociation: string, optional
	DefaultRouteTableAssociation terra.StringValue `hcl:"default_route_table_association,attr"`
	// DefaultRouteTablePropagation: string, optional
	DefaultRouteTablePropagation terra.StringValue `hcl:"default_route_table_propagation,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DnsSupport: string, optional
	DnsSupport terra.StringValue `hcl:"dns_support,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MulticastSupport: string, optional
	MulticastSupport terra.StringValue `hcl:"multicast_support,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitGatewayCidrBlocks: set of string, optional
	TransitGatewayCidrBlocks terra.SetValue[terra.StringValue] `hcl:"transit_gateway_cidr_blocks,attr"`
	// VpnEcmpSupport: string, optional
	VpnEcmpSupport terra.StringValue `hcl:"vpn_ecmp_support,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEc2TransitGatewayAttributes struct {
	ref terra.Reference
}

// AmazonSideAsn returns a reference to field amazon_side_asn of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) AmazonSideAsn() terra.NumberValue {
	return terra.ReferenceAsNumber(aetg.ref.Append("amazon_side_asn"))
}

// Arn returns a reference to field arn of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aetg.ref.Append("arn"))
}

// AssociationDefaultRouteTableId returns a reference to field association_default_route_table_id of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) AssociationDefaultRouteTableId() terra.StringValue {
	return terra.ReferenceAsString(aetg.ref.Append("association_default_route_table_id"))
}

// AutoAcceptSharedAttachments returns a reference to field auto_accept_shared_attachments of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) AutoAcceptSharedAttachments() terra.StringValue {
	return terra.ReferenceAsString(aetg.ref.Append("auto_accept_shared_attachments"))
}

// DefaultRouteTableAssociation returns a reference to field default_route_table_association of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) DefaultRouteTableAssociation() terra.StringValue {
	return terra.ReferenceAsString(aetg.ref.Append("default_route_table_association"))
}

// DefaultRouteTablePropagation returns a reference to field default_route_table_propagation of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) DefaultRouteTablePropagation() terra.StringValue {
	return terra.ReferenceAsString(aetg.ref.Append("default_route_table_propagation"))
}

// Description returns a reference to field description of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aetg.ref.Append("description"))
}

// DnsSupport returns a reference to field dns_support of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) DnsSupport() terra.StringValue {
	return terra.ReferenceAsString(aetg.ref.Append("dns_support"))
}

// Id returns a reference to field id of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aetg.ref.Append("id"))
}

// MulticastSupport returns a reference to field multicast_support of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) MulticastSupport() terra.StringValue {
	return terra.ReferenceAsString(aetg.ref.Append("multicast_support"))
}

// OwnerId returns a reference to field owner_id of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(aetg.ref.Append("owner_id"))
}

// PropagationDefaultRouteTableId returns a reference to field propagation_default_route_table_id of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) PropagationDefaultRouteTableId() terra.StringValue {
	return terra.ReferenceAsString(aetg.ref.Append("propagation_default_route_table_id"))
}

// Tags returns a reference to field tags of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetg.ref.Append("tags_all"))
}

// TransitGatewayCidrBlocks returns a reference to field transit_gateway_cidr_blocks of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) TransitGatewayCidrBlocks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aetg.ref.Append("transit_gateway_cidr_blocks"))
}

// VpnEcmpSupport returns a reference to field vpn_ecmp_support of aws_ec2_transit_gateway.
func (aetg awsEc2TransitGatewayAttributes) VpnEcmpSupport() terra.StringValue {
	return terra.ReferenceAsString(aetg.ref.Append("vpn_ecmp_support"))
}

func (aetg awsEc2TransitGatewayAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aetg.ref.Append("timeouts"))
}

type awsEc2TransitGatewayState struct {
	AmazonSideAsn                  float64           `json:"amazon_side_asn"`
	Arn                            string            `json:"arn"`
	AssociationDefaultRouteTableId string            `json:"association_default_route_table_id"`
	AutoAcceptSharedAttachments    string            `json:"auto_accept_shared_attachments"`
	DefaultRouteTableAssociation   string            `json:"default_route_table_association"`
	DefaultRouteTablePropagation   string            `json:"default_route_table_propagation"`
	Description                    string            `json:"description"`
	DnsSupport                     string            `json:"dns_support"`
	Id                             string            `json:"id"`
	MulticastSupport               string            `json:"multicast_support"`
	OwnerId                        string            `json:"owner_id"`
	PropagationDefaultRouteTableId string            `json:"propagation_default_route_table_id"`
	Tags                           map[string]string `json:"tags"`
	TagsAll                        map[string]string `json:"tags_all"`
	TransitGatewayCidrBlocks       []string          `json:"transit_gateway_cidr_blocks"`
	VpnEcmpSupport                 string            `json:"vpn_ecmp_support"`
	Timeouts                       *TimeoutsState    `json:"timeouts"`
}
