// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_dhcp_options_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpc_dhcp_options_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpcDhcpOptionsAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avdoa *Resource) Type() string {
	return "aws_vpc_dhcp_options_association"
}

// LocalName returns the local name for [Resource].
func (avdoa *Resource) LocalName() string {
	return avdoa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avdoa *Resource) Configuration() interface{} {
	return avdoa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avdoa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avdoa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avdoa *Resource) Dependencies() terra.Dependencies {
	return avdoa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avdoa *Resource) LifecycleManagement() *terra.Lifecycle {
	return avdoa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avdoa *Resource) Attributes() awsVpcDhcpOptionsAssociationAttributes {
	return awsVpcDhcpOptionsAssociationAttributes{ref: terra.ReferenceResource(avdoa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avdoa *Resource) ImportState(state io.Reader) error {
	avdoa.state = &awsVpcDhcpOptionsAssociationState{}
	if err := json.NewDecoder(state).Decode(avdoa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avdoa.Type(), avdoa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avdoa *Resource) State() (*awsVpcDhcpOptionsAssociationState, bool) {
	return avdoa.state, avdoa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avdoa *Resource) StateMust() *awsVpcDhcpOptionsAssociationState {
	if avdoa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avdoa.Type(), avdoa.LocalName()))
	}
	return avdoa.state
}

// Args contains the configurations for aws_vpc_dhcp_options_association.
type Args struct {
	// DhcpOptionsId: string, required
	DhcpOptionsId terra.StringValue `hcl:"dhcp_options_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
}

type awsVpcDhcpOptionsAssociationAttributes struct {
	ref terra.Reference
}

// DhcpOptionsId returns a reference to field dhcp_options_id of aws_vpc_dhcp_options_association.
func (avdoa awsVpcDhcpOptionsAssociationAttributes) DhcpOptionsId() terra.StringValue {
	return terra.ReferenceAsString(avdoa.ref.Append("dhcp_options_id"))
}

// Id returns a reference to field id of aws_vpc_dhcp_options_association.
func (avdoa awsVpcDhcpOptionsAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avdoa.ref.Append("id"))
}

// VpcId returns a reference to field vpc_id of aws_vpc_dhcp_options_association.
func (avdoa awsVpcDhcpOptionsAssociationAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(avdoa.ref.Append("vpc_id"))
}

type awsVpcDhcpOptionsAssociationState struct {
	DhcpOptionsId string `json:"dhcp_options_id"`
	Id            string `json:"id"`
	VpcId         string `json:"vpc_id"`
}
