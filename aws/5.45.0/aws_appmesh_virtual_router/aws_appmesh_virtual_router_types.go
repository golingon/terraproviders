// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appmesh_virtual_router

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Spec struct {
	// SpecListener: min=0
	Listener []SpecListener `hcl:"listener,block" validate:"min=0"`
}

type SpecListener struct {
	// SpecListenerPortMapping: required
	PortMapping *SpecListenerPortMapping `hcl:"port_mapping,block" validate:"required"`
}

type SpecListenerPortMapping struct {
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) Listener() terra.ListValue[SpecListenerAttributes] {
	return terra.ReferenceAsList[SpecListenerAttributes](s.ref.Append("listener"))
}

type SpecListenerAttributes struct {
	ref terra.Reference
}

func (l SpecListenerAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l SpecListenerAttributes) InternalWithRef(ref terra.Reference) SpecListenerAttributes {
	return SpecListenerAttributes{ref: ref}
}

func (l SpecListenerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l SpecListenerAttributes) PortMapping() terra.ListValue[SpecListenerPortMappingAttributes] {
	return terra.ReferenceAsList[SpecListenerPortMappingAttributes](l.ref.Append("port_mapping"))
}

type SpecListenerPortMappingAttributes struct {
	ref terra.Reference
}

func (pm SpecListenerPortMappingAttributes) InternalRef() (terra.Reference, error) {
	return pm.ref, nil
}

func (pm SpecListenerPortMappingAttributes) InternalWithRef(ref terra.Reference) SpecListenerPortMappingAttributes {
	return SpecListenerPortMappingAttributes{ref: ref}
}

func (pm SpecListenerPortMappingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pm.ref.InternalTokens()
}

func (pm SpecListenerPortMappingAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(pm.ref.Append("port"))
}

func (pm SpecListenerPortMappingAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("protocol"))
}

type SpecState struct {
	Listener []SpecListenerState `json:"listener"`
}

type SpecListenerState struct {
	PortMapping []SpecListenerPortMappingState `json:"port_mapping"`
}

type SpecListenerPortMappingState struct {
	Port     float64 `json:"port"`
	Protocol string  `json:"protocol"`
}
