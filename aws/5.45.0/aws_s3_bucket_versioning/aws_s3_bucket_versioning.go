// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_versioning

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3_bucket_versioning.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3BucketVersioningState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asbv *Resource) Type() string {
	return "aws_s3_bucket_versioning"
}

// LocalName returns the local name for [Resource].
func (asbv *Resource) LocalName() string {
	return asbv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asbv *Resource) Configuration() interface{} {
	return asbv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asbv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asbv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asbv *Resource) Dependencies() terra.Dependencies {
	return asbv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asbv *Resource) LifecycleManagement() *terra.Lifecycle {
	return asbv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asbv *Resource) Attributes() awsS3BucketVersioningAttributes {
	return awsS3BucketVersioningAttributes{ref: terra.ReferenceResource(asbv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asbv *Resource) ImportState(state io.Reader) error {
	asbv.state = &awsS3BucketVersioningState{}
	if err := json.NewDecoder(state).Decode(asbv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asbv.Type(), asbv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asbv *Resource) State() (*awsS3BucketVersioningState, bool) {
	return asbv.state, asbv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asbv *Resource) StateMust() *awsS3BucketVersioningState {
	if asbv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asbv.Type(), asbv.LocalName()))
	}
	return asbv.state
}

// Args contains the configurations for aws_s3_bucket_versioning.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Mfa: string, optional
	Mfa terra.StringValue `hcl:"mfa,attr"`
	// VersioningConfiguration: required
	VersioningConfiguration *VersioningConfiguration `hcl:"versioning_configuration,block" validate:"required"`
}

type awsS3BucketVersioningAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of aws_s3_bucket_versioning.
func (asbv awsS3BucketVersioningAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(asbv.ref.Append("bucket"))
}

// ExpectedBucketOwner returns a reference to field expected_bucket_owner of aws_s3_bucket_versioning.
func (asbv awsS3BucketVersioningAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceAsString(asbv.ref.Append("expected_bucket_owner"))
}

// Id returns a reference to field id of aws_s3_bucket_versioning.
func (asbv awsS3BucketVersioningAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asbv.ref.Append("id"))
}

// Mfa returns a reference to field mfa of aws_s3_bucket_versioning.
func (asbv awsS3BucketVersioningAttributes) Mfa() terra.StringValue {
	return terra.ReferenceAsString(asbv.ref.Append("mfa"))
}

func (asbv awsS3BucketVersioningAttributes) VersioningConfiguration() terra.ListValue[VersioningConfigurationAttributes] {
	return terra.ReferenceAsList[VersioningConfigurationAttributes](asbv.ref.Append("versioning_configuration"))
}

type awsS3BucketVersioningState struct {
	Bucket                  string                         `json:"bucket"`
	ExpectedBucketOwner     string                         `json:"expected_bucket_owner"`
	Id                      string                         `json:"id"`
	Mfa                     string                         `json:"mfa"`
	VersioningConfiguration []VersioningConfigurationState `json:"versioning_configuration"`
}
