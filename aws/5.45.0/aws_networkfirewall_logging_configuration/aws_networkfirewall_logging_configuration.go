// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkfirewall_logging_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_networkfirewall_logging_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkfirewallLoggingConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anlc *Resource) Type() string {
	return "aws_networkfirewall_logging_configuration"
}

// LocalName returns the local name for [Resource].
func (anlc *Resource) LocalName() string {
	return anlc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anlc *Resource) Configuration() interface{} {
	return anlc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anlc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anlc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anlc *Resource) Dependencies() terra.Dependencies {
	return anlc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anlc *Resource) LifecycleManagement() *terra.Lifecycle {
	return anlc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anlc *Resource) Attributes() awsNetworkfirewallLoggingConfigurationAttributes {
	return awsNetworkfirewallLoggingConfigurationAttributes{ref: terra.ReferenceResource(anlc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anlc *Resource) ImportState(state io.Reader) error {
	anlc.state = &awsNetworkfirewallLoggingConfigurationState{}
	if err := json.NewDecoder(state).Decode(anlc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anlc.Type(), anlc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anlc *Resource) State() (*awsNetworkfirewallLoggingConfigurationState, bool) {
	return anlc.state, anlc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anlc *Resource) StateMust() *awsNetworkfirewallLoggingConfigurationState {
	if anlc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anlc.Type(), anlc.LocalName()))
	}
	return anlc.state
}

// Args contains the configurations for aws_networkfirewall_logging_configuration.
type Args struct {
	// FirewallArn: string, required
	FirewallArn terra.StringValue `hcl:"firewall_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoggingConfiguration: required
	LoggingConfiguration *LoggingConfiguration `hcl:"logging_configuration,block" validate:"required"`
}

type awsNetworkfirewallLoggingConfigurationAttributes struct {
	ref terra.Reference
}

// FirewallArn returns a reference to field firewall_arn of aws_networkfirewall_logging_configuration.
func (anlc awsNetworkfirewallLoggingConfigurationAttributes) FirewallArn() terra.StringValue {
	return terra.ReferenceAsString(anlc.ref.Append("firewall_arn"))
}

// Id returns a reference to field id of aws_networkfirewall_logging_configuration.
func (anlc awsNetworkfirewallLoggingConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anlc.ref.Append("id"))
}

func (anlc awsNetworkfirewallLoggingConfigurationAttributes) LoggingConfiguration() terra.ListValue[LoggingConfigurationAttributes] {
	return terra.ReferenceAsList[LoggingConfigurationAttributes](anlc.ref.Append("logging_configuration"))
}

type awsNetworkfirewallLoggingConfigurationState struct {
	FirewallArn          string                      `json:"firewall_arn"`
	Id                   string                      `json:"id"`
	LoggingConfiguration []LoggingConfigurationState `json:"logging_configuration"`
}
