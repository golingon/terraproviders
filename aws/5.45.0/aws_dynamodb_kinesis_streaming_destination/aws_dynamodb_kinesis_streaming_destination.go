// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dynamodb_kinesis_streaming_destination

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dynamodb_kinesis_streaming_destination.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDynamodbKinesisStreamingDestinationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adksd *Resource) Type() string {
	return "aws_dynamodb_kinesis_streaming_destination"
}

// LocalName returns the local name for [Resource].
func (adksd *Resource) LocalName() string {
	return adksd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adksd *Resource) Configuration() interface{} {
	return adksd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adksd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adksd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adksd *Resource) Dependencies() terra.Dependencies {
	return adksd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adksd *Resource) LifecycleManagement() *terra.Lifecycle {
	return adksd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adksd *Resource) Attributes() awsDynamodbKinesisStreamingDestinationAttributes {
	return awsDynamodbKinesisStreamingDestinationAttributes{ref: terra.ReferenceResource(adksd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adksd *Resource) ImportState(state io.Reader) error {
	adksd.state = &awsDynamodbKinesisStreamingDestinationState{}
	if err := json.NewDecoder(state).Decode(adksd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adksd.Type(), adksd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adksd *Resource) State() (*awsDynamodbKinesisStreamingDestinationState, bool) {
	return adksd.state, adksd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adksd *Resource) StateMust() *awsDynamodbKinesisStreamingDestinationState {
	if adksd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adksd.Type(), adksd.LocalName()))
	}
	return adksd.state
}

// Args contains the configurations for aws_dynamodb_kinesis_streaming_destination.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// StreamArn: string, required
	StreamArn terra.StringValue `hcl:"stream_arn,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type awsDynamodbKinesisStreamingDestinationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_dynamodb_kinesis_streaming_destination.
func (adksd awsDynamodbKinesisStreamingDestinationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adksd.ref.Append("id"))
}

// StreamArn returns a reference to field stream_arn of aws_dynamodb_kinesis_streaming_destination.
func (adksd awsDynamodbKinesisStreamingDestinationAttributes) StreamArn() terra.StringValue {
	return terra.ReferenceAsString(adksd.ref.Append("stream_arn"))
}

// TableName returns a reference to field table_name of aws_dynamodb_kinesis_streaming_destination.
func (adksd awsDynamodbKinesisStreamingDestinationAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(adksd.ref.Append("table_name"))
}

type awsDynamodbKinesisStreamingDestinationState struct {
	Id        string `json:"id"`
	StreamArn string `json:"stream_arn"`
	TableName string `json:"table_name"`
}
