// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lightsail_lb_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lightsail_lb_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLightsailLbCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (allc *Resource) Type() string {
	return "aws_lightsail_lb_certificate"
}

// LocalName returns the local name for [Resource].
func (allc *Resource) LocalName() string {
	return allc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (allc *Resource) Configuration() interface{} {
	return allc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (allc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(allc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (allc *Resource) Dependencies() terra.Dependencies {
	return allc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (allc *Resource) LifecycleManagement() *terra.Lifecycle {
	return allc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (allc *Resource) Attributes() awsLightsailLbCertificateAttributes {
	return awsLightsailLbCertificateAttributes{ref: terra.ReferenceResource(allc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (allc *Resource) ImportState(state io.Reader) error {
	allc.state = &awsLightsailLbCertificateState{}
	if err := json.NewDecoder(state).Decode(allc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", allc.Type(), allc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (allc *Resource) State() (*awsLightsailLbCertificateState, bool) {
	return allc.state, allc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (allc *Resource) StateMust() *awsLightsailLbCertificateState {
	if allc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", allc.Type(), allc.LocalName()))
	}
	return allc.state
}

// Args contains the configurations for aws_lightsail_lb_certificate.
type Args struct {
	// DomainName: string, optional
	DomainName terra.StringValue `hcl:"domain_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LbName: string, required
	LbName terra.StringValue `hcl:"lb_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubjectAlternativeNames: set of string, optional
	SubjectAlternativeNames terra.SetValue[terra.StringValue] `hcl:"subject_alternative_names,attr"`
}

type awsLightsailLbCertificateAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_lightsail_lb_certificate.
func (allc awsLightsailLbCertificateAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("arn"))
}

// CreatedAt returns a reference to field created_at of aws_lightsail_lb_certificate.
func (allc awsLightsailLbCertificateAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("created_at"))
}

// DomainName returns a reference to field domain_name of aws_lightsail_lb_certificate.
func (allc awsLightsailLbCertificateAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_lightsail_lb_certificate.
func (allc awsLightsailLbCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("id"))
}

// LbName returns a reference to field lb_name of aws_lightsail_lb_certificate.
func (allc awsLightsailLbCertificateAttributes) LbName() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("lb_name"))
}

// Name returns a reference to field name of aws_lightsail_lb_certificate.
func (allc awsLightsailLbCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("name"))
}

// SubjectAlternativeNames returns a reference to field subject_alternative_names of aws_lightsail_lb_certificate.
func (allc awsLightsailLbCertificateAttributes) SubjectAlternativeNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](allc.ref.Append("subject_alternative_names"))
}

// SupportCode returns a reference to field support_code of aws_lightsail_lb_certificate.
func (allc awsLightsailLbCertificateAttributes) SupportCode() terra.StringValue {
	return terra.ReferenceAsString(allc.ref.Append("support_code"))
}

func (allc awsLightsailLbCertificateAttributes) DomainValidationRecords() terra.SetValue[DomainValidationRecordsAttributes] {
	return terra.ReferenceAsSet[DomainValidationRecordsAttributes](allc.ref.Append("domain_validation_records"))
}

type awsLightsailLbCertificateState struct {
	Arn                     string                         `json:"arn"`
	CreatedAt               string                         `json:"created_at"`
	DomainName              string                         `json:"domain_name"`
	Id                      string                         `json:"id"`
	LbName                  string                         `json:"lb_name"`
	Name                    string                         `json:"name"`
	SubjectAlternativeNames []string                       `json:"subject_alternative_names"`
	SupportCode             string                         `json:"support_code"`
	DomainValidationRecords []DomainValidationRecordsState `json:"domain_validation_records"`
}
