// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_dashboard

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_quicksight_dashboard.
type Resource struct {
	Name      string
	Args      Args
	state     *awsQuicksightDashboardState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aqd *Resource) Type() string {
	return "aws_quicksight_dashboard"
}

// LocalName returns the local name for [Resource].
func (aqd *Resource) LocalName() string {
	return aqd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aqd *Resource) Configuration() interface{} {
	return aqd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aqd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aqd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aqd *Resource) Dependencies() terra.Dependencies {
	return aqd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aqd *Resource) LifecycleManagement() *terra.Lifecycle {
	return aqd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aqd *Resource) Attributes() awsQuicksightDashboardAttributes {
	return awsQuicksightDashboardAttributes{ref: terra.ReferenceResource(aqd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aqd *Resource) ImportState(state io.Reader) error {
	aqd.state = &awsQuicksightDashboardState{}
	if err := json.NewDecoder(state).Decode(aqd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aqd.Type(), aqd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aqd *Resource) State() (*awsQuicksightDashboardState, bool) {
	return aqd.state, aqd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aqd *Resource) StateMust() *awsQuicksightDashboardState {
	if aqd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aqd.Type(), aqd.LocalName()))
	}
	return aqd.state
}

// Args contains the configurations for aws_quicksight_dashboard.
type Args struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// DashboardId: string, required
	DashboardId terra.StringValue `hcl:"dashboard_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ThemeArn: string, optional
	ThemeArn terra.StringValue `hcl:"theme_arn,attr"`
	// VersionDescription: string, required
	VersionDescription terra.StringValue `hcl:"version_description,attr" validate:"required"`
	// DashboardPublishOptions: optional
	DashboardPublishOptions *DashboardPublishOptions `hcl:"dashboard_publish_options,block"`
	// Definition: optional
	Definition *Definition `hcl:"definition,block"`
	// Parameters: optional
	Parameters *Parameters `hcl:"parameters,block"`
	// Permissions: min=0,max=64
	Permissions []Permissions `hcl:"permissions,block" validate:"min=0,max=64"`
	// SourceEntity: optional
	SourceEntity *SourceEntity `hcl:"source_entity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsQuicksightDashboardAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aqd.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(aqd.ref.Append("aws_account_id"))
}

// CreatedTime returns a reference to field created_time of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(aqd.ref.Append("created_time"))
}

// DashboardId returns a reference to field dashboard_id of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) DashboardId() terra.StringValue {
	return terra.ReferenceAsString(aqd.ref.Append("dashboard_id"))
}

// Id returns a reference to field id of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aqd.ref.Append("id"))
}

// LastPublishedTime returns a reference to field last_published_time of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) LastPublishedTime() terra.StringValue {
	return terra.ReferenceAsString(aqd.ref.Append("last_published_time"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(aqd.ref.Append("last_updated_time"))
}

// Name returns a reference to field name of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aqd.ref.Append("name"))
}

// SourceEntityArn returns a reference to field source_entity_arn of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) SourceEntityArn() terra.StringValue {
	return terra.ReferenceAsString(aqd.ref.Append("source_entity_arn"))
}

// Status returns a reference to field status of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aqd.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqd.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqd.ref.Append("tags_all"))
}

// ThemeArn returns a reference to field theme_arn of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) ThemeArn() terra.StringValue {
	return terra.ReferenceAsString(aqd.ref.Append("theme_arn"))
}

// VersionDescription returns a reference to field version_description of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) VersionDescription() terra.StringValue {
	return terra.ReferenceAsString(aqd.ref.Append("version_description"))
}

// VersionNumber returns a reference to field version_number of aws_quicksight_dashboard.
func (aqd awsQuicksightDashboardAttributes) VersionNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(aqd.ref.Append("version_number"))
}

func (aqd awsQuicksightDashboardAttributes) DashboardPublishOptions() terra.ListValue[DashboardPublishOptionsAttributes] {
	return terra.ReferenceAsList[DashboardPublishOptionsAttributes](aqd.ref.Append("dashboard_publish_options"))
}

func (aqd awsQuicksightDashboardAttributes) Definition() terra.ListValue[DefinitionAttributes] {
	return terra.ReferenceAsList[DefinitionAttributes](aqd.ref.Append("definition"))
}

func (aqd awsQuicksightDashboardAttributes) Parameters() terra.ListValue[ParametersAttributes] {
	return terra.ReferenceAsList[ParametersAttributes](aqd.ref.Append("parameters"))
}

func (aqd awsQuicksightDashboardAttributes) Permissions() terra.SetValue[PermissionsAttributes] {
	return terra.ReferenceAsSet[PermissionsAttributes](aqd.ref.Append("permissions"))
}

func (aqd awsQuicksightDashboardAttributes) SourceEntity() terra.ListValue[SourceEntityAttributes] {
	return terra.ReferenceAsList[SourceEntityAttributes](aqd.ref.Append("source_entity"))
}

func (aqd awsQuicksightDashboardAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aqd.ref.Append("timeouts"))
}

type awsQuicksightDashboardState struct {
	Arn                     string                         `json:"arn"`
	AwsAccountId            string                         `json:"aws_account_id"`
	CreatedTime             string                         `json:"created_time"`
	DashboardId             string                         `json:"dashboard_id"`
	Id                      string                         `json:"id"`
	LastPublishedTime       string                         `json:"last_published_time"`
	LastUpdatedTime         string                         `json:"last_updated_time"`
	Name                    string                         `json:"name"`
	SourceEntityArn         string                         `json:"source_entity_arn"`
	Status                  string                         `json:"status"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	ThemeArn                string                         `json:"theme_arn"`
	VersionDescription      string                         `json:"version_description"`
	VersionNumber           float64                        `json:"version_number"`
	DashboardPublishOptions []DashboardPublishOptionsState `json:"dashboard_publish_options"`
	Definition              []DefinitionState              `json:"definition"`
	Parameters              []ParametersState              `json:"parameters"`
	Permissions             []PermissionsState             `json:"permissions"`
	SourceEntity            []SourceEntityState            `json:"source_entity"`
	Timeouts                *TimeoutsState                 `json:"timeouts"`
}
