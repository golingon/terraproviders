// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dms_replication_subnet_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dms_replication_subnet_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDmsReplicationSubnetGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adrsg *Resource) Type() string {
	return "aws_dms_replication_subnet_group"
}

// LocalName returns the local name for [Resource].
func (adrsg *Resource) LocalName() string {
	return adrsg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adrsg *Resource) Configuration() interface{} {
	return adrsg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adrsg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adrsg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adrsg *Resource) Dependencies() terra.Dependencies {
	return adrsg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adrsg *Resource) LifecycleManagement() *terra.Lifecycle {
	return adrsg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adrsg *Resource) Attributes() awsDmsReplicationSubnetGroupAttributes {
	return awsDmsReplicationSubnetGroupAttributes{ref: terra.ReferenceResource(adrsg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adrsg *Resource) ImportState(state io.Reader) error {
	adrsg.state = &awsDmsReplicationSubnetGroupState{}
	if err := json.NewDecoder(state).Decode(adrsg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adrsg.Type(), adrsg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adrsg *Resource) State() (*awsDmsReplicationSubnetGroupState, bool) {
	return adrsg.state, adrsg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adrsg *Resource) StateMust() *awsDmsReplicationSubnetGroupState {
	if adrsg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adrsg.Type(), adrsg.LocalName()))
	}
	return adrsg.state
}

// Args contains the configurations for aws_dms_replication_subnet_group.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ReplicationSubnetGroupDescription: string, required
	ReplicationSubnetGroupDescription terra.StringValue `hcl:"replication_subnet_group_description,attr" validate:"required"`
	// ReplicationSubnetGroupId: string, required
	ReplicationSubnetGroupId terra.StringValue `hcl:"replication_subnet_group_id,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsDmsReplicationSubnetGroupAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_dms_replication_subnet_group.
func (adrsg awsDmsReplicationSubnetGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adrsg.ref.Append("id"))
}

// ReplicationSubnetGroupArn returns a reference to field replication_subnet_group_arn of aws_dms_replication_subnet_group.
func (adrsg awsDmsReplicationSubnetGroupAttributes) ReplicationSubnetGroupArn() terra.StringValue {
	return terra.ReferenceAsString(adrsg.ref.Append("replication_subnet_group_arn"))
}

// ReplicationSubnetGroupDescription returns a reference to field replication_subnet_group_description of aws_dms_replication_subnet_group.
func (adrsg awsDmsReplicationSubnetGroupAttributes) ReplicationSubnetGroupDescription() terra.StringValue {
	return terra.ReferenceAsString(adrsg.ref.Append("replication_subnet_group_description"))
}

// ReplicationSubnetGroupId returns a reference to field replication_subnet_group_id of aws_dms_replication_subnet_group.
func (adrsg awsDmsReplicationSubnetGroupAttributes) ReplicationSubnetGroupId() terra.StringValue {
	return terra.ReferenceAsString(adrsg.ref.Append("replication_subnet_group_id"))
}

// SubnetIds returns a reference to field subnet_ids of aws_dms_replication_subnet_group.
func (adrsg awsDmsReplicationSubnetGroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adrsg.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_dms_replication_subnet_group.
func (adrsg awsDmsReplicationSubnetGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adrsg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_dms_replication_subnet_group.
func (adrsg awsDmsReplicationSubnetGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adrsg.ref.Append("tags_all"))
}

// VpcId returns a reference to field vpc_id of aws_dms_replication_subnet_group.
func (adrsg awsDmsReplicationSubnetGroupAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(adrsg.ref.Append("vpc_id"))
}

type awsDmsReplicationSubnetGroupState struct {
	Id                                string            `json:"id"`
	ReplicationSubnetGroupArn         string            `json:"replication_subnet_group_arn"`
	ReplicationSubnetGroupDescription string            `json:"replication_subnet_group_description"`
	ReplicationSubnetGroupId          string            `json:"replication_subnet_group_id"`
	SubnetIds                         []string          `json:"subnet_ids"`
	Tags                              map[string]string `json:"tags"`
	TagsAll                           map[string]string `json:"tags_all"`
	VpcId                             string            `json:"vpc_id"`
}
