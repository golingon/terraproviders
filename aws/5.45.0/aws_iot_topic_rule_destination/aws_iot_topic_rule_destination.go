// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iot_topic_rule_destination

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iot_topic_rule_destination.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIotTopicRuleDestinationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aitrd *Resource) Type() string {
	return "aws_iot_topic_rule_destination"
}

// LocalName returns the local name for [Resource].
func (aitrd *Resource) LocalName() string {
	return aitrd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aitrd *Resource) Configuration() interface{} {
	return aitrd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aitrd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aitrd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aitrd *Resource) Dependencies() terra.Dependencies {
	return aitrd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aitrd *Resource) LifecycleManagement() *terra.Lifecycle {
	return aitrd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aitrd *Resource) Attributes() awsIotTopicRuleDestinationAttributes {
	return awsIotTopicRuleDestinationAttributes{ref: terra.ReferenceResource(aitrd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aitrd *Resource) ImportState(state io.Reader) error {
	aitrd.state = &awsIotTopicRuleDestinationState{}
	if err := json.NewDecoder(state).Decode(aitrd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aitrd.Type(), aitrd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aitrd *Resource) State() (*awsIotTopicRuleDestinationState, bool) {
	return aitrd.state, aitrd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aitrd *Resource) StateMust() *awsIotTopicRuleDestinationState {
	if aitrd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aitrd.Type(), aitrd.LocalName()))
	}
	return aitrd.state
}

// Args contains the configurations for aws_iot_topic_rule_destination.
type Args struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcConfiguration: required
	VpcConfiguration *VpcConfiguration `hcl:"vpc_configuration,block" validate:"required"`
}

type awsIotTopicRuleDestinationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iot_topic_rule_destination.
func (aitrd awsIotTopicRuleDestinationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aitrd.ref.Append("arn"))
}

// Enabled returns a reference to field enabled of aws_iot_topic_rule_destination.
func (aitrd awsIotTopicRuleDestinationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aitrd.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_iot_topic_rule_destination.
func (aitrd awsIotTopicRuleDestinationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aitrd.ref.Append("id"))
}

func (aitrd awsIotTopicRuleDestinationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aitrd.ref.Append("timeouts"))
}

func (aitrd awsIotTopicRuleDestinationAttributes) VpcConfiguration() terra.ListValue[VpcConfigurationAttributes] {
	return terra.ReferenceAsList[VpcConfigurationAttributes](aitrd.ref.Append("vpc_configuration"))
}

type awsIotTopicRuleDestinationState struct {
	Arn              string                  `json:"arn"`
	Enabled          bool                    `json:"enabled"`
	Id               string                  `json:"id"`
	Timeouts         *TimeoutsState          `json:"timeouts"`
	VpcConfiguration []VpcConfigurationState `json:"vpc_configuration"`
}
