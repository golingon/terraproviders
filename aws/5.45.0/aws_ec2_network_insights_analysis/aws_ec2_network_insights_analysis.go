// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_network_insights_analysis

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_network_insights_analysis.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2NetworkInsightsAnalysisState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aenia *Resource) Type() string {
	return "aws_ec2_network_insights_analysis"
}

// LocalName returns the local name for [Resource].
func (aenia *Resource) LocalName() string {
	return aenia.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aenia *Resource) Configuration() interface{} {
	return aenia.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aenia *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aenia)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aenia *Resource) Dependencies() terra.Dependencies {
	return aenia.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aenia *Resource) LifecycleManagement() *terra.Lifecycle {
	return aenia.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aenia *Resource) Attributes() awsEc2NetworkInsightsAnalysisAttributes {
	return awsEc2NetworkInsightsAnalysisAttributes{ref: terra.ReferenceResource(aenia)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aenia *Resource) ImportState(state io.Reader) error {
	aenia.state = &awsEc2NetworkInsightsAnalysisState{}
	if err := json.NewDecoder(state).Decode(aenia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aenia.Type(), aenia.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aenia *Resource) State() (*awsEc2NetworkInsightsAnalysisState, bool) {
	return aenia.state, aenia.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aenia *Resource) StateMust() *awsEc2NetworkInsightsAnalysisState {
	if aenia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aenia.Type(), aenia.LocalName()))
	}
	return aenia.state
}

// Args contains the configurations for aws_ec2_network_insights_analysis.
type Args struct {
	// FilterInArns: set of string, optional
	FilterInArns terra.SetValue[terra.StringValue] `hcl:"filter_in_arns,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetworkInsightsPathId: string, required
	NetworkInsightsPathId terra.StringValue `hcl:"network_insights_path_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// WaitForCompletion: bool, optional
	WaitForCompletion terra.BoolValue `hcl:"wait_for_completion,attr"`
}

type awsEc2NetworkInsightsAnalysisAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ec2_network_insights_analysis.
func (aenia awsEc2NetworkInsightsAnalysisAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aenia.ref.Append("arn"))
}

// FilterInArns returns a reference to field filter_in_arns of aws_ec2_network_insights_analysis.
func (aenia awsEc2NetworkInsightsAnalysisAttributes) FilterInArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aenia.ref.Append("filter_in_arns"))
}

// Id returns a reference to field id of aws_ec2_network_insights_analysis.
func (aenia awsEc2NetworkInsightsAnalysisAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aenia.ref.Append("id"))
}

// NetworkInsightsPathId returns a reference to field network_insights_path_id of aws_ec2_network_insights_analysis.
func (aenia awsEc2NetworkInsightsAnalysisAttributes) NetworkInsightsPathId() terra.StringValue {
	return terra.ReferenceAsString(aenia.ref.Append("network_insights_path_id"))
}

// PathFound returns a reference to field path_found of aws_ec2_network_insights_analysis.
func (aenia awsEc2NetworkInsightsAnalysisAttributes) PathFound() terra.BoolValue {
	return terra.ReferenceAsBool(aenia.ref.Append("path_found"))
}

// StartDate returns a reference to field start_date of aws_ec2_network_insights_analysis.
func (aenia awsEc2NetworkInsightsAnalysisAttributes) StartDate() terra.StringValue {
	return terra.ReferenceAsString(aenia.ref.Append("start_date"))
}

// Status returns a reference to field status of aws_ec2_network_insights_analysis.
func (aenia awsEc2NetworkInsightsAnalysisAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aenia.ref.Append("status"))
}

// StatusMessage returns a reference to field status_message of aws_ec2_network_insights_analysis.
func (aenia awsEc2NetworkInsightsAnalysisAttributes) StatusMessage() terra.StringValue {
	return terra.ReferenceAsString(aenia.ref.Append("status_message"))
}

// Tags returns a reference to field tags of aws_ec2_network_insights_analysis.
func (aenia awsEc2NetworkInsightsAnalysisAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aenia.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_network_insights_analysis.
func (aenia awsEc2NetworkInsightsAnalysisAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aenia.ref.Append("tags_all"))
}

// WaitForCompletion returns a reference to field wait_for_completion of aws_ec2_network_insights_analysis.
func (aenia awsEc2NetworkInsightsAnalysisAttributes) WaitForCompletion() terra.BoolValue {
	return terra.ReferenceAsBool(aenia.ref.Append("wait_for_completion"))
}

// WarningMessage returns a reference to field warning_message of aws_ec2_network_insights_analysis.
func (aenia awsEc2NetworkInsightsAnalysisAttributes) WarningMessage() terra.StringValue {
	return terra.ReferenceAsString(aenia.ref.Append("warning_message"))
}

func (aenia awsEc2NetworkInsightsAnalysisAttributes) AlternatePathHints() terra.ListValue[AlternatePathHintsAttributes] {
	return terra.ReferenceAsList[AlternatePathHintsAttributes](aenia.ref.Append("alternate_path_hints"))
}

func (aenia awsEc2NetworkInsightsAnalysisAttributes) Explanations() terra.ListValue[ExplanationsAttributes] {
	return terra.ReferenceAsList[ExplanationsAttributes](aenia.ref.Append("explanations"))
}

func (aenia awsEc2NetworkInsightsAnalysisAttributes) ForwardPathComponents() terra.ListValue[ForwardPathComponentsAttributes] {
	return terra.ReferenceAsList[ForwardPathComponentsAttributes](aenia.ref.Append("forward_path_components"))
}

func (aenia awsEc2NetworkInsightsAnalysisAttributes) ReturnPathComponents() terra.ListValue[ReturnPathComponentsAttributes] {
	return terra.ReferenceAsList[ReturnPathComponentsAttributes](aenia.ref.Append("return_path_components"))
}

type awsEc2NetworkInsightsAnalysisState struct {
	Arn                   string                       `json:"arn"`
	FilterInArns          []string                     `json:"filter_in_arns"`
	Id                    string                       `json:"id"`
	NetworkInsightsPathId string                       `json:"network_insights_path_id"`
	PathFound             bool                         `json:"path_found"`
	StartDate             string                       `json:"start_date"`
	Status                string                       `json:"status"`
	StatusMessage         string                       `json:"status_message"`
	Tags                  map[string]string            `json:"tags"`
	TagsAll               map[string]string            `json:"tags_all"`
	WaitForCompletion     bool                         `json:"wait_for_completion"`
	WarningMessage        string                       `json:"warning_message"`
	AlternatePathHints    []AlternatePathHintsState    `json:"alternate_path_hints"`
	Explanations          []ExplanationsState          `json:"explanations"`
	ForwardPathComponents []ForwardPathComponentsState `json:"forward_path_components"`
	ReturnPathComponents  []ReturnPathComponentsState  `json:"return_path_components"`
}
