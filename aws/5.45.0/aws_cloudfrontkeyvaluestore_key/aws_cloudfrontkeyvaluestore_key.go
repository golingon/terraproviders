// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudfrontkeyvaluestore_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudfrontkeyvaluestore_key.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudfrontkeyvaluestoreKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ack *Resource) Type() string {
	return "aws_cloudfrontkeyvaluestore_key"
}

// LocalName returns the local name for [Resource].
func (ack *Resource) LocalName() string {
	return ack.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ack *Resource) Configuration() interface{} {
	return ack.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ack *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ack)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ack *Resource) Dependencies() terra.Dependencies {
	return ack.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ack *Resource) LifecycleManagement() *terra.Lifecycle {
	return ack.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ack *Resource) Attributes() awsCloudfrontkeyvaluestoreKeyAttributes {
	return awsCloudfrontkeyvaluestoreKeyAttributes{ref: terra.ReferenceResource(ack)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ack *Resource) ImportState(state io.Reader) error {
	ack.state = &awsCloudfrontkeyvaluestoreKeyState{}
	if err := json.NewDecoder(state).Decode(ack.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ack.Type(), ack.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ack *Resource) State() (*awsCloudfrontkeyvaluestoreKeyState, bool) {
	return ack.state, ack.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ack *Resource) StateMust() *awsCloudfrontkeyvaluestoreKeyState {
	if ack.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ack.Type(), ack.LocalName()))
	}
	return ack.state
}

// Args contains the configurations for aws_cloudfrontkeyvaluestore_key.
type Args struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// KeyValueStoreArn: string, required
	KeyValueStoreArn terra.StringValue `hcl:"key_value_store_arn,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type awsCloudfrontkeyvaluestoreKeyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_cloudfrontkeyvaluestore_key.
func (ack awsCloudfrontkeyvaluestoreKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ack.ref.Append("id"))
}

// Key returns a reference to field key of aws_cloudfrontkeyvaluestore_key.
func (ack awsCloudfrontkeyvaluestoreKeyAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ack.ref.Append("key"))
}

// KeyValueStoreArn returns a reference to field key_value_store_arn of aws_cloudfrontkeyvaluestore_key.
func (ack awsCloudfrontkeyvaluestoreKeyAttributes) KeyValueStoreArn() terra.StringValue {
	return terra.ReferenceAsString(ack.ref.Append("key_value_store_arn"))
}

// TotalSizeInBytes returns a reference to field total_size_in_bytes of aws_cloudfrontkeyvaluestore_key.
func (ack awsCloudfrontkeyvaluestoreKeyAttributes) TotalSizeInBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(ack.ref.Append("total_size_in_bytes"))
}

// Value returns a reference to field value of aws_cloudfrontkeyvaluestore_key.
func (ack awsCloudfrontkeyvaluestoreKeyAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ack.ref.Append("value"))
}

type awsCloudfrontkeyvaluestoreKeyState struct {
	Id               string  `json:"id"`
	Key              string  `json:"key"`
	KeyValueStoreArn string  `json:"key_value_store_arn"`
	TotalSizeInBytes float64 `json:"total_size_in_bytes"`
	Value            string  `json:"value"`
}
