// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_shield_protection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_shield_protection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsShieldProtectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asp *Resource) Type() string {
	return "aws_shield_protection"
}

// LocalName returns the local name for [Resource].
func (asp *Resource) LocalName() string {
	return asp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asp *Resource) Configuration() interface{} {
	return asp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asp *Resource) Dependencies() terra.Dependencies {
	return asp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asp *Resource) LifecycleManagement() *terra.Lifecycle {
	return asp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asp *Resource) Attributes() awsShieldProtectionAttributes {
	return awsShieldProtectionAttributes{ref: terra.ReferenceResource(asp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asp *Resource) ImportState(state io.Reader) error {
	asp.state = &awsShieldProtectionState{}
	if err := json.NewDecoder(state).Decode(asp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asp.Type(), asp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asp *Resource) State() (*awsShieldProtectionState, bool) {
	return asp.state, asp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asp *Resource) StateMust() *awsShieldProtectionState {
	if asp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asp.Type(), asp.LocalName()))
	}
	return asp.state
}

// Args contains the configurations for aws_shield_protection.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsShieldProtectionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_shield_protection.
func (asp awsShieldProtectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("arn"))
}

// Id returns a reference to field id of aws_shield_protection.
func (asp awsShieldProtectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("id"))
}

// Name returns a reference to field name of aws_shield_protection.
func (asp awsShieldProtectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("name"))
}

// ResourceArn returns a reference to field resource_arn of aws_shield_protection.
func (asp awsShieldProtectionAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("resource_arn"))
}

// Tags returns a reference to field tags of aws_shield_protection.
func (asp awsShieldProtectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_shield_protection.
func (asp awsShieldProtectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asp.ref.Append("tags_all"))
}

type awsShieldProtectionState struct {
	Arn         string            `json:"arn"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	ResourceArn string            `json:"resource_arn"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
