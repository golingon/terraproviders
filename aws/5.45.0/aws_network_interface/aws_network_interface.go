// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_network_interface

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_network_interface.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkInterfaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ani *Resource) Type() string {
	return "aws_network_interface"
}

// LocalName returns the local name for [Resource].
func (ani *Resource) LocalName() string {
	return ani.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ani *Resource) Configuration() interface{} {
	return ani.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ani *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ani)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ani *Resource) Dependencies() terra.Dependencies {
	return ani.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ani *Resource) LifecycleManagement() *terra.Lifecycle {
	return ani.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ani *Resource) Attributes() awsNetworkInterfaceAttributes {
	return awsNetworkInterfaceAttributes{ref: terra.ReferenceResource(ani)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ani *Resource) ImportState(state io.Reader) error {
	ani.state = &awsNetworkInterfaceState{}
	if err := json.NewDecoder(state).Decode(ani.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ani.Type(), ani.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ani *Resource) State() (*awsNetworkInterfaceState, bool) {
	return ani.state, ani.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ani *Resource) StateMust() *awsNetworkInterfaceState {
	if ani.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ani.Type(), ani.LocalName()))
	}
	return ani.state
}

// Args contains the configurations for aws_network_interface.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InterfaceType: string, optional
	InterfaceType terra.StringValue `hcl:"interface_type,attr"`
	// Ipv4PrefixCount: number, optional
	Ipv4PrefixCount terra.NumberValue `hcl:"ipv4_prefix_count,attr"`
	// Ipv4Prefixes: set of string, optional
	Ipv4Prefixes terra.SetValue[terra.StringValue] `hcl:"ipv4_prefixes,attr"`
	// Ipv6AddressCount: number, optional
	Ipv6AddressCount terra.NumberValue `hcl:"ipv6_address_count,attr"`
	// Ipv6AddressList: list of string, optional
	Ipv6AddressList terra.ListValue[terra.StringValue] `hcl:"ipv6_address_list,attr"`
	// Ipv6AddressListEnabled: bool, optional
	Ipv6AddressListEnabled terra.BoolValue `hcl:"ipv6_address_list_enabled,attr"`
	// Ipv6Addresses: set of string, optional
	Ipv6Addresses terra.SetValue[terra.StringValue] `hcl:"ipv6_addresses,attr"`
	// Ipv6PrefixCount: number, optional
	Ipv6PrefixCount terra.NumberValue `hcl:"ipv6_prefix_count,attr"`
	// Ipv6Prefixes: set of string, optional
	Ipv6Prefixes terra.SetValue[terra.StringValue] `hcl:"ipv6_prefixes,attr"`
	// PrivateIp: string, optional
	PrivateIp terra.StringValue `hcl:"private_ip,attr"`
	// PrivateIpList: list of string, optional
	PrivateIpList terra.ListValue[terra.StringValue] `hcl:"private_ip_list,attr"`
	// PrivateIpListEnabled: bool, optional
	PrivateIpListEnabled terra.BoolValue `hcl:"private_ip_list_enabled,attr"`
	// PrivateIps: set of string, optional
	PrivateIps terra.SetValue[terra.StringValue] `hcl:"private_ips,attr"`
	// PrivateIpsCount: number, optional
	PrivateIpsCount terra.NumberValue `hcl:"private_ips_count,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// SourceDestCheck: bool, optional
	SourceDestCheck terra.BoolValue `hcl:"source_dest_check,attr"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Attachment: min=0
	Attachment []Attachment `hcl:"attachment,block" validate:"min=0"`
}

type awsNetworkInterfaceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ani.ref.Append("arn"))
}

// Description returns a reference to field description of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ani.ref.Append("description"))
}

// Id returns a reference to field id of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ani.ref.Append("id"))
}

// InterfaceType returns a reference to field interface_type of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) InterfaceType() terra.StringValue {
	return terra.ReferenceAsString(ani.ref.Append("interface_type"))
}

// Ipv4PrefixCount returns a reference to field ipv4_prefix_count of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) Ipv4PrefixCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ani.ref.Append("ipv4_prefix_count"))
}

// Ipv4Prefixes returns a reference to field ipv4_prefixes of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) Ipv4Prefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ani.ref.Append("ipv4_prefixes"))
}

// Ipv6AddressCount returns a reference to field ipv6_address_count of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) Ipv6AddressCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ani.ref.Append("ipv6_address_count"))
}

// Ipv6AddressList returns a reference to field ipv6_address_list of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) Ipv6AddressList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ani.ref.Append("ipv6_address_list"))
}

// Ipv6AddressListEnabled returns a reference to field ipv6_address_list_enabled of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) Ipv6AddressListEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ani.ref.Append("ipv6_address_list_enabled"))
}

// Ipv6Addresses returns a reference to field ipv6_addresses of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) Ipv6Addresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ani.ref.Append("ipv6_addresses"))
}

// Ipv6PrefixCount returns a reference to field ipv6_prefix_count of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) Ipv6PrefixCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ani.ref.Append("ipv6_prefix_count"))
}

// Ipv6Prefixes returns a reference to field ipv6_prefixes of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) Ipv6Prefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ani.ref.Append("ipv6_prefixes"))
}

// MacAddress returns a reference to field mac_address of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) MacAddress() terra.StringValue {
	return terra.ReferenceAsString(ani.ref.Append("mac_address"))
}

// OutpostArn returns a reference to field outpost_arn of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) OutpostArn() terra.StringValue {
	return terra.ReferenceAsString(ani.ref.Append("outpost_arn"))
}

// OwnerId returns a reference to field owner_id of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(ani.ref.Append("owner_id"))
}

// PrivateDnsName returns a reference to field private_dns_name of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) PrivateDnsName() terra.StringValue {
	return terra.ReferenceAsString(ani.ref.Append("private_dns_name"))
}

// PrivateIp returns a reference to field private_ip of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) PrivateIp() terra.StringValue {
	return terra.ReferenceAsString(ani.ref.Append("private_ip"))
}

// PrivateIpList returns a reference to field private_ip_list of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) PrivateIpList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ani.ref.Append("private_ip_list"))
}

// PrivateIpListEnabled returns a reference to field private_ip_list_enabled of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) PrivateIpListEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ani.ref.Append("private_ip_list_enabled"))
}

// PrivateIps returns a reference to field private_ips of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) PrivateIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ani.ref.Append("private_ips"))
}

// PrivateIpsCount returns a reference to field private_ips_count of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) PrivateIpsCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ani.ref.Append("private_ips_count"))
}

// SecurityGroups returns a reference to field security_groups of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ani.ref.Append("security_groups"))
}

// SourceDestCheck returns a reference to field source_dest_check of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) SourceDestCheck() terra.BoolValue {
	return terra.ReferenceAsBool(ani.ref.Append("source_dest_check"))
}

// SubnetId returns a reference to field subnet_id of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ani.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ani.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_network_interface.
func (ani awsNetworkInterfaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ani.ref.Append("tags_all"))
}

func (ani awsNetworkInterfaceAttributes) Attachment() terra.SetValue[AttachmentAttributes] {
	return terra.ReferenceAsSet[AttachmentAttributes](ani.ref.Append("attachment"))
}

type awsNetworkInterfaceState struct {
	Arn                    string            `json:"arn"`
	Description            string            `json:"description"`
	Id                     string            `json:"id"`
	InterfaceType          string            `json:"interface_type"`
	Ipv4PrefixCount        float64           `json:"ipv4_prefix_count"`
	Ipv4Prefixes           []string          `json:"ipv4_prefixes"`
	Ipv6AddressCount       float64           `json:"ipv6_address_count"`
	Ipv6AddressList        []string          `json:"ipv6_address_list"`
	Ipv6AddressListEnabled bool              `json:"ipv6_address_list_enabled"`
	Ipv6Addresses          []string          `json:"ipv6_addresses"`
	Ipv6PrefixCount        float64           `json:"ipv6_prefix_count"`
	Ipv6Prefixes           []string          `json:"ipv6_prefixes"`
	MacAddress             string            `json:"mac_address"`
	OutpostArn             string            `json:"outpost_arn"`
	OwnerId                string            `json:"owner_id"`
	PrivateDnsName         string            `json:"private_dns_name"`
	PrivateIp              string            `json:"private_ip"`
	PrivateIpList          []string          `json:"private_ip_list"`
	PrivateIpListEnabled   bool              `json:"private_ip_list_enabled"`
	PrivateIps             []string          `json:"private_ips"`
	PrivateIpsCount        float64           `json:"private_ips_count"`
	SecurityGroups         []string          `json:"security_groups"`
	SourceDestCheck        bool              `json:"source_dest_check"`
	SubnetId               string            `json:"subnet_id"`
	Tags                   map[string]string `json:"tags"`
	TagsAll                map[string]string `json:"tags_all"`
	Attachment             []AttachmentState `json:"attachment"`
}
