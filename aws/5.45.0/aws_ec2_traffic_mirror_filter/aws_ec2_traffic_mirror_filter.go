// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_traffic_mirror_filter

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_traffic_mirror_filter.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2TrafficMirrorFilterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aetmf *Resource) Type() string {
	return "aws_ec2_traffic_mirror_filter"
}

// LocalName returns the local name for [Resource].
func (aetmf *Resource) LocalName() string {
	return aetmf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aetmf *Resource) Configuration() interface{} {
	return aetmf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aetmf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aetmf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aetmf *Resource) Dependencies() terra.Dependencies {
	return aetmf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aetmf *Resource) LifecycleManagement() *terra.Lifecycle {
	return aetmf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aetmf *Resource) Attributes() awsEc2TrafficMirrorFilterAttributes {
	return awsEc2TrafficMirrorFilterAttributes{ref: terra.ReferenceResource(aetmf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aetmf *Resource) ImportState(state io.Reader) error {
	aetmf.state = &awsEc2TrafficMirrorFilterState{}
	if err := json.NewDecoder(state).Decode(aetmf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aetmf.Type(), aetmf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aetmf *Resource) State() (*awsEc2TrafficMirrorFilterState, bool) {
	return aetmf.state, aetmf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aetmf *Resource) StateMust() *awsEc2TrafficMirrorFilterState {
	if aetmf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aetmf.Type(), aetmf.LocalName()))
	}
	return aetmf.state
}

// Args contains the configurations for aws_ec2_traffic_mirror_filter.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetworkServices: set of string, optional
	NetworkServices terra.SetValue[terra.StringValue] `hcl:"network_services,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsEc2TrafficMirrorFilterAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ec2_traffic_mirror_filter.
func (aetmf awsEc2TrafficMirrorFilterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aetmf.ref.Append("arn"))
}

// Description returns a reference to field description of aws_ec2_traffic_mirror_filter.
func (aetmf awsEc2TrafficMirrorFilterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aetmf.ref.Append("description"))
}

// Id returns a reference to field id of aws_ec2_traffic_mirror_filter.
func (aetmf awsEc2TrafficMirrorFilterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aetmf.ref.Append("id"))
}

// NetworkServices returns a reference to field network_services of aws_ec2_traffic_mirror_filter.
func (aetmf awsEc2TrafficMirrorFilterAttributes) NetworkServices() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aetmf.ref.Append("network_services"))
}

// Tags returns a reference to field tags of aws_ec2_traffic_mirror_filter.
func (aetmf awsEc2TrafficMirrorFilterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetmf.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_traffic_mirror_filter.
func (aetmf awsEc2TrafficMirrorFilterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetmf.ref.Append("tags_all"))
}

type awsEc2TrafficMirrorFilterState struct {
	Arn             string            `json:"arn"`
	Description     string            `json:"description"`
	Id              string            `json:"id"`
	NetworkServices []string          `json:"network_services"`
	Tags            map[string]string `json:"tags"`
	TagsAll         map[string]string `json:"tags_all"`
}
