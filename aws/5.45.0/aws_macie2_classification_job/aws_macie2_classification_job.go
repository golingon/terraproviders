// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_macie2_classification_job

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_macie2_classification_job.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMacie2ClassificationJobState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amcj *Resource) Type() string {
	return "aws_macie2_classification_job"
}

// LocalName returns the local name for [Resource].
func (amcj *Resource) LocalName() string {
	return amcj.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amcj *Resource) Configuration() interface{} {
	return amcj.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amcj *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amcj)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amcj *Resource) Dependencies() terra.Dependencies {
	return amcj.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amcj *Resource) LifecycleManagement() *terra.Lifecycle {
	return amcj.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amcj *Resource) Attributes() awsMacie2ClassificationJobAttributes {
	return awsMacie2ClassificationJobAttributes{ref: terra.ReferenceResource(amcj)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amcj *Resource) ImportState(state io.Reader) error {
	amcj.state = &awsMacie2ClassificationJobState{}
	if err := json.NewDecoder(state).Decode(amcj.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amcj.Type(), amcj.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amcj *Resource) State() (*awsMacie2ClassificationJobState, bool) {
	return amcj.state, amcj.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amcj *Resource) StateMust() *awsMacie2ClassificationJobState {
	if amcj.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amcj.Type(), amcj.LocalName()))
	}
	return amcj.state
}

// Args contains the configurations for aws_macie2_classification_job.
type Args struct {
	// CustomDataIdentifierIds: list of string, optional
	CustomDataIdentifierIds terra.ListValue[terra.StringValue] `hcl:"custom_data_identifier_ids,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InitialRun: bool, optional
	InitialRun terra.BoolValue `hcl:"initial_run,attr"`
	// JobStatus: string, optional
	JobStatus terra.StringValue `hcl:"job_status,attr"`
	// JobType: string, required
	JobType terra.StringValue `hcl:"job_type,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// SamplingPercentage: number, optional
	SamplingPercentage terra.NumberValue `hcl:"sampling_percentage,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// S3JobDefinition: required
	S3JobDefinition *S3JobDefinition `hcl:"s3_job_definition,block" validate:"required"`
	// ScheduleFrequency: optional
	ScheduleFrequency *ScheduleFrequency `hcl:"schedule_frequency,block"`
}

type awsMacie2ClassificationJobAttributes struct {
	ref terra.Reference
}

// CreatedAt returns a reference to field created_at of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(amcj.ref.Append("created_at"))
}

// CustomDataIdentifierIds returns a reference to field custom_data_identifier_ids of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) CustomDataIdentifierIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](amcj.ref.Append("custom_data_identifier_ids"))
}

// Description returns a reference to field description of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amcj.ref.Append("description"))
}

// Id returns a reference to field id of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amcj.ref.Append("id"))
}

// InitialRun returns a reference to field initial_run of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) InitialRun() terra.BoolValue {
	return terra.ReferenceAsBool(amcj.ref.Append("initial_run"))
}

// JobArn returns a reference to field job_arn of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) JobArn() terra.StringValue {
	return terra.ReferenceAsString(amcj.ref.Append("job_arn"))
}

// JobId returns a reference to field job_id of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) JobId() terra.StringValue {
	return terra.ReferenceAsString(amcj.ref.Append("job_id"))
}

// JobStatus returns a reference to field job_status of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) JobStatus() terra.StringValue {
	return terra.ReferenceAsString(amcj.ref.Append("job_status"))
}

// JobType returns a reference to field job_type of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) JobType() terra.StringValue {
	return terra.ReferenceAsString(amcj.ref.Append("job_type"))
}

// Name returns a reference to field name of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amcj.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(amcj.ref.Append("name_prefix"))
}

// SamplingPercentage returns a reference to field sampling_percentage of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) SamplingPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(amcj.ref.Append("sampling_percentage"))
}

// Tags returns a reference to field tags of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amcj.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_macie2_classification_job.
func (amcj awsMacie2ClassificationJobAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amcj.ref.Append("tags_all"))
}

func (amcj awsMacie2ClassificationJobAttributes) UserPausedDetails() terra.ListValue[UserPausedDetailsAttributes] {
	return terra.ReferenceAsList[UserPausedDetailsAttributes](amcj.ref.Append("user_paused_details"))
}

func (amcj awsMacie2ClassificationJobAttributes) S3JobDefinition() terra.ListValue[S3JobDefinitionAttributes] {
	return terra.ReferenceAsList[S3JobDefinitionAttributes](amcj.ref.Append("s3_job_definition"))
}

func (amcj awsMacie2ClassificationJobAttributes) ScheduleFrequency() terra.ListValue[ScheduleFrequencyAttributes] {
	return terra.ReferenceAsList[ScheduleFrequencyAttributes](amcj.ref.Append("schedule_frequency"))
}

type awsMacie2ClassificationJobState struct {
	CreatedAt               string                   `json:"created_at"`
	CustomDataIdentifierIds []string                 `json:"custom_data_identifier_ids"`
	Description             string                   `json:"description"`
	Id                      string                   `json:"id"`
	InitialRun              bool                     `json:"initial_run"`
	JobArn                  string                   `json:"job_arn"`
	JobId                   string                   `json:"job_id"`
	JobStatus               string                   `json:"job_status"`
	JobType                 string                   `json:"job_type"`
	Name                    string                   `json:"name"`
	NamePrefix              string                   `json:"name_prefix"`
	SamplingPercentage      float64                  `json:"sampling_percentage"`
	Tags                    map[string]string        `json:"tags"`
	TagsAll                 map[string]string        `json:"tags_all"`
	UserPausedDetails       []UserPausedDetailsState `json:"user_paused_details"`
	S3JobDefinition         []S3JobDefinitionState   `json:"s3_job_definition"`
	ScheduleFrequency       []ScheduleFrequencyState `json:"schedule_frequency"`
}
