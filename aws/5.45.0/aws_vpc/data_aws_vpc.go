// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_vpc.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (av *DataSource) DataSource() string {
	return "aws_vpc"
}

// LocalName returns the local name for [DataSource].
func (av *DataSource) LocalName() string {
	return av.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (av *DataSource) Configuration() interface{} {
	return av.Args
}

// Attributes returns the attributes for [DataSource].
func (av *DataSource) Attributes() dataAwsVpcAttributes {
	return dataAwsVpcAttributes{ref: terra.ReferenceDataSource(av)}
}

// DataArgs contains the configurations for aws_vpc.
type DataArgs struct {
	// CidrBlock: string, optional
	CidrBlock terra.StringValue `hcl:"cidr_block,attr"`
	// Default: bool, optional
	Default terra.BoolValue `hcl:"default,attr"`
	// DhcpOptionsId: string, optional
	DhcpOptionsId terra.StringValue `hcl:"dhcp_options_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filter: min=0
	Filter []DataFilter `hcl:"filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *DataTimeouts `hcl:"timeouts,block"`
}

type dataAwsVpcAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpc.
func (av dataAwsVpcAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("arn"))
}

// CidrBlock returns a reference to field cidr_block of aws_vpc.
func (av dataAwsVpcAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("cidr_block"))
}

// Default returns a reference to field default of aws_vpc.
func (av dataAwsVpcAttributes) Default() terra.BoolValue {
	return terra.ReferenceAsBool(av.ref.Append("default"))
}

// DhcpOptionsId returns a reference to field dhcp_options_id of aws_vpc.
func (av dataAwsVpcAttributes) DhcpOptionsId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("dhcp_options_id"))
}

// EnableDnsHostnames returns a reference to field enable_dns_hostnames of aws_vpc.
func (av dataAwsVpcAttributes) EnableDnsHostnames() terra.BoolValue {
	return terra.ReferenceAsBool(av.ref.Append("enable_dns_hostnames"))
}

// EnableDnsSupport returns a reference to field enable_dns_support of aws_vpc.
func (av dataAwsVpcAttributes) EnableDnsSupport() terra.BoolValue {
	return terra.ReferenceAsBool(av.ref.Append("enable_dns_support"))
}

// EnableNetworkAddressUsageMetrics returns a reference to field enable_network_address_usage_metrics of aws_vpc.
func (av dataAwsVpcAttributes) EnableNetworkAddressUsageMetrics() terra.BoolValue {
	return terra.ReferenceAsBool(av.ref.Append("enable_network_address_usage_metrics"))
}

// Id returns a reference to field id of aws_vpc.
func (av dataAwsVpcAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("id"))
}

// InstanceTenancy returns a reference to field instance_tenancy of aws_vpc.
func (av dataAwsVpcAttributes) InstanceTenancy() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("instance_tenancy"))
}

// Ipv6AssociationId returns a reference to field ipv6_association_id of aws_vpc.
func (av dataAwsVpcAttributes) Ipv6AssociationId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("ipv6_association_id"))
}

// Ipv6CidrBlock returns a reference to field ipv6_cidr_block of aws_vpc.
func (av dataAwsVpcAttributes) Ipv6CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("ipv6_cidr_block"))
}

// MainRouteTableId returns a reference to field main_route_table_id of aws_vpc.
func (av dataAwsVpcAttributes) MainRouteTableId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("main_route_table_id"))
}

// OwnerId returns a reference to field owner_id of aws_vpc.
func (av dataAwsVpcAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("owner_id"))
}

// State returns a reference to field state of aws_vpc.
func (av dataAwsVpcAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_vpc.
func (av dataAwsVpcAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](av.ref.Append("tags"))
}

func (av dataAwsVpcAttributes) CidrBlockAssociations() terra.ListValue[DataCidrBlockAssociationsAttributes] {
	return terra.ReferenceAsList[DataCidrBlockAssociationsAttributes](av.ref.Append("cidr_block_associations"))
}

func (av dataAwsVpcAttributes) Filter() terra.SetValue[DataFilterAttributes] {
	return terra.ReferenceAsSet[DataFilterAttributes](av.ref.Append("filter"))
}

func (av dataAwsVpcAttributes) Timeouts() DataTimeoutsAttributes {
	return terra.ReferenceAsSingle[DataTimeoutsAttributes](av.ref.Append("timeouts"))
}
