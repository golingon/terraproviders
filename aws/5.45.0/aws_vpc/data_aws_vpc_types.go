// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataFilter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataCidrBlockAssociationsAttributes struct {
	ref terra.Reference
}

func (cba DataCidrBlockAssociationsAttributes) InternalRef() (terra.Reference, error) {
	return cba.ref, nil
}

func (cba DataCidrBlockAssociationsAttributes) InternalWithRef(ref terra.Reference) DataCidrBlockAssociationsAttributes {
	return DataCidrBlockAssociationsAttributes{ref: ref}
}

func (cba DataCidrBlockAssociationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cba.ref.InternalTokens()
}

func (cba DataCidrBlockAssociationsAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceAsString(cba.ref.Append("association_id"))
}

func (cba DataCidrBlockAssociationsAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(cba.ref.Append("cidr_block"))
}

func (cba DataCidrBlockAssociationsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(cba.ref.Append("state"))
}

type DataFilterAttributes struct {
	ref terra.Reference
}

func (f DataFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f DataFilterAttributes) InternalWithRef(ref terra.Reference) DataFilterAttributes {
	return DataFilterAttributes{ref: ref}
}

func (f DataFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f DataFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f DataFilterAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](f.ref.Append("values"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataCidrBlockAssociationsState struct {
	AssociationId string `json:"association_id"`
	CidrBlock     string `json:"cidr_block"`
	State         string `json:"state"`
}

type DataFilterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
