// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpc.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpcState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (av *Resource) Type() string {
	return "aws_vpc"
}

// LocalName returns the local name for [Resource].
func (av *Resource) LocalName() string {
	return av.Name
}

// Configuration returns the configuration (args) for [Resource].
func (av *Resource) Configuration() interface{} {
	return av.Args
}

// DependOn is used for other resources to depend on [Resource].
func (av *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(av)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (av *Resource) Dependencies() terra.Dependencies {
	return av.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (av *Resource) LifecycleManagement() *terra.Lifecycle {
	return av.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (av *Resource) Attributes() awsVpcAttributes {
	return awsVpcAttributes{ref: terra.ReferenceResource(av)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (av *Resource) ImportState(state io.Reader) error {
	av.state = &awsVpcState{}
	if err := json.NewDecoder(state).Decode(av.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", av.Type(), av.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (av *Resource) State() (*awsVpcState, bool) {
	return av.state, av.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (av *Resource) StateMust() *awsVpcState {
	if av.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", av.Type(), av.LocalName()))
	}
	return av.state
}

// Args contains the configurations for aws_vpc.
type Args struct {
	// AssignGeneratedIpv6CidrBlock: bool, optional
	AssignGeneratedIpv6CidrBlock terra.BoolValue `hcl:"assign_generated_ipv6_cidr_block,attr"`
	// CidrBlock: string, optional
	CidrBlock terra.StringValue `hcl:"cidr_block,attr"`
	// EnableDnsHostnames: bool, optional
	EnableDnsHostnames terra.BoolValue `hcl:"enable_dns_hostnames,attr"`
	// EnableDnsSupport: bool, optional
	EnableDnsSupport terra.BoolValue `hcl:"enable_dns_support,attr"`
	// EnableNetworkAddressUsageMetrics: bool, optional
	EnableNetworkAddressUsageMetrics terra.BoolValue `hcl:"enable_network_address_usage_metrics,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceTenancy: string, optional
	InstanceTenancy terra.StringValue `hcl:"instance_tenancy,attr"`
	// Ipv4IpamPoolId: string, optional
	Ipv4IpamPoolId terra.StringValue `hcl:"ipv4_ipam_pool_id,attr"`
	// Ipv4NetmaskLength: number, optional
	Ipv4NetmaskLength terra.NumberValue `hcl:"ipv4_netmask_length,attr"`
	// Ipv6CidrBlock: string, optional
	Ipv6CidrBlock terra.StringValue `hcl:"ipv6_cidr_block,attr"`
	// Ipv6CidrBlockNetworkBorderGroup: string, optional
	Ipv6CidrBlockNetworkBorderGroup terra.StringValue `hcl:"ipv6_cidr_block_network_border_group,attr"`
	// Ipv6IpamPoolId: string, optional
	Ipv6IpamPoolId terra.StringValue `hcl:"ipv6_ipam_pool_id,attr"`
	// Ipv6NetmaskLength: number, optional
	Ipv6NetmaskLength terra.NumberValue `hcl:"ipv6_netmask_length,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsVpcAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpc.
func (av awsVpcAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("arn"))
}

// AssignGeneratedIpv6CidrBlock returns a reference to field assign_generated_ipv6_cidr_block of aws_vpc.
func (av awsVpcAttributes) AssignGeneratedIpv6CidrBlock() terra.BoolValue {
	return terra.ReferenceAsBool(av.ref.Append("assign_generated_ipv6_cidr_block"))
}

// CidrBlock returns a reference to field cidr_block of aws_vpc.
func (av awsVpcAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("cidr_block"))
}

// DefaultNetworkAclId returns a reference to field default_network_acl_id of aws_vpc.
func (av awsVpcAttributes) DefaultNetworkAclId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("default_network_acl_id"))
}

// DefaultRouteTableId returns a reference to field default_route_table_id of aws_vpc.
func (av awsVpcAttributes) DefaultRouteTableId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("default_route_table_id"))
}

// DefaultSecurityGroupId returns a reference to field default_security_group_id of aws_vpc.
func (av awsVpcAttributes) DefaultSecurityGroupId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("default_security_group_id"))
}

// DhcpOptionsId returns a reference to field dhcp_options_id of aws_vpc.
func (av awsVpcAttributes) DhcpOptionsId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("dhcp_options_id"))
}

// EnableDnsHostnames returns a reference to field enable_dns_hostnames of aws_vpc.
func (av awsVpcAttributes) EnableDnsHostnames() terra.BoolValue {
	return terra.ReferenceAsBool(av.ref.Append("enable_dns_hostnames"))
}

// EnableDnsSupport returns a reference to field enable_dns_support of aws_vpc.
func (av awsVpcAttributes) EnableDnsSupport() terra.BoolValue {
	return terra.ReferenceAsBool(av.ref.Append("enable_dns_support"))
}

// EnableNetworkAddressUsageMetrics returns a reference to field enable_network_address_usage_metrics of aws_vpc.
func (av awsVpcAttributes) EnableNetworkAddressUsageMetrics() terra.BoolValue {
	return terra.ReferenceAsBool(av.ref.Append("enable_network_address_usage_metrics"))
}

// Id returns a reference to field id of aws_vpc.
func (av awsVpcAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("id"))
}

// InstanceTenancy returns a reference to field instance_tenancy of aws_vpc.
func (av awsVpcAttributes) InstanceTenancy() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("instance_tenancy"))
}

// Ipv4IpamPoolId returns a reference to field ipv4_ipam_pool_id of aws_vpc.
func (av awsVpcAttributes) Ipv4IpamPoolId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("ipv4_ipam_pool_id"))
}

// Ipv4NetmaskLength returns a reference to field ipv4_netmask_length of aws_vpc.
func (av awsVpcAttributes) Ipv4NetmaskLength() terra.NumberValue {
	return terra.ReferenceAsNumber(av.ref.Append("ipv4_netmask_length"))
}

// Ipv6AssociationId returns a reference to field ipv6_association_id of aws_vpc.
func (av awsVpcAttributes) Ipv6AssociationId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("ipv6_association_id"))
}

// Ipv6CidrBlock returns a reference to field ipv6_cidr_block of aws_vpc.
func (av awsVpcAttributes) Ipv6CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("ipv6_cidr_block"))
}

// Ipv6CidrBlockNetworkBorderGroup returns a reference to field ipv6_cidr_block_network_border_group of aws_vpc.
func (av awsVpcAttributes) Ipv6CidrBlockNetworkBorderGroup() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("ipv6_cidr_block_network_border_group"))
}

// Ipv6IpamPoolId returns a reference to field ipv6_ipam_pool_id of aws_vpc.
func (av awsVpcAttributes) Ipv6IpamPoolId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("ipv6_ipam_pool_id"))
}

// Ipv6NetmaskLength returns a reference to field ipv6_netmask_length of aws_vpc.
func (av awsVpcAttributes) Ipv6NetmaskLength() terra.NumberValue {
	return terra.ReferenceAsNumber(av.ref.Append("ipv6_netmask_length"))
}

// MainRouteTableId returns a reference to field main_route_table_id of aws_vpc.
func (av awsVpcAttributes) MainRouteTableId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("main_route_table_id"))
}

// OwnerId returns a reference to field owner_id of aws_vpc.
func (av awsVpcAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(av.ref.Append("owner_id"))
}

// Tags returns a reference to field tags of aws_vpc.
func (av awsVpcAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](av.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpc.
func (av awsVpcAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](av.ref.Append("tags_all"))
}

type awsVpcState struct {
	Arn                              string            `json:"arn"`
	AssignGeneratedIpv6CidrBlock     bool              `json:"assign_generated_ipv6_cidr_block"`
	CidrBlock                        string            `json:"cidr_block"`
	DefaultNetworkAclId              string            `json:"default_network_acl_id"`
	DefaultRouteTableId              string            `json:"default_route_table_id"`
	DefaultSecurityGroupId           string            `json:"default_security_group_id"`
	DhcpOptionsId                    string            `json:"dhcp_options_id"`
	EnableDnsHostnames               bool              `json:"enable_dns_hostnames"`
	EnableDnsSupport                 bool              `json:"enable_dns_support"`
	EnableNetworkAddressUsageMetrics bool              `json:"enable_network_address_usage_metrics"`
	Id                               string            `json:"id"`
	InstanceTenancy                  string            `json:"instance_tenancy"`
	Ipv4IpamPoolId                   string            `json:"ipv4_ipam_pool_id"`
	Ipv4NetmaskLength                float64           `json:"ipv4_netmask_length"`
	Ipv6AssociationId                string            `json:"ipv6_association_id"`
	Ipv6CidrBlock                    string            `json:"ipv6_cidr_block"`
	Ipv6CidrBlockNetworkBorderGroup  string            `json:"ipv6_cidr_block_network_border_group"`
	Ipv6IpamPoolId                   string            `json:"ipv6_ipam_pool_id"`
	Ipv6NetmaskLength                float64           `json:"ipv6_netmask_length"`
	MainRouteTableId                 string            `json:"main_route_table_id"`
	OwnerId                          string            `json:"owner_id"`
	Tags                             map[string]string `json:"tags"`
	TagsAll                          map[string]string `json:"tags_all"`
}
