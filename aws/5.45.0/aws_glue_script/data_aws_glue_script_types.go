// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_script

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataDagEdge struct {
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// Target: string, required
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// TargetParameter: string, optional
	TargetParameter terra.StringValue `hcl:"target_parameter,attr"`
}

type DataDagNode struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// LineNumber: number, optional
	LineNumber terra.NumberValue `hcl:"line_number,attr"`
	// NodeType: string, required
	NodeType terra.StringValue `hcl:"node_type,attr" validate:"required"`
	// DagNodeArgs: min=1
	Args []DataDagNodeArgs `hcl:"args,block" validate:"min=1"`
}

type DataDagNodeArgs struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Param: bool, optional
	Param terra.BoolValue `hcl:"param,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type DataDagEdgeAttributes struct {
	ref terra.Reference
}

func (de DataDagEdgeAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de DataDagEdgeAttributes) InternalWithRef(ref terra.Reference) DataDagEdgeAttributes {
	return DataDagEdgeAttributes{ref: ref}
}

func (de DataDagEdgeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de DataDagEdgeAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("source"))
}

func (de DataDagEdgeAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("target"))
}

func (de DataDagEdgeAttributes) TargetParameter() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("target_parameter"))
}

type DataDagNodeAttributes struct {
	ref terra.Reference
}

func (dn DataDagNodeAttributes) InternalRef() (terra.Reference, error) {
	return dn.ref, nil
}

func (dn DataDagNodeAttributes) InternalWithRef(ref terra.Reference) DataDagNodeAttributes {
	return DataDagNodeAttributes{ref: ref}
}

func (dn DataDagNodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dn.ref.InternalTokens()
}

func (dn DataDagNodeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dn.ref.Append("id"))
}

func (dn DataDagNodeAttributes) LineNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(dn.ref.Append("line_number"))
}

func (dn DataDagNodeAttributes) NodeType() terra.StringValue {
	return terra.ReferenceAsString(dn.ref.Append("node_type"))
}

func (dn DataDagNodeAttributes) Args() terra.ListValue[DataDagNodeArgsAttributes] {
	return terra.ReferenceAsList[DataDagNodeArgsAttributes](dn.ref.Append("args"))
}

type DataDagNodeArgsAttributes struct {
	ref terra.Reference
}

func (a DataDagNodeArgsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DataDagNodeArgsAttributes) InternalWithRef(ref terra.Reference) DataDagNodeArgsAttributes {
	return DataDagNodeArgsAttributes{ref: ref}
}

func (a DataDagNodeArgsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DataDagNodeArgsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a DataDagNodeArgsAttributes) Param() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("param"))
}

func (a DataDagNodeArgsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("value"))
}

type DataDagEdgeState struct {
	Source          string `json:"source"`
	Target          string `json:"target"`
	TargetParameter string `json:"target_parameter"`
}

type DataDagNodeState struct {
	Id         string                 `json:"id"`
	LineNumber float64                `json:"line_number"`
	NodeType   string                 `json:"node_type"`
	Args       []DataDagNodeArgsState `json:"args"`
}

type DataDagNodeArgsState struct {
	Name  string `json:"name"`
	Param bool   `json:"param"`
	Value string `json:"value"`
}
