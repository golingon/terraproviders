// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_globalaccelerator_endpoint_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_globalaccelerator_endpoint_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlobalacceleratorEndpointGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ageg *Resource) Type() string {
	return "aws_globalaccelerator_endpoint_group"
}

// LocalName returns the local name for [Resource].
func (ageg *Resource) LocalName() string {
	return ageg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ageg *Resource) Configuration() interface{} {
	return ageg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ageg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ageg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ageg *Resource) Dependencies() terra.Dependencies {
	return ageg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ageg *Resource) LifecycleManagement() *terra.Lifecycle {
	return ageg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ageg *Resource) Attributes() awsGlobalacceleratorEndpointGroupAttributes {
	return awsGlobalacceleratorEndpointGroupAttributes{ref: terra.ReferenceResource(ageg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ageg *Resource) ImportState(state io.Reader) error {
	ageg.state = &awsGlobalacceleratorEndpointGroupState{}
	if err := json.NewDecoder(state).Decode(ageg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ageg.Type(), ageg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ageg *Resource) State() (*awsGlobalacceleratorEndpointGroupState, bool) {
	return ageg.state, ageg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ageg *Resource) StateMust() *awsGlobalacceleratorEndpointGroupState {
	if ageg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ageg.Type(), ageg.LocalName()))
	}
	return ageg.state
}

// Args contains the configurations for aws_globalaccelerator_endpoint_group.
type Args struct {
	// EndpointGroupRegion: string, optional
	EndpointGroupRegion terra.StringValue `hcl:"endpoint_group_region,attr"`
	// HealthCheckIntervalSeconds: number, optional
	HealthCheckIntervalSeconds terra.NumberValue `hcl:"health_check_interval_seconds,attr"`
	// HealthCheckPath: string, optional
	HealthCheckPath terra.StringValue `hcl:"health_check_path,attr"`
	// HealthCheckPort: number, optional
	HealthCheckPort terra.NumberValue `hcl:"health_check_port,attr"`
	// HealthCheckProtocol: string, optional
	HealthCheckProtocol terra.StringValue `hcl:"health_check_protocol,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListenerArn: string, required
	ListenerArn terra.StringValue `hcl:"listener_arn,attr" validate:"required"`
	// ThresholdCount: number, optional
	ThresholdCount terra.NumberValue `hcl:"threshold_count,attr"`
	// TrafficDialPercentage: number, optional
	TrafficDialPercentage terra.NumberValue `hcl:"traffic_dial_percentage,attr"`
	// EndpointConfiguration: min=0
	EndpointConfiguration []EndpointConfiguration `hcl:"endpoint_configuration,block" validate:"min=0"`
	// PortOverride: min=0,max=10
	PortOverride []PortOverride `hcl:"port_override,block" validate:"min=0,max=10"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsGlobalacceleratorEndpointGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_globalaccelerator_endpoint_group.
func (ageg awsGlobalacceleratorEndpointGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ageg.ref.Append("arn"))
}

// EndpointGroupRegion returns a reference to field endpoint_group_region of aws_globalaccelerator_endpoint_group.
func (ageg awsGlobalacceleratorEndpointGroupAttributes) EndpointGroupRegion() terra.StringValue {
	return terra.ReferenceAsString(ageg.ref.Append("endpoint_group_region"))
}

// HealthCheckIntervalSeconds returns a reference to field health_check_interval_seconds of aws_globalaccelerator_endpoint_group.
func (ageg awsGlobalacceleratorEndpointGroupAttributes) HealthCheckIntervalSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(ageg.ref.Append("health_check_interval_seconds"))
}

// HealthCheckPath returns a reference to field health_check_path of aws_globalaccelerator_endpoint_group.
func (ageg awsGlobalacceleratorEndpointGroupAttributes) HealthCheckPath() terra.StringValue {
	return terra.ReferenceAsString(ageg.ref.Append("health_check_path"))
}

// HealthCheckPort returns a reference to field health_check_port of aws_globalaccelerator_endpoint_group.
func (ageg awsGlobalacceleratorEndpointGroupAttributes) HealthCheckPort() terra.NumberValue {
	return terra.ReferenceAsNumber(ageg.ref.Append("health_check_port"))
}

// HealthCheckProtocol returns a reference to field health_check_protocol of aws_globalaccelerator_endpoint_group.
func (ageg awsGlobalacceleratorEndpointGroupAttributes) HealthCheckProtocol() terra.StringValue {
	return terra.ReferenceAsString(ageg.ref.Append("health_check_protocol"))
}

// Id returns a reference to field id of aws_globalaccelerator_endpoint_group.
func (ageg awsGlobalacceleratorEndpointGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ageg.ref.Append("id"))
}

// ListenerArn returns a reference to field listener_arn of aws_globalaccelerator_endpoint_group.
func (ageg awsGlobalacceleratorEndpointGroupAttributes) ListenerArn() terra.StringValue {
	return terra.ReferenceAsString(ageg.ref.Append("listener_arn"))
}

// ThresholdCount returns a reference to field threshold_count of aws_globalaccelerator_endpoint_group.
func (ageg awsGlobalacceleratorEndpointGroupAttributes) ThresholdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ageg.ref.Append("threshold_count"))
}

// TrafficDialPercentage returns a reference to field traffic_dial_percentage of aws_globalaccelerator_endpoint_group.
func (ageg awsGlobalacceleratorEndpointGroupAttributes) TrafficDialPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(ageg.ref.Append("traffic_dial_percentage"))
}

func (ageg awsGlobalacceleratorEndpointGroupAttributes) EndpointConfiguration() terra.SetValue[EndpointConfigurationAttributes] {
	return terra.ReferenceAsSet[EndpointConfigurationAttributes](ageg.ref.Append("endpoint_configuration"))
}

func (ageg awsGlobalacceleratorEndpointGroupAttributes) PortOverride() terra.SetValue[PortOverrideAttributes] {
	return terra.ReferenceAsSet[PortOverrideAttributes](ageg.ref.Append("port_override"))
}

func (ageg awsGlobalacceleratorEndpointGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ageg.ref.Append("timeouts"))
}

type awsGlobalacceleratorEndpointGroupState struct {
	Arn                        string                       `json:"arn"`
	EndpointGroupRegion        string                       `json:"endpoint_group_region"`
	HealthCheckIntervalSeconds float64                      `json:"health_check_interval_seconds"`
	HealthCheckPath            string                       `json:"health_check_path"`
	HealthCheckPort            float64                      `json:"health_check_port"`
	HealthCheckProtocol        string                       `json:"health_check_protocol"`
	Id                         string                       `json:"id"`
	ListenerArn                string                       `json:"listener_arn"`
	ThresholdCount             float64                      `json:"threshold_count"`
	TrafficDialPercentage      float64                      `json:"traffic_dial_percentage"`
	EndpointConfiguration      []EndpointConfigurationState `json:"endpoint_configuration"`
	PortOverride               []PortOverrideState          `json:"port_override"`
	Timeouts                   *TimeoutsState               `json:"timeouts"`
}
