// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_docdbelastic_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_docdbelastic_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDocdbelasticClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adc *Resource) Type() string {
	return "aws_docdbelastic_cluster"
}

// LocalName returns the local name for [Resource].
func (adc *Resource) LocalName() string {
	return adc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adc *Resource) Configuration() interface{} {
	return adc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adc *Resource) Dependencies() terra.Dependencies {
	return adc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adc *Resource) LifecycleManagement() *terra.Lifecycle {
	return adc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adc *Resource) Attributes() awsDocdbelasticClusterAttributes {
	return awsDocdbelasticClusterAttributes{ref: terra.ReferenceResource(adc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adc *Resource) ImportState(state io.Reader) error {
	adc.state = &awsDocdbelasticClusterState{}
	if err := json.NewDecoder(state).Decode(adc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adc.Type(), adc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adc *Resource) State() (*awsDocdbelasticClusterState, bool) {
	return adc.state, adc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adc *Resource) StateMust() *awsDocdbelasticClusterState {
	if adc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adc.Type(), adc.LocalName()))
	}
	return adc.state
}

// Args contains the configurations for aws_docdbelastic_cluster.
type Args struct {
	// AdminUserName: string, required
	AdminUserName terra.StringValue `hcl:"admin_user_name,attr" validate:"required"`
	// AdminUserPassword: string, required
	AdminUserPassword terra.StringValue `hcl:"admin_user_password,attr" validate:"required"`
	// AuthType: string, required
	AuthType terra.StringValue `hcl:"auth_type,attr" validate:"required"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PreferredMaintenanceWindow: string, optional
	PreferredMaintenanceWindow terra.StringValue `hcl:"preferred_maintenance_window,attr"`
	// ShardCapacity: number, required
	ShardCapacity terra.NumberValue `hcl:"shard_capacity,attr" validate:"required"`
	// ShardCount: number, required
	ShardCount terra.NumberValue `hcl:"shard_count,attr" validate:"required"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDocdbelasticClusterAttributes struct {
	ref terra.Reference
}

// AdminUserName returns a reference to field admin_user_name of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) AdminUserName() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("admin_user_name"))
}

// AdminUserPassword returns a reference to field admin_user_password of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) AdminUserPassword() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("admin_user_password"))
}

// Arn returns a reference to field arn of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("arn"))
}

// AuthType returns a reference to field auth_type of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) AuthType() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("auth_type"))
}

// Endpoint returns a reference to field endpoint of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("endpoint"))
}

// Id returns a reference to field id of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("kms_key_id"))
}

// Name returns a reference to field name of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("name"))
}

// PreferredMaintenanceWindow returns a reference to field preferred_maintenance_window of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) PreferredMaintenanceWindow() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("preferred_maintenance_window"))
}

// ShardCapacity returns a reference to field shard_capacity of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) ShardCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(adc.ref.Append("shard_capacity"))
}

// ShardCount returns a reference to field shard_count of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) ShardCount() terra.NumberValue {
	return terra.ReferenceAsNumber(adc.ref.Append("shard_count"))
}

// SubnetIds returns a reference to field subnet_ids of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adc.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adc.ref.Append("tags_all"))
}

// VpcSecurityGroupIds returns a reference to field vpc_security_group_ids of aws_docdbelastic_cluster.
func (adc awsDocdbelasticClusterAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adc.ref.Append("vpc_security_group_ids"))
}

func (adc awsDocdbelasticClusterAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adc.ref.Append("timeouts"))
}

type awsDocdbelasticClusterState struct {
	AdminUserName              string            `json:"admin_user_name"`
	AdminUserPassword          string            `json:"admin_user_password"`
	Arn                        string            `json:"arn"`
	AuthType                   string            `json:"auth_type"`
	Endpoint                   string            `json:"endpoint"`
	Id                         string            `json:"id"`
	KmsKeyId                   string            `json:"kms_key_id"`
	Name                       string            `json:"name"`
	PreferredMaintenanceWindow string            `json:"preferred_maintenance_window"`
	ShardCapacity              float64           `json:"shard_capacity"`
	ShardCount                 float64           `json:"shard_count"`
	SubnetIds                  []string          `json:"subnet_ids"`
	Tags                       map[string]string `json:"tags"`
	TagsAll                    map[string]string `json:"tags_all"`
	VpcSecurityGroupIds        []string          `json:"vpc_security_group_ids"`
	Timeouts                   *TimeoutsState    `json:"timeouts"`
}
