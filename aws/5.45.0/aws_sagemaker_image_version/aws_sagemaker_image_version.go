// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_image_version

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sagemaker_image_version.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSagemakerImageVersionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asiv *Resource) Type() string {
	return "aws_sagemaker_image_version"
}

// LocalName returns the local name for [Resource].
func (asiv *Resource) LocalName() string {
	return asiv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asiv *Resource) Configuration() interface{} {
	return asiv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asiv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asiv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asiv *Resource) Dependencies() terra.Dependencies {
	return asiv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asiv *Resource) LifecycleManagement() *terra.Lifecycle {
	return asiv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asiv *Resource) Attributes() awsSagemakerImageVersionAttributes {
	return awsSagemakerImageVersionAttributes{ref: terra.ReferenceResource(asiv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asiv *Resource) ImportState(state io.Reader) error {
	asiv.state = &awsSagemakerImageVersionState{}
	if err := json.NewDecoder(state).Decode(asiv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asiv.Type(), asiv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asiv *Resource) State() (*awsSagemakerImageVersionState, bool) {
	return asiv.state, asiv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asiv *Resource) StateMust() *awsSagemakerImageVersionState {
	if asiv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asiv.Type(), asiv.LocalName()))
	}
	return asiv.state
}

// Args contains the configurations for aws_sagemaker_image_version.
type Args struct {
	// BaseImage: string, required
	BaseImage terra.StringValue `hcl:"base_image,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageName: string, required
	ImageName terra.StringValue `hcl:"image_name,attr" validate:"required"`
}

type awsSagemakerImageVersionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_image_version.
func (asiv awsSagemakerImageVersionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("arn"))
}

// BaseImage returns a reference to field base_image of aws_sagemaker_image_version.
func (asiv awsSagemakerImageVersionAttributes) BaseImage() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("base_image"))
}

// ContainerImage returns a reference to field container_image of aws_sagemaker_image_version.
func (asiv awsSagemakerImageVersionAttributes) ContainerImage() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("container_image"))
}

// Id returns a reference to field id of aws_sagemaker_image_version.
func (asiv awsSagemakerImageVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("id"))
}

// ImageArn returns a reference to field image_arn of aws_sagemaker_image_version.
func (asiv awsSagemakerImageVersionAttributes) ImageArn() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("image_arn"))
}

// ImageName returns a reference to field image_name of aws_sagemaker_image_version.
func (asiv awsSagemakerImageVersionAttributes) ImageName() terra.StringValue {
	return terra.ReferenceAsString(asiv.ref.Append("image_name"))
}

// Version returns a reference to field version of aws_sagemaker_image_version.
func (asiv awsSagemakerImageVersionAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(asiv.ref.Append("version"))
}

type awsSagemakerImageVersionState struct {
	Arn            string  `json:"arn"`
	BaseImage      string  `json:"base_image"`
	ContainerImage string  `json:"container_image"`
	Id             string  `json:"id"`
	ImageArn       string  `json:"image_arn"`
	ImageName      string  `json:"image_name"`
	Version        float64 `json:"version"`
}
