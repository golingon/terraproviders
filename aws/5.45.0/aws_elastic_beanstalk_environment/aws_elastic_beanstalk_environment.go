// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elastic_beanstalk_environment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_elastic_beanstalk_environment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsElasticBeanstalkEnvironmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aebe *Resource) Type() string {
	return "aws_elastic_beanstalk_environment"
}

// LocalName returns the local name for [Resource].
func (aebe *Resource) LocalName() string {
	return aebe.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aebe *Resource) Configuration() interface{} {
	return aebe.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aebe *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aebe)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aebe *Resource) Dependencies() terra.Dependencies {
	return aebe.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aebe *Resource) LifecycleManagement() *terra.Lifecycle {
	return aebe.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aebe *Resource) Attributes() awsElasticBeanstalkEnvironmentAttributes {
	return awsElasticBeanstalkEnvironmentAttributes{ref: terra.ReferenceResource(aebe)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aebe *Resource) ImportState(state io.Reader) error {
	aebe.state = &awsElasticBeanstalkEnvironmentState{}
	if err := json.NewDecoder(state).Decode(aebe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aebe.Type(), aebe.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aebe *Resource) State() (*awsElasticBeanstalkEnvironmentState, bool) {
	return aebe.state, aebe.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aebe *Resource) StateMust() *awsElasticBeanstalkEnvironmentState {
	if aebe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aebe.Type(), aebe.LocalName()))
	}
	return aebe.state
}

// Args contains the configurations for aws_elastic_beanstalk_environment.
type Args struct {
	// Application: string, required
	Application terra.StringValue `hcl:"application,attr" validate:"required"`
	// CnamePrefix: string, optional
	CnamePrefix terra.StringValue `hcl:"cname_prefix,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PlatformArn: string, optional
	PlatformArn terra.StringValue `hcl:"platform_arn,attr"`
	// PollInterval: string, optional
	PollInterval terra.StringValue `hcl:"poll_interval,attr"`
	// SolutionStackName: string, optional
	SolutionStackName terra.StringValue `hcl:"solution_stack_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TemplateName: string, optional
	TemplateName terra.StringValue `hcl:"template_name,attr"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
	// VersionLabel: string, optional
	VersionLabel terra.StringValue `hcl:"version_label,attr"`
	// WaitForReadyTimeout: string, optional
	WaitForReadyTimeout terra.StringValue `hcl:"wait_for_ready_timeout,attr"`
	// Setting: min=0
	Setting []Setting `hcl:"setting,block" validate:"min=0"`
}

type awsElasticBeanstalkEnvironmentAttributes struct {
	ref terra.Reference
}

// Application returns a reference to field application of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) Application() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("application"))
}

// Arn returns a reference to field arn of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("arn"))
}

// AutoscalingGroups returns a reference to field autoscaling_groups of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) AutoscalingGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aebe.ref.Append("autoscaling_groups"))
}

// Cname returns a reference to field cname of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) Cname() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("cname"))
}

// CnamePrefix returns a reference to field cname_prefix of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) CnamePrefix() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("cname_prefix"))
}

// Description returns a reference to field description of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("description"))
}

// EndpointUrl returns a reference to field endpoint_url of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) EndpointUrl() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("endpoint_url"))
}

// Id returns a reference to field id of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("id"))
}

// Instances returns a reference to field instances of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) Instances() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aebe.ref.Append("instances"))
}

// LaunchConfigurations returns a reference to field launch_configurations of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) LaunchConfigurations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aebe.ref.Append("launch_configurations"))
}

// LoadBalancers returns a reference to field load_balancers of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) LoadBalancers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aebe.ref.Append("load_balancers"))
}

// Name returns a reference to field name of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("name"))
}

// PlatformArn returns a reference to field platform_arn of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) PlatformArn() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("platform_arn"))
}

// PollInterval returns a reference to field poll_interval of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) PollInterval() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("poll_interval"))
}

// Queues returns a reference to field queues of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) Queues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aebe.ref.Append("queues"))
}

// SolutionStackName returns a reference to field solution_stack_name of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) SolutionStackName() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("solution_stack_name"))
}

// Tags returns a reference to field tags of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aebe.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aebe.ref.Append("tags_all"))
}

// TemplateName returns a reference to field template_name of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) TemplateName() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("template_name"))
}

// Tier returns a reference to field tier of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) Tier() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("tier"))
}

// Triggers returns a reference to field triggers of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) Triggers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aebe.ref.Append("triggers"))
}

// VersionLabel returns a reference to field version_label of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) VersionLabel() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("version_label"))
}

// WaitForReadyTimeout returns a reference to field wait_for_ready_timeout of aws_elastic_beanstalk_environment.
func (aebe awsElasticBeanstalkEnvironmentAttributes) WaitForReadyTimeout() terra.StringValue {
	return terra.ReferenceAsString(aebe.ref.Append("wait_for_ready_timeout"))
}

func (aebe awsElasticBeanstalkEnvironmentAttributes) AllSettings() terra.SetValue[AllSettingsAttributes] {
	return terra.ReferenceAsSet[AllSettingsAttributes](aebe.ref.Append("all_settings"))
}

func (aebe awsElasticBeanstalkEnvironmentAttributes) Setting() terra.SetValue[SettingAttributes] {
	return terra.ReferenceAsSet[SettingAttributes](aebe.ref.Append("setting"))
}

type awsElasticBeanstalkEnvironmentState struct {
	Application          string             `json:"application"`
	Arn                  string             `json:"arn"`
	AutoscalingGroups    []string           `json:"autoscaling_groups"`
	Cname                string             `json:"cname"`
	CnamePrefix          string             `json:"cname_prefix"`
	Description          string             `json:"description"`
	EndpointUrl          string             `json:"endpoint_url"`
	Id                   string             `json:"id"`
	Instances            []string           `json:"instances"`
	LaunchConfigurations []string           `json:"launch_configurations"`
	LoadBalancers        []string           `json:"load_balancers"`
	Name                 string             `json:"name"`
	PlatformArn          string             `json:"platform_arn"`
	PollInterval         string             `json:"poll_interval"`
	Queues               []string           `json:"queues"`
	SolutionStackName    string             `json:"solution_stack_name"`
	Tags                 map[string]string  `json:"tags"`
	TagsAll              map[string]string  `json:"tags_all"`
	TemplateName         string             `json:"template_name"`
	Tier                 string             `json:"tier"`
	Triggers             []string           `json:"triggers"`
	VersionLabel         string             `json:"version_label"`
	WaitForReadyTimeout  string             `json:"wait_for_ready_timeout"`
	AllSettings          []AllSettingsState `json:"all_settings"`
	Setting              []SettingState     `json:"setting"`
}
