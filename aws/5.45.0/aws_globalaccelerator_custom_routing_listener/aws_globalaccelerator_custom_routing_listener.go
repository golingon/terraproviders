// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_globalaccelerator_custom_routing_listener

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_globalaccelerator_custom_routing_listener.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlobalacceleratorCustomRoutingListenerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agcrl *Resource) Type() string {
	return "aws_globalaccelerator_custom_routing_listener"
}

// LocalName returns the local name for [Resource].
func (agcrl *Resource) LocalName() string {
	return agcrl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agcrl *Resource) Configuration() interface{} {
	return agcrl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agcrl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agcrl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agcrl *Resource) Dependencies() terra.Dependencies {
	return agcrl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agcrl *Resource) LifecycleManagement() *terra.Lifecycle {
	return agcrl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agcrl *Resource) Attributes() awsGlobalacceleratorCustomRoutingListenerAttributes {
	return awsGlobalacceleratorCustomRoutingListenerAttributes{ref: terra.ReferenceResource(agcrl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agcrl *Resource) ImportState(state io.Reader) error {
	agcrl.state = &awsGlobalacceleratorCustomRoutingListenerState{}
	if err := json.NewDecoder(state).Decode(agcrl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agcrl.Type(), agcrl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agcrl *Resource) State() (*awsGlobalacceleratorCustomRoutingListenerState, bool) {
	return agcrl.state, agcrl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agcrl *Resource) StateMust() *awsGlobalacceleratorCustomRoutingListenerState {
	if agcrl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agcrl.Type(), agcrl.LocalName()))
	}
	return agcrl.state
}

// Args contains the configurations for aws_globalaccelerator_custom_routing_listener.
type Args struct {
	// AcceleratorArn: string, required
	AcceleratorArn terra.StringValue `hcl:"accelerator_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PortRange: min=1,max=10
	PortRange []PortRange `hcl:"port_range,block" validate:"min=1,max=10"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsGlobalacceleratorCustomRoutingListenerAttributes struct {
	ref terra.Reference
}

// AcceleratorArn returns a reference to field accelerator_arn of aws_globalaccelerator_custom_routing_listener.
func (agcrl awsGlobalacceleratorCustomRoutingListenerAttributes) AcceleratorArn() terra.StringValue {
	return terra.ReferenceAsString(agcrl.ref.Append("accelerator_arn"))
}

// Id returns a reference to field id of aws_globalaccelerator_custom_routing_listener.
func (agcrl awsGlobalacceleratorCustomRoutingListenerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agcrl.ref.Append("id"))
}

func (agcrl awsGlobalacceleratorCustomRoutingListenerAttributes) PortRange() terra.SetValue[PortRangeAttributes] {
	return terra.ReferenceAsSet[PortRangeAttributes](agcrl.ref.Append("port_range"))
}

func (agcrl awsGlobalacceleratorCustomRoutingListenerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](agcrl.ref.Append("timeouts"))
}

type awsGlobalacceleratorCustomRoutingListenerState struct {
	AcceleratorArn string           `json:"accelerator_arn"`
	Id             string           `json:"id"`
	PortRange      []PortRangeState `json:"port_range"`
	Timeouts       *TimeoutsState   `json:"timeouts"`
}
