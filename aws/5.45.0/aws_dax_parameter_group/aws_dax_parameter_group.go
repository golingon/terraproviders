// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dax_parameter_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dax_parameter_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDaxParameterGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adpg *Resource) Type() string {
	return "aws_dax_parameter_group"
}

// LocalName returns the local name for [Resource].
func (adpg *Resource) LocalName() string {
	return adpg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adpg *Resource) Configuration() interface{} {
	return adpg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adpg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adpg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adpg *Resource) Dependencies() terra.Dependencies {
	return adpg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adpg *Resource) LifecycleManagement() *terra.Lifecycle {
	return adpg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adpg *Resource) Attributes() awsDaxParameterGroupAttributes {
	return awsDaxParameterGroupAttributes{ref: terra.ReferenceResource(adpg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adpg *Resource) ImportState(state io.Reader) error {
	adpg.state = &awsDaxParameterGroupState{}
	if err := json.NewDecoder(state).Decode(adpg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adpg.Type(), adpg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adpg *Resource) State() (*awsDaxParameterGroupState, bool) {
	return adpg.state, adpg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adpg *Resource) StateMust() *awsDaxParameterGroupState {
	if adpg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adpg.Type(), adpg.LocalName()))
	}
	return adpg.state
}

// Args contains the configurations for aws_dax_parameter_group.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: min=0
	Parameters []Parameters `hcl:"parameters,block" validate:"min=0"`
}

type awsDaxParameterGroupAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_dax_parameter_group.
func (adpg awsDaxParameterGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adpg.ref.Append("description"))
}

// Id returns a reference to field id of aws_dax_parameter_group.
func (adpg awsDaxParameterGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adpg.ref.Append("id"))
}

// Name returns a reference to field name of aws_dax_parameter_group.
func (adpg awsDaxParameterGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adpg.ref.Append("name"))
}

func (adpg awsDaxParameterGroupAttributes) Parameters() terra.SetValue[ParametersAttributes] {
	return terra.ReferenceAsSet[ParametersAttributes](adpg.ref.Append("parameters"))
}

type awsDaxParameterGroupState struct {
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	Parameters  []ParametersState `json:"parameters"`
}
