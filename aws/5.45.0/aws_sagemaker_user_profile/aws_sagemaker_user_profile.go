// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_user_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sagemaker_user_profile.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSagemakerUserProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asup *Resource) Type() string {
	return "aws_sagemaker_user_profile"
}

// LocalName returns the local name for [Resource].
func (asup *Resource) LocalName() string {
	return asup.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asup *Resource) Configuration() interface{} {
	return asup.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asup *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asup)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asup *Resource) Dependencies() terra.Dependencies {
	return asup.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asup *Resource) LifecycleManagement() *terra.Lifecycle {
	return asup.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asup *Resource) Attributes() awsSagemakerUserProfileAttributes {
	return awsSagemakerUserProfileAttributes{ref: terra.ReferenceResource(asup)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asup *Resource) ImportState(state io.Reader) error {
	asup.state = &awsSagemakerUserProfileState{}
	if err := json.NewDecoder(state).Decode(asup.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asup.Type(), asup.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asup *Resource) State() (*awsSagemakerUserProfileState, bool) {
	return asup.state, asup.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asup *Resource) StateMust() *awsSagemakerUserProfileState {
	if asup.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asup.Type(), asup.LocalName()))
	}
	return asup.state
}

// Args contains the configurations for aws_sagemaker_user_profile.
type Args struct {
	// DomainId: string, required
	DomainId terra.StringValue `hcl:"domain_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SingleSignOnUserIdentifier: string, optional
	SingleSignOnUserIdentifier terra.StringValue `hcl:"single_sign_on_user_identifier,attr"`
	// SingleSignOnUserValue: string, optional
	SingleSignOnUserValue terra.StringValue `hcl:"single_sign_on_user_value,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserProfileName: string, required
	UserProfileName terra.StringValue `hcl:"user_profile_name,attr" validate:"required"`
	// UserSettings: optional
	UserSettings *UserSettings `hcl:"user_settings,block"`
}

type awsSagemakerUserProfileAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_user_profile.
func (asup awsSagemakerUserProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asup.ref.Append("arn"))
}

// DomainId returns a reference to field domain_id of aws_sagemaker_user_profile.
func (asup awsSagemakerUserProfileAttributes) DomainId() terra.StringValue {
	return terra.ReferenceAsString(asup.ref.Append("domain_id"))
}

// HomeEfsFileSystemUid returns a reference to field home_efs_file_system_uid of aws_sagemaker_user_profile.
func (asup awsSagemakerUserProfileAttributes) HomeEfsFileSystemUid() terra.StringValue {
	return terra.ReferenceAsString(asup.ref.Append("home_efs_file_system_uid"))
}

// Id returns a reference to field id of aws_sagemaker_user_profile.
func (asup awsSagemakerUserProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asup.ref.Append("id"))
}

// SingleSignOnUserIdentifier returns a reference to field single_sign_on_user_identifier of aws_sagemaker_user_profile.
func (asup awsSagemakerUserProfileAttributes) SingleSignOnUserIdentifier() terra.StringValue {
	return terra.ReferenceAsString(asup.ref.Append("single_sign_on_user_identifier"))
}

// SingleSignOnUserValue returns a reference to field single_sign_on_user_value of aws_sagemaker_user_profile.
func (asup awsSagemakerUserProfileAttributes) SingleSignOnUserValue() terra.StringValue {
	return terra.ReferenceAsString(asup.ref.Append("single_sign_on_user_value"))
}

// Tags returns a reference to field tags of aws_sagemaker_user_profile.
func (asup awsSagemakerUserProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asup.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_user_profile.
func (asup awsSagemakerUserProfileAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asup.ref.Append("tags_all"))
}

// UserProfileName returns a reference to field user_profile_name of aws_sagemaker_user_profile.
func (asup awsSagemakerUserProfileAttributes) UserProfileName() terra.StringValue {
	return terra.ReferenceAsString(asup.ref.Append("user_profile_name"))
}

func (asup awsSagemakerUserProfileAttributes) UserSettings() terra.ListValue[UserSettingsAttributes] {
	return terra.ReferenceAsList[UserSettingsAttributes](asup.ref.Append("user_settings"))
}

type awsSagemakerUserProfileState struct {
	Arn                        string              `json:"arn"`
	DomainId                   string              `json:"domain_id"`
	HomeEfsFileSystemUid       string              `json:"home_efs_file_system_uid"`
	Id                         string              `json:"id"`
	SingleSignOnUserIdentifier string              `json:"single_sign_on_user_identifier"`
	SingleSignOnUserValue      string              `json:"single_sign_on_user_value"`
	Tags                       map[string]string   `json:"tags"`
	TagsAll                    map[string]string   `json:"tags_all"`
	UserProfileName            string              `json:"user_profile_name"`
	UserSettings               []UserSettingsState `json:"user_settings"`
}
