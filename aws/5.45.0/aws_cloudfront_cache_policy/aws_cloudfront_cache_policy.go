// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudfront_cache_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudfront_cache_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudfrontCachePolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (accp *Resource) Type() string {
	return "aws_cloudfront_cache_policy"
}

// LocalName returns the local name for [Resource].
func (accp *Resource) LocalName() string {
	return accp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (accp *Resource) Configuration() interface{} {
	return accp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (accp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(accp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (accp *Resource) Dependencies() terra.Dependencies {
	return accp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (accp *Resource) LifecycleManagement() *terra.Lifecycle {
	return accp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (accp *Resource) Attributes() awsCloudfrontCachePolicyAttributes {
	return awsCloudfrontCachePolicyAttributes{ref: terra.ReferenceResource(accp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (accp *Resource) ImportState(state io.Reader) error {
	accp.state = &awsCloudfrontCachePolicyState{}
	if err := json.NewDecoder(state).Decode(accp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", accp.Type(), accp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (accp *Resource) State() (*awsCloudfrontCachePolicyState, bool) {
	return accp.state, accp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (accp *Resource) StateMust() *awsCloudfrontCachePolicyState {
	if accp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", accp.Type(), accp.LocalName()))
	}
	return accp.state
}

// Args contains the configurations for aws_cloudfront_cache_policy.
type Args struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// DefaultTtl: number, optional
	DefaultTtl terra.NumberValue `hcl:"default_ttl,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxTtl: number, optional
	MaxTtl terra.NumberValue `hcl:"max_ttl,attr"`
	// MinTtl: number, optional
	MinTtl terra.NumberValue `hcl:"min_ttl,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParametersInCacheKeyAndForwardedToOrigin: required
	ParametersInCacheKeyAndForwardedToOrigin *ParametersInCacheKeyAndForwardedToOrigin `hcl:"parameters_in_cache_key_and_forwarded_to_origin,block" validate:"required"`
}

type awsCloudfrontCachePolicyAttributes struct {
	ref terra.Reference
}

// Comment returns a reference to field comment of aws_cloudfront_cache_policy.
func (accp awsCloudfrontCachePolicyAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(accp.ref.Append("comment"))
}

// DefaultTtl returns a reference to field default_ttl of aws_cloudfront_cache_policy.
func (accp awsCloudfrontCachePolicyAttributes) DefaultTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(accp.ref.Append("default_ttl"))
}

// Etag returns a reference to field etag of aws_cloudfront_cache_policy.
func (accp awsCloudfrontCachePolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(accp.ref.Append("etag"))
}

// Id returns a reference to field id of aws_cloudfront_cache_policy.
func (accp awsCloudfrontCachePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(accp.ref.Append("id"))
}

// MaxTtl returns a reference to field max_ttl of aws_cloudfront_cache_policy.
func (accp awsCloudfrontCachePolicyAttributes) MaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(accp.ref.Append("max_ttl"))
}

// MinTtl returns a reference to field min_ttl of aws_cloudfront_cache_policy.
func (accp awsCloudfrontCachePolicyAttributes) MinTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(accp.ref.Append("min_ttl"))
}

// Name returns a reference to field name of aws_cloudfront_cache_policy.
func (accp awsCloudfrontCachePolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(accp.ref.Append("name"))
}

func (accp awsCloudfrontCachePolicyAttributes) ParametersInCacheKeyAndForwardedToOrigin() terra.ListValue[ParametersInCacheKeyAndForwardedToOriginAttributes] {
	return terra.ReferenceAsList[ParametersInCacheKeyAndForwardedToOriginAttributes](accp.ref.Append("parameters_in_cache_key_and_forwarded_to_origin"))
}

type awsCloudfrontCachePolicyState struct {
	Comment                                  string                                          `json:"comment"`
	DefaultTtl                               float64                                         `json:"default_ttl"`
	Etag                                     string                                          `json:"etag"`
	Id                                       string                                          `json:"id"`
	MaxTtl                                   float64                                         `json:"max_ttl"`
	MinTtl                                   float64                                         `json:"min_ttl"`
	Name                                     string                                          `json:"name"`
	ParametersInCacheKeyAndForwardedToOrigin []ParametersInCacheKeyAndForwardedToOriginState `json:"parameters_in_cache_key_and_forwarded_to_origin"`
}
