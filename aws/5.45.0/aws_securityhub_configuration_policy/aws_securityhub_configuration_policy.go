// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_securityhub_configuration_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_securityhub_configuration_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSecurityhubConfigurationPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascp *Resource) Type() string {
	return "aws_securityhub_configuration_policy"
}

// LocalName returns the local name for [Resource].
func (ascp *Resource) LocalName() string {
	return ascp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascp *Resource) Configuration() interface{} {
	return ascp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascp *Resource) Dependencies() terra.Dependencies {
	return ascp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascp *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascp *Resource) Attributes() awsSecurityhubConfigurationPolicyAttributes {
	return awsSecurityhubConfigurationPolicyAttributes{ref: terra.ReferenceResource(ascp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascp *Resource) ImportState(state io.Reader) error {
	ascp.state = &awsSecurityhubConfigurationPolicyState{}
	if err := json.NewDecoder(state).Decode(ascp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascp.Type(), ascp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascp *Resource) State() (*awsSecurityhubConfigurationPolicyState, bool) {
	return ascp.state, ascp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascp *Resource) StateMust() *awsSecurityhubConfigurationPolicyState {
	if ascp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascp.Type(), ascp.LocalName()))
	}
	return ascp.state
}

// Args contains the configurations for aws_securityhub_configuration_policy.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ConfigurationPolicy: required
	ConfigurationPolicy *ConfigurationPolicy `hcl:"configuration_policy,block" validate:"required"`
}

type awsSecurityhubConfigurationPolicyAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_securityhub_configuration_policy.
func (ascp awsSecurityhubConfigurationPolicyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ascp.ref.Append("arn"))
}

// Description returns a reference to field description of aws_securityhub_configuration_policy.
func (ascp awsSecurityhubConfigurationPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ascp.ref.Append("description"))
}

// Id returns a reference to field id of aws_securityhub_configuration_policy.
func (ascp awsSecurityhubConfigurationPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascp.ref.Append("id"))
}

// Name returns a reference to field name of aws_securityhub_configuration_policy.
func (ascp awsSecurityhubConfigurationPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ascp.ref.Append("name"))
}

func (ascp awsSecurityhubConfigurationPolicyAttributes) ConfigurationPolicy() terra.ListValue[ConfigurationPolicyAttributes] {
	return terra.ReferenceAsList[ConfigurationPolicyAttributes](ascp.ref.Append("configuration_policy"))
}

type awsSecurityhubConfigurationPolicyState struct {
	Arn                 string                     `json:"arn"`
	Description         string                     `json:"description"`
	Id                  string                     `json:"id"`
	Name                string                     `json:"name"`
	ConfigurationPolicy []ConfigurationPolicyState `json:"configuration_policy"`
}
