// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_pinpoint_apns_channel

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_pinpoint_apns_channel.
type Resource struct {
	Name      string
	Args      Args
	state     *awsPinpointApnsChannelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apac *Resource) Type() string {
	return "aws_pinpoint_apns_channel"
}

// LocalName returns the local name for [Resource].
func (apac *Resource) LocalName() string {
	return apac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apac *Resource) Configuration() interface{} {
	return apac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apac *Resource) Dependencies() terra.Dependencies {
	return apac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apac *Resource) LifecycleManagement() *terra.Lifecycle {
	return apac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apac *Resource) Attributes() awsPinpointApnsChannelAttributes {
	return awsPinpointApnsChannelAttributes{ref: terra.ReferenceResource(apac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apac *Resource) ImportState(state io.Reader) error {
	apac.state = &awsPinpointApnsChannelState{}
	if err := json.NewDecoder(state).Decode(apac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apac.Type(), apac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apac *Resource) State() (*awsPinpointApnsChannelState, bool) {
	return apac.state, apac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apac *Resource) StateMust() *awsPinpointApnsChannelState {
	if apac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apac.Type(), apac.LocalName()))
	}
	return apac.state
}

// Args contains the configurations for aws_pinpoint_apns_channel.
type Args struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// BundleId: string, optional
	BundleId terra.StringValue `hcl:"bundle_id,attr"`
	// Certificate: string, optional
	Certificate terra.StringValue `hcl:"certificate,attr"`
	// DefaultAuthenticationMethod: string, optional
	DefaultAuthenticationMethod terra.StringValue `hcl:"default_authentication_method,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PrivateKey: string, optional
	PrivateKey terra.StringValue `hcl:"private_key,attr"`
	// TeamId: string, optional
	TeamId terra.StringValue `hcl:"team_id,attr"`
	// TokenKey: string, optional
	TokenKey terra.StringValue `hcl:"token_key,attr"`
	// TokenKeyId: string, optional
	TokenKeyId terra.StringValue `hcl:"token_key_id,attr"`
}

type awsPinpointApnsChannelAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of aws_pinpoint_apns_channel.
func (apac awsPinpointApnsChannelAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(apac.ref.Append("application_id"))
}

// BundleId returns a reference to field bundle_id of aws_pinpoint_apns_channel.
func (apac awsPinpointApnsChannelAttributes) BundleId() terra.StringValue {
	return terra.ReferenceAsString(apac.ref.Append("bundle_id"))
}

// Certificate returns a reference to field certificate of aws_pinpoint_apns_channel.
func (apac awsPinpointApnsChannelAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(apac.ref.Append("certificate"))
}

// DefaultAuthenticationMethod returns a reference to field default_authentication_method of aws_pinpoint_apns_channel.
func (apac awsPinpointApnsChannelAttributes) DefaultAuthenticationMethod() terra.StringValue {
	return terra.ReferenceAsString(apac.ref.Append("default_authentication_method"))
}

// Enabled returns a reference to field enabled of aws_pinpoint_apns_channel.
func (apac awsPinpointApnsChannelAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(apac.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_pinpoint_apns_channel.
func (apac awsPinpointApnsChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apac.ref.Append("id"))
}

// PrivateKey returns a reference to field private_key of aws_pinpoint_apns_channel.
func (apac awsPinpointApnsChannelAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(apac.ref.Append("private_key"))
}

// TeamId returns a reference to field team_id of aws_pinpoint_apns_channel.
func (apac awsPinpointApnsChannelAttributes) TeamId() terra.StringValue {
	return terra.ReferenceAsString(apac.ref.Append("team_id"))
}

// TokenKey returns a reference to field token_key of aws_pinpoint_apns_channel.
func (apac awsPinpointApnsChannelAttributes) TokenKey() terra.StringValue {
	return terra.ReferenceAsString(apac.ref.Append("token_key"))
}

// TokenKeyId returns a reference to field token_key_id of aws_pinpoint_apns_channel.
func (apac awsPinpointApnsChannelAttributes) TokenKeyId() terra.StringValue {
	return terra.ReferenceAsString(apac.ref.Append("token_key_id"))
}

type awsPinpointApnsChannelState struct {
	ApplicationId               string `json:"application_id"`
	BundleId                    string `json:"bundle_id"`
	Certificate                 string `json:"certificate"`
	DefaultAuthenticationMethod string `json:"default_authentication_method"`
	Enabled                     bool   `json:"enabled"`
	Id                          string `json:"id"`
	PrivateKey                  string `json:"private_key"`
	TeamId                      string `json:"team_id"`
	TokenKey                    string `json:"token_key"`
	TokenKeyId                  string `json:"token_key_id"`
}
