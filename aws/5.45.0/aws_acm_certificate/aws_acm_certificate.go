// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_acm_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_acm_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAcmCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aac *Resource) Type() string {
	return "aws_acm_certificate"
}

// LocalName returns the local name for [Resource].
func (aac *Resource) LocalName() string {
	return aac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aac *Resource) Configuration() interface{} {
	return aac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aac *Resource) Dependencies() terra.Dependencies {
	return aac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aac *Resource) LifecycleManagement() *terra.Lifecycle {
	return aac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aac *Resource) Attributes() awsAcmCertificateAttributes {
	return awsAcmCertificateAttributes{ref: terra.ReferenceResource(aac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aac *Resource) ImportState(state io.Reader) error {
	aac.state = &awsAcmCertificateState{}
	if err := json.NewDecoder(state).Decode(aac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aac.Type(), aac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aac *Resource) State() (*awsAcmCertificateState, bool) {
	return aac.state, aac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aac *Resource) StateMust() *awsAcmCertificateState {
	if aac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aac.Type(), aac.LocalName()))
	}
	return aac.state
}

// Args contains the configurations for aws_acm_certificate.
type Args struct {
	// CertificateAuthorityArn: string, optional
	CertificateAuthorityArn terra.StringValue `hcl:"certificate_authority_arn,attr"`
	// CertificateBody: string, optional
	CertificateBody terra.StringValue `hcl:"certificate_body,attr"`
	// CertificateChain: string, optional
	CertificateChain terra.StringValue `hcl:"certificate_chain,attr"`
	// DomainName: string, optional
	DomainName terra.StringValue `hcl:"domain_name,attr"`
	// EarlyRenewalDuration: string, optional
	EarlyRenewalDuration terra.StringValue `hcl:"early_renewal_duration,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyAlgorithm: string, optional
	KeyAlgorithm terra.StringValue `hcl:"key_algorithm,attr"`
	// PrivateKey: string, optional
	PrivateKey terra.StringValue `hcl:"private_key,attr"`
	// SubjectAlternativeNames: set of string, optional
	SubjectAlternativeNames terra.SetValue[terra.StringValue] `hcl:"subject_alternative_names,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ValidationMethod: string, optional
	ValidationMethod terra.StringValue `hcl:"validation_method,attr"`
	// Options: optional
	Options *Options `hcl:"options,block"`
	// ValidationOption: min=0
	ValidationOption []ValidationOption `hcl:"validation_option,block" validate:"min=0"`
}

type awsAcmCertificateAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("arn"))
}

// CertificateAuthorityArn returns a reference to field certificate_authority_arn of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) CertificateAuthorityArn() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("certificate_authority_arn"))
}

// CertificateBody returns a reference to field certificate_body of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) CertificateBody() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("certificate_body"))
}

// CertificateChain returns a reference to field certificate_chain of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) CertificateChain() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("certificate_chain"))
}

// DomainName returns a reference to field domain_name of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("domain_name"))
}

// EarlyRenewalDuration returns a reference to field early_renewal_duration of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) EarlyRenewalDuration() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("early_renewal_duration"))
}

// Id returns a reference to field id of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("id"))
}

// KeyAlgorithm returns a reference to field key_algorithm of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) KeyAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("key_algorithm"))
}

// NotAfter returns a reference to field not_after of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) NotAfter() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("not_after"))
}

// NotBefore returns a reference to field not_before of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) NotBefore() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("not_before"))
}

// PendingRenewal returns a reference to field pending_renewal of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) PendingRenewal() terra.BoolValue {
	return terra.ReferenceAsBool(aac.ref.Append("pending_renewal"))
}

// PrivateKey returns a reference to field private_key of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("private_key"))
}

// RenewalEligibility returns a reference to field renewal_eligibility of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) RenewalEligibility() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("renewal_eligibility"))
}

// Status returns a reference to field status of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("status"))
}

// SubjectAlternativeNames returns a reference to field subject_alternative_names of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) SubjectAlternativeNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aac.ref.Append("subject_alternative_names"))
}

// Tags returns a reference to field tags of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aac.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aac.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("type"))
}

// ValidationEmails returns a reference to field validation_emails of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) ValidationEmails() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aac.ref.Append("validation_emails"))
}

// ValidationMethod returns a reference to field validation_method of aws_acm_certificate.
func (aac awsAcmCertificateAttributes) ValidationMethod() terra.StringValue {
	return terra.ReferenceAsString(aac.ref.Append("validation_method"))
}

func (aac awsAcmCertificateAttributes) DomainValidationOptions() terra.SetValue[DomainValidationOptionsAttributes] {
	return terra.ReferenceAsSet[DomainValidationOptionsAttributes](aac.ref.Append("domain_validation_options"))
}

func (aac awsAcmCertificateAttributes) RenewalSummary() terra.ListValue[RenewalSummaryAttributes] {
	return terra.ReferenceAsList[RenewalSummaryAttributes](aac.ref.Append("renewal_summary"))
}

func (aac awsAcmCertificateAttributes) Options() terra.ListValue[OptionsAttributes] {
	return terra.ReferenceAsList[OptionsAttributes](aac.ref.Append("options"))
}

func (aac awsAcmCertificateAttributes) ValidationOption() terra.SetValue[ValidationOptionAttributes] {
	return terra.ReferenceAsSet[ValidationOptionAttributes](aac.ref.Append("validation_option"))
}

type awsAcmCertificateState struct {
	Arn                     string                         `json:"arn"`
	CertificateAuthorityArn string                         `json:"certificate_authority_arn"`
	CertificateBody         string                         `json:"certificate_body"`
	CertificateChain        string                         `json:"certificate_chain"`
	DomainName              string                         `json:"domain_name"`
	EarlyRenewalDuration    string                         `json:"early_renewal_duration"`
	Id                      string                         `json:"id"`
	KeyAlgorithm            string                         `json:"key_algorithm"`
	NotAfter                string                         `json:"not_after"`
	NotBefore               string                         `json:"not_before"`
	PendingRenewal          bool                           `json:"pending_renewal"`
	PrivateKey              string                         `json:"private_key"`
	RenewalEligibility      string                         `json:"renewal_eligibility"`
	Status                  string                         `json:"status"`
	SubjectAlternativeNames []string                       `json:"subject_alternative_names"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	Type                    string                         `json:"type"`
	ValidationEmails        []string                       `json:"validation_emails"`
	ValidationMethod        string                         `json:"validation_method"`
	DomainValidationOptions []DomainValidationOptionsState `json:"domain_validation_options"`
	RenewalSummary          []RenewalSummaryState          `json:"renewal_summary"`
	Options                 []OptionsState                 `json:"options"`
	ValidationOption        []ValidationOptionState        `json:"validation_option"`
}
