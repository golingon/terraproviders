// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_eks_fargate_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_eks_fargate_profile.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEksFargateProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aefp *Resource) Type() string {
	return "aws_eks_fargate_profile"
}

// LocalName returns the local name for [Resource].
func (aefp *Resource) LocalName() string {
	return aefp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aefp *Resource) Configuration() interface{} {
	return aefp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aefp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aefp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aefp *Resource) Dependencies() terra.Dependencies {
	return aefp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aefp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aefp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aefp *Resource) Attributes() awsEksFargateProfileAttributes {
	return awsEksFargateProfileAttributes{ref: terra.ReferenceResource(aefp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aefp *Resource) ImportState(state io.Reader) error {
	aefp.state = &awsEksFargateProfileState{}
	if err := json.NewDecoder(state).Decode(aefp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aefp.Type(), aefp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aefp *Resource) State() (*awsEksFargateProfileState, bool) {
	return aefp.state, aefp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aefp *Resource) StateMust() *awsEksFargateProfileState {
	if aefp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aefp.Type(), aefp.LocalName()))
	}
	return aefp.state
}

// Args contains the configurations for aws_eks_fargate_profile.
type Args struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// FargateProfileName: string, required
	FargateProfileName terra.StringValue `hcl:"fargate_profile_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PodExecutionRoleArn: string, required
	PodExecutionRoleArn terra.StringValue `hcl:"pod_execution_role_arn,attr" validate:"required"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Selector: min=1
	Selector []Selector `hcl:"selector,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEksFargateProfileAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_eks_fargate_profile.
func (aefp awsEksFargateProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aefp.ref.Append("arn"))
}

// ClusterName returns a reference to field cluster_name of aws_eks_fargate_profile.
func (aefp awsEksFargateProfileAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(aefp.ref.Append("cluster_name"))
}

// FargateProfileName returns a reference to field fargate_profile_name of aws_eks_fargate_profile.
func (aefp awsEksFargateProfileAttributes) FargateProfileName() terra.StringValue {
	return terra.ReferenceAsString(aefp.ref.Append("fargate_profile_name"))
}

// Id returns a reference to field id of aws_eks_fargate_profile.
func (aefp awsEksFargateProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aefp.ref.Append("id"))
}

// PodExecutionRoleArn returns a reference to field pod_execution_role_arn of aws_eks_fargate_profile.
func (aefp awsEksFargateProfileAttributes) PodExecutionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(aefp.ref.Append("pod_execution_role_arn"))
}

// Status returns a reference to field status of aws_eks_fargate_profile.
func (aefp awsEksFargateProfileAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aefp.ref.Append("status"))
}

// SubnetIds returns a reference to field subnet_ids of aws_eks_fargate_profile.
func (aefp awsEksFargateProfileAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aefp.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_eks_fargate_profile.
func (aefp awsEksFargateProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aefp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_eks_fargate_profile.
func (aefp awsEksFargateProfileAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aefp.ref.Append("tags_all"))
}

func (aefp awsEksFargateProfileAttributes) Selector() terra.SetValue[SelectorAttributes] {
	return terra.ReferenceAsSet[SelectorAttributes](aefp.ref.Append("selector"))
}

func (aefp awsEksFargateProfileAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aefp.ref.Append("timeouts"))
}

type awsEksFargateProfileState struct {
	Arn                 string            `json:"arn"`
	ClusterName         string            `json:"cluster_name"`
	FargateProfileName  string            `json:"fargate_profile_name"`
	Id                  string            `json:"id"`
	PodExecutionRoleArn string            `json:"pod_execution_role_arn"`
	Status              string            `json:"status"`
	SubnetIds           []string          `json:"subnet_ids"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
	Selector            []SelectorState   `json:"selector"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
