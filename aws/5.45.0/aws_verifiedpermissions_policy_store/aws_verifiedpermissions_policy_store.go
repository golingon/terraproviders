// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_verifiedpermissions_policy_store

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_verifiedpermissions_policy_store.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVerifiedpermissionsPolicyStoreState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avps *Resource) Type() string {
	return "aws_verifiedpermissions_policy_store"
}

// LocalName returns the local name for [Resource].
func (avps *Resource) LocalName() string {
	return avps.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avps *Resource) Configuration() interface{} {
	return avps.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avps *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avps)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avps *Resource) Dependencies() terra.Dependencies {
	return avps.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avps *Resource) LifecycleManagement() *terra.Lifecycle {
	return avps.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avps *Resource) Attributes() awsVerifiedpermissionsPolicyStoreAttributes {
	return awsVerifiedpermissionsPolicyStoreAttributes{ref: terra.ReferenceResource(avps)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avps *Resource) ImportState(state io.Reader) error {
	avps.state = &awsVerifiedpermissionsPolicyStoreState{}
	if err := json.NewDecoder(state).Decode(avps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avps.Type(), avps.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avps *Resource) State() (*awsVerifiedpermissionsPolicyStoreState, bool) {
	return avps.state, avps.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avps *Resource) StateMust() *awsVerifiedpermissionsPolicyStoreState {
	if avps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avps.Type(), avps.LocalName()))
	}
	return avps.state
}

// Args contains the configurations for aws_verifiedpermissions_policy_store.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ValidationSettings: min=0
	ValidationSettings []ValidationSettings `hcl:"validation_settings,block" validate:"min=0"`
}

type awsVerifiedpermissionsPolicyStoreAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_verifiedpermissions_policy_store.
func (avps awsVerifiedpermissionsPolicyStoreAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(avps.ref.Append("arn"))
}

// Description returns a reference to field description of aws_verifiedpermissions_policy_store.
func (avps awsVerifiedpermissionsPolicyStoreAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(avps.ref.Append("description"))
}

// Id returns a reference to field id of aws_verifiedpermissions_policy_store.
func (avps awsVerifiedpermissionsPolicyStoreAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avps.ref.Append("id"))
}

// PolicyStoreId returns a reference to field policy_store_id of aws_verifiedpermissions_policy_store.
func (avps awsVerifiedpermissionsPolicyStoreAttributes) PolicyStoreId() terra.StringValue {
	return terra.ReferenceAsString(avps.ref.Append("policy_store_id"))
}

func (avps awsVerifiedpermissionsPolicyStoreAttributes) ValidationSettings() terra.ListValue[ValidationSettingsAttributes] {
	return terra.ReferenceAsList[ValidationSettingsAttributes](avps.ref.Append("validation_settings"))
}

type awsVerifiedpermissionsPolicyStoreState struct {
	Arn                string                    `json:"arn"`
	Description        string                    `json:"description"`
	Id                 string                    `json:"id"`
	PolicyStoreId      string                    `json:"policy_store_id"`
	ValidationSettings []ValidationSettingsState `json:"validation_settings"`
}
