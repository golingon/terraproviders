// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_detective_graph

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_detective_graph.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDetectiveGraphState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adg *Resource) Type() string {
	return "aws_detective_graph"
}

// LocalName returns the local name for [Resource].
func (adg *Resource) LocalName() string {
	return adg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adg *Resource) Configuration() interface{} {
	return adg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adg *Resource) Dependencies() terra.Dependencies {
	return adg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adg *Resource) LifecycleManagement() *terra.Lifecycle {
	return adg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adg *Resource) Attributes() awsDetectiveGraphAttributes {
	return awsDetectiveGraphAttributes{ref: terra.ReferenceResource(adg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adg *Resource) ImportState(state io.Reader) error {
	adg.state = &awsDetectiveGraphState{}
	if err := json.NewDecoder(state).Decode(adg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adg.Type(), adg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adg *Resource) State() (*awsDetectiveGraphState, bool) {
	return adg.state, adg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adg *Resource) StateMust() *awsDetectiveGraphState {
	if adg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adg.Type(), adg.LocalName()))
	}
	return adg.state
}

// Args contains the configurations for aws_detective_graph.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsDetectiveGraphAttributes struct {
	ref terra.Reference
}

// CreatedTime returns a reference to field created_time of aws_detective_graph.
func (adg awsDetectiveGraphAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(adg.ref.Append("created_time"))
}

// GraphArn returns a reference to field graph_arn of aws_detective_graph.
func (adg awsDetectiveGraphAttributes) GraphArn() terra.StringValue {
	return terra.ReferenceAsString(adg.ref.Append("graph_arn"))
}

// Id returns a reference to field id of aws_detective_graph.
func (adg awsDetectiveGraphAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adg.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_detective_graph.
func (adg awsDetectiveGraphAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_detective_graph.
func (adg awsDetectiveGraphAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adg.ref.Append("tags_all"))
}

type awsDetectiveGraphState struct {
	CreatedTime string            `json:"created_time"`
	GraphArn    string            `json:"graph_arn"`
	Id          string            `json:"id"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
