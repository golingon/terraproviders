// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iam_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIamGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aig *Resource) Type() string {
	return "aws_iam_group"
}

// LocalName returns the local name for [Resource].
func (aig *Resource) LocalName() string {
	return aig.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aig *Resource) Configuration() interface{} {
	return aig.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aig *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aig)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aig *Resource) Dependencies() terra.Dependencies {
	return aig.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aig *Resource) LifecycleManagement() *terra.Lifecycle {
	return aig.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aig *Resource) Attributes() awsIamGroupAttributes {
	return awsIamGroupAttributes{ref: terra.ReferenceResource(aig)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aig *Resource) ImportState(state io.Reader) error {
	aig.state = &awsIamGroupState{}
	if err := json.NewDecoder(state).Decode(aig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aig.Type(), aig.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aig *Resource) State() (*awsIamGroupState, bool) {
	return aig.state, aig.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aig *Resource) StateMust() *awsIamGroupState {
	if aig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aig.Type(), aig.LocalName()))
	}
	return aig.state
}

// Args contains the configurations for aws_iam_group.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
}

type awsIamGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iam_group.
func (aig awsIamGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aig.ref.Append("arn"))
}

// Id returns a reference to field id of aws_iam_group.
func (aig awsIamGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aig.ref.Append("id"))
}

// Name returns a reference to field name of aws_iam_group.
func (aig awsIamGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aig.ref.Append("name"))
}

// Path returns a reference to field path of aws_iam_group.
func (aig awsIamGroupAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(aig.ref.Append("path"))
}

// UniqueId returns a reference to field unique_id of aws_iam_group.
func (aig awsIamGroupAttributes) UniqueId() terra.StringValue {
	return terra.ReferenceAsString(aig.ref.Append("unique_id"))
}

type awsIamGroupState struct {
	Arn      string `json:"arn"`
	Id       string `json:"id"`
	Name     string `json:"name"`
	Path     string `json:"path"`
	UniqueId string `json:"unique_id"`
}
