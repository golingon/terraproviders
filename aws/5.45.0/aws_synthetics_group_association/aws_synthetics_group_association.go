// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_synthetics_group_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_synthetics_group_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSyntheticsGroupAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asga *Resource) Type() string {
	return "aws_synthetics_group_association"
}

// LocalName returns the local name for [Resource].
func (asga *Resource) LocalName() string {
	return asga.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asga *Resource) Configuration() interface{} {
	return asga.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asga *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asga)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asga *Resource) Dependencies() terra.Dependencies {
	return asga.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asga *Resource) LifecycleManagement() *terra.Lifecycle {
	return asga.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asga *Resource) Attributes() awsSyntheticsGroupAssociationAttributes {
	return awsSyntheticsGroupAssociationAttributes{ref: terra.ReferenceResource(asga)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asga *Resource) ImportState(state io.Reader) error {
	asga.state = &awsSyntheticsGroupAssociationState{}
	if err := json.NewDecoder(state).Decode(asga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asga.Type(), asga.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asga *Resource) State() (*awsSyntheticsGroupAssociationState, bool) {
	return asga.state, asga.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asga *Resource) StateMust() *awsSyntheticsGroupAssociationState {
	if asga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asga.Type(), asga.LocalName()))
	}
	return asga.state
}

// Args contains the configurations for aws_synthetics_group_association.
type Args struct {
	// CanaryArn: string, required
	CanaryArn terra.StringValue `hcl:"canary_arn,attr" validate:"required"`
	// GroupName: string, required
	GroupName terra.StringValue `hcl:"group_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsSyntheticsGroupAssociationAttributes struct {
	ref terra.Reference
}

// CanaryArn returns a reference to field canary_arn of aws_synthetics_group_association.
func (asga awsSyntheticsGroupAssociationAttributes) CanaryArn() terra.StringValue {
	return terra.ReferenceAsString(asga.ref.Append("canary_arn"))
}

// GroupArn returns a reference to field group_arn of aws_synthetics_group_association.
func (asga awsSyntheticsGroupAssociationAttributes) GroupArn() terra.StringValue {
	return terra.ReferenceAsString(asga.ref.Append("group_arn"))
}

// GroupId returns a reference to field group_id of aws_synthetics_group_association.
func (asga awsSyntheticsGroupAssociationAttributes) GroupId() terra.StringValue {
	return terra.ReferenceAsString(asga.ref.Append("group_id"))
}

// GroupName returns a reference to field group_name of aws_synthetics_group_association.
func (asga awsSyntheticsGroupAssociationAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(asga.ref.Append("group_name"))
}

// Id returns a reference to field id of aws_synthetics_group_association.
func (asga awsSyntheticsGroupAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asga.ref.Append("id"))
}

type awsSyntheticsGroupAssociationState struct {
	CanaryArn string `json:"canary_arn"`
	GroupArn  string `json:"group_arn"`
	GroupId   string `json:"group_id"`
	GroupName string `json:"group_name"`
	Id        string `json:"id"`
}
