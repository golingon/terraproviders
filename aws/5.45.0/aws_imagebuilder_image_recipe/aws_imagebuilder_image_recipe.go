// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_image_recipe

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_imagebuilder_image_recipe.
type Resource struct {
	Name      string
	Args      Args
	state     *awsImagebuilderImageRecipeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aiir *Resource) Type() string {
	return "aws_imagebuilder_image_recipe"
}

// LocalName returns the local name for [Resource].
func (aiir *Resource) LocalName() string {
	return aiir.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aiir *Resource) Configuration() interface{} {
	return aiir.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aiir *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aiir)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aiir *Resource) Dependencies() terra.Dependencies {
	return aiir.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aiir *Resource) LifecycleManagement() *terra.Lifecycle {
	return aiir.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aiir *Resource) Attributes() awsImagebuilderImageRecipeAttributes {
	return awsImagebuilderImageRecipeAttributes{ref: terra.ReferenceResource(aiir)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aiir *Resource) ImportState(state io.Reader) error {
	aiir.state = &awsImagebuilderImageRecipeState{}
	if err := json.NewDecoder(state).Decode(aiir.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiir.Type(), aiir.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aiir *Resource) State() (*awsImagebuilderImageRecipeState, bool) {
	return aiir.state, aiir.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aiir *Resource) StateMust() *awsImagebuilderImageRecipeState {
	if aiir.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiir.Type(), aiir.LocalName()))
	}
	return aiir.state
}

// Args contains the configurations for aws_imagebuilder_image_recipe.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParentImage: string, required
	ParentImage terra.StringValue `hcl:"parent_image,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserDataBase64: string, optional
	UserDataBase64 terra.StringValue `hcl:"user_data_base64,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// WorkingDirectory: string, optional
	WorkingDirectory terra.StringValue `hcl:"working_directory,attr"`
	// BlockDeviceMapping: min=0
	BlockDeviceMapping []BlockDeviceMapping `hcl:"block_device_mapping,block" validate:"min=0"`
	// Component: min=1
	Component []Component `hcl:"component,block" validate:"min=1"`
	// SystemsManagerAgent: optional
	SystemsManagerAgent *SystemsManagerAgent `hcl:"systems_manager_agent,block"`
}

type awsImagebuilderImageRecipeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_imagebuilder_image_recipe.
func (aiir awsImagebuilderImageRecipeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aiir.ref.Append("arn"))
}

// DateCreated returns a reference to field date_created of aws_imagebuilder_image_recipe.
func (aiir awsImagebuilderImageRecipeAttributes) DateCreated() terra.StringValue {
	return terra.ReferenceAsString(aiir.ref.Append("date_created"))
}

// Description returns a reference to field description of aws_imagebuilder_image_recipe.
func (aiir awsImagebuilderImageRecipeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aiir.ref.Append("description"))
}

// Id returns a reference to field id of aws_imagebuilder_image_recipe.
func (aiir awsImagebuilderImageRecipeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiir.ref.Append("id"))
}

// Name returns a reference to field name of aws_imagebuilder_image_recipe.
func (aiir awsImagebuilderImageRecipeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aiir.ref.Append("name"))
}

// Owner returns a reference to field owner of aws_imagebuilder_image_recipe.
func (aiir awsImagebuilderImageRecipeAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(aiir.ref.Append("owner"))
}

// ParentImage returns a reference to field parent_image of aws_imagebuilder_image_recipe.
func (aiir awsImagebuilderImageRecipeAttributes) ParentImage() terra.StringValue {
	return terra.ReferenceAsString(aiir.ref.Append("parent_image"))
}

// Platform returns a reference to field platform of aws_imagebuilder_image_recipe.
func (aiir awsImagebuilderImageRecipeAttributes) Platform() terra.StringValue {
	return terra.ReferenceAsString(aiir.ref.Append("platform"))
}

// Tags returns a reference to field tags of aws_imagebuilder_image_recipe.
func (aiir awsImagebuilderImageRecipeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiir.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_imagebuilder_image_recipe.
func (aiir awsImagebuilderImageRecipeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiir.ref.Append("tags_all"))
}

// UserDataBase64 returns a reference to field user_data_base64 of aws_imagebuilder_image_recipe.
func (aiir awsImagebuilderImageRecipeAttributes) UserDataBase64() terra.StringValue {
	return terra.ReferenceAsString(aiir.ref.Append("user_data_base64"))
}

// Version returns a reference to field version of aws_imagebuilder_image_recipe.
func (aiir awsImagebuilderImageRecipeAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(aiir.ref.Append("version"))
}

// WorkingDirectory returns a reference to field working_directory of aws_imagebuilder_image_recipe.
func (aiir awsImagebuilderImageRecipeAttributes) WorkingDirectory() terra.StringValue {
	return terra.ReferenceAsString(aiir.ref.Append("working_directory"))
}

func (aiir awsImagebuilderImageRecipeAttributes) BlockDeviceMapping() terra.SetValue[BlockDeviceMappingAttributes] {
	return terra.ReferenceAsSet[BlockDeviceMappingAttributes](aiir.ref.Append("block_device_mapping"))
}

func (aiir awsImagebuilderImageRecipeAttributes) Component() terra.ListValue[ComponentAttributes] {
	return terra.ReferenceAsList[ComponentAttributes](aiir.ref.Append("component"))
}

func (aiir awsImagebuilderImageRecipeAttributes) SystemsManagerAgent() terra.ListValue[SystemsManagerAgentAttributes] {
	return terra.ReferenceAsList[SystemsManagerAgentAttributes](aiir.ref.Append("systems_manager_agent"))
}

type awsImagebuilderImageRecipeState struct {
	Arn                 string                     `json:"arn"`
	DateCreated         string                     `json:"date_created"`
	Description         string                     `json:"description"`
	Id                  string                     `json:"id"`
	Name                string                     `json:"name"`
	Owner               string                     `json:"owner"`
	ParentImage         string                     `json:"parent_image"`
	Platform            string                     `json:"platform"`
	Tags                map[string]string          `json:"tags"`
	TagsAll             map[string]string          `json:"tags_all"`
	UserDataBase64      string                     `json:"user_data_base64"`
	Version             string                     `json:"version"`
	WorkingDirectory    string                     `json:"working_directory"`
	BlockDeviceMapping  []BlockDeviceMappingState  `json:"block_device_mapping"`
	Component           []ComponentState           `json:"component"`
	SystemsManagerAgent []SystemsManagerAgentState `json:"systems_manager_agent"`
}
