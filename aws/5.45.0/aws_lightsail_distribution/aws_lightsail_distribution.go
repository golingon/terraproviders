// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lightsail_distribution

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lightsail_distribution.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLightsailDistributionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ald *Resource) Type() string {
	return "aws_lightsail_distribution"
}

// LocalName returns the local name for [Resource].
func (ald *Resource) LocalName() string {
	return ald.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ald *Resource) Configuration() interface{} {
	return ald.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ald *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ald)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ald *Resource) Dependencies() terra.Dependencies {
	return ald.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ald *Resource) LifecycleManagement() *terra.Lifecycle {
	return ald.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ald *Resource) Attributes() awsLightsailDistributionAttributes {
	return awsLightsailDistributionAttributes{ref: terra.ReferenceResource(ald)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ald *Resource) ImportState(state io.Reader) error {
	ald.state = &awsLightsailDistributionState{}
	if err := json.NewDecoder(state).Decode(ald.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ald.Type(), ald.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ald *Resource) State() (*awsLightsailDistributionState, bool) {
	return ald.state, ald.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ald *Resource) StateMust() *awsLightsailDistributionState {
	if ald.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ald.Type(), ald.LocalName()))
	}
	return ald.state
}

// Args contains the configurations for aws_lightsail_distribution.
type Args struct {
	// BundleId: string, required
	BundleId terra.StringValue `hcl:"bundle_id,attr" validate:"required"`
	// CertificateName: string, optional
	CertificateName terra.StringValue `hcl:"certificate_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddressType: string, optional
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr"`
	// IsEnabled: bool, optional
	IsEnabled terra.BoolValue `hcl:"is_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CacheBehavior: min=0
	CacheBehavior []CacheBehavior `hcl:"cache_behavior,block" validate:"min=0"`
	// CacheBehaviorSettings: optional
	CacheBehaviorSettings *CacheBehaviorSettings `hcl:"cache_behavior_settings,block"`
	// DefaultCacheBehavior: required
	DefaultCacheBehavior *DefaultCacheBehavior `hcl:"default_cache_behavior,block" validate:"required"`
	// Origin: required
	Origin *Origin `hcl:"origin,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsLightsailDistributionAttributes struct {
	ref terra.Reference
}

// AlternativeDomainNames returns a reference to field alternative_domain_names of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) AlternativeDomainNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ald.ref.Append("alternative_domain_names"))
}

// Arn returns a reference to field arn of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("arn"))
}

// BundleId returns a reference to field bundle_id of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) BundleId() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("bundle_id"))
}

// CertificateName returns a reference to field certificate_name of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) CertificateName() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("certificate_name"))
}

// CreatedAt returns a reference to field created_at of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("created_at"))
}

// DomainName returns a reference to field domain_name of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("id"))
}

// IpAddressType returns a reference to field ip_address_type of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("ip_address_type"))
}

// IsEnabled returns a reference to field is_enabled of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) IsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ald.ref.Append("is_enabled"))
}

// Name returns a reference to field name of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("name"))
}

// OriginPublicDns returns a reference to field origin_public_dns of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) OriginPublicDns() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("origin_public_dns"))
}

// ResourceType returns a reference to field resource_type of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("resource_type"))
}

// Status returns a reference to field status of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("status"))
}

// SupportCode returns a reference to field support_code of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) SupportCode() terra.StringValue {
	return terra.ReferenceAsString(ald.ref.Append("support_code"))
}

// Tags returns a reference to field tags of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ald.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_lightsail_distribution.
func (ald awsLightsailDistributionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ald.ref.Append("tags_all"))
}

func (ald awsLightsailDistributionAttributes) Location() terra.ListValue[LocationAttributes] {
	return terra.ReferenceAsList[LocationAttributes](ald.ref.Append("location"))
}

func (ald awsLightsailDistributionAttributes) CacheBehavior() terra.SetValue[CacheBehaviorAttributes] {
	return terra.ReferenceAsSet[CacheBehaviorAttributes](ald.ref.Append("cache_behavior"))
}

func (ald awsLightsailDistributionAttributes) CacheBehaviorSettings() terra.ListValue[CacheBehaviorSettingsAttributes] {
	return terra.ReferenceAsList[CacheBehaviorSettingsAttributes](ald.ref.Append("cache_behavior_settings"))
}

func (ald awsLightsailDistributionAttributes) DefaultCacheBehavior() terra.ListValue[DefaultCacheBehaviorAttributes] {
	return terra.ReferenceAsList[DefaultCacheBehaviorAttributes](ald.ref.Append("default_cache_behavior"))
}

func (ald awsLightsailDistributionAttributes) Origin() terra.ListValue[OriginAttributes] {
	return terra.ReferenceAsList[OriginAttributes](ald.ref.Append("origin"))
}

func (ald awsLightsailDistributionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ald.ref.Append("timeouts"))
}

type awsLightsailDistributionState struct {
	AlternativeDomainNames []string                     `json:"alternative_domain_names"`
	Arn                    string                       `json:"arn"`
	BundleId               string                       `json:"bundle_id"`
	CertificateName        string                       `json:"certificate_name"`
	CreatedAt              string                       `json:"created_at"`
	DomainName             string                       `json:"domain_name"`
	Id                     string                       `json:"id"`
	IpAddressType          string                       `json:"ip_address_type"`
	IsEnabled              bool                         `json:"is_enabled"`
	Name                   string                       `json:"name"`
	OriginPublicDns        string                       `json:"origin_public_dns"`
	ResourceType           string                       `json:"resource_type"`
	Status                 string                       `json:"status"`
	SupportCode            string                       `json:"support_code"`
	Tags                   map[string]string            `json:"tags"`
	TagsAll                map[string]string            `json:"tags_all"`
	Location               []LocationState              `json:"location"`
	CacheBehavior          []CacheBehaviorState         `json:"cache_behavior"`
	CacheBehaviorSettings  []CacheBehaviorSettingsState `json:"cache_behavior_settings"`
	DefaultCacheBehavior   []DefaultCacheBehaviorState  `json:"default_cache_behavior"`
	Origin                 []OriginState                `json:"origin"`
	Timeouts               *TimeoutsState               `json:"timeouts"`
}
