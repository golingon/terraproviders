// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_region

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_region.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (ar *DataSource) DataSource() string {
	return "aws_region"
}

// LocalName returns the local name for [DataSource].
func (ar *DataSource) LocalName() string {
	return ar.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (ar *DataSource) Configuration() interface{} {
	return ar.Args
}

// Attributes returns the attributes for [DataSource].
func (ar *DataSource) Attributes() dataAwsRegionAttributes {
	return dataAwsRegionAttributes{ref: terra.ReferenceDataSource(ar)}
}

// DataArgs contains the configurations for aws_region.
type DataArgs struct {
	// Endpoint: string, optional
	Endpoint terra.StringValue `hcl:"endpoint,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
}

type dataAwsRegionAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_region.
func (ar dataAwsRegionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("description"))
}

// Endpoint returns a reference to field endpoint of aws_region.
func (ar dataAwsRegionAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("endpoint"))
}

// Id returns a reference to field id of aws_region.
func (ar dataAwsRegionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("id"))
}

// Name returns a reference to field name of aws_region.
func (ar dataAwsRegionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("name"))
}
