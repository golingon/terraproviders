// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_securityhub_product_subscription

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_securityhub_product_subscription.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSecurityhubProductSubscriptionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asps *Resource) Type() string {
	return "aws_securityhub_product_subscription"
}

// LocalName returns the local name for [Resource].
func (asps *Resource) LocalName() string {
	return asps.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asps *Resource) Configuration() interface{} {
	return asps.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asps *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asps)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asps *Resource) Dependencies() terra.Dependencies {
	return asps.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asps *Resource) LifecycleManagement() *terra.Lifecycle {
	return asps.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asps *Resource) Attributes() awsSecurityhubProductSubscriptionAttributes {
	return awsSecurityhubProductSubscriptionAttributes{ref: terra.ReferenceResource(asps)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asps *Resource) ImportState(state io.Reader) error {
	asps.state = &awsSecurityhubProductSubscriptionState{}
	if err := json.NewDecoder(state).Decode(asps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asps.Type(), asps.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asps *Resource) State() (*awsSecurityhubProductSubscriptionState, bool) {
	return asps.state, asps.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asps *Resource) StateMust() *awsSecurityhubProductSubscriptionState {
	if asps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asps.Type(), asps.LocalName()))
	}
	return asps.state
}

// Args contains the configurations for aws_securityhub_product_subscription.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProductArn: string, required
	ProductArn terra.StringValue `hcl:"product_arn,attr" validate:"required"`
}

type awsSecurityhubProductSubscriptionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_securityhub_product_subscription.
func (asps awsSecurityhubProductSubscriptionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asps.ref.Append("arn"))
}

// Id returns a reference to field id of aws_securityhub_product_subscription.
func (asps awsSecurityhubProductSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asps.ref.Append("id"))
}

// ProductArn returns a reference to field product_arn of aws_securityhub_product_subscription.
func (asps awsSecurityhubProductSubscriptionAttributes) ProductArn() terra.StringValue {
	return terra.ReferenceAsString(asps.ref.Append("product_arn"))
}

type awsSecurityhubProductSubscriptionState struct {
	Arn        string `json:"arn"`
	Id         string `json:"id"`
	ProductArn string `json:"product_arn"`
}
