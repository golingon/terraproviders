// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_apprunner_deployment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_apprunner_deployment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApprunnerDeploymentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aad *Resource) Type() string {
	return "aws_apprunner_deployment"
}

// LocalName returns the local name for [Resource].
func (aad *Resource) LocalName() string {
	return aad.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aad *Resource) Configuration() interface{} {
	return aad.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aad *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aad)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aad *Resource) Dependencies() terra.Dependencies {
	return aad.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aad *Resource) LifecycleManagement() *terra.Lifecycle {
	return aad.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aad *Resource) Attributes() awsApprunnerDeploymentAttributes {
	return awsApprunnerDeploymentAttributes{ref: terra.ReferenceResource(aad)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aad *Resource) ImportState(state io.Reader) error {
	aad.state = &awsApprunnerDeploymentState{}
	if err := json.NewDecoder(state).Decode(aad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aad.Type(), aad.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aad *Resource) State() (*awsApprunnerDeploymentState, bool) {
	return aad.state, aad.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aad *Resource) StateMust() *awsApprunnerDeploymentState {
	if aad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aad.Type(), aad.LocalName()))
	}
	return aad.state
}

// Args contains the configurations for aws_apprunner_deployment.
type Args struct {
	// ServiceArn: string, required
	ServiceArn terra.StringValue `hcl:"service_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsApprunnerDeploymentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_apprunner_deployment.
func (aad awsApprunnerDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("id"))
}

// OperationId returns a reference to field operation_id of aws_apprunner_deployment.
func (aad awsApprunnerDeploymentAttributes) OperationId() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("operation_id"))
}

// ServiceArn returns a reference to field service_arn of aws_apprunner_deployment.
func (aad awsApprunnerDeploymentAttributes) ServiceArn() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("service_arn"))
}

// Status returns a reference to field status of aws_apprunner_deployment.
func (aad awsApprunnerDeploymentAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("status"))
}

func (aad awsApprunnerDeploymentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aad.ref.Append("timeouts"))
}

type awsApprunnerDeploymentState struct {
	Id          string         `json:"id"`
	OperationId string         `json:"operation_id"`
	ServiceArn  string         `json:"service_arn"`
	Status      string         `json:"status"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
