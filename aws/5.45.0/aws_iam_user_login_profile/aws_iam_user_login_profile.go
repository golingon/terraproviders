// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_user_login_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iam_user_login_profile.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIamUserLoginProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aiulp *Resource) Type() string {
	return "aws_iam_user_login_profile"
}

// LocalName returns the local name for [Resource].
func (aiulp *Resource) LocalName() string {
	return aiulp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aiulp *Resource) Configuration() interface{} {
	return aiulp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aiulp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aiulp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aiulp *Resource) Dependencies() terra.Dependencies {
	return aiulp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aiulp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aiulp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aiulp *Resource) Attributes() awsIamUserLoginProfileAttributes {
	return awsIamUserLoginProfileAttributes{ref: terra.ReferenceResource(aiulp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aiulp *Resource) ImportState(state io.Reader) error {
	aiulp.state = &awsIamUserLoginProfileState{}
	if err := json.NewDecoder(state).Decode(aiulp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiulp.Type(), aiulp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aiulp *Resource) State() (*awsIamUserLoginProfileState, bool) {
	return aiulp.state, aiulp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aiulp *Resource) StateMust() *awsIamUserLoginProfileState {
	if aiulp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiulp.Type(), aiulp.LocalName()))
	}
	return aiulp.state
}

// Args contains the configurations for aws_iam_user_login_profile.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PasswordLength: number, optional
	PasswordLength terra.NumberValue `hcl:"password_length,attr"`
	// PasswordResetRequired: bool, optional
	PasswordResetRequired terra.BoolValue `hcl:"password_reset_required,attr"`
	// PgpKey: string, optional
	PgpKey terra.StringValue `hcl:"pgp_key,attr"`
	// User: string, required
	User terra.StringValue `hcl:"user,attr" validate:"required"`
}

type awsIamUserLoginProfileAttributes struct {
	ref terra.Reference
}

// EncryptedPassword returns a reference to field encrypted_password of aws_iam_user_login_profile.
func (aiulp awsIamUserLoginProfileAttributes) EncryptedPassword() terra.StringValue {
	return terra.ReferenceAsString(aiulp.ref.Append("encrypted_password"))
}

// Id returns a reference to field id of aws_iam_user_login_profile.
func (aiulp awsIamUserLoginProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiulp.ref.Append("id"))
}

// KeyFingerprint returns a reference to field key_fingerprint of aws_iam_user_login_profile.
func (aiulp awsIamUserLoginProfileAttributes) KeyFingerprint() terra.StringValue {
	return terra.ReferenceAsString(aiulp.ref.Append("key_fingerprint"))
}

// Password returns a reference to field password of aws_iam_user_login_profile.
func (aiulp awsIamUserLoginProfileAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(aiulp.ref.Append("password"))
}

// PasswordLength returns a reference to field password_length of aws_iam_user_login_profile.
func (aiulp awsIamUserLoginProfileAttributes) PasswordLength() terra.NumberValue {
	return terra.ReferenceAsNumber(aiulp.ref.Append("password_length"))
}

// PasswordResetRequired returns a reference to field password_reset_required of aws_iam_user_login_profile.
func (aiulp awsIamUserLoginProfileAttributes) PasswordResetRequired() terra.BoolValue {
	return terra.ReferenceAsBool(aiulp.ref.Append("password_reset_required"))
}

// PgpKey returns a reference to field pgp_key of aws_iam_user_login_profile.
func (aiulp awsIamUserLoginProfileAttributes) PgpKey() terra.StringValue {
	return terra.ReferenceAsString(aiulp.ref.Append("pgp_key"))
}

// User returns a reference to field user of aws_iam_user_login_profile.
func (aiulp awsIamUserLoginProfileAttributes) User() terra.StringValue {
	return terra.ReferenceAsString(aiulp.ref.Append("user"))
}

type awsIamUserLoginProfileState struct {
	EncryptedPassword     string  `json:"encrypted_password"`
	Id                    string  `json:"id"`
	KeyFingerprint        string  `json:"key_fingerprint"`
	Password              string  `json:"password"`
	PasswordLength        float64 `json:"password_length"`
	PasswordResetRequired bool    `json:"password_reset_required"`
	PgpKey                string  `json:"pgp_key"`
	User                  string  `json:"user"`
}
