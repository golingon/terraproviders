// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appsync_api_cache

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_appsync_api_cache.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppsyncApiCacheState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaac *Resource) Type() string {
	return "aws_appsync_api_cache"
}

// LocalName returns the local name for [Resource].
func (aaac *Resource) LocalName() string {
	return aaac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaac *Resource) Configuration() interface{} {
	return aaac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaac *Resource) Dependencies() terra.Dependencies {
	return aaac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaac *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaac *Resource) Attributes() awsAppsyncApiCacheAttributes {
	return awsAppsyncApiCacheAttributes{ref: terra.ReferenceResource(aaac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaac *Resource) ImportState(state io.Reader) error {
	aaac.state = &awsAppsyncApiCacheState{}
	if err := json.NewDecoder(state).Decode(aaac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaac.Type(), aaac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaac *Resource) State() (*awsAppsyncApiCacheState, bool) {
	return aaac.state, aaac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaac *Resource) StateMust() *awsAppsyncApiCacheState {
	if aaac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaac.Type(), aaac.LocalName()))
	}
	return aaac.state
}

// Args contains the configurations for aws_appsync_api_cache.
type Args struct {
	// ApiCachingBehavior: string, required
	ApiCachingBehavior terra.StringValue `hcl:"api_caching_behavior,attr" validate:"required"`
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// AtRestEncryptionEnabled: bool, optional
	AtRestEncryptionEnabled terra.BoolValue `hcl:"at_rest_encryption_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TransitEncryptionEnabled: bool, optional
	TransitEncryptionEnabled terra.BoolValue `hcl:"transit_encryption_enabled,attr"`
	// Ttl: number, required
	Ttl terra.NumberValue `hcl:"ttl,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type awsAppsyncApiCacheAttributes struct {
	ref terra.Reference
}

// ApiCachingBehavior returns a reference to field api_caching_behavior of aws_appsync_api_cache.
func (aaac awsAppsyncApiCacheAttributes) ApiCachingBehavior() terra.StringValue {
	return terra.ReferenceAsString(aaac.ref.Append("api_caching_behavior"))
}

// ApiId returns a reference to field api_id of aws_appsync_api_cache.
func (aaac awsAppsyncApiCacheAttributes) ApiId() terra.StringValue {
	return terra.ReferenceAsString(aaac.ref.Append("api_id"))
}

// AtRestEncryptionEnabled returns a reference to field at_rest_encryption_enabled of aws_appsync_api_cache.
func (aaac awsAppsyncApiCacheAttributes) AtRestEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aaac.ref.Append("at_rest_encryption_enabled"))
}

// Id returns a reference to field id of aws_appsync_api_cache.
func (aaac awsAppsyncApiCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaac.ref.Append("id"))
}

// TransitEncryptionEnabled returns a reference to field transit_encryption_enabled of aws_appsync_api_cache.
func (aaac awsAppsyncApiCacheAttributes) TransitEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aaac.ref.Append("transit_encryption_enabled"))
}

// Ttl returns a reference to field ttl of aws_appsync_api_cache.
func (aaac awsAppsyncApiCacheAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(aaac.ref.Append("ttl"))
}

// Type returns a reference to field type of aws_appsync_api_cache.
func (aaac awsAppsyncApiCacheAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aaac.ref.Append("type"))
}

type awsAppsyncApiCacheState struct {
	ApiCachingBehavior       string  `json:"api_caching_behavior"`
	ApiId                    string  `json:"api_id"`
	AtRestEncryptionEnabled  bool    `json:"at_rest_encryption_enabled"`
	Id                       string  `json:"id"`
	TransitEncryptionEnabled bool    `json:"transit_encryption_enabled"`
	Ttl                      float64 `json:"ttl"`
	Type                     string  `json:"type"`
}
