// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_eip

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_eip.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEipState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ae *Resource) Type() string {
	return "aws_eip"
}

// LocalName returns the local name for [Resource].
func (ae *Resource) LocalName() string {
	return ae.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ae *Resource) Configuration() interface{} {
	return ae.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ae *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ae)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ae *Resource) Dependencies() terra.Dependencies {
	return ae.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ae *Resource) LifecycleManagement() *terra.Lifecycle {
	return ae.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ae *Resource) Attributes() awsEipAttributes {
	return awsEipAttributes{ref: terra.ReferenceResource(ae)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ae *Resource) ImportState(state io.Reader) error {
	ae.state = &awsEipState{}
	if err := json.NewDecoder(state).Decode(ae.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ae.Type(), ae.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ae *Resource) State() (*awsEipState, bool) {
	return ae.state, ae.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ae *Resource) StateMust() *awsEipState {
	if ae.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ae.Type(), ae.LocalName()))
	}
	return ae.state
}

// Args contains the configurations for aws_eip.
type Args struct {
	// Address: string, optional
	Address terra.StringValue `hcl:"address,attr"`
	// AssociateWithPrivateIp: string, optional
	AssociateWithPrivateIp terra.StringValue `hcl:"associate_with_private_ip,attr"`
	// CustomerOwnedIpv4Pool: string, optional
	CustomerOwnedIpv4Pool terra.StringValue `hcl:"customer_owned_ipv4_pool,attr"`
	// Domain: string, optional
	Domain terra.StringValue `hcl:"domain,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, optional
	Instance terra.StringValue `hcl:"instance,attr"`
	// NetworkBorderGroup: string, optional
	NetworkBorderGroup terra.StringValue `hcl:"network_border_group,attr"`
	// NetworkInterface: string, optional
	NetworkInterface terra.StringValue `hcl:"network_interface,attr"`
	// PublicIpv4Pool: string, optional
	PublicIpv4Pool terra.StringValue `hcl:"public_ipv4_pool,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Vpc: bool, optional
	Vpc terra.BoolValue `hcl:"vpc,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEipAttributes struct {
	ref terra.Reference
}

// Address returns a reference to field address of aws_eip.
func (ae awsEipAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("address"))
}

// AllocationId returns a reference to field allocation_id of aws_eip.
func (ae awsEipAttributes) AllocationId() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("allocation_id"))
}

// AssociateWithPrivateIp returns a reference to field associate_with_private_ip of aws_eip.
func (ae awsEipAttributes) AssociateWithPrivateIp() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("associate_with_private_ip"))
}

// AssociationId returns a reference to field association_id of aws_eip.
func (ae awsEipAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("association_id"))
}

// CarrierIp returns a reference to field carrier_ip of aws_eip.
func (ae awsEipAttributes) CarrierIp() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("carrier_ip"))
}

// CustomerOwnedIp returns a reference to field customer_owned_ip of aws_eip.
func (ae awsEipAttributes) CustomerOwnedIp() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("customer_owned_ip"))
}

// CustomerOwnedIpv4Pool returns a reference to field customer_owned_ipv4_pool of aws_eip.
func (ae awsEipAttributes) CustomerOwnedIpv4Pool() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("customer_owned_ipv4_pool"))
}

// Domain returns a reference to field domain of aws_eip.
func (ae awsEipAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("domain"))
}

// Id returns a reference to field id of aws_eip.
func (ae awsEipAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("id"))
}

// Instance returns a reference to field instance of aws_eip.
func (ae awsEipAttributes) Instance() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("instance"))
}

// NetworkBorderGroup returns a reference to field network_border_group of aws_eip.
func (ae awsEipAttributes) NetworkBorderGroup() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("network_border_group"))
}

// NetworkInterface returns a reference to field network_interface of aws_eip.
func (ae awsEipAttributes) NetworkInterface() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("network_interface"))
}

// PrivateDns returns a reference to field private_dns of aws_eip.
func (ae awsEipAttributes) PrivateDns() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("private_dns"))
}

// PrivateIp returns a reference to field private_ip of aws_eip.
func (ae awsEipAttributes) PrivateIp() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("private_ip"))
}

// PublicDns returns a reference to field public_dns of aws_eip.
func (ae awsEipAttributes) PublicDns() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("public_dns"))
}

// PublicIp returns a reference to field public_ip of aws_eip.
func (ae awsEipAttributes) PublicIp() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("public_ip"))
}

// PublicIpv4Pool returns a reference to field public_ipv4_pool of aws_eip.
func (ae awsEipAttributes) PublicIpv4Pool() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("public_ipv4_pool"))
}

// Tags returns a reference to field tags of aws_eip.
func (ae awsEipAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ae.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_eip.
func (ae awsEipAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ae.ref.Append("tags_all"))
}

// Vpc returns a reference to field vpc of aws_eip.
func (ae awsEipAttributes) Vpc() terra.BoolValue {
	return terra.ReferenceAsBool(ae.ref.Append("vpc"))
}

func (ae awsEipAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ae.ref.Append("timeouts"))
}

type awsEipState struct {
	Address                string            `json:"address"`
	AllocationId           string            `json:"allocation_id"`
	AssociateWithPrivateIp string            `json:"associate_with_private_ip"`
	AssociationId          string            `json:"association_id"`
	CarrierIp              string            `json:"carrier_ip"`
	CustomerOwnedIp        string            `json:"customer_owned_ip"`
	CustomerOwnedIpv4Pool  string            `json:"customer_owned_ipv4_pool"`
	Domain                 string            `json:"domain"`
	Id                     string            `json:"id"`
	Instance               string            `json:"instance"`
	NetworkBorderGroup     string            `json:"network_border_group"`
	NetworkInterface       string            `json:"network_interface"`
	PrivateDns             string            `json:"private_dns"`
	PrivateIp              string            `json:"private_ip"`
	PublicDns              string            `json:"public_dns"`
	PublicIp               string            `json:"public_ip"`
	PublicIpv4Pool         string            `json:"public_ipv4_pool"`
	Tags                   map[string]string `json:"tags"`
	TagsAll                map[string]string `json:"tags_all"`
	Vpc                    bool              `json:"vpc"`
	Timeouts               *TimeoutsState    `json:"timeouts"`
}
