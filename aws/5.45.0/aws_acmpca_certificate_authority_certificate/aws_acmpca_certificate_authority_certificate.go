// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_acmpca_certificate_authority_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_acmpca_certificate_authority_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAcmpcaCertificateAuthorityCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aacac *Resource) Type() string {
	return "aws_acmpca_certificate_authority_certificate"
}

// LocalName returns the local name for [Resource].
func (aacac *Resource) LocalName() string {
	return aacac.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aacac *Resource) Configuration() interface{} {
	return aacac.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aacac *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aacac)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aacac *Resource) Dependencies() terra.Dependencies {
	return aacac.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aacac *Resource) LifecycleManagement() *terra.Lifecycle {
	return aacac.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aacac *Resource) Attributes() awsAcmpcaCertificateAuthorityCertificateAttributes {
	return awsAcmpcaCertificateAuthorityCertificateAttributes{ref: terra.ReferenceResource(aacac)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aacac *Resource) ImportState(state io.Reader) error {
	aacac.state = &awsAcmpcaCertificateAuthorityCertificateState{}
	if err := json.NewDecoder(state).Decode(aacac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aacac.Type(), aacac.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aacac *Resource) State() (*awsAcmpcaCertificateAuthorityCertificateState, bool) {
	return aacac.state, aacac.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aacac *Resource) StateMust() *awsAcmpcaCertificateAuthorityCertificateState {
	if aacac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aacac.Type(), aacac.LocalName()))
	}
	return aacac.state
}

// Args contains the configurations for aws_acmpca_certificate_authority_certificate.
type Args struct {
	// Certificate: string, required
	Certificate terra.StringValue `hcl:"certificate,attr" validate:"required"`
	// CertificateAuthorityArn: string, required
	CertificateAuthorityArn terra.StringValue `hcl:"certificate_authority_arn,attr" validate:"required"`
	// CertificateChain: string, optional
	CertificateChain terra.StringValue `hcl:"certificate_chain,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsAcmpcaCertificateAuthorityCertificateAttributes struct {
	ref terra.Reference
}

// Certificate returns a reference to field certificate of aws_acmpca_certificate_authority_certificate.
func (aacac awsAcmpcaCertificateAuthorityCertificateAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(aacac.ref.Append("certificate"))
}

// CertificateAuthorityArn returns a reference to field certificate_authority_arn of aws_acmpca_certificate_authority_certificate.
func (aacac awsAcmpcaCertificateAuthorityCertificateAttributes) CertificateAuthorityArn() terra.StringValue {
	return terra.ReferenceAsString(aacac.ref.Append("certificate_authority_arn"))
}

// CertificateChain returns a reference to field certificate_chain of aws_acmpca_certificate_authority_certificate.
func (aacac awsAcmpcaCertificateAuthorityCertificateAttributes) CertificateChain() terra.StringValue {
	return terra.ReferenceAsString(aacac.ref.Append("certificate_chain"))
}

// Id returns a reference to field id of aws_acmpca_certificate_authority_certificate.
func (aacac awsAcmpcaCertificateAuthorityCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aacac.ref.Append("id"))
}

type awsAcmpcaCertificateAuthorityCertificateState struct {
	Certificate             string `json:"certificate"`
	CertificateAuthorityArn string `json:"certificate_authority_arn"`
	CertificateChain        string `json:"certificate_chain"`
	Id                      string `json:"id"`
}
