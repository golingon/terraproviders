// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_budgets_budget

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AutoAdjustData struct {
	// AutoAdjustType: string, required
	AutoAdjustType terra.StringValue `hcl:"auto_adjust_type,attr" validate:"required"`
	// AutoAdjustDataHistoricalOptions: optional
	HistoricalOptions *AutoAdjustDataHistoricalOptions `hcl:"historical_options,block"`
}

type AutoAdjustDataHistoricalOptions struct {
	// BudgetAdjustmentPeriod: number, required
	BudgetAdjustmentPeriod terra.NumberValue `hcl:"budget_adjustment_period,attr" validate:"required"`
}

type CostFilter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type CostTypes struct {
	// IncludeCredit: bool, optional
	IncludeCredit terra.BoolValue `hcl:"include_credit,attr"`
	// IncludeDiscount: bool, optional
	IncludeDiscount terra.BoolValue `hcl:"include_discount,attr"`
	// IncludeOtherSubscription: bool, optional
	IncludeOtherSubscription terra.BoolValue `hcl:"include_other_subscription,attr"`
	// IncludeRecurring: bool, optional
	IncludeRecurring terra.BoolValue `hcl:"include_recurring,attr"`
	// IncludeRefund: bool, optional
	IncludeRefund terra.BoolValue `hcl:"include_refund,attr"`
	// IncludeSubscription: bool, optional
	IncludeSubscription terra.BoolValue `hcl:"include_subscription,attr"`
	// IncludeSupport: bool, optional
	IncludeSupport terra.BoolValue `hcl:"include_support,attr"`
	// IncludeTax: bool, optional
	IncludeTax terra.BoolValue `hcl:"include_tax,attr"`
	// IncludeUpfront: bool, optional
	IncludeUpfront terra.BoolValue `hcl:"include_upfront,attr"`
	// UseAmortized: bool, optional
	UseAmortized terra.BoolValue `hcl:"use_amortized,attr"`
	// UseBlended: bool, optional
	UseBlended terra.BoolValue `hcl:"use_blended,attr"`
}

type Notification struct {
	// ComparisonOperator: string, required
	ComparisonOperator terra.StringValue `hcl:"comparison_operator,attr" validate:"required"`
	// NotificationType: string, required
	NotificationType terra.StringValue `hcl:"notification_type,attr" validate:"required"`
	// SubscriberEmailAddresses: set of string, optional
	SubscriberEmailAddresses terra.SetValue[terra.StringValue] `hcl:"subscriber_email_addresses,attr"`
	// SubscriberSnsTopicArns: set of string, optional
	SubscriberSnsTopicArns terra.SetValue[terra.StringValue] `hcl:"subscriber_sns_topic_arns,attr"`
	// Threshold: number, required
	Threshold terra.NumberValue `hcl:"threshold,attr" validate:"required"`
	// ThresholdType: string, required
	ThresholdType terra.StringValue `hcl:"threshold_type,attr" validate:"required"`
}

type PlannedLimit struct {
	// Amount: string, required
	Amount terra.StringValue `hcl:"amount,attr" validate:"required"`
	// StartTime: string, required
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
}

type AutoAdjustDataAttributes struct {
	ref terra.Reference
}

func (aad AutoAdjustDataAttributes) InternalRef() (terra.Reference, error) {
	return aad.ref, nil
}

func (aad AutoAdjustDataAttributes) InternalWithRef(ref terra.Reference) AutoAdjustDataAttributes {
	return AutoAdjustDataAttributes{ref: ref}
}

func (aad AutoAdjustDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aad.ref.InternalTokens()
}

func (aad AutoAdjustDataAttributes) AutoAdjustType() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("auto_adjust_type"))
}

func (aad AutoAdjustDataAttributes) LastAutoAdjustTime() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("last_auto_adjust_time"))
}

func (aad AutoAdjustDataAttributes) HistoricalOptions() terra.ListValue[AutoAdjustDataHistoricalOptionsAttributes] {
	return terra.ReferenceAsList[AutoAdjustDataHistoricalOptionsAttributes](aad.ref.Append("historical_options"))
}

type AutoAdjustDataHistoricalOptionsAttributes struct {
	ref terra.Reference
}

func (ho AutoAdjustDataHistoricalOptionsAttributes) InternalRef() (terra.Reference, error) {
	return ho.ref, nil
}

func (ho AutoAdjustDataHistoricalOptionsAttributes) InternalWithRef(ref terra.Reference) AutoAdjustDataHistoricalOptionsAttributes {
	return AutoAdjustDataHistoricalOptionsAttributes{ref: ref}
}

func (ho AutoAdjustDataHistoricalOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ho.ref.InternalTokens()
}

func (ho AutoAdjustDataHistoricalOptionsAttributes) BudgetAdjustmentPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(ho.ref.Append("budget_adjustment_period"))
}

func (ho AutoAdjustDataHistoricalOptionsAttributes) LookbackAvailablePeriods() terra.NumberValue {
	return terra.ReferenceAsNumber(ho.ref.Append("lookback_available_periods"))
}

type CostFilterAttributes struct {
	ref terra.Reference
}

func (cf CostFilterAttributes) InternalRef() (terra.Reference, error) {
	return cf.ref, nil
}

func (cf CostFilterAttributes) InternalWithRef(ref terra.Reference) CostFilterAttributes {
	return CostFilterAttributes{ref: ref}
}

func (cf CostFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cf.ref.InternalTokens()
}

func (cf CostFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cf.ref.Append("name"))
}

func (cf CostFilterAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cf.ref.Append("values"))
}

type CostTypesAttributes struct {
	ref terra.Reference
}

func (ct CostTypesAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct CostTypesAttributes) InternalWithRef(ref terra.Reference) CostTypesAttributes {
	return CostTypesAttributes{ref: ref}
}

func (ct CostTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ct.ref.InternalTokens()
}

func (ct CostTypesAttributes) IncludeCredit() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_credit"))
}

func (ct CostTypesAttributes) IncludeDiscount() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_discount"))
}

func (ct CostTypesAttributes) IncludeOtherSubscription() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_other_subscription"))
}

func (ct CostTypesAttributes) IncludeRecurring() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_recurring"))
}

func (ct CostTypesAttributes) IncludeRefund() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_refund"))
}

func (ct CostTypesAttributes) IncludeSubscription() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_subscription"))
}

func (ct CostTypesAttributes) IncludeSupport() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_support"))
}

func (ct CostTypesAttributes) IncludeTax() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_tax"))
}

func (ct CostTypesAttributes) IncludeUpfront() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_upfront"))
}

func (ct CostTypesAttributes) UseAmortized() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("use_amortized"))
}

func (ct CostTypesAttributes) UseBlended() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("use_blended"))
}

type NotificationAttributes struct {
	ref terra.Reference
}

func (n NotificationAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NotificationAttributes) InternalWithRef(ref terra.Reference) NotificationAttributes {
	return NotificationAttributes{ref: ref}
}

func (n NotificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n NotificationAttributes) ComparisonOperator() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("comparison_operator"))
}

func (n NotificationAttributes) NotificationType() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("notification_type"))
}

func (n NotificationAttributes) SubscriberEmailAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](n.ref.Append("subscriber_email_addresses"))
}

func (n NotificationAttributes) SubscriberSnsTopicArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](n.ref.Append("subscriber_sns_topic_arns"))
}

func (n NotificationAttributes) Threshold() terra.NumberValue {
	return terra.ReferenceAsNumber(n.ref.Append("threshold"))
}

func (n NotificationAttributes) ThresholdType() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("threshold_type"))
}

type PlannedLimitAttributes struct {
	ref terra.Reference
}

func (pl PlannedLimitAttributes) InternalRef() (terra.Reference, error) {
	return pl.ref, nil
}

func (pl PlannedLimitAttributes) InternalWithRef(ref terra.Reference) PlannedLimitAttributes {
	return PlannedLimitAttributes{ref: ref}
}

func (pl PlannedLimitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pl.ref.InternalTokens()
}

func (pl PlannedLimitAttributes) Amount() terra.StringValue {
	return terra.ReferenceAsString(pl.ref.Append("amount"))
}

func (pl PlannedLimitAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(pl.ref.Append("start_time"))
}

func (pl PlannedLimitAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(pl.ref.Append("unit"))
}

type AutoAdjustDataState struct {
	AutoAdjustType     string                                 `json:"auto_adjust_type"`
	LastAutoAdjustTime string                                 `json:"last_auto_adjust_time"`
	HistoricalOptions  []AutoAdjustDataHistoricalOptionsState `json:"historical_options"`
}

type AutoAdjustDataHistoricalOptionsState struct {
	BudgetAdjustmentPeriod   float64 `json:"budget_adjustment_period"`
	LookbackAvailablePeriods float64 `json:"lookback_available_periods"`
}

type CostFilterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type CostTypesState struct {
	IncludeCredit            bool `json:"include_credit"`
	IncludeDiscount          bool `json:"include_discount"`
	IncludeOtherSubscription bool `json:"include_other_subscription"`
	IncludeRecurring         bool `json:"include_recurring"`
	IncludeRefund            bool `json:"include_refund"`
	IncludeSubscription      bool `json:"include_subscription"`
	IncludeSupport           bool `json:"include_support"`
	IncludeTax               bool `json:"include_tax"`
	IncludeUpfront           bool `json:"include_upfront"`
	UseAmortized             bool `json:"use_amortized"`
	UseBlended               bool `json:"use_blended"`
}

type NotificationState struct {
	ComparisonOperator       string   `json:"comparison_operator"`
	NotificationType         string   `json:"notification_type"`
	SubscriberEmailAddresses []string `json:"subscriber_email_addresses"`
	SubscriberSnsTopicArns   []string `json:"subscriber_sns_topic_arns"`
	Threshold                float64  `json:"threshold"`
	ThresholdType            string   `json:"threshold_type"`
}

type PlannedLimitState struct {
	Amount    string `json:"amount"`
	StartTime string `json:"start_time"`
	Unit      string `json:"unit"`
}
