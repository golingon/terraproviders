// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_budgets_budget

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_budgets_budget.
type Resource struct {
	Name      string
	Args      Args
	state     *awsBudgetsBudgetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abb *Resource) Type() string {
	return "aws_budgets_budget"
}

// LocalName returns the local name for [Resource].
func (abb *Resource) LocalName() string {
	return abb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abb *Resource) Configuration() interface{} {
	return abb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abb *Resource) Dependencies() terra.Dependencies {
	return abb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abb *Resource) LifecycleManagement() *terra.Lifecycle {
	return abb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abb *Resource) Attributes() awsBudgetsBudgetAttributes {
	return awsBudgetsBudgetAttributes{ref: terra.ReferenceResource(abb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abb *Resource) ImportState(state io.Reader) error {
	abb.state = &awsBudgetsBudgetState{}
	if err := json.NewDecoder(state).Decode(abb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abb.Type(), abb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abb *Resource) State() (*awsBudgetsBudgetState, bool) {
	return abb.state, abb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abb *Resource) StateMust() *awsBudgetsBudgetState {
	if abb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abb.Type(), abb.LocalName()))
	}
	return abb.state
}

// Args contains the configurations for aws_budgets_budget.
type Args struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// BudgetType: string, required
	BudgetType terra.StringValue `hcl:"budget_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LimitAmount: string, optional
	LimitAmount terra.StringValue `hcl:"limit_amount,attr"`
	// LimitUnit: string, optional
	LimitUnit terra.StringValue `hcl:"limit_unit,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// TimePeriodEnd: string, optional
	TimePeriodEnd terra.StringValue `hcl:"time_period_end,attr"`
	// TimePeriodStart: string, optional
	TimePeriodStart terra.StringValue `hcl:"time_period_start,attr"`
	// TimeUnit: string, required
	TimeUnit terra.StringValue `hcl:"time_unit,attr" validate:"required"`
	// AutoAdjustData: optional
	AutoAdjustData *AutoAdjustData `hcl:"auto_adjust_data,block"`
	// CostFilter: min=0
	CostFilter []CostFilter `hcl:"cost_filter,block" validate:"min=0"`
	// CostTypes: optional
	CostTypes *CostTypes `hcl:"cost_types,block"`
	// Notification: min=0
	Notification []Notification `hcl:"notification,block" validate:"min=0"`
	// PlannedLimit: min=0
	PlannedLimit []PlannedLimit `hcl:"planned_limit,block" validate:"min=0"`
}

type awsBudgetsBudgetAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_budgets_budget.
func (abb awsBudgetsBudgetAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(abb.ref.Append("account_id"))
}

// Arn returns a reference to field arn of aws_budgets_budget.
func (abb awsBudgetsBudgetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(abb.ref.Append("arn"))
}

// BudgetType returns a reference to field budget_type of aws_budgets_budget.
func (abb awsBudgetsBudgetAttributes) BudgetType() terra.StringValue {
	return terra.ReferenceAsString(abb.ref.Append("budget_type"))
}

// Id returns a reference to field id of aws_budgets_budget.
func (abb awsBudgetsBudgetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abb.ref.Append("id"))
}

// LimitAmount returns a reference to field limit_amount of aws_budgets_budget.
func (abb awsBudgetsBudgetAttributes) LimitAmount() terra.StringValue {
	return terra.ReferenceAsString(abb.ref.Append("limit_amount"))
}

// LimitUnit returns a reference to field limit_unit of aws_budgets_budget.
func (abb awsBudgetsBudgetAttributes) LimitUnit() terra.StringValue {
	return terra.ReferenceAsString(abb.ref.Append("limit_unit"))
}

// Name returns a reference to field name of aws_budgets_budget.
func (abb awsBudgetsBudgetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abb.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_budgets_budget.
func (abb awsBudgetsBudgetAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(abb.ref.Append("name_prefix"))
}

// TimePeriodEnd returns a reference to field time_period_end of aws_budgets_budget.
func (abb awsBudgetsBudgetAttributes) TimePeriodEnd() terra.StringValue {
	return terra.ReferenceAsString(abb.ref.Append("time_period_end"))
}

// TimePeriodStart returns a reference to field time_period_start of aws_budgets_budget.
func (abb awsBudgetsBudgetAttributes) TimePeriodStart() terra.StringValue {
	return terra.ReferenceAsString(abb.ref.Append("time_period_start"))
}

// TimeUnit returns a reference to field time_unit of aws_budgets_budget.
func (abb awsBudgetsBudgetAttributes) TimeUnit() terra.StringValue {
	return terra.ReferenceAsString(abb.ref.Append("time_unit"))
}

func (abb awsBudgetsBudgetAttributes) AutoAdjustData() terra.ListValue[AutoAdjustDataAttributes] {
	return terra.ReferenceAsList[AutoAdjustDataAttributes](abb.ref.Append("auto_adjust_data"))
}

func (abb awsBudgetsBudgetAttributes) CostFilter() terra.SetValue[CostFilterAttributes] {
	return terra.ReferenceAsSet[CostFilterAttributes](abb.ref.Append("cost_filter"))
}

func (abb awsBudgetsBudgetAttributes) CostTypes() terra.ListValue[CostTypesAttributes] {
	return terra.ReferenceAsList[CostTypesAttributes](abb.ref.Append("cost_types"))
}

func (abb awsBudgetsBudgetAttributes) Notification() terra.SetValue[NotificationAttributes] {
	return terra.ReferenceAsSet[NotificationAttributes](abb.ref.Append("notification"))
}

func (abb awsBudgetsBudgetAttributes) PlannedLimit() terra.SetValue[PlannedLimitAttributes] {
	return terra.ReferenceAsSet[PlannedLimitAttributes](abb.ref.Append("planned_limit"))
}

type awsBudgetsBudgetState struct {
	AccountId       string                `json:"account_id"`
	Arn             string                `json:"arn"`
	BudgetType      string                `json:"budget_type"`
	Id              string                `json:"id"`
	LimitAmount     string                `json:"limit_amount"`
	LimitUnit       string                `json:"limit_unit"`
	Name            string                `json:"name"`
	NamePrefix      string                `json:"name_prefix"`
	TimePeriodEnd   string                `json:"time_period_end"`
	TimePeriodStart string                `json:"time_period_start"`
	TimeUnit        string                `json:"time_unit"`
	AutoAdjustData  []AutoAdjustDataState `json:"auto_adjust_data"`
	CostFilter      []CostFilterState     `json:"cost_filter"`
	CostTypes       []CostTypesState      `json:"cost_types"`
	Notification    []NotificationState   `json:"notification"`
	PlannedLimit    []PlannedLimitState   `json:"planned_limit"`
}
