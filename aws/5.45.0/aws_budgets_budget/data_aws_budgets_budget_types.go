// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_budgets_budget

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataAutoAdjustDataAttributes struct {
	ref terra.Reference
}

func (aad DataAutoAdjustDataAttributes) InternalRef() (terra.Reference, error) {
	return aad.ref, nil
}

func (aad DataAutoAdjustDataAttributes) InternalWithRef(ref terra.Reference) DataAutoAdjustDataAttributes {
	return DataAutoAdjustDataAttributes{ref: ref}
}

func (aad DataAutoAdjustDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aad.ref.InternalTokens()
}

func (aad DataAutoAdjustDataAttributes) AutoAdjustType() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("auto_adjust_type"))
}

func (aad DataAutoAdjustDataAttributes) LastAutoAdjustTime() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("last_auto_adjust_time"))
}

func (aad DataAutoAdjustDataAttributes) HistoricalOptions() terra.ListValue[DataAutoAdjustDataHistoricalOptionsAttributes] {
	return terra.ReferenceAsList[DataAutoAdjustDataHistoricalOptionsAttributes](aad.ref.Append("historical_options"))
}

type DataAutoAdjustDataHistoricalOptionsAttributes struct {
	ref terra.Reference
}

func (ho DataAutoAdjustDataHistoricalOptionsAttributes) InternalRef() (terra.Reference, error) {
	return ho.ref, nil
}

func (ho DataAutoAdjustDataHistoricalOptionsAttributes) InternalWithRef(ref terra.Reference) DataAutoAdjustDataHistoricalOptionsAttributes {
	return DataAutoAdjustDataHistoricalOptionsAttributes{ref: ref}
}

func (ho DataAutoAdjustDataHistoricalOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ho.ref.InternalTokens()
}

func (ho DataAutoAdjustDataHistoricalOptionsAttributes) BudgetAdjustmentPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(ho.ref.Append("budget_adjustment_period"))
}

func (ho DataAutoAdjustDataHistoricalOptionsAttributes) LookbackAvailablePeriods() terra.NumberValue {
	return terra.ReferenceAsNumber(ho.ref.Append("lookback_available_periods"))
}

type DataBudgetLimitAttributes struct {
	ref terra.Reference
}

func (bl DataBudgetLimitAttributes) InternalRef() (terra.Reference, error) {
	return bl.ref, nil
}

func (bl DataBudgetLimitAttributes) InternalWithRef(ref terra.Reference) DataBudgetLimitAttributes {
	return DataBudgetLimitAttributes{ref: ref}
}

func (bl DataBudgetLimitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bl.ref.InternalTokens()
}

func (bl DataBudgetLimitAttributes) Amount() terra.StringValue {
	return terra.ReferenceAsString(bl.ref.Append("amount"))
}

func (bl DataBudgetLimitAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(bl.ref.Append("unit"))
}

type DataCalculatedSpendAttributes struct {
	ref terra.Reference
}

func (cs DataCalculatedSpendAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs DataCalculatedSpendAttributes) InternalWithRef(ref terra.Reference) DataCalculatedSpendAttributes {
	return DataCalculatedSpendAttributes{ref: ref}
}

func (cs DataCalculatedSpendAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs DataCalculatedSpendAttributes) ActualSpend() terra.ListValue[DataCalculatedSpendActualSpendAttributes] {
	return terra.ReferenceAsList[DataCalculatedSpendActualSpendAttributes](cs.ref.Append("actual_spend"))
}

type DataCalculatedSpendActualSpendAttributes struct {
	ref terra.Reference
}

func (as DataCalculatedSpendActualSpendAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as DataCalculatedSpendActualSpendAttributes) InternalWithRef(ref terra.Reference) DataCalculatedSpendActualSpendAttributes {
	return DataCalculatedSpendActualSpendAttributes{ref: ref}
}

func (as DataCalculatedSpendActualSpendAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as DataCalculatedSpendActualSpendAttributes) Amount() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("amount"))
}

func (as DataCalculatedSpendActualSpendAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("unit"))
}

type DataCostFilterAttributes struct {
	ref terra.Reference
}

func (cf DataCostFilterAttributes) InternalRef() (terra.Reference, error) {
	return cf.ref, nil
}

func (cf DataCostFilterAttributes) InternalWithRef(ref terra.Reference) DataCostFilterAttributes {
	return DataCostFilterAttributes{ref: ref}
}

func (cf DataCostFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cf.ref.InternalTokens()
}

func (cf DataCostFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cf.ref.Append("name"))
}

func (cf DataCostFilterAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cf.ref.Append("values"))
}

type DataCostTypesAttributes struct {
	ref terra.Reference
}

func (ct DataCostTypesAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct DataCostTypesAttributes) InternalWithRef(ref terra.Reference) DataCostTypesAttributes {
	return DataCostTypesAttributes{ref: ref}
}

func (ct DataCostTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ct.ref.InternalTokens()
}

func (ct DataCostTypesAttributes) IncludeCredit() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_credit"))
}

func (ct DataCostTypesAttributes) IncludeDiscount() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_discount"))
}

func (ct DataCostTypesAttributes) IncludeOtherSubscription() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_other_subscription"))
}

func (ct DataCostTypesAttributes) IncludeRecurring() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_recurring"))
}

func (ct DataCostTypesAttributes) IncludeRefund() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_refund"))
}

func (ct DataCostTypesAttributes) IncludeSubscription() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_subscription"))
}

func (ct DataCostTypesAttributes) IncludeSupport() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_support"))
}

func (ct DataCostTypesAttributes) IncludeTax() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_tax"))
}

func (ct DataCostTypesAttributes) IncludeUpfront() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_upfront"))
}

func (ct DataCostTypesAttributes) UseAmortized() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("use_amortized"))
}

func (ct DataCostTypesAttributes) UseBlended() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("use_blended"))
}

type DataNotificationAttributes struct {
	ref terra.Reference
}

func (n DataNotificationAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n DataNotificationAttributes) InternalWithRef(ref terra.Reference) DataNotificationAttributes {
	return DataNotificationAttributes{ref: ref}
}

func (n DataNotificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n DataNotificationAttributes) ComparisonOperator() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("comparison_operator"))
}

func (n DataNotificationAttributes) NotificationType() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("notification_type"))
}

func (n DataNotificationAttributes) SubscriberEmailAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](n.ref.Append("subscriber_email_addresses"))
}

func (n DataNotificationAttributes) SubscriberSnsTopicArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](n.ref.Append("subscriber_sns_topic_arns"))
}

func (n DataNotificationAttributes) Threshold() terra.NumberValue {
	return terra.ReferenceAsNumber(n.ref.Append("threshold"))
}

func (n DataNotificationAttributes) ThresholdType() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("threshold_type"))
}

type DataPlannedLimitAttributes struct {
	ref terra.Reference
}

func (pl DataPlannedLimitAttributes) InternalRef() (terra.Reference, error) {
	return pl.ref, nil
}

func (pl DataPlannedLimitAttributes) InternalWithRef(ref terra.Reference) DataPlannedLimitAttributes {
	return DataPlannedLimitAttributes{ref: ref}
}

func (pl DataPlannedLimitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pl.ref.InternalTokens()
}

func (pl DataPlannedLimitAttributes) Amount() terra.StringValue {
	return terra.ReferenceAsString(pl.ref.Append("amount"))
}

func (pl DataPlannedLimitAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(pl.ref.Append("start_time"))
}

func (pl DataPlannedLimitAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(pl.ref.Append("unit"))
}

type DataAutoAdjustDataState struct {
	AutoAdjustType     string                                     `json:"auto_adjust_type"`
	LastAutoAdjustTime string                                     `json:"last_auto_adjust_time"`
	HistoricalOptions  []DataAutoAdjustDataHistoricalOptionsState `json:"historical_options"`
}

type DataAutoAdjustDataHistoricalOptionsState struct {
	BudgetAdjustmentPeriod   float64 `json:"budget_adjustment_period"`
	LookbackAvailablePeriods float64 `json:"lookback_available_periods"`
}

type DataBudgetLimitState struct {
	Amount string `json:"amount"`
	Unit   string `json:"unit"`
}

type DataCalculatedSpendState struct {
	ActualSpend []DataCalculatedSpendActualSpendState `json:"actual_spend"`
}

type DataCalculatedSpendActualSpendState struct {
	Amount string `json:"amount"`
	Unit   string `json:"unit"`
}

type DataCostFilterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type DataCostTypesState struct {
	IncludeCredit            bool `json:"include_credit"`
	IncludeDiscount          bool `json:"include_discount"`
	IncludeOtherSubscription bool `json:"include_other_subscription"`
	IncludeRecurring         bool `json:"include_recurring"`
	IncludeRefund            bool `json:"include_refund"`
	IncludeSubscription      bool `json:"include_subscription"`
	IncludeSupport           bool `json:"include_support"`
	IncludeTax               bool `json:"include_tax"`
	IncludeUpfront           bool `json:"include_upfront"`
	UseAmortized             bool `json:"use_amortized"`
	UseBlended               bool `json:"use_blended"`
}

type DataNotificationState struct {
	ComparisonOperator       string   `json:"comparison_operator"`
	NotificationType         string   `json:"notification_type"`
	SubscriberEmailAddresses []string `json:"subscriber_email_addresses"`
	SubscriberSnsTopicArns   []string `json:"subscriber_sns_topic_arns"`
	Threshold                float64  `json:"threshold"`
	ThresholdType            string   `json:"threshold_type"`
}

type DataPlannedLimitState struct {
	Amount    string `json:"amount"`
	StartTime string `json:"start_time"`
	Unit      string `json:"unit"`
}
