// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_backup_global_settings

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_backup_global_settings.
type Resource struct {
	Name      string
	Args      Args
	state     *awsBackupGlobalSettingsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abgs *Resource) Type() string {
	return "aws_backup_global_settings"
}

// LocalName returns the local name for [Resource].
func (abgs *Resource) LocalName() string {
	return abgs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abgs *Resource) Configuration() interface{} {
	return abgs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abgs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abgs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abgs *Resource) Dependencies() terra.Dependencies {
	return abgs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abgs *Resource) LifecycleManagement() *terra.Lifecycle {
	return abgs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abgs *Resource) Attributes() awsBackupGlobalSettingsAttributes {
	return awsBackupGlobalSettingsAttributes{ref: terra.ReferenceResource(abgs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abgs *Resource) ImportState(state io.Reader) error {
	abgs.state = &awsBackupGlobalSettingsState{}
	if err := json.NewDecoder(state).Decode(abgs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abgs.Type(), abgs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abgs *Resource) State() (*awsBackupGlobalSettingsState, bool) {
	return abgs.state, abgs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abgs *Resource) StateMust() *awsBackupGlobalSettingsState {
	if abgs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abgs.Type(), abgs.LocalName()))
	}
	return abgs.state
}

// Args contains the configurations for aws_backup_global_settings.
type Args struct {
	// GlobalSettings: map of string, required
	GlobalSettings terra.MapValue[terra.StringValue] `hcl:"global_settings,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsBackupGlobalSettingsAttributes struct {
	ref terra.Reference
}

// GlobalSettings returns a reference to field global_settings of aws_backup_global_settings.
func (abgs awsBackupGlobalSettingsAttributes) GlobalSettings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abgs.ref.Append("global_settings"))
}

// Id returns a reference to field id of aws_backup_global_settings.
func (abgs awsBackupGlobalSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abgs.ref.Append("id"))
}

type awsBackupGlobalSettingsState struct {
	GlobalSettings map[string]string `json:"global_settings"`
	Id             string            `json:"id"`
}
