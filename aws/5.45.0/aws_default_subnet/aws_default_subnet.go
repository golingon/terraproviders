// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_default_subnet

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_default_subnet.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDefaultSubnetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ads *Resource) Type() string {
	return "aws_default_subnet"
}

// LocalName returns the local name for [Resource].
func (ads *Resource) LocalName() string {
	return ads.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ads *Resource) Configuration() interface{} {
	return ads.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ads *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ads)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ads *Resource) Dependencies() terra.Dependencies {
	return ads.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ads *Resource) LifecycleManagement() *terra.Lifecycle {
	return ads.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ads *Resource) Attributes() awsDefaultSubnetAttributes {
	return awsDefaultSubnetAttributes{ref: terra.ReferenceResource(ads)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ads *Resource) ImportState(state io.Reader) error {
	ads.state = &awsDefaultSubnetState{}
	if err := json.NewDecoder(state).Decode(ads.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ads.Type(), ads.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ads *Resource) State() (*awsDefaultSubnetState, bool) {
	return ads.state, ads.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ads *Resource) StateMust() *awsDefaultSubnetState {
	if ads.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ads.Type(), ads.LocalName()))
	}
	return ads.state
}

// Args contains the configurations for aws_default_subnet.
type Args struct {
	// AssignIpv6AddressOnCreation: bool, optional
	AssignIpv6AddressOnCreation terra.BoolValue `hcl:"assign_ipv6_address_on_creation,attr"`
	// AvailabilityZone: string, required
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr" validate:"required"`
	// CustomerOwnedIpv4Pool: string, optional
	CustomerOwnedIpv4Pool terra.StringValue `hcl:"customer_owned_ipv4_pool,attr"`
	// EnableDns64: bool, optional
	EnableDns64 terra.BoolValue `hcl:"enable_dns64,attr"`
	// EnableResourceNameDnsARecordOnLaunch: bool, optional
	EnableResourceNameDnsARecordOnLaunch terra.BoolValue `hcl:"enable_resource_name_dns_a_record_on_launch,attr"`
	// EnableResourceNameDnsAaaaRecordOnLaunch: bool, optional
	EnableResourceNameDnsAaaaRecordOnLaunch terra.BoolValue `hcl:"enable_resource_name_dns_aaaa_record_on_launch,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Ipv6CidrBlock: string, optional
	Ipv6CidrBlock terra.StringValue `hcl:"ipv6_cidr_block,attr"`
	// Ipv6Native: bool, optional
	Ipv6Native terra.BoolValue `hcl:"ipv6_native,attr"`
	// MapCustomerOwnedIpOnLaunch: bool, optional
	MapCustomerOwnedIpOnLaunch terra.BoolValue `hcl:"map_customer_owned_ip_on_launch,attr"`
	// MapPublicIpOnLaunch: bool, optional
	MapPublicIpOnLaunch terra.BoolValue `hcl:"map_public_ip_on_launch,attr"`
	// PrivateDnsHostnameTypeOnLaunch: string, optional
	PrivateDnsHostnameTypeOnLaunch terra.StringValue `hcl:"private_dns_hostname_type_on_launch,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDefaultSubnetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("arn"))
}

// AssignIpv6AddressOnCreation returns a reference to field assign_ipv6_address_on_creation of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) AssignIpv6AddressOnCreation() terra.BoolValue {
	return terra.ReferenceAsBool(ads.ref.Append("assign_ipv6_address_on_creation"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("availability_zone"))
}

// AvailabilityZoneId returns a reference to field availability_zone_id of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) AvailabilityZoneId() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("availability_zone_id"))
}

// CidrBlock returns a reference to field cidr_block of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("cidr_block"))
}

// CustomerOwnedIpv4Pool returns a reference to field customer_owned_ipv4_pool of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) CustomerOwnedIpv4Pool() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("customer_owned_ipv4_pool"))
}

// EnableDns64 returns a reference to field enable_dns64 of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) EnableDns64() terra.BoolValue {
	return terra.ReferenceAsBool(ads.ref.Append("enable_dns64"))
}

// EnableLniAtDeviceIndex returns a reference to field enable_lni_at_device_index of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) EnableLniAtDeviceIndex() terra.NumberValue {
	return terra.ReferenceAsNumber(ads.ref.Append("enable_lni_at_device_index"))
}

// EnableResourceNameDnsARecordOnLaunch returns a reference to field enable_resource_name_dns_a_record_on_launch of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) EnableResourceNameDnsARecordOnLaunch() terra.BoolValue {
	return terra.ReferenceAsBool(ads.ref.Append("enable_resource_name_dns_a_record_on_launch"))
}

// EnableResourceNameDnsAaaaRecordOnLaunch returns a reference to field enable_resource_name_dns_aaaa_record_on_launch of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) EnableResourceNameDnsAaaaRecordOnLaunch() terra.BoolValue {
	return terra.ReferenceAsBool(ads.ref.Append("enable_resource_name_dns_aaaa_record_on_launch"))
}

// ExistingDefaultSubnet returns a reference to field existing_default_subnet of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) ExistingDefaultSubnet() terra.BoolValue {
	return terra.ReferenceAsBool(ads.ref.Append("existing_default_subnet"))
}

// ForceDestroy returns a reference to field force_destroy of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(ads.ref.Append("force_destroy"))
}

// Id returns a reference to field id of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("id"))
}

// Ipv6CidrBlock returns a reference to field ipv6_cidr_block of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) Ipv6CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("ipv6_cidr_block"))
}

// Ipv6CidrBlockAssociationId returns a reference to field ipv6_cidr_block_association_id of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) Ipv6CidrBlockAssociationId() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("ipv6_cidr_block_association_id"))
}

// Ipv6Native returns a reference to field ipv6_native of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) Ipv6Native() terra.BoolValue {
	return terra.ReferenceAsBool(ads.ref.Append("ipv6_native"))
}

// MapCustomerOwnedIpOnLaunch returns a reference to field map_customer_owned_ip_on_launch of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) MapCustomerOwnedIpOnLaunch() terra.BoolValue {
	return terra.ReferenceAsBool(ads.ref.Append("map_customer_owned_ip_on_launch"))
}

// MapPublicIpOnLaunch returns a reference to field map_public_ip_on_launch of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) MapPublicIpOnLaunch() terra.BoolValue {
	return terra.ReferenceAsBool(ads.ref.Append("map_public_ip_on_launch"))
}

// OutpostArn returns a reference to field outpost_arn of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) OutpostArn() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("outpost_arn"))
}

// OwnerId returns a reference to field owner_id of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("owner_id"))
}

// PrivateDnsHostnameTypeOnLaunch returns a reference to field private_dns_hostname_type_on_launch of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) PrivateDnsHostnameTypeOnLaunch() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("private_dns_hostname_type_on_launch"))
}

// Tags returns a reference to field tags of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ads.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ads.ref.Append("tags_all"))
}

// VpcId returns a reference to field vpc_id of aws_default_subnet.
func (ads awsDefaultSubnetAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("vpc_id"))
}

func (ads awsDefaultSubnetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ads.ref.Append("timeouts"))
}

type awsDefaultSubnetState struct {
	Arn                                     string            `json:"arn"`
	AssignIpv6AddressOnCreation             bool              `json:"assign_ipv6_address_on_creation"`
	AvailabilityZone                        string            `json:"availability_zone"`
	AvailabilityZoneId                      string            `json:"availability_zone_id"`
	CidrBlock                               string            `json:"cidr_block"`
	CustomerOwnedIpv4Pool                   string            `json:"customer_owned_ipv4_pool"`
	EnableDns64                             bool              `json:"enable_dns64"`
	EnableLniAtDeviceIndex                  float64           `json:"enable_lni_at_device_index"`
	EnableResourceNameDnsARecordOnLaunch    bool              `json:"enable_resource_name_dns_a_record_on_launch"`
	EnableResourceNameDnsAaaaRecordOnLaunch bool              `json:"enable_resource_name_dns_aaaa_record_on_launch"`
	ExistingDefaultSubnet                   bool              `json:"existing_default_subnet"`
	ForceDestroy                            bool              `json:"force_destroy"`
	Id                                      string            `json:"id"`
	Ipv6CidrBlock                           string            `json:"ipv6_cidr_block"`
	Ipv6CidrBlockAssociationId              string            `json:"ipv6_cidr_block_association_id"`
	Ipv6Native                              bool              `json:"ipv6_native"`
	MapCustomerOwnedIpOnLaunch              bool              `json:"map_customer_owned_ip_on_launch"`
	MapPublicIpOnLaunch                     bool              `json:"map_public_ip_on_launch"`
	OutpostArn                              string            `json:"outpost_arn"`
	OwnerId                                 string            `json:"owner_id"`
	PrivateDnsHostnameTypeOnLaunch          string            `json:"private_dns_hostname_type_on_launch"`
	Tags                                    map[string]string `json:"tags"`
	TagsAll                                 map[string]string `json:"tags_all"`
	VpcId                                   string            `json:"vpc_id"`
	Timeouts                                *TimeoutsState    `json:"timeouts"`
}
