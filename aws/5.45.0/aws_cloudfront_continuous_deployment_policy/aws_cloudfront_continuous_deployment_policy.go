// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudfront_continuous_deployment_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudfront_continuous_deployment_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudfrontContinuousDeploymentPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (accdp *Resource) Type() string {
	return "aws_cloudfront_continuous_deployment_policy"
}

// LocalName returns the local name for [Resource].
func (accdp *Resource) LocalName() string {
	return accdp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (accdp *Resource) Configuration() interface{} {
	return accdp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (accdp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(accdp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (accdp *Resource) Dependencies() terra.Dependencies {
	return accdp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (accdp *Resource) LifecycleManagement() *terra.Lifecycle {
	return accdp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (accdp *Resource) Attributes() awsCloudfrontContinuousDeploymentPolicyAttributes {
	return awsCloudfrontContinuousDeploymentPolicyAttributes{ref: terra.ReferenceResource(accdp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (accdp *Resource) ImportState(state io.Reader) error {
	accdp.state = &awsCloudfrontContinuousDeploymentPolicyState{}
	if err := json.NewDecoder(state).Decode(accdp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", accdp.Type(), accdp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (accdp *Resource) State() (*awsCloudfrontContinuousDeploymentPolicyState, bool) {
	return accdp.state, accdp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (accdp *Resource) StateMust() *awsCloudfrontContinuousDeploymentPolicyState {
	if accdp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", accdp.Type(), accdp.LocalName()))
	}
	return accdp.state
}

// Args contains the configurations for aws_cloudfront_continuous_deployment_policy.
type Args struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// StagingDistributionDnsNames: min=0
	StagingDistributionDnsNames []StagingDistributionDnsNames `hcl:"staging_distribution_dns_names,block" validate:"min=0"`
	// TrafficConfig: min=0
	TrafficConfig []TrafficConfig `hcl:"traffic_config,block" validate:"min=0"`
}

type awsCloudfrontContinuousDeploymentPolicyAttributes struct {
	ref terra.Reference
}

// Enabled returns a reference to field enabled of aws_cloudfront_continuous_deployment_policy.
func (accdp awsCloudfrontContinuousDeploymentPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(accdp.ref.Append("enabled"))
}

// Etag returns a reference to field etag of aws_cloudfront_continuous_deployment_policy.
func (accdp awsCloudfrontContinuousDeploymentPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceAsString(accdp.ref.Append("etag"))
}

// Id returns a reference to field id of aws_cloudfront_continuous_deployment_policy.
func (accdp awsCloudfrontContinuousDeploymentPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(accdp.ref.Append("id"))
}

// LastModifiedTime returns a reference to field last_modified_time of aws_cloudfront_continuous_deployment_policy.
func (accdp awsCloudfrontContinuousDeploymentPolicyAttributes) LastModifiedTime() terra.StringValue {
	return terra.ReferenceAsString(accdp.ref.Append("last_modified_time"))
}

func (accdp awsCloudfrontContinuousDeploymentPolicyAttributes) StagingDistributionDnsNames() terra.ListValue[StagingDistributionDnsNamesAttributes] {
	return terra.ReferenceAsList[StagingDistributionDnsNamesAttributes](accdp.ref.Append("staging_distribution_dns_names"))
}

func (accdp awsCloudfrontContinuousDeploymentPolicyAttributes) TrafficConfig() terra.ListValue[TrafficConfigAttributes] {
	return terra.ReferenceAsList[TrafficConfigAttributes](accdp.ref.Append("traffic_config"))
}

type awsCloudfrontContinuousDeploymentPolicyState struct {
	Enabled                     bool                               `json:"enabled"`
	Etag                        string                             `json:"etag"`
	Id                          string                             `json:"id"`
	LastModifiedTime            string                             `json:"last_modified_time"`
	StagingDistributionDnsNames []StagingDistributionDnsNamesState `json:"staging_distribution_dns_names"`
	TrafficConfig               []TrafficConfigState               `json:"traffic_config"`
}
