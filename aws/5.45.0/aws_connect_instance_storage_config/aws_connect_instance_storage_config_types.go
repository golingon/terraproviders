// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_instance_storage_config

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type StorageConfig struct {
	// StorageType: string, required
	StorageType terra.StringValue `hcl:"storage_type,attr" validate:"required"`
	// StorageConfigKinesisFirehoseConfig: optional
	KinesisFirehoseConfig *StorageConfigKinesisFirehoseConfig `hcl:"kinesis_firehose_config,block"`
	// StorageConfigKinesisStreamConfig: optional
	KinesisStreamConfig *StorageConfigKinesisStreamConfig `hcl:"kinesis_stream_config,block"`
	// StorageConfigKinesisVideoStreamConfig: optional
	KinesisVideoStreamConfig *StorageConfigKinesisVideoStreamConfig `hcl:"kinesis_video_stream_config,block"`
	// StorageConfigS3Config: optional
	S3Config *StorageConfigS3Config `hcl:"s3_config,block"`
}

type StorageConfigKinesisFirehoseConfig struct {
	// FirehoseArn: string, required
	FirehoseArn terra.StringValue `hcl:"firehose_arn,attr" validate:"required"`
}

type StorageConfigKinesisStreamConfig struct {
	// StreamArn: string, required
	StreamArn terra.StringValue `hcl:"stream_arn,attr" validate:"required"`
}

type StorageConfigKinesisVideoStreamConfig struct {
	// Prefix: string, required
	Prefix terra.StringValue `hcl:"prefix,attr" validate:"required"`
	// RetentionPeriodHours: number, required
	RetentionPeriodHours terra.NumberValue `hcl:"retention_period_hours,attr" validate:"required"`
	// StorageConfigKinesisVideoStreamConfigEncryptionConfig: required
	EncryptionConfig *StorageConfigKinesisVideoStreamConfigEncryptionConfig `hcl:"encryption_config,block" validate:"required"`
}

type StorageConfigKinesisVideoStreamConfigEncryptionConfig struct {
	// EncryptionType: string, required
	EncryptionType terra.StringValue `hcl:"encryption_type,attr" validate:"required"`
	// KeyId: string, required
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
}

type StorageConfigS3Config struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// BucketPrefix: string, required
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr" validate:"required"`
	// StorageConfigS3ConfigEncryptionConfig: optional
	EncryptionConfig *StorageConfigS3ConfigEncryptionConfig `hcl:"encryption_config,block"`
}

type StorageConfigS3ConfigEncryptionConfig struct {
	// EncryptionType: string, required
	EncryptionType terra.StringValue `hcl:"encryption_type,attr" validate:"required"`
	// KeyId: string, required
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
}

type StorageConfigAttributes struct {
	ref terra.Reference
}

func (sc StorageConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc StorageConfigAttributes) InternalWithRef(ref terra.Reference) StorageConfigAttributes {
	return StorageConfigAttributes{ref: ref}
}

func (sc StorageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc StorageConfigAttributes) StorageType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("storage_type"))
}

func (sc StorageConfigAttributes) KinesisFirehoseConfig() terra.ListValue[StorageConfigKinesisFirehoseConfigAttributes] {
	return terra.ReferenceAsList[StorageConfigKinesisFirehoseConfigAttributes](sc.ref.Append("kinesis_firehose_config"))
}

func (sc StorageConfigAttributes) KinesisStreamConfig() terra.ListValue[StorageConfigKinesisStreamConfigAttributes] {
	return terra.ReferenceAsList[StorageConfigKinesisStreamConfigAttributes](sc.ref.Append("kinesis_stream_config"))
}

func (sc StorageConfigAttributes) KinesisVideoStreamConfig() terra.ListValue[StorageConfigKinesisVideoStreamConfigAttributes] {
	return terra.ReferenceAsList[StorageConfigKinesisVideoStreamConfigAttributes](sc.ref.Append("kinesis_video_stream_config"))
}

func (sc StorageConfigAttributes) S3Config() terra.ListValue[StorageConfigS3ConfigAttributes] {
	return terra.ReferenceAsList[StorageConfigS3ConfigAttributes](sc.ref.Append("s3_config"))
}

type StorageConfigKinesisFirehoseConfigAttributes struct {
	ref terra.Reference
}

func (kfc StorageConfigKinesisFirehoseConfigAttributes) InternalRef() (terra.Reference, error) {
	return kfc.ref, nil
}

func (kfc StorageConfigKinesisFirehoseConfigAttributes) InternalWithRef(ref terra.Reference) StorageConfigKinesisFirehoseConfigAttributes {
	return StorageConfigKinesisFirehoseConfigAttributes{ref: ref}
}

func (kfc StorageConfigKinesisFirehoseConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kfc.ref.InternalTokens()
}

func (kfc StorageConfigKinesisFirehoseConfigAttributes) FirehoseArn() terra.StringValue {
	return terra.ReferenceAsString(kfc.ref.Append("firehose_arn"))
}

type StorageConfigKinesisStreamConfigAttributes struct {
	ref terra.Reference
}

func (ksc StorageConfigKinesisStreamConfigAttributes) InternalRef() (terra.Reference, error) {
	return ksc.ref, nil
}

func (ksc StorageConfigKinesisStreamConfigAttributes) InternalWithRef(ref terra.Reference) StorageConfigKinesisStreamConfigAttributes {
	return StorageConfigKinesisStreamConfigAttributes{ref: ref}
}

func (ksc StorageConfigKinesisStreamConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ksc.ref.InternalTokens()
}

func (ksc StorageConfigKinesisStreamConfigAttributes) StreamArn() terra.StringValue {
	return terra.ReferenceAsString(ksc.ref.Append("stream_arn"))
}

type StorageConfigKinesisVideoStreamConfigAttributes struct {
	ref terra.Reference
}

func (kvsc StorageConfigKinesisVideoStreamConfigAttributes) InternalRef() (terra.Reference, error) {
	return kvsc.ref, nil
}

func (kvsc StorageConfigKinesisVideoStreamConfigAttributes) InternalWithRef(ref terra.Reference) StorageConfigKinesisVideoStreamConfigAttributes {
	return StorageConfigKinesisVideoStreamConfigAttributes{ref: ref}
}

func (kvsc StorageConfigKinesisVideoStreamConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kvsc.ref.InternalTokens()
}

func (kvsc StorageConfigKinesisVideoStreamConfigAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(kvsc.ref.Append("prefix"))
}

func (kvsc StorageConfigKinesisVideoStreamConfigAttributes) RetentionPeriodHours() terra.NumberValue {
	return terra.ReferenceAsNumber(kvsc.ref.Append("retention_period_hours"))
}

func (kvsc StorageConfigKinesisVideoStreamConfigAttributes) EncryptionConfig() terra.ListValue[StorageConfigKinesisVideoStreamConfigEncryptionConfigAttributes] {
	return terra.ReferenceAsList[StorageConfigKinesisVideoStreamConfigEncryptionConfigAttributes](kvsc.ref.Append("encryption_config"))
}

type StorageConfigKinesisVideoStreamConfigEncryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec StorageConfigKinesisVideoStreamConfigEncryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec StorageConfigKinesisVideoStreamConfigEncryptionConfigAttributes) InternalWithRef(ref terra.Reference) StorageConfigKinesisVideoStreamConfigEncryptionConfigAttributes {
	return StorageConfigKinesisVideoStreamConfigEncryptionConfigAttributes{ref: ref}
}

func (ec StorageConfigKinesisVideoStreamConfigEncryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec StorageConfigKinesisVideoStreamConfigEncryptionConfigAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("encryption_type"))
}

func (ec StorageConfigKinesisVideoStreamConfigEncryptionConfigAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("key_id"))
}

type StorageConfigS3ConfigAttributes struct {
	ref terra.Reference
}

func (sc StorageConfigS3ConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc StorageConfigS3ConfigAttributes) InternalWithRef(ref terra.Reference) StorageConfigS3ConfigAttributes {
	return StorageConfigS3ConfigAttributes{ref: ref}
}

func (sc StorageConfigS3ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc StorageConfigS3ConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_name"))
}

func (sc StorageConfigS3ConfigAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_prefix"))
}

func (sc StorageConfigS3ConfigAttributes) EncryptionConfig() terra.ListValue[StorageConfigS3ConfigEncryptionConfigAttributes] {
	return terra.ReferenceAsList[StorageConfigS3ConfigEncryptionConfigAttributes](sc.ref.Append("encryption_config"))
}

type StorageConfigS3ConfigEncryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec StorageConfigS3ConfigEncryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec StorageConfigS3ConfigEncryptionConfigAttributes) InternalWithRef(ref terra.Reference) StorageConfigS3ConfigEncryptionConfigAttributes {
	return StorageConfigS3ConfigEncryptionConfigAttributes{ref: ref}
}

func (ec StorageConfigS3ConfigEncryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec StorageConfigS3ConfigEncryptionConfigAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("encryption_type"))
}

func (ec StorageConfigS3ConfigEncryptionConfigAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("key_id"))
}

type StorageConfigState struct {
	StorageType              string                                       `json:"storage_type"`
	KinesisFirehoseConfig    []StorageConfigKinesisFirehoseConfigState    `json:"kinesis_firehose_config"`
	KinesisStreamConfig      []StorageConfigKinesisStreamConfigState      `json:"kinesis_stream_config"`
	KinesisVideoStreamConfig []StorageConfigKinesisVideoStreamConfigState `json:"kinesis_video_stream_config"`
	S3Config                 []StorageConfigS3ConfigState                 `json:"s3_config"`
}

type StorageConfigKinesisFirehoseConfigState struct {
	FirehoseArn string `json:"firehose_arn"`
}

type StorageConfigKinesisStreamConfigState struct {
	StreamArn string `json:"stream_arn"`
}

type StorageConfigKinesisVideoStreamConfigState struct {
	Prefix               string                                                       `json:"prefix"`
	RetentionPeriodHours float64                                                      `json:"retention_period_hours"`
	EncryptionConfig     []StorageConfigKinesisVideoStreamConfigEncryptionConfigState `json:"encryption_config"`
}

type StorageConfigKinesisVideoStreamConfigEncryptionConfigState struct {
	EncryptionType string `json:"encryption_type"`
	KeyId          string `json:"key_id"`
}

type StorageConfigS3ConfigState struct {
	BucketName       string                                       `json:"bucket_name"`
	BucketPrefix     string                                       `json:"bucket_prefix"`
	EncryptionConfig []StorageConfigS3ConfigEncryptionConfigState `json:"encryption_config"`
}

type StorageConfigS3ConfigEncryptionConfigState struct {
	EncryptionType string `json:"encryption_type"`
	KeyId          string `json:"key_id"`
}
