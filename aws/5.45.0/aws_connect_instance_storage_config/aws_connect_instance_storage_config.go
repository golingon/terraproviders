// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_instance_storage_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_connect_instance_storage_config.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConnectInstanceStorageConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acisc *Resource) Type() string {
	return "aws_connect_instance_storage_config"
}

// LocalName returns the local name for [Resource].
func (acisc *Resource) LocalName() string {
	return acisc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acisc *Resource) Configuration() interface{} {
	return acisc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acisc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acisc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acisc *Resource) Dependencies() terra.Dependencies {
	return acisc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acisc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acisc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acisc *Resource) Attributes() awsConnectInstanceStorageConfigAttributes {
	return awsConnectInstanceStorageConfigAttributes{ref: terra.ReferenceResource(acisc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acisc *Resource) ImportState(state io.Reader) error {
	acisc.state = &awsConnectInstanceStorageConfigState{}
	if err := json.NewDecoder(state).Decode(acisc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acisc.Type(), acisc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acisc *Resource) State() (*awsConnectInstanceStorageConfigState, bool) {
	return acisc.state, acisc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acisc *Resource) StateMust() *awsConnectInstanceStorageConfigState {
	if acisc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acisc.Type(), acisc.LocalName()))
	}
	return acisc.state
}

// Args contains the configurations for aws_connect_instance_storage_config.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// ResourceType: string, required
	ResourceType terra.StringValue `hcl:"resource_type,attr" validate:"required"`
	// StorageConfig: required
	StorageConfig *StorageConfig `hcl:"storage_config,block" validate:"required"`
}

type awsConnectInstanceStorageConfigAttributes struct {
	ref terra.Reference
}

// AssociationId returns a reference to field association_id of aws_connect_instance_storage_config.
func (acisc awsConnectInstanceStorageConfigAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceAsString(acisc.ref.Append("association_id"))
}

// Id returns a reference to field id of aws_connect_instance_storage_config.
func (acisc awsConnectInstanceStorageConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acisc.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_connect_instance_storage_config.
func (acisc awsConnectInstanceStorageConfigAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(acisc.ref.Append("instance_id"))
}

// ResourceType returns a reference to field resource_type of aws_connect_instance_storage_config.
func (acisc awsConnectInstanceStorageConfigAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(acisc.ref.Append("resource_type"))
}

func (acisc awsConnectInstanceStorageConfigAttributes) StorageConfig() terra.ListValue[StorageConfigAttributes] {
	return terra.ReferenceAsList[StorageConfigAttributes](acisc.ref.Append("storage_config"))
}

type awsConnectInstanceStorageConfigState struct {
	AssociationId string               `json:"association_id"`
	Id            string               `json:"id"`
	InstanceId    string               `json:"instance_id"`
	ResourceType  string               `json:"resource_type"`
	StorageConfig []StorageConfigState `json:"storage_config"`
}
