// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_backup_framework

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_backup_framework.
type Resource struct {
	Name      string
	Args      Args
	state     *awsBackupFrameworkState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abf *Resource) Type() string {
	return "aws_backup_framework"
}

// LocalName returns the local name for [Resource].
func (abf *Resource) LocalName() string {
	return abf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abf *Resource) Configuration() interface{} {
	return abf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abf *Resource) Dependencies() terra.Dependencies {
	return abf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abf *Resource) LifecycleManagement() *terra.Lifecycle {
	return abf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abf *Resource) Attributes() awsBackupFrameworkAttributes {
	return awsBackupFrameworkAttributes{ref: terra.ReferenceResource(abf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abf *Resource) ImportState(state io.Reader) error {
	abf.state = &awsBackupFrameworkState{}
	if err := json.NewDecoder(state).Decode(abf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abf.Type(), abf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abf *Resource) State() (*awsBackupFrameworkState, bool) {
	return abf.state, abf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abf *Resource) StateMust() *awsBackupFrameworkState {
	if abf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abf.Type(), abf.LocalName()))
	}
	return abf.state
}

// Args contains the configurations for aws_backup_framework.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Control: min=1
	Control []Control `hcl:"control,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsBackupFrameworkAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_backup_framework.
func (abf awsBackupFrameworkAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(abf.ref.Append("arn"))
}

// CreationTime returns a reference to field creation_time of aws_backup_framework.
func (abf awsBackupFrameworkAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(abf.ref.Append("creation_time"))
}

// DeploymentStatus returns a reference to field deployment_status of aws_backup_framework.
func (abf awsBackupFrameworkAttributes) DeploymentStatus() terra.StringValue {
	return terra.ReferenceAsString(abf.ref.Append("deployment_status"))
}

// Description returns a reference to field description of aws_backup_framework.
func (abf awsBackupFrameworkAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(abf.ref.Append("description"))
}

// Id returns a reference to field id of aws_backup_framework.
func (abf awsBackupFrameworkAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abf.ref.Append("id"))
}

// Name returns a reference to field name of aws_backup_framework.
func (abf awsBackupFrameworkAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abf.ref.Append("name"))
}

// Status returns a reference to field status of aws_backup_framework.
func (abf awsBackupFrameworkAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(abf.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_backup_framework.
func (abf awsBackupFrameworkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abf.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_backup_framework.
func (abf awsBackupFrameworkAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abf.ref.Append("tags_all"))
}

func (abf awsBackupFrameworkAttributes) Control() terra.SetValue[ControlAttributes] {
	return terra.ReferenceAsSet[ControlAttributes](abf.ref.Append("control"))
}

func (abf awsBackupFrameworkAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](abf.ref.Append("timeouts"))
}

type awsBackupFrameworkState struct {
	Arn              string            `json:"arn"`
	CreationTime     string            `json:"creation_time"`
	DeploymentStatus string            `json:"deployment_status"`
	Description      string            `json:"description"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	Status           string            `json:"status"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
	Control          []ControlState    `json:"control"`
	Timeouts         *TimeoutsState    `json:"timeouts"`
}
