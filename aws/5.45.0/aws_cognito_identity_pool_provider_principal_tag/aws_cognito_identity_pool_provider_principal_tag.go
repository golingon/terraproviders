// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cognito_identity_pool_provider_principal_tag

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cognito_identity_pool_provider_principal_tag.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCognitoIdentityPoolProviderPrincipalTagState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acipppt *Resource) Type() string {
	return "aws_cognito_identity_pool_provider_principal_tag"
}

// LocalName returns the local name for [Resource].
func (acipppt *Resource) LocalName() string {
	return acipppt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acipppt *Resource) Configuration() interface{} {
	return acipppt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acipppt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acipppt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acipppt *Resource) Dependencies() terra.Dependencies {
	return acipppt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acipppt *Resource) LifecycleManagement() *terra.Lifecycle {
	return acipppt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acipppt *Resource) Attributes() awsCognitoIdentityPoolProviderPrincipalTagAttributes {
	return awsCognitoIdentityPoolProviderPrincipalTagAttributes{ref: terra.ReferenceResource(acipppt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acipppt *Resource) ImportState(state io.Reader) error {
	acipppt.state = &awsCognitoIdentityPoolProviderPrincipalTagState{}
	if err := json.NewDecoder(state).Decode(acipppt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acipppt.Type(), acipppt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acipppt *Resource) State() (*awsCognitoIdentityPoolProviderPrincipalTagState, bool) {
	return acipppt.state, acipppt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acipppt *Resource) StateMust() *awsCognitoIdentityPoolProviderPrincipalTagState {
	if acipppt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acipppt.Type(), acipppt.LocalName()))
	}
	return acipppt.state
}

// Args contains the configurations for aws_cognito_identity_pool_provider_principal_tag.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityPoolId: string, required
	IdentityPoolId terra.StringValue `hcl:"identity_pool_id,attr" validate:"required"`
	// IdentityProviderName: string, required
	IdentityProviderName terra.StringValue `hcl:"identity_provider_name,attr" validate:"required"`
	// PrincipalTags: map of string, optional
	PrincipalTags terra.MapValue[terra.StringValue] `hcl:"principal_tags,attr"`
	// UseDefaults: bool, optional
	UseDefaults terra.BoolValue `hcl:"use_defaults,attr"`
}

type awsCognitoIdentityPoolProviderPrincipalTagAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_cognito_identity_pool_provider_principal_tag.
func (acipppt awsCognitoIdentityPoolProviderPrincipalTagAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acipppt.ref.Append("id"))
}

// IdentityPoolId returns a reference to field identity_pool_id of aws_cognito_identity_pool_provider_principal_tag.
func (acipppt awsCognitoIdentityPoolProviderPrincipalTagAttributes) IdentityPoolId() terra.StringValue {
	return terra.ReferenceAsString(acipppt.ref.Append("identity_pool_id"))
}

// IdentityProviderName returns a reference to field identity_provider_name of aws_cognito_identity_pool_provider_principal_tag.
func (acipppt awsCognitoIdentityPoolProviderPrincipalTagAttributes) IdentityProviderName() terra.StringValue {
	return terra.ReferenceAsString(acipppt.ref.Append("identity_provider_name"))
}

// PrincipalTags returns a reference to field principal_tags of aws_cognito_identity_pool_provider_principal_tag.
func (acipppt awsCognitoIdentityPoolProviderPrincipalTagAttributes) PrincipalTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acipppt.ref.Append("principal_tags"))
}

// UseDefaults returns a reference to field use_defaults of aws_cognito_identity_pool_provider_principal_tag.
func (acipppt awsCognitoIdentityPoolProviderPrincipalTagAttributes) UseDefaults() terra.BoolValue {
	return terra.ReferenceAsBool(acipppt.ref.Append("use_defaults"))
}

type awsCognitoIdentityPoolProviderPrincipalTagState struct {
	Id                   string            `json:"id"`
	IdentityPoolId       string            `json:"identity_pool_id"`
	IdentityProviderName string            `json:"identity_provider_name"`
	PrincipalTags        map[string]string `json:"principal_tags"`
	UseDefaults          bool              `json:"use_defaults"`
}
