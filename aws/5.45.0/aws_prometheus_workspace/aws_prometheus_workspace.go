// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_prometheus_workspace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_prometheus_workspace.
type Resource struct {
	Name      string
	Args      Args
	state     *awsPrometheusWorkspaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apw *Resource) Type() string {
	return "aws_prometheus_workspace"
}

// LocalName returns the local name for [Resource].
func (apw *Resource) LocalName() string {
	return apw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apw *Resource) Configuration() interface{} {
	return apw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apw *Resource) Dependencies() terra.Dependencies {
	return apw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apw *Resource) LifecycleManagement() *terra.Lifecycle {
	return apw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apw *Resource) Attributes() awsPrometheusWorkspaceAttributes {
	return awsPrometheusWorkspaceAttributes{ref: terra.ReferenceResource(apw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apw *Resource) ImportState(state io.Reader) error {
	apw.state = &awsPrometheusWorkspaceState{}
	if err := json.NewDecoder(state).Decode(apw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apw.Type(), apw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apw *Resource) State() (*awsPrometheusWorkspaceState, bool) {
	return apw.state, apw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apw *Resource) StateMust() *awsPrometheusWorkspaceState {
	if apw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apw.Type(), apw.LocalName()))
	}
	return apw.state
}

// Args contains the configurations for aws_prometheus_workspace.
type Args struct {
	// Alias: string, optional
	Alias terra.StringValue `hcl:"alias,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// LoggingConfiguration: optional
	LoggingConfiguration *LoggingConfiguration `hcl:"logging_configuration,block"`
}

type awsPrometheusWorkspaceAttributes struct {
	ref terra.Reference
}

// Alias returns a reference to field alias of aws_prometheus_workspace.
func (apw awsPrometheusWorkspaceAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(apw.ref.Append("alias"))
}

// Arn returns a reference to field arn of aws_prometheus_workspace.
func (apw awsPrometheusWorkspaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(apw.ref.Append("arn"))
}

// Id returns a reference to field id of aws_prometheus_workspace.
func (apw awsPrometheusWorkspaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apw.ref.Append("id"))
}

// KmsKeyArn returns a reference to field kms_key_arn of aws_prometheus_workspace.
func (apw awsPrometheusWorkspaceAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(apw.ref.Append("kms_key_arn"))
}

// PrometheusEndpoint returns a reference to field prometheus_endpoint of aws_prometheus_workspace.
func (apw awsPrometheusWorkspaceAttributes) PrometheusEndpoint() terra.StringValue {
	return terra.ReferenceAsString(apw.ref.Append("prometheus_endpoint"))
}

// Tags returns a reference to field tags of aws_prometheus_workspace.
func (apw awsPrometheusWorkspaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](apw.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_prometheus_workspace.
func (apw awsPrometheusWorkspaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](apw.ref.Append("tags_all"))
}

func (apw awsPrometheusWorkspaceAttributes) LoggingConfiguration() terra.ListValue[LoggingConfigurationAttributes] {
	return terra.ReferenceAsList[LoggingConfigurationAttributes](apw.ref.Append("logging_configuration"))
}

type awsPrometheusWorkspaceState struct {
	Alias                string                      `json:"alias"`
	Arn                  string                      `json:"arn"`
	Id                   string                      `json:"id"`
	KmsKeyArn            string                      `json:"kms_key_arn"`
	PrometheusEndpoint   string                      `json:"prometheus_endpoint"`
	Tags                 map[string]string           `json:"tags"`
	TagsAll              map[string]string           `json:"tags_all"`
	LoggingConfiguration []LoggingConfigurationState `json:"logging_configuration"`
}
