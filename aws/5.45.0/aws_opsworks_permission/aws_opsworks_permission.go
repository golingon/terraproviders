// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opsworks_permission

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_opsworks_permission.
type Resource struct {
	Name      string
	Args      Args
	state     *awsOpsworksPermissionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aop *Resource) Type() string {
	return "aws_opsworks_permission"
}

// LocalName returns the local name for [Resource].
func (aop *Resource) LocalName() string {
	return aop.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aop *Resource) Configuration() interface{} {
	return aop.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aop *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aop)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aop *Resource) Dependencies() terra.Dependencies {
	return aop.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aop *Resource) LifecycleManagement() *terra.Lifecycle {
	return aop.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aop *Resource) Attributes() awsOpsworksPermissionAttributes {
	return awsOpsworksPermissionAttributes{ref: terra.ReferenceResource(aop)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aop *Resource) ImportState(state io.Reader) error {
	aop.state = &awsOpsworksPermissionState{}
	if err := json.NewDecoder(state).Decode(aop.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aop.Type(), aop.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aop *Resource) State() (*awsOpsworksPermissionState, bool) {
	return aop.state, aop.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aop *Resource) StateMust() *awsOpsworksPermissionState {
	if aop.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aop.Type(), aop.LocalName()))
	}
	return aop.state
}

// Args contains the configurations for aws_opsworks_permission.
type Args struct {
	// AllowSsh: bool, optional
	AllowSsh terra.BoolValue `hcl:"allow_ssh,attr"`
	// AllowSudo: bool, optional
	AllowSudo terra.BoolValue `hcl:"allow_sudo,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Level: string, optional
	Level terra.StringValue `hcl:"level,attr"`
	// StackId: string, required
	StackId terra.StringValue `hcl:"stack_id,attr" validate:"required"`
	// UserArn: string, required
	UserArn terra.StringValue `hcl:"user_arn,attr" validate:"required"`
}

type awsOpsworksPermissionAttributes struct {
	ref terra.Reference
}

// AllowSsh returns a reference to field allow_ssh of aws_opsworks_permission.
func (aop awsOpsworksPermissionAttributes) AllowSsh() terra.BoolValue {
	return terra.ReferenceAsBool(aop.ref.Append("allow_ssh"))
}

// AllowSudo returns a reference to field allow_sudo of aws_opsworks_permission.
func (aop awsOpsworksPermissionAttributes) AllowSudo() terra.BoolValue {
	return terra.ReferenceAsBool(aop.ref.Append("allow_sudo"))
}

// Id returns a reference to field id of aws_opsworks_permission.
func (aop awsOpsworksPermissionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("id"))
}

// Level returns a reference to field level of aws_opsworks_permission.
func (aop awsOpsworksPermissionAttributes) Level() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("level"))
}

// StackId returns a reference to field stack_id of aws_opsworks_permission.
func (aop awsOpsworksPermissionAttributes) StackId() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("stack_id"))
}

// UserArn returns a reference to field user_arn of aws_opsworks_permission.
func (aop awsOpsworksPermissionAttributes) UserArn() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("user_arn"))
}

type awsOpsworksPermissionState struct {
	AllowSsh  bool   `json:"allow_ssh"`
	AllowSudo bool   `json:"allow_sudo"`
	Id        string `json:"id"`
	Level     string `json:"level"`
	StackId   string `json:"stack_id"`
	UserArn   string `json:"user_arn"`
}
