// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_eks_pod_identity_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_eks_pod_identity_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEksPodIdentityAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aepia *Resource) Type() string {
	return "aws_eks_pod_identity_association"
}

// LocalName returns the local name for [Resource].
func (aepia *Resource) LocalName() string {
	return aepia.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aepia *Resource) Configuration() interface{} {
	return aepia.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aepia *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aepia)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aepia *Resource) Dependencies() terra.Dependencies {
	return aepia.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aepia *Resource) LifecycleManagement() *terra.Lifecycle {
	return aepia.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aepia *Resource) Attributes() awsEksPodIdentityAssociationAttributes {
	return awsEksPodIdentityAssociationAttributes{ref: terra.ReferenceResource(aepia)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aepia *Resource) ImportState(state io.Reader) error {
	aepia.state = &awsEksPodIdentityAssociationState{}
	if err := json.NewDecoder(state).Decode(aepia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aepia.Type(), aepia.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aepia *Resource) State() (*awsEksPodIdentityAssociationState, bool) {
	return aepia.state, aepia.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aepia *Resource) StateMust() *awsEksPodIdentityAssociationState {
	if aepia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aepia.Type(), aepia.LocalName()))
	}
	return aepia.state
}

// Args contains the configurations for aws_eks_pod_identity_association.
type Args struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Namespace: string, required
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// ServiceAccount: string, required
	ServiceAccount terra.StringValue `hcl:"service_account,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type awsEksPodIdentityAssociationAttributes struct {
	ref terra.Reference
}

// AssociationArn returns a reference to field association_arn of aws_eks_pod_identity_association.
func (aepia awsEksPodIdentityAssociationAttributes) AssociationArn() terra.StringValue {
	return terra.ReferenceAsString(aepia.ref.Append("association_arn"))
}

// AssociationId returns a reference to field association_id of aws_eks_pod_identity_association.
func (aepia awsEksPodIdentityAssociationAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceAsString(aepia.ref.Append("association_id"))
}

// ClusterName returns a reference to field cluster_name of aws_eks_pod_identity_association.
func (aepia awsEksPodIdentityAssociationAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(aepia.ref.Append("cluster_name"))
}

// Id returns a reference to field id of aws_eks_pod_identity_association.
func (aepia awsEksPodIdentityAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aepia.ref.Append("id"))
}

// Namespace returns a reference to field namespace of aws_eks_pod_identity_association.
func (aepia awsEksPodIdentityAssociationAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(aepia.ref.Append("namespace"))
}

// RoleArn returns a reference to field role_arn of aws_eks_pod_identity_association.
func (aepia awsEksPodIdentityAssociationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(aepia.ref.Append("role_arn"))
}

// ServiceAccount returns a reference to field service_account of aws_eks_pod_identity_association.
func (aepia awsEksPodIdentityAssociationAttributes) ServiceAccount() terra.StringValue {
	return terra.ReferenceAsString(aepia.ref.Append("service_account"))
}

// Tags returns a reference to field tags of aws_eks_pod_identity_association.
func (aepia awsEksPodIdentityAssociationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aepia.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_eks_pod_identity_association.
func (aepia awsEksPodIdentityAssociationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aepia.ref.Append("tags_all"))
}

type awsEksPodIdentityAssociationState struct {
	AssociationArn string            `json:"association_arn"`
	AssociationId  string            `json:"association_id"`
	ClusterName    string            `json:"cluster_name"`
	Id             string            `json:"id"`
	Namespace      string            `json:"namespace"`
	RoleArn        string            `json:"role_arn"`
	ServiceAccount string            `json:"service_account"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
}
