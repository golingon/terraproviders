// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_storagegateway_tape_pool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_storagegateway_tape_pool.
type Resource struct {
	Name      string
	Args      Args
	state     *awsStoragegatewayTapePoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (astp *Resource) Type() string {
	return "aws_storagegateway_tape_pool"
}

// LocalName returns the local name for [Resource].
func (astp *Resource) LocalName() string {
	return astp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (astp *Resource) Configuration() interface{} {
	return astp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (astp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(astp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (astp *Resource) Dependencies() terra.Dependencies {
	return astp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (astp *Resource) LifecycleManagement() *terra.Lifecycle {
	return astp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (astp *Resource) Attributes() awsStoragegatewayTapePoolAttributes {
	return awsStoragegatewayTapePoolAttributes{ref: terra.ReferenceResource(astp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (astp *Resource) ImportState(state io.Reader) error {
	astp.state = &awsStoragegatewayTapePoolState{}
	if err := json.NewDecoder(state).Decode(astp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", astp.Type(), astp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (astp *Resource) State() (*awsStoragegatewayTapePoolState, bool) {
	return astp.state, astp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (astp *Resource) StateMust() *awsStoragegatewayTapePoolState {
	if astp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", astp.Type(), astp.LocalName()))
	}
	return astp.state
}

// Args contains the configurations for aws_storagegateway_tape_pool.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PoolName: string, required
	PoolName terra.StringValue `hcl:"pool_name,attr" validate:"required"`
	// RetentionLockTimeInDays: number, optional
	RetentionLockTimeInDays terra.NumberValue `hcl:"retention_lock_time_in_days,attr"`
	// RetentionLockType: string, optional
	RetentionLockType terra.StringValue `hcl:"retention_lock_type,attr"`
	// StorageClass: string, required
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsStoragegatewayTapePoolAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_storagegateway_tape_pool.
func (astp awsStoragegatewayTapePoolAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(astp.ref.Append("arn"))
}

// Id returns a reference to field id of aws_storagegateway_tape_pool.
func (astp awsStoragegatewayTapePoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(astp.ref.Append("id"))
}

// PoolName returns a reference to field pool_name of aws_storagegateway_tape_pool.
func (astp awsStoragegatewayTapePoolAttributes) PoolName() terra.StringValue {
	return terra.ReferenceAsString(astp.ref.Append("pool_name"))
}

// RetentionLockTimeInDays returns a reference to field retention_lock_time_in_days of aws_storagegateway_tape_pool.
func (astp awsStoragegatewayTapePoolAttributes) RetentionLockTimeInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(astp.ref.Append("retention_lock_time_in_days"))
}

// RetentionLockType returns a reference to field retention_lock_type of aws_storagegateway_tape_pool.
func (astp awsStoragegatewayTapePoolAttributes) RetentionLockType() terra.StringValue {
	return terra.ReferenceAsString(astp.ref.Append("retention_lock_type"))
}

// StorageClass returns a reference to field storage_class of aws_storagegateway_tape_pool.
func (astp awsStoragegatewayTapePoolAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(astp.ref.Append("storage_class"))
}

// Tags returns a reference to field tags of aws_storagegateway_tape_pool.
func (astp awsStoragegatewayTapePoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](astp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_storagegateway_tape_pool.
func (astp awsStoragegatewayTapePoolAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](astp.ref.Append("tags_all"))
}

type awsStoragegatewayTapePoolState struct {
	Arn                     string            `json:"arn"`
	Id                      string            `json:"id"`
	PoolName                string            `json:"pool_name"`
	RetentionLockTimeInDays float64           `json:"retention_lock_time_in_days"`
	RetentionLockType       string            `json:"retention_lock_type"`
	StorageClass            string            `json:"storage_class"`
	Tags                    map[string]string `json:"tags"`
	TagsAll                 map[string]string `json:"tags_all"`
}
