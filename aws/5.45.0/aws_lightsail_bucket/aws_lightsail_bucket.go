// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lightsail_bucket

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lightsail_bucket.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLightsailBucketState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alb *Resource) Type() string {
	return "aws_lightsail_bucket"
}

// LocalName returns the local name for [Resource].
func (alb *Resource) LocalName() string {
	return alb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alb *Resource) Configuration() interface{} {
	return alb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alb *Resource) Dependencies() terra.Dependencies {
	return alb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alb *Resource) LifecycleManagement() *terra.Lifecycle {
	return alb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alb *Resource) Attributes() awsLightsailBucketAttributes {
	return awsLightsailBucketAttributes{ref: terra.ReferenceResource(alb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alb *Resource) ImportState(state io.Reader) error {
	alb.state = &awsLightsailBucketState{}
	if err := json.NewDecoder(state).Decode(alb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alb.Type(), alb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alb *Resource) State() (*awsLightsailBucketState, bool) {
	return alb.state, alb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alb *Resource) StateMust() *awsLightsailBucketState {
	if alb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alb.Type(), alb.LocalName()))
	}
	return alb.state
}

// Args contains the configurations for aws_lightsail_bucket.
type Args struct {
	// BundleId: string, required
	BundleId terra.StringValue `hcl:"bundle_id,attr" validate:"required"`
	// ForceDelete: bool, optional
	ForceDelete terra.BoolValue `hcl:"force_delete,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsLightsailBucketAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_lightsail_bucket.
func (alb awsLightsailBucketAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("arn"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_lightsail_bucket.
func (alb awsLightsailBucketAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("availability_zone"))
}

// BundleId returns a reference to field bundle_id of aws_lightsail_bucket.
func (alb awsLightsailBucketAttributes) BundleId() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("bundle_id"))
}

// CreatedAt returns a reference to field created_at of aws_lightsail_bucket.
func (alb awsLightsailBucketAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("created_at"))
}

// ForceDelete returns a reference to field force_delete of aws_lightsail_bucket.
func (alb awsLightsailBucketAttributes) ForceDelete() terra.BoolValue {
	return terra.ReferenceAsBool(alb.ref.Append("force_delete"))
}

// Id returns a reference to field id of aws_lightsail_bucket.
func (alb awsLightsailBucketAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("id"))
}

// Name returns a reference to field name of aws_lightsail_bucket.
func (alb awsLightsailBucketAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("name"))
}

// Region returns a reference to field region of aws_lightsail_bucket.
func (alb awsLightsailBucketAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("region"))
}

// SupportCode returns a reference to field support_code of aws_lightsail_bucket.
func (alb awsLightsailBucketAttributes) SupportCode() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("support_code"))
}

// Tags returns a reference to field tags of aws_lightsail_bucket.
func (alb awsLightsailBucketAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alb.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_lightsail_bucket.
func (alb awsLightsailBucketAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](alb.ref.Append("tags_all"))
}

// Url returns a reference to field url of aws_lightsail_bucket.
func (alb awsLightsailBucketAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(alb.ref.Append("url"))
}

type awsLightsailBucketState struct {
	Arn              string            `json:"arn"`
	AvailabilityZone string            `json:"availability_zone"`
	BundleId         string            `json:"bundle_id"`
	CreatedAt        string            `json:"created_at"`
	ForceDelete      bool              `json:"force_delete"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	Region           string            `json:"region"`
	SupportCode      string            `json:"support_code"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
	Url              string            `json:"url"`
}
