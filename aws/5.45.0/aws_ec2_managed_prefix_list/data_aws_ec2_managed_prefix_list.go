// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_managed_prefix_list

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_ec2_managed_prefix_list.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aempl *DataSource) DataSource() string {
	return "aws_ec2_managed_prefix_list"
}

// LocalName returns the local name for [DataSource].
func (aempl *DataSource) LocalName() string {
	return aempl.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aempl *DataSource) Configuration() interface{} {
	return aempl.Args
}

// Attributes returns the attributes for [DataSource].
func (aempl *DataSource) Attributes() dataAwsEc2ManagedPrefixListAttributes {
	return dataAwsEc2ManagedPrefixListAttributes{ref: terra.ReferenceDataSource(aempl)}
}

// DataArgs contains the configurations for aws_ec2_managed_prefix_list.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filter: min=0
	Filter []DataFilter `hcl:"filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *DataTimeouts `hcl:"timeouts,block"`
}

type dataAwsEc2ManagedPrefixListAttributes struct {
	ref terra.Reference
}

// AddressFamily returns a reference to field address_family of aws_ec2_managed_prefix_list.
func (aempl dataAwsEc2ManagedPrefixListAttributes) AddressFamily() terra.StringValue {
	return terra.ReferenceAsString(aempl.ref.Append("address_family"))
}

// Arn returns a reference to field arn of aws_ec2_managed_prefix_list.
func (aempl dataAwsEc2ManagedPrefixListAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aempl.ref.Append("arn"))
}

// Id returns a reference to field id of aws_ec2_managed_prefix_list.
func (aempl dataAwsEc2ManagedPrefixListAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aempl.ref.Append("id"))
}

// MaxEntries returns a reference to field max_entries of aws_ec2_managed_prefix_list.
func (aempl dataAwsEc2ManagedPrefixListAttributes) MaxEntries() terra.NumberValue {
	return terra.ReferenceAsNumber(aempl.ref.Append("max_entries"))
}

// Name returns a reference to field name of aws_ec2_managed_prefix_list.
func (aempl dataAwsEc2ManagedPrefixListAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aempl.ref.Append("name"))
}

// OwnerId returns a reference to field owner_id of aws_ec2_managed_prefix_list.
func (aempl dataAwsEc2ManagedPrefixListAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(aempl.ref.Append("owner_id"))
}

// Tags returns a reference to field tags of aws_ec2_managed_prefix_list.
func (aempl dataAwsEc2ManagedPrefixListAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aempl.ref.Append("tags"))
}

// Version returns a reference to field version of aws_ec2_managed_prefix_list.
func (aempl dataAwsEc2ManagedPrefixListAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(aempl.ref.Append("version"))
}

func (aempl dataAwsEc2ManagedPrefixListAttributes) Entries() terra.SetValue[DataEntriesAttributes] {
	return terra.ReferenceAsSet[DataEntriesAttributes](aempl.ref.Append("entries"))
}

func (aempl dataAwsEc2ManagedPrefixListAttributes) Filter() terra.SetValue[DataFilterAttributes] {
	return terra.ReferenceAsSet[DataFilterAttributes](aempl.ref.Append("filter"))
}

func (aempl dataAwsEc2ManagedPrefixListAttributes) Timeouts() DataTimeoutsAttributes {
	return terra.ReferenceAsSingle[DataTimeoutsAttributes](aempl.ref.Append("timeouts"))
}
