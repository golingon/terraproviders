// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_managed_prefix_list

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_managed_prefix_list.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2ManagedPrefixListState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aempl *Resource) Type() string {
	return "aws_ec2_managed_prefix_list"
}

// LocalName returns the local name for [Resource].
func (aempl *Resource) LocalName() string {
	return aempl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aempl *Resource) Configuration() interface{} {
	return aempl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aempl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aempl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aempl *Resource) Dependencies() terra.Dependencies {
	return aempl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aempl *Resource) LifecycleManagement() *terra.Lifecycle {
	return aempl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aempl *Resource) Attributes() awsEc2ManagedPrefixListAttributes {
	return awsEc2ManagedPrefixListAttributes{ref: terra.ReferenceResource(aempl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aempl *Resource) ImportState(state io.Reader) error {
	aempl.state = &awsEc2ManagedPrefixListState{}
	if err := json.NewDecoder(state).Decode(aempl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aempl.Type(), aempl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aempl *Resource) State() (*awsEc2ManagedPrefixListState, bool) {
	return aempl.state, aempl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aempl *Resource) StateMust() *awsEc2ManagedPrefixListState {
	if aempl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aempl.Type(), aempl.LocalName()))
	}
	return aempl.state
}

// Args contains the configurations for aws_ec2_managed_prefix_list.
type Args struct {
	// AddressFamily: string, required
	AddressFamily terra.StringValue `hcl:"address_family,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxEntries: number, required
	MaxEntries terra.NumberValue `hcl:"max_entries,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Entry: min=0
	Entry []Entry `hcl:"entry,block" validate:"min=0"`
}

type awsEc2ManagedPrefixListAttributes struct {
	ref terra.Reference
}

// AddressFamily returns a reference to field address_family of aws_ec2_managed_prefix_list.
func (aempl awsEc2ManagedPrefixListAttributes) AddressFamily() terra.StringValue {
	return terra.ReferenceAsString(aempl.ref.Append("address_family"))
}

// Arn returns a reference to field arn of aws_ec2_managed_prefix_list.
func (aempl awsEc2ManagedPrefixListAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aempl.ref.Append("arn"))
}

// Id returns a reference to field id of aws_ec2_managed_prefix_list.
func (aempl awsEc2ManagedPrefixListAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aempl.ref.Append("id"))
}

// MaxEntries returns a reference to field max_entries of aws_ec2_managed_prefix_list.
func (aempl awsEc2ManagedPrefixListAttributes) MaxEntries() terra.NumberValue {
	return terra.ReferenceAsNumber(aempl.ref.Append("max_entries"))
}

// Name returns a reference to field name of aws_ec2_managed_prefix_list.
func (aempl awsEc2ManagedPrefixListAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aempl.ref.Append("name"))
}

// OwnerId returns a reference to field owner_id of aws_ec2_managed_prefix_list.
func (aempl awsEc2ManagedPrefixListAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(aempl.ref.Append("owner_id"))
}

// Tags returns a reference to field tags of aws_ec2_managed_prefix_list.
func (aempl awsEc2ManagedPrefixListAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aempl.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_managed_prefix_list.
func (aempl awsEc2ManagedPrefixListAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aempl.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_ec2_managed_prefix_list.
func (aempl awsEc2ManagedPrefixListAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(aempl.ref.Append("version"))
}

func (aempl awsEc2ManagedPrefixListAttributes) Entry() terra.SetValue[EntryAttributes] {
	return terra.ReferenceAsSet[EntryAttributes](aempl.ref.Append("entry"))
}

type awsEc2ManagedPrefixListState struct {
	AddressFamily string            `json:"address_family"`
	Arn           string            `json:"arn"`
	Id            string            `json:"id"`
	MaxEntries    float64           `json:"max_entries"`
	Name          string            `json:"name"`
	OwnerId       string            `json:"owner_id"`
	Tags          map[string]string `json:"tags"`
	TagsAll       map[string]string `json:"tags_all"`
	Version       float64           `json:"version"`
	Entry         []EntryState      `json:"entry"`
}
