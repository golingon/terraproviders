// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_batch_job_definition

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EksProperties struct {
	// EksPropertiesPodProperties: required
	PodProperties *EksPropertiesPodProperties `hcl:"pod_properties,block" validate:"required"`
}

type EksPropertiesPodProperties struct {
	// DnsPolicy: string, optional
	DnsPolicy terra.StringValue `hcl:"dns_policy,attr"`
	// HostNetwork: bool, optional
	HostNetwork terra.BoolValue `hcl:"host_network,attr"`
	// ServiceAccountName: string, optional
	ServiceAccountName terra.StringValue `hcl:"service_account_name,attr"`
	// EksPropertiesPodPropertiesContainers: required
	Containers *EksPropertiesPodPropertiesContainers `hcl:"containers,block" validate:"required"`
	// EksPropertiesPodPropertiesMetadata: optional
	Metadata *EksPropertiesPodPropertiesMetadata `hcl:"metadata,block"`
	// EksPropertiesPodPropertiesVolumes: min=0
	Volumes []EksPropertiesPodPropertiesVolumes `hcl:"volumes,block" validate:"min=0"`
}

type EksPropertiesPodPropertiesContainers struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// ImagePullPolicy: string, optional
	ImagePullPolicy terra.StringValue `hcl:"image_pull_policy,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// EksPropertiesPodPropertiesContainersEnv: min=0
	Env []EksPropertiesPodPropertiesContainersEnv `hcl:"env,block" validate:"min=0"`
	// EksPropertiesPodPropertiesContainersResources: optional
	Resources *EksPropertiesPodPropertiesContainersResources `hcl:"resources,block"`
	// EksPropertiesPodPropertiesContainersSecurityContext: optional
	SecurityContext *EksPropertiesPodPropertiesContainersSecurityContext `hcl:"security_context,block"`
	// EksPropertiesPodPropertiesContainersVolumeMounts: min=0
	VolumeMounts []EksPropertiesPodPropertiesContainersVolumeMounts `hcl:"volume_mounts,block" validate:"min=0"`
}

type EksPropertiesPodPropertiesContainersEnv struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type EksPropertiesPodPropertiesContainersResources struct {
	// Limits: map of string, optional
	Limits terra.MapValue[terra.StringValue] `hcl:"limits,attr"`
	// Requests: map of string, optional
	Requests terra.MapValue[terra.StringValue] `hcl:"requests,attr"`
}

type EksPropertiesPodPropertiesContainersSecurityContext struct {
	// Privileged: bool, optional
	Privileged terra.BoolValue `hcl:"privileged,attr"`
	// ReadOnlyRootFileSystem: bool, optional
	ReadOnlyRootFileSystem terra.BoolValue `hcl:"read_only_root_file_system,attr"`
	// RunAsGroup: number, optional
	RunAsGroup terra.NumberValue `hcl:"run_as_group,attr"`
	// RunAsNonRoot: bool, optional
	RunAsNonRoot terra.BoolValue `hcl:"run_as_non_root,attr"`
	// RunAsUser: number, optional
	RunAsUser terra.NumberValue `hcl:"run_as_user,attr"`
}

type EksPropertiesPodPropertiesContainersVolumeMounts struct {
	// MountPath: string, required
	MountPath terra.StringValue `hcl:"mount_path,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReadOnly: bool, optional
	ReadOnly terra.BoolValue `hcl:"read_only,attr"`
}

type EksPropertiesPodPropertiesMetadata struct {
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
}

type EksPropertiesPodPropertiesVolumes struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// EksPropertiesPodPropertiesVolumesEmptyDir: optional
	EmptyDir *EksPropertiesPodPropertiesVolumesEmptyDir `hcl:"empty_dir,block"`
	// EksPropertiesPodPropertiesVolumesHostPath: optional
	HostPath *EksPropertiesPodPropertiesVolumesHostPath `hcl:"host_path,block"`
	// EksPropertiesPodPropertiesVolumesSecret: optional
	Secret *EksPropertiesPodPropertiesVolumesSecret `hcl:"secret,block"`
}

type EksPropertiesPodPropertiesVolumesEmptyDir struct {
	// Medium: string, optional
	Medium terra.StringValue `hcl:"medium,attr"`
	// SizeLimit: string, required
	SizeLimit terra.StringValue `hcl:"size_limit,attr" validate:"required"`
}

type EksPropertiesPodPropertiesVolumesHostPath struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type EksPropertiesPodPropertiesVolumesSecret struct {
	// Optional: bool, optional
	Optional terra.BoolValue `hcl:"optional,attr"`
	// SecretName: string, required
	SecretName terra.StringValue `hcl:"secret_name,attr" validate:"required"`
}

type RetryStrategy struct {
	// Attempts: number, optional
	Attempts terra.NumberValue `hcl:"attempts,attr"`
	// RetryStrategyEvaluateOnExit: min=0,max=5
	EvaluateOnExit []RetryStrategyEvaluateOnExit `hcl:"evaluate_on_exit,block" validate:"min=0,max=5"`
}

type RetryStrategyEvaluateOnExit struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// OnExitCode: string, optional
	OnExitCode terra.StringValue `hcl:"on_exit_code,attr"`
	// OnReason: string, optional
	OnReason terra.StringValue `hcl:"on_reason,attr"`
	// OnStatusReason: string, optional
	OnStatusReason terra.StringValue `hcl:"on_status_reason,attr"`
}

type Timeout struct {
	// AttemptDurationSeconds: number, optional
	AttemptDurationSeconds terra.NumberValue `hcl:"attempt_duration_seconds,attr"`
}

type EksPropertiesAttributes struct {
	ref terra.Reference
}

func (ep EksPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep EksPropertiesAttributes) InternalWithRef(ref terra.Reference) EksPropertiesAttributes {
	return EksPropertiesAttributes{ref: ref}
}

func (ep EksPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep EksPropertiesAttributes) PodProperties() terra.ListValue[EksPropertiesPodPropertiesAttributes] {
	return terra.ReferenceAsList[EksPropertiesPodPropertiesAttributes](ep.ref.Append("pod_properties"))
}

type EksPropertiesPodPropertiesAttributes struct {
	ref terra.Reference
}

func (pp EksPropertiesPodPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp EksPropertiesPodPropertiesAttributes) InternalWithRef(ref terra.Reference) EksPropertiesPodPropertiesAttributes {
	return EksPropertiesPodPropertiesAttributes{ref: ref}
}

func (pp EksPropertiesPodPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp EksPropertiesPodPropertiesAttributes) DnsPolicy() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("dns_policy"))
}

func (pp EksPropertiesPodPropertiesAttributes) HostNetwork() terra.BoolValue {
	return terra.ReferenceAsBool(pp.ref.Append("host_network"))
}

func (pp EksPropertiesPodPropertiesAttributes) ServiceAccountName() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("service_account_name"))
}

func (pp EksPropertiesPodPropertiesAttributes) Containers() terra.ListValue[EksPropertiesPodPropertiesContainersAttributes] {
	return terra.ReferenceAsList[EksPropertiesPodPropertiesContainersAttributes](pp.ref.Append("containers"))
}

func (pp EksPropertiesPodPropertiesAttributes) Metadata() terra.ListValue[EksPropertiesPodPropertiesMetadataAttributes] {
	return terra.ReferenceAsList[EksPropertiesPodPropertiesMetadataAttributes](pp.ref.Append("metadata"))
}

func (pp EksPropertiesPodPropertiesAttributes) Volumes() terra.ListValue[EksPropertiesPodPropertiesVolumesAttributes] {
	return terra.ReferenceAsList[EksPropertiesPodPropertiesVolumesAttributes](pp.ref.Append("volumes"))
}

type EksPropertiesPodPropertiesContainersAttributes struct {
	ref terra.Reference
}

func (c EksPropertiesPodPropertiesContainersAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c EksPropertiesPodPropertiesContainersAttributes) InternalWithRef(ref terra.Reference) EksPropertiesPodPropertiesContainersAttributes {
	return EksPropertiesPodPropertiesContainersAttributes{ref: ref}
}

func (c EksPropertiesPodPropertiesContainersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c EksPropertiesPodPropertiesContainersAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("args"))
}

func (c EksPropertiesPodPropertiesContainersAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("command"))
}

func (c EksPropertiesPodPropertiesContainersAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c EksPropertiesPodPropertiesContainersAttributes) ImagePullPolicy() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image_pull_policy"))
}

func (c EksPropertiesPodPropertiesContainersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c EksPropertiesPodPropertiesContainersAttributes) Env() terra.SetValue[EksPropertiesPodPropertiesContainersEnvAttributes] {
	return terra.ReferenceAsSet[EksPropertiesPodPropertiesContainersEnvAttributes](c.ref.Append("env"))
}

func (c EksPropertiesPodPropertiesContainersAttributes) Resources() terra.ListValue[EksPropertiesPodPropertiesContainersResourcesAttributes] {
	return terra.ReferenceAsList[EksPropertiesPodPropertiesContainersResourcesAttributes](c.ref.Append("resources"))
}

func (c EksPropertiesPodPropertiesContainersAttributes) SecurityContext() terra.ListValue[EksPropertiesPodPropertiesContainersSecurityContextAttributes] {
	return terra.ReferenceAsList[EksPropertiesPodPropertiesContainersSecurityContextAttributes](c.ref.Append("security_context"))
}

func (c EksPropertiesPodPropertiesContainersAttributes) VolumeMounts() terra.ListValue[EksPropertiesPodPropertiesContainersVolumeMountsAttributes] {
	return terra.ReferenceAsList[EksPropertiesPodPropertiesContainersVolumeMountsAttributes](c.ref.Append("volume_mounts"))
}

type EksPropertiesPodPropertiesContainersEnvAttributes struct {
	ref terra.Reference
}

func (e EksPropertiesPodPropertiesContainersEnvAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EksPropertiesPodPropertiesContainersEnvAttributes) InternalWithRef(ref terra.Reference) EksPropertiesPodPropertiesContainersEnvAttributes {
	return EksPropertiesPodPropertiesContainersEnvAttributes{ref: ref}
}

func (e EksPropertiesPodPropertiesContainersEnvAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EksPropertiesPodPropertiesContainersEnvAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e EksPropertiesPodPropertiesContainersEnvAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type EksPropertiesPodPropertiesContainersResourcesAttributes struct {
	ref terra.Reference
}

func (r EksPropertiesPodPropertiesContainersResourcesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r EksPropertiesPodPropertiesContainersResourcesAttributes) InternalWithRef(ref terra.Reference) EksPropertiesPodPropertiesContainersResourcesAttributes {
	return EksPropertiesPodPropertiesContainersResourcesAttributes{ref: ref}
}

func (r EksPropertiesPodPropertiesContainersResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r EksPropertiesPodPropertiesContainersResourcesAttributes) Limits() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("limits"))
}

func (r EksPropertiesPodPropertiesContainersResourcesAttributes) Requests() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("requests"))
}

type EksPropertiesPodPropertiesContainersSecurityContextAttributes struct {
	ref terra.Reference
}

func (sc EksPropertiesPodPropertiesContainersSecurityContextAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc EksPropertiesPodPropertiesContainersSecurityContextAttributes) InternalWithRef(ref terra.Reference) EksPropertiesPodPropertiesContainersSecurityContextAttributes {
	return EksPropertiesPodPropertiesContainersSecurityContextAttributes{ref: ref}
}

func (sc EksPropertiesPodPropertiesContainersSecurityContextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc EksPropertiesPodPropertiesContainersSecurityContextAttributes) Privileged() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("privileged"))
}

func (sc EksPropertiesPodPropertiesContainersSecurityContextAttributes) ReadOnlyRootFileSystem() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("read_only_root_file_system"))
}

func (sc EksPropertiesPodPropertiesContainersSecurityContextAttributes) RunAsGroup() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("run_as_group"))
}

func (sc EksPropertiesPodPropertiesContainersSecurityContextAttributes) RunAsNonRoot() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("run_as_non_root"))
}

func (sc EksPropertiesPodPropertiesContainersSecurityContextAttributes) RunAsUser() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("run_as_user"))
}

type EksPropertiesPodPropertiesContainersVolumeMountsAttributes struct {
	ref terra.Reference
}

func (vm EksPropertiesPodPropertiesContainersVolumeMountsAttributes) InternalRef() (terra.Reference, error) {
	return vm.ref, nil
}

func (vm EksPropertiesPodPropertiesContainersVolumeMountsAttributes) InternalWithRef(ref terra.Reference) EksPropertiesPodPropertiesContainersVolumeMountsAttributes {
	return EksPropertiesPodPropertiesContainersVolumeMountsAttributes{ref: ref}
}

func (vm EksPropertiesPodPropertiesContainersVolumeMountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vm.ref.InternalTokens()
}

func (vm EksPropertiesPodPropertiesContainersVolumeMountsAttributes) MountPath() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("mount_path"))
}

func (vm EksPropertiesPodPropertiesContainersVolumeMountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vm.ref.Append("name"))
}

func (vm EksPropertiesPodPropertiesContainersVolumeMountsAttributes) ReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(vm.ref.Append("read_only"))
}

type EksPropertiesPodPropertiesMetadataAttributes struct {
	ref terra.Reference
}

func (m EksPropertiesPodPropertiesMetadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m EksPropertiesPodPropertiesMetadataAttributes) InternalWithRef(ref terra.Reference) EksPropertiesPodPropertiesMetadataAttributes {
	return EksPropertiesPodPropertiesMetadataAttributes{ref: ref}
}

func (m EksPropertiesPodPropertiesMetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m EksPropertiesPodPropertiesMetadataAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](m.ref.Append("labels"))
}

type EksPropertiesPodPropertiesVolumesAttributes struct {
	ref terra.Reference
}

func (v EksPropertiesPodPropertiesVolumesAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v EksPropertiesPodPropertiesVolumesAttributes) InternalWithRef(ref terra.Reference) EksPropertiesPodPropertiesVolumesAttributes {
	return EksPropertiesPodPropertiesVolumesAttributes{ref: ref}
}

func (v EksPropertiesPodPropertiesVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v EksPropertiesPodPropertiesVolumesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v EksPropertiesPodPropertiesVolumesAttributes) EmptyDir() terra.ListValue[EksPropertiesPodPropertiesVolumesEmptyDirAttributes] {
	return terra.ReferenceAsList[EksPropertiesPodPropertiesVolumesEmptyDirAttributes](v.ref.Append("empty_dir"))
}

func (v EksPropertiesPodPropertiesVolumesAttributes) HostPath() terra.ListValue[EksPropertiesPodPropertiesVolumesHostPathAttributes] {
	return terra.ReferenceAsList[EksPropertiesPodPropertiesVolumesHostPathAttributes](v.ref.Append("host_path"))
}

func (v EksPropertiesPodPropertiesVolumesAttributes) Secret() terra.ListValue[EksPropertiesPodPropertiesVolumesSecretAttributes] {
	return terra.ReferenceAsList[EksPropertiesPodPropertiesVolumesSecretAttributes](v.ref.Append("secret"))
}

type EksPropertiesPodPropertiesVolumesEmptyDirAttributes struct {
	ref terra.Reference
}

func (ed EksPropertiesPodPropertiesVolumesEmptyDirAttributes) InternalRef() (terra.Reference, error) {
	return ed.ref, nil
}

func (ed EksPropertiesPodPropertiesVolumesEmptyDirAttributes) InternalWithRef(ref terra.Reference) EksPropertiesPodPropertiesVolumesEmptyDirAttributes {
	return EksPropertiesPodPropertiesVolumesEmptyDirAttributes{ref: ref}
}

func (ed EksPropertiesPodPropertiesVolumesEmptyDirAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ed.ref.InternalTokens()
}

func (ed EksPropertiesPodPropertiesVolumesEmptyDirAttributes) Medium() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("medium"))
}

func (ed EksPropertiesPodPropertiesVolumesEmptyDirAttributes) SizeLimit() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("size_limit"))
}

type EksPropertiesPodPropertiesVolumesHostPathAttributes struct {
	ref terra.Reference
}

func (hp EksPropertiesPodPropertiesVolumesHostPathAttributes) InternalRef() (terra.Reference, error) {
	return hp.ref, nil
}

func (hp EksPropertiesPodPropertiesVolumesHostPathAttributes) InternalWithRef(ref terra.Reference) EksPropertiesPodPropertiesVolumesHostPathAttributes {
	return EksPropertiesPodPropertiesVolumesHostPathAttributes{ref: ref}
}

func (hp EksPropertiesPodPropertiesVolumesHostPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hp.ref.InternalTokens()
}

func (hp EksPropertiesPodPropertiesVolumesHostPathAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hp.ref.Append("path"))
}

type EksPropertiesPodPropertiesVolumesSecretAttributes struct {
	ref terra.Reference
}

func (s EksPropertiesPodPropertiesVolumesSecretAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s EksPropertiesPodPropertiesVolumesSecretAttributes) InternalWithRef(ref terra.Reference) EksPropertiesPodPropertiesVolumesSecretAttributes {
	return EksPropertiesPodPropertiesVolumesSecretAttributes{ref: ref}
}

func (s EksPropertiesPodPropertiesVolumesSecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s EksPropertiesPodPropertiesVolumesSecretAttributes) Optional() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("optional"))
}

func (s EksPropertiesPodPropertiesVolumesSecretAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret_name"))
}

type RetryStrategyAttributes struct {
	ref terra.Reference
}

func (rs RetryStrategyAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RetryStrategyAttributes) InternalWithRef(ref terra.Reference) RetryStrategyAttributes {
	return RetryStrategyAttributes{ref: ref}
}

func (rs RetryStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RetryStrategyAttributes) Attempts() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("attempts"))
}

func (rs RetryStrategyAttributes) EvaluateOnExit() terra.ListValue[RetryStrategyEvaluateOnExitAttributes] {
	return terra.ReferenceAsList[RetryStrategyEvaluateOnExitAttributes](rs.ref.Append("evaluate_on_exit"))
}

type RetryStrategyEvaluateOnExitAttributes struct {
	ref terra.Reference
}

func (eoe RetryStrategyEvaluateOnExitAttributes) InternalRef() (terra.Reference, error) {
	return eoe.ref, nil
}

func (eoe RetryStrategyEvaluateOnExitAttributes) InternalWithRef(ref terra.Reference) RetryStrategyEvaluateOnExitAttributes {
	return RetryStrategyEvaluateOnExitAttributes{ref: ref}
}

func (eoe RetryStrategyEvaluateOnExitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eoe.ref.InternalTokens()
}

func (eoe RetryStrategyEvaluateOnExitAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("action"))
}

func (eoe RetryStrategyEvaluateOnExitAttributes) OnExitCode() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("on_exit_code"))
}

func (eoe RetryStrategyEvaluateOnExitAttributes) OnReason() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("on_reason"))
}

func (eoe RetryStrategyEvaluateOnExitAttributes) OnStatusReason() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("on_status_reason"))
}

type TimeoutAttributes struct {
	ref terra.Reference
}

func (t TimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutAttributes) InternalWithRef(ref terra.Reference) TimeoutAttributes {
	return TimeoutAttributes{ref: ref}
}

func (t TimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutAttributes) AttemptDurationSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("attempt_duration_seconds"))
}

type EksPropertiesState struct {
	PodProperties []EksPropertiesPodPropertiesState `json:"pod_properties"`
}

type EksPropertiesPodPropertiesState struct {
	DnsPolicy          string                                      `json:"dns_policy"`
	HostNetwork        bool                                        `json:"host_network"`
	ServiceAccountName string                                      `json:"service_account_name"`
	Containers         []EksPropertiesPodPropertiesContainersState `json:"containers"`
	Metadata           []EksPropertiesPodPropertiesMetadataState   `json:"metadata"`
	Volumes            []EksPropertiesPodPropertiesVolumesState    `json:"volumes"`
}

type EksPropertiesPodPropertiesContainersState struct {
	Args            []string                                                   `json:"args"`
	Command         []string                                                   `json:"command"`
	Image           string                                                     `json:"image"`
	ImagePullPolicy string                                                     `json:"image_pull_policy"`
	Name            string                                                     `json:"name"`
	Env             []EksPropertiesPodPropertiesContainersEnvState             `json:"env"`
	Resources       []EksPropertiesPodPropertiesContainersResourcesState       `json:"resources"`
	SecurityContext []EksPropertiesPodPropertiesContainersSecurityContextState `json:"security_context"`
	VolumeMounts    []EksPropertiesPodPropertiesContainersVolumeMountsState    `json:"volume_mounts"`
}

type EksPropertiesPodPropertiesContainersEnvState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type EksPropertiesPodPropertiesContainersResourcesState struct {
	Limits   map[string]string `json:"limits"`
	Requests map[string]string `json:"requests"`
}

type EksPropertiesPodPropertiesContainersSecurityContextState struct {
	Privileged             bool    `json:"privileged"`
	ReadOnlyRootFileSystem bool    `json:"read_only_root_file_system"`
	RunAsGroup             float64 `json:"run_as_group"`
	RunAsNonRoot           bool    `json:"run_as_non_root"`
	RunAsUser              float64 `json:"run_as_user"`
}

type EksPropertiesPodPropertiesContainersVolumeMountsState struct {
	MountPath string `json:"mount_path"`
	Name      string `json:"name"`
	ReadOnly  bool   `json:"read_only"`
}

type EksPropertiesPodPropertiesMetadataState struct {
	Labels map[string]string `json:"labels"`
}

type EksPropertiesPodPropertiesVolumesState struct {
	Name     string                                           `json:"name"`
	EmptyDir []EksPropertiesPodPropertiesVolumesEmptyDirState `json:"empty_dir"`
	HostPath []EksPropertiesPodPropertiesVolumesHostPathState `json:"host_path"`
	Secret   []EksPropertiesPodPropertiesVolumesSecretState   `json:"secret"`
}

type EksPropertiesPodPropertiesVolumesEmptyDirState struct {
	Medium    string `json:"medium"`
	SizeLimit string `json:"size_limit"`
}

type EksPropertiesPodPropertiesVolumesHostPathState struct {
	Path string `json:"path"`
}

type EksPropertiesPodPropertiesVolumesSecretState struct {
	Optional   bool   `json:"optional"`
	SecretName string `json:"secret_name"`
}

type RetryStrategyState struct {
	Attempts       float64                            `json:"attempts"`
	EvaluateOnExit []RetryStrategyEvaluateOnExitState `json:"evaluate_on_exit"`
}

type RetryStrategyEvaluateOnExitState struct {
	Action         string `json:"action"`
	OnExitCode     string `json:"on_exit_code"`
	OnReason       string `json:"on_reason"`
	OnStatusReason string `json:"on_status_reason"`
}

type TimeoutState struct {
	AttemptDurationSeconds float64 `json:"attempt_duration_seconds"`
}
