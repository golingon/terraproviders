// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iot_event_configurations

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iot_event_configurations.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIotEventConfigurationsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aiec *Resource) Type() string {
	return "aws_iot_event_configurations"
}

// LocalName returns the local name for [Resource].
func (aiec *Resource) LocalName() string {
	return aiec.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aiec *Resource) Configuration() interface{} {
	return aiec.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aiec *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aiec)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aiec *Resource) Dependencies() terra.Dependencies {
	return aiec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aiec *Resource) LifecycleManagement() *terra.Lifecycle {
	return aiec.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aiec *Resource) Attributes() awsIotEventConfigurationsAttributes {
	return awsIotEventConfigurationsAttributes{ref: terra.ReferenceResource(aiec)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aiec *Resource) ImportState(state io.Reader) error {
	aiec.state = &awsIotEventConfigurationsState{}
	if err := json.NewDecoder(state).Decode(aiec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiec.Type(), aiec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aiec *Resource) State() (*awsIotEventConfigurationsState, bool) {
	return aiec.state, aiec.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aiec *Resource) StateMust() *awsIotEventConfigurationsState {
	if aiec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiec.Type(), aiec.LocalName()))
	}
	return aiec.state
}

// Args contains the configurations for aws_iot_event_configurations.
type Args struct {
	// EventConfigurations: map of bool, required
	EventConfigurations terra.MapValue[terra.BoolValue] `hcl:"event_configurations,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsIotEventConfigurationsAttributes struct {
	ref terra.Reference
}

// EventConfigurations returns a reference to field event_configurations of aws_iot_event_configurations.
func (aiec awsIotEventConfigurationsAttributes) EventConfigurations() terra.MapValue[terra.BoolValue] {
	return terra.ReferenceAsMap[terra.BoolValue](aiec.ref.Append("event_configurations"))
}

// Id returns a reference to field id of aws_iot_event_configurations.
func (aiec awsIotEventConfigurationsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiec.ref.Append("id"))
}

type awsIotEventConfigurationsState struct {
	EventConfigurations map[string]bool `json:"event_configurations"`
	Id                  string          `json:"id"`
}
