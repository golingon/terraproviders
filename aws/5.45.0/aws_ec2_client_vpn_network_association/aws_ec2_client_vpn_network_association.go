// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_client_vpn_network_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_client_vpn_network_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2ClientVpnNetworkAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aecvna *Resource) Type() string {
	return "aws_ec2_client_vpn_network_association"
}

// LocalName returns the local name for [Resource].
func (aecvna *Resource) LocalName() string {
	return aecvna.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aecvna *Resource) Configuration() interface{} {
	return aecvna.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aecvna *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aecvna)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aecvna *Resource) Dependencies() terra.Dependencies {
	return aecvna.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aecvna *Resource) LifecycleManagement() *terra.Lifecycle {
	return aecvna.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aecvna *Resource) Attributes() awsEc2ClientVpnNetworkAssociationAttributes {
	return awsEc2ClientVpnNetworkAssociationAttributes{ref: terra.ReferenceResource(aecvna)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aecvna *Resource) ImportState(state io.Reader) error {
	aecvna.state = &awsEc2ClientVpnNetworkAssociationState{}
	if err := json.NewDecoder(state).Decode(aecvna.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aecvna.Type(), aecvna.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aecvna *Resource) State() (*awsEc2ClientVpnNetworkAssociationState, bool) {
	return aecvna.state, aecvna.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aecvna *Resource) StateMust() *awsEc2ClientVpnNetworkAssociationState {
	if aecvna.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aecvna.Type(), aecvna.LocalName()))
	}
	return aecvna.state
}

// Args contains the configurations for aws_ec2_client_vpn_network_association.
type Args struct {
	// ClientVpnEndpointId: string, required
	ClientVpnEndpointId terra.StringValue `hcl:"client_vpn_endpoint_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEc2ClientVpnNetworkAssociationAttributes struct {
	ref terra.Reference
}

// AssociationId returns a reference to field association_id of aws_ec2_client_vpn_network_association.
func (aecvna awsEc2ClientVpnNetworkAssociationAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceAsString(aecvna.ref.Append("association_id"))
}

// ClientVpnEndpointId returns a reference to field client_vpn_endpoint_id of aws_ec2_client_vpn_network_association.
func (aecvna awsEc2ClientVpnNetworkAssociationAttributes) ClientVpnEndpointId() terra.StringValue {
	return terra.ReferenceAsString(aecvna.ref.Append("client_vpn_endpoint_id"))
}

// Id returns a reference to field id of aws_ec2_client_vpn_network_association.
func (aecvna awsEc2ClientVpnNetworkAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aecvna.ref.Append("id"))
}

// SubnetId returns a reference to field subnet_id of aws_ec2_client_vpn_network_association.
func (aecvna awsEc2ClientVpnNetworkAssociationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(aecvna.ref.Append("subnet_id"))
}

// VpcId returns a reference to field vpc_id of aws_ec2_client_vpn_network_association.
func (aecvna awsEc2ClientVpnNetworkAssociationAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(aecvna.ref.Append("vpc_id"))
}

func (aecvna awsEc2ClientVpnNetworkAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aecvna.ref.Append("timeouts"))
}

type awsEc2ClientVpnNetworkAssociationState struct {
	AssociationId       string         `json:"association_id"`
	ClientVpnEndpointId string         `json:"client_vpn_endpoint_id"`
	Id                  string         `json:"id"`
	SubnetId            string         `json:"subnet_id"`
	VpcId               string         `json:"vpc_id"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
