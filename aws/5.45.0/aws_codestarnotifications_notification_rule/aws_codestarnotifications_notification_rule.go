// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codestarnotifications_notification_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codestarnotifications_notification_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodestarnotificationsNotificationRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acnr *Resource) Type() string {
	return "aws_codestarnotifications_notification_rule"
}

// LocalName returns the local name for [Resource].
func (acnr *Resource) LocalName() string {
	return acnr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acnr *Resource) Configuration() interface{} {
	return acnr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acnr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acnr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acnr *Resource) Dependencies() terra.Dependencies {
	return acnr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acnr *Resource) LifecycleManagement() *terra.Lifecycle {
	return acnr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acnr *Resource) Attributes() awsCodestarnotificationsNotificationRuleAttributes {
	return awsCodestarnotificationsNotificationRuleAttributes{ref: terra.ReferenceResource(acnr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acnr *Resource) ImportState(state io.Reader) error {
	acnr.state = &awsCodestarnotificationsNotificationRuleState{}
	if err := json.NewDecoder(state).Decode(acnr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acnr.Type(), acnr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acnr *Resource) State() (*awsCodestarnotificationsNotificationRuleState, bool) {
	return acnr.state, acnr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acnr *Resource) StateMust() *awsCodestarnotificationsNotificationRuleState {
	if acnr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acnr.Type(), acnr.LocalName()))
	}
	return acnr.state
}

// Args contains the configurations for aws_codestarnotifications_notification_rule.
type Args struct {
	// DetailType: string, required
	DetailType terra.StringValue `hcl:"detail_type,attr" validate:"required"`
	// EventTypeIds: set of string, required
	EventTypeIds terra.SetValue[terra.StringValue] `hcl:"event_type_ids,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Resource: string, required
	Resource terra.StringValue `hcl:"resource,attr" validate:"required"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Target: min=0,max=10
	Target []Target `hcl:"target,block" validate:"min=0,max=10"`
}

type awsCodestarnotificationsNotificationRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_codestarnotifications_notification_rule.
func (acnr awsCodestarnotificationsNotificationRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acnr.ref.Append("arn"))
}

// DetailType returns a reference to field detail_type of aws_codestarnotifications_notification_rule.
func (acnr awsCodestarnotificationsNotificationRuleAttributes) DetailType() terra.StringValue {
	return terra.ReferenceAsString(acnr.ref.Append("detail_type"))
}

// EventTypeIds returns a reference to field event_type_ids of aws_codestarnotifications_notification_rule.
func (acnr awsCodestarnotificationsNotificationRuleAttributes) EventTypeIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acnr.ref.Append("event_type_ids"))
}

// Id returns a reference to field id of aws_codestarnotifications_notification_rule.
func (acnr awsCodestarnotificationsNotificationRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acnr.ref.Append("id"))
}

// Name returns a reference to field name of aws_codestarnotifications_notification_rule.
func (acnr awsCodestarnotificationsNotificationRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acnr.ref.Append("name"))
}

// Resource returns a reference to field resource of aws_codestarnotifications_notification_rule.
func (acnr awsCodestarnotificationsNotificationRuleAttributes) Resource() terra.StringValue {
	return terra.ReferenceAsString(acnr.ref.Append("resource"))
}

// Status returns a reference to field status of aws_codestarnotifications_notification_rule.
func (acnr awsCodestarnotificationsNotificationRuleAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(acnr.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_codestarnotifications_notification_rule.
func (acnr awsCodestarnotificationsNotificationRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acnr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_codestarnotifications_notification_rule.
func (acnr awsCodestarnotificationsNotificationRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acnr.ref.Append("tags_all"))
}

func (acnr awsCodestarnotificationsNotificationRuleAttributes) Target() terra.SetValue[TargetAttributes] {
	return terra.ReferenceAsSet[TargetAttributes](acnr.ref.Append("target"))
}

type awsCodestarnotificationsNotificationRuleState struct {
	Arn          string            `json:"arn"`
	DetailType   string            `json:"detail_type"`
	EventTypeIds []string          `json:"event_type_ids"`
	Id           string            `json:"id"`
	Name         string            `json:"name"`
	Resource     string            `json:"resource"`
	Status       string            `json:"status"`
	Tags         map[string]string `json:"tags"`
	TagsAll      map[string]string `json:"tags_all"`
	Target       []TargetState     `json:"target"`
}
