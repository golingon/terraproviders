// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_organizations_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_organizations_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsOrganizationsPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aop *Resource) Type() string {
	return "aws_organizations_policy"
}

// LocalName returns the local name for [Resource].
func (aop *Resource) LocalName() string {
	return aop.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aop *Resource) Configuration() interface{} {
	return aop.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aop *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aop)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aop *Resource) Dependencies() terra.Dependencies {
	return aop.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aop *Resource) LifecycleManagement() *terra.Lifecycle {
	return aop.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aop *Resource) Attributes() awsOrganizationsPolicyAttributes {
	return awsOrganizationsPolicyAttributes{ref: terra.ReferenceResource(aop)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aop *Resource) ImportState(state io.Reader) error {
	aop.state = &awsOrganizationsPolicyState{}
	if err := json.NewDecoder(state).Decode(aop.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aop.Type(), aop.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aop *Resource) State() (*awsOrganizationsPolicyState, bool) {
	return aop.state, aop.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aop *Resource) StateMust() *awsOrganizationsPolicyState {
	if aop.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aop.Type(), aop.LocalName()))
	}
	return aop.state
}

// Args contains the configurations for aws_organizations_policy.
type Args struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SkipDestroy: bool, optional
	SkipDestroy terra.BoolValue `hcl:"skip_destroy,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type awsOrganizationsPolicyAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_organizations_policy.
func (aop awsOrganizationsPolicyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("arn"))
}

// Content returns a reference to field content of aws_organizations_policy.
func (aop awsOrganizationsPolicyAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("content"))
}

// Description returns a reference to field description of aws_organizations_policy.
func (aop awsOrganizationsPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("description"))
}

// Id returns a reference to field id of aws_organizations_policy.
func (aop awsOrganizationsPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("id"))
}

// Name returns a reference to field name of aws_organizations_policy.
func (aop awsOrganizationsPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("name"))
}

// SkipDestroy returns a reference to field skip_destroy of aws_organizations_policy.
func (aop awsOrganizationsPolicyAttributes) SkipDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(aop.ref.Append("skip_destroy"))
}

// Tags returns a reference to field tags of aws_organizations_policy.
func (aop awsOrganizationsPolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aop.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_organizations_policy.
func (aop awsOrganizationsPolicyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aop.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_organizations_policy.
func (aop awsOrganizationsPolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aop.ref.Append("type"))
}

type awsOrganizationsPolicyState struct {
	Arn         string            `json:"arn"`
	Content     string            `json:"content"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	SkipDestroy bool              `json:"skip_destroy"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	Type        string            `json:"type"`
}
