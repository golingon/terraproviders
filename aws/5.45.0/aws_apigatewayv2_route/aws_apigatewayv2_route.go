// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_apigatewayv2_route

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_apigatewayv2_route.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApigatewayv2RouteState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aar *Resource) Type() string {
	return "aws_apigatewayv2_route"
}

// LocalName returns the local name for [Resource].
func (aar *Resource) LocalName() string {
	return aar.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aar *Resource) Configuration() interface{} {
	return aar.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aar *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aar)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aar *Resource) Dependencies() terra.Dependencies {
	return aar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aar *Resource) LifecycleManagement() *terra.Lifecycle {
	return aar.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aar *Resource) Attributes() awsApigatewayv2RouteAttributes {
	return awsApigatewayv2RouteAttributes{ref: terra.ReferenceResource(aar)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aar *Resource) ImportState(state io.Reader) error {
	aar.state = &awsApigatewayv2RouteState{}
	if err := json.NewDecoder(state).Decode(aar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aar.Type(), aar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aar *Resource) State() (*awsApigatewayv2RouteState, bool) {
	return aar.state, aar.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aar *Resource) StateMust() *awsApigatewayv2RouteState {
	if aar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aar.Type(), aar.LocalName()))
	}
	return aar.state
}

// Args contains the configurations for aws_apigatewayv2_route.
type Args struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// ApiKeyRequired: bool, optional
	ApiKeyRequired terra.BoolValue `hcl:"api_key_required,attr"`
	// AuthorizationScopes: set of string, optional
	AuthorizationScopes terra.SetValue[terra.StringValue] `hcl:"authorization_scopes,attr"`
	// AuthorizationType: string, optional
	AuthorizationType terra.StringValue `hcl:"authorization_type,attr"`
	// AuthorizerId: string, optional
	AuthorizerId terra.StringValue `hcl:"authorizer_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ModelSelectionExpression: string, optional
	ModelSelectionExpression terra.StringValue `hcl:"model_selection_expression,attr"`
	// OperationName: string, optional
	OperationName terra.StringValue `hcl:"operation_name,attr"`
	// RequestModels: map of string, optional
	RequestModels terra.MapValue[terra.StringValue] `hcl:"request_models,attr"`
	// RouteKey: string, required
	RouteKey terra.StringValue `hcl:"route_key,attr" validate:"required"`
	// RouteResponseSelectionExpression: string, optional
	RouteResponseSelectionExpression terra.StringValue `hcl:"route_response_selection_expression,attr"`
	// Target: string, optional
	Target terra.StringValue `hcl:"target,attr"`
	// RequestParameter: min=0
	RequestParameter []RequestParameter `hcl:"request_parameter,block" validate:"min=0"`
}

type awsApigatewayv2RouteAttributes struct {
	ref terra.Reference
}

// ApiId returns a reference to field api_id of aws_apigatewayv2_route.
func (aar awsApigatewayv2RouteAttributes) ApiId() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("api_id"))
}

// ApiKeyRequired returns a reference to field api_key_required of aws_apigatewayv2_route.
func (aar awsApigatewayv2RouteAttributes) ApiKeyRequired() terra.BoolValue {
	return terra.ReferenceAsBool(aar.ref.Append("api_key_required"))
}

// AuthorizationScopes returns a reference to field authorization_scopes of aws_apigatewayv2_route.
func (aar awsApigatewayv2RouteAttributes) AuthorizationScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aar.ref.Append("authorization_scopes"))
}

// AuthorizationType returns a reference to field authorization_type of aws_apigatewayv2_route.
func (aar awsApigatewayv2RouteAttributes) AuthorizationType() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("authorization_type"))
}

// AuthorizerId returns a reference to field authorizer_id of aws_apigatewayv2_route.
func (aar awsApigatewayv2RouteAttributes) AuthorizerId() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("authorizer_id"))
}

// Id returns a reference to field id of aws_apigatewayv2_route.
func (aar awsApigatewayv2RouteAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("id"))
}

// ModelSelectionExpression returns a reference to field model_selection_expression of aws_apigatewayv2_route.
func (aar awsApigatewayv2RouteAttributes) ModelSelectionExpression() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("model_selection_expression"))
}

// OperationName returns a reference to field operation_name of aws_apigatewayv2_route.
func (aar awsApigatewayv2RouteAttributes) OperationName() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("operation_name"))
}

// RequestModels returns a reference to field request_models of aws_apigatewayv2_route.
func (aar awsApigatewayv2RouteAttributes) RequestModels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aar.ref.Append("request_models"))
}

// RouteKey returns a reference to field route_key of aws_apigatewayv2_route.
func (aar awsApigatewayv2RouteAttributes) RouteKey() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("route_key"))
}

// RouteResponseSelectionExpression returns a reference to field route_response_selection_expression of aws_apigatewayv2_route.
func (aar awsApigatewayv2RouteAttributes) RouteResponseSelectionExpression() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("route_response_selection_expression"))
}

// Target returns a reference to field target of aws_apigatewayv2_route.
func (aar awsApigatewayv2RouteAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("target"))
}

func (aar awsApigatewayv2RouteAttributes) RequestParameter() terra.SetValue[RequestParameterAttributes] {
	return terra.ReferenceAsSet[RequestParameterAttributes](aar.ref.Append("request_parameter"))
}

type awsApigatewayv2RouteState struct {
	ApiId                            string                  `json:"api_id"`
	ApiKeyRequired                   bool                    `json:"api_key_required"`
	AuthorizationScopes              []string                `json:"authorization_scopes"`
	AuthorizationType                string                  `json:"authorization_type"`
	AuthorizerId                     string                  `json:"authorizer_id"`
	Id                               string                  `json:"id"`
	ModelSelectionExpression         string                  `json:"model_selection_expression"`
	OperationName                    string                  `json:"operation_name"`
	RequestModels                    map[string]string       `json:"request_models"`
	RouteKey                         string                  `json:"route_key"`
	RouteResponseSelectionExpression string                  `json:"route_response_selection_expression"`
	Target                           string                  `json:"target"`
	RequestParameter                 []RequestParameterState `json:"request_parameter"`
}
