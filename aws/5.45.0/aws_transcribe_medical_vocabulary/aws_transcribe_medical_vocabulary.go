// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_transcribe_medical_vocabulary

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_transcribe_medical_vocabulary.
type Resource struct {
	Name      string
	Args      Args
	state     *awsTranscribeMedicalVocabularyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (atmv *Resource) Type() string {
	return "aws_transcribe_medical_vocabulary"
}

// LocalName returns the local name for [Resource].
func (atmv *Resource) LocalName() string {
	return atmv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (atmv *Resource) Configuration() interface{} {
	return atmv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (atmv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(atmv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (atmv *Resource) Dependencies() terra.Dependencies {
	return atmv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (atmv *Resource) LifecycleManagement() *terra.Lifecycle {
	return atmv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (atmv *Resource) Attributes() awsTranscribeMedicalVocabularyAttributes {
	return awsTranscribeMedicalVocabularyAttributes{ref: terra.ReferenceResource(atmv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (atmv *Resource) ImportState(state io.Reader) error {
	atmv.state = &awsTranscribeMedicalVocabularyState{}
	if err := json.NewDecoder(state).Decode(atmv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", atmv.Type(), atmv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (atmv *Resource) State() (*awsTranscribeMedicalVocabularyState, bool) {
	return atmv.state, atmv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (atmv *Resource) StateMust() *awsTranscribeMedicalVocabularyState {
	if atmv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", atmv.Type(), atmv.LocalName()))
	}
	return atmv.state
}

// Args contains the configurations for aws_transcribe_medical_vocabulary.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VocabularyFileUri: string, required
	VocabularyFileUri terra.StringValue `hcl:"vocabulary_file_uri,attr" validate:"required"`
	// VocabularyName: string, required
	VocabularyName terra.StringValue `hcl:"vocabulary_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsTranscribeMedicalVocabularyAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_transcribe_medical_vocabulary.
func (atmv awsTranscribeMedicalVocabularyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(atmv.ref.Append("arn"))
}

// DownloadUri returns a reference to field download_uri of aws_transcribe_medical_vocabulary.
func (atmv awsTranscribeMedicalVocabularyAttributes) DownloadUri() terra.StringValue {
	return terra.ReferenceAsString(atmv.ref.Append("download_uri"))
}

// Id returns a reference to field id of aws_transcribe_medical_vocabulary.
func (atmv awsTranscribeMedicalVocabularyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(atmv.ref.Append("id"))
}

// LanguageCode returns a reference to field language_code of aws_transcribe_medical_vocabulary.
func (atmv awsTranscribeMedicalVocabularyAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(atmv.ref.Append("language_code"))
}

// Tags returns a reference to field tags of aws_transcribe_medical_vocabulary.
func (atmv awsTranscribeMedicalVocabularyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](atmv.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_transcribe_medical_vocabulary.
func (atmv awsTranscribeMedicalVocabularyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](atmv.ref.Append("tags_all"))
}

// VocabularyFileUri returns a reference to field vocabulary_file_uri of aws_transcribe_medical_vocabulary.
func (atmv awsTranscribeMedicalVocabularyAttributes) VocabularyFileUri() terra.StringValue {
	return terra.ReferenceAsString(atmv.ref.Append("vocabulary_file_uri"))
}

// VocabularyName returns a reference to field vocabulary_name of aws_transcribe_medical_vocabulary.
func (atmv awsTranscribeMedicalVocabularyAttributes) VocabularyName() terra.StringValue {
	return terra.ReferenceAsString(atmv.ref.Append("vocabulary_name"))
}

func (atmv awsTranscribeMedicalVocabularyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](atmv.ref.Append("timeouts"))
}

type awsTranscribeMedicalVocabularyState struct {
	Arn               string            `json:"arn"`
	DownloadUri       string            `json:"download_uri"`
	Id                string            `json:"id"`
	LanguageCode      string            `json:"language_code"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
	VocabularyFileUri string            `json:"vocabulary_file_uri"`
	VocabularyName    string            `json:"vocabulary_name"`
	Timeouts          *TimeoutsState    `json:"timeouts"`
}
