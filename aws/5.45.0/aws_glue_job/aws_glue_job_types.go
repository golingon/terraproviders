// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_job

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Command struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// PythonVersion: string, optional
	PythonVersion terra.StringValue `hcl:"python_version,attr"`
	// Runtime: string, optional
	Runtime terra.StringValue `hcl:"runtime,attr"`
	// ScriptLocation: string, required
	ScriptLocation terra.StringValue `hcl:"script_location,attr" validate:"required"`
}

type ExecutionProperty struct {
	// MaxConcurrentRuns: number, optional
	MaxConcurrentRuns terra.NumberValue `hcl:"max_concurrent_runs,attr"`
}

type NotificationProperty struct {
	// NotifyDelayAfter: number, optional
	NotifyDelayAfter terra.NumberValue `hcl:"notify_delay_after,attr"`
}

type CommandAttributes struct {
	ref terra.Reference
}

func (c CommandAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CommandAttributes) InternalWithRef(ref terra.Reference) CommandAttributes {
	return CommandAttributes{ref: ref}
}

func (c CommandAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CommandAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c CommandAttributes) PythonVersion() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("python_version"))
}

func (c CommandAttributes) Runtime() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("runtime"))
}

func (c CommandAttributes) ScriptLocation() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("script_location"))
}

type ExecutionPropertyAttributes struct {
	ref terra.Reference
}

func (ep ExecutionPropertyAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep ExecutionPropertyAttributes) InternalWithRef(ref terra.Reference) ExecutionPropertyAttributes {
	return ExecutionPropertyAttributes{ref: ref}
}

func (ep ExecutionPropertyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep ExecutionPropertyAttributes) MaxConcurrentRuns() terra.NumberValue {
	return terra.ReferenceAsNumber(ep.ref.Append("max_concurrent_runs"))
}

type NotificationPropertyAttributes struct {
	ref terra.Reference
}

func (np NotificationPropertyAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np NotificationPropertyAttributes) InternalWithRef(ref terra.Reference) NotificationPropertyAttributes {
	return NotificationPropertyAttributes{ref: ref}
}

func (np NotificationPropertyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np NotificationPropertyAttributes) NotifyDelayAfter() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("notify_delay_after"))
}

type CommandState struct {
	Name           string `json:"name"`
	PythonVersion  string `json:"python_version"`
	Runtime        string `json:"runtime"`
	ScriptLocation string `json:"script_location"`
}

type ExecutionPropertyState struct {
	MaxConcurrentRuns float64 `json:"max_concurrent_runs"`
}

type NotificationPropertyState struct {
	NotifyDelayAfter float64 `json:"notify_delay_after"`
}
