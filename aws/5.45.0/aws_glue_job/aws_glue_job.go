// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_job

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glue_job.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlueJobState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agj *Resource) Type() string {
	return "aws_glue_job"
}

// LocalName returns the local name for [Resource].
func (agj *Resource) LocalName() string {
	return agj.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agj *Resource) Configuration() interface{} {
	return agj.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agj *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agj)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agj *Resource) Dependencies() terra.Dependencies {
	return agj.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agj *Resource) LifecycleManagement() *terra.Lifecycle {
	return agj.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agj *Resource) Attributes() awsGlueJobAttributes {
	return awsGlueJobAttributes{ref: terra.ReferenceResource(agj)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agj *Resource) ImportState(state io.Reader) error {
	agj.state = &awsGlueJobState{}
	if err := json.NewDecoder(state).Decode(agj.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agj.Type(), agj.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agj *Resource) State() (*awsGlueJobState, bool) {
	return agj.state, agj.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agj *Resource) StateMust() *awsGlueJobState {
	if agj.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agj.Type(), agj.LocalName()))
	}
	return agj.state
}

// Args contains the configurations for aws_glue_job.
type Args struct {
	// Connections: list of string, optional
	Connections terra.ListValue[terra.StringValue] `hcl:"connections,attr"`
	// DefaultArguments: map of string, optional
	DefaultArguments terra.MapValue[terra.StringValue] `hcl:"default_arguments,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExecutionClass: string, optional
	ExecutionClass terra.StringValue `hcl:"execution_class,attr"`
	// GlueVersion: string, optional
	GlueVersion terra.StringValue `hcl:"glue_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxCapacity: number, optional
	MaxCapacity terra.NumberValue `hcl:"max_capacity,attr"`
	// MaxRetries: number, optional
	MaxRetries terra.NumberValue `hcl:"max_retries,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NonOverridableArguments: map of string, optional
	NonOverridableArguments terra.MapValue[terra.StringValue] `hcl:"non_overridable_arguments,attr"`
	// NumberOfWorkers: number, optional
	NumberOfWorkers terra.NumberValue `hcl:"number_of_workers,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// SecurityConfiguration: string, optional
	SecurityConfiguration terra.StringValue `hcl:"security_configuration,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeout: number, optional
	Timeout terra.NumberValue `hcl:"timeout,attr"`
	// WorkerType: string, optional
	WorkerType terra.StringValue `hcl:"worker_type,attr"`
	// Command: required
	Command *Command `hcl:"command,block" validate:"required"`
	// ExecutionProperty: optional
	ExecutionProperty *ExecutionProperty `hcl:"execution_property,block"`
	// NotificationProperty: optional
	NotificationProperty *NotificationProperty `hcl:"notification_property,block"`
}

type awsGlueJobAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_glue_job.
func (agj awsGlueJobAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agj.ref.Append("arn"))
}

// Connections returns a reference to field connections of aws_glue_job.
func (agj awsGlueJobAttributes) Connections() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](agj.ref.Append("connections"))
}

// DefaultArguments returns a reference to field default_arguments of aws_glue_job.
func (agj awsGlueJobAttributes) DefaultArguments() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agj.ref.Append("default_arguments"))
}

// Description returns a reference to field description of aws_glue_job.
func (agj awsGlueJobAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(agj.ref.Append("description"))
}

// ExecutionClass returns a reference to field execution_class of aws_glue_job.
func (agj awsGlueJobAttributes) ExecutionClass() terra.StringValue {
	return terra.ReferenceAsString(agj.ref.Append("execution_class"))
}

// GlueVersion returns a reference to field glue_version of aws_glue_job.
func (agj awsGlueJobAttributes) GlueVersion() terra.StringValue {
	return terra.ReferenceAsString(agj.ref.Append("glue_version"))
}

// Id returns a reference to field id of aws_glue_job.
func (agj awsGlueJobAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agj.ref.Append("id"))
}

// MaxCapacity returns a reference to field max_capacity of aws_glue_job.
func (agj awsGlueJobAttributes) MaxCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(agj.ref.Append("max_capacity"))
}

// MaxRetries returns a reference to field max_retries of aws_glue_job.
func (agj awsGlueJobAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(agj.ref.Append("max_retries"))
}

// Name returns a reference to field name of aws_glue_job.
func (agj awsGlueJobAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agj.ref.Append("name"))
}

// NonOverridableArguments returns a reference to field non_overridable_arguments of aws_glue_job.
func (agj awsGlueJobAttributes) NonOverridableArguments() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agj.ref.Append("non_overridable_arguments"))
}

// NumberOfWorkers returns a reference to field number_of_workers of aws_glue_job.
func (agj awsGlueJobAttributes) NumberOfWorkers() terra.NumberValue {
	return terra.ReferenceAsNumber(agj.ref.Append("number_of_workers"))
}

// RoleArn returns a reference to field role_arn of aws_glue_job.
func (agj awsGlueJobAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(agj.ref.Append("role_arn"))
}

// SecurityConfiguration returns a reference to field security_configuration of aws_glue_job.
func (agj awsGlueJobAttributes) SecurityConfiguration() terra.StringValue {
	return terra.ReferenceAsString(agj.ref.Append("security_configuration"))
}

// Tags returns a reference to field tags of aws_glue_job.
func (agj awsGlueJobAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agj.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_glue_job.
func (agj awsGlueJobAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agj.ref.Append("tags_all"))
}

// Timeout returns a reference to field timeout of aws_glue_job.
func (agj awsGlueJobAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(agj.ref.Append("timeout"))
}

// WorkerType returns a reference to field worker_type of aws_glue_job.
func (agj awsGlueJobAttributes) WorkerType() terra.StringValue {
	return terra.ReferenceAsString(agj.ref.Append("worker_type"))
}

func (agj awsGlueJobAttributes) Command() terra.ListValue[CommandAttributes] {
	return terra.ReferenceAsList[CommandAttributes](agj.ref.Append("command"))
}

func (agj awsGlueJobAttributes) ExecutionProperty() terra.ListValue[ExecutionPropertyAttributes] {
	return terra.ReferenceAsList[ExecutionPropertyAttributes](agj.ref.Append("execution_property"))
}

func (agj awsGlueJobAttributes) NotificationProperty() terra.ListValue[NotificationPropertyAttributes] {
	return terra.ReferenceAsList[NotificationPropertyAttributes](agj.ref.Append("notification_property"))
}

type awsGlueJobState struct {
	Arn                     string                      `json:"arn"`
	Connections             []string                    `json:"connections"`
	DefaultArguments        map[string]string           `json:"default_arguments"`
	Description             string                      `json:"description"`
	ExecutionClass          string                      `json:"execution_class"`
	GlueVersion             string                      `json:"glue_version"`
	Id                      string                      `json:"id"`
	MaxCapacity             float64                     `json:"max_capacity"`
	MaxRetries              float64                     `json:"max_retries"`
	Name                    string                      `json:"name"`
	NonOverridableArguments map[string]string           `json:"non_overridable_arguments"`
	NumberOfWorkers         float64                     `json:"number_of_workers"`
	RoleArn                 string                      `json:"role_arn"`
	SecurityConfiguration   string                      `json:"security_configuration"`
	Tags                    map[string]string           `json:"tags"`
	TagsAll                 map[string]string           `json:"tags_all"`
	Timeout                 float64                     `json:"timeout"`
	WorkerType              string                      `json:"worker_type"`
	Command                 []CommandState              `json:"command"`
	ExecutionProperty       []ExecutionPropertyState    `json:"execution_property"`
	NotificationProperty    []NotificationPropertyState `json:"notification_property"`
}
