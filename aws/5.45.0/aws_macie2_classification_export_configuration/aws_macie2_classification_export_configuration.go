// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_macie2_classification_export_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_macie2_classification_export_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMacie2ClassificationExportConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amcec *Resource) Type() string {
	return "aws_macie2_classification_export_configuration"
}

// LocalName returns the local name for [Resource].
func (amcec *Resource) LocalName() string {
	return amcec.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amcec *Resource) Configuration() interface{} {
	return amcec.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amcec *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amcec)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amcec *Resource) Dependencies() terra.Dependencies {
	return amcec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amcec *Resource) LifecycleManagement() *terra.Lifecycle {
	return amcec.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amcec *Resource) Attributes() awsMacie2ClassificationExportConfigurationAttributes {
	return awsMacie2ClassificationExportConfigurationAttributes{ref: terra.ReferenceResource(amcec)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amcec *Resource) ImportState(state io.Reader) error {
	amcec.state = &awsMacie2ClassificationExportConfigurationState{}
	if err := json.NewDecoder(state).Decode(amcec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amcec.Type(), amcec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amcec *Resource) State() (*awsMacie2ClassificationExportConfigurationState, bool) {
	return amcec.state, amcec.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amcec *Resource) StateMust() *awsMacie2ClassificationExportConfigurationState {
	if amcec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amcec.Type(), amcec.LocalName()))
	}
	return amcec.state
}

// Args contains the configurations for aws_macie2_classification_export_configuration.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// S3Destination: optional
	S3Destination *S3Destination `hcl:"s3_destination,block"`
}

type awsMacie2ClassificationExportConfigurationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_macie2_classification_export_configuration.
func (amcec awsMacie2ClassificationExportConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amcec.ref.Append("id"))
}

func (amcec awsMacie2ClassificationExportConfigurationAttributes) S3Destination() terra.ListValue[S3DestinationAttributes] {
	return terra.ReferenceAsList[S3DestinationAttributes](amcec.ref.Append("s3_destination"))
}

type awsMacie2ClassificationExportConfigurationState struct {
	Id            string               `json:"id"`
	S3Destination []S3DestinationState `json:"s3_destination"`
}
