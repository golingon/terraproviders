// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dx_connection_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dx_connection_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDxConnectionAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adca *Resource) Type() string {
	return "aws_dx_connection_association"
}

// LocalName returns the local name for [Resource].
func (adca *Resource) LocalName() string {
	return adca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adca *Resource) Configuration() interface{} {
	return adca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adca *Resource) Dependencies() terra.Dependencies {
	return adca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adca *Resource) LifecycleManagement() *terra.Lifecycle {
	return adca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adca *Resource) Attributes() awsDxConnectionAssociationAttributes {
	return awsDxConnectionAssociationAttributes{ref: terra.ReferenceResource(adca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adca *Resource) ImportState(state io.Reader) error {
	adca.state = &awsDxConnectionAssociationState{}
	if err := json.NewDecoder(state).Decode(adca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adca.Type(), adca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adca *Resource) State() (*awsDxConnectionAssociationState, bool) {
	return adca.state, adca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adca *Resource) StateMust() *awsDxConnectionAssociationState {
	if adca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adca.Type(), adca.LocalName()))
	}
	return adca.state
}

// Args contains the configurations for aws_dx_connection_association.
type Args struct {
	// ConnectionId: string, required
	ConnectionId terra.StringValue `hcl:"connection_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LagId: string, required
	LagId terra.StringValue `hcl:"lag_id,attr" validate:"required"`
}

type awsDxConnectionAssociationAttributes struct {
	ref terra.Reference
}

// ConnectionId returns a reference to field connection_id of aws_dx_connection_association.
func (adca awsDxConnectionAssociationAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceAsString(adca.ref.Append("connection_id"))
}

// Id returns a reference to field id of aws_dx_connection_association.
func (adca awsDxConnectionAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adca.ref.Append("id"))
}

// LagId returns a reference to field lag_id of aws_dx_connection_association.
func (adca awsDxConnectionAssociationAttributes) LagId() terra.StringValue {
	return terra.ReferenceAsString(adca.ref.Append("lag_id"))
}

type awsDxConnectionAssociationState struct {
	ConnectionId string `json:"connection_id"`
	Id           string `json:"id"`
	LagId        string `json:"lag_id"`
}
