// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_ontap_file_system

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataDiskIopsConfigurationAttributes struct {
	ref terra.Reference
}

func (dic DataDiskIopsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dic.ref, nil
}

func (dic DataDiskIopsConfigurationAttributes) InternalWithRef(ref terra.Reference) DataDiskIopsConfigurationAttributes {
	return DataDiskIopsConfigurationAttributes{ref: ref}
}

func (dic DataDiskIopsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dic.ref.InternalTokens()
}

func (dic DataDiskIopsConfigurationAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(dic.ref.Append("iops"))
}

func (dic DataDiskIopsConfigurationAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(dic.ref.Append("mode"))
}

type DataEndpointsAttributes struct {
	ref terra.Reference
}

func (e DataEndpointsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e DataEndpointsAttributes) InternalWithRef(ref terra.Reference) DataEndpointsAttributes {
	return DataEndpointsAttributes{ref: ref}
}

func (e DataEndpointsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e DataEndpointsAttributes) Intercluster() terra.ListValue[DataEndpointsInterclusterAttributes] {
	return terra.ReferenceAsList[DataEndpointsInterclusterAttributes](e.ref.Append("intercluster"))
}

func (e DataEndpointsAttributes) Management() terra.ListValue[DataEndpointsManagementAttributes] {
	return terra.ReferenceAsList[DataEndpointsManagementAttributes](e.ref.Append("management"))
}

type DataEndpointsInterclusterAttributes struct {
	ref terra.Reference
}

func (i DataEndpointsInterclusterAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataEndpointsInterclusterAttributes) InternalWithRef(ref terra.Reference) DataEndpointsInterclusterAttributes {
	return DataEndpointsInterclusterAttributes{ref: ref}
}

func (i DataEndpointsInterclusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataEndpointsInterclusterAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("dns_name"))
}

func (i DataEndpointsInterclusterAttributes) IpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("ip_addresses"))
}

type DataEndpointsManagementAttributes struct {
	ref terra.Reference
}

func (m DataEndpointsManagementAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m DataEndpointsManagementAttributes) InternalWithRef(ref terra.Reference) DataEndpointsManagementAttributes {
	return DataEndpointsManagementAttributes{ref: ref}
}

func (m DataEndpointsManagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m DataEndpointsManagementAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("dns_name"))
}

func (m DataEndpointsManagementAttributes) IpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](m.ref.Append("ip_addresses"))
}

type DataDiskIopsConfigurationState struct {
	Iops float64 `json:"iops"`
	Mode string  `json:"mode"`
}

type DataEndpointsState struct {
	Intercluster []DataEndpointsInterclusterState `json:"intercluster"`
	Management   []DataEndpointsManagementState   `json:"management"`
}

type DataEndpointsInterclusterState struct {
	DnsName     string   `json:"dns_name"`
	IpAddresses []string `json:"ip_addresses"`
}

type DataEndpointsManagementState struct {
	DnsName     string   `json:"dns_name"`
	IpAddresses []string `json:"ip_addresses"`
}
