// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_ontap_file_system

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_fsx_ontap_file_system.
type Resource struct {
	Name      string
	Args      Args
	state     *awsFsxOntapFileSystemState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (afofs *Resource) Type() string {
	return "aws_fsx_ontap_file_system"
}

// LocalName returns the local name for [Resource].
func (afofs *Resource) LocalName() string {
	return afofs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (afofs *Resource) Configuration() interface{} {
	return afofs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (afofs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(afofs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (afofs *Resource) Dependencies() terra.Dependencies {
	return afofs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (afofs *Resource) LifecycleManagement() *terra.Lifecycle {
	return afofs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (afofs *Resource) Attributes() awsFsxOntapFileSystemAttributes {
	return awsFsxOntapFileSystemAttributes{ref: terra.ReferenceResource(afofs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (afofs *Resource) ImportState(state io.Reader) error {
	afofs.state = &awsFsxOntapFileSystemState{}
	if err := json.NewDecoder(state).Decode(afofs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afofs.Type(), afofs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (afofs *Resource) State() (*awsFsxOntapFileSystemState, bool) {
	return afofs.state, afofs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (afofs *Resource) StateMust() *awsFsxOntapFileSystemState {
	if afofs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afofs.Type(), afofs.LocalName()))
	}
	return afofs.state
}

// Args contains the configurations for aws_fsx_ontap_file_system.
type Args struct {
	// AutomaticBackupRetentionDays: number, optional
	AutomaticBackupRetentionDays terra.NumberValue `hcl:"automatic_backup_retention_days,attr"`
	// DailyAutomaticBackupStartTime: string, optional
	DailyAutomaticBackupStartTime terra.StringValue `hcl:"daily_automatic_backup_start_time,attr"`
	// DeploymentType: string, required
	DeploymentType terra.StringValue `hcl:"deployment_type,attr" validate:"required"`
	// EndpointIpAddressRange: string, optional
	EndpointIpAddressRange terra.StringValue `hcl:"endpoint_ip_address_range,attr"`
	// FsxAdminPassword: string, optional
	FsxAdminPassword terra.StringValue `hcl:"fsx_admin_password,attr"`
	// HaPairs: number, optional
	HaPairs terra.NumberValue `hcl:"ha_pairs,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// PreferredSubnetId: string, required
	PreferredSubnetId terra.StringValue `hcl:"preferred_subnet_id,attr" validate:"required"`
	// RouteTableIds: set of string, optional
	RouteTableIds terra.SetValue[terra.StringValue] `hcl:"route_table_ids,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// StorageCapacity: number, optional
	StorageCapacity terra.NumberValue `hcl:"storage_capacity,attr"`
	// StorageType: string, optional
	StorageType terra.StringValue `hcl:"storage_type,attr"`
	// SubnetIds: list of string, required
	SubnetIds terra.ListValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ThroughputCapacity: number, optional
	ThroughputCapacity terra.NumberValue `hcl:"throughput_capacity,attr"`
	// ThroughputCapacityPerHaPair: number, optional
	ThroughputCapacityPerHaPair terra.NumberValue `hcl:"throughput_capacity_per_ha_pair,attr"`
	// WeeklyMaintenanceStartTime: string, optional
	WeeklyMaintenanceStartTime terra.StringValue `hcl:"weekly_maintenance_start_time,attr"`
	// DiskIopsConfiguration: optional
	DiskIopsConfiguration *DiskIopsConfiguration `hcl:"disk_iops_configuration,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsFsxOntapFileSystemAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(afofs.ref.Append("arn"))
}

// AutomaticBackupRetentionDays returns a reference to field automatic_backup_retention_days of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) AutomaticBackupRetentionDays() terra.NumberValue {
	return terra.ReferenceAsNumber(afofs.ref.Append("automatic_backup_retention_days"))
}

// DailyAutomaticBackupStartTime returns a reference to field daily_automatic_backup_start_time of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) DailyAutomaticBackupStartTime() terra.StringValue {
	return terra.ReferenceAsString(afofs.ref.Append("daily_automatic_backup_start_time"))
}

// DeploymentType returns a reference to field deployment_type of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) DeploymentType() terra.StringValue {
	return terra.ReferenceAsString(afofs.ref.Append("deployment_type"))
}

// DnsName returns a reference to field dns_name of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(afofs.ref.Append("dns_name"))
}

// EndpointIpAddressRange returns a reference to field endpoint_ip_address_range of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) EndpointIpAddressRange() terra.StringValue {
	return terra.ReferenceAsString(afofs.ref.Append("endpoint_ip_address_range"))
}

// FsxAdminPassword returns a reference to field fsx_admin_password of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) FsxAdminPassword() terra.StringValue {
	return terra.ReferenceAsString(afofs.ref.Append("fsx_admin_password"))
}

// HaPairs returns a reference to field ha_pairs of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) HaPairs() terra.NumberValue {
	return terra.ReferenceAsNumber(afofs.ref.Append("ha_pairs"))
}

// Id returns a reference to field id of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(afofs.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(afofs.ref.Append("kms_key_id"))
}

// NetworkInterfaceIds returns a reference to field network_interface_ids of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) NetworkInterfaceIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](afofs.ref.Append("network_interface_ids"))
}

// OwnerId returns a reference to field owner_id of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(afofs.ref.Append("owner_id"))
}

// PreferredSubnetId returns a reference to field preferred_subnet_id of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) PreferredSubnetId() terra.StringValue {
	return terra.ReferenceAsString(afofs.ref.Append("preferred_subnet_id"))
}

// RouteTableIds returns a reference to field route_table_ids of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) RouteTableIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](afofs.ref.Append("route_table_ids"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](afofs.ref.Append("security_group_ids"))
}

// StorageCapacity returns a reference to field storage_capacity of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) StorageCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(afofs.ref.Append("storage_capacity"))
}

// StorageType returns a reference to field storage_type of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) StorageType() terra.StringValue {
	return terra.ReferenceAsString(afofs.ref.Append("storage_type"))
}

// SubnetIds returns a reference to field subnet_ids of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) SubnetIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](afofs.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afofs.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afofs.ref.Append("tags_all"))
}

// ThroughputCapacity returns a reference to field throughput_capacity of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) ThroughputCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(afofs.ref.Append("throughput_capacity"))
}

// ThroughputCapacityPerHaPair returns a reference to field throughput_capacity_per_ha_pair of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) ThroughputCapacityPerHaPair() terra.NumberValue {
	return terra.ReferenceAsNumber(afofs.ref.Append("throughput_capacity_per_ha_pair"))
}

// VpcId returns a reference to field vpc_id of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(afofs.ref.Append("vpc_id"))
}

// WeeklyMaintenanceStartTime returns a reference to field weekly_maintenance_start_time of aws_fsx_ontap_file_system.
func (afofs awsFsxOntapFileSystemAttributes) WeeklyMaintenanceStartTime() terra.StringValue {
	return terra.ReferenceAsString(afofs.ref.Append("weekly_maintenance_start_time"))
}

func (afofs awsFsxOntapFileSystemAttributes) Endpoints() terra.ListValue[EndpointsAttributes] {
	return terra.ReferenceAsList[EndpointsAttributes](afofs.ref.Append("endpoints"))
}

func (afofs awsFsxOntapFileSystemAttributes) DiskIopsConfiguration() terra.ListValue[DiskIopsConfigurationAttributes] {
	return terra.ReferenceAsList[DiskIopsConfigurationAttributes](afofs.ref.Append("disk_iops_configuration"))
}

func (afofs awsFsxOntapFileSystemAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](afofs.ref.Append("timeouts"))
}

type awsFsxOntapFileSystemState struct {
	Arn                           string                       `json:"arn"`
	AutomaticBackupRetentionDays  float64                      `json:"automatic_backup_retention_days"`
	DailyAutomaticBackupStartTime string                       `json:"daily_automatic_backup_start_time"`
	DeploymentType                string                       `json:"deployment_type"`
	DnsName                       string                       `json:"dns_name"`
	EndpointIpAddressRange        string                       `json:"endpoint_ip_address_range"`
	FsxAdminPassword              string                       `json:"fsx_admin_password"`
	HaPairs                       float64                      `json:"ha_pairs"`
	Id                            string                       `json:"id"`
	KmsKeyId                      string                       `json:"kms_key_id"`
	NetworkInterfaceIds           []string                     `json:"network_interface_ids"`
	OwnerId                       string                       `json:"owner_id"`
	PreferredSubnetId             string                       `json:"preferred_subnet_id"`
	RouteTableIds                 []string                     `json:"route_table_ids"`
	SecurityGroupIds              []string                     `json:"security_group_ids"`
	StorageCapacity               float64                      `json:"storage_capacity"`
	StorageType                   string                       `json:"storage_type"`
	SubnetIds                     []string                     `json:"subnet_ids"`
	Tags                          map[string]string            `json:"tags"`
	TagsAll                       map[string]string            `json:"tags_all"`
	ThroughputCapacity            float64                      `json:"throughput_capacity"`
	ThroughputCapacityPerHaPair   float64                      `json:"throughput_capacity_per_ha_pair"`
	VpcId                         string                       `json:"vpc_id"`
	WeeklyMaintenanceStartTime    string                       `json:"weekly_maintenance_start_time"`
	Endpoints                     []EndpointsState             `json:"endpoints"`
	DiskIopsConfiguration         []DiskIopsConfigurationState `json:"disk_iops_configuration"`
	Timeouts                      *TimeoutsState               `json:"timeouts"`
}
