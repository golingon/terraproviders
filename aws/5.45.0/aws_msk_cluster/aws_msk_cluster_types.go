// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_msk_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BrokerNodeGroupInfo struct {
	// AzDistribution: string, optional
	AzDistribution terra.StringValue `hcl:"az_distribution,attr"`
	// ClientSubnets: set of string, required
	ClientSubnets terra.SetValue[terra.StringValue] `hcl:"client_subnets,attr" validate:"required"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// SecurityGroups: set of string, required
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr" validate:"required"`
	// BrokerNodeGroupInfoConnectivityInfo: optional
	ConnectivityInfo *BrokerNodeGroupInfoConnectivityInfo `hcl:"connectivity_info,block"`
	// BrokerNodeGroupInfoStorageInfo: optional
	StorageInfo *BrokerNodeGroupInfoStorageInfo `hcl:"storage_info,block"`
}

type BrokerNodeGroupInfoConnectivityInfo struct {
	// BrokerNodeGroupInfoConnectivityInfoPublicAccess: optional
	PublicAccess *BrokerNodeGroupInfoConnectivityInfoPublicAccess `hcl:"public_access,block"`
	// BrokerNodeGroupInfoConnectivityInfoVpcConnectivity: optional
	VpcConnectivity *BrokerNodeGroupInfoConnectivityInfoVpcConnectivity `hcl:"vpc_connectivity,block"`
}

type BrokerNodeGroupInfoConnectivityInfoPublicAccess struct {
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type BrokerNodeGroupInfoConnectivityInfoVpcConnectivity struct {
	// BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication: optional
	ClientAuthentication *BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication `hcl:"client_authentication,block"`
}

type BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication struct {
	// Tls: bool, optional
	Tls terra.BoolValue `hcl:"tls,attr"`
	// BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3: optional
	Sasl *BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3 `hcl:"sasl,block"`
}

type BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3 struct {
	// Iam: bool, optional
	Iam terra.BoolValue `hcl:"iam,attr"`
	// Scram: bool, optional
	Scram terra.BoolValue `hcl:"scram,attr"`
}

type BrokerNodeGroupInfoStorageInfo struct {
	// BrokerNodeGroupInfoStorageInfoEbsStorageInfo: optional
	EbsStorageInfo *BrokerNodeGroupInfoStorageInfoEbsStorageInfo `hcl:"ebs_storage_info,block"`
}

type BrokerNodeGroupInfoStorageInfoEbsStorageInfo struct {
	// VolumeSize: number, optional
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput: optional
	ProvisionedThroughput *BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput `hcl:"provisioned_throughput,block"`
}

type BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// VolumeThroughput: number, optional
	VolumeThroughput terra.NumberValue `hcl:"volume_throughput,attr"`
}

type ClientAuthentication struct {
	// Unauthenticated: bool, optional
	Unauthenticated terra.BoolValue `hcl:"unauthenticated,attr"`
	// ClientAuthenticationSasl: optional
	Sasl *ClientAuthenticationSasl `hcl:"sasl,block"`
	// ClientAuthenticationTls: optional
	Tls *ClientAuthenticationTls `hcl:"tls,block"`
}

type ClientAuthenticationSasl struct {
	// Iam: bool, optional
	Iam terra.BoolValue `hcl:"iam,attr"`
	// Scram: bool, optional
	Scram terra.BoolValue `hcl:"scram,attr"`
}

type ClientAuthenticationTls struct {
	// CertificateAuthorityArns: set of string, optional
	CertificateAuthorityArns terra.SetValue[terra.StringValue] `hcl:"certificate_authority_arns,attr"`
}

type ConfigurationInfo struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// Revision: number, required
	Revision terra.NumberValue `hcl:"revision,attr" validate:"required"`
}

type EncryptionInfo struct {
	// EncryptionAtRestKmsKeyArn: string, optional
	EncryptionAtRestKmsKeyArn terra.StringValue `hcl:"encryption_at_rest_kms_key_arn,attr"`
	// EncryptionInfoEncryptionInTransit: optional
	EncryptionInTransit *EncryptionInfoEncryptionInTransit `hcl:"encryption_in_transit,block"`
}

type EncryptionInfoEncryptionInTransit struct {
	// ClientBroker: string, optional
	ClientBroker terra.StringValue `hcl:"client_broker,attr"`
	// InCluster: bool, optional
	InCluster terra.BoolValue `hcl:"in_cluster,attr"`
}

type LoggingInfo struct {
	// LoggingInfoBrokerLogs: required
	BrokerLogs *LoggingInfoBrokerLogs `hcl:"broker_logs,block" validate:"required"`
}

type LoggingInfoBrokerLogs struct {
	// LoggingInfoBrokerLogsCloudwatchLogs: optional
	CloudwatchLogs *LoggingInfoBrokerLogsCloudwatchLogs `hcl:"cloudwatch_logs,block"`
	// LoggingInfoBrokerLogsFirehose: optional
	Firehose *LoggingInfoBrokerLogsFirehose `hcl:"firehose,block"`
	// LoggingInfoBrokerLogsS3: optional
	S3 *LoggingInfoBrokerLogsS3 `hcl:"s3,block"`
}

type LoggingInfoBrokerLogsCloudwatchLogs struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// LogGroup: string, optional
	LogGroup terra.StringValue `hcl:"log_group,attr"`
}

type LoggingInfoBrokerLogsFirehose struct {
	// DeliveryStream: string, optional
	DeliveryStream terra.StringValue `hcl:"delivery_stream,attr"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type LoggingInfoBrokerLogsS3 struct {
	// Bucket: string, optional
	Bucket terra.StringValue `hcl:"bucket,attr"`
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type OpenMonitoring struct {
	// OpenMonitoringPrometheus: required
	Prometheus *OpenMonitoringPrometheus `hcl:"prometheus,block" validate:"required"`
}

type OpenMonitoringPrometheus struct {
	// OpenMonitoringPrometheusJmxExporter: optional
	JmxExporter *OpenMonitoringPrometheusJmxExporter `hcl:"jmx_exporter,block"`
	// OpenMonitoringPrometheusNodeExporter: optional
	NodeExporter *OpenMonitoringPrometheusNodeExporter `hcl:"node_exporter,block"`
}

type OpenMonitoringPrometheusJmxExporter struct {
	// EnabledInBroker: bool, required
	EnabledInBroker terra.BoolValue `hcl:"enabled_in_broker,attr" validate:"required"`
}

type OpenMonitoringPrometheusNodeExporter struct {
	// EnabledInBroker: bool, required
	EnabledInBroker terra.BoolValue `hcl:"enabled_in_broker,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type BrokerNodeGroupInfoAttributes struct {
	ref terra.Reference
}

func (bngi BrokerNodeGroupInfoAttributes) InternalRef() (terra.Reference, error) {
	return bngi.ref, nil
}

func (bngi BrokerNodeGroupInfoAttributes) InternalWithRef(ref terra.Reference) BrokerNodeGroupInfoAttributes {
	return BrokerNodeGroupInfoAttributes{ref: ref}
}

func (bngi BrokerNodeGroupInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bngi.ref.InternalTokens()
}

func (bngi BrokerNodeGroupInfoAttributes) AzDistribution() terra.StringValue {
	return terra.ReferenceAsString(bngi.ref.Append("az_distribution"))
}

func (bngi BrokerNodeGroupInfoAttributes) ClientSubnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](bngi.ref.Append("client_subnets"))
}

func (bngi BrokerNodeGroupInfoAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(bngi.ref.Append("instance_type"))
}

func (bngi BrokerNodeGroupInfoAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](bngi.ref.Append("security_groups"))
}

func (bngi BrokerNodeGroupInfoAttributes) ConnectivityInfo() terra.ListValue[BrokerNodeGroupInfoConnectivityInfoAttributes] {
	return terra.ReferenceAsList[BrokerNodeGroupInfoConnectivityInfoAttributes](bngi.ref.Append("connectivity_info"))
}

func (bngi BrokerNodeGroupInfoAttributes) StorageInfo() terra.ListValue[BrokerNodeGroupInfoStorageInfoAttributes] {
	return terra.ReferenceAsList[BrokerNodeGroupInfoStorageInfoAttributes](bngi.ref.Append("storage_info"))
}

type BrokerNodeGroupInfoConnectivityInfoAttributes struct {
	ref terra.Reference
}

func (ci BrokerNodeGroupInfoConnectivityInfoAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci BrokerNodeGroupInfoConnectivityInfoAttributes) InternalWithRef(ref terra.Reference) BrokerNodeGroupInfoConnectivityInfoAttributes {
	return BrokerNodeGroupInfoConnectivityInfoAttributes{ref: ref}
}

func (ci BrokerNodeGroupInfoConnectivityInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci BrokerNodeGroupInfoConnectivityInfoAttributes) PublicAccess() terra.ListValue[BrokerNodeGroupInfoConnectivityInfoPublicAccessAttributes] {
	return terra.ReferenceAsList[BrokerNodeGroupInfoConnectivityInfoPublicAccessAttributes](ci.ref.Append("public_access"))
}

func (ci BrokerNodeGroupInfoConnectivityInfoAttributes) VpcConnectivity() terra.ListValue[BrokerNodeGroupInfoConnectivityInfoVpcConnectivityAttributes] {
	return terra.ReferenceAsList[BrokerNodeGroupInfoConnectivityInfoVpcConnectivityAttributes](ci.ref.Append("vpc_connectivity"))
}

type BrokerNodeGroupInfoConnectivityInfoPublicAccessAttributes struct {
	ref terra.Reference
}

func (pa BrokerNodeGroupInfoConnectivityInfoPublicAccessAttributes) InternalRef() (terra.Reference, error) {
	return pa.ref, nil
}

func (pa BrokerNodeGroupInfoConnectivityInfoPublicAccessAttributes) InternalWithRef(ref terra.Reference) BrokerNodeGroupInfoConnectivityInfoPublicAccessAttributes {
	return BrokerNodeGroupInfoConnectivityInfoPublicAccessAttributes{ref: ref}
}

func (pa BrokerNodeGroupInfoConnectivityInfoPublicAccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pa.ref.InternalTokens()
}

func (pa BrokerNodeGroupInfoConnectivityInfoPublicAccessAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("type"))
}

type BrokerNodeGroupInfoConnectivityInfoVpcConnectivityAttributes struct {
	ref terra.Reference
}

func (vc BrokerNodeGroupInfoConnectivityInfoVpcConnectivityAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc BrokerNodeGroupInfoConnectivityInfoVpcConnectivityAttributes) InternalWithRef(ref terra.Reference) BrokerNodeGroupInfoConnectivityInfoVpcConnectivityAttributes {
	return BrokerNodeGroupInfoConnectivityInfoVpcConnectivityAttributes{ref: ref}
}

func (vc BrokerNodeGroupInfoConnectivityInfoVpcConnectivityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc BrokerNodeGroupInfoConnectivityInfoVpcConnectivityAttributes) ClientAuthentication() terra.ListValue[BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationAttributes] {
	return terra.ReferenceAsList[BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationAttributes](vc.ref.Append("client_authentication"))
}

type BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationAttributes struct {
	ref terra.Reference
}

func (ca BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationAttributes) InternalWithRef(ref terra.Reference) BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationAttributes {
	return BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationAttributes{ref: ref}
}

func (ca BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationAttributes) Tls() terra.BoolValue {
	return terra.ReferenceAsBool(ca.ref.Append("tls"))
}

func (ca BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationAttributes) Sasl() terra.ListValue[BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3Attributes] {
	return terra.ReferenceAsList[BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3Attributes](ca.ref.Append("sasl"))
}

type BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3Attributes struct {
	ref terra.Reference
}

func (s BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3Attributes) InternalWithRef(ref terra.Reference) BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3Attributes {
	return BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3Attributes{ref: ref}
}

func (s BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3Attributes) Iam() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("iam"))
}

func (s BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3Attributes) Scram() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("scram"))
}

type BrokerNodeGroupInfoStorageInfoAttributes struct {
	ref terra.Reference
}

func (si BrokerNodeGroupInfoStorageInfoAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si BrokerNodeGroupInfoStorageInfoAttributes) InternalWithRef(ref terra.Reference) BrokerNodeGroupInfoStorageInfoAttributes {
	return BrokerNodeGroupInfoStorageInfoAttributes{ref: ref}
}

func (si BrokerNodeGroupInfoStorageInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si BrokerNodeGroupInfoStorageInfoAttributes) EbsStorageInfo() terra.ListValue[BrokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes] {
	return terra.ReferenceAsList[BrokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes](si.ref.Append("ebs_storage_info"))
}

type BrokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes struct {
	ref terra.Reference
}

func (esi BrokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes) InternalRef() (terra.Reference, error) {
	return esi.ref, nil
}

func (esi BrokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes) InternalWithRef(ref terra.Reference) BrokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes {
	return BrokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes{ref: ref}
}

func (esi BrokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return esi.ref.InternalTokens()
}

func (esi BrokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(esi.ref.Append("volume_size"))
}

func (esi BrokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes) ProvisionedThroughput() terra.ListValue[BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes] {
	return terra.ReferenceAsList[BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes](esi.ref.Append("provisioned_throughput"))
}

type BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes struct {
	ref terra.Reference
}

func (pt BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes) InternalRef() (terra.Reference, error) {
	return pt.ref, nil
}

func (pt BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes) InternalWithRef(ref terra.Reference) BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes {
	return BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes{ref: ref}
}

func (pt BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pt.ref.InternalTokens()
}

func (pt BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pt.ref.Append("enabled"))
}

func (pt BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes) VolumeThroughput() terra.NumberValue {
	return terra.ReferenceAsNumber(pt.ref.Append("volume_throughput"))
}

type ClientAuthenticationAttributes struct {
	ref terra.Reference
}

func (ca ClientAuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca ClientAuthenticationAttributes) InternalWithRef(ref terra.Reference) ClientAuthenticationAttributes {
	return ClientAuthenticationAttributes{ref: ref}
}

func (ca ClientAuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca ClientAuthenticationAttributes) Unauthenticated() terra.BoolValue {
	return terra.ReferenceAsBool(ca.ref.Append("unauthenticated"))
}

func (ca ClientAuthenticationAttributes) Sasl() terra.ListValue[ClientAuthenticationSaslAttributes] {
	return terra.ReferenceAsList[ClientAuthenticationSaslAttributes](ca.ref.Append("sasl"))
}

func (ca ClientAuthenticationAttributes) Tls() terra.ListValue[ClientAuthenticationTlsAttributes] {
	return terra.ReferenceAsList[ClientAuthenticationTlsAttributes](ca.ref.Append("tls"))
}

type ClientAuthenticationSaslAttributes struct {
	ref terra.Reference
}

func (s ClientAuthenticationSaslAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ClientAuthenticationSaslAttributes) InternalWithRef(ref terra.Reference) ClientAuthenticationSaslAttributes {
	return ClientAuthenticationSaslAttributes{ref: ref}
}

func (s ClientAuthenticationSaslAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ClientAuthenticationSaslAttributes) Iam() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("iam"))
}

func (s ClientAuthenticationSaslAttributes) Scram() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("scram"))
}

type ClientAuthenticationTlsAttributes struct {
	ref terra.Reference
}

func (t ClientAuthenticationTlsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ClientAuthenticationTlsAttributes) InternalWithRef(ref terra.Reference) ClientAuthenticationTlsAttributes {
	return ClientAuthenticationTlsAttributes{ref: ref}
}

func (t ClientAuthenticationTlsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ClientAuthenticationTlsAttributes) CertificateAuthorityArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("certificate_authority_arns"))
}

type ConfigurationInfoAttributes struct {
	ref terra.Reference
}

func (ci ConfigurationInfoAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci ConfigurationInfoAttributes) InternalWithRef(ref terra.Reference) ConfigurationInfoAttributes {
	return ConfigurationInfoAttributes{ref: ref}
}

func (ci ConfigurationInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci ConfigurationInfoAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("arn"))
}

func (ci ConfigurationInfoAttributes) Revision() terra.NumberValue {
	return terra.ReferenceAsNumber(ci.ref.Append("revision"))
}

type EncryptionInfoAttributes struct {
	ref terra.Reference
}

func (ei EncryptionInfoAttributes) InternalRef() (terra.Reference, error) {
	return ei.ref, nil
}

func (ei EncryptionInfoAttributes) InternalWithRef(ref terra.Reference) EncryptionInfoAttributes {
	return EncryptionInfoAttributes{ref: ref}
}

func (ei EncryptionInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ei.ref.InternalTokens()
}

func (ei EncryptionInfoAttributes) EncryptionAtRestKmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("encryption_at_rest_kms_key_arn"))
}

func (ei EncryptionInfoAttributes) EncryptionInTransit() terra.ListValue[EncryptionInfoEncryptionInTransitAttributes] {
	return terra.ReferenceAsList[EncryptionInfoEncryptionInTransitAttributes](ei.ref.Append("encryption_in_transit"))
}

type EncryptionInfoEncryptionInTransitAttributes struct {
	ref terra.Reference
}

func (eit EncryptionInfoEncryptionInTransitAttributes) InternalRef() (terra.Reference, error) {
	return eit.ref, nil
}

func (eit EncryptionInfoEncryptionInTransitAttributes) InternalWithRef(ref terra.Reference) EncryptionInfoEncryptionInTransitAttributes {
	return EncryptionInfoEncryptionInTransitAttributes{ref: ref}
}

func (eit EncryptionInfoEncryptionInTransitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eit.ref.InternalTokens()
}

func (eit EncryptionInfoEncryptionInTransitAttributes) ClientBroker() terra.StringValue {
	return terra.ReferenceAsString(eit.ref.Append("client_broker"))
}

func (eit EncryptionInfoEncryptionInTransitAttributes) InCluster() terra.BoolValue {
	return terra.ReferenceAsBool(eit.ref.Append("in_cluster"))
}

type LoggingInfoAttributes struct {
	ref terra.Reference
}

func (li LoggingInfoAttributes) InternalRef() (terra.Reference, error) {
	return li.ref, nil
}

func (li LoggingInfoAttributes) InternalWithRef(ref terra.Reference) LoggingInfoAttributes {
	return LoggingInfoAttributes{ref: ref}
}

func (li LoggingInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return li.ref.InternalTokens()
}

func (li LoggingInfoAttributes) BrokerLogs() terra.ListValue[LoggingInfoBrokerLogsAttributes] {
	return terra.ReferenceAsList[LoggingInfoBrokerLogsAttributes](li.ref.Append("broker_logs"))
}

type LoggingInfoBrokerLogsAttributes struct {
	ref terra.Reference
}

func (bl LoggingInfoBrokerLogsAttributes) InternalRef() (terra.Reference, error) {
	return bl.ref, nil
}

func (bl LoggingInfoBrokerLogsAttributes) InternalWithRef(ref terra.Reference) LoggingInfoBrokerLogsAttributes {
	return LoggingInfoBrokerLogsAttributes{ref: ref}
}

func (bl LoggingInfoBrokerLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bl.ref.InternalTokens()
}

func (bl LoggingInfoBrokerLogsAttributes) CloudwatchLogs() terra.ListValue[LoggingInfoBrokerLogsCloudwatchLogsAttributes] {
	return terra.ReferenceAsList[LoggingInfoBrokerLogsCloudwatchLogsAttributes](bl.ref.Append("cloudwatch_logs"))
}

func (bl LoggingInfoBrokerLogsAttributes) Firehose() terra.ListValue[LoggingInfoBrokerLogsFirehoseAttributes] {
	return terra.ReferenceAsList[LoggingInfoBrokerLogsFirehoseAttributes](bl.ref.Append("firehose"))
}

func (bl LoggingInfoBrokerLogsAttributes) S3() terra.ListValue[LoggingInfoBrokerLogsS3Attributes] {
	return terra.ReferenceAsList[LoggingInfoBrokerLogsS3Attributes](bl.ref.Append("s3"))
}

type LoggingInfoBrokerLogsCloudwatchLogsAttributes struct {
	ref terra.Reference
}

func (cl LoggingInfoBrokerLogsCloudwatchLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl LoggingInfoBrokerLogsCloudwatchLogsAttributes) InternalWithRef(ref terra.Reference) LoggingInfoBrokerLogsCloudwatchLogsAttributes {
	return LoggingInfoBrokerLogsCloudwatchLogsAttributes{ref: ref}
}

func (cl LoggingInfoBrokerLogsCloudwatchLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl LoggingInfoBrokerLogsCloudwatchLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cl.ref.Append("enabled"))
}

func (cl LoggingInfoBrokerLogsCloudwatchLogsAttributes) LogGroup() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("log_group"))
}

type LoggingInfoBrokerLogsFirehoseAttributes struct {
	ref terra.Reference
}

func (f LoggingInfoBrokerLogsFirehoseAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f LoggingInfoBrokerLogsFirehoseAttributes) InternalWithRef(ref terra.Reference) LoggingInfoBrokerLogsFirehoseAttributes {
	return LoggingInfoBrokerLogsFirehoseAttributes{ref: ref}
}

func (f LoggingInfoBrokerLogsFirehoseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f LoggingInfoBrokerLogsFirehoseAttributes) DeliveryStream() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("delivery_stream"))
}

func (f LoggingInfoBrokerLogsFirehoseAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("enabled"))
}

type LoggingInfoBrokerLogsS3Attributes struct {
	ref terra.Reference
}

func (s LoggingInfoBrokerLogsS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s LoggingInfoBrokerLogsS3Attributes) InternalWithRef(ref terra.Reference) LoggingInfoBrokerLogsS3Attributes {
	return LoggingInfoBrokerLogsS3Attributes{ref: ref}
}

func (s LoggingInfoBrokerLogsS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s LoggingInfoBrokerLogsS3Attributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket"))
}

func (s LoggingInfoBrokerLogsS3Attributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("enabled"))
}

func (s LoggingInfoBrokerLogsS3Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("prefix"))
}

type OpenMonitoringAttributes struct {
	ref terra.Reference
}

func (om OpenMonitoringAttributes) InternalRef() (terra.Reference, error) {
	return om.ref, nil
}

func (om OpenMonitoringAttributes) InternalWithRef(ref terra.Reference) OpenMonitoringAttributes {
	return OpenMonitoringAttributes{ref: ref}
}

func (om OpenMonitoringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return om.ref.InternalTokens()
}

func (om OpenMonitoringAttributes) Prometheus() terra.ListValue[OpenMonitoringPrometheusAttributes] {
	return terra.ReferenceAsList[OpenMonitoringPrometheusAttributes](om.ref.Append("prometheus"))
}

type OpenMonitoringPrometheusAttributes struct {
	ref terra.Reference
}

func (p OpenMonitoringPrometheusAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p OpenMonitoringPrometheusAttributes) InternalWithRef(ref terra.Reference) OpenMonitoringPrometheusAttributes {
	return OpenMonitoringPrometheusAttributes{ref: ref}
}

func (p OpenMonitoringPrometheusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p OpenMonitoringPrometheusAttributes) JmxExporter() terra.ListValue[OpenMonitoringPrometheusJmxExporterAttributes] {
	return terra.ReferenceAsList[OpenMonitoringPrometheusJmxExporterAttributes](p.ref.Append("jmx_exporter"))
}

func (p OpenMonitoringPrometheusAttributes) NodeExporter() terra.ListValue[OpenMonitoringPrometheusNodeExporterAttributes] {
	return terra.ReferenceAsList[OpenMonitoringPrometheusNodeExporterAttributes](p.ref.Append("node_exporter"))
}

type OpenMonitoringPrometheusJmxExporterAttributes struct {
	ref terra.Reference
}

func (je OpenMonitoringPrometheusJmxExporterAttributes) InternalRef() (terra.Reference, error) {
	return je.ref, nil
}

func (je OpenMonitoringPrometheusJmxExporterAttributes) InternalWithRef(ref terra.Reference) OpenMonitoringPrometheusJmxExporterAttributes {
	return OpenMonitoringPrometheusJmxExporterAttributes{ref: ref}
}

func (je OpenMonitoringPrometheusJmxExporterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return je.ref.InternalTokens()
}

func (je OpenMonitoringPrometheusJmxExporterAttributes) EnabledInBroker() terra.BoolValue {
	return terra.ReferenceAsBool(je.ref.Append("enabled_in_broker"))
}

type OpenMonitoringPrometheusNodeExporterAttributes struct {
	ref terra.Reference
}

func (ne OpenMonitoringPrometheusNodeExporterAttributes) InternalRef() (terra.Reference, error) {
	return ne.ref, nil
}

func (ne OpenMonitoringPrometheusNodeExporterAttributes) InternalWithRef(ref terra.Reference) OpenMonitoringPrometheusNodeExporterAttributes {
	return OpenMonitoringPrometheusNodeExporterAttributes{ref: ref}
}

func (ne OpenMonitoringPrometheusNodeExporterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ne.ref.InternalTokens()
}

func (ne OpenMonitoringPrometheusNodeExporterAttributes) EnabledInBroker() terra.BoolValue {
	return terra.ReferenceAsBool(ne.ref.Append("enabled_in_broker"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BrokerNodeGroupInfoState struct {
	AzDistribution   string                                     `json:"az_distribution"`
	ClientSubnets    []string                                   `json:"client_subnets"`
	InstanceType     string                                     `json:"instance_type"`
	SecurityGroups   []string                                   `json:"security_groups"`
	ConnectivityInfo []BrokerNodeGroupInfoConnectivityInfoState `json:"connectivity_info"`
	StorageInfo      []BrokerNodeGroupInfoStorageInfoState      `json:"storage_info"`
}

type BrokerNodeGroupInfoConnectivityInfoState struct {
	PublicAccess    []BrokerNodeGroupInfoConnectivityInfoPublicAccessState    `json:"public_access"`
	VpcConnectivity []BrokerNodeGroupInfoConnectivityInfoVpcConnectivityState `json:"vpc_connectivity"`
}

type BrokerNodeGroupInfoConnectivityInfoPublicAccessState struct {
	Type string `json:"type"`
}

type BrokerNodeGroupInfoConnectivityInfoVpcConnectivityState struct {
	ClientAuthentication []BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationState `json:"client_authentication"`
}

type BrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationState struct {
	Tls  bool                                               `json:"tls"`
	Sasl []BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3State `json:"sasl"`
}

type BrokerNodeGroupInfoConnectivityInfo39Eb9Eb3State struct {
	Iam   bool `json:"iam"`
	Scram bool `json:"scram"`
}

type BrokerNodeGroupInfoStorageInfoState struct {
	EbsStorageInfo []BrokerNodeGroupInfoStorageInfoEbsStorageInfoState `json:"ebs_storage_info"`
}

type BrokerNodeGroupInfoStorageInfoEbsStorageInfoState struct {
	VolumeSize            float64                                                                  `json:"volume_size"`
	ProvisionedThroughput []BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputState `json:"provisioned_throughput"`
}

type BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputState struct {
	Enabled          bool    `json:"enabled"`
	VolumeThroughput float64 `json:"volume_throughput"`
}

type ClientAuthenticationState struct {
	Unauthenticated bool                            `json:"unauthenticated"`
	Sasl            []ClientAuthenticationSaslState `json:"sasl"`
	Tls             []ClientAuthenticationTlsState  `json:"tls"`
}

type ClientAuthenticationSaslState struct {
	Iam   bool `json:"iam"`
	Scram bool `json:"scram"`
}

type ClientAuthenticationTlsState struct {
	CertificateAuthorityArns []string `json:"certificate_authority_arns"`
}

type ConfigurationInfoState struct {
	Arn      string  `json:"arn"`
	Revision float64 `json:"revision"`
}

type EncryptionInfoState struct {
	EncryptionAtRestKmsKeyArn string                                   `json:"encryption_at_rest_kms_key_arn"`
	EncryptionInTransit       []EncryptionInfoEncryptionInTransitState `json:"encryption_in_transit"`
}

type EncryptionInfoEncryptionInTransitState struct {
	ClientBroker string `json:"client_broker"`
	InCluster    bool   `json:"in_cluster"`
}

type LoggingInfoState struct {
	BrokerLogs []LoggingInfoBrokerLogsState `json:"broker_logs"`
}

type LoggingInfoBrokerLogsState struct {
	CloudwatchLogs []LoggingInfoBrokerLogsCloudwatchLogsState `json:"cloudwatch_logs"`
	Firehose       []LoggingInfoBrokerLogsFirehoseState       `json:"firehose"`
	S3             []LoggingInfoBrokerLogsS3State             `json:"s3"`
}

type LoggingInfoBrokerLogsCloudwatchLogsState struct {
	Enabled  bool   `json:"enabled"`
	LogGroup string `json:"log_group"`
}

type LoggingInfoBrokerLogsFirehoseState struct {
	DeliveryStream string `json:"delivery_stream"`
	Enabled        bool   `json:"enabled"`
}

type LoggingInfoBrokerLogsS3State struct {
	Bucket  string `json:"bucket"`
	Enabled bool   `json:"enabled"`
	Prefix  string `json:"prefix"`
}

type OpenMonitoringState struct {
	Prometheus []OpenMonitoringPrometheusState `json:"prometheus"`
}

type OpenMonitoringPrometheusState struct {
	JmxExporter  []OpenMonitoringPrometheusJmxExporterState  `json:"jmx_exporter"`
	NodeExporter []OpenMonitoringPrometheusNodeExporterState `json:"node_exporter"`
}

type OpenMonitoringPrometheusJmxExporterState struct {
	EnabledInBroker bool `json:"enabled_in_broker"`
}

type OpenMonitoringPrometheusNodeExporterState struct {
	EnabledInBroker bool `json:"enabled_in_broker"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
