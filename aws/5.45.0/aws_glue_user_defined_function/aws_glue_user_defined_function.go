// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_user_defined_function

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glue_user_defined_function.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlueUserDefinedFunctionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agudf *Resource) Type() string {
	return "aws_glue_user_defined_function"
}

// LocalName returns the local name for [Resource].
func (agudf *Resource) LocalName() string {
	return agudf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agudf *Resource) Configuration() interface{} {
	return agudf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agudf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agudf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agudf *Resource) Dependencies() terra.Dependencies {
	return agudf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agudf *Resource) LifecycleManagement() *terra.Lifecycle {
	return agudf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agudf *Resource) Attributes() awsGlueUserDefinedFunctionAttributes {
	return awsGlueUserDefinedFunctionAttributes{ref: terra.ReferenceResource(agudf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agudf *Resource) ImportState(state io.Reader) error {
	agudf.state = &awsGlueUserDefinedFunctionState{}
	if err := json.NewDecoder(state).Decode(agudf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agudf.Type(), agudf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agudf *Resource) State() (*awsGlueUserDefinedFunctionState, bool) {
	return agudf.state, agudf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agudf *Resource) StateMust() *awsGlueUserDefinedFunctionState {
	if agudf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agudf.Type(), agudf.LocalName()))
	}
	return agudf.state
}

// Args contains the configurations for aws_glue_user_defined_function.
type Args struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// ClassName: string, required
	ClassName terra.StringValue `hcl:"class_name,attr" validate:"required"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OwnerName: string, required
	OwnerName terra.StringValue `hcl:"owner_name,attr" validate:"required"`
	// OwnerType: string, required
	OwnerType terra.StringValue `hcl:"owner_type,attr" validate:"required"`
	// ResourceUris: min=0,max=1000
	ResourceUris []ResourceUris `hcl:"resource_uris,block" validate:"min=0,max=1000"`
}

type awsGlueUserDefinedFunctionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_glue_user_defined_function.
func (agudf awsGlueUserDefinedFunctionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agudf.ref.Append("arn"))
}

// CatalogId returns a reference to field catalog_id of aws_glue_user_defined_function.
func (agudf awsGlueUserDefinedFunctionAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(agudf.ref.Append("catalog_id"))
}

// ClassName returns a reference to field class_name of aws_glue_user_defined_function.
func (agudf awsGlueUserDefinedFunctionAttributes) ClassName() terra.StringValue {
	return terra.ReferenceAsString(agudf.ref.Append("class_name"))
}

// CreateTime returns a reference to field create_time of aws_glue_user_defined_function.
func (agudf awsGlueUserDefinedFunctionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(agudf.ref.Append("create_time"))
}

// DatabaseName returns a reference to field database_name of aws_glue_user_defined_function.
func (agudf awsGlueUserDefinedFunctionAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(agudf.ref.Append("database_name"))
}

// Id returns a reference to field id of aws_glue_user_defined_function.
func (agudf awsGlueUserDefinedFunctionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agudf.ref.Append("id"))
}

// Name returns a reference to field name of aws_glue_user_defined_function.
func (agudf awsGlueUserDefinedFunctionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agudf.ref.Append("name"))
}

// OwnerName returns a reference to field owner_name of aws_glue_user_defined_function.
func (agudf awsGlueUserDefinedFunctionAttributes) OwnerName() terra.StringValue {
	return terra.ReferenceAsString(agudf.ref.Append("owner_name"))
}

// OwnerType returns a reference to field owner_type of aws_glue_user_defined_function.
func (agudf awsGlueUserDefinedFunctionAttributes) OwnerType() terra.StringValue {
	return terra.ReferenceAsString(agudf.ref.Append("owner_type"))
}

func (agudf awsGlueUserDefinedFunctionAttributes) ResourceUris() terra.SetValue[ResourceUrisAttributes] {
	return terra.ReferenceAsSet[ResourceUrisAttributes](agudf.ref.Append("resource_uris"))
}

type awsGlueUserDefinedFunctionState struct {
	Arn          string              `json:"arn"`
	CatalogId    string              `json:"catalog_id"`
	ClassName    string              `json:"class_name"`
	CreateTime   string              `json:"create_time"`
	DatabaseName string              `json:"database_name"`
	Id           string              `json:"id"`
	Name         string              `json:"name"`
	OwnerName    string              `json:"owner_name"`
	OwnerType    string              `json:"owner_type"`
	ResourceUris []ResourceUrisState `json:"resource_uris"`
}
