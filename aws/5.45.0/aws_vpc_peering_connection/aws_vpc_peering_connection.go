// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_peering_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpc_peering_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpcPeeringConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avpc *Resource) Type() string {
	return "aws_vpc_peering_connection"
}

// LocalName returns the local name for [Resource].
func (avpc *Resource) LocalName() string {
	return avpc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avpc *Resource) Configuration() interface{} {
	return avpc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avpc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avpc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avpc *Resource) Dependencies() terra.Dependencies {
	return avpc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avpc *Resource) LifecycleManagement() *terra.Lifecycle {
	return avpc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avpc *Resource) Attributes() awsVpcPeeringConnectionAttributes {
	return awsVpcPeeringConnectionAttributes{ref: terra.ReferenceResource(avpc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avpc *Resource) ImportState(state io.Reader) error {
	avpc.state = &awsVpcPeeringConnectionState{}
	if err := json.NewDecoder(state).Decode(avpc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avpc.Type(), avpc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avpc *Resource) State() (*awsVpcPeeringConnectionState, bool) {
	return avpc.state, avpc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avpc *Resource) StateMust() *awsVpcPeeringConnectionState {
	if avpc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avpc.Type(), avpc.LocalName()))
	}
	return avpc.state
}

// Args contains the configurations for aws_vpc_peering_connection.
type Args struct {
	// AutoAccept: bool, optional
	AutoAccept terra.BoolValue `hcl:"auto_accept,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PeerOwnerId: string, optional
	PeerOwnerId terra.StringValue `hcl:"peer_owner_id,attr"`
	// PeerRegion: string, optional
	PeerRegion terra.StringValue `hcl:"peer_region,attr"`
	// PeerVpcId: string, required
	PeerVpcId terra.StringValue `hcl:"peer_vpc_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// Accepter: optional
	Accepter *Accepter `hcl:"accepter,block"`
	// Requester: optional
	Requester *Requester `hcl:"requester,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVpcPeeringConnectionAttributes struct {
	ref terra.Reference
}

// AcceptStatus returns a reference to field accept_status of aws_vpc_peering_connection.
func (avpc awsVpcPeeringConnectionAttributes) AcceptStatus() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("accept_status"))
}

// AutoAccept returns a reference to field auto_accept of aws_vpc_peering_connection.
func (avpc awsVpcPeeringConnectionAttributes) AutoAccept() terra.BoolValue {
	return terra.ReferenceAsBool(avpc.ref.Append("auto_accept"))
}

// Id returns a reference to field id of aws_vpc_peering_connection.
func (avpc awsVpcPeeringConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("id"))
}

// PeerOwnerId returns a reference to field peer_owner_id of aws_vpc_peering_connection.
func (avpc awsVpcPeeringConnectionAttributes) PeerOwnerId() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("peer_owner_id"))
}

// PeerRegion returns a reference to field peer_region of aws_vpc_peering_connection.
func (avpc awsVpcPeeringConnectionAttributes) PeerRegion() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("peer_region"))
}

// PeerVpcId returns a reference to field peer_vpc_id of aws_vpc_peering_connection.
func (avpc awsVpcPeeringConnectionAttributes) PeerVpcId() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("peer_vpc_id"))
}

// Tags returns a reference to field tags of aws_vpc_peering_connection.
func (avpc awsVpcPeeringConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avpc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpc_peering_connection.
func (avpc awsVpcPeeringConnectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avpc.ref.Append("tags_all"))
}

// VpcId returns a reference to field vpc_id of aws_vpc_peering_connection.
func (avpc awsVpcPeeringConnectionAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("vpc_id"))
}

func (avpc awsVpcPeeringConnectionAttributes) Accepter() terra.ListValue[AccepterAttributes] {
	return terra.ReferenceAsList[AccepterAttributes](avpc.ref.Append("accepter"))
}

func (avpc awsVpcPeeringConnectionAttributes) Requester() terra.ListValue[RequesterAttributes] {
	return terra.ReferenceAsList[RequesterAttributes](avpc.ref.Append("requester"))
}

func (avpc awsVpcPeeringConnectionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avpc.ref.Append("timeouts"))
}

type awsVpcPeeringConnectionState struct {
	AcceptStatus string            `json:"accept_status"`
	AutoAccept   bool              `json:"auto_accept"`
	Id           string            `json:"id"`
	PeerOwnerId  string            `json:"peer_owner_id"`
	PeerRegion   string            `json:"peer_region"`
	PeerVpcId    string            `json:"peer_vpc_id"`
	Tags         map[string]string `json:"tags"`
	TagsAll      map[string]string `json:"tags_all"`
	VpcId        string            `json:"vpc_id"`
	Accepter     []AccepterState   `json:"accepter"`
	Requester    []RequesterState  `json:"requester"`
	Timeouts     *TimeoutsState    `json:"timeouts"`
}
