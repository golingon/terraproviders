// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_peering_connection

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_vpc_peering_connection.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (avpc *DataSource) DataSource() string {
	return "aws_vpc_peering_connection"
}

// LocalName returns the local name for [DataSource].
func (avpc *DataSource) LocalName() string {
	return avpc.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (avpc *DataSource) Configuration() interface{} {
	return avpc.Args
}

// Attributes returns the attributes for [DataSource].
func (avpc *DataSource) Attributes() dataAwsVpcPeeringConnectionAttributes {
	return dataAwsVpcPeeringConnectionAttributes{ref: terra.ReferenceDataSource(avpc)}
}

// DataArgs contains the configurations for aws_vpc_peering_connection.
type DataArgs struct {
	// CidrBlock: string, optional
	CidrBlock terra.StringValue `hcl:"cidr_block,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OwnerId: string, optional
	OwnerId terra.StringValue `hcl:"owner_id,attr"`
	// PeerCidrBlock: string, optional
	PeerCidrBlock terra.StringValue `hcl:"peer_cidr_block,attr"`
	// PeerOwnerId: string, optional
	PeerOwnerId terra.StringValue `hcl:"peer_owner_id,attr"`
	// PeerRegion: string, optional
	PeerRegion terra.StringValue `hcl:"peer_region,attr"`
	// PeerVpcId: string, optional
	PeerVpcId terra.StringValue `hcl:"peer_vpc_id,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VpcId: string, optional
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// Filter: min=0
	Filter []DataFilter `hcl:"filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *DataTimeouts `hcl:"timeouts,block"`
}

type dataAwsVpcPeeringConnectionAttributes struct {
	ref terra.Reference
}

// Accepter returns a reference to field accepter of aws_vpc_peering_connection.
func (avpc dataAwsVpcPeeringConnectionAttributes) Accepter() terra.MapValue[terra.BoolValue] {
	return terra.ReferenceAsMap[terra.BoolValue](avpc.ref.Append("accepter"))
}

// CidrBlock returns a reference to field cidr_block of aws_vpc_peering_connection.
func (avpc dataAwsVpcPeeringConnectionAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("cidr_block"))
}

// Id returns a reference to field id of aws_vpc_peering_connection.
func (avpc dataAwsVpcPeeringConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("id"))
}

// OwnerId returns a reference to field owner_id of aws_vpc_peering_connection.
func (avpc dataAwsVpcPeeringConnectionAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("owner_id"))
}

// PeerCidrBlock returns a reference to field peer_cidr_block of aws_vpc_peering_connection.
func (avpc dataAwsVpcPeeringConnectionAttributes) PeerCidrBlock() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("peer_cidr_block"))
}

// PeerOwnerId returns a reference to field peer_owner_id of aws_vpc_peering_connection.
func (avpc dataAwsVpcPeeringConnectionAttributes) PeerOwnerId() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("peer_owner_id"))
}

// PeerRegion returns a reference to field peer_region of aws_vpc_peering_connection.
func (avpc dataAwsVpcPeeringConnectionAttributes) PeerRegion() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("peer_region"))
}

// PeerVpcId returns a reference to field peer_vpc_id of aws_vpc_peering_connection.
func (avpc dataAwsVpcPeeringConnectionAttributes) PeerVpcId() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("peer_vpc_id"))
}

// Region returns a reference to field region of aws_vpc_peering_connection.
func (avpc dataAwsVpcPeeringConnectionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("region"))
}

// Requester returns a reference to field requester of aws_vpc_peering_connection.
func (avpc dataAwsVpcPeeringConnectionAttributes) Requester() terra.MapValue[terra.BoolValue] {
	return terra.ReferenceAsMap[terra.BoolValue](avpc.ref.Append("requester"))
}

// Status returns a reference to field status of aws_vpc_peering_connection.
func (avpc dataAwsVpcPeeringConnectionAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_vpc_peering_connection.
func (avpc dataAwsVpcPeeringConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avpc.ref.Append("tags"))
}

// VpcId returns a reference to field vpc_id of aws_vpc_peering_connection.
func (avpc dataAwsVpcPeeringConnectionAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(avpc.ref.Append("vpc_id"))
}

func (avpc dataAwsVpcPeeringConnectionAttributes) CidrBlockSet() terra.ListValue[DataCidrBlockSetAttributes] {
	return terra.ReferenceAsList[DataCidrBlockSetAttributes](avpc.ref.Append("cidr_block_set"))
}

func (avpc dataAwsVpcPeeringConnectionAttributes) Ipv6CidrBlockSet() terra.ListValue[DataIpv6CidrBlockSetAttributes] {
	return terra.ReferenceAsList[DataIpv6CidrBlockSetAttributes](avpc.ref.Append("ipv6_cidr_block_set"))
}

func (avpc dataAwsVpcPeeringConnectionAttributes) PeerCidrBlockSet() terra.ListValue[DataPeerCidrBlockSetAttributes] {
	return terra.ReferenceAsList[DataPeerCidrBlockSetAttributes](avpc.ref.Append("peer_cidr_block_set"))
}

func (avpc dataAwsVpcPeeringConnectionAttributes) PeerIpv6CidrBlockSet() terra.ListValue[DataPeerIpv6CidrBlockSetAttributes] {
	return terra.ReferenceAsList[DataPeerIpv6CidrBlockSetAttributes](avpc.ref.Append("peer_ipv6_cidr_block_set"))
}

func (avpc dataAwsVpcPeeringConnectionAttributes) Filter() terra.SetValue[DataFilterAttributes] {
	return terra.ReferenceAsSet[DataFilterAttributes](avpc.ref.Append("filter"))
}

func (avpc dataAwsVpcPeeringConnectionAttributes) Timeouts() DataTimeoutsAttributes {
	return terra.ReferenceAsSingle[DataTimeoutsAttributes](avpc.ref.Append("timeouts"))
}
