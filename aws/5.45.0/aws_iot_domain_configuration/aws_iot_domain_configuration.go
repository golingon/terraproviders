// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iot_domain_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iot_domain_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIotDomainConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aidc *Resource) Type() string {
	return "aws_iot_domain_configuration"
}

// LocalName returns the local name for [Resource].
func (aidc *Resource) LocalName() string {
	return aidc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aidc *Resource) Configuration() interface{} {
	return aidc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aidc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aidc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aidc *Resource) Dependencies() terra.Dependencies {
	return aidc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aidc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aidc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aidc *Resource) Attributes() awsIotDomainConfigurationAttributes {
	return awsIotDomainConfigurationAttributes{ref: terra.ReferenceResource(aidc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aidc *Resource) ImportState(state io.Reader) error {
	aidc.state = &awsIotDomainConfigurationState{}
	if err := json.NewDecoder(state).Decode(aidc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aidc.Type(), aidc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aidc *Resource) State() (*awsIotDomainConfigurationState, bool) {
	return aidc.state, aidc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aidc *Resource) StateMust() *awsIotDomainConfigurationState {
	if aidc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aidc.Type(), aidc.LocalName()))
	}
	return aidc.state
}

// Args contains the configurations for aws_iot_domain_configuration.
type Args struct {
	// DomainName: string, optional
	DomainName terra.StringValue `hcl:"domain_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServerCertificateArns: set of string, optional
	ServerCertificateArns terra.SetValue[terra.StringValue] `hcl:"server_certificate_arns,attr"`
	// ServiceType: string, optional
	ServiceType terra.StringValue `hcl:"service_type,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ValidationCertificateArn: string, optional
	ValidationCertificateArn terra.StringValue `hcl:"validation_certificate_arn,attr"`
	// AuthorizerConfig: optional
	AuthorizerConfig *AuthorizerConfig `hcl:"authorizer_config,block"`
	// TlsConfig: optional
	TlsConfig *TlsConfig `hcl:"tls_config,block"`
}

type awsIotDomainConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iot_domain_configuration.
func (aidc awsIotDomainConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("arn"))
}

// DomainName returns a reference to field domain_name of aws_iot_domain_configuration.
func (aidc awsIotDomainConfigurationAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("domain_name"))
}

// DomainType returns a reference to field domain_type of aws_iot_domain_configuration.
func (aidc awsIotDomainConfigurationAttributes) DomainType() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("domain_type"))
}

// Id returns a reference to field id of aws_iot_domain_configuration.
func (aidc awsIotDomainConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("id"))
}

// Name returns a reference to field name of aws_iot_domain_configuration.
func (aidc awsIotDomainConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("name"))
}

// ServerCertificateArns returns a reference to field server_certificate_arns of aws_iot_domain_configuration.
func (aidc awsIotDomainConfigurationAttributes) ServerCertificateArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aidc.ref.Append("server_certificate_arns"))
}

// ServiceType returns a reference to field service_type of aws_iot_domain_configuration.
func (aidc awsIotDomainConfigurationAttributes) ServiceType() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("service_type"))
}

// Status returns a reference to field status of aws_iot_domain_configuration.
func (aidc awsIotDomainConfigurationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_iot_domain_configuration.
func (aidc awsIotDomainConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aidc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_iot_domain_configuration.
func (aidc awsIotDomainConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aidc.ref.Append("tags_all"))
}

// ValidationCertificateArn returns a reference to field validation_certificate_arn of aws_iot_domain_configuration.
func (aidc awsIotDomainConfigurationAttributes) ValidationCertificateArn() terra.StringValue {
	return terra.ReferenceAsString(aidc.ref.Append("validation_certificate_arn"))
}

func (aidc awsIotDomainConfigurationAttributes) AuthorizerConfig() terra.ListValue[AuthorizerConfigAttributes] {
	return terra.ReferenceAsList[AuthorizerConfigAttributes](aidc.ref.Append("authorizer_config"))
}

func (aidc awsIotDomainConfigurationAttributes) TlsConfig() terra.ListValue[TlsConfigAttributes] {
	return terra.ReferenceAsList[TlsConfigAttributes](aidc.ref.Append("tls_config"))
}

type awsIotDomainConfigurationState struct {
	Arn                      string                  `json:"arn"`
	DomainName               string                  `json:"domain_name"`
	DomainType               string                  `json:"domain_type"`
	Id                       string                  `json:"id"`
	Name                     string                  `json:"name"`
	ServerCertificateArns    []string                `json:"server_certificate_arns"`
	ServiceType              string                  `json:"service_type"`
	Status                   string                  `json:"status"`
	Tags                     map[string]string       `json:"tags"`
	TagsAll                  map[string]string       `json:"tags_all"`
	ValidationCertificateArn string                  `json:"validation_certificate_arn"`
	AuthorizerConfig         []AuthorizerConfigState `json:"authorizer_config"`
	TlsConfig                []TlsConfigState        `json:"tls_config"`
}
