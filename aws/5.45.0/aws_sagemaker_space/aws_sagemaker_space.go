// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_space

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sagemaker_space.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSagemakerSpaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ass *Resource) Type() string {
	return "aws_sagemaker_space"
}

// LocalName returns the local name for [Resource].
func (ass *Resource) LocalName() string {
	return ass.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ass *Resource) Configuration() interface{} {
	return ass.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ass *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ass)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ass *Resource) Dependencies() terra.Dependencies {
	return ass.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ass *Resource) LifecycleManagement() *terra.Lifecycle {
	return ass.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ass *Resource) Attributes() awsSagemakerSpaceAttributes {
	return awsSagemakerSpaceAttributes{ref: terra.ReferenceResource(ass)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ass *Resource) ImportState(state io.Reader) error {
	ass.state = &awsSagemakerSpaceState{}
	if err := json.NewDecoder(state).Decode(ass.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ass.Type(), ass.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ass *Resource) State() (*awsSagemakerSpaceState, bool) {
	return ass.state, ass.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ass *Resource) StateMust() *awsSagemakerSpaceState {
	if ass.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ass.Type(), ass.LocalName()))
	}
	return ass.state
}

// Args contains the configurations for aws_sagemaker_space.
type Args struct {
	// DomainId: string, required
	DomainId terra.StringValue `hcl:"domain_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SpaceDisplayName: string, optional
	SpaceDisplayName terra.StringValue `hcl:"space_display_name,attr"`
	// SpaceName: string, required
	SpaceName terra.StringValue `hcl:"space_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// OwnershipSettings: optional
	OwnershipSettings *OwnershipSettings `hcl:"ownership_settings,block"`
	// SpaceSettings: optional
	SpaceSettings *SpaceSettings `hcl:"space_settings,block"`
	// SpaceSharingSettings: optional
	SpaceSharingSettings *SpaceSharingSettings `hcl:"space_sharing_settings,block"`
}

type awsSagemakerSpaceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_space.
func (ass awsSagemakerSpaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("arn"))
}

// DomainId returns a reference to field domain_id of aws_sagemaker_space.
func (ass awsSagemakerSpaceAttributes) DomainId() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("domain_id"))
}

// HomeEfsFileSystemUid returns a reference to field home_efs_file_system_uid of aws_sagemaker_space.
func (ass awsSagemakerSpaceAttributes) HomeEfsFileSystemUid() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("home_efs_file_system_uid"))
}

// Id returns a reference to field id of aws_sagemaker_space.
func (ass awsSagemakerSpaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("id"))
}

// SpaceDisplayName returns a reference to field space_display_name of aws_sagemaker_space.
func (ass awsSagemakerSpaceAttributes) SpaceDisplayName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("space_display_name"))
}

// SpaceName returns a reference to field space_name of aws_sagemaker_space.
func (ass awsSagemakerSpaceAttributes) SpaceName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("space_name"))
}

// Tags returns a reference to field tags of aws_sagemaker_space.
func (ass awsSagemakerSpaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ass.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_space.
func (ass awsSagemakerSpaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ass.ref.Append("tags_all"))
}

// Url returns a reference to field url of aws_sagemaker_space.
func (ass awsSagemakerSpaceAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("url"))
}

func (ass awsSagemakerSpaceAttributes) OwnershipSettings() terra.ListValue[OwnershipSettingsAttributes] {
	return terra.ReferenceAsList[OwnershipSettingsAttributes](ass.ref.Append("ownership_settings"))
}

func (ass awsSagemakerSpaceAttributes) SpaceSettings() terra.ListValue[SpaceSettingsAttributes] {
	return terra.ReferenceAsList[SpaceSettingsAttributes](ass.ref.Append("space_settings"))
}

func (ass awsSagemakerSpaceAttributes) SpaceSharingSettings() terra.ListValue[SpaceSharingSettingsAttributes] {
	return terra.ReferenceAsList[SpaceSharingSettingsAttributes](ass.ref.Append("space_sharing_settings"))
}

type awsSagemakerSpaceState struct {
	Arn                  string                      `json:"arn"`
	DomainId             string                      `json:"domain_id"`
	HomeEfsFileSystemUid string                      `json:"home_efs_file_system_uid"`
	Id                   string                      `json:"id"`
	SpaceDisplayName     string                      `json:"space_display_name"`
	SpaceName            string                      `json:"space_name"`
	Tags                 map[string]string           `json:"tags"`
	TagsAll              map[string]string           `json:"tags_all"`
	Url                  string                      `json:"url"`
	OwnershipSettings    []OwnershipSettingsState    `json:"ownership_settings"`
	SpaceSettings        []SpaceSettingsState        `json:"space_settings"`
	SpaceSharingSettings []SpaceSharingSettingsState `json:"space_sharing_settings"`
}
