// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lex_bot_alias

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lex_bot_alias.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLexBotAliasState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alba *Resource) Type() string {
	return "aws_lex_bot_alias"
}

// LocalName returns the local name for [Resource].
func (alba *Resource) LocalName() string {
	return alba.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alba *Resource) Configuration() interface{} {
	return alba.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alba *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alba)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alba *Resource) Dependencies() terra.Dependencies {
	return alba.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alba *Resource) LifecycleManagement() *terra.Lifecycle {
	return alba.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alba *Resource) Attributes() awsLexBotAliasAttributes {
	return awsLexBotAliasAttributes{ref: terra.ReferenceResource(alba)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alba *Resource) ImportState(state io.Reader) error {
	alba.state = &awsLexBotAliasState{}
	if err := json.NewDecoder(state).Decode(alba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alba.Type(), alba.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alba *Resource) State() (*awsLexBotAliasState, bool) {
	return alba.state, alba.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alba *Resource) StateMust() *awsLexBotAliasState {
	if alba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alba.Type(), alba.LocalName()))
	}
	return alba.state
}

// Args contains the configurations for aws_lex_bot_alias.
type Args struct {
	// BotName: string, required
	BotName terra.StringValue `hcl:"bot_name,attr" validate:"required"`
	// BotVersion: string, required
	BotVersion terra.StringValue `hcl:"bot_version,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ConversationLogs: optional
	ConversationLogs *ConversationLogs `hcl:"conversation_logs,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsLexBotAliasAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_lex_bot_alias.
func (alba awsLexBotAliasAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(alba.ref.Append("arn"))
}

// BotName returns a reference to field bot_name of aws_lex_bot_alias.
func (alba awsLexBotAliasAttributes) BotName() terra.StringValue {
	return terra.ReferenceAsString(alba.ref.Append("bot_name"))
}

// BotVersion returns a reference to field bot_version of aws_lex_bot_alias.
func (alba awsLexBotAliasAttributes) BotVersion() terra.StringValue {
	return terra.ReferenceAsString(alba.ref.Append("bot_version"))
}

// Checksum returns a reference to field checksum of aws_lex_bot_alias.
func (alba awsLexBotAliasAttributes) Checksum() terra.StringValue {
	return terra.ReferenceAsString(alba.ref.Append("checksum"))
}

// CreatedDate returns a reference to field created_date of aws_lex_bot_alias.
func (alba awsLexBotAliasAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceAsString(alba.ref.Append("created_date"))
}

// Description returns a reference to field description of aws_lex_bot_alias.
func (alba awsLexBotAliasAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(alba.ref.Append("description"))
}

// Id returns a reference to field id of aws_lex_bot_alias.
func (alba awsLexBotAliasAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alba.ref.Append("id"))
}

// LastUpdatedDate returns a reference to field last_updated_date of aws_lex_bot_alias.
func (alba awsLexBotAliasAttributes) LastUpdatedDate() terra.StringValue {
	return terra.ReferenceAsString(alba.ref.Append("last_updated_date"))
}

// Name returns a reference to field name of aws_lex_bot_alias.
func (alba awsLexBotAliasAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(alba.ref.Append("name"))
}

func (alba awsLexBotAliasAttributes) ConversationLogs() terra.ListValue[ConversationLogsAttributes] {
	return terra.ReferenceAsList[ConversationLogsAttributes](alba.ref.Append("conversation_logs"))
}

func (alba awsLexBotAliasAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](alba.ref.Append("timeouts"))
}

type awsLexBotAliasState struct {
	Arn              string                  `json:"arn"`
	BotName          string                  `json:"bot_name"`
	BotVersion       string                  `json:"bot_version"`
	Checksum         string                  `json:"checksum"`
	CreatedDate      string                  `json:"created_date"`
	Description      string                  `json:"description"`
	Id               string                  `json:"id"`
	LastUpdatedDate  string                  `json:"last_updated_date"`
	Name             string                  `json:"name"`
	ConversationLogs []ConversationLogsState `json:"conversation_logs"`
	Timeouts         *TimeoutsState          `json:"timeouts"`
}
