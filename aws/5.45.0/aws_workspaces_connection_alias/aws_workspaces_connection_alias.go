// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_workspaces_connection_alias

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_workspaces_connection_alias.
type Resource struct {
	Name      string
	Args      Args
	state     *awsWorkspacesConnectionAliasState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (awca *Resource) Type() string {
	return "aws_workspaces_connection_alias"
}

// LocalName returns the local name for [Resource].
func (awca *Resource) LocalName() string {
	return awca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (awca *Resource) Configuration() interface{} {
	return awca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (awca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(awca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (awca *Resource) Dependencies() terra.Dependencies {
	return awca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (awca *Resource) LifecycleManagement() *terra.Lifecycle {
	return awca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (awca *Resource) Attributes() awsWorkspacesConnectionAliasAttributes {
	return awsWorkspacesConnectionAliasAttributes{ref: terra.ReferenceResource(awca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (awca *Resource) ImportState(state io.Reader) error {
	awca.state = &awsWorkspacesConnectionAliasState{}
	if err := json.NewDecoder(state).Decode(awca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", awca.Type(), awca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (awca *Resource) State() (*awsWorkspacesConnectionAliasState, bool) {
	return awca.state, awca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (awca *Resource) StateMust() *awsWorkspacesConnectionAliasState {
	if awca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", awca.Type(), awca.LocalName()))
	}
	return awca.state
}

// Args contains the configurations for aws_workspaces_connection_alias.
type Args struct {
	// ConnectionString: string, required
	ConnectionString terra.StringValue `hcl:"connection_string,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsWorkspacesConnectionAliasAttributes struct {
	ref terra.Reference
}

// ConnectionString returns a reference to field connection_string of aws_workspaces_connection_alias.
func (awca awsWorkspacesConnectionAliasAttributes) ConnectionString() terra.StringValue {
	return terra.ReferenceAsString(awca.ref.Append("connection_string"))
}

// Id returns a reference to field id of aws_workspaces_connection_alias.
func (awca awsWorkspacesConnectionAliasAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(awca.ref.Append("id"))
}

// OwnerAccountId returns a reference to field owner_account_id of aws_workspaces_connection_alias.
func (awca awsWorkspacesConnectionAliasAttributes) OwnerAccountId() terra.StringValue {
	return terra.ReferenceAsString(awca.ref.Append("owner_account_id"))
}

// State returns a reference to field state of aws_workspaces_connection_alias.
func (awca awsWorkspacesConnectionAliasAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(awca.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_workspaces_connection_alias.
func (awca awsWorkspacesConnectionAliasAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](awca.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_workspaces_connection_alias.
func (awca awsWorkspacesConnectionAliasAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](awca.ref.Append("tags_all"))
}

func (awca awsWorkspacesConnectionAliasAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](awca.ref.Append("timeouts"))
}

type awsWorkspacesConnectionAliasState struct {
	ConnectionString string            `json:"connection_string"`
	Id               string            `json:"id"`
	OwnerAccountId   string            `json:"owner_account_id"`
	State            string            `json:"state"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
	Timeouts         *TimeoutsState    `json:"timeouts"`
}
