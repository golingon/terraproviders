// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codecommit_approval_rule_template_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codecommit_approval_rule_template_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodecommitApprovalRuleTemplateAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acarta *Resource) Type() string {
	return "aws_codecommit_approval_rule_template_association"
}

// LocalName returns the local name for [Resource].
func (acarta *Resource) LocalName() string {
	return acarta.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acarta *Resource) Configuration() interface{} {
	return acarta.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acarta *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acarta)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acarta *Resource) Dependencies() terra.Dependencies {
	return acarta.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acarta *Resource) LifecycleManagement() *terra.Lifecycle {
	return acarta.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acarta *Resource) Attributes() awsCodecommitApprovalRuleTemplateAssociationAttributes {
	return awsCodecommitApprovalRuleTemplateAssociationAttributes{ref: terra.ReferenceResource(acarta)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acarta *Resource) ImportState(state io.Reader) error {
	acarta.state = &awsCodecommitApprovalRuleTemplateAssociationState{}
	if err := json.NewDecoder(state).Decode(acarta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acarta.Type(), acarta.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acarta *Resource) State() (*awsCodecommitApprovalRuleTemplateAssociationState, bool) {
	return acarta.state, acarta.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acarta *Resource) StateMust() *awsCodecommitApprovalRuleTemplateAssociationState {
	if acarta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acarta.Type(), acarta.LocalName()))
	}
	return acarta.state
}

// Args contains the configurations for aws_codecommit_approval_rule_template_association.
type Args struct {
	// ApprovalRuleTemplateName: string, required
	ApprovalRuleTemplateName terra.StringValue `hcl:"approval_rule_template_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RepositoryName: string, required
	RepositoryName terra.StringValue `hcl:"repository_name,attr" validate:"required"`
}

type awsCodecommitApprovalRuleTemplateAssociationAttributes struct {
	ref terra.Reference
}

// ApprovalRuleTemplateName returns a reference to field approval_rule_template_name of aws_codecommit_approval_rule_template_association.
func (acarta awsCodecommitApprovalRuleTemplateAssociationAttributes) ApprovalRuleTemplateName() terra.StringValue {
	return terra.ReferenceAsString(acarta.ref.Append("approval_rule_template_name"))
}

// Id returns a reference to field id of aws_codecommit_approval_rule_template_association.
func (acarta awsCodecommitApprovalRuleTemplateAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acarta.ref.Append("id"))
}

// RepositoryName returns a reference to field repository_name of aws_codecommit_approval_rule_template_association.
func (acarta awsCodecommitApprovalRuleTemplateAssociationAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(acarta.ref.Append("repository_name"))
}

type awsCodecommitApprovalRuleTemplateAssociationState struct {
	ApprovalRuleTemplateName string `json:"approval_rule_template_name"`
	Id                       string `json:"id"`
	RepositoryName           string `json:"repository_name"`
}
