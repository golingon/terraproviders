// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dx_gateway_association_proposal

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dx_gateway_association_proposal.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDxGatewayAssociationProposalState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adgap *Resource) Type() string {
	return "aws_dx_gateway_association_proposal"
}

// LocalName returns the local name for [Resource].
func (adgap *Resource) LocalName() string {
	return adgap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adgap *Resource) Configuration() interface{} {
	return adgap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adgap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adgap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adgap *Resource) Dependencies() terra.Dependencies {
	return adgap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adgap *Resource) LifecycleManagement() *terra.Lifecycle {
	return adgap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adgap *Resource) Attributes() awsDxGatewayAssociationProposalAttributes {
	return awsDxGatewayAssociationProposalAttributes{ref: terra.ReferenceResource(adgap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adgap *Resource) ImportState(state io.Reader) error {
	adgap.state = &awsDxGatewayAssociationProposalState{}
	if err := json.NewDecoder(state).Decode(adgap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adgap.Type(), adgap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adgap *Resource) State() (*awsDxGatewayAssociationProposalState, bool) {
	return adgap.state, adgap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adgap *Resource) StateMust() *awsDxGatewayAssociationProposalState {
	if adgap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adgap.Type(), adgap.LocalName()))
	}
	return adgap.state
}

// Args contains the configurations for aws_dx_gateway_association_proposal.
type Args struct {
	// AllowedPrefixes: set of string, optional
	AllowedPrefixes terra.SetValue[terra.StringValue] `hcl:"allowed_prefixes,attr"`
	// AssociatedGatewayId: string, required
	AssociatedGatewayId terra.StringValue `hcl:"associated_gateway_id,attr" validate:"required"`
	// DxGatewayId: string, required
	DxGatewayId terra.StringValue `hcl:"dx_gateway_id,attr" validate:"required"`
	// DxGatewayOwnerAccountId: string, required
	DxGatewayOwnerAccountId terra.StringValue `hcl:"dx_gateway_owner_account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsDxGatewayAssociationProposalAttributes struct {
	ref terra.Reference
}

// AllowedPrefixes returns a reference to field allowed_prefixes of aws_dx_gateway_association_proposal.
func (adgap awsDxGatewayAssociationProposalAttributes) AllowedPrefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adgap.ref.Append("allowed_prefixes"))
}

// AssociatedGatewayId returns a reference to field associated_gateway_id of aws_dx_gateway_association_proposal.
func (adgap awsDxGatewayAssociationProposalAttributes) AssociatedGatewayId() terra.StringValue {
	return terra.ReferenceAsString(adgap.ref.Append("associated_gateway_id"))
}

// AssociatedGatewayOwnerAccountId returns a reference to field associated_gateway_owner_account_id of aws_dx_gateway_association_proposal.
func (adgap awsDxGatewayAssociationProposalAttributes) AssociatedGatewayOwnerAccountId() terra.StringValue {
	return terra.ReferenceAsString(adgap.ref.Append("associated_gateway_owner_account_id"))
}

// AssociatedGatewayType returns a reference to field associated_gateway_type of aws_dx_gateway_association_proposal.
func (adgap awsDxGatewayAssociationProposalAttributes) AssociatedGatewayType() terra.StringValue {
	return terra.ReferenceAsString(adgap.ref.Append("associated_gateway_type"))
}

// DxGatewayId returns a reference to field dx_gateway_id of aws_dx_gateway_association_proposal.
func (adgap awsDxGatewayAssociationProposalAttributes) DxGatewayId() terra.StringValue {
	return terra.ReferenceAsString(adgap.ref.Append("dx_gateway_id"))
}

// DxGatewayOwnerAccountId returns a reference to field dx_gateway_owner_account_id of aws_dx_gateway_association_proposal.
func (adgap awsDxGatewayAssociationProposalAttributes) DxGatewayOwnerAccountId() terra.StringValue {
	return terra.ReferenceAsString(adgap.ref.Append("dx_gateway_owner_account_id"))
}

// Id returns a reference to field id of aws_dx_gateway_association_proposal.
func (adgap awsDxGatewayAssociationProposalAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adgap.ref.Append("id"))
}

type awsDxGatewayAssociationProposalState struct {
	AllowedPrefixes                 []string `json:"allowed_prefixes"`
	AssociatedGatewayId             string   `json:"associated_gateway_id"`
	AssociatedGatewayOwnerAccountId string   `json:"associated_gateway_owner_account_id"`
	AssociatedGatewayType           string   `json:"associated_gateway_type"`
	DxGatewayId                     string   `json:"dx_gateway_id"`
	DxGatewayOwnerAccountId         string   `json:"dx_gateway_owner_account_id"`
	Id                              string   `json:"id"`
}
