// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *awsInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ai *Resource) Type() string {
	return "aws_instance"
}

// LocalName returns the local name for [Resource].
func (ai *Resource) LocalName() string {
	return ai.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ai *Resource) Configuration() interface{} {
	return ai.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ai *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ai)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ai *Resource) Dependencies() terra.Dependencies {
	return ai.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ai *Resource) LifecycleManagement() *terra.Lifecycle {
	return ai.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ai *Resource) Attributes() awsInstanceAttributes {
	return awsInstanceAttributes{ref: terra.ReferenceResource(ai)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ai *Resource) ImportState(state io.Reader) error {
	ai.state = &awsInstanceState{}
	if err := json.NewDecoder(state).Decode(ai.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ai.Type(), ai.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ai *Resource) State() (*awsInstanceState, bool) {
	return ai.state, ai.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ai *Resource) StateMust() *awsInstanceState {
	if ai.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ai.Type(), ai.LocalName()))
	}
	return ai.state
}

// Args contains the configurations for aws_instance.
type Args struct {
	// Ami: string, optional
	Ami terra.StringValue `hcl:"ami,attr"`
	// AssociatePublicIpAddress: bool, optional
	AssociatePublicIpAddress terra.BoolValue `hcl:"associate_public_ip_address,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// CpuCoreCount: number, optional
	CpuCoreCount terra.NumberValue `hcl:"cpu_core_count,attr"`
	// CpuThreadsPerCore: number, optional
	CpuThreadsPerCore terra.NumberValue `hcl:"cpu_threads_per_core,attr"`
	// DisableApiStop: bool, optional
	DisableApiStop terra.BoolValue `hcl:"disable_api_stop,attr"`
	// DisableApiTermination: bool, optional
	DisableApiTermination terra.BoolValue `hcl:"disable_api_termination,attr"`
	// EbsOptimized: bool, optional
	EbsOptimized terra.BoolValue `hcl:"ebs_optimized,attr"`
	// GetPasswordData: bool, optional
	GetPasswordData terra.BoolValue `hcl:"get_password_data,attr"`
	// Hibernation: bool, optional
	Hibernation terra.BoolValue `hcl:"hibernation,attr"`
	// HostId: string, optional
	HostId terra.StringValue `hcl:"host_id,attr"`
	// HostResourceGroupArn: string, optional
	HostResourceGroupArn terra.StringValue `hcl:"host_resource_group_arn,attr"`
	// IamInstanceProfile: string, optional
	IamInstanceProfile terra.StringValue `hcl:"iam_instance_profile,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceInitiatedShutdownBehavior: string, optional
	InstanceInitiatedShutdownBehavior terra.StringValue `hcl:"instance_initiated_shutdown_behavior,attr"`
	// InstanceType: string, optional
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// Ipv6AddressCount: number, optional
	Ipv6AddressCount terra.NumberValue `hcl:"ipv6_address_count,attr"`
	// Ipv6Addresses: list of string, optional
	Ipv6Addresses terra.ListValue[terra.StringValue] `hcl:"ipv6_addresses,attr"`
	// KeyName: string, optional
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// Monitoring: bool, optional
	Monitoring terra.BoolValue `hcl:"monitoring,attr"`
	// PlacementGroup: string, optional
	PlacementGroup terra.StringValue `hcl:"placement_group,attr"`
	// PlacementPartitionNumber: number, optional
	PlacementPartitionNumber terra.NumberValue `hcl:"placement_partition_number,attr"`
	// PrivateIp: string, optional
	PrivateIp terra.StringValue `hcl:"private_ip,attr"`
	// SecondaryPrivateIps: set of string, optional
	SecondaryPrivateIps terra.SetValue[terra.StringValue] `hcl:"secondary_private_ips,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// SourceDestCheck: bool, optional
	SourceDestCheck terra.BoolValue `hcl:"source_dest_check,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Tenancy: string, optional
	Tenancy terra.StringValue `hcl:"tenancy,attr"`
	// UserData: string, optional
	UserData terra.StringValue `hcl:"user_data,attr"`
	// UserDataBase64: string, optional
	UserDataBase64 terra.StringValue `hcl:"user_data_base64,attr"`
	// UserDataReplaceOnChange: bool, optional
	UserDataReplaceOnChange terra.BoolValue `hcl:"user_data_replace_on_change,attr"`
	// VolumeTags: map of string, optional
	VolumeTags terra.MapValue[terra.StringValue] `hcl:"volume_tags,attr"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// CapacityReservationSpecification: optional
	CapacityReservationSpecification *CapacityReservationSpecification `hcl:"capacity_reservation_specification,block"`
	// CpuOptions: optional
	CpuOptions *CpuOptions `hcl:"cpu_options,block"`
	// CreditSpecification: optional
	CreditSpecification *CreditSpecification `hcl:"credit_specification,block"`
	// EbsBlockDevice: min=0
	EbsBlockDevice []EbsBlockDevice `hcl:"ebs_block_device,block" validate:"min=0"`
	// EnclaveOptions: optional
	EnclaveOptions *EnclaveOptions `hcl:"enclave_options,block"`
	// EphemeralBlockDevice: min=0
	EphemeralBlockDevice []EphemeralBlockDevice `hcl:"ephemeral_block_device,block" validate:"min=0"`
	// InstanceMarketOptions: optional
	InstanceMarketOptions *InstanceMarketOptions `hcl:"instance_market_options,block"`
	// LaunchTemplate: optional
	LaunchTemplate *LaunchTemplate `hcl:"launch_template,block"`
	// MaintenanceOptions: optional
	MaintenanceOptions *MaintenanceOptions `hcl:"maintenance_options,block"`
	// MetadataOptions: optional
	MetadataOptions *MetadataOptions `hcl:"metadata_options,block"`
	// NetworkInterface: min=0
	NetworkInterface []NetworkInterface `hcl:"network_interface,block" validate:"min=0"`
	// PrivateDnsNameOptions: optional
	PrivateDnsNameOptions *PrivateDnsNameOptions `hcl:"private_dns_name_options,block"`
	// RootBlockDevice: optional
	RootBlockDevice *RootBlockDevice `hcl:"root_block_device,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsInstanceAttributes struct {
	ref terra.Reference
}

// Ami returns a reference to field ami of aws_instance.
func (ai awsInstanceAttributes) Ami() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("ami"))
}

// Arn returns a reference to field arn of aws_instance.
func (ai awsInstanceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("arn"))
}

// AssociatePublicIpAddress returns a reference to field associate_public_ip_address of aws_instance.
func (ai awsInstanceAttributes) AssociatePublicIpAddress() terra.BoolValue {
	return terra.ReferenceAsBool(ai.ref.Append("associate_public_ip_address"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_instance.
func (ai awsInstanceAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("availability_zone"))
}

// CpuCoreCount returns a reference to field cpu_core_count of aws_instance.
func (ai awsInstanceAttributes) CpuCoreCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ai.ref.Append("cpu_core_count"))
}

// CpuThreadsPerCore returns a reference to field cpu_threads_per_core of aws_instance.
func (ai awsInstanceAttributes) CpuThreadsPerCore() terra.NumberValue {
	return terra.ReferenceAsNumber(ai.ref.Append("cpu_threads_per_core"))
}

// DisableApiStop returns a reference to field disable_api_stop of aws_instance.
func (ai awsInstanceAttributes) DisableApiStop() terra.BoolValue {
	return terra.ReferenceAsBool(ai.ref.Append("disable_api_stop"))
}

// DisableApiTermination returns a reference to field disable_api_termination of aws_instance.
func (ai awsInstanceAttributes) DisableApiTermination() terra.BoolValue {
	return terra.ReferenceAsBool(ai.ref.Append("disable_api_termination"))
}

// EbsOptimized returns a reference to field ebs_optimized of aws_instance.
func (ai awsInstanceAttributes) EbsOptimized() terra.BoolValue {
	return terra.ReferenceAsBool(ai.ref.Append("ebs_optimized"))
}

// GetPasswordData returns a reference to field get_password_data of aws_instance.
func (ai awsInstanceAttributes) GetPasswordData() terra.BoolValue {
	return terra.ReferenceAsBool(ai.ref.Append("get_password_data"))
}

// Hibernation returns a reference to field hibernation of aws_instance.
func (ai awsInstanceAttributes) Hibernation() terra.BoolValue {
	return terra.ReferenceAsBool(ai.ref.Append("hibernation"))
}

// HostId returns a reference to field host_id of aws_instance.
func (ai awsInstanceAttributes) HostId() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("host_id"))
}

// HostResourceGroupArn returns a reference to field host_resource_group_arn of aws_instance.
func (ai awsInstanceAttributes) HostResourceGroupArn() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("host_resource_group_arn"))
}

// IamInstanceProfile returns a reference to field iam_instance_profile of aws_instance.
func (ai awsInstanceAttributes) IamInstanceProfile() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("iam_instance_profile"))
}

// Id returns a reference to field id of aws_instance.
func (ai awsInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("id"))
}

// InstanceInitiatedShutdownBehavior returns a reference to field instance_initiated_shutdown_behavior of aws_instance.
func (ai awsInstanceAttributes) InstanceInitiatedShutdownBehavior() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("instance_initiated_shutdown_behavior"))
}

// InstanceLifecycle returns a reference to field instance_lifecycle of aws_instance.
func (ai awsInstanceAttributes) InstanceLifecycle() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("instance_lifecycle"))
}

// InstanceState returns a reference to field instance_state of aws_instance.
func (ai awsInstanceAttributes) InstanceState() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("instance_state"))
}

// InstanceType returns a reference to field instance_type of aws_instance.
func (ai awsInstanceAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("instance_type"))
}

// Ipv6AddressCount returns a reference to field ipv6_address_count of aws_instance.
func (ai awsInstanceAttributes) Ipv6AddressCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ai.ref.Append("ipv6_address_count"))
}

// Ipv6Addresses returns a reference to field ipv6_addresses of aws_instance.
func (ai awsInstanceAttributes) Ipv6Addresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ai.ref.Append("ipv6_addresses"))
}

// KeyName returns a reference to field key_name of aws_instance.
func (ai awsInstanceAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("key_name"))
}

// Monitoring returns a reference to field monitoring of aws_instance.
func (ai awsInstanceAttributes) Monitoring() terra.BoolValue {
	return terra.ReferenceAsBool(ai.ref.Append("monitoring"))
}

// OutpostArn returns a reference to field outpost_arn of aws_instance.
func (ai awsInstanceAttributes) OutpostArn() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("outpost_arn"))
}

// PasswordData returns a reference to field password_data of aws_instance.
func (ai awsInstanceAttributes) PasswordData() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("password_data"))
}

// PlacementGroup returns a reference to field placement_group of aws_instance.
func (ai awsInstanceAttributes) PlacementGroup() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("placement_group"))
}

// PlacementPartitionNumber returns a reference to field placement_partition_number of aws_instance.
func (ai awsInstanceAttributes) PlacementPartitionNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(ai.ref.Append("placement_partition_number"))
}

// PrimaryNetworkInterfaceId returns a reference to field primary_network_interface_id of aws_instance.
func (ai awsInstanceAttributes) PrimaryNetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("primary_network_interface_id"))
}

// PrivateDns returns a reference to field private_dns of aws_instance.
func (ai awsInstanceAttributes) PrivateDns() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("private_dns"))
}

// PrivateIp returns a reference to field private_ip of aws_instance.
func (ai awsInstanceAttributes) PrivateIp() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("private_ip"))
}

// PublicDns returns a reference to field public_dns of aws_instance.
func (ai awsInstanceAttributes) PublicDns() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("public_dns"))
}

// PublicIp returns a reference to field public_ip of aws_instance.
func (ai awsInstanceAttributes) PublicIp() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("public_ip"))
}

// SecondaryPrivateIps returns a reference to field secondary_private_ips of aws_instance.
func (ai awsInstanceAttributes) SecondaryPrivateIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ai.ref.Append("secondary_private_ips"))
}

// SecurityGroups returns a reference to field security_groups of aws_instance.
func (ai awsInstanceAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ai.ref.Append("security_groups"))
}

// SourceDestCheck returns a reference to field source_dest_check of aws_instance.
func (ai awsInstanceAttributes) SourceDestCheck() terra.BoolValue {
	return terra.ReferenceAsBool(ai.ref.Append("source_dest_check"))
}

// SpotInstanceRequestId returns a reference to field spot_instance_request_id of aws_instance.
func (ai awsInstanceAttributes) SpotInstanceRequestId() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("spot_instance_request_id"))
}

// SubnetId returns a reference to field subnet_id of aws_instance.
func (ai awsInstanceAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of aws_instance.
func (ai awsInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ai.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_instance.
func (ai awsInstanceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ai.ref.Append("tags_all"))
}

// Tenancy returns a reference to field tenancy of aws_instance.
func (ai awsInstanceAttributes) Tenancy() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("tenancy"))
}

// UserData returns a reference to field user_data of aws_instance.
func (ai awsInstanceAttributes) UserData() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("user_data"))
}

// UserDataBase64 returns a reference to field user_data_base64 of aws_instance.
func (ai awsInstanceAttributes) UserDataBase64() terra.StringValue {
	return terra.ReferenceAsString(ai.ref.Append("user_data_base64"))
}

// UserDataReplaceOnChange returns a reference to field user_data_replace_on_change of aws_instance.
func (ai awsInstanceAttributes) UserDataReplaceOnChange() terra.BoolValue {
	return terra.ReferenceAsBool(ai.ref.Append("user_data_replace_on_change"))
}

// VolumeTags returns a reference to field volume_tags of aws_instance.
func (ai awsInstanceAttributes) VolumeTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ai.ref.Append("volume_tags"))
}

// VpcSecurityGroupIds returns a reference to field vpc_security_group_ids of aws_instance.
func (ai awsInstanceAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ai.ref.Append("vpc_security_group_ids"))
}

func (ai awsInstanceAttributes) CapacityReservationSpecification() terra.ListValue[CapacityReservationSpecificationAttributes] {
	return terra.ReferenceAsList[CapacityReservationSpecificationAttributes](ai.ref.Append("capacity_reservation_specification"))
}

func (ai awsInstanceAttributes) CpuOptions() terra.ListValue[CpuOptionsAttributes] {
	return terra.ReferenceAsList[CpuOptionsAttributes](ai.ref.Append("cpu_options"))
}

func (ai awsInstanceAttributes) CreditSpecification() terra.ListValue[CreditSpecificationAttributes] {
	return terra.ReferenceAsList[CreditSpecificationAttributes](ai.ref.Append("credit_specification"))
}

func (ai awsInstanceAttributes) EbsBlockDevice() terra.SetValue[EbsBlockDeviceAttributes] {
	return terra.ReferenceAsSet[EbsBlockDeviceAttributes](ai.ref.Append("ebs_block_device"))
}

func (ai awsInstanceAttributes) EnclaveOptions() terra.ListValue[EnclaveOptionsAttributes] {
	return terra.ReferenceAsList[EnclaveOptionsAttributes](ai.ref.Append("enclave_options"))
}

func (ai awsInstanceAttributes) EphemeralBlockDevice() terra.SetValue[EphemeralBlockDeviceAttributes] {
	return terra.ReferenceAsSet[EphemeralBlockDeviceAttributes](ai.ref.Append("ephemeral_block_device"))
}

func (ai awsInstanceAttributes) InstanceMarketOptions() terra.ListValue[InstanceMarketOptionsAttributes] {
	return terra.ReferenceAsList[InstanceMarketOptionsAttributes](ai.ref.Append("instance_market_options"))
}

func (ai awsInstanceAttributes) LaunchTemplate() terra.ListValue[LaunchTemplateAttributes] {
	return terra.ReferenceAsList[LaunchTemplateAttributes](ai.ref.Append("launch_template"))
}

func (ai awsInstanceAttributes) MaintenanceOptions() terra.ListValue[MaintenanceOptionsAttributes] {
	return terra.ReferenceAsList[MaintenanceOptionsAttributes](ai.ref.Append("maintenance_options"))
}

func (ai awsInstanceAttributes) MetadataOptions() terra.ListValue[MetadataOptionsAttributes] {
	return terra.ReferenceAsList[MetadataOptionsAttributes](ai.ref.Append("metadata_options"))
}

func (ai awsInstanceAttributes) NetworkInterface() terra.SetValue[NetworkInterfaceAttributes] {
	return terra.ReferenceAsSet[NetworkInterfaceAttributes](ai.ref.Append("network_interface"))
}

func (ai awsInstanceAttributes) PrivateDnsNameOptions() terra.ListValue[PrivateDnsNameOptionsAttributes] {
	return terra.ReferenceAsList[PrivateDnsNameOptionsAttributes](ai.ref.Append("private_dns_name_options"))
}

func (ai awsInstanceAttributes) RootBlockDevice() terra.ListValue[RootBlockDeviceAttributes] {
	return terra.ReferenceAsList[RootBlockDeviceAttributes](ai.ref.Append("root_block_device"))
}

func (ai awsInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ai.ref.Append("timeouts"))
}

type awsInstanceState struct {
	Ami                               string                                  `json:"ami"`
	Arn                               string                                  `json:"arn"`
	AssociatePublicIpAddress          bool                                    `json:"associate_public_ip_address"`
	AvailabilityZone                  string                                  `json:"availability_zone"`
	CpuCoreCount                      float64                                 `json:"cpu_core_count"`
	CpuThreadsPerCore                 float64                                 `json:"cpu_threads_per_core"`
	DisableApiStop                    bool                                    `json:"disable_api_stop"`
	DisableApiTermination             bool                                    `json:"disable_api_termination"`
	EbsOptimized                      bool                                    `json:"ebs_optimized"`
	GetPasswordData                   bool                                    `json:"get_password_data"`
	Hibernation                       bool                                    `json:"hibernation"`
	HostId                            string                                  `json:"host_id"`
	HostResourceGroupArn              string                                  `json:"host_resource_group_arn"`
	IamInstanceProfile                string                                  `json:"iam_instance_profile"`
	Id                                string                                  `json:"id"`
	InstanceInitiatedShutdownBehavior string                                  `json:"instance_initiated_shutdown_behavior"`
	InstanceLifecycle                 string                                  `json:"instance_lifecycle"`
	InstanceState                     string                                  `json:"instance_state"`
	InstanceType                      string                                  `json:"instance_type"`
	Ipv6AddressCount                  float64                                 `json:"ipv6_address_count"`
	Ipv6Addresses                     []string                                `json:"ipv6_addresses"`
	KeyName                           string                                  `json:"key_name"`
	Monitoring                        bool                                    `json:"monitoring"`
	OutpostArn                        string                                  `json:"outpost_arn"`
	PasswordData                      string                                  `json:"password_data"`
	PlacementGroup                    string                                  `json:"placement_group"`
	PlacementPartitionNumber          float64                                 `json:"placement_partition_number"`
	PrimaryNetworkInterfaceId         string                                  `json:"primary_network_interface_id"`
	PrivateDns                        string                                  `json:"private_dns"`
	PrivateIp                         string                                  `json:"private_ip"`
	PublicDns                         string                                  `json:"public_dns"`
	PublicIp                          string                                  `json:"public_ip"`
	SecondaryPrivateIps               []string                                `json:"secondary_private_ips"`
	SecurityGroups                    []string                                `json:"security_groups"`
	SourceDestCheck                   bool                                    `json:"source_dest_check"`
	SpotInstanceRequestId             string                                  `json:"spot_instance_request_id"`
	SubnetId                          string                                  `json:"subnet_id"`
	Tags                              map[string]string                       `json:"tags"`
	TagsAll                           map[string]string                       `json:"tags_all"`
	Tenancy                           string                                  `json:"tenancy"`
	UserData                          string                                  `json:"user_data"`
	UserDataBase64                    string                                  `json:"user_data_base64"`
	UserDataReplaceOnChange           bool                                    `json:"user_data_replace_on_change"`
	VolumeTags                        map[string]string                       `json:"volume_tags"`
	VpcSecurityGroupIds               []string                                `json:"vpc_security_group_ids"`
	CapacityReservationSpecification  []CapacityReservationSpecificationState `json:"capacity_reservation_specification"`
	CpuOptions                        []CpuOptionsState                       `json:"cpu_options"`
	CreditSpecification               []CreditSpecificationState              `json:"credit_specification"`
	EbsBlockDevice                    []EbsBlockDeviceState                   `json:"ebs_block_device"`
	EnclaveOptions                    []EnclaveOptionsState                   `json:"enclave_options"`
	EphemeralBlockDevice              []EphemeralBlockDeviceState             `json:"ephemeral_block_device"`
	InstanceMarketOptions             []InstanceMarketOptionsState            `json:"instance_market_options"`
	LaunchTemplate                    []LaunchTemplateState                   `json:"launch_template"`
	MaintenanceOptions                []MaintenanceOptionsState               `json:"maintenance_options"`
	MetadataOptions                   []MetadataOptionsState                  `json:"metadata_options"`
	NetworkInterface                  []NetworkInterfaceState                 `json:"network_interface"`
	PrivateDnsNameOptions             []PrivateDnsNameOptionsState            `json:"private_dns_name_options"`
	RootBlockDevice                   []RootBlockDeviceState                  `json:"root_block_device"`
	Timeouts                          *TimeoutsState                          `json:"timeouts"`
}
