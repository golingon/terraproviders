// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_athena_prepared_statement

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_athena_prepared_statement.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAthenaPreparedStatementState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaps *Resource) Type() string {
	return "aws_athena_prepared_statement"
}

// LocalName returns the local name for [Resource].
func (aaps *Resource) LocalName() string {
	return aaps.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaps *Resource) Configuration() interface{} {
	return aaps.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaps *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaps)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaps *Resource) Dependencies() terra.Dependencies {
	return aaps.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaps *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaps.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaps *Resource) Attributes() awsAthenaPreparedStatementAttributes {
	return awsAthenaPreparedStatementAttributes{ref: terra.ReferenceResource(aaps)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaps *Resource) ImportState(state io.Reader) error {
	aaps.state = &awsAthenaPreparedStatementState{}
	if err := json.NewDecoder(state).Decode(aaps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaps.Type(), aaps.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaps *Resource) State() (*awsAthenaPreparedStatementState, bool) {
	return aaps.state, aaps.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaps *Resource) StateMust() *awsAthenaPreparedStatementState {
	if aaps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaps.Type(), aaps.LocalName()))
	}
	return aaps.state
}

// Args contains the configurations for aws_athena_prepared_statement.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// QueryStatement: string, required
	QueryStatement terra.StringValue `hcl:"query_statement,attr" validate:"required"`
	// Workgroup: string, required
	Workgroup terra.StringValue `hcl:"workgroup,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsAthenaPreparedStatementAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_athena_prepared_statement.
func (aaps awsAthenaPreparedStatementAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aaps.ref.Append("description"))
}

// Id returns a reference to field id of aws_athena_prepared_statement.
func (aaps awsAthenaPreparedStatementAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaps.ref.Append("id"))
}

// Name returns a reference to field name of aws_athena_prepared_statement.
func (aaps awsAthenaPreparedStatementAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aaps.ref.Append("name"))
}

// QueryStatement returns a reference to field query_statement of aws_athena_prepared_statement.
func (aaps awsAthenaPreparedStatementAttributes) QueryStatement() terra.StringValue {
	return terra.ReferenceAsString(aaps.ref.Append("query_statement"))
}

// Workgroup returns a reference to field workgroup of aws_athena_prepared_statement.
func (aaps awsAthenaPreparedStatementAttributes) Workgroup() terra.StringValue {
	return terra.ReferenceAsString(aaps.ref.Append("workgroup"))
}

func (aaps awsAthenaPreparedStatementAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aaps.ref.Append("timeouts"))
}

type awsAthenaPreparedStatementState struct {
	Description    string         `json:"description"`
	Id             string         `json:"id"`
	Name           string         `json:"name"`
	QueryStatement string         `json:"query_statement"`
	Workgroup      string         `json:"workgroup"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
