// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_storagegateway_stored_iscsi_volume

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_storagegateway_stored_iscsi_volume.
type Resource struct {
	Name      string
	Args      Args
	state     *awsStoragegatewayStoredIscsiVolumeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (assiv *Resource) Type() string {
	return "aws_storagegateway_stored_iscsi_volume"
}

// LocalName returns the local name for [Resource].
func (assiv *Resource) LocalName() string {
	return assiv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (assiv *Resource) Configuration() interface{} {
	return assiv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (assiv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(assiv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (assiv *Resource) Dependencies() terra.Dependencies {
	return assiv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (assiv *Resource) LifecycleManagement() *terra.Lifecycle {
	return assiv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (assiv *Resource) Attributes() awsStoragegatewayStoredIscsiVolumeAttributes {
	return awsStoragegatewayStoredIscsiVolumeAttributes{ref: terra.ReferenceResource(assiv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (assiv *Resource) ImportState(state io.Reader) error {
	assiv.state = &awsStoragegatewayStoredIscsiVolumeState{}
	if err := json.NewDecoder(state).Decode(assiv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", assiv.Type(), assiv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (assiv *Resource) State() (*awsStoragegatewayStoredIscsiVolumeState, bool) {
	return assiv.state, assiv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (assiv *Resource) StateMust() *awsStoragegatewayStoredIscsiVolumeState {
	if assiv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", assiv.Type(), assiv.LocalName()))
	}
	return assiv.state
}

// Args contains the configurations for aws_storagegateway_stored_iscsi_volume.
type Args struct {
	// DiskId: string, required
	DiskId terra.StringValue `hcl:"disk_id,attr" validate:"required"`
	// GatewayArn: string, required
	GatewayArn terra.StringValue `hcl:"gateway_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsEncrypted: bool, optional
	KmsEncrypted terra.BoolValue `hcl:"kms_encrypted,attr"`
	// KmsKey: string, optional
	KmsKey terra.StringValue `hcl:"kms_key,attr"`
	// NetworkInterfaceId: string, required
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr" validate:"required"`
	// PreserveExistingData: bool, required
	PreserveExistingData terra.BoolValue `hcl:"preserve_existing_data,attr" validate:"required"`
	// SnapshotId: string, optional
	SnapshotId terra.StringValue `hcl:"snapshot_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetName: string, required
	TargetName terra.StringValue `hcl:"target_name,attr" validate:"required"`
}

type awsStoragegatewayStoredIscsiVolumeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(assiv.ref.Append("arn"))
}

// ChapEnabled returns a reference to field chap_enabled of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) ChapEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(assiv.ref.Append("chap_enabled"))
}

// DiskId returns a reference to field disk_id of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) DiskId() terra.StringValue {
	return terra.ReferenceAsString(assiv.ref.Append("disk_id"))
}

// GatewayArn returns a reference to field gateway_arn of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) GatewayArn() terra.StringValue {
	return terra.ReferenceAsString(assiv.ref.Append("gateway_arn"))
}

// Id returns a reference to field id of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(assiv.ref.Append("id"))
}

// KmsEncrypted returns a reference to field kms_encrypted of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) KmsEncrypted() terra.BoolValue {
	return terra.ReferenceAsBool(assiv.ref.Append("kms_encrypted"))
}

// KmsKey returns a reference to field kms_key of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(assiv.ref.Append("kms_key"))
}

// LunNumber returns a reference to field lun_number of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) LunNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(assiv.ref.Append("lun_number"))
}

// NetworkInterfaceId returns a reference to field network_interface_id of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(assiv.ref.Append("network_interface_id"))
}

// NetworkInterfacePort returns a reference to field network_interface_port of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) NetworkInterfacePort() terra.NumberValue {
	return terra.ReferenceAsNumber(assiv.ref.Append("network_interface_port"))
}

// PreserveExistingData returns a reference to field preserve_existing_data of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) PreserveExistingData() terra.BoolValue {
	return terra.ReferenceAsBool(assiv.ref.Append("preserve_existing_data"))
}

// SnapshotId returns a reference to field snapshot_id of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) SnapshotId() terra.StringValue {
	return terra.ReferenceAsString(assiv.ref.Append("snapshot_id"))
}

// Tags returns a reference to field tags of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](assiv.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](assiv.ref.Append("tags_all"))
}

// TargetArn returns a reference to field target_arn of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceAsString(assiv.ref.Append("target_arn"))
}

// TargetName returns a reference to field target_name of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) TargetName() terra.StringValue {
	return terra.ReferenceAsString(assiv.ref.Append("target_name"))
}

// VolumeAttachmentStatus returns a reference to field volume_attachment_status of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) VolumeAttachmentStatus() terra.StringValue {
	return terra.ReferenceAsString(assiv.ref.Append("volume_attachment_status"))
}

// VolumeId returns a reference to field volume_id of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) VolumeId() terra.StringValue {
	return terra.ReferenceAsString(assiv.ref.Append("volume_id"))
}

// VolumeSizeInBytes returns a reference to field volume_size_in_bytes of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) VolumeSizeInBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(assiv.ref.Append("volume_size_in_bytes"))
}

// VolumeStatus returns a reference to field volume_status of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) VolumeStatus() terra.StringValue {
	return terra.ReferenceAsString(assiv.ref.Append("volume_status"))
}

// VolumeType returns a reference to field volume_type of aws_storagegateway_stored_iscsi_volume.
func (assiv awsStoragegatewayStoredIscsiVolumeAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(assiv.ref.Append("volume_type"))
}

type awsStoragegatewayStoredIscsiVolumeState struct {
	Arn                    string            `json:"arn"`
	ChapEnabled            bool              `json:"chap_enabled"`
	DiskId                 string            `json:"disk_id"`
	GatewayArn             string            `json:"gateway_arn"`
	Id                     string            `json:"id"`
	KmsEncrypted           bool              `json:"kms_encrypted"`
	KmsKey                 string            `json:"kms_key"`
	LunNumber              float64           `json:"lun_number"`
	NetworkInterfaceId     string            `json:"network_interface_id"`
	NetworkInterfacePort   float64           `json:"network_interface_port"`
	PreserveExistingData   bool              `json:"preserve_existing_data"`
	SnapshotId             string            `json:"snapshot_id"`
	Tags                   map[string]string `json:"tags"`
	TagsAll                map[string]string `json:"tags_all"`
	TargetArn              string            `json:"target_arn"`
	TargetName             string            `json:"target_name"`
	VolumeAttachmentStatus string            `json:"volume_attachment_status"`
	VolumeId               string            `json:"volume_id"`
	VolumeSizeInBytes      float64           `json:"volume_size_in_bytes"`
	VolumeStatus           string            `json:"volume_status"`
	VolumeType             string            `json:"volume_type"`
}
