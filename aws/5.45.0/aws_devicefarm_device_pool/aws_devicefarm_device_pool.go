// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_devicefarm_device_pool

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_devicefarm_device_pool.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDevicefarmDevicePoolState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (addp *Resource) Type() string {
	return "aws_devicefarm_device_pool"
}

// LocalName returns the local name for [Resource].
func (addp *Resource) LocalName() string {
	return addp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (addp *Resource) Configuration() interface{} {
	return addp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (addp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(addp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (addp *Resource) Dependencies() terra.Dependencies {
	return addp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (addp *Resource) LifecycleManagement() *terra.Lifecycle {
	return addp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (addp *Resource) Attributes() awsDevicefarmDevicePoolAttributes {
	return awsDevicefarmDevicePoolAttributes{ref: terra.ReferenceResource(addp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (addp *Resource) ImportState(state io.Reader) error {
	addp.state = &awsDevicefarmDevicePoolState{}
	if err := json.NewDecoder(state).Decode(addp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", addp.Type(), addp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (addp *Resource) State() (*awsDevicefarmDevicePoolState, bool) {
	return addp.state, addp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (addp *Resource) StateMust() *awsDevicefarmDevicePoolState {
	if addp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", addp.Type(), addp.LocalName()))
	}
	return addp.state
}

// Args contains the configurations for aws_devicefarm_device_pool.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxDevices: number, optional
	MaxDevices terra.NumberValue `hcl:"max_devices,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProjectArn: string, required
	ProjectArn terra.StringValue `hcl:"project_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Rule: min=1
	Rule []Rule `hcl:"rule,block" validate:"min=1"`
}

type awsDevicefarmDevicePoolAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_devicefarm_device_pool.
func (addp awsDevicefarmDevicePoolAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(addp.ref.Append("arn"))
}

// Description returns a reference to field description of aws_devicefarm_device_pool.
func (addp awsDevicefarmDevicePoolAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(addp.ref.Append("description"))
}

// Id returns a reference to field id of aws_devicefarm_device_pool.
func (addp awsDevicefarmDevicePoolAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(addp.ref.Append("id"))
}

// MaxDevices returns a reference to field max_devices of aws_devicefarm_device_pool.
func (addp awsDevicefarmDevicePoolAttributes) MaxDevices() terra.NumberValue {
	return terra.ReferenceAsNumber(addp.ref.Append("max_devices"))
}

// Name returns a reference to field name of aws_devicefarm_device_pool.
func (addp awsDevicefarmDevicePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(addp.ref.Append("name"))
}

// ProjectArn returns a reference to field project_arn of aws_devicefarm_device_pool.
func (addp awsDevicefarmDevicePoolAttributes) ProjectArn() terra.StringValue {
	return terra.ReferenceAsString(addp.ref.Append("project_arn"))
}

// Tags returns a reference to field tags of aws_devicefarm_device_pool.
func (addp awsDevicefarmDevicePoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](addp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_devicefarm_device_pool.
func (addp awsDevicefarmDevicePoolAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](addp.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_devicefarm_device_pool.
func (addp awsDevicefarmDevicePoolAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(addp.ref.Append("type"))
}

func (addp awsDevicefarmDevicePoolAttributes) Rule() terra.SetValue[RuleAttributes] {
	return terra.ReferenceAsSet[RuleAttributes](addp.ref.Append("rule"))
}

type awsDevicefarmDevicePoolState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	MaxDevices  float64           `json:"max_devices"`
	Name        string            `json:"name"`
	ProjectArn  string            `json:"project_arn"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	Type        string            `json:"type"`
	Rule        []RuleState       `json:"rule"`
}
