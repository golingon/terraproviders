// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_backup

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_fsx_backup.
type Resource struct {
	Name      string
	Args      Args
	state     *awsFsxBackupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (afb *Resource) Type() string {
	return "aws_fsx_backup"
}

// LocalName returns the local name for [Resource].
func (afb *Resource) LocalName() string {
	return afb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (afb *Resource) Configuration() interface{} {
	return afb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (afb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(afb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (afb *Resource) Dependencies() terra.Dependencies {
	return afb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (afb *Resource) LifecycleManagement() *terra.Lifecycle {
	return afb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (afb *Resource) Attributes() awsFsxBackupAttributes {
	return awsFsxBackupAttributes{ref: terra.ReferenceResource(afb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (afb *Resource) ImportState(state io.Reader) error {
	afb.state = &awsFsxBackupState{}
	if err := json.NewDecoder(state).Decode(afb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afb.Type(), afb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (afb *Resource) State() (*awsFsxBackupState, bool) {
	return afb.state, afb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (afb *Resource) StateMust() *awsFsxBackupState {
	if afb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afb.Type(), afb.LocalName()))
	}
	return afb.state
}

// Args contains the configurations for aws_fsx_backup.
type Args struct {
	// FileSystemId: string, optional
	FileSystemId terra.StringValue `hcl:"file_system_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VolumeId: string, optional
	VolumeId terra.StringValue `hcl:"volume_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsFsxBackupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_fsx_backup.
func (afb awsFsxBackupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(afb.ref.Append("arn"))
}

// FileSystemId returns a reference to field file_system_id of aws_fsx_backup.
func (afb awsFsxBackupAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceAsString(afb.ref.Append("file_system_id"))
}

// Id returns a reference to field id of aws_fsx_backup.
func (afb awsFsxBackupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(afb.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_fsx_backup.
func (afb awsFsxBackupAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(afb.ref.Append("kms_key_id"))
}

// OwnerId returns a reference to field owner_id of aws_fsx_backup.
func (afb awsFsxBackupAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(afb.ref.Append("owner_id"))
}

// Tags returns a reference to field tags of aws_fsx_backup.
func (afb awsFsxBackupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afb.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_fsx_backup.
func (afb awsFsxBackupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afb.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_fsx_backup.
func (afb awsFsxBackupAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(afb.ref.Append("type"))
}

// VolumeId returns a reference to field volume_id of aws_fsx_backup.
func (afb awsFsxBackupAttributes) VolumeId() terra.StringValue {
	return terra.ReferenceAsString(afb.ref.Append("volume_id"))
}

func (afb awsFsxBackupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](afb.ref.Append("timeouts"))
}

type awsFsxBackupState struct {
	Arn          string            `json:"arn"`
	FileSystemId string            `json:"file_system_id"`
	Id           string            `json:"id"`
	KmsKeyId     string            `json:"kms_key_id"`
	OwnerId      string            `json:"owner_id"`
	Tags         map[string]string `json:"tags"`
	TagsAll      map[string]string `json:"tags_all"`
	Type         string            `json:"type"`
	VolumeId     string            `json:"volume_id"`
	Timeouts     *TimeoutsState    `json:"timeouts"`
}
