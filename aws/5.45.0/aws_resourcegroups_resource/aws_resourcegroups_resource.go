// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_resourcegroups_resource

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_resourcegroups_resource.
type Resource struct {
	Name      string
	Args      Args
	state     *awsResourcegroupsResourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arr *Resource) Type() string {
	return "aws_resourcegroups_resource"
}

// LocalName returns the local name for [Resource].
func (arr *Resource) LocalName() string {
	return arr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arr *Resource) Configuration() interface{} {
	return arr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arr *Resource) Dependencies() terra.Dependencies {
	return arr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arr *Resource) LifecycleManagement() *terra.Lifecycle {
	return arr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arr *Resource) Attributes() awsResourcegroupsResourceAttributes {
	return awsResourcegroupsResourceAttributes{ref: terra.ReferenceResource(arr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arr *Resource) ImportState(state io.Reader) error {
	arr.state = &awsResourcegroupsResourceState{}
	if err := json.NewDecoder(state).Decode(arr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arr.Type(), arr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arr *Resource) State() (*awsResourcegroupsResourceState, bool) {
	return arr.state, arr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arr *Resource) StateMust() *awsResourcegroupsResourceState {
	if arr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arr.Type(), arr.LocalName()))
	}
	return arr.state
}

// Args contains the configurations for aws_resourcegroups_resource.
type Args struct {
	// GroupArn: string, required
	GroupArn terra.StringValue `hcl:"group_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsResourcegroupsResourceAttributes struct {
	ref terra.Reference
}

// GroupArn returns a reference to field group_arn of aws_resourcegroups_resource.
func (arr awsResourcegroupsResourceAttributes) GroupArn() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("group_arn"))
}

// Id returns a reference to field id of aws_resourcegroups_resource.
func (arr awsResourcegroupsResourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("id"))
}

// ResourceArn returns a reference to field resource_arn of aws_resourcegroups_resource.
func (arr awsResourcegroupsResourceAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("resource_arn"))
}

// ResourceType returns a reference to field resource_type of aws_resourcegroups_resource.
func (arr awsResourcegroupsResourceAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("resource_type"))
}

func (arr awsResourcegroupsResourceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arr.ref.Append("timeouts"))
}

type awsResourcegroupsResourceState struct {
	GroupArn     string         `json:"group_arn"`
	Id           string         `json:"id"`
	ResourceArn  string         `json:"resource_arn"`
	ResourceType string         `json:"resource_type"`
	Timeouts     *TimeoutsState `json:"timeouts"`
}
