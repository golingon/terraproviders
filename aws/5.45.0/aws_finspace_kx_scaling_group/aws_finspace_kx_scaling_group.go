// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_finspace_kx_scaling_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_finspace_kx_scaling_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsFinspaceKxScalingGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (afksg *Resource) Type() string {
	return "aws_finspace_kx_scaling_group"
}

// LocalName returns the local name for [Resource].
func (afksg *Resource) LocalName() string {
	return afksg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (afksg *Resource) Configuration() interface{} {
	return afksg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (afksg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(afksg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (afksg *Resource) Dependencies() terra.Dependencies {
	return afksg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (afksg *Resource) LifecycleManagement() *terra.Lifecycle {
	return afksg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (afksg *Resource) Attributes() awsFinspaceKxScalingGroupAttributes {
	return awsFinspaceKxScalingGroupAttributes{ref: terra.ReferenceResource(afksg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (afksg *Resource) ImportState(state io.Reader) error {
	afksg.state = &awsFinspaceKxScalingGroupState{}
	if err := json.NewDecoder(state).Decode(afksg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afksg.Type(), afksg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (afksg *Resource) State() (*awsFinspaceKxScalingGroupState, bool) {
	return afksg.state, afksg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (afksg *Resource) StateMust() *awsFinspaceKxScalingGroupState {
	if afksg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afksg.Type(), afksg.LocalName()))
	}
	return afksg.state
}

// Args contains the configurations for aws_finspace_kx_scaling_group.
type Args struct {
	// AvailabilityZoneId: string, required
	AvailabilityZoneId terra.StringValue `hcl:"availability_zone_id,attr" validate:"required"`
	// EnvironmentId: string, required
	EnvironmentId terra.StringValue `hcl:"environment_id,attr" validate:"required"`
	// HostType: string, required
	HostType terra.StringValue `hcl:"host_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsFinspaceKxScalingGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_finspace_kx_scaling_group.
func (afksg awsFinspaceKxScalingGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(afksg.ref.Append("arn"))
}

// AvailabilityZoneId returns a reference to field availability_zone_id of aws_finspace_kx_scaling_group.
func (afksg awsFinspaceKxScalingGroupAttributes) AvailabilityZoneId() terra.StringValue {
	return terra.ReferenceAsString(afksg.ref.Append("availability_zone_id"))
}

// Clusters returns a reference to field clusters of aws_finspace_kx_scaling_group.
func (afksg awsFinspaceKxScalingGroupAttributes) Clusters() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](afksg.ref.Append("clusters"))
}

// CreatedTimestamp returns a reference to field created_timestamp of aws_finspace_kx_scaling_group.
func (afksg awsFinspaceKxScalingGroupAttributes) CreatedTimestamp() terra.StringValue {
	return terra.ReferenceAsString(afksg.ref.Append("created_timestamp"))
}

// EnvironmentId returns a reference to field environment_id of aws_finspace_kx_scaling_group.
func (afksg awsFinspaceKxScalingGroupAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(afksg.ref.Append("environment_id"))
}

// HostType returns a reference to field host_type of aws_finspace_kx_scaling_group.
func (afksg awsFinspaceKxScalingGroupAttributes) HostType() terra.StringValue {
	return terra.ReferenceAsString(afksg.ref.Append("host_type"))
}

// Id returns a reference to field id of aws_finspace_kx_scaling_group.
func (afksg awsFinspaceKxScalingGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(afksg.ref.Append("id"))
}

// LastModifiedTimestamp returns a reference to field last_modified_timestamp of aws_finspace_kx_scaling_group.
func (afksg awsFinspaceKxScalingGroupAttributes) LastModifiedTimestamp() terra.StringValue {
	return terra.ReferenceAsString(afksg.ref.Append("last_modified_timestamp"))
}

// Name returns a reference to field name of aws_finspace_kx_scaling_group.
func (afksg awsFinspaceKxScalingGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(afksg.ref.Append("name"))
}

// Status returns a reference to field status of aws_finspace_kx_scaling_group.
func (afksg awsFinspaceKxScalingGroupAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(afksg.ref.Append("status"))
}

// StatusReason returns a reference to field status_reason of aws_finspace_kx_scaling_group.
func (afksg awsFinspaceKxScalingGroupAttributes) StatusReason() terra.StringValue {
	return terra.ReferenceAsString(afksg.ref.Append("status_reason"))
}

// Tags returns a reference to field tags of aws_finspace_kx_scaling_group.
func (afksg awsFinspaceKxScalingGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afksg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_finspace_kx_scaling_group.
func (afksg awsFinspaceKxScalingGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](afksg.ref.Append("tags_all"))
}

func (afksg awsFinspaceKxScalingGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](afksg.ref.Append("timeouts"))
}

type awsFinspaceKxScalingGroupState struct {
	Arn                   string            `json:"arn"`
	AvailabilityZoneId    string            `json:"availability_zone_id"`
	Clusters              []string          `json:"clusters"`
	CreatedTimestamp      string            `json:"created_timestamp"`
	EnvironmentId         string            `json:"environment_id"`
	HostType              string            `json:"host_type"`
	Id                    string            `json:"id"`
	LastModifiedTimestamp string            `json:"last_modified_timestamp"`
	Name                  string            `json:"name"`
	Status                string            `json:"status"`
	StatusReason          string            `json:"status_reason"`
	Tags                  map[string]string `json:"tags"`
	TagsAll               map[string]string `json:"tags_all"`
	Timeouts              *TimeoutsState    `json:"timeouts"`
}
