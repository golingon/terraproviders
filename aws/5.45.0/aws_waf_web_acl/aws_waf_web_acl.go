// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_waf_web_acl

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_waf_web_acl.
type Resource struct {
	Name      string
	Args      Args
	state     *awsWafWebAclState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (awwa *Resource) Type() string {
	return "aws_waf_web_acl"
}

// LocalName returns the local name for [Resource].
func (awwa *Resource) LocalName() string {
	return awwa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (awwa *Resource) Configuration() interface{} {
	return awwa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (awwa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(awwa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (awwa *Resource) Dependencies() terra.Dependencies {
	return awwa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (awwa *Resource) LifecycleManagement() *terra.Lifecycle {
	return awwa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (awwa *Resource) Attributes() awsWafWebAclAttributes {
	return awsWafWebAclAttributes{ref: terra.ReferenceResource(awwa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (awwa *Resource) ImportState(state io.Reader) error {
	awwa.state = &awsWafWebAclState{}
	if err := json.NewDecoder(state).Decode(awwa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", awwa.Type(), awwa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (awwa *Resource) State() (*awsWafWebAclState, bool) {
	return awwa.state, awwa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (awwa *Resource) StateMust() *awsWafWebAclState {
	if awwa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", awwa.Type(), awwa.LocalName()))
	}
	return awwa.state
}

// Args contains the configurations for aws_waf_web_acl.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MetricName: string, required
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DefaultAction: required
	DefaultAction *DefaultAction `hcl:"default_action,block" validate:"required"`
	// LoggingConfiguration: optional
	LoggingConfiguration *LoggingConfiguration `hcl:"logging_configuration,block"`
	// Rules: min=0
	Rules []Rules `hcl:"rules,block" validate:"min=0"`
}

type awsWafWebAclAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_waf_web_acl.
func (awwa awsWafWebAclAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(awwa.ref.Append("arn"))
}

// Id returns a reference to field id of aws_waf_web_acl.
func (awwa awsWafWebAclAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(awwa.ref.Append("id"))
}

// MetricName returns a reference to field metric_name of aws_waf_web_acl.
func (awwa awsWafWebAclAttributes) MetricName() terra.StringValue {
	return terra.ReferenceAsString(awwa.ref.Append("metric_name"))
}

// Name returns a reference to field name of aws_waf_web_acl.
func (awwa awsWafWebAclAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(awwa.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_waf_web_acl.
func (awwa awsWafWebAclAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](awwa.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_waf_web_acl.
func (awwa awsWafWebAclAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](awwa.ref.Append("tags_all"))
}

func (awwa awsWafWebAclAttributes) DefaultAction() terra.ListValue[DefaultActionAttributes] {
	return terra.ReferenceAsList[DefaultActionAttributes](awwa.ref.Append("default_action"))
}

func (awwa awsWafWebAclAttributes) LoggingConfiguration() terra.ListValue[LoggingConfigurationAttributes] {
	return terra.ReferenceAsList[LoggingConfigurationAttributes](awwa.ref.Append("logging_configuration"))
}

func (awwa awsWafWebAclAttributes) Rules() terra.SetValue[RulesAttributes] {
	return terra.ReferenceAsSet[RulesAttributes](awwa.ref.Append("rules"))
}

type awsWafWebAclState struct {
	Arn                  string                      `json:"arn"`
	Id                   string                      `json:"id"`
	MetricName           string                      `json:"metric_name"`
	Name                 string                      `json:"name"`
	Tags                 map[string]string           `json:"tags"`
	TagsAll              map[string]string           `json:"tags_all"`
	DefaultAction        []DefaultActionState        `json:"default_action"`
	LoggingConfiguration []LoggingConfigurationState `json:"logging_configuration"`
	Rules                []RulesState                `json:"rules"`
}
