// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_network_acl

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_network_acl.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkAclState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ana *Resource) Type() string {
	return "aws_network_acl"
}

// LocalName returns the local name for [Resource].
func (ana *Resource) LocalName() string {
	return ana.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ana *Resource) Configuration() interface{} {
	return ana.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ana *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ana)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ana *Resource) Dependencies() terra.Dependencies {
	return ana.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ana *Resource) LifecycleManagement() *terra.Lifecycle {
	return ana.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ana *Resource) Attributes() awsNetworkAclAttributes {
	return awsNetworkAclAttributes{ref: terra.ReferenceResource(ana)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ana *Resource) ImportState(state io.Reader) error {
	ana.state = &awsNetworkAclState{}
	if err := json.NewDecoder(state).Decode(ana.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ana.Type(), ana.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ana *Resource) State() (*awsNetworkAclState, bool) {
	return ana.state, ana.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ana *Resource) StateMust() *awsNetworkAclState {
	if ana.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ana.Type(), ana.LocalName()))
	}
	return ana.state
}

// Args contains the configurations for aws_network_acl.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// Egress: min=0
	Egress []Egress `hcl:"egress,block" validate:"min=0"`
	// Ingress: min=0
	Ingress []Ingress `hcl:"ingress,block" validate:"min=0"`
}

type awsNetworkAclAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_network_acl.
func (ana awsNetworkAclAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ana.ref.Append("arn"))
}

// Id returns a reference to field id of aws_network_acl.
func (ana awsNetworkAclAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ana.ref.Append("id"))
}

// OwnerId returns a reference to field owner_id of aws_network_acl.
func (ana awsNetworkAclAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(ana.ref.Append("owner_id"))
}

// SubnetIds returns a reference to field subnet_ids of aws_network_acl.
func (ana awsNetworkAclAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ana.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_network_acl.
func (ana awsNetworkAclAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ana.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_network_acl.
func (ana awsNetworkAclAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ana.ref.Append("tags_all"))
}

// VpcId returns a reference to field vpc_id of aws_network_acl.
func (ana awsNetworkAclAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(ana.ref.Append("vpc_id"))
}

func (ana awsNetworkAclAttributes) Egress() terra.SetValue[EgressAttributes] {
	return terra.ReferenceAsSet[EgressAttributes](ana.ref.Append("egress"))
}

func (ana awsNetworkAclAttributes) Ingress() terra.SetValue[IngressAttributes] {
	return terra.ReferenceAsSet[IngressAttributes](ana.ref.Append("ingress"))
}

type awsNetworkAclState struct {
	Arn       string            `json:"arn"`
	Id        string            `json:"id"`
	OwnerId   string            `json:"owner_id"`
	SubnetIds []string          `json:"subnet_ids"`
	Tags      map[string]string `json:"tags"`
	TagsAll   map[string]string `json:"tags_all"`
	VpcId     string            `json:"vpc_id"`
	Egress    []EgressState     `json:"egress"`
	Ingress   []IngressState    `json:"ingress"`
}
