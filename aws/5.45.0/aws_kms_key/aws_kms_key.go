// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kms_key

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kms_key.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKmsKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akk *Resource) Type() string {
	return "aws_kms_key"
}

// LocalName returns the local name for [Resource].
func (akk *Resource) LocalName() string {
	return akk.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akk *Resource) Configuration() interface{} {
	return akk.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akk *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akk)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akk *Resource) Dependencies() terra.Dependencies {
	return akk.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akk *Resource) LifecycleManagement() *terra.Lifecycle {
	return akk.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akk *Resource) Attributes() awsKmsKeyAttributes {
	return awsKmsKeyAttributes{ref: terra.ReferenceResource(akk)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akk *Resource) ImportState(state io.Reader) error {
	akk.state = &awsKmsKeyState{}
	if err := json.NewDecoder(state).Decode(akk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akk.Type(), akk.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akk *Resource) State() (*awsKmsKeyState, bool) {
	return akk.state, akk.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akk *Resource) StateMust() *awsKmsKeyState {
	if akk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akk.Type(), akk.LocalName()))
	}
	return akk.state
}

// Args contains the configurations for aws_kms_key.
type Args struct {
	// BypassPolicyLockoutSafetyCheck: bool, optional
	BypassPolicyLockoutSafetyCheck terra.BoolValue `hcl:"bypass_policy_lockout_safety_check,attr"`
	// CustomKeyStoreId: string, optional
	CustomKeyStoreId terra.StringValue `hcl:"custom_key_store_id,attr"`
	// CustomerMasterKeySpec: string, optional
	CustomerMasterKeySpec terra.StringValue `hcl:"customer_master_key_spec,attr"`
	// DeletionWindowInDays: number, optional
	DeletionWindowInDays terra.NumberValue `hcl:"deletion_window_in_days,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnableKeyRotation: bool, optional
	EnableKeyRotation terra.BoolValue `hcl:"enable_key_rotation,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsEnabled: bool, optional
	IsEnabled terra.BoolValue `hcl:"is_enabled,attr"`
	// KeyUsage: string, optional
	KeyUsage terra.StringValue `hcl:"key_usage,attr"`
	// MultiRegion: bool, optional
	MultiRegion terra.BoolValue `hcl:"multi_region,attr"`
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// XksKeyId: string, optional
	XksKeyId terra.StringValue `hcl:"xks_key_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsKmsKeyAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_kms_key.
func (akk awsKmsKeyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(akk.ref.Append("arn"))
}

// BypassPolicyLockoutSafetyCheck returns a reference to field bypass_policy_lockout_safety_check of aws_kms_key.
func (akk awsKmsKeyAttributes) BypassPolicyLockoutSafetyCheck() terra.BoolValue {
	return terra.ReferenceAsBool(akk.ref.Append("bypass_policy_lockout_safety_check"))
}

// CustomKeyStoreId returns a reference to field custom_key_store_id of aws_kms_key.
func (akk awsKmsKeyAttributes) CustomKeyStoreId() terra.StringValue {
	return terra.ReferenceAsString(akk.ref.Append("custom_key_store_id"))
}

// CustomerMasterKeySpec returns a reference to field customer_master_key_spec of aws_kms_key.
func (akk awsKmsKeyAttributes) CustomerMasterKeySpec() terra.StringValue {
	return terra.ReferenceAsString(akk.ref.Append("customer_master_key_spec"))
}

// DeletionWindowInDays returns a reference to field deletion_window_in_days of aws_kms_key.
func (akk awsKmsKeyAttributes) DeletionWindowInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(akk.ref.Append("deletion_window_in_days"))
}

// Description returns a reference to field description of aws_kms_key.
func (akk awsKmsKeyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(akk.ref.Append("description"))
}

// EnableKeyRotation returns a reference to field enable_key_rotation of aws_kms_key.
func (akk awsKmsKeyAttributes) EnableKeyRotation() terra.BoolValue {
	return terra.ReferenceAsBool(akk.ref.Append("enable_key_rotation"))
}

// Id returns a reference to field id of aws_kms_key.
func (akk awsKmsKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akk.ref.Append("id"))
}

// IsEnabled returns a reference to field is_enabled of aws_kms_key.
func (akk awsKmsKeyAttributes) IsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(akk.ref.Append("is_enabled"))
}

// KeyId returns a reference to field key_id of aws_kms_key.
func (akk awsKmsKeyAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(akk.ref.Append("key_id"))
}

// KeyUsage returns a reference to field key_usage of aws_kms_key.
func (akk awsKmsKeyAttributes) KeyUsage() terra.StringValue {
	return terra.ReferenceAsString(akk.ref.Append("key_usage"))
}

// MultiRegion returns a reference to field multi_region of aws_kms_key.
func (akk awsKmsKeyAttributes) MultiRegion() terra.BoolValue {
	return terra.ReferenceAsBool(akk.ref.Append("multi_region"))
}

// Policy returns a reference to field policy of aws_kms_key.
func (akk awsKmsKeyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(akk.ref.Append("policy"))
}

// Tags returns a reference to field tags of aws_kms_key.
func (akk awsKmsKeyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akk.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_kms_key.
func (akk awsKmsKeyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akk.ref.Append("tags_all"))
}

// XksKeyId returns a reference to field xks_key_id of aws_kms_key.
func (akk awsKmsKeyAttributes) XksKeyId() terra.StringValue {
	return terra.ReferenceAsString(akk.ref.Append("xks_key_id"))
}

func (akk awsKmsKeyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](akk.ref.Append("timeouts"))
}

type awsKmsKeyState struct {
	Arn                            string            `json:"arn"`
	BypassPolicyLockoutSafetyCheck bool              `json:"bypass_policy_lockout_safety_check"`
	CustomKeyStoreId               string            `json:"custom_key_store_id"`
	CustomerMasterKeySpec          string            `json:"customer_master_key_spec"`
	DeletionWindowInDays           float64           `json:"deletion_window_in_days"`
	Description                    string            `json:"description"`
	EnableKeyRotation              bool              `json:"enable_key_rotation"`
	Id                             string            `json:"id"`
	IsEnabled                      bool              `json:"is_enabled"`
	KeyId                          string            `json:"key_id"`
	KeyUsage                       string            `json:"key_usage"`
	MultiRegion                    bool              `json:"multi_region"`
	Policy                         string            `json:"policy"`
	Tags                           map[string]string `json:"tags"`
	TagsAll                        map[string]string `json:"tags_all"`
	XksKeyId                       string            `json:"xks_key_id"`
	Timeouts                       *TimeoutsState    `json:"timeouts"`
}
