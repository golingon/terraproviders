// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicequotas_templates

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_servicequotas_templates.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (ast *DataSource) DataSource() string {
	return "aws_servicequotas_templates"
}

// LocalName returns the local name for [DataSource].
func (ast *DataSource) LocalName() string {
	return ast.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (ast *DataSource) Configuration() interface{} {
	return ast.Args
}

// Attributes returns the attributes for [DataSource].
func (ast *DataSource) Attributes() dataAwsServicequotasTemplatesAttributes {
	return dataAwsServicequotasTemplatesAttributes{ref: terra.ReferenceDataSource(ast)}
}

// DataArgs contains the configurations for aws_servicequotas_templates.
type DataArgs struct {
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
	// Templates: min=0
	Templates []DataTemplates `hcl:"templates,block" validate:"min=0"`
}

type dataAwsServicequotasTemplatesAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_servicequotas_templates.
func (ast dataAwsServicequotasTemplatesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ast.ref.Append("id"))
}

// Region returns a reference to field region of aws_servicequotas_templates.
func (ast dataAwsServicequotasTemplatesAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(ast.ref.Append("region"))
}

func (ast dataAwsServicequotasTemplatesAttributes) Templates() terra.ListValue[DataTemplatesAttributes] {
	return terra.ReferenceAsList[DataTemplatesAttributes](ast.ref.Append("templates"))
}
