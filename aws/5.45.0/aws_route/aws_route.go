// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRouteState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ar *Resource) Type() string {
	return "aws_route"
}

// LocalName returns the local name for [Resource].
func (ar *Resource) LocalName() string {
	return ar.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ar *Resource) Configuration() interface{} {
	return ar.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ar *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ar)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ar *Resource) Dependencies() terra.Dependencies {
	return ar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ar *Resource) LifecycleManagement() *terra.Lifecycle {
	return ar.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ar *Resource) Attributes() awsRouteAttributes {
	return awsRouteAttributes{ref: terra.ReferenceResource(ar)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ar *Resource) ImportState(state io.Reader) error {
	ar.state = &awsRouteState{}
	if err := json.NewDecoder(state).Decode(ar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ar.Type(), ar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ar *Resource) State() (*awsRouteState, bool) {
	return ar.state, ar.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ar *Resource) StateMust() *awsRouteState {
	if ar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ar.Type(), ar.LocalName()))
	}
	return ar.state
}

// Args contains the configurations for aws_route.
type Args struct {
	// CarrierGatewayId: string, optional
	CarrierGatewayId terra.StringValue `hcl:"carrier_gateway_id,attr"`
	// CoreNetworkArn: string, optional
	CoreNetworkArn terra.StringValue `hcl:"core_network_arn,attr"`
	// DestinationCidrBlock: string, optional
	DestinationCidrBlock terra.StringValue `hcl:"destination_cidr_block,attr"`
	// DestinationIpv6CidrBlock: string, optional
	DestinationIpv6CidrBlock terra.StringValue `hcl:"destination_ipv6_cidr_block,attr"`
	// DestinationPrefixListId: string, optional
	DestinationPrefixListId terra.StringValue `hcl:"destination_prefix_list_id,attr"`
	// EgressOnlyGatewayId: string, optional
	EgressOnlyGatewayId terra.StringValue `hcl:"egress_only_gateway_id,attr"`
	// GatewayId: string, optional
	GatewayId terra.StringValue `hcl:"gateway_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocalGatewayId: string, optional
	LocalGatewayId terra.StringValue `hcl:"local_gateway_id,attr"`
	// NatGatewayId: string, optional
	NatGatewayId terra.StringValue `hcl:"nat_gateway_id,attr"`
	// NetworkInterfaceId: string, optional
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr"`
	// RouteTableId: string, required
	RouteTableId terra.StringValue `hcl:"route_table_id,attr" validate:"required"`
	// TransitGatewayId: string, optional
	TransitGatewayId terra.StringValue `hcl:"transit_gateway_id,attr"`
	// VpcEndpointId: string, optional
	VpcEndpointId terra.StringValue `hcl:"vpc_endpoint_id,attr"`
	// VpcPeeringConnectionId: string, optional
	VpcPeeringConnectionId terra.StringValue `hcl:"vpc_peering_connection_id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRouteAttributes struct {
	ref terra.Reference
}

// CarrierGatewayId returns a reference to field carrier_gateway_id of aws_route.
func (ar awsRouteAttributes) CarrierGatewayId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("carrier_gateway_id"))
}

// CoreNetworkArn returns a reference to field core_network_arn of aws_route.
func (ar awsRouteAttributes) CoreNetworkArn() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("core_network_arn"))
}

// DestinationCidrBlock returns a reference to field destination_cidr_block of aws_route.
func (ar awsRouteAttributes) DestinationCidrBlock() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("destination_cidr_block"))
}

// DestinationIpv6CidrBlock returns a reference to field destination_ipv6_cidr_block of aws_route.
func (ar awsRouteAttributes) DestinationIpv6CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("destination_ipv6_cidr_block"))
}

// DestinationPrefixListId returns a reference to field destination_prefix_list_id of aws_route.
func (ar awsRouteAttributes) DestinationPrefixListId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("destination_prefix_list_id"))
}

// EgressOnlyGatewayId returns a reference to field egress_only_gateway_id of aws_route.
func (ar awsRouteAttributes) EgressOnlyGatewayId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("egress_only_gateway_id"))
}

// GatewayId returns a reference to field gateway_id of aws_route.
func (ar awsRouteAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("gateway_id"))
}

// Id returns a reference to field id of aws_route.
func (ar awsRouteAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_route.
func (ar awsRouteAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("instance_id"))
}

// InstanceOwnerId returns a reference to field instance_owner_id of aws_route.
func (ar awsRouteAttributes) InstanceOwnerId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("instance_owner_id"))
}

// LocalGatewayId returns a reference to field local_gateway_id of aws_route.
func (ar awsRouteAttributes) LocalGatewayId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("local_gateway_id"))
}

// NatGatewayId returns a reference to field nat_gateway_id of aws_route.
func (ar awsRouteAttributes) NatGatewayId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("nat_gateway_id"))
}

// NetworkInterfaceId returns a reference to field network_interface_id of aws_route.
func (ar awsRouteAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("network_interface_id"))
}

// Origin returns a reference to field origin of aws_route.
func (ar awsRouteAttributes) Origin() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("origin"))
}

// RouteTableId returns a reference to field route_table_id of aws_route.
func (ar awsRouteAttributes) RouteTableId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("route_table_id"))
}

// State returns a reference to field state of aws_route.
func (ar awsRouteAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("state"))
}

// TransitGatewayId returns a reference to field transit_gateway_id of aws_route.
func (ar awsRouteAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("transit_gateway_id"))
}

// VpcEndpointId returns a reference to field vpc_endpoint_id of aws_route.
func (ar awsRouteAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("vpc_endpoint_id"))
}

// VpcPeeringConnectionId returns a reference to field vpc_peering_connection_id of aws_route.
func (ar awsRouteAttributes) VpcPeeringConnectionId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("vpc_peering_connection_id"))
}

func (ar awsRouteAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ar.ref.Append("timeouts"))
}

type awsRouteState struct {
	CarrierGatewayId         string         `json:"carrier_gateway_id"`
	CoreNetworkArn           string         `json:"core_network_arn"`
	DestinationCidrBlock     string         `json:"destination_cidr_block"`
	DestinationIpv6CidrBlock string         `json:"destination_ipv6_cidr_block"`
	DestinationPrefixListId  string         `json:"destination_prefix_list_id"`
	EgressOnlyGatewayId      string         `json:"egress_only_gateway_id"`
	GatewayId                string         `json:"gateway_id"`
	Id                       string         `json:"id"`
	InstanceId               string         `json:"instance_id"`
	InstanceOwnerId          string         `json:"instance_owner_id"`
	LocalGatewayId           string         `json:"local_gateway_id"`
	NatGatewayId             string         `json:"nat_gateway_id"`
	NetworkInterfaceId       string         `json:"network_interface_id"`
	Origin                   string         `json:"origin"`
	RouteTableId             string         `json:"route_table_id"`
	State                    string         `json:"state"`
	TransitGatewayId         string         `json:"transit_gateway_id"`
	VpcEndpointId            string         `json:"vpc_endpoint_id"`
	VpcPeeringConnectionId   string         `json:"vpc_peering_connection_id"`
	Timeouts                 *TimeoutsState `json:"timeouts"`
}
