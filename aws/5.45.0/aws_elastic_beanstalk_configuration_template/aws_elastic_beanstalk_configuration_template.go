// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elastic_beanstalk_configuration_template

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_elastic_beanstalk_configuration_template.
type Resource struct {
	Name      string
	Args      Args
	state     *awsElasticBeanstalkConfigurationTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aebct *Resource) Type() string {
	return "aws_elastic_beanstalk_configuration_template"
}

// LocalName returns the local name for [Resource].
func (aebct *Resource) LocalName() string {
	return aebct.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aebct *Resource) Configuration() interface{} {
	return aebct.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aebct *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aebct)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aebct *Resource) Dependencies() terra.Dependencies {
	return aebct.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aebct *Resource) LifecycleManagement() *terra.Lifecycle {
	return aebct.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aebct *Resource) Attributes() awsElasticBeanstalkConfigurationTemplateAttributes {
	return awsElasticBeanstalkConfigurationTemplateAttributes{ref: terra.ReferenceResource(aebct)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aebct *Resource) ImportState(state io.Reader) error {
	aebct.state = &awsElasticBeanstalkConfigurationTemplateState{}
	if err := json.NewDecoder(state).Decode(aebct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aebct.Type(), aebct.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aebct *Resource) State() (*awsElasticBeanstalkConfigurationTemplateState, bool) {
	return aebct.state, aebct.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aebct *Resource) StateMust() *awsElasticBeanstalkConfigurationTemplateState {
	if aebct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aebct.Type(), aebct.LocalName()))
	}
	return aebct.state
}

// Args contains the configurations for aws_elastic_beanstalk_configuration_template.
type Args struct {
	// Application: string, required
	Application terra.StringValue `hcl:"application,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnvironmentId: string, optional
	EnvironmentId terra.StringValue `hcl:"environment_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SolutionStackName: string, optional
	SolutionStackName terra.StringValue `hcl:"solution_stack_name,attr"`
	// Setting: min=0
	Setting []Setting `hcl:"setting,block" validate:"min=0"`
}

type awsElasticBeanstalkConfigurationTemplateAttributes struct {
	ref terra.Reference
}

// Application returns a reference to field application of aws_elastic_beanstalk_configuration_template.
func (aebct awsElasticBeanstalkConfigurationTemplateAttributes) Application() terra.StringValue {
	return terra.ReferenceAsString(aebct.ref.Append("application"))
}

// Description returns a reference to field description of aws_elastic_beanstalk_configuration_template.
func (aebct awsElasticBeanstalkConfigurationTemplateAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aebct.ref.Append("description"))
}

// EnvironmentId returns a reference to field environment_id of aws_elastic_beanstalk_configuration_template.
func (aebct awsElasticBeanstalkConfigurationTemplateAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(aebct.ref.Append("environment_id"))
}

// Id returns a reference to field id of aws_elastic_beanstalk_configuration_template.
func (aebct awsElasticBeanstalkConfigurationTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aebct.ref.Append("id"))
}

// Name returns a reference to field name of aws_elastic_beanstalk_configuration_template.
func (aebct awsElasticBeanstalkConfigurationTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aebct.ref.Append("name"))
}

// SolutionStackName returns a reference to field solution_stack_name of aws_elastic_beanstalk_configuration_template.
func (aebct awsElasticBeanstalkConfigurationTemplateAttributes) SolutionStackName() terra.StringValue {
	return terra.ReferenceAsString(aebct.ref.Append("solution_stack_name"))
}

func (aebct awsElasticBeanstalkConfigurationTemplateAttributes) Setting() terra.SetValue[SettingAttributes] {
	return terra.ReferenceAsSet[SettingAttributes](aebct.ref.Append("setting"))
}

type awsElasticBeanstalkConfigurationTemplateState struct {
	Application       string         `json:"application"`
	Description       string         `json:"description"`
	EnvironmentId     string         `json:"environment_id"`
	Id                string         `json:"id"`
	Name              string         `json:"name"`
	SolutionStackName string         `json:"solution_stack_name"`
	Setting           []SettingState `json:"setting"`
}
