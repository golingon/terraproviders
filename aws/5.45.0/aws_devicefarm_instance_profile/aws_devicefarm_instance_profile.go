// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_devicefarm_instance_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_devicefarm_instance_profile.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDevicefarmInstanceProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adip *Resource) Type() string {
	return "aws_devicefarm_instance_profile"
}

// LocalName returns the local name for [Resource].
func (adip *Resource) LocalName() string {
	return adip.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adip *Resource) Configuration() interface{} {
	return adip.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adip *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adip)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adip *Resource) Dependencies() terra.Dependencies {
	return adip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adip *Resource) LifecycleManagement() *terra.Lifecycle {
	return adip.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adip *Resource) Attributes() awsDevicefarmInstanceProfileAttributes {
	return awsDevicefarmInstanceProfileAttributes{ref: terra.ReferenceResource(adip)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adip *Resource) ImportState(state io.Reader) error {
	adip.state = &awsDevicefarmInstanceProfileState{}
	if err := json.NewDecoder(state).Decode(adip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adip.Type(), adip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adip *Resource) State() (*awsDevicefarmInstanceProfileState, bool) {
	return adip.state, adip.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adip *Resource) StateMust() *awsDevicefarmInstanceProfileState {
	if adip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adip.Type(), adip.LocalName()))
	}
	return adip.state
}

// Args contains the configurations for aws_devicefarm_instance_profile.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExcludeAppPackagesFromCleanup: set of string, optional
	ExcludeAppPackagesFromCleanup terra.SetValue[terra.StringValue] `hcl:"exclude_app_packages_from_cleanup,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PackageCleanup: bool, optional
	PackageCleanup terra.BoolValue `hcl:"package_cleanup,attr"`
	// RebootAfterUse: bool, optional
	RebootAfterUse terra.BoolValue `hcl:"reboot_after_use,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsDevicefarmInstanceProfileAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_devicefarm_instance_profile.
func (adip awsDevicefarmInstanceProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adip.ref.Append("arn"))
}

// Description returns a reference to field description of aws_devicefarm_instance_profile.
func (adip awsDevicefarmInstanceProfileAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adip.ref.Append("description"))
}

// ExcludeAppPackagesFromCleanup returns a reference to field exclude_app_packages_from_cleanup of aws_devicefarm_instance_profile.
func (adip awsDevicefarmInstanceProfileAttributes) ExcludeAppPackagesFromCleanup() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adip.ref.Append("exclude_app_packages_from_cleanup"))
}

// Id returns a reference to field id of aws_devicefarm_instance_profile.
func (adip awsDevicefarmInstanceProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adip.ref.Append("id"))
}

// Name returns a reference to field name of aws_devicefarm_instance_profile.
func (adip awsDevicefarmInstanceProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adip.ref.Append("name"))
}

// PackageCleanup returns a reference to field package_cleanup of aws_devicefarm_instance_profile.
func (adip awsDevicefarmInstanceProfileAttributes) PackageCleanup() terra.BoolValue {
	return terra.ReferenceAsBool(adip.ref.Append("package_cleanup"))
}

// RebootAfterUse returns a reference to field reboot_after_use of aws_devicefarm_instance_profile.
func (adip awsDevicefarmInstanceProfileAttributes) RebootAfterUse() terra.BoolValue {
	return terra.ReferenceAsBool(adip.ref.Append("reboot_after_use"))
}

// Tags returns a reference to field tags of aws_devicefarm_instance_profile.
func (adip awsDevicefarmInstanceProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adip.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_devicefarm_instance_profile.
func (adip awsDevicefarmInstanceProfileAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adip.ref.Append("tags_all"))
}

type awsDevicefarmInstanceProfileState struct {
	Arn                           string            `json:"arn"`
	Description                   string            `json:"description"`
	ExcludeAppPackagesFromCleanup []string          `json:"exclude_app_packages_from_cleanup"`
	Id                            string            `json:"id"`
	Name                          string            `json:"name"`
	PackageCleanup                bool              `json:"package_cleanup"`
	RebootAfterUse                bool              `json:"reboot_after_use"`
	Tags                          map[string]string `json:"tags"`
	TagsAll                       map[string]string `json:"tags_all"`
}
