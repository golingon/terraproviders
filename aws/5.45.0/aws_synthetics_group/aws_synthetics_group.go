// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_synthetics_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_synthetics_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSyntheticsGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asg *Resource) Type() string {
	return "aws_synthetics_group"
}

// LocalName returns the local name for [Resource].
func (asg *Resource) LocalName() string {
	return asg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asg *Resource) Configuration() interface{} {
	return asg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asg *Resource) Dependencies() terra.Dependencies {
	return asg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asg *Resource) LifecycleManagement() *terra.Lifecycle {
	return asg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asg *Resource) Attributes() awsSyntheticsGroupAttributes {
	return awsSyntheticsGroupAttributes{ref: terra.ReferenceResource(asg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asg *Resource) ImportState(state io.Reader) error {
	asg.state = &awsSyntheticsGroupState{}
	if err := json.NewDecoder(state).Decode(asg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asg.Type(), asg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asg *Resource) State() (*awsSyntheticsGroupState, bool) {
	return asg.state, asg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asg *Resource) StateMust() *awsSyntheticsGroupState {
	if asg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asg.Type(), asg.LocalName()))
	}
	return asg.state
}

// Args contains the configurations for aws_synthetics_group.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsSyntheticsGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_synthetics_group.
func (asg awsSyntheticsGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asg.ref.Append("arn"))
}

// GroupId returns a reference to field group_id of aws_synthetics_group.
func (asg awsSyntheticsGroupAttributes) GroupId() terra.StringValue {
	return terra.ReferenceAsString(asg.ref.Append("group_id"))
}

// Id returns a reference to field id of aws_synthetics_group.
func (asg awsSyntheticsGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asg.ref.Append("id"))
}

// Name returns a reference to field name of aws_synthetics_group.
func (asg awsSyntheticsGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asg.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_synthetics_group.
func (asg awsSyntheticsGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_synthetics_group.
func (asg awsSyntheticsGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asg.ref.Append("tags_all"))
}

type awsSyntheticsGroupState struct {
	Arn     string            `json:"arn"`
	GroupId string            `json:"group_id"`
	Id      string            `json:"id"`
	Name    string            `json:"name"`
	Tags    map[string]string `json:"tags"`
	TagsAll map[string]string `json:"tags_all"`
}
