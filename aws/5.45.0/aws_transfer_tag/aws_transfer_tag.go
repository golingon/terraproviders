// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_transfer_tag

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_transfer_tag.
type Resource struct {
	Name      string
	Args      Args
	state     *awsTransferTagState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (att *Resource) Type() string {
	return "aws_transfer_tag"
}

// LocalName returns the local name for [Resource].
func (att *Resource) LocalName() string {
	return att.Name
}

// Configuration returns the configuration (args) for [Resource].
func (att *Resource) Configuration() interface{} {
	return att.Args
}

// DependOn is used for other resources to depend on [Resource].
func (att *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(att)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (att *Resource) Dependencies() terra.Dependencies {
	return att.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (att *Resource) LifecycleManagement() *terra.Lifecycle {
	return att.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (att *Resource) Attributes() awsTransferTagAttributes {
	return awsTransferTagAttributes{ref: terra.ReferenceResource(att)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (att *Resource) ImportState(state io.Reader) error {
	att.state = &awsTransferTagState{}
	if err := json.NewDecoder(state).Decode(att.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", att.Type(), att.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (att *Resource) State() (*awsTransferTagState, bool) {
	return att.state, att.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (att *Resource) StateMust() *awsTransferTagState {
	if att.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", att.Type(), att.LocalName()))
	}
	return att.state
}

// Args contains the configurations for aws_transfer_tag.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type awsTransferTagAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_transfer_tag.
func (att awsTransferTagAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(att.ref.Append("id"))
}

// Key returns a reference to field key of aws_transfer_tag.
func (att awsTransferTagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(att.ref.Append("key"))
}

// ResourceArn returns a reference to field resource_arn of aws_transfer_tag.
func (att awsTransferTagAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(att.ref.Append("resource_arn"))
}

// Value returns a reference to field value of aws_transfer_tag.
func (att awsTransferTagAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(att.ref.Append("value"))
}

type awsTransferTagState struct {
	Id          string `json:"id"`
	Key         string `json:"key"`
	ResourceArn string `json:"resource_arn"`
	Value       string `json:"value"`
}
