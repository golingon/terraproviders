// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iot_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iot_certificate.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIotCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aic *Resource) Type() string {
	return "aws_iot_certificate"
}

// LocalName returns the local name for [Resource].
func (aic *Resource) LocalName() string {
	return aic.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aic *Resource) Configuration() interface{} {
	return aic.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aic *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aic)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aic *Resource) Dependencies() terra.Dependencies {
	return aic.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aic *Resource) LifecycleManagement() *terra.Lifecycle {
	return aic.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aic *Resource) Attributes() awsIotCertificateAttributes {
	return awsIotCertificateAttributes{ref: terra.ReferenceResource(aic)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aic *Resource) ImportState(state io.Reader) error {
	aic.state = &awsIotCertificateState{}
	if err := json.NewDecoder(state).Decode(aic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aic.Type(), aic.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aic *Resource) State() (*awsIotCertificateState, bool) {
	return aic.state, aic.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aic *Resource) StateMust() *awsIotCertificateState {
	if aic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aic.Type(), aic.LocalName()))
	}
	return aic.state
}

// Args contains the configurations for aws_iot_certificate.
type Args struct {
	// Active: bool, required
	Active terra.BoolValue `hcl:"active,attr" validate:"required"`
	// CaPem: string, optional
	CaPem terra.StringValue `hcl:"ca_pem,attr"`
	// CertificatePem: string, optional
	CertificatePem terra.StringValue `hcl:"certificate_pem,attr"`
	// Csr: string, optional
	Csr terra.StringValue `hcl:"csr,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsIotCertificateAttributes struct {
	ref terra.Reference
}

// Active returns a reference to field active of aws_iot_certificate.
func (aic awsIotCertificateAttributes) Active() terra.BoolValue {
	return terra.ReferenceAsBool(aic.ref.Append("active"))
}

// Arn returns a reference to field arn of aws_iot_certificate.
func (aic awsIotCertificateAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("arn"))
}

// CaCertificateId returns a reference to field ca_certificate_id of aws_iot_certificate.
func (aic awsIotCertificateAttributes) CaCertificateId() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("ca_certificate_id"))
}

// CaPem returns a reference to field ca_pem of aws_iot_certificate.
func (aic awsIotCertificateAttributes) CaPem() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("ca_pem"))
}

// CertificatePem returns a reference to field certificate_pem of aws_iot_certificate.
func (aic awsIotCertificateAttributes) CertificatePem() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("certificate_pem"))
}

// Csr returns a reference to field csr of aws_iot_certificate.
func (aic awsIotCertificateAttributes) Csr() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("csr"))
}

// Id returns a reference to field id of aws_iot_certificate.
func (aic awsIotCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("id"))
}

// PrivateKey returns a reference to field private_key of aws_iot_certificate.
func (aic awsIotCertificateAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("private_key"))
}

// PublicKey returns a reference to field public_key of aws_iot_certificate.
func (aic awsIotCertificateAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("public_key"))
}

type awsIotCertificateState struct {
	Active          bool   `json:"active"`
	Arn             string `json:"arn"`
	CaCertificateId string `json:"ca_certificate_id"`
	CaPem           string `json:"ca_pem"`
	CertificatePem  string `json:"certificate_pem"`
	Csr             string `json:"csr"`
	Id              string `json:"id"`
	PrivateKey      string `json:"private_key"`
	PublicKey       string `json:"public_key"`
}
