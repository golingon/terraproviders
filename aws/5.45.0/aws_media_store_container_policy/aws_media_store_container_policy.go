// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_media_store_container_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_media_store_container_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMediaStoreContainerPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amscp *Resource) Type() string {
	return "aws_media_store_container_policy"
}

// LocalName returns the local name for [Resource].
func (amscp *Resource) LocalName() string {
	return amscp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amscp *Resource) Configuration() interface{} {
	return amscp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amscp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amscp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amscp *Resource) Dependencies() terra.Dependencies {
	return amscp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amscp *Resource) LifecycleManagement() *terra.Lifecycle {
	return amscp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amscp *Resource) Attributes() awsMediaStoreContainerPolicyAttributes {
	return awsMediaStoreContainerPolicyAttributes{ref: terra.ReferenceResource(amscp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amscp *Resource) ImportState(state io.Reader) error {
	amscp.state = &awsMediaStoreContainerPolicyState{}
	if err := json.NewDecoder(state).Decode(amscp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amscp.Type(), amscp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amscp *Resource) State() (*awsMediaStoreContainerPolicyState, bool) {
	return amscp.state, amscp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amscp *Resource) StateMust() *awsMediaStoreContainerPolicyState {
	if amscp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amscp.Type(), amscp.LocalName()))
	}
	return amscp.state
}

// Args contains the configurations for aws_media_store_container_policy.
type Args struct {
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
}

type awsMediaStoreContainerPolicyAttributes struct {
	ref terra.Reference
}

// ContainerName returns a reference to field container_name of aws_media_store_container_policy.
func (amscp awsMediaStoreContainerPolicyAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(amscp.ref.Append("container_name"))
}

// Id returns a reference to field id of aws_media_store_container_policy.
func (amscp awsMediaStoreContainerPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amscp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_media_store_container_policy.
func (amscp awsMediaStoreContainerPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(amscp.ref.Append("policy"))
}

type awsMediaStoreContainerPolicyState struct {
	ContainerName string `json:"container_name"`
	Id            string `json:"id"`
	Policy        string `json:"policy"`
}
