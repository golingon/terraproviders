// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_auditmanager_assessment_delegation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_auditmanager_assessment_delegation.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAuditmanagerAssessmentDelegationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaad *Resource) Type() string {
	return "aws_auditmanager_assessment_delegation"
}

// LocalName returns the local name for [Resource].
func (aaad *Resource) LocalName() string {
	return aaad.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaad *Resource) Configuration() interface{} {
	return aaad.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaad *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaad)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaad *Resource) Dependencies() terra.Dependencies {
	return aaad.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaad *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaad.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaad *Resource) Attributes() awsAuditmanagerAssessmentDelegationAttributes {
	return awsAuditmanagerAssessmentDelegationAttributes{ref: terra.ReferenceResource(aaad)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaad *Resource) ImportState(state io.Reader) error {
	aaad.state = &awsAuditmanagerAssessmentDelegationState{}
	if err := json.NewDecoder(state).Decode(aaad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaad.Type(), aaad.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaad *Resource) State() (*awsAuditmanagerAssessmentDelegationState, bool) {
	return aaad.state, aaad.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaad *Resource) StateMust() *awsAuditmanagerAssessmentDelegationState {
	if aaad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaad.Type(), aaad.LocalName()))
	}
	return aaad.state
}

// Args contains the configurations for aws_auditmanager_assessment_delegation.
type Args struct {
	// AssessmentId: string, required
	AssessmentId terra.StringValue `hcl:"assessment_id,attr" validate:"required"`
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// ControlSetId: string, required
	ControlSetId terra.StringValue `hcl:"control_set_id,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// RoleType: string, required
	RoleType terra.StringValue `hcl:"role_type,attr" validate:"required"`
}

type awsAuditmanagerAssessmentDelegationAttributes struct {
	ref terra.Reference
}

// AssessmentId returns a reference to field assessment_id of aws_auditmanager_assessment_delegation.
func (aaad awsAuditmanagerAssessmentDelegationAttributes) AssessmentId() terra.StringValue {
	return terra.ReferenceAsString(aaad.ref.Append("assessment_id"))
}

// Comment returns a reference to field comment of aws_auditmanager_assessment_delegation.
func (aaad awsAuditmanagerAssessmentDelegationAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(aaad.ref.Append("comment"))
}

// ControlSetId returns a reference to field control_set_id of aws_auditmanager_assessment_delegation.
func (aaad awsAuditmanagerAssessmentDelegationAttributes) ControlSetId() terra.StringValue {
	return terra.ReferenceAsString(aaad.ref.Append("control_set_id"))
}

// DelegationId returns a reference to field delegation_id of aws_auditmanager_assessment_delegation.
func (aaad awsAuditmanagerAssessmentDelegationAttributes) DelegationId() terra.StringValue {
	return terra.ReferenceAsString(aaad.ref.Append("delegation_id"))
}

// Id returns a reference to field id of aws_auditmanager_assessment_delegation.
func (aaad awsAuditmanagerAssessmentDelegationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaad.ref.Append("id"))
}

// RoleArn returns a reference to field role_arn of aws_auditmanager_assessment_delegation.
func (aaad awsAuditmanagerAssessmentDelegationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(aaad.ref.Append("role_arn"))
}

// RoleType returns a reference to field role_type of aws_auditmanager_assessment_delegation.
func (aaad awsAuditmanagerAssessmentDelegationAttributes) RoleType() terra.StringValue {
	return terra.ReferenceAsString(aaad.ref.Append("role_type"))
}

// Status returns a reference to field status of aws_auditmanager_assessment_delegation.
func (aaad awsAuditmanagerAssessmentDelegationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aaad.ref.Append("status"))
}

type awsAuditmanagerAssessmentDelegationState struct {
	AssessmentId string `json:"assessment_id"`
	Comment      string `json:"comment"`
	ControlSetId string `json:"control_set_id"`
	DelegationId string `json:"delegation_id"`
	Id           string `json:"id"`
	RoleArn      string `json:"role_arn"`
	RoleType     string `json:"role_type"`
	Status       string `json:"status"`
}
