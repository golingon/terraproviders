// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_controltower_control

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_controltower_control.
type Resource struct {
	Name      string
	Args      Args
	state     *awsControltowerControlState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acc *Resource) Type() string {
	return "aws_controltower_control"
}

// LocalName returns the local name for [Resource].
func (acc *Resource) LocalName() string {
	return acc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acc *Resource) Configuration() interface{} {
	return acc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acc *Resource) Dependencies() terra.Dependencies {
	return acc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acc *Resource) Attributes() awsControltowerControlAttributes {
	return awsControltowerControlAttributes{ref: terra.ReferenceResource(acc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acc *Resource) ImportState(state io.Reader) error {
	acc.state = &awsControltowerControlState{}
	if err := json.NewDecoder(state).Decode(acc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acc.Type(), acc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acc *Resource) State() (*awsControltowerControlState, bool) {
	return acc.state, acc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acc *Resource) StateMust() *awsControltowerControlState {
	if acc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acc.Type(), acc.LocalName()))
	}
	return acc.state
}

// Args contains the configurations for aws_controltower_control.
type Args struct {
	// ControlIdentifier: string, required
	ControlIdentifier terra.StringValue `hcl:"control_identifier,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TargetIdentifier: string, required
	TargetIdentifier terra.StringValue `hcl:"target_identifier,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsControltowerControlAttributes struct {
	ref terra.Reference
}

// ControlIdentifier returns a reference to field control_identifier of aws_controltower_control.
func (acc awsControltowerControlAttributes) ControlIdentifier() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("control_identifier"))
}

// Id returns a reference to field id of aws_controltower_control.
func (acc awsControltowerControlAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("id"))
}

// TargetIdentifier returns a reference to field target_identifier of aws_controltower_control.
func (acc awsControltowerControlAttributes) TargetIdentifier() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("target_identifier"))
}

func (acc awsControltowerControlAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acc.ref.Append("timeouts"))
}

type awsControltowerControlState struct {
	ControlIdentifier string         `json:"control_identifier"`
	Id                string         `json:"id"`
	TargetIdentifier  string         `json:"target_identifier"`
	Timeouts          *TimeoutsState `json:"timeouts"`
}
