// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_pinpoint_app

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_pinpoint_app.
type Resource struct {
	Name      string
	Args      Args
	state     *awsPinpointAppState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apa *Resource) Type() string {
	return "aws_pinpoint_app"
}

// LocalName returns the local name for [Resource].
func (apa *Resource) LocalName() string {
	return apa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apa *Resource) Configuration() interface{} {
	return apa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apa *Resource) Dependencies() terra.Dependencies {
	return apa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apa *Resource) LifecycleManagement() *terra.Lifecycle {
	return apa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apa *Resource) Attributes() awsPinpointAppAttributes {
	return awsPinpointAppAttributes{ref: terra.ReferenceResource(apa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apa *Resource) ImportState(state io.Reader) error {
	apa.state = &awsPinpointAppState{}
	if err := json.NewDecoder(state).Decode(apa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apa.Type(), apa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apa *Resource) State() (*awsPinpointAppState, bool) {
	return apa.state, apa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apa *Resource) StateMust() *awsPinpointAppState {
	if apa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apa.Type(), apa.LocalName()))
	}
	return apa.state
}

// Args contains the configurations for aws_pinpoint_app.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CampaignHook: optional
	CampaignHook *CampaignHook `hcl:"campaign_hook,block"`
	// Limits: optional
	Limits *Limits `hcl:"limits,block"`
	// QuietTime: optional
	QuietTime *QuietTime `hcl:"quiet_time,block"`
}

type awsPinpointAppAttributes struct {
	ref terra.Reference
}

// ApplicationId returns a reference to field application_id of aws_pinpoint_app.
func (apa awsPinpointAppAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceAsString(apa.ref.Append("application_id"))
}

// Arn returns a reference to field arn of aws_pinpoint_app.
func (apa awsPinpointAppAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(apa.ref.Append("arn"))
}

// Id returns a reference to field id of aws_pinpoint_app.
func (apa awsPinpointAppAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apa.ref.Append("id"))
}

// Name returns a reference to field name of aws_pinpoint_app.
func (apa awsPinpointAppAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(apa.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_pinpoint_app.
func (apa awsPinpointAppAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(apa.ref.Append("name_prefix"))
}

// Tags returns a reference to field tags of aws_pinpoint_app.
func (apa awsPinpointAppAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](apa.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_pinpoint_app.
func (apa awsPinpointAppAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](apa.ref.Append("tags_all"))
}

func (apa awsPinpointAppAttributes) CampaignHook() terra.ListValue[CampaignHookAttributes] {
	return terra.ReferenceAsList[CampaignHookAttributes](apa.ref.Append("campaign_hook"))
}

func (apa awsPinpointAppAttributes) Limits() terra.ListValue[LimitsAttributes] {
	return terra.ReferenceAsList[LimitsAttributes](apa.ref.Append("limits"))
}

func (apa awsPinpointAppAttributes) QuietTime() terra.ListValue[QuietTimeAttributes] {
	return terra.ReferenceAsList[QuietTimeAttributes](apa.ref.Append("quiet_time"))
}

type awsPinpointAppState struct {
	ApplicationId string              `json:"application_id"`
	Arn           string              `json:"arn"`
	Id            string              `json:"id"`
	Name          string              `json:"name"`
	NamePrefix    string              `json:"name_prefix"`
	Tags          map[string]string   `json:"tags"`
	TagsAll       map[string]string   `json:"tags_all"`
	CampaignHook  []CampaignHookState `json:"campaign_hook"`
	Limits        []LimitsState       `json:"limits"`
	QuietTime     []QuietTimeState    `json:"quiet_time"`
}
