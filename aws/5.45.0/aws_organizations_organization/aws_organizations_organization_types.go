// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_organizations_organization

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AccountsAttributes struct {
	ref terra.Reference
}

func (a AccountsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AccountsAttributes) InternalWithRef(ref terra.Reference) AccountsAttributes {
	return AccountsAttributes{ref: ref}
}

func (a AccountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AccountsAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("arn"))
}

func (a AccountsAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("email"))
}

func (a AccountsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("id"))
}

func (a AccountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a AccountsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("status"))
}

type NonMasterAccountsAttributes struct {
	ref terra.Reference
}

func (nma NonMasterAccountsAttributes) InternalRef() (terra.Reference, error) {
	return nma.ref, nil
}

func (nma NonMasterAccountsAttributes) InternalWithRef(ref terra.Reference) NonMasterAccountsAttributes {
	return NonMasterAccountsAttributes{ref: ref}
}

func (nma NonMasterAccountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nma.ref.InternalTokens()
}

func (nma NonMasterAccountsAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(nma.ref.Append("arn"))
}

func (nma NonMasterAccountsAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(nma.ref.Append("email"))
}

func (nma NonMasterAccountsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nma.ref.Append("id"))
}

func (nma NonMasterAccountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nma.ref.Append("name"))
}

func (nma NonMasterAccountsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(nma.ref.Append("status"))
}

type RootsAttributes struct {
	ref terra.Reference
}

func (r RootsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RootsAttributes) InternalWithRef(ref terra.Reference) RootsAttributes {
	return RootsAttributes{ref: ref}
}

func (r RootsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RootsAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("arn"))
}

func (r RootsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r RootsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

func (r RootsAttributes) PolicyTypes() terra.ListValue[RootsPolicyTypesAttributes] {
	return terra.ReferenceAsList[RootsPolicyTypesAttributes](r.ref.Append("policy_types"))
}

type RootsPolicyTypesAttributes struct {
	ref terra.Reference
}

func (pt RootsPolicyTypesAttributes) InternalRef() (terra.Reference, error) {
	return pt.ref, nil
}

func (pt RootsPolicyTypesAttributes) InternalWithRef(ref terra.Reference) RootsPolicyTypesAttributes {
	return RootsPolicyTypesAttributes{ref: ref}
}

func (pt RootsPolicyTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pt.ref.InternalTokens()
}

func (pt RootsPolicyTypesAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("status"))
}

func (pt RootsPolicyTypesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("type"))
}

type AccountsState struct {
	Arn    string `json:"arn"`
	Email  string `json:"email"`
	Id     string `json:"id"`
	Name   string `json:"name"`
	Status string `json:"status"`
}

type NonMasterAccountsState struct {
	Arn    string `json:"arn"`
	Email  string `json:"email"`
	Id     string `json:"id"`
	Name   string `json:"name"`
	Status string `json:"status"`
}

type RootsState struct {
	Arn         string                  `json:"arn"`
	Id          string                  `json:"id"`
	Name        string                  `json:"name"`
	PolicyTypes []RootsPolicyTypesState `json:"policy_types"`
}

type RootsPolicyTypesState struct {
	Status string `json:"status"`
	Type   string `json:"type"`
}
