// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_organizations_organization

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_organizations_organization.
type Resource struct {
	Name      string
	Args      Args
	state     *awsOrganizationsOrganizationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aoo *Resource) Type() string {
	return "aws_organizations_organization"
}

// LocalName returns the local name for [Resource].
func (aoo *Resource) LocalName() string {
	return aoo.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aoo *Resource) Configuration() interface{} {
	return aoo.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aoo *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aoo)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aoo *Resource) Dependencies() terra.Dependencies {
	return aoo.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aoo *Resource) LifecycleManagement() *terra.Lifecycle {
	return aoo.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aoo *Resource) Attributes() awsOrganizationsOrganizationAttributes {
	return awsOrganizationsOrganizationAttributes{ref: terra.ReferenceResource(aoo)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aoo *Resource) ImportState(state io.Reader) error {
	aoo.state = &awsOrganizationsOrganizationState{}
	if err := json.NewDecoder(state).Decode(aoo.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aoo.Type(), aoo.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aoo *Resource) State() (*awsOrganizationsOrganizationState, bool) {
	return aoo.state, aoo.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aoo *Resource) StateMust() *awsOrganizationsOrganizationState {
	if aoo.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aoo.Type(), aoo.LocalName()))
	}
	return aoo.state
}

// Args contains the configurations for aws_organizations_organization.
type Args struct {
	// AwsServiceAccessPrincipals: set of string, optional
	AwsServiceAccessPrincipals terra.SetValue[terra.StringValue] `hcl:"aws_service_access_principals,attr"`
	// EnabledPolicyTypes: set of string, optional
	EnabledPolicyTypes terra.SetValue[terra.StringValue] `hcl:"enabled_policy_types,attr"`
	// FeatureSet: string, optional
	FeatureSet terra.StringValue `hcl:"feature_set,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsOrganizationsOrganizationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_organizations_organization.
func (aoo awsOrganizationsOrganizationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aoo.ref.Append("arn"))
}

// AwsServiceAccessPrincipals returns a reference to field aws_service_access_principals of aws_organizations_organization.
func (aoo awsOrganizationsOrganizationAttributes) AwsServiceAccessPrincipals() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aoo.ref.Append("aws_service_access_principals"))
}

// EnabledPolicyTypes returns a reference to field enabled_policy_types of aws_organizations_organization.
func (aoo awsOrganizationsOrganizationAttributes) EnabledPolicyTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aoo.ref.Append("enabled_policy_types"))
}

// FeatureSet returns a reference to field feature_set of aws_organizations_organization.
func (aoo awsOrganizationsOrganizationAttributes) FeatureSet() terra.StringValue {
	return terra.ReferenceAsString(aoo.ref.Append("feature_set"))
}

// Id returns a reference to field id of aws_organizations_organization.
func (aoo awsOrganizationsOrganizationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aoo.ref.Append("id"))
}

// MasterAccountArn returns a reference to field master_account_arn of aws_organizations_organization.
func (aoo awsOrganizationsOrganizationAttributes) MasterAccountArn() terra.StringValue {
	return terra.ReferenceAsString(aoo.ref.Append("master_account_arn"))
}

// MasterAccountEmail returns a reference to field master_account_email of aws_organizations_organization.
func (aoo awsOrganizationsOrganizationAttributes) MasterAccountEmail() terra.StringValue {
	return terra.ReferenceAsString(aoo.ref.Append("master_account_email"))
}

// MasterAccountId returns a reference to field master_account_id of aws_organizations_organization.
func (aoo awsOrganizationsOrganizationAttributes) MasterAccountId() terra.StringValue {
	return terra.ReferenceAsString(aoo.ref.Append("master_account_id"))
}

func (aoo awsOrganizationsOrganizationAttributes) Accounts() terra.ListValue[AccountsAttributes] {
	return terra.ReferenceAsList[AccountsAttributes](aoo.ref.Append("accounts"))
}

func (aoo awsOrganizationsOrganizationAttributes) NonMasterAccounts() terra.ListValue[NonMasterAccountsAttributes] {
	return terra.ReferenceAsList[NonMasterAccountsAttributes](aoo.ref.Append("non_master_accounts"))
}

func (aoo awsOrganizationsOrganizationAttributes) Roots() terra.ListValue[RootsAttributes] {
	return terra.ReferenceAsList[RootsAttributes](aoo.ref.Append("roots"))
}

type awsOrganizationsOrganizationState struct {
	Arn                        string                   `json:"arn"`
	AwsServiceAccessPrincipals []string                 `json:"aws_service_access_principals"`
	EnabledPolicyTypes         []string                 `json:"enabled_policy_types"`
	FeatureSet                 string                   `json:"feature_set"`
	Id                         string                   `json:"id"`
	MasterAccountArn           string                   `json:"master_account_arn"`
	MasterAccountEmail         string                   `json:"master_account_email"`
	MasterAccountId            string                   `json:"master_account_id"`
	Accounts                   []AccountsState          `json:"accounts"`
	NonMasterAccounts          []NonMasterAccountsState `json:"non_master_accounts"`
	Roots                      []RootsState             `json:"roots"`
}
