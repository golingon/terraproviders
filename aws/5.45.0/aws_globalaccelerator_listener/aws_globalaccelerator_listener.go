// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_globalaccelerator_listener

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_globalaccelerator_listener.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlobalacceleratorListenerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agl *Resource) Type() string {
	return "aws_globalaccelerator_listener"
}

// LocalName returns the local name for [Resource].
func (agl *Resource) LocalName() string {
	return agl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agl *Resource) Configuration() interface{} {
	return agl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agl *Resource) Dependencies() terra.Dependencies {
	return agl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agl *Resource) LifecycleManagement() *terra.Lifecycle {
	return agl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agl *Resource) Attributes() awsGlobalacceleratorListenerAttributes {
	return awsGlobalacceleratorListenerAttributes{ref: terra.ReferenceResource(agl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agl *Resource) ImportState(state io.Reader) error {
	agl.state = &awsGlobalacceleratorListenerState{}
	if err := json.NewDecoder(state).Decode(agl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agl.Type(), agl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agl *Resource) State() (*awsGlobalacceleratorListenerState, bool) {
	return agl.state, agl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agl *Resource) StateMust() *awsGlobalacceleratorListenerState {
	if agl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agl.Type(), agl.LocalName()))
	}
	return agl.state
}

// Args contains the configurations for aws_globalaccelerator_listener.
type Args struct {
	// AcceleratorArn: string, required
	AcceleratorArn terra.StringValue `hcl:"accelerator_arn,attr" validate:"required"`
	// ClientAffinity: string, optional
	ClientAffinity terra.StringValue `hcl:"client_affinity,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// PortRange: min=1,max=10
	PortRange []PortRange `hcl:"port_range,block" validate:"min=1,max=10"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsGlobalacceleratorListenerAttributes struct {
	ref terra.Reference
}

// AcceleratorArn returns a reference to field accelerator_arn of aws_globalaccelerator_listener.
func (agl awsGlobalacceleratorListenerAttributes) AcceleratorArn() terra.StringValue {
	return terra.ReferenceAsString(agl.ref.Append("accelerator_arn"))
}

// ClientAffinity returns a reference to field client_affinity of aws_globalaccelerator_listener.
func (agl awsGlobalacceleratorListenerAttributes) ClientAffinity() terra.StringValue {
	return terra.ReferenceAsString(agl.ref.Append("client_affinity"))
}

// Id returns a reference to field id of aws_globalaccelerator_listener.
func (agl awsGlobalacceleratorListenerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agl.ref.Append("id"))
}

// Protocol returns a reference to field protocol of aws_globalaccelerator_listener.
func (agl awsGlobalacceleratorListenerAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(agl.ref.Append("protocol"))
}

func (agl awsGlobalacceleratorListenerAttributes) PortRange() terra.SetValue[PortRangeAttributes] {
	return terra.ReferenceAsSet[PortRangeAttributes](agl.ref.Append("port_range"))
}

func (agl awsGlobalacceleratorListenerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](agl.ref.Append("timeouts"))
}

type awsGlobalacceleratorListenerState struct {
	AcceleratorArn string           `json:"accelerator_arn"`
	ClientAffinity string           `json:"client_affinity"`
	Id             string           `json:"id"`
	Protocol       string           `json:"protocol"`
	PortRange      []PortRangeState `json:"port_range"`
	Timeouts       *TimeoutsState   `json:"timeouts"`
}
