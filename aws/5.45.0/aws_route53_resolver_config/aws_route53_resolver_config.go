// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_resolver_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53_resolver_config.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53ResolverConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arrc *Resource) Type() string {
	return "aws_route53_resolver_config"
}

// LocalName returns the local name for [Resource].
func (arrc *Resource) LocalName() string {
	return arrc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arrc *Resource) Configuration() interface{} {
	return arrc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arrc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arrc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arrc *Resource) Dependencies() terra.Dependencies {
	return arrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arrc *Resource) LifecycleManagement() *terra.Lifecycle {
	return arrc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arrc *Resource) Attributes() awsRoute53ResolverConfigAttributes {
	return awsRoute53ResolverConfigAttributes{ref: terra.ReferenceResource(arrc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arrc *Resource) ImportState(state io.Reader) error {
	arrc.state = &awsRoute53ResolverConfigState{}
	if err := json.NewDecoder(state).Decode(arrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arrc.Type(), arrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arrc *Resource) State() (*awsRoute53ResolverConfigState, bool) {
	return arrc.state, arrc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arrc *Resource) StateMust() *awsRoute53ResolverConfigState {
	if arrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arrc.Type(), arrc.LocalName()))
	}
	return arrc.state
}

// Args contains the configurations for aws_route53_resolver_config.
type Args struct {
	// AutodefinedReverseFlag: string, required
	AutodefinedReverseFlag terra.StringValue `hcl:"autodefined_reverse_flag,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
}

type awsRoute53ResolverConfigAttributes struct {
	ref terra.Reference
}

// AutodefinedReverseFlag returns a reference to field autodefined_reverse_flag of aws_route53_resolver_config.
func (arrc awsRoute53ResolverConfigAttributes) AutodefinedReverseFlag() terra.StringValue {
	return terra.ReferenceAsString(arrc.ref.Append("autodefined_reverse_flag"))
}

// Id returns a reference to field id of aws_route53_resolver_config.
func (arrc awsRoute53ResolverConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arrc.ref.Append("id"))
}

// OwnerId returns a reference to field owner_id of aws_route53_resolver_config.
func (arrc awsRoute53ResolverConfigAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(arrc.ref.Append("owner_id"))
}

// ResourceId returns a reference to field resource_id of aws_route53_resolver_config.
func (arrc awsRoute53ResolverConfigAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceAsString(arrc.ref.Append("resource_id"))
}

type awsRoute53ResolverConfigState struct {
	AutodefinedReverseFlag string `json:"autodefined_reverse_flag"`
	Id                     string `json:"id"`
	OwnerId                string `json:"owner_id"`
	ResourceId             string `json:"resource_id"`
}
