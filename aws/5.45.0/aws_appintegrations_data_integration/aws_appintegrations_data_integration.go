// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appintegrations_data_integration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_appintegrations_data_integration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppintegrationsDataIntegrationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aadi *Resource) Type() string {
	return "aws_appintegrations_data_integration"
}

// LocalName returns the local name for [Resource].
func (aadi *Resource) LocalName() string {
	return aadi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aadi *Resource) Configuration() interface{} {
	return aadi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aadi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aadi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aadi *Resource) Dependencies() terra.Dependencies {
	return aadi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aadi *Resource) LifecycleManagement() *terra.Lifecycle {
	return aadi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aadi *Resource) Attributes() awsAppintegrationsDataIntegrationAttributes {
	return awsAppintegrationsDataIntegrationAttributes{ref: terra.ReferenceResource(aadi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aadi *Resource) ImportState(state io.Reader) error {
	aadi.state = &awsAppintegrationsDataIntegrationState{}
	if err := json.NewDecoder(state).Decode(aadi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aadi.Type(), aadi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aadi *Resource) State() (*awsAppintegrationsDataIntegrationState, bool) {
	return aadi.state, aadi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aadi *Resource) StateMust() *awsAppintegrationsDataIntegrationState {
	if aadi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aadi.Type(), aadi.LocalName()))
	}
	return aadi.state
}

// Args contains the configurations for aws_appintegrations_data_integration.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKey: string, required
	KmsKey terra.StringValue `hcl:"kms_key,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SourceUri: string, required
	SourceUri terra.StringValue `hcl:"source_uri,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ScheduleConfig: required
	ScheduleConfig *ScheduleConfig `hcl:"schedule_config,block" validate:"required"`
}

type awsAppintegrationsDataIntegrationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_appintegrations_data_integration.
func (aadi awsAppintegrationsDataIntegrationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aadi.ref.Append("arn"))
}

// Description returns a reference to field description of aws_appintegrations_data_integration.
func (aadi awsAppintegrationsDataIntegrationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aadi.ref.Append("description"))
}

// Id returns a reference to field id of aws_appintegrations_data_integration.
func (aadi awsAppintegrationsDataIntegrationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aadi.ref.Append("id"))
}

// KmsKey returns a reference to field kms_key of aws_appintegrations_data_integration.
func (aadi awsAppintegrationsDataIntegrationAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(aadi.ref.Append("kms_key"))
}

// Name returns a reference to field name of aws_appintegrations_data_integration.
func (aadi awsAppintegrationsDataIntegrationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aadi.ref.Append("name"))
}

// SourceUri returns a reference to field source_uri of aws_appintegrations_data_integration.
func (aadi awsAppintegrationsDataIntegrationAttributes) SourceUri() terra.StringValue {
	return terra.ReferenceAsString(aadi.ref.Append("source_uri"))
}

// Tags returns a reference to field tags of aws_appintegrations_data_integration.
func (aadi awsAppintegrationsDataIntegrationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aadi.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_appintegrations_data_integration.
func (aadi awsAppintegrationsDataIntegrationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aadi.ref.Append("tags_all"))
}

func (aadi awsAppintegrationsDataIntegrationAttributes) ScheduleConfig() terra.ListValue[ScheduleConfigAttributes] {
	return terra.ReferenceAsList[ScheduleConfigAttributes](aadi.ref.Append("schedule_config"))
}

type awsAppintegrationsDataIntegrationState struct {
	Arn            string                `json:"arn"`
	Description    string                `json:"description"`
	Id             string                `json:"id"`
	KmsKey         string                `json:"kms_key"`
	Name           string                `json:"name"`
	SourceUri      string                `json:"source_uri"`
	Tags           map[string]string     `json:"tags"`
	TagsAll        map[string]string     `json:"tags_all"`
	ScheduleConfig []ScheduleConfigState `json:"schedule_config"`
}
