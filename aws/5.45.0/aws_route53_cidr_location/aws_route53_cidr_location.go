// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_cidr_location

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53_cidr_location.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53CidrLocationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arcl *Resource) Type() string {
	return "aws_route53_cidr_location"
}

// LocalName returns the local name for [Resource].
func (arcl *Resource) LocalName() string {
	return arcl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arcl *Resource) Configuration() interface{} {
	return arcl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arcl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arcl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arcl *Resource) Dependencies() terra.Dependencies {
	return arcl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arcl *Resource) LifecycleManagement() *terra.Lifecycle {
	return arcl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arcl *Resource) Attributes() awsRoute53CidrLocationAttributes {
	return awsRoute53CidrLocationAttributes{ref: terra.ReferenceResource(arcl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arcl *Resource) ImportState(state io.Reader) error {
	arcl.state = &awsRoute53CidrLocationState{}
	if err := json.NewDecoder(state).Decode(arcl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arcl.Type(), arcl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arcl *Resource) State() (*awsRoute53CidrLocationState, bool) {
	return arcl.state, arcl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arcl *Resource) StateMust() *awsRoute53CidrLocationState {
	if arcl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arcl.Type(), arcl.LocalName()))
	}
	return arcl.state
}

// Args contains the configurations for aws_route53_cidr_location.
type Args struct {
	// CidrBlocks: set of string, required
	CidrBlocks terra.SetValue[terra.StringValue] `hcl:"cidr_blocks,attr" validate:"required"`
	// CidrCollectionId: string, required
	CidrCollectionId terra.StringValue `hcl:"cidr_collection_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type awsRoute53CidrLocationAttributes struct {
	ref terra.Reference
}

// CidrBlocks returns a reference to field cidr_blocks of aws_route53_cidr_location.
func (arcl awsRoute53CidrLocationAttributes) CidrBlocks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arcl.ref.Append("cidr_blocks"))
}

// CidrCollectionId returns a reference to field cidr_collection_id of aws_route53_cidr_location.
func (arcl awsRoute53CidrLocationAttributes) CidrCollectionId() terra.StringValue {
	return terra.ReferenceAsString(arcl.ref.Append("cidr_collection_id"))
}

// Id returns a reference to field id of aws_route53_cidr_location.
func (arcl awsRoute53CidrLocationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arcl.ref.Append("id"))
}

// Name returns a reference to field name of aws_route53_cidr_location.
func (arcl awsRoute53CidrLocationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arcl.ref.Append("name"))
}

type awsRoute53CidrLocationState struct {
	CidrBlocks       []string `json:"cidr_blocks"`
	CidrCollectionId string   `json:"cidr_collection_id"`
	Id               string   `json:"id"`
	Name             string   `json:"name"`
}
