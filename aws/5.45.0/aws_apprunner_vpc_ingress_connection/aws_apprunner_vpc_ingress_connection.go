// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_apprunner_vpc_ingress_connection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_apprunner_vpc_ingress_connection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApprunnerVpcIngressConnectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aavic *Resource) Type() string {
	return "aws_apprunner_vpc_ingress_connection"
}

// LocalName returns the local name for [Resource].
func (aavic *Resource) LocalName() string {
	return aavic.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aavic *Resource) Configuration() interface{} {
	return aavic.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aavic *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aavic)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aavic *Resource) Dependencies() terra.Dependencies {
	return aavic.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aavic *Resource) LifecycleManagement() *terra.Lifecycle {
	return aavic.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aavic *Resource) Attributes() awsApprunnerVpcIngressConnectionAttributes {
	return awsApprunnerVpcIngressConnectionAttributes{ref: terra.ReferenceResource(aavic)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aavic *Resource) ImportState(state io.Reader) error {
	aavic.state = &awsApprunnerVpcIngressConnectionState{}
	if err := json.NewDecoder(state).Decode(aavic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aavic.Type(), aavic.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aavic *Resource) State() (*awsApprunnerVpcIngressConnectionState, bool) {
	return aavic.state, aavic.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aavic *Resource) StateMust() *awsApprunnerVpcIngressConnectionState {
	if aavic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aavic.Type(), aavic.LocalName()))
	}
	return aavic.state
}

// Args contains the configurations for aws_apprunner_vpc_ingress_connection.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServiceArn: string, required
	ServiceArn terra.StringValue `hcl:"service_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// IngressVpcConfiguration: required
	IngressVpcConfiguration *IngressVpcConfiguration `hcl:"ingress_vpc_configuration,block" validate:"required"`
}

type awsApprunnerVpcIngressConnectionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_apprunner_vpc_ingress_connection.
func (aavic awsApprunnerVpcIngressConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aavic.ref.Append("arn"))
}

// DomainName returns a reference to field domain_name of aws_apprunner_vpc_ingress_connection.
func (aavic awsApprunnerVpcIngressConnectionAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(aavic.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_apprunner_vpc_ingress_connection.
func (aavic awsApprunnerVpcIngressConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aavic.ref.Append("id"))
}

// Name returns a reference to field name of aws_apprunner_vpc_ingress_connection.
func (aavic awsApprunnerVpcIngressConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aavic.ref.Append("name"))
}

// ServiceArn returns a reference to field service_arn of aws_apprunner_vpc_ingress_connection.
func (aavic awsApprunnerVpcIngressConnectionAttributes) ServiceArn() terra.StringValue {
	return terra.ReferenceAsString(aavic.ref.Append("service_arn"))
}

// Status returns a reference to field status of aws_apprunner_vpc_ingress_connection.
func (aavic awsApprunnerVpcIngressConnectionAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aavic.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_apprunner_vpc_ingress_connection.
func (aavic awsApprunnerVpcIngressConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aavic.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_apprunner_vpc_ingress_connection.
func (aavic awsApprunnerVpcIngressConnectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aavic.ref.Append("tags_all"))
}

func (aavic awsApprunnerVpcIngressConnectionAttributes) IngressVpcConfiguration() terra.ListValue[IngressVpcConfigurationAttributes] {
	return terra.ReferenceAsList[IngressVpcConfigurationAttributes](aavic.ref.Append("ingress_vpc_configuration"))
}

type awsApprunnerVpcIngressConnectionState struct {
	Arn                     string                         `json:"arn"`
	DomainName              string                         `json:"domain_name"`
	Id                      string                         `json:"id"`
	Name                    string                         `json:"name"`
	ServiceArn              string                         `json:"service_arn"`
	Status                  string                         `json:"status"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	IngressVpcConfiguration []IngressVpcConfigurationState `json:"ingress_vpc_configuration"`
}
