// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_managed_prefix_list_entry

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_managed_prefix_list_entry.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2ManagedPrefixListEntryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aemple *Resource) Type() string {
	return "aws_ec2_managed_prefix_list_entry"
}

// LocalName returns the local name for [Resource].
func (aemple *Resource) LocalName() string {
	return aemple.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aemple *Resource) Configuration() interface{} {
	return aemple.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aemple *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aemple)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aemple *Resource) Dependencies() terra.Dependencies {
	return aemple.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aemple *Resource) LifecycleManagement() *terra.Lifecycle {
	return aemple.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aemple *Resource) Attributes() awsEc2ManagedPrefixListEntryAttributes {
	return awsEc2ManagedPrefixListEntryAttributes{ref: terra.ReferenceResource(aemple)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aemple *Resource) ImportState(state io.Reader) error {
	aemple.state = &awsEc2ManagedPrefixListEntryState{}
	if err := json.NewDecoder(state).Decode(aemple.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aemple.Type(), aemple.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aemple *Resource) State() (*awsEc2ManagedPrefixListEntryState, bool) {
	return aemple.state, aemple.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aemple *Resource) StateMust() *awsEc2ManagedPrefixListEntryState {
	if aemple.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aemple.Type(), aemple.LocalName()))
	}
	return aemple.state
}

// Args contains the configurations for aws_ec2_managed_prefix_list_entry.
type Args struct {
	// Cidr: string, required
	Cidr terra.StringValue `hcl:"cidr,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PrefixListId: string, required
	PrefixListId terra.StringValue `hcl:"prefix_list_id,attr" validate:"required"`
}

type awsEc2ManagedPrefixListEntryAttributes struct {
	ref terra.Reference
}

// Cidr returns a reference to field cidr of aws_ec2_managed_prefix_list_entry.
func (aemple awsEc2ManagedPrefixListEntryAttributes) Cidr() terra.StringValue {
	return terra.ReferenceAsString(aemple.ref.Append("cidr"))
}

// Description returns a reference to field description of aws_ec2_managed_prefix_list_entry.
func (aemple awsEc2ManagedPrefixListEntryAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aemple.ref.Append("description"))
}

// Id returns a reference to field id of aws_ec2_managed_prefix_list_entry.
func (aemple awsEc2ManagedPrefixListEntryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aemple.ref.Append("id"))
}

// PrefixListId returns a reference to field prefix_list_id of aws_ec2_managed_prefix_list_entry.
func (aemple awsEc2ManagedPrefixListEntryAttributes) PrefixListId() terra.StringValue {
	return terra.ReferenceAsString(aemple.ref.Append("prefix_list_id"))
}

type awsEc2ManagedPrefixListEntryState struct {
	Cidr         string `json:"cidr"`
	Description  string `json:"description"`
	Id           string `json:"id"`
	PrefixListId string `json:"prefix_list_id"`
}
