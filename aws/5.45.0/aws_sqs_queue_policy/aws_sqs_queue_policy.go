// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sqs_queue_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sqs_queue_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSqsQueuePolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asqp *Resource) Type() string {
	return "aws_sqs_queue_policy"
}

// LocalName returns the local name for [Resource].
func (asqp *Resource) LocalName() string {
	return asqp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asqp *Resource) Configuration() interface{} {
	return asqp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asqp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asqp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asqp *Resource) Dependencies() terra.Dependencies {
	return asqp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asqp *Resource) LifecycleManagement() *terra.Lifecycle {
	return asqp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asqp *Resource) Attributes() awsSqsQueuePolicyAttributes {
	return awsSqsQueuePolicyAttributes{ref: terra.ReferenceResource(asqp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asqp *Resource) ImportState(state io.Reader) error {
	asqp.state = &awsSqsQueuePolicyState{}
	if err := json.NewDecoder(state).Decode(asqp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asqp.Type(), asqp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asqp *Resource) State() (*awsSqsQueuePolicyState, bool) {
	return asqp.state, asqp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asqp *Resource) StateMust() *awsSqsQueuePolicyState {
	if asqp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asqp.Type(), asqp.LocalName()))
	}
	return asqp.state
}

// Args contains the configurations for aws_sqs_queue_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// QueueUrl: string, required
	QueueUrl terra.StringValue `hcl:"queue_url,attr" validate:"required"`
}

type awsSqsQueuePolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_sqs_queue_policy.
func (asqp awsSqsQueuePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asqp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_sqs_queue_policy.
func (asqp awsSqsQueuePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(asqp.ref.Append("policy"))
}

// QueueUrl returns a reference to field queue_url of aws_sqs_queue_policy.
func (asqp awsSqsQueuePolicyAttributes) QueueUrl() terra.StringValue {
	return terra.ReferenceAsString(asqp.ref.Append("queue_url"))
}

type awsSqsQueuePolicyState struct {
	Id       string `json:"id"`
	Policy   string `json:"policy"`
	QueueUrl string `json:"queue_url"`
}
