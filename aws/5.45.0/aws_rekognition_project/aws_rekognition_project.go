// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_rekognition_project

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_rekognition_project.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRekognitionProjectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arp *Resource) Type() string {
	return "aws_rekognition_project"
}

// LocalName returns the local name for [Resource].
func (arp *Resource) LocalName() string {
	return arp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arp *Resource) Configuration() interface{} {
	return arp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arp *Resource) Dependencies() terra.Dependencies {
	return arp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arp *Resource) LifecycleManagement() *terra.Lifecycle {
	return arp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arp *Resource) Attributes() awsRekognitionProjectAttributes {
	return awsRekognitionProjectAttributes{ref: terra.ReferenceResource(arp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arp *Resource) ImportState(state io.Reader) error {
	arp.state = &awsRekognitionProjectState{}
	if err := json.NewDecoder(state).Decode(arp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arp.Type(), arp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arp *Resource) State() (*awsRekognitionProjectState, bool) {
	return arp.state, arp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arp *Resource) StateMust() *awsRekognitionProjectState {
	if arp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arp.Type(), arp.LocalName()))
	}
	return arp.state
}

// Args contains the configurations for aws_rekognition_project.
type Args struct {
	// AutoUpdate: string, optional
	AutoUpdate terra.StringValue `hcl:"auto_update,attr"`
	// Feature: string, optional
	Feature terra.StringValue `hcl:"feature,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRekognitionProjectAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_rekognition_project.
func (arp awsRekognitionProjectAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("arn"))
}

// AutoUpdate returns a reference to field auto_update of aws_rekognition_project.
func (arp awsRekognitionProjectAttributes) AutoUpdate() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("auto_update"))
}

// Feature returns a reference to field feature of aws_rekognition_project.
func (arp awsRekognitionProjectAttributes) Feature() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("feature"))
}

// Id returns a reference to field id of aws_rekognition_project.
func (arp awsRekognitionProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("id"))
}

// Name returns a reference to field name of aws_rekognition_project.
func (arp awsRekognitionProjectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("name"))
}

func (arp awsRekognitionProjectAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arp.ref.Append("timeouts"))
}

type awsRekognitionProjectState struct {
	Arn        string         `json:"arn"`
	AutoUpdate string         `json:"auto_update"`
	Feature    string         `json:"feature"`
	Id         string         `json:"id"`
	Name       string         `json:"name"`
	Timeouts   *TimeoutsState `json:"timeouts"`
}
