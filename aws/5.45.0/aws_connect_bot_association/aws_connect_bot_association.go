// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_bot_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_connect_bot_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConnectBotAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acba *Resource) Type() string {
	return "aws_connect_bot_association"
}

// LocalName returns the local name for [Resource].
func (acba *Resource) LocalName() string {
	return acba.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acba *Resource) Configuration() interface{} {
	return acba.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acba *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acba)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acba *Resource) Dependencies() terra.Dependencies {
	return acba.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acba *Resource) LifecycleManagement() *terra.Lifecycle {
	return acba.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acba *Resource) Attributes() awsConnectBotAssociationAttributes {
	return awsConnectBotAssociationAttributes{ref: terra.ReferenceResource(acba)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acba *Resource) ImportState(state io.Reader) error {
	acba.state = &awsConnectBotAssociationState{}
	if err := json.NewDecoder(state).Decode(acba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acba.Type(), acba.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acba *Resource) State() (*awsConnectBotAssociationState, bool) {
	return acba.state, acba.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acba *Resource) StateMust() *awsConnectBotAssociationState {
	if acba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acba.Type(), acba.LocalName()))
	}
	return acba.state
}

// Args contains the configurations for aws_connect_bot_association.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// LexBot: required
	LexBot *LexBot `hcl:"lex_bot,block" validate:"required"`
}

type awsConnectBotAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_connect_bot_association.
func (acba awsConnectBotAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acba.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_connect_bot_association.
func (acba awsConnectBotAssociationAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(acba.ref.Append("instance_id"))
}

func (acba awsConnectBotAssociationAttributes) LexBot() terra.ListValue[LexBotAttributes] {
	return terra.ReferenceAsList[LexBotAttributes](acba.ref.Append("lex_bot"))
}

type awsConnectBotAssociationState struct {
	Id         string        `json:"id"`
	InstanceId string        `json:"instance_id"`
	LexBot     []LexBotState `json:"lex_bot"`
}
