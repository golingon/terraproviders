// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_acm_certificate_validation

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_acm_certificate_validation.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAcmCertificateValidationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aacv *Resource) Type() string {
	return "aws_acm_certificate_validation"
}

// LocalName returns the local name for [Resource].
func (aacv *Resource) LocalName() string {
	return aacv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aacv *Resource) Configuration() interface{} {
	return aacv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aacv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aacv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aacv *Resource) Dependencies() terra.Dependencies {
	return aacv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aacv *Resource) LifecycleManagement() *terra.Lifecycle {
	return aacv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aacv *Resource) Attributes() awsAcmCertificateValidationAttributes {
	return awsAcmCertificateValidationAttributes{ref: terra.ReferenceResource(aacv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aacv *Resource) ImportState(state io.Reader) error {
	aacv.state = &awsAcmCertificateValidationState{}
	if err := json.NewDecoder(state).Decode(aacv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aacv.Type(), aacv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aacv *Resource) State() (*awsAcmCertificateValidationState, bool) {
	return aacv.state, aacv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aacv *Resource) StateMust() *awsAcmCertificateValidationState {
	if aacv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aacv.Type(), aacv.LocalName()))
	}
	return aacv.state
}

// Args contains the configurations for aws_acm_certificate_validation.
type Args struct {
	// CertificateArn: string, required
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ValidationRecordFqdns: set of string, optional
	ValidationRecordFqdns terra.SetValue[terra.StringValue] `hcl:"validation_record_fqdns,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsAcmCertificateValidationAttributes struct {
	ref terra.Reference
}

// CertificateArn returns a reference to field certificate_arn of aws_acm_certificate_validation.
func (aacv awsAcmCertificateValidationAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceAsString(aacv.ref.Append("certificate_arn"))
}

// Id returns a reference to field id of aws_acm_certificate_validation.
func (aacv awsAcmCertificateValidationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aacv.ref.Append("id"))
}

// ValidationRecordFqdns returns a reference to field validation_record_fqdns of aws_acm_certificate_validation.
func (aacv awsAcmCertificateValidationAttributes) ValidationRecordFqdns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aacv.ref.Append("validation_record_fqdns"))
}

func (aacv awsAcmCertificateValidationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aacv.ref.Append("timeouts"))
}

type awsAcmCertificateValidationState struct {
	CertificateArn        string         `json:"certificate_arn"`
	Id                    string         `json:"id"`
	ValidationRecordFqdns []string       `json:"validation_record_fqdns"`
	Timeouts              *TimeoutsState `json:"timeouts"`
}
