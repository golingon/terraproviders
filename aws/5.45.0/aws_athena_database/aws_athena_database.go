// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_athena_database

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_athena_database.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAthenaDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aad *Resource) Type() string {
	return "aws_athena_database"
}

// LocalName returns the local name for [Resource].
func (aad *Resource) LocalName() string {
	return aad.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aad *Resource) Configuration() interface{} {
	return aad.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aad *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aad)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aad *Resource) Dependencies() terra.Dependencies {
	return aad.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aad *Resource) LifecycleManagement() *terra.Lifecycle {
	return aad.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aad *Resource) Attributes() awsAthenaDatabaseAttributes {
	return awsAthenaDatabaseAttributes{ref: terra.ReferenceResource(aad)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aad *Resource) ImportState(state io.Reader) error {
	aad.state = &awsAthenaDatabaseState{}
	if err := json.NewDecoder(state).Decode(aad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aad.Type(), aad.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aad *Resource) State() (*awsAthenaDatabaseState, bool) {
	return aad.state, aad.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aad *Resource) StateMust() *awsAthenaDatabaseState {
	if aad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aad.Type(), aad.LocalName()))
	}
	return aad.state
}

// Args contains the configurations for aws_athena_database.
type Args struct {
	// Bucket: string, optional
	Bucket terra.StringValue `hcl:"bucket,attr"`
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// AclConfiguration: optional
	AclConfiguration *AclConfiguration `hcl:"acl_configuration,block"`
	// EncryptionConfiguration: optional
	EncryptionConfiguration *EncryptionConfiguration `hcl:"encryption_configuration,block"`
}

type awsAthenaDatabaseAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of aws_athena_database.
func (aad awsAthenaDatabaseAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("bucket"))
}

// Comment returns a reference to field comment of aws_athena_database.
func (aad awsAthenaDatabaseAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("comment"))
}

// ExpectedBucketOwner returns a reference to field expected_bucket_owner of aws_athena_database.
func (aad awsAthenaDatabaseAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("expected_bucket_owner"))
}

// ForceDestroy returns a reference to field force_destroy of aws_athena_database.
func (aad awsAthenaDatabaseAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(aad.ref.Append("force_destroy"))
}

// Id returns a reference to field id of aws_athena_database.
func (aad awsAthenaDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("id"))
}

// Name returns a reference to field name of aws_athena_database.
func (aad awsAthenaDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("name"))
}

// Properties returns a reference to field properties of aws_athena_database.
func (aad awsAthenaDatabaseAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aad.ref.Append("properties"))
}

func (aad awsAthenaDatabaseAttributes) AclConfiguration() terra.ListValue[AclConfigurationAttributes] {
	return terra.ReferenceAsList[AclConfigurationAttributes](aad.ref.Append("acl_configuration"))
}

func (aad awsAthenaDatabaseAttributes) EncryptionConfiguration() terra.ListValue[EncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[EncryptionConfigurationAttributes](aad.ref.Append("encryption_configuration"))
}

type awsAthenaDatabaseState struct {
	Bucket                  string                         `json:"bucket"`
	Comment                 string                         `json:"comment"`
	ExpectedBucketOwner     string                         `json:"expected_bucket_owner"`
	ForceDestroy            bool                           `json:"force_destroy"`
	Id                      string                         `json:"id"`
	Name                    string                         `json:"name"`
	Properties              map[string]string              `json:"properties"`
	AclConfiguration        []AclConfigurationState        `json:"acl_configuration"`
	EncryptionConfiguration []EncryptionConfigurationState `json:"encryption_configuration"`
}
