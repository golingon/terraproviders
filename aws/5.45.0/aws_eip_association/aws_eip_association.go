// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_eip_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_eip_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEipAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aea *Resource) Type() string {
	return "aws_eip_association"
}

// LocalName returns the local name for [Resource].
func (aea *Resource) LocalName() string {
	return aea.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aea *Resource) Configuration() interface{} {
	return aea.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aea *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aea)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aea *Resource) Dependencies() terra.Dependencies {
	return aea.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aea *Resource) LifecycleManagement() *terra.Lifecycle {
	return aea.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aea *Resource) Attributes() awsEipAssociationAttributes {
	return awsEipAssociationAttributes{ref: terra.ReferenceResource(aea)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aea *Resource) ImportState(state io.Reader) error {
	aea.state = &awsEipAssociationState{}
	if err := json.NewDecoder(state).Decode(aea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aea.Type(), aea.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aea *Resource) State() (*awsEipAssociationState, bool) {
	return aea.state, aea.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aea *Resource) StateMust() *awsEipAssociationState {
	if aea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aea.Type(), aea.LocalName()))
	}
	return aea.state
}

// Args contains the configurations for aws_eip_association.
type Args struct {
	// AllocationId: string, optional
	AllocationId terra.StringValue `hcl:"allocation_id,attr"`
	// AllowReassociation: bool, optional
	AllowReassociation terra.BoolValue `hcl:"allow_reassociation,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, optional
	InstanceId terra.StringValue `hcl:"instance_id,attr"`
	// NetworkInterfaceId: string, optional
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr"`
	// PrivateIpAddress: string, optional
	PrivateIpAddress terra.StringValue `hcl:"private_ip_address,attr"`
	// PublicIp: string, optional
	PublicIp terra.StringValue `hcl:"public_ip,attr"`
}

type awsEipAssociationAttributes struct {
	ref terra.Reference
}

// AllocationId returns a reference to field allocation_id of aws_eip_association.
func (aea awsEipAssociationAttributes) AllocationId() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("allocation_id"))
}

// AllowReassociation returns a reference to field allow_reassociation of aws_eip_association.
func (aea awsEipAssociationAttributes) AllowReassociation() terra.BoolValue {
	return terra.ReferenceAsBool(aea.ref.Append("allow_reassociation"))
}

// Id returns a reference to field id of aws_eip_association.
func (aea awsEipAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_eip_association.
func (aea awsEipAssociationAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("instance_id"))
}

// NetworkInterfaceId returns a reference to field network_interface_id of aws_eip_association.
func (aea awsEipAssociationAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("network_interface_id"))
}

// PrivateIpAddress returns a reference to field private_ip_address of aws_eip_association.
func (aea awsEipAssociationAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("private_ip_address"))
}

// PublicIp returns a reference to field public_ip of aws_eip_association.
func (aea awsEipAssociationAttributes) PublicIp() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("public_ip"))
}

type awsEipAssociationState struct {
	AllocationId       string `json:"allocation_id"`
	AllowReassociation bool   `json:"allow_reassociation"`
	Id                 string `json:"id"`
	InstanceId         string `json:"instance_id"`
	NetworkInterfaceId string `json:"network_interface_id"`
	PrivateIpAddress   string `json:"private_ip_address"`
	PublicIp           string `json:"public_ip"`
}
