// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_securitylake_data_lake

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_securitylake_data_lake.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSecuritylakeDataLakeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asdl *Resource) Type() string {
	return "aws_securitylake_data_lake"
}

// LocalName returns the local name for [Resource].
func (asdl *Resource) LocalName() string {
	return asdl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asdl *Resource) Configuration() interface{} {
	return asdl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asdl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asdl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asdl *Resource) Dependencies() terra.Dependencies {
	return asdl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asdl *Resource) LifecycleManagement() *terra.Lifecycle {
	return asdl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asdl *Resource) Attributes() awsSecuritylakeDataLakeAttributes {
	return awsSecuritylakeDataLakeAttributes{ref: terra.ReferenceResource(asdl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asdl *Resource) ImportState(state io.Reader) error {
	asdl.state = &awsSecuritylakeDataLakeState{}
	if err := json.NewDecoder(state).Decode(asdl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asdl.Type(), asdl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asdl *Resource) State() (*awsSecuritylakeDataLakeState, bool) {
	return asdl.state, asdl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asdl *Resource) StateMust() *awsSecuritylakeDataLakeState {
	if asdl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asdl.Type(), asdl.LocalName()))
	}
	return asdl.state
}

// Args contains the configurations for aws_securitylake_data_lake.
type Args struct {
	// MetaStoreManagerRoleArn: string, required
	MetaStoreManagerRoleArn terra.StringValue `hcl:"meta_store_manager_role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Configuration: min=0
	Configuration []Configuration `hcl:"configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsSecuritylakeDataLakeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_securitylake_data_lake.
func (asdl awsSecuritylakeDataLakeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asdl.ref.Append("arn"))
}

// Id returns a reference to field id of aws_securitylake_data_lake.
func (asdl awsSecuritylakeDataLakeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asdl.ref.Append("id"))
}

// MetaStoreManagerRoleArn returns a reference to field meta_store_manager_role_arn of aws_securitylake_data_lake.
func (asdl awsSecuritylakeDataLakeAttributes) MetaStoreManagerRoleArn() terra.StringValue {
	return terra.ReferenceAsString(asdl.ref.Append("meta_store_manager_role_arn"))
}

// S3BucketArn returns a reference to field s3_bucket_arn of aws_securitylake_data_lake.
func (asdl awsSecuritylakeDataLakeAttributes) S3BucketArn() terra.StringValue {
	return terra.ReferenceAsString(asdl.ref.Append("s3_bucket_arn"))
}

// Tags returns a reference to field tags of aws_securitylake_data_lake.
func (asdl awsSecuritylakeDataLakeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asdl.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_securitylake_data_lake.
func (asdl awsSecuritylakeDataLakeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asdl.ref.Append("tags_all"))
}

func (asdl awsSecuritylakeDataLakeAttributes) Configuration() terra.ListValue[ConfigurationAttributes] {
	return terra.ReferenceAsList[ConfigurationAttributes](asdl.ref.Append("configuration"))
}

func (asdl awsSecuritylakeDataLakeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asdl.ref.Append("timeouts"))
}

type awsSecuritylakeDataLakeState struct {
	Arn                     string               `json:"arn"`
	Id                      string               `json:"id"`
	MetaStoreManagerRoleArn string               `json:"meta_store_manager_role_arn"`
	S3BucketArn             string               `json:"s3_bucket_arn"`
	Tags                    map[string]string    `json:"tags"`
	TagsAll                 map[string]string    `json:"tags_all"`
	Configuration           []ConfigurationState `json:"configuration"`
	Timeouts                *TimeoutsState       `json:"timeouts"`
}
