// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_securitylake_data_lake

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Configuration struct {
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
	// ConfigurationEncryptionConfiguration: min=0
	EncryptionConfiguration []ConfigurationEncryptionConfiguration `hcl:"encryption_configuration,block" validate:"min=0"`
	// ConfigurationLifecycleConfiguration: min=0
	LifecycleConfiguration []ConfigurationLifecycleConfiguration `hcl:"lifecycle_configuration,block" validate:"min=0"`
	// ConfigurationReplicationConfiguration: min=0
	ReplicationConfiguration []ConfigurationReplicationConfiguration `hcl:"replication_configuration,block" validate:"min=0"`
}

type ConfigurationEncryptionConfiguration struct {
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
}

type ConfigurationLifecycleConfiguration struct {
	// ConfigurationLifecycleConfigurationExpiration: min=0
	Expiration []ConfigurationLifecycleConfigurationExpiration `hcl:"expiration,block" validate:"min=0"`
	// ConfigurationLifecycleConfigurationTransition: min=0
	Transition []ConfigurationLifecycleConfigurationTransition `hcl:"transition,block" validate:"min=0"`
}

type ConfigurationLifecycleConfigurationExpiration struct {
	// Days: number, optional
	Days terra.NumberValue `hcl:"days,attr"`
}

type ConfigurationLifecycleConfigurationTransition struct {
	// Days: number, optional
	Days terra.NumberValue `hcl:"days,attr"`
	// StorageClass: string, optional
	StorageClass terra.StringValue `hcl:"storage_class,attr"`
}

type ConfigurationReplicationConfiguration struct {
	// Regions: set of string, optional
	Regions terra.SetValue[terra.StringValue] `hcl:"regions,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConfigurationAttributes struct {
	ref terra.Reference
}

func (c ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigurationAttributes) InternalWithRef(ref terra.Reference) ConfigurationAttributes {
	return ConfigurationAttributes{ref: ref}
}

func (c ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigurationAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("region"))
}

func (c ConfigurationAttributes) EncryptionConfiguration() terra.ListValue[ConfigurationEncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[ConfigurationEncryptionConfigurationAttributes](c.ref.Append("encryption_configuration"))
}

func (c ConfigurationAttributes) LifecycleConfiguration() terra.ListValue[ConfigurationLifecycleConfigurationAttributes] {
	return terra.ReferenceAsList[ConfigurationLifecycleConfigurationAttributes](c.ref.Append("lifecycle_configuration"))
}

func (c ConfigurationAttributes) ReplicationConfiguration() terra.ListValue[ConfigurationReplicationConfigurationAttributes] {
	return terra.ReferenceAsList[ConfigurationReplicationConfigurationAttributes](c.ref.Append("replication_configuration"))
}

type ConfigurationEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec ConfigurationEncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec ConfigurationEncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) ConfigurationEncryptionConfigurationAttributes {
	return ConfigurationEncryptionConfigurationAttributes{ref: ref}
}

func (ec ConfigurationEncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec ConfigurationEncryptionConfigurationAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key_id"))
}

type ConfigurationLifecycleConfigurationAttributes struct {
	ref terra.Reference
}

func (lc ConfigurationLifecycleConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc ConfigurationLifecycleConfigurationAttributes) InternalWithRef(ref terra.Reference) ConfigurationLifecycleConfigurationAttributes {
	return ConfigurationLifecycleConfigurationAttributes{ref: ref}
}

func (lc ConfigurationLifecycleConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc ConfigurationLifecycleConfigurationAttributes) Expiration() terra.ListValue[ConfigurationLifecycleConfigurationExpirationAttributes] {
	return terra.ReferenceAsList[ConfigurationLifecycleConfigurationExpirationAttributes](lc.ref.Append("expiration"))
}

func (lc ConfigurationLifecycleConfigurationAttributes) Transition() terra.SetValue[ConfigurationLifecycleConfigurationTransitionAttributes] {
	return terra.ReferenceAsSet[ConfigurationLifecycleConfigurationTransitionAttributes](lc.ref.Append("transition"))
}

type ConfigurationLifecycleConfigurationExpirationAttributes struct {
	ref terra.Reference
}

func (e ConfigurationLifecycleConfigurationExpirationAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ConfigurationLifecycleConfigurationExpirationAttributes) InternalWithRef(ref terra.Reference) ConfigurationLifecycleConfigurationExpirationAttributes {
	return ConfigurationLifecycleConfigurationExpirationAttributes{ref: ref}
}

func (e ConfigurationLifecycleConfigurationExpirationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ConfigurationLifecycleConfigurationExpirationAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("days"))
}

type ConfigurationLifecycleConfigurationTransitionAttributes struct {
	ref terra.Reference
}

func (t ConfigurationLifecycleConfigurationTransitionAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ConfigurationLifecycleConfigurationTransitionAttributes) InternalWithRef(ref terra.Reference) ConfigurationLifecycleConfigurationTransitionAttributes {
	return ConfigurationLifecycleConfigurationTransitionAttributes{ref: ref}
}

func (t ConfigurationLifecycleConfigurationTransitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ConfigurationLifecycleConfigurationTransitionAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("days"))
}

func (t ConfigurationLifecycleConfigurationTransitionAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("storage_class"))
}

type ConfigurationReplicationConfigurationAttributes struct {
	ref terra.Reference
}

func (rc ConfigurationReplicationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc ConfigurationReplicationConfigurationAttributes) InternalWithRef(ref terra.Reference) ConfigurationReplicationConfigurationAttributes {
	return ConfigurationReplicationConfigurationAttributes{ref: ref}
}

func (rc ConfigurationReplicationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc ConfigurationReplicationConfigurationAttributes) Regions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rc.ref.Append("regions"))
}

func (rc ConfigurationReplicationConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("role_arn"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConfigurationState struct {
	Region                   string                                       `json:"region"`
	EncryptionConfiguration  []ConfigurationEncryptionConfigurationState  `json:"encryption_configuration"`
	LifecycleConfiguration   []ConfigurationLifecycleConfigurationState   `json:"lifecycle_configuration"`
	ReplicationConfiguration []ConfigurationReplicationConfigurationState `json:"replication_configuration"`
}

type ConfigurationEncryptionConfigurationState struct {
	KmsKeyId string `json:"kms_key_id"`
}

type ConfigurationLifecycleConfigurationState struct {
	Expiration []ConfigurationLifecycleConfigurationExpirationState `json:"expiration"`
	Transition []ConfigurationLifecycleConfigurationTransitionState `json:"transition"`
}

type ConfigurationLifecycleConfigurationExpirationState struct {
	Days float64 `json:"days"`
}

type ConfigurationLifecycleConfigurationTransitionState struct {
	Days         float64 `json:"days"`
	StorageClass string  `json:"storage_class"`
}

type ConfigurationReplicationConfigurationState struct {
	Regions []string `json:"regions"`
	RoleArn string   `json:"role_arn"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
