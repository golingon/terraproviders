// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_data_source

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_quicksight_data_source.
type Resource struct {
	Name      string
	Args      Args
	state     *awsQuicksightDataSourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aqds *Resource) Type() string {
	return "aws_quicksight_data_source"
}

// LocalName returns the local name for [Resource].
func (aqds *Resource) LocalName() string {
	return aqds.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aqds *Resource) Configuration() interface{} {
	return aqds.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aqds *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aqds)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aqds *Resource) Dependencies() terra.Dependencies {
	return aqds.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aqds *Resource) LifecycleManagement() *terra.Lifecycle {
	return aqds.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aqds *Resource) Attributes() awsQuicksightDataSourceAttributes {
	return awsQuicksightDataSourceAttributes{ref: terra.ReferenceResource(aqds)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aqds *Resource) ImportState(state io.Reader) error {
	aqds.state = &awsQuicksightDataSourceState{}
	if err := json.NewDecoder(state).Decode(aqds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aqds.Type(), aqds.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aqds *Resource) State() (*awsQuicksightDataSourceState, bool) {
	return aqds.state, aqds.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aqds *Resource) StateMust() *awsQuicksightDataSourceState {
	if aqds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aqds.Type(), aqds.LocalName()))
	}
	return aqds.state
}

// Args contains the configurations for aws_quicksight_data_source.
type Args struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// DataSourceId: string, required
	DataSourceId terra.StringValue `hcl:"data_source_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Credentials: optional
	Credentials *Credentials `hcl:"credentials,block"`
	// Parameters: required
	Parameters *Parameters `hcl:"parameters,block" validate:"required"`
	// Permission: min=0,max=64
	Permission []Permission `hcl:"permission,block" validate:"min=0,max=64"`
	// SslProperties: optional
	SslProperties *SslProperties `hcl:"ssl_properties,block"`
	// VpcConnectionProperties: optional
	VpcConnectionProperties *VpcConnectionProperties `hcl:"vpc_connection_properties,block"`
}

type awsQuicksightDataSourceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_quicksight_data_source.
func (aqds awsQuicksightDataSourceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aqds.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_data_source.
func (aqds awsQuicksightDataSourceAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(aqds.ref.Append("aws_account_id"))
}

// DataSourceId returns a reference to field data_source_id of aws_quicksight_data_source.
func (aqds awsQuicksightDataSourceAttributes) DataSourceId() terra.StringValue {
	return terra.ReferenceAsString(aqds.ref.Append("data_source_id"))
}

// Id returns a reference to field id of aws_quicksight_data_source.
func (aqds awsQuicksightDataSourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aqds.ref.Append("id"))
}

// Name returns a reference to field name of aws_quicksight_data_source.
func (aqds awsQuicksightDataSourceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aqds.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_quicksight_data_source.
func (aqds awsQuicksightDataSourceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqds.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_quicksight_data_source.
func (aqds awsQuicksightDataSourceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqds.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_quicksight_data_source.
func (aqds awsQuicksightDataSourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aqds.ref.Append("type"))
}

func (aqds awsQuicksightDataSourceAttributes) Credentials() terra.ListValue[CredentialsAttributes] {
	return terra.ReferenceAsList[CredentialsAttributes](aqds.ref.Append("credentials"))
}

func (aqds awsQuicksightDataSourceAttributes) Parameters() terra.ListValue[ParametersAttributes] {
	return terra.ReferenceAsList[ParametersAttributes](aqds.ref.Append("parameters"))
}

func (aqds awsQuicksightDataSourceAttributes) Permission() terra.SetValue[PermissionAttributes] {
	return terra.ReferenceAsSet[PermissionAttributes](aqds.ref.Append("permission"))
}

func (aqds awsQuicksightDataSourceAttributes) SslProperties() terra.ListValue[SslPropertiesAttributes] {
	return terra.ReferenceAsList[SslPropertiesAttributes](aqds.ref.Append("ssl_properties"))
}

func (aqds awsQuicksightDataSourceAttributes) VpcConnectionProperties() terra.ListValue[VpcConnectionPropertiesAttributes] {
	return terra.ReferenceAsList[VpcConnectionPropertiesAttributes](aqds.ref.Append("vpc_connection_properties"))
}

type awsQuicksightDataSourceState struct {
	Arn                     string                         `json:"arn"`
	AwsAccountId            string                         `json:"aws_account_id"`
	DataSourceId            string                         `json:"data_source_id"`
	Id                      string                         `json:"id"`
	Name                    string                         `json:"name"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	Type                    string                         `json:"type"`
	Credentials             []CredentialsState             `json:"credentials"`
	Parameters              []ParametersState              `json:"parameters"`
	Permission              []PermissionState              `json:"permission"`
	SslProperties           []SslPropertiesState           `json:"ssl_properties"`
	VpcConnectionProperties []VpcConnectionPropertiesState `json:"vpc_connection_properties"`
}
