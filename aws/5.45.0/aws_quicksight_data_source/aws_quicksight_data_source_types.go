// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_data_source

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Credentials struct {
	// CopySourceArn: string, optional
	CopySourceArn terra.StringValue `hcl:"copy_source_arn,attr"`
	// CredentialsCredentialPair: optional
	CredentialPair *CredentialsCredentialPair `hcl:"credential_pair,block"`
}

type CredentialsCredentialPair struct {
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Parameters struct {
	// ParametersAmazonElasticsearch: optional
	AmazonElasticsearch *ParametersAmazonElasticsearch `hcl:"amazon_elasticsearch,block"`
	// ParametersAthena: optional
	Athena *ParametersAthena `hcl:"athena,block"`
	// ParametersAurora: optional
	Aurora *ParametersAurora `hcl:"aurora,block"`
	// ParametersAuroraPostgresql: optional
	AuroraPostgresql *ParametersAuroraPostgresql `hcl:"aurora_postgresql,block"`
	// ParametersAwsIotAnalytics: optional
	AwsIotAnalytics *ParametersAwsIotAnalytics `hcl:"aws_iot_analytics,block"`
	// ParametersJira: optional
	Jira *ParametersJira `hcl:"jira,block"`
	// ParametersMariaDb: optional
	MariaDb *ParametersMariaDb `hcl:"maria_db,block"`
	// ParametersMysql: optional
	Mysql *ParametersMysql `hcl:"mysql,block"`
	// ParametersOracle: optional
	Oracle *ParametersOracle `hcl:"oracle,block"`
	// ParametersPostgresql: optional
	Postgresql *ParametersPostgresql `hcl:"postgresql,block"`
	// ParametersPresto: optional
	Presto *ParametersPresto `hcl:"presto,block"`
	// ParametersRds: optional
	Rds *ParametersRds `hcl:"rds,block"`
	// ParametersRedshift: optional
	Redshift *ParametersRedshift `hcl:"redshift,block"`
	// ParametersS3: optional
	S3 *ParametersS3 `hcl:"s3,block"`
	// ParametersServiceNow: optional
	ServiceNow *ParametersServiceNow `hcl:"service_now,block"`
	// ParametersSnowflake: optional
	Snowflake *ParametersSnowflake `hcl:"snowflake,block"`
	// ParametersSpark: optional
	Spark *ParametersSpark `hcl:"spark,block"`
	// ParametersSqlServer: optional
	SqlServer *ParametersSqlServer `hcl:"sql_server,block"`
	// ParametersTeradata: optional
	Teradata *ParametersTeradata `hcl:"teradata,block"`
	// ParametersTwitter: optional
	Twitter *ParametersTwitter `hcl:"twitter,block"`
}

type ParametersAmazonElasticsearch struct {
	// Domain: string, required
	Domain terra.StringValue `hcl:"domain,attr" validate:"required"`
}

type ParametersAthena struct {
	// WorkGroup: string, optional
	WorkGroup terra.StringValue `hcl:"work_group,attr"`
}

type ParametersAurora struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersAuroraPostgresql struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersAwsIotAnalytics struct {
	// DataSetName: string, required
	DataSetName terra.StringValue `hcl:"data_set_name,attr" validate:"required"`
}

type ParametersJira struct {
	// SiteBaseUrl: string, required
	SiteBaseUrl terra.StringValue `hcl:"site_base_url,attr" validate:"required"`
}

type ParametersMariaDb struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersMysql struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersOracle struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersPostgresql struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersPresto struct {
	// Catalog: string, required
	Catalog terra.StringValue `hcl:"catalog,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersRds struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
}

type ParametersRedshift struct {
	// ClusterId: string, optional
	ClusterId terra.StringValue `hcl:"cluster_id,attr"`
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host: string, optional
	Host terra.StringValue `hcl:"host,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
}

type ParametersS3 struct {
	// ParametersS3ManifestFileLocation: required
	ManifestFileLocation *ParametersS3ManifestFileLocation `hcl:"manifest_file_location,block" validate:"required"`
}

type ParametersS3ManifestFileLocation struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
}

type ParametersServiceNow struct {
	// SiteBaseUrl: string, required
	SiteBaseUrl terra.StringValue `hcl:"site_base_url,attr" validate:"required"`
}

type ParametersSnowflake struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Warehouse: string, required
	Warehouse terra.StringValue `hcl:"warehouse,attr" validate:"required"`
}

type ParametersSpark struct {
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersSqlServer struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersTeradata struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host: string, required
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersTwitter struct {
	// MaxRows: number, required
	MaxRows terra.NumberValue `hcl:"max_rows,attr" validate:"required"`
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
}

type Permission struct {
	// Actions: set of string, required
	Actions terra.SetValue[terra.StringValue] `hcl:"actions,attr" validate:"required"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
}

type SslProperties struct {
	// DisableSsl: bool, required
	DisableSsl terra.BoolValue `hcl:"disable_ssl,attr" validate:"required"`
}

type VpcConnectionProperties struct {
	// VpcConnectionArn: string, required
	VpcConnectionArn terra.StringValue `hcl:"vpc_connection_arn,attr" validate:"required"`
}

type CredentialsAttributes struct {
	ref terra.Reference
}

func (c CredentialsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CredentialsAttributes) InternalWithRef(ref terra.Reference) CredentialsAttributes {
	return CredentialsAttributes{ref: ref}
}

func (c CredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CredentialsAttributes) CopySourceArn() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("copy_source_arn"))
}

func (c CredentialsAttributes) CredentialPair() terra.ListValue[CredentialsCredentialPairAttributes] {
	return terra.ReferenceAsList[CredentialsCredentialPairAttributes](c.ref.Append("credential_pair"))
}

type CredentialsCredentialPairAttributes struct {
	ref terra.Reference
}

func (cp CredentialsCredentialPairAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp CredentialsCredentialPairAttributes) InternalWithRef(ref terra.Reference) CredentialsCredentialPairAttributes {
	return CredentialsCredentialPairAttributes{ref: ref}
}

func (cp CredentialsCredentialPairAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp CredentialsCredentialPairAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("password"))
}

func (cp CredentialsCredentialPairAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("username"))
}

type ParametersAttributes struct {
	ref terra.Reference
}

func (p ParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ParametersAttributes) InternalWithRef(ref terra.Reference) ParametersAttributes {
	return ParametersAttributes{ref: ref}
}

func (p ParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ParametersAttributes) AmazonElasticsearch() terra.ListValue[ParametersAmazonElasticsearchAttributes] {
	return terra.ReferenceAsList[ParametersAmazonElasticsearchAttributes](p.ref.Append("amazon_elasticsearch"))
}

func (p ParametersAttributes) Athena() terra.ListValue[ParametersAthenaAttributes] {
	return terra.ReferenceAsList[ParametersAthenaAttributes](p.ref.Append("athena"))
}

func (p ParametersAttributes) Aurora() terra.ListValue[ParametersAuroraAttributes] {
	return terra.ReferenceAsList[ParametersAuroraAttributes](p.ref.Append("aurora"))
}

func (p ParametersAttributes) AuroraPostgresql() terra.ListValue[ParametersAuroraPostgresqlAttributes] {
	return terra.ReferenceAsList[ParametersAuroraPostgresqlAttributes](p.ref.Append("aurora_postgresql"))
}

func (p ParametersAttributes) AwsIotAnalytics() terra.ListValue[ParametersAwsIotAnalyticsAttributes] {
	return terra.ReferenceAsList[ParametersAwsIotAnalyticsAttributes](p.ref.Append("aws_iot_analytics"))
}

func (p ParametersAttributes) Jira() terra.ListValue[ParametersJiraAttributes] {
	return terra.ReferenceAsList[ParametersJiraAttributes](p.ref.Append("jira"))
}

func (p ParametersAttributes) MariaDb() terra.ListValue[ParametersMariaDbAttributes] {
	return terra.ReferenceAsList[ParametersMariaDbAttributes](p.ref.Append("maria_db"))
}

func (p ParametersAttributes) Mysql() terra.ListValue[ParametersMysqlAttributes] {
	return terra.ReferenceAsList[ParametersMysqlAttributes](p.ref.Append("mysql"))
}

func (p ParametersAttributes) Oracle() terra.ListValue[ParametersOracleAttributes] {
	return terra.ReferenceAsList[ParametersOracleAttributes](p.ref.Append("oracle"))
}

func (p ParametersAttributes) Postgresql() terra.ListValue[ParametersPostgresqlAttributes] {
	return terra.ReferenceAsList[ParametersPostgresqlAttributes](p.ref.Append("postgresql"))
}

func (p ParametersAttributes) Presto() terra.ListValue[ParametersPrestoAttributes] {
	return terra.ReferenceAsList[ParametersPrestoAttributes](p.ref.Append("presto"))
}

func (p ParametersAttributes) Rds() terra.ListValue[ParametersRdsAttributes] {
	return terra.ReferenceAsList[ParametersRdsAttributes](p.ref.Append("rds"))
}

func (p ParametersAttributes) Redshift() terra.ListValue[ParametersRedshiftAttributes] {
	return terra.ReferenceAsList[ParametersRedshiftAttributes](p.ref.Append("redshift"))
}

func (p ParametersAttributes) S3() terra.ListValue[ParametersS3Attributes] {
	return terra.ReferenceAsList[ParametersS3Attributes](p.ref.Append("s3"))
}

func (p ParametersAttributes) ServiceNow() terra.ListValue[ParametersServiceNowAttributes] {
	return terra.ReferenceAsList[ParametersServiceNowAttributes](p.ref.Append("service_now"))
}

func (p ParametersAttributes) Snowflake() terra.ListValue[ParametersSnowflakeAttributes] {
	return terra.ReferenceAsList[ParametersSnowflakeAttributes](p.ref.Append("snowflake"))
}

func (p ParametersAttributes) Spark() terra.ListValue[ParametersSparkAttributes] {
	return terra.ReferenceAsList[ParametersSparkAttributes](p.ref.Append("spark"))
}

func (p ParametersAttributes) SqlServer() terra.ListValue[ParametersSqlServerAttributes] {
	return terra.ReferenceAsList[ParametersSqlServerAttributes](p.ref.Append("sql_server"))
}

func (p ParametersAttributes) Teradata() terra.ListValue[ParametersTeradataAttributes] {
	return terra.ReferenceAsList[ParametersTeradataAttributes](p.ref.Append("teradata"))
}

func (p ParametersAttributes) Twitter() terra.ListValue[ParametersTwitterAttributes] {
	return terra.ReferenceAsList[ParametersTwitterAttributes](p.ref.Append("twitter"))
}

type ParametersAmazonElasticsearchAttributes struct {
	ref terra.Reference
}

func (ae ParametersAmazonElasticsearchAttributes) InternalRef() (terra.Reference, error) {
	return ae.ref, nil
}

func (ae ParametersAmazonElasticsearchAttributes) InternalWithRef(ref terra.Reference) ParametersAmazonElasticsearchAttributes {
	return ParametersAmazonElasticsearchAttributes{ref: ref}
}

func (ae ParametersAmazonElasticsearchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ae.ref.InternalTokens()
}

func (ae ParametersAmazonElasticsearchAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("domain"))
}

type ParametersAthenaAttributes struct {
	ref terra.Reference
}

func (a ParametersAthenaAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ParametersAthenaAttributes) InternalWithRef(ref terra.Reference) ParametersAthenaAttributes {
	return ParametersAthenaAttributes{ref: ref}
}

func (a ParametersAthenaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ParametersAthenaAttributes) WorkGroup() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("work_group"))
}

type ParametersAuroraAttributes struct {
	ref terra.Reference
}

func (a ParametersAuroraAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ParametersAuroraAttributes) InternalWithRef(ref terra.Reference) ParametersAuroraAttributes {
	return ParametersAuroraAttributes{ref: ref}
}

func (a ParametersAuroraAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ParametersAuroraAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("database"))
}

func (a ParametersAuroraAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("host"))
}

func (a ParametersAuroraAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("port"))
}

type ParametersAuroraPostgresqlAttributes struct {
	ref terra.Reference
}

func (ap ParametersAuroraPostgresqlAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap ParametersAuroraPostgresqlAttributes) InternalWithRef(ref terra.Reference) ParametersAuroraPostgresqlAttributes {
	return ParametersAuroraPostgresqlAttributes{ref: ref}
}

func (ap ParametersAuroraPostgresqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap ParametersAuroraPostgresqlAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("database"))
}

func (ap ParametersAuroraPostgresqlAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("host"))
}

func (ap ParametersAuroraPostgresqlAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ap.ref.Append("port"))
}

type ParametersAwsIotAnalyticsAttributes struct {
	ref terra.Reference
}

func (aia ParametersAwsIotAnalyticsAttributes) InternalRef() (terra.Reference, error) {
	return aia.ref, nil
}

func (aia ParametersAwsIotAnalyticsAttributes) InternalWithRef(ref terra.Reference) ParametersAwsIotAnalyticsAttributes {
	return ParametersAwsIotAnalyticsAttributes{ref: ref}
}

func (aia ParametersAwsIotAnalyticsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aia.ref.InternalTokens()
}

func (aia ParametersAwsIotAnalyticsAttributes) DataSetName() terra.StringValue {
	return terra.ReferenceAsString(aia.ref.Append("data_set_name"))
}

type ParametersJiraAttributes struct {
	ref terra.Reference
}

func (j ParametersJiraAttributes) InternalRef() (terra.Reference, error) {
	return j.ref, nil
}

func (j ParametersJiraAttributes) InternalWithRef(ref terra.Reference) ParametersJiraAttributes {
	return ParametersJiraAttributes{ref: ref}
}

func (j ParametersJiraAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return j.ref.InternalTokens()
}

func (j ParametersJiraAttributes) SiteBaseUrl() terra.StringValue {
	return terra.ReferenceAsString(j.ref.Append("site_base_url"))
}

type ParametersMariaDbAttributes struct {
	ref terra.Reference
}

func (md ParametersMariaDbAttributes) InternalRef() (terra.Reference, error) {
	return md.ref, nil
}

func (md ParametersMariaDbAttributes) InternalWithRef(ref terra.Reference) ParametersMariaDbAttributes {
	return ParametersMariaDbAttributes{ref: ref}
}

func (md ParametersMariaDbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return md.ref.InternalTokens()
}

func (md ParametersMariaDbAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("database"))
}

func (md ParametersMariaDbAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("host"))
}

func (md ParametersMariaDbAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(md.ref.Append("port"))
}

type ParametersMysqlAttributes struct {
	ref terra.Reference
}

func (m ParametersMysqlAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ParametersMysqlAttributes) InternalWithRef(ref terra.Reference) ParametersMysqlAttributes {
	return ParametersMysqlAttributes{ref: ref}
}

func (m ParametersMysqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m ParametersMysqlAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("database"))
}

func (m ParametersMysqlAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("host"))
}

func (m ParametersMysqlAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

type ParametersOracleAttributes struct {
	ref terra.Reference
}

func (o ParametersOracleAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o ParametersOracleAttributes) InternalWithRef(ref terra.Reference) ParametersOracleAttributes {
	return ParametersOracleAttributes{ref: ref}
}

func (o ParametersOracleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o ParametersOracleAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("database"))
}

func (o ParametersOracleAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("host"))
}

func (o ParametersOracleAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("port"))
}

type ParametersPostgresqlAttributes struct {
	ref terra.Reference
}

func (p ParametersPostgresqlAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ParametersPostgresqlAttributes) InternalWithRef(ref terra.Reference) ParametersPostgresqlAttributes {
	return ParametersPostgresqlAttributes{ref: ref}
}

func (p ParametersPostgresqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ParametersPostgresqlAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("database"))
}

func (p ParametersPostgresqlAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("host"))
}

func (p ParametersPostgresqlAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("port"))
}

type ParametersPrestoAttributes struct {
	ref terra.Reference
}

func (p ParametersPrestoAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ParametersPrestoAttributes) InternalWithRef(ref terra.Reference) ParametersPrestoAttributes {
	return ParametersPrestoAttributes{ref: ref}
}

func (p ParametersPrestoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ParametersPrestoAttributes) Catalog() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("catalog"))
}

func (p ParametersPrestoAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("host"))
}

func (p ParametersPrestoAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("port"))
}

type ParametersRdsAttributes struct {
	ref terra.Reference
}

func (r ParametersRdsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ParametersRdsAttributes) InternalWithRef(ref terra.Reference) ParametersRdsAttributes {
	return ParametersRdsAttributes{ref: ref}
}

func (r ParametersRdsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ParametersRdsAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("database"))
}

func (r ParametersRdsAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("instance_id"))
}

type ParametersRedshiftAttributes struct {
	ref terra.Reference
}

func (r ParametersRedshiftAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ParametersRedshiftAttributes) InternalWithRef(ref terra.Reference) ParametersRedshiftAttributes {
	return ParametersRedshiftAttributes{ref: ref}
}

func (r ParametersRedshiftAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ParametersRedshiftAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("cluster_id"))
}

func (r ParametersRedshiftAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("database"))
}

func (r ParametersRedshiftAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("host"))
}

func (r ParametersRedshiftAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("port"))
}

type ParametersS3Attributes struct {
	ref terra.Reference
}

func (s ParametersS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ParametersS3Attributes) InternalWithRef(ref terra.Reference) ParametersS3Attributes {
	return ParametersS3Attributes{ref: ref}
}

func (s ParametersS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ParametersS3Attributes) ManifestFileLocation() terra.ListValue[ParametersS3ManifestFileLocationAttributes] {
	return terra.ReferenceAsList[ParametersS3ManifestFileLocationAttributes](s.ref.Append("manifest_file_location"))
}

type ParametersS3ManifestFileLocationAttributes struct {
	ref terra.Reference
}

func (mfl ParametersS3ManifestFileLocationAttributes) InternalRef() (terra.Reference, error) {
	return mfl.ref, nil
}

func (mfl ParametersS3ManifestFileLocationAttributes) InternalWithRef(ref terra.Reference) ParametersS3ManifestFileLocationAttributes {
	return ParametersS3ManifestFileLocationAttributes{ref: ref}
}

func (mfl ParametersS3ManifestFileLocationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mfl.ref.InternalTokens()
}

func (mfl ParametersS3ManifestFileLocationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(mfl.ref.Append("bucket"))
}

func (mfl ParametersS3ManifestFileLocationAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(mfl.ref.Append("key"))
}

type ParametersServiceNowAttributes struct {
	ref terra.Reference
}

func (sn ParametersServiceNowAttributes) InternalRef() (terra.Reference, error) {
	return sn.ref, nil
}

func (sn ParametersServiceNowAttributes) InternalWithRef(ref terra.Reference) ParametersServiceNowAttributes {
	return ParametersServiceNowAttributes{ref: ref}
}

func (sn ParametersServiceNowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sn.ref.InternalTokens()
}

func (sn ParametersServiceNowAttributes) SiteBaseUrl() terra.StringValue {
	return terra.ReferenceAsString(sn.ref.Append("site_base_url"))
}

type ParametersSnowflakeAttributes struct {
	ref terra.Reference
}

func (s ParametersSnowflakeAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ParametersSnowflakeAttributes) InternalWithRef(ref terra.Reference) ParametersSnowflakeAttributes {
	return ParametersSnowflakeAttributes{ref: ref}
}

func (s ParametersSnowflakeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ParametersSnowflakeAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("database"))
}

func (s ParametersSnowflakeAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("host"))
}

func (s ParametersSnowflakeAttributes) Warehouse() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("warehouse"))
}

type ParametersSparkAttributes struct {
	ref terra.Reference
}

func (s ParametersSparkAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ParametersSparkAttributes) InternalWithRef(ref terra.Reference) ParametersSparkAttributes {
	return ParametersSparkAttributes{ref: ref}
}

func (s ParametersSparkAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ParametersSparkAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("host"))
}

func (s ParametersSparkAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("port"))
}

type ParametersSqlServerAttributes struct {
	ref terra.Reference
}

func (ss ParametersSqlServerAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss ParametersSqlServerAttributes) InternalWithRef(ref terra.Reference) ParametersSqlServerAttributes {
	return ParametersSqlServerAttributes{ref: ref}
}

func (ss ParametersSqlServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss ParametersSqlServerAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("database"))
}

func (ss ParametersSqlServerAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("host"))
}

func (ss ParametersSqlServerAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("port"))
}

type ParametersTeradataAttributes struct {
	ref terra.Reference
}

func (t ParametersTeradataAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ParametersTeradataAttributes) InternalWithRef(ref terra.Reference) ParametersTeradataAttributes {
	return ParametersTeradataAttributes{ref: ref}
}

func (t ParametersTeradataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ParametersTeradataAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("database"))
}

func (t ParametersTeradataAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("host"))
}

func (t ParametersTeradataAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("port"))
}

type ParametersTwitterAttributes struct {
	ref terra.Reference
}

func (t ParametersTwitterAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ParametersTwitterAttributes) InternalWithRef(ref terra.Reference) ParametersTwitterAttributes {
	return ParametersTwitterAttributes{ref: ref}
}

func (t ParametersTwitterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ParametersTwitterAttributes) MaxRows() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("max_rows"))
}

func (t ParametersTwitterAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("query"))
}

type PermissionAttributes struct {
	ref terra.Reference
}

func (p PermissionAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PermissionAttributes) InternalWithRef(ref terra.Reference) PermissionAttributes {
	return PermissionAttributes{ref: ref}
}

func (p PermissionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PermissionAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("actions"))
}

func (p PermissionAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("principal"))
}

type SslPropertiesAttributes struct {
	ref terra.Reference
}

func (sp SslPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SslPropertiesAttributes) InternalWithRef(ref terra.Reference) SslPropertiesAttributes {
	return SslPropertiesAttributes{ref: ref}
}

func (sp SslPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SslPropertiesAttributes) DisableSsl() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("disable_ssl"))
}

type VpcConnectionPropertiesAttributes struct {
	ref terra.Reference
}

func (vcp VpcConnectionPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return vcp.ref, nil
}

func (vcp VpcConnectionPropertiesAttributes) InternalWithRef(ref terra.Reference) VpcConnectionPropertiesAttributes {
	return VpcConnectionPropertiesAttributes{ref: ref}
}

func (vcp VpcConnectionPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vcp.ref.InternalTokens()
}

func (vcp VpcConnectionPropertiesAttributes) VpcConnectionArn() terra.StringValue {
	return terra.ReferenceAsString(vcp.ref.Append("vpc_connection_arn"))
}

type CredentialsState struct {
	CopySourceArn  string                           `json:"copy_source_arn"`
	CredentialPair []CredentialsCredentialPairState `json:"credential_pair"`
}

type CredentialsCredentialPairState struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type ParametersState struct {
	AmazonElasticsearch []ParametersAmazonElasticsearchState `json:"amazon_elasticsearch"`
	Athena              []ParametersAthenaState              `json:"athena"`
	Aurora              []ParametersAuroraState              `json:"aurora"`
	AuroraPostgresql    []ParametersAuroraPostgresqlState    `json:"aurora_postgresql"`
	AwsIotAnalytics     []ParametersAwsIotAnalyticsState     `json:"aws_iot_analytics"`
	Jira                []ParametersJiraState                `json:"jira"`
	MariaDb             []ParametersMariaDbState             `json:"maria_db"`
	Mysql               []ParametersMysqlState               `json:"mysql"`
	Oracle              []ParametersOracleState              `json:"oracle"`
	Postgresql          []ParametersPostgresqlState          `json:"postgresql"`
	Presto              []ParametersPrestoState              `json:"presto"`
	Rds                 []ParametersRdsState                 `json:"rds"`
	Redshift            []ParametersRedshiftState            `json:"redshift"`
	S3                  []ParametersS3State                  `json:"s3"`
	ServiceNow          []ParametersServiceNowState          `json:"service_now"`
	Snowflake           []ParametersSnowflakeState           `json:"snowflake"`
	Spark               []ParametersSparkState               `json:"spark"`
	SqlServer           []ParametersSqlServerState           `json:"sql_server"`
	Teradata            []ParametersTeradataState            `json:"teradata"`
	Twitter             []ParametersTwitterState             `json:"twitter"`
}

type ParametersAmazonElasticsearchState struct {
	Domain string `json:"domain"`
}

type ParametersAthenaState struct {
	WorkGroup string `json:"work_group"`
}

type ParametersAuroraState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersAuroraPostgresqlState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersAwsIotAnalyticsState struct {
	DataSetName string `json:"data_set_name"`
}

type ParametersJiraState struct {
	SiteBaseUrl string `json:"site_base_url"`
}

type ParametersMariaDbState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersMysqlState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersOracleState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersPostgresqlState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersPrestoState struct {
	Catalog string  `json:"catalog"`
	Host    string  `json:"host"`
	Port    float64 `json:"port"`
}

type ParametersRdsState struct {
	Database   string `json:"database"`
	InstanceId string `json:"instance_id"`
}

type ParametersRedshiftState struct {
	ClusterId string  `json:"cluster_id"`
	Database  string  `json:"database"`
	Host      string  `json:"host"`
	Port      float64 `json:"port"`
}

type ParametersS3State struct {
	ManifestFileLocation []ParametersS3ManifestFileLocationState `json:"manifest_file_location"`
}

type ParametersS3ManifestFileLocationState struct {
	Bucket string `json:"bucket"`
	Key    string `json:"key"`
}

type ParametersServiceNowState struct {
	SiteBaseUrl string `json:"site_base_url"`
}

type ParametersSnowflakeState struct {
	Database  string `json:"database"`
	Host      string `json:"host"`
	Warehouse string `json:"warehouse"`
}

type ParametersSparkState struct {
	Host string  `json:"host"`
	Port float64 `json:"port"`
}

type ParametersSqlServerState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersTeradataState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersTwitterState struct {
	MaxRows float64 `json:"max_rows"`
	Query   string  `json:"query"`
}

type PermissionState struct {
	Actions   []string `json:"actions"`
	Principal string   `json:"principal"`
}

type SslPropertiesState struct {
	DisableSsl bool `json:"disable_ssl"`
}

type VpcConnectionPropertiesState struct {
	VpcConnectionArn string `json:"vpc_connection_arn"`
}
