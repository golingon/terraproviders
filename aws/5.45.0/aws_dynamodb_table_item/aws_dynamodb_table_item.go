// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dynamodb_table_item

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dynamodb_table_item.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDynamodbTableItemState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adti *Resource) Type() string {
	return "aws_dynamodb_table_item"
}

// LocalName returns the local name for [Resource].
func (adti *Resource) LocalName() string {
	return adti.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adti *Resource) Configuration() interface{} {
	return adti.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adti *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adti)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adti *Resource) Dependencies() terra.Dependencies {
	return adti.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adti *Resource) LifecycleManagement() *terra.Lifecycle {
	return adti.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adti *Resource) Attributes() awsDynamodbTableItemAttributes {
	return awsDynamodbTableItemAttributes{ref: terra.ReferenceResource(adti)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adti *Resource) ImportState(state io.Reader) error {
	adti.state = &awsDynamodbTableItemState{}
	if err := json.NewDecoder(state).Decode(adti.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adti.Type(), adti.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adti *Resource) State() (*awsDynamodbTableItemState, bool) {
	return adti.state, adti.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adti *Resource) StateMust() *awsDynamodbTableItemState {
	if adti.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adti.Type(), adti.LocalName()))
	}
	return adti.state
}

// Args contains the configurations for aws_dynamodb_table_item.
type Args struct {
	// HashKey: string, required
	HashKey terra.StringValue `hcl:"hash_key,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Item: string, required
	Item terra.StringValue `hcl:"item,attr" validate:"required"`
	// RangeKey: string, optional
	RangeKey terra.StringValue `hcl:"range_key,attr"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type awsDynamodbTableItemAttributes struct {
	ref terra.Reference
}

// HashKey returns a reference to field hash_key of aws_dynamodb_table_item.
func (adti awsDynamodbTableItemAttributes) HashKey() terra.StringValue {
	return terra.ReferenceAsString(adti.ref.Append("hash_key"))
}

// Id returns a reference to field id of aws_dynamodb_table_item.
func (adti awsDynamodbTableItemAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adti.ref.Append("id"))
}

// Item returns a reference to field item of aws_dynamodb_table_item.
func (adti awsDynamodbTableItemAttributes) Item() terra.StringValue {
	return terra.ReferenceAsString(adti.ref.Append("item"))
}

// RangeKey returns a reference to field range_key of aws_dynamodb_table_item.
func (adti awsDynamodbTableItemAttributes) RangeKey() terra.StringValue {
	return terra.ReferenceAsString(adti.ref.Append("range_key"))
}

// TableName returns a reference to field table_name of aws_dynamodb_table_item.
func (adti awsDynamodbTableItemAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(adti.ref.Append("table_name"))
}

type awsDynamodbTableItemState struct {
	HashKey   string `json:"hash_key"`
	Id        string `json:"id"`
	Item      string `json:"item"`
	RangeKey  string `json:"range_key"`
	TableName string `json:"table_name"`
}
