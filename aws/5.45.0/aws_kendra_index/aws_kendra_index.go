// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kendra_index

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kendra_index.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKendraIndexState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aki *Resource) Type() string {
	return "aws_kendra_index"
}

// LocalName returns the local name for [Resource].
func (aki *Resource) LocalName() string {
	return aki.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aki *Resource) Configuration() interface{} {
	return aki.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aki *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aki)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aki *Resource) Dependencies() terra.Dependencies {
	return aki.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aki *Resource) LifecycleManagement() *terra.Lifecycle {
	return aki.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aki *Resource) Attributes() awsKendraIndexAttributes {
	return awsKendraIndexAttributes{ref: terra.ReferenceResource(aki)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aki *Resource) ImportState(state io.Reader) error {
	aki.state = &awsKendraIndexState{}
	if err := json.NewDecoder(state).Decode(aki.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aki.Type(), aki.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aki *Resource) State() (*awsKendraIndexState, bool) {
	return aki.state, aki.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aki *Resource) StateMust() *awsKendraIndexState {
	if aki.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aki.Type(), aki.LocalName()))
	}
	return aki.state
}

// Args contains the configurations for aws_kendra_index.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Edition: string, optional
	Edition terra.StringValue `hcl:"edition,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserContextPolicy: string, optional
	UserContextPolicy terra.StringValue `hcl:"user_context_policy,attr"`
	// CapacityUnits: optional
	CapacityUnits *CapacityUnits `hcl:"capacity_units,block"`
	// DocumentMetadataConfigurationUpdates: min=0,max=500
	DocumentMetadataConfigurationUpdates []DocumentMetadataConfigurationUpdates `hcl:"document_metadata_configuration_updates,block" validate:"min=0,max=500"`
	// ServerSideEncryptionConfiguration: optional
	ServerSideEncryptionConfiguration *ServerSideEncryptionConfiguration `hcl:"server_side_encryption_configuration,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// UserGroupResolutionConfiguration: optional
	UserGroupResolutionConfiguration *UserGroupResolutionConfiguration `hcl:"user_group_resolution_configuration,block"`
	// UserTokenConfigurations: optional
	UserTokenConfigurations *UserTokenConfigurations `hcl:"user_token_configurations,block"`
}

type awsKendraIndexAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_kendra_index.
func (aki awsKendraIndexAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aki.ref.Append("arn"))
}

// CreatedAt returns a reference to field created_at of aws_kendra_index.
func (aki awsKendraIndexAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(aki.ref.Append("created_at"))
}

// Description returns a reference to field description of aws_kendra_index.
func (aki awsKendraIndexAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aki.ref.Append("description"))
}

// Edition returns a reference to field edition of aws_kendra_index.
func (aki awsKendraIndexAttributes) Edition() terra.StringValue {
	return terra.ReferenceAsString(aki.ref.Append("edition"))
}

// ErrorMessage returns a reference to field error_message of aws_kendra_index.
func (aki awsKendraIndexAttributes) ErrorMessage() terra.StringValue {
	return terra.ReferenceAsString(aki.ref.Append("error_message"))
}

// Id returns a reference to field id of aws_kendra_index.
func (aki awsKendraIndexAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aki.ref.Append("id"))
}

// Name returns a reference to field name of aws_kendra_index.
func (aki awsKendraIndexAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aki.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_kendra_index.
func (aki awsKendraIndexAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(aki.ref.Append("role_arn"))
}

// Status returns a reference to field status of aws_kendra_index.
func (aki awsKendraIndexAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aki.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_kendra_index.
func (aki awsKendraIndexAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aki.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_kendra_index.
func (aki awsKendraIndexAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aki.ref.Append("tags_all"))
}

// UpdatedAt returns a reference to field updated_at of aws_kendra_index.
func (aki awsKendraIndexAttributes) UpdatedAt() terra.StringValue {
	return terra.ReferenceAsString(aki.ref.Append("updated_at"))
}

// UserContextPolicy returns a reference to field user_context_policy of aws_kendra_index.
func (aki awsKendraIndexAttributes) UserContextPolicy() terra.StringValue {
	return terra.ReferenceAsString(aki.ref.Append("user_context_policy"))
}

func (aki awsKendraIndexAttributes) IndexStatistics() terra.ListValue[IndexStatisticsAttributes] {
	return terra.ReferenceAsList[IndexStatisticsAttributes](aki.ref.Append("index_statistics"))
}

func (aki awsKendraIndexAttributes) CapacityUnits() terra.ListValue[CapacityUnitsAttributes] {
	return terra.ReferenceAsList[CapacityUnitsAttributes](aki.ref.Append("capacity_units"))
}

func (aki awsKendraIndexAttributes) DocumentMetadataConfigurationUpdates() terra.SetValue[DocumentMetadataConfigurationUpdatesAttributes] {
	return terra.ReferenceAsSet[DocumentMetadataConfigurationUpdatesAttributes](aki.ref.Append("document_metadata_configuration_updates"))
}

func (aki awsKendraIndexAttributes) ServerSideEncryptionConfiguration() terra.ListValue[ServerSideEncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[ServerSideEncryptionConfigurationAttributes](aki.ref.Append("server_side_encryption_configuration"))
}

func (aki awsKendraIndexAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aki.ref.Append("timeouts"))
}

func (aki awsKendraIndexAttributes) UserGroupResolutionConfiguration() terra.ListValue[UserGroupResolutionConfigurationAttributes] {
	return terra.ReferenceAsList[UserGroupResolutionConfigurationAttributes](aki.ref.Append("user_group_resolution_configuration"))
}

func (aki awsKendraIndexAttributes) UserTokenConfigurations() terra.ListValue[UserTokenConfigurationsAttributes] {
	return terra.ReferenceAsList[UserTokenConfigurationsAttributes](aki.ref.Append("user_token_configurations"))
}

type awsKendraIndexState struct {
	Arn                                  string                                      `json:"arn"`
	CreatedAt                            string                                      `json:"created_at"`
	Description                          string                                      `json:"description"`
	Edition                              string                                      `json:"edition"`
	ErrorMessage                         string                                      `json:"error_message"`
	Id                                   string                                      `json:"id"`
	Name                                 string                                      `json:"name"`
	RoleArn                              string                                      `json:"role_arn"`
	Status                               string                                      `json:"status"`
	Tags                                 map[string]string                           `json:"tags"`
	TagsAll                              map[string]string                           `json:"tags_all"`
	UpdatedAt                            string                                      `json:"updated_at"`
	UserContextPolicy                    string                                      `json:"user_context_policy"`
	IndexStatistics                      []IndexStatisticsState                      `json:"index_statistics"`
	CapacityUnits                        []CapacityUnitsState                        `json:"capacity_units"`
	DocumentMetadataConfigurationUpdates []DocumentMetadataConfigurationUpdatesState `json:"document_metadata_configuration_updates"`
	ServerSideEncryptionConfiguration    []ServerSideEncryptionConfigurationState    `json:"server_side_encryption_configuration"`
	Timeouts                             *TimeoutsState                              `json:"timeouts"`
	UserGroupResolutionConfiguration     []UserGroupResolutionConfigurationState     `json:"user_group_resolution_configuration"`
	UserTokenConfigurations              []UserTokenConfigurationsState              `json:"user_token_configurations"`
}
