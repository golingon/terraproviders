// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_inspector2_enabler

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_inspector2_enabler.
type Resource struct {
	Name      string
	Args      Args
	state     *awsInspector2EnablerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aie *Resource) Type() string {
	return "aws_inspector2_enabler"
}

// LocalName returns the local name for [Resource].
func (aie *Resource) LocalName() string {
	return aie.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aie *Resource) Configuration() interface{} {
	return aie.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aie *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aie)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aie *Resource) Dependencies() terra.Dependencies {
	return aie.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aie *Resource) LifecycleManagement() *terra.Lifecycle {
	return aie.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aie *Resource) Attributes() awsInspector2EnablerAttributes {
	return awsInspector2EnablerAttributes{ref: terra.ReferenceResource(aie)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aie *Resource) ImportState(state io.Reader) error {
	aie.state = &awsInspector2EnablerState{}
	if err := json.NewDecoder(state).Decode(aie.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aie.Type(), aie.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aie *Resource) State() (*awsInspector2EnablerState, bool) {
	return aie.state, aie.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aie *Resource) StateMust() *awsInspector2EnablerState {
	if aie.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aie.Type(), aie.LocalName()))
	}
	return aie.state
}

// Args contains the configurations for aws_inspector2_enabler.
type Args struct {
	// AccountIds: set of string, required
	AccountIds terra.SetValue[terra.StringValue] `hcl:"account_ids,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceTypes: set of string, required
	ResourceTypes terra.SetValue[terra.StringValue] `hcl:"resource_types,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsInspector2EnablerAttributes struct {
	ref terra.Reference
}

// AccountIds returns a reference to field account_ids of aws_inspector2_enabler.
func (aie awsInspector2EnablerAttributes) AccountIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aie.ref.Append("account_ids"))
}

// Id returns a reference to field id of aws_inspector2_enabler.
func (aie awsInspector2EnablerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aie.ref.Append("id"))
}

// ResourceTypes returns a reference to field resource_types of aws_inspector2_enabler.
func (aie awsInspector2EnablerAttributes) ResourceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aie.ref.Append("resource_types"))
}

func (aie awsInspector2EnablerAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aie.ref.Append("timeouts"))
}

type awsInspector2EnablerState struct {
	AccountIds    []string       `json:"account_ids"`
	Id            string         `json:"id"`
	ResourceTypes []string       `json:"resource_types"`
	Timeouts      *TimeoutsState `json:"timeouts"`
}
