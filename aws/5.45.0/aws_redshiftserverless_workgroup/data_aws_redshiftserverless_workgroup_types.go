// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshiftserverless_workgroup

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataEndpointAttributes struct {
	ref terra.Reference
}

func (e DataEndpointAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e DataEndpointAttributes) InternalWithRef(ref terra.Reference) DataEndpointAttributes {
	return DataEndpointAttributes{ref: ref}
}

func (e DataEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e DataEndpointAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("address"))
}

func (e DataEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("port"))
}

func (e DataEndpointAttributes) VpcEndpoint() terra.ListValue[DataEndpointVpcEndpointAttributes] {
	return terra.ReferenceAsList[DataEndpointVpcEndpointAttributes](e.ref.Append("vpc_endpoint"))
}

type DataEndpointVpcEndpointAttributes struct {
	ref terra.Reference
}

func (ve DataEndpointVpcEndpointAttributes) InternalRef() (terra.Reference, error) {
	return ve.ref, nil
}

func (ve DataEndpointVpcEndpointAttributes) InternalWithRef(ref terra.Reference) DataEndpointVpcEndpointAttributes {
	return DataEndpointVpcEndpointAttributes{ref: ref}
}

func (ve DataEndpointVpcEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ve.ref.InternalTokens()
}

func (ve DataEndpointVpcEndpointAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceAsString(ve.ref.Append("vpc_endpoint_id"))
}

func (ve DataEndpointVpcEndpointAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(ve.ref.Append("vpc_id"))
}

func (ve DataEndpointVpcEndpointAttributes) NetworkInterface() terra.ListValue[DataEndpointVpcEndpointNetworkInterfaceAttributes] {
	return terra.ReferenceAsList[DataEndpointVpcEndpointNetworkInterfaceAttributes](ve.ref.Append("network_interface"))
}

type DataEndpointVpcEndpointNetworkInterfaceAttributes struct {
	ref terra.Reference
}

func (ni DataEndpointVpcEndpointNetworkInterfaceAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni DataEndpointVpcEndpointNetworkInterfaceAttributes) InternalWithRef(ref terra.Reference) DataEndpointVpcEndpointNetworkInterfaceAttributes {
	return DataEndpointVpcEndpointNetworkInterfaceAttributes{ref: ref}
}

func (ni DataEndpointVpcEndpointNetworkInterfaceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni DataEndpointVpcEndpointNetworkInterfaceAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("availability_zone"))
}

func (ni DataEndpointVpcEndpointNetworkInterfaceAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("network_interface_id"))
}

func (ni DataEndpointVpcEndpointNetworkInterfaceAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("private_ip_address"))
}

func (ni DataEndpointVpcEndpointNetworkInterfaceAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("subnet_id"))
}

type DataEndpointState struct {
	Address     string                         `json:"address"`
	Port        float64                        `json:"port"`
	VpcEndpoint []DataEndpointVpcEndpointState `json:"vpc_endpoint"`
}

type DataEndpointVpcEndpointState struct {
	VpcEndpointId    string                                         `json:"vpc_endpoint_id"`
	VpcId            string                                         `json:"vpc_id"`
	NetworkInterface []DataEndpointVpcEndpointNetworkInterfaceState `json:"network_interface"`
}

type DataEndpointVpcEndpointNetworkInterfaceState struct {
	AvailabilityZone   string `json:"availability_zone"`
	NetworkInterfaceId string `json:"network_interface_id"`
	PrivateIpAddress   string `json:"private_ip_address"`
	SubnetId           string `json:"subnet_id"`
}
