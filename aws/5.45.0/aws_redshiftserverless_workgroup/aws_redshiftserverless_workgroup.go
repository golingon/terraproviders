// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshiftserverless_workgroup

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_redshiftserverless_workgroup.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRedshiftserverlessWorkgroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arw *Resource) Type() string {
	return "aws_redshiftserverless_workgroup"
}

// LocalName returns the local name for [Resource].
func (arw *Resource) LocalName() string {
	return arw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arw *Resource) Configuration() interface{} {
	return arw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arw *Resource) Dependencies() terra.Dependencies {
	return arw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arw *Resource) LifecycleManagement() *terra.Lifecycle {
	return arw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arw *Resource) Attributes() awsRedshiftserverlessWorkgroupAttributes {
	return awsRedshiftserverlessWorkgroupAttributes{ref: terra.ReferenceResource(arw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arw *Resource) ImportState(state io.Reader) error {
	arw.state = &awsRedshiftserverlessWorkgroupState{}
	if err := json.NewDecoder(state).Decode(arw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arw.Type(), arw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arw *Resource) State() (*awsRedshiftserverlessWorkgroupState, bool) {
	return arw.state, arw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arw *Resource) StateMust() *awsRedshiftserverlessWorkgroupState {
	if arw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arw.Type(), arw.LocalName()))
	}
	return arw.state
}

// Args contains the configurations for aws_redshiftserverless_workgroup.
type Args struct {
	// BaseCapacity: number, optional
	BaseCapacity terra.NumberValue `hcl:"base_capacity,attr"`
	// EnhancedVpcRouting: bool, optional
	EnhancedVpcRouting terra.BoolValue `hcl:"enhanced_vpc_routing,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxCapacity: number, optional
	MaxCapacity terra.NumberValue `hcl:"max_capacity,attr"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// PubliclyAccessible: bool, optional
	PubliclyAccessible terra.BoolValue `hcl:"publicly_accessible,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// WorkgroupName: string, required
	WorkgroupName terra.StringValue `hcl:"workgroup_name,attr" validate:"required"`
	// ConfigParameter: min=0
	ConfigParameter []ConfigParameter `hcl:"config_parameter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRedshiftserverlessWorkgroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arw.ref.Append("arn"))
}

// BaseCapacity returns a reference to field base_capacity of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) BaseCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(arw.ref.Append("base_capacity"))
}

// EnhancedVpcRouting returns a reference to field enhanced_vpc_routing of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) EnhancedVpcRouting() terra.BoolValue {
	return terra.ReferenceAsBool(arw.ref.Append("enhanced_vpc_routing"))
}

// Id returns a reference to field id of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arw.ref.Append("id"))
}

// MaxCapacity returns a reference to field max_capacity of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) MaxCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(arw.ref.Append("max_capacity"))
}

// NamespaceName returns a reference to field namespace_name of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceAsString(arw.ref.Append("namespace_name"))
}

// Port returns a reference to field port of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(arw.ref.Append("port"))
}

// PubliclyAccessible returns a reference to field publicly_accessible of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) PubliclyAccessible() terra.BoolValue {
	return terra.ReferenceAsBool(arw.ref.Append("publicly_accessible"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arw.ref.Append("security_group_ids"))
}

// SubnetIds returns a reference to field subnet_ids of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arw.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arw.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arw.ref.Append("tags_all"))
}

// WorkgroupId returns a reference to field workgroup_id of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) WorkgroupId() terra.StringValue {
	return terra.ReferenceAsString(arw.ref.Append("workgroup_id"))
}

// WorkgroupName returns a reference to field workgroup_name of aws_redshiftserverless_workgroup.
func (arw awsRedshiftserverlessWorkgroupAttributes) WorkgroupName() terra.StringValue {
	return terra.ReferenceAsString(arw.ref.Append("workgroup_name"))
}

func (arw awsRedshiftserverlessWorkgroupAttributes) Endpoint() terra.ListValue[EndpointAttributes] {
	return terra.ReferenceAsList[EndpointAttributes](arw.ref.Append("endpoint"))
}

func (arw awsRedshiftserverlessWorkgroupAttributes) ConfigParameter() terra.SetValue[ConfigParameterAttributes] {
	return terra.ReferenceAsSet[ConfigParameterAttributes](arw.ref.Append("config_parameter"))
}

func (arw awsRedshiftserverlessWorkgroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arw.ref.Append("timeouts"))
}

type awsRedshiftserverlessWorkgroupState struct {
	Arn                string                 `json:"arn"`
	BaseCapacity       float64                `json:"base_capacity"`
	EnhancedVpcRouting bool                   `json:"enhanced_vpc_routing"`
	Id                 string                 `json:"id"`
	MaxCapacity        float64                `json:"max_capacity"`
	NamespaceName      string                 `json:"namespace_name"`
	Port               float64                `json:"port"`
	PubliclyAccessible bool                   `json:"publicly_accessible"`
	SecurityGroupIds   []string               `json:"security_group_ids"`
	SubnetIds          []string               `json:"subnet_ids"`
	Tags               map[string]string      `json:"tags"`
	TagsAll            map[string]string      `json:"tags_all"`
	WorkgroupId        string                 `json:"workgroup_id"`
	WorkgroupName      string                 `json:"workgroup_name"`
	Endpoint           []EndpointState        `json:"endpoint"`
	ConfigParameter    []ConfigParameterState `json:"config_parameter"`
	Timeouts           *TimeoutsState         `json:"timeouts"`
}
