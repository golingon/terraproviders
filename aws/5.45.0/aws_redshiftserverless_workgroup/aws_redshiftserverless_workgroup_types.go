// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshiftserverless_workgroup

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ConfigParameter struct {
	// ParameterKey: string, required
	ParameterKey terra.StringValue `hcl:"parameter_key,attr" validate:"required"`
	// ParameterValue: string, required
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type EndpointAttributes struct {
	ref terra.Reference
}

func (e EndpointAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EndpointAttributes) InternalWithRef(ref terra.Reference) EndpointAttributes {
	return EndpointAttributes{ref: ref}
}

func (e EndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EndpointAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("address"))
}

func (e EndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("port"))
}

func (e EndpointAttributes) VpcEndpoint() terra.ListValue[EndpointVpcEndpointAttributes] {
	return terra.ReferenceAsList[EndpointVpcEndpointAttributes](e.ref.Append("vpc_endpoint"))
}

type EndpointVpcEndpointAttributes struct {
	ref terra.Reference
}

func (ve EndpointVpcEndpointAttributes) InternalRef() (terra.Reference, error) {
	return ve.ref, nil
}

func (ve EndpointVpcEndpointAttributes) InternalWithRef(ref terra.Reference) EndpointVpcEndpointAttributes {
	return EndpointVpcEndpointAttributes{ref: ref}
}

func (ve EndpointVpcEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ve.ref.InternalTokens()
}

func (ve EndpointVpcEndpointAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceAsString(ve.ref.Append("vpc_endpoint_id"))
}

func (ve EndpointVpcEndpointAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(ve.ref.Append("vpc_id"))
}

func (ve EndpointVpcEndpointAttributes) NetworkInterface() terra.ListValue[EndpointVpcEndpointNetworkInterfaceAttributes] {
	return terra.ReferenceAsList[EndpointVpcEndpointNetworkInterfaceAttributes](ve.ref.Append("network_interface"))
}

type EndpointVpcEndpointNetworkInterfaceAttributes struct {
	ref terra.Reference
}

func (ni EndpointVpcEndpointNetworkInterfaceAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni EndpointVpcEndpointNetworkInterfaceAttributes) InternalWithRef(ref terra.Reference) EndpointVpcEndpointNetworkInterfaceAttributes {
	return EndpointVpcEndpointNetworkInterfaceAttributes{ref: ref}
}

func (ni EndpointVpcEndpointNetworkInterfaceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni EndpointVpcEndpointNetworkInterfaceAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("availability_zone"))
}

func (ni EndpointVpcEndpointNetworkInterfaceAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("network_interface_id"))
}

func (ni EndpointVpcEndpointNetworkInterfaceAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("private_ip_address"))
}

func (ni EndpointVpcEndpointNetworkInterfaceAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("subnet_id"))
}

type ConfigParameterAttributes struct {
	ref terra.Reference
}

func (cp ConfigParameterAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp ConfigParameterAttributes) InternalWithRef(ref terra.Reference) ConfigParameterAttributes {
	return ConfigParameterAttributes{ref: ref}
}

func (cp ConfigParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp ConfigParameterAttributes) ParameterKey() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("parameter_key"))
}

func (cp ConfigParameterAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("parameter_value"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EndpointState struct {
	Address     string                     `json:"address"`
	Port        float64                    `json:"port"`
	VpcEndpoint []EndpointVpcEndpointState `json:"vpc_endpoint"`
}

type EndpointVpcEndpointState struct {
	VpcEndpointId    string                                     `json:"vpc_endpoint_id"`
	VpcId            string                                     `json:"vpc_id"`
	NetworkInterface []EndpointVpcEndpointNetworkInterfaceState `json:"network_interface"`
}

type EndpointVpcEndpointNetworkInterfaceState struct {
	AvailabilityZone   string `json:"availability_zone"`
	NetworkInterfaceId string `json:"network_interface_id"`
	PrivateIpAddress   string `json:"private_ip_address"`
	SubnetId           string `json:"subnet_id"`
}

type ConfigParameterState struct {
	ParameterKey   string `json:"parameter_key"`
	ParameterValue string `json:"parameter_value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
