// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_backup_selection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_backup_selection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsBackupSelectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abs *Resource) Type() string {
	return "aws_backup_selection"
}

// LocalName returns the local name for [Resource].
func (abs *Resource) LocalName() string {
	return abs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abs *Resource) Configuration() interface{} {
	return abs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abs *Resource) Dependencies() terra.Dependencies {
	return abs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abs *Resource) LifecycleManagement() *terra.Lifecycle {
	return abs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abs *Resource) Attributes() awsBackupSelectionAttributes {
	return awsBackupSelectionAttributes{ref: terra.ReferenceResource(abs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abs *Resource) ImportState(state io.Reader) error {
	abs.state = &awsBackupSelectionState{}
	if err := json.NewDecoder(state).Decode(abs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abs.Type(), abs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abs *Resource) State() (*awsBackupSelectionState, bool) {
	return abs.state, abs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abs *Resource) StateMust() *awsBackupSelectionState {
	if abs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abs.Type(), abs.LocalName()))
	}
	return abs.state
}

// Args contains the configurations for aws_backup_selection.
type Args struct {
	// IamRoleArn: string, required
	IamRoleArn terra.StringValue `hcl:"iam_role_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NotResources: set of string, optional
	NotResources terra.SetValue[terra.StringValue] `hcl:"not_resources,attr"`
	// PlanId: string, required
	PlanId terra.StringValue `hcl:"plan_id,attr" validate:"required"`
	// Resources: set of string, optional
	Resources terra.SetValue[terra.StringValue] `hcl:"resources,attr"`
	// Condition: min=0
	Condition []Condition `hcl:"condition,block" validate:"min=0"`
	// SelectionTag: min=0
	SelectionTag []SelectionTag `hcl:"selection_tag,block" validate:"min=0"`
}

type awsBackupSelectionAttributes struct {
	ref terra.Reference
}

// IamRoleArn returns a reference to field iam_role_arn of aws_backup_selection.
func (abs awsBackupSelectionAttributes) IamRoleArn() terra.StringValue {
	return terra.ReferenceAsString(abs.ref.Append("iam_role_arn"))
}

// Id returns a reference to field id of aws_backup_selection.
func (abs awsBackupSelectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abs.ref.Append("id"))
}

// Name returns a reference to field name of aws_backup_selection.
func (abs awsBackupSelectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(abs.ref.Append("name"))
}

// NotResources returns a reference to field not_resources of aws_backup_selection.
func (abs awsBackupSelectionAttributes) NotResources() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](abs.ref.Append("not_resources"))
}

// PlanId returns a reference to field plan_id of aws_backup_selection.
func (abs awsBackupSelectionAttributes) PlanId() terra.StringValue {
	return terra.ReferenceAsString(abs.ref.Append("plan_id"))
}

// Resources returns a reference to field resources of aws_backup_selection.
func (abs awsBackupSelectionAttributes) Resources() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](abs.ref.Append("resources"))
}

func (abs awsBackupSelectionAttributes) Condition() terra.SetValue[ConditionAttributes] {
	return terra.ReferenceAsSet[ConditionAttributes](abs.ref.Append("condition"))
}

func (abs awsBackupSelectionAttributes) SelectionTag() terra.SetValue[SelectionTagAttributes] {
	return terra.ReferenceAsSet[SelectionTagAttributes](abs.ref.Append("selection_tag"))
}

type awsBackupSelectionState struct {
	IamRoleArn   string              `json:"iam_role_arn"`
	Id           string              `json:"id"`
	Name         string              `json:"name"`
	NotResources []string            `json:"not_resources"`
	PlanId       string              `json:"plan_id"`
	Resources    []string            `json:"resources"`
	Condition    []ConditionState    `json:"condition"`
	SelectionTag []SelectionTagState `json:"selection_tag"`
}
