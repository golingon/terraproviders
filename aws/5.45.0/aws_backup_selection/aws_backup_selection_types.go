// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_backup_selection

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Condition struct {
	// ConditionStringEquals: min=0
	StringEquals []ConditionStringEquals `hcl:"string_equals,block" validate:"min=0"`
	// ConditionStringLike: min=0
	StringLike []ConditionStringLike `hcl:"string_like,block" validate:"min=0"`
	// ConditionStringNotEquals: min=0
	StringNotEquals []ConditionStringNotEquals `hcl:"string_not_equals,block" validate:"min=0"`
	// ConditionStringNotLike: min=0
	StringNotLike []ConditionStringNotLike `hcl:"string_not_like,block" validate:"min=0"`
}

type ConditionStringEquals struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ConditionStringLike struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ConditionStringNotEquals struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ConditionStringNotLike struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type SelectionTag struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ConditionAttributes struct {
	ref terra.Reference
}

func (c ConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConditionAttributes) InternalWithRef(ref terra.Reference) ConditionAttributes {
	return ConditionAttributes{ref: ref}
}

func (c ConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConditionAttributes) StringEquals() terra.SetValue[ConditionStringEqualsAttributes] {
	return terra.ReferenceAsSet[ConditionStringEqualsAttributes](c.ref.Append("string_equals"))
}

func (c ConditionAttributes) StringLike() terra.SetValue[ConditionStringLikeAttributes] {
	return terra.ReferenceAsSet[ConditionStringLikeAttributes](c.ref.Append("string_like"))
}

func (c ConditionAttributes) StringNotEquals() terra.SetValue[ConditionStringNotEqualsAttributes] {
	return terra.ReferenceAsSet[ConditionStringNotEqualsAttributes](c.ref.Append("string_not_equals"))
}

func (c ConditionAttributes) StringNotLike() terra.SetValue[ConditionStringNotLikeAttributes] {
	return terra.ReferenceAsSet[ConditionStringNotLikeAttributes](c.ref.Append("string_not_like"))
}

type ConditionStringEqualsAttributes struct {
	ref terra.Reference
}

func (se ConditionStringEqualsAttributes) InternalRef() (terra.Reference, error) {
	return se.ref, nil
}

func (se ConditionStringEqualsAttributes) InternalWithRef(ref terra.Reference) ConditionStringEqualsAttributes {
	return ConditionStringEqualsAttributes{ref: ref}
}

func (se ConditionStringEqualsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return se.ref.InternalTokens()
}

func (se ConditionStringEqualsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(se.ref.Append("key"))
}

func (se ConditionStringEqualsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(se.ref.Append("value"))
}

type ConditionStringLikeAttributes struct {
	ref terra.Reference
}

func (sl ConditionStringLikeAttributes) InternalRef() (terra.Reference, error) {
	return sl.ref, nil
}

func (sl ConditionStringLikeAttributes) InternalWithRef(ref terra.Reference) ConditionStringLikeAttributes {
	return ConditionStringLikeAttributes{ref: ref}
}

func (sl ConditionStringLikeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sl.ref.InternalTokens()
}

func (sl ConditionStringLikeAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(sl.ref.Append("key"))
}

func (sl ConditionStringLikeAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(sl.ref.Append("value"))
}

type ConditionStringNotEqualsAttributes struct {
	ref terra.Reference
}

func (sne ConditionStringNotEqualsAttributes) InternalRef() (terra.Reference, error) {
	return sne.ref, nil
}

func (sne ConditionStringNotEqualsAttributes) InternalWithRef(ref terra.Reference) ConditionStringNotEqualsAttributes {
	return ConditionStringNotEqualsAttributes{ref: ref}
}

func (sne ConditionStringNotEqualsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sne.ref.InternalTokens()
}

func (sne ConditionStringNotEqualsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(sne.ref.Append("key"))
}

func (sne ConditionStringNotEqualsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(sne.ref.Append("value"))
}

type ConditionStringNotLikeAttributes struct {
	ref terra.Reference
}

func (snl ConditionStringNotLikeAttributes) InternalRef() (terra.Reference, error) {
	return snl.ref, nil
}

func (snl ConditionStringNotLikeAttributes) InternalWithRef(ref terra.Reference) ConditionStringNotLikeAttributes {
	return ConditionStringNotLikeAttributes{ref: ref}
}

func (snl ConditionStringNotLikeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return snl.ref.InternalTokens()
}

func (snl ConditionStringNotLikeAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(snl.ref.Append("key"))
}

func (snl ConditionStringNotLikeAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(snl.ref.Append("value"))
}

type SelectionTagAttributes struct {
	ref terra.Reference
}

func (st SelectionTagAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st SelectionTagAttributes) InternalWithRef(ref terra.Reference) SelectionTagAttributes {
	return SelectionTagAttributes{ref: ref}
}

func (st SelectionTagAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st SelectionTagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("key"))
}

func (st SelectionTagAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("type"))
}

func (st SelectionTagAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("value"))
}

type ConditionState struct {
	StringEquals    []ConditionStringEqualsState    `json:"string_equals"`
	StringLike      []ConditionStringLikeState      `json:"string_like"`
	StringNotEquals []ConditionStringNotEqualsState `json:"string_not_equals"`
	StringNotLike   []ConditionStringNotLikeState   `json:"string_not_like"`
}

type ConditionStringEqualsState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type ConditionStringLikeState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type ConditionStringNotEqualsState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type ConditionStringNotLikeState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type SelectionTagState struct {
	Key   string `json:"key"`
	Type  string `json:"type"`
	Value string `json:"value"`
}
