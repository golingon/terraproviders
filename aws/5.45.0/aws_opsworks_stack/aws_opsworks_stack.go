// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opsworks_stack

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_opsworks_stack.
type Resource struct {
	Name      string
	Args      Args
	state     *awsOpsworksStackState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aos *Resource) Type() string {
	return "aws_opsworks_stack"
}

// LocalName returns the local name for [Resource].
func (aos *Resource) LocalName() string {
	return aos.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aos *Resource) Configuration() interface{} {
	return aos.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aos *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aos)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aos *Resource) Dependencies() terra.Dependencies {
	return aos.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aos *Resource) LifecycleManagement() *terra.Lifecycle {
	return aos.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aos *Resource) Attributes() awsOpsworksStackAttributes {
	return awsOpsworksStackAttributes{ref: terra.ReferenceResource(aos)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aos *Resource) ImportState(state io.Reader) error {
	aos.state = &awsOpsworksStackState{}
	if err := json.NewDecoder(state).Decode(aos.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aos.Type(), aos.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aos *Resource) State() (*awsOpsworksStackState, bool) {
	return aos.state, aos.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aos *Resource) StateMust() *awsOpsworksStackState {
	if aos.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aos.Type(), aos.LocalName()))
	}
	return aos.state
}

// Args contains the configurations for aws_opsworks_stack.
type Args struct {
	// AgentVersion: string, optional
	AgentVersion terra.StringValue `hcl:"agent_version,attr"`
	// BerkshelfVersion: string, optional
	BerkshelfVersion terra.StringValue `hcl:"berkshelf_version,attr"`
	// Color: string, optional
	Color terra.StringValue `hcl:"color,attr"`
	// ConfigurationManagerName: string, optional
	ConfigurationManagerName terra.StringValue `hcl:"configuration_manager_name,attr"`
	// ConfigurationManagerVersion: string, optional
	ConfigurationManagerVersion terra.StringValue `hcl:"configuration_manager_version,attr"`
	// CustomJson: string, optional
	CustomJson terra.StringValue `hcl:"custom_json,attr"`
	// DefaultAvailabilityZone: string, optional
	DefaultAvailabilityZone terra.StringValue `hcl:"default_availability_zone,attr"`
	// DefaultInstanceProfileArn: string, required
	DefaultInstanceProfileArn terra.StringValue `hcl:"default_instance_profile_arn,attr" validate:"required"`
	// DefaultOs: string, optional
	DefaultOs terra.StringValue `hcl:"default_os,attr"`
	// DefaultRootDeviceType: string, optional
	DefaultRootDeviceType terra.StringValue `hcl:"default_root_device_type,attr"`
	// DefaultSshKeyName: string, optional
	DefaultSshKeyName terra.StringValue `hcl:"default_ssh_key_name,attr"`
	// DefaultSubnetId: string, optional
	DefaultSubnetId terra.StringValue `hcl:"default_subnet_id,attr"`
	// HostnameTheme: string, optional
	HostnameTheme terra.StringValue `hcl:"hostname_theme,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManageBerkshelf: bool, optional
	ManageBerkshelf terra.BoolValue `hcl:"manage_berkshelf,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
	// ServiceRoleArn: string, required
	ServiceRoleArn terra.StringValue `hcl:"service_role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UseCustomCookbooks: bool, optional
	UseCustomCookbooks terra.BoolValue `hcl:"use_custom_cookbooks,attr"`
	// UseOpsworksSecurityGroups: bool, optional
	UseOpsworksSecurityGroups terra.BoolValue `hcl:"use_opsworks_security_groups,attr"`
	// VpcId: string, optional
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// CustomCookbooksSource: optional
	CustomCookbooksSource *CustomCookbooksSource `hcl:"custom_cookbooks_source,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsOpsworksStackAttributes struct {
	ref terra.Reference
}

// AgentVersion returns a reference to field agent_version of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) AgentVersion() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("agent_version"))
}

// Arn returns a reference to field arn of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("arn"))
}

// BerkshelfVersion returns a reference to field berkshelf_version of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) BerkshelfVersion() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("berkshelf_version"))
}

// Color returns a reference to field color of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) Color() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("color"))
}

// ConfigurationManagerName returns a reference to field configuration_manager_name of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) ConfigurationManagerName() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("configuration_manager_name"))
}

// ConfigurationManagerVersion returns a reference to field configuration_manager_version of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) ConfigurationManagerVersion() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("configuration_manager_version"))
}

// CustomJson returns a reference to field custom_json of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) CustomJson() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("custom_json"))
}

// DefaultAvailabilityZone returns a reference to field default_availability_zone of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) DefaultAvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("default_availability_zone"))
}

// DefaultInstanceProfileArn returns a reference to field default_instance_profile_arn of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) DefaultInstanceProfileArn() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("default_instance_profile_arn"))
}

// DefaultOs returns a reference to field default_os of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) DefaultOs() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("default_os"))
}

// DefaultRootDeviceType returns a reference to field default_root_device_type of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) DefaultRootDeviceType() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("default_root_device_type"))
}

// DefaultSshKeyName returns a reference to field default_ssh_key_name of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) DefaultSshKeyName() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("default_ssh_key_name"))
}

// DefaultSubnetId returns a reference to field default_subnet_id of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) DefaultSubnetId() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("default_subnet_id"))
}

// HostnameTheme returns a reference to field hostname_theme of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) HostnameTheme() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("hostname_theme"))
}

// Id returns a reference to field id of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("id"))
}

// ManageBerkshelf returns a reference to field manage_berkshelf of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) ManageBerkshelf() terra.BoolValue {
	return terra.ReferenceAsBool(aos.ref.Append("manage_berkshelf"))
}

// Name returns a reference to field name of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("name"))
}

// Region returns a reference to field region of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("region"))
}

// ServiceRoleArn returns a reference to field service_role_arn of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) ServiceRoleArn() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("service_role_arn"))
}

// StackEndpoint returns a reference to field stack_endpoint of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) StackEndpoint() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("stack_endpoint"))
}

// Tags returns a reference to field tags of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aos.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aos.ref.Append("tags_all"))
}

// UseCustomCookbooks returns a reference to field use_custom_cookbooks of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) UseCustomCookbooks() terra.BoolValue {
	return terra.ReferenceAsBool(aos.ref.Append("use_custom_cookbooks"))
}

// UseOpsworksSecurityGroups returns a reference to field use_opsworks_security_groups of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) UseOpsworksSecurityGroups() terra.BoolValue {
	return terra.ReferenceAsBool(aos.ref.Append("use_opsworks_security_groups"))
}

// VpcId returns a reference to field vpc_id of aws_opsworks_stack.
func (aos awsOpsworksStackAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("vpc_id"))
}

func (aos awsOpsworksStackAttributes) CustomCookbooksSource() terra.ListValue[CustomCookbooksSourceAttributes] {
	return terra.ReferenceAsList[CustomCookbooksSourceAttributes](aos.ref.Append("custom_cookbooks_source"))
}

func (aos awsOpsworksStackAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aos.ref.Append("timeouts"))
}

type awsOpsworksStackState struct {
	AgentVersion                string                       `json:"agent_version"`
	Arn                         string                       `json:"arn"`
	BerkshelfVersion            string                       `json:"berkshelf_version"`
	Color                       string                       `json:"color"`
	ConfigurationManagerName    string                       `json:"configuration_manager_name"`
	ConfigurationManagerVersion string                       `json:"configuration_manager_version"`
	CustomJson                  string                       `json:"custom_json"`
	DefaultAvailabilityZone     string                       `json:"default_availability_zone"`
	DefaultInstanceProfileArn   string                       `json:"default_instance_profile_arn"`
	DefaultOs                   string                       `json:"default_os"`
	DefaultRootDeviceType       string                       `json:"default_root_device_type"`
	DefaultSshKeyName           string                       `json:"default_ssh_key_name"`
	DefaultSubnetId             string                       `json:"default_subnet_id"`
	HostnameTheme               string                       `json:"hostname_theme"`
	Id                          string                       `json:"id"`
	ManageBerkshelf             bool                         `json:"manage_berkshelf"`
	Name                        string                       `json:"name"`
	Region                      string                       `json:"region"`
	ServiceRoleArn              string                       `json:"service_role_arn"`
	StackEndpoint               string                       `json:"stack_endpoint"`
	Tags                        map[string]string            `json:"tags"`
	TagsAll                     map[string]string            `json:"tags_all"`
	UseCustomCookbooks          bool                         `json:"use_custom_cookbooks"`
	UseOpsworksSecurityGroups   bool                         `json:"use_opsworks_security_groups"`
	VpcId                       string                       `json:"vpc_id"`
	CustomCookbooksSource       []CustomCookbooksSourceState `json:"custom_cookbooks_source"`
	Timeouts                    *TimeoutsState               `json:"timeouts"`
}
