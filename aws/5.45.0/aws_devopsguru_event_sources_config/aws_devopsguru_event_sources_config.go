// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_devopsguru_event_sources_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_devopsguru_event_sources_config.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDevopsguruEventSourcesConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adesc *Resource) Type() string {
	return "aws_devopsguru_event_sources_config"
}

// LocalName returns the local name for [Resource].
func (adesc *Resource) LocalName() string {
	return adesc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adesc *Resource) Configuration() interface{} {
	return adesc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adesc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adesc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adesc *Resource) Dependencies() terra.Dependencies {
	return adesc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adesc *Resource) LifecycleManagement() *terra.Lifecycle {
	return adesc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adesc *Resource) Attributes() awsDevopsguruEventSourcesConfigAttributes {
	return awsDevopsguruEventSourcesConfigAttributes{ref: terra.ReferenceResource(adesc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adesc *Resource) ImportState(state io.Reader) error {
	adesc.state = &awsDevopsguruEventSourcesConfigState{}
	if err := json.NewDecoder(state).Decode(adesc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adesc.Type(), adesc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adesc *Resource) State() (*awsDevopsguruEventSourcesConfigState, bool) {
	return adesc.state, adesc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adesc *Resource) StateMust() *awsDevopsguruEventSourcesConfigState {
	if adesc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adesc.Type(), adesc.LocalName()))
	}
	return adesc.state
}

// Args contains the configurations for aws_devopsguru_event_sources_config.
type Args struct {
	// EventSources: min=0
	EventSources []EventSources `hcl:"event_sources,block" validate:"min=0"`
}

type awsDevopsguruEventSourcesConfigAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_devopsguru_event_sources_config.
func (adesc awsDevopsguruEventSourcesConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adesc.ref.Append("id"))
}

func (adesc awsDevopsguruEventSourcesConfigAttributes) EventSources() terra.ListValue[EventSourcesAttributes] {
	return terra.ReferenceAsList[EventSourcesAttributes](adesc.ref.Append("event_sources"))
}

type awsDevopsguruEventSourcesConfigState struct {
	Id           string              `json:"id"`
	EventSources []EventSourcesState `json:"event_sources"`
}
