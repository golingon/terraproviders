// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_workspaces_directory

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_workspaces_directory.
type Resource struct {
	Name      string
	Args      Args
	state     *awsWorkspacesDirectoryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (awd *Resource) Type() string {
	return "aws_workspaces_directory"
}

// LocalName returns the local name for [Resource].
func (awd *Resource) LocalName() string {
	return awd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (awd *Resource) Configuration() interface{} {
	return awd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (awd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(awd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (awd *Resource) Dependencies() terra.Dependencies {
	return awd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (awd *Resource) LifecycleManagement() *terra.Lifecycle {
	return awd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (awd *Resource) Attributes() awsWorkspacesDirectoryAttributes {
	return awsWorkspacesDirectoryAttributes{ref: terra.ReferenceResource(awd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (awd *Resource) ImportState(state io.Reader) error {
	awd.state = &awsWorkspacesDirectoryState{}
	if err := json.NewDecoder(state).Decode(awd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", awd.Type(), awd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (awd *Resource) State() (*awsWorkspacesDirectoryState, bool) {
	return awd.state, awd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (awd *Resource) StateMust() *awsWorkspacesDirectoryState {
	if awd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", awd.Type(), awd.LocalName()))
	}
	return awd.state
}

// Args contains the configurations for aws_workspaces_directory.
type Args struct {
	// DirectoryId: string, required
	DirectoryId terra.StringValue `hcl:"directory_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpGroupIds: set of string, optional
	IpGroupIds terra.SetValue[terra.StringValue] `hcl:"ip_group_ids,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// SelfServicePermissions: optional
	SelfServicePermissions *SelfServicePermissions `hcl:"self_service_permissions,block"`
	// WorkspaceAccessProperties: optional
	WorkspaceAccessProperties *WorkspaceAccessProperties `hcl:"workspace_access_properties,block"`
	// WorkspaceCreationProperties: optional
	WorkspaceCreationProperties *WorkspaceCreationProperties `hcl:"workspace_creation_properties,block"`
}

type awsWorkspacesDirectoryAttributes struct {
	ref terra.Reference
}

// Alias returns a reference to field alias of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(awd.ref.Append("alias"))
}

// CustomerUserName returns a reference to field customer_user_name of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) CustomerUserName() terra.StringValue {
	return terra.ReferenceAsString(awd.ref.Append("customer_user_name"))
}

// DirectoryId returns a reference to field directory_id of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) DirectoryId() terra.StringValue {
	return terra.ReferenceAsString(awd.ref.Append("directory_id"))
}

// DirectoryName returns a reference to field directory_name of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) DirectoryName() terra.StringValue {
	return terra.ReferenceAsString(awd.ref.Append("directory_name"))
}

// DirectoryType returns a reference to field directory_type of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) DirectoryType() terra.StringValue {
	return terra.ReferenceAsString(awd.ref.Append("directory_type"))
}

// DnsIpAddresses returns a reference to field dns_ip_addresses of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) DnsIpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](awd.ref.Append("dns_ip_addresses"))
}

// IamRoleId returns a reference to field iam_role_id of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) IamRoleId() terra.StringValue {
	return terra.ReferenceAsString(awd.ref.Append("iam_role_id"))
}

// Id returns a reference to field id of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(awd.ref.Append("id"))
}

// IpGroupIds returns a reference to field ip_group_ids of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) IpGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](awd.ref.Append("ip_group_ids"))
}

// RegistrationCode returns a reference to field registration_code of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) RegistrationCode() terra.StringValue {
	return terra.ReferenceAsString(awd.ref.Append("registration_code"))
}

// SubnetIds returns a reference to field subnet_ids of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](awd.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](awd.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](awd.ref.Append("tags_all"))
}

// WorkspaceSecurityGroupId returns a reference to field workspace_security_group_id of aws_workspaces_directory.
func (awd awsWorkspacesDirectoryAttributes) WorkspaceSecurityGroupId() terra.StringValue {
	return terra.ReferenceAsString(awd.ref.Append("workspace_security_group_id"))
}

func (awd awsWorkspacesDirectoryAttributes) SelfServicePermissions() terra.ListValue[SelfServicePermissionsAttributes] {
	return terra.ReferenceAsList[SelfServicePermissionsAttributes](awd.ref.Append("self_service_permissions"))
}

func (awd awsWorkspacesDirectoryAttributes) WorkspaceAccessProperties() terra.ListValue[WorkspaceAccessPropertiesAttributes] {
	return terra.ReferenceAsList[WorkspaceAccessPropertiesAttributes](awd.ref.Append("workspace_access_properties"))
}

func (awd awsWorkspacesDirectoryAttributes) WorkspaceCreationProperties() terra.ListValue[WorkspaceCreationPropertiesAttributes] {
	return terra.ReferenceAsList[WorkspaceCreationPropertiesAttributes](awd.ref.Append("workspace_creation_properties"))
}

type awsWorkspacesDirectoryState struct {
	Alias                       string                             `json:"alias"`
	CustomerUserName            string                             `json:"customer_user_name"`
	DirectoryId                 string                             `json:"directory_id"`
	DirectoryName               string                             `json:"directory_name"`
	DirectoryType               string                             `json:"directory_type"`
	DnsIpAddresses              []string                           `json:"dns_ip_addresses"`
	IamRoleId                   string                             `json:"iam_role_id"`
	Id                          string                             `json:"id"`
	IpGroupIds                  []string                           `json:"ip_group_ids"`
	RegistrationCode            string                             `json:"registration_code"`
	SubnetIds                   []string                           `json:"subnet_ids"`
	Tags                        map[string]string                  `json:"tags"`
	TagsAll                     map[string]string                  `json:"tags_all"`
	WorkspaceSecurityGroupId    string                             `json:"workspace_security_group_id"`
	SelfServicePermissions      []SelfServicePermissionsState      `json:"self_service_permissions"`
	WorkspaceAccessProperties   []WorkspaceAccessPropertiesState   `json:"workspace_access_properties"`
	WorkspaceCreationProperties []WorkspaceCreationPropertiesState `json:"workspace_creation_properties"`
}
