// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_placement_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_placement_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsPlacementGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apg *Resource) Type() string {
	return "aws_placement_group"
}

// LocalName returns the local name for [Resource].
func (apg *Resource) LocalName() string {
	return apg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apg *Resource) Configuration() interface{} {
	return apg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apg *Resource) Dependencies() terra.Dependencies {
	return apg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apg *Resource) LifecycleManagement() *terra.Lifecycle {
	return apg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apg *Resource) Attributes() awsPlacementGroupAttributes {
	return awsPlacementGroupAttributes{ref: terra.ReferenceResource(apg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apg *Resource) ImportState(state io.Reader) error {
	apg.state = &awsPlacementGroupState{}
	if err := json.NewDecoder(state).Decode(apg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apg.Type(), apg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apg *Resource) State() (*awsPlacementGroupState, bool) {
	return apg.state, apg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apg *Resource) StateMust() *awsPlacementGroupState {
	if apg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apg.Type(), apg.LocalName()))
	}
	return apg.state
}

// Args contains the configurations for aws_placement_group.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PartitionCount: number, optional
	PartitionCount terra.NumberValue `hcl:"partition_count,attr"`
	// SpreadLevel: string, optional
	SpreadLevel terra.StringValue `hcl:"spread_level,attr"`
	// Strategy: string, required
	Strategy terra.StringValue `hcl:"strategy,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsPlacementGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_placement_group.
func (apg awsPlacementGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(apg.ref.Append("arn"))
}

// Id returns a reference to field id of aws_placement_group.
func (apg awsPlacementGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apg.ref.Append("id"))
}

// Name returns a reference to field name of aws_placement_group.
func (apg awsPlacementGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(apg.ref.Append("name"))
}

// PartitionCount returns a reference to field partition_count of aws_placement_group.
func (apg awsPlacementGroupAttributes) PartitionCount() terra.NumberValue {
	return terra.ReferenceAsNumber(apg.ref.Append("partition_count"))
}

// PlacementGroupId returns a reference to field placement_group_id of aws_placement_group.
func (apg awsPlacementGroupAttributes) PlacementGroupId() terra.StringValue {
	return terra.ReferenceAsString(apg.ref.Append("placement_group_id"))
}

// SpreadLevel returns a reference to field spread_level of aws_placement_group.
func (apg awsPlacementGroupAttributes) SpreadLevel() terra.StringValue {
	return terra.ReferenceAsString(apg.ref.Append("spread_level"))
}

// Strategy returns a reference to field strategy of aws_placement_group.
func (apg awsPlacementGroupAttributes) Strategy() terra.StringValue {
	return terra.ReferenceAsString(apg.ref.Append("strategy"))
}

// Tags returns a reference to field tags of aws_placement_group.
func (apg awsPlacementGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](apg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_placement_group.
func (apg awsPlacementGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](apg.ref.Append("tags_all"))
}

type awsPlacementGroupState struct {
	Arn              string            `json:"arn"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	PartitionCount   float64           `json:"partition_count"`
	PlacementGroupId string            `json:"placement_group_id"`
	SpreadLevel      string            `json:"spread_level"`
	Strategy         string            `json:"strategy"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
}
