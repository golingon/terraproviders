// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_container_recipe

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_imagebuilder_container_recipe.
type Resource struct {
	Name      string
	Args      Args
	state     *awsImagebuilderContainerRecipeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aicr *Resource) Type() string {
	return "aws_imagebuilder_container_recipe"
}

// LocalName returns the local name for [Resource].
func (aicr *Resource) LocalName() string {
	return aicr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aicr *Resource) Configuration() interface{} {
	return aicr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aicr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aicr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aicr *Resource) Dependencies() terra.Dependencies {
	return aicr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aicr *Resource) LifecycleManagement() *terra.Lifecycle {
	return aicr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aicr *Resource) Attributes() awsImagebuilderContainerRecipeAttributes {
	return awsImagebuilderContainerRecipeAttributes{ref: terra.ReferenceResource(aicr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aicr *Resource) ImportState(state io.Reader) error {
	aicr.state = &awsImagebuilderContainerRecipeState{}
	if err := json.NewDecoder(state).Decode(aicr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aicr.Type(), aicr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aicr *Resource) State() (*awsImagebuilderContainerRecipeState, bool) {
	return aicr.state, aicr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aicr *Resource) StateMust() *awsImagebuilderContainerRecipeState {
	if aicr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aicr.Type(), aicr.LocalName()))
	}
	return aicr.state
}

// Args contains the configurations for aws_imagebuilder_container_recipe.
type Args struct {
	// ContainerType: string, required
	ContainerType terra.StringValue `hcl:"container_type,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DockerfileTemplateData: string, optional
	DockerfileTemplateData terra.StringValue `hcl:"dockerfile_template_data,attr"`
	// DockerfileTemplateUri: string, optional
	DockerfileTemplateUri terra.StringValue `hcl:"dockerfile_template_uri,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParentImage: string, required
	ParentImage terra.StringValue `hcl:"parent_image,attr" validate:"required"`
	// PlatformOverride: string, optional
	PlatformOverride terra.StringValue `hcl:"platform_override,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// WorkingDirectory: string, optional
	WorkingDirectory terra.StringValue `hcl:"working_directory,attr"`
	// Component: min=1
	Component []Component `hcl:"component,block" validate:"min=1"`
	// InstanceConfiguration: optional
	InstanceConfiguration *InstanceConfiguration `hcl:"instance_configuration,block"`
	// TargetRepository: required
	TargetRepository *TargetRepository `hcl:"target_repository,block" validate:"required"`
}

type awsImagebuilderContainerRecipeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("arn"))
}

// ContainerType returns a reference to field container_type of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) ContainerType() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("container_type"))
}

// DateCreated returns a reference to field date_created of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) DateCreated() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("date_created"))
}

// Description returns a reference to field description of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("description"))
}

// DockerfileTemplateData returns a reference to field dockerfile_template_data of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) DockerfileTemplateData() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("dockerfile_template_data"))
}

// DockerfileTemplateUri returns a reference to field dockerfile_template_uri of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) DockerfileTemplateUri() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("dockerfile_template_uri"))
}

// Encrypted returns a reference to field encrypted of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(aicr.ref.Append("encrypted"))
}

// Id returns a reference to field id of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("kms_key_id"))
}

// Name returns a reference to field name of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("name"))
}

// Owner returns a reference to field owner of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("owner"))
}

// ParentImage returns a reference to field parent_image of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) ParentImage() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("parent_image"))
}

// Platform returns a reference to field platform of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) Platform() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("platform"))
}

// PlatformOverride returns a reference to field platform_override of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) PlatformOverride() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("platform_override"))
}

// Tags returns a reference to field tags of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aicr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aicr.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("version"))
}

// WorkingDirectory returns a reference to field working_directory of aws_imagebuilder_container_recipe.
func (aicr awsImagebuilderContainerRecipeAttributes) WorkingDirectory() terra.StringValue {
	return terra.ReferenceAsString(aicr.ref.Append("working_directory"))
}

func (aicr awsImagebuilderContainerRecipeAttributes) Component() terra.ListValue[ComponentAttributes] {
	return terra.ReferenceAsList[ComponentAttributes](aicr.ref.Append("component"))
}

func (aicr awsImagebuilderContainerRecipeAttributes) InstanceConfiguration() terra.ListValue[InstanceConfigurationAttributes] {
	return terra.ReferenceAsList[InstanceConfigurationAttributes](aicr.ref.Append("instance_configuration"))
}

func (aicr awsImagebuilderContainerRecipeAttributes) TargetRepository() terra.ListValue[TargetRepositoryAttributes] {
	return terra.ReferenceAsList[TargetRepositoryAttributes](aicr.ref.Append("target_repository"))
}

type awsImagebuilderContainerRecipeState struct {
	Arn                    string                       `json:"arn"`
	ContainerType          string                       `json:"container_type"`
	DateCreated            string                       `json:"date_created"`
	Description            string                       `json:"description"`
	DockerfileTemplateData string                       `json:"dockerfile_template_data"`
	DockerfileTemplateUri  string                       `json:"dockerfile_template_uri"`
	Encrypted              bool                         `json:"encrypted"`
	Id                     string                       `json:"id"`
	KmsKeyId               string                       `json:"kms_key_id"`
	Name                   string                       `json:"name"`
	Owner                  string                       `json:"owner"`
	ParentImage            string                       `json:"parent_image"`
	Platform               string                       `json:"platform"`
	PlatformOverride       string                       `json:"platform_override"`
	Tags                   map[string]string            `json:"tags"`
	TagsAll                map[string]string            `json:"tags_all"`
	Version                string                       `json:"version"`
	WorkingDirectory       string                       `json:"working_directory"`
	Component              []ComponentState             `json:"component"`
	InstanceConfiguration  []InstanceConfigurationState `json:"instance_configuration"`
	TargetRepository       []TargetRepositoryState      `json:"target_repository"`
}
