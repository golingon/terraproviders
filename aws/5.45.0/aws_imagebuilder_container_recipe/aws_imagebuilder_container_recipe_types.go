// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_container_recipe

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Component struct {
	// ComponentArn: string, required
	ComponentArn terra.StringValue `hcl:"component_arn,attr" validate:"required"`
	// ComponentParameter: min=0
	Parameter []ComponentParameter `hcl:"parameter,block" validate:"min=0"`
}

type ComponentParameter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type InstanceConfiguration struct {
	// Image: string, optional
	Image terra.StringValue `hcl:"image,attr"`
	// InstanceConfigurationBlockDeviceMapping: min=0
	BlockDeviceMapping []InstanceConfigurationBlockDeviceMapping `hcl:"block_device_mapping,block" validate:"min=0"`
}

type InstanceConfigurationBlockDeviceMapping struct {
	// DeviceName: string, optional
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// NoDevice: bool, optional
	NoDevice terra.BoolValue `hcl:"no_device,attr"`
	// VirtualName: string, optional
	VirtualName terra.StringValue `hcl:"virtual_name,attr"`
	// InstanceConfigurationBlockDeviceMappingEbs: optional
	Ebs *InstanceConfigurationBlockDeviceMappingEbs `hcl:"ebs,block"`
}

type InstanceConfigurationBlockDeviceMappingEbs struct {
	// DeleteOnTermination: string, optional
	DeleteOnTermination terra.StringValue `hcl:"delete_on_termination,attr"`
	// Encrypted: string, optional
	Encrypted terra.StringValue `hcl:"encrypted,attr"`
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// SnapshotId: string, optional
	SnapshotId terra.StringValue `hcl:"snapshot_id,attr"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// VolumeSize: number, optional
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType: string, optional
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type TargetRepository struct {
	// RepositoryName: string, required
	RepositoryName terra.StringValue `hcl:"repository_name,attr" validate:"required"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type ComponentAttributes struct {
	ref terra.Reference
}

func (c ComponentAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ComponentAttributes) InternalWithRef(ref terra.Reference) ComponentAttributes {
	return ComponentAttributes{ref: ref}
}

func (c ComponentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ComponentAttributes) ComponentArn() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("component_arn"))
}

func (c ComponentAttributes) Parameter() terra.SetValue[ComponentParameterAttributes] {
	return terra.ReferenceAsSet[ComponentParameterAttributes](c.ref.Append("parameter"))
}

type ComponentParameterAttributes struct {
	ref terra.Reference
}

func (p ComponentParameterAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ComponentParameterAttributes) InternalWithRef(ref terra.Reference) ComponentParameterAttributes {
	return ComponentParameterAttributes{ref: ref}
}

func (p ComponentParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p ComponentParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p ComponentParameterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value"))
}

type InstanceConfigurationAttributes struct {
	ref terra.Reference
}

func (ic InstanceConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic InstanceConfigurationAttributes) InternalWithRef(ref terra.Reference) InstanceConfigurationAttributes {
	return InstanceConfigurationAttributes{ref: ref}
}

func (ic InstanceConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic InstanceConfigurationAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("image"))
}

func (ic InstanceConfigurationAttributes) BlockDeviceMapping() terra.SetValue[InstanceConfigurationBlockDeviceMappingAttributes] {
	return terra.ReferenceAsSet[InstanceConfigurationBlockDeviceMappingAttributes](ic.ref.Append("block_device_mapping"))
}

type InstanceConfigurationBlockDeviceMappingAttributes struct {
	ref terra.Reference
}

func (bdm InstanceConfigurationBlockDeviceMappingAttributes) InternalRef() (terra.Reference, error) {
	return bdm.ref, nil
}

func (bdm InstanceConfigurationBlockDeviceMappingAttributes) InternalWithRef(ref terra.Reference) InstanceConfigurationBlockDeviceMappingAttributes {
	return InstanceConfigurationBlockDeviceMappingAttributes{ref: ref}
}

func (bdm InstanceConfigurationBlockDeviceMappingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bdm.ref.InternalTokens()
}

func (bdm InstanceConfigurationBlockDeviceMappingAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(bdm.ref.Append("device_name"))
}

func (bdm InstanceConfigurationBlockDeviceMappingAttributes) NoDevice() terra.BoolValue {
	return terra.ReferenceAsBool(bdm.ref.Append("no_device"))
}

func (bdm InstanceConfigurationBlockDeviceMappingAttributes) VirtualName() terra.StringValue {
	return terra.ReferenceAsString(bdm.ref.Append("virtual_name"))
}

func (bdm InstanceConfigurationBlockDeviceMappingAttributes) Ebs() terra.ListValue[InstanceConfigurationBlockDeviceMappingEbsAttributes] {
	return terra.ReferenceAsList[InstanceConfigurationBlockDeviceMappingEbsAttributes](bdm.ref.Append("ebs"))
}

type InstanceConfigurationBlockDeviceMappingEbsAttributes struct {
	ref terra.Reference
}

func (e InstanceConfigurationBlockDeviceMappingEbsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e InstanceConfigurationBlockDeviceMappingEbsAttributes) InternalWithRef(ref terra.Reference) InstanceConfigurationBlockDeviceMappingEbsAttributes {
	return InstanceConfigurationBlockDeviceMappingEbsAttributes{ref: ref}
}

func (e InstanceConfigurationBlockDeviceMappingEbsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e InstanceConfigurationBlockDeviceMappingEbsAttributes) DeleteOnTermination() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("delete_on_termination"))
}

func (e InstanceConfigurationBlockDeviceMappingEbsAttributes) Encrypted() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("encrypted"))
}

func (e InstanceConfigurationBlockDeviceMappingEbsAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("iops"))
}

func (e InstanceConfigurationBlockDeviceMappingEbsAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kms_key_id"))
}

func (e InstanceConfigurationBlockDeviceMappingEbsAttributes) SnapshotId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("snapshot_id"))
}

func (e InstanceConfigurationBlockDeviceMappingEbsAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("throughput"))
}

func (e InstanceConfigurationBlockDeviceMappingEbsAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("volume_size"))
}

func (e InstanceConfigurationBlockDeviceMappingEbsAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("volume_type"))
}

type TargetRepositoryAttributes struct {
	ref terra.Reference
}

func (tr TargetRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr TargetRepositoryAttributes) InternalWithRef(ref terra.Reference) TargetRepositoryAttributes {
	return TargetRepositoryAttributes{ref: ref}
}

func (tr TargetRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr TargetRepositoryAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("repository_name"))
}

func (tr TargetRepositoryAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("service"))
}

type ComponentState struct {
	ComponentArn string                    `json:"component_arn"`
	Parameter    []ComponentParameterState `json:"parameter"`
}

type ComponentParameterState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type InstanceConfigurationState struct {
	Image              string                                         `json:"image"`
	BlockDeviceMapping []InstanceConfigurationBlockDeviceMappingState `json:"block_device_mapping"`
}

type InstanceConfigurationBlockDeviceMappingState struct {
	DeviceName  string                                            `json:"device_name"`
	NoDevice    bool                                              `json:"no_device"`
	VirtualName string                                            `json:"virtual_name"`
	Ebs         []InstanceConfigurationBlockDeviceMappingEbsState `json:"ebs"`
}

type InstanceConfigurationBlockDeviceMappingEbsState struct {
	DeleteOnTermination string  `json:"delete_on_termination"`
	Encrypted           string  `json:"encrypted"`
	Iops                float64 `json:"iops"`
	KmsKeyId            string  `json:"kms_key_id"`
	SnapshotId          string  `json:"snapshot_id"`
	Throughput          float64 `json:"throughput"`
	VolumeSize          float64 `json:"volume_size"`
	VolumeType          string  `json:"volume_type"`
}

type TargetRepositoryState struct {
	RepositoryName string `json:"repository_name"`
	Service        string `json:"service"`
}
