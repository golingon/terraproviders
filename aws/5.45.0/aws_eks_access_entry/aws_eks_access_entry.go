// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_eks_access_entry

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_eks_access_entry.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEksAccessEntryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeae *Resource) Type() string {
	return "aws_eks_access_entry"
}

// LocalName returns the local name for [Resource].
func (aeae *Resource) LocalName() string {
	return aeae.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeae *Resource) Configuration() interface{} {
	return aeae.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeae *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeae)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeae *Resource) Dependencies() terra.Dependencies {
	return aeae.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeae *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeae.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeae *Resource) Attributes() awsEksAccessEntryAttributes {
	return awsEksAccessEntryAttributes{ref: terra.ReferenceResource(aeae)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeae *Resource) ImportState(state io.Reader) error {
	aeae.state = &awsEksAccessEntryState{}
	if err := json.NewDecoder(state).Decode(aeae.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeae.Type(), aeae.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeae *Resource) State() (*awsEksAccessEntryState, bool) {
	return aeae.state, aeae.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeae *Resource) StateMust() *awsEksAccessEntryState {
	if aeae.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeae.Type(), aeae.LocalName()))
	}
	return aeae.state
}

// Args contains the configurations for aws_eks_access_entry.
type Args struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KubernetesGroups: set of string, optional
	KubernetesGroups terra.SetValue[terra.StringValue] `hcl:"kubernetes_groups,attr"`
	// PrincipalArn: string, required
	PrincipalArn terra.StringValue `hcl:"principal_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// UserName: string, optional
	UserName terra.StringValue `hcl:"user_name,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEksAccessEntryAttributes struct {
	ref terra.Reference
}

// AccessEntryArn returns a reference to field access_entry_arn of aws_eks_access_entry.
func (aeae awsEksAccessEntryAttributes) AccessEntryArn() terra.StringValue {
	return terra.ReferenceAsString(aeae.ref.Append("access_entry_arn"))
}

// ClusterName returns a reference to field cluster_name of aws_eks_access_entry.
func (aeae awsEksAccessEntryAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(aeae.ref.Append("cluster_name"))
}

// CreatedAt returns a reference to field created_at of aws_eks_access_entry.
func (aeae awsEksAccessEntryAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(aeae.ref.Append("created_at"))
}

// Id returns a reference to field id of aws_eks_access_entry.
func (aeae awsEksAccessEntryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeae.ref.Append("id"))
}

// KubernetesGroups returns a reference to field kubernetes_groups of aws_eks_access_entry.
func (aeae awsEksAccessEntryAttributes) KubernetesGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aeae.ref.Append("kubernetes_groups"))
}

// ModifiedAt returns a reference to field modified_at of aws_eks_access_entry.
func (aeae awsEksAccessEntryAttributes) ModifiedAt() terra.StringValue {
	return terra.ReferenceAsString(aeae.ref.Append("modified_at"))
}

// PrincipalArn returns a reference to field principal_arn of aws_eks_access_entry.
func (aeae awsEksAccessEntryAttributes) PrincipalArn() terra.StringValue {
	return terra.ReferenceAsString(aeae.ref.Append("principal_arn"))
}

// Tags returns a reference to field tags of aws_eks_access_entry.
func (aeae awsEksAccessEntryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeae.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_eks_access_entry.
func (aeae awsEksAccessEntryAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeae.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_eks_access_entry.
func (aeae awsEksAccessEntryAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aeae.ref.Append("type"))
}

// UserName returns a reference to field user_name of aws_eks_access_entry.
func (aeae awsEksAccessEntryAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(aeae.ref.Append("user_name"))
}

func (aeae awsEksAccessEntryAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aeae.ref.Append("timeouts"))
}

type awsEksAccessEntryState struct {
	AccessEntryArn   string            `json:"access_entry_arn"`
	ClusterName      string            `json:"cluster_name"`
	CreatedAt        string            `json:"created_at"`
	Id               string            `json:"id"`
	KubernetesGroups []string          `json:"kubernetes_groups"`
	ModifiedAt       string            `json:"modified_at"`
	PrincipalArn     string            `json:"principal_arn"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
	Type             string            `json:"type"`
	UserName         string            `json:"user_name"`
	Timeouts         *TimeoutsState    `json:"timeouts"`
}
