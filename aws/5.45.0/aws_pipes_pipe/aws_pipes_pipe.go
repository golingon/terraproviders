// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_pipes_pipe

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_pipes_pipe.
type Resource struct {
	Name      string
	Args      Args
	state     *awsPipesPipeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (app *Resource) Type() string {
	return "aws_pipes_pipe"
}

// LocalName returns the local name for [Resource].
func (app *Resource) LocalName() string {
	return app.Name
}

// Configuration returns the configuration (args) for [Resource].
func (app *Resource) Configuration() interface{} {
	return app.Args
}

// DependOn is used for other resources to depend on [Resource].
func (app *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(app)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (app *Resource) Dependencies() terra.Dependencies {
	return app.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (app *Resource) LifecycleManagement() *terra.Lifecycle {
	return app.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (app *Resource) Attributes() awsPipesPipeAttributes {
	return awsPipesPipeAttributes{ref: terra.ReferenceResource(app)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (app *Resource) ImportState(state io.Reader) error {
	app.state = &awsPipesPipeState{}
	if err := json.NewDecoder(state).Decode(app.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", app.Type(), app.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (app *Resource) State() (*awsPipesPipeState, bool) {
	return app.state, app.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (app *Resource) StateMust() *awsPipesPipeState {
	if app.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", app.Type(), app.LocalName()))
	}
	return app.state
}

// Args contains the configurations for aws_pipes_pipe.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DesiredState: string, optional
	DesiredState terra.StringValue `hcl:"desired_state,attr"`
	// Enrichment: string, optional
	Enrichment terra.StringValue `hcl:"enrichment,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Target: string, required
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// EnrichmentParameters: optional
	EnrichmentParameters *EnrichmentParameters `hcl:"enrichment_parameters,block"`
	// SourceParameters: optional
	SourceParameters *SourceParameters `hcl:"source_parameters,block"`
	// TargetParameters: optional
	TargetParameters *TargetParameters `hcl:"target_parameters,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsPipesPipeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_pipes_pipe.
func (app awsPipesPipeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(app.ref.Append("arn"))
}

// Description returns a reference to field description of aws_pipes_pipe.
func (app awsPipesPipeAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(app.ref.Append("description"))
}

// DesiredState returns a reference to field desired_state of aws_pipes_pipe.
func (app awsPipesPipeAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceAsString(app.ref.Append("desired_state"))
}

// Enrichment returns a reference to field enrichment of aws_pipes_pipe.
func (app awsPipesPipeAttributes) Enrichment() terra.StringValue {
	return terra.ReferenceAsString(app.ref.Append("enrichment"))
}

// Id returns a reference to field id of aws_pipes_pipe.
func (app awsPipesPipeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(app.ref.Append("id"))
}

// Name returns a reference to field name of aws_pipes_pipe.
func (app awsPipesPipeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(app.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_pipes_pipe.
func (app awsPipesPipeAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(app.ref.Append("name_prefix"))
}

// RoleArn returns a reference to field role_arn of aws_pipes_pipe.
func (app awsPipesPipeAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(app.ref.Append("role_arn"))
}

// Source returns a reference to field source of aws_pipes_pipe.
func (app awsPipesPipeAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(app.ref.Append("source"))
}

// Tags returns a reference to field tags of aws_pipes_pipe.
func (app awsPipesPipeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](app.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_pipes_pipe.
func (app awsPipesPipeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](app.ref.Append("tags_all"))
}

// Target returns a reference to field target of aws_pipes_pipe.
func (app awsPipesPipeAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(app.ref.Append("target"))
}

func (app awsPipesPipeAttributes) EnrichmentParameters() terra.ListValue[EnrichmentParametersAttributes] {
	return terra.ReferenceAsList[EnrichmentParametersAttributes](app.ref.Append("enrichment_parameters"))
}

func (app awsPipesPipeAttributes) SourceParameters() terra.ListValue[SourceParametersAttributes] {
	return terra.ReferenceAsList[SourceParametersAttributes](app.ref.Append("source_parameters"))
}

func (app awsPipesPipeAttributes) TargetParameters() terra.ListValue[TargetParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersAttributes](app.ref.Append("target_parameters"))
}

func (app awsPipesPipeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](app.ref.Append("timeouts"))
}

type awsPipesPipeState struct {
	Arn                  string                      `json:"arn"`
	Description          string                      `json:"description"`
	DesiredState         string                      `json:"desired_state"`
	Enrichment           string                      `json:"enrichment"`
	Id                   string                      `json:"id"`
	Name                 string                      `json:"name"`
	NamePrefix           string                      `json:"name_prefix"`
	RoleArn              string                      `json:"role_arn"`
	Source               string                      `json:"source"`
	Tags                 map[string]string           `json:"tags"`
	TagsAll              map[string]string           `json:"tags_all"`
	Target               string                      `json:"target"`
	EnrichmentParameters []EnrichmentParametersState `json:"enrichment_parameters"`
	SourceParameters     []SourceParametersState     `json:"source_parameters"`
	TargetParameters     []TargetParametersState     `json:"target_parameters"`
	Timeouts             *TimeoutsState              `json:"timeouts"`
}
