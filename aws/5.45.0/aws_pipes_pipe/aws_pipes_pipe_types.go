// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_pipes_pipe

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EnrichmentParameters struct {
	// InputTemplate: string, optional
	InputTemplate terra.StringValue `hcl:"input_template,attr"`
	// EnrichmentParametersHttpParameters: optional
	HttpParameters *EnrichmentParametersHttpParameters `hcl:"http_parameters,block"`
}

type EnrichmentParametersHttpParameters struct {
	// HeaderParameters: map of string, optional
	HeaderParameters terra.MapValue[terra.StringValue] `hcl:"header_parameters,attr"`
	// PathParameterValues: list of string, optional
	PathParameterValues terra.ListValue[terra.StringValue] `hcl:"path_parameter_values,attr"`
	// QueryStringParameters: map of string, optional
	QueryStringParameters terra.MapValue[terra.StringValue] `hcl:"query_string_parameters,attr"`
}

type SourceParameters struct {
	// SourceParametersActivemqBrokerParameters: optional
	ActivemqBrokerParameters *SourceParametersActivemqBrokerParameters `hcl:"activemq_broker_parameters,block"`
	// SourceParametersDynamodbStreamParameters: optional
	DynamodbStreamParameters *SourceParametersDynamodbStreamParameters `hcl:"dynamodb_stream_parameters,block"`
	// SourceParametersFilterCriteria: optional
	FilterCriteria *SourceParametersFilterCriteria `hcl:"filter_criteria,block"`
	// SourceParametersKinesisStreamParameters: optional
	KinesisStreamParameters *SourceParametersKinesisStreamParameters `hcl:"kinesis_stream_parameters,block"`
	// SourceParametersManagedStreamingKafkaParameters: optional
	ManagedStreamingKafkaParameters *SourceParametersManagedStreamingKafkaParameters `hcl:"managed_streaming_kafka_parameters,block"`
	// SourceParametersRabbitmqBrokerParameters: optional
	RabbitmqBrokerParameters *SourceParametersRabbitmqBrokerParameters `hcl:"rabbitmq_broker_parameters,block"`
	// SourceParametersSelfManagedKafkaParameters: optional
	SelfManagedKafkaParameters *SourceParametersSelfManagedKafkaParameters `hcl:"self_managed_kafka_parameters,block"`
	// SourceParametersSqsQueueParameters: optional
	SqsQueueParameters *SourceParametersSqsQueueParameters `hcl:"sqs_queue_parameters,block"`
}

type SourceParametersActivemqBrokerParameters struct {
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
	// QueueName: string, required
	QueueName terra.StringValue `hcl:"queue_name,attr" validate:"required"`
	// SourceParametersActivemqBrokerParametersCredentials: required
	Credentials *SourceParametersActivemqBrokerParametersCredentials `hcl:"credentials,block" validate:"required"`
}

type SourceParametersActivemqBrokerParametersCredentials struct {
	// BasicAuth: string, required
	BasicAuth terra.StringValue `hcl:"basic_auth,attr" validate:"required"`
}

type SourceParametersDynamodbStreamParameters struct {
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
	// MaximumRecordAgeInSeconds: number, optional
	MaximumRecordAgeInSeconds terra.NumberValue `hcl:"maximum_record_age_in_seconds,attr"`
	// MaximumRetryAttempts: number, optional
	MaximumRetryAttempts terra.NumberValue `hcl:"maximum_retry_attempts,attr"`
	// OnPartialBatchItemFailure: string, optional
	OnPartialBatchItemFailure terra.StringValue `hcl:"on_partial_batch_item_failure,attr"`
	// ParallelizationFactor: number, optional
	ParallelizationFactor terra.NumberValue `hcl:"parallelization_factor,attr"`
	// StartingPosition: string, required
	StartingPosition terra.StringValue `hcl:"starting_position,attr" validate:"required"`
	// SourceParametersDynamodbStreamParametersDeadLetterConfig: optional
	DeadLetterConfig *SourceParametersDynamodbStreamParametersDeadLetterConfig `hcl:"dead_letter_config,block"`
}

type SourceParametersDynamodbStreamParametersDeadLetterConfig struct {
	// Arn: string, optional
	Arn terra.StringValue `hcl:"arn,attr"`
}

type SourceParametersFilterCriteria struct {
	// SourceParametersFilterCriteriaFilter: min=0,max=5
	Filter []SourceParametersFilterCriteriaFilter `hcl:"filter,block" validate:"min=0,max=5"`
}

type SourceParametersFilterCriteriaFilter struct {
	// Pattern: string, required
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
}

type SourceParametersKinesisStreamParameters struct {
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
	// MaximumRecordAgeInSeconds: number, optional
	MaximumRecordAgeInSeconds terra.NumberValue `hcl:"maximum_record_age_in_seconds,attr"`
	// MaximumRetryAttempts: number, optional
	MaximumRetryAttempts terra.NumberValue `hcl:"maximum_retry_attempts,attr"`
	// OnPartialBatchItemFailure: string, optional
	OnPartialBatchItemFailure terra.StringValue `hcl:"on_partial_batch_item_failure,attr"`
	// ParallelizationFactor: number, optional
	ParallelizationFactor terra.NumberValue `hcl:"parallelization_factor,attr"`
	// StartingPosition: string, required
	StartingPosition terra.StringValue `hcl:"starting_position,attr" validate:"required"`
	// StartingPositionTimestamp: string, optional
	StartingPositionTimestamp terra.StringValue `hcl:"starting_position_timestamp,attr"`
	// SourceParametersKinesisStreamParametersDeadLetterConfig: optional
	DeadLetterConfig *SourceParametersKinesisStreamParametersDeadLetterConfig `hcl:"dead_letter_config,block"`
}

type SourceParametersKinesisStreamParametersDeadLetterConfig struct {
	// Arn: string, optional
	Arn terra.StringValue `hcl:"arn,attr"`
}

type SourceParametersManagedStreamingKafkaParameters struct {
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// ConsumerGroupId: string, optional
	ConsumerGroupId terra.StringValue `hcl:"consumer_group_id,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
	// StartingPosition: string, optional
	StartingPosition terra.StringValue `hcl:"starting_position,attr"`
	// TopicName: string, required
	TopicName terra.StringValue `hcl:"topic_name,attr" validate:"required"`
	// SourceParametersManagedStreamingKafkaParametersCredentials: optional
	Credentials *SourceParametersManagedStreamingKafkaParametersCredentials `hcl:"credentials,block"`
}

type SourceParametersManagedStreamingKafkaParametersCredentials struct {
	// ClientCertificateTlsAuth: string, optional
	ClientCertificateTlsAuth terra.StringValue `hcl:"client_certificate_tls_auth,attr"`
	// SaslScram512Auth: string, optional
	SaslScram512Auth terra.StringValue `hcl:"sasl_scram_512_auth,attr"`
}

type SourceParametersRabbitmqBrokerParameters struct {
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
	// QueueName: string, required
	QueueName terra.StringValue `hcl:"queue_name,attr" validate:"required"`
	// VirtualHost: string, optional
	VirtualHost terra.StringValue `hcl:"virtual_host,attr"`
	// SourceParametersRabbitmqBrokerParametersCredentials: required
	Credentials *SourceParametersRabbitmqBrokerParametersCredentials `hcl:"credentials,block" validate:"required"`
}

type SourceParametersRabbitmqBrokerParametersCredentials struct {
	// BasicAuth: string, required
	BasicAuth terra.StringValue `hcl:"basic_auth,attr" validate:"required"`
}

type SourceParametersSelfManagedKafkaParameters struct {
	// AdditionalBootstrapServers: set of string, optional
	AdditionalBootstrapServers terra.SetValue[terra.StringValue] `hcl:"additional_bootstrap_servers,attr"`
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// ConsumerGroupId: string, optional
	ConsumerGroupId terra.StringValue `hcl:"consumer_group_id,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
	// ServerRootCaCertificate: string, optional
	ServerRootCaCertificate terra.StringValue `hcl:"server_root_ca_certificate,attr"`
	// StartingPosition: string, optional
	StartingPosition terra.StringValue `hcl:"starting_position,attr"`
	// TopicName: string, required
	TopicName terra.StringValue `hcl:"topic_name,attr" validate:"required"`
	// SourceParametersSelfManagedKafkaParametersCredentials: optional
	Credentials *SourceParametersSelfManagedKafkaParametersCredentials `hcl:"credentials,block"`
	// SourceParametersSelfManagedKafkaParametersVpc: optional
	Vpc *SourceParametersSelfManagedKafkaParametersVpc `hcl:"vpc,block"`
}

type SourceParametersSelfManagedKafkaParametersCredentials struct {
	// BasicAuth: string, required
	BasicAuth terra.StringValue `hcl:"basic_auth,attr" validate:"required"`
	// ClientCertificateTlsAuth: string, optional
	ClientCertificateTlsAuth terra.StringValue `hcl:"client_certificate_tls_auth,attr"`
	// SaslScram256Auth: string, optional
	SaslScram256Auth terra.StringValue `hcl:"sasl_scram_256_auth,attr"`
	// SaslScram512Auth: string, optional
	SaslScram512Auth terra.StringValue `hcl:"sasl_scram_512_auth,attr"`
}

type SourceParametersSelfManagedKafkaParametersVpc struct {
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Subnets: set of string, optional
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr"`
}

type SourceParametersSqsQueueParameters struct {
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
}

type TargetParameters struct {
	// InputTemplate: string, optional
	InputTemplate terra.StringValue `hcl:"input_template,attr"`
	// TargetParametersBatchJobParameters: optional
	BatchJobParameters *TargetParametersBatchJobParameters `hcl:"batch_job_parameters,block"`
	// TargetParametersCloudwatchLogsParameters: optional
	CloudwatchLogsParameters *TargetParametersCloudwatchLogsParameters `hcl:"cloudwatch_logs_parameters,block"`
	// TargetParametersEcsTaskParameters: optional
	EcsTaskParameters *TargetParametersEcsTaskParameters `hcl:"ecs_task_parameters,block"`
	// TargetParametersEventbridgeEventBusParameters: optional
	EventbridgeEventBusParameters *TargetParametersEventbridgeEventBusParameters `hcl:"eventbridge_event_bus_parameters,block"`
	// TargetParametersHttpParameters: optional
	HttpParameters *TargetParametersHttpParameters `hcl:"http_parameters,block"`
	// TargetParametersKinesisStreamParameters: optional
	KinesisStreamParameters *TargetParametersKinesisStreamParameters `hcl:"kinesis_stream_parameters,block"`
	// TargetParametersLambdaFunctionParameters: optional
	LambdaFunctionParameters *TargetParametersLambdaFunctionParameters `hcl:"lambda_function_parameters,block"`
	// TargetParametersRedshiftDataParameters: optional
	RedshiftDataParameters *TargetParametersRedshiftDataParameters `hcl:"redshift_data_parameters,block"`
	// TargetParametersSagemakerPipelineParameters: optional
	SagemakerPipelineParameters *TargetParametersSagemakerPipelineParameters `hcl:"sagemaker_pipeline_parameters,block"`
	// TargetParametersSqsQueueParameters: optional
	SqsQueueParameters *TargetParametersSqsQueueParameters `hcl:"sqs_queue_parameters,block"`
	// TargetParametersStepFunctionStateMachineParameters: optional
	StepFunctionStateMachineParameters *TargetParametersStepFunctionStateMachineParameters `hcl:"step_function_state_machine_parameters,block"`
}

type TargetParametersBatchJobParameters struct {
	// JobDefinition: string, required
	JobDefinition terra.StringValue `hcl:"job_definition,attr" validate:"required"`
	// JobName: string, required
	JobName terra.StringValue `hcl:"job_name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// TargetParametersBatchJobParametersArrayProperties: optional
	ArrayProperties *TargetParametersBatchJobParametersArrayProperties `hcl:"array_properties,block"`
	// TargetParametersBatchJobParametersContainerOverrides: optional
	ContainerOverrides *TargetParametersBatchJobParametersContainerOverrides `hcl:"container_overrides,block"`
	// TargetParametersBatchJobParametersDependsOn: min=0,max=20
	DependsOn []TargetParametersBatchJobParametersDependsOn `hcl:"depends_on,block" validate:"min=0,max=20"`
	// TargetParametersBatchJobParametersRetryStrategy: optional
	RetryStrategy *TargetParametersBatchJobParametersRetryStrategy `hcl:"retry_strategy,block"`
}

type TargetParametersBatchJobParametersArrayProperties struct {
	// Size: number, optional
	Size terra.NumberValue `hcl:"size,attr"`
}

type TargetParametersBatchJobParametersContainerOverrides struct {
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// InstanceType: string, optional
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// TargetParametersBatchJobParametersContainerOverridesEnvironment: min=0
	Environment []TargetParametersBatchJobParametersContainerOverridesEnvironment `hcl:"environment,block" validate:"min=0"`
	// TargetParametersBatchJobParametersContainerOverridesResourceRequirement: min=0
	ResourceRequirement []TargetParametersBatchJobParametersContainerOverridesResourceRequirement `hcl:"resource_requirement,block" validate:"min=0"`
}

type TargetParametersBatchJobParametersContainerOverridesEnvironment struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type TargetParametersBatchJobParametersContainerOverridesResourceRequirement struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type TargetParametersBatchJobParametersDependsOn struct {
	// JobId: string, optional
	JobId terra.StringValue `hcl:"job_id,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type TargetParametersBatchJobParametersRetryStrategy struct {
	// Attempts: number, optional
	Attempts terra.NumberValue `hcl:"attempts,attr"`
}

type TargetParametersCloudwatchLogsParameters struct {
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
	// Timestamp: string, optional
	Timestamp terra.StringValue `hcl:"timestamp,attr"`
}

type TargetParametersEcsTaskParameters struct {
	// EnableEcsManagedTags: bool, optional
	EnableEcsManagedTags terra.BoolValue `hcl:"enable_ecs_managed_tags,attr"`
	// EnableExecuteCommand: bool, optional
	EnableExecuteCommand terra.BoolValue `hcl:"enable_execute_command,attr"`
	// Group: string, optional
	Group terra.StringValue `hcl:"group,attr"`
	// LaunchType: string, optional
	LaunchType terra.StringValue `hcl:"launch_type,attr"`
	// PlatformVersion: string, optional
	PlatformVersion terra.StringValue `hcl:"platform_version,attr"`
	// PropagateTags: string, optional
	PropagateTags terra.StringValue `hcl:"propagate_tags,attr"`
	// ReferenceId: string, optional
	ReferenceId terra.StringValue `hcl:"reference_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TaskCount: number, optional
	TaskCount terra.NumberValue `hcl:"task_count,attr"`
	// TaskDefinitionArn: string, required
	TaskDefinitionArn terra.StringValue `hcl:"task_definition_arn,attr" validate:"required"`
	// TargetParametersEcsTaskParametersCapacityProviderStrategy: min=0,max=6
	CapacityProviderStrategy []TargetParametersEcsTaskParametersCapacityProviderStrategy `hcl:"capacity_provider_strategy,block" validate:"min=0,max=6"`
	// TargetParametersEcsTaskParametersNetworkConfiguration: optional
	NetworkConfiguration *TargetParametersEcsTaskParametersNetworkConfiguration `hcl:"network_configuration,block"`
	// TargetParametersEcsTaskParametersOverrides: optional
	Overrides *TargetParametersEcsTaskParametersOverrides `hcl:"overrides,block"`
	// TargetParametersEcsTaskParametersPlacementConstraint: min=0,max=10
	PlacementConstraint []TargetParametersEcsTaskParametersPlacementConstraint `hcl:"placement_constraint,block" validate:"min=0,max=10"`
	// TargetParametersEcsTaskParametersPlacementStrategy: min=0,max=5
	PlacementStrategy []TargetParametersEcsTaskParametersPlacementStrategy `hcl:"placement_strategy,block" validate:"min=0,max=5"`
}

type TargetParametersEcsTaskParametersCapacityProviderStrategy struct {
	// Base: number, optional
	Base terra.NumberValue `hcl:"base,attr"`
	// CapacityProvider: string, required
	CapacityProvider terra.StringValue `hcl:"capacity_provider,attr" validate:"required"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type TargetParametersEcsTaskParametersNetworkConfiguration struct {
	// TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration: optional
	AwsVpcConfiguration *TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration `hcl:"aws_vpc_configuration,block"`
}

type TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration struct {
	// AssignPublicIp: string, optional
	AssignPublicIp terra.StringValue `hcl:"assign_public_ip,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Subnets: set of string, optional
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr"`
}

type TargetParametersEcsTaskParametersOverrides struct {
	// Cpu: string, optional
	Cpu terra.StringValue `hcl:"cpu,attr"`
	// ExecutionRoleArn: string, optional
	ExecutionRoleArn terra.StringValue `hcl:"execution_role_arn,attr"`
	// Memory: string, optional
	Memory terra.StringValue `hcl:"memory,attr"`
	// TaskRoleArn: string, optional
	TaskRoleArn terra.StringValue `hcl:"task_role_arn,attr"`
	// TargetParametersEcsTaskParametersOverridesContainerOverride: min=0
	ContainerOverride []TargetParametersEcsTaskParametersOverridesContainerOverride `hcl:"container_override,block" validate:"min=0"`
	// TargetParametersEcsTaskParametersOverridesEphemeralStorage: optional
	EphemeralStorage *TargetParametersEcsTaskParametersOverridesEphemeralStorage `hcl:"ephemeral_storage,block"`
	// TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride: min=0
	InferenceAcceleratorOverride []TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride `hcl:"inference_accelerator_override,block" validate:"min=0"`
}

type TargetParametersEcsTaskParametersOverridesContainerOverride struct {
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// Cpu: number, optional
	Cpu terra.NumberValue `hcl:"cpu,attr"`
	// Memory: number, optional
	Memory terra.NumberValue `hcl:"memory,attr"`
	// MemoryReservation: number, optional
	MemoryReservation terra.NumberValue `hcl:"memory_reservation,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// TargetParametersEcsTaskParameters6Af102E9: min=0
	Environment []TargetParametersEcsTaskParameters6Af102E9 `hcl:"environment,block" validate:"min=0"`
	// TargetParametersEcsTaskParametersB5815465: min=0
	EnvironmentFile []TargetParametersEcsTaskParametersB5815465 `hcl:"environment_file,block" validate:"min=0"`
	// TargetParametersEcsTaskParametersFc8E3460: min=0
	ResourceRequirement []TargetParametersEcsTaskParametersFc8E3460 `hcl:"resource_requirement,block" validate:"min=0"`
}

type TargetParametersEcsTaskParameters6Af102E9 struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type TargetParametersEcsTaskParametersB5815465 struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type TargetParametersEcsTaskParametersFc8E3460 struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type TargetParametersEcsTaskParametersOverridesEphemeralStorage struct {
	// SizeInGib: number, required
	SizeInGib terra.NumberValue `hcl:"size_in_gib,attr" validate:"required"`
}

type TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride struct {
	// DeviceName: string, optional
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// DeviceType: string, optional
	DeviceType terra.StringValue `hcl:"device_type,attr"`
}

type TargetParametersEcsTaskParametersPlacementConstraint struct {
	// Expression: string, optional
	Expression terra.StringValue `hcl:"expression,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type TargetParametersEcsTaskParametersPlacementStrategy struct {
	// Field: string, optional
	Field terra.StringValue `hcl:"field,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type TargetParametersEventbridgeEventBusParameters struct {
	// DetailType: string, optional
	DetailType terra.StringValue `hcl:"detail_type,attr"`
	// EndpointId: string, optional
	EndpointId terra.StringValue `hcl:"endpoint_id,attr"`
	// Resources: set of string, optional
	Resources terra.SetValue[terra.StringValue] `hcl:"resources,attr"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
	// Time: string, optional
	Time terra.StringValue `hcl:"time,attr"`
}

type TargetParametersHttpParameters struct {
	// HeaderParameters: map of string, optional
	HeaderParameters terra.MapValue[terra.StringValue] `hcl:"header_parameters,attr"`
	// PathParameterValues: list of string, optional
	PathParameterValues terra.ListValue[terra.StringValue] `hcl:"path_parameter_values,attr"`
	// QueryStringParameters: map of string, optional
	QueryStringParameters terra.MapValue[terra.StringValue] `hcl:"query_string_parameters,attr"`
}

type TargetParametersKinesisStreamParameters struct {
	// PartitionKey: string, required
	PartitionKey terra.StringValue `hcl:"partition_key,attr" validate:"required"`
}

type TargetParametersLambdaFunctionParameters struct {
	// InvocationType: string, required
	InvocationType terra.StringValue `hcl:"invocation_type,attr" validate:"required"`
}

type TargetParametersRedshiftDataParameters struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// DbUser: string, optional
	DbUser terra.StringValue `hcl:"db_user,attr"`
	// SecretManagerArn: string, optional
	SecretManagerArn terra.StringValue `hcl:"secret_manager_arn,attr"`
	// Sqls: set of string, required
	Sqls terra.SetValue[terra.StringValue] `hcl:"sqls,attr" validate:"required"`
	// StatementName: string, optional
	StatementName terra.StringValue `hcl:"statement_name,attr"`
	// WithEvent: bool, optional
	WithEvent terra.BoolValue `hcl:"with_event,attr"`
}

type TargetParametersSagemakerPipelineParameters struct {
	// TargetParametersSagemakerPipelineParametersPipelineParameter: min=0,max=200
	PipelineParameter []TargetParametersSagemakerPipelineParametersPipelineParameter `hcl:"pipeline_parameter,block" validate:"min=0,max=200"`
}

type TargetParametersSagemakerPipelineParametersPipelineParameter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type TargetParametersSqsQueueParameters struct {
	// MessageDeduplicationId: string, optional
	MessageDeduplicationId terra.StringValue `hcl:"message_deduplication_id,attr"`
	// MessageGroupId: string, optional
	MessageGroupId terra.StringValue `hcl:"message_group_id,attr"`
}

type TargetParametersStepFunctionStateMachineParameters struct {
	// InvocationType: string, required
	InvocationType terra.StringValue `hcl:"invocation_type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type EnrichmentParametersAttributes struct {
	ref terra.Reference
}

func (ep EnrichmentParametersAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep EnrichmentParametersAttributes) InternalWithRef(ref terra.Reference) EnrichmentParametersAttributes {
	return EnrichmentParametersAttributes{ref: ref}
}

func (ep EnrichmentParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep EnrichmentParametersAttributes) InputTemplate() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("input_template"))
}

func (ep EnrichmentParametersAttributes) HttpParameters() terra.ListValue[EnrichmentParametersHttpParametersAttributes] {
	return terra.ReferenceAsList[EnrichmentParametersHttpParametersAttributes](ep.ref.Append("http_parameters"))
}

type EnrichmentParametersHttpParametersAttributes struct {
	ref terra.Reference
}

func (hp EnrichmentParametersHttpParametersAttributes) InternalRef() (terra.Reference, error) {
	return hp.ref, nil
}

func (hp EnrichmentParametersHttpParametersAttributes) InternalWithRef(ref terra.Reference) EnrichmentParametersHttpParametersAttributes {
	return EnrichmentParametersHttpParametersAttributes{ref: ref}
}

func (hp EnrichmentParametersHttpParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hp.ref.InternalTokens()
}

func (hp EnrichmentParametersHttpParametersAttributes) HeaderParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hp.ref.Append("header_parameters"))
}

func (hp EnrichmentParametersHttpParametersAttributes) PathParameterValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hp.ref.Append("path_parameter_values"))
}

func (hp EnrichmentParametersHttpParametersAttributes) QueryStringParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hp.ref.Append("query_string_parameters"))
}

type SourceParametersAttributes struct {
	ref terra.Reference
}

func (sp SourceParametersAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SourceParametersAttributes) InternalWithRef(ref terra.Reference) SourceParametersAttributes {
	return SourceParametersAttributes{ref: ref}
}

func (sp SourceParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SourceParametersAttributes) ActivemqBrokerParameters() terra.ListValue[SourceParametersActivemqBrokerParametersAttributes] {
	return terra.ReferenceAsList[SourceParametersActivemqBrokerParametersAttributes](sp.ref.Append("activemq_broker_parameters"))
}

func (sp SourceParametersAttributes) DynamodbStreamParameters() terra.ListValue[SourceParametersDynamodbStreamParametersAttributes] {
	return terra.ReferenceAsList[SourceParametersDynamodbStreamParametersAttributes](sp.ref.Append("dynamodb_stream_parameters"))
}

func (sp SourceParametersAttributes) FilterCriteria() terra.ListValue[SourceParametersFilterCriteriaAttributes] {
	return terra.ReferenceAsList[SourceParametersFilterCriteriaAttributes](sp.ref.Append("filter_criteria"))
}

func (sp SourceParametersAttributes) KinesisStreamParameters() terra.ListValue[SourceParametersKinesisStreamParametersAttributes] {
	return terra.ReferenceAsList[SourceParametersKinesisStreamParametersAttributes](sp.ref.Append("kinesis_stream_parameters"))
}

func (sp SourceParametersAttributes) ManagedStreamingKafkaParameters() terra.ListValue[SourceParametersManagedStreamingKafkaParametersAttributes] {
	return terra.ReferenceAsList[SourceParametersManagedStreamingKafkaParametersAttributes](sp.ref.Append("managed_streaming_kafka_parameters"))
}

func (sp SourceParametersAttributes) RabbitmqBrokerParameters() terra.ListValue[SourceParametersRabbitmqBrokerParametersAttributes] {
	return terra.ReferenceAsList[SourceParametersRabbitmqBrokerParametersAttributes](sp.ref.Append("rabbitmq_broker_parameters"))
}

func (sp SourceParametersAttributes) SelfManagedKafkaParameters() terra.ListValue[SourceParametersSelfManagedKafkaParametersAttributes] {
	return terra.ReferenceAsList[SourceParametersSelfManagedKafkaParametersAttributes](sp.ref.Append("self_managed_kafka_parameters"))
}

func (sp SourceParametersAttributes) SqsQueueParameters() terra.ListValue[SourceParametersSqsQueueParametersAttributes] {
	return terra.ReferenceAsList[SourceParametersSqsQueueParametersAttributes](sp.ref.Append("sqs_queue_parameters"))
}

type SourceParametersActivemqBrokerParametersAttributes struct {
	ref terra.Reference
}

func (abp SourceParametersActivemqBrokerParametersAttributes) InternalRef() (terra.Reference, error) {
	return abp.ref, nil
}

func (abp SourceParametersActivemqBrokerParametersAttributes) InternalWithRef(ref terra.Reference) SourceParametersActivemqBrokerParametersAttributes {
	return SourceParametersActivemqBrokerParametersAttributes{ref: ref}
}

func (abp SourceParametersActivemqBrokerParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return abp.ref.InternalTokens()
}

func (abp SourceParametersActivemqBrokerParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(abp.ref.Append("batch_size"))
}

func (abp SourceParametersActivemqBrokerParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(abp.ref.Append("maximum_batching_window_in_seconds"))
}

func (abp SourceParametersActivemqBrokerParametersAttributes) QueueName() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("queue_name"))
}

func (abp SourceParametersActivemqBrokerParametersAttributes) Credentials() terra.ListValue[SourceParametersActivemqBrokerParametersCredentialsAttributes] {
	return terra.ReferenceAsList[SourceParametersActivemqBrokerParametersCredentialsAttributes](abp.ref.Append("credentials"))
}

type SourceParametersActivemqBrokerParametersCredentialsAttributes struct {
	ref terra.Reference
}

func (c SourceParametersActivemqBrokerParametersCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c SourceParametersActivemqBrokerParametersCredentialsAttributes) InternalWithRef(ref terra.Reference) SourceParametersActivemqBrokerParametersCredentialsAttributes {
	return SourceParametersActivemqBrokerParametersCredentialsAttributes{ref: ref}
}

func (c SourceParametersActivemqBrokerParametersCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c SourceParametersActivemqBrokerParametersCredentialsAttributes) BasicAuth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("basic_auth"))
}

type SourceParametersDynamodbStreamParametersAttributes struct {
	ref terra.Reference
}

func (dsp SourceParametersDynamodbStreamParametersAttributes) InternalRef() (terra.Reference, error) {
	return dsp.ref, nil
}

func (dsp SourceParametersDynamodbStreamParametersAttributes) InternalWithRef(ref terra.Reference) SourceParametersDynamodbStreamParametersAttributes {
	return SourceParametersDynamodbStreamParametersAttributes{ref: ref}
}

func (dsp SourceParametersDynamodbStreamParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dsp.ref.InternalTokens()
}

func (dsp SourceParametersDynamodbStreamParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(dsp.ref.Append("batch_size"))
}

func (dsp SourceParametersDynamodbStreamParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(dsp.ref.Append("maximum_batching_window_in_seconds"))
}

func (dsp SourceParametersDynamodbStreamParametersAttributes) MaximumRecordAgeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(dsp.ref.Append("maximum_record_age_in_seconds"))
}

func (dsp SourceParametersDynamodbStreamParametersAttributes) MaximumRetryAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(dsp.ref.Append("maximum_retry_attempts"))
}

func (dsp SourceParametersDynamodbStreamParametersAttributes) OnPartialBatchItemFailure() terra.StringValue {
	return terra.ReferenceAsString(dsp.ref.Append("on_partial_batch_item_failure"))
}

func (dsp SourceParametersDynamodbStreamParametersAttributes) ParallelizationFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(dsp.ref.Append("parallelization_factor"))
}

func (dsp SourceParametersDynamodbStreamParametersAttributes) StartingPosition() terra.StringValue {
	return terra.ReferenceAsString(dsp.ref.Append("starting_position"))
}

func (dsp SourceParametersDynamodbStreamParametersAttributes) DeadLetterConfig() terra.ListValue[SourceParametersDynamodbStreamParametersDeadLetterConfigAttributes] {
	return terra.ReferenceAsList[SourceParametersDynamodbStreamParametersDeadLetterConfigAttributes](dsp.ref.Append("dead_letter_config"))
}

type SourceParametersDynamodbStreamParametersDeadLetterConfigAttributes struct {
	ref terra.Reference
}

func (dlc SourceParametersDynamodbStreamParametersDeadLetterConfigAttributes) InternalRef() (terra.Reference, error) {
	return dlc.ref, nil
}

func (dlc SourceParametersDynamodbStreamParametersDeadLetterConfigAttributes) InternalWithRef(ref terra.Reference) SourceParametersDynamodbStreamParametersDeadLetterConfigAttributes {
	return SourceParametersDynamodbStreamParametersDeadLetterConfigAttributes{ref: ref}
}

func (dlc SourceParametersDynamodbStreamParametersDeadLetterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dlc.ref.InternalTokens()
}

func (dlc SourceParametersDynamodbStreamParametersDeadLetterConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dlc.ref.Append("arn"))
}

type SourceParametersFilterCriteriaAttributes struct {
	ref terra.Reference
}

func (fc SourceParametersFilterCriteriaAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc SourceParametersFilterCriteriaAttributes) InternalWithRef(ref terra.Reference) SourceParametersFilterCriteriaAttributes {
	return SourceParametersFilterCriteriaAttributes{ref: ref}
}

func (fc SourceParametersFilterCriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc SourceParametersFilterCriteriaAttributes) Filter() terra.ListValue[SourceParametersFilterCriteriaFilterAttributes] {
	return terra.ReferenceAsList[SourceParametersFilterCriteriaFilterAttributes](fc.ref.Append("filter"))
}

type SourceParametersFilterCriteriaFilterAttributes struct {
	ref terra.Reference
}

func (f SourceParametersFilterCriteriaFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f SourceParametersFilterCriteriaFilterAttributes) InternalWithRef(ref terra.Reference) SourceParametersFilterCriteriaFilterAttributes {
	return SourceParametersFilterCriteriaFilterAttributes{ref: ref}
}

func (f SourceParametersFilterCriteriaFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f SourceParametersFilterCriteriaFilterAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("pattern"))
}

type SourceParametersKinesisStreamParametersAttributes struct {
	ref terra.Reference
}

func (ksp SourceParametersKinesisStreamParametersAttributes) InternalRef() (terra.Reference, error) {
	return ksp.ref, nil
}

func (ksp SourceParametersKinesisStreamParametersAttributes) InternalWithRef(ref terra.Reference) SourceParametersKinesisStreamParametersAttributes {
	return SourceParametersKinesisStreamParametersAttributes{ref: ref}
}

func (ksp SourceParametersKinesisStreamParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ksp.ref.InternalTokens()
}

func (ksp SourceParametersKinesisStreamParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ksp.ref.Append("batch_size"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(ksp.ref.Append("maximum_batching_window_in_seconds"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) MaximumRecordAgeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(ksp.ref.Append("maximum_record_age_in_seconds"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) MaximumRetryAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(ksp.ref.Append("maximum_retry_attempts"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) OnPartialBatchItemFailure() terra.StringValue {
	return terra.ReferenceAsString(ksp.ref.Append("on_partial_batch_item_failure"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) ParallelizationFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(ksp.ref.Append("parallelization_factor"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) StartingPosition() terra.StringValue {
	return terra.ReferenceAsString(ksp.ref.Append("starting_position"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) StartingPositionTimestamp() terra.StringValue {
	return terra.ReferenceAsString(ksp.ref.Append("starting_position_timestamp"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) DeadLetterConfig() terra.ListValue[SourceParametersKinesisStreamParametersDeadLetterConfigAttributes] {
	return terra.ReferenceAsList[SourceParametersKinesisStreamParametersDeadLetterConfigAttributes](ksp.ref.Append("dead_letter_config"))
}

type SourceParametersKinesisStreamParametersDeadLetterConfigAttributes struct {
	ref terra.Reference
}

func (dlc SourceParametersKinesisStreamParametersDeadLetterConfigAttributes) InternalRef() (terra.Reference, error) {
	return dlc.ref, nil
}

func (dlc SourceParametersKinesisStreamParametersDeadLetterConfigAttributes) InternalWithRef(ref terra.Reference) SourceParametersKinesisStreamParametersDeadLetterConfigAttributes {
	return SourceParametersKinesisStreamParametersDeadLetterConfigAttributes{ref: ref}
}

func (dlc SourceParametersKinesisStreamParametersDeadLetterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dlc.ref.InternalTokens()
}

func (dlc SourceParametersKinesisStreamParametersDeadLetterConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dlc.ref.Append("arn"))
}

type SourceParametersManagedStreamingKafkaParametersAttributes struct {
	ref terra.Reference
}

func (mskp SourceParametersManagedStreamingKafkaParametersAttributes) InternalRef() (terra.Reference, error) {
	return mskp.ref, nil
}

func (mskp SourceParametersManagedStreamingKafkaParametersAttributes) InternalWithRef(ref terra.Reference) SourceParametersManagedStreamingKafkaParametersAttributes {
	return SourceParametersManagedStreamingKafkaParametersAttributes{ref: ref}
}

func (mskp SourceParametersManagedStreamingKafkaParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mskp.ref.InternalTokens()
}

func (mskp SourceParametersManagedStreamingKafkaParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(mskp.ref.Append("batch_size"))
}

func (mskp SourceParametersManagedStreamingKafkaParametersAttributes) ConsumerGroupId() terra.StringValue {
	return terra.ReferenceAsString(mskp.ref.Append("consumer_group_id"))
}

func (mskp SourceParametersManagedStreamingKafkaParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(mskp.ref.Append("maximum_batching_window_in_seconds"))
}

func (mskp SourceParametersManagedStreamingKafkaParametersAttributes) StartingPosition() terra.StringValue {
	return terra.ReferenceAsString(mskp.ref.Append("starting_position"))
}

func (mskp SourceParametersManagedStreamingKafkaParametersAttributes) TopicName() terra.StringValue {
	return terra.ReferenceAsString(mskp.ref.Append("topic_name"))
}

func (mskp SourceParametersManagedStreamingKafkaParametersAttributes) Credentials() terra.ListValue[SourceParametersManagedStreamingKafkaParametersCredentialsAttributes] {
	return terra.ReferenceAsList[SourceParametersManagedStreamingKafkaParametersCredentialsAttributes](mskp.ref.Append("credentials"))
}

type SourceParametersManagedStreamingKafkaParametersCredentialsAttributes struct {
	ref terra.Reference
}

func (c SourceParametersManagedStreamingKafkaParametersCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c SourceParametersManagedStreamingKafkaParametersCredentialsAttributes) InternalWithRef(ref terra.Reference) SourceParametersManagedStreamingKafkaParametersCredentialsAttributes {
	return SourceParametersManagedStreamingKafkaParametersCredentialsAttributes{ref: ref}
}

func (c SourceParametersManagedStreamingKafkaParametersCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c SourceParametersManagedStreamingKafkaParametersCredentialsAttributes) ClientCertificateTlsAuth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("client_certificate_tls_auth"))
}

func (c SourceParametersManagedStreamingKafkaParametersCredentialsAttributes) SaslScram512Auth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("sasl_scram_512_auth"))
}

type SourceParametersRabbitmqBrokerParametersAttributes struct {
	ref terra.Reference
}

func (rbp SourceParametersRabbitmqBrokerParametersAttributes) InternalRef() (terra.Reference, error) {
	return rbp.ref, nil
}

func (rbp SourceParametersRabbitmqBrokerParametersAttributes) InternalWithRef(ref terra.Reference) SourceParametersRabbitmqBrokerParametersAttributes {
	return SourceParametersRabbitmqBrokerParametersAttributes{ref: ref}
}

func (rbp SourceParametersRabbitmqBrokerParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rbp.ref.InternalTokens()
}

func (rbp SourceParametersRabbitmqBrokerParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(rbp.ref.Append("batch_size"))
}

func (rbp SourceParametersRabbitmqBrokerParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rbp.ref.Append("maximum_batching_window_in_seconds"))
}

func (rbp SourceParametersRabbitmqBrokerParametersAttributes) QueueName() terra.StringValue {
	return terra.ReferenceAsString(rbp.ref.Append("queue_name"))
}

func (rbp SourceParametersRabbitmqBrokerParametersAttributes) VirtualHost() terra.StringValue {
	return terra.ReferenceAsString(rbp.ref.Append("virtual_host"))
}

func (rbp SourceParametersRabbitmqBrokerParametersAttributes) Credentials() terra.ListValue[SourceParametersRabbitmqBrokerParametersCredentialsAttributes] {
	return terra.ReferenceAsList[SourceParametersRabbitmqBrokerParametersCredentialsAttributes](rbp.ref.Append("credentials"))
}

type SourceParametersRabbitmqBrokerParametersCredentialsAttributes struct {
	ref terra.Reference
}

func (c SourceParametersRabbitmqBrokerParametersCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c SourceParametersRabbitmqBrokerParametersCredentialsAttributes) InternalWithRef(ref terra.Reference) SourceParametersRabbitmqBrokerParametersCredentialsAttributes {
	return SourceParametersRabbitmqBrokerParametersCredentialsAttributes{ref: ref}
}

func (c SourceParametersRabbitmqBrokerParametersCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c SourceParametersRabbitmqBrokerParametersCredentialsAttributes) BasicAuth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("basic_auth"))
}

type SourceParametersSelfManagedKafkaParametersAttributes struct {
	ref terra.Reference
}

func (smkp SourceParametersSelfManagedKafkaParametersAttributes) InternalRef() (terra.Reference, error) {
	return smkp.ref, nil
}

func (smkp SourceParametersSelfManagedKafkaParametersAttributes) InternalWithRef(ref terra.Reference) SourceParametersSelfManagedKafkaParametersAttributes {
	return SourceParametersSelfManagedKafkaParametersAttributes{ref: ref}
}

func (smkp SourceParametersSelfManagedKafkaParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return smkp.ref.InternalTokens()
}

func (smkp SourceParametersSelfManagedKafkaParametersAttributes) AdditionalBootstrapServers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](smkp.ref.Append("additional_bootstrap_servers"))
}

func (smkp SourceParametersSelfManagedKafkaParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(smkp.ref.Append("batch_size"))
}

func (smkp SourceParametersSelfManagedKafkaParametersAttributes) ConsumerGroupId() terra.StringValue {
	return terra.ReferenceAsString(smkp.ref.Append("consumer_group_id"))
}

func (smkp SourceParametersSelfManagedKafkaParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(smkp.ref.Append("maximum_batching_window_in_seconds"))
}

func (smkp SourceParametersSelfManagedKafkaParametersAttributes) ServerRootCaCertificate() terra.StringValue {
	return terra.ReferenceAsString(smkp.ref.Append("server_root_ca_certificate"))
}

func (smkp SourceParametersSelfManagedKafkaParametersAttributes) StartingPosition() terra.StringValue {
	return terra.ReferenceAsString(smkp.ref.Append("starting_position"))
}

func (smkp SourceParametersSelfManagedKafkaParametersAttributes) TopicName() terra.StringValue {
	return terra.ReferenceAsString(smkp.ref.Append("topic_name"))
}

func (smkp SourceParametersSelfManagedKafkaParametersAttributes) Credentials() terra.ListValue[SourceParametersSelfManagedKafkaParametersCredentialsAttributes] {
	return terra.ReferenceAsList[SourceParametersSelfManagedKafkaParametersCredentialsAttributes](smkp.ref.Append("credentials"))
}

func (smkp SourceParametersSelfManagedKafkaParametersAttributes) Vpc() terra.ListValue[SourceParametersSelfManagedKafkaParametersVpcAttributes] {
	return terra.ReferenceAsList[SourceParametersSelfManagedKafkaParametersVpcAttributes](smkp.ref.Append("vpc"))
}

type SourceParametersSelfManagedKafkaParametersCredentialsAttributes struct {
	ref terra.Reference
}

func (c SourceParametersSelfManagedKafkaParametersCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c SourceParametersSelfManagedKafkaParametersCredentialsAttributes) InternalWithRef(ref terra.Reference) SourceParametersSelfManagedKafkaParametersCredentialsAttributes {
	return SourceParametersSelfManagedKafkaParametersCredentialsAttributes{ref: ref}
}

func (c SourceParametersSelfManagedKafkaParametersCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c SourceParametersSelfManagedKafkaParametersCredentialsAttributes) BasicAuth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("basic_auth"))
}

func (c SourceParametersSelfManagedKafkaParametersCredentialsAttributes) ClientCertificateTlsAuth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("client_certificate_tls_auth"))
}

func (c SourceParametersSelfManagedKafkaParametersCredentialsAttributes) SaslScram256Auth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("sasl_scram_256_auth"))
}

func (c SourceParametersSelfManagedKafkaParametersCredentialsAttributes) SaslScram512Auth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("sasl_scram_512_auth"))
}

type SourceParametersSelfManagedKafkaParametersVpcAttributes struct {
	ref terra.Reference
}

func (v SourceParametersSelfManagedKafkaParametersVpcAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v SourceParametersSelfManagedKafkaParametersVpcAttributes) InternalWithRef(ref terra.Reference) SourceParametersSelfManagedKafkaParametersVpcAttributes {
	return SourceParametersSelfManagedKafkaParametersVpcAttributes{ref: ref}
}

func (v SourceParametersSelfManagedKafkaParametersVpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v SourceParametersSelfManagedKafkaParametersVpcAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](v.ref.Append("security_groups"))
}

func (v SourceParametersSelfManagedKafkaParametersVpcAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](v.ref.Append("subnets"))
}

type SourceParametersSqsQueueParametersAttributes struct {
	ref terra.Reference
}

func (sqp SourceParametersSqsQueueParametersAttributes) InternalRef() (terra.Reference, error) {
	return sqp.ref, nil
}

func (sqp SourceParametersSqsQueueParametersAttributes) InternalWithRef(ref terra.Reference) SourceParametersSqsQueueParametersAttributes {
	return SourceParametersSqsQueueParametersAttributes{ref: ref}
}

func (sqp SourceParametersSqsQueueParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sqp.ref.InternalTokens()
}

func (sqp SourceParametersSqsQueueParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sqp.ref.Append("batch_size"))
}

func (sqp SourceParametersSqsQueueParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sqp.ref.Append("maximum_batching_window_in_seconds"))
}

type TargetParametersAttributes struct {
	ref terra.Reference
}

func (tp TargetParametersAttributes) InternalRef() (terra.Reference, error) {
	return tp.ref, nil
}

func (tp TargetParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersAttributes {
	return TargetParametersAttributes{ref: ref}
}

func (tp TargetParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tp.ref.InternalTokens()
}

func (tp TargetParametersAttributes) InputTemplate() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("input_template"))
}

func (tp TargetParametersAttributes) BatchJobParameters() terra.ListValue[TargetParametersBatchJobParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersBatchJobParametersAttributes](tp.ref.Append("batch_job_parameters"))
}

func (tp TargetParametersAttributes) CloudwatchLogsParameters() terra.ListValue[TargetParametersCloudwatchLogsParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersCloudwatchLogsParametersAttributes](tp.ref.Append("cloudwatch_logs_parameters"))
}

func (tp TargetParametersAttributes) EcsTaskParameters() terra.ListValue[TargetParametersEcsTaskParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersEcsTaskParametersAttributes](tp.ref.Append("ecs_task_parameters"))
}

func (tp TargetParametersAttributes) EventbridgeEventBusParameters() terra.ListValue[TargetParametersEventbridgeEventBusParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersEventbridgeEventBusParametersAttributes](tp.ref.Append("eventbridge_event_bus_parameters"))
}

func (tp TargetParametersAttributes) HttpParameters() terra.ListValue[TargetParametersHttpParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersHttpParametersAttributes](tp.ref.Append("http_parameters"))
}

func (tp TargetParametersAttributes) KinesisStreamParameters() terra.ListValue[TargetParametersKinesisStreamParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersKinesisStreamParametersAttributes](tp.ref.Append("kinesis_stream_parameters"))
}

func (tp TargetParametersAttributes) LambdaFunctionParameters() terra.ListValue[TargetParametersLambdaFunctionParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersLambdaFunctionParametersAttributes](tp.ref.Append("lambda_function_parameters"))
}

func (tp TargetParametersAttributes) RedshiftDataParameters() terra.ListValue[TargetParametersRedshiftDataParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersRedshiftDataParametersAttributes](tp.ref.Append("redshift_data_parameters"))
}

func (tp TargetParametersAttributes) SagemakerPipelineParameters() terra.ListValue[TargetParametersSagemakerPipelineParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersSagemakerPipelineParametersAttributes](tp.ref.Append("sagemaker_pipeline_parameters"))
}

func (tp TargetParametersAttributes) SqsQueueParameters() terra.ListValue[TargetParametersSqsQueueParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersSqsQueueParametersAttributes](tp.ref.Append("sqs_queue_parameters"))
}

func (tp TargetParametersAttributes) StepFunctionStateMachineParameters() terra.ListValue[TargetParametersStepFunctionStateMachineParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersStepFunctionStateMachineParametersAttributes](tp.ref.Append("step_function_state_machine_parameters"))
}

type TargetParametersBatchJobParametersAttributes struct {
	ref terra.Reference
}

func (bjp TargetParametersBatchJobParametersAttributes) InternalRef() (terra.Reference, error) {
	return bjp.ref, nil
}

func (bjp TargetParametersBatchJobParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersBatchJobParametersAttributes {
	return TargetParametersBatchJobParametersAttributes{ref: ref}
}

func (bjp TargetParametersBatchJobParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bjp.ref.InternalTokens()
}

func (bjp TargetParametersBatchJobParametersAttributes) JobDefinition() terra.StringValue {
	return terra.ReferenceAsString(bjp.ref.Append("job_definition"))
}

func (bjp TargetParametersBatchJobParametersAttributes) JobName() terra.StringValue {
	return terra.ReferenceAsString(bjp.ref.Append("job_name"))
}

func (bjp TargetParametersBatchJobParametersAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](bjp.ref.Append("parameters"))
}

func (bjp TargetParametersBatchJobParametersAttributes) ArrayProperties() terra.ListValue[TargetParametersBatchJobParametersArrayPropertiesAttributes] {
	return terra.ReferenceAsList[TargetParametersBatchJobParametersArrayPropertiesAttributes](bjp.ref.Append("array_properties"))
}

func (bjp TargetParametersBatchJobParametersAttributes) ContainerOverrides() terra.ListValue[TargetParametersBatchJobParametersContainerOverridesAttributes] {
	return terra.ReferenceAsList[TargetParametersBatchJobParametersContainerOverridesAttributes](bjp.ref.Append("container_overrides"))
}

func (bjp TargetParametersBatchJobParametersAttributes) DependsOn() terra.ListValue[TargetParametersBatchJobParametersDependsOnAttributes] {
	return terra.ReferenceAsList[TargetParametersBatchJobParametersDependsOnAttributes](bjp.ref.Append("depends_on"))
}

func (bjp TargetParametersBatchJobParametersAttributes) RetryStrategy() terra.ListValue[TargetParametersBatchJobParametersRetryStrategyAttributes] {
	return terra.ReferenceAsList[TargetParametersBatchJobParametersRetryStrategyAttributes](bjp.ref.Append("retry_strategy"))
}

type TargetParametersBatchJobParametersArrayPropertiesAttributes struct {
	ref terra.Reference
}

func (ap TargetParametersBatchJobParametersArrayPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap TargetParametersBatchJobParametersArrayPropertiesAttributes) InternalWithRef(ref terra.Reference) TargetParametersBatchJobParametersArrayPropertiesAttributes {
	return TargetParametersBatchJobParametersArrayPropertiesAttributes{ref: ref}
}

func (ap TargetParametersBatchJobParametersArrayPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap TargetParametersBatchJobParametersArrayPropertiesAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ap.ref.Append("size"))
}

type TargetParametersBatchJobParametersContainerOverridesAttributes struct {
	ref terra.Reference
}

func (co TargetParametersBatchJobParametersContainerOverridesAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co TargetParametersBatchJobParametersContainerOverridesAttributes) InternalWithRef(ref terra.Reference) TargetParametersBatchJobParametersContainerOverridesAttributes {
	return TargetParametersBatchJobParametersContainerOverridesAttributes{ref: ref}
}

func (co TargetParametersBatchJobParametersContainerOverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co TargetParametersBatchJobParametersContainerOverridesAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](co.ref.Append("command"))
}

func (co TargetParametersBatchJobParametersContainerOverridesAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("instance_type"))
}

func (co TargetParametersBatchJobParametersContainerOverridesAttributes) Environment() terra.ListValue[TargetParametersBatchJobParametersContainerOverridesEnvironmentAttributes] {
	return terra.ReferenceAsList[TargetParametersBatchJobParametersContainerOverridesEnvironmentAttributes](co.ref.Append("environment"))
}

func (co TargetParametersBatchJobParametersContainerOverridesAttributes) ResourceRequirement() terra.ListValue[TargetParametersBatchJobParametersContainerOverridesResourceRequirementAttributes] {
	return terra.ReferenceAsList[TargetParametersBatchJobParametersContainerOverridesResourceRequirementAttributes](co.ref.Append("resource_requirement"))
}

type TargetParametersBatchJobParametersContainerOverridesEnvironmentAttributes struct {
	ref terra.Reference
}

func (e TargetParametersBatchJobParametersContainerOverridesEnvironmentAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e TargetParametersBatchJobParametersContainerOverridesEnvironmentAttributes) InternalWithRef(ref terra.Reference) TargetParametersBatchJobParametersContainerOverridesEnvironmentAttributes {
	return TargetParametersBatchJobParametersContainerOverridesEnvironmentAttributes{ref: ref}
}

func (e TargetParametersBatchJobParametersContainerOverridesEnvironmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e TargetParametersBatchJobParametersContainerOverridesEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e TargetParametersBatchJobParametersContainerOverridesEnvironmentAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type TargetParametersBatchJobParametersContainerOverridesResourceRequirementAttributes struct {
	ref terra.Reference
}

func (rr TargetParametersBatchJobParametersContainerOverridesResourceRequirementAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr TargetParametersBatchJobParametersContainerOverridesResourceRequirementAttributes) InternalWithRef(ref terra.Reference) TargetParametersBatchJobParametersContainerOverridesResourceRequirementAttributes {
	return TargetParametersBatchJobParametersContainerOverridesResourceRequirementAttributes{ref: ref}
}

func (rr TargetParametersBatchJobParametersContainerOverridesResourceRequirementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr TargetParametersBatchJobParametersContainerOverridesResourceRequirementAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("type"))
}

func (rr TargetParametersBatchJobParametersContainerOverridesResourceRequirementAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("value"))
}

type TargetParametersBatchJobParametersDependsOnAttributes struct {
	ref terra.Reference
}

func (do TargetParametersBatchJobParametersDependsOnAttributes) InternalRef() (terra.Reference, error) {
	return do.ref, nil
}

func (do TargetParametersBatchJobParametersDependsOnAttributes) InternalWithRef(ref terra.Reference) TargetParametersBatchJobParametersDependsOnAttributes {
	return TargetParametersBatchJobParametersDependsOnAttributes{ref: ref}
}

func (do TargetParametersBatchJobParametersDependsOnAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return do.ref.InternalTokens()
}

func (do TargetParametersBatchJobParametersDependsOnAttributes) JobId() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("job_id"))
}

func (do TargetParametersBatchJobParametersDependsOnAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("type"))
}

type TargetParametersBatchJobParametersRetryStrategyAttributes struct {
	ref terra.Reference
}

func (rs TargetParametersBatchJobParametersRetryStrategyAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs TargetParametersBatchJobParametersRetryStrategyAttributes) InternalWithRef(ref terra.Reference) TargetParametersBatchJobParametersRetryStrategyAttributes {
	return TargetParametersBatchJobParametersRetryStrategyAttributes{ref: ref}
}

func (rs TargetParametersBatchJobParametersRetryStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs TargetParametersBatchJobParametersRetryStrategyAttributes) Attempts() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("attempts"))
}

type TargetParametersCloudwatchLogsParametersAttributes struct {
	ref terra.Reference
}

func (clp TargetParametersCloudwatchLogsParametersAttributes) InternalRef() (terra.Reference, error) {
	return clp.ref, nil
}

func (clp TargetParametersCloudwatchLogsParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersCloudwatchLogsParametersAttributes {
	return TargetParametersCloudwatchLogsParametersAttributes{ref: ref}
}

func (clp TargetParametersCloudwatchLogsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clp.ref.InternalTokens()
}

func (clp TargetParametersCloudwatchLogsParametersAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clp.ref.Append("log_stream_name"))
}

func (clp TargetParametersCloudwatchLogsParametersAttributes) Timestamp() terra.StringValue {
	return terra.ReferenceAsString(clp.ref.Append("timestamp"))
}

type TargetParametersEcsTaskParametersAttributes struct {
	ref terra.Reference
}

func (etp TargetParametersEcsTaskParametersAttributes) InternalRef() (terra.Reference, error) {
	return etp.ref, nil
}

func (etp TargetParametersEcsTaskParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersEcsTaskParametersAttributes {
	return TargetParametersEcsTaskParametersAttributes{ref: ref}
}

func (etp TargetParametersEcsTaskParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return etp.ref.InternalTokens()
}

func (etp TargetParametersEcsTaskParametersAttributes) EnableEcsManagedTags() terra.BoolValue {
	return terra.ReferenceAsBool(etp.ref.Append("enable_ecs_managed_tags"))
}

func (etp TargetParametersEcsTaskParametersAttributes) EnableExecuteCommand() terra.BoolValue {
	return terra.ReferenceAsBool(etp.ref.Append("enable_execute_command"))
}

func (etp TargetParametersEcsTaskParametersAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(etp.ref.Append("group"))
}

func (etp TargetParametersEcsTaskParametersAttributes) LaunchType() terra.StringValue {
	return terra.ReferenceAsString(etp.ref.Append("launch_type"))
}

func (etp TargetParametersEcsTaskParametersAttributes) PlatformVersion() terra.StringValue {
	return terra.ReferenceAsString(etp.ref.Append("platform_version"))
}

func (etp TargetParametersEcsTaskParametersAttributes) PropagateTags() terra.StringValue {
	return terra.ReferenceAsString(etp.ref.Append("propagate_tags"))
}

func (etp TargetParametersEcsTaskParametersAttributes) ReferenceId() terra.StringValue {
	return terra.ReferenceAsString(etp.ref.Append("reference_id"))
}

func (etp TargetParametersEcsTaskParametersAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](etp.ref.Append("tags"))
}

func (etp TargetParametersEcsTaskParametersAttributes) TaskCount() terra.NumberValue {
	return terra.ReferenceAsNumber(etp.ref.Append("task_count"))
}

func (etp TargetParametersEcsTaskParametersAttributes) TaskDefinitionArn() terra.StringValue {
	return terra.ReferenceAsString(etp.ref.Append("task_definition_arn"))
}

func (etp TargetParametersEcsTaskParametersAttributes) CapacityProviderStrategy() terra.ListValue[TargetParametersEcsTaskParametersCapacityProviderStrategyAttributes] {
	return terra.ReferenceAsList[TargetParametersEcsTaskParametersCapacityProviderStrategyAttributes](etp.ref.Append("capacity_provider_strategy"))
}

func (etp TargetParametersEcsTaskParametersAttributes) NetworkConfiguration() terra.ListValue[TargetParametersEcsTaskParametersNetworkConfigurationAttributes] {
	return terra.ReferenceAsList[TargetParametersEcsTaskParametersNetworkConfigurationAttributes](etp.ref.Append("network_configuration"))
}

func (etp TargetParametersEcsTaskParametersAttributes) Overrides() terra.ListValue[TargetParametersEcsTaskParametersOverridesAttributes] {
	return terra.ReferenceAsList[TargetParametersEcsTaskParametersOverridesAttributes](etp.ref.Append("overrides"))
}

func (etp TargetParametersEcsTaskParametersAttributes) PlacementConstraint() terra.ListValue[TargetParametersEcsTaskParametersPlacementConstraintAttributes] {
	return terra.ReferenceAsList[TargetParametersEcsTaskParametersPlacementConstraintAttributes](etp.ref.Append("placement_constraint"))
}

func (etp TargetParametersEcsTaskParametersAttributes) PlacementStrategy() terra.ListValue[TargetParametersEcsTaskParametersPlacementStrategyAttributes] {
	return terra.ReferenceAsList[TargetParametersEcsTaskParametersPlacementStrategyAttributes](etp.ref.Append("placement_strategy"))
}

type TargetParametersEcsTaskParametersCapacityProviderStrategyAttributes struct {
	ref terra.Reference
}

func (cps TargetParametersEcsTaskParametersCapacityProviderStrategyAttributes) InternalRef() (terra.Reference, error) {
	return cps.ref, nil
}

func (cps TargetParametersEcsTaskParametersCapacityProviderStrategyAttributes) InternalWithRef(ref terra.Reference) TargetParametersEcsTaskParametersCapacityProviderStrategyAttributes {
	return TargetParametersEcsTaskParametersCapacityProviderStrategyAttributes{ref: ref}
}

func (cps TargetParametersEcsTaskParametersCapacityProviderStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cps.ref.InternalTokens()
}

func (cps TargetParametersEcsTaskParametersCapacityProviderStrategyAttributes) Base() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("base"))
}

func (cps TargetParametersEcsTaskParametersCapacityProviderStrategyAttributes) CapacityProvider() terra.StringValue {
	return terra.ReferenceAsString(cps.ref.Append("capacity_provider"))
}

func (cps TargetParametersEcsTaskParametersCapacityProviderStrategyAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("weight"))
}

type TargetParametersEcsTaskParametersNetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc TargetParametersEcsTaskParametersNetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc TargetParametersEcsTaskParametersNetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) TargetParametersEcsTaskParametersNetworkConfigurationAttributes {
	return TargetParametersEcsTaskParametersNetworkConfigurationAttributes{ref: ref}
}

func (nc TargetParametersEcsTaskParametersNetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc TargetParametersEcsTaskParametersNetworkConfigurationAttributes) AwsVpcConfiguration() terra.ListValue[TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationAttributes] {
	return terra.ReferenceAsList[TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationAttributes](nc.ref.Append("aws_vpc_configuration"))
}

type TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationAttributes struct {
	ref terra.Reference
}

func (avc TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return avc.ref, nil
}

func (avc TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationAttributes) InternalWithRef(ref terra.Reference) TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationAttributes {
	return TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationAttributes{ref: ref}
}

func (avc TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return avc.ref.InternalTokens()
}

func (avc TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationAttributes) AssignPublicIp() terra.StringValue {
	return terra.ReferenceAsString(avc.ref.Append("assign_public_ip"))
}

func (avc TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](avc.ref.Append("security_groups"))
}

func (avc TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](avc.ref.Append("subnets"))
}

type TargetParametersEcsTaskParametersOverridesAttributes struct {
	ref terra.Reference
}

func (o TargetParametersEcsTaskParametersOverridesAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o TargetParametersEcsTaskParametersOverridesAttributes) InternalWithRef(ref terra.Reference) TargetParametersEcsTaskParametersOverridesAttributes {
	return TargetParametersEcsTaskParametersOverridesAttributes{ref: ref}
}

func (o TargetParametersEcsTaskParametersOverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o TargetParametersEcsTaskParametersOverridesAttributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("cpu"))
}

func (o TargetParametersEcsTaskParametersOverridesAttributes) ExecutionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("execution_role_arn"))
}

func (o TargetParametersEcsTaskParametersOverridesAttributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("memory"))
}

func (o TargetParametersEcsTaskParametersOverridesAttributes) TaskRoleArn() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("task_role_arn"))
}

func (o TargetParametersEcsTaskParametersOverridesAttributes) ContainerOverride() terra.ListValue[TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes] {
	return terra.ReferenceAsList[TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes](o.ref.Append("container_override"))
}

func (o TargetParametersEcsTaskParametersOverridesAttributes) EphemeralStorage() terra.ListValue[TargetParametersEcsTaskParametersOverridesEphemeralStorageAttributes] {
	return terra.ReferenceAsList[TargetParametersEcsTaskParametersOverridesEphemeralStorageAttributes](o.ref.Append("ephemeral_storage"))
}

func (o TargetParametersEcsTaskParametersOverridesAttributes) InferenceAcceleratorOverride() terra.ListValue[TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideAttributes] {
	return terra.ReferenceAsList[TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideAttributes](o.ref.Append("inference_accelerator_override"))
}

type TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes struct {
	ref terra.Reference
}

func (co TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes) InternalWithRef(ref terra.Reference) TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes {
	return TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes{ref: ref}
}

func (co TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](co.ref.Append("command"))
}

func (co TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("cpu"))
}

func (co TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes) Memory() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("memory"))
}

func (co TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes) MemoryReservation() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("memory_reservation"))
}

func (co TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("name"))
}

func (co TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes) Environment() terra.ListValue[TargetParametersEcsTaskParameters6Af102E9Attributes] {
	return terra.ReferenceAsList[TargetParametersEcsTaskParameters6Af102E9Attributes](co.ref.Append("environment"))
}

func (co TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes) EnvironmentFile() terra.ListValue[TargetParametersEcsTaskParametersB5815465Attributes] {
	return terra.ReferenceAsList[TargetParametersEcsTaskParametersB5815465Attributes](co.ref.Append("environment_file"))
}

func (co TargetParametersEcsTaskParametersOverridesContainerOverrideAttributes) ResourceRequirement() terra.ListValue[TargetParametersEcsTaskParametersFc8E3460Attributes] {
	return terra.ReferenceAsList[TargetParametersEcsTaskParametersFc8E3460Attributes](co.ref.Append("resource_requirement"))
}

type TargetParametersEcsTaskParameters6Af102E9Attributes struct {
	ref terra.Reference
}

func (e TargetParametersEcsTaskParameters6Af102E9Attributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e TargetParametersEcsTaskParameters6Af102E9Attributes) InternalWithRef(ref terra.Reference) TargetParametersEcsTaskParameters6Af102E9Attributes {
	return TargetParametersEcsTaskParameters6Af102E9Attributes{ref: ref}
}

func (e TargetParametersEcsTaskParameters6Af102E9Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e TargetParametersEcsTaskParameters6Af102E9Attributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e TargetParametersEcsTaskParameters6Af102E9Attributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type TargetParametersEcsTaskParametersB5815465Attributes struct {
	ref terra.Reference
}

func (ef TargetParametersEcsTaskParametersB5815465Attributes) InternalRef() (terra.Reference, error) {
	return ef.ref, nil
}

func (ef TargetParametersEcsTaskParametersB5815465Attributes) InternalWithRef(ref terra.Reference) TargetParametersEcsTaskParametersB5815465Attributes {
	return TargetParametersEcsTaskParametersB5815465Attributes{ref: ref}
}

func (ef TargetParametersEcsTaskParametersB5815465Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return ef.ref.InternalTokens()
}

func (ef TargetParametersEcsTaskParametersB5815465Attributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("type"))
}

func (ef TargetParametersEcsTaskParametersB5815465Attributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("value"))
}

type TargetParametersEcsTaskParametersFc8E3460Attributes struct {
	ref terra.Reference
}

func (rr TargetParametersEcsTaskParametersFc8E3460Attributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr TargetParametersEcsTaskParametersFc8E3460Attributes) InternalWithRef(ref terra.Reference) TargetParametersEcsTaskParametersFc8E3460Attributes {
	return TargetParametersEcsTaskParametersFc8E3460Attributes{ref: ref}
}

func (rr TargetParametersEcsTaskParametersFc8E3460Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr TargetParametersEcsTaskParametersFc8E3460Attributes) Type() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("type"))
}

func (rr TargetParametersEcsTaskParametersFc8E3460Attributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("value"))
}

type TargetParametersEcsTaskParametersOverridesEphemeralStorageAttributes struct {
	ref terra.Reference
}

func (es TargetParametersEcsTaskParametersOverridesEphemeralStorageAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es TargetParametersEcsTaskParametersOverridesEphemeralStorageAttributes) InternalWithRef(ref terra.Reference) TargetParametersEcsTaskParametersOverridesEphemeralStorageAttributes {
	return TargetParametersEcsTaskParametersOverridesEphemeralStorageAttributes{ref: ref}
}

func (es TargetParametersEcsTaskParametersOverridesEphemeralStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es TargetParametersEcsTaskParametersOverridesEphemeralStorageAttributes) SizeInGib() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("size_in_gib"))
}

type TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideAttributes struct {
	ref terra.Reference
}

func (iao TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideAttributes) InternalRef() (terra.Reference, error) {
	return iao.ref, nil
}

func (iao TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideAttributes) InternalWithRef(ref terra.Reference) TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideAttributes {
	return TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideAttributes{ref: ref}
}

func (iao TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iao.ref.InternalTokens()
}

func (iao TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(iao.ref.Append("device_name"))
}

func (iao TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideAttributes) DeviceType() terra.StringValue {
	return terra.ReferenceAsString(iao.ref.Append("device_type"))
}

type TargetParametersEcsTaskParametersPlacementConstraintAttributes struct {
	ref terra.Reference
}

func (pc TargetParametersEcsTaskParametersPlacementConstraintAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc TargetParametersEcsTaskParametersPlacementConstraintAttributes) InternalWithRef(ref terra.Reference) TargetParametersEcsTaskParametersPlacementConstraintAttributes {
	return TargetParametersEcsTaskParametersPlacementConstraintAttributes{ref: ref}
}

func (pc TargetParametersEcsTaskParametersPlacementConstraintAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc TargetParametersEcsTaskParametersPlacementConstraintAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("expression"))
}

func (pc TargetParametersEcsTaskParametersPlacementConstraintAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("type"))
}

type TargetParametersEcsTaskParametersPlacementStrategyAttributes struct {
	ref terra.Reference
}

func (ps TargetParametersEcsTaskParametersPlacementStrategyAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps TargetParametersEcsTaskParametersPlacementStrategyAttributes) InternalWithRef(ref terra.Reference) TargetParametersEcsTaskParametersPlacementStrategyAttributes {
	return TargetParametersEcsTaskParametersPlacementStrategyAttributes{ref: ref}
}

func (ps TargetParametersEcsTaskParametersPlacementStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps TargetParametersEcsTaskParametersPlacementStrategyAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("field"))
}

func (ps TargetParametersEcsTaskParametersPlacementStrategyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("type"))
}

type TargetParametersEventbridgeEventBusParametersAttributes struct {
	ref terra.Reference
}

func (eebp TargetParametersEventbridgeEventBusParametersAttributes) InternalRef() (terra.Reference, error) {
	return eebp.ref, nil
}

func (eebp TargetParametersEventbridgeEventBusParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersEventbridgeEventBusParametersAttributes {
	return TargetParametersEventbridgeEventBusParametersAttributes{ref: ref}
}

func (eebp TargetParametersEventbridgeEventBusParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eebp.ref.InternalTokens()
}

func (eebp TargetParametersEventbridgeEventBusParametersAttributes) DetailType() terra.StringValue {
	return terra.ReferenceAsString(eebp.ref.Append("detail_type"))
}

func (eebp TargetParametersEventbridgeEventBusParametersAttributes) EndpointId() terra.StringValue {
	return terra.ReferenceAsString(eebp.ref.Append("endpoint_id"))
}

func (eebp TargetParametersEventbridgeEventBusParametersAttributes) Resources() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](eebp.ref.Append("resources"))
}

func (eebp TargetParametersEventbridgeEventBusParametersAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(eebp.ref.Append("source"))
}

func (eebp TargetParametersEventbridgeEventBusParametersAttributes) Time() terra.StringValue {
	return terra.ReferenceAsString(eebp.ref.Append("time"))
}

type TargetParametersHttpParametersAttributes struct {
	ref terra.Reference
}

func (hp TargetParametersHttpParametersAttributes) InternalRef() (terra.Reference, error) {
	return hp.ref, nil
}

func (hp TargetParametersHttpParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersHttpParametersAttributes {
	return TargetParametersHttpParametersAttributes{ref: ref}
}

func (hp TargetParametersHttpParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hp.ref.InternalTokens()
}

func (hp TargetParametersHttpParametersAttributes) HeaderParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hp.ref.Append("header_parameters"))
}

func (hp TargetParametersHttpParametersAttributes) PathParameterValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hp.ref.Append("path_parameter_values"))
}

func (hp TargetParametersHttpParametersAttributes) QueryStringParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hp.ref.Append("query_string_parameters"))
}

type TargetParametersKinesisStreamParametersAttributes struct {
	ref terra.Reference
}

func (ksp TargetParametersKinesisStreamParametersAttributes) InternalRef() (terra.Reference, error) {
	return ksp.ref, nil
}

func (ksp TargetParametersKinesisStreamParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersKinesisStreamParametersAttributes {
	return TargetParametersKinesisStreamParametersAttributes{ref: ref}
}

func (ksp TargetParametersKinesisStreamParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ksp.ref.InternalTokens()
}

func (ksp TargetParametersKinesisStreamParametersAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceAsString(ksp.ref.Append("partition_key"))
}

type TargetParametersLambdaFunctionParametersAttributes struct {
	ref terra.Reference
}

func (lfp TargetParametersLambdaFunctionParametersAttributes) InternalRef() (terra.Reference, error) {
	return lfp.ref, nil
}

func (lfp TargetParametersLambdaFunctionParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersLambdaFunctionParametersAttributes {
	return TargetParametersLambdaFunctionParametersAttributes{ref: ref}
}

func (lfp TargetParametersLambdaFunctionParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lfp.ref.InternalTokens()
}

func (lfp TargetParametersLambdaFunctionParametersAttributes) InvocationType() terra.StringValue {
	return terra.ReferenceAsString(lfp.ref.Append("invocation_type"))
}

type TargetParametersRedshiftDataParametersAttributes struct {
	ref terra.Reference
}

func (rdp TargetParametersRedshiftDataParametersAttributes) InternalRef() (terra.Reference, error) {
	return rdp.ref, nil
}

func (rdp TargetParametersRedshiftDataParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersRedshiftDataParametersAttributes {
	return TargetParametersRedshiftDataParametersAttributes{ref: ref}
}

func (rdp TargetParametersRedshiftDataParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rdp.ref.InternalTokens()
}

func (rdp TargetParametersRedshiftDataParametersAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(rdp.ref.Append("database"))
}

func (rdp TargetParametersRedshiftDataParametersAttributes) DbUser() terra.StringValue {
	return terra.ReferenceAsString(rdp.ref.Append("db_user"))
}

func (rdp TargetParametersRedshiftDataParametersAttributes) SecretManagerArn() terra.StringValue {
	return terra.ReferenceAsString(rdp.ref.Append("secret_manager_arn"))
}

func (rdp TargetParametersRedshiftDataParametersAttributes) Sqls() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rdp.ref.Append("sqls"))
}

func (rdp TargetParametersRedshiftDataParametersAttributes) StatementName() terra.StringValue {
	return terra.ReferenceAsString(rdp.ref.Append("statement_name"))
}

func (rdp TargetParametersRedshiftDataParametersAttributes) WithEvent() terra.BoolValue {
	return terra.ReferenceAsBool(rdp.ref.Append("with_event"))
}

type TargetParametersSagemakerPipelineParametersAttributes struct {
	ref terra.Reference
}

func (spp TargetParametersSagemakerPipelineParametersAttributes) InternalRef() (terra.Reference, error) {
	return spp.ref, nil
}

func (spp TargetParametersSagemakerPipelineParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersSagemakerPipelineParametersAttributes {
	return TargetParametersSagemakerPipelineParametersAttributes{ref: ref}
}

func (spp TargetParametersSagemakerPipelineParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spp.ref.InternalTokens()
}

func (spp TargetParametersSagemakerPipelineParametersAttributes) PipelineParameter() terra.ListValue[TargetParametersSagemakerPipelineParametersPipelineParameterAttributes] {
	return terra.ReferenceAsList[TargetParametersSagemakerPipelineParametersPipelineParameterAttributes](spp.ref.Append("pipeline_parameter"))
}

type TargetParametersSagemakerPipelineParametersPipelineParameterAttributes struct {
	ref terra.Reference
}

func (pp TargetParametersSagemakerPipelineParametersPipelineParameterAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp TargetParametersSagemakerPipelineParametersPipelineParameterAttributes) InternalWithRef(ref terra.Reference) TargetParametersSagemakerPipelineParametersPipelineParameterAttributes {
	return TargetParametersSagemakerPipelineParametersPipelineParameterAttributes{ref: ref}
}

func (pp TargetParametersSagemakerPipelineParametersPipelineParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp TargetParametersSagemakerPipelineParametersPipelineParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("name"))
}

func (pp TargetParametersSagemakerPipelineParametersPipelineParameterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("value"))
}

type TargetParametersSqsQueueParametersAttributes struct {
	ref terra.Reference
}

func (sqp TargetParametersSqsQueueParametersAttributes) InternalRef() (terra.Reference, error) {
	return sqp.ref, nil
}

func (sqp TargetParametersSqsQueueParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersSqsQueueParametersAttributes {
	return TargetParametersSqsQueueParametersAttributes{ref: ref}
}

func (sqp TargetParametersSqsQueueParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sqp.ref.InternalTokens()
}

func (sqp TargetParametersSqsQueueParametersAttributes) MessageDeduplicationId() terra.StringValue {
	return terra.ReferenceAsString(sqp.ref.Append("message_deduplication_id"))
}

func (sqp TargetParametersSqsQueueParametersAttributes) MessageGroupId() terra.StringValue {
	return terra.ReferenceAsString(sqp.ref.Append("message_group_id"))
}

type TargetParametersStepFunctionStateMachineParametersAttributes struct {
	ref terra.Reference
}

func (sfsmp TargetParametersStepFunctionStateMachineParametersAttributes) InternalRef() (terra.Reference, error) {
	return sfsmp.ref, nil
}

func (sfsmp TargetParametersStepFunctionStateMachineParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersStepFunctionStateMachineParametersAttributes {
	return TargetParametersStepFunctionStateMachineParametersAttributes{ref: ref}
}

func (sfsmp TargetParametersStepFunctionStateMachineParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sfsmp.ref.InternalTokens()
}

func (sfsmp TargetParametersStepFunctionStateMachineParametersAttributes) InvocationType() terra.StringValue {
	return terra.ReferenceAsString(sfsmp.ref.Append("invocation_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EnrichmentParametersState struct {
	InputTemplate  string                                    `json:"input_template"`
	HttpParameters []EnrichmentParametersHttpParametersState `json:"http_parameters"`
}

type EnrichmentParametersHttpParametersState struct {
	HeaderParameters      map[string]string `json:"header_parameters"`
	PathParameterValues   []string          `json:"path_parameter_values"`
	QueryStringParameters map[string]string `json:"query_string_parameters"`
}

type SourceParametersState struct {
	ActivemqBrokerParameters        []SourceParametersActivemqBrokerParametersState        `json:"activemq_broker_parameters"`
	DynamodbStreamParameters        []SourceParametersDynamodbStreamParametersState        `json:"dynamodb_stream_parameters"`
	FilterCriteria                  []SourceParametersFilterCriteriaState                  `json:"filter_criteria"`
	KinesisStreamParameters         []SourceParametersKinesisStreamParametersState         `json:"kinesis_stream_parameters"`
	ManagedStreamingKafkaParameters []SourceParametersManagedStreamingKafkaParametersState `json:"managed_streaming_kafka_parameters"`
	RabbitmqBrokerParameters        []SourceParametersRabbitmqBrokerParametersState        `json:"rabbitmq_broker_parameters"`
	SelfManagedKafkaParameters      []SourceParametersSelfManagedKafkaParametersState      `json:"self_managed_kafka_parameters"`
	SqsQueueParameters              []SourceParametersSqsQueueParametersState              `json:"sqs_queue_parameters"`
}

type SourceParametersActivemqBrokerParametersState struct {
	BatchSize                      float64                                                    `json:"batch_size"`
	MaximumBatchingWindowInSeconds float64                                                    `json:"maximum_batching_window_in_seconds"`
	QueueName                      string                                                     `json:"queue_name"`
	Credentials                    []SourceParametersActivemqBrokerParametersCredentialsState `json:"credentials"`
}

type SourceParametersActivemqBrokerParametersCredentialsState struct {
	BasicAuth string `json:"basic_auth"`
}

type SourceParametersDynamodbStreamParametersState struct {
	BatchSize                      float64                                                         `json:"batch_size"`
	MaximumBatchingWindowInSeconds float64                                                         `json:"maximum_batching_window_in_seconds"`
	MaximumRecordAgeInSeconds      float64                                                         `json:"maximum_record_age_in_seconds"`
	MaximumRetryAttempts           float64                                                         `json:"maximum_retry_attempts"`
	OnPartialBatchItemFailure      string                                                          `json:"on_partial_batch_item_failure"`
	ParallelizationFactor          float64                                                         `json:"parallelization_factor"`
	StartingPosition               string                                                          `json:"starting_position"`
	DeadLetterConfig               []SourceParametersDynamodbStreamParametersDeadLetterConfigState `json:"dead_letter_config"`
}

type SourceParametersDynamodbStreamParametersDeadLetterConfigState struct {
	Arn string `json:"arn"`
}

type SourceParametersFilterCriteriaState struct {
	Filter []SourceParametersFilterCriteriaFilterState `json:"filter"`
}

type SourceParametersFilterCriteriaFilterState struct {
	Pattern string `json:"pattern"`
}

type SourceParametersKinesisStreamParametersState struct {
	BatchSize                      float64                                                        `json:"batch_size"`
	MaximumBatchingWindowInSeconds float64                                                        `json:"maximum_batching_window_in_seconds"`
	MaximumRecordAgeInSeconds      float64                                                        `json:"maximum_record_age_in_seconds"`
	MaximumRetryAttempts           float64                                                        `json:"maximum_retry_attempts"`
	OnPartialBatchItemFailure      string                                                         `json:"on_partial_batch_item_failure"`
	ParallelizationFactor          float64                                                        `json:"parallelization_factor"`
	StartingPosition               string                                                         `json:"starting_position"`
	StartingPositionTimestamp      string                                                         `json:"starting_position_timestamp"`
	DeadLetterConfig               []SourceParametersKinesisStreamParametersDeadLetterConfigState `json:"dead_letter_config"`
}

type SourceParametersKinesisStreamParametersDeadLetterConfigState struct {
	Arn string `json:"arn"`
}

type SourceParametersManagedStreamingKafkaParametersState struct {
	BatchSize                      float64                                                           `json:"batch_size"`
	ConsumerGroupId                string                                                            `json:"consumer_group_id"`
	MaximumBatchingWindowInSeconds float64                                                           `json:"maximum_batching_window_in_seconds"`
	StartingPosition               string                                                            `json:"starting_position"`
	TopicName                      string                                                            `json:"topic_name"`
	Credentials                    []SourceParametersManagedStreamingKafkaParametersCredentialsState `json:"credentials"`
}

type SourceParametersManagedStreamingKafkaParametersCredentialsState struct {
	ClientCertificateTlsAuth string `json:"client_certificate_tls_auth"`
	SaslScram512Auth         string `json:"sasl_scram_512_auth"`
}

type SourceParametersRabbitmqBrokerParametersState struct {
	BatchSize                      float64                                                    `json:"batch_size"`
	MaximumBatchingWindowInSeconds float64                                                    `json:"maximum_batching_window_in_seconds"`
	QueueName                      string                                                     `json:"queue_name"`
	VirtualHost                    string                                                     `json:"virtual_host"`
	Credentials                    []SourceParametersRabbitmqBrokerParametersCredentialsState `json:"credentials"`
}

type SourceParametersRabbitmqBrokerParametersCredentialsState struct {
	BasicAuth string `json:"basic_auth"`
}

type SourceParametersSelfManagedKafkaParametersState struct {
	AdditionalBootstrapServers     []string                                                     `json:"additional_bootstrap_servers"`
	BatchSize                      float64                                                      `json:"batch_size"`
	ConsumerGroupId                string                                                       `json:"consumer_group_id"`
	MaximumBatchingWindowInSeconds float64                                                      `json:"maximum_batching_window_in_seconds"`
	ServerRootCaCertificate        string                                                       `json:"server_root_ca_certificate"`
	StartingPosition               string                                                       `json:"starting_position"`
	TopicName                      string                                                       `json:"topic_name"`
	Credentials                    []SourceParametersSelfManagedKafkaParametersCredentialsState `json:"credentials"`
	Vpc                            []SourceParametersSelfManagedKafkaParametersVpcState         `json:"vpc"`
}

type SourceParametersSelfManagedKafkaParametersCredentialsState struct {
	BasicAuth                string `json:"basic_auth"`
	ClientCertificateTlsAuth string `json:"client_certificate_tls_auth"`
	SaslScram256Auth         string `json:"sasl_scram_256_auth"`
	SaslScram512Auth         string `json:"sasl_scram_512_auth"`
}

type SourceParametersSelfManagedKafkaParametersVpcState struct {
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type SourceParametersSqsQueueParametersState struct {
	BatchSize                      float64 `json:"batch_size"`
	MaximumBatchingWindowInSeconds float64 `json:"maximum_batching_window_in_seconds"`
}

type TargetParametersState struct {
	InputTemplate                      string                                                    `json:"input_template"`
	BatchJobParameters                 []TargetParametersBatchJobParametersState                 `json:"batch_job_parameters"`
	CloudwatchLogsParameters           []TargetParametersCloudwatchLogsParametersState           `json:"cloudwatch_logs_parameters"`
	EcsTaskParameters                  []TargetParametersEcsTaskParametersState                  `json:"ecs_task_parameters"`
	EventbridgeEventBusParameters      []TargetParametersEventbridgeEventBusParametersState      `json:"eventbridge_event_bus_parameters"`
	HttpParameters                     []TargetParametersHttpParametersState                     `json:"http_parameters"`
	KinesisStreamParameters            []TargetParametersKinesisStreamParametersState            `json:"kinesis_stream_parameters"`
	LambdaFunctionParameters           []TargetParametersLambdaFunctionParametersState           `json:"lambda_function_parameters"`
	RedshiftDataParameters             []TargetParametersRedshiftDataParametersState             `json:"redshift_data_parameters"`
	SagemakerPipelineParameters        []TargetParametersSagemakerPipelineParametersState        `json:"sagemaker_pipeline_parameters"`
	SqsQueueParameters                 []TargetParametersSqsQueueParametersState                 `json:"sqs_queue_parameters"`
	StepFunctionStateMachineParameters []TargetParametersStepFunctionStateMachineParametersState `json:"step_function_state_machine_parameters"`
}

type TargetParametersBatchJobParametersState struct {
	JobDefinition      string                                                      `json:"job_definition"`
	JobName            string                                                      `json:"job_name"`
	Parameters         map[string]string                                           `json:"parameters"`
	ArrayProperties    []TargetParametersBatchJobParametersArrayPropertiesState    `json:"array_properties"`
	ContainerOverrides []TargetParametersBatchJobParametersContainerOverridesState `json:"container_overrides"`
	DependsOn          []TargetParametersBatchJobParametersDependsOnState          `json:"depends_on"`
	RetryStrategy      []TargetParametersBatchJobParametersRetryStrategyState      `json:"retry_strategy"`
}

type TargetParametersBatchJobParametersArrayPropertiesState struct {
	Size float64 `json:"size"`
}

type TargetParametersBatchJobParametersContainerOverridesState struct {
	Command             []string                                                                       `json:"command"`
	InstanceType        string                                                                         `json:"instance_type"`
	Environment         []TargetParametersBatchJobParametersContainerOverridesEnvironmentState         `json:"environment"`
	ResourceRequirement []TargetParametersBatchJobParametersContainerOverridesResourceRequirementState `json:"resource_requirement"`
}

type TargetParametersBatchJobParametersContainerOverridesEnvironmentState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TargetParametersBatchJobParametersContainerOverridesResourceRequirementState struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type TargetParametersBatchJobParametersDependsOnState struct {
	JobId string `json:"job_id"`
	Type  string `json:"type"`
}

type TargetParametersBatchJobParametersRetryStrategyState struct {
	Attempts float64 `json:"attempts"`
}

type TargetParametersCloudwatchLogsParametersState struct {
	LogStreamName string `json:"log_stream_name"`
	Timestamp     string `json:"timestamp"`
}

type TargetParametersEcsTaskParametersState struct {
	EnableEcsManagedTags     bool                                                             `json:"enable_ecs_managed_tags"`
	EnableExecuteCommand     bool                                                             `json:"enable_execute_command"`
	Group                    string                                                           `json:"group"`
	LaunchType               string                                                           `json:"launch_type"`
	PlatformVersion          string                                                           `json:"platform_version"`
	PropagateTags            string                                                           `json:"propagate_tags"`
	ReferenceId              string                                                           `json:"reference_id"`
	Tags                     map[string]string                                                `json:"tags"`
	TaskCount                float64                                                          `json:"task_count"`
	TaskDefinitionArn        string                                                           `json:"task_definition_arn"`
	CapacityProviderStrategy []TargetParametersEcsTaskParametersCapacityProviderStrategyState `json:"capacity_provider_strategy"`
	NetworkConfiguration     []TargetParametersEcsTaskParametersNetworkConfigurationState     `json:"network_configuration"`
	Overrides                []TargetParametersEcsTaskParametersOverridesState                `json:"overrides"`
	PlacementConstraint      []TargetParametersEcsTaskParametersPlacementConstraintState      `json:"placement_constraint"`
	PlacementStrategy        []TargetParametersEcsTaskParametersPlacementStrategyState        `json:"placement_strategy"`
}

type TargetParametersEcsTaskParametersCapacityProviderStrategyState struct {
	Base             float64 `json:"base"`
	CapacityProvider string  `json:"capacity_provider"`
	Weight           float64 `json:"weight"`
}

type TargetParametersEcsTaskParametersNetworkConfigurationState struct {
	AwsVpcConfiguration []TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationState `json:"aws_vpc_configuration"`
}

type TargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationState struct {
	AssignPublicIp string   `json:"assign_public_ip"`
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type TargetParametersEcsTaskParametersOverridesState struct {
	Cpu                          string                                                                        `json:"cpu"`
	ExecutionRoleArn             string                                                                        `json:"execution_role_arn"`
	Memory                       string                                                                        `json:"memory"`
	TaskRoleArn                  string                                                                        `json:"task_role_arn"`
	ContainerOverride            []TargetParametersEcsTaskParametersOverridesContainerOverrideState            `json:"container_override"`
	EphemeralStorage             []TargetParametersEcsTaskParametersOverridesEphemeralStorageState             `json:"ephemeral_storage"`
	InferenceAcceleratorOverride []TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideState `json:"inference_accelerator_override"`
}

type TargetParametersEcsTaskParametersOverridesContainerOverrideState struct {
	Command             []string                                         `json:"command"`
	Cpu                 float64                                          `json:"cpu"`
	Memory              float64                                          `json:"memory"`
	MemoryReservation   float64                                          `json:"memory_reservation"`
	Name                string                                           `json:"name"`
	Environment         []TargetParametersEcsTaskParameters6Af102E9State `json:"environment"`
	EnvironmentFile     []TargetParametersEcsTaskParametersB5815465State `json:"environment_file"`
	ResourceRequirement []TargetParametersEcsTaskParametersFc8E3460State `json:"resource_requirement"`
}

type TargetParametersEcsTaskParameters6Af102E9State struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TargetParametersEcsTaskParametersB5815465State struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type TargetParametersEcsTaskParametersFc8E3460State struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type TargetParametersEcsTaskParametersOverridesEphemeralStorageState struct {
	SizeInGib float64 `json:"size_in_gib"`
}

type TargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideState struct {
	DeviceName string `json:"device_name"`
	DeviceType string `json:"device_type"`
}

type TargetParametersEcsTaskParametersPlacementConstraintState struct {
	Expression string `json:"expression"`
	Type       string `json:"type"`
}

type TargetParametersEcsTaskParametersPlacementStrategyState struct {
	Field string `json:"field"`
	Type  string `json:"type"`
}

type TargetParametersEventbridgeEventBusParametersState struct {
	DetailType string   `json:"detail_type"`
	EndpointId string   `json:"endpoint_id"`
	Resources  []string `json:"resources"`
	Source     string   `json:"source"`
	Time       string   `json:"time"`
}

type TargetParametersHttpParametersState struct {
	HeaderParameters      map[string]string `json:"header_parameters"`
	PathParameterValues   []string          `json:"path_parameter_values"`
	QueryStringParameters map[string]string `json:"query_string_parameters"`
}

type TargetParametersKinesisStreamParametersState struct {
	PartitionKey string `json:"partition_key"`
}

type TargetParametersLambdaFunctionParametersState struct {
	InvocationType string `json:"invocation_type"`
}

type TargetParametersRedshiftDataParametersState struct {
	Database         string   `json:"database"`
	DbUser           string   `json:"db_user"`
	SecretManagerArn string   `json:"secret_manager_arn"`
	Sqls             []string `json:"sqls"`
	StatementName    string   `json:"statement_name"`
	WithEvent        bool     `json:"with_event"`
}

type TargetParametersSagemakerPipelineParametersState struct {
	PipelineParameter []TargetParametersSagemakerPipelineParametersPipelineParameterState `json:"pipeline_parameter"`
}

type TargetParametersSagemakerPipelineParametersPipelineParameterState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TargetParametersSqsQueueParametersState struct {
	MessageDeduplicationId string `json:"message_deduplication_id"`
	MessageGroupId         string `json:"message_group_id"`
}

type TargetParametersStepFunctionStateMachineParametersState struct {
	InvocationType string `json:"invocation_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
