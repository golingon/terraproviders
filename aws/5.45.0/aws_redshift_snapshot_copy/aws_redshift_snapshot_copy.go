// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshift_snapshot_copy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_redshift_snapshot_copy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRedshiftSnapshotCopyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arsc *Resource) Type() string {
	return "aws_redshift_snapshot_copy"
}

// LocalName returns the local name for [Resource].
func (arsc *Resource) LocalName() string {
	return arsc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arsc *Resource) Configuration() interface{} {
	return arsc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arsc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arsc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arsc *Resource) Dependencies() terra.Dependencies {
	return arsc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arsc *Resource) LifecycleManagement() *terra.Lifecycle {
	return arsc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arsc *Resource) Attributes() awsRedshiftSnapshotCopyAttributes {
	return awsRedshiftSnapshotCopyAttributes{ref: terra.ReferenceResource(arsc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arsc *Resource) ImportState(state io.Reader) error {
	arsc.state = &awsRedshiftSnapshotCopyState{}
	if err := json.NewDecoder(state).Decode(arsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arsc.Type(), arsc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arsc *Resource) State() (*awsRedshiftSnapshotCopyState, bool) {
	return arsc.state, arsc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arsc *Resource) StateMust() *awsRedshiftSnapshotCopyState {
	if arsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arsc.Type(), arsc.LocalName()))
	}
	return arsc.state
}

// Args contains the configurations for aws_redshift_snapshot_copy.
type Args struct {
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// DestinationRegion: string, required
	DestinationRegion terra.StringValue `hcl:"destination_region,attr" validate:"required"`
	// ManualSnapshotRetentionPeriod: number, optional
	ManualSnapshotRetentionPeriod terra.NumberValue `hcl:"manual_snapshot_retention_period,attr"`
	// RetentionPeriod: number, optional
	RetentionPeriod terra.NumberValue `hcl:"retention_period,attr"`
	// SnapshotCopyGrantName: string, optional
	SnapshotCopyGrantName terra.StringValue `hcl:"snapshot_copy_grant_name,attr"`
}

type awsRedshiftSnapshotCopyAttributes struct {
	ref terra.Reference
}

// ClusterIdentifier returns a reference to field cluster_identifier of aws_redshift_snapshot_copy.
func (arsc awsRedshiftSnapshotCopyAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(arsc.ref.Append("cluster_identifier"))
}

// DestinationRegion returns a reference to field destination_region of aws_redshift_snapshot_copy.
func (arsc awsRedshiftSnapshotCopyAttributes) DestinationRegion() terra.StringValue {
	return terra.ReferenceAsString(arsc.ref.Append("destination_region"))
}

// Id returns a reference to field id of aws_redshift_snapshot_copy.
func (arsc awsRedshiftSnapshotCopyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arsc.ref.Append("id"))
}

// ManualSnapshotRetentionPeriod returns a reference to field manual_snapshot_retention_period of aws_redshift_snapshot_copy.
func (arsc awsRedshiftSnapshotCopyAttributes) ManualSnapshotRetentionPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(arsc.ref.Append("manual_snapshot_retention_period"))
}

// RetentionPeriod returns a reference to field retention_period of aws_redshift_snapshot_copy.
func (arsc awsRedshiftSnapshotCopyAttributes) RetentionPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(arsc.ref.Append("retention_period"))
}

// SnapshotCopyGrantName returns a reference to field snapshot_copy_grant_name of aws_redshift_snapshot_copy.
func (arsc awsRedshiftSnapshotCopyAttributes) SnapshotCopyGrantName() terra.StringValue {
	return terra.ReferenceAsString(arsc.ref.Append("snapshot_copy_grant_name"))
}

type awsRedshiftSnapshotCopyState struct {
	ClusterIdentifier             string  `json:"cluster_identifier"`
	DestinationRegion             string  `json:"destination_region"`
	Id                            string  `json:"id"`
	ManualSnapshotRetentionPeriod float64 `json:"manual_snapshot_retention_period"`
	RetentionPeriod               float64 `json:"retention_period"`
	SnapshotCopyGrantName         string  `json:"snapshot_copy_grant_name"`
}
