// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_db_snapshot

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_db_snapshot.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDbSnapshotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ads *Resource) Type() string {
	return "aws_db_snapshot"
}

// LocalName returns the local name for [Resource].
func (ads *Resource) LocalName() string {
	return ads.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ads *Resource) Configuration() interface{} {
	return ads.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ads *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ads)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ads *Resource) Dependencies() terra.Dependencies {
	return ads.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ads *Resource) LifecycleManagement() *terra.Lifecycle {
	return ads.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ads *Resource) Attributes() awsDbSnapshotAttributes {
	return awsDbSnapshotAttributes{ref: terra.ReferenceResource(ads)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ads *Resource) ImportState(state io.Reader) error {
	ads.state = &awsDbSnapshotState{}
	if err := json.NewDecoder(state).Decode(ads.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ads.Type(), ads.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ads *Resource) State() (*awsDbSnapshotState, bool) {
	return ads.state, ads.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ads *Resource) StateMust() *awsDbSnapshotState {
	if ads.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ads.Type(), ads.LocalName()))
	}
	return ads.state
}

// Args contains the configurations for aws_db_snapshot.
type Args struct {
	// DbInstanceIdentifier: string, required
	DbInstanceIdentifier terra.StringValue `hcl:"db_instance_identifier,attr" validate:"required"`
	// DbSnapshotIdentifier: string, required
	DbSnapshotIdentifier terra.StringValue `hcl:"db_snapshot_identifier,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SharedAccounts: set of string, optional
	SharedAccounts terra.SetValue[terra.StringValue] `hcl:"shared_accounts,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDbSnapshotAttributes struct {
	ref terra.Reference
}

// AllocatedStorage returns a reference to field allocated_storage of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) AllocatedStorage() terra.NumberValue {
	return terra.ReferenceAsNumber(ads.ref.Append("allocated_storage"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("availability_zone"))
}

// DbInstanceIdentifier returns a reference to field db_instance_identifier of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) DbInstanceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("db_instance_identifier"))
}

// DbSnapshotArn returns a reference to field db_snapshot_arn of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) DbSnapshotArn() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("db_snapshot_arn"))
}

// DbSnapshotIdentifier returns a reference to field db_snapshot_identifier of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) DbSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("db_snapshot_identifier"))
}

// Encrypted returns a reference to field encrypted of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(ads.ref.Append("encrypted"))
}

// Engine returns a reference to field engine of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) Engine() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("engine"))
}

// EngineVersion returns a reference to field engine_version of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("engine_version"))
}

// Id returns a reference to field id of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("id"))
}

// Iops returns a reference to field iops of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ads.ref.Append("iops"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("kms_key_id"))
}

// LicenseModel returns a reference to field license_model of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) LicenseModel() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("license_model"))
}

// OptionGroupName returns a reference to field option_group_name of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) OptionGroupName() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("option_group_name"))
}

// Port returns a reference to field port of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ads.ref.Append("port"))
}

// SharedAccounts returns a reference to field shared_accounts of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) SharedAccounts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ads.ref.Append("shared_accounts"))
}

// SnapshotType returns a reference to field snapshot_type of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) SnapshotType() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("snapshot_type"))
}

// SourceDbSnapshotIdentifier returns a reference to field source_db_snapshot_identifier of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) SourceDbSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("source_db_snapshot_identifier"))
}

// SourceRegion returns a reference to field source_region of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) SourceRegion() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("source_region"))
}

// Status returns a reference to field status of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("status"))
}

// StorageType returns a reference to field storage_type of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) StorageType() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("storage_type"))
}

// Tags returns a reference to field tags of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ads.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ads.ref.Append("tags_all"))
}

// VpcId returns a reference to field vpc_id of aws_db_snapshot.
func (ads awsDbSnapshotAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(ads.ref.Append("vpc_id"))
}

func (ads awsDbSnapshotAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ads.ref.Append("timeouts"))
}

type awsDbSnapshotState struct {
	AllocatedStorage           float64           `json:"allocated_storage"`
	AvailabilityZone           string            `json:"availability_zone"`
	DbInstanceIdentifier       string            `json:"db_instance_identifier"`
	DbSnapshotArn              string            `json:"db_snapshot_arn"`
	DbSnapshotIdentifier       string            `json:"db_snapshot_identifier"`
	Encrypted                  bool              `json:"encrypted"`
	Engine                     string            `json:"engine"`
	EngineVersion              string            `json:"engine_version"`
	Id                         string            `json:"id"`
	Iops                       float64           `json:"iops"`
	KmsKeyId                   string            `json:"kms_key_id"`
	LicenseModel               string            `json:"license_model"`
	OptionGroupName            string            `json:"option_group_name"`
	Port                       float64           `json:"port"`
	SharedAccounts             []string          `json:"shared_accounts"`
	SnapshotType               string            `json:"snapshot_type"`
	SourceDbSnapshotIdentifier string            `json:"source_db_snapshot_identifier"`
	SourceRegion               string            `json:"source_region"`
	Status                     string            `json:"status"`
	StorageType                string            `json:"storage_type"`
	Tags                       map[string]string `json:"tags"`
	TagsAll                    map[string]string `json:"tags_all"`
	VpcId                      string            `json:"vpc_id"`
	Timeouts                   *TimeoutsState    `json:"timeouts"`
}
