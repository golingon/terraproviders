// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_tag_option_resource_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_servicecatalog_tag_option_resource_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsServicecatalogTagOptionResourceAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (astora *Resource) Type() string {
	return "aws_servicecatalog_tag_option_resource_association"
}

// LocalName returns the local name for [Resource].
func (astora *Resource) LocalName() string {
	return astora.Name
}

// Configuration returns the configuration (args) for [Resource].
func (astora *Resource) Configuration() interface{} {
	return astora.Args
}

// DependOn is used for other resources to depend on [Resource].
func (astora *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(astora)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (astora *Resource) Dependencies() terra.Dependencies {
	return astora.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (astora *Resource) LifecycleManagement() *terra.Lifecycle {
	return astora.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (astora *Resource) Attributes() awsServicecatalogTagOptionResourceAssociationAttributes {
	return awsServicecatalogTagOptionResourceAssociationAttributes{ref: terra.ReferenceResource(astora)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (astora *Resource) ImportState(state io.Reader) error {
	astora.state = &awsServicecatalogTagOptionResourceAssociationState{}
	if err := json.NewDecoder(state).Decode(astora.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", astora.Type(), astora.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (astora *Resource) State() (*awsServicecatalogTagOptionResourceAssociationState, bool) {
	return astora.state, astora.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (astora *Resource) StateMust() *awsServicecatalogTagOptionResourceAssociationState {
	if astora.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", astora.Type(), astora.LocalName()))
	}
	return astora.state
}

// Args contains the configurations for aws_servicecatalog_tag_option_resource_association.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
	// TagOptionId: string, required
	TagOptionId terra.StringValue `hcl:"tag_option_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsServicecatalogTagOptionResourceAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_servicecatalog_tag_option_resource_association.
func (astora awsServicecatalogTagOptionResourceAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(astora.ref.Append("id"))
}

// ResourceArn returns a reference to field resource_arn of aws_servicecatalog_tag_option_resource_association.
func (astora awsServicecatalogTagOptionResourceAssociationAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(astora.ref.Append("resource_arn"))
}

// ResourceCreatedTime returns a reference to field resource_created_time of aws_servicecatalog_tag_option_resource_association.
func (astora awsServicecatalogTagOptionResourceAssociationAttributes) ResourceCreatedTime() terra.StringValue {
	return terra.ReferenceAsString(astora.ref.Append("resource_created_time"))
}

// ResourceDescription returns a reference to field resource_description of aws_servicecatalog_tag_option_resource_association.
func (astora awsServicecatalogTagOptionResourceAssociationAttributes) ResourceDescription() terra.StringValue {
	return terra.ReferenceAsString(astora.ref.Append("resource_description"))
}

// ResourceId returns a reference to field resource_id of aws_servicecatalog_tag_option_resource_association.
func (astora awsServicecatalogTagOptionResourceAssociationAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceAsString(astora.ref.Append("resource_id"))
}

// ResourceName returns a reference to field resource_name of aws_servicecatalog_tag_option_resource_association.
func (astora awsServicecatalogTagOptionResourceAssociationAttributes) ResourceName() terra.StringValue {
	return terra.ReferenceAsString(astora.ref.Append("resource_name"))
}

// TagOptionId returns a reference to field tag_option_id of aws_servicecatalog_tag_option_resource_association.
func (astora awsServicecatalogTagOptionResourceAssociationAttributes) TagOptionId() terra.StringValue {
	return terra.ReferenceAsString(astora.ref.Append("tag_option_id"))
}

func (astora awsServicecatalogTagOptionResourceAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](astora.ref.Append("timeouts"))
}

type awsServicecatalogTagOptionResourceAssociationState struct {
	Id                  string         `json:"id"`
	ResourceArn         string         `json:"resource_arn"`
	ResourceCreatedTime string         `json:"resource_created_time"`
	ResourceDescription string         `json:"resource_description"`
	ResourceId          string         `json:"resource_id"`
	ResourceName        string         `json:"resource_name"`
	TagOptionId         string         `json:"tag_option_id"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
