// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ce_cost_allocation_tag

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ce_cost_allocation_tag.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCeCostAllocationTagState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (accat *Resource) Type() string {
	return "aws_ce_cost_allocation_tag"
}

// LocalName returns the local name for [Resource].
func (accat *Resource) LocalName() string {
	return accat.Name
}

// Configuration returns the configuration (args) for [Resource].
func (accat *Resource) Configuration() interface{} {
	return accat.Args
}

// DependOn is used for other resources to depend on [Resource].
func (accat *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(accat)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (accat *Resource) Dependencies() terra.Dependencies {
	return accat.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (accat *Resource) LifecycleManagement() *terra.Lifecycle {
	return accat.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (accat *Resource) Attributes() awsCeCostAllocationTagAttributes {
	return awsCeCostAllocationTagAttributes{ref: terra.ReferenceResource(accat)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (accat *Resource) ImportState(state io.Reader) error {
	accat.state = &awsCeCostAllocationTagState{}
	if err := json.NewDecoder(state).Decode(accat.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", accat.Type(), accat.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (accat *Resource) State() (*awsCeCostAllocationTagState, bool) {
	return accat.state, accat.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (accat *Resource) StateMust() *awsCeCostAllocationTagState {
	if accat.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", accat.Type(), accat.LocalName()))
	}
	return accat.state
}

// Args contains the configurations for aws_ce_cost_allocation_tag.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// TagKey: string, required
	TagKey terra.StringValue `hcl:"tag_key,attr" validate:"required"`
}

type awsCeCostAllocationTagAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ce_cost_allocation_tag.
func (accat awsCeCostAllocationTagAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(accat.ref.Append("id"))
}

// Status returns a reference to field status of aws_ce_cost_allocation_tag.
func (accat awsCeCostAllocationTagAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(accat.ref.Append("status"))
}

// TagKey returns a reference to field tag_key of aws_ce_cost_allocation_tag.
func (accat awsCeCostAllocationTagAttributes) TagKey() terra.StringValue {
	return terra.ReferenceAsString(accat.ref.Append("tag_key"))
}

// Type returns a reference to field type of aws_ce_cost_allocation_tag.
func (accat awsCeCostAllocationTagAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(accat.ref.Append("type"))
}

type awsCeCostAllocationTagState struct {
	Id     string `json:"id"`
	Status string `json:"status"`
	TagKey string `json:"tag_key"`
	Type   string `json:"type"`
}
