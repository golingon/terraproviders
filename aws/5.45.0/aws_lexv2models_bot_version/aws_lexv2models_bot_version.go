// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lexv2models_bot_version

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lexv2models_bot_version.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLexv2ModelsBotVersionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (albv *Resource) Type() string {
	return "aws_lexv2models_bot_version"
}

// LocalName returns the local name for [Resource].
func (albv *Resource) LocalName() string {
	return albv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (albv *Resource) Configuration() interface{} {
	return albv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (albv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(albv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (albv *Resource) Dependencies() terra.Dependencies {
	return albv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (albv *Resource) LifecycleManagement() *terra.Lifecycle {
	return albv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (albv *Resource) Attributes() awsLexv2ModelsBotVersionAttributes {
	return awsLexv2ModelsBotVersionAttributes{ref: terra.ReferenceResource(albv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (albv *Resource) ImportState(state io.Reader) error {
	albv.state = &awsLexv2ModelsBotVersionState{}
	if err := json.NewDecoder(state).Decode(albv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", albv.Type(), albv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (albv *Resource) State() (*awsLexv2ModelsBotVersionState, bool) {
	return albv.state, albv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (albv *Resource) StateMust() *awsLexv2ModelsBotVersionState {
	if albv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", albv.Type(), albv.LocalName()))
	}
	return albv.state
}

// Args contains the configurations for aws_lexv2models_bot_version.
type Args struct {
	// BotId: string, required
	BotId terra.StringValue `hcl:"bot_id,attr" validate:"required"`
	// BotVersion: string, optional
	BotVersion terra.StringValue `hcl:"bot_version,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// LocaleSpecification: min=0
	LocaleSpecification []LocaleSpecification `hcl:"locale_specification,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsLexv2ModelsBotVersionAttributes struct {
	ref terra.Reference
}

// BotId returns a reference to field bot_id of aws_lexv2models_bot_version.
func (albv awsLexv2ModelsBotVersionAttributes) BotId() terra.StringValue {
	return terra.ReferenceAsString(albv.ref.Append("bot_id"))
}

// BotVersion returns a reference to field bot_version of aws_lexv2models_bot_version.
func (albv awsLexv2ModelsBotVersionAttributes) BotVersion() terra.StringValue {
	return terra.ReferenceAsString(albv.ref.Append("bot_version"))
}

// Description returns a reference to field description of aws_lexv2models_bot_version.
func (albv awsLexv2ModelsBotVersionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(albv.ref.Append("description"))
}

// Id returns a reference to field id of aws_lexv2models_bot_version.
func (albv awsLexv2ModelsBotVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(albv.ref.Append("id"))
}

func (albv awsLexv2ModelsBotVersionAttributes) LocaleSpecification() terra.MapValue[LocaleSpecificationAttributes] {
	return terra.ReferenceAsMap[LocaleSpecificationAttributes](albv.ref.Append("locale_specification"))
}

func (albv awsLexv2ModelsBotVersionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](albv.ref.Append("timeouts"))
}

type awsLexv2ModelsBotVersionState struct {
	BotId               string                     `json:"bot_id"`
	BotVersion          string                     `json:"bot_version"`
	Description         string                     `json:"description"`
	Id                  string                     `json:"id"`
	LocaleSpecification []LocaleSpecificationState `json:"locale_specification"`
	Timeouts            *TimeoutsState             `json:"timeouts"`
}
