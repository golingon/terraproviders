// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_prometheus_alert_manager_definition

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_prometheus_alert_manager_definition.
type Resource struct {
	Name      string
	Args      Args
	state     *awsPrometheusAlertManagerDefinitionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (apamd *Resource) Type() string {
	return "aws_prometheus_alert_manager_definition"
}

// LocalName returns the local name for [Resource].
func (apamd *Resource) LocalName() string {
	return apamd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (apamd *Resource) Configuration() interface{} {
	return apamd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (apamd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(apamd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (apamd *Resource) Dependencies() terra.Dependencies {
	return apamd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (apamd *Resource) LifecycleManagement() *terra.Lifecycle {
	return apamd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (apamd *Resource) Attributes() awsPrometheusAlertManagerDefinitionAttributes {
	return awsPrometheusAlertManagerDefinitionAttributes{ref: terra.ReferenceResource(apamd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (apamd *Resource) ImportState(state io.Reader) error {
	apamd.state = &awsPrometheusAlertManagerDefinitionState{}
	if err := json.NewDecoder(state).Decode(apamd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", apamd.Type(), apamd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (apamd *Resource) State() (*awsPrometheusAlertManagerDefinitionState, bool) {
	return apamd.state, apamd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (apamd *Resource) StateMust() *awsPrometheusAlertManagerDefinitionState {
	if apamd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", apamd.Type(), apamd.LocalName()))
	}
	return apamd.state
}

// Args contains the configurations for aws_prometheus_alert_manager_definition.
type Args struct {
	// Definition: string, required
	Definition terra.StringValue `hcl:"definition,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
}

type awsPrometheusAlertManagerDefinitionAttributes struct {
	ref terra.Reference
}

// Definition returns a reference to field definition of aws_prometheus_alert_manager_definition.
func (apamd awsPrometheusAlertManagerDefinitionAttributes) Definition() terra.StringValue {
	return terra.ReferenceAsString(apamd.ref.Append("definition"))
}

// Id returns a reference to field id of aws_prometheus_alert_manager_definition.
func (apamd awsPrometheusAlertManagerDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(apamd.ref.Append("id"))
}

// WorkspaceId returns a reference to field workspace_id of aws_prometheus_alert_manager_definition.
func (apamd awsPrometheusAlertManagerDefinitionAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(apamd.ref.Append("workspace_id"))
}

type awsPrometheusAlertManagerDefinitionState struct {
	Definition  string `json:"definition"`
	Id          string `json:"id"`
	WorkspaceId string `json:"workspace_id"`
}
