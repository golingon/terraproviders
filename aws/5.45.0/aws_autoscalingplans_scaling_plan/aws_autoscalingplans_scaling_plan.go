// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_autoscalingplans_scaling_plan

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_autoscalingplans_scaling_plan.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAutoscalingplansScalingPlanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aasp *Resource) Type() string {
	return "aws_autoscalingplans_scaling_plan"
}

// LocalName returns the local name for [Resource].
func (aasp *Resource) LocalName() string {
	return aasp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aasp *Resource) Configuration() interface{} {
	return aasp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aasp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aasp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aasp *Resource) Dependencies() terra.Dependencies {
	return aasp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aasp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aasp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aasp *Resource) Attributes() awsAutoscalingplansScalingPlanAttributes {
	return awsAutoscalingplansScalingPlanAttributes{ref: terra.ReferenceResource(aasp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aasp *Resource) ImportState(state io.Reader) error {
	aasp.state = &awsAutoscalingplansScalingPlanState{}
	if err := json.NewDecoder(state).Decode(aasp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aasp.Type(), aasp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aasp *Resource) State() (*awsAutoscalingplansScalingPlanState, bool) {
	return aasp.state, aasp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aasp *Resource) StateMust() *awsAutoscalingplansScalingPlanState {
	if aasp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aasp.Type(), aasp.LocalName()))
	}
	return aasp.state
}

// Args contains the configurations for aws_autoscalingplans_scaling_plan.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ApplicationSource: required
	ApplicationSource *ApplicationSource `hcl:"application_source,block" validate:"required"`
	// ScalingInstruction: min=1
	ScalingInstruction []ScalingInstruction `hcl:"scaling_instruction,block" validate:"min=1"`
}

type awsAutoscalingplansScalingPlanAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_autoscalingplans_scaling_plan.
func (aasp awsAutoscalingplansScalingPlanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aasp.ref.Append("id"))
}

// Name returns a reference to field name of aws_autoscalingplans_scaling_plan.
func (aasp awsAutoscalingplansScalingPlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aasp.ref.Append("name"))
}

// ScalingPlanVersion returns a reference to field scaling_plan_version of aws_autoscalingplans_scaling_plan.
func (aasp awsAutoscalingplansScalingPlanAttributes) ScalingPlanVersion() terra.NumberValue {
	return terra.ReferenceAsNumber(aasp.ref.Append("scaling_plan_version"))
}

func (aasp awsAutoscalingplansScalingPlanAttributes) ApplicationSource() terra.ListValue[ApplicationSourceAttributes] {
	return terra.ReferenceAsList[ApplicationSourceAttributes](aasp.ref.Append("application_source"))
}

func (aasp awsAutoscalingplansScalingPlanAttributes) ScalingInstruction() terra.SetValue[ScalingInstructionAttributes] {
	return terra.ReferenceAsSet[ScalingInstructionAttributes](aasp.ref.Append("scaling_instruction"))
}

type awsAutoscalingplansScalingPlanState struct {
	Id                 string                    `json:"id"`
	Name               string                    `json:"name"`
	ScalingPlanVersion float64                   `json:"scaling_plan_version"`
	ApplicationSource  []ApplicationSourceState  `json:"application_source"`
	ScalingInstruction []ScalingInstructionState `json:"scaling_instruction"`
}
