// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_efs_access_point

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_efs_access_point.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEfsAccessPointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeap *Resource) Type() string {
	return "aws_efs_access_point"
}

// LocalName returns the local name for [Resource].
func (aeap *Resource) LocalName() string {
	return aeap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeap *Resource) Configuration() interface{} {
	return aeap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeap *Resource) Dependencies() terra.Dependencies {
	return aeap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeap *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeap *Resource) Attributes() awsEfsAccessPointAttributes {
	return awsEfsAccessPointAttributes{ref: terra.ReferenceResource(aeap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeap *Resource) ImportState(state io.Reader) error {
	aeap.state = &awsEfsAccessPointState{}
	if err := json.NewDecoder(state).Decode(aeap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeap.Type(), aeap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeap *Resource) State() (*awsEfsAccessPointState, bool) {
	return aeap.state, aeap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeap *Resource) StateMust() *awsEfsAccessPointState {
	if aeap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeap.Type(), aeap.LocalName()))
	}
	return aeap.state
}

// Args contains the configurations for aws_efs_access_point.
type Args struct {
	// FileSystemId: string, required
	FileSystemId terra.StringValue `hcl:"file_system_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// PosixUser: optional
	PosixUser *PosixUser `hcl:"posix_user,block"`
	// RootDirectory: optional
	RootDirectory *RootDirectory `hcl:"root_directory,block"`
}

type awsEfsAccessPointAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_efs_access_point.
func (aeap awsEfsAccessPointAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aeap.ref.Append("arn"))
}

// FileSystemArn returns a reference to field file_system_arn of aws_efs_access_point.
func (aeap awsEfsAccessPointAttributes) FileSystemArn() terra.StringValue {
	return terra.ReferenceAsString(aeap.ref.Append("file_system_arn"))
}

// FileSystemId returns a reference to field file_system_id of aws_efs_access_point.
func (aeap awsEfsAccessPointAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceAsString(aeap.ref.Append("file_system_id"))
}

// Id returns a reference to field id of aws_efs_access_point.
func (aeap awsEfsAccessPointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeap.ref.Append("id"))
}

// OwnerId returns a reference to field owner_id of aws_efs_access_point.
func (aeap awsEfsAccessPointAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(aeap.ref.Append("owner_id"))
}

// Tags returns a reference to field tags of aws_efs_access_point.
func (aeap awsEfsAccessPointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeap.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_efs_access_point.
func (aeap awsEfsAccessPointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeap.ref.Append("tags_all"))
}

func (aeap awsEfsAccessPointAttributes) PosixUser() terra.ListValue[PosixUserAttributes] {
	return terra.ReferenceAsList[PosixUserAttributes](aeap.ref.Append("posix_user"))
}

func (aeap awsEfsAccessPointAttributes) RootDirectory() terra.ListValue[RootDirectoryAttributes] {
	return terra.ReferenceAsList[RootDirectoryAttributes](aeap.ref.Append("root_directory"))
}

type awsEfsAccessPointState struct {
	Arn           string               `json:"arn"`
	FileSystemArn string               `json:"file_system_arn"`
	FileSystemId  string               `json:"file_system_id"`
	Id            string               `json:"id"`
	OwnerId       string               `json:"owner_id"`
	Tags          map[string]string    `json:"tags"`
	TagsAll       map[string]string    `json:"tags_all"`
	PosixUser     []PosixUserState     `json:"posix_user"`
	RootDirectory []RootDirectoryState `json:"root_directory"`
}
