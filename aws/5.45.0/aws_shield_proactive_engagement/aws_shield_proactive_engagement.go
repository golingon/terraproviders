// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_shield_proactive_engagement

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_shield_proactive_engagement.
type Resource struct {
	Name      string
	Args      Args
	state     *awsShieldProactiveEngagementState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aspe *Resource) Type() string {
	return "aws_shield_proactive_engagement"
}

// LocalName returns the local name for [Resource].
func (aspe *Resource) LocalName() string {
	return aspe.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aspe *Resource) Configuration() interface{} {
	return aspe.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aspe *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aspe)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aspe *Resource) Dependencies() terra.Dependencies {
	return aspe.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aspe *Resource) LifecycleManagement() *terra.Lifecycle {
	return aspe.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aspe *Resource) Attributes() awsShieldProactiveEngagementAttributes {
	return awsShieldProactiveEngagementAttributes{ref: terra.ReferenceResource(aspe)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aspe *Resource) ImportState(state io.Reader) error {
	aspe.state = &awsShieldProactiveEngagementState{}
	if err := json.NewDecoder(state).Decode(aspe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aspe.Type(), aspe.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aspe *Resource) State() (*awsShieldProactiveEngagementState, bool) {
	return aspe.state, aspe.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aspe *Resource) StateMust() *awsShieldProactiveEngagementState {
	if aspe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aspe.Type(), aspe.LocalName()))
	}
	return aspe.state
}

// Args contains the configurations for aws_shield_proactive_engagement.
type Args struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// EmergencyContact: min=0
	EmergencyContact []EmergencyContact `hcl:"emergency_contact,block" validate:"min=0"`
}

type awsShieldProactiveEngagementAttributes struct {
	ref terra.Reference
}

// Enabled returns a reference to field enabled of aws_shield_proactive_engagement.
func (aspe awsShieldProactiveEngagementAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aspe.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_shield_proactive_engagement.
func (aspe awsShieldProactiveEngagementAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aspe.ref.Append("id"))
}

func (aspe awsShieldProactiveEngagementAttributes) EmergencyContact() terra.ListValue[EmergencyContactAttributes] {
	return terra.ReferenceAsList[EmergencyContactAttributes](aspe.ref.Append("emergency_contact"))
}

type awsShieldProactiveEngagementState struct {
	Enabled          bool                    `json:"enabled"`
	Id               string                  `json:"id"`
	EmergencyContact []EmergencyContactState `json:"emergency_contact"`
}
