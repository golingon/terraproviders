// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_timestreamwrite_database

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_timestreamwrite_database.
type Resource struct {
	Name      string
	Args      Args
	state     *awsTimestreamwriteDatabaseState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (atd *Resource) Type() string {
	return "aws_timestreamwrite_database"
}

// LocalName returns the local name for [Resource].
func (atd *Resource) LocalName() string {
	return atd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (atd *Resource) Configuration() interface{} {
	return atd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (atd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(atd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (atd *Resource) Dependencies() terra.Dependencies {
	return atd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (atd *Resource) LifecycleManagement() *terra.Lifecycle {
	return atd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (atd *Resource) Attributes() awsTimestreamwriteDatabaseAttributes {
	return awsTimestreamwriteDatabaseAttributes{ref: terra.ReferenceResource(atd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (atd *Resource) ImportState(state io.Reader) error {
	atd.state = &awsTimestreamwriteDatabaseState{}
	if err := json.NewDecoder(state).Decode(atd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", atd.Type(), atd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (atd *Resource) State() (*awsTimestreamwriteDatabaseState, bool) {
	return atd.state, atd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (atd *Resource) StateMust() *awsTimestreamwriteDatabaseState {
	if atd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", atd.Type(), atd.LocalName()))
	}
	return atd.state
}

// Args contains the configurations for aws_timestreamwrite_database.
type Args struct {
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsTimestreamwriteDatabaseAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_timestreamwrite_database.
func (atd awsTimestreamwriteDatabaseAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(atd.ref.Append("arn"))
}

// DatabaseName returns a reference to field database_name of aws_timestreamwrite_database.
func (atd awsTimestreamwriteDatabaseAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(atd.ref.Append("database_name"))
}

// Id returns a reference to field id of aws_timestreamwrite_database.
func (atd awsTimestreamwriteDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(atd.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_timestreamwrite_database.
func (atd awsTimestreamwriteDatabaseAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(atd.ref.Append("kms_key_id"))
}

// TableCount returns a reference to field table_count of aws_timestreamwrite_database.
func (atd awsTimestreamwriteDatabaseAttributes) TableCount() terra.NumberValue {
	return terra.ReferenceAsNumber(atd.ref.Append("table_count"))
}

// Tags returns a reference to field tags of aws_timestreamwrite_database.
func (atd awsTimestreamwriteDatabaseAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](atd.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_timestreamwrite_database.
func (atd awsTimestreamwriteDatabaseAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](atd.ref.Append("tags_all"))
}

type awsTimestreamwriteDatabaseState struct {
	Arn          string            `json:"arn"`
	DatabaseName string            `json:"database_name"`
	Id           string            `json:"id"`
	KmsKeyId     string            `json:"kms_key_id"`
	TableCount   float64           `json:"table_count"`
	Tags         map[string]string `json:"tags"`
	TagsAll      map[string]string `json:"tags_all"`
}
