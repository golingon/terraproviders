// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_grafana_workspace

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_grafana_workspace.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGrafanaWorkspaceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agw *Resource) Type() string {
	return "aws_grafana_workspace"
}

// LocalName returns the local name for [Resource].
func (agw *Resource) LocalName() string {
	return agw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agw *Resource) Configuration() interface{} {
	return agw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agw *Resource) Dependencies() terra.Dependencies {
	return agw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agw *Resource) LifecycleManagement() *terra.Lifecycle {
	return agw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agw *Resource) Attributes() awsGrafanaWorkspaceAttributes {
	return awsGrafanaWorkspaceAttributes{ref: terra.ReferenceResource(agw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agw *Resource) ImportState(state io.Reader) error {
	agw.state = &awsGrafanaWorkspaceState{}
	if err := json.NewDecoder(state).Decode(agw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agw.Type(), agw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agw *Resource) State() (*awsGrafanaWorkspaceState, bool) {
	return agw.state, agw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agw *Resource) StateMust() *awsGrafanaWorkspaceState {
	if agw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agw.Type(), agw.LocalName()))
	}
	return agw.state
}

// Args contains the configurations for aws_grafana_workspace.
type Args struct {
	// AccountAccessType: string, required
	AccountAccessType terra.StringValue `hcl:"account_access_type,attr" validate:"required"`
	// AuthenticationProviders: list of string, required
	AuthenticationProviders terra.ListValue[terra.StringValue] `hcl:"authentication_providers,attr" validate:"required"`
	// Configuration: string, optional
	Configuration terra.StringValue `hcl:"configuration,attr"`
	// DataSources: list of string, optional
	DataSources terra.ListValue[terra.StringValue] `hcl:"data_sources,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GrafanaVersion: string, optional
	GrafanaVersion terra.StringValue `hcl:"grafana_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NotificationDestinations: list of string, optional
	NotificationDestinations terra.ListValue[terra.StringValue] `hcl:"notification_destinations,attr"`
	// OrganizationRoleName: string, optional
	OrganizationRoleName terra.StringValue `hcl:"organization_role_name,attr"`
	// OrganizationalUnits: list of string, optional
	OrganizationalUnits terra.ListValue[terra.StringValue] `hcl:"organizational_units,attr"`
	// PermissionType: string, required
	PermissionType terra.StringValue `hcl:"permission_type,attr" validate:"required"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// StackSetName: string, optional
	StackSetName terra.StringValue `hcl:"stack_set_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// NetworkAccessControl: optional
	NetworkAccessControl *NetworkAccessControl `hcl:"network_access_control,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcConfiguration: optional
	VpcConfiguration *VpcConfiguration `hcl:"vpc_configuration,block"`
}

type awsGrafanaWorkspaceAttributes struct {
	ref terra.Reference
}

// AccountAccessType returns a reference to field account_access_type of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) AccountAccessType() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("account_access_type"))
}

// Arn returns a reference to field arn of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("arn"))
}

// AuthenticationProviders returns a reference to field authentication_providers of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) AuthenticationProviders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](agw.ref.Append("authentication_providers"))
}

// Configuration returns a reference to field configuration of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) Configuration() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("configuration"))
}

// DataSources returns a reference to field data_sources of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) DataSources() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](agw.ref.Append("data_sources"))
}

// Description returns a reference to field description of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("description"))
}

// Endpoint returns a reference to field endpoint of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("endpoint"))
}

// GrafanaVersion returns a reference to field grafana_version of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) GrafanaVersion() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("grafana_version"))
}

// Id returns a reference to field id of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("id"))
}

// Name returns a reference to field name of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("name"))
}

// NotificationDestinations returns a reference to field notification_destinations of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) NotificationDestinations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](agw.ref.Append("notification_destinations"))
}

// OrganizationRoleName returns a reference to field organization_role_name of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) OrganizationRoleName() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("organization_role_name"))
}

// OrganizationalUnits returns a reference to field organizational_units of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) OrganizationalUnits() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](agw.ref.Append("organizational_units"))
}

// PermissionType returns a reference to field permission_type of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) PermissionType() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("permission_type"))
}

// RoleArn returns a reference to field role_arn of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("role_arn"))
}

// SamlConfigurationStatus returns a reference to field saml_configuration_status of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) SamlConfigurationStatus() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("saml_configuration_status"))
}

// StackSetName returns a reference to field stack_set_name of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) StackSetName() terra.StringValue {
	return terra.ReferenceAsString(agw.ref.Append("stack_set_name"))
}

// Tags returns a reference to field tags of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agw.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_grafana_workspace.
func (agw awsGrafanaWorkspaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agw.ref.Append("tags_all"))
}

func (agw awsGrafanaWorkspaceAttributes) NetworkAccessControl() terra.ListValue[NetworkAccessControlAttributes] {
	return terra.ReferenceAsList[NetworkAccessControlAttributes](agw.ref.Append("network_access_control"))
}

func (agw awsGrafanaWorkspaceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](agw.ref.Append("timeouts"))
}

func (agw awsGrafanaWorkspaceAttributes) VpcConfiguration() terra.ListValue[VpcConfigurationAttributes] {
	return terra.ReferenceAsList[VpcConfigurationAttributes](agw.ref.Append("vpc_configuration"))
}

type awsGrafanaWorkspaceState struct {
	AccountAccessType        string                      `json:"account_access_type"`
	Arn                      string                      `json:"arn"`
	AuthenticationProviders  []string                    `json:"authentication_providers"`
	Configuration            string                      `json:"configuration"`
	DataSources              []string                    `json:"data_sources"`
	Description              string                      `json:"description"`
	Endpoint                 string                      `json:"endpoint"`
	GrafanaVersion           string                      `json:"grafana_version"`
	Id                       string                      `json:"id"`
	Name                     string                      `json:"name"`
	NotificationDestinations []string                    `json:"notification_destinations"`
	OrganizationRoleName     string                      `json:"organization_role_name"`
	OrganizationalUnits      []string                    `json:"organizational_units"`
	PermissionType           string                      `json:"permission_type"`
	RoleArn                  string                      `json:"role_arn"`
	SamlConfigurationStatus  string                      `json:"saml_configuration_status"`
	StackSetName             string                      `json:"stack_set_name"`
	Tags                     map[string]string           `json:"tags"`
	TagsAll                  map[string]string           `json:"tags_all"`
	NetworkAccessControl     []NetworkAccessControlState `json:"network_access_control"`
	Timeouts                 *TimeoutsState              `json:"timeouts"`
	VpcConfiguration         []VpcConfigurationState     `json:"vpc_configuration"`
}
