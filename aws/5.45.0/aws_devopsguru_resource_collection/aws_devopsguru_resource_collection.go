// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_devopsguru_resource_collection

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_devopsguru_resource_collection.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDevopsguruResourceCollectionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adrc *Resource) Type() string {
	return "aws_devopsguru_resource_collection"
}

// LocalName returns the local name for [Resource].
func (adrc *Resource) LocalName() string {
	return adrc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adrc *Resource) Configuration() interface{} {
	return adrc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adrc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adrc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adrc *Resource) Dependencies() terra.Dependencies {
	return adrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adrc *Resource) LifecycleManagement() *terra.Lifecycle {
	return adrc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adrc *Resource) Attributes() awsDevopsguruResourceCollectionAttributes {
	return awsDevopsguruResourceCollectionAttributes{ref: terra.ReferenceResource(adrc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adrc *Resource) ImportState(state io.Reader) error {
	adrc.state = &awsDevopsguruResourceCollectionState{}
	if err := json.NewDecoder(state).Decode(adrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adrc.Type(), adrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adrc *Resource) State() (*awsDevopsguruResourceCollectionState, bool) {
	return adrc.state, adrc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adrc *Resource) StateMust() *awsDevopsguruResourceCollectionState {
	if adrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adrc.Type(), adrc.LocalName()))
	}
	return adrc.state
}

// Args contains the configurations for aws_devopsguru_resource_collection.
type Args struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Cloudformation: min=0
	Cloudformation []Cloudformation `hcl:"cloudformation,block" validate:"min=0"`
	// Tags: min=0
	Tags []Tags `hcl:"tags,block" validate:"min=0"`
}

type awsDevopsguruResourceCollectionAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_devopsguru_resource_collection.
func (adrc awsDevopsguruResourceCollectionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adrc.ref.Append("id"))
}

// Type returns a reference to field type of aws_devopsguru_resource_collection.
func (adrc awsDevopsguruResourceCollectionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(adrc.ref.Append("type"))
}

func (adrc awsDevopsguruResourceCollectionAttributes) Cloudformation() terra.ListValue[CloudformationAttributes] {
	return terra.ReferenceAsList[CloudformationAttributes](adrc.ref.Append("cloudformation"))
}

func (adrc awsDevopsguruResourceCollectionAttributes) Tags() terra.ListValue[TagsAttributes] {
	return terra.ReferenceAsList[TagsAttributes](adrc.ref.Append("tags"))
}

type awsDevopsguruResourceCollectionState struct {
	Id             string                `json:"id"`
	Type           string                `json:"type"`
	Cloudformation []CloudformationState `json:"cloudformation"`
	Tags           []TagsState           `json:"tags"`
}
