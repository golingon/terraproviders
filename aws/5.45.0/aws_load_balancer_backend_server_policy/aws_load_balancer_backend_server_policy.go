// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_load_balancer_backend_server_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_load_balancer_backend_server_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLoadBalancerBackendServerPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (albbsp *Resource) Type() string {
	return "aws_load_balancer_backend_server_policy"
}

// LocalName returns the local name for [Resource].
func (albbsp *Resource) LocalName() string {
	return albbsp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (albbsp *Resource) Configuration() interface{} {
	return albbsp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (albbsp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(albbsp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (albbsp *Resource) Dependencies() terra.Dependencies {
	return albbsp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (albbsp *Resource) LifecycleManagement() *terra.Lifecycle {
	return albbsp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (albbsp *Resource) Attributes() awsLoadBalancerBackendServerPolicyAttributes {
	return awsLoadBalancerBackendServerPolicyAttributes{ref: terra.ReferenceResource(albbsp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (albbsp *Resource) ImportState(state io.Reader) error {
	albbsp.state = &awsLoadBalancerBackendServerPolicyState{}
	if err := json.NewDecoder(state).Decode(albbsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", albbsp.Type(), albbsp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (albbsp *Resource) State() (*awsLoadBalancerBackendServerPolicyState, bool) {
	return albbsp.state, albbsp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (albbsp *Resource) StateMust() *awsLoadBalancerBackendServerPolicyState {
	if albbsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", albbsp.Type(), albbsp.LocalName()))
	}
	return albbsp.state
}

// Args contains the configurations for aws_load_balancer_backend_server_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstancePort: number, required
	InstancePort terra.NumberValue `hcl:"instance_port,attr" validate:"required"`
	// LoadBalancerName: string, required
	LoadBalancerName terra.StringValue `hcl:"load_balancer_name,attr" validate:"required"`
	// PolicyNames: set of string, optional
	PolicyNames terra.SetValue[terra.StringValue] `hcl:"policy_names,attr"`
}

type awsLoadBalancerBackendServerPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_load_balancer_backend_server_policy.
func (albbsp awsLoadBalancerBackendServerPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(albbsp.ref.Append("id"))
}

// InstancePort returns a reference to field instance_port of aws_load_balancer_backend_server_policy.
func (albbsp awsLoadBalancerBackendServerPolicyAttributes) InstancePort() terra.NumberValue {
	return terra.ReferenceAsNumber(albbsp.ref.Append("instance_port"))
}

// LoadBalancerName returns a reference to field load_balancer_name of aws_load_balancer_backend_server_policy.
func (albbsp awsLoadBalancerBackendServerPolicyAttributes) LoadBalancerName() terra.StringValue {
	return terra.ReferenceAsString(albbsp.ref.Append("load_balancer_name"))
}

// PolicyNames returns a reference to field policy_names of aws_load_balancer_backend_server_policy.
func (albbsp awsLoadBalancerBackendServerPolicyAttributes) PolicyNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](albbsp.ref.Append("policy_names"))
}

type awsLoadBalancerBackendServerPolicyState struct {
	Id               string   `json:"id"`
	InstancePort     float64  `json:"instance_port"`
	LoadBalancerName string   `json:"load_balancer_name"`
	PolicyNames      []string `json:"policy_names"`
}
