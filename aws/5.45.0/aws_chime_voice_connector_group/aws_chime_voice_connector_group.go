// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_chime_voice_connector_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_chime_voice_connector_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsChimeVoiceConnectorGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acvcg *Resource) Type() string {
	return "aws_chime_voice_connector_group"
}

// LocalName returns the local name for [Resource].
func (acvcg *Resource) LocalName() string {
	return acvcg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acvcg *Resource) Configuration() interface{} {
	return acvcg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acvcg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acvcg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acvcg *Resource) Dependencies() terra.Dependencies {
	return acvcg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acvcg *Resource) LifecycleManagement() *terra.Lifecycle {
	return acvcg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acvcg *Resource) Attributes() awsChimeVoiceConnectorGroupAttributes {
	return awsChimeVoiceConnectorGroupAttributes{ref: terra.ReferenceResource(acvcg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acvcg *Resource) ImportState(state io.Reader) error {
	acvcg.state = &awsChimeVoiceConnectorGroupState{}
	if err := json.NewDecoder(state).Decode(acvcg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acvcg.Type(), acvcg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acvcg *Resource) State() (*awsChimeVoiceConnectorGroupState, bool) {
	return acvcg.state, acvcg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acvcg *Resource) StateMust() *awsChimeVoiceConnectorGroupState {
	if acvcg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acvcg.Type(), acvcg.LocalName()))
	}
	return acvcg.state
}

// Args contains the configurations for aws_chime_voice_connector_group.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Connector: min=0,max=3
	Connector []Connector `hcl:"connector,block" validate:"min=0,max=3"`
}

type awsChimeVoiceConnectorGroupAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_chime_voice_connector_group.
func (acvcg awsChimeVoiceConnectorGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acvcg.ref.Append("id"))
}

// Name returns a reference to field name of aws_chime_voice_connector_group.
func (acvcg awsChimeVoiceConnectorGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acvcg.ref.Append("name"))
}

func (acvcg awsChimeVoiceConnectorGroupAttributes) Connector() terra.SetValue[ConnectorAttributes] {
	return terra.ReferenceAsSet[ConnectorAttributes](acvcg.ref.Append("connector"))
}

type awsChimeVoiceConnectorGroupState struct {
	Id        string           `json:"id"`
	Name      string           `json:"name"`
	Connector []ConnectorState `json:"connector"`
}
