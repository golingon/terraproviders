// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_default_route_table

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_default_route_table.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDefaultRouteTableState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adrt *Resource) Type() string {
	return "aws_default_route_table"
}

// LocalName returns the local name for [Resource].
func (adrt *Resource) LocalName() string {
	return adrt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adrt *Resource) Configuration() interface{} {
	return adrt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adrt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adrt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adrt *Resource) Dependencies() terra.Dependencies {
	return adrt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adrt *Resource) LifecycleManagement() *terra.Lifecycle {
	return adrt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adrt *Resource) Attributes() awsDefaultRouteTableAttributes {
	return awsDefaultRouteTableAttributes{ref: terra.ReferenceResource(adrt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adrt *Resource) ImportState(state io.Reader) error {
	adrt.state = &awsDefaultRouteTableState{}
	if err := json.NewDecoder(state).Decode(adrt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adrt.Type(), adrt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adrt *Resource) State() (*awsDefaultRouteTableState, bool) {
	return adrt.state, adrt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adrt *Resource) StateMust() *awsDefaultRouteTableState {
	if adrt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adrt.Type(), adrt.LocalName()))
	}
	return adrt.state
}

// Args contains the configurations for aws_default_route_table.
type Args struct {
	// DefaultRouteTableId: string, required
	DefaultRouteTableId terra.StringValue `hcl:"default_route_table_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PropagatingVgws: set of string, optional
	PropagatingVgws terra.SetValue[terra.StringValue] `hcl:"propagating_vgws,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Route: min=0
	Route []Route `hcl:"route,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDefaultRouteTableAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_default_route_table.
func (adrt awsDefaultRouteTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adrt.ref.Append("arn"))
}

// DefaultRouteTableId returns a reference to field default_route_table_id of aws_default_route_table.
func (adrt awsDefaultRouteTableAttributes) DefaultRouteTableId() terra.StringValue {
	return terra.ReferenceAsString(adrt.ref.Append("default_route_table_id"))
}

// Id returns a reference to field id of aws_default_route_table.
func (adrt awsDefaultRouteTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adrt.ref.Append("id"))
}

// OwnerId returns a reference to field owner_id of aws_default_route_table.
func (adrt awsDefaultRouteTableAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(adrt.ref.Append("owner_id"))
}

// PropagatingVgws returns a reference to field propagating_vgws of aws_default_route_table.
func (adrt awsDefaultRouteTableAttributes) PropagatingVgws() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adrt.ref.Append("propagating_vgws"))
}

// Tags returns a reference to field tags of aws_default_route_table.
func (adrt awsDefaultRouteTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adrt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_default_route_table.
func (adrt awsDefaultRouteTableAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adrt.ref.Append("tags_all"))
}

// VpcId returns a reference to field vpc_id of aws_default_route_table.
func (adrt awsDefaultRouteTableAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(adrt.ref.Append("vpc_id"))
}

func (adrt awsDefaultRouteTableAttributes) Route() terra.SetValue[RouteAttributes] {
	return terra.ReferenceAsSet[RouteAttributes](adrt.ref.Append("route"))
}

func (adrt awsDefaultRouteTableAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](adrt.ref.Append("timeouts"))
}

type awsDefaultRouteTableState struct {
	Arn                 string            `json:"arn"`
	DefaultRouteTableId string            `json:"default_route_table_id"`
	Id                  string            `json:"id"`
	OwnerId             string            `json:"owner_id"`
	PropagatingVgws     []string          `json:"propagating_vgws"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
	VpcId               string            `json:"vpc_id"`
	Route               []RouteState      `json:"route"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
