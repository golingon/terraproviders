// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudformation_stack_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudformation_stack_set.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudformationStackSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acss *Resource) Type() string {
	return "aws_cloudformation_stack_set"
}

// LocalName returns the local name for [Resource].
func (acss *Resource) LocalName() string {
	return acss.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acss *Resource) Configuration() interface{} {
	return acss.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acss *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acss)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acss *Resource) Dependencies() terra.Dependencies {
	return acss.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acss *Resource) LifecycleManagement() *terra.Lifecycle {
	return acss.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acss *Resource) Attributes() awsCloudformationStackSetAttributes {
	return awsCloudformationStackSetAttributes{ref: terra.ReferenceResource(acss)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acss *Resource) ImportState(state io.Reader) error {
	acss.state = &awsCloudformationStackSetState{}
	if err := json.NewDecoder(state).Decode(acss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acss.Type(), acss.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acss *Resource) State() (*awsCloudformationStackSetState, bool) {
	return acss.state, acss.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acss *Resource) StateMust() *awsCloudformationStackSetState {
	if acss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acss.Type(), acss.LocalName()))
	}
	return acss.state
}

// Args contains the configurations for aws_cloudformation_stack_set.
type Args struct {
	// AdministrationRoleArn: string, optional
	AdministrationRoleArn terra.StringValue `hcl:"administration_role_arn,attr"`
	// CallAs: string, optional
	CallAs terra.StringValue `hcl:"call_as,attr"`
	// Capabilities: set of string, optional
	Capabilities terra.SetValue[terra.StringValue] `hcl:"capabilities,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExecutionRoleName: string, optional
	ExecutionRoleName terra.StringValue `hcl:"execution_role_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// PermissionModel: string, optional
	PermissionModel terra.StringValue `hcl:"permission_model,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TemplateBody: string, optional
	TemplateBody terra.StringValue `hcl:"template_body,attr"`
	// TemplateUrl: string, optional
	TemplateUrl terra.StringValue `hcl:"template_url,attr"`
	// AutoDeployment: optional
	AutoDeployment *AutoDeployment `hcl:"auto_deployment,block"`
	// ManagedExecution: optional
	ManagedExecution *ManagedExecution `hcl:"managed_execution,block"`
	// OperationPreferences: optional
	OperationPreferences *OperationPreferences `hcl:"operation_preferences,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsCloudformationStackSetAttributes struct {
	ref terra.Reference
}

// AdministrationRoleArn returns a reference to field administration_role_arn of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) AdministrationRoleArn() terra.StringValue {
	return terra.ReferenceAsString(acss.ref.Append("administration_role_arn"))
}

// Arn returns a reference to field arn of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acss.ref.Append("arn"))
}

// CallAs returns a reference to field call_as of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) CallAs() terra.StringValue {
	return terra.ReferenceAsString(acss.ref.Append("call_as"))
}

// Capabilities returns a reference to field capabilities of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) Capabilities() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acss.ref.Append("capabilities"))
}

// Description returns a reference to field description of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acss.ref.Append("description"))
}

// ExecutionRoleName returns a reference to field execution_role_name of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) ExecutionRoleName() terra.StringValue {
	return terra.ReferenceAsString(acss.ref.Append("execution_role_name"))
}

// Id returns a reference to field id of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acss.ref.Append("id"))
}

// Name returns a reference to field name of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acss.ref.Append("name"))
}

// Parameters returns a reference to field parameters of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acss.ref.Append("parameters"))
}

// PermissionModel returns a reference to field permission_model of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) PermissionModel() terra.StringValue {
	return terra.ReferenceAsString(acss.ref.Append("permission_model"))
}

// StackSetId returns a reference to field stack_set_id of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) StackSetId() terra.StringValue {
	return terra.ReferenceAsString(acss.ref.Append("stack_set_id"))
}

// Tags returns a reference to field tags of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acss.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acss.ref.Append("tags_all"))
}

// TemplateBody returns a reference to field template_body of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) TemplateBody() terra.StringValue {
	return terra.ReferenceAsString(acss.ref.Append("template_body"))
}

// TemplateUrl returns a reference to field template_url of aws_cloudformation_stack_set.
func (acss awsCloudformationStackSetAttributes) TemplateUrl() terra.StringValue {
	return terra.ReferenceAsString(acss.ref.Append("template_url"))
}

func (acss awsCloudformationStackSetAttributes) AutoDeployment() terra.ListValue[AutoDeploymentAttributes] {
	return terra.ReferenceAsList[AutoDeploymentAttributes](acss.ref.Append("auto_deployment"))
}

func (acss awsCloudformationStackSetAttributes) ManagedExecution() terra.ListValue[ManagedExecutionAttributes] {
	return terra.ReferenceAsList[ManagedExecutionAttributes](acss.ref.Append("managed_execution"))
}

func (acss awsCloudformationStackSetAttributes) OperationPreferences() terra.ListValue[OperationPreferencesAttributes] {
	return terra.ReferenceAsList[OperationPreferencesAttributes](acss.ref.Append("operation_preferences"))
}

func (acss awsCloudformationStackSetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acss.ref.Append("timeouts"))
}

type awsCloudformationStackSetState struct {
	AdministrationRoleArn string                      `json:"administration_role_arn"`
	Arn                   string                      `json:"arn"`
	CallAs                string                      `json:"call_as"`
	Capabilities          []string                    `json:"capabilities"`
	Description           string                      `json:"description"`
	ExecutionRoleName     string                      `json:"execution_role_name"`
	Id                    string                      `json:"id"`
	Name                  string                      `json:"name"`
	Parameters            map[string]string           `json:"parameters"`
	PermissionModel       string                      `json:"permission_model"`
	StackSetId            string                      `json:"stack_set_id"`
	Tags                  map[string]string           `json:"tags"`
	TagsAll               map[string]string           `json:"tags_all"`
	TemplateBody          string                      `json:"template_body"`
	TemplateUrl           string                      `json:"template_url"`
	AutoDeployment        []AutoDeploymentState       `json:"auto_deployment"`
	ManagedExecution      []ManagedExecutionState     `json:"managed_execution"`
	OperationPreferences  []OperationPreferencesState `json:"operation_preferences"`
	Timeouts              *TimeoutsState              `json:"timeouts"`
}
