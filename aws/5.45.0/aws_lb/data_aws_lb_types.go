// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lb

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataAccessLogsAttributes struct {
	ref terra.Reference
}

func (al DataAccessLogsAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al DataAccessLogsAttributes) InternalWithRef(ref terra.Reference) DataAccessLogsAttributes {
	return DataAccessLogsAttributes{ref: ref}
}

func (al DataAccessLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al DataAccessLogsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("bucket"))
}

func (al DataAccessLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(al.ref.Append("enabled"))
}

func (al DataAccessLogsAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("prefix"))
}

type DataConnectionLogsAttributes struct {
	ref terra.Reference
}

func (cl DataConnectionLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl DataConnectionLogsAttributes) InternalWithRef(ref terra.Reference) DataConnectionLogsAttributes {
	return DataConnectionLogsAttributes{ref: ref}
}

func (cl DataConnectionLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl DataConnectionLogsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("bucket"))
}

func (cl DataConnectionLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cl.ref.Append("enabled"))
}

func (cl DataConnectionLogsAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("prefix"))
}

type DataSubnetMappingAttributes struct {
	ref terra.Reference
}

func (sm DataSubnetMappingAttributes) InternalRef() (terra.Reference, error) {
	return sm.ref, nil
}

func (sm DataSubnetMappingAttributes) InternalWithRef(ref terra.Reference) DataSubnetMappingAttributes {
	return DataSubnetMappingAttributes{ref: ref}
}

func (sm DataSubnetMappingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sm.ref.InternalTokens()
}

func (sm DataSubnetMappingAttributes) AllocationId() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("allocation_id"))
}

func (sm DataSubnetMappingAttributes) Ipv6Address() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("ipv6_address"))
}

func (sm DataSubnetMappingAttributes) OutpostId() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("outpost_id"))
}

func (sm DataSubnetMappingAttributes) PrivateIpv4Address() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("private_ipv4_address"))
}

func (sm DataSubnetMappingAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("subnet_id"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataAccessLogsState struct {
	Bucket  string `json:"bucket"`
	Enabled bool   `json:"enabled"`
	Prefix  string `json:"prefix"`
}

type DataConnectionLogsState struct {
	Bucket  string `json:"bucket"`
	Enabled bool   `json:"enabled"`
	Prefix  string `json:"prefix"`
}

type DataSubnetMappingState struct {
	AllocationId       string `json:"allocation_id"`
	Ipv6Address        string `json:"ipv6_address"`
	OutpostId          string `json:"outpost_id"`
	PrivateIpv4Address string `json:"private_ipv4_address"`
	SubnetId           string `json:"subnet_id"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
