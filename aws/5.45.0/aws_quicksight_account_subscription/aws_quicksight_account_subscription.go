// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_account_subscription

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_quicksight_account_subscription.
type Resource struct {
	Name      string
	Args      Args
	state     *awsQuicksightAccountSubscriptionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aqas *Resource) Type() string {
	return "aws_quicksight_account_subscription"
}

// LocalName returns the local name for [Resource].
func (aqas *Resource) LocalName() string {
	return aqas.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aqas *Resource) Configuration() interface{} {
	return aqas.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aqas *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aqas)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aqas *Resource) Dependencies() terra.Dependencies {
	return aqas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aqas *Resource) LifecycleManagement() *terra.Lifecycle {
	return aqas.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aqas *Resource) Attributes() awsQuicksightAccountSubscriptionAttributes {
	return awsQuicksightAccountSubscriptionAttributes{ref: terra.ReferenceResource(aqas)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aqas *Resource) ImportState(state io.Reader) error {
	aqas.state = &awsQuicksightAccountSubscriptionState{}
	if err := json.NewDecoder(state).Decode(aqas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aqas.Type(), aqas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aqas *Resource) State() (*awsQuicksightAccountSubscriptionState, bool) {
	return aqas.state, aqas.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aqas *Resource) StateMust() *awsQuicksightAccountSubscriptionState {
	if aqas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aqas.Type(), aqas.LocalName()))
	}
	return aqas.state
}

// Args contains the configurations for aws_quicksight_account_subscription.
type Args struct {
	// AccountName: string, required
	AccountName terra.StringValue `hcl:"account_name,attr" validate:"required"`
	// ActiveDirectoryName: string, optional
	ActiveDirectoryName terra.StringValue `hcl:"active_directory_name,attr"`
	// AdminGroup: list of string, optional
	AdminGroup terra.ListValue[terra.StringValue] `hcl:"admin_group,attr"`
	// AuthenticationMethod: string, required
	AuthenticationMethod terra.StringValue `hcl:"authentication_method,attr" validate:"required"`
	// AuthorGroup: list of string, optional
	AuthorGroup terra.ListValue[terra.StringValue] `hcl:"author_group,attr"`
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// ContactNumber: string, optional
	ContactNumber terra.StringValue `hcl:"contact_number,attr"`
	// DirectoryId: string, optional
	DirectoryId terra.StringValue `hcl:"directory_id,attr"`
	// Edition: string, required
	Edition terra.StringValue `hcl:"edition,attr" validate:"required"`
	// EmailAddress: string, optional
	EmailAddress terra.StringValue `hcl:"email_address,attr"`
	// FirstName: string, optional
	FirstName terra.StringValue `hcl:"first_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LastName: string, optional
	LastName terra.StringValue `hcl:"last_name,attr"`
	// NotificationEmail: string, required
	NotificationEmail terra.StringValue `hcl:"notification_email,attr" validate:"required"`
	// ReaderGroup: list of string, optional
	ReaderGroup terra.ListValue[terra.StringValue] `hcl:"reader_group,attr"`
	// Realm: string, optional
	Realm terra.StringValue `hcl:"realm,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsQuicksightAccountSubscriptionAttributes struct {
	ref terra.Reference
}

// AccountName returns a reference to field account_name of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) AccountName() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("account_name"))
}

// AccountSubscriptionStatus returns a reference to field account_subscription_status of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) AccountSubscriptionStatus() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("account_subscription_status"))
}

// ActiveDirectoryName returns a reference to field active_directory_name of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) ActiveDirectoryName() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("active_directory_name"))
}

// AdminGroup returns a reference to field admin_group of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) AdminGroup() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aqas.ref.Append("admin_group"))
}

// AuthenticationMethod returns a reference to field authentication_method of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) AuthenticationMethod() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("authentication_method"))
}

// AuthorGroup returns a reference to field author_group of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) AuthorGroup() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aqas.ref.Append("author_group"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("aws_account_id"))
}

// ContactNumber returns a reference to field contact_number of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) ContactNumber() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("contact_number"))
}

// DirectoryId returns a reference to field directory_id of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) DirectoryId() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("directory_id"))
}

// Edition returns a reference to field edition of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) Edition() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("edition"))
}

// EmailAddress returns a reference to field email_address of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) EmailAddress() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("email_address"))
}

// FirstName returns a reference to field first_name of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) FirstName() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("first_name"))
}

// Id returns a reference to field id of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("id"))
}

// LastName returns a reference to field last_name of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) LastName() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("last_name"))
}

// NotificationEmail returns a reference to field notification_email of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) NotificationEmail() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("notification_email"))
}

// ReaderGroup returns a reference to field reader_group of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) ReaderGroup() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aqas.ref.Append("reader_group"))
}

// Realm returns a reference to field realm of aws_quicksight_account_subscription.
func (aqas awsQuicksightAccountSubscriptionAttributes) Realm() terra.StringValue {
	return terra.ReferenceAsString(aqas.ref.Append("realm"))
}

func (aqas awsQuicksightAccountSubscriptionAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aqas.ref.Append("timeouts"))
}

type awsQuicksightAccountSubscriptionState struct {
	AccountName               string         `json:"account_name"`
	AccountSubscriptionStatus string         `json:"account_subscription_status"`
	ActiveDirectoryName       string         `json:"active_directory_name"`
	AdminGroup                []string       `json:"admin_group"`
	AuthenticationMethod      string         `json:"authentication_method"`
	AuthorGroup               []string       `json:"author_group"`
	AwsAccountId              string         `json:"aws_account_id"`
	ContactNumber             string         `json:"contact_number"`
	DirectoryId               string         `json:"directory_id"`
	Edition                   string         `json:"edition"`
	EmailAddress              string         `json:"email_address"`
	FirstName                 string         `json:"first_name"`
	Id                        string         `json:"id"`
	LastName                  string         `json:"last_name"`
	NotificationEmail         string         `json:"notification_email"`
	ReaderGroup               []string       `json:"reader_group"`
	Realm                     string         `json:"realm"`
	Timeouts                  *TimeoutsState `json:"timeouts"`
}
