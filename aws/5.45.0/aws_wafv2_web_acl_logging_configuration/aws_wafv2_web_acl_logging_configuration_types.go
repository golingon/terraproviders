// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_wafv2_web_acl_logging_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type LoggingFilter struct {
	// DefaultBehavior: string, required
	DefaultBehavior terra.StringValue `hcl:"default_behavior,attr" validate:"required"`
	// LoggingFilterFilter: min=1
	Filter []LoggingFilterFilter `hcl:"filter,block" validate:"min=1"`
}

type LoggingFilterFilter struct {
	// Behavior: string, required
	Behavior terra.StringValue `hcl:"behavior,attr" validate:"required"`
	// Requirement: string, required
	Requirement terra.StringValue `hcl:"requirement,attr" validate:"required"`
	// LoggingFilterFilterCondition: min=1
	Condition []LoggingFilterFilterCondition `hcl:"condition,block" validate:"min=1"`
}

type LoggingFilterFilterCondition struct {
	// LoggingFilterFilterConditionActionCondition: optional
	ActionCondition *LoggingFilterFilterConditionActionCondition `hcl:"action_condition,block"`
	// LoggingFilterFilterConditionLabelNameCondition: optional
	LabelNameCondition *LoggingFilterFilterConditionLabelNameCondition `hcl:"label_name_condition,block"`
}

type LoggingFilterFilterConditionActionCondition struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
}

type LoggingFilterFilterConditionLabelNameCondition struct {
	// LabelName: string, required
	LabelName terra.StringValue `hcl:"label_name,attr" validate:"required"`
}

type RedactedFields struct {
	// RedactedFieldsMethod: optional
	Method *RedactedFieldsMethod `hcl:"method,block"`
	// RedactedFieldsQueryString: optional
	QueryString *RedactedFieldsQueryString `hcl:"query_string,block"`
	// RedactedFieldsSingleHeader: optional
	SingleHeader *RedactedFieldsSingleHeader `hcl:"single_header,block"`
	// RedactedFieldsUriPath: optional
	UriPath *RedactedFieldsUriPath `hcl:"uri_path,block"`
}

type RedactedFieldsMethod struct{}

type RedactedFieldsQueryString struct{}

type RedactedFieldsSingleHeader struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type RedactedFieldsUriPath struct{}

type LoggingFilterAttributes struct {
	ref terra.Reference
}

func (lf LoggingFilterAttributes) InternalRef() (terra.Reference, error) {
	return lf.ref, nil
}

func (lf LoggingFilterAttributes) InternalWithRef(ref terra.Reference) LoggingFilterAttributes {
	return LoggingFilterAttributes{ref: ref}
}

func (lf LoggingFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lf.ref.InternalTokens()
}

func (lf LoggingFilterAttributes) DefaultBehavior() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("default_behavior"))
}

func (lf LoggingFilterAttributes) Filter() terra.SetValue[LoggingFilterFilterAttributes] {
	return terra.ReferenceAsSet[LoggingFilterFilterAttributes](lf.ref.Append("filter"))
}

type LoggingFilterFilterAttributes struct {
	ref terra.Reference
}

func (f LoggingFilterFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f LoggingFilterFilterAttributes) InternalWithRef(ref terra.Reference) LoggingFilterFilterAttributes {
	return LoggingFilterFilterAttributes{ref: ref}
}

func (f LoggingFilterFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f LoggingFilterFilterAttributes) Behavior() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("behavior"))
}

func (f LoggingFilterFilterAttributes) Requirement() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("requirement"))
}

func (f LoggingFilterFilterAttributes) Condition() terra.SetValue[LoggingFilterFilterConditionAttributes] {
	return terra.ReferenceAsSet[LoggingFilterFilterConditionAttributes](f.ref.Append("condition"))
}

type LoggingFilterFilterConditionAttributes struct {
	ref terra.Reference
}

func (c LoggingFilterFilterConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c LoggingFilterFilterConditionAttributes) InternalWithRef(ref terra.Reference) LoggingFilterFilterConditionAttributes {
	return LoggingFilterFilterConditionAttributes{ref: ref}
}

func (c LoggingFilterFilterConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c LoggingFilterFilterConditionAttributes) ActionCondition() terra.ListValue[LoggingFilterFilterConditionActionConditionAttributes] {
	return terra.ReferenceAsList[LoggingFilterFilterConditionActionConditionAttributes](c.ref.Append("action_condition"))
}

func (c LoggingFilterFilterConditionAttributes) LabelNameCondition() terra.ListValue[LoggingFilterFilterConditionLabelNameConditionAttributes] {
	return terra.ReferenceAsList[LoggingFilterFilterConditionLabelNameConditionAttributes](c.ref.Append("label_name_condition"))
}

type LoggingFilterFilterConditionActionConditionAttributes struct {
	ref terra.Reference
}

func (ac LoggingFilterFilterConditionActionConditionAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac LoggingFilterFilterConditionActionConditionAttributes) InternalWithRef(ref terra.Reference) LoggingFilterFilterConditionActionConditionAttributes {
	return LoggingFilterFilterConditionActionConditionAttributes{ref: ref}
}

func (ac LoggingFilterFilterConditionActionConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac LoggingFilterFilterConditionActionConditionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("action"))
}

type LoggingFilterFilterConditionLabelNameConditionAttributes struct {
	ref terra.Reference
}

func (lnc LoggingFilterFilterConditionLabelNameConditionAttributes) InternalRef() (terra.Reference, error) {
	return lnc.ref, nil
}

func (lnc LoggingFilterFilterConditionLabelNameConditionAttributes) InternalWithRef(ref terra.Reference) LoggingFilterFilterConditionLabelNameConditionAttributes {
	return LoggingFilterFilterConditionLabelNameConditionAttributes{ref: ref}
}

func (lnc LoggingFilterFilterConditionLabelNameConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnc.ref.InternalTokens()
}

func (lnc LoggingFilterFilterConditionLabelNameConditionAttributes) LabelName() terra.StringValue {
	return terra.ReferenceAsString(lnc.ref.Append("label_name"))
}

type RedactedFieldsAttributes struct {
	ref terra.Reference
}

func (rf RedactedFieldsAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf RedactedFieldsAttributes) InternalWithRef(ref terra.Reference) RedactedFieldsAttributes {
	return RedactedFieldsAttributes{ref: ref}
}

func (rf RedactedFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf RedactedFieldsAttributes) Method() terra.ListValue[RedactedFieldsMethodAttributes] {
	return terra.ReferenceAsList[RedactedFieldsMethodAttributes](rf.ref.Append("method"))
}

func (rf RedactedFieldsAttributes) QueryString() terra.ListValue[RedactedFieldsQueryStringAttributes] {
	return terra.ReferenceAsList[RedactedFieldsQueryStringAttributes](rf.ref.Append("query_string"))
}

func (rf RedactedFieldsAttributes) SingleHeader() terra.ListValue[RedactedFieldsSingleHeaderAttributes] {
	return terra.ReferenceAsList[RedactedFieldsSingleHeaderAttributes](rf.ref.Append("single_header"))
}

func (rf RedactedFieldsAttributes) UriPath() terra.ListValue[RedactedFieldsUriPathAttributes] {
	return terra.ReferenceAsList[RedactedFieldsUriPathAttributes](rf.ref.Append("uri_path"))
}

type RedactedFieldsMethodAttributes struct {
	ref terra.Reference
}

func (m RedactedFieldsMethodAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m RedactedFieldsMethodAttributes) InternalWithRef(ref terra.Reference) RedactedFieldsMethodAttributes {
	return RedactedFieldsMethodAttributes{ref: ref}
}

func (m RedactedFieldsMethodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

type RedactedFieldsQueryStringAttributes struct {
	ref terra.Reference
}

func (qs RedactedFieldsQueryStringAttributes) InternalRef() (terra.Reference, error) {
	return qs.ref, nil
}

func (qs RedactedFieldsQueryStringAttributes) InternalWithRef(ref terra.Reference) RedactedFieldsQueryStringAttributes {
	return RedactedFieldsQueryStringAttributes{ref: ref}
}

func (qs RedactedFieldsQueryStringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qs.ref.InternalTokens()
}

type RedactedFieldsSingleHeaderAttributes struct {
	ref terra.Reference
}

func (sh RedactedFieldsSingleHeaderAttributes) InternalRef() (terra.Reference, error) {
	return sh.ref, nil
}

func (sh RedactedFieldsSingleHeaderAttributes) InternalWithRef(ref terra.Reference) RedactedFieldsSingleHeaderAttributes {
	return RedactedFieldsSingleHeaderAttributes{ref: ref}
}

func (sh RedactedFieldsSingleHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sh.ref.InternalTokens()
}

func (sh RedactedFieldsSingleHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sh.ref.Append("name"))
}

type RedactedFieldsUriPathAttributes struct {
	ref terra.Reference
}

func (up RedactedFieldsUriPathAttributes) InternalRef() (terra.Reference, error) {
	return up.ref, nil
}

func (up RedactedFieldsUriPathAttributes) InternalWithRef(ref terra.Reference) RedactedFieldsUriPathAttributes {
	return RedactedFieldsUriPathAttributes{ref: ref}
}

func (up RedactedFieldsUriPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return up.ref.InternalTokens()
}

type LoggingFilterState struct {
	DefaultBehavior string                     `json:"default_behavior"`
	Filter          []LoggingFilterFilterState `json:"filter"`
}

type LoggingFilterFilterState struct {
	Behavior    string                              `json:"behavior"`
	Requirement string                              `json:"requirement"`
	Condition   []LoggingFilterFilterConditionState `json:"condition"`
}

type LoggingFilterFilterConditionState struct {
	ActionCondition    []LoggingFilterFilterConditionActionConditionState    `json:"action_condition"`
	LabelNameCondition []LoggingFilterFilterConditionLabelNameConditionState `json:"label_name_condition"`
}

type LoggingFilterFilterConditionActionConditionState struct {
	Action string `json:"action"`
}

type LoggingFilterFilterConditionLabelNameConditionState struct {
	LabelName string `json:"label_name"`
}

type RedactedFieldsState struct {
	Method       []RedactedFieldsMethodState       `json:"method"`
	QueryString  []RedactedFieldsQueryStringState  `json:"query_string"`
	SingleHeader []RedactedFieldsSingleHeaderState `json:"single_header"`
	UriPath      []RedactedFieldsUriPathState      `json:"uri_path"`
}

type RedactedFieldsMethodState struct{}

type RedactedFieldsQueryStringState struct{}

type RedactedFieldsSingleHeaderState struct {
	Name string `json:"name"`
}

type RedactedFieldsUriPathState struct{}
