// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_backup_region_settings

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_backup_region_settings.
type Resource struct {
	Name      string
	Args      Args
	state     *awsBackupRegionSettingsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (abrs *Resource) Type() string {
	return "aws_backup_region_settings"
}

// LocalName returns the local name for [Resource].
func (abrs *Resource) LocalName() string {
	return abrs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (abrs *Resource) Configuration() interface{} {
	return abrs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (abrs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(abrs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (abrs *Resource) Dependencies() terra.Dependencies {
	return abrs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (abrs *Resource) LifecycleManagement() *terra.Lifecycle {
	return abrs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (abrs *Resource) Attributes() awsBackupRegionSettingsAttributes {
	return awsBackupRegionSettingsAttributes{ref: terra.ReferenceResource(abrs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (abrs *Resource) ImportState(state io.Reader) error {
	abrs.state = &awsBackupRegionSettingsState{}
	if err := json.NewDecoder(state).Decode(abrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", abrs.Type(), abrs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (abrs *Resource) State() (*awsBackupRegionSettingsState, bool) {
	return abrs.state, abrs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (abrs *Resource) StateMust() *awsBackupRegionSettingsState {
	if abrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", abrs.Type(), abrs.LocalName()))
	}
	return abrs.state
}

// Args contains the configurations for aws_backup_region_settings.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceTypeManagementPreference: map of bool, optional
	ResourceTypeManagementPreference terra.MapValue[terra.BoolValue] `hcl:"resource_type_management_preference,attr"`
	// ResourceTypeOptInPreference: map of bool, required
	ResourceTypeOptInPreference terra.MapValue[terra.BoolValue] `hcl:"resource_type_opt_in_preference,attr" validate:"required"`
}

type awsBackupRegionSettingsAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_backup_region_settings.
func (abrs awsBackupRegionSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(abrs.ref.Append("id"))
}

// ResourceTypeManagementPreference returns a reference to field resource_type_management_preference of aws_backup_region_settings.
func (abrs awsBackupRegionSettingsAttributes) ResourceTypeManagementPreference() terra.MapValue[terra.BoolValue] {
	return terra.ReferenceAsMap[terra.BoolValue](abrs.ref.Append("resource_type_management_preference"))
}

// ResourceTypeOptInPreference returns a reference to field resource_type_opt_in_preference of aws_backup_region_settings.
func (abrs awsBackupRegionSettingsAttributes) ResourceTypeOptInPreference() terra.MapValue[terra.BoolValue] {
	return terra.ReferenceAsMap[terra.BoolValue](abrs.ref.Append("resource_type_opt_in_preference"))
}

type awsBackupRegionSettingsState struct {
	Id                               string          `json:"id"`
	ResourceTypeManagementPreference map[string]bool `json:"resource_type_management_preference"`
	ResourceTypeOptInPreference      map[string]bool `json:"resource_type_opt_in_preference"`
}
