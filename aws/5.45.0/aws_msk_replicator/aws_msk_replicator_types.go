// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_msk_replicator

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type KafkaCluster struct {
	// KafkaClusterAmazonMskCluster: required
	AmazonMskCluster *KafkaClusterAmazonMskCluster `hcl:"amazon_msk_cluster,block" validate:"required"`
	// KafkaClusterVpcConfig: required
	VpcConfig *KafkaClusterVpcConfig `hcl:"vpc_config,block" validate:"required"`
}

type KafkaClusterAmazonMskCluster struct {
	// MskClusterArn: string, required
	MskClusterArn terra.StringValue `hcl:"msk_cluster_arn,attr" validate:"required"`
}

type KafkaClusterVpcConfig struct {
	// SecurityGroupsIds: set of string, optional
	SecurityGroupsIds terra.SetValue[terra.StringValue] `hcl:"security_groups_ids,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type ReplicationInfoList struct {
	// SourceKafkaClusterArn: string, required
	SourceKafkaClusterArn terra.StringValue `hcl:"source_kafka_cluster_arn,attr" validate:"required"`
	// TargetCompressionType: string, required
	TargetCompressionType terra.StringValue `hcl:"target_compression_type,attr" validate:"required"`
	// TargetKafkaClusterArn: string, required
	TargetKafkaClusterArn terra.StringValue `hcl:"target_kafka_cluster_arn,attr" validate:"required"`
	// ReplicationInfoListConsumerGroupReplication: min=1
	ConsumerGroupReplication []ReplicationInfoListConsumerGroupReplication `hcl:"consumer_group_replication,block" validate:"min=1"`
	// ReplicationInfoListTopicReplication: min=1
	TopicReplication []ReplicationInfoListTopicReplication `hcl:"topic_replication,block" validate:"min=1"`
}

type ReplicationInfoListConsumerGroupReplication struct {
	// ConsumerGroupsToExclude: set of string, optional
	ConsumerGroupsToExclude terra.SetValue[terra.StringValue] `hcl:"consumer_groups_to_exclude,attr"`
	// ConsumerGroupsToReplicate: set of string, required
	ConsumerGroupsToReplicate terra.SetValue[terra.StringValue] `hcl:"consumer_groups_to_replicate,attr" validate:"required"`
	// DetectAndCopyNewConsumerGroups: bool, optional
	DetectAndCopyNewConsumerGroups terra.BoolValue `hcl:"detect_and_copy_new_consumer_groups,attr"`
	// SynchroniseConsumerGroupOffsets: bool, optional
	SynchroniseConsumerGroupOffsets terra.BoolValue `hcl:"synchronise_consumer_group_offsets,attr"`
}

type ReplicationInfoListTopicReplication struct {
	// CopyAccessControlListsForTopics: bool, optional
	CopyAccessControlListsForTopics terra.BoolValue `hcl:"copy_access_control_lists_for_topics,attr"`
	// CopyTopicConfigurations: bool, optional
	CopyTopicConfigurations terra.BoolValue `hcl:"copy_topic_configurations,attr"`
	// DetectAndCopyNewTopics: bool, optional
	DetectAndCopyNewTopics terra.BoolValue `hcl:"detect_and_copy_new_topics,attr"`
	// TopicsToExclude: set of string, optional
	TopicsToExclude terra.SetValue[terra.StringValue] `hcl:"topics_to_exclude,attr"`
	// TopicsToReplicate: set of string, required
	TopicsToReplicate terra.SetValue[terra.StringValue] `hcl:"topics_to_replicate,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type KafkaClusterAttributes struct {
	ref terra.Reference
}

func (kc KafkaClusterAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc KafkaClusterAttributes) InternalWithRef(ref terra.Reference) KafkaClusterAttributes {
	return KafkaClusterAttributes{ref: ref}
}

func (kc KafkaClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc KafkaClusterAttributes) AmazonMskCluster() terra.ListValue[KafkaClusterAmazonMskClusterAttributes] {
	return terra.ReferenceAsList[KafkaClusterAmazonMskClusterAttributes](kc.ref.Append("amazon_msk_cluster"))
}

func (kc KafkaClusterAttributes) VpcConfig() terra.ListValue[KafkaClusterVpcConfigAttributes] {
	return terra.ReferenceAsList[KafkaClusterVpcConfigAttributes](kc.ref.Append("vpc_config"))
}

type KafkaClusterAmazonMskClusterAttributes struct {
	ref terra.Reference
}

func (amc KafkaClusterAmazonMskClusterAttributes) InternalRef() (terra.Reference, error) {
	return amc.ref, nil
}

func (amc KafkaClusterAmazonMskClusterAttributes) InternalWithRef(ref terra.Reference) KafkaClusterAmazonMskClusterAttributes {
	return KafkaClusterAmazonMskClusterAttributes{ref: ref}
}

func (amc KafkaClusterAmazonMskClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return amc.ref.InternalTokens()
}

func (amc KafkaClusterAmazonMskClusterAttributes) MskClusterArn() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("msk_cluster_arn"))
}

type KafkaClusterVpcConfigAttributes struct {
	ref terra.Reference
}

func (vc KafkaClusterVpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc KafkaClusterVpcConfigAttributes) InternalWithRef(ref terra.Reference) KafkaClusterVpcConfigAttributes {
	return KafkaClusterVpcConfigAttributes{ref: ref}
}

func (vc KafkaClusterVpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc KafkaClusterVpcConfigAttributes) SecurityGroupsIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_groups_ids"))
}

func (vc KafkaClusterVpcConfigAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

type ReplicationInfoListAttributes struct {
	ref terra.Reference
}

func (ril ReplicationInfoListAttributes) InternalRef() (terra.Reference, error) {
	return ril.ref, nil
}

func (ril ReplicationInfoListAttributes) InternalWithRef(ref terra.Reference) ReplicationInfoListAttributes {
	return ReplicationInfoListAttributes{ref: ref}
}

func (ril ReplicationInfoListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ril.ref.InternalTokens()
}

func (ril ReplicationInfoListAttributes) SourceKafkaClusterAlias() terra.StringValue {
	return terra.ReferenceAsString(ril.ref.Append("source_kafka_cluster_alias"))
}

func (ril ReplicationInfoListAttributes) SourceKafkaClusterArn() terra.StringValue {
	return terra.ReferenceAsString(ril.ref.Append("source_kafka_cluster_arn"))
}

func (ril ReplicationInfoListAttributes) TargetCompressionType() terra.StringValue {
	return terra.ReferenceAsString(ril.ref.Append("target_compression_type"))
}

func (ril ReplicationInfoListAttributes) TargetKafkaClusterAlias() terra.StringValue {
	return terra.ReferenceAsString(ril.ref.Append("target_kafka_cluster_alias"))
}

func (ril ReplicationInfoListAttributes) TargetKafkaClusterArn() terra.StringValue {
	return terra.ReferenceAsString(ril.ref.Append("target_kafka_cluster_arn"))
}

func (ril ReplicationInfoListAttributes) ConsumerGroupReplication() terra.ListValue[ReplicationInfoListConsumerGroupReplicationAttributes] {
	return terra.ReferenceAsList[ReplicationInfoListConsumerGroupReplicationAttributes](ril.ref.Append("consumer_group_replication"))
}

func (ril ReplicationInfoListAttributes) TopicReplication() terra.ListValue[ReplicationInfoListTopicReplicationAttributes] {
	return terra.ReferenceAsList[ReplicationInfoListTopicReplicationAttributes](ril.ref.Append("topic_replication"))
}

type ReplicationInfoListConsumerGroupReplicationAttributes struct {
	ref terra.Reference
}

func (cgr ReplicationInfoListConsumerGroupReplicationAttributes) InternalRef() (terra.Reference, error) {
	return cgr.ref, nil
}

func (cgr ReplicationInfoListConsumerGroupReplicationAttributes) InternalWithRef(ref terra.Reference) ReplicationInfoListConsumerGroupReplicationAttributes {
	return ReplicationInfoListConsumerGroupReplicationAttributes{ref: ref}
}

func (cgr ReplicationInfoListConsumerGroupReplicationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cgr.ref.InternalTokens()
}

func (cgr ReplicationInfoListConsumerGroupReplicationAttributes) ConsumerGroupsToExclude() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cgr.ref.Append("consumer_groups_to_exclude"))
}

func (cgr ReplicationInfoListConsumerGroupReplicationAttributes) ConsumerGroupsToReplicate() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cgr.ref.Append("consumer_groups_to_replicate"))
}

func (cgr ReplicationInfoListConsumerGroupReplicationAttributes) DetectAndCopyNewConsumerGroups() terra.BoolValue {
	return terra.ReferenceAsBool(cgr.ref.Append("detect_and_copy_new_consumer_groups"))
}

func (cgr ReplicationInfoListConsumerGroupReplicationAttributes) SynchroniseConsumerGroupOffsets() terra.BoolValue {
	return terra.ReferenceAsBool(cgr.ref.Append("synchronise_consumer_group_offsets"))
}

type ReplicationInfoListTopicReplicationAttributes struct {
	ref terra.Reference
}

func (tr ReplicationInfoListTopicReplicationAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr ReplicationInfoListTopicReplicationAttributes) InternalWithRef(ref terra.Reference) ReplicationInfoListTopicReplicationAttributes {
	return ReplicationInfoListTopicReplicationAttributes{ref: ref}
}

func (tr ReplicationInfoListTopicReplicationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr ReplicationInfoListTopicReplicationAttributes) CopyAccessControlListsForTopics() terra.BoolValue {
	return terra.ReferenceAsBool(tr.ref.Append("copy_access_control_lists_for_topics"))
}

func (tr ReplicationInfoListTopicReplicationAttributes) CopyTopicConfigurations() terra.BoolValue {
	return terra.ReferenceAsBool(tr.ref.Append("copy_topic_configurations"))
}

func (tr ReplicationInfoListTopicReplicationAttributes) DetectAndCopyNewTopics() terra.BoolValue {
	return terra.ReferenceAsBool(tr.ref.Append("detect_and_copy_new_topics"))
}

func (tr ReplicationInfoListTopicReplicationAttributes) TopicsToExclude() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tr.ref.Append("topics_to_exclude"))
}

func (tr ReplicationInfoListTopicReplicationAttributes) TopicsToReplicate() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tr.ref.Append("topics_to_replicate"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type KafkaClusterState struct {
	AmazonMskCluster []KafkaClusterAmazonMskClusterState `json:"amazon_msk_cluster"`
	VpcConfig        []KafkaClusterVpcConfigState        `json:"vpc_config"`
}

type KafkaClusterAmazonMskClusterState struct {
	MskClusterArn string `json:"msk_cluster_arn"`
}

type KafkaClusterVpcConfigState struct {
	SecurityGroupsIds []string `json:"security_groups_ids"`
	SubnetIds         []string `json:"subnet_ids"`
}

type ReplicationInfoListState struct {
	SourceKafkaClusterAlias  string                                             `json:"source_kafka_cluster_alias"`
	SourceKafkaClusterArn    string                                             `json:"source_kafka_cluster_arn"`
	TargetCompressionType    string                                             `json:"target_compression_type"`
	TargetKafkaClusterAlias  string                                             `json:"target_kafka_cluster_alias"`
	TargetKafkaClusterArn    string                                             `json:"target_kafka_cluster_arn"`
	ConsumerGroupReplication []ReplicationInfoListConsumerGroupReplicationState `json:"consumer_group_replication"`
	TopicReplication         []ReplicationInfoListTopicReplicationState         `json:"topic_replication"`
}

type ReplicationInfoListConsumerGroupReplicationState struct {
	ConsumerGroupsToExclude         []string `json:"consumer_groups_to_exclude"`
	ConsumerGroupsToReplicate       []string `json:"consumer_groups_to_replicate"`
	DetectAndCopyNewConsumerGroups  bool     `json:"detect_and_copy_new_consumer_groups"`
	SynchroniseConsumerGroupOffsets bool     `json:"synchronise_consumer_group_offsets"`
}

type ReplicationInfoListTopicReplicationState struct {
	CopyAccessControlListsForTopics bool     `json:"copy_access_control_lists_for_topics"`
	CopyTopicConfigurations         bool     `json:"copy_topic_configurations"`
	DetectAndCopyNewTopics          bool     `json:"detect_and_copy_new_topics"`
	TopicsToExclude                 []string `json:"topics_to_exclude"`
	TopicsToReplicate               []string `json:"topics_to_replicate"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
