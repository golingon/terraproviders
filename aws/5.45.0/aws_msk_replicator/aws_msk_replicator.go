// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_msk_replicator

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_msk_replicator.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMskReplicatorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amr *Resource) Type() string {
	return "aws_msk_replicator"
}

// LocalName returns the local name for [Resource].
func (amr *Resource) LocalName() string {
	return amr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amr *Resource) Configuration() interface{} {
	return amr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amr *Resource) Dependencies() terra.Dependencies {
	return amr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amr *Resource) LifecycleManagement() *terra.Lifecycle {
	return amr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amr *Resource) Attributes() awsMskReplicatorAttributes {
	return awsMskReplicatorAttributes{ref: terra.ReferenceResource(amr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amr *Resource) ImportState(state io.Reader) error {
	amr.state = &awsMskReplicatorState{}
	if err := json.NewDecoder(state).Decode(amr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amr.Type(), amr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amr *Resource) State() (*awsMskReplicatorState, bool) {
	return amr.state, amr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amr *Resource) StateMust() *awsMskReplicatorState {
	if amr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amr.Type(), amr.LocalName()))
	}
	return amr.state
}

// Args contains the configurations for aws_msk_replicator.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ReplicatorName: string, required
	ReplicatorName terra.StringValue `hcl:"replicator_name,attr" validate:"required"`
	// ServiceExecutionRoleArn: string, required
	ServiceExecutionRoleArn terra.StringValue `hcl:"service_execution_role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// KafkaCluster: min=2,max=2
	KafkaCluster []KafkaCluster `hcl:"kafka_cluster,block" validate:"min=2,max=2"`
	// ReplicationInfoList: required
	ReplicationInfoList *ReplicationInfoList `hcl:"replication_info_list,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsMskReplicatorAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_msk_replicator.
func (amr awsMskReplicatorAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(amr.ref.Append("arn"))
}

// CurrentVersion returns a reference to field current_version of aws_msk_replicator.
func (amr awsMskReplicatorAttributes) CurrentVersion() terra.StringValue {
	return terra.ReferenceAsString(amr.ref.Append("current_version"))
}

// Description returns a reference to field description of aws_msk_replicator.
func (amr awsMskReplicatorAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amr.ref.Append("description"))
}

// Id returns a reference to field id of aws_msk_replicator.
func (amr awsMskReplicatorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amr.ref.Append("id"))
}

// ReplicatorName returns a reference to field replicator_name of aws_msk_replicator.
func (amr awsMskReplicatorAttributes) ReplicatorName() terra.StringValue {
	return terra.ReferenceAsString(amr.ref.Append("replicator_name"))
}

// ServiceExecutionRoleArn returns a reference to field service_execution_role_arn of aws_msk_replicator.
func (amr awsMskReplicatorAttributes) ServiceExecutionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(amr.ref.Append("service_execution_role_arn"))
}

// Tags returns a reference to field tags of aws_msk_replicator.
func (amr awsMskReplicatorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_msk_replicator.
func (amr awsMskReplicatorAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amr.ref.Append("tags_all"))
}

func (amr awsMskReplicatorAttributes) KafkaCluster() terra.ListValue[KafkaClusterAttributes] {
	return terra.ReferenceAsList[KafkaClusterAttributes](amr.ref.Append("kafka_cluster"))
}

func (amr awsMskReplicatorAttributes) ReplicationInfoList() terra.ListValue[ReplicationInfoListAttributes] {
	return terra.ReferenceAsList[ReplicationInfoListAttributes](amr.ref.Append("replication_info_list"))
}

func (amr awsMskReplicatorAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amr.ref.Append("timeouts"))
}

type awsMskReplicatorState struct {
	Arn                     string                     `json:"arn"`
	CurrentVersion          string                     `json:"current_version"`
	Description             string                     `json:"description"`
	Id                      string                     `json:"id"`
	ReplicatorName          string                     `json:"replicator_name"`
	ServiceExecutionRoleArn string                     `json:"service_execution_role_arn"`
	Tags                    map[string]string          `json:"tags"`
	TagsAll                 map[string]string          `json:"tags_all"`
	KafkaCluster            []KafkaClusterState        `json:"kafka_cluster"`
	ReplicationInfoList     []ReplicationInfoListState `json:"replication_info_list"`
	Timeouts                *TimeoutsState             `json:"timeouts"`
}
