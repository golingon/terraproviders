// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_proxy_protocol_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_proxy_protocol_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsProxyProtocolPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (appp *Resource) Type() string {
	return "aws_proxy_protocol_policy"
}

// LocalName returns the local name for [Resource].
func (appp *Resource) LocalName() string {
	return appp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (appp *Resource) Configuration() interface{} {
	return appp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (appp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(appp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (appp *Resource) Dependencies() terra.Dependencies {
	return appp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (appp *Resource) LifecycleManagement() *terra.Lifecycle {
	return appp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (appp *Resource) Attributes() awsProxyProtocolPolicyAttributes {
	return awsProxyProtocolPolicyAttributes{ref: terra.ReferenceResource(appp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (appp *Resource) ImportState(state io.Reader) error {
	appp.state = &awsProxyProtocolPolicyState{}
	if err := json.NewDecoder(state).Decode(appp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", appp.Type(), appp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (appp *Resource) State() (*awsProxyProtocolPolicyState, bool) {
	return appp.state, appp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (appp *Resource) StateMust() *awsProxyProtocolPolicyState {
	if appp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", appp.Type(), appp.LocalName()))
	}
	return appp.state
}

// Args contains the configurations for aws_proxy_protocol_policy.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstancePorts: set of string, required
	InstancePorts terra.SetValue[terra.StringValue] `hcl:"instance_ports,attr" validate:"required"`
	// LoadBalancer: string, required
	LoadBalancer terra.StringValue `hcl:"load_balancer,attr" validate:"required"`
}

type awsProxyProtocolPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_proxy_protocol_policy.
func (appp awsProxyProtocolPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(appp.ref.Append("id"))
}

// InstancePorts returns a reference to field instance_ports of aws_proxy_protocol_policy.
func (appp awsProxyProtocolPolicyAttributes) InstancePorts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](appp.ref.Append("instance_ports"))
}

// LoadBalancer returns a reference to field load_balancer of aws_proxy_protocol_policy.
func (appp awsProxyProtocolPolicyAttributes) LoadBalancer() terra.StringValue {
	return terra.ReferenceAsString(appp.ref.Append("load_balancer"))
}

type awsProxyProtocolPolicyState struct {
	Id            string   `json:"id"`
	InstancePorts []string `json:"instance_ports"`
	LoadBalancer  string   `json:"load_balancer"`
}
