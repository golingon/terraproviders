// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dlm_lifecycle_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_dlm_lifecycle_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDlmLifecyclePolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adlp *Resource) Type() string {
	return "aws_dlm_lifecycle_policy"
}

// LocalName returns the local name for [Resource].
func (adlp *Resource) LocalName() string {
	return adlp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adlp *Resource) Configuration() interface{} {
	return adlp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adlp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adlp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adlp *Resource) Dependencies() terra.Dependencies {
	return adlp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adlp *Resource) LifecycleManagement() *terra.Lifecycle {
	return adlp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adlp *Resource) Attributes() awsDlmLifecyclePolicyAttributes {
	return awsDlmLifecyclePolicyAttributes{ref: terra.ReferenceResource(adlp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adlp *Resource) ImportState(state io.Reader) error {
	adlp.state = &awsDlmLifecyclePolicyState{}
	if err := json.NewDecoder(state).Decode(adlp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adlp.Type(), adlp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adlp *Resource) State() (*awsDlmLifecyclePolicyState, bool) {
	return adlp.state, adlp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adlp *Resource) StateMust() *awsDlmLifecyclePolicyState {
	if adlp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adlp.Type(), adlp.LocalName()))
	}
	return adlp.state
}

// Args contains the configurations for aws_dlm_lifecycle_policy.
type Args struct {
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// ExecutionRoleArn: string, required
	ExecutionRoleArn terra.StringValue `hcl:"execution_role_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// PolicyDetails: required
	PolicyDetails *PolicyDetails `hcl:"policy_details,block" validate:"required"`
}

type awsDlmLifecyclePolicyAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_dlm_lifecycle_policy.
func (adlp awsDlmLifecyclePolicyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adlp.ref.Append("arn"))
}

// Description returns a reference to field description of aws_dlm_lifecycle_policy.
func (adlp awsDlmLifecyclePolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adlp.ref.Append("description"))
}

// ExecutionRoleArn returns a reference to field execution_role_arn of aws_dlm_lifecycle_policy.
func (adlp awsDlmLifecyclePolicyAttributes) ExecutionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(adlp.ref.Append("execution_role_arn"))
}

// Id returns a reference to field id of aws_dlm_lifecycle_policy.
func (adlp awsDlmLifecyclePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adlp.ref.Append("id"))
}

// State returns a reference to field state of aws_dlm_lifecycle_policy.
func (adlp awsDlmLifecyclePolicyAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(adlp.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_dlm_lifecycle_policy.
func (adlp awsDlmLifecyclePolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adlp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_dlm_lifecycle_policy.
func (adlp awsDlmLifecyclePolicyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adlp.ref.Append("tags_all"))
}

func (adlp awsDlmLifecyclePolicyAttributes) PolicyDetails() terra.ListValue[PolicyDetailsAttributes] {
	return terra.ReferenceAsList[PolicyDetailsAttributes](adlp.ref.Append("policy_details"))
}

type awsDlmLifecyclePolicyState struct {
	Arn              string               `json:"arn"`
	Description      string               `json:"description"`
	ExecutionRoleArn string               `json:"execution_role_arn"`
	Id               string               `json:"id"`
	State            string               `json:"state"`
	Tags             map[string]string    `json:"tags"`
	TagsAll          map[string]string    `json:"tags_all"`
	PolicyDetails    []PolicyDetailsState `json:"policy_details"`
}
