// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dlm_lifecycle_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type PolicyDetails struct {
	// PolicyType: string, optional
	PolicyType terra.StringValue `hcl:"policy_type,attr"`
	// ResourceLocations: list of string, optional
	ResourceLocations terra.ListValue[terra.StringValue] `hcl:"resource_locations,attr"`
	// ResourceTypes: list of string, optional
	ResourceTypes terra.ListValue[terra.StringValue] `hcl:"resource_types,attr"`
	// TargetTags: map of string, optional
	TargetTags terra.MapValue[terra.StringValue] `hcl:"target_tags,attr"`
	// PolicyDetailsAction: optional
	Action *PolicyDetailsAction `hcl:"action,block"`
	// PolicyDetailsEventSource: optional
	EventSource *PolicyDetailsEventSource `hcl:"event_source,block"`
	// PolicyDetailsParameters: optional
	Parameters *PolicyDetailsParameters `hcl:"parameters,block"`
	// PolicyDetailsSchedule: min=0,max=4
	Schedule []PolicyDetailsSchedule `hcl:"schedule,block" validate:"min=0,max=4"`
}

type PolicyDetailsAction struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyDetailsActionCrossRegionCopy: min=1,max=3
	CrossRegionCopy []PolicyDetailsActionCrossRegionCopy `hcl:"cross_region_copy,block" validate:"min=1,max=3"`
}

type PolicyDetailsActionCrossRegionCopy struct {
	// Target: string, required
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// PolicyDetailsActionCrossRegionCopyEncryptionConfiguration: required
	EncryptionConfiguration *PolicyDetailsActionCrossRegionCopyEncryptionConfiguration `hcl:"encryption_configuration,block" validate:"required"`
	// PolicyDetailsActionCrossRegionCopyRetainRule: optional
	RetainRule *PolicyDetailsActionCrossRegionCopyRetainRule `hcl:"retain_rule,block"`
}

type PolicyDetailsActionCrossRegionCopyEncryptionConfiguration struct {
	// CmkArn: string, optional
	CmkArn terra.StringValue `hcl:"cmk_arn,attr"`
	// Encrypted: bool, optional
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
}

type PolicyDetailsActionCrossRegionCopyRetainRule struct {
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// IntervalUnit: string, required
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr" validate:"required"`
}

type PolicyDetailsEventSource struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// PolicyDetailsEventSourceParameters: required
	Parameters *PolicyDetailsEventSourceParameters `hcl:"parameters,block" validate:"required"`
}

type PolicyDetailsEventSourceParameters struct {
	// DescriptionRegex: string, required
	DescriptionRegex terra.StringValue `hcl:"description_regex,attr" validate:"required"`
	// EventType: string, required
	EventType terra.StringValue `hcl:"event_type,attr" validate:"required"`
	// SnapshotOwner: set of string, required
	SnapshotOwner terra.SetValue[terra.StringValue] `hcl:"snapshot_owner,attr" validate:"required"`
}

type PolicyDetailsParameters struct {
	// ExcludeBootVolume: bool, optional
	ExcludeBootVolume terra.BoolValue `hcl:"exclude_boot_volume,attr"`
	// NoReboot: bool, optional
	NoReboot terra.BoolValue `hcl:"no_reboot,attr"`
}

type PolicyDetailsSchedule struct {
	// CopyTags: bool, optional
	CopyTags terra.BoolValue `hcl:"copy_tags,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TagsToAdd: map of string, optional
	TagsToAdd terra.MapValue[terra.StringValue] `hcl:"tags_to_add,attr"`
	// VariableTags: map of string, optional
	VariableTags terra.MapValue[terra.StringValue] `hcl:"variable_tags,attr"`
	// PolicyDetailsScheduleCreateRule: required
	CreateRule *PolicyDetailsScheduleCreateRule `hcl:"create_rule,block" validate:"required"`
	// PolicyDetailsScheduleCrossRegionCopyRule: min=0,max=3
	CrossRegionCopyRule []PolicyDetailsScheduleCrossRegionCopyRule `hcl:"cross_region_copy_rule,block" validate:"min=0,max=3"`
	// PolicyDetailsScheduleDeprecateRule: optional
	DeprecateRule *PolicyDetailsScheduleDeprecateRule `hcl:"deprecate_rule,block"`
	// PolicyDetailsScheduleFastRestoreRule: optional
	FastRestoreRule *PolicyDetailsScheduleFastRestoreRule `hcl:"fast_restore_rule,block"`
	// PolicyDetailsScheduleRetainRule: required
	RetainRule *PolicyDetailsScheduleRetainRule `hcl:"retain_rule,block" validate:"required"`
	// PolicyDetailsScheduleShareRule: optional
	ShareRule *PolicyDetailsScheduleShareRule `hcl:"share_rule,block"`
}

type PolicyDetailsScheduleCreateRule struct {
	// CronExpression: string, optional
	CronExpression terra.StringValue `hcl:"cron_expression,attr"`
	// Interval: number, optional
	Interval terra.NumberValue `hcl:"interval,attr"`
	// IntervalUnit: string, optional
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Times: list of string, optional
	Times terra.ListValue[terra.StringValue] `hcl:"times,attr"`
}

type PolicyDetailsScheduleCrossRegionCopyRule struct {
	// CmkArn: string, optional
	CmkArn terra.StringValue `hcl:"cmk_arn,attr"`
	// CopyTags: bool, optional
	CopyTags terra.BoolValue `hcl:"copy_tags,attr"`
	// Encrypted: bool, required
	Encrypted terra.BoolValue `hcl:"encrypted,attr" validate:"required"`
	// Target: string, required
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule: optional
	DeprecateRule *PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule `hcl:"deprecate_rule,block"`
	// PolicyDetailsScheduleCrossRegionCopyRuleRetainRule: optional
	RetainRule *PolicyDetailsScheduleCrossRegionCopyRuleRetainRule `hcl:"retain_rule,block"`
}

type PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule struct {
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// IntervalUnit: string, required
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr" validate:"required"`
}

type PolicyDetailsScheduleCrossRegionCopyRuleRetainRule struct {
	// Interval: number, required
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// IntervalUnit: string, required
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr" validate:"required"`
}

type PolicyDetailsScheduleDeprecateRule struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Interval: number, optional
	Interval terra.NumberValue `hcl:"interval,attr"`
	// IntervalUnit: string, optional
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr"`
}

type PolicyDetailsScheduleFastRestoreRule struct {
	// AvailabilityZones: set of string, required
	AvailabilityZones terra.SetValue[terra.StringValue] `hcl:"availability_zones,attr" validate:"required"`
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Interval: number, optional
	Interval terra.NumberValue `hcl:"interval,attr"`
	// IntervalUnit: string, optional
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr"`
}

type PolicyDetailsScheduleRetainRule struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
	// Interval: number, optional
	Interval terra.NumberValue `hcl:"interval,attr"`
	// IntervalUnit: string, optional
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr"`
}

type PolicyDetailsScheduleShareRule struct {
	// TargetAccounts: set of string, required
	TargetAccounts terra.SetValue[terra.StringValue] `hcl:"target_accounts,attr" validate:"required"`
	// UnshareInterval: number, optional
	UnshareInterval terra.NumberValue `hcl:"unshare_interval,attr"`
	// UnshareIntervalUnit: string, optional
	UnshareIntervalUnit terra.StringValue `hcl:"unshare_interval_unit,attr"`
}

type PolicyDetailsAttributes struct {
	ref terra.Reference
}

func (pd PolicyDetailsAttributes) InternalRef() (terra.Reference, error) {
	return pd.ref, nil
}

func (pd PolicyDetailsAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsAttributes {
	return PolicyDetailsAttributes{ref: ref}
}

func (pd PolicyDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pd.ref.InternalTokens()
}

func (pd PolicyDetailsAttributes) PolicyType() terra.StringValue {
	return terra.ReferenceAsString(pd.ref.Append("policy_type"))
}

func (pd PolicyDetailsAttributes) ResourceLocations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pd.ref.Append("resource_locations"))
}

func (pd PolicyDetailsAttributes) ResourceTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pd.ref.Append("resource_types"))
}

func (pd PolicyDetailsAttributes) TargetTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pd.ref.Append("target_tags"))
}

func (pd PolicyDetailsAttributes) Action() terra.ListValue[PolicyDetailsActionAttributes] {
	return terra.ReferenceAsList[PolicyDetailsActionAttributes](pd.ref.Append("action"))
}

func (pd PolicyDetailsAttributes) EventSource() terra.ListValue[PolicyDetailsEventSourceAttributes] {
	return terra.ReferenceAsList[PolicyDetailsEventSourceAttributes](pd.ref.Append("event_source"))
}

func (pd PolicyDetailsAttributes) Parameters() terra.ListValue[PolicyDetailsParametersAttributes] {
	return terra.ReferenceAsList[PolicyDetailsParametersAttributes](pd.ref.Append("parameters"))
}

func (pd PolicyDetailsAttributes) Schedule() terra.ListValue[PolicyDetailsScheduleAttributes] {
	return terra.ReferenceAsList[PolicyDetailsScheduleAttributes](pd.ref.Append("schedule"))
}

type PolicyDetailsActionAttributes struct {
	ref terra.Reference
}

func (a PolicyDetailsActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a PolicyDetailsActionAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsActionAttributes {
	return PolicyDetailsActionAttributes{ref: ref}
}

func (a PolicyDetailsActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a PolicyDetailsActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a PolicyDetailsActionAttributes) CrossRegionCopy() terra.SetValue[PolicyDetailsActionCrossRegionCopyAttributes] {
	return terra.ReferenceAsSet[PolicyDetailsActionCrossRegionCopyAttributes](a.ref.Append("cross_region_copy"))
}

type PolicyDetailsActionCrossRegionCopyAttributes struct {
	ref terra.Reference
}

func (crc PolicyDetailsActionCrossRegionCopyAttributes) InternalRef() (terra.Reference, error) {
	return crc.ref, nil
}

func (crc PolicyDetailsActionCrossRegionCopyAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsActionCrossRegionCopyAttributes {
	return PolicyDetailsActionCrossRegionCopyAttributes{ref: ref}
}

func (crc PolicyDetailsActionCrossRegionCopyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crc.ref.InternalTokens()
}

func (crc PolicyDetailsActionCrossRegionCopyAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(crc.ref.Append("target"))
}

func (crc PolicyDetailsActionCrossRegionCopyAttributes) EncryptionConfiguration() terra.ListValue[PolicyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[PolicyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes](crc.ref.Append("encryption_configuration"))
}

func (crc PolicyDetailsActionCrossRegionCopyAttributes) RetainRule() terra.ListValue[PolicyDetailsActionCrossRegionCopyRetainRuleAttributes] {
	return terra.ReferenceAsList[PolicyDetailsActionCrossRegionCopyRetainRuleAttributes](crc.ref.Append("retain_rule"))
}

type PolicyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec PolicyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec PolicyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes {
	return PolicyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes{ref: ref}
}

func (ec PolicyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec PolicyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes) CmkArn() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("cmk_arn"))
}

func (ec PolicyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(ec.ref.Append("encrypted"))
}

type PolicyDetailsActionCrossRegionCopyRetainRuleAttributes struct {
	ref terra.Reference
}

func (rr PolicyDetailsActionCrossRegionCopyRetainRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr PolicyDetailsActionCrossRegionCopyRetainRuleAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsActionCrossRegionCopyRetainRuleAttributes {
	return PolicyDetailsActionCrossRegionCopyRetainRuleAttributes{ref: ref}
}

func (rr PolicyDetailsActionCrossRegionCopyRetainRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr PolicyDetailsActionCrossRegionCopyRetainRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("interval"))
}

func (rr PolicyDetailsActionCrossRegionCopyRetainRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("interval_unit"))
}

type PolicyDetailsEventSourceAttributes struct {
	ref terra.Reference
}

func (es PolicyDetailsEventSourceAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es PolicyDetailsEventSourceAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsEventSourceAttributes {
	return PolicyDetailsEventSourceAttributes{ref: ref}
}

func (es PolicyDetailsEventSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es PolicyDetailsEventSourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("type"))
}

func (es PolicyDetailsEventSourceAttributes) Parameters() terra.ListValue[PolicyDetailsEventSourceParametersAttributes] {
	return terra.ReferenceAsList[PolicyDetailsEventSourceParametersAttributes](es.ref.Append("parameters"))
}

type PolicyDetailsEventSourceParametersAttributes struct {
	ref terra.Reference
}

func (p PolicyDetailsEventSourceParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PolicyDetailsEventSourceParametersAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsEventSourceParametersAttributes {
	return PolicyDetailsEventSourceParametersAttributes{ref: ref}
}

func (p PolicyDetailsEventSourceParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PolicyDetailsEventSourceParametersAttributes) DescriptionRegex() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("description_regex"))
}

func (p PolicyDetailsEventSourceParametersAttributes) EventType() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("event_type"))
}

func (p PolicyDetailsEventSourceParametersAttributes) SnapshotOwner() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("snapshot_owner"))
}

type PolicyDetailsParametersAttributes struct {
	ref terra.Reference
}

func (p PolicyDetailsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PolicyDetailsParametersAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsParametersAttributes {
	return PolicyDetailsParametersAttributes{ref: ref}
}

func (p PolicyDetailsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PolicyDetailsParametersAttributes) ExcludeBootVolume() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("exclude_boot_volume"))
}

func (p PolicyDetailsParametersAttributes) NoReboot() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("no_reboot"))
}

type PolicyDetailsScheduleAttributes struct {
	ref terra.Reference
}

func (s PolicyDetailsScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s PolicyDetailsScheduleAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsScheduleAttributes {
	return PolicyDetailsScheduleAttributes{ref: ref}
}

func (s PolicyDetailsScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s PolicyDetailsScheduleAttributes) CopyTags() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("copy_tags"))
}

func (s PolicyDetailsScheduleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s PolicyDetailsScheduleAttributes) TagsToAdd() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("tags_to_add"))
}

func (s PolicyDetailsScheduleAttributes) VariableTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("variable_tags"))
}

func (s PolicyDetailsScheduleAttributes) CreateRule() terra.ListValue[PolicyDetailsScheduleCreateRuleAttributes] {
	return terra.ReferenceAsList[PolicyDetailsScheduleCreateRuleAttributes](s.ref.Append("create_rule"))
}

func (s PolicyDetailsScheduleAttributes) CrossRegionCopyRule() terra.SetValue[PolicyDetailsScheduleCrossRegionCopyRuleAttributes] {
	return terra.ReferenceAsSet[PolicyDetailsScheduleCrossRegionCopyRuleAttributes](s.ref.Append("cross_region_copy_rule"))
}

func (s PolicyDetailsScheduleAttributes) DeprecateRule() terra.ListValue[PolicyDetailsScheduleDeprecateRuleAttributes] {
	return terra.ReferenceAsList[PolicyDetailsScheduleDeprecateRuleAttributes](s.ref.Append("deprecate_rule"))
}

func (s PolicyDetailsScheduleAttributes) FastRestoreRule() terra.ListValue[PolicyDetailsScheduleFastRestoreRuleAttributes] {
	return terra.ReferenceAsList[PolicyDetailsScheduleFastRestoreRuleAttributes](s.ref.Append("fast_restore_rule"))
}

func (s PolicyDetailsScheduleAttributes) RetainRule() terra.ListValue[PolicyDetailsScheduleRetainRuleAttributes] {
	return terra.ReferenceAsList[PolicyDetailsScheduleRetainRuleAttributes](s.ref.Append("retain_rule"))
}

func (s PolicyDetailsScheduleAttributes) ShareRule() terra.ListValue[PolicyDetailsScheduleShareRuleAttributes] {
	return terra.ReferenceAsList[PolicyDetailsScheduleShareRuleAttributes](s.ref.Append("share_rule"))
}

type PolicyDetailsScheduleCreateRuleAttributes struct {
	ref terra.Reference
}

func (cr PolicyDetailsScheduleCreateRuleAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr PolicyDetailsScheduleCreateRuleAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsScheduleCreateRuleAttributes {
	return PolicyDetailsScheduleCreateRuleAttributes{ref: ref}
}

func (cr PolicyDetailsScheduleCreateRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr PolicyDetailsScheduleCreateRuleAttributes) CronExpression() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("cron_expression"))
}

func (cr PolicyDetailsScheduleCreateRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("interval"))
}

func (cr PolicyDetailsScheduleCreateRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("interval_unit"))
}

func (cr PolicyDetailsScheduleCreateRuleAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("location"))
}

func (cr PolicyDetailsScheduleCreateRuleAttributes) Times() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cr.ref.Append("times"))
}

type PolicyDetailsScheduleCrossRegionCopyRuleAttributes struct {
	ref terra.Reference
}

func (crcr PolicyDetailsScheduleCrossRegionCopyRuleAttributes) InternalRef() (terra.Reference, error) {
	return crcr.ref, nil
}

func (crcr PolicyDetailsScheduleCrossRegionCopyRuleAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsScheduleCrossRegionCopyRuleAttributes {
	return PolicyDetailsScheduleCrossRegionCopyRuleAttributes{ref: ref}
}

func (crcr PolicyDetailsScheduleCrossRegionCopyRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crcr.ref.InternalTokens()
}

func (crcr PolicyDetailsScheduleCrossRegionCopyRuleAttributes) CmkArn() terra.StringValue {
	return terra.ReferenceAsString(crcr.ref.Append("cmk_arn"))
}

func (crcr PolicyDetailsScheduleCrossRegionCopyRuleAttributes) CopyTags() terra.BoolValue {
	return terra.ReferenceAsBool(crcr.ref.Append("copy_tags"))
}

func (crcr PolicyDetailsScheduleCrossRegionCopyRuleAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(crcr.ref.Append("encrypted"))
}

func (crcr PolicyDetailsScheduleCrossRegionCopyRuleAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(crcr.ref.Append("target"))
}

func (crcr PolicyDetailsScheduleCrossRegionCopyRuleAttributes) DeprecateRule() terra.ListValue[PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes] {
	return terra.ReferenceAsList[PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes](crcr.ref.Append("deprecate_rule"))
}

func (crcr PolicyDetailsScheduleCrossRegionCopyRuleAttributes) RetainRule() terra.ListValue[PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes] {
	return terra.ReferenceAsList[PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes](crcr.ref.Append("retain_rule"))
}

type PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes struct {
	ref terra.Reference
}

func (dr PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes {
	return PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes{ref: ref}
}

func (dr PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("interval"))
}

func (dr PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("interval_unit"))
}

type PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes struct {
	ref terra.Reference
}

func (rr PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes {
	return PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes{ref: ref}
}

func (rr PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("interval"))
}

func (rr PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("interval_unit"))
}

type PolicyDetailsScheduleDeprecateRuleAttributes struct {
	ref terra.Reference
}

func (dr PolicyDetailsScheduleDeprecateRuleAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr PolicyDetailsScheduleDeprecateRuleAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsScheduleDeprecateRuleAttributes {
	return PolicyDetailsScheduleDeprecateRuleAttributes{ref: ref}
}

func (dr PolicyDetailsScheduleDeprecateRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr PolicyDetailsScheduleDeprecateRuleAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("count"))
}

func (dr PolicyDetailsScheduleDeprecateRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("interval"))
}

func (dr PolicyDetailsScheduleDeprecateRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("interval_unit"))
}

type PolicyDetailsScheduleFastRestoreRuleAttributes struct {
	ref terra.Reference
}

func (frr PolicyDetailsScheduleFastRestoreRuleAttributes) InternalRef() (terra.Reference, error) {
	return frr.ref, nil
}

func (frr PolicyDetailsScheduleFastRestoreRuleAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsScheduleFastRestoreRuleAttributes {
	return PolicyDetailsScheduleFastRestoreRuleAttributes{ref: ref}
}

func (frr PolicyDetailsScheduleFastRestoreRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return frr.ref.InternalTokens()
}

func (frr PolicyDetailsScheduleFastRestoreRuleAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](frr.ref.Append("availability_zones"))
}

func (frr PolicyDetailsScheduleFastRestoreRuleAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(frr.ref.Append("count"))
}

func (frr PolicyDetailsScheduleFastRestoreRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(frr.ref.Append("interval"))
}

func (frr PolicyDetailsScheduleFastRestoreRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(frr.ref.Append("interval_unit"))
}

type PolicyDetailsScheduleRetainRuleAttributes struct {
	ref terra.Reference
}

func (rr PolicyDetailsScheduleRetainRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr PolicyDetailsScheduleRetainRuleAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsScheduleRetainRuleAttributes {
	return PolicyDetailsScheduleRetainRuleAttributes{ref: ref}
}

func (rr PolicyDetailsScheduleRetainRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr PolicyDetailsScheduleRetainRuleAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("count"))
}

func (rr PolicyDetailsScheduleRetainRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("interval"))
}

func (rr PolicyDetailsScheduleRetainRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("interval_unit"))
}

type PolicyDetailsScheduleShareRuleAttributes struct {
	ref terra.Reference
}

func (sr PolicyDetailsScheduleShareRuleAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr PolicyDetailsScheduleShareRuleAttributes) InternalWithRef(ref terra.Reference) PolicyDetailsScheduleShareRuleAttributes {
	return PolicyDetailsScheduleShareRuleAttributes{ref: ref}
}

func (sr PolicyDetailsScheduleShareRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr PolicyDetailsScheduleShareRuleAttributes) TargetAccounts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sr.ref.Append("target_accounts"))
}

func (sr PolicyDetailsScheduleShareRuleAttributes) UnshareInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sr.ref.Append("unshare_interval"))
}

func (sr PolicyDetailsScheduleShareRuleAttributes) UnshareIntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("unshare_interval_unit"))
}

type PolicyDetailsState struct {
	PolicyType        string                          `json:"policy_type"`
	ResourceLocations []string                        `json:"resource_locations"`
	ResourceTypes     []string                        `json:"resource_types"`
	TargetTags        map[string]string               `json:"target_tags"`
	Action            []PolicyDetailsActionState      `json:"action"`
	EventSource       []PolicyDetailsEventSourceState `json:"event_source"`
	Parameters        []PolicyDetailsParametersState  `json:"parameters"`
	Schedule          []PolicyDetailsScheduleState    `json:"schedule"`
}

type PolicyDetailsActionState struct {
	Name            string                                    `json:"name"`
	CrossRegionCopy []PolicyDetailsActionCrossRegionCopyState `json:"cross_region_copy"`
}

type PolicyDetailsActionCrossRegionCopyState struct {
	Target                  string                                                           `json:"target"`
	EncryptionConfiguration []PolicyDetailsActionCrossRegionCopyEncryptionConfigurationState `json:"encryption_configuration"`
	RetainRule              []PolicyDetailsActionCrossRegionCopyRetainRuleState              `json:"retain_rule"`
}

type PolicyDetailsActionCrossRegionCopyEncryptionConfigurationState struct {
	CmkArn    string `json:"cmk_arn"`
	Encrypted bool   `json:"encrypted"`
}

type PolicyDetailsActionCrossRegionCopyRetainRuleState struct {
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type PolicyDetailsEventSourceState struct {
	Type       string                                    `json:"type"`
	Parameters []PolicyDetailsEventSourceParametersState `json:"parameters"`
}

type PolicyDetailsEventSourceParametersState struct {
	DescriptionRegex string   `json:"description_regex"`
	EventType        string   `json:"event_type"`
	SnapshotOwner    []string `json:"snapshot_owner"`
}

type PolicyDetailsParametersState struct {
	ExcludeBootVolume bool `json:"exclude_boot_volume"`
	NoReboot          bool `json:"no_reboot"`
}

type PolicyDetailsScheduleState struct {
	CopyTags            bool                                            `json:"copy_tags"`
	Name                string                                          `json:"name"`
	TagsToAdd           map[string]string                               `json:"tags_to_add"`
	VariableTags        map[string]string                               `json:"variable_tags"`
	CreateRule          []PolicyDetailsScheduleCreateRuleState          `json:"create_rule"`
	CrossRegionCopyRule []PolicyDetailsScheduleCrossRegionCopyRuleState `json:"cross_region_copy_rule"`
	DeprecateRule       []PolicyDetailsScheduleDeprecateRuleState       `json:"deprecate_rule"`
	FastRestoreRule     []PolicyDetailsScheduleFastRestoreRuleState     `json:"fast_restore_rule"`
	RetainRule          []PolicyDetailsScheduleRetainRuleState          `json:"retain_rule"`
	ShareRule           []PolicyDetailsScheduleShareRuleState           `json:"share_rule"`
}

type PolicyDetailsScheduleCreateRuleState struct {
	CronExpression string   `json:"cron_expression"`
	Interval       float64  `json:"interval"`
	IntervalUnit   string   `json:"interval_unit"`
	Location       string   `json:"location"`
	Times          []string `json:"times"`
}

type PolicyDetailsScheduleCrossRegionCopyRuleState struct {
	CmkArn        string                                                       `json:"cmk_arn"`
	CopyTags      bool                                                         `json:"copy_tags"`
	Encrypted     bool                                                         `json:"encrypted"`
	Target        string                                                       `json:"target"`
	DeprecateRule []PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleState `json:"deprecate_rule"`
	RetainRule    []PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleState    `json:"retain_rule"`
}

type PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleState struct {
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleState struct {
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type PolicyDetailsScheduleDeprecateRuleState struct {
	Count        float64 `json:"count"`
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type PolicyDetailsScheduleFastRestoreRuleState struct {
	AvailabilityZones []string `json:"availability_zones"`
	Count             float64  `json:"count"`
	Interval          float64  `json:"interval"`
	IntervalUnit      string   `json:"interval_unit"`
}

type PolicyDetailsScheduleRetainRuleState struct {
	Count        float64 `json:"count"`
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type PolicyDetailsScheduleShareRuleState struct {
	TargetAccounts      []string `json:"target_accounts"`
	UnshareInterval     float64  `json:"unshare_interval"`
	UnshareIntervalUnit string   `json:"unshare_interval_unit"`
}
