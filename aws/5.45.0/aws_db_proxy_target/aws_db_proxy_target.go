// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_db_proxy_target

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_db_proxy_target.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDbProxyTargetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adpt *Resource) Type() string {
	return "aws_db_proxy_target"
}

// LocalName returns the local name for [Resource].
func (adpt *Resource) LocalName() string {
	return adpt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adpt *Resource) Configuration() interface{} {
	return adpt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adpt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adpt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adpt *Resource) Dependencies() terra.Dependencies {
	return adpt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adpt *Resource) LifecycleManagement() *terra.Lifecycle {
	return adpt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adpt *Resource) Attributes() awsDbProxyTargetAttributes {
	return awsDbProxyTargetAttributes{ref: terra.ReferenceResource(adpt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adpt *Resource) ImportState(state io.Reader) error {
	adpt.state = &awsDbProxyTargetState{}
	if err := json.NewDecoder(state).Decode(adpt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adpt.Type(), adpt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adpt *Resource) State() (*awsDbProxyTargetState, bool) {
	return adpt.state, adpt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adpt *Resource) StateMust() *awsDbProxyTargetState {
	if adpt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adpt.Type(), adpt.LocalName()))
	}
	return adpt.state
}

// Args contains the configurations for aws_db_proxy_target.
type Args struct {
	// DbClusterIdentifier: string, optional
	DbClusterIdentifier terra.StringValue `hcl:"db_cluster_identifier,attr"`
	// DbInstanceIdentifier: string, optional
	DbInstanceIdentifier terra.StringValue `hcl:"db_instance_identifier,attr"`
	// DbProxyName: string, required
	DbProxyName terra.StringValue `hcl:"db_proxy_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TargetGroupName: string, required
	TargetGroupName terra.StringValue `hcl:"target_group_name,attr" validate:"required"`
}

type awsDbProxyTargetAttributes struct {
	ref terra.Reference
}

// DbClusterIdentifier returns a reference to field db_cluster_identifier of aws_db_proxy_target.
func (adpt awsDbProxyTargetAttributes) DbClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(adpt.ref.Append("db_cluster_identifier"))
}

// DbInstanceIdentifier returns a reference to field db_instance_identifier of aws_db_proxy_target.
func (adpt awsDbProxyTargetAttributes) DbInstanceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(adpt.ref.Append("db_instance_identifier"))
}

// DbProxyName returns a reference to field db_proxy_name of aws_db_proxy_target.
func (adpt awsDbProxyTargetAttributes) DbProxyName() terra.StringValue {
	return terra.ReferenceAsString(adpt.ref.Append("db_proxy_name"))
}

// Endpoint returns a reference to field endpoint of aws_db_proxy_target.
func (adpt awsDbProxyTargetAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(adpt.ref.Append("endpoint"))
}

// Id returns a reference to field id of aws_db_proxy_target.
func (adpt awsDbProxyTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adpt.ref.Append("id"))
}

// Port returns a reference to field port of aws_db_proxy_target.
func (adpt awsDbProxyTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(adpt.ref.Append("port"))
}

// RdsResourceId returns a reference to field rds_resource_id of aws_db_proxy_target.
func (adpt awsDbProxyTargetAttributes) RdsResourceId() terra.StringValue {
	return terra.ReferenceAsString(adpt.ref.Append("rds_resource_id"))
}

// TargetArn returns a reference to field target_arn of aws_db_proxy_target.
func (adpt awsDbProxyTargetAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceAsString(adpt.ref.Append("target_arn"))
}

// TargetGroupName returns a reference to field target_group_name of aws_db_proxy_target.
func (adpt awsDbProxyTargetAttributes) TargetGroupName() terra.StringValue {
	return terra.ReferenceAsString(adpt.ref.Append("target_group_name"))
}

// TrackedClusterId returns a reference to field tracked_cluster_id of aws_db_proxy_target.
func (adpt awsDbProxyTargetAttributes) TrackedClusterId() terra.StringValue {
	return terra.ReferenceAsString(adpt.ref.Append("tracked_cluster_id"))
}

// Type returns a reference to field type of aws_db_proxy_target.
func (adpt awsDbProxyTargetAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(adpt.ref.Append("type"))
}

type awsDbProxyTargetState struct {
	DbClusterIdentifier  string  `json:"db_cluster_identifier"`
	DbInstanceIdentifier string  `json:"db_instance_identifier"`
	DbProxyName          string  `json:"db_proxy_name"`
	Endpoint             string  `json:"endpoint"`
	Id                   string  `json:"id"`
	Port                 float64 `json:"port"`
	RdsResourceId        string  `json:"rds_resource_id"`
	TargetArn            string  `json:"target_arn"`
	TargetGroupName      string  `json:"target_group_name"`
	TrackedClusterId     string  `json:"tracked_cluster_id"`
	Type                 string  `json:"type"`
}
