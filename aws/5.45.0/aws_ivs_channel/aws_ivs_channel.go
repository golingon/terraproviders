// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ivs_channel

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ivs_channel.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIvsChannelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aic *Resource) Type() string {
	return "aws_ivs_channel"
}

// LocalName returns the local name for [Resource].
func (aic *Resource) LocalName() string {
	return aic.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aic *Resource) Configuration() interface{} {
	return aic.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aic *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aic)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aic *Resource) Dependencies() terra.Dependencies {
	return aic.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aic *Resource) LifecycleManagement() *terra.Lifecycle {
	return aic.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aic *Resource) Attributes() awsIvsChannelAttributes {
	return awsIvsChannelAttributes{ref: terra.ReferenceResource(aic)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aic *Resource) ImportState(state io.Reader) error {
	aic.state = &awsIvsChannelState{}
	if err := json.NewDecoder(state).Decode(aic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aic.Type(), aic.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aic *Resource) State() (*awsIvsChannelState, bool) {
	return aic.state, aic.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aic *Resource) StateMust() *awsIvsChannelState {
	if aic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aic.Type(), aic.LocalName()))
	}
	return aic.state
}

// Args contains the configurations for aws_ivs_channel.
type Args struct {
	// Authorized: bool, optional
	Authorized terra.BoolValue `hcl:"authorized,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LatencyMode: string, optional
	LatencyMode terra.StringValue `hcl:"latency_mode,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// RecordingConfigurationArn: string, optional
	RecordingConfigurationArn terra.StringValue `hcl:"recording_configuration_arn,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsIvsChannelAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ivs_channel.
func (aic awsIvsChannelAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("arn"))
}

// Authorized returns a reference to field authorized of aws_ivs_channel.
func (aic awsIvsChannelAttributes) Authorized() terra.BoolValue {
	return terra.ReferenceAsBool(aic.ref.Append("authorized"))
}

// Id returns a reference to field id of aws_ivs_channel.
func (aic awsIvsChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("id"))
}

// IngestEndpoint returns a reference to field ingest_endpoint of aws_ivs_channel.
func (aic awsIvsChannelAttributes) IngestEndpoint() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("ingest_endpoint"))
}

// LatencyMode returns a reference to field latency_mode of aws_ivs_channel.
func (aic awsIvsChannelAttributes) LatencyMode() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("latency_mode"))
}

// Name returns a reference to field name of aws_ivs_channel.
func (aic awsIvsChannelAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("name"))
}

// PlaybackUrl returns a reference to field playback_url of aws_ivs_channel.
func (aic awsIvsChannelAttributes) PlaybackUrl() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("playback_url"))
}

// RecordingConfigurationArn returns a reference to field recording_configuration_arn of aws_ivs_channel.
func (aic awsIvsChannelAttributes) RecordingConfigurationArn() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("recording_configuration_arn"))
}

// Tags returns a reference to field tags of aws_ivs_channel.
func (aic awsIvsChannelAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aic.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ivs_channel.
func (aic awsIvsChannelAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aic.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_ivs_channel.
func (aic awsIvsChannelAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("type"))
}

func (aic awsIvsChannelAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aic.ref.Append("timeouts"))
}

type awsIvsChannelState struct {
	Arn                       string            `json:"arn"`
	Authorized                bool              `json:"authorized"`
	Id                        string            `json:"id"`
	IngestEndpoint            string            `json:"ingest_endpoint"`
	LatencyMode               string            `json:"latency_mode"`
	Name                      string            `json:"name"`
	PlaybackUrl               string            `json:"playback_url"`
	RecordingConfigurationArn string            `json:"recording_configuration_arn"`
	Tags                      map[string]string `json:"tags"`
	TagsAll                   map[string]string `json:"tags_all"`
	Type                      string            `json:"type"`
	Timeouts                  *TimeoutsState    `json:"timeouts"`
}
