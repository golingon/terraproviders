// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kms_alias

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kms_alias.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKmsAliasState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aka *Resource) Type() string {
	return "aws_kms_alias"
}

// LocalName returns the local name for [Resource].
func (aka *Resource) LocalName() string {
	return aka.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aka *Resource) Configuration() interface{} {
	return aka.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aka *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aka)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aka *Resource) Dependencies() terra.Dependencies {
	return aka.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aka *Resource) LifecycleManagement() *terra.Lifecycle {
	return aka.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aka *Resource) Attributes() awsKmsAliasAttributes {
	return awsKmsAliasAttributes{ref: terra.ReferenceResource(aka)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aka *Resource) ImportState(state io.Reader) error {
	aka.state = &awsKmsAliasState{}
	if err := json.NewDecoder(state).Decode(aka.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aka.Type(), aka.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aka *Resource) State() (*awsKmsAliasState, bool) {
	return aka.state, aka.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aka *Resource) StateMust() *awsKmsAliasState {
	if aka.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aka.Type(), aka.LocalName()))
	}
	return aka.state
}

// Args contains the configurations for aws_kms_alias.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// TargetKeyId: string, required
	TargetKeyId terra.StringValue `hcl:"target_key_id,attr" validate:"required"`
}

type awsKmsAliasAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_kms_alias.
func (aka awsKmsAliasAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("arn"))
}

// Id returns a reference to field id of aws_kms_alias.
func (aka awsKmsAliasAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("id"))
}

// Name returns a reference to field name of aws_kms_alias.
func (aka awsKmsAliasAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_kms_alias.
func (aka awsKmsAliasAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("name_prefix"))
}

// TargetKeyArn returns a reference to field target_key_arn of aws_kms_alias.
func (aka awsKmsAliasAttributes) TargetKeyArn() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("target_key_arn"))
}

// TargetKeyId returns a reference to field target_key_id of aws_kms_alias.
func (aka awsKmsAliasAttributes) TargetKeyId() terra.StringValue {
	return terra.ReferenceAsString(aka.ref.Append("target_key_id"))
}

type awsKmsAliasState struct {
	Arn          string `json:"arn"`
	Id           string `json:"id"`
	Name         string `json:"name"`
	NamePrefix   string `json:"name_prefix"`
	TargetKeyArn string `json:"target_key_arn"`
	TargetKeyId  string `json:"target_key_id"`
}
