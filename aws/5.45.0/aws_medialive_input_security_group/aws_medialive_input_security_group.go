// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_medialive_input_security_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_medialive_input_security_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMedialiveInputSecurityGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amisg *Resource) Type() string {
	return "aws_medialive_input_security_group"
}

// LocalName returns the local name for [Resource].
func (amisg *Resource) LocalName() string {
	return amisg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amisg *Resource) Configuration() interface{} {
	return amisg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amisg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amisg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amisg *Resource) Dependencies() terra.Dependencies {
	return amisg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amisg *Resource) LifecycleManagement() *terra.Lifecycle {
	return amisg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amisg *Resource) Attributes() awsMedialiveInputSecurityGroupAttributes {
	return awsMedialiveInputSecurityGroupAttributes{ref: terra.ReferenceResource(amisg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amisg *Resource) ImportState(state io.Reader) error {
	amisg.state = &awsMedialiveInputSecurityGroupState{}
	if err := json.NewDecoder(state).Decode(amisg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amisg.Type(), amisg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amisg *Resource) State() (*awsMedialiveInputSecurityGroupState, bool) {
	return amisg.state, amisg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amisg *Resource) StateMust() *awsMedialiveInputSecurityGroupState {
	if amisg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amisg.Type(), amisg.LocalName()))
	}
	return amisg.state
}

// Args contains the configurations for aws_medialive_input_security_group.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// WhitelistRules: min=1
	WhitelistRules []WhitelistRules `hcl:"whitelist_rules,block" validate:"min=1"`
}

type awsMedialiveInputSecurityGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_medialive_input_security_group.
func (amisg awsMedialiveInputSecurityGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(amisg.ref.Append("arn"))
}

// Id returns a reference to field id of aws_medialive_input_security_group.
func (amisg awsMedialiveInputSecurityGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amisg.ref.Append("id"))
}

// Inputs returns a reference to field inputs of aws_medialive_input_security_group.
func (amisg awsMedialiveInputSecurityGroupAttributes) Inputs() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](amisg.ref.Append("inputs"))
}

// Tags returns a reference to field tags of aws_medialive_input_security_group.
func (amisg awsMedialiveInputSecurityGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amisg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_medialive_input_security_group.
func (amisg awsMedialiveInputSecurityGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amisg.ref.Append("tags_all"))
}

func (amisg awsMedialiveInputSecurityGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](amisg.ref.Append("timeouts"))
}

func (amisg awsMedialiveInputSecurityGroupAttributes) WhitelistRules() terra.SetValue[WhitelistRulesAttributes] {
	return terra.ReferenceAsSet[WhitelistRulesAttributes](amisg.ref.Append("whitelist_rules"))
}

type awsMedialiveInputSecurityGroupState struct {
	Arn            string                `json:"arn"`
	Id             string                `json:"id"`
	Inputs         []string              `json:"inputs"`
	Tags           map[string]string     `json:"tags"`
	TagsAll        map[string]string     `json:"tags_all"`
	Timeouts       *TimeoutsState        `json:"timeouts"`
	WhitelistRules []WhitelistRulesState `json:"whitelist_rules"`
}
