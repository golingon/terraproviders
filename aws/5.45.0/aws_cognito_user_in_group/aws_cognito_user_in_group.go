// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cognito_user_in_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cognito_user_in_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCognitoUserInGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acuig *Resource) Type() string {
	return "aws_cognito_user_in_group"
}

// LocalName returns the local name for [Resource].
func (acuig *Resource) LocalName() string {
	return acuig.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acuig *Resource) Configuration() interface{} {
	return acuig.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acuig *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acuig)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acuig *Resource) Dependencies() terra.Dependencies {
	return acuig.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acuig *Resource) LifecycleManagement() *terra.Lifecycle {
	return acuig.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acuig *Resource) Attributes() awsCognitoUserInGroupAttributes {
	return awsCognitoUserInGroupAttributes{ref: terra.ReferenceResource(acuig)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acuig *Resource) ImportState(state io.Reader) error {
	acuig.state = &awsCognitoUserInGroupState{}
	if err := json.NewDecoder(state).Decode(acuig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acuig.Type(), acuig.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acuig *Resource) State() (*awsCognitoUserInGroupState, bool) {
	return acuig.state, acuig.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acuig *Resource) StateMust() *awsCognitoUserInGroupState {
	if acuig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acuig.Type(), acuig.LocalName()))
	}
	return acuig.state
}

// Args contains the configurations for aws_cognito_user_in_group.
type Args struct {
	// GroupName: string, required
	GroupName terra.StringValue `hcl:"group_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// UserPoolId: string, required
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type awsCognitoUserInGroupAttributes struct {
	ref terra.Reference
}

// GroupName returns a reference to field group_name of aws_cognito_user_in_group.
func (acuig awsCognitoUserInGroupAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(acuig.ref.Append("group_name"))
}

// Id returns a reference to field id of aws_cognito_user_in_group.
func (acuig awsCognitoUserInGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acuig.ref.Append("id"))
}

// UserPoolId returns a reference to field user_pool_id of aws_cognito_user_in_group.
func (acuig awsCognitoUserInGroupAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceAsString(acuig.ref.Append("user_pool_id"))
}

// Username returns a reference to field username of aws_cognito_user_in_group.
func (acuig awsCognitoUserInGroupAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(acuig.ref.Append("username"))
}

type awsCognitoUserInGroupState struct {
	GroupName  string `json:"group_name"`
	Id         string `json:"id"`
	UserPoolId string `json:"user_pool_id"`
	Username   string `json:"username"`
}
