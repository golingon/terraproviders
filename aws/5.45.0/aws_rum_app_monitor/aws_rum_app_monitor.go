// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_rum_app_monitor

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_rum_app_monitor.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRumAppMonitorState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aram *Resource) Type() string {
	return "aws_rum_app_monitor"
}

// LocalName returns the local name for [Resource].
func (aram *Resource) LocalName() string {
	return aram.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aram *Resource) Configuration() interface{} {
	return aram.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aram *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aram)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aram *Resource) Dependencies() terra.Dependencies {
	return aram.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aram *Resource) LifecycleManagement() *terra.Lifecycle {
	return aram.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aram *Resource) Attributes() awsRumAppMonitorAttributes {
	return awsRumAppMonitorAttributes{ref: terra.ReferenceResource(aram)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aram *Resource) ImportState(state io.Reader) error {
	aram.state = &awsRumAppMonitorState{}
	if err := json.NewDecoder(state).Decode(aram.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aram.Type(), aram.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aram *Resource) State() (*awsRumAppMonitorState, bool) {
	return aram.state, aram.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aram *Resource) StateMust() *awsRumAppMonitorState {
	if aram.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aram.Type(), aram.LocalName()))
	}
	return aram.state
}

// Args contains the configurations for aws_rum_app_monitor.
type Args struct {
	// CwLogEnabled: bool, optional
	CwLogEnabled terra.BoolValue `hcl:"cw_log_enabled,attr"`
	// Domain: string, required
	Domain terra.StringValue `hcl:"domain,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// AppMonitorConfiguration: optional
	AppMonitorConfiguration *AppMonitorConfiguration `hcl:"app_monitor_configuration,block"`
	// CustomEvents: optional
	CustomEvents *CustomEvents `hcl:"custom_events,block"`
}

type awsRumAppMonitorAttributes struct {
	ref terra.Reference
}

// AppMonitorId returns a reference to field app_monitor_id of aws_rum_app_monitor.
func (aram awsRumAppMonitorAttributes) AppMonitorId() terra.StringValue {
	return terra.ReferenceAsString(aram.ref.Append("app_monitor_id"))
}

// Arn returns a reference to field arn of aws_rum_app_monitor.
func (aram awsRumAppMonitorAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aram.ref.Append("arn"))
}

// CwLogEnabled returns a reference to field cw_log_enabled of aws_rum_app_monitor.
func (aram awsRumAppMonitorAttributes) CwLogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aram.ref.Append("cw_log_enabled"))
}

// CwLogGroup returns a reference to field cw_log_group of aws_rum_app_monitor.
func (aram awsRumAppMonitorAttributes) CwLogGroup() terra.StringValue {
	return terra.ReferenceAsString(aram.ref.Append("cw_log_group"))
}

// Domain returns a reference to field domain of aws_rum_app_monitor.
func (aram awsRumAppMonitorAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(aram.ref.Append("domain"))
}

// Id returns a reference to field id of aws_rum_app_monitor.
func (aram awsRumAppMonitorAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aram.ref.Append("id"))
}

// Name returns a reference to field name of aws_rum_app_monitor.
func (aram awsRumAppMonitorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aram.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_rum_app_monitor.
func (aram awsRumAppMonitorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aram.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_rum_app_monitor.
func (aram awsRumAppMonitorAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aram.ref.Append("tags_all"))
}

func (aram awsRumAppMonitorAttributes) AppMonitorConfiguration() terra.ListValue[AppMonitorConfigurationAttributes] {
	return terra.ReferenceAsList[AppMonitorConfigurationAttributes](aram.ref.Append("app_monitor_configuration"))
}

func (aram awsRumAppMonitorAttributes) CustomEvents() terra.ListValue[CustomEventsAttributes] {
	return terra.ReferenceAsList[CustomEventsAttributes](aram.ref.Append("custom_events"))
}

type awsRumAppMonitorState struct {
	AppMonitorId            string                         `json:"app_monitor_id"`
	Arn                     string                         `json:"arn"`
	CwLogEnabled            bool                           `json:"cw_log_enabled"`
	CwLogGroup              string                         `json:"cw_log_group"`
	Domain                  string                         `json:"domain"`
	Id                      string                         `json:"id"`
	Name                    string                         `json:"name"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	AppMonitorConfiguration []AppMonitorConfigurationState `json:"app_monitor_configuration"`
	CustomEvents            []CustomEventsState            `json:"custom_events"`
}
