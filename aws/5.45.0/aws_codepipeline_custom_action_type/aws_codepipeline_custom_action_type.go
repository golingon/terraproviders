// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codepipeline_custom_action_type

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codepipeline_custom_action_type.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodepipelineCustomActionTypeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (accat *Resource) Type() string {
	return "aws_codepipeline_custom_action_type"
}

// LocalName returns the local name for [Resource].
func (accat *Resource) LocalName() string {
	return accat.Name
}

// Configuration returns the configuration (args) for [Resource].
func (accat *Resource) Configuration() interface{} {
	return accat.Args
}

// DependOn is used for other resources to depend on [Resource].
func (accat *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(accat)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (accat *Resource) Dependencies() terra.Dependencies {
	return accat.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (accat *Resource) LifecycleManagement() *terra.Lifecycle {
	return accat.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (accat *Resource) Attributes() awsCodepipelineCustomActionTypeAttributes {
	return awsCodepipelineCustomActionTypeAttributes{ref: terra.ReferenceResource(accat)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (accat *Resource) ImportState(state io.Reader) error {
	accat.state = &awsCodepipelineCustomActionTypeState{}
	if err := json.NewDecoder(state).Decode(accat.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", accat.Type(), accat.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (accat *Resource) State() (*awsCodepipelineCustomActionTypeState, bool) {
	return accat.state, accat.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (accat *Resource) StateMust() *awsCodepipelineCustomActionTypeState {
	if accat.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", accat.Type(), accat.LocalName()))
	}
	return accat.state
}

// Args contains the configurations for aws_codepipeline_custom_action_type.
type Args struct {
	// Category: string, required
	Category terra.StringValue `hcl:"category,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProviderName: string, required
	ProviderName terra.StringValue `hcl:"provider_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// ConfigurationProperty: min=0,max=10
	ConfigurationProperty []ConfigurationProperty `hcl:"configuration_property,block" validate:"min=0,max=10"`
	// InputArtifactDetails: required
	InputArtifactDetails *InputArtifactDetails `hcl:"input_artifact_details,block" validate:"required"`
	// OutputArtifactDetails: required
	OutputArtifactDetails *OutputArtifactDetails `hcl:"output_artifact_details,block" validate:"required"`
	// Settings: optional
	Settings *Settings `hcl:"settings,block"`
}

type awsCodepipelineCustomActionTypeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_codepipeline_custom_action_type.
func (accat awsCodepipelineCustomActionTypeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(accat.ref.Append("arn"))
}

// Category returns a reference to field category of aws_codepipeline_custom_action_type.
func (accat awsCodepipelineCustomActionTypeAttributes) Category() terra.StringValue {
	return terra.ReferenceAsString(accat.ref.Append("category"))
}

// Id returns a reference to field id of aws_codepipeline_custom_action_type.
func (accat awsCodepipelineCustomActionTypeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(accat.ref.Append("id"))
}

// Owner returns a reference to field owner of aws_codepipeline_custom_action_type.
func (accat awsCodepipelineCustomActionTypeAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(accat.ref.Append("owner"))
}

// ProviderName returns a reference to field provider_name of aws_codepipeline_custom_action_type.
func (accat awsCodepipelineCustomActionTypeAttributes) ProviderName() terra.StringValue {
	return terra.ReferenceAsString(accat.ref.Append("provider_name"))
}

// Tags returns a reference to field tags of aws_codepipeline_custom_action_type.
func (accat awsCodepipelineCustomActionTypeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](accat.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_codepipeline_custom_action_type.
func (accat awsCodepipelineCustomActionTypeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](accat.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_codepipeline_custom_action_type.
func (accat awsCodepipelineCustomActionTypeAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(accat.ref.Append("version"))
}

func (accat awsCodepipelineCustomActionTypeAttributes) ConfigurationProperty() terra.ListValue[ConfigurationPropertyAttributes] {
	return terra.ReferenceAsList[ConfigurationPropertyAttributes](accat.ref.Append("configuration_property"))
}

func (accat awsCodepipelineCustomActionTypeAttributes) InputArtifactDetails() terra.ListValue[InputArtifactDetailsAttributes] {
	return terra.ReferenceAsList[InputArtifactDetailsAttributes](accat.ref.Append("input_artifact_details"))
}

func (accat awsCodepipelineCustomActionTypeAttributes) OutputArtifactDetails() terra.ListValue[OutputArtifactDetailsAttributes] {
	return terra.ReferenceAsList[OutputArtifactDetailsAttributes](accat.ref.Append("output_artifact_details"))
}

func (accat awsCodepipelineCustomActionTypeAttributes) Settings() terra.ListValue[SettingsAttributes] {
	return terra.ReferenceAsList[SettingsAttributes](accat.ref.Append("settings"))
}

type awsCodepipelineCustomActionTypeState struct {
	Arn                   string                       `json:"arn"`
	Category              string                       `json:"category"`
	Id                    string                       `json:"id"`
	Owner                 string                       `json:"owner"`
	ProviderName          string                       `json:"provider_name"`
	Tags                  map[string]string            `json:"tags"`
	TagsAll               map[string]string            `json:"tags_all"`
	Version               string                       `json:"version"`
	ConfigurationProperty []ConfigurationPropertyState `json:"configuration_property"`
	InputArtifactDetails  []InputArtifactDetailsState  `json:"input_artifact_details"`
	OutputArtifactDetails []OutputArtifactDetailsState `json:"output_artifact_details"`
	Settings              []SettingsState              `json:"settings"`
}
