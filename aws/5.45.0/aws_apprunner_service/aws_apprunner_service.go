// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_apprunner_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_apprunner_service.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApprunnerServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aas *Resource) Type() string {
	return "aws_apprunner_service"
}

// LocalName returns the local name for [Resource].
func (aas *Resource) LocalName() string {
	return aas.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aas *Resource) Configuration() interface{} {
	return aas.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aas *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aas)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aas *Resource) Dependencies() terra.Dependencies {
	return aas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aas *Resource) LifecycleManagement() *terra.Lifecycle {
	return aas.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aas *Resource) Attributes() awsApprunnerServiceAttributes {
	return awsApprunnerServiceAttributes{ref: terra.ReferenceResource(aas)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aas *Resource) ImportState(state io.Reader) error {
	aas.state = &awsApprunnerServiceState{}
	if err := json.NewDecoder(state).Decode(aas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aas.Type(), aas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aas *Resource) State() (*awsApprunnerServiceState, bool) {
	return aas.state, aas.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aas *Resource) StateMust() *awsApprunnerServiceState {
	if aas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aas.Type(), aas.LocalName()))
	}
	return aas.state
}

// Args contains the configurations for aws_apprunner_service.
type Args struct {
	// AutoScalingConfigurationArn: string, optional
	AutoScalingConfigurationArn terra.StringValue `hcl:"auto_scaling_configuration_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// EncryptionConfiguration: optional
	EncryptionConfiguration *EncryptionConfiguration `hcl:"encryption_configuration,block"`
	// HealthCheckConfiguration: optional
	HealthCheckConfiguration *HealthCheckConfiguration `hcl:"health_check_configuration,block"`
	// InstanceConfiguration: optional
	InstanceConfiguration *InstanceConfiguration `hcl:"instance_configuration,block"`
	// NetworkConfiguration: optional
	NetworkConfiguration *NetworkConfiguration `hcl:"network_configuration,block"`
	// ObservabilityConfiguration: optional
	ObservabilityConfiguration *ObservabilityConfiguration `hcl:"observability_configuration,block"`
	// SourceConfiguration: required
	SourceConfiguration *SourceConfiguration `hcl:"source_configuration,block" validate:"required"`
}

type awsApprunnerServiceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_apprunner_service.
func (aas awsApprunnerServiceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("arn"))
}

// AutoScalingConfigurationArn returns a reference to field auto_scaling_configuration_arn of aws_apprunner_service.
func (aas awsApprunnerServiceAttributes) AutoScalingConfigurationArn() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("auto_scaling_configuration_arn"))
}

// Id returns a reference to field id of aws_apprunner_service.
func (aas awsApprunnerServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("id"))
}

// ServiceId returns a reference to field service_id of aws_apprunner_service.
func (aas awsApprunnerServiceAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("service_id"))
}

// ServiceName returns a reference to field service_name of aws_apprunner_service.
func (aas awsApprunnerServiceAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("service_name"))
}

// ServiceUrl returns a reference to field service_url of aws_apprunner_service.
func (aas awsApprunnerServiceAttributes) ServiceUrl() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("service_url"))
}

// Status returns a reference to field status of aws_apprunner_service.
func (aas awsApprunnerServiceAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_apprunner_service.
func (aas awsApprunnerServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aas.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_apprunner_service.
func (aas awsApprunnerServiceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aas.ref.Append("tags_all"))
}

func (aas awsApprunnerServiceAttributes) EncryptionConfiguration() terra.ListValue[EncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[EncryptionConfigurationAttributes](aas.ref.Append("encryption_configuration"))
}

func (aas awsApprunnerServiceAttributes) HealthCheckConfiguration() terra.ListValue[HealthCheckConfigurationAttributes] {
	return terra.ReferenceAsList[HealthCheckConfigurationAttributes](aas.ref.Append("health_check_configuration"))
}

func (aas awsApprunnerServiceAttributes) InstanceConfiguration() terra.ListValue[InstanceConfigurationAttributes] {
	return terra.ReferenceAsList[InstanceConfigurationAttributes](aas.ref.Append("instance_configuration"))
}

func (aas awsApprunnerServiceAttributes) NetworkConfiguration() terra.ListValue[NetworkConfigurationAttributes] {
	return terra.ReferenceAsList[NetworkConfigurationAttributes](aas.ref.Append("network_configuration"))
}

func (aas awsApprunnerServiceAttributes) ObservabilityConfiguration() terra.ListValue[ObservabilityConfigurationAttributes] {
	return terra.ReferenceAsList[ObservabilityConfigurationAttributes](aas.ref.Append("observability_configuration"))
}

func (aas awsApprunnerServiceAttributes) SourceConfiguration() terra.ListValue[SourceConfigurationAttributes] {
	return terra.ReferenceAsList[SourceConfigurationAttributes](aas.ref.Append("source_configuration"))
}

type awsApprunnerServiceState struct {
	Arn                         string                            `json:"arn"`
	AutoScalingConfigurationArn string                            `json:"auto_scaling_configuration_arn"`
	Id                          string                            `json:"id"`
	ServiceId                   string                            `json:"service_id"`
	ServiceName                 string                            `json:"service_name"`
	ServiceUrl                  string                            `json:"service_url"`
	Status                      string                            `json:"status"`
	Tags                        map[string]string                 `json:"tags"`
	TagsAll                     map[string]string                 `json:"tags_all"`
	EncryptionConfiguration     []EncryptionConfigurationState    `json:"encryption_configuration"`
	HealthCheckConfiguration    []HealthCheckConfigurationState   `json:"health_check_configuration"`
	InstanceConfiguration       []InstanceConfigurationState      `json:"instance_configuration"`
	NetworkConfiguration        []NetworkConfigurationState       `json:"network_configuration"`
	ObservabilityConfiguration  []ObservabilityConfigurationState `json:"observability_configuration"`
	SourceConfiguration         []SourceConfigurationState        `json:"source_configuration"`
}
