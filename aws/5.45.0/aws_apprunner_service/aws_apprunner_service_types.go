// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_apprunner_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EncryptionConfiguration struct {
	// KmsKey: string, required
	KmsKey terra.StringValue `hcl:"kms_key,attr" validate:"required"`
}

type HealthCheckConfiguration struct {
	// HealthyThreshold: number, optional
	HealthyThreshold terra.NumberValue `hcl:"healthy_threshold,attr"`
	// Interval: number, optional
	Interval terra.NumberValue `hcl:"interval,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// Timeout: number, optional
	Timeout terra.NumberValue `hcl:"timeout,attr"`
	// UnhealthyThreshold: number, optional
	UnhealthyThreshold terra.NumberValue `hcl:"unhealthy_threshold,attr"`
}

type InstanceConfiguration struct {
	// Cpu: string, optional
	Cpu terra.StringValue `hcl:"cpu,attr"`
	// InstanceRoleArn: string, optional
	InstanceRoleArn terra.StringValue `hcl:"instance_role_arn,attr"`
	// Memory: string, optional
	Memory terra.StringValue `hcl:"memory,attr"`
}

type NetworkConfiguration struct {
	// IpAddressType: string, optional
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr"`
	// NetworkConfigurationEgressConfiguration: optional
	EgressConfiguration *NetworkConfigurationEgressConfiguration `hcl:"egress_configuration,block"`
	// NetworkConfigurationIngressConfiguration: optional
	IngressConfiguration *NetworkConfigurationIngressConfiguration `hcl:"ingress_configuration,block"`
}

type NetworkConfigurationEgressConfiguration struct {
	// EgressType: string, optional
	EgressType terra.StringValue `hcl:"egress_type,attr"`
	// VpcConnectorArn: string, optional
	VpcConnectorArn terra.StringValue `hcl:"vpc_connector_arn,attr"`
}

type NetworkConfigurationIngressConfiguration struct {
	// IsPubliclyAccessible: bool, optional
	IsPubliclyAccessible terra.BoolValue `hcl:"is_publicly_accessible,attr"`
}

type ObservabilityConfiguration struct {
	// ObservabilityConfigurationArn: string, optional
	ObservabilityConfigurationArn terra.StringValue `hcl:"observability_configuration_arn,attr"`
	// ObservabilityEnabled: bool, required
	ObservabilityEnabled terra.BoolValue `hcl:"observability_enabled,attr" validate:"required"`
}

type SourceConfiguration struct {
	// AutoDeploymentsEnabled: bool, optional
	AutoDeploymentsEnabled terra.BoolValue `hcl:"auto_deployments_enabled,attr"`
	// SourceConfigurationAuthenticationConfiguration: optional
	AuthenticationConfiguration *SourceConfigurationAuthenticationConfiguration `hcl:"authentication_configuration,block"`
	// SourceConfigurationCodeRepository: optional
	CodeRepository *SourceConfigurationCodeRepository `hcl:"code_repository,block"`
	// SourceConfigurationImageRepository: optional
	ImageRepository *SourceConfigurationImageRepository `hcl:"image_repository,block"`
}

type SourceConfigurationAuthenticationConfiguration struct {
	// AccessRoleArn: string, optional
	AccessRoleArn terra.StringValue `hcl:"access_role_arn,attr"`
	// ConnectionArn: string, optional
	ConnectionArn terra.StringValue `hcl:"connection_arn,attr"`
}

type SourceConfigurationCodeRepository struct {
	// RepositoryUrl: string, required
	RepositoryUrl terra.StringValue `hcl:"repository_url,attr" validate:"required"`
	// SourceDirectory: string, optional
	SourceDirectory terra.StringValue `hcl:"source_directory,attr"`
	// SourceConfigurationCodeRepositoryCodeConfiguration: optional
	CodeConfiguration *SourceConfigurationCodeRepositoryCodeConfiguration `hcl:"code_configuration,block"`
	// SourceConfigurationCodeRepositorySourceCodeVersion: required
	SourceCodeVersion *SourceConfigurationCodeRepositorySourceCodeVersion `hcl:"source_code_version,block" validate:"required"`
}

type SourceConfigurationCodeRepositoryCodeConfiguration struct {
	// ConfigurationSource: string, required
	ConfigurationSource terra.StringValue `hcl:"configuration_source,attr" validate:"required"`
	// SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues: optional
	CodeConfigurationValues *SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues `hcl:"code_configuration_values,block"`
}

type SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues struct {
	// BuildCommand: string, optional
	BuildCommand terra.StringValue `hcl:"build_command,attr"`
	// Port: string, optional
	Port terra.StringValue `hcl:"port,attr"`
	// Runtime: string, required
	Runtime terra.StringValue `hcl:"runtime,attr" validate:"required"`
	// RuntimeEnvironmentSecrets: map of string, optional
	RuntimeEnvironmentSecrets terra.MapValue[terra.StringValue] `hcl:"runtime_environment_secrets,attr"`
	// RuntimeEnvironmentVariables: map of string, optional
	RuntimeEnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"runtime_environment_variables,attr"`
	// StartCommand: string, optional
	StartCommand terra.StringValue `hcl:"start_command,attr"`
}

type SourceConfigurationCodeRepositorySourceCodeVersion struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type SourceConfigurationImageRepository struct {
	// ImageIdentifier: string, required
	ImageIdentifier terra.StringValue `hcl:"image_identifier,attr" validate:"required"`
	// ImageRepositoryType: string, required
	ImageRepositoryType terra.StringValue `hcl:"image_repository_type,attr" validate:"required"`
	// SourceConfigurationImageRepositoryImageConfiguration: optional
	ImageConfiguration *SourceConfigurationImageRepositoryImageConfiguration `hcl:"image_configuration,block"`
}

type SourceConfigurationImageRepositoryImageConfiguration struct {
	// Port: string, optional
	Port terra.StringValue `hcl:"port,attr"`
	// RuntimeEnvironmentSecrets: map of string, optional
	RuntimeEnvironmentSecrets terra.MapValue[terra.StringValue] `hcl:"runtime_environment_secrets,attr"`
	// RuntimeEnvironmentVariables: map of string, optional
	RuntimeEnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"runtime_environment_variables,attr"`
	// StartCommand: string, optional
	StartCommand terra.StringValue `hcl:"start_command,attr"`
}

type EncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec EncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec EncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) EncryptionConfigurationAttributes {
	return EncryptionConfigurationAttributes{ref: ref}
}

func (ec EncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec EncryptionConfigurationAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key"))
}

type HealthCheckConfigurationAttributes struct {
	ref terra.Reference
}

func (hcc HealthCheckConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return hcc.ref, nil
}

func (hcc HealthCheckConfigurationAttributes) InternalWithRef(ref terra.Reference) HealthCheckConfigurationAttributes {
	return HealthCheckConfigurationAttributes{ref: ref}
}

func (hcc HealthCheckConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hcc.ref.InternalTokens()
}

func (hcc HealthCheckConfigurationAttributes) HealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hcc.ref.Append("healthy_threshold"))
}

func (hcc HealthCheckConfigurationAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(hcc.ref.Append("interval"))
}

func (hcc HealthCheckConfigurationAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hcc.ref.Append("path"))
}

func (hcc HealthCheckConfigurationAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(hcc.ref.Append("protocol"))
}

func (hcc HealthCheckConfigurationAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(hcc.ref.Append("timeout"))
}

func (hcc HealthCheckConfigurationAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hcc.ref.Append("unhealthy_threshold"))
}

type InstanceConfigurationAttributes struct {
	ref terra.Reference
}

func (ic InstanceConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic InstanceConfigurationAttributes) InternalWithRef(ref terra.Reference) InstanceConfigurationAttributes {
	return InstanceConfigurationAttributes{ref: ref}
}

func (ic InstanceConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic InstanceConfigurationAttributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("cpu"))
}

func (ic InstanceConfigurationAttributes) InstanceRoleArn() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("instance_role_arn"))
}

func (ic InstanceConfigurationAttributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("memory"))
}

type NetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) NetworkConfigurationAttributes {
	return NetworkConfigurationAttributes{ref: ref}
}

func (nc NetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigurationAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("ip_address_type"))
}

func (nc NetworkConfigurationAttributes) EgressConfiguration() terra.ListValue[NetworkConfigurationEgressConfigurationAttributes] {
	return terra.ReferenceAsList[NetworkConfigurationEgressConfigurationAttributes](nc.ref.Append("egress_configuration"))
}

func (nc NetworkConfigurationAttributes) IngressConfiguration() terra.ListValue[NetworkConfigurationIngressConfigurationAttributes] {
	return terra.ReferenceAsList[NetworkConfigurationIngressConfigurationAttributes](nc.ref.Append("ingress_configuration"))
}

type NetworkConfigurationEgressConfigurationAttributes struct {
	ref terra.Reference
}

func (ec NetworkConfigurationEgressConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec NetworkConfigurationEgressConfigurationAttributes) InternalWithRef(ref terra.Reference) NetworkConfigurationEgressConfigurationAttributes {
	return NetworkConfigurationEgressConfigurationAttributes{ref: ref}
}

func (ec NetworkConfigurationEgressConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec NetworkConfigurationEgressConfigurationAttributes) EgressType() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("egress_type"))
}

func (ec NetworkConfigurationEgressConfigurationAttributes) VpcConnectorArn() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("vpc_connector_arn"))
}

type NetworkConfigurationIngressConfigurationAttributes struct {
	ref terra.Reference
}

func (ic NetworkConfigurationIngressConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic NetworkConfigurationIngressConfigurationAttributes) InternalWithRef(ref terra.Reference) NetworkConfigurationIngressConfigurationAttributes {
	return NetworkConfigurationIngressConfigurationAttributes{ref: ref}
}

func (ic NetworkConfigurationIngressConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic NetworkConfigurationIngressConfigurationAttributes) IsPubliclyAccessible() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("is_publicly_accessible"))
}

type ObservabilityConfigurationAttributes struct {
	ref terra.Reference
}

func (oc ObservabilityConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc ObservabilityConfigurationAttributes) InternalWithRef(ref terra.Reference) ObservabilityConfigurationAttributes {
	return ObservabilityConfigurationAttributes{ref: ref}
}

func (oc ObservabilityConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc ObservabilityConfigurationAttributes) ObservabilityConfigurationArn() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("observability_configuration_arn"))
}

func (oc ObservabilityConfigurationAttributes) ObservabilityEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(oc.ref.Append("observability_enabled"))
}

type SourceConfigurationAttributes struct {
	ref terra.Reference
}

func (sc SourceConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SourceConfigurationAttributes) InternalWithRef(ref terra.Reference) SourceConfigurationAttributes {
	return SourceConfigurationAttributes{ref: ref}
}

func (sc SourceConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc SourceConfigurationAttributes) AutoDeploymentsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("auto_deployments_enabled"))
}

func (sc SourceConfigurationAttributes) AuthenticationConfiguration() terra.ListValue[SourceConfigurationAuthenticationConfigurationAttributes] {
	return terra.ReferenceAsList[SourceConfigurationAuthenticationConfigurationAttributes](sc.ref.Append("authentication_configuration"))
}

func (sc SourceConfigurationAttributes) CodeRepository() terra.ListValue[SourceConfigurationCodeRepositoryAttributes] {
	return terra.ReferenceAsList[SourceConfigurationCodeRepositoryAttributes](sc.ref.Append("code_repository"))
}

func (sc SourceConfigurationAttributes) ImageRepository() terra.ListValue[SourceConfigurationImageRepositoryAttributes] {
	return terra.ReferenceAsList[SourceConfigurationImageRepositoryAttributes](sc.ref.Append("image_repository"))
}

type SourceConfigurationAuthenticationConfigurationAttributes struct {
	ref terra.Reference
}

func (ac SourceConfigurationAuthenticationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac SourceConfigurationAuthenticationConfigurationAttributes) InternalWithRef(ref terra.Reference) SourceConfigurationAuthenticationConfigurationAttributes {
	return SourceConfigurationAuthenticationConfigurationAttributes{ref: ref}
}

func (ac SourceConfigurationAuthenticationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac SourceConfigurationAuthenticationConfigurationAttributes) AccessRoleArn() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("access_role_arn"))
}

func (ac SourceConfigurationAuthenticationConfigurationAttributes) ConnectionArn() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("connection_arn"))
}

type SourceConfigurationCodeRepositoryAttributes struct {
	ref terra.Reference
}

func (cr SourceConfigurationCodeRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr SourceConfigurationCodeRepositoryAttributes) InternalWithRef(ref terra.Reference) SourceConfigurationCodeRepositoryAttributes {
	return SourceConfigurationCodeRepositoryAttributes{ref: ref}
}

func (cr SourceConfigurationCodeRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr SourceConfigurationCodeRepositoryAttributes) RepositoryUrl() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("repository_url"))
}

func (cr SourceConfigurationCodeRepositoryAttributes) SourceDirectory() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("source_directory"))
}

func (cr SourceConfigurationCodeRepositoryAttributes) CodeConfiguration() terra.ListValue[SourceConfigurationCodeRepositoryCodeConfigurationAttributes] {
	return terra.ReferenceAsList[SourceConfigurationCodeRepositoryCodeConfigurationAttributes](cr.ref.Append("code_configuration"))
}

func (cr SourceConfigurationCodeRepositoryAttributes) SourceCodeVersion() terra.ListValue[SourceConfigurationCodeRepositorySourceCodeVersionAttributes] {
	return terra.ReferenceAsList[SourceConfigurationCodeRepositorySourceCodeVersionAttributes](cr.ref.Append("source_code_version"))
}

type SourceConfigurationCodeRepositoryCodeConfigurationAttributes struct {
	ref terra.Reference
}

func (cc SourceConfigurationCodeRepositoryCodeConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc SourceConfigurationCodeRepositoryCodeConfigurationAttributes) InternalWithRef(ref terra.Reference) SourceConfigurationCodeRepositoryCodeConfigurationAttributes {
	return SourceConfigurationCodeRepositoryCodeConfigurationAttributes{ref: ref}
}

func (cc SourceConfigurationCodeRepositoryCodeConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc SourceConfigurationCodeRepositoryCodeConfigurationAttributes) ConfigurationSource() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("configuration_source"))
}

func (cc SourceConfigurationCodeRepositoryCodeConfigurationAttributes) CodeConfigurationValues() terra.ListValue[SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes] {
	return terra.ReferenceAsList[SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes](cc.ref.Append("code_configuration_values"))
}

type SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes struct {
	ref terra.Reference
}

func (ccv SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) InternalRef() (terra.Reference, error) {
	return ccv.ref, nil
}

func (ccv SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) InternalWithRef(ref terra.Reference) SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes {
	return SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes{ref: ref}
}

func (ccv SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccv.ref.InternalTokens()
}

func (ccv SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) BuildCommand() terra.StringValue {
	return terra.ReferenceAsString(ccv.ref.Append("build_command"))
}

func (ccv SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(ccv.ref.Append("port"))
}

func (ccv SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) Runtime() terra.StringValue {
	return terra.ReferenceAsString(ccv.ref.Append("runtime"))
}

func (ccv SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) RuntimeEnvironmentSecrets() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ccv.ref.Append("runtime_environment_secrets"))
}

func (ccv SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) RuntimeEnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ccv.ref.Append("runtime_environment_variables"))
}

func (ccv SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) StartCommand() terra.StringValue {
	return terra.ReferenceAsString(ccv.ref.Append("start_command"))
}

type SourceConfigurationCodeRepositorySourceCodeVersionAttributes struct {
	ref terra.Reference
}

func (scv SourceConfigurationCodeRepositorySourceCodeVersionAttributes) InternalRef() (terra.Reference, error) {
	return scv.ref, nil
}

func (scv SourceConfigurationCodeRepositorySourceCodeVersionAttributes) InternalWithRef(ref terra.Reference) SourceConfigurationCodeRepositorySourceCodeVersionAttributes {
	return SourceConfigurationCodeRepositorySourceCodeVersionAttributes{ref: ref}
}

func (scv SourceConfigurationCodeRepositorySourceCodeVersionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return scv.ref.InternalTokens()
}

func (scv SourceConfigurationCodeRepositorySourceCodeVersionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(scv.ref.Append("type"))
}

func (scv SourceConfigurationCodeRepositorySourceCodeVersionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(scv.ref.Append("value"))
}

type SourceConfigurationImageRepositoryAttributes struct {
	ref terra.Reference
}

func (ir SourceConfigurationImageRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir SourceConfigurationImageRepositoryAttributes) InternalWithRef(ref terra.Reference) SourceConfigurationImageRepositoryAttributes {
	return SourceConfigurationImageRepositoryAttributes{ref: ref}
}

func (ir SourceConfigurationImageRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir SourceConfigurationImageRepositoryAttributes) ImageIdentifier() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("image_identifier"))
}

func (ir SourceConfigurationImageRepositoryAttributes) ImageRepositoryType() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("image_repository_type"))
}

func (ir SourceConfigurationImageRepositoryAttributes) ImageConfiguration() terra.ListValue[SourceConfigurationImageRepositoryImageConfigurationAttributes] {
	return terra.ReferenceAsList[SourceConfigurationImageRepositoryImageConfigurationAttributes](ir.ref.Append("image_configuration"))
}

type SourceConfigurationImageRepositoryImageConfigurationAttributes struct {
	ref terra.Reference
}

func (ic SourceConfigurationImageRepositoryImageConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic SourceConfigurationImageRepositoryImageConfigurationAttributes) InternalWithRef(ref terra.Reference) SourceConfigurationImageRepositoryImageConfigurationAttributes {
	return SourceConfigurationImageRepositoryImageConfigurationAttributes{ref: ref}
}

func (ic SourceConfigurationImageRepositoryImageConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic SourceConfigurationImageRepositoryImageConfigurationAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("port"))
}

func (ic SourceConfigurationImageRepositoryImageConfigurationAttributes) RuntimeEnvironmentSecrets() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ic.ref.Append("runtime_environment_secrets"))
}

func (ic SourceConfigurationImageRepositoryImageConfigurationAttributes) RuntimeEnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ic.ref.Append("runtime_environment_variables"))
}

func (ic SourceConfigurationImageRepositoryImageConfigurationAttributes) StartCommand() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("start_command"))
}

type EncryptionConfigurationState struct {
	KmsKey string `json:"kms_key"`
}

type HealthCheckConfigurationState struct {
	HealthyThreshold   float64 `json:"healthy_threshold"`
	Interval           float64 `json:"interval"`
	Path               string  `json:"path"`
	Protocol           string  `json:"protocol"`
	Timeout            float64 `json:"timeout"`
	UnhealthyThreshold float64 `json:"unhealthy_threshold"`
}

type InstanceConfigurationState struct {
	Cpu             string `json:"cpu"`
	InstanceRoleArn string `json:"instance_role_arn"`
	Memory          string `json:"memory"`
}

type NetworkConfigurationState struct {
	IpAddressType        string                                          `json:"ip_address_type"`
	EgressConfiguration  []NetworkConfigurationEgressConfigurationState  `json:"egress_configuration"`
	IngressConfiguration []NetworkConfigurationIngressConfigurationState `json:"ingress_configuration"`
}

type NetworkConfigurationEgressConfigurationState struct {
	EgressType      string `json:"egress_type"`
	VpcConnectorArn string `json:"vpc_connector_arn"`
}

type NetworkConfigurationIngressConfigurationState struct {
	IsPubliclyAccessible bool `json:"is_publicly_accessible"`
}

type ObservabilityConfigurationState struct {
	ObservabilityConfigurationArn string `json:"observability_configuration_arn"`
	ObservabilityEnabled          bool   `json:"observability_enabled"`
}

type SourceConfigurationState struct {
	AutoDeploymentsEnabled      bool                                                  `json:"auto_deployments_enabled"`
	AuthenticationConfiguration []SourceConfigurationAuthenticationConfigurationState `json:"authentication_configuration"`
	CodeRepository              []SourceConfigurationCodeRepositoryState              `json:"code_repository"`
	ImageRepository             []SourceConfigurationImageRepositoryState             `json:"image_repository"`
}

type SourceConfigurationAuthenticationConfigurationState struct {
	AccessRoleArn string `json:"access_role_arn"`
	ConnectionArn string `json:"connection_arn"`
}

type SourceConfigurationCodeRepositoryState struct {
	RepositoryUrl     string                                                    `json:"repository_url"`
	SourceDirectory   string                                                    `json:"source_directory"`
	CodeConfiguration []SourceConfigurationCodeRepositoryCodeConfigurationState `json:"code_configuration"`
	SourceCodeVersion []SourceConfigurationCodeRepositorySourceCodeVersionState `json:"source_code_version"`
}

type SourceConfigurationCodeRepositoryCodeConfigurationState struct {
	ConfigurationSource     string                                                                           `json:"configuration_source"`
	CodeConfigurationValues []SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesState `json:"code_configuration_values"`
}

type SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesState struct {
	BuildCommand                string            `json:"build_command"`
	Port                        string            `json:"port"`
	Runtime                     string            `json:"runtime"`
	RuntimeEnvironmentSecrets   map[string]string `json:"runtime_environment_secrets"`
	RuntimeEnvironmentVariables map[string]string `json:"runtime_environment_variables"`
	StartCommand                string            `json:"start_command"`
}

type SourceConfigurationCodeRepositorySourceCodeVersionState struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type SourceConfigurationImageRepositoryState struct {
	ImageIdentifier     string                                                      `json:"image_identifier"`
	ImageRepositoryType string                                                      `json:"image_repository_type"`
	ImageConfiguration  []SourceConfigurationImageRepositoryImageConfigurationState `json:"image_configuration"`
}

type SourceConfigurationImageRepositoryImageConfigurationState struct {
	Port                        string            `json:"port"`
	RuntimeEnvironmentSecrets   map[string]string `json:"runtime_environment_secrets"`
	RuntimeEnvironmentVariables map[string]string `json:"runtime_environment_variables"`
	StartCommand                string            `json:"start_command"`
}
