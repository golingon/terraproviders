// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53domains_delegation_signer_record

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53domains_delegation_signer_record.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53DomainsDelegationSignerRecordState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ardsr *Resource) Type() string {
	return "aws_route53domains_delegation_signer_record"
}

// LocalName returns the local name for [Resource].
func (ardsr *Resource) LocalName() string {
	return ardsr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ardsr *Resource) Configuration() interface{} {
	return ardsr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ardsr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ardsr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ardsr *Resource) Dependencies() terra.Dependencies {
	return ardsr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ardsr *Resource) LifecycleManagement() *terra.Lifecycle {
	return ardsr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ardsr *Resource) Attributes() awsRoute53DomainsDelegationSignerRecordAttributes {
	return awsRoute53DomainsDelegationSignerRecordAttributes{ref: terra.ReferenceResource(ardsr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ardsr *Resource) ImportState(state io.Reader) error {
	ardsr.state = &awsRoute53DomainsDelegationSignerRecordState{}
	if err := json.NewDecoder(state).Decode(ardsr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ardsr.Type(), ardsr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ardsr *Resource) State() (*awsRoute53DomainsDelegationSignerRecordState, bool) {
	return ardsr.state, ardsr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ardsr *Resource) StateMust() *awsRoute53DomainsDelegationSignerRecordState {
	if ardsr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ardsr.Type(), ardsr.LocalName()))
	}
	return ardsr.state
}

// Args contains the configurations for aws_route53domains_delegation_signer_record.
type Args struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// SigningAttributes: min=0
	SigningAttributes []SigningAttributes `hcl:"signing_attributes,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRoute53DomainsDelegationSignerRecordAttributes struct {
	ref terra.Reference
}

// DnssecKeyId returns a reference to field dnssec_key_id of aws_route53domains_delegation_signer_record.
func (ardsr awsRoute53DomainsDelegationSignerRecordAttributes) DnssecKeyId() terra.StringValue {
	return terra.ReferenceAsString(ardsr.ref.Append("dnssec_key_id"))
}

// DomainName returns a reference to field domain_name of aws_route53domains_delegation_signer_record.
func (ardsr awsRoute53DomainsDelegationSignerRecordAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(ardsr.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_route53domains_delegation_signer_record.
func (ardsr awsRoute53DomainsDelegationSignerRecordAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ardsr.ref.Append("id"))
}

func (ardsr awsRoute53DomainsDelegationSignerRecordAttributes) SigningAttributes() terra.ListValue[SigningAttributesAttributes] {
	return terra.ReferenceAsList[SigningAttributesAttributes](ardsr.ref.Append("signing_attributes"))
}

func (ardsr awsRoute53DomainsDelegationSignerRecordAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ardsr.ref.Append("timeouts"))
}

type awsRoute53DomainsDelegationSignerRecordState struct {
	DnssecKeyId       string                   `json:"dnssec_key_id"`
	DomainName        string                   `json:"domain_name"`
	Id                string                   `json:"id"`
	SigningAttributes []SigningAttributesState `json:"signing_attributes"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
