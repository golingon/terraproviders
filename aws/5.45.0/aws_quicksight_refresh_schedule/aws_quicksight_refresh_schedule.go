// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_refresh_schedule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_quicksight_refresh_schedule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsQuicksightRefreshScheduleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aqrs *Resource) Type() string {
	return "aws_quicksight_refresh_schedule"
}

// LocalName returns the local name for [Resource].
func (aqrs *Resource) LocalName() string {
	return aqrs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aqrs *Resource) Configuration() interface{} {
	return aqrs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aqrs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aqrs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aqrs *Resource) Dependencies() terra.Dependencies {
	return aqrs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aqrs *Resource) LifecycleManagement() *terra.Lifecycle {
	return aqrs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aqrs *Resource) Attributes() awsQuicksightRefreshScheduleAttributes {
	return awsQuicksightRefreshScheduleAttributes{ref: terra.ReferenceResource(aqrs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aqrs *Resource) ImportState(state io.Reader) error {
	aqrs.state = &awsQuicksightRefreshScheduleState{}
	if err := json.NewDecoder(state).Decode(aqrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aqrs.Type(), aqrs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aqrs *Resource) State() (*awsQuicksightRefreshScheduleState, bool) {
	return aqrs.state, aqrs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aqrs *Resource) StateMust() *awsQuicksightRefreshScheduleState {
	if aqrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aqrs.Type(), aqrs.LocalName()))
	}
	return aqrs.state
}

// Args contains the configurations for aws_quicksight_refresh_schedule.
type Args struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// DataSetId: string, required
	DataSetId terra.StringValue `hcl:"data_set_id,attr" validate:"required"`
	// ScheduleId: string, required
	ScheduleId terra.StringValue `hcl:"schedule_id,attr" validate:"required"`
	// Schedule: min=0
	Schedule []Schedule `hcl:"schedule,block" validate:"min=0"`
}

type awsQuicksightRefreshScheduleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_quicksight_refresh_schedule.
func (aqrs awsQuicksightRefreshScheduleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aqrs.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_refresh_schedule.
func (aqrs awsQuicksightRefreshScheduleAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(aqrs.ref.Append("aws_account_id"))
}

// DataSetId returns a reference to field data_set_id of aws_quicksight_refresh_schedule.
func (aqrs awsQuicksightRefreshScheduleAttributes) DataSetId() terra.StringValue {
	return terra.ReferenceAsString(aqrs.ref.Append("data_set_id"))
}

// Id returns a reference to field id of aws_quicksight_refresh_schedule.
func (aqrs awsQuicksightRefreshScheduleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aqrs.ref.Append("id"))
}

// ScheduleId returns a reference to field schedule_id of aws_quicksight_refresh_schedule.
func (aqrs awsQuicksightRefreshScheduleAttributes) ScheduleId() terra.StringValue {
	return terra.ReferenceAsString(aqrs.ref.Append("schedule_id"))
}

func (aqrs awsQuicksightRefreshScheduleAttributes) Schedule() terra.ListValue[ScheduleAttributes] {
	return terra.ReferenceAsList[ScheduleAttributes](aqrs.ref.Append("schedule"))
}

type awsQuicksightRefreshScheduleState struct {
	Arn          string          `json:"arn"`
	AwsAccountId string          `json:"aws_account_id"`
	DataSetId    string          `json:"data_set_id"`
	Id           string          `json:"id"`
	ScheduleId   string          `json:"schedule_id"`
	Schedule     []ScheduleState `json:"schedule"`
}
