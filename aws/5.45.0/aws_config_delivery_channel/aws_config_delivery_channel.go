// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_config_delivery_channel

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_config_delivery_channel.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConfigDeliveryChannelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acdc *Resource) Type() string {
	return "aws_config_delivery_channel"
}

// LocalName returns the local name for [Resource].
func (acdc *Resource) LocalName() string {
	return acdc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acdc *Resource) Configuration() interface{} {
	return acdc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acdc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acdc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acdc *Resource) Dependencies() terra.Dependencies {
	return acdc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acdc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acdc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acdc *Resource) Attributes() awsConfigDeliveryChannelAttributes {
	return awsConfigDeliveryChannelAttributes{ref: terra.ReferenceResource(acdc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acdc *Resource) ImportState(state io.Reader) error {
	acdc.state = &awsConfigDeliveryChannelState{}
	if err := json.NewDecoder(state).Decode(acdc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acdc.Type(), acdc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acdc *Resource) State() (*awsConfigDeliveryChannelState, bool) {
	return acdc.state, acdc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acdc *Resource) StateMust() *awsConfigDeliveryChannelState {
	if acdc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acdc.Type(), acdc.LocalName()))
	}
	return acdc.state
}

// Args contains the configurations for aws_config_delivery_channel.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// S3BucketName: string, required
	S3BucketName terra.StringValue `hcl:"s3_bucket_name,attr" validate:"required"`
	// S3KeyPrefix: string, optional
	S3KeyPrefix terra.StringValue `hcl:"s3_key_prefix,attr"`
	// S3KmsKeyArn: string, optional
	S3KmsKeyArn terra.StringValue `hcl:"s3_kms_key_arn,attr"`
	// SnsTopicArn: string, optional
	SnsTopicArn terra.StringValue `hcl:"sns_topic_arn,attr"`
	// SnapshotDeliveryProperties: optional
	SnapshotDeliveryProperties *SnapshotDeliveryProperties `hcl:"snapshot_delivery_properties,block"`
}

type awsConfigDeliveryChannelAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_config_delivery_channel.
func (acdc awsConfigDeliveryChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("id"))
}

// Name returns a reference to field name of aws_config_delivery_channel.
func (acdc awsConfigDeliveryChannelAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("name"))
}

// S3BucketName returns a reference to field s3_bucket_name of aws_config_delivery_channel.
func (acdc awsConfigDeliveryChannelAttributes) S3BucketName() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("s3_bucket_name"))
}

// S3KeyPrefix returns a reference to field s3_key_prefix of aws_config_delivery_channel.
func (acdc awsConfigDeliveryChannelAttributes) S3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("s3_key_prefix"))
}

// S3KmsKeyArn returns a reference to field s3_kms_key_arn of aws_config_delivery_channel.
func (acdc awsConfigDeliveryChannelAttributes) S3KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("s3_kms_key_arn"))
}

// SnsTopicArn returns a reference to field sns_topic_arn of aws_config_delivery_channel.
func (acdc awsConfigDeliveryChannelAttributes) SnsTopicArn() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("sns_topic_arn"))
}

func (acdc awsConfigDeliveryChannelAttributes) SnapshotDeliveryProperties() terra.ListValue[SnapshotDeliveryPropertiesAttributes] {
	return terra.ReferenceAsList[SnapshotDeliveryPropertiesAttributes](acdc.ref.Append("snapshot_delivery_properties"))
}

type awsConfigDeliveryChannelState struct {
	Id                         string                            `json:"id"`
	Name                       string                            `json:"name"`
	S3BucketName               string                            `json:"s3_bucket_name"`
	S3KeyPrefix                string                            `json:"s3_key_prefix"`
	S3KmsKeyArn                string                            `json:"s3_kms_key_arn"`
	SnsTopicArn                string                            `json:"sns_topic_arn"`
	SnapshotDeliveryProperties []SnapshotDeliveryPropertiesState `json:"snapshot_delivery_properties"`
}
