// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_workflow

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_imagebuilder_workflow.
type Resource struct {
	Name      string
	Args      Args
	state     *awsImagebuilderWorkflowState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aiw *Resource) Type() string {
	return "aws_imagebuilder_workflow"
}

// LocalName returns the local name for [Resource].
func (aiw *Resource) LocalName() string {
	return aiw.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aiw *Resource) Configuration() interface{} {
	return aiw.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aiw *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aiw)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aiw *Resource) Dependencies() terra.Dependencies {
	return aiw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aiw *Resource) LifecycleManagement() *terra.Lifecycle {
	return aiw.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aiw *Resource) Attributes() awsImagebuilderWorkflowAttributes {
	return awsImagebuilderWorkflowAttributes{ref: terra.ReferenceResource(aiw)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aiw *Resource) ImportState(state io.Reader) error {
	aiw.state = &awsImagebuilderWorkflowState{}
	if err := json.NewDecoder(state).Decode(aiw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiw.Type(), aiw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aiw *Resource) State() (*awsImagebuilderWorkflowState, bool) {
	return aiw.state, aiw.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aiw *Resource) StateMust() *awsImagebuilderWorkflowState {
	if aiw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiw.Type(), aiw.LocalName()))
	}
	return aiw.state
}

// Args contains the configurations for aws_imagebuilder_workflow.
type Args struct {
	// ChangeDescription: string, optional
	ChangeDescription terra.StringValue `hcl:"change_description,attr"`
	// Data: string, optional
	Data terra.StringValue `hcl:"data,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Uri: string, optional
	Uri terra.StringValue `hcl:"uri,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type awsImagebuilderWorkflowAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aiw.ref.Append("arn"))
}

// ChangeDescription returns a reference to field change_description of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) ChangeDescription() terra.StringValue {
	return terra.ReferenceAsString(aiw.ref.Append("change_description"))
}

// Data returns a reference to field data of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(aiw.ref.Append("data"))
}

// DateCreated returns a reference to field date_created of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) DateCreated() terra.StringValue {
	return terra.ReferenceAsString(aiw.ref.Append("date_created"))
}

// Description returns a reference to field description of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aiw.ref.Append("description"))
}

// Id returns a reference to field id of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiw.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(aiw.ref.Append("kms_key_id"))
}

// Name returns a reference to field name of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aiw.ref.Append("name"))
}

// Owner returns a reference to field owner of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(aiw.ref.Append("owner"))
}

// Tags returns a reference to field tags of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiw.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiw.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aiw.ref.Append("type"))
}

// Uri returns a reference to field uri of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(aiw.ref.Append("uri"))
}

// Version returns a reference to field version of aws_imagebuilder_workflow.
func (aiw awsImagebuilderWorkflowAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(aiw.ref.Append("version"))
}

type awsImagebuilderWorkflowState struct {
	Arn               string            `json:"arn"`
	ChangeDescription string            `json:"change_description"`
	Data              string            `json:"data"`
	DateCreated       string            `json:"date_created"`
	Description       string            `json:"description"`
	Id                string            `json:"id"`
	KmsKeyId          string            `json:"kms_key_id"`
	Name              string            `json:"name"`
	Owner             string            `json:"owner"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
	Type              string            `json:"type"`
	Uri               string            `json:"uri"`
	Version           string            `json:"version"`
}
