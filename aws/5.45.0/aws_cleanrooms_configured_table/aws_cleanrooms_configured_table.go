// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cleanrooms_configured_table

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cleanrooms_configured_table.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCleanroomsConfiguredTableState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acct *Resource) Type() string {
	return "aws_cleanrooms_configured_table"
}

// LocalName returns the local name for [Resource].
func (acct *Resource) LocalName() string {
	return acct.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acct *Resource) Configuration() interface{} {
	return acct.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acct *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acct)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acct *Resource) Dependencies() terra.Dependencies {
	return acct.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acct *Resource) LifecycleManagement() *terra.Lifecycle {
	return acct.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acct *Resource) Attributes() awsCleanroomsConfiguredTableAttributes {
	return awsCleanroomsConfiguredTableAttributes{ref: terra.ReferenceResource(acct)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acct *Resource) ImportState(state io.Reader) error {
	acct.state = &awsCleanroomsConfiguredTableState{}
	if err := json.NewDecoder(state).Decode(acct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acct.Type(), acct.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acct *Resource) State() (*awsCleanroomsConfiguredTableState, bool) {
	return acct.state, acct.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acct *Resource) StateMust() *awsCleanroomsConfiguredTableState {
	if acct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acct.Type(), acct.LocalName()))
	}
	return acct.state
}

// Args contains the configurations for aws_cleanrooms_configured_table.
type Args struct {
	// AllowedColumns: set of string, required
	AllowedColumns terra.SetValue[terra.StringValue] `hcl:"allowed_columns,attr" validate:"required"`
	// AnalysisMethod: string, required
	AnalysisMethod terra.StringValue `hcl:"analysis_method,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TableReference: required
	TableReference *TableReference `hcl:"table_reference,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsCleanroomsConfiguredTableAttributes struct {
	ref terra.Reference
}

// AllowedColumns returns a reference to field allowed_columns of aws_cleanrooms_configured_table.
func (acct awsCleanroomsConfiguredTableAttributes) AllowedColumns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acct.ref.Append("allowed_columns"))
}

// AnalysisMethod returns a reference to field analysis_method of aws_cleanrooms_configured_table.
func (acct awsCleanroomsConfiguredTableAttributes) AnalysisMethod() terra.StringValue {
	return terra.ReferenceAsString(acct.ref.Append("analysis_method"))
}

// Arn returns a reference to field arn of aws_cleanrooms_configured_table.
func (acct awsCleanroomsConfiguredTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acct.ref.Append("arn"))
}

// CreateTime returns a reference to field create_time of aws_cleanrooms_configured_table.
func (acct awsCleanroomsConfiguredTableAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(acct.ref.Append("create_time"))
}

// Description returns a reference to field description of aws_cleanrooms_configured_table.
func (acct awsCleanroomsConfiguredTableAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acct.ref.Append("description"))
}

// Id returns a reference to field id of aws_cleanrooms_configured_table.
func (acct awsCleanroomsConfiguredTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acct.ref.Append("id"))
}

// Name returns a reference to field name of aws_cleanrooms_configured_table.
func (acct awsCleanroomsConfiguredTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acct.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_cleanrooms_configured_table.
func (acct awsCleanroomsConfiguredTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acct.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cleanrooms_configured_table.
func (acct awsCleanroomsConfiguredTableAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acct.ref.Append("tags_all"))
}

// UpdateTime returns a reference to field update_time of aws_cleanrooms_configured_table.
func (acct awsCleanroomsConfiguredTableAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceAsString(acct.ref.Append("update_time"))
}

func (acct awsCleanroomsConfiguredTableAttributes) TableReference() terra.ListValue[TableReferenceAttributes] {
	return terra.ReferenceAsList[TableReferenceAttributes](acct.ref.Append("table_reference"))
}

func (acct awsCleanroomsConfiguredTableAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acct.ref.Append("timeouts"))
}

type awsCleanroomsConfiguredTableState struct {
	AllowedColumns []string              `json:"allowed_columns"`
	AnalysisMethod string                `json:"analysis_method"`
	Arn            string                `json:"arn"`
	CreateTime     string                `json:"create_time"`
	Description    string                `json:"description"`
	Id             string                `json:"id"`
	Name           string                `json:"name"`
	Tags           map[string]string     `json:"tags"`
	TagsAll        map[string]string     `json:"tags_all"`
	UpdateTime     string                `json:"update_time"`
	TableReference []TableReferenceState `json:"table_reference"`
	Timeouts       *TimeoutsState        `json:"timeouts"`
}
