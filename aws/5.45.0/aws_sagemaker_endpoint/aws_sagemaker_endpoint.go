// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sagemaker_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSagemakerEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ase *Resource) Type() string {
	return "aws_sagemaker_endpoint"
}

// LocalName returns the local name for [Resource].
func (ase *Resource) LocalName() string {
	return ase.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ase *Resource) Configuration() interface{} {
	return ase.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ase *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ase)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ase *Resource) Dependencies() terra.Dependencies {
	return ase.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ase *Resource) LifecycleManagement() *terra.Lifecycle {
	return ase.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ase *Resource) Attributes() awsSagemakerEndpointAttributes {
	return awsSagemakerEndpointAttributes{ref: terra.ReferenceResource(ase)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ase *Resource) ImportState(state io.Reader) error {
	ase.state = &awsSagemakerEndpointState{}
	if err := json.NewDecoder(state).Decode(ase.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ase.Type(), ase.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ase *Resource) State() (*awsSagemakerEndpointState, bool) {
	return ase.state, ase.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ase *Resource) StateMust() *awsSagemakerEndpointState {
	if ase.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ase.Type(), ase.LocalName()))
	}
	return ase.state
}

// Args contains the configurations for aws_sagemaker_endpoint.
type Args struct {
	// EndpointConfigName: string, required
	EndpointConfigName terra.StringValue `hcl:"endpoint_config_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DeploymentConfig: optional
	DeploymentConfig *DeploymentConfig `hcl:"deployment_config,block"`
}

type awsSagemakerEndpointAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_endpoint.
func (ase awsSagemakerEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("arn"))
}

// EndpointConfigName returns a reference to field endpoint_config_name of aws_sagemaker_endpoint.
func (ase awsSagemakerEndpointAttributes) EndpointConfigName() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("endpoint_config_name"))
}

// Id returns a reference to field id of aws_sagemaker_endpoint.
func (ase awsSagemakerEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("id"))
}

// Name returns a reference to field name of aws_sagemaker_endpoint.
func (ase awsSagemakerEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_sagemaker_endpoint.
func (ase awsSagemakerEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ase.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_endpoint.
func (ase awsSagemakerEndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ase.ref.Append("tags_all"))
}

func (ase awsSagemakerEndpointAttributes) DeploymentConfig() terra.ListValue[DeploymentConfigAttributes] {
	return terra.ReferenceAsList[DeploymentConfigAttributes](ase.ref.Append("deployment_config"))
}

type awsSagemakerEndpointState struct {
	Arn                string                  `json:"arn"`
	EndpointConfigName string                  `json:"endpoint_config_name"`
	Id                 string                  `json:"id"`
	Name               string                  `json:"name"`
	Tags               map[string]string       `json:"tags"`
	TagsAll            map[string]string       `json:"tags_all"`
	DeploymentConfig   []DeploymentConfigState `json:"deployment_config"`
}
