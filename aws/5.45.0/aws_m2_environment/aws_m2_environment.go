// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_m2_environment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_m2_environment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsM2EnvironmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ame *Resource) Type() string {
	return "aws_m2_environment"
}

// LocalName returns the local name for [Resource].
func (ame *Resource) LocalName() string {
	return ame.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ame *Resource) Configuration() interface{} {
	return ame.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ame *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ame)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ame *Resource) Dependencies() terra.Dependencies {
	return ame.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ame *Resource) LifecycleManagement() *terra.Lifecycle {
	return ame.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ame *Resource) Attributes() awsM2EnvironmentAttributes {
	return awsM2EnvironmentAttributes{ref: terra.ReferenceResource(ame)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ame *Resource) ImportState(state io.Reader) error {
	ame.state = &awsM2EnvironmentState{}
	if err := json.NewDecoder(state).Decode(ame.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ame.Type(), ame.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ame *Resource) State() (*awsM2EnvironmentState, bool) {
	return ame.state, ame.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ame *Resource) StateMust() *awsM2EnvironmentState {
	if ame.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ame.Type(), ame.LocalName()))
	}
	return ame.state
}

// Args contains the configurations for aws_m2_environment.
type Args struct {
	// ApplyChangesDuringMaintenanceWindow: bool, optional
	ApplyChangesDuringMaintenanceWindow terra.BoolValue `hcl:"apply_changes_during_maintenance_window,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EngineType: string, required
	EngineType terra.StringValue `hcl:"engine_type,attr" validate:"required"`
	// EngineVersion: string, optional
	EngineVersion terra.StringValue `hcl:"engine_version,attr"`
	// ForceUpdate: bool, optional
	ForceUpdate terra.BoolValue `hcl:"force_update,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PreferredMaintenanceWindow: string, optional
	PreferredMaintenanceWindow terra.StringValue `hcl:"preferred_maintenance_window,attr"`
	// PubliclyAccessible: bool, optional
	PubliclyAccessible terra.BoolValue `hcl:"publicly_accessible,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// HighAvailabilityConfig: min=0
	HighAvailabilityConfig []HighAvailabilityConfig `hcl:"high_availability_config,block" validate:"min=0"`
	// StorageConfiguration: min=0
	StorageConfiguration []StorageConfiguration `hcl:"storage_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsM2EnvironmentAttributes struct {
	ref terra.Reference
}

// ApplyChangesDuringMaintenanceWindow returns a reference to field apply_changes_during_maintenance_window of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) ApplyChangesDuringMaintenanceWindow() terra.BoolValue {
	return terra.ReferenceAsBool(ame.ref.Append("apply_changes_during_maintenance_window"))
}

// Arn returns a reference to field arn of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("arn"))
}

// Description returns a reference to field description of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("description"))
}

// EngineType returns a reference to field engine_type of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) EngineType() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("engine_type"))
}

// EngineVersion returns a reference to field engine_version of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("engine_version"))
}

// EnvironmentId returns a reference to field environment_id of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("environment_id"))
}

// ForceUpdate returns a reference to field force_update of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) ForceUpdate() terra.BoolValue {
	return terra.ReferenceAsBool(ame.ref.Append("force_update"))
}

// Id returns a reference to field id of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("id"))
}

// InstanceType returns a reference to field instance_type of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("instance_type"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("kms_key_id"))
}

// LoadBalancerArn returns a reference to field load_balancer_arn of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) LoadBalancerArn() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("load_balancer_arn"))
}

// Name returns a reference to field name of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("name"))
}

// PreferredMaintenanceWindow returns a reference to field preferred_maintenance_window of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) PreferredMaintenanceWindow() terra.StringValue {
	return terra.ReferenceAsString(ame.ref.Append("preferred_maintenance_window"))
}

// PubliclyAccessible returns a reference to field publicly_accessible of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) PubliclyAccessible() terra.BoolValue {
	return terra.ReferenceAsBool(ame.ref.Append("publicly_accessible"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ame.ref.Append("security_group_ids"))
}

// SubnetIds returns a reference to field subnet_ids of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ame.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ame.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_m2_environment.
func (ame awsM2EnvironmentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ame.ref.Append("tags_all"))
}

func (ame awsM2EnvironmentAttributes) HighAvailabilityConfig() terra.ListValue[HighAvailabilityConfigAttributes] {
	return terra.ReferenceAsList[HighAvailabilityConfigAttributes](ame.ref.Append("high_availability_config"))
}

func (ame awsM2EnvironmentAttributes) StorageConfiguration() terra.ListValue[StorageConfigurationAttributes] {
	return terra.ReferenceAsList[StorageConfigurationAttributes](ame.ref.Append("storage_configuration"))
}

func (ame awsM2EnvironmentAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ame.ref.Append("timeouts"))
}

type awsM2EnvironmentState struct {
	ApplyChangesDuringMaintenanceWindow bool                          `json:"apply_changes_during_maintenance_window"`
	Arn                                 string                        `json:"arn"`
	Description                         string                        `json:"description"`
	EngineType                          string                        `json:"engine_type"`
	EngineVersion                       string                        `json:"engine_version"`
	EnvironmentId                       string                        `json:"environment_id"`
	ForceUpdate                         bool                          `json:"force_update"`
	Id                                  string                        `json:"id"`
	InstanceType                        string                        `json:"instance_type"`
	KmsKeyId                            string                        `json:"kms_key_id"`
	LoadBalancerArn                     string                        `json:"load_balancer_arn"`
	Name                                string                        `json:"name"`
	PreferredMaintenanceWindow          string                        `json:"preferred_maintenance_window"`
	PubliclyAccessible                  bool                          `json:"publicly_accessible"`
	SecurityGroupIds                    []string                      `json:"security_group_ids"`
	SubnetIds                           []string                      `json:"subnet_ids"`
	Tags                                map[string]string             `json:"tags"`
	TagsAll                             map[string]string             `json:"tags_all"`
	HighAvailabilityConfig              []HighAvailabilityConfigState `json:"high_availability_config"`
	StorageConfiguration                []StorageConfigurationState   `json:"storage_configuration"`
	Timeouts                            *TimeoutsState                `json:"timeouts"`
}
