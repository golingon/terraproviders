// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_m2_environment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type HighAvailabilityConfig struct {
	// DesiredCapacity: number, required
	DesiredCapacity terra.NumberValue `hcl:"desired_capacity,attr" validate:"required"`
}

type StorageConfiguration struct {
	// StorageConfigurationEfs: min=0
	Efs []StorageConfigurationEfs `hcl:"efs,block" validate:"min=0"`
	// StorageConfigurationFsx: min=0
	Fsx []StorageConfigurationFsx `hcl:"fsx,block" validate:"min=0"`
}

type StorageConfigurationEfs struct {
	// FileSystemId: string, required
	FileSystemId terra.StringValue `hcl:"file_system_id,attr" validate:"required"`
	// MountPoint: string, required
	MountPoint terra.StringValue `hcl:"mount_point,attr" validate:"required"`
}

type StorageConfigurationFsx struct {
	// FileSystemId: string, required
	FileSystemId terra.StringValue `hcl:"file_system_id,attr" validate:"required"`
	// MountPoint: string, required
	MountPoint terra.StringValue `hcl:"mount_point,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type HighAvailabilityConfigAttributes struct {
	ref terra.Reference
}

func (hac HighAvailabilityConfigAttributes) InternalRef() (terra.Reference, error) {
	return hac.ref, nil
}

func (hac HighAvailabilityConfigAttributes) InternalWithRef(ref terra.Reference) HighAvailabilityConfigAttributes {
	return HighAvailabilityConfigAttributes{ref: ref}
}

func (hac HighAvailabilityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hac.ref.InternalTokens()
}

func (hac HighAvailabilityConfigAttributes) DesiredCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(hac.ref.Append("desired_capacity"))
}

type StorageConfigurationAttributes struct {
	ref terra.Reference
}

func (sc StorageConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc StorageConfigurationAttributes) InternalWithRef(ref terra.Reference) StorageConfigurationAttributes {
	return StorageConfigurationAttributes{ref: ref}
}

func (sc StorageConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc StorageConfigurationAttributes) Efs() terra.ListValue[StorageConfigurationEfsAttributes] {
	return terra.ReferenceAsList[StorageConfigurationEfsAttributes](sc.ref.Append("efs"))
}

func (sc StorageConfigurationAttributes) Fsx() terra.ListValue[StorageConfigurationFsxAttributes] {
	return terra.ReferenceAsList[StorageConfigurationFsxAttributes](sc.ref.Append("fsx"))
}

type StorageConfigurationEfsAttributes struct {
	ref terra.Reference
}

func (e StorageConfigurationEfsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e StorageConfigurationEfsAttributes) InternalWithRef(ref terra.Reference) StorageConfigurationEfsAttributes {
	return StorageConfigurationEfsAttributes{ref: ref}
}

func (e StorageConfigurationEfsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e StorageConfigurationEfsAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("file_system_id"))
}

func (e StorageConfigurationEfsAttributes) MountPoint() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mount_point"))
}

type StorageConfigurationFsxAttributes struct {
	ref terra.Reference
}

func (f StorageConfigurationFsxAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f StorageConfigurationFsxAttributes) InternalWithRef(ref terra.Reference) StorageConfigurationFsxAttributes {
	return StorageConfigurationFsxAttributes{ref: ref}
}

func (f StorageConfigurationFsxAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f StorageConfigurationFsxAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("file_system_id"))
}

func (f StorageConfigurationFsxAttributes) MountPoint() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("mount_point"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type HighAvailabilityConfigState struct {
	DesiredCapacity float64 `json:"desired_capacity"`
}

type StorageConfigurationState struct {
	Efs []StorageConfigurationEfsState `json:"efs"`
	Fsx []StorageConfigurationFsxState `json:"fsx"`
}

type StorageConfigurationEfsState struct {
	FileSystemId string `json:"file_system_id"`
	MountPoint   string `json:"mount_point"`
}

type StorageConfigurationFsxState struct {
	FileSystemId string `json:"file_system_id"`
	MountPoint   string `json:"mount_point"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
