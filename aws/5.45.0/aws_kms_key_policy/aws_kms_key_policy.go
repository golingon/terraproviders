// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kms_key_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kms_key_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKmsKeyPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akkp *Resource) Type() string {
	return "aws_kms_key_policy"
}

// LocalName returns the local name for [Resource].
func (akkp *Resource) LocalName() string {
	return akkp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akkp *Resource) Configuration() interface{} {
	return akkp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akkp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akkp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akkp *Resource) Dependencies() terra.Dependencies {
	return akkp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akkp *Resource) LifecycleManagement() *terra.Lifecycle {
	return akkp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akkp *Resource) Attributes() awsKmsKeyPolicyAttributes {
	return awsKmsKeyPolicyAttributes{ref: terra.ReferenceResource(akkp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akkp *Resource) ImportState(state io.Reader) error {
	akkp.state = &awsKmsKeyPolicyState{}
	if err := json.NewDecoder(state).Decode(akkp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akkp.Type(), akkp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akkp *Resource) State() (*awsKmsKeyPolicyState, bool) {
	return akkp.state, akkp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akkp *Resource) StateMust() *awsKmsKeyPolicyState {
	if akkp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akkp.Type(), akkp.LocalName()))
	}
	return akkp.state
}

// Args contains the configurations for aws_kms_key_policy.
type Args struct {
	// BypassPolicyLockoutSafetyCheck: bool, optional
	BypassPolicyLockoutSafetyCheck terra.BoolValue `hcl:"bypass_policy_lockout_safety_check,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyId: string, required
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
}

type awsKmsKeyPolicyAttributes struct {
	ref terra.Reference
}

// BypassPolicyLockoutSafetyCheck returns a reference to field bypass_policy_lockout_safety_check of aws_kms_key_policy.
func (akkp awsKmsKeyPolicyAttributes) BypassPolicyLockoutSafetyCheck() terra.BoolValue {
	return terra.ReferenceAsBool(akkp.ref.Append("bypass_policy_lockout_safety_check"))
}

// Id returns a reference to field id of aws_kms_key_policy.
func (akkp awsKmsKeyPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akkp.ref.Append("id"))
}

// KeyId returns a reference to field key_id of aws_kms_key_policy.
func (akkp awsKmsKeyPolicyAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(akkp.ref.Append("key_id"))
}

// Policy returns a reference to field policy of aws_kms_key_policy.
func (akkp awsKmsKeyPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(akkp.ref.Append("policy"))
}

type awsKmsKeyPolicyState struct {
	BypassPolicyLockoutSafetyCheck bool   `json:"bypass_policy_lockout_safety_check"`
	Id                             string `json:"id"`
	KeyId                          string `json:"key_id"`
	Policy                         string `json:"policy"`
}
