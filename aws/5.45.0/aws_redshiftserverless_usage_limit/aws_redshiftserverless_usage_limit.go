// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshiftserverless_usage_limit

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_redshiftserverless_usage_limit.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRedshiftserverlessUsageLimitState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arul *Resource) Type() string {
	return "aws_redshiftserverless_usage_limit"
}

// LocalName returns the local name for [Resource].
func (arul *Resource) LocalName() string {
	return arul.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arul *Resource) Configuration() interface{} {
	return arul.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arul *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arul)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arul *Resource) Dependencies() terra.Dependencies {
	return arul.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arul *Resource) LifecycleManagement() *terra.Lifecycle {
	return arul.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arul *Resource) Attributes() awsRedshiftserverlessUsageLimitAttributes {
	return awsRedshiftserverlessUsageLimitAttributes{ref: terra.ReferenceResource(arul)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arul *Resource) ImportState(state io.Reader) error {
	arul.state = &awsRedshiftserverlessUsageLimitState{}
	if err := json.NewDecoder(state).Decode(arul.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arul.Type(), arul.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arul *Resource) State() (*awsRedshiftserverlessUsageLimitState, bool) {
	return arul.state, arul.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arul *Resource) StateMust() *awsRedshiftserverlessUsageLimitState {
	if arul.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arul.Type(), arul.LocalName()))
	}
	return arul.state
}

// Args contains the configurations for aws_redshiftserverless_usage_limit.
type Args struct {
	// Amount: number, required
	Amount terra.NumberValue `hcl:"amount,attr" validate:"required"`
	// BreachAction: string, optional
	BreachAction terra.StringValue `hcl:"breach_action,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Period: string, optional
	Period terra.StringValue `hcl:"period,attr"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// UsageType: string, required
	UsageType terra.StringValue `hcl:"usage_type,attr" validate:"required"`
}

type awsRedshiftserverlessUsageLimitAttributes struct {
	ref terra.Reference
}

// Amount returns a reference to field amount of aws_redshiftserverless_usage_limit.
func (arul awsRedshiftserverlessUsageLimitAttributes) Amount() terra.NumberValue {
	return terra.ReferenceAsNumber(arul.ref.Append("amount"))
}

// Arn returns a reference to field arn of aws_redshiftserverless_usage_limit.
func (arul awsRedshiftserverlessUsageLimitAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arul.ref.Append("arn"))
}

// BreachAction returns a reference to field breach_action of aws_redshiftserverless_usage_limit.
func (arul awsRedshiftserverlessUsageLimitAttributes) BreachAction() terra.StringValue {
	return terra.ReferenceAsString(arul.ref.Append("breach_action"))
}

// Id returns a reference to field id of aws_redshiftserverless_usage_limit.
func (arul awsRedshiftserverlessUsageLimitAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arul.ref.Append("id"))
}

// Period returns a reference to field period of aws_redshiftserverless_usage_limit.
func (arul awsRedshiftserverlessUsageLimitAttributes) Period() terra.StringValue {
	return terra.ReferenceAsString(arul.ref.Append("period"))
}

// ResourceArn returns a reference to field resource_arn of aws_redshiftserverless_usage_limit.
func (arul awsRedshiftserverlessUsageLimitAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(arul.ref.Append("resource_arn"))
}

// UsageType returns a reference to field usage_type of aws_redshiftserverless_usage_limit.
func (arul awsRedshiftserverlessUsageLimitAttributes) UsageType() terra.StringValue {
	return terra.ReferenceAsString(arul.ref.Append("usage_type"))
}

type awsRedshiftserverlessUsageLimitState struct {
	Amount       float64 `json:"amount"`
	Arn          string  `json:"arn"`
	BreachAction string  `json:"breach_action"`
	Id           string  `json:"id"`
	Period       string  `json:"period"`
	ResourceArn  string  `json:"resource_arn"`
	UsageType    string  `json:"usage_type"`
}
