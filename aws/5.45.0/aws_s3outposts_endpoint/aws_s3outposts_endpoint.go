// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3outposts_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3outposts_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3OutpostsEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ase *Resource) Type() string {
	return "aws_s3outposts_endpoint"
}

// LocalName returns the local name for [Resource].
func (ase *Resource) LocalName() string {
	return ase.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ase *Resource) Configuration() interface{} {
	return ase.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ase *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ase)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ase *Resource) Dependencies() terra.Dependencies {
	return ase.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ase *Resource) LifecycleManagement() *terra.Lifecycle {
	return ase.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ase *Resource) Attributes() awsS3OutpostsEndpointAttributes {
	return awsS3OutpostsEndpointAttributes{ref: terra.ReferenceResource(ase)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ase *Resource) ImportState(state io.Reader) error {
	ase.state = &awsS3OutpostsEndpointState{}
	if err := json.NewDecoder(state).Decode(ase.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ase.Type(), ase.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ase *Resource) State() (*awsS3OutpostsEndpointState, bool) {
	return ase.state, ase.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ase *Resource) StateMust() *awsS3OutpostsEndpointState {
	if ase.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ase.Type(), ase.LocalName()))
	}
	return ase.state
}

// Args contains the configurations for aws_s3outposts_endpoint.
type Args struct {
	// AccessType: string, optional
	AccessType terra.StringValue `hcl:"access_type,attr"`
	// CustomerOwnedIpv4Pool: string, optional
	CustomerOwnedIpv4Pool terra.StringValue `hcl:"customer_owned_ipv4_pool,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OutpostId: string, required
	OutpostId terra.StringValue `hcl:"outpost_id,attr" validate:"required"`
	// SecurityGroupId: string, required
	SecurityGroupId terra.StringValue `hcl:"security_group_id,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type awsS3OutpostsEndpointAttributes struct {
	ref terra.Reference
}

// AccessType returns a reference to field access_type of aws_s3outposts_endpoint.
func (ase awsS3OutpostsEndpointAttributes) AccessType() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("access_type"))
}

// Arn returns a reference to field arn of aws_s3outposts_endpoint.
func (ase awsS3OutpostsEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("arn"))
}

// CidrBlock returns a reference to field cidr_block of aws_s3outposts_endpoint.
func (ase awsS3OutpostsEndpointAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("cidr_block"))
}

// CreationTime returns a reference to field creation_time of aws_s3outposts_endpoint.
func (ase awsS3OutpostsEndpointAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("creation_time"))
}

// CustomerOwnedIpv4Pool returns a reference to field customer_owned_ipv4_pool of aws_s3outposts_endpoint.
func (ase awsS3OutpostsEndpointAttributes) CustomerOwnedIpv4Pool() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("customer_owned_ipv4_pool"))
}

// Id returns a reference to field id of aws_s3outposts_endpoint.
func (ase awsS3OutpostsEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("id"))
}

// OutpostId returns a reference to field outpost_id of aws_s3outposts_endpoint.
func (ase awsS3OutpostsEndpointAttributes) OutpostId() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("outpost_id"))
}

// SecurityGroupId returns a reference to field security_group_id of aws_s3outposts_endpoint.
func (ase awsS3OutpostsEndpointAttributes) SecurityGroupId() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("security_group_id"))
}

// SubnetId returns a reference to field subnet_id of aws_s3outposts_endpoint.
func (ase awsS3OutpostsEndpointAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ase.ref.Append("subnet_id"))
}

func (ase awsS3OutpostsEndpointAttributes) NetworkInterfaces() terra.SetValue[NetworkInterfacesAttributes] {
	return terra.ReferenceAsSet[NetworkInterfacesAttributes](ase.ref.Append("network_interfaces"))
}

type awsS3OutpostsEndpointState struct {
	AccessType            string                   `json:"access_type"`
	Arn                   string                   `json:"arn"`
	CidrBlock             string                   `json:"cidr_block"`
	CreationTime          string                   `json:"creation_time"`
	CustomerOwnedIpv4Pool string                   `json:"customer_owned_ipv4_pool"`
	Id                    string                   `json:"id"`
	OutpostId             string                   `json:"outpost_id"`
	SecurityGroupId       string                   `json:"security_group_id"`
	SubnetId              string                   `json:"subnet_id"`
	NetworkInterfaces     []NetworkInterfacesState `json:"network_interfaces"`
}
