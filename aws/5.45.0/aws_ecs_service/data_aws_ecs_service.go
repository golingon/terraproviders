// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecs_service

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_ecs_service.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aes *DataSource) DataSource() string {
	return "aws_ecs_service"
}

// LocalName returns the local name for [DataSource].
func (aes *DataSource) LocalName() string {
	return aes.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aes *DataSource) Configuration() interface{} {
	return aes.Args
}

// Attributes returns the attributes for [DataSource].
func (aes *DataSource) Attributes() dataAwsEcsServiceAttributes {
	return dataAwsEcsServiceAttributes{ref: terra.ReferenceDataSource(aes)}
}

// DataArgs contains the configurations for aws_ecs_service.
type DataArgs struct {
	// ClusterArn: string, required
	ClusterArn terra.StringValue `hcl:"cluster_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type dataAwsEcsServiceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ecs_service.
func (aes dataAwsEcsServiceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("arn"))
}

// ClusterArn returns a reference to field cluster_arn of aws_ecs_service.
func (aes dataAwsEcsServiceAttributes) ClusterArn() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("cluster_arn"))
}

// DesiredCount returns a reference to field desired_count of aws_ecs_service.
func (aes dataAwsEcsServiceAttributes) DesiredCount() terra.NumberValue {
	return terra.ReferenceAsNumber(aes.ref.Append("desired_count"))
}

// Id returns a reference to field id of aws_ecs_service.
func (aes dataAwsEcsServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("id"))
}

// LaunchType returns a reference to field launch_type of aws_ecs_service.
func (aes dataAwsEcsServiceAttributes) LaunchType() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("launch_type"))
}

// SchedulingStrategy returns a reference to field scheduling_strategy of aws_ecs_service.
func (aes dataAwsEcsServiceAttributes) SchedulingStrategy() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("scheduling_strategy"))
}

// ServiceName returns a reference to field service_name of aws_ecs_service.
func (aes dataAwsEcsServiceAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("service_name"))
}

// Tags returns a reference to field tags of aws_ecs_service.
func (aes dataAwsEcsServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aes.ref.Append("tags"))
}

// TaskDefinition returns a reference to field task_definition of aws_ecs_service.
func (aes dataAwsEcsServiceAttributes) TaskDefinition() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("task_definition"))
}
