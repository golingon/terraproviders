// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datapipeline_pipeline_definition

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_datapipeline_pipeline_definition.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDatapipelinePipelineDefinitionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adpd *Resource) Type() string {
	return "aws_datapipeline_pipeline_definition"
}

// LocalName returns the local name for [Resource].
func (adpd *Resource) LocalName() string {
	return adpd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adpd *Resource) Configuration() interface{} {
	return adpd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adpd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adpd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adpd *Resource) Dependencies() terra.Dependencies {
	return adpd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adpd *Resource) LifecycleManagement() *terra.Lifecycle {
	return adpd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adpd *Resource) Attributes() awsDatapipelinePipelineDefinitionAttributes {
	return awsDatapipelinePipelineDefinitionAttributes{ref: terra.ReferenceResource(adpd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adpd *Resource) ImportState(state io.Reader) error {
	adpd.state = &awsDatapipelinePipelineDefinitionState{}
	if err := json.NewDecoder(state).Decode(adpd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adpd.Type(), adpd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adpd *Resource) State() (*awsDatapipelinePipelineDefinitionState, bool) {
	return adpd.state, adpd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adpd *Resource) StateMust() *awsDatapipelinePipelineDefinitionState {
	if adpd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adpd.Type(), adpd.LocalName()))
	}
	return adpd.state
}

// Args contains the configurations for aws_datapipeline_pipeline_definition.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PipelineId: string, required
	PipelineId terra.StringValue `hcl:"pipeline_id,attr" validate:"required"`
	// ParameterObject: min=0
	ParameterObject []ParameterObject `hcl:"parameter_object,block" validate:"min=0"`
	// ParameterValue: min=0
	ParameterValue []ParameterValue `hcl:"parameter_value,block" validate:"min=0"`
	// PipelineObject: min=1
	PipelineObject []PipelineObject `hcl:"pipeline_object,block" validate:"min=1"`
}

type awsDatapipelinePipelineDefinitionAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_datapipeline_pipeline_definition.
func (adpd awsDatapipelinePipelineDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adpd.ref.Append("id"))
}

// PipelineId returns a reference to field pipeline_id of aws_datapipeline_pipeline_definition.
func (adpd awsDatapipelinePipelineDefinitionAttributes) PipelineId() terra.StringValue {
	return terra.ReferenceAsString(adpd.ref.Append("pipeline_id"))
}

func (adpd awsDatapipelinePipelineDefinitionAttributes) ParameterObject() terra.SetValue[ParameterObjectAttributes] {
	return terra.ReferenceAsSet[ParameterObjectAttributes](adpd.ref.Append("parameter_object"))
}

func (adpd awsDatapipelinePipelineDefinitionAttributes) ParameterValue() terra.SetValue[ParameterValueAttributes] {
	return terra.ReferenceAsSet[ParameterValueAttributes](adpd.ref.Append("parameter_value"))
}

func (adpd awsDatapipelinePipelineDefinitionAttributes) PipelineObject() terra.SetValue[PipelineObjectAttributes] {
	return terra.ReferenceAsSet[PipelineObjectAttributes](adpd.ref.Append("pipeline_object"))
}

type awsDatapipelinePipelineDefinitionState struct {
	Id              string                 `json:"id"`
	PipelineId      string                 `json:"pipeline_id"`
	ParameterObject []ParameterObjectState `json:"parameter_object"`
	ParameterValue  []ParameterValueState  `json:"parameter_value"`
	PipelineObject  []PipelineObjectState  `json:"pipeline_object"`
}
