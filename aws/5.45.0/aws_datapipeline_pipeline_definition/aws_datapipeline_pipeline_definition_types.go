// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datapipeline_pipeline_definition

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ParameterObject struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// ParameterObjectAttribute: min=0
	Attribute []ParameterObjectAttribute `hcl:"attribute,block" validate:"min=0"`
}

type ParameterObjectAttribute struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// StringValue: string, required
	StringValue terra.StringValue `hcl:"string_value,attr" validate:"required"`
}

type ParameterValue struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// StringValue: string, required
	StringValue terra.StringValue `hcl:"string_value,attr" validate:"required"`
}

type PipelineObject struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PipelineObjectField: min=0
	Field []PipelineObjectField `hcl:"field,block" validate:"min=0"`
}

type PipelineObjectField struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// RefValue: string, optional
	RefValue terra.StringValue `hcl:"ref_value,attr"`
	// StringValue: string, optional
	StringValue terra.StringValue `hcl:"string_value,attr"`
}

type ParameterObjectAttributes struct {
	ref terra.Reference
}

func (po ParameterObjectAttributes) InternalRef() (terra.Reference, error) {
	return po.ref, nil
}

func (po ParameterObjectAttributes) InternalWithRef(ref terra.Reference) ParameterObjectAttributes {
	return ParameterObjectAttributes{ref: ref}
}

func (po ParameterObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return po.ref.InternalTokens()
}

func (po ParameterObjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(po.ref.Append("id"))
}

func (po ParameterObjectAttributes) Attribute() terra.SetValue[ParameterObjectAttributeAttributes] {
	return terra.ReferenceAsSet[ParameterObjectAttributeAttributes](po.ref.Append("attribute"))
}

type ParameterObjectAttributeAttributes struct {
	ref terra.Reference
}

func (a ParameterObjectAttributeAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ParameterObjectAttributeAttributes) InternalWithRef(ref terra.Reference) ParameterObjectAttributeAttributes {
	return ParameterObjectAttributeAttributes{ref: ref}
}

func (a ParameterObjectAttributeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ParameterObjectAttributeAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("key"))
}

func (a ParameterObjectAttributeAttributes) StringValue() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("string_value"))
}

type ParameterValueAttributes struct {
	ref terra.Reference
}

func (pv ParameterValueAttributes) InternalRef() (terra.Reference, error) {
	return pv.ref, nil
}

func (pv ParameterValueAttributes) InternalWithRef(ref terra.Reference) ParameterValueAttributes {
	return ParameterValueAttributes{ref: ref}
}

func (pv ParameterValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pv.ref.InternalTokens()
}

func (pv ParameterValueAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pv.ref.Append("id"))
}

func (pv ParameterValueAttributes) StringValue() terra.StringValue {
	return terra.ReferenceAsString(pv.ref.Append("string_value"))
}

type PipelineObjectAttributes struct {
	ref terra.Reference
}

func (po PipelineObjectAttributes) InternalRef() (terra.Reference, error) {
	return po.ref, nil
}

func (po PipelineObjectAttributes) InternalWithRef(ref terra.Reference) PipelineObjectAttributes {
	return PipelineObjectAttributes{ref: ref}
}

func (po PipelineObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return po.ref.InternalTokens()
}

func (po PipelineObjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(po.ref.Append("id"))
}

func (po PipelineObjectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(po.ref.Append("name"))
}

func (po PipelineObjectAttributes) Field() terra.SetValue[PipelineObjectFieldAttributes] {
	return terra.ReferenceAsSet[PipelineObjectFieldAttributes](po.ref.Append("field"))
}

type PipelineObjectFieldAttributes struct {
	ref terra.Reference
}

func (f PipelineObjectFieldAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f PipelineObjectFieldAttributes) InternalWithRef(ref terra.Reference) PipelineObjectFieldAttributes {
	return PipelineObjectFieldAttributes{ref: ref}
}

func (f PipelineObjectFieldAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f PipelineObjectFieldAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("key"))
}

func (f PipelineObjectFieldAttributes) RefValue() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("ref_value"))
}

func (f PipelineObjectFieldAttributes) StringValue() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("string_value"))
}

type ParameterObjectState struct {
	Id        string                          `json:"id"`
	Attribute []ParameterObjectAttributeState `json:"attribute"`
}

type ParameterObjectAttributeState struct {
	Key         string `json:"key"`
	StringValue string `json:"string_value"`
}

type ParameterValueState struct {
	Id          string `json:"id"`
	StringValue string `json:"string_value"`
}

type PipelineObjectState struct {
	Id    string                     `json:"id"`
	Name  string                     `json:"name"`
	Field []PipelineObjectFieldState `json:"field"`
}

type PipelineObjectFieldState struct {
	Key         string `json:"key"`
	RefValue    string `json:"ref_value"`
	StringValue string `json:"string_value"`
}
