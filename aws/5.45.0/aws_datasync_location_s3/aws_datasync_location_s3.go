// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datasync_location_s3

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_datasync_location_s3.
type Resource struct {
	Name      string
	Args      Args
	state     *awsDatasyncLocationS3State
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adls *Resource) Type() string {
	return "aws_datasync_location_s3"
}

// LocalName returns the local name for [Resource].
func (adls *Resource) LocalName() string {
	return adls.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adls *Resource) Configuration() interface{} {
	return adls.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adls *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adls)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adls *Resource) Dependencies() terra.Dependencies {
	return adls.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adls *Resource) LifecycleManagement() *terra.Lifecycle {
	return adls.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adls *Resource) Attributes() awsDatasyncLocationS3Attributes {
	return awsDatasyncLocationS3Attributes{ref: terra.ReferenceResource(adls)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adls *Resource) ImportState(state io.Reader) error {
	adls.state = &awsDatasyncLocationS3State{}
	if err := json.NewDecoder(state).Decode(adls.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adls.Type(), adls.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adls *Resource) State() (*awsDatasyncLocationS3State, bool) {
	return adls.state, adls.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adls *Resource) StateMust() *awsDatasyncLocationS3State {
	if adls.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adls.Type(), adls.LocalName()))
	}
	return adls.state
}

// Args contains the configurations for aws_datasync_location_s3.
type Args struct {
	// AgentArns: set of string, optional
	AgentArns terra.SetValue[terra.StringValue] `hcl:"agent_arns,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// S3BucketArn: string, required
	S3BucketArn terra.StringValue `hcl:"s3_bucket_arn,attr" validate:"required"`
	// S3StorageClass: string, optional
	S3StorageClass terra.StringValue `hcl:"s3_storage_class,attr"`
	// Subdirectory: string, required
	Subdirectory terra.StringValue `hcl:"subdirectory,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// S3Config: required
	S3Config *S3Config `hcl:"s3_config,block" validate:"required"`
}

type awsDatasyncLocationS3Attributes struct {
	ref terra.Reference
}

// AgentArns returns a reference to field agent_arns of aws_datasync_location_s3.
func (adls awsDatasyncLocationS3Attributes) AgentArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adls.ref.Append("agent_arns"))
}

// Arn returns a reference to field arn of aws_datasync_location_s3.
func (adls awsDatasyncLocationS3Attributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adls.ref.Append("arn"))
}

// Id returns a reference to field id of aws_datasync_location_s3.
func (adls awsDatasyncLocationS3Attributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adls.ref.Append("id"))
}

// S3BucketArn returns a reference to field s3_bucket_arn of aws_datasync_location_s3.
func (adls awsDatasyncLocationS3Attributes) S3BucketArn() terra.StringValue {
	return terra.ReferenceAsString(adls.ref.Append("s3_bucket_arn"))
}

// S3StorageClass returns a reference to field s3_storage_class of aws_datasync_location_s3.
func (adls awsDatasyncLocationS3Attributes) S3StorageClass() terra.StringValue {
	return terra.ReferenceAsString(adls.ref.Append("s3_storage_class"))
}

// Subdirectory returns a reference to field subdirectory of aws_datasync_location_s3.
func (adls awsDatasyncLocationS3Attributes) Subdirectory() terra.StringValue {
	return terra.ReferenceAsString(adls.ref.Append("subdirectory"))
}

// Tags returns a reference to field tags of aws_datasync_location_s3.
func (adls awsDatasyncLocationS3Attributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adls.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_datasync_location_s3.
func (adls awsDatasyncLocationS3Attributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adls.ref.Append("tags_all"))
}

// Uri returns a reference to field uri of aws_datasync_location_s3.
func (adls awsDatasyncLocationS3Attributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(adls.ref.Append("uri"))
}

func (adls awsDatasyncLocationS3Attributes) S3Config() terra.ListValue[S3ConfigAttributes] {
	return terra.ReferenceAsList[S3ConfigAttributes](adls.ref.Append("s3_config"))
}

type awsDatasyncLocationS3State struct {
	AgentArns      []string          `json:"agent_arns"`
	Arn            string            `json:"arn"`
	Id             string            `json:"id"`
	S3BucketArn    string            `json:"s3_bucket_arn"`
	S3StorageClass string            `json:"s3_storage_class"`
	Subdirectory   string            `json:"subdirectory"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
	Uri            string            `json:"uri"`
	S3Config       []S3ConfigState   `json:"s3_config"`
}
