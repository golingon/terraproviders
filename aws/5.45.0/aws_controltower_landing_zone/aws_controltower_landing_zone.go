// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_controltower_landing_zone

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_controltower_landing_zone.
type Resource struct {
	Name      string
	Args      Args
	state     *awsControltowerLandingZoneState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aclz *Resource) Type() string {
	return "aws_controltower_landing_zone"
}

// LocalName returns the local name for [Resource].
func (aclz *Resource) LocalName() string {
	return aclz.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aclz *Resource) Configuration() interface{} {
	return aclz.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aclz *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aclz)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aclz *Resource) Dependencies() terra.Dependencies {
	return aclz.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aclz *Resource) LifecycleManagement() *terra.Lifecycle {
	return aclz.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aclz *Resource) Attributes() awsControltowerLandingZoneAttributes {
	return awsControltowerLandingZoneAttributes{ref: terra.ReferenceResource(aclz)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aclz *Resource) ImportState(state io.Reader) error {
	aclz.state = &awsControltowerLandingZoneState{}
	if err := json.NewDecoder(state).Decode(aclz.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aclz.Type(), aclz.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aclz *Resource) State() (*awsControltowerLandingZoneState, bool) {
	return aclz.state, aclz.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aclz *Resource) StateMust() *awsControltowerLandingZoneState {
	if aclz.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aclz.Type(), aclz.LocalName()))
	}
	return aclz.state
}

// Args contains the configurations for aws_controltower_landing_zone.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManifestJson: string, required
	ManifestJson terra.StringValue `hcl:"manifest_json,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsControltowerLandingZoneAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_controltower_landing_zone.
func (aclz awsControltowerLandingZoneAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aclz.ref.Append("arn"))
}

// Id returns a reference to field id of aws_controltower_landing_zone.
func (aclz awsControltowerLandingZoneAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aclz.ref.Append("id"))
}

// LatestAvailableVersion returns a reference to field latest_available_version of aws_controltower_landing_zone.
func (aclz awsControltowerLandingZoneAttributes) LatestAvailableVersion() terra.StringValue {
	return terra.ReferenceAsString(aclz.ref.Append("latest_available_version"))
}

// ManifestJson returns a reference to field manifest_json of aws_controltower_landing_zone.
func (aclz awsControltowerLandingZoneAttributes) ManifestJson() terra.StringValue {
	return terra.ReferenceAsString(aclz.ref.Append("manifest_json"))
}

// Tags returns a reference to field tags of aws_controltower_landing_zone.
func (aclz awsControltowerLandingZoneAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aclz.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_controltower_landing_zone.
func (aclz awsControltowerLandingZoneAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aclz.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_controltower_landing_zone.
func (aclz awsControltowerLandingZoneAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(aclz.ref.Append("version"))
}

func (aclz awsControltowerLandingZoneAttributes) DriftStatus() terra.ListValue[DriftStatusAttributes] {
	return terra.ReferenceAsList[DriftStatusAttributes](aclz.ref.Append("drift_status"))
}

func (aclz awsControltowerLandingZoneAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aclz.ref.Append("timeouts"))
}

type awsControltowerLandingZoneState struct {
	Arn                    string             `json:"arn"`
	Id                     string             `json:"id"`
	LatestAvailableVersion string             `json:"latest_available_version"`
	ManifestJson           string             `json:"manifest_json"`
	Tags                   map[string]string  `json:"tags"`
	TagsAll                map[string]string  `json:"tags_all"`
	Version                string             `json:"version"`
	DriftStatus            []DriftStatusState `json:"drift_status"`
	Timeouts               *TimeoutsState     `json:"timeouts"`
}
