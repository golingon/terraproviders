// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_event_archive

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudwatch_event_archive.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudwatchEventArchiveState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acea *Resource) Type() string {
	return "aws_cloudwatch_event_archive"
}

// LocalName returns the local name for [Resource].
func (acea *Resource) LocalName() string {
	return acea.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acea *Resource) Configuration() interface{} {
	return acea.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acea *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acea)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acea *Resource) Dependencies() terra.Dependencies {
	return acea.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acea *Resource) LifecycleManagement() *terra.Lifecycle {
	return acea.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acea *Resource) Attributes() awsCloudwatchEventArchiveAttributes {
	return awsCloudwatchEventArchiveAttributes{ref: terra.ReferenceResource(acea)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acea *Resource) ImportState(state io.Reader) error {
	acea.state = &awsCloudwatchEventArchiveState{}
	if err := json.NewDecoder(state).Decode(acea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acea.Type(), acea.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acea *Resource) State() (*awsCloudwatchEventArchiveState, bool) {
	return acea.state, acea.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acea *Resource) StateMust() *awsCloudwatchEventArchiveState {
	if acea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acea.Type(), acea.LocalName()))
	}
	return acea.state
}

// Args contains the configurations for aws_cloudwatch_event_archive.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EventPattern: string, optional
	EventPattern terra.StringValue `hcl:"event_pattern,attr"`
	// EventSourceArn: string, required
	EventSourceArn terra.StringValue `hcl:"event_source_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RetentionDays: number, optional
	RetentionDays terra.NumberValue `hcl:"retention_days,attr"`
}

type awsCloudwatchEventArchiveAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudwatch_event_archive.
func (acea awsCloudwatchEventArchiveAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acea.ref.Append("arn"))
}

// Description returns a reference to field description of aws_cloudwatch_event_archive.
func (acea awsCloudwatchEventArchiveAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acea.ref.Append("description"))
}

// EventPattern returns a reference to field event_pattern of aws_cloudwatch_event_archive.
func (acea awsCloudwatchEventArchiveAttributes) EventPattern() terra.StringValue {
	return terra.ReferenceAsString(acea.ref.Append("event_pattern"))
}

// EventSourceArn returns a reference to field event_source_arn of aws_cloudwatch_event_archive.
func (acea awsCloudwatchEventArchiveAttributes) EventSourceArn() terra.StringValue {
	return terra.ReferenceAsString(acea.ref.Append("event_source_arn"))
}

// Id returns a reference to field id of aws_cloudwatch_event_archive.
func (acea awsCloudwatchEventArchiveAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acea.ref.Append("id"))
}

// Name returns a reference to field name of aws_cloudwatch_event_archive.
func (acea awsCloudwatchEventArchiveAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acea.ref.Append("name"))
}

// RetentionDays returns a reference to field retention_days of aws_cloudwatch_event_archive.
func (acea awsCloudwatchEventArchiveAttributes) RetentionDays() terra.NumberValue {
	return terra.ReferenceAsNumber(acea.ref.Append("retention_days"))
}

type awsCloudwatchEventArchiveState struct {
	Arn            string  `json:"arn"`
	Description    string  `json:"description"`
	EventPattern   string  `json:"event_pattern"`
	EventSourceArn string  `json:"event_source_arn"`
	Id             string  `json:"id"`
	Name           string  `json:"name"`
	RetentionDays  float64 `json:"retention_days"`
}
