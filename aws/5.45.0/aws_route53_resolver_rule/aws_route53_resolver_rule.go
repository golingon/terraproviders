// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_resolver_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_route53_resolver_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53ResolverRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arrr *Resource) Type() string {
	return "aws_route53_resolver_rule"
}

// LocalName returns the local name for [Resource].
func (arrr *Resource) LocalName() string {
	return arrr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arrr *Resource) Configuration() interface{} {
	return arrr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arrr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arrr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arrr *Resource) Dependencies() terra.Dependencies {
	return arrr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arrr *Resource) LifecycleManagement() *terra.Lifecycle {
	return arrr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arrr *Resource) Attributes() awsRoute53ResolverRuleAttributes {
	return awsRoute53ResolverRuleAttributes{ref: terra.ReferenceResource(arrr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arrr *Resource) ImportState(state io.Reader) error {
	arrr.state = &awsRoute53ResolverRuleState{}
	if err := json.NewDecoder(state).Decode(arrr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arrr.Type(), arrr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arrr *Resource) State() (*awsRoute53ResolverRuleState, bool) {
	return arrr.state, arrr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arrr *Resource) StateMust() *awsRoute53ResolverRuleState {
	if arrr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arrr.Type(), arrr.LocalName()))
	}
	return arrr.state
}

// Args contains the configurations for aws_route53_resolver_rule.
type Args struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ResolverEndpointId: string, optional
	ResolverEndpointId terra.StringValue `hcl:"resolver_endpoint_id,attr"`
	// RuleType: string, required
	RuleType terra.StringValue `hcl:"rule_type,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetIp: min=0
	TargetIp []TargetIp `hcl:"target_ip,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRoute53ResolverRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_route53_resolver_rule.
func (arrr awsRoute53ResolverRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arrr.ref.Append("arn"))
}

// DomainName returns a reference to field domain_name of aws_route53_resolver_rule.
func (arrr awsRoute53ResolverRuleAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(arrr.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_route53_resolver_rule.
func (arrr awsRoute53ResolverRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arrr.ref.Append("id"))
}

// Name returns a reference to field name of aws_route53_resolver_rule.
func (arrr awsRoute53ResolverRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arrr.ref.Append("name"))
}

// OwnerId returns a reference to field owner_id of aws_route53_resolver_rule.
func (arrr awsRoute53ResolverRuleAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(arrr.ref.Append("owner_id"))
}

// ResolverEndpointId returns a reference to field resolver_endpoint_id of aws_route53_resolver_rule.
func (arrr awsRoute53ResolverRuleAttributes) ResolverEndpointId() terra.StringValue {
	return terra.ReferenceAsString(arrr.ref.Append("resolver_endpoint_id"))
}

// RuleType returns a reference to field rule_type of aws_route53_resolver_rule.
func (arrr awsRoute53ResolverRuleAttributes) RuleType() terra.StringValue {
	return terra.ReferenceAsString(arrr.ref.Append("rule_type"))
}

// ShareStatus returns a reference to field share_status of aws_route53_resolver_rule.
func (arrr awsRoute53ResolverRuleAttributes) ShareStatus() terra.StringValue {
	return terra.ReferenceAsString(arrr.ref.Append("share_status"))
}

// Tags returns a reference to field tags of aws_route53_resolver_rule.
func (arrr awsRoute53ResolverRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arrr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_route53_resolver_rule.
func (arrr awsRoute53ResolverRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arrr.ref.Append("tags_all"))
}

func (arrr awsRoute53ResolverRuleAttributes) TargetIp() terra.SetValue[TargetIpAttributes] {
	return terra.ReferenceAsSet[TargetIpAttributes](arrr.ref.Append("target_ip"))
}

func (arrr awsRoute53ResolverRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arrr.ref.Append("timeouts"))
}

type awsRoute53ResolverRuleState struct {
	Arn                string            `json:"arn"`
	DomainName         string            `json:"domain_name"`
	Id                 string            `json:"id"`
	Name               string            `json:"name"`
	OwnerId            string            `json:"owner_id"`
	ResolverEndpointId string            `json:"resolver_endpoint_id"`
	RuleType           string            `json:"rule_type"`
	ShareStatus        string            `json:"share_status"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
	TargetIp           []TargetIpState   `json:"target_ip"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
