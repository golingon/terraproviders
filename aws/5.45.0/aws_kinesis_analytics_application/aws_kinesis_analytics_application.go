// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kinesis_analytics_application

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kinesis_analytics_application.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKinesisAnalyticsApplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (akaa *Resource) Type() string {
	return "aws_kinesis_analytics_application"
}

// LocalName returns the local name for [Resource].
func (akaa *Resource) LocalName() string {
	return akaa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (akaa *Resource) Configuration() interface{} {
	return akaa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (akaa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(akaa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (akaa *Resource) Dependencies() terra.Dependencies {
	return akaa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (akaa *Resource) LifecycleManagement() *terra.Lifecycle {
	return akaa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (akaa *Resource) Attributes() awsKinesisAnalyticsApplicationAttributes {
	return awsKinesisAnalyticsApplicationAttributes{ref: terra.ReferenceResource(akaa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (akaa *Resource) ImportState(state io.Reader) error {
	akaa.state = &awsKinesisAnalyticsApplicationState{}
	if err := json.NewDecoder(state).Decode(akaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", akaa.Type(), akaa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (akaa *Resource) State() (*awsKinesisAnalyticsApplicationState, bool) {
	return akaa.state, akaa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (akaa *Resource) StateMust() *awsKinesisAnalyticsApplicationState {
	if akaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", akaa.Type(), akaa.LocalName()))
	}
	return akaa.state
}

// Args contains the configurations for aws_kinesis_analytics_application.
type Args struct {
	// Code: string, optional
	Code terra.StringValue `hcl:"code,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StartApplication: bool, optional
	StartApplication terra.BoolValue `hcl:"start_application,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *CloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// Inputs: optional
	Inputs *Inputs `hcl:"inputs,block"`
	// Outputs: min=0,max=3
	Outputs []Outputs `hcl:"outputs,block" validate:"min=0,max=3"`
	// ReferenceDataSources: optional
	ReferenceDataSources *ReferenceDataSources `hcl:"reference_data_sources,block"`
}

type awsKinesisAnalyticsApplicationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_kinesis_analytics_application.
func (akaa awsKinesisAnalyticsApplicationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(akaa.ref.Append("arn"))
}

// Code returns a reference to field code of aws_kinesis_analytics_application.
func (akaa awsKinesisAnalyticsApplicationAttributes) Code() terra.StringValue {
	return terra.ReferenceAsString(akaa.ref.Append("code"))
}

// CreateTimestamp returns a reference to field create_timestamp of aws_kinesis_analytics_application.
func (akaa awsKinesisAnalyticsApplicationAttributes) CreateTimestamp() terra.StringValue {
	return terra.ReferenceAsString(akaa.ref.Append("create_timestamp"))
}

// Description returns a reference to field description of aws_kinesis_analytics_application.
func (akaa awsKinesisAnalyticsApplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(akaa.ref.Append("description"))
}

// Id returns a reference to field id of aws_kinesis_analytics_application.
func (akaa awsKinesisAnalyticsApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akaa.ref.Append("id"))
}

// LastUpdateTimestamp returns a reference to field last_update_timestamp of aws_kinesis_analytics_application.
func (akaa awsKinesisAnalyticsApplicationAttributes) LastUpdateTimestamp() terra.StringValue {
	return terra.ReferenceAsString(akaa.ref.Append("last_update_timestamp"))
}

// Name returns a reference to field name of aws_kinesis_analytics_application.
func (akaa awsKinesisAnalyticsApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(akaa.ref.Append("name"))
}

// StartApplication returns a reference to field start_application of aws_kinesis_analytics_application.
func (akaa awsKinesisAnalyticsApplicationAttributes) StartApplication() terra.BoolValue {
	return terra.ReferenceAsBool(akaa.ref.Append("start_application"))
}

// Status returns a reference to field status of aws_kinesis_analytics_application.
func (akaa awsKinesisAnalyticsApplicationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(akaa.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_kinesis_analytics_application.
func (akaa awsKinesisAnalyticsApplicationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akaa.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_kinesis_analytics_application.
func (akaa awsKinesisAnalyticsApplicationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akaa.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_kinesis_analytics_application.
func (akaa awsKinesisAnalyticsApplicationAttributes) Version() terra.NumberValue {
	return terra.ReferenceAsNumber(akaa.ref.Append("version"))
}

func (akaa awsKinesisAnalyticsApplicationAttributes) CloudwatchLoggingOptions() terra.ListValue[CloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[CloudwatchLoggingOptionsAttributes](akaa.ref.Append("cloudwatch_logging_options"))
}

func (akaa awsKinesisAnalyticsApplicationAttributes) Inputs() terra.ListValue[InputsAttributes] {
	return terra.ReferenceAsList[InputsAttributes](akaa.ref.Append("inputs"))
}

func (akaa awsKinesisAnalyticsApplicationAttributes) Outputs() terra.SetValue[OutputsAttributes] {
	return terra.ReferenceAsSet[OutputsAttributes](akaa.ref.Append("outputs"))
}

func (akaa awsKinesisAnalyticsApplicationAttributes) ReferenceDataSources() terra.ListValue[ReferenceDataSourcesAttributes] {
	return terra.ReferenceAsList[ReferenceDataSourcesAttributes](akaa.ref.Append("reference_data_sources"))
}

type awsKinesisAnalyticsApplicationState struct {
	Arn                      string                          `json:"arn"`
	Code                     string                          `json:"code"`
	CreateTimestamp          string                          `json:"create_timestamp"`
	Description              string                          `json:"description"`
	Id                       string                          `json:"id"`
	LastUpdateTimestamp      string                          `json:"last_update_timestamp"`
	Name                     string                          `json:"name"`
	StartApplication         bool                            `json:"start_application"`
	Status                   string                          `json:"status"`
	Tags                     map[string]string               `json:"tags"`
	TagsAll                  map[string]string               `json:"tags_all"`
	Version                  float64                         `json:"version"`
	CloudwatchLoggingOptions []CloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	Inputs                   []InputsState                   `json:"inputs"`
	Outputs                  []OutputsState                  `json:"outputs"`
	ReferenceDataSources     []ReferenceDataSourcesState     `json:"reference_data_sources"`
}
