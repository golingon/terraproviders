// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_autoscaling_group_tag

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_autoscaling_group_tag.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAutoscalingGroupTagState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aagt *Resource) Type() string {
	return "aws_autoscaling_group_tag"
}

// LocalName returns the local name for [Resource].
func (aagt *Resource) LocalName() string {
	return aagt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aagt *Resource) Configuration() interface{} {
	return aagt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aagt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aagt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aagt *Resource) Dependencies() terra.Dependencies {
	return aagt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aagt *Resource) LifecycleManagement() *terra.Lifecycle {
	return aagt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aagt *Resource) Attributes() awsAutoscalingGroupTagAttributes {
	return awsAutoscalingGroupTagAttributes{ref: terra.ReferenceResource(aagt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aagt *Resource) ImportState(state io.Reader) error {
	aagt.state = &awsAutoscalingGroupTagState{}
	if err := json.NewDecoder(state).Decode(aagt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aagt.Type(), aagt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aagt *Resource) State() (*awsAutoscalingGroupTagState, bool) {
	return aagt.state, aagt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aagt *Resource) StateMust() *awsAutoscalingGroupTagState {
	if aagt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aagt.Type(), aagt.LocalName()))
	}
	return aagt.state
}

// Args contains the configurations for aws_autoscaling_group_tag.
type Args struct {
	// AutoscalingGroupName: string, required
	AutoscalingGroupName terra.StringValue `hcl:"autoscaling_group_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tag: required
	Tag *Tag `hcl:"tag,block" validate:"required"`
}

type awsAutoscalingGroupTagAttributes struct {
	ref terra.Reference
}

// AutoscalingGroupName returns a reference to field autoscaling_group_name of aws_autoscaling_group_tag.
func (aagt awsAutoscalingGroupTagAttributes) AutoscalingGroupName() terra.StringValue {
	return terra.ReferenceAsString(aagt.ref.Append("autoscaling_group_name"))
}

// Id returns a reference to field id of aws_autoscaling_group_tag.
func (aagt awsAutoscalingGroupTagAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aagt.ref.Append("id"))
}

func (aagt awsAutoscalingGroupTagAttributes) Tag() terra.ListValue[TagAttributes] {
	return terra.ReferenceAsList[TagAttributes](aagt.ref.Append("tag"))
}

type awsAutoscalingGroupTagState struct {
	AutoscalingGroupName string     `json:"autoscaling_group_name"`
	Id                   string     `json:"id"`
	Tag                  []TagState `json:"tag"`
}
