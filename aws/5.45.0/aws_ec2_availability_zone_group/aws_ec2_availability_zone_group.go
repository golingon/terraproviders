// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_availability_zone_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_availability_zone_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2AvailabilityZoneGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeazg *Resource) Type() string {
	return "aws_ec2_availability_zone_group"
}

// LocalName returns the local name for [Resource].
func (aeazg *Resource) LocalName() string {
	return aeazg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeazg *Resource) Configuration() interface{} {
	return aeazg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeazg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeazg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeazg *Resource) Dependencies() terra.Dependencies {
	return aeazg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeazg *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeazg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeazg *Resource) Attributes() awsEc2AvailabilityZoneGroupAttributes {
	return awsEc2AvailabilityZoneGroupAttributes{ref: terra.ReferenceResource(aeazg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeazg *Resource) ImportState(state io.Reader) error {
	aeazg.state = &awsEc2AvailabilityZoneGroupState{}
	if err := json.NewDecoder(state).Decode(aeazg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeazg.Type(), aeazg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeazg *Resource) State() (*awsEc2AvailabilityZoneGroupState, bool) {
	return aeazg.state, aeazg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeazg *Resource) StateMust() *awsEc2AvailabilityZoneGroupState {
	if aeazg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeazg.Type(), aeazg.LocalName()))
	}
	return aeazg.state
}

// Args contains the configurations for aws_ec2_availability_zone_group.
type Args struct {
	// GroupName: string, required
	GroupName terra.StringValue `hcl:"group_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OptInStatus: string, required
	OptInStatus terra.StringValue `hcl:"opt_in_status,attr" validate:"required"`
}

type awsEc2AvailabilityZoneGroupAttributes struct {
	ref terra.Reference
}

// GroupName returns a reference to field group_name of aws_ec2_availability_zone_group.
func (aeazg awsEc2AvailabilityZoneGroupAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(aeazg.ref.Append("group_name"))
}

// Id returns a reference to field id of aws_ec2_availability_zone_group.
func (aeazg awsEc2AvailabilityZoneGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeazg.ref.Append("id"))
}

// OptInStatus returns a reference to field opt_in_status of aws_ec2_availability_zone_group.
func (aeazg awsEc2AvailabilityZoneGroupAttributes) OptInStatus() terra.StringValue {
	return terra.ReferenceAsString(aeazg.ref.Append("opt_in_status"))
}

type awsEc2AvailabilityZoneGroupState struct {
	GroupName   string `json:"group_name"`
	Id          string `json:"id"`
	OptInStatus string `json:"opt_in_status"`
}
