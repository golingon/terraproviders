// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_gamelift_script

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_gamelift_script.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGameliftScriptState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ags *Resource) Type() string {
	return "aws_gamelift_script"
}

// LocalName returns the local name for [Resource].
func (ags *Resource) LocalName() string {
	return ags.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ags *Resource) Configuration() interface{} {
	return ags.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ags *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ags)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ags *Resource) Dependencies() terra.Dependencies {
	return ags.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ags *Resource) LifecycleManagement() *terra.Lifecycle {
	return ags.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ags *Resource) Attributes() awsGameliftScriptAttributes {
	return awsGameliftScriptAttributes{ref: terra.ReferenceResource(ags)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ags *Resource) ImportState(state io.Reader) error {
	ags.state = &awsGameliftScriptState{}
	if err := json.NewDecoder(state).Decode(ags.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ags.Type(), ags.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ags *Resource) State() (*awsGameliftScriptState, bool) {
	return ags.state, ags.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ags *Resource) StateMust() *awsGameliftScriptState {
	if ags.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ags.Type(), ags.LocalName()))
	}
	return ags.state
}

// Args contains the configurations for aws_gamelift_script.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// ZipFile: string, optional
	ZipFile terra.StringValue `hcl:"zip_file,attr"`
	// StorageLocation: optional
	StorageLocation *StorageLocation `hcl:"storage_location,block"`
}

type awsGameliftScriptAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_gamelift_script.
func (ags awsGameliftScriptAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ags.ref.Append("arn"))
}

// Id returns a reference to field id of aws_gamelift_script.
func (ags awsGameliftScriptAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ags.ref.Append("id"))
}

// Name returns a reference to field name of aws_gamelift_script.
func (ags awsGameliftScriptAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ags.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_gamelift_script.
func (ags awsGameliftScriptAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ags.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_gamelift_script.
func (ags awsGameliftScriptAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ags.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_gamelift_script.
func (ags awsGameliftScriptAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(ags.ref.Append("version"))
}

// ZipFile returns a reference to field zip_file of aws_gamelift_script.
func (ags awsGameliftScriptAttributes) ZipFile() terra.StringValue {
	return terra.ReferenceAsString(ags.ref.Append("zip_file"))
}

func (ags awsGameliftScriptAttributes) StorageLocation() terra.ListValue[StorageLocationAttributes] {
	return terra.ReferenceAsList[StorageLocationAttributes](ags.ref.Append("storage_location"))
}

type awsGameliftScriptState struct {
	Arn             string                 `json:"arn"`
	Id              string                 `json:"id"`
	Name            string                 `json:"name"`
	Tags            map[string]string      `json:"tags"`
	TagsAll         map[string]string      `json:"tags_all"`
	Version         string                 `json:"version"`
	ZipFile         string                 `json:"zip_file"`
	StorageLocation []StorageLocationState `json:"storage_location"`
}
