// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_rbin_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_rbin_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRbinRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arr *Resource) Type() string {
	return "aws_rbin_rule"
}

// LocalName returns the local name for [Resource].
func (arr *Resource) LocalName() string {
	return arr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arr *Resource) Configuration() interface{} {
	return arr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arr *Resource) Dependencies() terra.Dependencies {
	return arr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arr *Resource) LifecycleManagement() *terra.Lifecycle {
	return arr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arr *Resource) Attributes() awsRbinRuleAttributes {
	return awsRbinRuleAttributes{ref: terra.ReferenceResource(arr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arr *Resource) ImportState(state io.Reader) error {
	arr.state = &awsRbinRuleState{}
	if err := json.NewDecoder(state).Decode(arr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arr.Type(), arr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arr *Resource) State() (*awsRbinRuleState, bool) {
	return arr.state, arr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arr *Resource) StateMust() *awsRbinRuleState {
	if arr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arr.Type(), arr.LocalName()))
	}
	return arr.state
}

// Args contains the configurations for aws_rbin_rule.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ResourceType: string, required
	ResourceType terra.StringValue `hcl:"resource_type,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// LockConfiguration: optional
	LockConfiguration *LockConfiguration `hcl:"lock_configuration,block"`
	// ResourceTags: min=0,max=50
	ResourceTags []ResourceTags `hcl:"resource_tags,block" validate:"min=0,max=50"`
	// RetentionPeriod: required
	RetentionPeriod *RetentionPeriod `hcl:"retention_period,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRbinRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_rbin_rule.
func (arr awsRbinRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("arn"))
}

// Description returns a reference to field description of aws_rbin_rule.
func (arr awsRbinRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("description"))
}

// Id returns a reference to field id of aws_rbin_rule.
func (arr awsRbinRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("id"))
}

// LockEndTime returns a reference to field lock_end_time of aws_rbin_rule.
func (arr awsRbinRuleAttributes) LockEndTime() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("lock_end_time"))
}

// LockState returns a reference to field lock_state of aws_rbin_rule.
func (arr awsRbinRuleAttributes) LockState() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("lock_state"))
}

// ResourceType returns a reference to field resource_type of aws_rbin_rule.
func (arr awsRbinRuleAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("resource_type"))
}

// Status returns a reference to field status of aws_rbin_rule.
func (arr awsRbinRuleAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_rbin_rule.
func (arr awsRbinRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_rbin_rule.
func (arr awsRbinRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arr.ref.Append("tags_all"))
}

func (arr awsRbinRuleAttributes) LockConfiguration() terra.ListValue[LockConfigurationAttributes] {
	return terra.ReferenceAsList[LockConfigurationAttributes](arr.ref.Append("lock_configuration"))
}

func (arr awsRbinRuleAttributes) ResourceTags() terra.SetValue[ResourceTagsAttributes] {
	return terra.ReferenceAsSet[ResourceTagsAttributes](arr.ref.Append("resource_tags"))
}

func (arr awsRbinRuleAttributes) RetentionPeriod() terra.ListValue[RetentionPeriodAttributes] {
	return terra.ReferenceAsList[RetentionPeriodAttributes](arr.ref.Append("retention_period"))
}

func (arr awsRbinRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arr.ref.Append("timeouts"))
}

type awsRbinRuleState struct {
	Arn               string                   `json:"arn"`
	Description       string                   `json:"description"`
	Id                string                   `json:"id"`
	LockEndTime       string                   `json:"lock_end_time"`
	LockState         string                   `json:"lock_state"`
	ResourceType      string                   `json:"resource_type"`
	Status            string                   `json:"status"`
	Tags              map[string]string        `json:"tags"`
	TagsAll           map[string]string        `json:"tags_all"`
	LockConfiguration []LockConfigurationState `json:"lock_configuration"`
	ResourceTags      []ResourceTagsState      `json:"resource_tags"`
	RetentionPeriod   []RetentionPeriodState   `json:"retention_period"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
