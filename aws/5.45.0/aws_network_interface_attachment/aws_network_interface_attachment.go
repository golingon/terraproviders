// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_network_interface_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_network_interface_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkInterfaceAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ania *Resource) Type() string {
	return "aws_network_interface_attachment"
}

// LocalName returns the local name for [Resource].
func (ania *Resource) LocalName() string {
	return ania.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ania *Resource) Configuration() interface{} {
	return ania.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ania *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ania)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ania *Resource) Dependencies() terra.Dependencies {
	return ania.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ania *Resource) LifecycleManagement() *terra.Lifecycle {
	return ania.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ania *Resource) Attributes() awsNetworkInterfaceAttachmentAttributes {
	return awsNetworkInterfaceAttachmentAttributes{ref: terra.ReferenceResource(ania)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ania *Resource) ImportState(state io.Reader) error {
	ania.state = &awsNetworkInterfaceAttachmentState{}
	if err := json.NewDecoder(state).Decode(ania.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ania.Type(), ania.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ania *Resource) State() (*awsNetworkInterfaceAttachmentState, bool) {
	return ania.state, ania.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ania *Resource) StateMust() *awsNetworkInterfaceAttachmentState {
	if ania.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ania.Type(), ania.LocalName()))
	}
	return ania.state
}

// Args contains the configurations for aws_network_interface_attachment.
type Args struct {
	// DeviceIndex: number, required
	DeviceIndex terra.NumberValue `hcl:"device_index,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// NetworkInterfaceId: string, required
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr" validate:"required"`
}

type awsNetworkInterfaceAttachmentAttributes struct {
	ref terra.Reference
}

// AttachmentId returns a reference to field attachment_id of aws_network_interface_attachment.
func (ania awsNetworkInterfaceAttachmentAttributes) AttachmentId() terra.StringValue {
	return terra.ReferenceAsString(ania.ref.Append("attachment_id"))
}

// DeviceIndex returns a reference to field device_index of aws_network_interface_attachment.
func (ania awsNetworkInterfaceAttachmentAttributes) DeviceIndex() terra.NumberValue {
	return terra.ReferenceAsNumber(ania.ref.Append("device_index"))
}

// Id returns a reference to field id of aws_network_interface_attachment.
func (ania awsNetworkInterfaceAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ania.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_network_interface_attachment.
func (ania awsNetworkInterfaceAttachmentAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(ania.ref.Append("instance_id"))
}

// NetworkInterfaceId returns a reference to field network_interface_id of aws_network_interface_attachment.
func (ania awsNetworkInterfaceAttachmentAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(ania.ref.Append("network_interface_id"))
}

// Status returns a reference to field status of aws_network_interface_attachment.
func (ania awsNetworkInterfaceAttachmentAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ania.ref.Append("status"))
}

type awsNetworkInterfaceAttachmentState struct {
	AttachmentId       string  `json:"attachment_id"`
	DeviceIndex        float64 `json:"device_index"`
	Id                 string  `json:"id"`
	InstanceId         string  `json:"instance_id"`
	NetworkInterfaceId string  `json:"network_interface_id"`
	Status             string  `json:"status"`
}
