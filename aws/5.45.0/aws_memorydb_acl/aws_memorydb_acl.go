// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_memorydb_acl

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_memorydb_acl.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMemorydbAclState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ama *Resource) Type() string {
	return "aws_memorydb_acl"
}

// LocalName returns the local name for [Resource].
func (ama *Resource) LocalName() string {
	return ama.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ama *Resource) Configuration() interface{} {
	return ama.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ama *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ama)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ama *Resource) Dependencies() terra.Dependencies {
	return ama.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ama *Resource) LifecycleManagement() *terra.Lifecycle {
	return ama.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ama *Resource) Attributes() awsMemorydbAclAttributes {
	return awsMemorydbAclAttributes{ref: terra.ReferenceResource(ama)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ama *Resource) ImportState(state io.Reader) error {
	ama.state = &awsMemorydbAclState{}
	if err := json.NewDecoder(state).Decode(ama.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ama.Type(), ama.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ama *Resource) State() (*awsMemorydbAclState, bool) {
	return ama.state, ama.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ama *Resource) StateMust() *awsMemorydbAclState {
	if ama.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ama.Type(), ama.LocalName()))
	}
	return ama.state
}

// Args contains the configurations for aws_memorydb_acl.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserNames: set of string, optional
	UserNames terra.SetValue[terra.StringValue] `hcl:"user_names,attr"`
}

type awsMemorydbAclAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_memorydb_acl.
func (ama awsMemorydbAclAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("arn"))
}

// Id returns a reference to field id of aws_memorydb_acl.
func (ama awsMemorydbAclAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("id"))
}

// MinimumEngineVersion returns a reference to field minimum_engine_version of aws_memorydb_acl.
func (ama awsMemorydbAclAttributes) MinimumEngineVersion() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("minimum_engine_version"))
}

// Name returns a reference to field name of aws_memorydb_acl.
func (ama awsMemorydbAclAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_memorydb_acl.
func (ama awsMemorydbAclAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(ama.ref.Append("name_prefix"))
}

// Tags returns a reference to field tags of aws_memorydb_acl.
func (ama awsMemorydbAclAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ama.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_memorydb_acl.
func (ama awsMemorydbAclAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ama.ref.Append("tags_all"))
}

// UserNames returns a reference to field user_names of aws_memorydb_acl.
func (ama awsMemorydbAclAttributes) UserNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ama.ref.Append("user_names"))
}

type awsMemorydbAclState struct {
	Arn                  string            `json:"arn"`
	Id                   string            `json:"id"`
	MinimumEngineVersion string            `json:"minimum_engine_version"`
	Name                 string            `json:"name"`
	NamePrefix           string            `json:"name_prefix"`
	Tags                 map[string]string `json:"tags"`
	TagsAll              map[string]string `json:"tags_all"`
	UserNames            []string          `json:"user_names"`
}
