// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_portfolio

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_servicecatalog_portfolio.
type Resource struct {
	Name      string
	Args      Args
	state     *awsServicecatalogPortfolioState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asp *Resource) Type() string {
	return "aws_servicecatalog_portfolio"
}

// LocalName returns the local name for [Resource].
func (asp *Resource) LocalName() string {
	return asp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asp *Resource) Configuration() interface{} {
	return asp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asp *Resource) Dependencies() terra.Dependencies {
	return asp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asp *Resource) LifecycleManagement() *terra.Lifecycle {
	return asp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asp *Resource) Attributes() awsServicecatalogPortfolioAttributes {
	return awsServicecatalogPortfolioAttributes{ref: terra.ReferenceResource(asp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asp *Resource) ImportState(state io.Reader) error {
	asp.state = &awsServicecatalogPortfolioState{}
	if err := json.NewDecoder(state).Decode(asp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asp.Type(), asp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asp *Resource) State() (*awsServicecatalogPortfolioState, bool) {
	return asp.state, asp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asp *Resource) StateMust() *awsServicecatalogPortfolioState {
	if asp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asp.Type(), asp.LocalName()))
	}
	return asp.state
}

// Args contains the configurations for aws_servicecatalog_portfolio.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProviderName: string, required
	ProviderName terra.StringValue `hcl:"provider_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsServicecatalogPortfolioAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_servicecatalog_portfolio.
func (asp awsServicecatalogPortfolioAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("arn"))
}

// CreatedTime returns a reference to field created_time of aws_servicecatalog_portfolio.
func (asp awsServicecatalogPortfolioAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("created_time"))
}

// Description returns a reference to field description of aws_servicecatalog_portfolio.
func (asp awsServicecatalogPortfolioAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("description"))
}

// Id returns a reference to field id of aws_servicecatalog_portfolio.
func (asp awsServicecatalogPortfolioAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("id"))
}

// Name returns a reference to field name of aws_servicecatalog_portfolio.
func (asp awsServicecatalogPortfolioAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("name"))
}

// ProviderName returns a reference to field provider_name of aws_servicecatalog_portfolio.
func (asp awsServicecatalogPortfolioAttributes) ProviderName() terra.StringValue {
	return terra.ReferenceAsString(asp.ref.Append("provider_name"))
}

// Tags returns a reference to field tags of aws_servicecatalog_portfolio.
func (asp awsServicecatalogPortfolioAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_servicecatalog_portfolio.
func (asp awsServicecatalogPortfolioAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asp.ref.Append("tags_all"))
}

func (asp awsServicecatalogPortfolioAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asp.ref.Append("timeouts"))
}

type awsServicecatalogPortfolioState struct {
	Arn          string            `json:"arn"`
	CreatedTime  string            `json:"created_time"`
	Description  string            `json:"description"`
	Id           string            `json:"id"`
	Name         string            `json:"name"`
	ProviderName string            `json:"provider_name"`
	Tags         map[string]string `json:"tags"`
	TagsAll      map[string]string `json:"tags_all"`
	Timeouts     *TimeoutsState    `json:"timeouts"`
}
