// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cognito_user_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cognito_user_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCognitoUserGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acug *Resource) Type() string {
	return "aws_cognito_user_group"
}

// LocalName returns the local name for [Resource].
func (acug *Resource) LocalName() string {
	return acug.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acug *Resource) Configuration() interface{} {
	return acug.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acug *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acug)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acug *Resource) Dependencies() terra.Dependencies {
	return acug.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acug *Resource) LifecycleManagement() *terra.Lifecycle {
	return acug.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acug *Resource) Attributes() awsCognitoUserGroupAttributes {
	return awsCognitoUserGroupAttributes{ref: terra.ReferenceResource(acug)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acug *Resource) ImportState(state io.Reader) error {
	acug.state = &awsCognitoUserGroupState{}
	if err := json.NewDecoder(state).Decode(acug.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acug.Type(), acug.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acug *Resource) State() (*awsCognitoUserGroupState, bool) {
	return acug.state, acug.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acug *Resource) StateMust() *awsCognitoUserGroupState {
	if acug.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acug.Type(), acug.LocalName()))
	}
	return acug.state
}

// Args contains the configurations for aws_cognito_user_group.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Precedence: number, optional
	Precedence terra.NumberValue `hcl:"precedence,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// UserPoolId: string, required
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
}

type awsCognitoUserGroupAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_cognito_user_group.
func (acug awsCognitoUserGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acug.ref.Append("description"))
}

// Id returns a reference to field id of aws_cognito_user_group.
func (acug awsCognitoUserGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acug.ref.Append("id"))
}

// Name returns a reference to field name of aws_cognito_user_group.
func (acug awsCognitoUserGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acug.ref.Append("name"))
}

// Precedence returns a reference to field precedence of aws_cognito_user_group.
func (acug awsCognitoUserGroupAttributes) Precedence() terra.NumberValue {
	return terra.ReferenceAsNumber(acug.ref.Append("precedence"))
}

// RoleArn returns a reference to field role_arn of aws_cognito_user_group.
func (acug awsCognitoUserGroupAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(acug.ref.Append("role_arn"))
}

// UserPoolId returns a reference to field user_pool_id of aws_cognito_user_group.
func (acug awsCognitoUserGroupAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceAsString(acug.ref.Append("user_pool_id"))
}

type awsCognitoUserGroupState struct {
	Description string  `json:"description"`
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	Precedence  float64 `json:"precedence"`
	RoleArn     string  `json:"role_arn"`
	UserPoolId  string  `json:"user_pool_id"`
}
