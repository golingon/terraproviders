// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ebs_volume

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ebs_volume.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEbsVolumeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aev *Resource) Type() string {
	return "aws_ebs_volume"
}

// LocalName returns the local name for [Resource].
func (aev *Resource) LocalName() string {
	return aev.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aev *Resource) Configuration() interface{} {
	return aev.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aev *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aev)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aev *Resource) Dependencies() terra.Dependencies {
	return aev.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aev *Resource) LifecycleManagement() *terra.Lifecycle {
	return aev.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aev *Resource) Attributes() awsEbsVolumeAttributes {
	return awsEbsVolumeAttributes{ref: terra.ReferenceResource(aev)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aev *Resource) ImportState(state io.Reader) error {
	aev.state = &awsEbsVolumeState{}
	if err := json.NewDecoder(state).Decode(aev.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aev.Type(), aev.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aev *Resource) State() (*awsEbsVolumeState, bool) {
	return aev.state, aev.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aev *Resource) StateMust() *awsEbsVolumeState {
	if aev.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aev.Type(), aev.LocalName()))
	}
	return aev.state
}

// Args contains the configurations for aws_ebs_volume.
type Args struct {
	// AvailabilityZone: string, required
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr" validate:"required"`
	// Encrypted: bool, optional
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
	// FinalSnapshot: bool, optional
	FinalSnapshot terra.BoolValue `hcl:"final_snapshot,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// MultiAttachEnabled: bool, optional
	MultiAttachEnabled terra.BoolValue `hcl:"multi_attach_enabled,attr"`
	// OutpostArn: string, optional
	OutpostArn terra.StringValue `hcl:"outpost_arn,attr"`
	// Size: number, optional
	Size terra.NumberValue `hcl:"size,attr"`
	// SnapshotId: string, optional
	SnapshotId terra.StringValue `hcl:"snapshot_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEbsVolumeAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aev.ref.Append("arn"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(aev.ref.Append("availability_zone"))
}

// Encrypted returns a reference to field encrypted of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(aev.ref.Append("encrypted"))
}

// FinalSnapshot returns a reference to field final_snapshot of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) FinalSnapshot() terra.BoolValue {
	return terra.ReferenceAsBool(aev.ref.Append("final_snapshot"))
}

// Id returns a reference to field id of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aev.ref.Append("id"))
}

// Iops returns a reference to field iops of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(aev.ref.Append("iops"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(aev.ref.Append("kms_key_id"))
}

// MultiAttachEnabled returns a reference to field multi_attach_enabled of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) MultiAttachEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aev.ref.Append("multi_attach_enabled"))
}

// OutpostArn returns a reference to field outpost_arn of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) OutpostArn() terra.StringValue {
	return terra.ReferenceAsString(aev.ref.Append("outpost_arn"))
}

// Size returns a reference to field size of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(aev.ref.Append("size"))
}

// SnapshotId returns a reference to field snapshot_id of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) SnapshotId() terra.StringValue {
	return terra.ReferenceAsString(aev.ref.Append("snapshot_id"))
}

// Tags returns a reference to field tags of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aev.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aev.ref.Append("tags_all"))
}

// Throughput returns a reference to field throughput of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(aev.ref.Append("throughput"))
}

// Type returns a reference to field type of aws_ebs_volume.
func (aev awsEbsVolumeAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aev.ref.Append("type"))
}

func (aev awsEbsVolumeAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aev.ref.Append("timeouts"))
}

type awsEbsVolumeState struct {
	Arn                string            `json:"arn"`
	AvailabilityZone   string            `json:"availability_zone"`
	Encrypted          bool              `json:"encrypted"`
	FinalSnapshot      bool              `json:"final_snapshot"`
	Id                 string            `json:"id"`
	Iops               float64           `json:"iops"`
	KmsKeyId           string            `json:"kms_key_id"`
	MultiAttachEnabled bool              `json:"multi_attach_enabled"`
	OutpostArn         string            `json:"outpost_arn"`
	Size               float64           `json:"size"`
	SnapshotId         string            `json:"snapshot_id"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
	Throughput         float64           `json:"throughput"`
	Type               string            `json:"type"`
	Timeouts           *TimeoutsState    `json:"timeouts"`
}
