// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lakeformation_permissions

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_lakeformation_permissions.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (alp *DataSource) DataSource() string {
	return "aws_lakeformation_permissions"
}

// LocalName returns the local name for [DataSource].
func (alp *DataSource) LocalName() string {
	return alp.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (alp *DataSource) Configuration() interface{} {
	return alp.Args
}

// Attributes returns the attributes for [DataSource].
func (alp *DataSource) Attributes() dataAwsLakeformationPermissionsAttributes {
	return dataAwsLakeformationPermissionsAttributes{ref: terra.ReferenceDataSource(alp)}
}

// DataArgs contains the configurations for aws_lakeformation_permissions.
type DataArgs struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// CatalogResource: bool, optional
	CatalogResource terra.BoolValue `hcl:"catalog_resource,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
	// DataCellsFilter: optional
	DataCellsFilter *DataDataCellsFilter `hcl:"data_cells_filter,block"`
	// DataLocation: optional
	DataLocation *DataDataLocation `hcl:"data_location,block"`
	// Database: optional
	Database *DataDatabase `hcl:"database,block"`
	// LfTag: optional
	LfTag *DataLfTag `hcl:"lf_tag,block"`
	// LfTagPolicy: optional
	LfTagPolicy *DataLfTagPolicy `hcl:"lf_tag_policy,block"`
	// Table: optional
	Table *DataTable `hcl:"table,block"`
	// TableWithColumns: optional
	TableWithColumns *DataTableWithColumns `hcl:"table_with_columns,block"`
}

type dataAwsLakeformationPermissionsAttributes struct {
	ref terra.Reference
}

// CatalogId returns a reference to field catalog_id of aws_lakeformation_permissions.
func (alp dataAwsLakeformationPermissionsAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("catalog_id"))
}

// CatalogResource returns a reference to field catalog_resource of aws_lakeformation_permissions.
func (alp dataAwsLakeformationPermissionsAttributes) CatalogResource() terra.BoolValue {
	return terra.ReferenceAsBool(alp.ref.Append("catalog_resource"))
}

// Id returns a reference to field id of aws_lakeformation_permissions.
func (alp dataAwsLakeformationPermissionsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("id"))
}

// Permissions returns a reference to field permissions of aws_lakeformation_permissions.
func (alp dataAwsLakeformationPermissionsAttributes) Permissions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](alp.ref.Append("permissions"))
}

// PermissionsWithGrantOption returns a reference to field permissions_with_grant_option of aws_lakeformation_permissions.
func (alp dataAwsLakeformationPermissionsAttributes) PermissionsWithGrantOption() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](alp.ref.Append("permissions_with_grant_option"))
}

// Principal returns a reference to field principal of aws_lakeformation_permissions.
func (alp dataAwsLakeformationPermissionsAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("principal"))
}

func (alp dataAwsLakeformationPermissionsAttributes) DataCellsFilter() terra.ListValue[DataDataCellsFilterAttributes] {
	return terra.ReferenceAsList[DataDataCellsFilterAttributes](alp.ref.Append("data_cells_filter"))
}

func (alp dataAwsLakeformationPermissionsAttributes) DataLocation() terra.ListValue[DataDataLocationAttributes] {
	return terra.ReferenceAsList[DataDataLocationAttributes](alp.ref.Append("data_location"))
}

func (alp dataAwsLakeformationPermissionsAttributes) Database() terra.ListValue[DataDatabaseAttributes] {
	return terra.ReferenceAsList[DataDatabaseAttributes](alp.ref.Append("database"))
}

func (alp dataAwsLakeformationPermissionsAttributes) LfTag() terra.ListValue[DataLfTagAttributes] {
	return terra.ReferenceAsList[DataLfTagAttributes](alp.ref.Append("lf_tag"))
}

func (alp dataAwsLakeformationPermissionsAttributes) LfTagPolicy() terra.ListValue[DataLfTagPolicyAttributes] {
	return terra.ReferenceAsList[DataLfTagPolicyAttributes](alp.ref.Append("lf_tag_policy"))
}

func (alp dataAwsLakeformationPermissionsAttributes) Table() terra.ListValue[DataTableAttributes] {
	return terra.ReferenceAsList[DataTableAttributes](alp.ref.Append("table"))
}

func (alp dataAwsLakeformationPermissionsAttributes) TableWithColumns() terra.ListValue[DataTableWithColumnsAttributes] {
	return terra.ReferenceAsList[DataTableWithColumnsAttributes](alp.ref.Append("table_with_columns"))
}
