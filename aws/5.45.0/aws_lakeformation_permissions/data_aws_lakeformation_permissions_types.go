// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lakeformation_permissions

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataDataCellsFilter struct {
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TableCatalogId: string, required
	TableCatalogId terra.StringValue `hcl:"table_catalog_id,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type DataDataLocation struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
}

type DataDatabase struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type DataLfTag struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type DataLfTagPolicy struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// ResourceType: string, required
	ResourceType terra.StringValue `hcl:"resource_type,attr" validate:"required"`
	// LfTagPolicyExpression: min=1
	Expression []DataLfTagPolicyExpression `hcl:"expression,block" validate:"min=1"`
}

type DataLfTagPolicyExpression struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type DataTable struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Wildcard: bool, optional
	Wildcard terra.BoolValue `hcl:"wildcard,attr"`
}

type DataTableWithColumns struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// ColumnNames: set of string, optional
	ColumnNames terra.SetValue[terra.StringValue] `hcl:"column_names,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// ExcludedColumnNames: set of string, optional
	ExcludedColumnNames terra.SetValue[terra.StringValue] `hcl:"excluded_column_names,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Wildcard: bool, optional
	Wildcard terra.BoolValue `hcl:"wildcard,attr"`
}

type DataDataCellsFilterAttributes struct {
	ref terra.Reference
}

func (dcf DataDataCellsFilterAttributes) InternalRef() (terra.Reference, error) {
	return dcf.ref, nil
}

func (dcf DataDataCellsFilterAttributes) InternalWithRef(ref terra.Reference) DataDataCellsFilterAttributes {
	return DataDataCellsFilterAttributes{ref: ref}
}

func (dcf DataDataCellsFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcf.ref.InternalTokens()
}

func (dcf DataDataCellsFilterAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(dcf.ref.Append("database_name"))
}

func (dcf DataDataCellsFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dcf.ref.Append("name"))
}

func (dcf DataDataCellsFilterAttributes) TableCatalogId() terra.StringValue {
	return terra.ReferenceAsString(dcf.ref.Append("table_catalog_id"))
}

func (dcf DataDataCellsFilterAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(dcf.ref.Append("table_name"))
}

type DataDataLocationAttributes struct {
	ref terra.Reference
}

func (dl DataDataLocationAttributes) InternalRef() (terra.Reference, error) {
	return dl.ref, nil
}

func (dl DataDataLocationAttributes) InternalWithRef(ref terra.Reference) DataDataLocationAttributes {
	return DataDataLocationAttributes{ref: ref}
}

func (dl DataDataLocationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dl.ref.InternalTokens()
}

func (dl DataDataLocationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("arn"))
}

func (dl DataDataLocationAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("catalog_id"))
}

type DataDatabaseAttributes struct {
	ref terra.Reference
}

func (d DataDatabaseAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DataDatabaseAttributes) InternalWithRef(ref terra.Reference) DataDatabaseAttributes {
	return DataDatabaseAttributes{ref: ref}
}

func (d DataDatabaseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DataDatabaseAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("catalog_id"))
}

func (d DataDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

type DataLfTagAttributes struct {
	ref terra.Reference
}

func (lt DataLfTagAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt DataLfTagAttributes) InternalWithRef(ref terra.Reference) DataLfTagAttributes {
	return DataLfTagAttributes{ref: ref}
}

func (lt DataLfTagAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt DataLfTagAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("catalog_id"))
}

func (lt DataLfTagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("key"))
}

func (lt DataLfTagAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lt.ref.Append("values"))
}

type DataLfTagPolicyAttributes struct {
	ref terra.Reference
}

func (ltp DataLfTagPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ltp.ref, nil
}

func (ltp DataLfTagPolicyAttributes) InternalWithRef(ref terra.Reference) DataLfTagPolicyAttributes {
	return DataLfTagPolicyAttributes{ref: ref}
}

func (ltp DataLfTagPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ltp.ref.InternalTokens()
}

func (ltp DataLfTagPolicyAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(ltp.ref.Append("catalog_id"))
}

func (ltp DataLfTagPolicyAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(ltp.ref.Append("resource_type"))
}

func (ltp DataLfTagPolicyAttributes) Expression() terra.SetValue[DataLfTagPolicyExpressionAttributes] {
	return terra.ReferenceAsSet[DataLfTagPolicyExpressionAttributes](ltp.ref.Append("expression"))
}

type DataLfTagPolicyExpressionAttributes struct {
	ref terra.Reference
}

func (e DataLfTagPolicyExpressionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e DataLfTagPolicyExpressionAttributes) InternalWithRef(ref terra.Reference) DataLfTagPolicyExpressionAttributes {
	return DataLfTagPolicyExpressionAttributes{ref: ref}
}

func (e DataLfTagPolicyExpressionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e DataLfTagPolicyExpressionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("key"))
}

func (e DataLfTagPolicyExpressionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("values"))
}

type DataTableAttributes struct {
	ref terra.Reference
}

func (t DataTableAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTableAttributes) InternalWithRef(ref terra.Reference) DataTableAttributes {
	return DataTableAttributes{ref: ref}
}

func (t DataTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTableAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("catalog_id"))
}

func (t DataTableAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("database_name"))
}

func (t DataTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("name"))
}

func (t DataTableAttributes) Wildcard() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("wildcard"))
}

type DataTableWithColumnsAttributes struct {
	ref terra.Reference
}

func (twc DataTableWithColumnsAttributes) InternalRef() (terra.Reference, error) {
	return twc.ref, nil
}

func (twc DataTableWithColumnsAttributes) InternalWithRef(ref terra.Reference) DataTableWithColumnsAttributes {
	return DataTableWithColumnsAttributes{ref: ref}
}

func (twc DataTableWithColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return twc.ref.InternalTokens()
}

func (twc DataTableWithColumnsAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(twc.ref.Append("catalog_id"))
}

func (twc DataTableWithColumnsAttributes) ColumnNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](twc.ref.Append("column_names"))
}

func (twc DataTableWithColumnsAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(twc.ref.Append("database_name"))
}

func (twc DataTableWithColumnsAttributes) ExcludedColumnNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](twc.ref.Append("excluded_column_names"))
}

func (twc DataTableWithColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(twc.ref.Append("name"))
}

func (twc DataTableWithColumnsAttributes) Wildcard() terra.BoolValue {
	return terra.ReferenceAsBool(twc.ref.Append("wildcard"))
}

type DataDataCellsFilterState struct {
	DatabaseName   string `json:"database_name"`
	Name           string `json:"name"`
	TableCatalogId string `json:"table_catalog_id"`
	TableName      string `json:"table_name"`
}

type DataDataLocationState struct {
	Arn       string `json:"arn"`
	CatalogId string `json:"catalog_id"`
}

type DataDatabaseState struct {
	CatalogId string `json:"catalog_id"`
	Name      string `json:"name"`
}

type DataLfTagState struct {
	CatalogId string   `json:"catalog_id"`
	Key       string   `json:"key"`
	Values    []string `json:"values"`
}

type DataLfTagPolicyState struct {
	CatalogId    string                           `json:"catalog_id"`
	ResourceType string                           `json:"resource_type"`
	Expression   []DataLfTagPolicyExpressionState `json:"expression"`
}

type DataLfTagPolicyExpressionState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type DataTableState struct {
	CatalogId    string `json:"catalog_id"`
	DatabaseName string `json:"database_name"`
	Name         string `json:"name"`
	Wildcard     bool   `json:"wildcard"`
}

type DataTableWithColumnsState struct {
	CatalogId           string   `json:"catalog_id"`
	ColumnNames         []string `json:"column_names"`
	DatabaseName        string   `json:"database_name"`
	ExcludedColumnNames []string `json:"excluded_column_names"`
	Name                string   `json:"name"`
	Wildcard            bool     `json:"wildcard"`
}
