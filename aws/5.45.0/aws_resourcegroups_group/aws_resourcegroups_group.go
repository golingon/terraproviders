// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_resourcegroups_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_resourcegroups_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsResourcegroupsGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arg *Resource) Type() string {
	return "aws_resourcegroups_group"
}

// LocalName returns the local name for [Resource].
func (arg *Resource) LocalName() string {
	return arg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arg *Resource) Configuration() interface{} {
	return arg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arg *Resource) Dependencies() terra.Dependencies {
	return arg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arg *Resource) LifecycleManagement() *terra.Lifecycle {
	return arg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arg *Resource) Attributes() awsResourcegroupsGroupAttributes {
	return awsResourcegroupsGroupAttributes{ref: terra.ReferenceResource(arg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arg *Resource) ImportState(state io.Reader) error {
	arg.state = &awsResourcegroupsGroupState{}
	if err := json.NewDecoder(state).Decode(arg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arg.Type(), arg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arg *Resource) State() (*awsResourcegroupsGroupState, bool) {
	return arg.state, arg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arg *Resource) StateMust() *awsResourcegroupsGroupState {
	if arg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arg.Type(), arg.LocalName()))
	}
	return arg.state
}

// Args contains the configurations for aws_resourcegroups_group.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Configuration: min=0
	Configuration []Configuration `hcl:"configuration,block" validate:"min=0"`
	// ResourceQuery: optional
	ResourceQuery *ResourceQuery `hcl:"resource_query,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsResourcegroupsGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_resourcegroups_group.
func (arg awsResourcegroupsGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arg.ref.Append("arn"))
}

// Description returns a reference to field description of aws_resourcegroups_group.
func (arg awsResourcegroupsGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(arg.ref.Append("description"))
}

// Id returns a reference to field id of aws_resourcegroups_group.
func (arg awsResourcegroupsGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arg.ref.Append("id"))
}

// Name returns a reference to field name of aws_resourcegroups_group.
func (arg awsResourcegroupsGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arg.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_resourcegroups_group.
func (arg awsResourcegroupsGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_resourcegroups_group.
func (arg awsResourcegroupsGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arg.ref.Append("tags_all"))
}

func (arg awsResourcegroupsGroupAttributes) Configuration() terra.SetValue[ConfigurationAttributes] {
	return terra.ReferenceAsSet[ConfigurationAttributes](arg.ref.Append("configuration"))
}

func (arg awsResourcegroupsGroupAttributes) ResourceQuery() terra.ListValue[ResourceQueryAttributes] {
	return terra.ReferenceAsList[ResourceQueryAttributes](arg.ref.Append("resource_query"))
}

func (arg awsResourcegroupsGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](arg.ref.Append("timeouts"))
}

type awsResourcegroupsGroupState struct {
	Arn           string               `json:"arn"`
	Description   string               `json:"description"`
	Id            string               `json:"id"`
	Name          string               `json:"name"`
	Tags          map[string]string    `json:"tags"`
	TagsAll       map[string]string    `json:"tags_all"`
	Configuration []ConfigurationState `json:"configuration"`
	ResourceQuery []ResourceQueryState `json:"resource_query"`
	Timeouts      *TimeoutsState       `json:"timeouts"`
}
