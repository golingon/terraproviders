// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_verifiedaccess_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_verifiedaccess_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVerifiedaccessInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avi *Resource) Type() string {
	return "aws_verifiedaccess_instance"
}

// LocalName returns the local name for [Resource].
func (avi *Resource) LocalName() string {
	return avi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avi *Resource) Configuration() interface{} {
	return avi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avi *Resource) Dependencies() terra.Dependencies {
	return avi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avi *Resource) LifecycleManagement() *terra.Lifecycle {
	return avi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avi *Resource) Attributes() awsVerifiedaccessInstanceAttributes {
	return awsVerifiedaccessInstanceAttributes{ref: terra.ReferenceResource(avi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avi *Resource) ImportState(state io.Reader) error {
	avi.state = &awsVerifiedaccessInstanceState{}
	if err := json.NewDecoder(state).Decode(avi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avi.Type(), avi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avi *Resource) State() (*awsVerifiedaccessInstanceState, bool) {
	return avi.state, avi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avi *Resource) StateMust() *awsVerifiedaccessInstanceState {
	if avi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avi.Type(), avi.LocalName()))
	}
	return avi.state
}

// Args contains the configurations for aws_verifiedaccess_instance.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FipsEnabled: bool, optional
	FipsEnabled terra.BoolValue `hcl:"fips_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsVerifiedaccessInstanceAttributes struct {
	ref terra.Reference
}

// CreationTime returns a reference to field creation_time of aws_verifiedaccess_instance.
func (avi awsVerifiedaccessInstanceAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(avi.ref.Append("creation_time"))
}

// Description returns a reference to field description of aws_verifiedaccess_instance.
func (avi awsVerifiedaccessInstanceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(avi.ref.Append("description"))
}

// FipsEnabled returns a reference to field fips_enabled of aws_verifiedaccess_instance.
func (avi awsVerifiedaccessInstanceAttributes) FipsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(avi.ref.Append("fips_enabled"))
}

// Id returns a reference to field id of aws_verifiedaccess_instance.
func (avi awsVerifiedaccessInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avi.ref.Append("id"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_verifiedaccess_instance.
func (avi awsVerifiedaccessInstanceAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(avi.ref.Append("last_updated_time"))
}

// Tags returns a reference to field tags of aws_verifiedaccess_instance.
func (avi awsVerifiedaccessInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avi.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_verifiedaccess_instance.
func (avi awsVerifiedaccessInstanceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avi.ref.Append("tags_all"))
}

func (avi awsVerifiedaccessInstanceAttributes) VerifiedAccessTrustProviders() terra.ListValue[VerifiedAccessTrustProvidersAttributes] {
	return terra.ReferenceAsList[VerifiedAccessTrustProvidersAttributes](avi.ref.Append("verified_access_trust_providers"))
}

type awsVerifiedaccessInstanceState struct {
	CreationTime                 string                              `json:"creation_time"`
	Description                  string                              `json:"description"`
	FipsEnabled                  bool                                `json:"fips_enabled"`
	Id                           string                              `json:"id"`
	LastUpdatedTime              string                              `json:"last_updated_time"`
	Tags                         map[string]string                   `json:"tags"`
	TagsAll                      map[string]string                   `json:"tags_all"`
	VerifiedAccessTrustProviders []VerifiedAccessTrustProvidersState `json:"verified_access_trust_providers"`
}
