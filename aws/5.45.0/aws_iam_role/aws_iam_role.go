// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iam_role.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIamRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (air *Resource) Type() string {
	return "aws_iam_role"
}

// LocalName returns the local name for [Resource].
func (air *Resource) LocalName() string {
	return air.Name
}

// Configuration returns the configuration (args) for [Resource].
func (air *Resource) Configuration() interface{} {
	return air.Args
}

// DependOn is used for other resources to depend on [Resource].
func (air *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(air)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (air *Resource) Dependencies() terra.Dependencies {
	return air.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (air *Resource) LifecycleManagement() *terra.Lifecycle {
	return air.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (air *Resource) Attributes() awsIamRoleAttributes {
	return awsIamRoleAttributes{ref: terra.ReferenceResource(air)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (air *Resource) ImportState(state io.Reader) error {
	air.state = &awsIamRoleState{}
	if err := json.NewDecoder(state).Decode(air.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", air.Type(), air.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (air *Resource) State() (*awsIamRoleState, bool) {
	return air.state, air.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (air *Resource) StateMust() *awsIamRoleState {
	if air.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", air.Type(), air.LocalName()))
	}
	return air.state
}

// Args contains the configurations for aws_iam_role.
type Args struct {
	// AssumeRolePolicy: string, required
	AssumeRolePolicy terra.StringValue `hcl:"assume_role_policy,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ForceDetachPolicies: bool, optional
	ForceDetachPolicies terra.BoolValue `hcl:"force_detach_policies,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagedPolicyArns: set of string, optional
	ManagedPolicyArns terra.SetValue[terra.StringValue] `hcl:"managed_policy_arns,attr"`
	// MaxSessionDuration: number, optional
	MaxSessionDuration terra.NumberValue `hcl:"max_session_duration,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// PermissionsBoundary: string, optional
	PermissionsBoundary terra.StringValue `hcl:"permissions_boundary,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// InlinePolicy: min=0
	InlinePolicy []InlinePolicy `hcl:"inline_policy,block" validate:"min=0"`
}

type awsIamRoleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iam_role.
func (air awsIamRoleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("arn"))
}

// AssumeRolePolicy returns a reference to field assume_role_policy of aws_iam_role.
func (air awsIamRoleAttributes) AssumeRolePolicy() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("assume_role_policy"))
}

// CreateDate returns a reference to field create_date of aws_iam_role.
func (air awsIamRoleAttributes) CreateDate() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("create_date"))
}

// Description returns a reference to field description of aws_iam_role.
func (air awsIamRoleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("description"))
}

// ForceDetachPolicies returns a reference to field force_detach_policies of aws_iam_role.
func (air awsIamRoleAttributes) ForceDetachPolicies() terra.BoolValue {
	return terra.ReferenceAsBool(air.ref.Append("force_detach_policies"))
}

// Id returns a reference to field id of aws_iam_role.
func (air awsIamRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("id"))
}

// ManagedPolicyArns returns a reference to field managed_policy_arns of aws_iam_role.
func (air awsIamRoleAttributes) ManagedPolicyArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](air.ref.Append("managed_policy_arns"))
}

// MaxSessionDuration returns a reference to field max_session_duration of aws_iam_role.
func (air awsIamRoleAttributes) MaxSessionDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(air.ref.Append("max_session_duration"))
}

// Name returns a reference to field name of aws_iam_role.
func (air awsIamRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_iam_role.
func (air awsIamRoleAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("name_prefix"))
}

// Path returns a reference to field path of aws_iam_role.
func (air awsIamRoleAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("path"))
}

// PermissionsBoundary returns a reference to field permissions_boundary of aws_iam_role.
func (air awsIamRoleAttributes) PermissionsBoundary() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("permissions_boundary"))
}

// Tags returns a reference to field tags of aws_iam_role.
func (air awsIamRoleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](air.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_iam_role.
func (air awsIamRoleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](air.ref.Append("tags_all"))
}

// UniqueId returns a reference to field unique_id of aws_iam_role.
func (air awsIamRoleAttributes) UniqueId() terra.StringValue {
	return terra.ReferenceAsString(air.ref.Append("unique_id"))
}

func (air awsIamRoleAttributes) InlinePolicy() terra.SetValue[InlinePolicyAttributes] {
	return terra.ReferenceAsSet[InlinePolicyAttributes](air.ref.Append("inline_policy"))
}

type awsIamRoleState struct {
	Arn                 string              `json:"arn"`
	AssumeRolePolicy    string              `json:"assume_role_policy"`
	CreateDate          string              `json:"create_date"`
	Description         string              `json:"description"`
	ForceDetachPolicies bool                `json:"force_detach_policies"`
	Id                  string              `json:"id"`
	ManagedPolicyArns   []string            `json:"managed_policy_arns"`
	MaxSessionDuration  float64             `json:"max_session_duration"`
	Name                string              `json:"name"`
	NamePrefix          string              `json:"name_prefix"`
	Path                string              `json:"path"`
	PermissionsBoundary string              `json:"permissions_boundary"`
	Tags                map[string]string   `json:"tags"`
	TagsAll             map[string]string   `json:"tags_all"`
	UniqueId            string              `json:"unique_id"`
	InlinePolicy        []InlinePolicyState `json:"inline_policy"`
}
