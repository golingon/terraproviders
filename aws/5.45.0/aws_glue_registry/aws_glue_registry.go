// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_registry

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glue_registry.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlueRegistryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agr *Resource) Type() string {
	return "aws_glue_registry"
}

// LocalName returns the local name for [Resource].
func (agr *Resource) LocalName() string {
	return agr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agr *Resource) Configuration() interface{} {
	return agr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agr *Resource) Dependencies() terra.Dependencies {
	return agr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agr *Resource) LifecycleManagement() *terra.Lifecycle {
	return agr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agr *Resource) Attributes() awsGlueRegistryAttributes {
	return awsGlueRegistryAttributes{ref: terra.ReferenceResource(agr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agr *Resource) ImportState(state io.Reader) error {
	agr.state = &awsGlueRegistryState{}
	if err := json.NewDecoder(state).Decode(agr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agr.Type(), agr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agr *Resource) State() (*awsGlueRegistryState, bool) {
	return agr.state, agr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agr *Resource) StateMust() *awsGlueRegistryState {
	if agr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agr.Type(), agr.LocalName()))
	}
	return agr.state
}

// Args contains the configurations for aws_glue_registry.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RegistryName: string, required
	RegistryName terra.StringValue `hcl:"registry_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsGlueRegistryAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_glue_registry.
func (agr awsGlueRegistryAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agr.ref.Append("arn"))
}

// Description returns a reference to field description of aws_glue_registry.
func (agr awsGlueRegistryAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(agr.ref.Append("description"))
}

// Id returns a reference to field id of aws_glue_registry.
func (agr awsGlueRegistryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agr.ref.Append("id"))
}

// RegistryName returns a reference to field registry_name of aws_glue_registry.
func (agr awsGlueRegistryAttributes) RegistryName() terra.StringValue {
	return terra.ReferenceAsString(agr.ref.Append("registry_name"))
}

// Tags returns a reference to field tags of aws_glue_registry.
func (agr awsGlueRegistryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_glue_registry.
func (agr awsGlueRegistryAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agr.ref.Append("tags_all"))
}

type awsGlueRegistryState struct {
	Arn          string            `json:"arn"`
	Description  string            `json:"description"`
	Id           string            `json:"id"`
	RegistryName string            `json:"registry_name"`
	Tags         map[string]string `json:"tags"`
	TagsAll      map[string]string `json:"tags_all"`
}
