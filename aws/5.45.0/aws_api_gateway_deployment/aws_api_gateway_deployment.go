// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_api_gateway_deployment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_api_gateway_deployment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApiGatewayDeploymentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aagd *Resource) Type() string {
	return "aws_api_gateway_deployment"
}

// LocalName returns the local name for [Resource].
func (aagd *Resource) LocalName() string {
	return aagd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aagd *Resource) Configuration() interface{} {
	return aagd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aagd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aagd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aagd *Resource) Dependencies() terra.Dependencies {
	return aagd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aagd *Resource) LifecycleManagement() *terra.Lifecycle {
	return aagd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aagd *Resource) Attributes() awsApiGatewayDeploymentAttributes {
	return awsApiGatewayDeploymentAttributes{ref: terra.ReferenceResource(aagd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aagd *Resource) ImportState(state io.Reader) error {
	aagd.state = &awsApiGatewayDeploymentState{}
	if err := json.NewDecoder(state).Decode(aagd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aagd.Type(), aagd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aagd *Resource) State() (*awsApiGatewayDeploymentState, bool) {
	return aagd.state, aagd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aagd *Resource) StateMust() *awsApiGatewayDeploymentState {
	if aagd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aagd.Type(), aagd.LocalName()))
	}
	return aagd.state
}

// Args contains the configurations for aws_api_gateway_deployment.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RestApiId: string, required
	RestApiId terra.StringValue `hcl:"rest_api_id,attr" validate:"required"`
	// StageDescription: string, optional
	StageDescription terra.StringValue `hcl:"stage_description,attr"`
	// StageName: string, optional
	StageName terra.StringValue `hcl:"stage_name,attr"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
	// Variables: map of string, optional
	Variables terra.MapValue[terra.StringValue] `hcl:"variables,attr"`
}

type awsApiGatewayDeploymentAttributes struct {
	ref terra.Reference
}

// CreatedDate returns a reference to field created_date of aws_api_gateway_deployment.
func (aagd awsApiGatewayDeploymentAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceAsString(aagd.ref.Append("created_date"))
}

// Description returns a reference to field description of aws_api_gateway_deployment.
func (aagd awsApiGatewayDeploymentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aagd.ref.Append("description"))
}

// ExecutionArn returns a reference to field execution_arn of aws_api_gateway_deployment.
func (aagd awsApiGatewayDeploymentAttributes) ExecutionArn() terra.StringValue {
	return terra.ReferenceAsString(aagd.ref.Append("execution_arn"))
}

// Id returns a reference to field id of aws_api_gateway_deployment.
func (aagd awsApiGatewayDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aagd.ref.Append("id"))
}

// InvokeUrl returns a reference to field invoke_url of aws_api_gateway_deployment.
func (aagd awsApiGatewayDeploymentAttributes) InvokeUrl() terra.StringValue {
	return terra.ReferenceAsString(aagd.ref.Append("invoke_url"))
}

// RestApiId returns a reference to field rest_api_id of aws_api_gateway_deployment.
func (aagd awsApiGatewayDeploymentAttributes) RestApiId() terra.StringValue {
	return terra.ReferenceAsString(aagd.ref.Append("rest_api_id"))
}

// StageDescription returns a reference to field stage_description of aws_api_gateway_deployment.
func (aagd awsApiGatewayDeploymentAttributes) StageDescription() terra.StringValue {
	return terra.ReferenceAsString(aagd.ref.Append("stage_description"))
}

// StageName returns a reference to field stage_name of aws_api_gateway_deployment.
func (aagd awsApiGatewayDeploymentAttributes) StageName() terra.StringValue {
	return terra.ReferenceAsString(aagd.ref.Append("stage_name"))
}

// Triggers returns a reference to field triggers of aws_api_gateway_deployment.
func (aagd awsApiGatewayDeploymentAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aagd.ref.Append("triggers"))
}

// Variables returns a reference to field variables of aws_api_gateway_deployment.
func (aagd awsApiGatewayDeploymentAttributes) Variables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aagd.ref.Append("variables"))
}

type awsApiGatewayDeploymentState struct {
	CreatedDate      string            `json:"created_date"`
	Description      string            `json:"description"`
	ExecutionArn     string            `json:"execution_arn"`
	Id               string            `json:"id"`
	InvokeUrl        string            `json:"invoke_url"`
	RestApiId        string            `json:"rest_api_id"`
	StageDescription string            `json:"stage_description"`
	StageName        string            `json:"stage_name"`
	Triggers         map[string]string `json:"triggers"`
	Variables        map[string]string `json:"variables"`
}
