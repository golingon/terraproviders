// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elasticsearch_domain_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_elasticsearch_domain_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsElasticsearchDomainPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aedp *Resource) Type() string {
	return "aws_elasticsearch_domain_policy"
}

// LocalName returns the local name for [Resource].
func (aedp *Resource) LocalName() string {
	return aedp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aedp *Resource) Configuration() interface{} {
	return aedp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aedp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aedp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aedp *Resource) Dependencies() terra.Dependencies {
	return aedp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aedp *Resource) LifecycleManagement() *terra.Lifecycle {
	return aedp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aedp *Resource) Attributes() awsElasticsearchDomainPolicyAttributes {
	return awsElasticsearchDomainPolicyAttributes{ref: terra.ReferenceResource(aedp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aedp *Resource) ImportState(state io.Reader) error {
	aedp.state = &awsElasticsearchDomainPolicyState{}
	if err := json.NewDecoder(state).Decode(aedp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aedp.Type(), aedp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aedp *Resource) State() (*awsElasticsearchDomainPolicyState, bool) {
	return aedp.state, aedp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aedp *Resource) StateMust() *awsElasticsearchDomainPolicyState {
	if aedp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aedp.Type(), aedp.LocalName()))
	}
	return aedp.state
}

// Args contains the configurations for aws_elasticsearch_domain_policy.
type Args struct {
	// AccessPolicies: string, required
	AccessPolicies terra.StringValue `hcl:"access_policies,attr" validate:"required"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsElasticsearchDomainPolicyAttributes struct {
	ref terra.Reference
}

// AccessPolicies returns a reference to field access_policies of aws_elasticsearch_domain_policy.
func (aedp awsElasticsearchDomainPolicyAttributes) AccessPolicies() terra.StringValue {
	return terra.ReferenceAsString(aedp.ref.Append("access_policies"))
}

// DomainName returns a reference to field domain_name of aws_elasticsearch_domain_policy.
func (aedp awsElasticsearchDomainPolicyAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(aedp.ref.Append("domain_name"))
}

// Id returns a reference to field id of aws_elasticsearch_domain_policy.
func (aedp awsElasticsearchDomainPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aedp.ref.Append("id"))
}

func (aedp awsElasticsearchDomainPolicyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aedp.ref.Append("timeouts"))
}

type awsElasticsearchDomainPolicyState struct {
	AccessPolicies string         `json:"access_policies"`
	DomainName     string         `json:"domain_name"`
	Id             string         `json:"id"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
