// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpc_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpcEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ave *Resource) Type() string {
	return "aws_vpc_endpoint"
}

// LocalName returns the local name for [Resource].
func (ave *Resource) LocalName() string {
	return ave.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ave *Resource) Configuration() interface{} {
	return ave.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ave *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ave)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ave *Resource) Dependencies() terra.Dependencies {
	return ave.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ave *Resource) LifecycleManagement() *terra.Lifecycle {
	return ave.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ave *Resource) Attributes() awsVpcEndpointAttributes {
	return awsVpcEndpointAttributes{ref: terra.ReferenceResource(ave)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ave *Resource) ImportState(state io.Reader) error {
	ave.state = &awsVpcEndpointState{}
	if err := json.NewDecoder(state).Decode(ave.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ave.Type(), ave.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ave *Resource) State() (*awsVpcEndpointState, bool) {
	return ave.state, ave.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ave *Resource) StateMust() *awsVpcEndpointState {
	if ave.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ave.Type(), ave.LocalName()))
	}
	return ave.state
}

// Args contains the configurations for aws_vpc_endpoint.
type Args struct {
	// AutoAccept: bool, optional
	AutoAccept terra.BoolValue `hcl:"auto_accept,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddressType: string, optional
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr"`
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
	// PrivateDnsEnabled: bool, optional
	PrivateDnsEnabled terra.BoolValue `hcl:"private_dns_enabled,attr"`
	// RouteTableIds: set of string, optional
	RouteTableIds terra.SetValue[terra.StringValue] `hcl:"route_table_ids,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcEndpointType: string, optional
	VpcEndpointType terra.StringValue `hcl:"vpc_endpoint_type,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// DnsOptions: optional
	DnsOptions *DnsOptions `hcl:"dns_options,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVpcEndpointAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ave.ref.Append("arn"))
}

// AutoAccept returns a reference to field auto_accept of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) AutoAccept() terra.BoolValue {
	return terra.ReferenceAsBool(ave.ref.Append("auto_accept"))
}

// CidrBlocks returns a reference to field cidr_blocks of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ave.ref.Append("cidr_blocks"))
}

// Id returns a reference to field id of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ave.ref.Append("id"))
}

// IpAddressType returns a reference to field ip_address_type of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceAsString(ave.ref.Append("ip_address_type"))
}

// NetworkInterfaceIds returns a reference to field network_interface_ids of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) NetworkInterfaceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ave.ref.Append("network_interface_ids"))
}

// OwnerId returns a reference to field owner_id of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(ave.ref.Append("owner_id"))
}

// Policy returns a reference to field policy of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(ave.ref.Append("policy"))
}

// PrefixListId returns a reference to field prefix_list_id of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) PrefixListId() terra.StringValue {
	return terra.ReferenceAsString(ave.ref.Append("prefix_list_id"))
}

// PrivateDnsEnabled returns a reference to field private_dns_enabled of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) PrivateDnsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ave.ref.Append("private_dns_enabled"))
}

// RequesterManaged returns a reference to field requester_managed of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) RequesterManaged() terra.BoolValue {
	return terra.ReferenceAsBool(ave.ref.Append("requester_managed"))
}

// RouteTableIds returns a reference to field route_table_ids of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) RouteTableIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ave.ref.Append("route_table_ids"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ave.ref.Append("security_group_ids"))
}

// ServiceName returns a reference to field service_name of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(ave.ref.Append("service_name"))
}

// State returns a reference to field state of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(ave.ref.Append("state"))
}

// SubnetIds returns a reference to field subnet_ids of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ave.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ave.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ave.ref.Append("tags_all"))
}

// VpcEndpointType returns a reference to field vpc_endpoint_type of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) VpcEndpointType() terra.StringValue {
	return terra.ReferenceAsString(ave.ref.Append("vpc_endpoint_type"))
}

// VpcId returns a reference to field vpc_id of aws_vpc_endpoint.
func (ave awsVpcEndpointAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(ave.ref.Append("vpc_id"))
}

func (ave awsVpcEndpointAttributes) DnsEntry() terra.ListValue[DnsEntryAttributes] {
	return terra.ReferenceAsList[DnsEntryAttributes](ave.ref.Append("dns_entry"))
}

func (ave awsVpcEndpointAttributes) DnsOptions() terra.ListValue[DnsOptionsAttributes] {
	return terra.ReferenceAsList[DnsOptionsAttributes](ave.ref.Append("dns_options"))
}

func (ave awsVpcEndpointAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](ave.ref.Append("timeouts"))
}

type awsVpcEndpointState struct {
	Arn                 string            `json:"arn"`
	AutoAccept          bool              `json:"auto_accept"`
	CidrBlocks          []string          `json:"cidr_blocks"`
	Id                  string            `json:"id"`
	IpAddressType       string            `json:"ip_address_type"`
	NetworkInterfaceIds []string          `json:"network_interface_ids"`
	OwnerId             string            `json:"owner_id"`
	Policy              string            `json:"policy"`
	PrefixListId        string            `json:"prefix_list_id"`
	PrivateDnsEnabled   bool              `json:"private_dns_enabled"`
	RequesterManaged    bool              `json:"requester_managed"`
	RouteTableIds       []string          `json:"route_table_ids"`
	SecurityGroupIds    []string          `json:"security_group_ids"`
	ServiceName         string            `json:"service_name"`
	State               string            `json:"state"`
	SubnetIds           []string          `json:"subnet_ids"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
	VpcEndpointType     string            `json:"vpc_endpoint_type"`
	VpcId               string            `json:"vpc_id"`
	DnsEntry            []DnsEntryState   `json:"dns_entry"`
	DnsOptions          []DnsOptionsState `json:"dns_options"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
