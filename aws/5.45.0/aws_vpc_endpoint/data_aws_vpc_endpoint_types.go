// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_endpoint

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataFilter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type DataTimeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type DataDnsEntryAttributes struct {
	ref terra.Reference
}

func (de DataDnsEntryAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de DataDnsEntryAttributes) InternalWithRef(ref terra.Reference) DataDnsEntryAttributes {
	return DataDnsEntryAttributes{ref: ref}
}

func (de DataDnsEntryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de DataDnsEntryAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("dns_name"))
}

func (de DataDnsEntryAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("hosted_zone_id"))
}

type DataDnsOptionsAttributes struct {
	ref terra.Reference
}

func (do DataDnsOptionsAttributes) InternalRef() (terra.Reference, error) {
	return do.ref, nil
}

func (do DataDnsOptionsAttributes) InternalWithRef(ref terra.Reference) DataDnsOptionsAttributes {
	return DataDnsOptionsAttributes{ref: ref}
}

func (do DataDnsOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return do.ref.InternalTokens()
}

func (do DataDnsOptionsAttributes) DnsRecordIpType() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("dns_record_ip_type"))
}

func (do DataDnsOptionsAttributes) PrivateDnsOnlyForInboundResolverEndpoint() terra.BoolValue {
	return terra.ReferenceAsBool(do.ref.Append("private_dns_only_for_inbound_resolver_endpoint"))
}

type DataFilterAttributes struct {
	ref terra.Reference
}

func (f DataFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f DataFilterAttributes) InternalWithRef(ref terra.Reference) DataFilterAttributes {
	return DataFilterAttributes{ref: ref}
}

func (f DataFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f DataFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f DataFilterAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](f.ref.Append("values"))
}

type DataTimeoutsAttributes struct {
	ref terra.Reference
}

func (t DataTimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DataTimeoutsAttributes) InternalWithRef(ref terra.Reference) DataTimeoutsAttributes {
	return DataTimeoutsAttributes{ref: ref}
}

func (t DataTimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DataTimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataDnsEntryState struct {
	DnsName      string `json:"dns_name"`
	HostedZoneId string `json:"hosted_zone_id"`
}

type DataDnsOptionsState struct {
	DnsRecordIpType                          string `json:"dns_record_ip_type"`
	PrivateDnsOnlyForInboundResolverEndpoint bool   `json:"private_dns_only_for_inbound_resolver_endpoint"`
}

type DataFilterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
