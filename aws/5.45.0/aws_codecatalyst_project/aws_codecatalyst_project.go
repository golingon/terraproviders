// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codecatalyst_project

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codecatalyst_project.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodecatalystProjectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acp *Resource) Type() string {
	return "aws_codecatalyst_project"
}

// LocalName returns the local name for [Resource].
func (acp *Resource) LocalName() string {
	return acp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acp *Resource) Configuration() interface{} {
	return acp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acp *Resource) Dependencies() terra.Dependencies {
	return acp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acp *Resource) LifecycleManagement() *terra.Lifecycle {
	return acp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acp *Resource) Attributes() awsCodecatalystProjectAttributes {
	return awsCodecatalystProjectAttributes{ref: terra.ReferenceResource(acp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acp *Resource) ImportState(state io.Reader) error {
	acp.state = &awsCodecatalystProjectState{}
	if err := json.NewDecoder(state).Decode(acp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acp.Type(), acp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acp *Resource) State() (*awsCodecatalystProjectState, bool) {
	return acp.state, acp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acp *Resource) StateMust() *awsCodecatalystProjectState {
	if acp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acp.Type(), acp.LocalName()))
	}
	return acp.state
}

// Args contains the configurations for aws_codecatalyst_project.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SpaceName: string, required
	SpaceName terra.StringValue `hcl:"space_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsCodecatalystProjectAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_codecatalyst_project.
func (acp awsCodecatalystProjectAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of aws_codecatalyst_project.
func (acp awsCodecatalystProjectAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("display_name"))
}

// Id returns a reference to field id of aws_codecatalyst_project.
func (acp awsCodecatalystProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("id"))
}

// Name returns a reference to field name of aws_codecatalyst_project.
func (acp awsCodecatalystProjectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("name"))
}

// SpaceName returns a reference to field space_name of aws_codecatalyst_project.
func (acp awsCodecatalystProjectAttributes) SpaceName() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("space_name"))
}

func (acp awsCodecatalystProjectAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acp.ref.Append("timeouts"))
}

type awsCodecatalystProjectState struct {
	Description string         `json:"description"`
	DisplayName string         `json:"display_name"`
	Id          string         `json:"id"`
	Name        string         `json:"name"`
	SpaceName   string         `json:"space_name"`
	Timeouts    *TimeoutsState `json:"timeouts"`
}
