// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_file_cache

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_fsx_file_cache.
type Resource struct {
	Name      string
	Args      Args
	state     *awsFsxFileCacheState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (affc *Resource) Type() string {
	return "aws_fsx_file_cache"
}

// LocalName returns the local name for [Resource].
func (affc *Resource) LocalName() string {
	return affc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (affc *Resource) Configuration() interface{} {
	return affc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (affc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(affc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (affc *Resource) Dependencies() terra.Dependencies {
	return affc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (affc *Resource) LifecycleManagement() *terra.Lifecycle {
	return affc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (affc *Resource) Attributes() awsFsxFileCacheAttributes {
	return awsFsxFileCacheAttributes{ref: terra.ReferenceResource(affc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (affc *Resource) ImportState(state io.Reader) error {
	affc.state = &awsFsxFileCacheState{}
	if err := json.NewDecoder(state).Decode(affc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", affc.Type(), affc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (affc *Resource) State() (*awsFsxFileCacheState, bool) {
	return affc.state, affc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (affc *Resource) StateMust() *awsFsxFileCacheState {
	if affc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", affc.Type(), affc.LocalName()))
	}
	return affc.state
}

// Args contains the configurations for aws_fsx_file_cache.
type Args struct {
	// CopyTagsToDataRepositoryAssociations: bool, optional
	CopyTagsToDataRepositoryAssociations terra.BoolValue `hcl:"copy_tags_to_data_repository_associations,attr"`
	// FileCacheType: string, required
	FileCacheType terra.StringValue `hcl:"file_cache_type,attr" validate:"required"`
	// FileCacheTypeVersion: string, required
	FileCacheTypeVersion terra.StringValue `hcl:"file_cache_type_version,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// StorageCapacity: number, required
	StorageCapacity terra.NumberValue `hcl:"storage_capacity,attr" validate:"required"`
	// SubnetIds: list of string, required
	SubnetIds terra.ListValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DataRepositoryAssociation: min=0,max=8
	DataRepositoryAssociation []DataRepositoryAssociation `hcl:"data_repository_association,block" validate:"min=0,max=8"`
	// LustreConfiguration: min=0
	LustreConfiguration []LustreConfiguration `hcl:"lustre_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsFsxFileCacheAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(affc.ref.Append("arn"))
}

// CopyTagsToDataRepositoryAssociations returns a reference to field copy_tags_to_data_repository_associations of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) CopyTagsToDataRepositoryAssociations() terra.BoolValue {
	return terra.ReferenceAsBool(affc.ref.Append("copy_tags_to_data_repository_associations"))
}

// DataRepositoryAssociationIds returns a reference to field data_repository_association_ids of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) DataRepositoryAssociationIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](affc.ref.Append("data_repository_association_ids"))
}

// DnsName returns a reference to field dns_name of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(affc.ref.Append("dns_name"))
}

// FileCacheId returns a reference to field file_cache_id of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) FileCacheId() terra.StringValue {
	return terra.ReferenceAsString(affc.ref.Append("file_cache_id"))
}

// FileCacheType returns a reference to field file_cache_type of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) FileCacheType() terra.StringValue {
	return terra.ReferenceAsString(affc.ref.Append("file_cache_type"))
}

// FileCacheTypeVersion returns a reference to field file_cache_type_version of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) FileCacheTypeVersion() terra.StringValue {
	return terra.ReferenceAsString(affc.ref.Append("file_cache_type_version"))
}

// Id returns a reference to field id of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(affc.ref.Append("id"))
}

// KmsKeyId returns a reference to field kms_key_id of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(affc.ref.Append("kms_key_id"))
}

// NetworkInterfaceIds returns a reference to field network_interface_ids of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) NetworkInterfaceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](affc.ref.Append("network_interface_ids"))
}

// OwnerId returns a reference to field owner_id of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(affc.ref.Append("owner_id"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](affc.ref.Append("security_group_ids"))
}

// StorageCapacity returns a reference to field storage_capacity of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) StorageCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(affc.ref.Append("storage_capacity"))
}

// SubnetIds returns a reference to field subnet_ids of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) SubnetIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](affc.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](affc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](affc.ref.Append("tags_all"))
}

// VpcId returns a reference to field vpc_id of aws_fsx_file_cache.
func (affc awsFsxFileCacheAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(affc.ref.Append("vpc_id"))
}

func (affc awsFsxFileCacheAttributes) DataRepositoryAssociation() terra.SetValue[DataRepositoryAssociationAttributes] {
	return terra.ReferenceAsSet[DataRepositoryAssociationAttributes](affc.ref.Append("data_repository_association"))
}

func (affc awsFsxFileCacheAttributes) LustreConfiguration() terra.SetValue[LustreConfigurationAttributes] {
	return terra.ReferenceAsSet[LustreConfigurationAttributes](affc.ref.Append("lustre_configuration"))
}

func (affc awsFsxFileCacheAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](affc.ref.Append("timeouts"))
}

type awsFsxFileCacheState struct {
	Arn                                  string                           `json:"arn"`
	CopyTagsToDataRepositoryAssociations bool                             `json:"copy_tags_to_data_repository_associations"`
	DataRepositoryAssociationIds         []string                         `json:"data_repository_association_ids"`
	DnsName                              string                           `json:"dns_name"`
	FileCacheId                          string                           `json:"file_cache_id"`
	FileCacheType                        string                           `json:"file_cache_type"`
	FileCacheTypeVersion                 string                           `json:"file_cache_type_version"`
	Id                                   string                           `json:"id"`
	KmsKeyId                             string                           `json:"kms_key_id"`
	NetworkInterfaceIds                  []string                         `json:"network_interface_ids"`
	OwnerId                              string                           `json:"owner_id"`
	SecurityGroupIds                     []string                         `json:"security_group_ids"`
	StorageCapacity                      float64                          `json:"storage_capacity"`
	SubnetIds                            []string                         `json:"subnet_ids"`
	Tags                                 map[string]string                `json:"tags"`
	TagsAll                              map[string]string                `json:"tags_all"`
	VpcId                                string                           `json:"vpc_id"`
	DataRepositoryAssociation            []DataRepositoryAssociationState `json:"data_repository_association"`
	LustreConfiguration                  []LustreConfigurationState       `json:"lustre_configuration"`
	Timeouts                             *TimeoutsState                   `json:"timeouts"`
}
