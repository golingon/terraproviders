// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_lifecycle_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rule struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// RuleAbortIncompleteMultipartUpload: optional
	AbortIncompleteMultipartUpload *RuleAbortIncompleteMultipartUpload `hcl:"abort_incomplete_multipart_upload,block"`
	// RuleExpiration: optional
	Expiration *RuleExpiration `hcl:"expiration,block"`
	// RuleFilter: optional
	Filter *RuleFilter `hcl:"filter,block"`
	// RuleNoncurrentVersionExpiration: optional
	NoncurrentVersionExpiration *RuleNoncurrentVersionExpiration `hcl:"noncurrent_version_expiration,block"`
	// RuleNoncurrentVersionTransition: min=0
	NoncurrentVersionTransition []RuleNoncurrentVersionTransition `hcl:"noncurrent_version_transition,block" validate:"min=0"`
	// RuleTransition: min=0
	Transition []RuleTransition `hcl:"transition,block" validate:"min=0"`
}

type RuleAbortIncompleteMultipartUpload struct {
	// DaysAfterInitiation: number, optional
	DaysAfterInitiation terra.NumberValue `hcl:"days_after_initiation,attr"`
}

type RuleExpiration struct {
	// Date: string, optional
	Date terra.StringValue `hcl:"date,attr"`
	// Days: number, optional
	Days terra.NumberValue `hcl:"days,attr"`
	// ExpiredObjectDeleteMarker: bool, optional
	ExpiredObjectDeleteMarker terra.BoolValue `hcl:"expired_object_delete_marker,attr"`
}

type RuleFilter struct {
	// ObjectSizeGreaterThan: string, optional
	ObjectSizeGreaterThan terra.StringValue `hcl:"object_size_greater_than,attr"`
	// ObjectSizeLessThan: string, optional
	ObjectSizeLessThan terra.StringValue `hcl:"object_size_less_than,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RuleFilterAnd: optional
	And *RuleFilterAnd `hcl:"and,block"`
	// RuleFilterTag: optional
	Tag *RuleFilterTag `hcl:"tag,block"`
}

type RuleFilterAnd struct {
	// ObjectSizeGreaterThan: number, optional
	ObjectSizeGreaterThan terra.NumberValue `hcl:"object_size_greater_than,attr"`
	// ObjectSizeLessThan: number, optional
	ObjectSizeLessThan terra.NumberValue `hcl:"object_size_less_than,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type RuleFilterTag struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type RuleNoncurrentVersionExpiration struct {
	// NewerNoncurrentVersions: string, optional
	NewerNoncurrentVersions terra.StringValue `hcl:"newer_noncurrent_versions,attr"`
	// NoncurrentDays: number, optional
	NoncurrentDays terra.NumberValue `hcl:"noncurrent_days,attr"`
}

type RuleNoncurrentVersionTransition struct {
	// NewerNoncurrentVersions: string, optional
	NewerNoncurrentVersions terra.StringValue `hcl:"newer_noncurrent_versions,attr"`
	// NoncurrentDays: number, optional
	NoncurrentDays terra.NumberValue `hcl:"noncurrent_days,attr"`
	// StorageClass: string, required
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type RuleTransition struct {
	// Date: string, optional
	Date terra.StringValue `hcl:"date,attr"`
	// Days: number, optional
	Days terra.NumberValue `hcl:"days,attr"`
	// StorageClass: string, required
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type RuleAttributes struct {
	ref terra.Reference
}

func (r RuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RuleAttributes) InternalWithRef(ref terra.Reference) RuleAttributes {
	return RuleAttributes{ref: ref}
}

func (r RuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r RuleAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("prefix"))
}

func (r RuleAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("status"))
}

func (r RuleAttributes) AbortIncompleteMultipartUpload() terra.ListValue[RuleAbortIncompleteMultipartUploadAttributes] {
	return terra.ReferenceAsList[RuleAbortIncompleteMultipartUploadAttributes](r.ref.Append("abort_incomplete_multipart_upload"))
}

func (r RuleAttributes) Expiration() terra.ListValue[RuleExpirationAttributes] {
	return terra.ReferenceAsList[RuleExpirationAttributes](r.ref.Append("expiration"))
}

func (r RuleAttributes) Filter() terra.ListValue[RuleFilterAttributes] {
	return terra.ReferenceAsList[RuleFilterAttributes](r.ref.Append("filter"))
}

func (r RuleAttributes) NoncurrentVersionExpiration() terra.ListValue[RuleNoncurrentVersionExpirationAttributes] {
	return terra.ReferenceAsList[RuleNoncurrentVersionExpirationAttributes](r.ref.Append("noncurrent_version_expiration"))
}

func (r RuleAttributes) NoncurrentVersionTransition() terra.SetValue[RuleNoncurrentVersionTransitionAttributes] {
	return terra.ReferenceAsSet[RuleNoncurrentVersionTransitionAttributes](r.ref.Append("noncurrent_version_transition"))
}

func (r RuleAttributes) Transition() terra.SetValue[RuleTransitionAttributes] {
	return terra.ReferenceAsSet[RuleTransitionAttributes](r.ref.Append("transition"))
}

type RuleAbortIncompleteMultipartUploadAttributes struct {
	ref terra.Reference
}

func (aimu RuleAbortIncompleteMultipartUploadAttributes) InternalRef() (terra.Reference, error) {
	return aimu.ref, nil
}

func (aimu RuleAbortIncompleteMultipartUploadAttributes) InternalWithRef(ref terra.Reference) RuleAbortIncompleteMultipartUploadAttributes {
	return RuleAbortIncompleteMultipartUploadAttributes{ref: ref}
}

func (aimu RuleAbortIncompleteMultipartUploadAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aimu.ref.InternalTokens()
}

func (aimu RuleAbortIncompleteMultipartUploadAttributes) DaysAfterInitiation() terra.NumberValue {
	return terra.ReferenceAsNumber(aimu.ref.Append("days_after_initiation"))
}

type RuleExpirationAttributes struct {
	ref terra.Reference
}

func (e RuleExpirationAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e RuleExpirationAttributes) InternalWithRef(ref terra.Reference) RuleExpirationAttributes {
	return RuleExpirationAttributes{ref: ref}
}

func (e RuleExpirationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e RuleExpirationAttributes) Date() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("date"))
}

func (e RuleExpirationAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("days"))
}

func (e RuleExpirationAttributes) ExpiredObjectDeleteMarker() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("expired_object_delete_marker"))
}

type RuleFilterAttributes struct {
	ref terra.Reference
}

func (f RuleFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f RuleFilterAttributes) InternalWithRef(ref terra.Reference) RuleFilterAttributes {
	return RuleFilterAttributes{ref: ref}
}

func (f RuleFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f RuleFilterAttributes) ObjectSizeGreaterThan() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("object_size_greater_than"))
}

func (f RuleFilterAttributes) ObjectSizeLessThan() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("object_size_less_than"))
}

func (f RuleFilterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

func (f RuleFilterAttributes) And() terra.ListValue[RuleFilterAndAttributes] {
	return terra.ReferenceAsList[RuleFilterAndAttributes](f.ref.Append("and"))
}

func (f RuleFilterAttributes) Tag() terra.ListValue[RuleFilterTagAttributes] {
	return terra.ReferenceAsList[RuleFilterTagAttributes](f.ref.Append("tag"))
}

type RuleFilterAndAttributes struct {
	ref terra.Reference
}

func (a RuleFilterAndAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a RuleFilterAndAttributes) InternalWithRef(ref terra.Reference) RuleFilterAndAttributes {
	return RuleFilterAndAttributes{ref: ref}
}

func (a RuleFilterAndAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a RuleFilterAndAttributes) ObjectSizeGreaterThan() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("object_size_greater_than"))
}

func (a RuleFilterAndAttributes) ObjectSizeLessThan() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("object_size_less_than"))
}

func (a RuleFilterAndAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("prefix"))
}

func (a RuleFilterAndAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("tags"))
}

type RuleFilterTagAttributes struct {
	ref terra.Reference
}

func (t RuleFilterTagAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t RuleFilterTagAttributes) InternalWithRef(ref terra.Reference) RuleFilterTagAttributes {
	return RuleFilterTagAttributes{ref: ref}
}

func (t RuleFilterTagAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t RuleFilterTagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t RuleFilterTagAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type RuleNoncurrentVersionExpirationAttributes struct {
	ref terra.Reference
}

func (nve RuleNoncurrentVersionExpirationAttributes) InternalRef() (terra.Reference, error) {
	return nve.ref, nil
}

func (nve RuleNoncurrentVersionExpirationAttributes) InternalWithRef(ref terra.Reference) RuleNoncurrentVersionExpirationAttributes {
	return RuleNoncurrentVersionExpirationAttributes{ref: ref}
}

func (nve RuleNoncurrentVersionExpirationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nve.ref.InternalTokens()
}

func (nve RuleNoncurrentVersionExpirationAttributes) NewerNoncurrentVersions() terra.StringValue {
	return terra.ReferenceAsString(nve.ref.Append("newer_noncurrent_versions"))
}

func (nve RuleNoncurrentVersionExpirationAttributes) NoncurrentDays() terra.NumberValue {
	return terra.ReferenceAsNumber(nve.ref.Append("noncurrent_days"))
}

type RuleNoncurrentVersionTransitionAttributes struct {
	ref terra.Reference
}

func (nvt RuleNoncurrentVersionTransitionAttributes) InternalRef() (terra.Reference, error) {
	return nvt.ref, nil
}

func (nvt RuleNoncurrentVersionTransitionAttributes) InternalWithRef(ref terra.Reference) RuleNoncurrentVersionTransitionAttributes {
	return RuleNoncurrentVersionTransitionAttributes{ref: ref}
}

func (nvt RuleNoncurrentVersionTransitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nvt.ref.InternalTokens()
}

func (nvt RuleNoncurrentVersionTransitionAttributes) NewerNoncurrentVersions() terra.StringValue {
	return terra.ReferenceAsString(nvt.ref.Append("newer_noncurrent_versions"))
}

func (nvt RuleNoncurrentVersionTransitionAttributes) NoncurrentDays() terra.NumberValue {
	return terra.ReferenceAsNumber(nvt.ref.Append("noncurrent_days"))
}

func (nvt RuleNoncurrentVersionTransitionAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(nvt.ref.Append("storage_class"))
}

type RuleTransitionAttributes struct {
	ref terra.Reference
}

func (t RuleTransitionAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t RuleTransitionAttributes) InternalWithRef(ref terra.Reference) RuleTransitionAttributes {
	return RuleTransitionAttributes{ref: ref}
}

func (t RuleTransitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t RuleTransitionAttributes) Date() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("date"))
}

func (t RuleTransitionAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("days"))
}

func (t RuleTransitionAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("storage_class"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RuleState struct {
	Id                             string                                    `json:"id"`
	Prefix                         string                                    `json:"prefix"`
	Status                         string                                    `json:"status"`
	AbortIncompleteMultipartUpload []RuleAbortIncompleteMultipartUploadState `json:"abort_incomplete_multipart_upload"`
	Expiration                     []RuleExpirationState                     `json:"expiration"`
	Filter                         []RuleFilterState                         `json:"filter"`
	NoncurrentVersionExpiration    []RuleNoncurrentVersionExpirationState    `json:"noncurrent_version_expiration"`
	NoncurrentVersionTransition    []RuleNoncurrentVersionTransitionState    `json:"noncurrent_version_transition"`
	Transition                     []RuleTransitionState                     `json:"transition"`
}

type RuleAbortIncompleteMultipartUploadState struct {
	DaysAfterInitiation float64 `json:"days_after_initiation"`
}

type RuleExpirationState struct {
	Date                      string  `json:"date"`
	Days                      float64 `json:"days"`
	ExpiredObjectDeleteMarker bool    `json:"expired_object_delete_marker"`
}

type RuleFilterState struct {
	ObjectSizeGreaterThan string               `json:"object_size_greater_than"`
	ObjectSizeLessThan    string               `json:"object_size_less_than"`
	Prefix                string               `json:"prefix"`
	And                   []RuleFilterAndState `json:"and"`
	Tag                   []RuleFilterTagState `json:"tag"`
}

type RuleFilterAndState struct {
	ObjectSizeGreaterThan float64           `json:"object_size_greater_than"`
	ObjectSizeLessThan    float64           `json:"object_size_less_than"`
	Prefix                string            `json:"prefix"`
	Tags                  map[string]string `json:"tags"`
}

type RuleFilterTagState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type RuleNoncurrentVersionExpirationState struct {
	NewerNoncurrentVersions string  `json:"newer_noncurrent_versions"`
	NoncurrentDays          float64 `json:"noncurrent_days"`
}

type RuleNoncurrentVersionTransitionState struct {
	NewerNoncurrentVersions string  `json:"newer_noncurrent_versions"`
	NoncurrentDays          float64 `json:"noncurrent_days"`
	StorageClass            string  `json:"storage_class"`
}

type RuleTransitionState struct {
	Date         string  `json:"date"`
	Days         float64 `json:"days"`
	StorageClass string  `json:"storage_class"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Update string `json:"update"`
}
