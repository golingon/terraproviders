// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssmincidents_response_plan

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ssmincidents_response_plan.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSsmincidentsResponsePlanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asrp *Resource) Type() string {
	return "aws_ssmincidents_response_plan"
}

// LocalName returns the local name for [Resource].
func (asrp *Resource) LocalName() string {
	return asrp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asrp *Resource) Configuration() interface{} {
	return asrp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asrp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asrp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asrp *Resource) Dependencies() terra.Dependencies {
	return asrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asrp *Resource) LifecycleManagement() *terra.Lifecycle {
	return asrp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asrp *Resource) Attributes() awsSsmincidentsResponsePlanAttributes {
	return awsSsmincidentsResponsePlanAttributes{ref: terra.ReferenceResource(asrp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asrp *Resource) ImportState(state io.Reader) error {
	asrp.state = &awsSsmincidentsResponsePlanState{}
	if err := json.NewDecoder(state).Decode(asrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asrp.Type(), asrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asrp *Resource) State() (*awsSsmincidentsResponsePlanState, bool) {
	return asrp.state, asrp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asrp *Resource) StateMust() *awsSsmincidentsResponsePlanState {
	if asrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asrp.Type(), asrp.LocalName()))
	}
	return asrp.state
}

// Args contains the configurations for aws_ssmincidents_response_plan.
type Args struct {
	// ChatChannel: set of string, optional
	ChatChannel terra.SetValue[terra.StringValue] `hcl:"chat_channel,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Engagements: set of string, optional
	Engagements terra.SetValue[terra.StringValue] `hcl:"engagements,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Action: optional
	Action *Action `hcl:"action,block"`
	// IncidentTemplate: required
	IncidentTemplate *IncidentTemplate `hcl:"incident_template,block" validate:"required"`
	// Integration: optional
	Integration *Integration `hcl:"integration,block"`
}

type awsSsmincidentsResponsePlanAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ssmincidents_response_plan.
func (asrp awsSsmincidentsResponsePlanAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asrp.ref.Append("arn"))
}

// ChatChannel returns a reference to field chat_channel of aws_ssmincidents_response_plan.
func (asrp awsSsmincidentsResponsePlanAttributes) ChatChannel() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asrp.ref.Append("chat_channel"))
}

// DisplayName returns a reference to field display_name of aws_ssmincidents_response_plan.
func (asrp awsSsmincidentsResponsePlanAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(asrp.ref.Append("display_name"))
}

// Engagements returns a reference to field engagements of aws_ssmincidents_response_plan.
func (asrp awsSsmincidentsResponsePlanAttributes) Engagements() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](asrp.ref.Append("engagements"))
}

// Id returns a reference to field id of aws_ssmincidents_response_plan.
func (asrp awsSsmincidentsResponsePlanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asrp.ref.Append("id"))
}

// Name returns a reference to field name of aws_ssmincidents_response_plan.
func (asrp awsSsmincidentsResponsePlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asrp.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_ssmincidents_response_plan.
func (asrp awsSsmincidentsResponsePlanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asrp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ssmincidents_response_plan.
func (asrp awsSsmincidentsResponsePlanAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asrp.ref.Append("tags_all"))
}

func (asrp awsSsmincidentsResponsePlanAttributes) Action() terra.ListValue[ActionAttributes] {
	return terra.ReferenceAsList[ActionAttributes](asrp.ref.Append("action"))
}

func (asrp awsSsmincidentsResponsePlanAttributes) IncidentTemplate() terra.ListValue[IncidentTemplateAttributes] {
	return terra.ReferenceAsList[IncidentTemplateAttributes](asrp.ref.Append("incident_template"))
}

func (asrp awsSsmincidentsResponsePlanAttributes) Integration() terra.ListValue[IntegrationAttributes] {
	return terra.ReferenceAsList[IntegrationAttributes](asrp.ref.Append("integration"))
}

type awsSsmincidentsResponsePlanState struct {
	Arn              string                  `json:"arn"`
	ChatChannel      []string                `json:"chat_channel"`
	DisplayName      string                  `json:"display_name"`
	Engagements      []string                `json:"engagements"`
	Id               string                  `json:"id"`
	Name             string                  `json:"name"`
	Tags             map[string]string       `json:"tags"`
	TagsAll          map[string]string       `json:"tags_all"`
	Action           []ActionState           `json:"action"`
	IncidentTemplate []IncidentTemplateState `json:"incident_template"`
	Integration      []IntegrationState      `json:"integration"`
}
