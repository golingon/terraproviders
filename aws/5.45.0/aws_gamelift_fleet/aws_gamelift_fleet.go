// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_gamelift_fleet

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_gamelift_fleet.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGameliftFleetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agf *Resource) Type() string {
	return "aws_gamelift_fleet"
}

// LocalName returns the local name for [Resource].
func (agf *Resource) LocalName() string {
	return agf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agf *Resource) Configuration() interface{} {
	return agf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agf *Resource) Dependencies() terra.Dependencies {
	return agf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agf *Resource) LifecycleManagement() *terra.Lifecycle {
	return agf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agf *Resource) Attributes() awsGameliftFleetAttributes {
	return awsGameliftFleetAttributes{ref: terra.ReferenceResource(agf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agf *Resource) ImportState(state io.Reader) error {
	agf.state = &awsGameliftFleetState{}
	if err := json.NewDecoder(state).Decode(agf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agf.Type(), agf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agf *Resource) State() (*awsGameliftFleetState, bool) {
	return agf.state, agf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agf *Resource) StateMust() *awsGameliftFleetState {
	if agf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agf.Type(), agf.LocalName()))
	}
	return agf.state
}

// Args contains the configurations for aws_gamelift_fleet.
type Args struct {
	// BuildId: string, optional
	BuildId terra.StringValue `hcl:"build_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Ec2InstanceType: string, required
	Ec2InstanceType terra.StringValue `hcl:"ec2_instance_type,attr" validate:"required"`
	// FleetType: string, optional
	FleetType terra.StringValue `hcl:"fleet_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceRoleArn: string, optional
	InstanceRoleArn terra.StringValue `hcl:"instance_role_arn,attr"`
	// MetricGroups: list of string, optional
	MetricGroups terra.ListValue[terra.StringValue] `hcl:"metric_groups,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NewGameSessionProtectionPolicy: string, optional
	NewGameSessionProtectionPolicy terra.StringValue `hcl:"new_game_session_protection_policy,attr"`
	// ScriptId: string, optional
	ScriptId terra.StringValue `hcl:"script_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CertificateConfiguration: optional
	CertificateConfiguration *CertificateConfiguration `hcl:"certificate_configuration,block"`
	// Ec2InboundPermission: min=0,max=50
	Ec2InboundPermission []Ec2InboundPermission `hcl:"ec2_inbound_permission,block" validate:"min=0,max=50"`
	// ResourceCreationLimitPolicy: optional
	ResourceCreationLimitPolicy *ResourceCreationLimitPolicy `hcl:"resource_creation_limit_policy,block"`
	// RuntimeConfiguration: optional
	RuntimeConfiguration *RuntimeConfiguration `hcl:"runtime_configuration,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsGameliftFleetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agf.ref.Append("arn"))
}

// BuildArn returns a reference to field build_arn of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) BuildArn() terra.StringValue {
	return terra.ReferenceAsString(agf.ref.Append("build_arn"))
}

// BuildId returns a reference to field build_id of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) BuildId() terra.StringValue {
	return terra.ReferenceAsString(agf.ref.Append("build_id"))
}

// Description returns a reference to field description of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(agf.ref.Append("description"))
}

// Ec2InstanceType returns a reference to field ec2_instance_type of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) Ec2InstanceType() terra.StringValue {
	return terra.ReferenceAsString(agf.ref.Append("ec2_instance_type"))
}

// FleetType returns a reference to field fleet_type of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) FleetType() terra.StringValue {
	return terra.ReferenceAsString(agf.ref.Append("fleet_type"))
}

// Id returns a reference to field id of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agf.ref.Append("id"))
}

// InstanceRoleArn returns a reference to field instance_role_arn of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) InstanceRoleArn() terra.StringValue {
	return terra.ReferenceAsString(agf.ref.Append("instance_role_arn"))
}

// LogPaths returns a reference to field log_paths of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) LogPaths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](agf.ref.Append("log_paths"))
}

// MetricGroups returns a reference to field metric_groups of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) MetricGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](agf.ref.Append("metric_groups"))
}

// Name returns a reference to field name of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agf.ref.Append("name"))
}

// NewGameSessionProtectionPolicy returns a reference to field new_game_session_protection_policy of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) NewGameSessionProtectionPolicy() terra.StringValue {
	return terra.ReferenceAsString(agf.ref.Append("new_game_session_protection_policy"))
}

// OperatingSystem returns a reference to field operating_system of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) OperatingSystem() terra.StringValue {
	return terra.ReferenceAsString(agf.ref.Append("operating_system"))
}

// ScriptArn returns a reference to field script_arn of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) ScriptArn() terra.StringValue {
	return terra.ReferenceAsString(agf.ref.Append("script_arn"))
}

// ScriptId returns a reference to field script_id of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) ScriptId() terra.StringValue {
	return terra.ReferenceAsString(agf.ref.Append("script_id"))
}

// Tags returns a reference to field tags of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agf.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_gamelift_fleet.
func (agf awsGameliftFleetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agf.ref.Append("tags_all"))
}

func (agf awsGameliftFleetAttributes) CertificateConfiguration() terra.ListValue[CertificateConfigurationAttributes] {
	return terra.ReferenceAsList[CertificateConfigurationAttributes](agf.ref.Append("certificate_configuration"))
}

func (agf awsGameliftFleetAttributes) Ec2InboundPermission() terra.SetValue[Ec2InboundPermissionAttributes] {
	return terra.ReferenceAsSet[Ec2InboundPermissionAttributes](agf.ref.Append("ec2_inbound_permission"))
}

func (agf awsGameliftFleetAttributes) ResourceCreationLimitPolicy() terra.ListValue[ResourceCreationLimitPolicyAttributes] {
	return terra.ReferenceAsList[ResourceCreationLimitPolicyAttributes](agf.ref.Append("resource_creation_limit_policy"))
}

func (agf awsGameliftFleetAttributes) RuntimeConfiguration() terra.ListValue[RuntimeConfigurationAttributes] {
	return terra.ReferenceAsList[RuntimeConfigurationAttributes](agf.ref.Append("runtime_configuration"))
}

func (agf awsGameliftFleetAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](agf.ref.Append("timeouts"))
}

type awsGameliftFleetState struct {
	Arn                            string                             `json:"arn"`
	BuildArn                       string                             `json:"build_arn"`
	BuildId                        string                             `json:"build_id"`
	Description                    string                             `json:"description"`
	Ec2InstanceType                string                             `json:"ec2_instance_type"`
	FleetType                      string                             `json:"fleet_type"`
	Id                             string                             `json:"id"`
	InstanceRoleArn                string                             `json:"instance_role_arn"`
	LogPaths                       []string                           `json:"log_paths"`
	MetricGroups                   []string                           `json:"metric_groups"`
	Name                           string                             `json:"name"`
	NewGameSessionProtectionPolicy string                             `json:"new_game_session_protection_policy"`
	OperatingSystem                string                             `json:"operating_system"`
	ScriptArn                      string                             `json:"script_arn"`
	ScriptId                       string                             `json:"script_id"`
	Tags                           map[string]string                  `json:"tags"`
	TagsAll                        map[string]string                  `json:"tags_all"`
	CertificateConfiguration       []CertificateConfigurationState    `json:"certificate_configuration"`
	Ec2InboundPermission           []Ec2InboundPermissionState        `json:"ec2_inbound_permission"`
	ResourceCreationLimitPolicy    []ResourceCreationLimitPolicyState `json:"resource_creation_limit_policy"`
	RuntimeConfiguration           []RuntimeConfigurationState        `json:"runtime_configuration"`
	Timeouts                       *TimeoutsState                     `json:"timeouts"`
}
