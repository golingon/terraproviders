// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_gamelift_fleet

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CertificateConfiguration struct {
	// CertificateType: string, optional
	CertificateType terra.StringValue `hcl:"certificate_type,attr"`
}

type Ec2InboundPermission struct {
	// FromPort: number, required
	FromPort terra.NumberValue `hcl:"from_port,attr" validate:"required"`
	// IpRange: string, required
	IpRange terra.StringValue `hcl:"ip_range,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// ToPort: number, required
	ToPort terra.NumberValue `hcl:"to_port,attr" validate:"required"`
}

type ResourceCreationLimitPolicy struct {
	// NewGameSessionsPerCreator: number, optional
	NewGameSessionsPerCreator terra.NumberValue `hcl:"new_game_sessions_per_creator,attr"`
	// PolicyPeriodInMinutes: number, optional
	PolicyPeriodInMinutes terra.NumberValue `hcl:"policy_period_in_minutes,attr"`
}

type RuntimeConfiguration struct {
	// GameSessionActivationTimeoutSeconds: number, optional
	GameSessionActivationTimeoutSeconds terra.NumberValue `hcl:"game_session_activation_timeout_seconds,attr"`
	// MaxConcurrentGameSessionActivations: number, optional
	MaxConcurrentGameSessionActivations terra.NumberValue `hcl:"max_concurrent_game_session_activations,attr"`
	// RuntimeConfigurationServerProcess: min=0,max=50
	ServerProcess []RuntimeConfigurationServerProcess `hcl:"server_process,block" validate:"min=0,max=50"`
}

type RuntimeConfigurationServerProcess struct {
	// ConcurrentExecutions: number, required
	ConcurrentExecutions terra.NumberValue `hcl:"concurrent_executions,attr" validate:"required"`
	// LaunchPath: string, required
	LaunchPath terra.StringValue `hcl:"launch_path,attr" validate:"required"`
	// Parameters: string, optional
	Parameters terra.StringValue `hcl:"parameters,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type CertificateConfigurationAttributes struct {
	ref terra.Reference
}

func (cc CertificateConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc CertificateConfigurationAttributes) InternalWithRef(ref terra.Reference) CertificateConfigurationAttributes {
	return CertificateConfigurationAttributes{ref: ref}
}

func (cc CertificateConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc CertificateConfigurationAttributes) CertificateType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("certificate_type"))
}

type Ec2InboundPermissionAttributes struct {
	ref terra.Reference
}

func (eip Ec2InboundPermissionAttributes) InternalRef() (terra.Reference, error) {
	return eip.ref, nil
}

func (eip Ec2InboundPermissionAttributes) InternalWithRef(ref terra.Reference) Ec2InboundPermissionAttributes {
	return Ec2InboundPermissionAttributes{ref: ref}
}

func (eip Ec2InboundPermissionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eip.ref.InternalTokens()
}

func (eip Ec2InboundPermissionAttributes) FromPort() terra.NumberValue {
	return terra.ReferenceAsNumber(eip.ref.Append("from_port"))
}

func (eip Ec2InboundPermissionAttributes) IpRange() terra.StringValue {
	return terra.ReferenceAsString(eip.ref.Append("ip_range"))
}

func (eip Ec2InboundPermissionAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(eip.ref.Append("protocol"))
}

func (eip Ec2InboundPermissionAttributes) ToPort() terra.NumberValue {
	return terra.ReferenceAsNumber(eip.ref.Append("to_port"))
}

type ResourceCreationLimitPolicyAttributes struct {
	ref terra.Reference
}

func (rclp ResourceCreationLimitPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rclp.ref, nil
}

func (rclp ResourceCreationLimitPolicyAttributes) InternalWithRef(ref terra.Reference) ResourceCreationLimitPolicyAttributes {
	return ResourceCreationLimitPolicyAttributes{ref: ref}
}

func (rclp ResourceCreationLimitPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rclp.ref.InternalTokens()
}

func (rclp ResourceCreationLimitPolicyAttributes) NewGameSessionsPerCreator() terra.NumberValue {
	return terra.ReferenceAsNumber(rclp.ref.Append("new_game_sessions_per_creator"))
}

func (rclp ResourceCreationLimitPolicyAttributes) PolicyPeriodInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(rclp.ref.Append("policy_period_in_minutes"))
}

type RuntimeConfigurationAttributes struct {
	ref terra.Reference
}

func (rc RuntimeConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc RuntimeConfigurationAttributes) InternalWithRef(ref terra.Reference) RuntimeConfigurationAttributes {
	return RuntimeConfigurationAttributes{ref: ref}
}

func (rc RuntimeConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc RuntimeConfigurationAttributes) GameSessionActivationTimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("game_session_activation_timeout_seconds"))
}

func (rc RuntimeConfigurationAttributes) MaxConcurrentGameSessionActivations() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("max_concurrent_game_session_activations"))
}

func (rc RuntimeConfigurationAttributes) ServerProcess() terra.ListValue[RuntimeConfigurationServerProcessAttributes] {
	return terra.ReferenceAsList[RuntimeConfigurationServerProcessAttributes](rc.ref.Append("server_process"))
}

type RuntimeConfigurationServerProcessAttributes struct {
	ref terra.Reference
}

func (sp RuntimeConfigurationServerProcessAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp RuntimeConfigurationServerProcessAttributes) InternalWithRef(ref terra.Reference) RuntimeConfigurationServerProcessAttributes {
	return RuntimeConfigurationServerProcessAttributes{ref: ref}
}

func (sp RuntimeConfigurationServerProcessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp RuntimeConfigurationServerProcessAttributes) ConcurrentExecutions() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("concurrent_executions"))
}

func (sp RuntimeConfigurationServerProcessAttributes) LaunchPath() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("launch_path"))
}

func (sp RuntimeConfigurationServerProcessAttributes) Parameters() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("parameters"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type CertificateConfigurationState struct {
	CertificateType string `json:"certificate_type"`
}

type Ec2InboundPermissionState struct {
	FromPort float64 `json:"from_port"`
	IpRange  string  `json:"ip_range"`
	Protocol string  `json:"protocol"`
	ToPort   float64 `json:"to_port"`
}

type ResourceCreationLimitPolicyState struct {
	NewGameSessionsPerCreator float64 `json:"new_game_sessions_per_creator"`
	PolicyPeriodInMinutes     float64 `json:"policy_period_in_minutes"`
}

type RuntimeConfigurationState struct {
	GameSessionActivationTimeoutSeconds float64                                  `json:"game_session_activation_timeout_seconds"`
	MaxConcurrentGameSessionActivations float64                                  `json:"max_concurrent_game_session_activations"`
	ServerProcess                       []RuntimeConfigurationServerProcessState `json:"server_process"`
}

type RuntimeConfigurationServerProcessState struct {
	ConcurrentExecutions float64 `json:"concurrent_executions"`
	LaunchPath           string  `json:"launch_path"`
	Parameters           string  `json:"parameters"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
