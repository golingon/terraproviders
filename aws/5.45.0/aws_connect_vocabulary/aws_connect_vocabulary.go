// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_vocabulary

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_connect_vocabulary.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConnectVocabularyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acv *Resource) Type() string {
	return "aws_connect_vocabulary"
}

// LocalName returns the local name for [Resource].
func (acv *Resource) LocalName() string {
	return acv.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acv *Resource) Configuration() interface{} {
	return acv.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acv *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acv)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acv *Resource) Dependencies() terra.Dependencies {
	return acv.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acv *Resource) LifecycleManagement() *terra.Lifecycle {
	return acv.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acv *Resource) Attributes() awsConnectVocabularyAttributes {
	return awsConnectVocabularyAttributes{ref: terra.ReferenceResource(acv)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acv *Resource) ImportState(state io.Reader) error {
	acv.state = &awsConnectVocabularyState{}
	if err := json.NewDecoder(state).Decode(acv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acv.Type(), acv.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acv *Resource) State() (*awsConnectVocabularyState, bool) {
	return acv.state, acv.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acv *Resource) StateMust() *awsConnectVocabularyState {
	if acv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acv.Type(), acv.LocalName()))
	}
	return acv.state
}

// Args contains the configurations for aws_connect_vocabulary.
type Args struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsConnectVocabularyAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_connect_vocabulary.
func (acv awsConnectVocabularyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acv.ref.Append("arn"))
}

// Content returns a reference to field content of aws_connect_vocabulary.
func (acv awsConnectVocabularyAttributes) Content() terra.StringValue {
	return terra.ReferenceAsString(acv.ref.Append("content"))
}

// FailureReason returns a reference to field failure_reason of aws_connect_vocabulary.
func (acv awsConnectVocabularyAttributes) FailureReason() terra.StringValue {
	return terra.ReferenceAsString(acv.ref.Append("failure_reason"))
}

// Id returns a reference to field id of aws_connect_vocabulary.
func (acv awsConnectVocabularyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acv.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_connect_vocabulary.
func (acv awsConnectVocabularyAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(acv.ref.Append("instance_id"))
}

// LanguageCode returns a reference to field language_code of aws_connect_vocabulary.
func (acv awsConnectVocabularyAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(acv.ref.Append("language_code"))
}

// LastModifiedTime returns a reference to field last_modified_time of aws_connect_vocabulary.
func (acv awsConnectVocabularyAttributes) LastModifiedTime() terra.StringValue {
	return terra.ReferenceAsString(acv.ref.Append("last_modified_time"))
}

// Name returns a reference to field name of aws_connect_vocabulary.
func (acv awsConnectVocabularyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acv.ref.Append("name"))
}

// State returns a reference to field state of aws_connect_vocabulary.
func (acv awsConnectVocabularyAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(acv.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_connect_vocabulary.
func (acv awsConnectVocabularyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acv.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_connect_vocabulary.
func (acv awsConnectVocabularyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acv.ref.Append("tags_all"))
}

// VocabularyId returns a reference to field vocabulary_id of aws_connect_vocabulary.
func (acv awsConnectVocabularyAttributes) VocabularyId() terra.StringValue {
	return terra.ReferenceAsString(acv.ref.Append("vocabulary_id"))
}

func (acv awsConnectVocabularyAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](acv.ref.Append("timeouts"))
}

type awsConnectVocabularyState struct {
	Arn              string            `json:"arn"`
	Content          string            `json:"content"`
	FailureReason    string            `json:"failure_reason"`
	Id               string            `json:"id"`
	InstanceId       string            `json:"instance_id"`
	LanguageCode     string            `json:"language_code"`
	LastModifiedTime string            `json:"last_modified_time"`
	Name             string            `json:"name"`
	State            string            `json:"state"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
	VocabularyId     string            `json:"vocabulary_id"`
	Timeouts         *TimeoutsState    `json:"timeouts"`
}
