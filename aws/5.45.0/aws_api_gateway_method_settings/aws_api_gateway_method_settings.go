// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_api_gateway_method_settings

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_api_gateway_method_settings.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApiGatewayMethodSettingsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aagms *Resource) Type() string {
	return "aws_api_gateway_method_settings"
}

// LocalName returns the local name for [Resource].
func (aagms *Resource) LocalName() string {
	return aagms.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aagms *Resource) Configuration() interface{} {
	return aagms.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aagms *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aagms)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aagms *Resource) Dependencies() terra.Dependencies {
	return aagms.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aagms *Resource) LifecycleManagement() *terra.Lifecycle {
	return aagms.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aagms *Resource) Attributes() awsApiGatewayMethodSettingsAttributes {
	return awsApiGatewayMethodSettingsAttributes{ref: terra.ReferenceResource(aagms)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aagms *Resource) ImportState(state io.Reader) error {
	aagms.state = &awsApiGatewayMethodSettingsState{}
	if err := json.NewDecoder(state).Decode(aagms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aagms.Type(), aagms.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aagms *Resource) State() (*awsApiGatewayMethodSettingsState, bool) {
	return aagms.state, aagms.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aagms *Resource) StateMust() *awsApiGatewayMethodSettingsState {
	if aagms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aagms.Type(), aagms.LocalName()))
	}
	return aagms.state
}

// Args contains the configurations for aws_api_gateway_method_settings.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MethodPath: string, required
	MethodPath terra.StringValue `hcl:"method_path,attr" validate:"required"`
	// RestApiId: string, required
	RestApiId terra.StringValue `hcl:"rest_api_id,attr" validate:"required"`
	// StageName: string, required
	StageName terra.StringValue `hcl:"stage_name,attr" validate:"required"`
	// Settings: required
	Settings *Settings `hcl:"settings,block" validate:"required"`
}

type awsApiGatewayMethodSettingsAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_api_gateway_method_settings.
func (aagms awsApiGatewayMethodSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aagms.ref.Append("id"))
}

// MethodPath returns a reference to field method_path of aws_api_gateway_method_settings.
func (aagms awsApiGatewayMethodSettingsAttributes) MethodPath() terra.StringValue {
	return terra.ReferenceAsString(aagms.ref.Append("method_path"))
}

// RestApiId returns a reference to field rest_api_id of aws_api_gateway_method_settings.
func (aagms awsApiGatewayMethodSettingsAttributes) RestApiId() terra.StringValue {
	return terra.ReferenceAsString(aagms.ref.Append("rest_api_id"))
}

// StageName returns a reference to field stage_name of aws_api_gateway_method_settings.
func (aagms awsApiGatewayMethodSettingsAttributes) StageName() terra.StringValue {
	return terra.ReferenceAsString(aagms.ref.Append("stage_name"))
}

func (aagms awsApiGatewayMethodSettingsAttributes) Settings() terra.ListValue[SettingsAttributes] {
	return terra.ReferenceAsList[SettingsAttributes](aagms.ref.Append("settings"))
}

type awsApiGatewayMethodSettingsState struct {
	Id         string          `json:"id"`
	MethodPath string          `json:"method_path"`
	RestApiId  string          `json:"rest_api_id"`
	StageName  string          `json:"stage_name"`
	Settings   []SettingsState `json:"settings"`
}
