// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ami_from_instance

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ami_from_instance.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAmiFromInstanceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aafi *Resource) Type() string {
	return "aws_ami_from_instance"
}

// LocalName returns the local name for [Resource].
func (aafi *Resource) LocalName() string {
	return aafi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aafi *Resource) Configuration() interface{} {
	return aafi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aafi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aafi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aafi *Resource) Dependencies() terra.Dependencies {
	return aafi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aafi *Resource) LifecycleManagement() *terra.Lifecycle {
	return aafi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aafi *Resource) Attributes() awsAmiFromInstanceAttributes {
	return awsAmiFromInstanceAttributes{ref: terra.ReferenceResource(aafi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aafi *Resource) ImportState(state io.Reader) error {
	aafi.state = &awsAmiFromInstanceState{}
	if err := json.NewDecoder(state).Decode(aafi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aafi.Type(), aafi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aafi *Resource) State() (*awsAmiFromInstanceState, bool) {
	return aafi.state, aafi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aafi *Resource) StateMust() *awsAmiFromInstanceState {
	if aafi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aafi.Type(), aafi.LocalName()))
	}
	return aafi.state
}

// Args contains the configurations for aws_ami_from_instance.
type Args struct {
	// DeprecationTime: string, optional
	DeprecationTime terra.StringValue `hcl:"deprecation_time,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SnapshotWithoutReboot: bool, optional
	SnapshotWithoutReboot terra.BoolValue `hcl:"snapshot_without_reboot,attr"`
	// SourceInstanceId: string, required
	SourceInstanceId terra.StringValue `hcl:"source_instance_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// EbsBlockDevice: min=0
	EbsBlockDevice []EbsBlockDevice `hcl:"ebs_block_device,block" validate:"min=0"`
	// EphemeralBlockDevice: min=0
	EphemeralBlockDevice []EphemeralBlockDevice `hcl:"ephemeral_block_device,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsAmiFromInstanceAttributes struct {
	ref terra.Reference
}

// Architecture returns a reference to field architecture of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) Architecture() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("architecture"))
}

// Arn returns a reference to field arn of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("arn"))
}

// BootMode returns a reference to field boot_mode of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) BootMode() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("boot_mode"))
}

// DeprecationTime returns a reference to field deprecation_time of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) DeprecationTime() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("deprecation_time"))
}

// Description returns a reference to field description of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("description"))
}

// EnaSupport returns a reference to field ena_support of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) EnaSupport() terra.BoolValue {
	return terra.ReferenceAsBool(aafi.ref.Append("ena_support"))
}

// Hypervisor returns a reference to field hypervisor of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) Hypervisor() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("hypervisor"))
}

// Id returns a reference to field id of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("id"))
}

// ImageLocation returns a reference to field image_location of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) ImageLocation() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("image_location"))
}

// ImageOwnerAlias returns a reference to field image_owner_alias of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) ImageOwnerAlias() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("image_owner_alias"))
}

// ImageType returns a reference to field image_type of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) ImageType() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("image_type"))
}

// ImdsSupport returns a reference to field imds_support of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) ImdsSupport() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("imds_support"))
}

// KernelId returns a reference to field kernel_id of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) KernelId() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("kernel_id"))
}

// ManageEbsSnapshots returns a reference to field manage_ebs_snapshots of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) ManageEbsSnapshots() terra.BoolValue {
	return terra.ReferenceAsBool(aafi.ref.Append("manage_ebs_snapshots"))
}

// Name returns a reference to field name of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("name"))
}

// OwnerId returns a reference to field owner_id of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("owner_id"))
}

// Platform returns a reference to field platform of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) Platform() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("platform"))
}

// PlatformDetails returns a reference to field platform_details of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) PlatformDetails() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("platform_details"))
}

// Public returns a reference to field public of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) Public() terra.BoolValue {
	return terra.ReferenceAsBool(aafi.ref.Append("public"))
}

// RamdiskId returns a reference to field ramdisk_id of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) RamdiskId() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("ramdisk_id"))
}

// RootDeviceName returns a reference to field root_device_name of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) RootDeviceName() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("root_device_name"))
}

// RootSnapshotId returns a reference to field root_snapshot_id of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) RootSnapshotId() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("root_snapshot_id"))
}

// SnapshotWithoutReboot returns a reference to field snapshot_without_reboot of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) SnapshotWithoutReboot() terra.BoolValue {
	return terra.ReferenceAsBool(aafi.ref.Append("snapshot_without_reboot"))
}

// SourceInstanceId returns a reference to field source_instance_id of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) SourceInstanceId() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("source_instance_id"))
}

// SriovNetSupport returns a reference to field sriov_net_support of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) SriovNetSupport() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("sriov_net_support"))
}

// Tags returns a reference to field tags of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aafi.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aafi.ref.Append("tags_all"))
}

// TpmSupport returns a reference to field tpm_support of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) TpmSupport() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("tpm_support"))
}

// UsageOperation returns a reference to field usage_operation of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) UsageOperation() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("usage_operation"))
}

// VirtualizationType returns a reference to field virtualization_type of aws_ami_from_instance.
func (aafi awsAmiFromInstanceAttributes) VirtualizationType() terra.StringValue {
	return terra.ReferenceAsString(aafi.ref.Append("virtualization_type"))
}

func (aafi awsAmiFromInstanceAttributes) EbsBlockDevice() terra.SetValue[EbsBlockDeviceAttributes] {
	return terra.ReferenceAsSet[EbsBlockDeviceAttributes](aafi.ref.Append("ebs_block_device"))
}

func (aafi awsAmiFromInstanceAttributes) EphemeralBlockDevice() terra.SetValue[EphemeralBlockDeviceAttributes] {
	return terra.ReferenceAsSet[EphemeralBlockDeviceAttributes](aafi.ref.Append("ephemeral_block_device"))
}

func (aafi awsAmiFromInstanceAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aafi.ref.Append("timeouts"))
}

type awsAmiFromInstanceState struct {
	Architecture          string                      `json:"architecture"`
	Arn                   string                      `json:"arn"`
	BootMode              string                      `json:"boot_mode"`
	DeprecationTime       string                      `json:"deprecation_time"`
	Description           string                      `json:"description"`
	EnaSupport            bool                        `json:"ena_support"`
	Hypervisor            string                      `json:"hypervisor"`
	Id                    string                      `json:"id"`
	ImageLocation         string                      `json:"image_location"`
	ImageOwnerAlias       string                      `json:"image_owner_alias"`
	ImageType             string                      `json:"image_type"`
	ImdsSupport           string                      `json:"imds_support"`
	KernelId              string                      `json:"kernel_id"`
	ManageEbsSnapshots    bool                        `json:"manage_ebs_snapshots"`
	Name                  string                      `json:"name"`
	OwnerId               string                      `json:"owner_id"`
	Platform              string                      `json:"platform"`
	PlatformDetails       string                      `json:"platform_details"`
	Public                bool                        `json:"public"`
	RamdiskId             string                      `json:"ramdisk_id"`
	RootDeviceName        string                      `json:"root_device_name"`
	RootSnapshotId        string                      `json:"root_snapshot_id"`
	SnapshotWithoutReboot bool                        `json:"snapshot_without_reboot"`
	SourceInstanceId      string                      `json:"source_instance_id"`
	SriovNetSupport       string                      `json:"sriov_net_support"`
	Tags                  map[string]string           `json:"tags"`
	TagsAll               map[string]string           `json:"tags_all"`
	TpmSupport            string                      `json:"tpm_support"`
	UsageOperation        string                      `json:"usage_operation"`
	VirtualizationType    string                      `json:"virtualization_type"`
	EbsBlockDevice        []EbsBlockDeviceState       `json:"ebs_block_device"`
	EphemeralBlockDevice  []EphemeralBlockDeviceState `json:"ephemeral_block_device"`
	Timeouts              *TimeoutsState              `json:"timeouts"`
}
