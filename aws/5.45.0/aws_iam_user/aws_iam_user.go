// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_user

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iam_user.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIamUserState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aiu *Resource) Type() string {
	return "aws_iam_user"
}

// LocalName returns the local name for [Resource].
func (aiu *Resource) LocalName() string {
	return aiu.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aiu *Resource) Configuration() interface{} {
	return aiu.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aiu *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aiu)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aiu *Resource) Dependencies() terra.Dependencies {
	return aiu.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aiu *Resource) LifecycleManagement() *terra.Lifecycle {
	return aiu.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aiu *Resource) Attributes() awsIamUserAttributes {
	return awsIamUserAttributes{ref: terra.ReferenceResource(aiu)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aiu *Resource) ImportState(state io.Reader) error {
	aiu.state = &awsIamUserState{}
	if err := json.NewDecoder(state).Decode(aiu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiu.Type(), aiu.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aiu *Resource) State() (*awsIamUserState, bool) {
	return aiu.state, aiu.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aiu *Resource) StateMust() *awsIamUserState {
	if aiu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiu.Type(), aiu.LocalName()))
	}
	return aiu.state
}

// Args contains the configurations for aws_iam_user.
type Args struct {
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// PermissionsBoundary: string, optional
	PermissionsBoundary terra.StringValue `hcl:"permissions_boundary,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsIamUserAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iam_user.
func (aiu awsIamUserAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("arn"))
}

// ForceDestroy returns a reference to field force_destroy of aws_iam_user.
func (aiu awsIamUserAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(aiu.ref.Append("force_destroy"))
}

// Id returns a reference to field id of aws_iam_user.
func (aiu awsIamUserAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("id"))
}

// Name returns a reference to field name of aws_iam_user.
func (aiu awsIamUserAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("name"))
}

// Path returns a reference to field path of aws_iam_user.
func (aiu awsIamUserAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("path"))
}

// PermissionsBoundary returns a reference to field permissions_boundary of aws_iam_user.
func (aiu awsIamUserAttributes) PermissionsBoundary() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("permissions_boundary"))
}

// Tags returns a reference to field tags of aws_iam_user.
func (aiu awsIamUserAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiu.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_iam_user.
func (aiu awsIamUserAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aiu.ref.Append("tags_all"))
}

// UniqueId returns a reference to field unique_id of aws_iam_user.
func (aiu awsIamUserAttributes) UniqueId() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("unique_id"))
}

type awsIamUserState struct {
	Arn                 string            `json:"arn"`
	ForceDestroy        bool              `json:"force_destroy"`
	Id                  string            `json:"id"`
	Name                string            `json:"name"`
	Path                string            `json:"path"`
	PermissionsBoundary string            `json:"permissions_boundary"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
	UniqueId            string            `json:"unique_id"`
}
