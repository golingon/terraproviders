// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_msk_scram_secret_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_msk_scram_secret_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsMskScramSecretAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amssa *Resource) Type() string {
	return "aws_msk_scram_secret_association"
}

// LocalName returns the local name for [Resource].
func (amssa *Resource) LocalName() string {
	return amssa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amssa *Resource) Configuration() interface{} {
	return amssa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amssa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amssa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amssa *Resource) Dependencies() terra.Dependencies {
	return amssa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amssa *Resource) LifecycleManagement() *terra.Lifecycle {
	return amssa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amssa *Resource) Attributes() awsMskScramSecretAssociationAttributes {
	return awsMskScramSecretAssociationAttributes{ref: terra.ReferenceResource(amssa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amssa *Resource) ImportState(state io.Reader) error {
	amssa.state = &awsMskScramSecretAssociationState{}
	if err := json.NewDecoder(state).Decode(amssa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amssa.Type(), amssa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amssa *Resource) State() (*awsMskScramSecretAssociationState, bool) {
	return amssa.state, amssa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amssa *Resource) StateMust() *awsMskScramSecretAssociationState {
	if amssa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amssa.Type(), amssa.LocalName()))
	}
	return amssa.state
}

// Args contains the configurations for aws_msk_scram_secret_association.
type Args struct {
	// ClusterArn: string, required
	ClusterArn terra.StringValue `hcl:"cluster_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SecretArnList: set of string, required
	SecretArnList terra.SetValue[terra.StringValue] `hcl:"secret_arn_list,attr" validate:"required"`
}

type awsMskScramSecretAssociationAttributes struct {
	ref terra.Reference
}

// ClusterArn returns a reference to field cluster_arn of aws_msk_scram_secret_association.
func (amssa awsMskScramSecretAssociationAttributes) ClusterArn() terra.StringValue {
	return terra.ReferenceAsString(amssa.ref.Append("cluster_arn"))
}

// Id returns a reference to field id of aws_msk_scram_secret_association.
func (amssa awsMskScramSecretAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amssa.ref.Append("id"))
}

// SecretArnList returns a reference to field secret_arn_list of aws_msk_scram_secret_association.
func (amssa awsMskScramSecretAssociationAttributes) SecretArnList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](amssa.ref.Append("secret_arn_list"))
}

type awsMskScramSecretAssociationState struct {
	ClusterArn    string   `json:"cluster_arn"`
	Id            string   `json:"id"`
	SecretArnList []string `json:"secret_arn_list"`
}
