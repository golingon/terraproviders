// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_principal_policy_simulation

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataContext struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type DataResultsAttributes struct {
	ref terra.Reference
}

func (r DataResultsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataResultsAttributes) InternalWithRef(ref terra.Reference) DataResultsAttributes {
	return DataResultsAttributes{ref: ref}
}

func (r DataResultsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataResultsAttributes) ActionName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("action_name"))
}

func (r DataResultsAttributes) Allowed() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("allowed"))
}

func (r DataResultsAttributes) Decision() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("decision"))
}

func (r DataResultsAttributes) DecisionDetails() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("decision_details"))
}

func (r DataResultsAttributes) MissingContextKeys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](r.ref.Append("missing_context_keys"))
}

func (r DataResultsAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("resource_arn"))
}

func (r DataResultsAttributes) MatchedStatements() terra.SetValue[DataResultsMatchedStatementsAttributes] {
	return terra.ReferenceAsSet[DataResultsMatchedStatementsAttributes](r.ref.Append("matched_statements"))
}

type DataResultsMatchedStatementsAttributes struct {
	ref terra.Reference
}

func (ms DataResultsMatchedStatementsAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms DataResultsMatchedStatementsAttributes) InternalWithRef(ref terra.Reference) DataResultsMatchedStatementsAttributes {
	return DataResultsMatchedStatementsAttributes{ref: ref}
}

func (ms DataResultsMatchedStatementsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms DataResultsMatchedStatementsAttributes) SourcePolicyId() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("source_policy_id"))
}

func (ms DataResultsMatchedStatementsAttributes) SourcePolicyType() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("source_policy_type"))
}

type DataContextAttributes struct {
	ref terra.Reference
}

func (c DataContextAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataContextAttributes) InternalWithRef(ref terra.Reference) DataContextAttributes {
	return DataContextAttributes{ref: ref}
}

func (c DataContextAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataContextAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("key"))
}

func (c DataContextAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

func (c DataContextAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("values"))
}

type DataResultsState struct {
	ActionName         string                              `json:"action_name"`
	Allowed            bool                                `json:"allowed"`
	Decision           string                              `json:"decision"`
	DecisionDetails    map[string]string                   `json:"decision_details"`
	MissingContextKeys []string                            `json:"missing_context_keys"`
	ResourceArn        string                              `json:"resource_arn"`
	MatchedStatements  []DataResultsMatchedStatementsState `json:"matched_statements"`
}

type DataResultsMatchedStatementsState struct {
	SourcePolicyId   string `json:"source_policy_id"`
	SourcePolicyType string `json:"source_policy_type"`
}

type DataContextState struct {
	Key    string   `json:"key"`
	Type   string   `json:"type"`
	Values []string `json:"values"`
}
