// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_principal_policy_simulation

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_iam_principal_policy_simulation.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aipps *DataSource) DataSource() string {
	return "aws_iam_principal_policy_simulation"
}

// LocalName returns the local name for [DataSource].
func (aipps *DataSource) LocalName() string {
	return aipps.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aipps *DataSource) Configuration() interface{} {
	return aipps.Args
}

// Attributes returns the attributes for [DataSource].
func (aipps *DataSource) Attributes() dataAwsIamPrincipalPolicySimulationAttributes {
	return dataAwsIamPrincipalPolicySimulationAttributes{ref: terra.ReferenceDataSource(aipps)}
}

// DataArgs contains the configurations for aws_iam_principal_policy_simulation.
type DataArgs struct {
	// ActionNames: set of string, required
	ActionNames terra.SetValue[terra.StringValue] `hcl:"action_names,attr" validate:"required"`
	// AdditionalPoliciesJson: set of string, optional
	AdditionalPoliciesJson terra.SetValue[terra.StringValue] `hcl:"additional_policies_json,attr"`
	// CallerArn: string, optional
	CallerArn terra.StringValue `hcl:"caller_arn,attr"`
	// PermissionsBoundaryPoliciesJson: set of string, optional
	PermissionsBoundaryPoliciesJson terra.SetValue[terra.StringValue] `hcl:"permissions_boundary_policies_json,attr"`
	// PolicySourceArn: string, required
	PolicySourceArn terra.StringValue `hcl:"policy_source_arn,attr" validate:"required"`
	// ResourceArns: set of string, optional
	ResourceArns terra.SetValue[terra.StringValue] `hcl:"resource_arns,attr"`
	// ResourceHandlingOption: string, optional
	ResourceHandlingOption terra.StringValue `hcl:"resource_handling_option,attr"`
	// ResourceOwnerAccountId: string, optional
	ResourceOwnerAccountId terra.StringValue `hcl:"resource_owner_account_id,attr"`
	// ResourcePolicyJson: string, optional
	ResourcePolicyJson terra.StringValue `hcl:"resource_policy_json,attr"`
	// Context: min=0
	Context []DataContext `hcl:"context,block" validate:"min=0"`
}

type dataAwsIamPrincipalPolicySimulationAttributes struct {
	ref terra.Reference
}

// ActionNames returns a reference to field action_names of aws_iam_principal_policy_simulation.
func (aipps dataAwsIamPrincipalPolicySimulationAttributes) ActionNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aipps.ref.Append("action_names"))
}

// AdditionalPoliciesJson returns a reference to field additional_policies_json of aws_iam_principal_policy_simulation.
func (aipps dataAwsIamPrincipalPolicySimulationAttributes) AdditionalPoliciesJson() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aipps.ref.Append("additional_policies_json"))
}

// AllAllowed returns a reference to field all_allowed of aws_iam_principal_policy_simulation.
func (aipps dataAwsIamPrincipalPolicySimulationAttributes) AllAllowed() terra.BoolValue {
	return terra.ReferenceAsBool(aipps.ref.Append("all_allowed"))
}

// CallerArn returns a reference to field caller_arn of aws_iam_principal_policy_simulation.
func (aipps dataAwsIamPrincipalPolicySimulationAttributes) CallerArn() terra.StringValue {
	return terra.ReferenceAsString(aipps.ref.Append("caller_arn"))
}

// Id returns a reference to field id of aws_iam_principal_policy_simulation.
func (aipps dataAwsIamPrincipalPolicySimulationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aipps.ref.Append("id"))
}

// PermissionsBoundaryPoliciesJson returns a reference to field permissions_boundary_policies_json of aws_iam_principal_policy_simulation.
func (aipps dataAwsIamPrincipalPolicySimulationAttributes) PermissionsBoundaryPoliciesJson() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aipps.ref.Append("permissions_boundary_policies_json"))
}

// PolicySourceArn returns a reference to field policy_source_arn of aws_iam_principal_policy_simulation.
func (aipps dataAwsIamPrincipalPolicySimulationAttributes) PolicySourceArn() terra.StringValue {
	return terra.ReferenceAsString(aipps.ref.Append("policy_source_arn"))
}

// ResourceArns returns a reference to field resource_arns of aws_iam_principal_policy_simulation.
func (aipps dataAwsIamPrincipalPolicySimulationAttributes) ResourceArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aipps.ref.Append("resource_arns"))
}

// ResourceHandlingOption returns a reference to field resource_handling_option of aws_iam_principal_policy_simulation.
func (aipps dataAwsIamPrincipalPolicySimulationAttributes) ResourceHandlingOption() terra.StringValue {
	return terra.ReferenceAsString(aipps.ref.Append("resource_handling_option"))
}

// ResourceOwnerAccountId returns a reference to field resource_owner_account_id of aws_iam_principal_policy_simulation.
func (aipps dataAwsIamPrincipalPolicySimulationAttributes) ResourceOwnerAccountId() terra.StringValue {
	return terra.ReferenceAsString(aipps.ref.Append("resource_owner_account_id"))
}

// ResourcePolicyJson returns a reference to field resource_policy_json of aws_iam_principal_policy_simulation.
func (aipps dataAwsIamPrincipalPolicySimulationAttributes) ResourcePolicyJson() terra.StringValue {
	return terra.ReferenceAsString(aipps.ref.Append("resource_policy_json"))
}

func (aipps dataAwsIamPrincipalPolicySimulationAttributes) Results() terra.SetValue[DataResultsAttributes] {
	return terra.ReferenceAsSet[DataResultsAttributes](aipps.ref.Append("results"))
}

func (aipps dataAwsIamPrincipalPolicySimulationAttributes) Context() terra.SetValue[DataContextAttributes] {
	return terra.ReferenceAsSet[DataContextAttributes](aipps.ref.Append("context"))
}
