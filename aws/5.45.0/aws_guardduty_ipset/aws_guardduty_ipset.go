// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_guardduty_ipset

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_guardduty_ipset.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGuarddutyIpsetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agi *Resource) Type() string {
	return "aws_guardduty_ipset"
}

// LocalName returns the local name for [Resource].
func (agi *Resource) LocalName() string {
	return agi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agi *Resource) Configuration() interface{} {
	return agi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agi *Resource) Dependencies() terra.Dependencies {
	return agi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agi *Resource) LifecycleManagement() *terra.Lifecycle {
	return agi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agi *Resource) Attributes() awsGuarddutyIpsetAttributes {
	return awsGuarddutyIpsetAttributes{ref: terra.ReferenceResource(agi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agi *Resource) ImportState(state io.Reader) error {
	agi.state = &awsGuarddutyIpsetState{}
	if err := json.NewDecoder(state).Decode(agi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agi.Type(), agi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agi *Resource) State() (*awsGuarddutyIpsetState, bool) {
	return agi.state, agi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agi *Resource) StateMust() *awsGuarddutyIpsetState {
	if agi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agi.Type(), agi.LocalName()))
	}
	return agi.state
}

// Args contains the configurations for aws_guardduty_ipset.
type Args struct {
	// Activate: bool, required
	Activate terra.BoolValue `hcl:"activate,attr" validate:"required"`
	// DetectorId: string, required
	DetectorId terra.StringValue `hcl:"detector_id,attr" validate:"required"`
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsGuarddutyIpsetAttributes struct {
	ref terra.Reference
}

// Activate returns a reference to field activate of aws_guardduty_ipset.
func (agi awsGuarddutyIpsetAttributes) Activate() terra.BoolValue {
	return terra.ReferenceAsBool(agi.ref.Append("activate"))
}

// Arn returns a reference to field arn of aws_guardduty_ipset.
func (agi awsGuarddutyIpsetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agi.ref.Append("arn"))
}

// DetectorId returns a reference to field detector_id of aws_guardduty_ipset.
func (agi awsGuarddutyIpsetAttributes) DetectorId() terra.StringValue {
	return terra.ReferenceAsString(agi.ref.Append("detector_id"))
}

// Format returns a reference to field format of aws_guardduty_ipset.
func (agi awsGuarddutyIpsetAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(agi.ref.Append("format"))
}

// Id returns a reference to field id of aws_guardduty_ipset.
func (agi awsGuarddutyIpsetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agi.ref.Append("id"))
}

// Location returns a reference to field location of aws_guardduty_ipset.
func (agi awsGuarddutyIpsetAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(agi.ref.Append("location"))
}

// Name returns a reference to field name of aws_guardduty_ipset.
func (agi awsGuarddutyIpsetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agi.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_guardduty_ipset.
func (agi awsGuarddutyIpsetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agi.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_guardduty_ipset.
func (agi awsGuarddutyIpsetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agi.ref.Append("tags_all"))
}

type awsGuarddutyIpsetState struct {
	Activate   bool              `json:"activate"`
	Arn        string            `json:"arn"`
	DetectorId string            `json:"detector_id"`
	Format     string            `json:"format"`
	Id         string            `json:"id"`
	Location   string            `json:"location"`
	Name       string            `json:"name"`
	Tags       map[string]string `json:"tags"`
	TagsAll    map[string]string `json:"tags_all"`
}
