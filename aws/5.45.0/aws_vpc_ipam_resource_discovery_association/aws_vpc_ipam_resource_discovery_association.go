// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_ipam_resource_discovery_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_vpc_ipam_resource_discovery_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpcIpamResourceDiscoveryAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avirda *Resource) Type() string {
	return "aws_vpc_ipam_resource_discovery_association"
}

// LocalName returns the local name for [Resource].
func (avirda *Resource) LocalName() string {
	return avirda.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avirda *Resource) Configuration() interface{} {
	return avirda.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avirda *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avirda)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avirda *Resource) Dependencies() terra.Dependencies {
	return avirda.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avirda *Resource) LifecycleManagement() *terra.Lifecycle {
	return avirda.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avirda *Resource) Attributes() awsVpcIpamResourceDiscoveryAssociationAttributes {
	return awsVpcIpamResourceDiscoveryAssociationAttributes{ref: terra.ReferenceResource(avirda)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avirda *Resource) ImportState(state io.Reader) error {
	avirda.state = &awsVpcIpamResourceDiscoveryAssociationState{}
	if err := json.NewDecoder(state).Decode(avirda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avirda.Type(), avirda.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avirda *Resource) State() (*awsVpcIpamResourceDiscoveryAssociationState, bool) {
	return avirda.state, avirda.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avirda *Resource) StateMust() *awsVpcIpamResourceDiscoveryAssociationState {
	if avirda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avirda.Type(), avirda.LocalName()))
	}
	return avirda.state
}

// Args contains the configurations for aws_vpc_ipam_resource_discovery_association.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpamId: string, required
	IpamId terra.StringValue `hcl:"ipam_id,attr" validate:"required"`
	// IpamResourceDiscoveryId: string, required
	IpamResourceDiscoveryId terra.StringValue `hcl:"ipam_resource_discovery_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVpcIpamResourceDiscoveryAssociationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpc_ipam_resource_discovery_association.
func (avirda awsVpcIpamResourceDiscoveryAssociationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(avirda.ref.Append("arn"))
}

// Id returns a reference to field id of aws_vpc_ipam_resource_discovery_association.
func (avirda awsVpcIpamResourceDiscoveryAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avirda.ref.Append("id"))
}

// IpamArn returns a reference to field ipam_arn of aws_vpc_ipam_resource_discovery_association.
func (avirda awsVpcIpamResourceDiscoveryAssociationAttributes) IpamArn() terra.StringValue {
	return terra.ReferenceAsString(avirda.ref.Append("ipam_arn"))
}

// IpamId returns a reference to field ipam_id of aws_vpc_ipam_resource_discovery_association.
func (avirda awsVpcIpamResourceDiscoveryAssociationAttributes) IpamId() terra.StringValue {
	return terra.ReferenceAsString(avirda.ref.Append("ipam_id"))
}

// IpamRegion returns a reference to field ipam_region of aws_vpc_ipam_resource_discovery_association.
func (avirda awsVpcIpamResourceDiscoveryAssociationAttributes) IpamRegion() terra.StringValue {
	return terra.ReferenceAsString(avirda.ref.Append("ipam_region"))
}

// IpamResourceDiscoveryId returns a reference to field ipam_resource_discovery_id of aws_vpc_ipam_resource_discovery_association.
func (avirda awsVpcIpamResourceDiscoveryAssociationAttributes) IpamResourceDiscoveryId() terra.StringValue {
	return terra.ReferenceAsString(avirda.ref.Append("ipam_resource_discovery_id"))
}

// IsDefault returns a reference to field is_default of aws_vpc_ipam_resource_discovery_association.
func (avirda awsVpcIpamResourceDiscoveryAssociationAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceAsBool(avirda.ref.Append("is_default"))
}

// OwnerId returns a reference to field owner_id of aws_vpc_ipam_resource_discovery_association.
func (avirda awsVpcIpamResourceDiscoveryAssociationAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(avirda.ref.Append("owner_id"))
}

// State returns a reference to field state of aws_vpc_ipam_resource_discovery_association.
func (avirda awsVpcIpamResourceDiscoveryAssociationAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(avirda.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_vpc_ipam_resource_discovery_association.
func (avirda awsVpcIpamResourceDiscoveryAssociationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avirda.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpc_ipam_resource_discovery_association.
func (avirda awsVpcIpamResourceDiscoveryAssociationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avirda.ref.Append("tags_all"))
}

func (avirda awsVpcIpamResourceDiscoveryAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](avirda.ref.Append("timeouts"))
}

type awsVpcIpamResourceDiscoveryAssociationState struct {
	Arn                     string            `json:"arn"`
	Id                      string            `json:"id"`
	IpamArn                 string            `json:"ipam_arn"`
	IpamId                  string            `json:"ipam_id"`
	IpamRegion              string            `json:"ipam_region"`
	IpamResourceDiscoveryId string            `json:"ipam_resource_discovery_id"`
	IsDefault               bool              `json:"is_default"`
	OwnerId                 string            `json:"owner_id"`
	State                   string            `json:"state"`
	Tags                    map[string]string `json:"tags"`
	TagsAll                 map[string]string `json:"tags_all"`
	Timeouts                *TimeoutsState    `json:"timeouts"`
}
