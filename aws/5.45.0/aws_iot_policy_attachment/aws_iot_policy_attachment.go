// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iot_policy_attachment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_iot_policy_attachment.
type Resource struct {
	Name      string
	Args      Args
	state     *awsIotPolicyAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aipa *Resource) Type() string {
	return "aws_iot_policy_attachment"
}

// LocalName returns the local name for [Resource].
func (aipa *Resource) LocalName() string {
	return aipa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aipa *Resource) Configuration() interface{} {
	return aipa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aipa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aipa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aipa *Resource) Dependencies() terra.Dependencies {
	return aipa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aipa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aipa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aipa *Resource) Attributes() awsIotPolicyAttachmentAttributes {
	return awsIotPolicyAttachmentAttributes{ref: terra.ReferenceResource(aipa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aipa *Resource) ImportState(state io.Reader) error {
	aipa.state = &awsIotPolicyAttachmentState{}
	if err := json.NewDecoder(state).Decode(aipa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aipa.Type(), aipa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aipa *Resource) State() (*awsIotPolicyAttachmentState, bool) {
	return aipa.state, aipa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aipa *Resource) StateMust() *awsIotPolicyAttachmentState {
	if aipa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aipa.Type(), aipa.LocalName()))
	}
	return aipa.state
}

// Args contains the configurations for aws_iot_policy_attachment.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// Target: string, required
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
}

type awsIotPolicyAttachmentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_iot_policy_attachment.
func (aipa awsIotPolicyAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aipa.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_iot_policy_attachment.
func (aipa awsIotPolicyAttachmentAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(aipa.ref.Append("policy"))
}

// Target returns a reference to field target of aws_iot_policy_attachment.
func (aipa awsIotPolicyAttachmentAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(aipa.ref.Append("target"))
}

type awsIotPolicyAttachmentState struct {
	Id     string `json:"id"`
	Policy string `json:"policy"`
	Target string `json:"target"`
}
