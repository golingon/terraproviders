// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_code_repository

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_sagemaker_code_repository.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSagemakerCodeRepositoryState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ascr *Resource) Type() string {
	return "aws_sagemaker_code_repository"
}

// LocalName returns the local name for [Resource].
func (ascr *Resource) LocalName() string {
	return ascr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ascr *Resource) Configuration() interface{} {
	return ascr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ascr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ascr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ascr *Resource) Dependencies() terra.Dependencies {
	return ascr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ascr *Resource) LifecycleManagement() *terra.Lifecycle {
	return ascr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ascr *Resource) Attributes() awsSagemakerCodeRepositoryAttributes {
	return awsSagemakerCodeRepositoryAttributes{ref: terra.ReferenceResource(ascr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ascr *Resource) ImportState(state io.Reader) error {
	ascr.state = &awsSagemakerCodeRepositoryState{}
	if err := json.NewDecoder(state).Decode(ascr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ascr.Type(), ascr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ascr *Resource) State() (*awsSagemakerCodeRepositoryState, bool) {
	return ascr.state, ascr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ascr *Resource) StateMust() *awsSagemakerCodeRepositoryState {
	if ascr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ascr.Type(), ascr.LocalName()))
	}
	return ascr.state
}

// Args contains the configurations for aws_sagemaker_code_repository.
type Args struct {
	// CodeRepositoryName: string, required
	CodeRepositoryName terra.StringValue `hcl:"code_repository_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// GitConfig: required
	GitConfig *GitConfig `hcl:"git_config,block" validate:"required"`
}

type awsSagemakerCodeRepositoryAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_code_repository.
func (ascr awsSagemakerCodeRepositoryAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ascr.ref.Append("arn"))
}

// CodeRepositoryName returns a reference to field code_repository_name of aws_sagemaker_code_repository.
func (ascr awsSagemakerCodeRepositoryAttributes) CodeRepositoryName() terra.StringValue {
	return terra.ReferenceAsString(ascr.ref.Append("code_repository_name"))
}

// Id returns a reference to field id of aws_sagemaker_code_repository.
func (ascr awsSagemakerCodeRepositoryAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ascr.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_sagemaker_code_repository.
func (ascr awsSagemakerCodeRepositoryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ascr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_code_repository.
func (ascr awsSagemakerCodeRepositoryAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ascr.ref.Append("tags_all"))
}

func (ascr awsSagemakerCodeRepositoryAttributes) GitConfig() terra.ListValue[GitConfigAttributes] {
	return terra.ReferenceAsList[GitConfigAttributes](ascr.ref.Append("git_config"))
}

type awsSagemakerCodeRepositoryState struct {
	Arn                string            `json:"arn"`
	CodeRepositoryName string            `json:"code_repository_name"`
	Id                 string            `json:"id"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
	GitConfig          []GitConfigState  `json:"git_config"`
}
