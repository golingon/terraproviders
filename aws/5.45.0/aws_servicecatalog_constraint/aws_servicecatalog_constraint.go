// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_constraint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_servicecatalog_constraint.
type Resource struct {
	Name      string
	Args      Args
	state     *awsServicecatalogConstraintState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asc *Resource) Type() string {
	return "aws_servicecatalog_constraint"
}

// LocalName returns the local name for [Resource].
func (asc *Resource) LocalName() string {
	return asc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asc *Resource) Configuration() interface{} {
	return asc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asc *Resource) Dependencies() terra.Dependencies {
	return asc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asc *Resource) LifecycleManagement() *terra.Lifecycle {
	return asc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asc *Resource) Attributes() awsServicecatalogConstraintAttributes {
	return awsServicecatalogConstraintAttributes{ref: terra.ReferenceResource(asc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asc *Resource) ImportState(state io.Reader) error {
	asc.state = &awsServicecatalogConstraintState{}
	if err := json.NewDecoder(state).Decode(asc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asc.Type(), asc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asc *Resource) State() (*awsServicecatalogConstraintState, bool) {
	return asc.state, asc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asc *Resource) StateMust() *awsServicecatalogConstraintState {
	if asc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asc.Type(), asc.LocalName()))
	}
	return asc.state
}

// Args contains the configurations for aws_servicecatalog_constraint.
type Args struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parameters: string, required
	Parameters terra.StringValue `hcl:"parameters,attr" validate:"required"`
	// PortfolioId: string, required
	PortfolioId terra.StringValue `hcl:"portfolio_id,attr" validate:"required"`
	// ProductId: string, required
	ProductId terra.StringValue `hcl:"product_id,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsServicecatalogConstraintAttributes struct {
	ref terra.Reference
}

// AcceptLanguage returns a reference to field accept_language of aws_servicecatalog_constraint.
func (asc awsServicecatalogConstraintAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("accept_language"))
}

// Description returns a reference to field description of aws_servicecatalog_constraint.
func (asc awsServicecatalogConstraintAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("description"))
}

// Id returns a reference to field id of aws_servicecatalog_constraint.
func (asc awsServicecatalogConstraintAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("id"))
}

// Owner returns a reference to field owner of aws_servicecatalog_constraint.
func (asc awsServicecatalogConstraintAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("owner"))
}

// Parameters returns a reference to field parameters of aws_servicecatalog_constraint.
func (asc awsServicecatalogConstraintAttributes) Parameters() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("parameters"))
}

// PortfolioId returns a reference to field portfolio_id of aws_servicecatalog_constraint.
func (asc awsServicecatalogConstraintAttributes) PortfolioId() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("portfolio_id"))
}

// ProductId returns a reference to field product_id of aws_servicecatalog_constraint.
func (asc awsServicecatalogConstraintAttributes) ProductId() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("product_id"))
}

// Status returns a reference to field status of aws_servicecatalog_constraint.
func (asc awsServicecatalogConstraintAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("status"))
}

// Type returns a reference to field type of aws_servicecatalog_constraint.
func (asc awsServicecatalogConstraintAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("type"))
}

func (asc awsServicecatalogConstraintAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asc.ref.Append("timeouts"))
}

type awsServicecatalogConstraintState struct {
	AcceptLanguage string         `json:"accept_language"`
	Description    string         `json:"description"`
	Id             string         `json:"id"`
	Owner          string         `json:"owner"`
	Parameters     string         `json:"parameters"`
	PortfolioId    string         `json:"portfolio_id"`
	ProductId      string         `json:"product_id"`
	Status         string         `json:"status"`
	Type           string         `json:"type"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
