// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_constraint

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource aws_servicecatalog_constraint.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (asc *DataSource) DataSource() string {
	return "aws_servicecatalog_constraint"
}

// LocalName returns the local name for [DataSource].
func (asc *DataSource) LocalName() string {
	return asc.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (asc *DataSource) Configuration() interface{} {
	return asc.Args
}

// Attributes returns the attributes for [DataSource].
func (asc *DataSource) Attributes() dataAwsServicecatalogConstraintAttributes {
	return dataAwsServicecatalogConstraintAttributes{ref: terra.ReferenceDataSource(asc)}
}

// DataArgs contains the configurations for aws_servicecatalog_constraint.
type DataArgs struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *DataTimeouts `hcl:"timeouts,block"`
}

type dataAwsServicecatalogConstraintAttributes struct {
	ref terra.Reference
}

// AcceptLanguage returns a reference to field accept_language of aws_servicecatalog_constraint.
func (asc dataAwsServicecatalogConstraintAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("accept_language"))
}

// Description returns a reference to field description of aws_servicecatalog_constraint.
func (asc dataAwsServicecatalogConstraintAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("description"))
}

// Id returns a reference to field id of aws_servicecatalog_constraint.
func (asc dataAwsServicecatalogConstraintAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("id"))
}

// Owner returns a reference to field owner of aws_servicecatalog_constraint.
func (asc dataAwsServicecatalogConstraintAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("owner"))
}

// Parameters returns a reference to field parameters of aws_servicecatalog_constraint.
func (asc dataAwsServicecatalogConstraintAttributes) Parameters() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("parameters"))
}

// PortfolioId returns a reference to field portfolio_id of aws_servicecatalog_constraint.
func (asc dataAwsServicecatalogConstraintAttributes) PortfolioId() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("portfolio_id"))
}

// ProductId returns a reference to field product_id of aws_servicecatalog_constraint.
func (asc dataAwsServicecatalogConstraintAttributes) ProductId() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("product_id"))
}

// Status returns a reference to field status of aws_servicecatalog_constraint.
func (asc dataAwsServicecatalogConstraintAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("status"))
}

// Type returns a reference to field type of aws_servicecatalog_constraint.
func (asc dataAwsServicecatalogConstraintAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("type"))
}

func (asc dataAwsServicecatalogConstraintAttributes) Timeouts() DataTimeoutsAttributes {
	return terra.ReferenceAsSingle[DataTimeoutsAttributes](asc.ref.Append("timeouts"))
}
