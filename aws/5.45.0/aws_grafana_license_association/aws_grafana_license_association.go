// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_grafana_license_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_grafana_license_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGrafanaLicenseAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agla *Resource) Type() string {
	return "aws_grafana_license_association"
}

// LocalName returns the local name for [Resource].
func (agla *Resource) LocalName() string {
	return agla.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agla *Resource) Configuration() interface{} {
	return agla.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agla *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agla)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agla *Resource) Dependencies() terra.Dependencies {
	return agla.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agla *Resource) LifecycleManagement() *terra.Lifecycle {
	return agla.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agla *Resource) Attributes() awsGrafanaLicenseAssociationAttributes {
	return awsGrafanaLicenseAssociationAttributes{ref: terra.ReferenceResource(agla)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agla *Resource) ImportState(state io.Reader) error {
	agla.state = &awsGrafanaLicenseAssociationState{}
	if err := json.NewDecoder(state).Decode(agla.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agla.Type(), agla.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agla *Resource) State() (*awsGrafanaLicenseAssociationState, bool) {
	return agla.state, agla.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agla *Resource) StateMust() *awsGrafanaLicenseAssociationState {
	if agla.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agla.Type(), agla.LocalName()))
	}
	return agla.state
}

// Args contains the configurations for aws_grafana_license_association.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, required
	LicenseType terra.StringValue `hcl:"license_type,attr" validate:"required"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsGrafanaLicenseAssociationAttributes struct {
	ref terra.Reference
}

// FreeTrialExpiration returns a reference to field free_trial_expiration of aws_grafana_license_association.
func (agla awsGrafanaLicenseAssociationAttributes) FreeTrialExpiration() terra.StringValue {
	return terra.ReferenceAsString(agla.ref.Append("free_trial_expiration"))
}

// Id returns a reference to field id of aws_grafana_license_association.
func (agla awsGrafanaLicenseAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agla.ref.Append("id"))
}

// LicenseExpiration returns a reference to field license_expiration of aws_grafana_license_association.
func (agla awsGrafanaLicenseAssociationAttributes) LicenseExpiration() terra.StringValue {
	return terra.ReferenceAsString(agla.ref.Append("license_expiration"))
}

// LicenseType returns a reference to field license_type of aws_grafana_license_association.
func (agla awsGrafanaLicenseAssociationAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceAsString(agla.ref.Append("license_type"))
}

// WorkspaceId returns a reference to field workspace_id of aws_grafana_license_association.
func (agla awsGrafanaLicenseAssociationAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceAsString(agla.ref.Append("workspace_id"))
}

func (agla awsGrafanaLicenseAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](agla.ref.Append("timeouts"))
}

type awsGrafanaLicenseAssociationState struct {
	FreeTrialExpiration string         `json:"free_trial_expiration"`
	Id                  string         `json:"id"`
	LicenseExpiration   string         `json:"license_expiration"`
	LicenseType         string         `json:"license_type"`
	WorkspaceId         string         `json:"workspace_id"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
