// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicequotas_template_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_servicequotas_template_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsServicequotasTemplateAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asta *Resource) Type() string {
	return "aws_servicequotas_template_association"
}

// LocalName returns the local name for [Resource].
func (asta *Resource) LocalName() string {
	return asta.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asta *Resource) Configuration() interface{} {
	return asta.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asta *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asta)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asta *Resource) Dependencies() terra.Dependencies {
	return asta.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asta *Resource) LifecycleManagement() *terra.Lifecycle {
	return asta.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asta *Resource) Attributes() awsServicequotasTemplateAssociationAttributes {
	return awsServicequotasTemplateAssociationAttributes{ref: terra.ReferenceResource(asta)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asta *Resource) ImportState(state io.Reader) error {
	asta.state = &awsServicequotasTemplateAssociationState{}
	if err := json.NewDecoder(state).Decode(asta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asta.Type(), asta.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asta *Resource) State() (*awsServicequotasTemplateAssociationState, bool) {
	return asta.state, asta.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asta *Resource) StateMust() *awsServicequotasTemplateAssociationState {
	if asta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asta.Type(), asta.LocalName()))
	}
	return asta.state
}

// Args contains the configurations for aws_servicequotas_template_association.
type Args struct {
	// SkipDestroy: bool, optional
	SkipDestroy terra.BoolValue `hcl:"skip_destroy,attr"`
}

type awsServicequotasTemplateAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_servicequotas_template_association.
func (asta awsServicequotasTemplateAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asta.ref.Append("id"))
}

// SkipDestroy returns a reference to field skip_destroy of aws_servicequotas_template_association.
func (asta awsServicequotasTemplateAssociationAttributes) SkipDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(asta.ref.Append("skip_destroy"))
}

// Status returns a reference to field status of aws_servicequotas_template_association.
func (asta awsServicequotasTemplateAssociationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(asta.ref.Append("status"))
}

type awsServicequotasTemplateAssociationState struct {
	Id          string `json:"id"`
	SkipDestroy bool   `json:"skip_destroy"`
	Status      string `json:"status"`
}
