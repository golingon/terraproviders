// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3control_storage_lens_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3control_storage_lens_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3ControlStorageLensConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asslc *Resource) Type() string {
	return "aws_s3control_storage_lens_configuration"
}

// LocalName returns the local name for [Resource].
func (asslc *Resource) LocalName() string {
	return asslc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asslc *Resource) Configuration() interface{} {
	return asslc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asslc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asslc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asslc *Resource) Dependencies() terra.Dependencies {
	return asslc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asslc *Resource) LifecycleManagement() *terra.Lifecycle {
	return asslc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asslc *Resource) Attributes() awsS3ControlStorageLensConfigurationAttributes {
	return awsS3ControlStorageLensConfigurationAttributes{ref: terra.ReferenceResource(asslc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asslc *Resource) ImportState(state io.Reader) error {
	asslc.state = &awsS3ControlStorageLensConfigurationState{}
	if err := json.NewDecoder(state).Decode(asslc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asslc.Type(), asslc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asslc *Resource) State() (*awsS3ControlStorageLensConfigurationState, bool) {
	return asslc.state, asslc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asslc *Resource) StateMust() *awsS3ControlStorageLensConfigurationState {
	if asslc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asslc.Type(), asslc.LocalName()))
	}
	return asslc.state
}

// Args contains the configurations for aws_s3control_storage_lens_configuration.
type Args struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// ConfigId: string, required
	ConfigId terra.StringValue `hcl:"config_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// StorageLensConfiguration: required
	StorageLensConfiguration *StorageLensConfiguration `hcl:"storage_lens_configuration,block" validate:"required"`
}

type awsS3ControlStorageLensConfigurationAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_s3control_storage_lens_configuration.
func (asslc awsS3ControlStorageLensConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(asslc.ref.Append("account_id"))
}

// Arn returns a reference to field arn of aws_s3control_storage_lens_configuration.
func (asslc awsS3ControlStorageLensConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asslc.ref.Append("arn"))
}

// ConfigId returns a reference to field config_id of aws_s3control_storage_lens_configuration.
func (asslc awsS3ControlStorageLensConfigurationAttributes) ConfigId() terra.StringValue {
	return terra.ReferenceAsString(asslc.ref.Append("config_id"))
}

// Id returns a reference to field id of aws_s3control_storage_lens_configuration.
func (asslc awsS3ControlStorageLensConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asslc.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_s3control_storage_lens_configuration.
func (asslc awsS3ControlStorageLensConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asslc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_s3control_storage_lens_configuration.
func (asslc awsS3ControlStorageLensConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](asslc.ref.Append("tags_all"))
}

func (asslc awsS3ControlStorageLensConfigurationAttributes) StorageLensConfiguration() terra.ListValue[StorageLensConfigurationAttributes] {
	return terra.ReferenceAsList[StorageLensConfigurationAttributes](asslc.ref.Append("storage_lens_configuration"))
}

type awsS3ControlStorageLensConfigurationState struct {
	AccountId                string                          `json:"account_id"`
	Arn                      string                          `json:"arn"`
	ConfigId                 string                          `json:"config_id"`
	Id                       string                          `json:"id"`
	Tags                     map[string]string               `json:"tags"`
	TagsAll                  map[string]string               `json:"tags_all"`
	StorageLensConfiguration []StorageLensConfigurationState `json:"storage_lens_configuration"`
}
