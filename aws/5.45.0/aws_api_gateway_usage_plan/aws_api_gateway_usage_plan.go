// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_api_gateway_usage_plan

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_api_gateway_usage_plan.
type Resource struct {
	Name      string
	Args      Args
	state     *awsApiGatewayUsagePlanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aagup *Resource) Type() string {
	return "aws_api_gateway_usage_plan"
}

// LocalName returns the local name for [Resource].
func (aagup *Resource) LocalName() string {
	return aagup.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aagup *Resource) Configuration() interface{} {
	return aagup.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aagup *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aagup)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aagup *Resource) Dependencies() terra.Dependencies {
	return aagup.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aagup *Resource) LifecycleManagement() *terra.Lifecycle {
	return aagup.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aagup *Resource) Attributes() awsApiGatewayUsagePlanAttributes {
	return awsApiGatewayUsagePlanAttributes{ref: terra.ReferenceResource(aagup)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aagup *Resource) ImportState(state io.Reader) error {
	aagup.state = &awsApiGatewayUsagePlanState{}
	if err := json.NewDecoder(state).Decode(aagup.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aagup.Type(), aagup.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aagup *Resource) State() (*awsApiGatewayUsagePlanState, bool) {
	return aagup.state, aagup.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aagup *Resource) StateMust() *awsApiGatewayUsagePlanState {
	if aagup.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aagup.Type(), aagup.LocalName()))
	}
	return aagup.state
}

// Args contains the configurations for aws_api_gateway_usage_plan.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProductCode: string, optional
	ProductCode terra.StringValue `hcl:"product_code,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ApiStages: min=0
	ApiStages []ApiStages `hcl:"api_stages,block" validate:"min=0"`
	// QuotaSettings: optional
	QuotaSettings *QuotaSettings `hcl:"quota_settings,block"`
	// ThrottleSettings: optional
	ThrottleSettings *ThrottleSettings `hcl:"throttle_settings,block"`
}

type awsApiGatewayUsagePlanAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_api_gateway_usage_plan.
func (aagup awsApiGatewayUsagePlanAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aagup.ref.Append("arn"))
}

// Description returns a reference to field description of aws_api_gateway_usage_plan.
func (aagup awsApiGatewayUsagePlanAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aagup.ref.Append("description"))
}

// Id returns a reference to field id of aws_api_gateway_usage_plan.
func (aagup awsApiGatewayUsagePlanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aagup.ref.Append("id"))
}

// Name returns a reference to field name of aws_api_gateway_usage_plan.
func (aagup awsApiGatewayUsagePlanAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aagup.ref.Append("name"))
}

// ProductCode returns a reference to field product_code of aws_api_gateway_usage_plan.
func (aagup awsApiGatewayUsagePlanAttributes) ProductCode() terra.StringValue {
	return terra.ReferenceAsString(aagup.ref.Append("product_code"))
}

// Tags returns a reference to field tags of aws_api_gateway_usage_plan.
func (aagup awsApiGatewayUsagePlanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aagup.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_api_gateway_usage_plan.
func (aagup awsApiGatewayUsagePlanAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aagup.ref.Append("tags_all"))
}

func (aagup awsApiGatewayUsagePlanAttributes) ApiStages() terra.SetValue[ApiStagesAttributes] {
	return terra.ReferenceAsSet[ApiStagesAttributes](aagup.ref.Append("api_stages"))
}

func (aagup awsApiGatewayUsagePlanAttributes) QuotaSettings() terra.ListValue[QuotaSettingsAttributes] {
	return terra.ReferenceAsList[QuotaSettingsAttributes](aagup.ref.Append("quota_settings"))
}

func (aagup awsApiGatewayUsagePlanAttributes) ThrottleSettings() terra.ListValue[ThrottleSettingsAttributes] {
	return terra.ReferenceAsList[ThrottleSettingsAttributes](aagup.ref.Append("throttle_settings"))
}

type awsApiGatewayUsagePlanState struct {
	Arn              string                  `json:"arn"`
	Description      string                  `json:"description"`
	Id               string                  `json:"id"`
	Name             string                  `json:"name"`
	ProductCode      string                  `json:"product_code"`
	Tags             map[string]string       `json:"tags"`
	TagsAll          map[string]string       `json:"tags_all"`
	ApiStages        []ApiStagesState        `json:"api_stages"`
	QuotaSettings    []QuotaSettingsState    `json:"quota_settings"`
	ThrottleSettings []ThrottleSettingsState `json:"throttle_settings"`
}
