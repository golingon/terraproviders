// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_metric

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3_bucket_metric.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3BucketMetricState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asbm *Resource) Type() string {
	return "aws_s3_bucket_metric"
}

// LocalName returns the local name for [Resource].
func (asbm *Resource) LocalName() string {
	return asbm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asbm *Resource) Configuration() interface{} {
	return asbm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asbm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asbm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asbm *Resource) Dependencies() terra.Dependencies {
	return asbm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asbm *Resource) LifecycleManagement() *terra.Lifecycle {
	return asbm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asbm *Resource) Attributes() awsS3BucketMetricAttributes {
	return awsS3BucketMetricAttributes{ref: terra.ReferenceResource(asbm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asbm *Resource) ImportState(state io.Reader) error {
	asbm.state = &awsS3BucketMetricState{}
	if err := json.NewDecoder(state).Decode(asbm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asbm.Type(), asbm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asbm *Resource) State() (*awsS3BucketMetricState, bool) {
	return asbm.state, asbm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asbm *Resource) StateMust() *awsS3BucketMetricState {
	if asbm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asbm.Type(), asbm.LocalName()))
	}
	return asbm.state
}

// Args contains the configurations for aws_s3_bucket_metric.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Filter: optional
	Filter *Filter `hcl:"filter,block"`
}

type awsS3BucketMetricAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of aws_s3_bucket_metric.
func (asbm awsS3BucketMetricAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(asbm.ref.Append("bucket"))
}

// Id returns a reference to field id of aws_s3_bucket_metric.
func (asbm awsS3BucketMetricAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asbm.ref.Append("id"))
}

// Name returns a reference to field name of aws_s3_bucket_metric.
func (asbm awsS3BucketMetricAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asbm.ref.Append("name"))
}

func (asbm awsS3BucketMetricAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](asbm.ref.Append("filter"))
}

type awsS3BucketMetricState struct {
	Bucket string        `json:"bucket"`
	Id     string        `json:"id"`
	Name   string        `json:"name"`
	Filter []FilterState `json:"filter"`
}
