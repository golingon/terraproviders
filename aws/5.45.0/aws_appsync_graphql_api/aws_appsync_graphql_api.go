// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appsync_graphql_api

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_appsync_graphql_api.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppsyncGraphqlApiState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaga *Resource) Type() string {
	return "aws_appsync_graphql_api"
}

// LocalName returns the local name for [Resource].
func (aaga *Resource) LocalName() string {
	return aaga.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaga *Resource) Configuration() interface{} {
	return aaga.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaga *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaga)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaga *Resource) Dependencies() terra.Dependencies {
	return aaga.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaga *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaga.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaga *Resource) Attributes() awsAppsyncGraphqlApiAttributes {
	return awsAppsyncGraphqlApiAttributes{ref: terra.ReferenceResource(aaga)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaga *Resource) ImportState(state io.Reader) error {
	aaga.state = &awsAppsyncGraphqlApiState{}
	if err := json.NewDecoder(state).Decode(aaga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaga.Type(), aaga.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaga *Resource) State() (*awsAppsyncGraphqlApiState, bool) {
	return aaga.state, aaga.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaga *Resource) StateMust() *awsAppsyncGraphqlApiState {
	if aaga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaga.Type(), aaga.LocalName()))
	}
	return aaga.state
}

// Args contains the configurations for aws_appsync_graphql_api.
type Args struct {
	// AuthenticationType: string, required
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntrospectionConfig: string, optional
	IntrospectionConfig terra.StringValue `hcl:"introspection_config,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// QueryDepthLimit: number, optional
	QueryDepthLimit terra.NumberValue `hcl:"query_depth_limit,attr"`
	// ResolverCountLimit: number, optional
	ResolverCountLimit terra.NumberValue `hcl:"resolver_count_limit,attr"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Visibility: string, optional
	Visibility terra.StringValue `hcl:"visibility,attr"`
	// XrayEnabled: bool, optional
	XrayEnabled terra.BoolValue `hcl:"xray_enabled,attr"`
	// AdditionalAuthenticationProvider: min=0
	AdditionalAuthenticationProvider []AdditionalAuthenticationProvider `hcl:"additional_authentication_provider,block" validate:"min=0"`
	// LambdaAuthorizerConfig: optional
	LambdaAuthorizerConfig *LambdaAuthorizerConfig `hcl:"lambda_authorizer_config,block"`
	// LogConfig: optional
	LogConfig *LogConfig `hcl:"log_config,block"`
	// OpenidConnectConfig: optional
	OpenidConnectConfig *OpenidConnectConfig `hcl:"openid_connect_config,block"`
	// UserPoolConfig: optional
	UserPoolConfig *UserPoolConfig `hcl:"user_pool_config,block"`
}

type awsAppsyncGraphqlApiAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_appsync_graphql_api.
func (aaga awsAppsyncGraphqlApiAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aaga.ref.Append("arn"))
}

// AuthenticationType returns a reference to field authentication_type of aws_appsync_graphql_api.
func (aaga awsAppsyncGraphqlApiAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceAsString(aaga.ref.Append("authentication_type"))
}

// Id returns a reference to field id of aws_appsync_graphql_api.
func (aaga awsAppsyncGraphqlApiAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaga.ref.Append("id"))
}

// IntrospectionConfig returns a reference to field introspection_config of aws_appsync_graphql_api.
func (aaga awsAppsyncGraphqlApiAttributes) IntrospectionConfig() terra.StringValue {
	return terra.ReferenceAsString(aaga.ref.Append("introspection_config"))
}

// Name returns a reference to field name of aws_appsync_graphql_api.
func (aaga awsAppsyncGraphqlApiAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aaga.ref.Append("name"))
}

// QueryDepthLimit returns a reference to field query_depth_limit of aws_appsync_graphql_api.
func (aaga awsAppsyncGraphqlApiAttributes) QueryDepthLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(aaga.ref.Append("query_depth_limit"))
}

// ResolverCountLimit returns a reference to field resolver_count_limit of aws_appsync_graphql_api.
func (aaga awsAppsyncGraphqlApiAttributes) ResolverCountLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(aaga.ref.Append("resolver_count_limit"))
}

// Schema returns a reference to field schema of aws_appsync_graphql_api.
func (aaga awsAppsyncGraphqlApiAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(aaga.ref.Append("schema"))
}

// Tags returns a reference to field tags of aws_appsync_graphql_api.
func (aaga awsAppsyncGraphqlApiAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaga.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_appsync_graphql_api.
func (aaga awsAppsyncGraphqlApiAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaga.ref.Append("tags_all"))
}

// Uris returns a reference to field uris of aws_appsync_graphql_api.
func (aaga awsAppsyncGraphqlApiAttributes) Uris() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaga.ref.Append("uris"))
}

// Visibility returns a reference to field visibility of aws_appsync_graphql_api.
func (aaga awsAppsyncGraphqlApiAttributes) Visibility() terra.StringValue {
	return terra.ReferenceAsString(aaga.ref.Append("visibility"))
}

// XrayEnabled returns a reference to field xray_enabled of aws_appsync_graphql_api.
func (aaga awsAppsyncGraphqlApiAttributes) XrayEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aaga.ref.Append("xray_enabled"))
}

func (aaga awsAppsyncGraphqlApiAttributes) AdditionalAuthenticationProvider() terra.ListValue[AdditionalAuthenticationProviderAttributes] {
	return terra.ReferenceAsList[AdditionalAuthenticationProviderAttributes](aaga.ref.Append("additional_authentication_provider"))
}

func (aaga awsAppsyncGraphqlApiAttributes) LambdaAuthorizerConfig() terra.ListValue[LambdaAuthorizerConfigAttributes] {
	return terra.ReferenceAsList[LambdaAuthorizerConfigAttributes](aaga.ref.Append("lambda_authorizer_config"))
}

func (aaga awsAppsyncGraphqlApiAttributes) LogConfig() terra.ListValue[LogConfigAttributes] {
	return terra.ReferenceAsList[LogConfigAttributes](aaga.ref.Append("log_config"))
}

func (aaga awsAppsyncGraphqlApiAttributes) OpenidConnectConfig() terra.ListValue[OpenidConnectConfigAttributes] {
	return terra.ReferenceAsList[OpenidConnectConfigAttributes](aaga.ref.Append("openid_connect_config"))
}

func (aaga awsAppsyncGraphqlApiAttributes) UserPoolConfig() terra.ListValue[UserPoolConfigAttributes] {
	return terra.ReferenceAsList[UserPoolConfigAttributes](aaga.ref.Append("user_pool_config"))
}

type awsAppsyncGraphqlApiState struct {
	Arn                              string                                  `json:"arn"`
	AuthenticationType               string                                  `json:"authentication_type"`
	Id                               string                                  `json:"id"`
	IntrospectionConfig              string                                  `json:"introspection_config"`
	Name                             string                                  `json:"name"`
	QueryDepthLimit                  float64                                 `json:"query_depth_limit"`
	ResolverCountLimit               float64                                 `json:"resolver_count_limit"`
	Schema                           string                                  `json:"schema"`
	Tags                             map[string]string                       `json:"tags"`
	TagsAll                          map[string]string                       `json:"tags_all"`
	Uris                             map[string]string                       `json:"uris"`
	Visibility                       string                                  `json:"visibility"`
	XrayEnabled                      bool                                    `json:"xray_enabled"`
	AdditionalAuthenticationProvider []AdditionalAuthenticationProviderState `json:"additional_authentication_provider"`
	LambdaAuthorizerConfig           []LambdaAuthorizerConfigState           `json:"lambda_authorizer_config"`
	LogConfig                        []LogConfigState                        `json:"log_config"`
	OpenidConnectConfig              []OpenidConnectConfigState              `json:"openid_connect_config"`
	UserPoolConfig                   []UserPoolConfigState                   `json:"user_pool_config"`
}
