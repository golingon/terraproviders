// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_rolesanywhere_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_rolesanywhere_profile.
type Resource struct {
	Name      string
	Args      Args
	state     *awsRolesanywhereProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arp *Resource) Type() string {
	return "aws_rolesanywhere_profile"
}

// LocalName returns the local name for [Resource].
func (arp *Resource) LocalName() string {
	return arp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arp *Resource) Configuration() interface{} {
	return arp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arp *Resource) Dependencies() terra.Dependencies {
	return arp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arp *Resource) LifecycleManagement() *terra.Lifecycle {
	return arp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arp *Resource) Attributes() awsRolesanywhereProfileAttributes {
	return awsRolesanywhereProfileAttributes{ref: terra.ReferenceResource(arp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arp *Resource) ImportState(state io.Reader) error {
	arp.state = &awsRolesanywhereProfileState{}
	if err := json.NewDecoder(state).Decode(arp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arp.Type(), arp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arp *Resource) State() (*awsRolesanywhereProfileState, bool) {
	return arp.state, arp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arp *Resource) StateMust() *awsRolesanywhereProfileState {
	if arp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arp.Type(), arp.LocalName()))
	}
	return arp.state
}

// Args contains the configurations for aws_rolesanywhere_profile.
type Args struct {
	// DurationSeconds: number, optional
	DurationSeconds terra.NumberValue `hcl:"duration_seconds,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagedPolicyArns: set of string, optional
	ManagedPolicyArns terra.SetValue[terra.StringValue] `hcl:"managed_policy_arns,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RequireInstanceProperties: bool, optional
	RequireInstanceProperties terra.BoolValue `hcl:"require_instance_properties,attr"`
	// RoleArns: set of string, required
	RoleArns terra.SetValue[terra.StringValue] `hcl:"role_arns,attr" validate:"required"`
	// SessionPolicy: string, optional
	SessionPolicy terra.StringValue `hcl:"session_policy,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsRolesanywhereProfileAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_rolesanywhere_profile.
func (arp awsRolesanywhereProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("arn"))
}

// DurationSeconds returns a reference to field duration_seconds of aws_rolesanywhere_profile.
func (arp awsRolesanywhereProfileAttributes) DurationSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(arp.ref.Append("duration_seconds"))
}

// Enabled returns a reference to field enabled of aws_rolesanywhere_profile.
func (arp awsRolesanywhereProfileAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(arp.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_rolesanywhere_profile.
func (arp awsRolesanywhereProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("id"))
}

// ManagedPolicyArns returns a reference to field managed_policy_arns of aws_rolesanywhere_profile.
func (arp awsRolesanywhereProfileAttributes) ManagedPolicyArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arp.ref.Append("managed_policy_arns"))
}

// Name returns a reference to field name of aws_rolesanywhere_profile.
func (arp awsRolesanywhereProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("name"))
}

// RequireInstanceProperties returns a reference to field require_instance_properties of aws_rolesanywhere_profile.
func (arp awsRolesanywhereProfileAttributes) RequireInstanceProperties() terra.BoolValue {
	return terra.ReferenceAsBool(arp.ref.Append("require_instance_properties"))
}

// RoleArns returns a reference to field role_arns of aws_rolesanywhere_profile.
func (arp awsRolesanywhereProfileAttributes) RoleArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arp.ref.Append("role_arns"))
}

// SessionPolicy returns a reference to field session_policy of aws_rolesanywhere_profile.
func (arp awsRolesanywhereProfileAttributes) SessionPolicy() terra.StringValue {
	return terra.ReferenceAsString(arp.ref.Append("session_policy"))
}

// Tags returns a reference to field tags of aws_rolesanywhere_profile.
func (arp awsRolesanywhereProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_rolesanywhere_profile.
func (arp awsRolesanywhereProfileAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arp.ref.Append("tags_all"))
}

type awsRolesanywhereProfileState struct {
	Arn                       string            `json:"arn"`
	DurationSeconds           float64           `json:"duration_seconds"`
	Enabled                   bool              `json:"enabled"`
	Id                        string            `json:"id"`
	ManagedPolicyArns         []string          `json:"managed_policy_arns"`
	Name                      string            `json:"name"`
	RequireInstanceProperties bool              `json:"require_instance_properties"`
	RoleArns                  []string          `json:"role_arns"`
	SessionPolicy             string            `json:"session_policy"`
	Tags                      map[string]string `json:"tags"`
	TagsAll                   map[string]string `json:"tags_all"`
}
