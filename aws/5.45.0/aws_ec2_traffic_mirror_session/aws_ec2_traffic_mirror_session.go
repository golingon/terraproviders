// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_traffic_mirror_session

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_traffic_mirror_session.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2TrafficMirrorSessionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aetms *Resource) Type() string {
	return "aws_ec2_traffic_mirror_session"
}

// LocalName returns the local name for [Resource].
func (aetms *Resource) LocalName() string {
	return aetms.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aetms *Resource) Configuration() interface{} {
	return aetms.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aetms *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aetms)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aetms *Resource) Dependencies() terra.Dependencies {
	return aetms.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aetms *Resource) LifecycleManagement() *terra.Lifecycle {
	return aetms.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aetms *Resource) Attributes() awsEc2TrafficMirrorSessionAttributes {
	return awsEc2TrafficMirrorSessionAttributes{ref: terra.ReferenceResource(aetms)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aetms *Resource) ImportState(state io.Reader) error {
	aetms.state = &awsEc2TrafficMirrorSessionState{}
	if err := json.NewDecoder(state).Decode(aetms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aetms.Type(), aetms.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aetms *Resource) State() (*awsEc2TrafficMirrorSessionState, bool) {
	return aetms.state, aetms.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aetms *Resource) StateMust() *awsEc2TrafficMirrorSessionState {
	if aetms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aetms.Type(), aetms.LocalName()))
	}
	return aetms.state
}

// Args contains the configurations for aws_ec2_traffic_mirror_session.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetworkInterfaceId: string, required
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr" validate:"required"`
	// PacketLength: number, optional
	PacketLength terra.NumberValue `hcl:"packet_length,attr"`
	// SessionNumber: number, required
	SessionNumber terra.NumberValue `hcl:"session_number,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TrafficMirrorFilterId: string, required
	TrafficMirrorFilterId terra.StringValue `hcl:"traffic_mirror_filter_id,attr" validate:"required"`
	// TrafficMirrorTargetId: string, required
	TrafficMirrorTargetId terra.StringValue `hcl:"traffic_mirror_target_id,attr" validate:"required"`
	// VirtualNetworkId: number, optional
	VirtualNetworkId terra.NumberValue `hcl:"virtual_network_id,attr"`
}

type awsEc2TrafficMirrorSessionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ec2_traffic_mirror_session.
func (aetms awsEc2TrafficMirrorSessionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aetms.ref.Append("arn"))
}

// Description returns a reference to field description of aws_ec2_traffic_mirror_session.
func (aetms awsEc2TrafficMirrorSessionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aetms.ref.Append("description"))
}

// Id returns a reference to field id of aws_ec2_traffic_mirror_session.
func (aetms awsEc2TrafficMirrorSessionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aetms.ref.Append("id"))
}

// NetworkInterfaceId returns a reference to field network_interface_id of aws_ec2_traffic_mirror_session.
func (aetms awsEc2TrafficMirrorSessionAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(aetms.ref.Append("network_interface_id"))
}

// OwnerId returns a reference to field owner_id of aws_ec2_traffic_mirror_session.
func (aetms awsEc2TrafficMirrorSessionAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(aetms.ref.Append("owner_id"))
}

// PacketLength returns a reference to field packet_length of aws_ec2_traffic_mirror_session.
func (aetms awsEc2TrafficMirrorSessionAttributes) PacketLength() terra.NumberValue {
	return terra.ReferenceAsNumber(aetms.ref.Append("packet_length"))
}

// SessionNumber returns a reference to field session_number of aws_ec2_traffic_mirror_session.
func (aetms awsEc2TrafficMirrorSessionAttributes) SessionNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(aetms.ref.Append("session_number"))
}

// Tags returns a reference to field tags of aws_ec2_traffic_mirror_session.
func (aetms awsEc2TrafficMirrorSessionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetms.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_traffic_mirror_session.
func (aetms awsEc2TrafficMirrorSessionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aetms.ref.Append("tags_all"))
}

// TrafficMirrorFilterId returns a reference to field traffic_mirror_filter_id of aws_ec2_traffic_mirror_session.
func (aetms awsEc2TrafficMirrorSessionAttributes) TrafficMirrorFilterId() terra.StringValue {
	return terra.ReferenceAsString(aetms.ref.Append("traffic_mirror_filter_id"))
}

// TrafficMirrorTargetId returns a reference to field traffic_mirror_target_id of aws_ec2_traffic_mirror_session.
func (aetms awsEc2TrafficMirrorSessionAttributes) TrafficMirrorTargetId() terra.StringValue {
	return terra.ReferenceAsString(aetms.ref.Append("traffic_mirror_target_id"))
}

// VirtualNetworkId returns a reference to field virtual_network_id of aws_ec2_traffic_mirror_session.
func (aetms awsEc2TrafficMirrorSessionAttributes) VirtualNetworkId() terra.NumberValue {
	return terra.ReferenceAsNumber(aetms.ref.Append("virtual_network_id"))
}

type awsEc2TrafficMirrorSessionState struct {
	Arn                   string            `json:"arn"`
	Description           string            `json:"description"`
	Id                    string            `json:"id"`
	NetworkInterfaceId    string            `json:"network_interface_id"`
	OwnerId               string            `json:"owner_id"`
	PacketLength          float64           `json:"packet_length"`
	SessionNumber         float64           `json:"session_number"`
	Tags                  map[string]string `json:"tags"`
	TagsAll               map[string]string `json:"tags_all"`
	TrafficMirrorFilterId string            `json:"traffic_mirror_filter_id"`
	TrafficMirrorTargetId string            `json:"traffic_mirror_target_id"`
	VirtualNetworkId      float64           `json:"virtual_network_id"`
}
