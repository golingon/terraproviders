// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lightsail_instance_public_ports

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lightsail_instance_public_ports.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLightsailInstancePublicPortsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alipp *Resource) Type() string {
	return "aws_lightsail_instance_public_ports"
}

// LocalName returns the local name for [Resource].
func (alipp *Resource) LocalName() string {
	return alipp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alipp *Resource) Configuration() interface{} {
	return alipp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alipp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alipp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alipp *Resource) Dependencies() terra.Dependencies {
	return alipp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alipp *Resource) LifecycleManagement() *terra.Lifecycle {
	return alipp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alipp *Resource) Attributes() awsLightsailInstancePublicPortsAttributes {
	return awsLightsailInstancePublicPortsAttributes{ref: terra.ReferenceResource(alipp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alipp *Resource) ImportState(state io.Reader) error {
	alipp.state = &awsLightsailInstancePublicPortsState{}
	if err := json.NewDecoder(state).Decode(alipp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alipp.Type(), alipp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alipp *Resource) State() (*awsLightsailInstancePublicPortsState, bool) {
	return alipp.state, alipp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alipp *Resource) StateMust() *awsLightsailInstancePublicPortsState {
	if alipp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alipp.Type(), alipp.LocalName()))
	}
	return alipp.state
}

// Args contains the configurations for aws_lightsail_instance_public_ports.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceName: string, required
	InstanceName terra.StringValue `hcl:"instance_name,attr" validate:"required"`
	// PortInfo: min=1
	PortInfo []PortInfo `hcl:"port_info,block" validate:"min=1"`
}

type awsLightsailInstancePublicPortsAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_lightsail_instance_public_ports.
func (alipp awsLightsailInstancePublicPortsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alipp.ref.Append("id"))
}

// InstanceName returns a reference to field instance_name of aws_lightsail_instance_public_ports.
func (alipp awsLightsailInstancePublicPortsAttributes) InstanceName() terra.StringValue {
	return terra.ReferenceAsString(alipp.ref.Append("instance_name"))
}

func (alipp awsLightsailInstancePublicPortsAttributes) PortInfo() terra.SetValue[PortInfoAttributes] {
	return terra.ReferenceAsSet[PortInfoAttributes](alipp.ref.Append("port_info"))
}

type awsLightsailInstancePublicPortsState struct {
	Id           string          `json:"id"`
	InstanceName string          `json:"instance_name"`
	PortInfo     []PortInfoState `json:"port_info"`
}
