// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_verifiedpermissions_schema

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_verifiedpermissions_schema.
type Resource struct {
	Name      string
	Args      Args
	state     *awsVerifiedpermissionsSchemaState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avs *Resource) Type() string {
	return "aws_verifiedpermissions_schema"
}

// LocalName returns the local name for [Resource].
func (avs *Resource) LocalName() string {
	return avs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avs *Resource) Configuration() interface{} {
	return avs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avs *Resource) Dependencies() terra.Dependencies {
	return avs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avs *Resource) LifecycleManagement() *terra.Lifecycle {
	return avs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avs *Resource) Attributes() awsVerifiedpermissionsSchemaAttributes {
	return awsVerifiedpermissionsSchemaAttributes{ref: terra.ReferenceResource(avs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avs *Resource) ImportState(state io.Reader) error {
	avs.state = &awsVerifiedpermissionsSchemaState{}
	if err := json.NewDecoder(state).Decode(avs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avs.Type(), avs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avs *Resource) State() (*awsVerifiedpermissionsSchemaState, bool) {
	return avs.state, avs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avs *Resource) StateMust() *awsVerifiedpermissionsSchemaState {
	if avs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avs.Type(), avs.LocalName()))
	}
	return avs.state
}

// Args contains the configurations for aws_verifiedpermissions_schema.
type Args struct {
	// PolicyStoreId: string, required
	PolicyStoreId terra.StringValue `hcl:"policy_store_id,attr" validate:"required"`
	// Definition: optional
	Definition *Definition `hcl:"definition,block"`
}

type awsVerifiedpermissionsSchemaAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_verifiedpermissions_schema.
func (avs awsVerifiedpermissionsSchemaAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("id"))
}

// Namespaces returns a reference to field namespaces of aws_verifiedpermissions_schema.
func (avs awsVerifiedpermissionsSchemaAttributes) Namespaces() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](avs.ref.Append("namespaces"))
}

// PolicyStoreId returns a reference to field policy_store_id of aws_verifiedpermissions_schema.
func (avs awsVerifiedpermissionsSchemaAttributes) PolicyStoreId() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("policy_store_id"))
}

func (avs awsVerifiedpermissionsSchemaAttributes) Definition() DefinitionAttributes {
	return terra.ReferenceAsSingle[DefinitionAttributes](avs.ref.Append("definition"))
}

type awsVerifiedpermissionsSchemaState struct {
	Id            string           `json:"id"`
	Namespaces    []string         `json:"namespaces"`
	PolicyStoreId string           `json:"policy_store_id"`
	Definition    *DefinitionState `json:"definition"`
}
