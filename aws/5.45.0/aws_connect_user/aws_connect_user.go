// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_user

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_connect_user.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConnectUserState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acu *Resource) Type() string {
	return "aws_connect_user"
}

// LocalName returns the local name for [Resource].
func (acu *Resource) LocalName() string {
	return acu.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acu *Resource) Configuration() interface{} {
	return acu.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acu *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acu)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acu *Resource) Dependencies() terra.Dependencies {
	return acu.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acu *Resource) LifecycleManagement() *terra.Lifecycle {
	return acu.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acu *Resource) Attributes() awsConnectUserAttributes {
	return awsConnectUserAttributes{ref: terra.ReferenceResource(acu)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acu *Resource) ImportState(state io.Reader) error {
	acu.state = &awsConnectUserState{}
	if err := json.NewDecoder(state).Decode(acu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acu.Type(), acu.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acu *Resource) State() (*awsConnectUserState, bool) {
	return acu.state, acu.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acu *Resource) StateMust() *awsConnectUserState {
	if acu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acu.Type(), acu.LocalName()))
	}
	return acu.state
}

// Args contains the configurations for aws_connect_user.
type Args struct {
	// DirectoryUserId: string, optional
	DirectoryUserId terra.StringValue `hcl:"directory_user_id,attr"`
	// HierarchyGroupId: string, optional
	HierarchyGroupId terra.StringValue `hcl:"hierarchy_group_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// RoutingProfileId: string, required
	RoutingProfileId terra.StringValue `hcl:"routing_profile_id,attr" validate:"required"`
	// SecurityProfileIds: set of string, required
	SecurityProfileIds terra.SetValue[terra.StringValue] `hcl:"security_profile_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// IdentityInfo: optional
	IdentityInfo *IdentityInfo `hcl:"identity_info,block"`
	// PhoneConfig: required
	PhoneConfig *PhoneConfig `hcl:"phone_config,block" validate:"required"`
}

type awsConnectUserAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_connect_user.
func (acu awsConnectUserAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acu.ref.Append("arn"))
}

// DirectoryUserId returns a reference to field directory_user_id of aws_connect_user.
func (acu awsConnectUserAttributes) DirectoryUserId() terra.StringValue {
	return terra.ReferenceAsString(acu.ref.Append("directory_user_id"))
}

// HierarchyGroupId returns a reference to field hierarchy_group_id of aws_connect_user.
func (acu awsConnectUserAttributes) HierarchyGroupId() terra.StringValue {
	return terra.ReferenceAsString(acu.ref.Append("hierarchy_group_id"))
}

// Id returns a reference to field id of aws_connect_user.
func (acu awsConnectUserAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acu.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_connect_user.
func (acu awsConnectUserAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(acu.ref.Append("instance_id"))
}

// Name returns a reference to field name of aws_connect_user.
func (acu awsConnectUserAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acu.ref.Append("name"))
}

// Password returns a reference to field password of aws_connect_user.
func (acu awsConnectUserAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(acu.ref.Append("password"))
}

// RoutingProfileId returns a reference to field routing_profile_id of aws_connect_user.
func (acu awsConnectUserAttributes) RoutingProfileId() terra.StringValue {
	return terra.ReferenceAsString(acu.ref.Append("routing_profile_id"))
}

// SecurityProfileIds returns a reference to field security_profile_ids of aws_connect_user.
func (acu awsConnectUserAttributes) SecurityProfileIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](acu.ref.Append("security_profile_ids"))
}

// Tags returns a reference to field tags of aws_connect_user.
func (acu awsConnectUserAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acu.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_connect_user.
func (acu awsConnectUserAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acu.ref.Append("tags_all"))
}

// UserId returns a reference to field user_id of aws_connect_user.
func (acu awsConnectUserAttributes) UserId() terra.StringValue {
	return terra.ReferenceAsString(acu.ref.Append("user_id"))
}

func (acu awsConnectUserAttributes) IdentityInfo() terra.ListValue[IdentityInfoAttributes] {
	return terra.ReferenceAsList[IdentityInfoAttributes](acu.ref.Append("identity_info"))
}

func (acu awsConnectUserAttributes) PhoneConfig() terra.ListValue[PhoneConfigAttributes] {
	return terra.ReferenceAsList[PhoneConfigAttributes](acu.ref.Append("phone_config"))
}

type awsConnectUserState struct {
	Arn                string              `json:"arn"`
	DirectoryUserId    string              `json:"directory_user_id"`
	HierarchyGroupId   string              `json:"hierarchy_group_id"`
	Id                 string              `json:"id"`
	InstanceId         string              `json:"instance_id"`
	Name               string              `json:"name"`
	Password           string              `json:"password"`
	RoutingProfileId   string              `json:"routing_profile_id"`
	SecurityProfileIds []string            `json:"security_profile_ids"`
	Tags               map[string]string   `json:"tags"`
	TagsAll            map[string]string   `json:"tags_all"`
	UserId             string              `json:"user_id"`
	IdentityInfo       []IdentityInfoState `json:"identity_info"`
	PhoneConfig        []PhoneConfigState  `json:"phone_config"`
}
