// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3control_object_lambda_access_point

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3control_object_lambda_access_point.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3ControlObjectLambdaAccessPointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asolap *Resource) Type() string {
	return "aws_s3control_object_lambda_access_point"
}

// LocalName returns the local name for [Resource].
func (asolap *Resource) LocalName() string {
	return asolap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asolap *Resource) Configuration() interface{} {
	return asolap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asolap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asolap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asolap *Resource) Dependencies() terra.Dependencies {
	return asolap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asolap *Resource) LifecycleManagement() *terra.Lifecycle {
	return asolap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asolap *Resource) Attributes() awsS3ControlObjectLambdaAccessPointAttributes {
	return awsS3ControlObjectLambdaAccessPointAttributes{ref: terra.ReferenceResource(asolap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asolap *Resource) ImportState(state io.Reader) error {
	asolap.state = &awsS3ControlObjectLambdaAccessPointState{}
	if err := json.NewDecoder(state).Decode(asolap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asolap.Type(), asolap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asolap *Resource) State() (*awsS3ControlObjectLambdaAccessPointState, bool) {
	return asolap.state, asolap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asolap *Resource) StateMust() *awsS3ControlObjectLambdaAccessPointState {
	if asolap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asolap.Type(), asolap.LocalName()))
	}
	return asolap.state
}

// Args contains the configurations for aws_s3control_object_lambda_access_point.
type Args struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Configuration: required
	Configuration *Configuration `hcl:"configuration,block" validate:"required"`
}

type awsS3ControlObjectLambdaAccessPointAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_s3control_object_lambda_access_point.
func (asolap awsS3ControlObjectLambdaAccessPointAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(asolap.ref.Append("account_id"))
}

// Alias returns a reference to field alias of aws_s3control_object_lambda_access_point.
func (asolap awsS3ControlObjectLambdaAccessPointAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(asolap.ref.Append("alias"))
}

// Arn returns a reference to field arn of aws_s3control_object_lambda_access_point.
func (asolap awsS3ControlObjectLambdaAccessPointAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(asolap.ref.Append("arn"))
}

// Id returns a reference to field id of aws_s3control_object_lambda_access_point.
func (asolap awsS3ControlObjectLambdaAccessPointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asolap.ref.Append("id"))
}

// Name returns a reference to field name of aws_s3control_object_lambda_access_point.
func (asolap awsS3ControlObjectLambdaAccessPointAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(asolap.ref.Append("name"))
}

func (asolap awsS3ControlObjectLambdaAccessPointAttributes) Configuration() terra.ListValue[ConfigurationAttributes] {
	return terra.ReferenceAsList[ConfigurationAttributes](asolap.ref.Append("configuration"))
}

type awsS3ControlObjectLambdaAccessPointState struct {
	AccountId     string               `json:"account_id"`
	Alias         string               `json:"alias"`
	Arn           string               `json:"arn"`
	Id            string               `json:"id"`
	Name          string               `json:"name"`
	Configuration []ConfigurationState `json:"configuration"`
}
