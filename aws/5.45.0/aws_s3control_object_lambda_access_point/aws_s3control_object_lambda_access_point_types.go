// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3control_object_lambda_access_point

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Configuration struct {
	// AllowedFeatures: set of string, optional
	AllowedFeatures terra.SetValue[terra.StringValue] `hcl:"allowed_features,attr"`
	// CloudWatchMetricsEnabled: bool, optional
	CloudWatchMetricsEnabled terra.BoolValue `hcl:"cloud_watch_metrics_enabled,attr"`
	// SupportingAccessPoint: string, required
	SupportingAccessPoint terra.StringValue `hcl:"supporting_access_point,attr" validate:"required"`
	// ConfigurationTransformationConfiguration: min=1
	TransformationConfiguration []ConfigurationTransformationConfiguration `hcl:"transformation_configuration,block" validate:"min=1"`
}

type ConfigurationTransformationConfiguration struct {
	// Actions: set of string, required
	Actions terra.SetValue[terra.StringValue] `hcl:"actions,attr" validate:"required"`
	// ConfigurationTransformationConfigurationContentTransformation: required
	ContentTransformation *ConfigurationTransformationConfigurationContentTransformation `hcl:"content_transformation,block" validate:"required"`
}

type ConfigurationTransformationConfigurationContentTransformation struct {
	// ConfigurationTransformationConfigurationContentTransformationAwsLambda: required
	AwsLambda *ConfigurationTransformationConfigurationContentTransformationAwsLambda `hcl:"aws_lambda,block" validate:"required"`
}

type ConfigurationTransformationConfigurationContentTransformationAwsLambda struct {
	// FunctionArn: string, required
	FunctionArn terra.StringValue `hcl:"function_arn,attr" validate:"required"`
	// FunctionPayload: string, optional
	FunctionPayload terra.StringValue `hcl:"function_payload,attr"`
}

type ConfigurationAttributes struct {
	ref terra.Reference
}

func (c ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigurationAttributes) InternalWithRef(ref terra.Reference) ConfigurationAttributes {
	return ConfigurationAttributes{ref: ref}
}

func (c ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigurationAttributes) AllowedFeatures() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("allowed_features"))
}

func (c ConfigurationAttributes) CloudWatchMetricsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("cloud_watch_metrics_enabled"))
}

func (c ConfigurationAttributes) SupportingAccessPoint() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("supporting_access_point"))
}

func (c ConfigurationAttributes) TransformationConfiguration() terra.SetValue[ConfigurationTransformationConfigurationAttributes] {
	return terra.ReferenceAsSet[ConfigurationTransformationConfigurationAttributes](c.ref.Append("transformation_configuration"))
}

type ConfigurationTransformationConfigurationAttributes struct {
	ref terra.Reference
}

func (tc ConfigurationTransformationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc ConfigurationTransformationConfigurationAttributes) InternalWithRef(ref terra.Reference) ConfigurationTransformationConfigurationAttributes {
	return ConfigurationTransformationConfigurationAttributes{ref: ref}
}

func (tc ConfigurationTransformationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc ConfigurationTransformationConfigurationAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tc.ref.Append("actions"))
}

func (tc ConfigurationTransformationConfigurationAttributes) ContentTransformation() terra.ListValue[ConfigurationTransformationConfigurationContentTransformationAttributes] {
	return terra.ReferenceAsList[ConfigurationTransformationConfigurationContentTransformationAttributes](tc.ref.Append("content_transformation"))
}

type ConfigurationTransformationConfigurationContentTransformationAttributes struct {
	ref terra.Reference
}

func (ct ConfigurationTransformationConfigurationContentTransformationAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct ConfigurationTransformationConfigurationContentTransformationAttributes) InternalWithRef(ref terra.Reference) ConfigurationTransformationConfigurationContentTransformationAttributes {
	return ConfigurationTransformationConfigurationContentTransformationAttributes{ref: ref}
}

func (ct ConfigurationTransformationConfigurationContentTransformationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ct.ref.InternalTokens()
}

func (ct ConfigurationTransformationConfigurationContentTransformationAttributes) AwsLambda() terra.ListValue[ConfigurationTransformationConfigurationContentTransformationAwsLambdaAttributes] {
	return terra.ReferenceAsList[ConfigurationTransformationConfigurationContentTransformationAwsLambdaAttributes](ct.ref.Append("aws_lambda"))
}

type ConfigurationTransformationConfigurationContentTransformationAwsLambdaAttributes struct {
	ref terra.Reference
}

func (al ConfigurationTransformationConfigurationContentTransformationAwsLambdaAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al ConfigurationTransformationConfigurationContentTransformationAwsLambdaAttributes) InternalWithRef(ref terra.Reference) ConfigurationTransformationConfigurationContentTransformationAwsLambdaAttributes {
	return ConfigurationTransformationConfigurationContentTransformationAwsLambdaAttributes{ref: ref}
}

func (al ConfigurationTransformationConfigurationContentTransformationAwsLambdaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al ConfigurationTransformationConfigurationContentTransformationAwsLambdaAttributes) FunctionArn() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("function_arn"))
}

func (al ConfigurationTransformationConfigurationContentTransformationAwsLambdaAttributes) FunctionPayload() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("function_payload"))
}

type ConfigurationState struct {
	AllowedFeatures             []string                                        `json:"allowed_features"`
	CloudWatchMetricsEnabled    bool                                            `json:"cloud_watch_metrics_enabled"`
	SupportingAccessPoint       string                                          `json:"supporting_access_point"`
	TransformationConfiguration []ConfigurationTransformationConfigurationState `json:"transformation_configuration"`
}

type ConfigurationTransformationConfigurationState struct {
	Actions               []string                                                             `json:"actions"`
	ContentTransformation []ConfigurationTransformationConfigurationContentTransformationState `json:"content_transformation"`
}

type ConfigurationTransformationConfigurationContentTransformationState struct {
	AwsLambda []ConfigurationTransformationConfigurationContentTransformationAwsLambdaState `json:"aws_lambda"`
}

type ConfigurationTransformationConfigurationContentTransformationAwsLambdaState struct {
	FunctionArn     string `json:"function_arn"`
	FunctionPayload string `json:"function_payload"`
}
