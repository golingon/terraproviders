// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_user_hierarchy_structure

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type HierarchyStructure struct {
	// HierarchyStructureLevelFive: optional
	LevelFive *HierarchyStructureLevelFive `hcl:"level_five,block"`
	// HierarchyStructureLevelFour: optional
	LevelFour *HierarchyStructureLevelFour `hcl:"level_four,block"`
	// HierarchyStructureLevelOne: optional
	LevelOne *HierarchyStructureLevelOne `hcl:"level_one,block"`
	// HierarchyStructureLevelThree: optional
	LevelThree *HierarchyStructureLevelThree `hcl:"level_three,block"`
	// HierarchyStructureLevelTwo: optional
	LevelTwo *HierarchyStructureLevelTwo `hcl:"level_two,block"`
}

type HierarchyStructureLevelFive struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type HierarchyStructureLevelFour struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type HierarchyStructureLevelOne struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type HierarchyStructureLevelThree struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type HierarchyStructureLevelTwo struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type HierarchyStructureAttributes struct {
	ref terra.Reference
}

func (hs HierarchyStructureAttributes) InternalRef() (terra.Reference, error) {
	return hs.ref, nil
}

func (hs HierarchyStructureAttributes) InternalWithRef(ref terra.Reference) HierarchyStructureAttributes {
	return HierarchyStructureAttributes{ref: ref}
}

func (hs HierarchyStructureAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hs.ref.InternalTokens()
}

func (hs HierarchyStructureAttributes) LevelFive() terra.ListValue[HierarchyStructureLevelFiveAttributes] {
	return terra.ReferenceAsList[HierarchyStructureLevelFiveAttributes](hs.ref.Append("level_five"))
}

func (hs HierarchyStructureAttributes) LevelFour() terra.ListValue[HierarchyStructureLevelFourAttributes] {
	return terra.ReferenceAsList[HierarchyStructureLevelFourAttributes](hs.ref.Append("level_four"))
}

func (hs HierarchyStructureAttributes) LevelOne() terra.ListValue[HierarchyStructureLevelOneAttributes] {
	return terra.ReferenceAsList[HierarchyStructureLevelOneAttributes](hs.ref.Append("level_one"))
}

func (hs HierarchyStructureAttributes) LevelThree() terra.ListValue[HierarchyStructureLevelThreeAttributes] {
	return terra.ReferenceAsList[HierarchyStructureLevelThreeAttributes](hs.ref.Append("level_three"))
}

func (hs HierarchyStructureAttributes) LevelTwo() terra.ListValue[HierarchyStructureLevelTwoAttributes] {
	return terra.ReferenceAsList[HierarchyStructureLevelTwoAttributes](hs.ref.Append("level_two"))
}

type HierarchyStructureLevelFiveAttributes struct {
	ref terra.Reference
}

func (lf HierarchyStructureLevelFiveAttributes) InternalRef() (terra.Reference, error) {
	return lf.ref, nil
}

func (lf HierarchyStructureLevelFiveAttributes) InternalWithRef(ref terra.Reference) HierarchyStructureLevelFiveAttributes {
	return HierarchyStructureLevelFiveAttributes{ref: ref}
}

func (lf HierarchyStructureLevelFiveAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lf.ref.InternalTokens()
}

func (lf HierarchyStructureLevelFiveAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("arn"))
}

func (lf HierarchyStructureLevelFiveAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("id"))
}

func (lf HierarchyStructureLevelFiveAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("name"))
}

type HierarchyStructureLevelFourAttributes struct {
	ref terra.Reference
}

func (lf HierarchyStructureLevelFourAttributes) InternalRef() (terra.Reference, error) {
	return lf.ref, nil
}

func (lf HierarchyStructureLevelFourAttributes) InternalWithRef(ref terra.Reference) HierarchyStructureLevelFourAttributes {
	return HierarchyStructureLevelFourAttributes{ref: ref}
}

func (lf HierarchyStructureLevelFourAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lf.ref.InternalTokens()
}

func (lf HierarchyStructureLevelFourAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("arn"))
}

func (lf HierarchyStructureLevelFourAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("id"))
}

func (lf HierarchyStructureLevelFourAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("name"))
}

type HierarchyStructureLevelOneAttributes struct {
	ref terra.Reference
}

func (lo HierarchyStructureLevelOneAttributes) InternalRef() (terra.Reference, error) {
	return lo.ref, nil
}

func (lo HierarchyStructureLevelOneAttributes) InternalWithRef(ref terra.Reference) HierarchyStructureLevelOneAttributes {
	return HierarchyStructureLevelOneAttributes{ref: ref}
}

func (lo HierarchyStructureLevelOneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lo.ref.InternalTokens()
}

func (lo HierarchyStructureLevelOneAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lo.ref.Append("arn"))
}

func (lo HierarchyStructureLevelOneAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lo.ref.Append("id"))
}

func (lo HierarchyStructureLevelOneAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lo.ref.Append("name"))
}

type HierarchyStructureLevelThreeAttributes struct {
	ref terra.Reference
}

func (lt HierarchyStructureLevelThreeAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt HierarchyStructureLevelThreeAttributes) InternalWithRef(ref terra.Reference) HierarchyStructureLevelThreeAttributes {
	return HierarchyStructureLevelThreeAttributes{ref: ref}
}

func (lt HierarchyStructureLevelThreeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt HierarchyStructureLevelThreeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("arn"))
}

func (lt HierarchyStructureLevelThreeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("id"))
}

func (lt HierarchyStructureLevelThreeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("name"))
}

type HierarchyStructureLevelTwoAttributes struct {
	ref terra.Reference
}

func (lt HierarchyStructureLevelTwoAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt HierarchyStructureLevelTwoAttributes) InternalWithRef(ref terra.Reference) HierarchyStructureLevelTwoAttributes {
	return HierarchyStructureLevelTwoAttributes{ref: ref}
}

func (lt HierarchyStructureLevelTwoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt HierarchyStructureLevelTwoAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("arn"))
}

func (lt HierarchyStructureLevelTwoAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("id"))
}

func (lt HierarchyStructureLevelTwoAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("name"))
}

type HierarchyStructureState struct {
	LevelFive  []HierarchyStructureLevelFiveState  `json:"level_five"`
	LevelFour  []HierarchyStructureLevelFourState  `json:"level_four"`
	LevelOne   []HierarchyStructureLevelOneState   `json:"level_one"`
	LevelThree []HierarchyStructureLevelThreeState `json:"level_three"`
	LevelTwo   []HierarchyStructureLevelTwoState   `json:"level_two"`
}

type HierarchyStructureLevelFiveState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type HierarchyStructureLevelFourState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type HierarchyStructureLevelOneState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type HierarchyStructureLevelThreeState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type HierarchyStructureLevelTwoState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}
