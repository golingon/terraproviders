// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_user_hierarchy_structure

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_connect_user_hierarchy_structure.
type Resource struct {
	Name      string
	Args      Args
	state     *awsConnectUserHierarchyStructureState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acuhs *Resource) Type() string {
	return "aws_connect_user_hierarchy_structure"
}

// LocalName returns the local name for [Resource].
func (acuhs *Resource) LocalName() string {
	return acuhs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acuhs *Resource) Configuration() interface{} {
	return acuhs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acuhs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acuhs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acuhs *Resource) Dependencies() terra.Dependencies {
	return acuhs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acuhs *Resource) LifecycleManagement() *terra.Lifecycle {
	return acuhs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acuhs *Resource) Attributes() awsConnectUserHierarchyStructureAttributes {
	return awsConnectUserHierarchyStructureAttributes{ref: terra.ReferenceResource(acuhs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acuhs *Resource) ImportState(state io.Reader) error {
	acuhs.state = &awsConnectUserHierarchyStructureState{}
	if err := json.NewDecoder(state).Decode(acuhs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acuhs.Type(), acuhs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acuhs *Resource) State() (*awsConnectUserHierarchyStructureState, bool) {
	return acuhs.state, acuhs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acuhs *Resource) StateMust() *awsConnectUserHierarchyStructureState {
	if acuhs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acuhs.Type(), acuhs.LocalName()))
	}
	return acuhs.state
}

// Args contains the configurations for aws_connect_user_hierarchy_structure.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// HierarchyStructure: required
	HierarchyStructure *HierarchyStructure `hcl:"hierarchy_structure,block" validate:"required"`
}

type awsConnectUserHierarchyStructureAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_connect_user_hierarchy_structure.
func (acuhs awsConnectUserHierarchyStructureAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acuhs.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_connect_user_hierarchy_structure.
func (acuhs awsConnectUserHierarchyStructureAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(acuhs.ref.Append("instance_id"))
}

func (acuhs awsConnectUserHierarchyStructureAttributes) HierarchyStructure() terra.ListValue[HierarchyStructureAttributes] {
	return terra.ReferenceAsList[HierarchyStructureAttributes](acuhs.ref.Append("hierarchy_structure"))
}

type awsConnectUserHierarchyStructureState struct {
	Id                 string                    `json:"id"`
	InstanceId         string                    `json:"instance_id"`
	HierarchyStructure []HierarchyStructureState `json:"hierarchy_structure"`
}
