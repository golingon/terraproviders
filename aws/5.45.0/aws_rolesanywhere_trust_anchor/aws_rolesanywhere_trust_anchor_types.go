// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_rolesanywhere_trust_anchor

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Source struct {
	// SourceType: string, required
	SourceType terra.StringValue `hcl:"source_type,attr" validate:"required"`
	// SourceSourceData: required
	SourceData *SourceSourceData `hcl:"source_data,block" validate:"required"`
}

type SourceSourceData struct {
	// AcmPcaArn: string, optional
	AcmPcaArn terra.StringValue `hcl:"acm_pca_arn,attr"`
	// X509CertificateData: string, optional
	X509CertificateData terra.StringValue `hcl:"x509_certificate_data,attr"`
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) SourceType() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("source_type"))
}

func (s SourceAttributes) SourceData() terra.ListValue[SourceSourceDataAttributes] {
	return terra.ReferenceAsList[SourceSourceDataAttributes](s.ref.Append("source_data"))
}

type SourceSourceDataAttributes struct {
	ref terra.Reference
}

func (sd SourceSourceDataAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd SourceSourceDataAttributes) InternalWithRef(ref terra.Reference) SourceSourceDataAttributes {
	return SourceSourceDataAttributes{ref: ref}
}

func (sd SourceSourceDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd SourceSourceDataAttributes) AcmPcaArn() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("acm_pca_arn"))
}

func (sd SourceSourceDataAttributes) X509CertificateData() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("x509_certificate_data"))
}

type SourceState struct {
	SourceType string                  `json:"source_type"`
	SourceData []SourceSourceDataState `json:"source_data"`
}

type SourceSourceDataState struct {
	AcmPcaArn           string `json:"acm_pca_arn"`
	X509CertificateData string `json:"x509_certificate_data"`
}
