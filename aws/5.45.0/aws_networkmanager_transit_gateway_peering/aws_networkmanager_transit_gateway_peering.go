// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkmanager_transit_gateway_peering

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_networkmanager_transit_gateway_peering.
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkmanagerTransitGatewayPeeringState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (antgp *Resource) Type() string {
	return "aws_networkmanager_transit_gateway_peering"
}

// LocalName returns the local name for [Resource].
func (antgp *Resource) LocalName() string {
	return antgp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (antgp *Resource) Configuration() interface{} {
	return antgp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (antgp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(antgp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (antgp *Resource) Dependencies() terra.Dependencies {
	return antgp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (antgp *Resource) LifecycleManagement() *terra.Lifecycle {
	return antgp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (antgp *Resource) Attributes() awsNetworkmanagerTransitGatewayPeeringAttributes {
	return awsNetworkmanagerTransitGatewayPeeringAttributes{ref: terra.ReferenceResource(antgp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (antgp *Resource) ImportState(state io.Reader) error {
	antgp.state = &awsNetworkmanagerTransitGatewayPeeringState{}
	if err := json.NewDecoder(state).Decode(antgp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", antgp.Type(), antgp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (antgp *Resource) State() (*awsNetworkmanagerTransitGatewayPeeringState, bool) {
	return antgp.state, antgp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (antgp *Resource) StateMust() *awsNetworkmanagerTransitGatewayPeeringState {
	if antgp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", antgp.Type(), antgp.LocalName()))
	}
	return antgp.state
}

// Args contains the configurations for aws_networkmanager_transit_gateway_peering.
type Args struct {
	// CoreNetworkId: string, required
	CoreNetworkId terra.StringValue `hcl:"core_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitGatewayArn: string, required
	TransitGatewayArn terra.StringValue `hcl:"transit_gateway_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsNetworkmanagerTransitGatewayPeeringAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_networkmanager_transit_gateway_peering.
func (antgp awsNetworkmanagerTransitGatewayPeeringAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(antgp.ref.Append("arn"))
}

// CoreNetworkArn returns a reference to field core_network_arn of aws_networkmanager_transit_gateway_peering.
func (antgp awsNetworkmanagerTransitGatewayPeeringAttributes) CoreNetworkArn() terra.StringValue {
	return terra.ReferenceAsString(antgp.ref.Append("core_network_arn"))
}

// CoreNetworkId returns a reference to field core_network_id of aws_networkmanager_transit_gateway_peering.
func (antgp awsNetworkmanagerTransitGatewayPeeringAttributes) CoreNetworkId() terra.StringValue {
	return terra.ReferenceAsString(antgp.ref.Append("core_network_id"))
}

// EdgeLocation returns a reference to field edge_location of aws_networkmanager_transit_gateway_peering.
func (antgp awsNetworkmanagerTransitGatewayPeeringAttributes) EdgeLocation() terra.StringValue {
	return terra.ReferenceAsString(antgp.ref.Append("edge_location"))
}

// Id returns a reference to field id of aws_networkmanager_transit_gateway_peering.
func (antgp awsNetworkmanagerTransitGatewayPeeringAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(antgp.ref.Append("id"))
}

// OwnerAccountId returns a reference to field owner_account_id of aws_networkmanager_transit_gateway_peering.
func (antgp awsNetworkmanagerTransitGatewayPeeringAttributes) OwnerAccountId() terra.StringValue {
	return terra.ReferenceAsString(antgp.ref.Append("owner_account_id"))
}

// PeeringType returns a reference to field peering_type of aws_networkmanager_transit_gateway_peering.
func (antgp awsNetworkmanagerTransitGatewayPeeringAttributes) PeeringType() terra.StringValue {
	return terra.ReferenceAsString(antgp.ref.Append("peering_type"))
}

// ResourceArn returns a reference to field resource_arn of aws_networkmanager_transit_gateway_peering.
func (antgp awsNetworkmanagerTransitGatewayPeeringAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(antgp.ref.Append("resource_arn"))
}

// Tags returns a reference to field tags of aws_networkmanager_transit_gateway_peering.
func (antgp awsNetworkmanagerTransitGatewayPeeringAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](antgp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_networkmanager_transit_gateway_peering.
func (antgp awsNetworkmanagerTransitGatewayPeeringAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](antgp.ref.Append("tags_all"))
}

// TransitGatewayArn returns a reference to field transit_gateway_arn of aws_networkmanager_transit_gateway_peering.
func (antgp awsNetworkmanagerTransitGatewayPeeringAttributes) TransitGatewayArn() terra.StringValue {
	return terra.ReferenceAsString(antgp.ref.Append("transit_gateway_arn"))
}

// TransitGatewayPeeringAttachmentId returns a reference to field transit_gateway_peering_attachment_id of aws_networkmanager_transit_gateway_peering.
func (antgp awsNetworkmanagerTransitGatewayPeeringAttributes) TransitGatewayPeeringAttachmentId() terra.StringValue {
	return terra.ReferenceAsString(antgp.ref.Append("transit_gateway_peering_attachment_id"))
}

func (antgp awsNetworkmanagerTransitGatewayPeeringAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](antgp.ref.Append("timeouts"))
}

type awsNetworkmanagerTransitGatewayPeeringState struct {
	Arn                               string            `json:"arn"`
	CoreNetworkArn                    string            `json:"core_network_arn"`
	CoreNetworkId                     string            `json:"core_network_id"`
	EdgeLocation                      string            `json:"edge_location"`
	Id                                string            `json:"id"`
	OwnerAccountId                    string            `json:"owner_account_id"`
	PeeringType                       string            `json:"peering_type"`
	ResourceArn                       string            `json:"resource_arn"`
	Tags                              map[string]string `json:"tags"`
	TagsAll                           map[string]string `json:"tags_all"`
	TransitGatewayArn                 string            `json:"transit_gateway_arn"`
	TransitGatewayPeeringAttachmentId string            `json:"transit_gateway_peering_attachment_id"`
	Timeouts                          *TimeoutsState    `json:"timeouts"`
}
