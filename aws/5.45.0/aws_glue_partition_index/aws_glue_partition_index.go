// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_partition_index

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_glue_partition_index.
type Resource struct {
	Name      string
	Args      Args
	state     *awsGluePartitionIndexState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agpi *Resource) Type() string {
	return "aws_glue_partition_index"
}

// LocalName returns the local name for [Resource].
func (agpi *Resource) LocalName() string {
	return agpi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agpi *Resource) Configuration() interface{} {
	return agpi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agpi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agpi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agpi *Resource) Dependencies() terra.Dependencies {
	return agpi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agpi *Resource) LifecycleManagement() *terra.Lifecycle {
	return agpi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agpi *Resource) Attributes() awsGluePartitionIndexAttributes {
	return awsGluePartitionIndexAttributes{ref: terra.ReferenceResource(agpi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agpi *Resource) ImportState(state io.Reader) error {
	agpi.state = &awsGluePartitionIndexState{}
	if err := json.NewDecoder(state).Decode(agpi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agpi.Type(), agpi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agpi *Resource) State() (*awsGluePartitionIndexState, bool) {
	return agpi.state, agpi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agpi *Resource) StateMust() *awsGluePartitionIndexState {
	if agpi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agpi.Type(), agpi.LocalName()))
	}
	return agpi.state
}

// Args contains the configurations for aws_glue_partition_index.
type Args struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// PartitionIndex: required
	PartitionIndex *PartitionIndex `hcl:"partition_index,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsGluePartitionIndexAttributes struct {
	ref terra.Reference
}

// CatalogId returns a reference to field catalog_id of aws_glue_partition_index.
func (agpi awsGluePartitionIndexAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(agpi.ref.Append("catalog_id"))
}

// DatabaseName returns a reference to field database_name of aws_glue_partition_index.
func (agpi awsGluePartitionIndexAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(agpi.ref.Append("database_name"))
}

// Id returns a reference to field id of aws_glue_partition_index.
func (agpi awsGluePartitionIndexAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agpi.ref.Append("id"))
}

// TableName returns a reference to field table_name of aws_glue_partition_index.
func (agpi awsGluePartitionIndexAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(agpi.ref.Append("table_name"))
}

func (agpi awsGluePartitionIndexAttributes) PartitionIndex() terra.ListValue[PartitionIndexAttributes] {
	return terra.ReferenceAsList[PartitionIndexAttributes](agpi.ref.Append("partition_index"))
}

func (agpi awsGluePartitionIndexAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](agpi.ref.Append("timeouts"))
}

type awsGluePartitionIndexState struct {
	CatalogId      string                `json:"catalog_id"`
	DatabaseName   string                `json:"database_name"`
	Id             string                `json:"id"`
	TableName      string                `json:"table_name"`
	PartitionIndex []PartitionIndexState `json:"partition_index"`
	Timeouts       *TimeoutsState        `json:"timeouts"`
}
