// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_autoscaling_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_autoscaling_policy.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAutoscalingPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aap *Resource) Type() string {
	return "aws_autoscaling_policy"
}

// LocalName returns the local name for [Resource].
func (aap *Resource) LocalName() string {
	return aap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aap *Resource) Configuration() interface{} {
	return aap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aap *Resource) Dependencies() terra.Dependencies {
	return aap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aap *Resource) LifecycleManagement() *terra.Lifecycle {
	return aap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aap *Resource) Attributes() awsAutoscalingPolicyAttributes {
	return awsAutoscalingPolicyAttributes{ref: terra.ReferenceResource(aap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aap *Resource) ImportState(state io.Reader) error {
	aap.state = &awsAutoscalingPolicyState{}
	if err := json.NewDecoder(state).Decode(aap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aap.Type(), aap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aap *Resource) State() (*awsAutoscalingPolicyState, bool) {
	return aap.state, aap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aap *Resource) StateMust() *awsAutoscalingPolicyState {
	if aap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aap.Type(), aap.LocalName()))
	}
	return aap.state
}

// Args contains the configurations for aws_autoscaling_policy.
type Args struct {
	// AdjustmentType: string, optional
	AdjustmentType terra.StringValue `hcl:"adjustment_type,attr"`
	// AutoscalingGroupName: string, required
	AutoscalingGroupName terra.StringValue `hcl:"autoscaling_group_name,attr" validate:"required"`
	// Cooldown: number, optional
	Cooldown terra.NumberValue `hcl:"cooldown,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// EstimatedInstanceWarmup: number, optional
	EstimatedInstanceWarmup terra.NumberValue `hcl:"estimated_instance_warmup,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MetricAggregationType: string, optional
	MetricAggregationType terra.StringValue `hcl:"metric_aggregation_type,attr"`
	// MinAdjustmentMagnitude: number, optional
	MinAdjustmentMagnitude terra.NumberValue `hcl:"min_adjustment_magnitude,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyType: string, optional
	PolicyType terra.StringValue `hcl:"policy_type,attr"`
	// ScalingAdjustment: number, optional
	ScalingAdjustment terra.NumberValue `hcl:"scaling_adjustment,attr"`
	// PredictiveScalingConfiguration: optional
	PredictiveScalingConfiguration *PredictiveScalingConfiguration `hcl:"predictive_scaling_configuration,block"`
	// StepAdjustment: min=0
	StepAdjustment []StepAdjustment `hcl:"step_adjustment,block" validate:"min=0"`
	// TargetTrackingConfiguration: optional
	TargetTrackingConfiguration *TargetTrackingConfiguration `hcl:"target_tracking_configuration,block"`
}

type awsAutoscalingPolicyAttributes struct {
	ref terra.Reference
}

// AdjustmentType returns a reference to field adjustment_type of aws_autoscaling_policy.
func (aap awsAutoscalingPolicyAttributes) AdjustmentType() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("adjustment_type"))
}

// Arn returns a reference to field arn of aws_autoscaling_policy.
func (aap awsAutoscalingPolicyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("arn"))
}

// AutoscalingGroupName returns a reference to field autoscaling_group_name of aws_autoscaling_policy.
func (aap awsAutoscalingPolicyAttributes) AutoscalingGroupName() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("autoscaling_group_name"))
}

// Cooldown returns a reference to field cooldown of aws_autoscaling_policy.
func (aap awsAutoscalingPolicyAttributes) Cooldown() terra.NumberValue {
	return terra.ReferenceAsNumber(aap.ref.Append("cooldown"))
}

// Enabled returns a reference to field enabled of aws_autoscaling_policy.
func (aap awsAutoscalingPolicyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aap.ref.Append("enabled"))
}

// EstimatedInstanceWarmup returns a reference to field estimated_instance_warmup of aws_autoscaling_policy.
func (aap awsAutoscalingPolicyAttributes) EstimatedInstanceWarmup() terra.NumberValue {
	return terra.ReferenceAsNumber(aap.ref.Append("estimated_instance_warmup"))
}

// Id returns a reference to field id of aws_autoscaling_policy.
func (aap awsAutoscalingPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("id"))
}

// MetricAggregationType returns a reference to field metric_aggregation_type of aws_autoscaling_policy.
func (aap awsAutoscalingPolicyAttributes) MetricAggregationType() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("metric_aggregation_type"))
}

// MinAdjustmentMagnitude returns a reference to field min_adjustment_magnitude of aws_autoscaling_policy.
func (aap awsAutoscalingPolicyAttributes) MinAdjustmentMagnitude() terra.NumberValue {
	return terra.ReferenceAsNumber(aap.ref.Append("min_adjustment_magnitude"))
}

// Name returns a reference to field name of aws_autoscaling_policy.
func (aap awsAutoscalingPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("name"))
}

// PolicyType returns a reference to field policy_type of aws_autoscaling_policy.
func (aap awsAutoscalingPolicyAttributes) PolicyType() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("policy_type"))
}

// ScalingAdjustment returns a reference to field scaling_adjustment of aws_autoscaling_policy.
func (aap awsAutoscalingPolicyAttributes) ScalingAdjustment() terra.NumberValue {
	return terra.ReferenceAsNumber(aap.ref.Append("scaling_adjustment"))
}

func (aap awsAutoscalingPolicyAttributes) PredictiveScalingConfiguration() terra.ListValue[PredictiveScalingConfigurationAttributes] {
	return terra.ReferenceAsList[PredictiveScalingConfigurationAttributes](aap.ref.Append("predictive_scaling_configuration"))
}

func (aap awsAutoscalingPolicyAttributes) StepAdjustment() terra.SetValue[StepAdjustmentAttributes] {
	return terra.ReferenceAsSet[StepAdjustmentAttributes](aap.ref.Append("step_adjustment"))
}

func (aap awsAutoscalingPolicyAttributes) TargetTrackingConfiguration() terra.ListValue[TargetTrackingConfigurationAttributes] {
	return terra.ReferenceAsList[TargetTrackingConfigurationAttributes](aap.ref.Append("target_tracking_configuration"))
}

type awsAutoscalingPolicyState struct {
	AdjustmentType                 string                                `json:"adjustment_type"`
	Arn                            string                                `json:"arn"`
	AutoscalingGroupName           string                                `json:"autoscaling_group_name"`
	Cooldown                       float64                               `json:"cooldown"`
	Enabled                        bool                                  `json:"enabled"`
	EstimatedInstanceWarmup        float64                               `json:"estimated_instance_warmup"`
	Id                             string                                `json:"id"`
	MetricAggregationType          string                                `json:"metric_aggregation_type"`
	MinAdjustmentMagnitude         float64                               `json:"min_adjustment_magnitude"`
	Name                           string                                `json:"name"`
	PolicyType                     string                                `json:"policy_type"`
	ScalingAdjustment              float64                               `json:"scaling_adjustment"`
	PredictiveScalingConfiguration []PredictiveScalingConfigurationState `json:"predictive_scaling_configuration"`
	StepAdjustment                 []StepAdjustmentState                 `json:"step_adjustment"`
	TargetTrackingConfiguration    []TargetTrackingConfigurationState    `json:"target_tracking_configuration"`
}
