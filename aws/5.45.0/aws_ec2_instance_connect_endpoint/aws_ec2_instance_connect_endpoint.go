// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_instance_connect_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_instance_connect_endpoint.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2InstanceConnectEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeice *Resource) Type() string {
	return "aws_ec2_instance_connect_endpoint"
}

// LocalName returns the local name for [Resource].
func (aeice *Resource) LocalName() string {
	return aeice.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeice *Resource) Configuration() interface{} {
	return aeice.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeice *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeice)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeice *Resource) Dependencies() terra.Dependencies {
	return aeice.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeice *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeice.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeice *Resource) Attributes() awsEc2InstanceConnectEndpointAttributes {
	return awsEc2InstanceConnectEndpointAttributes{ref: terra.ReferenceResource(aeice)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeice *Resource) ImportState(state io.Reader) error {
	aeice.state = &awsEc2InstanceConnectEndpointState{}
	if err := json.NewDecoder(state).Decode(aeice.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeice.Type(), aeice.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeice *Resource) State() (*awsEc2InstanceConnectEndpointState, bool) {
	return aeice.state, aeice.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeice *Resource) StateMust() *awsEc2InstanceConnectEndpointState {
	if aeice.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeice.Type(), aeice.LocalName()))
	}
	return aeice.state
}

// Args contains the configurations for aws_ec2_instance_connect_endpoint.
type Args struct {
	// PreserveClientIp: bool, optional
	PreserveClientIp terra.BoolValue `hcl:"preserve_client_ip,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEc2InstanceConnectEndpointAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ec2_instance_connect_endpoint.
func (aeice awsEc2InstanceConnectEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aeice.ref.Append("arn"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_ec2_instance_connect_endpoint.
func (aeice awsEc2InstanceConnectEndpointAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(aeice.ref.Append("availability_zone"))
}

// DnsName returns a reference to field dns_name of aws_ec2_instance_connect_endpoint.
func (aeice awsEc2InstanceConnectEndpointAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(aeice.ref.Append("dns_name"))
}

// FipsDnsName returns a reference to field fips_dns_name of aws_ec2_instance_connect_endpoint.
func (aeice awsEc2InstanceConnectEndpointAttributes) FipsDnsName() terra.StringValue {
	return terra.ReferenceAsString(aeice.ref.Append("fips_dns_name"))
}

// Id returns a reference to field id of aws_ec2_instance_connect_endpoint.
func (aeice awsEc2InstanceConnectEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeice.ref.Append("id"))
}

// NetworkInterfaceIds returns a reference to field network_interface_ids of aws_ec2_instance_connect_endpoint.
func (aeice awsEc2InstanceConnectEndpointAttributes) NetworkInterfaceIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aeice.ref.Append("network_interface_ids"))
}

// OwnerId returns a reference to field owner_id of aws_ec2_instance_connect_endpoint.
func (aeice awsEc2InstanceConnectEndpointAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(aeice.ref.Append("owner_id"))
}

// PreserveClientIp returns a reference to field preserve_client_ip of aws_ec2_instance_connect_endpoint.
func (aeice awsEc2InstanceConnectEndpointAttributes) PreserveClientIp() terra.BoolValue {
	return terra.ReferenceAsBool(aeice.ref.Append("preserve_client_ip"))
}

// SecurityGroupIds returns a reference to field security_group_ids of aws_ec2_instance_connect_endpoint.
func (aeice awsEc2InstanceConnectEndpointAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aeice.ref.Append("security_group_ids"))
}

// SubnetId returns a reference to field subnet_id of aws_ec2_instance_connect_endpoint.
func (aeice awsEc2InstanceConnectEndpointAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(aeice.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of aws_ec2_instance_connect_endpoint.
func (aeice awsEc2InstanceConnectEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeice.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_instance_connect_endpoint.
func (aeice awsEc2InstanceConnectEndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeice.ref.Append("tags_all"))
}

// VpcId returns a reference to field vpc_id of aws_ec2_instance_connect_endpoint.
func (aeice awsEc2InstanceConnectEndpointAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(aeice.ref.Append("vpc_id"))
}

func (aeice awsEc2InstanceConnectEndpointAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aeice.ref.Append("timeouts"))
}

type awsEc2InstanceConnectEndpointState struct {
	Arn                 string            `json:"arn"`
	AvailabilityZone    string            `json:"availability_zone"`
	DnsName             string            `json:"dns_name"`
	FipsDnsName         string            `json:"fips_dns_name"`
	Id                  string            `json:"id"`
	NetworkInterfaceIds []string          `json:"network_interface_ids"`
	OwnerId             string            `json:"owner_id"`
	PreserveClientIp    bool              `json:"preserve_client_ip"`
	SecurityGroupIds    []string          `json:"security_group_ids"`
	SubnetId            string            `json:"subnet_id"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
	VpcId               string            `json:"vpc_id"`
	Timeouts            *TimeoutsState    `json:"timeouts"`
}
