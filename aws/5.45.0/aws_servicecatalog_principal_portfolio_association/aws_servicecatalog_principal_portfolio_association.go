// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_principal_portfolio_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_servicecatalog_principal_portfolio_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsServicecatalogPrincipalPortfolioAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asppa *Resource) Type() string {
	return "aws_servicecatalog_principal_portfolio_association"
}

// LocalName returns the local name for [Resource].
func (asppa *Resource) LocalName() string {
	return asppa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asppa *Resource) Configuration() interface{} {
	return asppa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asppa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asppa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asppa *Resource) Dependencies() terra.Dependencies {
	return asppa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asppa *Resource) LifecycleManagement() *terra.Lifecycle {
	return asppa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asppa *Resource) Attributes() awsServicecatalogPrincipalPortfolioAssociationAttributes {
	return awsServicecatalogPrincipalPortfolioAssociationAttributes{ref: terra.ReferenceResource(asppa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asppa *Resource) ImportState(state io.Reader) error {
	asppa.state = &awsServicecatalogPrincipalPortfolioAssociationState{}
	if err := json.NewDecoder(state).Decode(asppa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asppa.Type(), asppa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asppa *Resource) State() (*awsServicecatalogPrincipalPortfolioAssociationState, bool) {
	return asppa.state, asppa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asppa *Resource) StateMust() *awsServicecatalogPrincipalPortfolioAssociationState {
	if asppa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asppa.Type(), asppa.LocalName()))
	}
	return asppa.state
}

// Args contains the configurations for aws_servicecatalog_principal_portfolio_association.
type Args struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PortfolioId: string, required
	PortfolioId terra.StringValue `hcl:"portfolio_id,attr" validate:"required"`
	// PrincipalArn: string, required
	PrincipalArn terra.StringValue `hcl:"principal_arn,attr" validate:"required"`
	// PrincipalType: string, optional
	PrincipalType terra.StringValue `hcl:"principal_type,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsServicecatalogPrincipalPortfolioAssociationAttributes struct {
	ref terra.Reference
}

// AcceptLanguage returns a reference to field accept_language of aws_servicecatalog_principal_portfolio_association.
func (asppa awsServicecatalogPrincipalPortfolioAssociationAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceAsString(asppa.ref.Append("accept_language"))
}

// Id returns a reference to field id of aws_servicecatalog_principal_portfolio_association.
func (asppa awsServicecatalogPrincipalPortfolioAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asppa.ref.Append("id"))
}

// PortfolioId returns a reference to field portfolio_id of aws_servicecatalog_principal_portfolio_association.
func (asppa awsServicecatalogPrincipalPortfolioAssociationAttributes) PortfolioId() terra.StringValue {
	return terra.ReferenceAsString(asppa.ref.Append("portfolio_id"))
}

// PrincipalArn returns a reference to field principal_arn of aws_servicecatalog_principal_portfolio_association.
func (asppa awsServicecatalogPrincipalPortfolioAssociationAttributes) PrincipalArn() terra.StringValue {
	return terra.ReferenceAsString(asppa.ref.Append("principal_arn"))
}

// PrincipalType returns a reference to field principal_type of aws_servicecatalog_principal_portfolio_association.
func (asppa awsServicecatalogPrincipalPortfolioAssociationAttributes) PrincipalType() terra.StringValue {
	return terra.ReferenceAsString(asppa.ref.Append("principal_type"))
}

func (asppa awsServicecatalogPrincipalPortfolioAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asppa.ref.Append("timeouts"))
}

type awsServicecatalogPrincipalPortfolioAssociationState struct {
	AcceptLanguage string         `json:"accept_language"`
	Id             string         `json:"id"`
	PortfolioId    string         `json:"portfolio_id"`
	PrincipalArn   string         `json:"principal_arn"`
	PrincipalType  string         `json:"principal_type"`
	Timeouts       *TimeoutsState `json:"timeouts"`
}
