// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_resourcegroupstaggingapi_resources

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTagFilter struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values: set of string, optional
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataResourceTagMappingListAttributes struct {
	ref terra.Reference
}

func (rtml DataResourceTagMappingListAttributes) InternalRef() (terra.Reference, error) {
	return rtml.ref, nil
}

func (rtml DataResourceTagMappingListAttributes) InternalWithRef(ref terra.Reference) DataResourceTagMappingListAttributes {
	return DataResourceTagMappingListAttributes{ref: ref}
}

func (rtml DataResourceTagMappingListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rtml.ref.InternalTokens()
}

func (rtml DataResourceTagMappingListAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(rtml.ref.Append("resource_arn"))
}

func (rtml DataResourceTagMappingListAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rtml.ref.Append("tags"))
}

func (rtml DataResourceTagMappingListAttributes) ComplianceDetails() terra.ListValue[DataResourceTagMappingListComplianceDetailsAttributes] {
	return terra.ReferenceAsList[DataResourceTagMappingListComplianceDetailsAttributes](rtml.ref.Append("compliance_details"))
}

type DataResourceTagMappingListComplianceDetailsAttributes struct {
	ref terra.Reference
}

func (cd DataResourceTagMappingListComplianceDetailsAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd DataResourceTagMappingListComplianceDetailsAttributes) InternalWithRef(ref terra.Reference) DataResourceTagMappingListComplianceDetailsAttributes {
	return DataResourceTagMappingListComplianceDetailsAttributes{ref: ref}
}

func (cd DataResourceTagMappingListComplianceDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd DataResourceTagMappingListComplianceDetailsAttributes) ComplianceStatus() terra.BoolValue {
	return terra.ReferenceAsBool(cd.ref.Append("compliance_status"))
}

func (cd DataResourceTagMappingListComplianceDetailsAttributes) KeysWithNoncompliantValues() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cd.ref.Append("keys_with_noncompliant_values"))
}

func (cd DataResourceTagMappingListComplianceDetailsAttributes) NonCompliantKeys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cd.ref.Append("non_compliant_keys"))
}

type DataTagFilterAttributes struct {
	ref terra.Reference
}

func (tf DataTagFilterAttributes) InternalRef() (terra.Reference, error) {
	return tf.ref, nil
}

func (tf DataTagFilterAttributes) InternalWithRef(ref terra.Reference) DataTagFilterAttributes {
	return DataTagFilterAttributes{ref: ref}
}

func (tf DataTagFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tf.ref.InternalTokens()
}

func (tf DataTagFilterAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(tf.ref.Append("key"))
}

func (tf DataTagFilterAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tf.ref.Append("values"))
}

type DataResourceTagMappingListState struct {
	ResourceArn       string                                             `json:"resource_arn"`
	Tags              map[string]string                                  `json:"tags"`
	ComplianceDetails []DataResourceTagMappingListComplianceDetailsState `json:"compliance_details"`
}

type DataResourceTagMappingListComplianceDetailsState struct {
	ComplianceStatus           bool     `json:"compliance_status"`
	KeysWithNoncompliantValues []string `json:"keys_with_noncompliant_values"`
	NonCompliantKeys           []string `json:"non_compliant_keys"`
}

type DataTagFilterState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}
