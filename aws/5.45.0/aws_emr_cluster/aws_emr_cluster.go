// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_emr_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_emr_cluster.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEmrClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aec *Resource) Type() string {
	return "aws_emr_cluster"
}

// LocalName returns the local name for [Resource].
func (aec *Resource) LocalName() string {
	return aec.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aec *Resource) Configuration() interface{} {
	return aec.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aec *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aec)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aec *Resource) Dependencies() terra.Dependencies {
	return aec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aec *Resource) LifecycleManagement() *terra.Lifecycle {
	return aec.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aec *Resource) Attributes() awsEmrClusterAttributes {
	return awsEmrClusterAttributes{ref: terra.ReferenceResource(aec)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aec *Resource) ImportState(state io.Reader) error {
	aec.state = &awsEmrClusterState{}
	if err := json.NewDecoder(state).Decode(aec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aec.Type(), aec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aec *Resource) State() (*awsEmrClusterState, bool) {
	return aec.state, aec.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aec *Resource) StateMust() *awsEmrClusterState {
	if aec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aec.Type(), aec.LocalName()))
	}
	return aec.state
}

// Args contains the configurations for aws_emr_cluster.
type Args struct {
	// AdditionalInfo: string, optional
	AdditionalInfo terra.StringValue `hcl:"additional_info,attr"`
	// Applications: set of string, optional
	Applications terra.SetValue[terra.StringValue] `hcl:"applications,attr"`
	// AutoscalingRole: string, optional
	AutoscalingRole terra.StringValue `hcl:"autoscaling_role,attr"`
	// Configurations: string, optional
	Configurations terra.StringValue `hcl:"configurations,attr"`
	// ConfigurationsJson: string, optional
	ConfigurationsJson terra.StringValue `hcl:"configurations_json,attr"`
	// CustomAmiId: string, optional
	CustomAmiId terra.StringValue `hcl:"custom_ami_id,attr"`
	// EbsRootVolumeSize: number, optional
	EbsRootVolumeSize terra.NumberValue `hcl:"ebs_root_volume_size,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeepJobFlowAliveWhenNoSteps: bool, optional
	KeepJobFlowAliveWhenNoSteps terra.BoolValue `hcl:"keep_job_flow_alive_when_no_steps,attr"`
	// ListStepsStates: set of string, optional
	ListStepsStates terra.SetValue[terra.StringValue] `hcl:"list_steps_states,attr"`
	// LogEncryptionKmsKeyId: string, optional
	LogEncryptionKmsKeyId terra.StringValue `hcl:"log_encryption_kms_key_id,attr"`
	// LogUri: string, optional
	LogUri terra.StringValue `hcl:"log_uri,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReleaseLabel: string, required
	ReleaseLabel terra.StringValue `hcl:"release_label,attr" validate:"required"`
	// ScaleDownBehavior: string, optional
	ScaleDownBehavior terra.StringValue `hcl:"scale_down_behavior,attr"`
	// SecurityConfiguration: string, optional
	SecurityConfiguration terra.StringValue `hcl:"security_configuration,attr"`
	// ServiceRole: string, required
	ServiceRole terra.StringValue `hcl:"service_role,attr" validate:"required"`
	// StepConcurrencyLevel: number, optional
	StepConcurrencyLevel terra.NumberValue `hcl:"step_concurrency_level,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TerminationProtection: bool, optional
	TerminationProtection terra.BoolValue `hcl:"termination_protection,attr"`
	// UnhealthyNodeReplacement: bool, optional
	UnhealthyNodeReplacement terra.BoolValue `hcl:"unhealthy_node_replacement,attr"`
	// VisibleToAllUsers: bool, optional
	VisibleToAllUsers terra.BoolValue `hcl:"visible_to_all_users,attr"`
	// PlacementGroupConfig: min=0
	PlacementGroupConfig []PlacementGroupConfig `hcl:"placement_group_config,block" validate:"min=0"`
	// Step: min=0
	Step []Step `hcl:"step,block" validate:"min=0"`
	// AutoTerminationPolicy: optional
	AutoTerminationPolicy *AutoTerminationPolicy `hcl:"auto_termination_policy,block"`
	// BootstrapAction: min=0
	BootstrapAction []BootstrapAction `hcl:"bootstrap_action,block" validate:"min=0"`
	// CoreInstanceFleet: optional
	CoreInstanceFleet *CoreInstanceFleet `hcl:"core_instance_fleet,block"`
	// CoreInstanceGroup: optional
	CoreInstanceGroup *CoreInstanceGroup `hcl:"core_instance_group,block"`
	// Ec2Attributes: optional
	Ec2Attributes *Ec2Attributes `hcl:"ec2_attributes,block"`
	// KerberosAttributes: optional
	KerberosAttributes *KerberosAttributes `hcl:"kerberos_attributes,block"`
	// MasterInstanceFleet: optional
	MasterInstanceFleet *MasterInstanceFleet `hcl:"master_instance_fleet,block"`
	// MasterInstanceGroup: optional
	MasterInstanceGroup *MasterInstanceGroup `hcl:"master_instance_group,block"`
}

type awsEmrClusterAttributes struct {
	ref terra.Reference
}

// AdditionalInfo returns a reference to field additional_info of aws_emr_cluster.
func (aec awsEmrClusterAttributes) AdditionalInfo() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("additional_info"))
}

// Applications returns a reference to field applications of aws_emr_cluster.
func (aec awsEmrClusterAttributes) Applications() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aec.ref.Append("applications"))
}

// Arn returns a reference to field arn of aws_emr_cluster.
func (aec awsEmrClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("arn"))
}

// AutoscalingRole returns a reference to field autoscaling_role of aws_emr_cluster.
func (aec awsEmrClusterAttributes) AutoscalingRole() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("autoscaling_role"))
}

// ClusterState returns a reference to field cluster_state of aws_emr_cluster.
func (aec awsEmrClusterAttributes) ClusterState() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("cluster_state"))
}

// Configurations returns a reference to field configurations of aws_emr_cluster.
func (aec awsEmrClusterAttributes) Configurations() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("configurations"))
}

// ConfigurationsJson returns a reference to field configurations_json of aws_emr_cluster.
func (aec awsEmrClusterAttributes) ConfigurationsJson() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("configurations_json"))
}

// CustomAmiId returns a reference to field custom_ami_id of aws_emr_cluster.
func (aec awsEmrClusterAttributes) CustomAmiId() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("custom_ami_id"))
}

// EbsRootVolumeSize returns a reference to field ebs_root_volume_size of aws_emr_cluster.
func (aec awsEmrClusterAttributes) EbsRootVolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aec.ref.Append("ebs_root_volume_size"))
}

// Id returns a reference to field id of aws_emr_cluster.
func (aec awsEmrClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("id"))
}

// KeepJobFlowAliveWhenNoSteps returns a reference to field keep_job_flow_alive_when_no_steps of aws_emr_cluster.
func (aec awsEmrClusterAttributes) KeepJobFlowAliveWhenNoSteps() terra.BoolValue {
	return terra.ReferenceAsBool(aec.ref.Append("keep_job_flow_alive_when_no_steps"))
}

// ListStepsStates returns a reference to field list_steps_states of aws_emr_cluster.
func (aec awsEmrClusterAttributes) ListStepsStates() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aec.ref.Append("list_steps_states"))
}

// LogEncryptionKmsKeyId returns a reference to field log_encryption_kms_key_id of aws_emr_cluster.
func (aec awsEmrClusterAttributes) LogEncryptionKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("log_encryption_kms_key_id"))
}

// LogUri returns a reference to field log_uri of aws_emr_cluster.
func (aec awsEmrClusterAttributes) LogUri() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("log_uri"))
}

// MasterPublicDns returns a reference to field master_public_dns of aws_emr_cluster.
func (aec awsEmrClusterAttributes) MasterPublicDns() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("master_public_dns"))
}

// Name returns a reference to field name of aws_emr_cluster.
func (aec awsEmrClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("name"))
}

// ReleaseLabel returns a reference to field release_label of aws_emr_cluster.
func (aec awsEmrClusterAttributes) ReleaseLabel() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("release_label"))
}

// ScaleDownBehavior returns a reference to field scale_down_behavior of aws_emr_cluster.
func (aec awsEmrClusterAttributes) ScaleDownBehavior() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("scale_down_behavior"))
}

// SecurityConfiguration returns a reference to field security_configuration of aws_emr_cluster.
func (aec awsEmrClusterAttributes) SecurityConfiguration() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("security_configuration"))
}

// ServiceRole returns a reference to field service_role of aws_emr_cluster.
func (aec awsEmrClusterAttributes) ServiceRole() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("service_role"))
}

// StepConcurrencyLevel returns a reference to field step_concurrency_level of aws_emr_cluster.
func (aec awsEmrClusterAttributes) StepConcurrencyLevel() terra.NumberValue {
	return terra.ReferenceAsNumber(aec.ref.Append("step_concurrency_level"))
}

// Tags returns a reference to field tags of aws_emr_cluster.
func (aec awsEmrClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aec.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_emr_cluster.
func (aec awsEmrClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aec.ref.Append("tags_all"))
}

// TerminationProtection returns a reference to field termination_protection of aws_emr_cluster.
func (aec awsEmrClusterAttributes) TerminationProtection() terra.BoolValue {
	return terra.ReferenceAsBool(aec.ref.Append("termination_protection"))
}

// UnhealthyNodeReplacement returns a reference to field unhealthy_node_replacement of aws_emr_cluster.
func (aec awsEmrClusterAttributes) UnhealthyNodeReplacement() terra.BoolValue {
	return terra.ReferenceAsBool(aec.ref.Append("unhealthy_node_replacement"))
}

// VisibleToAllUsers returns a reference to field visible_to_all_users of aws_emr_cluster.
func (aec awsEmrClusterAttributes) VisibleToAllUsers() terra.BoolValue {
	return terra.ReferenceAsBool(aec.ref.Append("visible_to_all_users"))
}

func (aec awsEmrClusterAttributes) PlacementGroupConfig() terra.ListValue[PlacementGroupConfigAttributes] {
	return terra.ReferenceAsList[PlacementGroupConfigAttributes](aec.ref.Append("placement_group_config"))
}

func (aec awsEmrClusterAttributes) Step() terra.ListValue[StepAttributes] {
	return terra.ReferenceAsList[StepAttributes](aec.ref.Append("step"))
}

func (aec awsEmrClusterAttributes) AutoTerminationPolicy() terra.ListValue[AutoTerminationPolicyAttributes] {
	return terra.ReferenceAsList[AutoTerminationPolicyAttributes](aec.ref.Append("auto_termination_policy"))
}

func (aec awsEmrClusterAttributes) BootstrapAction() terra.ListValue[BootstrapActionAttributes] {
	return terra.ReferenceAsList[BootstrapActionAttributes](aec.ref.Append("bootstrap_action"))
}

func (aec awsEmrClusterAttributes) CoreInstanceFleet() terra.ListValue[CoreInstanceFleetAttributes] {
	return terra.ReferenceAsList[CoreInstanceFleetAttributes](aec.ref.Append("core_instance_fleet"))
}

func (aec awsEmrClusterAttributes) CoreInstanceGroup() terra.ListValue[CoreInstanceGroupAttributes] {
	return terra.ReferenceAsList[CoreInstanceGroupAttributes](aec.ref.Append("core_instance_group"))
}

func (aec awsEmrClusterAttributes) Ec2Attributes() terra.ListValue[Ec2AttributesAttributes] {
	return terra.ReferenceAsList[Ec2AttributesAttributes](aec.ref.Append("ec2_attributes"))
}

func (aec awsEmrClusterAttributes) KerberosAttributes() terra.ListValue[KerberosAttributesAttributes] {
	return terra.ReferenceAsList[KerberosAttributesAttributes](aec.ref.Append("kerberos_attributes"))
}

func (aec awsEmrClusterAttributes) MasterInstanceFleet() terra.ListValue[MasterInstanceFleetAttributes] {
	return terra.ReferenceAsList[MasterInstanceFleetAttributes](aec.ref.Append("master_instance_fleet"))
}

func (aec awsEmrClusterAttributes) MasterInstanceGroup() terra.ListValue[MasterInstanceGroupAttributes] {
	return terra.ReferenceAsList[MasterInstanceGroupAttributes](aec.ref.Append("master_instance_group"))
}

type awsEmrClusterState struct {
	AdditionalInfo              string                       `json:"additional_info"`
	Applications                []string                     `json:"applications"`
	Arn                         string                       `json:"arn"`
	AutoscalingRole             string                       `json:"autoscaling_role"`
	ClusterState                string                       `json:"cluster_state"`
	Configurations              string                       `json:"configurations"`
	ConfigurationsJson          string                       `json:"configurations_json"`
	CustomAmiId                 string                       `json:"custom_ami_id"`
	EbsRootVolumeSize           float64                      `json:"ebs_root_volume_size"`
	Id                          string                       `json:"id"`
	KeepJobFlowAliveWhenNoSteps bool                         `json:"keep_job_flow_alive_when_no_steps"`
	ListStepsStates             []string                     `json:"list_steps_states"`
	LogEncryptionKmsKeyId       string                       `json:"log_encryption_kms_key_id"`
	LogUri                      string                       `json:"log_uri"`
	MasterPublicDns             string                       `json:"master_public_dns"`
	Name                        string                       `json:"name"`
	ReleaseLabel                string                       `json:"release_label"`
	ScaleDownBehavior           string                       `json:"scale_down_behavior"`
	SecurityConfiguration       string                       `json:"security_configuration"`
	ServiceRole                 string                       `json:"service_role"`
	StepConcurrencyLevel        float64                      `json:"step_concurrency_level"`
	Tags                        map[string]string            `json:"tags"`
	TagsAll                     map[string]string            `json:"tags_all"`
	TerminationProtection       bool                         `json:"termination_protection"`
	UnhealthyNodeReplacement    bool                         `json:"unhealthy_node_replacement"`
	VisibleToAllUsers           bool                         `json:"visible_to_all_users"`
	PlacementGroupConfig        []PlacementGroupConfigState  `json:"placement_group_config"`
	Step                        []StepState                  `json:"step"`
	AutoTerminationPolicy       []AutoTerminationPolicyState `json:"auto_termination_policy"`
	BootstrapAction             []BootstrapActionState       `json:"bootstrap_action"`
	CoreInstanceFleet           []CoreInstanceFleetState     `json:"core_instance_fleet"`
	CoreInstanceGroup           []CoreInstanceGroupState     `json:"core_instance_group"`
	Ec2Attributes               []Ec2AttributesState         `json:"ec2_attributes"`
	KerberosAttributes          []KerberosAttributesState    `json:"kerberos_attributes"`
	MasterInstanceFleet         []MasterInstanceFleetState   `json:"master_instance_fleet"`
	MasterInstanceGroup         []MasterInstanceGroupState   `json:"master_instance_group"`
}
