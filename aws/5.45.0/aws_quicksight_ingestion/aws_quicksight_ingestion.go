// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_ingestion

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_quicksight_ingestion.
type Resource struct {
	Name      string
	Args      Args
	state     *awsQuicksightIngestionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aqi *Resource) Type() string {
	return "aws_quicksight_ingestion"
}

// LocalName returns the local name for [Resource].
func (aqi *Resource) LocalName() string {
	return aqi.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aqi *Resource) Configuration() interface{} {
	return aqi.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aqi *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aqi)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aqi *Resource) Dependencies() terra.Dependencies {
	return aqi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aqi *Resource) LifecycleManagement() *terra.Lifecycle {
	return aqi.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aqi *Resource) Attributes() awsQuicksightIngestionAttributes {
	return awsQuicksightIngestionAttributes{ref: terra.ReferenceResource(aqi)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aqi *Resource) ImportState(state io.Reader) error {
	aqi.state = &awsQuicksightIngestionState{}
	if err := json.NewDecoder(state).Decode(aqi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aqi.Type(), aqi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aqi *Resource) State() (*awsQuicksightIngestionState, bool) {
	return aqi.state, aqi.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aqi *Resource) StateMust() *awsQuicksightIngestionState {
	if aqi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aqi.Type(), aqi.LocalName()))
	}
	return aqi.state
}

// Args contains the configurations for aws_quicksight_ingestion.
type Args struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// DataSetId: string, required
	DataSetId terra.StringValue `hcl:"data_set_id,attr" validate:"required"`
	// IngestionId: string, required
	IngestionId terra.StringValue `hcl:"ingestion_id,attr" validate:"required"`
	// IngestionType: string, required
	IngestionType terra.StringValue `hcl:"ingestion_type,attr" validate:"required"`
}

type awsQuicksightIngestionAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_quicksight_ingestion.
func (aqi awsQuicksightIngestionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aqi.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_ingestion.
func (aqi awsQuicksightIngestionAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(aqi.ref.Append("aws_account_id"))
}

// DataSetId returns a reference to field data_set_id of aws_quicksight_ingestion.
func (aqi awsQuicksightIngestionAttributes) DataSetId() terra.StringValue {
	return terra.ReferenceAsString(aqi.ref.Append("data_set_id"))
}

// Id returns a reference to field id of aws_quicksight_ingestion.
func (aqi awsQuicksightIngestionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aqi.ref.Append("id"))
}

// IngestionId returns a reference to field ingestion_id of aws_quicksight_ingestion.
func (aqi awsQuicksightIngestionAttributes) IngestionId() terra.StringValue {
	return terra.ReferenceAsString(aqi.ref.Append("ingestion_id"))
}

// IngestionStatus returns a reference to field ingestion_status of aws_quicksight_ingestion.
func (aqi awsQuicksightIngestionAttributes) IngestionStatus() terra.StringValue {
	return terra.ReferenceAsString(aqi.ref.Append("ingestion_status"))
}

// IngestionType returns a reference to field ingestion_type of aws_quicksight_ingestion.
func (aqi awsQuicksightIngestionAttributes) IngestionType() terra.StringValue {
	return terra.ReferenceAsString(aqi.ref.Append("ingestion_type"))
}

type awsQuicksightIngestionState struct {
	Arn             string `json:"arn"`
	AwsAccountId    string `json:"aws_account_id"`
	DataSetId       string `json:"data_set_id"`
	Id              string `json:"id"`
	IngestionId     string `json:"ingestion_id"`
	IngestionStatus string `json:"ingestion_status"`
	IngestionType   string `json:"ingestion_type"`
}
