// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_scheduler_schedule_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_scheduler_schedule_group.
type Resource struct {
	Name      string
	Args      Args
	state     *awsSchedulerScheduleGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (assg *Resource) Type() string {
	return "aws_scheduler_schedule_group"
}

// LocalName returns the local name for [Resource].
func (assg *Resource) LocalName() string {
	return assg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (assg *Resource) Configuration() interface{} {
	return assg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (assg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(assg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (assg *Resource) Dependencies() terra.Dependencies {
	return assg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (assg *Resource) LifecycleManagement() *terra.Lifecycle {
	return assg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (assg *Resource) Attributes() awsSchedulerScheduleGroupAttributes {
	return awsSchedulerScheduleGroupAttributes{ref: terra.ReferenceResource(assg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (assg *Resource) ImportState(state io.Reader) error {
	assg.state = &awsSchedulerScheduleGroupState{}
	if err := json.NewDecoder(state).Decode(assg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", assg.Type(), assg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (assg *Resource) State() (*awsSchedulerScheduleGroupState, bool) {
	return assg.state, assg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (assg *Resource) StateMust() *awsSchedulerScheduleGroupState {
	if assg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", assg.Type(), assg.LocalName()))
	}
	return assg.state
}

// Args contains the configurations for aws_scheduler_schedule_group.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsSchedulerScheduleGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_scheduler_schedule_group.
func (assg awsSchedulerScheduleGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(assg.ref.Append("arn"))
}

// CreationDate returns a reference to field creation_date of aws_scheduler_schedule_group.
func (assg awsSchedulerScheduleGroupAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceAsString(assg.ref.Append("creation_date"))
}

// Id returns a reference to field id of aws_scheduler_schedule_group.
func (assg awsSchedulerScheduleGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(assg.ref.Append("id"))
}

// LastModificationDate returns a reference to field last_modification_date of aws_scheduler_schedule_group.
func (assg awsSchedulerScheduleGroupAttributes) LastModificationDate() terra.StringValue {
	return terra.ReferenceAsString(assg.ref.Append("last_modification_date"))
}

// Name returns a reference to field name of aws_scheduler_schedule_group.
func (assg awsSchedulerScheduleGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(assg.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_scheduler_schedule_group.
func (assg awsSchedulerScheduleGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(assg.ref.Append("name_prefix"))
}

// State returns a reference to field state of aws_scheduler_schedule_group.
func (assg awsSchedulerScheduleGroupAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(assg.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_scheduler_schedule_group.
func (assg awsSchedulerScheduleGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](assg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_scheduler_schedule_group.
func (assg awsSchedulerScheduleGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](assg.ref.Append("tags_all"))
}

func (assg awsSchedulerScheduleGroupAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](assg.ref.Append("timeouts"))
}

type awsSchedulerScheduleGroupState struct {
	Arn                  string            `json:"arn"`
	CreationDate         string            `json:"creation_date"`
	Id                   string            `json:"id"`
	LastModificationDate string            `json:"last_modification_date"`
	Name                 string            `json:"name"`
	NamePrefix           string            `json:"name_prefix"`
	State                string            `json:"state"`
	Tags                 map[string]string `json:"tags"`
	TagsAll              map[string]string `json:"tags_all"`
	Timeouts             *TimeoutsState    `json:"timeouts"`
}
