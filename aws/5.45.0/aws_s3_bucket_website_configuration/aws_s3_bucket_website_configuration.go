// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_website_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_s3_bucket_website_configuration.
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3BucketWebsiteConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asbwc *Resource) Type() string {
	return "aws_s3_bucket_website_configuration"
}

// LocalName returns the local name for [Resource].
func (asbwc *Resource) LocalName() string {
	return asbwc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asbwc *Resource) Configuration() interface{} {
	return asbwc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asbwc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asbwc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asbwc *Resource) Dependencies() terra.Dependencies {
	return asbwc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asbwc *Resource) LifecycleManagement() *terra.Lifecycle {
	return asbwc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asbwc *Resource) Attributes() awsS3BucketWebsiteConfigurationAttributes {
	return awsS3BucketWebsiteConfigurationAttributes{ref: terra.ReferenceResource(asbwc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asbwc *Resource) ImportState(state io.Reader) error {
	asbwc.state = &awsS3BucketWebsiteConfigurationState{}
	if err := json.NewDecoder(state).Decode(asbwc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asbwc.Type(), asbwc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asbwc *Resource) State() (*awsS3BucketWebsiteConfigurationState, bool) {
	return asbwc.state, asbwc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asbwc *Resource) StateMust() *awsS3BucketWebsiteConfigurationState {
	if asbwc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asbwc.Type(), asbwc.LocalName()))
	}
	return asbwc.state
}

// Args contains the configurations for aws_s3_bucket_website_configuration.
type Args struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoutingRules: string, optional
	RoutingRules terra.StringValue `hcl:"routing_rules,attr"`
	// ErrorDocument: optional
	ErrorDocument *ErrorDocument `hcl:"error_document,block"`
	// IndexDocument: optional
	IndexDocument *IndexDocument `hcl:"index_document,block"`
	// RedirectAllRequestsTo: optional
	RedirectAllRequestsTo *RedirectAllRequestsTo `hcl:"redirect_all_requests_to,block"`
	// RoutingRule: min=0
	RoutingRule []RoutingRule `hcl:"routing_rule,block" validate:"min=0"`
}

type awsS3BucketWebsiteConfigurationAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of aws_s3_bucket_website_configuration.
func (asbwc awsS3BucketWebsiteConfigurationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(asbwc.ref.Append("bucket"))
}

// ExpectedBucketOwner returns a reference to field expected_bucket_owner of aws_s3_bucket_website_configuration.
func (asbwc awsS3BucketWebsiteConfigurationAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceAsString(asbwc.ref.Append("expected_bucket_owner"))
}

// Id returns a reference to field id of aws_s3_bucket_website_configuration.
func (asbwc awsS3BucketWebsiteConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asbwc.ref.Append("id"))
}

// RoutingRules returns a reference to field routing_rules of aws_s3_bucket_website_configuration.
func (asbwc awsS3BucketWebsiteConfigurationAttributes) RoutingRules() terra.StringValue {
	return terra.ReferenceAsString(asbwc.ref.Append("routing_rules"))
}

// WebsiteDomain returns a reference to field website_domain of aws_s3_bucket_website_configuration.
func (asbwc awsS3BucketWebsiteConfigurationAttributes) WebsiteDomain() terra.StringValue {
	return terra.ReferenceAsString(asbwc.ref.Append("website_domain"))
}

// WebsiteEndpoint returns a reference to field website_endpoint of aws_s3_bucket_website_configuration.
func (asbwc awsS3BucketWebsiteConfigurationAttributes) WebsiteEndpoint() terra.StringValue {
	return terra.ReferenceAsString(asbwc.ref.Append("website_endpoint"))
}

func (asbwc awsS3BucketWebsiteConfigurationAttributes) ErrorDocument() terra.ListValue[ErrorDocumentAttributes] {
	return terra.ReferenceAsList[ErrorDocumentAttributes](asbwc.ref.Append("error_document"))
}

func (asbwc awsS3BucketWebsiteConfigurationAttributes) IndexDocument() terra.ListValue[IndexDocumentAttributes] {
	return terra.ReferenceAsList[IndexDocumentAttributes](asbwc.ref.Append("index_document"))
}

func (asbwc awsS3BucketWebsiteConfigurationAttributes) RedirectAllRequestsTo() terra.ListValue[RedirectAllRequestsToAttributes] {
	return terra.ReferenceAsList[RedirectAllRequestsToAttributes](asbwc.ref.Append("redirect_all_requests_to"))
}

func (asbwc awsS3BucketWebsiteConfigurationAttributes) RoutingRule() terra.ListValue[RoutingRuleAttributes] {
	return terra.ReferenceAsList[RoutingRuleAttributes](asbwc.ref.Append("routing_rule"))
}

type awsS3BucketWebsiteConfigurationState struct {
	Bucket                string                       `json:"bucket"`
	ExpectedBucketOwner   string                       `json:"expected_bucket_owner"`
	Id                    string                       `json:"id"`
	RoutingRules          string                       `json:"routing_rules"`
	WebsiteDomain         string                       `json:"website_domain"`
	WebsiteEndpoint       string                       `json:"website_endpoint"`
	ErrorDocument         []ErrorDocumentState         `json:"error_document"`
	IndexDocument         []IndexDocumentState         `json:"index_document"`
	RedirectAllRequestsTo []RedirectAllRequestsToState `json:"redirect_all_requests_to"`
	RoutingRule           []RoutingRuleState           `json:"routing_rule"`
}
