// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_autoscaling_notification

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_autoscaling_notification.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAutoscalingNotificationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aan *Resource) Type() string {
	return "aws_autoscaling_notification"
}

// LocalName returns the local name for [Resource].
func (aan *Resource) LocalName() string {
	return aan.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aan *Resource) Configuration() interface{} {
	return aan.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aan *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aan)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aan *Resource) Dependencies() terra.Dependencies {
	return aan.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aan *Resource) LifecycleManagement() *terra.Lifecycle {
	return aan.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aan *Resource) Attributes() awsAutoscalingNotificationAttributes {
	return awsAutoscalingNotificationAttributes{ref: terra.ReferenceResource(aan)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aan *Resource) ImportState(state io.Reader) error {
	aan.state = &awsAutoscalingNotificationState{}
	if err := json.NewDecoder(state).Decode(aan.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aan.Type(), aan.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aan *Resource) State() (*awsAutoscalingNotificationState, bool) {
	return aan.state, aan.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aan *Resource) StateMust() *awsAutoscalingNotificationState {
	if aan.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aan.Type(), aan.LocalName()))
	}
	return aan.state
}

// Args contains the configurations for aws_autoscaling_notification.
type Args struct {
	// GroupNames: set of string, required
	GroupNames terra.SetValue[terra.StringValue] `hcl:"group_names,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Notifications: set of string, required
	Notifications terra.SetValue[terra.StringValue] `hcl:"notifications,attr" validate:"required"`
	// TopicArn: string, required
	TopicArn terra.StringValue `hcl:"topic_arn,attr" validate:"required"`
}

type awsAutoscalingNotificationAttributes struct {
	ref terra.Reference
}

// GroupNames returns a reference to field group_names of aws_autoscaling_notification.
func (aan awsAutoscalingNotificationAttributes) GroupNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aan.ref.Append("group_names"))
}

// Id returns a reference to field id of aws_autoscaling_notification.
func (aan awsAutoscalingNotificationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aan.ref.Append("id"))
}

// Notifications returns a reference to field notifications of aws_autoscaling_notification.
func (aan awsAutoscalingNotificationAttributes) Notifications() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aan.ref.Append("notifications"))
}

// TopicArn returns a reference to field topic_arn of aws_autoscaling_notification.
func (aan awsAutoscalingNotificationAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceAsString(aan.ref.Append("topic_arn"))
}

type awsAutoscalingNotificationState struct {
	GroupNames    []string `json:"group_names"`
	Id            string   `json:"id"`
	Notifications []string `json:"notifications"`
	TopicArn      string   `json:"topic_arn"`
}
