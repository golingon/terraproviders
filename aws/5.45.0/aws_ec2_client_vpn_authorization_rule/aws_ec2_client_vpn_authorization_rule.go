// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_client_vpn_authorization_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_ec2_client_vpn_authorization_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2ClientVpnAuthorizationRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aecvar *Resource) Type() string {
	return "aws_ec2_client_vpn_authorization_rule"
}

// LocalName returns the local name for [Resource].
func (aecvar *Resource) LocalName() string {
	return aecvar.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aecvar *Resource) Configuration() interface{} {
	return aecvar.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aecvar *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aecvar)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aecvar *Resource) Dependencies() terra.Dependencies {
	return aecvar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aecvar *Resource) LifecycleManagement() *terra.Lifecycle {
	return aecvar.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aecvar *Resource) Attributes() awsEc2ClientVpnAuthorizationRuleAttributes {
	return awsEc2ClientVpnAuthorizationRuleAttributes{ref: terra.ReferenceResource(aecvar)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aecvar *Resource) ImportState(state io.Reader) error {
	aecvar.state = &awsEc2ClientVpnAuthorizationRuleState{}
	if err := json.NewDecoder(state).Decode(aecvar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aecvar.Type(), aecvar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aecvar *Resource) State() (*awsEc2ClientVpnAuthorizationRuleState, bool) {
	return aecvar.state, aecvar.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aecvar *Resource) StateMust() *awsEc2ClientVpnAuthorizationRuleState {
	if aecvar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aecvar.Type(), aecvar.LocalName()))
	}
	return aecvar.state
}

// Args contains the configurations for aws_ec2_client_vpn_authorization_rule.
type Args struct {
	// AccessGroupId: string, optional
	AccessGroupId terra.StringValue `hcl:"access_group_id,attr"`
	// AuthorizeAllGroups: bool, optional
	AuthorizeAllGroups terra.BoolValue `hcl:"authorize_all_groups,attr"`
	// ClientVpnEndpointId: string, required
	ClientVpnEndpointId terra.StringValue `hcl:"client_vpn_endpoint_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TargetNetworkCidr: string, required
	TargetNetworkCidr terra.StringValue `hcl:"target_network_cidr,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEc2ClientVpnAuthorizationRuleAttributes struct {
	ref terra.Reference
}

// AccessGroupId returns a reference to field access_group_id of aws_ec2_client_vpn_authorization_rule.
func (aecvar awsEc2ClientVpnAuthorizationRuleAttributes) AccessGroupId() terra.StringValue {
	return terra.ReferenceAsString(aecvar.ref.Append("access_group_id"))
}

// AuthorizeAllGroups returns a reference to field authorize_all_groups of aws_ec2_client_vpn_authorization_rule.
func (aecvar awsEc2ClientVpnAuthorizationRuleAttributes) AuthorizeAllGroups() terra.BoolValue {
	return terra.ReferenceAsBool(aecvar.ref.Append("authorize_all_groups"))
}

// ClientVpnEndpointId returns a reference to field client_vpn_endpoint_id of aws_ec2_client_vpn_authorization_rule.
func (aecvar awsEc2ClientVpnAuthorizationRuleAttributes) ClientVpnEndpointId() terra.StringValue {
	return terra.ReferenceAsString(aecvar.ref.Append("client_vpn_endpoint_id"))
}

// Description returns a reference to field description of aws_ec2_client_vpn_authorization_rule.
func (aecvar awsEc2ClientVpnAuthorizationRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aecvar.ref.Append("description"))
}

// Id returns a reference to field id of aws_ec2_client_vpn_authorization_rule.
func (aecvar awsEc2ClientVpnAuthorizationRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aecvar.ref.Append("id"))
}

// TargetNetworkCidr returns a reference to field target_network_cidr of aws_ec2_client_vpn_authorization_rule.
func (aecvar awsEc2ClientVpnAuthorizationRuleAttributes) TargetNetworkCidr() terra.StringValue {
	return terra.ReferenceAsString(aecvar.ref.Append("target_network_cidr"))
}

func (aecvar awsEc2ClientVpnAuthorizationRuleAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aecvar.ref.Append("timeouts"))
}

type awsEc2ClientVpnAuthorizationRuleState struct {
	AccessGroupId       string         `json:"access_group_id"`
	AuthorizeAllGroups  bool           `json:"authorize_all_groups"`
	ClientVpnEndpointId string         `json:"client_vpn_endpoint_id"`
	Description         string         `json:"description"`
	Id                  string         `json:"id"`
	TargetNetworkCidr   string         `json:"target_network_cidr"`
	Timeouts            *TimeoutsState `json:"timeouts"`
}
