// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_dashboard

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_cloudwatch_dashboard.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudwatchDashboardState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acd *Resource) Type() string {
	return "aws_cloudwatch_dashboard"
}

// LocalName returns the local name for [Resource].
func (acd *Resource) LocalName() string {
	return acd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acd *Resource) Configuration() interface{} {
	return acd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acd *Resource) Dependencies() terra.Dependencies {
	return acd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acd *Resource) LifecycleManagement() *terra.Lifecycle {
	return acd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acd *Resource) Attributes() awsCloudwatchDashboardAttributes {
	return awsCloudwatchDashboardAttributes{ref: terra.ReferenceResource(acd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acd *Resource) ImportState(state io.Reader) error {
	acd.state = &awsCloudwatchDashboardState{}
	if err := json.NewDecoder(state).Decode(acd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acd.Type(), acd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acd *Resource) State() (*awsCloudwatchDashboardState, bool) {
	return acd.state, acd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acd *Resource) StateMust() *awsCloudwatchDashboardState {
	if acd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acd.Type(), acd.LocalName()))
	}
	return acd.state
}

// Args contains the configurations for aws_cloudwatch_dashboard.
type Args struct {
	// DashboardBody: string, required
	DashboardBody terra.StringValue `hcl:"dashboard_body,attr" validate:"required"`
	// DashboardName: string, required
	DashboardName terra.StringValue `hcl:"dashboard_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}

type awsCloudwatchDashboardAttributes struct {
	ref terra.Reference
}

// DashboardArn returns a reference to field dashboard_arn of aws_cloudwatch_dashboard.
func (acd awsCloudwatchDashboardAttributes) DashboardArn() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("dashboard_arn"))
}

// DashboardBody returns a reference to field dashboard_body of aws_cloudwatch_dashboard.
func (acd awsCloudwatchDashboardAttributes) DashboardBody() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("dashboard_body"))
}

// DashboardName returns a reference to field dashboard_name of aws_cloudwatch_dashboard.
func (acd awsCloudwatchDashboardAttributes) DashboardName() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("dashboard_name"))
}

// Id returns a reference to field id of aws_cloudwatch_dashboard.
func (acd awsCloudwatchDashboardAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acd.ref.Append("id"))
}

type awsCloudwatchDashboardState struct {
	DashboardArn  string `json:"dashboard_arn"`
	DashboardBody string `json:"dashboard_body"`
	DashboardName string `json:"dashboard_name"`
	Id            string `json:"id"`
}
