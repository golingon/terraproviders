// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_autoscaling_schedule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_autoscaling_schedule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAutoscalingScheduleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aas *Resource) Type() string {
	return "aws_autoscaling_schedule"
}

// LocalName returns the local name for [Resource].
func (aas *Resource) LocalName() string {
	return aas.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aas *Resource) Configuration() interface{} {
	return aas.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aas *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aas)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aas *Resource) Dependencies() terra.Dependencies {
	return aas.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aas *Resource) LifecycleManagement() *terra.Lifecycle {
	return aas.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aas *Resource) Attributes() awsAutoscalingScheduleAttributes {
	return awsAutoscalingScheduleAttributes{ref: terra.ReferenceResource(aas)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aas *Resource) ImportState(state io.Reader) error {
	aas.state = &awsAutoscalingScheduleState{}
	if err := json.NewDecoder(state).Decode(aas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aas.Type(), aas.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aas *Resource) State() (*awsAutoscalingScheduleState, bool) {
	return aas.state, aas.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aas *Resource) StateMust() *awsAutoscalingScheduleState {
	if aas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aas.Type(), aas.LocalName()))
	}
	return aas.state
}

// Args contains the configurations for aws_autoscaling_schedule.
type Args struct {
	// AutoscalingGroupName: string, required
	AutoscalingGroupName terra.StringValue `hcl:"autoscaling_group_name,attr" validate:"required"`
	// DesiredCapacity: number, optional
	DesiredCapacity terra.NumberValue `hcl:"desired_capacity,attr"`
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxSize: number, optional
	MaxSize terra.NumberValue `hcl:"max_size,attr"`
	// MinSize: number, optional
	MinSize terra.NumberValue `hcl:"min_size,attr"`
	// Recurrence: string, optional
	Recurrence terra.StringValue `hcl:"recurrence,attr"`
	// ScheduledActionName: string, required
	ScheduledActionName terra.StringValue `hcl:"scheduled_action_name,attr" validate:"required"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// TimeZone: string, optional
	TimeZone terra.StringValue `hcl:"time_zone,attr"`
}

type awsAutoscalingScheduleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_autoscaling_schedule.
func (aas awsAutoscalingScheduleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("arn"))
}

// AutoscalingGroupName returns a reference to field autoscaling_group_name of aws_autoscaling_schedule.
func (aas awsAutoscalingScheduleAttributes) AutoscalingGroupName() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("autoscaling_group_name"))
}

// DesiredCapacity returns a reference to field desired_capacity of aws_autoscaling_schedule.
func (aas awsAutoscalingScheduleAttributes) DesiredCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aas.ref.Append("desired_capacity"))
}

// EndTime returns a reference to field end_time of aws_autoscaling_schedule.
func (aas awsAutoscalingScheduleAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("end_time"))
}

// Id returns a reference to field id of aws_autoscaling_schedule.
func (aas awsAutoscalingScheduleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("id"))
}

// MaxSize returns a reference to field max_size of aws_autoscaling_schedule.
func (aas awsAutoscalingScheduleAttributes) MaxSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aas.ref.Append("max_size"))
}

// MinSize returns a reference to field min_size of aws_autoscaling_schedule.
func (aas awsAutoscalingScheduleAttributes) MinSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aas.ref.Append("min_size"))
}

// Recurrence returns a reference to field recurrence of aws_autoscaling_schedule.
func (aas awsAutoscalingScheduleAttributes) Recurrence() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("recurrence"))
}

// ScheduledActionName returns a reference to field scheduled_action_name of aws_autoscaling_schedule.
func (aas awsAutoscalingScheduleAttributes) ScheduledActionName() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("scheduled_action_name"))
}

// StartTime returns a reference to field start_time of aws_autoscaling_schedule.
func (aas awsAutoscalingScheduleAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("start_time"))
}

// TimeZone returns a reference to field time_zone of aws_autoscaling_schedule.
func (aas awsAutoscalingScheduleAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(aas.ref.Append("time_zone"))
}

type awsAutoscalingScheduleState struct {
	Arn                  string  `json:"arn"`
	AutoscalingGroupName string  `json:"autoscaling_group_name"`
	DesiredCapacity      float64 `json:"desired_capacity"`
	EndTime              string  `json:"end_time"`
	Id                   string  `json:"id"`
	MaxSize              float64 `json:"max_size"`
	MinSize              float64 `json:"min_size"`
	Recurrence           string  `json:"recurrence"`
	ScheduledActionName  string  `json:"scheduled_action_name"`
	StartTime            string  `json:"start_time"`
	TimeZone             string  `json:"time_zone"`
}
