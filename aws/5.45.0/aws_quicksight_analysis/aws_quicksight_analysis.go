// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_analysis

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_quicksight_analysis.
type Resource struct {
	Name      string
	Args      Args
	state     *awsQuicksightAnalysisState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aqa *Resource) Type() string {
	return "aws_quicksight_analysis"
}

// LocalName returns the local name for [Resource].
func (aqa *Resource) LocalName() string {
	return aqa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aqa *Resource) Configuration() interface{} {
	return aqa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aqa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aqa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aqa *Resource) Dependencies() terra.Dependencies {
	return aqa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aqa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aqa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aqa *Resource) Attributes() awsQuicksightAnalysisAttributes {
	return awsQuicksightAnalysisAttributes{ref: terra.ReferenceResource(aqa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aqa *Resource) ImportState(state io.Reader) error {
	aqa.state = &awsQuicksightAnalysisState{}
	if err := json.NewDecoder(state).Decode(aqa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aqa.Type(), aqa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aqa *Resource) State() (*awsQuicksightAnalysisState, bool) {
	return aqa.state, aqa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aqa *Resource) StateMust() *awsQuicksightAnalysisState {
	if aqa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aqa.Type(), aqa.LocalName()))
	}
	return aqa.state
}

// Args contains the configurations for aws_quicksight_analysis.
type Args struct {
	// AnalysisId: string, required
	AnalysisId terra.StringValue `hcl:"analysis_id,attr" validate:"required"`
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RecoveryWindowInDays: number, optional
	RecoveryWindowInDays terra.NumberValue `hcl:"recovery_window_in_days,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ThemeArn: string, optional
	ThemeArn terra.StringValue `hcl:"theme_arn,attr"`
	// Definition: optional
	Definition *Definition `hcl:"definition,block"`
	// Parameters: optional
	Parameters *Parameters `hcl:"parameters,block"`
	// Permissions: min=0,max=64
	Permissions []Permissions `hcl:"permissions,block" validate:"min=0,max=64"`
	// SourceEntity: optional
	SourceEntity *SourceEntity `hcl:"source_entity,block"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsQuicksightAnalysisAttributes struct {
	ref terra.Reference
}

// AnalysisId returns a reference to field analysis_id of aws_quicksight_analysis.
func (aqa awsQuicksightAnalysisAttributes) AnalysisId() terra.StringValue {
	return terra.ReferenceAsString(aqa.ref.Append("analysis_id"))
}

// Arn returns a reference to field arn of aws_quicksight_analysis.
func (aqa awsQuicksightAnalysisAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aqa.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_analysis.
func (aqa awsQuicksightAnalysisAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(aqa.ref.Append("aws_account_id"))
}

// CreatedTime returns a reference to field created_time of aws_quicksight_analysis.
func (aqa awsQuicksightAnalysisAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(aqa.ref.Append("created_time"))
}

// Id returns a reference to field id of aws_quicksight_analysis.
func (aqa awsQuicksightAnalysisAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aqa.ref.Append("id"))
}

// LastPublishedTime returns a reference to field last_published_time of aws_quicksight_analysis.
func (aqa awsQuicksightAnalysisAttributes) LastPublishedTime() terra.StringValue {
	return terra.ReferenceAsString(aqa.ref.Append("last_published_time"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_quicksight_analysis.
func (aqa awsQuicksightAnalysisAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(aqa.ref.Append("last_updated_time"))
}

// Name returns a reference to field name of aws_quicksight_analysis.
func (aqa awsQuicksightAnalysisAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aqa.ref.Append("name"))
}

// RecoveryWindowInDays returns a reference to field recovery_window_in_days of aws_quicksight_analysis.
func (aqa awsQuicksightAnalysisAttributes) RecoveryWindowInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(aqa.ref.Append("recovery_window_in_days"))
}

// Status returns a reference to field status of aws_quicksight_analysis.
func (aqa awsQuicksightAnalysisAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aqa.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_quicksight_analysis.
func (aqa awsQuicksightAnalysisAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqa.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_quicksight_analysis.
func (aqa awsQuicksightAnalysisAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqa.ref.Append("tags_all"))
}

// ThemeArn returns a reference to field theme_arn of aws_quicksight_analysis.
func (aqa awsQuicksightAnalysisAttributes) ThemeArn() terra.StringValue {
	return terra.ReferenceAsString(aqa.ref.Append("theme_arn"))
}

func (aqa awsQuicksightAnalysisAttributes) Definition() terra.ListValue[DefinitionAttributes] {
	return terra.ReferenceAsList[DefinitionAttributes](aqa.ref.Append("definition"))
}

func (aqa awsQuicksightAnalysisAttributes) Parameters() terra.ListValue[ParametersAttributes] {
	return terra.ReferenceAsList[ParametersAttributes](aqa.ref.Append("parameters"))
}

func (aqa awsQuicksightAnalysisAttributes) Permissions() terra.SetValue[PermissionsAttributes] {
	return terra.ReferenceAsSet[PermissionsAttributes](aqa.ref.Append("permissions"))
}

func (aqa awsQuicksightAnalysisAttributes) SourceEntity() terra.ListValue[SourceEntityAttributes] {
	return terra.ReferenceAsList[SourceEntityAttributes](aqa.ref.Append("source_entity"))
}

func (aqa awsQuicksightAnalysisAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](aqa.ref.Append("timeouts"))
}

type awsQuicksightAnalysisState struct {
	AnalysisId           string              `json:"analysis_id"`
	Arn                  string              `json:"arn"`
	AwsAccountId         string              `json:"aws_account_id"`
	CreatedTime          string              `json:"created_time"`
	Id                   string              `json:"id"`
	LastPublishedTime    string              `json:"last_published_time"`
	LastUpdatedTime      string              `json:"last_updated_time"`
	Name                 string              `json:"name"`
	RecoveryWindowInDays float64             `json:"recovery_window_in_days"`
	Status               string              `json:"status"`
	Tags                 map[string]string   `json:"tags"`
	TagsAll              map[string]string   `json:"tags_all"`
	ThemeArn             string              `json:"theme_arn"`
	Definition           []DefinitionState   `json:"definition"`
	Parameters           []ParametersState   `json:"parameters"`
	Permissions          []PermissionsState  `json:"permissions"`
	SourceEntity         []SourceEntityState `json:"source_entity"`
	Timeouts             *TimeoutsState      `json:"timeouts"`
}
