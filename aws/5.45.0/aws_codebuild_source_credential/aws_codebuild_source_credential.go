// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codebuild_source_credential

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_codebuild_source_credential.
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodebuildSourceCredentialState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acsc *Resource) Type() string {
	return "aws_codebuild_source_credential"
}

// LocalName returns the local name for [Resource].
func (acsc *Resource) LocalName() string {
	return acsc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acsc *Resource) Configuration() interface{} {
	return acsc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acsc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acsc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acsc *Resource) Dependencies() terra.Dependencies {
	return acsc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acsc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acsc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acsc *Resource) Attributes() awsCodebuildSourceCredentialAttributes {
	return awsCodebuildSourceCredentialAttributes{ref: terra.ReferenceResource(acsc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acsc *Resource) ImportState(state io.Reader) error {
	acsc.state = &awsCodebuildSourceCredentialState{}
	if err := json.NewDecoder(state).Decode(acsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acsc.Type(), acsc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acsc *Resource) State() (*awsCodebuildSourceCredentialState, bool) {
	return acsc.state, acsc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acsc *Resource) StateMust() *awsCodebuildSourceCredentialState {
	if acsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acsc.Type(), acsc.LocalName()))
	}
	return acsc.state
}

// Args contains the configurations for aws_codebuild_source_credential.
type Args struct {
	// AuthType: string, required
	AuthType terra.StringValue `hcl:"auth_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServerType: string, required
	ServerType terra.StringValue `hcl:"server_type,attr" validate:"required"`
	// Token: string, required
	Token terra.StringValue `hcl:"token,attr" validate:"required"`
	// UserName: string, optional
	UserName terra.StringValue `hcl:"user_name,attr"`
}

type awsCodebuildSourceCredentialAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_codebuild_source_credential.
func (acsc awsCodebuildSourceCredentialAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acsc.ref.Append("arn"))
}

// AuthType returns a reference to field auth_type of aws_codebuild_source_credential.
func (acsc awsCodebuildSourceCredentialAttributes) AuthType() terra.StringValue {
	return terra.ReferenceAsString(acsc.ref.Append("auth_type"))
}

// Id returns a reference to field id of aws_codebuild_source_credential.
func (acsc awsCodebuildSourceCredentialAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acsc.ref.Append("id"))
}

// ServerType returns a reference to field server_type of aws_codebuild_source_credential.
func (acsc awsCodebuildSourceCredentialAttributes) ServerType() terra.StringValue {
	return terra.ReferenceAsString(acsc.ref.Append("server_type"))
}

// Token returns a reference to field token of aws_codebuild_source_credential.
func (acsc awsCodebuildSourceCredentialAttributes) Token() terra.StringValue {
	return terra.ReferenceAsString(acsc.ref.Append("token"))
}

// UserName returns a reference to field user_name of aws_codebuild_source_credential.
func (acsc awsCodebuildSourceCredentialAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(acsc.ref.Append("user_name"))
}

type awsCodebuildSourceCredentialState struct {
	Arn        string `json:"arn"`
	AuthType   string `json:"auth_type"`
	Id         string `json:"id"`
	ServerType string `json:"server_type"`
	Token      string `json:"token"`
	UserName   string `json:"user_name"`
}
