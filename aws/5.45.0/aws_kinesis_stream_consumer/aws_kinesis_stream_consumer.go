// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kinesis_stream_consumer

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_kinesis_stream_consumer.
type Resource struct {
	Name      string
	Args      Args
	state     *awsKinesisStreamConsumerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aksc *Resource) Type() string {
	return "aws_kinesis_stream_consumer"
}

// LocalName returns the local name for [Resource].
func (aksc *Resource) LocalName() string {
	return aksc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aksc *Resource) Configuration() interface{} {
	return aksc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aksc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aksc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aksc *Resource) Dependencies() terra.Dependencies {
	return aksc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aksc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aksc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aksc *Resource) Attributes() awsKinesisStreamConsumerAttributes {
	return awsKinesisStreamConsumerAttributes{ref: terra.ReferenceResource(aksc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aksc *Resource) ImportState(state io.Reader) error {
	aksc.state = &awsKinesisStreamConsumerState{}
	if err := json.NewDecoder(state).Decode(aksc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aksc.Type(), aksc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aksc *Resource) State() (*awsKinesisStreamConsumerState, bool) {
	return aksc.state, aksc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aksc *Resource) StateMust() *awsKinesisStreamConsumerState {
	if aksc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aksc.Type(), aksc.LocalName()))
	}
	return aksc.state
}

// Args contains the configurations for aws_kinesis_stream_consumer.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StreamArn: string, required
	StreamArn terra.StringValue `hcl:"stream_arn,attr" validate:"required"`
}

type awsKinesisStreamConsumerAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_kinesis_stream_consumer.
func (aksc awsKinesisStreamConsumerAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aksc.ref.Append("arn"))
}

// CreationTimestamp returns a reference to field creation_timestamp of aws_kinesis_stream_consumer.
func (aksc awsKinesisStreamConsumerAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceAsString(aksc.ref.Append("creation_timestamp"))
}

// Id returns a reference to field id of aws_kinesis_stream_consumer.
func (aksc awsKinesisStreamConsumerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aksc.ref.Append("id"))
}

// Name returns a reference to field name of aws_kinesis_stream_consumer.
func (aksc awsKinesisStreamConsumerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aksc.ref.Append("name"))
}

// StreamArn returns a reference to field stream_arn of aws_kinesis_stream_consumer.
func (aksc awsKinesisStreamConsumerAttributes) StreamArn() terra.StringValue {
	return terra.ReferenceAsString(aksc.ref.Append("stream_arn"))
}

type awsKinesisStreamConsumerState struct {
	Arn               string `json:"arn"`
	CreationTimestamp string `json:"creation_timestamp"`
	Id                string `json:"id"`
	Name              string `json:"name"`
	StreamArn         string `json:"stream_arn"`
}
