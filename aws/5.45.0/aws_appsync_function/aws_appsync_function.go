// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appsync_function

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_appsync_function.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppsyncFunctionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaf *Resource) Type() string {
	return "aws_appsync_function"
}

// LocalName returns the local name for [Resource].
func (aaf *Resource) LocalName() string {
	return aaf.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaf *Resource) Configuration() interface{} {
	return aaf.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaf *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaf)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaf *Resource) Dependencies() terra.Dependencies {
	return aaf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaf *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaf.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaf *Resource) Attributes() awsAppsyncFunctionAttributes {
	return awsAppsyncFunctionAttributes{ref: terra.ReferenceResource(aaf)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaf *Resource) ImportState(state io.Reader) error {
	aaf.state = &awsAppsyncFunctionState{}
	if err := json.NewDecoder(state).Decode(aaf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaf.Type(), aaf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaf *Resource) State() (*awsAppsyncFunctionState, bool) {
	return aaf.state, aaf.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaf *Resource) StateMust() *awsAppsyncFunctionState {
	if aaf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaf.Type(), aaf.LocalName()))
	}
	return aaf.state
}

// Args contains the configurations for aws_appsync_function.
type Args struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// Code: string, optional
	Code terra.StringValue `hcl:"code,attr"`
	// DataSource: string, required
	DataSource terra.StringValue `hcl:"data_source,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FunctionVersion: string, optional
	FunctionVersion terra.StringValue `hcl:"function_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxBatchSize: number, optional
	MaxBatchSize terra.NumberValue `hcl:"max_batch_size,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RequestMappingTemplate: string, optional
	RequestMappingTemplate terra.StringValue `hcl:"request_mapping_template,attr"`
	// ResponseMappingTemplate: string, optional
	ResponseMappingTemplate terra.StringValue `hcl:"response_mapping_template,attr"`
	// Runtime: optional
	Runtime *Runtime `hcl:"runtime,block"`
	// SyncConfig: optional
	SyncConfig *SyncConfig `hcl:"sync_config,block"`
}

type awsAppsyncFunctionAttributes struct {
	ref terra.Reference
}

// ApiId returns a reference to field api_id of aws_appsync_function.
func (aaf awsAppsyncFunctionAttributes) ApiId() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("api_id"))
}

// Arn returns a reference to field arn of aws_appsync_function.
func (aaf awsAppsyncFunctionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("arn"))
}

// Code returns a reference to field code of aws_appsync_function.
func (aaf awsAppsyncFunctionAttributes) Code() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("code"))
}

// DataSource returns a reference to field data_source of aws_appsync_function.
func (aaf awsAppsyncFunctionAttributes) DataSource() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("data_source"))
}

// Description returns a reference to field description of aws_appsync_function.
func (aaf awsAppsyncFunctionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("description"))
}

// FunctionId returns a reference to field function_id of aws_appsync_function.
func (aaf awsAppsyncFunctionAttributes) FunctionId() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("function_id"))
}

// FunctionVersion returns a reference to field function_version of aws_appsync_function.
func (aaf awsAppsyncFunctionAttributes) FunctionVersion() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("function_version"))
}

// Id returns a reference to field id of aws_appsync_function.
func (aaf awsAppsyncFunctionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("id"))
}

// MaxBatchSize returns a reference to field max_batch_size of aws_appsync_function.
func (aaf awsAppsyncFunctionAttributes) MaxBatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aaf.ref.Append("max_batch_size"))
}

// Name returns a reference to field name of aws_appsync_function.
func (aaf awsAppsyncFunctionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("name"))
}

// RequestMappingTemplate returns a reference to field request_mapping_template of aws_appsync_function.
func (aaf awsAppsyncFunctionAttributes) RequestMappingTemplate() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("request_mapping_template"))
}

// ResponseMappingTemplate returns a reference to field response_mapping_template of aws_appsync_function.
func (aaf awsAppsyncFunctionAttributes) ResponseMappingTemplate() terra.StringValue {
	return terra.ReferenceAsString(aaf.ref.Append("response_mapping_template"))
}

func (aaf awsAppsyncFunctionAttributes) Runtime() terra.ListValue[RuntimeAttributes] {
	return terra.ReferenceAsList[RuntimeAttributes](aaf.ref.Append("runtime"))
}

func (aaf awsAppsyncFunctionAttributes) SyncConfig() terra.ListValue[SyncConfigAttributes] {
	return terra.ReferenceAsList[SyncConfigAttributes](aaf.ref.Append("sync_config"))
}

type awsAppsyncFunctionState struct {
	ApiId                   string            `json:"api_id"`
	Arn                     string            `json:"arn"`
	Code                    string            `json:"code"`
	DataSource              string            `json:"data_source"`
	Description             string            `json:"description"`
	FunctionId              string            `json:"function_id"`
	FunctionVersion         string            `json:"function_version"`
	Id                      string            `json:"id"`
	MaxBatchSize            float64           `json:"max_batch_size"`
	Name                    string            `json:"name"`
	RequestMappingTemplate  string            `json:"request_mapping_template"`
	ResponseMappingTemplate string            `json:"response_mapping_template"`
	Runtime                 []RuntimeState    `json:"runtime"`
	SyncConfig              []SyncConfigState `json:"sync_config"`
}
