// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lambda_alias

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_lambda_alias.
type Resource struct {
	Name      string
	Args      Args
	state     *awsLambdaAliasState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ala *Resource) Type() string {
	return "aws_lambda_alias"
}

// LocalName returns the local name for [Resource].
func (ala *Resource) LocalName() string {
	return ala.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ala *Resource) Configuration() interface{} {
	return ala.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ala *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ala)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ala *Resource) Dependencies() terra.Dependencies {
	return ala.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ala *Resource) LifecycleManagement() *terra.Lifecycle {
	return ala.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ala *Resource) Attributes() awsLambdaAliasAttributes {
	return awsLambdaAliasAttributes{ref: terra.ReferenceResource(ala)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ala *Resource) ImportState(state io.Reader) error {
	ala.state = &awsLambdaAliasState{}
	if err := json.NewDecoder(state).Decode(ala.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ala.Type(), ala.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ala *Resource) State() (*awsLambdaAliasState, bool) {
	return ala.state, ala.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ala *Resource) StateMust() *awsLambdaAliasState {
	if ala.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ala.Type(), ala.LocalName()))
	}
	return ala.state
}

// Args contains the configurations for aws_lambda_alias.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FunctionName: string, required
	FunctionName terra.StringValue `hcl:"function_name,attr" validate:"required"`
	// FunctionVersion: string, required
	FunctionVersion terra.StringValue `hcl:"function_version,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoutingConfig: optional
	RoutingConfig *RoutingConfig `hcl:"routing_config,block"`
}

type awsLambdaAliasAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_lambda_alias.
func (ala awsLambdaAliasAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("arn"))
}

// Description returns a reference to field description of aws_lambda_alias.
func (ala awsLambdaAliasAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("description"))
}

// FunctionName returns a reference to field function_name of aws_lambda_alias.
func (ala awsLambdaAliasAttributes) FunctionName() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("function_name"))
}

// FunctionVersion returns a reference to field function_version of aws_lambda_alias.
func (ala awsLambdaAliasAttributes) FunctionVersion() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("function_version"))
}

// Id returns a reference to field id of aws_lambda_alias.
func (ala awsLambdaAliasAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("id"))
}

// InvokeArn returns a reference to field invoke_arn of aws_lambda_alias.
func (ala awsLambdaAliasAttributes) InvokeArn() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("invoke_arn"))
}

// Name returns a reference to field name of aws_lambda_alias.
func (ala awsLambdaAliasAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ala.ref.Append("name"))
}

func (ala awsLambdaAliasAttributes) RoutingConfig() terra.ListValue[RoutingConfigAttributes] {
	return terra.ReferenceAsList[RoutingConfigAttributes](ala.ref.Append("routing_config"))
}

type awsLambdaAliasState struct {
	Arn             string               `json:"arn"`
	Description     string               `json:"description"`
	FunctionName    string               `json:"function_name"`
	FunctionVersion string               `json:"function_version"`
	Id              string               `json:"id"`
	InvokeArn       string               `json:"invoke_arn"`
	Name            string               `json:"name"`
	RoutingConfig   []RoutingConfigState `json:"routing_config"`
}
