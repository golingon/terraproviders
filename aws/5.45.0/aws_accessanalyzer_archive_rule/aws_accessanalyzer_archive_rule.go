// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_accessanalyzer_archive_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_accessanalyzer_archive_rule.
type Resource struct {
	Name      string
	Args      Args
	state     *awsAccessanalyzerArchiveRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaar *Resource) Type() string {
	return "aws_accessanalyzer_archive_rule"
}

// LocalName returns the local name for [Resource].
func (aaar *Resource) LocalName() string {
	return aaar.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaar *Resource) Configuration() interface{} {
	return aaar.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaar *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaar)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaar *Resource) Dependencies() terra.Dependencies {
	return aaar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaar *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaar.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaar *Resource) Attributes() awsAccessanalyzerArchiveRuleAttributes {
	return awsAccessanalyzerArchiveRuleAttributes{ref: terra.ReferenceResource(aaar)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaar *Resource) ImportState(state io.Reader) error {
	aaar.state = &awsAccessanalyzerArchiveRuleState{}
	if err := json.NewDecoder(state).Decode(aaar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaar.Type(), aaar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaar *Resource) State() (*awsAccessanalyzerArchiveRuleState, bool) {
	return aaar.state, aaar.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaar *Resource) StateMust() *awsAccessanalyzerArchiveRuleState {
	if aaar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaar.Type(), aaar.LocalName()))
	}
	return aaar.state
}

// Args contains the configurations for aws_accessanalyzer_archive_rule.
type Args struct {
	// AnalyzerName: string, required
	AnalyzerName terra.StringValue `hcl:"analyzer_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RuleName: string, required
	RuleName terra.StringValue `hcl:"rule_name,attr" validate:"required"`
	// Filter: min=1
	Filter []Filter `hcl:"filter,block" validate:"min=1"`
}

type awsAccessanalyzerArchiveRuleAttributes struct {
	ref terra.Reference
}

// AnalyzerName returns a reference to field analyzer_name of aws_accessanalyzer_archive_rule.
func (aaar awsAccessanalyzerArchiveRuleAttributes) AnalyzerName() terra.StringValue {
	return terra.ReferenceAsString(aaar.ref.Append("analyzer_name"))
}

// Id returns a reference to field id of aws_accessanalyzer_archive_rule.
func (aaar awsAccessanalyzerArchiveRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaar.ref.Append("id"))
}

// RuleName returns a reference to field rule_name of aws_accessanalyzer_archive_rule.
func (aaar awsAccessanalyzerArchiveRuleAttributes) RuleName() terra.StringValue {
	return terra.ReferenceAsString(aaar.ref.Append("rule_name"))
}

func (aaar awsAccessanalyzerArchiveRuleAttributes) Filter() terra.SetValue[FilterAttributes] {
	return terra.ReferenceAsSet[FilterAttributes](aaar.ref.Append("filter"))
}

type awsAccessanalyzerArchiveRuleState struct {
	AnalyzerName string        `json:"analyzer_name"`
	Id           string        `json:"id"`
	RuleName     string        `json:"rule_name"`
	Filter       []FilterState `json:"filter"`
}
