// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_shield_drt_access_log_bucket_association

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_shield_drt_access_log_bucket_association.
type Resource struct {
	Name      string
	Args      Args
	state     *awsShieldDrtAccessLogBucketAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asdalba *Resource) Type() string {
	return "aws_shield_drt_access_log_bucket_association"
}

// LocalName returns the local name for [Resource].
func (asdalba *Resource) LocalName() string {
	return asdalba.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asdalba *Resource) Configuration() interface{} {
	return asdalba.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asdalba *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asdalba)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asdalba *Resource) Dependencies() terra.Dependencies {
	return asdalba.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asdalba *Resource) LifecycleManagement() *terra.Lifecycle {
	return asdalba.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asdalba *Resource) Attributes() awsShieldDrtAccessLogBucketAssociationAttributes {
	return awsShieldDrtAccessLogBucketAssociationAttributes{ref: terra.ReferenceResource(asdalba)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asdalba *Resource) ImportState(state io.Reader) error {
	asdalba.state = &awsShieldDrtAccessLogBucketAssociationState{}
	if err := json.NewDecoder(state).Decode(asdalba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asdalba.Type(), asdalba.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asdalba *Resource) State() (*awsShieldDrtAccessLogBucketAssociationState, bool) {
	return asdalba.state, asdalba.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asdalba *Resource) StateMust() *awsShieldDrtAccessLogBucketAssociationState {
	if asdalba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asdalba.Type(), asdalba.LocalName()))
	}
	return asdalba.state
}

// Args contains the configurations for aws_shield_drt_access_log_bucket_association.
type Args struct {
	// LogBucket: string, required
	LogBucket terra.StringValue `hcl:"log_bucket,attr" validate:"required"`
	// RoleArnAssociationId: string, required
	RoleArnAssociationId terra.StringValue `hcl:"role_arn_association_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsShieldDrtAccessLogBucketAssociationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_shield_drt_access_log_bucket_association.
func (asdalba awsShieldDrtAccessLogBucketAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asdalba.ref.Append("id"))
}

// LogBucket returns a reference to field log_bucket of aws_shield_drt_access_log_bucket_association.
func (asdalba awsShieldDrtAccessLogBucketAssociationAttributes) LogBucket() terra.StringValue {
	return terra.ReferenceAsString(asdalba.ref.Append("log_bucket"))
}

// RoleArnAssociationId returns a reference to field role_arn_association_id of aws_shield_drt_access_log_bucket_association.
func (asdalba awsShieldDrtAccessLogBucketAssociationAttributes) RoleArnAssociationId() terra.StringValue {
	return terra.ReferenceAsString(asdalba.ref.Append("role_arn_association_id"))
}

func (asdalba awsShieldDrtAccessLogBucketAssociationAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](asdalba.ref.Append("timeouts"))
}

type awsShieldDrtAccessLogBucketAssociationState struct {
	Id                   string         `json:"id"`
	LogBucket            string         `json:"log_bucket"`
	RoleArnAssociationId string         `json:"role_arn_association_id"`
	Timeouts             *TimeoutsState `json:"timeouts"`
}
