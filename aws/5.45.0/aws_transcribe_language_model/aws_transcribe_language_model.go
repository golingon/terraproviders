// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_transcribe_language_model

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource aws_transcribe_language_model.
type Resource struct {
	Name      string
	Args      Args
	state     *awsTranscribeLanguageModelState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (atlm *Resource) Type() string {
	return "aws_transcribe_language_model"
}

// LocalName returns the local name for [Resource].
func (atlm *Resource) LocalName() string {
	return atlm.Name
}

// Configuration returns the configuration (args) for [Resource].
func (atlm *Resource) Configuration() interface{} {
	return atlm.Args
}

// DependOn is used for other resources to depend on [Resource].
func (atlm *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(atlm)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (atlm *Resource) Dependencies() terra.Dependencies {
	return atlm.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (atlm *Resource) LifecycleManagement() *terra.Lifecycle {
	return atlm.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (atlm *Resource) Attributes() awsTranscribeLanguageModelAttributes {
	return awsTranscribeLanguageModelAttributes{ref: terra.ReferenceResource(atlm)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (atlm *Resource) ImportState(state io.Reader) error {
	atlm.state = &awsTranscribeLanguageModelState{}
	if err := json.NewDecoder(state).Decode(atlm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", atlm.Type(), atlm.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (atlm *Resource) State() (*awsTranscribeLanguageModelState, bool) {
	return atlm.state, atlm.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (atlm *Resource) StateMust() *awsTranscribeLanguageModelState {
	if atlm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", atlm.Type(), atlm.LocalName()))
	}
	return atlm.state
}

// Args contains the configurations for aws_transcribe_language_model.
type Args struct {
	// BaseModelName: string, required
	BaseModelName terra.StringValue `hcl:"base_model_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
	// ModelName: string, required
	ModelName terra.StringValue `hcl:"model_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// InputDataConfig: required
	InputDataConfig *InputDataConfig `hcl:"input_data_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsTranscribeLanguageModelAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_transcribe_language_model.
func (atlm awsTranscribeLanguageModelAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(atlm.ref.Append("arn"))
}

// BaseModelName returns a reference to field base_model_name of aws_transcribe_language_model.
func (atlm awsTranscribeLanguageModelAttributes) BaseModelName() terra.StringValue {
	return terra.ReferenceAsString(atlm.ref.Append("base_model_name"))
}

// Id returns a reference to field id of aws_transcribe_language_model.
func (atlm awsTranscribeLanguageModelAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(atlm.ref.Append("id"))
}

// LanguageCode returns a reference to field language_code of aws_transcribe_language_model.
func (atlm awsTranscribeLanguageModelAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(atlm.ref.Append("language_code"))
}

// ModelName returns a reference to field model_name of aws_transcribe_language_model.
func (atlm awsTranscribeLanguageModelAttributes) ModelName() terra.StringValue {
	return terra.ReferenceAsString(atlm.ref.Append("model_name"))
}

// Tags returns a reference to field tags of aws_transcribe_language_model.
func (atlm awsTranscribeLanguageModelAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](atlm.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_transcribe_language_model.
func (atlm awsTranscribeLanguageModelAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](atlm.ref.Append("tags_all"))
}

func (atlm awsTranscribeLanguageModelAttributes) InputDataConfig() terra.ListValue[InputDataConfigAttributes] {
	return terra.ReferenceAsList[InputDataConfigAttributes](atlm.ref.Append("input_data_config"))
}

func (atlm awsTranscribeLanguageModelAttributes) Timeouts() TimeoutsAttributes {
	return terra.ReferenceAsSingle[TimeoutsAttributes](atlm.ref.Append("timeouts"))
}

type awsTranscribeLanguageModelState struct {
	Arn             string                 `json:"arn"`
	BaseModelName   string                 `json:"base_model_name"`
	Id              string                 `json:"id"`
	LanguageCode    string                 `json:"language_code"`
	ModelName       string                 `json:"model_name"`
	Tags            map[string]string      `json:"tags"`
	TagsAll         map[string]string      `json:"tags_all"`
	InputDataConfig []InputDataConfigState `json:"input_data_config"`
	Timeouts        *TimeoutsState         `json:"timeouts"`
}
