// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataquicksighttheme

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Configuration struct {
	// DataColorPalette: min=0
	DataColorPalette []DataColorPalette `hcl:"data_color_palette,block" validate:"min=0"`
	// Sheet: min=0
	Sheet []Sheet `hcl:"sheet,block" validate:"min=0"`
	// Typography: min=0
	Typography []Typography `hcl:"typography,block" validate:"min=0"`
	// UiColorPalette: min=0
	UiColorPalette []UiColorPalette `hcl:"ui_color_palette,block" validate:"min=0"`
}

type DataColorPalette struct{}

type Sheet struct {
	// Tile: min=0
	Tile []Tile `hcl:"tile,block" validate:"min=0"`
	// TileLayout: min=0
	TileLayout []TileLayout `hcl:"tile_layout,block" validate:"min=0"`
}

type Tile struct {
	// Border: min=0
	Border []Border `hcl:"border,block" validate:"min=0"`
}

type Border struct{}

type TileLayout struct {
	// Gutter: min=0
	Gutter []Gutter `hcl:"gutter,block" validate:"min=0"`
	// Margin: min=0
	Margin []Margin `hcl:"margin,block" validate:"min=0"`
}

type Gutter struct{}

type Margin struct{}

type Typography struct {
	// FontFamilies: min=0
	FontFamilies []FontFamilies `hcl:"font_families,block" validate:"min=0"`
}

type FontFamilies struct{}

type UiColorPalette struct{}

type Permissions struct{}

type ConfigurationAttributes struct {
	ref terra.Reference
}

func (c ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigurationAttributes) InternalWithRef(ref terra.Reference) ConfigurationAttributes {
	return ConfigurationAttributes{ref: ref}
}

func (c ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ConfigurationAttributes) DataColorPalette() terra.ListValue[DataColorPaletteAttributes] {
	return terra.ReferenceAsList[DataColorPaletteAttributes](c.ref.Append("data_color_palette"))
}

func (c ConfigurationAttributes) Sheet() terra.ListValue[SheetAttributes] {
	return terra.ReferenceAsList[SheetAttributes](c.ref.Append("sheet"))
}

func (c ConfigurationAttributes) Typography() terra.ListValue[TypographyAttributes] {
	return terra.ReferenceAsList[TypographyAttributes](c.ref.Append("typography"))
}

func (c ConfigurationAttributes) UiColorPalette() terra.ListValue[UiColorPaletteAttributes] {
	return terra.ReferenceAsList[UiColorPaletteAttributes](c.ref.Append("ui_color_palette"))
}

type DataColorPaletteAttributes struct {
	ref terra.Reference
}

func (dcp DataColorPaletteAttributes) InternalRef() (terra.Reference, error) {
	return dcp.ref, nil
}

func (dcp DataColorPaletteAttributes) InternalWithRef(ref terra.Reference) DataColorPaletteAttributes {
	return DataColorPaletteAttributes{ref: ref}
}

func (dcp DataColorPaletteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcp.ref.InternalTokens()
}

func (dcp DataColorPaletteAttributes) Colors() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dcp.ref.Append("colors"))
}

func (dcp DataColorPaletteAttributes) EmptyFillColor() terra.StringValue {
	return terra.ReferenceAsString(dcp.ref.Append("empty_fill_color"))
}

func (dcp DataColorPaletteAttributes) MinMaxGradient() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dcp.ref.Append("min_max_gradient"))
}

type SheetAttributes struct {
	ref terra.Reference
}

func (s SheetAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SheetAttributes) InternalWithRef(ref terra.Reference) SheetAttributes {
	return SheetAttributes{ref: ref}
}

func (s SheetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SheetAttributes) Tile() terra.ListValue[TileAttributes] {
	return terra.ReferenceAsList[TileAttributes](s.ref.Append("tile"))
}

func (s SheetAttributes) TileLayout() terra.ListValue[TileLayoutAttributes] {
	return terra.ReferenceAsList[TileLayoutAttributes](s.ref.Append("tile_layout"))
}

type TileAttributes struct {
	ref terra.Reference
}

func (t TileAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TileAttributes) InternalWithRef(ref terra.Reference) TileAttributes {
	return TileAttributes{ref: ref}
}

func (t TileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TileAttributes) Border() terra.ListValue[BorderAttributes] {
	return terra.ReferenceAsList[BorderAttributes](t.ref.Append("border"))
}

type BorderAttributes struct {
	ref terra.Reference
}

func (b BorderAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BorderAttributes) InternalWithRef(ref terra.Reference) BorderAttributes {
	return BorderAttributes{ref: ref}
}

func (b BorderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BorderAttributes) Show() terra.BoolValue {
	return terra.ReferenceAsBool(b.ref.Append("show"))
}

type TileLayoutAttributes struct {
	ref terra.Reference
}

func (tl TileLayoutAttributes) InternalRef() (terra.Reference, error) {
	return tl.ref, nil
}

func (tl TileLayoutAttributes) InternalWithRef(ref terra.Reference) TileLayoutAttributes {
	return TileLayoutAttributes{ref: ref}
}

func (tl TileLayoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tl.ref.InternalTokens()
}

func (tl TileLayoutAttributes) Gutter() terra.ListValue[GutterAttributes] {
	return terra.ReferenceAsList[GutterAttributes](tl.ref.Append("gutter"))
}

func (tl TileLayoutAttributes) Margin() terra.ListValue[MarginAttributes] {
	return terra.ReferenceAsList[MarginAttributes](tl.ref.Append("margin"))
}

type GutterAttributes struct {
	ref terra.Reference
}

func (g GutterAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g GutterAttributes) InternalWithRef(ref terra.Reference) GutterAttributes {
	return GutterAttributes{ref: ref}
}

func (g GutterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g GutterAttributes) Show() terra.BoolValue {
	return terra.ReferenceAsBool(g.ref.Append("show"))
}

type MarginAttributes struct {
	ref terra.Reference
}

func (m MarginAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MarginAttributes) InternalWithRef(ref terra.Reference) MarginAttributes {
	return MarginAttributes{ref: ref}
}

func (m MarginAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MarginAttributes) Show() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("show"))
}

type TypographyAttributes struct {
	ref terra.Reference
}

func (t TypographyAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TypographyAttributes) InternalWithRef(ref terra.Reference) TypographyAttributes {
	return TypographyAttributes{ref: ref}
}

func (t TypographyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TypographyAttributes) FontFamilies() terra.ListValue[FontFamiliesAttributes] {
	return terra.ReferenceAsList[FontFamiliesAttributes](t.ref.Append("font_families"))
}

type FontFamiliesAttributes struct {
	ref terra.Reference
}

func (ff FontFamiliesAttributes) InternalRef() (terra.Reference, error) {
	return ff.ref, nil
}

func (ff FontFamiliesAttributes) InternalWithRef(ref terra.Reference) FontFamiliesAttributes {
	return FontFamiliesAttributes{ref: ref}
}

func (ff FontFamiliesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ff.ref.InternalTokens()
}

func (ff FontFamiliesAttributes) FontFamily() terra.StringValue {
	return terra.ReferenceAsString(ff.ref.Append("font_family"))
}

type UiColorPaletteAttributes struct {
	ref terra.Reference
}

func (ucp UiColorPaletteAttributes) InternalRef() (terra.Reference, error) {
	return ucp.ref, nil
}

func (ucp UiColorPaletteAttributes) InternalWithRef(ref terra.Reference) UiColorPaletteAttributes {
	return UiColorPaletteAttributes{ref: ref}
}

func (ucp UiColorPaletteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ucp.ref.InternalTokens()
}

func (ucp UiColorPaletteAttributes) Accent() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("accent"))
}

func (ucp UiColorPaletteAttributes) AccentForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("accent_foreground"))
}

func (ucp UiColorPaletteAttributes) Danger() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("danger"))
}

func (ucp UiColorPaletteAttributes) DangerForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("danger_foreground"))
}

func (ucp UiColorPaletteAttributes) Dimension() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("dimension"))
}

func (ucp UiColorPaletteAttributes) DimensionForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("dimension_foreground"))
}

func (ucp UiColorPaletteAttributes) Measure() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("measure"))
}

func (ucp UiColorPaletteAttributes) MeasureForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("measure_foreground"))
}

func (ucp UiColorPaletteAttributes) PrimaryBackground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("primary_background"))
}

func (ucp UiColorPaletteAttributes) PrimaryForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("primary_foreground"))
}

func (ucp UiColorPaletteAttributes) SecondaryBackground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("secondary_background"))
}

func (ucp UiColorPaletteAttributes) SecondaryForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("secondary_foreground"))
}

func (ucp UiColorPaletteAttributes) Success() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("success"))
}

func (ucp UiColorPaletteAttributes) SuccessForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("success_foreground"))
}

func (ucp UiColorPaletteAttributes) Warning() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("warning"))
}

func (ucp UiColorPaletteAttributes) WarningForeground() terra.StringValue {
	return terra.ReferenceAsString(ucp.ref.Append("warning_foreground"))
}

type PermissionsAttributes struct {
	ref terra.Reference
}

func (p PermissionsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PermissionsAttributes) InternalWithRef(ref terra.Reference) PermissionsAttributes {
	return PermissionsAttributes{ref: ref}
}

func (p PermissionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PermissionsAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("actions"))
}

func (p PermissionsAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("principal"))
}

type ConfigurationState struct {
	DataColorPalette []DataColorPaletteState `json:"data_color_palette"`
	Sheet            []SheetState            `json:"sheet"`
	Typography       []TypographyState       `json:"typography"`
	UiColorPalette   []UiColorPaletteState   `json:"ui_color_palette"`
}

type DataColorPaletteState struct {
	Colors         []string `json:"colors"`
	EmptyFillColor string   `json:"empty_fill_color"`
	MinMaxGradient []string `json:"min_max_gradient"`
}

type SheetState struct {
	Tile       []TileState       `json:"tile"`
	TileLayout []TileLayoutState `json:"tile_layout"`
}

type TileState struct {
	Border []BorderState `json:"border"`
}

type BorderState struct {
	Show bool `json:"show"`
}

type TileLayoutState struct {
	Gutter []GutterState `json:"gutter"`
	Margin []MarginState `json:"margin"`
}

type GutterState struct {
	Show bool `json:"show"`
}

type MarginState struct {
	Show bool `json:"show"`
}

type TypographyState struct {
	FontFamilies []FontFamiliesState `json:"font_families"`
}

type FontFamiliesState struct {
	FontFamily string `json:"font_family"`
}

type UiColorPaletteState struct {
	Accent              string `json:"accent"`
	AccentForeground    string `json:"accent_foreground"`
	Danger              string `json:"danger"`
	DangerForeground    string `json:"danger_foreground"`
	Dimension           string `json:"dimension"`
	DimensionForeground string `json:"dimension_foreground"`
	Measure             string `json:"measure"`
	MeasureForeground   string `json:"measure_foreground"`
	PrimaryBackground   string `json:"primary_background"`
	PrimaryForeground   string `json:"primary_foreground"`
	SecondaryBackground string `json:"secondary_background"`
	SecondaryForeground string `json:"secondary_foreground"`
	Success             string `json:"success"`
	SuccessForeground   string `json:"success_foreground"`
	Warning             string `json:"warning"`
	WarningForeground   string `json:"warning_foreground"`
}

type PermissionsState struct {
	Actions   []string `json:"actions"`
	Principal string   `json:"principal"`
}
