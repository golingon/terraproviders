// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAcmpcaPolicy creates a new instance of [AcmpcaPolicy].
func NewAcmpcaPolicy(name string, args AcmpcaPolicyArgs) *AcmpcaPolicy {
	return &AcmpcaPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AcmpcaPolicy)(nil)

// AcmpcaPolicy represents the Terraform resource aws_acmpca_policy.
type AcmpcaPolicy struct {
	Name      string
	Args      AcmpcaPolicyArgs
	state     *acmpcaPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AcmpcaPolicy].
func (ap *AcmpcaPolicy) Type() string {
	return "aws_acmpca_policy"
}

// LocalName returns the local name for [AcmpcaPolicy].
func (ap *AcmpcaPolicy) LocalName() string {
	return ap.Name
}

// Configuration returns the configuration (args) for [AcmpcaPolicy].
func (ap *AcmpcaPolicy) Configuration() interface{} {
	return ap.Args
}

// DependOn is used for other resources to depend on [AcmpcaPolicy].
func (ap *AcmpcaPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ap)
}

// Dependencies returns the list of resources [AcmpcaPolicy] depends_on.
func (ap *AcmpcaPolicy) Dependencies() terra.Dependencies {
	return ap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AcmpcaPolicy].
func (ap *AcmpcaPolicy) LifecycleManagement() *terra.Lifecycle {
	return ap.Lifecycle
}

// Attributes returns the attributes for [AcmpcaPolicy].
func (ap *AcmpcaPolicy) Attributes() acmpcaPolicyAttributes {
	return acmpcaPolicyAttributes{ref: terra.ReferenceResource(ap)}
}

// ImportState imports the given attribute values into [AcmpcaPolicy]'s state.
func (ap *AcmpcaPolicy) ImportState(av io.Reader) error {
	ap.state = &acmpcaPolicyState{}
	if err := json.NewDecoder(av).Decode(ap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ap.Type(), ap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AcmpcaPolicy] has state.
func (ap *AcmpcaPolicy) State() (*acmpcaPolicyState, bool) {
	return ap.state, ap.state != nil
}

// StateMust returns the state for [AcmpcaPolicy]. Panics if the state is nil.
func (ap *AcmpcaPolicy) StateMust() *acmpcaPolicyState {
	if ap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ap.Type(), ap.LocalName()))
	}
	return ap.state
}

// AcmpcaPolicyArgs contains the configurations for aws_acmpca_policy.
type AcmpcaPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
}
type acmpcaPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_acmpca_policy.
func (ap acmpcaPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_acmpca_policy.
func (ap acmpcaPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("policy"))
}

// ResourceArn returns a reference to field resource_arn of aws_acmpca_policy.
func (ap acmpcaPolicyAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("resource_arn"))
}

type acmpcaPolicyState struct {
	Id          string `json:"id"`
	Policy      string `json:"policy"`
	ResourceArn string `json:"resource_arn"`
}
