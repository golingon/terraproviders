// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	datacodecatalystdevenvironment "github.com/golingon/terraproviders/aws/5.22.0/datacodecatalystdevenvironment"
	"github.com/volvo-cars/lingon/pkg/terra"
)

// NewDataCodecatalystDevEnvironment creates a new instance of [DataCodecatalystDevEnvironment].
func NewDataCodecatalystDevEnvironment(name string, args DataCodecatalystDevEnvironmentArgs) *DataCodecatalystDevEnvironment {
	return &DataCodecatalystDevEnvironment{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataCodecatalystDevEnvironment)(nil)

// DataCodecatalystDevEnvironment represents the Terraform data resource aws_codecatalyst_dev_environment.
type DataCodecatalystDevEnvironment struct {
	Name string
	Args DataCodecatalystDevEnvironmentArgs
}

// DataSource returns the Terraform object type for [DataCodecatalystDevEnvironment].
func (cde *DataCodecatalystDevEnvironment) DataSource() string {
	return "aws_codecatalyst_dev_environment"
}

// LocalName returns the local name for [DataCodecatalystDevEnvironment].
func (cde *DataCodecatalystDevEnvironment) LocalName() string {
	return cde.Name
}

// Configuration returns the configuration (args) for [DataCodecatalystDevEnvironment].
func (cde *DataCodecatalystDevEnvironment) Configuration() interface{} {
	return cde.Args
}

// Attributes returns the attributes for [DataCodecatalystDevEnvironment].
func (cde *DataCodecatalystDevEnvironment) Attributes() dataCodecatalystDevEnvironmentAttributes {
	return dataCodecatalystDevEnvironmentAttributes{ref: terra.ReferenceDataResource(cde)}
}

// DataCodecatalystDevEnvironmentArgs contains the configurations for aws_codecatalyst_dev_environment.
type DataCodecatalystDevEnvironmentArgs struct {
	// Alias: string, optional
	Alias terra.StringValue `hcl:"alias,attr"`
	// CreatorId: string, optional
	CreatorId terra.StringValue `hcl:"creator_id,attr"`
	// EnvId: string, required
	EnvId terra.StringValue `hcl:"env_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProjectName: string, required
	ProjectName terra.StringValue `hcl:"project_name,attr" validate:"required"`
	// SpaceName: string, required
	SpaceName terra.StringValue `hcl:"space_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Ides: min=0
	Ides []datacodecatalystdevenvironment.Ides `hcl:"ides,block" validate:"min=0"`
	// PersistentStorage: min=0
	PersistentStorage []datacodecatalystdevenvironment.PersistentStorage `hcl:"persistent_storage,block" validate:"min=0"`
	// Repositories: min=0,max=100
	Repositories []datacodecatalystdevenvironment.Repositories `hcl:"repositories,block" validate:"min=0,max=100"`
}
type dataCodecatalystDevEnvironmentAttributes struct {
	ref terra.Reference
}

// Alias returns a reference to field alias of aws_codecatalyst_dev_environment.
func (cde dataCodecatalystDevEnvironmentAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(cde.ref.Append("alias"))
}

// CreatorId returns a reference to field creator_id of aws_codecatalyst_dev_environment.
func (cde dataCodecatalystDevEnvironmentAttributes) CreatorId() terra.StringValue {
	return terra.ReferenceAsString(cde.ref.Append("creator_id"))
}

// EnvId returns a reference to field env_id of aws_codecatalyst_dev_environment.
func (cde dataCodecatalystDevEnvironmentAttributes) EnvId() terra.StringValue {
	return terra.ReferenceAsString(cde.ref.Append("env_id"))
}

// Id returns a reference to field id of aws_codecatalyst_dev_environment.
func (cde dataCodecatalystDevEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cde.ref.Append("id"))
}

// InactivityTimeoutMinutes returns a reference to field inactivity_timeout_minutes of aws_codecatalyst_dev_environment.
func (cde dataCodecatalystDevEnvironmentAttributes) InactivityTimeoutMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(cde.ref.Append("inactivity_timeout_minutes"))
}

// InstanceType returns a reference to field instance_type of aws_codecatalyst_dev_environment.
func (cde dataCodecatalystDevEnvironmentAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(cde.ref.Append("instance_type"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_codecatalyst_dev_environment.
func (cde dataCodecatalystDevEnvironmentAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(cde.ref.Append("last_updated_time"))
}

// ProjectName returns a reference to field project_name of aws_codecatalyst_dev_environment.
func (cde dataCodecatalystDevEnvironmentAttributes) ProjectName() terra.StringValue {
	return terra.ReferenceAsString(cde.ref.Append("project_name"))
}

// SpaceName returns a reference to field space_name of aws_codecatalyst_dev_environment.
func (cde dataCodecatalystDevEnvironmentAttributes) SpaceName() terra.StringValue {
	return terra.ReferenceAsString(cde.ref.Append("space_name"))
}

// Status returns a reference to field status of aws_codecatalyst_dev_environment.
func (cde dataCodecatalystDevEnvironmentAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(cde.ref.Append("status"))
}

// StatusReason returns a reference to field status_reason of aws_codecatalyst_dev_environment.
func (cde dataCodecatalystDevEnvironmentAttributes) StatusReason() terra.StringValue {
	return terra.ReferenceAsString(cde.ref.Append("status_reason"))
}

// Tags returns a reference to field tags of aws_codecatalyst_dev_environment.
func (cde dataCodecatalystDevEnvironmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cde.ref.Append("tags"))
}

func (cde dataCodecatalystDevEnvironmentAttributes) Ides() terra.ListValue[datacodecatalystdevenvironment.IdesAttributes] {
	return terra.ReferenceAsList[datacodecatalystdevenvironment.IdesAttributes](cde.ref.Append("ides"))
}

func (cde dataCodecatalystDevEnvironmentAttributes) PersistentStorage() terra.ListValue[datacodecatalystdevenvironment.PersistentStorageAttributes] {
	return terra.ReferenceAsList[datacodecatalystdevenvironment.PersistentStorageAttributes](cde.ref.Append("persistent_storage"))
}

func (cde dataCodecatalystDevEnvironmentAttributes) Repositories() terra.ListValue[datacodecatalystdevenvironment.RepositoriesAttributes] {
	return terra.ReferenceAsList[datacodecatalystdevenvironment.RepositoriesAttributes](cde.ref.Append("repositories"))
}
