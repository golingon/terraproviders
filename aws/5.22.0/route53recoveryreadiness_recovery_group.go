// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	route53recoveryreadinessrecoverygroup "github.com/golingon/terraproviders/aws/5.22.0/route53recoveryreadinessrecoverygroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewRoute53RecoveryreadinessRecoveryGroup creates a new instance of [Route53RecoveryreadinessRecoveryGroup].
func NewRoute53RecoveryreadinessRecoveryGroup(name string, args Route53RecoveryreadinessRecoveryGroupArgs) *Route53RecoveryreadinessRecoveryGroup {
	return &Route53RecoveryreadinessRecoveryGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53RecoveryreadinessRecoveryGroup)(nil)

// Route53RecoveryreadinessRecoveryGroup represents the Terraform resource aws_route53recoveryreadiness_recovery_group.
type Route53RecoveryreadinessRecoveryGroup struct {
	Name      string
	Args      Route53RecoveryreadinessRecoveryGroupArgs
	state     *route53RecoveryreadinessRecoveryGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Route53RecoveryreadinessRecoveryGroup].
func (rrg *Route53RecoveryreadinessRecoveryGroup) Type() string {
	return "aws_route53recoveryreadiness_recovery_group"
}

// LocalName returns the local name for [Route53RecoveryreadinessRecoveryGroup].
func (rrg *Route53RecoveryreadinessRecoveryGroup) LocalName() string {
	return rrg.Name
}

// Configuration returns the configuration (args) for [Route53RecoveryreadinessRecoveryGroup].
func (rrg *Route53RecoveryreadinessRecoveryGroup) Configuration() interface{} {
	return rrg.Args
}

// DependOn is used for other resources to depend on [Route53RecoveryreadinessRecoveryGroup].
func (rrg *Route53RecoveryreadinessRecoveryGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(rrg)
}

// Dependencies returns the list of resources [Route53RecoveryreadinessRecoveryGroup] depends_on.
func (rrg *Route53RecoveryreadinessRecoveryGroup) Dependencies() terra.Dependencies {
	return rrg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Route53RecoveryreadinessRecoveryGroup].
func (rrg *Route53RecoveryreadinessRecoveryGroup) LifecycleManagement() *terra.Lifecycle {
	return rrg.Lifecycle
}

// Attributes returns the attributes for [Route53RecoveryreadinessRecoveryGroup].
func (rrg *Route53RecoveryreadinessRecoveryGroup) Attributes() route53RecoveryreadinessRecoveryGroupAttributes {
	return route53RecoveryreadinessRecoveryGroupAttributes{ref: terra.ReferenceResource(rrg)}
}

// ImportState imports the given attribute values into [Route53RecoveryreadinessRecoveryGroup]'s state.
func (rrg *Route53RecoveryreadinessRecoveryGroup) ImportState(av io.Reader) error {
	rrg.state = &route53RecoveryreadinessRecoveryGroupState{}
	if err := json.NewDecoder(av).Decode(rrg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrg.Type(), rrg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Route53RecoveryreadinessRecoveryGroup] has state.
func (rrg *Route53RecoveryreadinessRecoveryGroup) State() (*route53RecoveryreadinessRecoveryGroupState, bool) {
	return rrg.state, rrg.state != nil
}

// StateMust returns the state for [Route53RecoveryreadinessRecoveryGroup]. Panics if the state is nil.
func (rrg *Route53RecoveryreadinessRecoveryGroup) StateMust() *route53RecoveryreadinessRecoveryGroupState {
	if rrg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrg.Type(), rrg.LocalName()))
	}
	return rrg.state
}

// Route53RecoveryreadinessRecoveryGroupArgs contains the configurations for aws_route53recoveryreadiness_recovery_group.
type Route53RecoveryreadinessRecoveryGroupArgs struct {
	// Cells: list of string, optional
	Cells terra.ListValue[terra.StringValue] `hcl:"cells,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RecoveryGroupName: string, required
	RecoveryGroupName terra.StringValue `hcl:"recovery_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *route53recoveryreadinessrecoverygroup.Timeouts `hcl:"timeouts,block"`
}
type route53RecoveryreadinessRecoveryGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_route53recoveryreadiness_recovery_group.
func (rrg route53RecoveryreadinessRecoveryGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(rrg.ref.Append("arn"))
}

// Cells returns a reference to field cells of aws_route53recoveryreadiness_recovery_group.
func (rrg route53RecoveryreadinessRecoveryGroupAttributes) Cells() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rrg.ref.Append("cells"))
}

// Id returns a reference to field id of aws_route53recoveryreadiness_recovery_group.
func (rrg route53RecoveryreadinessRecoveryGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rrg.ref.Append("id"))
}

// RecoveryGroupName returns a reference to field recovery_group_name of aws_route53recoveryreadiness_recovery_group.
func (rrg route53RecoveryreadinessRecoveryGroupAttributes) RecoveryGroupName() terra.StringValue {
	return terra.ReferenceAsString(rrg.ref.Append("recovery_group_name"))
}

// Tags returns a reference to field tags of aws_route53recoveryreadiness_recovery_group.
func (rrg route53RecoveryreadinessRecoveryGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rrg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_route53recoveryreadiness_recovery_group.
func (rrg route53RecoveryreadinessRecoveryGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rrg.ref.Append("tags_all"))
}

func (rrg route53RecoveryreadinessRecoveryGroupAttributes) Timeouts() route53recoveryreadinessrecoverygroup.TimeoutsAttributes {
	return terra.ReferenceAsSingle[route53recoveryreadinessrecoverygroup.TimeoutsAttributes](rrg.ref.Append("timeouts"))
}

type route53RecoveryreadinessRecoveryGroupState struct {
	Arn               string                                               `json:"arn"`
	Cells             []string                                             `json:"cells"`
	Id                string                                               `json:"id"`
	RecoveryGroupName string                                               `json:"recovery_group_name"`
	Tags              map[string]string                                    `json:"tags"`
	TagsAll           map[string]string                                    `json:"tags_all"`
	Timeouts          *route53recoveryreadinessrecoverygroup.TimeoutsState `json:"timeouts"`
}
