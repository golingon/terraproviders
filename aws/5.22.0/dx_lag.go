// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDxLag creates a new instance of [DxLag].
func NewDxLag(name string, args DxLagArgs) *DxLag {
	return &DxLag{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DxLag)(nil)

// DxLag represents the Terraform resource aws_dx_lag.
type DxLag struct {
	Name      string
	Args      DxLagArgs
	state     *dxLagState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DxLag].
func (dl *DxLag) Type() string {
	return "aws_dx_lag"
}

// LocalName returns the local name for [DxLag].
func (dl *DxLag) LocalName() string {
	return dl.Name
}

// Configuration returns the configuration (args) for [DxLag].
func (dl *DxLag) Configuration() interface{} {
	return dl.Args
}

// DependOn is used for other resources to depend on [DxLag].
func (dl *DxLag) DependOn() terra.Reference {
	return terra.ReferenceResource(dl)
}

// Dependencies returns the list of resources [DxLag] depends_on.
func (dl *DxLag) Dependencies() terra.Dependencies {
	return dl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DxLag].
func (dl *DxLag) LifecycleManagement() *terra.Lifecycle {
	return dl.Lifecycle
}

// Attributes returns the attributes for [DxLag].
func (dl *DxLag) Attributes() dxLagAttributes {
	return dxLagAttributes{ref: terra.ReferenceResource(dl)}
}

// ImportState imports the given attribute values into [DxLag]'s state.
func (dl *DxLag) ImportState(av io.Reader) error {
	dl.state = &dxLagState{}
	if err := json.NewDecoder(av).Decode(dl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dl.Type(), dl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DxLag] has state.
func (dl *DxLag) State() (*dxLagState, bool) {
	return dl.state, dl.state != nil
}

// StateMust returns the state for [DxLag]. Panics if the state is nil.
func (dl *DxLag) StateMust() *dxLagState {
	if dl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dl.Type(), dl.LocalName()))
	}
	return dl.state
}

// DxLagArgs contains the configurations for aws_dx_lag.
type DxLagArgs struct {
	// ConnectionId: string, optional
	ConnectionId terra.StringValue `hcl:"connection_id,attr"`
	// ConnectionsBandwidth: string, required
	ConnectionsBandwidth terra.StringValue `hcl:"connections_bandwidth,attr" validate:"required"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProviderName: string, optional
	ProviderName terra.StringValue `hcl:"provider_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type dxLagAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_dx_lag.
func (dl dxLagAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("arn"))
}

// ConnectionId returns a reference to field connection_id of aws_dx_lag.
func (dl dxLagAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("connection_id"))
}

// ConnectionsBandwidth returns a reference to field connections_bandwidth of aws_dx_lag.
func (dl dxLagAttributes) ConnectionsBandwidth() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("connections_bandwidth"))
}

// ForceDestroy returns a reference to field force_destroy of aws_dx_lag.
func (dl dxLagAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(dl.ref.Append("force_destroy"))
}

// HasLogicalRedundancy returns a reference to field has_logical_redundancy of aws_dx_lag.
func (dl dxLagAttributes) HasLogicalRedundancy() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("has_logical_redundancy"))
}

// Id returns a reference to field id of aws_dx_lag.
func (dl dxLagAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("id"))
}

// JumboFrameCapable returns a reference to field jumbo_frame_capable of aws_dx_lag.
func (dl dxLagAttributes) JumboFrameCapable() terra.BoolValue {
	return terra.ReferenceAsBool(dl.ref.Append("jumbo_frame_capable"))
}

// Location returns a reference to field location of aws_dx_lag.
func (dl dxLagAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("location"))
}

// Name returns a reference to field name of aws_dx_lag.
func (dl dxLagAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("name"))
}

// OwnerAccountId returns a reference to field owner_account_id of aws_dx_lag.
func (dl dxLagAttributes) OwnerAccountId() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("owner_account_id"))
}

// ProviderName returns a reference to field provider_name of aws_dx_lag.
func (dl dxLagAttributes) ProviderName() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("provider_name"))
}

// Tags returns a reference to field tags of aws_dx_lag.
func (dl dxLagAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dl.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_dx_lag.
func (dl dxLagAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dl.ref.Append("tags_all"))
}

type dxLagState struct {
	Arn                  string            `json:"arn"`
	ConnectionId         string            `json:"connection_id"`
	ConnectionsBandwidth string            `json:"connections_bandwidth"`
	ForceDestroy         bool              `json:"force_destroy"`
	HasLogicalRedundancy string            `json:"has_logical_redundancy"`
	Id                   string            `json:"id"`
	JumboFrameCapable    bool              `json:"jumbo_frame_capable"`
	Location             string            `json:"location"`
	Name                 string            `json:"name"`
	OwnerAccountId       string            `json:"owner_account_id"`
	ProviderName         string            `json:"provider_name"`
	Tags                 map[string]string `json:"tags"`
	TagsAll              map[string]string `json:"tags_all"`
}
