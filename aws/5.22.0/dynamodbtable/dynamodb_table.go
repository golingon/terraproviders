// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dynamodbtable

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Attribute struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type GlobalSecondaryIndex struct {
	// HashKey: string, required
	HashKey terra.StringValue `hcl:"hash_key,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NonKeyAttributes: set of string, optional
	NonKeyAttributes terra.SetValue[terra.StringValue] `hcl:"non_key_attributes,attr"`
	// ProjectionType: string, required
	ProjectionType terra.StringValue `hcl:"projection_type,attr" validate:"required"`
	// RangeKey: string, optional
	RangeKey terra.StringValue `hcl:"range_key,attr"`
	// ReadCapacity: number, optional
	ReadCapacity terra.NumberValue `hcl:"read_capacity,attr"`
	// WriteCapacity: number, optional
	WriteCapacity terra.NumberValue `hcl:"write_capacity,attr"`
}

type ImportTable struct {
	// InputCompressionType: string, optional
	InputCompressionType terra.StringValue `hcl:"input_compression_type,attr"`
	// InputFormat: string, required
	InputFormat terra.StringValue `hcl:"input_format,attr" validate:"required"`
	// InputFormatOptions: optional
	InputFormatOptions *InputFormatOptions `hcl:"input_format_options,block"`
	// S3BucketSource: required
	S3BucketSource *S3BucketSource `hcl:"s3_bucket_source,block" validate:"required"`
}

type InputFormatOptions struct {
	// Csv: optional
	Csv *Csv `hcl:"csv,block"`
}

type Csv struct {
	// Delimiter: string, optional
	Delimiter terra.StringValue `hcl:"delimiter,attr"`
	// HeaderList: set of string, optional
	HeaderList terra.SetValue[terra.StringValue] `hcl:"header_list,attr"`
}

type S3BucketSource struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// BucketOwner: string, optional
	BucketOwner terra.StringValue `hcl:"bucket_owner,attr"`
	// KeyPrefix: string, optional
	KeyPrefix terra.StringValue `hcl:"key_prefix,attr"`
}

type LocalSecondaryIndex struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NonKeyAttributes: list of string, optional
	NonKeyAttributes terra.ListValue[terra.StringValue] `hcl:"non_key_attributes,attr"`
	// ProjectionType: string, required
	ProjectionType terra.StringValue `hcl:"projection_type,attr" validate:"required"`
	// RangeKey: string, required
	RangeKey terra.StringValue `hcl:"range_key,attr" validate:"required"`
}

type PointInTimeRecovery struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type Replica struct {
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// PointInTimeRecovery: bool, optional
	PointInTimeRecovery terra.BoolValue `hcl:"point_in_time_recovery,attr"`
	// PropagateTags: bool, optional
	PropagateTags terra.BoolValue `hcl:"propagate_tags,attr"`
	// RegionName: string, required
	RegionName terra.StringValue `hcl:"region_name,attr" validate:"required"`
}

type ServerSideEncryption struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Ttl struct {
	// AttributeName: string, required
	AttributeName terra.StringValue `hcl:"attribute_name,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type AttributeAttributes struct {
	ref terra.Reference
}

func (a AttributeAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AttributeAttributes) InternalWithRef(ref terra.Reference) AttributeAttributes {
	return AttributeAttributes{ref: ref}
}

func (a AttributeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a AttributeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a AttributeAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

type GlobalSecondaryIndexAttributes struct {
	ref terra.Reference
}

func (gsi GlobalSecondaryIndexAttributes) InternalRef() (terra.Reference, error) {
	return gsi.ref, nil
}

func (gsi GlobalSecondaryIndexAttributes) InternalWithRef(ref terra.Reference) GlobalSecondaryIndexAttributes {
	return GlobalSecondaryIndexAttributes{ref: ref}
}

func (gsi GlobalSecondaryIndexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gsi.ref.InternalTokens()
}

func (gsi GlobalSecondaryIndexAttributes) HashKey() terra.StringValue {
	return terra.ReferenceAsString(gsi.ref.Append("hash_key"))
}

func (gsi GlobalSecondaryIndexAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gsi.ref.Append("name"))
}

func (gsi GlobalSecondaryIndexAttributes) NonKeyAttributes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](gsi.ref.Append("non_key_attributes"))
}

func (gsi GlobalSecondaryIndexAttributes) ProjectionType() terra.StringValue {
	return terra.ReferenceAsString(gsi.ref.Append("projection_type"))
}

func (gsi GlobalSecondaryIndexAttributes) RangeKey() terra.StringValue {
	return terra.ReferenceAsString(gsi.ref.Append("range_key"))
}

func (gsi GlobalSecondaryIndexAttributes) ReadCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(gsi.ref.Append("read_capacity"))
}

func (gsi GlobalSecondaryIndexAttributes) WriteCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(gsi.ref.Append("write_capacity"))
}

type ImportTableAttributes struct {
	ref terra.Reference
}

func (it ImportTableAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it ImportTableAttributes) InternalWithRef(ref terra.Reference) ImportTableAttributes {
	return ImportTableAttributes{ref: ref}
}

func (it ImportTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it ImportTableAttributes) InputCompressionType() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("input_compression_type"))
}

func (it ImportTableAttributes) InputFormat() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("input_format"))
}

func (it ImportTableAttributes) InputFormatOptions() terra.ListValue[InputFormatOptionsAttributes] {
	return terra.ReferenceAsList[InputFormatOptionsAttributes](it.ref.Append("input_format_options"))
}

func (it ImportTableAttributes) S3BucketSource() terra.ListValue[S3BucketSourceAttributes] {
	return terra.ReferenceAsList[S3BucketSourceAttributes](it.ref.Append("s3_bucket_source"))
}

type InputFormatOptionsAttributes struct {
	ref terra.Reference
}

func (ifo InputFormatOptionsAttributes) InternalRef() (terra.Reference, error) {
	return ifo.ref, nil
}

func (ifo InputFormatOptionsAttributes) InternalWithRef(ref terra.Reference) InputFormatOptionsAttributes {
	return InputFormatOptionsAttributes{ref: ref}
}

func (ifo InputFormatOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ifo.ref.InternalTokens()
}

func (ifo InputFormatOptionsAttributes) Csv() terra.ListValue[CsvAttributes] {
	return terra.ReferenceAsList[CsvAttributes](ifo.ref.Append("csv"))
}

type CsvAttributes struct {
	ref terra.Reference
}

func (c CsvAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CsvAttributes) InternalWithRef(ref terra.Reference) CsvAttributes {
	return CsvAttributes{ref: ref}
}

func (c CsvAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CsvAttributes) Delimiter() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("delimiter"))
}

func (c CsvAttributes) HeaderList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("header_list"))
}

type S3BucketSourceAttributes struct {
	ref terra.Reference
}

func (sbs S3BucketSourceAttributes) InternalRef() (terra.Reference, error) {
	return sbs.ref, nil
}

func (sbs S3BucketSourceAttributes) InternalWithRef(ref terra.Reference) S3BucketSourceAttributes {
	return S3BucketSourceAttributes{ref: ref}
}

func (sbs S3BucketSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sbs.ref.InternalTokens()
}

func (sbs S3BucketSourceAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(sbs.ref.Append("bucket"))
}

func (sbs S3BucketSourceAttributes) BucketOwner() terra.StringValue {
	return terra.ReferenceAsString(sbs.ref.Append("bucket_owner"))
}

func (sbs S3BucketSourceAttributes) KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(sbs.ref.Append("key_prefix"))
}

type LocalSecondaryIndexAttributes struct {
	ref terra.Reference
}

func (lsi LocalSecondaryIndexAttributes) InternalRef() (terra.Reference, error) {
	return lsi.ref, nil
}

func (lsi LocalSecondaryIndexAttributes) InternalWithRef(ref terra.Reference) LocalSecondaryIndexAttributes {
	return LocalSecondaryIndexAttributes{ref: ref}
}

func (lsi LocalSecondaryIndexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lsi.ref.InternalTokens()
}

func (lsi LocalSecondaryIndexAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lsi.ref.Append("name"))
}

func (lsi LocalSecondaryIndexAttributes) NonKeyAttributes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lsi.ref.Append("non_key_attributes"))
}

func (lsi LocalSecondaryIndexAttributes) ProjectionType() terra.StringValue {
	return terra.ReferenceAsString(lsi.ref.Append("projection_type"))
}

func (lsi LocalSecondaryIndexAttributes) RangeKey() terra.StringValue {
	return terra.ReferenceAsString(lsi.ref.Append("range_key"))
}

type PointInTimeRecoveryAttributes struct {
	ref terra.Reference
}

func (pitr PointInTimeRecoveryAttributes) InternalRef() (terra.Reference, error) {
	return pitr.ref, nil
}

func (pitr PointInTimeRecoveryAttributes) InternalWithRef(ref terra.Reference) PointInTimeRecoveryAttributes {
	return PointInTimeRecoveryAttributes{ref: ref}
}

func (pitr PointInTimeRecoveryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pitr.ref.InternalTokens()
}

func (pitr PointInTimeRecoveryAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pitr.ref.Append("enabled"))
}

type ReplicaAttributes struct {
	ref terra.Reference
}

func (r ReplicaAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ReplicaAttributes) InternalWithRef(ref terra.Reference) ReplicaAttributes {
	return ReplicaAttributes{ref: ref}
}

func (r ReplicaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ReplicaAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("arn"))
}

func (r ReplicaAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("kms_key_arn"))
}

func (r ReplicaAttributes) PointInTimeRecovery() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("point_in_time_recovery"))
}

func (r ReplicaAttributes) PropagateTags() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("propagate_tags"))
}

func (r ReplicaAttributes) RegionName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("region_name"))
}

func (r ReplicaAttributes) StreamArn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("stream_arn"))
}

func (r ReplicaAttributes) StreamLabel() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("stream_label"))
}

type ServerSideEncryptionAttributes struct {
	ref terra.Reference
}

func (sse ServerSideEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return sse.ref, nil
}

func (sse ServerSideEncryptionAttributes) InternalWithRef(ref terra.Reference) ServerSideEncryptionAttributes {
	return ServerSideEncryptionAttributes{ref: ref}
}

func (sse ServerSideEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sse.ref.InternalTokens()
}

func (sse ServerSideEncryptionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(sse.ref.Append("enabled"))
}

func (sse ServerSideEncryptionAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sse.ref.Append("kms_key_arn"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type TtlAttributes struct {
	ref terra.Reference
}

func (t TtlAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TtlAttributes) InternalWithRef(ref terra.Reference) TtlAttributes {
	return TtlAttributes{ref: ref}
}

func (t TtlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TtlAttributes) AttributeName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("attribute_name"))
}

func (t TtlAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("enabled"))
}

type AttributeState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type GlobalSecondaryIndexState struct {
	HashKey          string   `json:"hash_key"`
	Name             string   `json:"name"`
	NonKeyAttributes []string `json:"non_key_attributes"`
	ProjectionType   string   `json:"projection_type"`
	RangeKey         string   `json:"range_key"`
	ReadCapacity     float64  `json:"read_capacity"`
	WriteCapacity    float64  `json:"write_capacity"`
}

type ImportTableState struct {
	InputCompressionType string                    `json:"input_compression_type"`
	InputFormat          string                    `json:"input_format"`
	InputFormatOptions   []InputFormatOptionsState `json:"input_format_options"`
	S3BucketSource       []S3BucketSourceState     `json:"s3_bucket_source"`
}

type InputFormatOptionsState struct {
	Csv []CsvState `json:"csv"`
}

type CsvState struct {
	Delimiter  string   `json:"delimiter"`
	HeaderList []string `json:"header_list"`
}

type S3BucketSourceState struct {
	Bucket      string `json:"bucket"`
	BucketOwner string `json:"bucket_owner"`
	KeyPrefix   string `json:"key_prefix"`
}

type LocalSecondaryIndexState struct {
	Name             string   `json:"name"`
	NonKeyAttributes []string `json:"non_key_attributes"`
	ProjectionType   string   `json:"projection_type"`
	RangeKey         string   `json:"range_key"`
}

type PointInTimeRecoveryState struct {
	Enabled bool `json:"enabled"`
}

type ReplicaState struct {
	Arn                 string `json:"arn"`
	KmsKeyArn           string `json:"kms_key_arn"`
	PointInTimeRecovery bool   `json:"point_in_time_recovery"`
	PropagateTags       bool   `json:"propagate_tags"`
	RegionName          string `json:"region_name"`
	StreamArn           string `json:"stream_arn"`
	StreamLabel         string `json:"stream_label"`
}

type ServerSideEncryptionState struct {
	Enabled   bool   `json:"enabled"`
	KmsKeyArn string `json:"kms_key_arn"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TtlState struct {
	AttributeName string `json:"attribute_name"`
	Enabled       bool   `json:"enabled"`
}
