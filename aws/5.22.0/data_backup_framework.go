// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	databackupframework "github.com/golingon/terraproviders/aws/5.22.0/databackupframework"
	"github.com/volvo-cars/lingon/pkg/terra"
)

// NewDataBackupFramework creates a new instance of [DataBackupFramework].
func NewDataBackupFramework(name string, args DataBackupFrameworkArgs) *DataBackupFramework {
	return &DataBackupFramework{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataBackupFramework)(nil)

// DataBackupFramework represents the Terraform data resource aws_backup_framework.
type DataBackupFramework struct {
	Name string
	Args DataBackupFrameworkArgs
}

// DataSource returns the Terraform object type for [DataBackupFramework].
func (bf *DataBackupFramework) DataSource() string {
	return "aws_backup_framework"
}

// LocalName returns the local name for [DataBackupFramework].
func (bf *DataBackupFramework) LocalName() string {
	return bf.Name
}

// Configuration returns the configuration (args) for [DataBackupFramework].
func (bf *DataBackupFramework) Configuration() interface{} {
	return bf.Args
}

// Attributes returns the attributes for [DataBackupFramework].
func (bf *DataBackupFramework) Attributes() dataBackupFrameworkAttributes {
	return dataBackupFrameworkAttributes{ref: terra.ReferenceDataResource(bf)}
}

// DataBackupFrameworkArgs contains the configurations for aws_backup_framework.
type DataBackupFrameworkArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Control: min=0
	Control []databackupframework.Control `hcl:"control,block" validate:"min=0"`
}
type dataBackupFrameworkAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_backup_framework.
func (bf dataBackupFrameworkAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(bf.ref.Append("arn"))
}

// CreationTime returns a reference to field creation_time of aws_backup_framework.
func (bf dataBackupFrameworkAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceAsString(bf.ref.Append("creation_time"))
}

// DeploymentStatus returns a reference to field deployment_status of aws_backup_framework.
func (bf dataBackupFrameworkAttributes) DeploymentStatus() terra.StringValue {
	return terra.ReferenceAsString(bf.ref.Append("deployment_status"))
}

// Description returns a reference to field description of aws_backup_framework.
func (bf dataBackupFrameworkAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(bf.ref.Append("description"))
}

// Id returns a reference to field id of aws_backup_framework.
func (bf dataBackupFrameworkAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bf.ref.Append("id"))
}

// Name returns a reference to field name of aws_backup_framework.
func (bf dataBackupFrameworkAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(bf.ref.Append("name"))
}

// Status returns a reference to field status of aws_backup_framework.
func (bf dataBackupFrameworkAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(bf.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_backup_framework.
func (bf dataBackupFrameworkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](bf.ref.Append("tags"))
}

func (bf dataBackupFrameworkAttributes) Control() terra.SetValue[databackupframework.ControlAttributes] {
	return terra.ReferenceAsSet[databackupframework.ControlAttributes](bf.ref.Append("control"))
}
