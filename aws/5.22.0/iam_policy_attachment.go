// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewIamPolicyAttachment creates a new instance of [IamPolicyAttachment].
func NewIamPolicyAttachment(name string, args IamPolicyAttachmentArgs) *IamPolicyAttachment {
	return &IamPolicyAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamPolicyAttachment)(nil)

// IamPolicyAttachment represents the Terraform resource aws_iam_policy_attachment.
type IamPolicyAttachment struct {
	Name      string
	Args      IamPolicyAttachmentArgs
	state     *iamPolicyAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [IamPolicyAttachment].
func (ipa *IamPolicyAttachment) Type() string {
	return "aws_iam_policy_attachment"
}

// LocalName returns the local name for [IamPolicyAttachment].
func (ipa *IamPolicyAttachment) LocalName() string {
	return ipa.Name
}

// Configuration returns the configuration (args) for [IamPolicyAttachment].
func (ipa *IamPolicyAttachment) Configuration() interface{} {
	return ipa.Args
}

// DependOn is used for other resources to depend on [IamPolicyAttachment].
func (ipa *IamPolicyAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(ipa)
}

// Dependencies returns the list of resources [IamPolicyAttachment] depends_on.
func (ipa *IamPolicyAttachment) Dependencies() terra.Dependencies {
	return ipa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [IamPolicyAttachment].
func (ipa *IamPolicyAttachment) LifecycleManagement() *terra.Lifecycle {
	return ipa.Lifecycle
}

// Attributes returns the attributes for [IamPolicyAttachment].
func (ipa *IamPolicyAttachment) Attributes() iamPolicyAttachmentAttributes {
	return iamPolicyAttachmentAttributes{ref: terra.ReferenceResource(ipa)}
}

// ImportState imports the given attribute values into [IamPolicyAttachment]'s state.
func (ipa *IamPolicyAttachment) ImportState(av io.Reader) error {
	ipa.state = &iamPolicyAttachmentState{}
	if err := json.NewDecoder(av).Decode(ipa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ipa.Type(), ipa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [IamPolicyAttachment] has state.
func (ipa *IamPolicyAttachment) State() (*iamPolicyAttachmentState, bool) {
	return ipa.state, ipa.state != nil
}

// StateMust returns the state for [IamPolicyAttachment]. Panics if the state is nil.
func (ipa *IamPolicyAttachment) StateMust() *iamPolicyAttachmentState {
	if ipa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ipa.Type(), ipa.LocalName()))
	}
	return ipa.state
}

// IamPolicyAttachmentArgs contains the configurations for aws_iam_policy_attachment.
type IamPolicyAttachmentArgs struct {
	// Groups: set of string, optional
	Groups terra.SetValue[terra.StringValue] `hcl:"groups,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyArn: string, required
	PolicyArn terra.StringValue `hcl:"policy_arn,attr" validate:"required"`
	// Roles: set of string, optional
	Roles terra.SetValue[terra.StringValue] `hcl:"roles,attr"`
	// Users: set of string, optional
	Users terra.SetValue[terra.StringValue] `hcl:"users,attr"`
}
type iamPolicyAttachmentAttributes struct {
	ref terra.Reference
}

// Groups returns a reference to field groups of aws_iam_policy_attachment.
func (ipa iamPolicyAttachmentAttributes) Groups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ipa.ref.Append("groups"))
}

// Id returns a reference to field id of aws_iam_policy_attachment.
func (ipa iamPolicyAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ipa.ref.Append("id"))
}

// Name returns a reference to field name of aws_iam_policy_attachment.
func (ipa iamPolicyAttachmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ipa.ref.Append("name"))
}

// PolicyArn returns a reference to field policy_arn of aws_iam_policy_attachment.
func (ipa iamPolicyAttachmentAttributes) PolicyArn() terra.StringValue {
	return terra.ReferenceAsString(ipa.ref.Append("policy_arn"))
}

// Roles returns a reference to field roles of aws_iam_policy_attachment.
func (ipa iamPolicyAttachmentAttributes) Roles() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ipa.ref.Append("roles"))
}

// Users returns a reference to field users of aws_iam_policy_attachment.
func (ipa iamPolicyAttachmentAttributes) Users() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ipa.ref.Append("users"))
}

type iamPolicyAttachmentState struct {
	Groups    []string `json:"groups"`
	Id        string   `json:"id"`
	Name      string   `json:"name"`
	PolicyArn string   `json:"policy_arn"`
	Roles     []string `json:"roles"`
	Users     []string `json:"users"`
}
