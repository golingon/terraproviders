// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dmsreplicationconfig "github.com/golingon/terraproviders/aws/5.22.0/dmsreplicationconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDmsReplicationConfig creates a new instance of [DmsReplicationConfig].
func NewDmsReplicationConfig(name string, args DmsReplicationConfigArgs) *DmsReplicationConfig {
	return &DmsReplicationConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DmsReplicationConfig)(nil)

// DmsReplicationConfig represents the Terraform resource aws_dms_replication_config.
type DmsReplicationConfig struct {
	Name      string
	Args      DmsReplicationConfigArgs
	state     *dmsReplicationConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DmsReplicationConfig].
func (drc *DmsReplicationConfig) Type() string {
	return "aws_dms_replication_config"
}

// LocalName returns the local name for [DmsReplicationConfig].
func (drc *DmsReplicationConfig) LocalName() string {
	return drc.Name
}

// Configuration returns the configuration (args) for [DmsReplicationConfig].
func (drc *DmsReplicationConfig) Configuration() interface{} {
	return drc.Args
}

// DependOn is used for other resources to depend on [DmsReplicationConfig].
func (drc *DmsReplicationConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(drc)
}

// Dependencies returns the list of resources [DmsReplicationConfig] depends_on.
func (drc *DmsReplicationConfig) Dependencies() terra.Dependencies {
	return drc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DmsReplicationConfig].
func (drc *DmsReplicationConfig) LifecycleManagement() *terra.Lifecycle {
	return drc.Lifecycle
}

// Attributes returns the attributes for [DmsReplicationConfig].
func (drc *DmsReplicationConfig) Attributes() dmsReplicationConfigAttributes {
	return dmsReplicationConfigAttributes{ref: terra.ReferenceResource(drc)}
}

// ImportState imports the given attribute values into [DmsReplicationConfig]'s state.
func (drc *DmsReplicationConfig) ImportState(av io.Reader) error {
	drc.state = &dmsReplicationConfigState{}
	if err := json.NewDecoder(av).Decode(drc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", drc.Type(), drc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DmsReplicationConfig] has state.
func (drc *DmsReplicationConfig) State() (*dmsReplicationConfigState, bool) {
	return drc.state, drc.state != nil
}

// StateMust returns the state for [DmsReplicationConfig]. Panics if the state is nil.
func (drc *DmsReplicationConfig) StateMust() *dmsReplicationConfigState {
	if drc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", drc.Type(), drc.LocalName()))
	}
	return drc.state
}

// DmsReplicationConfigArgs contains the configurations for aws_dms_replication_config.
type DmsReplicationConfigArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ReplicationConfigIdentifier: string, required
	ReplicationConfigIdentifier terra.StringValue `hcl:"replication_config_identifier,attr" validate:"required"`
	// ReplicationSettings: string, optional
	ReplicationSettings terra.StringValue `hcl:"replication_settings,attr"`
	// ReplicationType: string, required
	ReplicationType terra.StringValue `hcl:"replication_type,attr" validate:"required"`
	// ResourceIdentifier: string, optional
	ResourceIdentifier terra.StringValue `hcl:"resource_identifier,attr"`
	// SourceEndpointArn: string, required
	SourceEndpointArn terra.StringValue `hcl:"source_endpoint_arn,attr" validate:"required"`
	// StartReplication: bool, optional
	StartReplication terra.BoolValue `hcl:"start_replication,attr"`
	// SupplementalSettings: string, optional
	SupplementalSettings terra.StringValue `hcl:"supplemental_settings,attr"`
	// TableMappings: string, required
	TableMappings terra.StringValue `hcl:"table_mappings,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetEndpointArn: string, required
	TargetEndpointArn terra.StringValue `hcl:"target_endpoint_arn,attr" validate:"required"`
	// ComputeConfig: required
	ComputeConfig *dmsreplicationconfig.ComputeConfig `hcl:"compute_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *dmsreplicationconfig.Timeouts `hcl:"timeouts,block"`
}
type dmsReplicationConfigAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_dms_replication_config.
func (drc dmsReplicationConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(drc.ref.Append("arn"))
}

// Id returns a reference to field id of aws_dms_replication_config.
func (drc dmsReplicationConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(drc.ref.Append("id"))
}

// ReplicationConfigIdentifier returns a reference to field replication_config_identifier of aws_dms_replication_config.
func (drc dmsReplicationConfigAttributes) ReplicationConfigIdentifier() terra.StringValue {
	return terra.ReferenceAsString(drc.ref.Append("replication_config_identifier"))
}

// ReplicationSettings returns a reference to field replication_settings of aws_dms_replication_config.
func (drc dmsReplicationConfigAttributes) ReplicationSettings() terra.StringValue {
	return terra.ReferenceAsString(drc.ref.Append("replication_settings"))
}

// ReplicationType returns a reference to field replication_type of aws_dms_replication_config.
func (drc dmsReplicationConfigAttributes) ReplicationType() terra.StringValue {
	return terra.ReferenceAsString(drc.ref.Append("replication_type"))
}

// ResourceIdentifier returns a reference to field resource_identifier of aws_dms_replication_config.
func (drc dmsReplicationConfigAttributes) ResourceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(drc.ref.Append("resource_identifier"))
}

// SourceEndpointArn returns a reference to field source_endpoint_arn of aws_dms_replication_config.
func (drc dmsReplicationConfigAttributes) SourceEndpointArn() terra.StringValue {
	return terra.ReferenceAsString(drc.ref.Append("source_endpoint_arn"))
}

// StartReplication returns a reference to field start_replication of aws_dms_replication_config.
func (drc dmsReplicationConfigAttributes) StartReplication() terra.BoolValue {
	return terra.ReferenceAsBool(drc.ref.Append("start_replication"))
}

// SupplementalSettings returns a reference to field supplemental_settings of aws_dms_replication_config.
func (drc dmsReplicationConfigAttributes) SupplementalSettings() terra.StringValue {
	return terra.ReferenceAsString(drc.ref.Append("supplemental_settings"))
}

// TableMappings returns a reference to field table_mappings of aws_dms_replication_config.
func (drc dmsReplicationConfigAttributes) TableMappings() terra.StringValue {
	return terra.ReferenceAsString(drc.ref.Append("table_mappings"))
}

// Tags returns a reference to field tags of aws_dms_replication_config.
func (drc dmsReplicationConfigAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](drc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_dms_replication_config.
func (drc dmsReplicationConfigAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](drc.ref.Append("tags_all"))
}

// TargetEndpointArn returns a reference to field target_endpoint_arn of aws_dms_replication_config.
func (drc dmsReplicationConfigAttributes) TargetEndpointArn() terra.StringValue {
	return terra.ReferenceAsString(drc.ref.Append("target_endpoint_arn"))
}

func (drc dmsReplicationConfigAttributes) ComputeConfig() terra.ListValue[dmsreplicationconfig.ComputeConfigAttributes] {
	return terra.ReferenceAsList[dmsreplicationconfig.ComputeConfigAttributes](drc.ref.Append("compute_config"))
}

func (drc dmsReplicationConfigAttributes) Timeouts() dmsreplicationconfig.TimeoutsAttributes {
	return terra.ReferenceAsSingle[dmsreplicationconfig.TimeoutsAttributes](drc.ref.Append("timeouts"))
}

type dmsReplicationConfigState struct {
	Arn                         string                                    `json:"arn"`
	Id                          string                                    `json:"id"`
	ReplicationConfigIdentifier string                                    `json:"replication_config_identifier"`
	ReplicationSettings         string                                    `json:"replication_settings"`
	ReplicationType             string                                    `json:"replication_type"`
	ResourceIdentifier          string                                    `json:"resource_identifier"`
	SourceEndpointArn           string                                    `json:"source_endpoint_arn"`
	StartReplication            bool                                      `json:"start_replication"`
	SupplementalSettings        string                                    `json:"supplemental_settings"`
	TableMappings               string                                    `json:"table_mappings"`
	Tags                        map[string]string                         `json:"tags"`
	TagsAll                     map[string]string                         `json:"tags_all"`
	TargetEndpointArn           string                                    `json:"target_endpoint_arn"`
	ComputeConfig               []dmsreplicationconfig.ComputeConfigState `json:"compute_config"`
	Timeouts                    *dmsreplicationconfig.TimeoutsState       `json:"timeouts"`
}
