// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3accesspoint "github.com/golingon/terraproviders/aws/5.22.0/s3accesspoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewS3AccessPoint creates a new instance of [S3AccessPoint].
func NewS3AccessPoint(name string, args S3AccessPointArgs) *S3AccessPoint {
	return &S3AccessPoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3AccessPoint)(nil)

// S3AccessPoint represents the Terraform resource aws_s3_access_point.
type S3AccessPoint struct {
	Name      string
	Args      S3AccessPointArgs
	state     *s3AccessPointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [S3AccessPoint].
func (sap *S3AccessPoint) Type() string {
	return "aws_s3_access_point"
}

// LocalName returns the local name for [S3AccessPoint].
func (sap *S3AccessPoint) LocalName() string {
	return sap.Name
}

// Configuration returns the configuration (args) for [S3AccessPoint].
func (sap *S3AccessPoint) Configuration() interface{} {
	return sap.Args
}

// DependOn is used for other resources to depend on [S3AccessPoint].
func (sap *S3AccessPoint) DependOn() terra.Reference {
	return terra.ReferenceResource(sap)
}

// Dependencies returns the list of resources [S3AccessPoint] depends_on.
func (sap *S3AccessPoint) Dependencies() terra.Dependencies {
	return sap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [S3AccessPoint].
func (sap *S3AccessPoint) LifecycleManagement() *terra.Lifecycle {
	return sap.Lifecycle
}

// Attributes returns the attributes for [S3AccessPoint].
func (sap *S3AccessPoint) Attributes() s3AccessPointAttributes {
	return s3AccessPointAttributes{ref: terra.ReferenceResource(sap)}
}

// ImportState imports the given attribute values into [S3AccessPoint]'s state.
func (sap *S3AccessPoint) ImportState(av io.Reader) error {
	sap.state = &s3AccessPointState{}
	if err := json.NewDecoder(av).Decode(sap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sap.Type(), sap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [S3AccessPoint] has state.
func (sap *S3AccessPoint) State() (*s3AccessPointState, bool) {
	return sap.state, sap.state != nil
}

// StateMust returns the state for [S3AccessPoint]. Panics if the state is nil.
func (sap *S3AccessPoint) StateMust() *s3AccessPointState {
	if sap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sap.Type(), sap.LocalName()))
	}
	return sap.state
}

// S3AccessPointArgs contains the configurations for aws_s3_access_point.
type S3AccessPointArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// BucketAccountId: string, optional
	BucketAccountId terra.StringValue `hcl:"bucket_account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
	// PublicAccessBlockConfiguration: optional
	PublicAccessBlockConfiguration *s3accesspoint.PublicAccessBlockConfiguration `hcl:"public_access_block_configuration,block"`
	// VpcConfiguration: optional
	VpcConfiguration *s3accesspoint.VpcConfiguration `hcl:"vpc_configuration,block"`
}
type s3AccessPointAttributes struct {
	ref terra.Reference
}

// AccountId returns a reference to field account_id of aws_s3_access_point.
func (sap s3AccessPointAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(sap.ref.Append("account_id"))
}

// Alias returns a reference to field alias of aws_s3_access_point.
func (sap s3AccessPointAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(sap.ref.Append("alias"))
}

// Arn returns a reference to field arn of aws_s3_access_point.
func (sap s3AccessPointAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(sap.ref.Append("arn"))
}

// Bucket returns a reference to field bucket of aws_s3_access_point.
func (sap s3AccessPointAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(sap.ref.Append("bucket"))
}

// BucketAccountId returns a reference to field bucket_account_id of aws_s3_access_point.
func (sap s3AccessPointAttributes) BucketAccountId() terra.StringValue {
	return terra.ReferenceAsString(sap.ref.Append("bucket_account_id"))
}

// DomainName returns a reference to field domain_name of aws_s3_access_point.
func (sap s3AccessPointAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(sap.ref.Append("domain_name"))
}

// Endpoints returns a reference to field endpoints of aws_s3_access_point.
func (sap s3AccessPointAttributes) Endpoints() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sap.ref.Append("endpoints"))
}

// HasPublicAccessPolicy returns a reference to field has_public_access_policy of aws_s3_access_point.
func (sap s3AccessPointAttributes) HasPublicAccessPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(sap.ref.Append("has_public_access_policy"))
}

// Id returns a reference to field id of aws_s3_access_point.
func (sap s3AccessPointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sap.ref.Append("id"))
}

// Name returns a reference to field name of aws_s3_access_point.
func (sap s3AccessPointAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sap.ref.Append("name"))
}

// NetworkOrigin returns a reference to field network_origin of aws_s3_access_point.
func (sap s3AccessPointAttributes) NetworkOrigin() terra.StringValue {
	return terra.ReferenceAsString(sap.ref.Append("network_origin"))
}

// Policy returns a reference to field policy of aws_s3_access_point.
func (sap s3AccessPointAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(sap.ref.Append("policy"))
}

func (sap s3AccessPointAttributes) PublicAccessBlockConfiguration() terra.ListValue[s3accesspoint.PublicAccessBlockConfigurationAttributes] {
	return terra.ReferenceAsList[s3accesspoint.PublicAccessBlockConfigurationAttributes](sap.ref.Append("public_access_block_configuration"))
}

func (sap s3AccessPointAttributes) VpcConfiguration() terra.ListValue[s3accesspoint.VpcConfigurationAttributes] {
	return terra.ReferenceAsList[s3accesspoint.VpcConfigurationAttributes](sap.ref.Append("vpc_configuration"))
}

type s3AccessPointState struct {
	AccountId                      string                                              `json:"account_id"`
	Alias                          string                                              `json:"alias"`
	Arn                            string                                              `json:"arn"`
	Bucket                         string                                              `json:"bucket"`
	BucketAccountId                string                                              `json:"bucket_account_id"`
	DomainName                     string                                              `json:"domain_name"`
	Endpoints                      map[string]string                                   `json:"endpoints"`
	HasPublicAccessPolicy          bool                                                `json:"has_public_access_policy"`
	Id                             string                                              `json:"id"`
	Name                           string                                              `json:"name"`
	NetworkOrigin                  string                                              `json:"network_origin"`
	Policy                         string                                              `json:"policy"`
	PublicAccessBlockConfiguration []s3accesspoint.PublicAccessBlockConfigurationState `json:"public_access_block_configuration"`
	VpcConfiguration               []s3accesspoint.VpcConfigurationState               `json:"vpc_configuration"`
}
