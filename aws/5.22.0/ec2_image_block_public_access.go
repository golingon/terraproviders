// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ec2imageblockpublicaccess "github.com/golingon/terraproviders/aws/5.22.0/ec2imageblockpublicaccess"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewEc2ImageBlockPublicAccess creates a new instance of [Ec2ImageBlockPublicAccess].
func NewEc2ImageBlockPublicAccess(name string, args Ec2ImageBlockPublicAccessArgs) *Ec2ImageBlockPublicAccess {
	return &Ec2ImageBlockPublicAccess{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2ImageBlockPublicAccess)(nil)

// Ec2ImageBlockPublicAccess represents the Terraform resource aws_ec2_image_block_public_access.
type Ec2ImageBlockPublicAccess struct {
	Name      string
	Args      Ec2ImageBlockPublicAccessArgs
	state     *ec2ImageBlockPublicAccessState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Ec2ImageBlockPublicAccess].
func (eibpa *Ec2ImageBlockPublicAccess) Type() string {
	return "aws_ec2_image_block_public_access"
}

// LocalName returns the local name for [Ec2ImageBlockPublicAccess].
func (eibpa *Ec2ImageBlockPublicAccess) LocalName() string {
	return eibpa.Name
}

// Configuration returns the configuration (args) for [Ec2ImageBlockPublicAccess].
func (eibpa *Ec2ImageBlockPublicAccess) Configuration() interface{} {
	return eibpa.Args
}

// DependOn is used for other resources to depend on [Ec2ImageBlockPublicAccess].
func (eibpa *Ec2ImageBlockPublicAccess) DependOn() terra.Reference {
	return terra.ReferenceResource(eibpa)
}

// Dependencies returns the list of resources [Ec2ImageBlockPublicAccess] depends_on.
func (eibpa *Ec2ImageBlockPublicAccess) Dependencies() terra.Dependencies {
	return eibpa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Ec2ImageBlockPublicAccess].
func (eibpa *Ec2ImageBlockPublicAccess) LifecycleManagement() *terra.Lifecycle {
	return eibpa.Lifecycle
}

// Attributes returns the attributes for [Ec2ImageBlockPublicAccess].
func (eibpa *Ec2ImageBlockPublicAccess) Attributes() ec2ImageBlockPublicAccessAttributes {
	return ec2ImageBlockPublicAccessAttributes{ref: terra.ReferenceResource(eibpa)}
}

// ImportState imports the given attribute values into [Ec2ImageBlockPublicAccess]'s state.
func (eibpa *Ec2ImageBlockPublicAccess) ImportState(av io.Reader) error {
	eibpa.state = &ec2ImageBlockPublicAccessState{}
	if err := json.NewDecoder(av).Decode(eibpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", eibpa.Type(), eibpa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Ec2ImageBlockPublicAccess] has state.
func (eibpa *Ec2ImageBlockPublicAccess) State() (*ec2ImageBlockPublicAccessState, bool) {
	return eibpa.state, eibpa.state != nil
}

// StateMust returns the state for [Ec2ImageBlockPublicAccess]. Panics if the state is nil.
func (eibpa *Ec2ImageBlockPublicAccess) StateMust() *ec2ImageBlockPublicAccessState {
	if eibpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", eibpa.Type(), eibpa.LocalName()))
	}
	return eibpa.state
}

// Ec2ImageBlockPublicAccessArgs contains the configurations for aws_ec2_image_block_public_access.
type Ec2ImageBlockPublicAccessArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// State: string, required
	State terra.StringValue `hcl:"state,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *ec2imageblockpublicaccess.Timeouts `hcl:"timeouts,block"`
}
type ec2ImageBlockPublicAccessAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ec2_image_block_public_access.
func (eibpa ec2ImageBlockPublicAccessAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(eibpa.ref.Append("id"))
}

// State returns a reference to field state of aws_ec2_image_block_public_access.
func (eibpa ec2ImageBlockPublicAccessAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(eibpa.ref.Append("state"))
}

func (eibpa ec2ImageBlockPublicAccessAttributes) Timeouts() ec2imageblockpublicaccess.TimeoutsAttributes {
	return terra.ReferenceAsSingle[ec2imageblockpublicaccess.TimeoutsAttributes](eibpa.ref.Append("timeouts"))
}

type ec2ImageBlockPublicAccessState struct {
	Id       string                                   `json:"id"`
	State    string                                   `json:"state"`
	Timeouts *ec2imageblockpublicaccess.TimeoutsState `json:"timeouts"`
}
