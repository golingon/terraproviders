// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	appflowflow "github.com/golingon/terraproviders/aws/5.22.0/appflowflow"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAppflowFlow creates a new instance of [AppflowFlow].
func NewAppflowFlow(name string, args AppflowFlowArgs) *AppflowFlow {
	return &AppflowFlow{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppflowFlow)(nil)

// AppflowFlow represents the Terraform resource aws_appflow_flow.
type AppflowFlow struct {
	Name      string
	Args      AppflowFlowArgs
	state     *appflowFlowState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AppflowFlow].
func (af *AppflowFlow) Type() string {
	return "aws_appflow_flow"
}

// LocalName returns the local name for [AppflowFlow].
func (af *AppflowFlow) LocalName() string {
	return af.Name
}

// Configuration returns the configuration (args) for [AppflowFlow].
func (af *AppflowFlow) Configuration() interface{} {
	return af.Args
}

// DependOn is used for other resources to depend on [AppflowFlow].
func (af *AppflowFlow) DependOn() terra.Reference {
	return terra.ReferenceResource(af)
}

// Dependencies returns the list of resources [AppflowFlow] depends_on.
func (af *AppflowFlow) Dependencies() terra.Dependencies {
	return af.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AppflowFlow].
func (af *AppflowFlow) LifecycleManagement() *terra.Lifecycle {
	return af.Lifecycle
}

// Attributes returns the attributes for [AppflowFlow].
func (af *AppflowFlow) Attributes() appflowFlowAttributes {
	return appflowFlowAttributes{ref: terra.ReferenceResource(af)}
}

// ImportState imports the given attribute values into [AppflowFlow]'s state.
func (af *AppflowFlow) ImportState(av io.Reader) error {
	af.state = &appflowFlowState{}
	if err := json.NewDecoder(av).Decode(af.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", af.Type(), af.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AppflowFlow] has state.
func (af *AppflowFlow) State() (*appflowFlowState, bool) {
	return af.state, af.state != nil
}

// StateMust returns the state for [AppflowFlow]. Panics if the state is nil.
func (af *AppflowFlow) StateMust() *appflowFlowState {
	if af.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", af.Type(), af.LocalName()))
	}
	return af.state
}

// AppflowFlowArgs contains the configurations for aws_appflow_flow.
type AppflowFlowArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsArn: string, optional
	KmsArn terra.StringValue `hcl:"kms_arn,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DestinationFlowConfig: min=1
	DestinationFlowConfig []appflowflow.DestinationFlowConfig `hcl:"destination_flow_config,block" validate:"min=1"`
	// SourceFlowConfig: required
	SourceFlowConfig *appflowflow.SourceFlowConfig `hcl:"source_flow_config,block" validate:"required"`
	// Task: min=1
	Task []appflowflow.Task `hcl:"task,block" validate:"min=1"`
	// TriggerConfig: required
	TriggerConfig *appflowflow.TriggerConfig `hcl:"trigger_config,block" validate:"required"`
}
type appflowFlowAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_appflow_flow.
func (af appflowFlowAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("arn"))
}

// Description returns a reference to field description of aws_appflow_flow.
func (af appflowFlowAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("description"))
}

// Id returns a reference to field id of aws_appflow_flow.
func (af appflowFlowAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("id"))
}

// KmsArn returns a reference to field kms_arn of aws_appflow_flow.
func (af appflowFlowAttributes) KmsArn() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("kms_arn"))
}

// Name returns a reference to field name of aws_appflow_flow.
func (af appflowFlowAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(af.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_appflow_flow.
func (af appflowFlowAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](af.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_appflow_flow.
func (af appflowFlowAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](af.ref.Append("tags_all"))
}

func (af appflowFlowAttributes) DestinationFlowConfig() terra.SetValue[appflowflow.DestinationFlowConfigAttributes] {
	return terra.ReferenceAsSet[appflowflow.DestinationFlowConfigAttributes](af.ref.Append("destination_flow_config"))
}

func (af appflowFlowAttributes) SourceFlowConfig() terra.ListValue[appflowflow.SourceFlowConfigAttributes] {
	return terra.ReferenceAsList[appflowflow.SourceFlowConfigAttributes](af.ref.Append("source_flow_config"))
}

func (af appflowFlowAttributes) Task() terra.SetValue[appflowflow.TaskAttributes] {
	return terra.ReferenceAsSet[appflowflow.TaskAttributes](af.ref.Append("task"))
}

func (af appflowFlowAttributes) TriggerConfig() terra.ListValue[appflowflow.TriggerConfigAttributes] {
	return terra.ReferenceAsList[appflowflow.TriggerConfigAttributes](af.ref.Append("trigger_config"))
}

type appflowFlowState struct {
	Arn                   string                                   `json:"arn"`
	Description           string                                   `json:"description"`
	Id                    string                                   `json:"id"`
	KmsArn                string                                   `json:"kms_arn"`
	Name                  string                                   `json:"name"`
	Tags                  map[string]string                        `json:"tags"`
	TagsAll               map[string]string                        `json:"tags_all"`
	DestinationFlowConfig []appflowflow.DestinationFlowConfigState `json:"destination_flow_config"`
	SourceFlowConfig      []appflowflow.SourceFlowConfigState      `json:"source_flow_config"`
	Task                  []appflowflow.TaskState                  `json:"task"`
	TriggerConfig         []appflowflow.TriggerConfigState         `json:"trigger_config"`
}
