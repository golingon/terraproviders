// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataec2transitgatewayroutetableroutes

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Routes struct{}

type Filter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values: set of string, required
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type RoutesAttributes struct {
	ref terra.Reference
}

func (r RoutesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RoutesAttributes) InternalWithRef(ref terra.Reference) RoutesAttributes {
	return RoutesAttributes{ref: ref}
}

func (r RoutesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RoutesAttributes) DestinationCidrBlock() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("destination_cidr_block"))
}

func (r RoutesAttributes) PrefixListId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("prefix_list_id"))
}

func (r RoutesAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("state"))
}

func (r RoutesAttributes) TransitGatewayRouteTableAnnouncementId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("transit_gateway_route_table_announcement_id"))
}

func (r RoutesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("type"))
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f FilterAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](f.ref.Append("values"))
}

type RoutesState struct {
	DestinationCidrBlock                   string `json:"destination_cidr_block"`
	PrefixListId                           string `json:"prefix_list_id"`
	State                                  string `json:"state"`
	TransitGatewayRouteTableAnnouncementId string `json:"transit_gateway_route_table_announcement_id"`
	Type                                   string `json:"type"`
}

type FilterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}
