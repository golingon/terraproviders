// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dbinstance

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ListenerEndpoint struct{}

type MasterUserSecret struct{}

type BlueGreenUpdate struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type RestoreToPointInTime struct {
	// RestoreTime: string, optional
	RestoreTime terra.StringValue `hcl:"restore_time,attr"`
	// SourceDbInstanceAutomatedBackupsArn: string, optional
	SourceDbInstanceAutomatedBackupsArn terra.StringValue `hcl:"source_db_instance_automated_backups_arn,attr"`
	// SourceDbInstanceIdentifier: string, optional
	SourceDbInstanceIdentifier terra.StringValue `hcl:"source_db_instance_identifier,attr"`
	// SourceDbiResourceId: string, optional
	SourceDbiResourceId terra.StringValue `hcl:"source_dbi_resource_id,attr"`
	// UseLatestRestorableTime: bool, optional
	UseLatestRestorableTime terra.BoolValue `hcl:"use_latest_restorable_time,attr"`
}

type S3Import struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// IngestionRole: string, required
	IngestionRole terra.StringValue `hcl:"ingestion_role,attr" validate:"required"`
	// SourceEngine: string, required
	SourceEngine terra.StringValue `hcl:"source_engine,attr" validate:"required"`
	// SourceEngineVersion: string, required
	SourceEngineVersion terra.StringValue `hcl:"source_engine_version,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ListenerEndpointAttributes struct {
	ref terra.Reference
}

func (le ListenerEndpointAttributes) InternalRef() (terra.Reference, error) {
	return le.ref, nil
}

func (le ListenerEndpointAttributes) InternalWithRef(ref terra.Reference) ListenerEndpointAttributes {
	return ListenerEndpointAttributes{ref: ref}
}

func (le ListenerEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return le.ref.InternalTokens()
}

func (le ListenerEndpointAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(le.ref.Append("address"))
}

func (le ListenerEndpointAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceAsString(le.ref.Append("hosted_zone_id"))
}

func (le ListenerEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(le.ref.Append("port"))
}

type MasterUserSecretAttributes struct {
	ref terra.Reference
}

func (mus MasterUserSecretAttributes) InternalRef() (terra.Reference, error) {
	return mus.ref, nil
}

func (mus MasterUserSecretAttributes) InternalWithRef(ref terra.Reference) MasterUserSecretAttributes {
	return MasterUserSecretAttributes{ref: ref}
}

func (mus MasterUserSecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mus.ref.InternalTokens()
}

func (mus MasterUserSecretAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(mus.ref.Append("kms_key_id"))
}

func (mus MasterUserSecretAttributes) SecretArn() terra.StringValue {
	return terra.ReferenceAsString(mus.ref.Append("secret_arn"))
}

func (mus MasterUserSecretAttributes) SecretStatus() terra.StringValue {
	return terra.ReferenceAsString(mus.ref.Append("secret_status"))
}

type BlueGreenUpdateAttributes struct {
	ref terra.Reference
}

func (bgu BlueGreenUpdateAttributes) InternalRef() (terra.Reference, error) {
	return bgu.ref, nil
}

func (bgu BlueGreenUpdateAttributes) InternalWithRef(ref terra.Reference) BlueGreenUpdateAttributes {
	return BlueGreenUpdateAttributes{ref: ref}
}

func (bgu BlueGreenUpdateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bgu.ref.InternalTokens()
}

func (bgu BlueGreenUpdateAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(bgu.ref.Append("enabled"))
}

type RestoreToPointInTimeAttributes struct {
	ref terra.Reference
}

func (rtpit RestoreToPointInTimeAttributes) InternalRef() (terra.Reference, error) {
	return rtpit.ref, nil
}

func (rtpit RestoreToPointInTimeAttributes) InternalWithRef(ref terra.Reference) RestoreToPointInTimeAttributes {
	return RestoreToPointInTimeAttributes{ref: ref}
}

func (rtpit RestoreToPointInTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rtpit.ref.InternalTokens()
}

func (rtpit RestoreToPointInTimeAttributes) RestoreTime() terra.StringValue {
	return terra.ReferenceAsString(rtpit.ref.Append("restore_time"))
}

func (rtpit RestoreToPointInTimeAttributes) SourceDbInstanceAutomatedBackupsArn() terra.StringValue {
	return terra.ReferenceAsString(rtpit.ref.Append("source_db_instance_automated_backups_arn"))
}

func (rtpit RestoreToPointInTimeAttributes) SourceDbInstanceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(rtpit.ref.Append("source_db_instance_identifier"))
}

func (rtpit RestoreToPointInTimeAttributes) SourceDbiResourceId() terra.StringValue {
	return terra.ReferenceAsString(rtpit.ref.Append("source_dbi_resource_id"))
}

func (rtpit RestoreToPointInTimeAttributes) UseLatestRestorableTime() terra.BoolValue {
	return terra.ReferenceAsBool(rtpit.ref.Append("use_latest_restorable_time"))
}

type S3ImportAttributes struct {
	ref terra.Reference
}

func (si S3ImportAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si S3ImportAttributes) InternalWithRef(ref terra.Reference) S3ImportAttributes {
	return S3ImportAttributes{ref: ref}
}

func (si S3ImportAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si S3ImportAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("bucket_name"))
}

func (si S3ImportAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("bucket_prefix"))
}

func (si S3ImportAttributes) IngestionRole() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("ingestion_role"))
}

func (si S3ImportAttributes) SourceEngine() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("source_engine"))
}

func (si S3ImportAttributes) SourceEngineVersion() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("source_engine_version"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ListenerEndpointState struct {
	Address      string  `json:"address"`
	HostedZoneId string  `json:"hosted_zone_id"`
	Port         float64 `json:"port"`
}

type MasterUserSecretState struct {
	KmsKeyId     string `json:"kms_key_id"`
	SecretArn    string `json:"secret_arn"`
	SecretStatus string `json:"secret_status"`
}

type BlueGreenUpdateState struct {
	Enabled bool `json:"enabled"`
}

type RestoreToPointInTimeState struct {
	RestoreTime                         string `json:"restore_time"`
	SourceDbInstanceAutomatedBackupsArn string `json:"source_db_instance_automated_backups_arn"`
	SourceDbInstanceIdentifier          string `json:"source_db_instance_identifier"`
	SourceDbiResourceId                 string `json:"source_dbi_resource_id"`
	UseLatestRestorableTime             bool   `json:"use_latest_restorable_time"`
}

type S3ImportState struct {
	BucketName          string `json:"bucket_name"`
	BucketPrefix        string `json:"bucket_prefix"`
	IngestionRole       string `json:"ingestion_role"`
	SourceEngine        string `json:"source_engine"`
	SourceEngineVersion string `json:"source_engine_version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
