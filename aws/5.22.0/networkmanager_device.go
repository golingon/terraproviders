// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkmanagerdevice "github.com/golingon/terraproviders/aws/5.22.0/networkmanagerdevice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewNetworkmanagerDevice creates a new instance of [NetworkmanagerDevice].
func NewNetworkmanagerDevice(name string, args NetworkmanagerDeviceArgs) *NetworkmanagerDevice {
	return &NetworkmanagerDevice{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkmanagerDevice)(nil)

// NetworkmanagerDevice represents the Terraform resource aws_networkmanager_device.
type NetworkmanagerDevice struct {
	Name      string
	Args      NetworkmanagerDeviceArgs
	state     *networkmanagerDeviceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [NetworkmanagerDevice].
func (nd *NetworkmanagerDevice) Type() string {
	return "aws_networkmanager_device"
}

// LocalName returns the local name for [NetworkmanagerDevice].
func (nd *NetworkmanagerDevice) LocalName() string {
	return nd.Name
}

// Configuration returns the configuration (args) for [NetworkmanagerDevice].
func (nd *NetworkmanagerDevice) Configuration() interface{} {
	return nd.Args
}

// DependOn is used for other resources to depend on [NetworkmanagerDevice].
func (nd *NetworkmanagerDevice) DependOn() terra.Reference {
	return terra.ReferenceResource(nd)
}

// Dependencies returns the list of resources [NetworkmanagerDevice] depends_on.
func (nd *NetworkmanagerDevice) Dependencies() terra.Dependencies {
	return nd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [NetworkmanagerDevice].
func (nd *NetworkmanagerDevice) LifecycleManagement() *terra.Lifecycle {
	return nd.Lifecycle
}

// Attributes returns the attributes for [NetworkmanagerDevice].
func (nd *NetworkmanagerDevice) Attributes() networkmanagerDeviceAttributes {
	return networkmanagerDeviceAttributes{ref: terra.ReferenceResource(nd)}
}

// ImportState imports the given attribute values into [NetworkmanagerDevice]'s state.
func (nd *NetworkmanagerDevice) ImportState(av io.Reader) error {
	nd.state = &networkmanagerDeviceState{}
	if err := json.NewDecoder(av).Decode(nd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nd.Type(), nd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [NetworkmanagerDevice] has state.
func (nd *NetworkmanagerDevice) State() (*networkmanagerDeviceState, bool) {
	return nd.state, nd.state != nil
}

// StateMust returns the state for [NetworkmanagerDevice]. Panics if the state is nil.
func (nd *NetworkmanagerDevice) StateMust() *networkmanagerDeviceState {
	if nd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nd.Type(), nd.LocalName()))
	}
	return nd.state
}

// NetworkmanagerDeviceArgs contains the configurations for aws_networkmanager_device.
type NetworkmanagerDeviceArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GlobalNetworkId: string, required
	GlobalNetworkId terra.StringValue `hcl:"global_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Model: string, optional
	Model terra.StringValue `hcl:"model,attr"`
	// SerialNumber: string, optional
	SerialNumber terra.StringValue `hcl:"serial_number,attr"`
	// SiteId: string, optional
	SiteId terra.StringValue `hcl:"site_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Vendor: string, optional
	Vendor terra.StringValue `hcl:"vendor,attr"`
	// AwsLocation: optional
	AwsLocation *networkmanagerdevice.AwsLocation `hcl:"aws_location,block"`
	// Location: optional
	Location *networkmanagerdevice.Location `hcl:"location,block"`
	// Timeouts: optional
	Timeouts *networkmanagerdevice.Timeouts `hcl:"timeouts,block"`
}
type networkmanagerDeviceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_networkmanager_device.
func (nd networkmanagerDeviceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(nd.ref.Append("arn"))
}

// Description returns a reference to field description of aws_networkmanager_device.
func (nd networkmanagerDeviceAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(nd.ref.Append("description"))
}

// GlobalNetworkId returns a reference to field global_network_id of aws_networkmanager_device.
func (nd networkmanagerDeviceAttributes) GlobalNetworkId() terra.StringValue {
	return terra.ReferenceAsString(nd.ref.Append("global_network_id"))
}

// Id returns a reference to field id of aws_networkmanager_device.
func (nd networkmanagerDeviceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nd.ref.Append("id"))
}

// Model returns a reference to field model of aws_networkmanager_device.
func (nd networkmanagerDeviceAttributes) Model() terra.StringValue {
	return terra.ReferenceAsString(nd.ref.Append("model"))
}

// SerialNumber returns a reference to field serial_number of aws_networkmanager_device.
func (nd networkmanagerDeviceAttributes) SerialNumber() terra.StringValue {
	return terra.ReferenceAsString(nd.ref.Append("serial_number"))
}

// SiteId returns a reference to field site_id of aws_networkmanager_device.
func (nd networkmanagerDeviceAttributes) SiteId() terra.StringValue {
	return terra.ReferenceAsString(nd.ref.Append("site_id"))
}

// Tags returns a reference to field tags of aws_networkmanager_device.
func (nd networkmanagerDeviceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nd.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_networkmanager_device.
func (nd networkmanagerDeviceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](nd.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_networkmanager_device.
func (nd networkmanagerDeviceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(nd.ref.Append("type"))
}

// Vendor returns a reference to field vendor of aws_networkmanager_device.
func (nd networkmanagerDeviceAttributes) Vendor() terra.StringValue {
	return terra.ReferenceAsString(nd.ref.Append("vendor"))
}

func (nd networkmanagerDeviceAttributes) AwsLocation() terra.ListValue[networkmanagerdevice.AwsLocationAttributes] {
	return terra.ReferenceAsList[networkmanagerdevice.AwsLocationAttributes](nd.ref.Append("aws_location"))
}

func (nd networkmanagerDeviceAttributes) Location() terra.ListValue[networkmanagerdevice.LocationAttributes] {
	return terra.ReferenceAsList[networkmanagerdevice.LocationAttributes](nd.ref.Append("location"))
}

func (nd networkmanagerDeviceAttributes) Timeouts() networkmanagerdevice.TimeoutsAttributes {
	return terra.ReferenceAsSingle[networkmanagerdevice.TimeoutsAttributes](nd.ref.Append("timeouts"))
}

type networkmanagerDeviceState struct {
	Arn             string                                  `json:"arn"`
	Description     string                                  `json:"description"`
	GlobalNetworkId string                                  `json:"global_network_id"`
	Id              string                                  `json:"id"`
	Model           string                                  `json:"model"`
	SerialNumber    string                                  `json:"serial_number"`
	SiteId          string                                  `json:"site_id"`
	Tags            map[string]string                       `json:"tags"`
	TagsAll         map[string]string                       `json:"tags_all"`
	Type            string                                  `json:"type"`
	Vendor          string                                  `json:"vendor"`
	AwsLocation     []networkmanagerdevice.AwsLocationState `json:"aws_location"`
	Location        []networkmanagerdevice.LocationState    `json:"location"`
	Timeouts        *networkmanagerdevice.TimeoutsState     `json:"timeouts"`
}
