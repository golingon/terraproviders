// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudformationstack "github.com/golingon/terraproviders/aws/5.22.0/cloudformationstack"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCloudformationStack creates a new instance of [CloudformationStack].
func NewCloudformationStack(name string, args CloudformationStackArgs) *CloudformationStack {
	return &CloudformationStack{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudformationStack)(nil)

// CloudformationStack represents the Terraform resource aws_cloudformation_stack.
type CloudformationStack struct {
	Name      string
	Args      CloudformationStackArgs
	state     *cloudformationStackState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CloudformationStack].
func (cs *CloudformationStack) Type() string {
	return "aws_cloudformation_stack"
}

// LocalName returns the local name for [CloudformationStack].
func (cs *CloudformationStack) LocalName() string {
	return cs.Name
}

// Configuration returns the configuration (args) for [CloudformationStack].
func (cs *CloudformationStack) Configuration() interface{} {
	return cs.Args
}

// DependOn is used for other resources to depend on [CloudformationStack].
func (cs *CloudformationStack) DependOn() terra.Reference {
	return terra.ReferenceResource(cs)
}

// Dependencies returns the list of resources [CloudformationStack] depends_on.
func (cs *CloudformationStack) Dependencies() terra.Dependencies {
	return cs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CloudformationStack].
func (cs *CloudformationStack) LifecycleManagement() *terra.Lifecycle {
	return cs.Lifecycle
}

// Attributes returns the attributes for [CloudformationStack].
func (cs *CloudformationStack) Attributes() cloudformationStackAttributes {
	return cloudformationStackAttributes{ref: terra.ReferenceResource(cs)}
}

// ImportState imports the given attribute values into [CloudformationStack]'s state.
func (cs *CloudformationStack) ImportState(av io.Reader) error {
	cs.state = &cloudformationStackState{}
	if err := json.NewDecoder(av).Decode(cs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cs.Type(), cs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CloudformationStack] has state.
func (cs *CloudformationStack) State() (*cloudformationStackState, bool) {
	return cs.state, cs.state != nil
}

// StateMust returns the state for [CloudformationStack]. Panics if the state is nil.
func (cs *CloudformationStack) StateMust() *cloudformationStackState {
	if cs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cs.Type(), cs.LocalName()))
	}
	return cs.state
}

// CloudformationStackArgs contains the configurations for aws_cloudformation_stack.
type CloudformationStackArgs struct {
	// Capabilities: set of string, optional
	Capabilities terra.SetValue[terra.StringValue] `hcl:"capabilities,attr"`
	// DisableRollback: bool, optional
	DisableRollback terra.BoolValue `hcl:"disable_rollback,attr"`
	// IamRoleArn: string, optional
	IamRoleArn terra.StringValue `hcl:"iam_role_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NotificationArns: set of string, optional
	NotificationArns terra.SetValue[terra.StringValue] `hcl:"notification_arns,attr"`
	// OnFailure: string, optional
	OnFailure terra.StringValue `hcl:"on_failure,attr"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// PolicyBody: string, optional
	PolicyBody terra.StringValue `hcl:"policy_body,attr"`
	// PolicyUrl: string, optional
	PolicyUrl terra.StringValue `hcl:"policy_url,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TemplateBody: string, optional
	TemplateBody terra.StringValue `hcl:"template_body,attr"`
	// TemplateUrl: string, optional
	TemplateUrl terra.StringValue `hcl:"template_url,attr"`
	// TimeoutInMinutes: number, optional
	TimeoutInMinutes terra.NumberValue `hcl:"timeout_in_minutes,attr"`
	// Timeouts: optional
	Timeouts *cloudformationstack.Timeouts `hcl:"timeouts,block"`
}
type cloudformationStackAttributes struct {
	ref terra.Reference
}

// Capabilities returns a reference to field capabilities of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) Capabilities() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("capabilities"))
}

// DisableRollback returns a reference to field disable_rollback of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) DisableRollback() terra.BoolValue {
	return terra.ReferenceAsBool(cs.ref.Append("disable_rollback"))
}

// IamRoleArn returns a reference to field iam_role_arn of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) IamRoleArn() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("iam_role_arn"))
}

// Id returns a reference to field id of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("id"))
}

// Name returns a reference to field name of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("name"))
}

// NotificationArns returns a reference to field notification_arns of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) NotificationArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("notification_arns"))
}

// OnFailure returns a reference to field on_failure of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) OnFailure() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("on_failure"))
}

// Outputs returns a reference to field outputs of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) Outputs() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cs.ref.Append("outputs"))
}

// Parameters returns a reference to field parameters of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cs.ref.Append("parameters"))
}

// PolicyBody returns a reference to field policy_body of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) PolicyBody() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("policy_body"))
}

// PolicyUrl returns a reference to field policy_url of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) PolicyUrl() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("policy_url"))
}

// Tags returns a reference to field tags of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cs.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cs.ref.Append("tags_all"))
}

// TemplateBody returns a reference to field template_body of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) TemplateBody() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("template_body"))
}

// TemplateUrl returns a reference to field template_url of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) TemplateUrl() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("template_url"))
}

// TimeoutInMinutes returns a reference to field timeout_in_minutes of aws_cloudformation_stack.
func (cs cloudformationStackAttributes) TimeoutInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(cs.ref.Append("timeout_in_minutes"))
}

func (cs cloudformationStackAttributes) Timeouts() cloudformationstack.TimeoutsAttributes {
	return terra.ReferenceAsSingle[cloudformationstack.TimeoutsAttributes](cs.ref.Append("timeouts"))
}

type cloudformationStackState struct {
	Capabilities     []string                           `json:"capabilities"`
	DisableRollback  bool                               `json:"disable_rollback"`
	IamRoleArn       string                             `json:"iam_role_arn"`
	Id               string                             `json:"id"`
	Name             string                             `json:"name"`
	NotificationArns []string                           `json:"notification_arns"`
	OnFailure        string                             `json:"on_failure"`
	Outputs          map[string]string                  `json:"outputs"`
	Parameters       map[string]string                  `json:"parameters"`
	PolicyBody       string                             `json:"policy_body"`
	PolicyUrl        string                             `json:"policy_url"`
	Tags             map[string]string                  `json:"tags"`
	TagsAll          map[string]string                  `json:"tags_all"`
	TemplateBody     string                             `json:"template_body"`
	TemplateUrl      string                             `json:"template_url"`
	TimeoutInMinutes float64                            `json:"timeout_in_minutes"`
	Timeouts         *cloudformationstack.TimeoutsState `json:"timeouts"`
}
