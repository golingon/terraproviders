// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewRamSharingWithOrganization creates a new instance of [RamSharingWithOrganization].
func NewRamSharingWithOrganization(name string, args RamSharingWithOrganizationArgs) *RamSharingWithOrganization {
	return &RamSharingWithOrganization{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RamSharingWithOrganization)(nil)

// RamSharingWithOrganization represents the Terraform resource aws_ram_sharing_with_organization.
type RamSharingWithOrganization struct {
	Name      string
	Args      RamSharingWithOrganizationArgs
	state     *ramSharingWithOrganizationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RamSharingWithOrganization].
func (rswo *RamSharingWithOrganization) Type() string {
	return "aws_ram_sharing_with_organization"
}

// LocalName returns the local name for [RamSharingWithOrganization].
func (rswo *RamSharingWithOrganization) LocalName() string {
	return rswo.Name
}

// Configuration returns the configuration (args) for [RamSharingWithOrganization].
func (rswo *RamSharingWithOrganization) Configuration() interface{} {
	return rswo.Args
}

// DependOn is used for other resources to depend on [RamSharingWithOrganization].
func (rswo *RamSharingWithOrganization) DependOn() terra.Reference {
	return terra.ReferenceResource(rswo)
}

// Dependencies returns the list of resources [RamSharingWithOrganization] depends_on.
func (rswo *RamSharingWithOrganization) Dependencies() terra.Dependencies {
	return rswo.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RamSharingWithOrganization].
func (rswo *RamSharingWithOrganization) LifecycleManagement() *terra.Lifecycle {
	return rswo.Lifecycle
}

// Attributes returns the attributes for [RamSharingWithOrganization].
func (rswo *RamSharingWithOrganization) Attributes() ramSharingWithOrganizationAttributes {
	return ramSharingWithOrganizationAttributes{ref: terra.ReferenceResource(rswo)}
}

// ImportState imports the given attribute values into [RamSharingWithOrganization]'s state.
func (rswo *RamSharingWithOrganization) ImportState(av io.Reader) error {
	rswo.state = &ramSharingWithOrganizationState{}
	if err := json.NewDecoder(av).Decode(rswo.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rswo.Type(), rswo.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RamSharingWithOrganization] has state.
func (rswo *RamSharingWithOrganization) State() (*ramSharingWithOrganizationState, bool) {
	return rswo.state, rswo.state != nil
}

// StateMust returns the state for [RamSharingWithOrganization]. Panics if the state is nil.
func (rswo *RamSharingWithOrganization) StateMust() *ramSharingWithOrganizationState {
	if rswo.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rswo.Type(), rswo.LocalName()))
	}
	return rswo.state
}

// RamSharingWithOrganizationArgs contains the configurations for aws_ram_sharing_with_organization.
type RamSharingWithOrganizationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}
type ramSharingWithOrganizationAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_ram_sharing_with_organization.
func (rswo ramSharingWithOrganizationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rswo.ref.Append("id"))
}

type ramSharingWithOrganizationState struct {
	Id string `json:"id"`
}
