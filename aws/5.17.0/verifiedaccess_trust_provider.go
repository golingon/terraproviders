// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	verifiedaccesstrustprovider "github.com/golingon/terraproviders/aws/5.17.0/verifiedaccesstrustprovider"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewVerifiedaccessTrustProvider creates a new instance of [VerifiedaccessTrustProvider].
func NewVerifiedaccessTrustProvider(name string, args VerifiedaccessTrustProviderArgs) *VerifiedaccessTrustProvider {
	return &VerifiedaccessTrustProvider{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VerifiedaccessTrustProvider)(nil)

// VerifiedaccessTrustProvider represents the Terraform resource aws_verifiedaccess_trust_provider.
type VerifiedaccessTrustProvider struct {
	Name      string
	Args      VerifiedaccessTrustProviderArgs
	state     *verifiedaccessTrustProviderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VerifiedaccessTrustProvider].
func (vtp *VerifiedaccessTrustProvider) Type() string {
	return "aws_verifiedaccess_trust_provider"
}

// LocalName returns the local name for [VerifiedaccessTrustProvider].
func (vtp *VerifiedaccessTrustProvider) LocalName() string {
	return vtp.Name
}

// Configuration returns the configuration (args) for [VerifiedaccessTrustProvider].
func (vtp *VerifiedaccessTrustProvider) Configuration() interface{} {
	return vtp.Args
}

// DependOn is used for other resources to depend on [VerifiedaccessTrustProvider].
func (vtp *VerifiedaccessTrustProvider) DependOn() terra.Reference {
	return terra.ReferenceResource(vtp)
}

// Dependencies returns the list of resources [VerifiedaccessTrustProvider] depends_on.
func (vtp *VerifiedaccessTrustProvider) Dependencies() terra.Dependencies {
	return vtp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VerifiedaccessTrustProvider].
func (vtp *VerifiedaccessTrustProvider) LifecycleManagement() *terra.Lifecycle {
	return vtp.Lifecycle
}

// Attributes returns the attributes for [VerifiedaccessTrustProvider].
func (vtp *VerifiedaccessTrustProvider) Attributes() verifiedaccessTrustProviderAttributes {
	return verifiedaccessTrustProviderAttributes{ref: terra.ReferenceResource(vtp)}
}

// ImportState imports the given attribute values into [VerifiedaccessTrustProvider]'s state.
func (vtp *VerifiedaccessTrustProvider) ImportState(av io.Reader) error {
	vtp.state = &verifiedaccessTrustProviderState{}
	if err := json.NewDecoder(av).Decode(vtp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vtp.Type(), vtp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VerifiedaccessTrustProvider] has state.
func (vtp *VerifiedaccessTrustProvider) State() (*verifiedaccessTrustProviderState, bool) {
	return vtp.state, vtp.state != nil
}

// StateMust returns the state for [VerifiedaccessTrustProvider]. Panics if the state is nil.
func (vtp *VerifiedaccessTrustProvider) StateMust() *verifiedaccessTrustProviderState {
	if vtp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vtp.Type(), vtp.LocalName()))
	}
	return vtp.state
}

// VerifiedaccessTrustProviderArgs contains the configurations for aws_verifiedaccess_trust_provider.
type VerifiedaccessTrustProviderArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DeviceTrustProviderType: string, optional
	DeviceTrustProviderType terra.StringValue `hcl:"device_trust_provider_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyReferenceName: string, required
	PolicyReferenceName terra.StringValue `hcl:"policy_reference_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TrustProviderType: string, required
	TrustProviderType terra.StringValue `hcl:"trust_provider_type,attr" validate:"required"`
	// UserTrustProviderType: string, optional
	UserTrustProviderType terra.StringValue `hcl:"user_trust_provider_type,attr"`
	// DeviceOptions: optional
	DeviceOptions *verifiedaccesstrustprovider.DeviceOptions `hcl:"device_options,block"`
	// OidcOptions: optional
	OidcOptions *verifiedaccesstrustprovider.OidcOptions `hcl:"oidc_options,block"`
	// Timeouts: optional
	Timeouts *verifiedaccesstrustprovider.Timeouts `hcl:"timeouts,block"`
}
type verifiedaccessTrustProviderAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_verifiedaccess_trust_provider.
func (vtp verifiedaccessTrustProviderAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(vtp.ref.Append("description"))
}

// DeviceTrustProviderType returns a reference to field device_trust_provider_type of aws_verifiedaccess_trust_provider.
func (vtp verifiedaccessTrustProviderAttributes) DeviceTrustProviderType() terra.StringValue {
	return terra.ReferenceAsString(vtp.ref.Append("device_trust_provider_type"))
}

// Id returns a reference to field id of aws_verifiedaccess_trust_provider.
func (vtp verifiedaccessTrustProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vtp.ref.Append("id"))
}

// PolicyReferenceName returns a reference to field policy_reference_name of aws_verifiedaccess_trust_provider.
func (vtp verifiedaccessTrustProviderAttributes) PolicyReferenceName() terra.StringValue {
	return terra.ReferenceAsString(vtp.ref.Append("policy_reference_name"))
}

// Tags returns a reference to field tags of aws_verifiedaccess_trust_provider.
func (vtp verifiedaccessTrustProviderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vtp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_verifiedaccess_trust_provider.
func (vtp verifiedaccessTrustProviderAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vtp.ref.Append("tags_all"))
}

// TrustProviderType returns a reference to field trust_provider_type of aws_verifiedaccess_trust_provider.
func (vtp verifiedaccessTrustProviderAttributes) TrustProviderType() terra.StringValue {
	return terra.ReferenceAsString(vtp.ref.Append("trust_provider_type"))
}

// UserTrustProviderType returns a reference to field user_trust_provider_type of aws_verifiedaccess_trust_provider.
func (vtp verifiedaccessTrustProviderAttributes) UserTrustProviderType() terra.StringValue {
	return terra.ReferenceAsString(vtp.ref.Append("user_trust_provider_type"))
}

func (vtp verifiedaccessTrustProviderAttributes) DeviceOptions() terra.ListValue[verifiedaccesstrustprovider.DeviceOptionsAttributes] {
	return terra.ReferenceAsList[verifiedaccesstrustprovider.DeviceOptionsAttributes](vtp.ref.Append("device_options"))
}

func (vtp verifiedaccessTrustProviderAttributes) OidcOptions() terra.ListValue[verifiedaccesstrustprovider.OidcOptionsAttributes] {
	return terra.ReferenceAsList[verifiedaccesstrustprovider.OidcOptionsAttributes](vtp.ref.Append("oidc_options"))
}

func (vtp verifiedaccessTrustProviderAttributes) Timeouts() verifiedaccesstrustprovider.TimeoutsAttributes {
	return terra.ReferenceAsSingle[verifiedaccesstrustprovider.TimeoutsAttributes](vtp.ref.Append("timeouts"))
}

type verifiedaccessTrustProviderState struct {
	Description             string                                           `json:"description"`
	DeviceTrustProviderType string                                           `json:"device_trust_provider_type"`
	Id                      string                                           `json:"id"`
	PolicyReferenceName     string                                           `json:"policy_reference_name"`
	Tags                    map[string]string                                `json:"tags"`
	TagsAll                 map[string]string                                `json:"tags_all"`
	TrustProviderType       string                                           `json:"trust_provider_type"`
	UserTrustProviderType   string                                           `json:"user_trust_provider_type"`
	DeviceOptions           []verifiedaccesstrustprovider.DeviceOptionsState `json:"device_options"`
	OidcOptions             []verifiedaccesstrustprovider.OidcOptionsState   `json:"oidc_options"`
	Timeouts                *verifiedaccesstrustprovider.TimeoutsState       `json:"timeouts"`
}
