// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataappmeshgatewayroute

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Spec struct {
	// GrpcRoute: min=0
	GrpcRoute []GrpcRoute `hcl:"grpc_route,block" validate:"min=0"`
	// Http2Route: min=0
	Http2Route []Http2Route `hcl:"http2_route,block" validate:"min=0"`
	// HttpRoute: min=0
	HttpRoute []HttpRoute `hcl:"http_route,block" validate:"min=0"`
}

type GrpcRoute struct {
	// GrpcRouteAction: min=0
	Action []GrpcRouteAction `hcl:"action,block" validate:"min=0"`
	// GrpcRouteMatch: min=0
	Match []GrpcRouteMatch `hcl:"match,block" validate:"min=0"`
}

type GrpcRouteAction struct {
	// GrpcRouteActionTarget: min=0
	Target []GrpcRouteActionTarget `hcl:"target,block" validate:"min=0"`
}

type GrpcRouteActionTarget struct {
	// GrpcRouteActionTargetVirtualService: min=0
	VirtualService []GrpcRouteActionTargetVirtualService `hcl:"virtual_service,block" validate:"min=0"`
}

type GrpcRouteActionTargetVirtualService struct{}

type GrpcRouteMatch struct{}

type Http2Route struct {
	// Http2RouteAction: min=0
	Action []Http2RouteAction `hcl:"action,block" validate:"min=0"`
	// Http2RouteMatch: min=0
	Match []Http2RouteMatch `hcl:"match,block" validate:"min=0"`
}

type Http2RouteAction struct {
	// Http2RouteActionRewrite: min=0
	Rewrite []Http2RouteActionRewrite `hcl:"rewrite,block" validate:"min=0"`
	// Http2RouteActionTarget: min=0
	Target []Http2RouteActionTarget `hcl:"target,block" validate:"min=0"`
}

type Http2RouteActionRewrite struct {
	// Http2RouteActionRewriteHostname: min=0
	Hostname []Http2RouteActionRewriteHostname `hcl:"hostname,block" validate:"min=0"`
	// Http2RouteActionRewritePath: min=0
	Path []Http2RouteActionRewritePath `hcl:"path,block" validate:"min=0"`
	// Http2RouteActionRewritePrefix: min=0
	Prefix []Http2RouteActionRewritePrefix `hcl:"prefix,block" validate:"min=0"`
}

type Http2RouteActionRewriteHostname struct{}

type Http2RouteActionRewritePath struct{}

type Http2RouteActionRewritePrefix struct{}

type Http2RouteActionTarget struct {
	// Http2RouteActionTargetVirtualService: min=0
	VirtualService []Http2RouteActionTargetVirtualService `hcl:"virtual_service,block" validate:"min=0"`
}

type Http2RouteActionTargetVirtualService struct{}

type Http2RouteMatch struct {
	// Http2RouteMatchHeader: min=0
	Header []Http2RouteMatchHeader `hcl:"header,block" validate:"min=0"`
	// Http2RouteMatchHostname: min=0
	Hostname []Http2RouteMatchHostname `hcl:"hostname,block" validate:"min=0"`
	// Http2RouteMatchPath: min=0
	Path []Http2RouteMatchPath `hcl:"path,block" validate:"min=0"`
	// Http2RouteMatchQueryParameter: min=0
	QueryParameter []Http2RouteMatchQueryParameter `hcl:"query_parameter,block" validate:"min=0"`
}

type Http2RouteMatchHeader struct {
	// Http2RouteMatchHeaderMatch: min=0
	Match []Http2RouteMatchHeaderMatch `hcl:"match,block" validate:"min=0"`
}

type Http2RouteMatchHeaderMatch struct {
	// Http2RouteMatchHeaderMatchRange: min=0
	Range []Http2RouteMatchHeaderMatchRange `hcl:"range,block" validate:"min=0"`
}

type Http2RouteMatchHeaderMatchRange struct{}

type Http2RouteMatchHostname struct{}

type Http2RouteMatchPath struct{}

type Http2RouteMatchQueryParameter struct {
	// Http2RouteMatchQueryParameterMatch: min=0
	Match []Http2RouteMatchQueryParameterMatch `hcl:"match,block" validate:"min=0"`
}

type Http2RouteMatchQueryParameterMatch struct{}

type HttpRoute struct {
	// HttpRouteAction: min=0
	Action []HttpRouteAction `hcl:"action,block" validate:"min=0"`
	// HttpRouteMatch: min=0
	Match []HttpRouteMatch `hcl:"match,block" validate:"min=0"`
}

type HttpRouteAction struct {
	// HttpRouteActionRewrite: min=0
	Rewrite []HttpRouteActionRewrite `hcl:"rewrite,block" validate:"min=0"`
	// HttpRouteActionTarget: min=0
	Target []HttpRouteActionTarget `hcl:"target,block" validate:"min=0"`
}

type HttpRouteActionRewrite struct {
	// HttpRouteActionRewriteHostname: min=0
	Hostname []HttpRouteActionRewriteHostname `hcl:"hostname,block" validate:"min=0"`
	// HttpRouteActionRewritePath: min=0
	Path []HttpRouteActionRewritePath `hcl:"path,block" validate:"min=0"`
	// HttpRouteActionRewritePrefix: min=0
	Prefix []HttpRouteActionRewritePrefix `hcl:"prefix,block" validate:"min=0"`
}

type HttpRouteActionRewriteHostname struct{}

type HttpRouteActionRewritePath struct{}

type HttpRouteActionRewritePrefix struct{}

type HttpRouteActionTarget struct {
	// HttpRouteActionTargetVirtualService: min=0
	VirtualService []HttpRouteActionTargetVirtualService `hcl:"virtual_service,block" validate:"min=0"`
}

type HttpRouteActionTargetVirtualService struct{}

type HttpRouteMatch struct {
	// HttpRouteMatchHeader: min=0
	Header []HttpRouteMatchHeader `hcl:"header,block" validate:"min=0"`
	// HttpRouteMatchHostname: min=0
	Hostname []HttpRouteMatchHostname `hcl:"hostname,block" validate:"min=0"`
	// HttpRouteMatchPath: min=0
	Path []HttpRouteMatchPath `hcl:"path,block" validate:"min=0"`
	// HttpRouteMatchQueryParameter: min=0
	QueryParameter []HttpRouteMatchQueryParameter `hcl:"query_parameter,block" validate:"min=0"`
}

type HttpRouteMatchHeader struct {
	// HttpRouteMatchHeaderMatch: min=0
	Match []HttpRouteMatchHeaderMatch `hcl:"match,block" validate:"min=0"`
}

type HttpRouteMatchHeaderMatch struct {
	// HttpRouteMatchHeaderMatchRange: min=0
	Range []HttpRouteMatchHeaderMatchRange `hcl:"range,block" validate:"min=0"`
}

type HttpRouteMatchHeaderMatchRange struct{}

type HttpRouteMatchHostname struct{}

type HttpRouteMatchPath struct{}

type HttpRouteMatchQueryParameter struct {
	// HttpRouteMatchQueryParameterMatch: min=0
	Match []HttpRouteMatchQueryParameterMatch `hcl:"match,block" validate:"min=0"`
}

type HttpRouteMatchQueryParameterMatch struct{}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("priority"))
}

func (s SpecAttributes) GrpcRoute() terra.ListValue[GrpcRouteAttributes] {
	return terra.ReferenceAsList[GrpcRouteAttributes](s.ref.Append("grpc_route"))
}

func (s SpecAttributes) Http2Route() terra.ListValue[Http2RouteAttributes] {
	return terra.ReferenceAsList[Http2RouteAttributes](s.ref.Append("http2_route"))
}

func (s SpecAttributes) HttpRoute() terra.ListValue[HttpRouteAttributes] {
	return terra.ReferenceAsList[HttpRouteAttributes](s.ref.Append("http_route"))
}

type GrpcRouteAttributes struct {
	ref terra.Reference
}

func (gr GrpcRouteAttributes) InternalRef() (terra.Reference, error) {
	return gr.ref, nil
}

func (gr GrpcRouteAttributes) InternalWithRef(ref terra.Reference) GrpcRouteAttributes {
	return GrpcRouteAttributes{ref: ref}
}

func (gr GrpcRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gr.ref.InternalTokens()
}

func (gr GrpcRouteAttributes) Action() terra.ListValue[GrpcRouteActionAttributes] {
	return terra.ReferenceAsList[GrpcRouteActionAttributes](gr.ref.Append("action"))
}

func (gr GrpcRouteAttributes) Match() terra.ListValue[GrpcRouteMatchAttributes] {
	return terra.ReferenceAsList[GrpcRouteMatchAttributes](gr.ref.Append("match"))
}

type GrpcRouteActionAttributes struct {
	ref terra.Reference
}

func (a GrpcRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a GrpcRouteActionAttributes) InternalWithRef(ref terra.Reference) GrpcRouteActionAttributes {
	return GrpcRouteActionAttributes{ref: ref}
}

func (a GrpcRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a GrpcRouteActionAttributes) Target() terra.ListValue[GrpcRouteActionTargetAttributes] {
	return terra.ReferenceAsList[GrpcRouteActionTargetAttributes](a.ref.Append("target"))
}

type GrpcRouteActionTargetAttributes struct {
	ref terra.Reference
}

func (t GrpcRouteActionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t GrpcRouteActionTargetAttributes) InternalWithRef(ref terra.Reference) GrpcRouteActionTargetAttributes {
	return GrpcRouteActionTargetAttributes{ref: ref}
}

func (t GrpcRouteActionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t GrpcRouteActionTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("port"))
}

func (t GrpcRouteActionTargetAttributes) VirtualService() terra.ListValue[GrpcRouteActionTargetVirtualServiceAttributes] {
	return terra.ReferenceAsList[GrpcRouteActionTargetVirtualServiceAttributes](t.ref.Append("virtual_service"))
}

type GrpcRouteActionTargetVirtualServiceAttributes struct {
	ref terra.Reference
}

func (vs GrpcRouteActionTargetVirtualServiceAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs GrpcRouteActionTargetVirtualServiceAttributes) InternalWithRef(ref terra.Reference) GrpcRouteActionTargetVirtualServiceAttributes {
	return GrpcRouteActionTargetVirtualServiceAttributes{ref: ref}
}

func (vs GrpcRouteActionTargetVirtualServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs GrpcRouteActionTargetVirtualServiceAttributes) VirtualServiceName() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("virtual_service_name"))
}

type GrpcRouteMatchAttributes struct {
	ref terra.Reference
}

func (m GrpcRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m GrpcRouteMatchAttributes) InternalWithRef(ref terra.Reference) GrpcRouteMatchAttributes {
	return GrpcRouteMatchAttributes{ref: ref}
}

func (m GrpcRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m GrpcRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m GrpcRouteMatchAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("service_name"))
}

type Http2RouteAttributes struct {
	ref terra.Reference
}

func (hr Http2RouteAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr Http2RouteAttributes) InternalWithRef(ref terra.Reference) Http2RouteAttributes {
	return Http2RouteAttributes{ref: ref}
}

func (hr Http2RouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr Http2RouteAttributes) Action() terra.ListValue[Http2RouteActionAttributes] {
	return terra.ReferenceAsList[Http2RouteActionAttributes](hr.ref.Append("action"))
}

func (hr Http2RouteAttributes) Match() terra.ListValue[Http2RouteMatchAttributes] {
	return terra.ReferenceAsList[Http2RouteMatchAttributes](hr.ref.Append("match"))
}

type Http2RouteActionAttributes struct {
	ref terra.Reference
}

func (a Http2RouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a Http2RouteActionAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionAttributes {
	return Http2RouteActionAttributes{ref: ref}
}

func (a Http2RouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a Http2RouteActionAttributes) Rewrite() terra.ListValue[Http2RouteActionRewriteAttributes] {
	return terra.ReferenceAsList[Http2RouteActionRewriteAttributes](a.ref.Append("rewrite"))
}

func (a Http2RouteActionAttributes) Target() terra.ListValue[Http2RouteActionTargetAttributes] {
	return terra.ReferenceAsList[Http2RouteActionTargetAttributes](a.ref.Append("target"))
}

type Http2RouteActionRewriteAttributes struct {
	ref terra.Reference
}

func (r Http2RouteActionRewriteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r Http2RouteActionRewriteAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionRewriteAttributes {
	return Http2RouteActionRewriteAttributes{ref: ref}
}

func (r Http2RouteActionRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r Http2RouteActionRewriteAttributes) Hostname() terra.ListValue[Http2RouteActionRewriteHostnameAttributes] {
	return terra.ReferenceAsList[Http2RouteActionRewriteHostnameAttributes](r.ref.Append("hostname"))
}

func (r Http2RouteActionRewriteAttributes) Path() terra.ListValue[Http2RouteActionRewritePathAttributes] {
	return terra.ReferenceAsList[Http2RouteActionRewritePathAttributes](r.ref.Append("path"))
}

func (r Http2RouteActionRewriteAttributes) Prefix() terra.ListValue[Http2RouteActionRewritePrefixAttributes] {
	return terra.ReferenceAsList[Http2RouteActionRewritePrefixAttributes](r.ref.Append("prefix"))
}

type Http2RouteActionRewriteHostnameAttributes struct {
	ref terra.Reference
}

func (h Http2RouteActionRewriteHostnameAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h Http2RouteActionRewriteHostnameAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionRewriteHostnameAttributes {
	return Http2RouteActionRewriteHostnameAttributes{ref: ref}
}

func (h Http2RouteActionRewriteHostnameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h Http2RouteActionRewriteHostnameAttributes) DefaultTargetHostname() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("default_target_hostname"))
}

type Http2RouteActionRewritePathAttributes struct {
	ref terra.Reference
}

func (p Http2RouteActionRewritePathAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p Http2RouteActionRewritePathAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionRewritePathAttributes {
	return Http2RouteActionRewritePathAttributes{ref: ref}
}

func (p Http2RouteActionRewritePathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p Http2RouteActionRewritePathAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

type Http2RouteActionRewritePrefixAttributes struct {
	ref terra.Reference
}

func (p Http2RouteActionRewritePrefixAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p Http2RouteActionRewritePrefixAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionRewritePrefixAttributes {
	return Http2RouteActionRewritePrefixAttributes{ref: ref}
}

func (p Http2RouteActionRewritePrefixAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p Http2RouteActionRewritePrefixAttributes) DefaultPrefix() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("default_prefix"))
}

func (p Http2RouteActionRewritePrefixAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value"))
}

type Http2RouteActionTargetAttributes struct {
	ref terra.Reference
}

func (t Http2RouteActionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t Http2RouteActionTargetAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionTargetAttributes {
	return Http2RouteActionTargetAttributes{ref: ref}
}

func (t Http2RouteActionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t Http2RouteActionTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("port"))
}

func (t Http2RouteActionTargetAttributes) VirtualService() terra.ListValue[Http2RouteActionTargetVirtualServiceAttributes] {
	return terra.ReferenceAsList[Http2RouteActionTargetVirtualServiceAttributes](t.ref.Append("virtual_service"))
}

type Http2RouteActionTargetVirtualServiceAttributes struct {
	ref terra.Reference
}

func (vs Http2RouteActionTargetVirtualServiceAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs Http2RouteActionTargetVirtualServiceAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionTargetVirtualServiceAttributes {
	return Http2RouteActionTargetVirtualServiceAttributes{ref: ref}
}

func (vs Http2RouteActionTargetVirtualServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs Http2RouteActionTargetVirtualServiceAttributes) VirtualServiceName() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("virtual_service_name"))
}

type Http2RouteMatchAttributes struct {
	ref terra.Reference
}

func (m Http2RouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m Http2RouteMatchAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchAttributes {
	return Http2RouteMatchAttributes{ref: ref}
}

func (m Http2RouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m Http2RouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m Http2RouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m Http2RouteMatchAttributes) Header() terra.SetValue[Http2RouteMatchHeaderAttributes] {
	return terra.ReferenceAsSet[Http2RouteMatchHeaderAttributes](m.ref.Append("header"))
}

func (m Http2RouteMatchAttributes) Hostname() terra.ListValue[Http2RouteMatchHostnameAttributes] {
	return terra.ReferenceAsList[Http2RouteMatchHostnameAttributes](m.ref.Append("hostname"))
}

func (m Http2RouteMatchAttributes) Path() terra.ListValue[Http2RouteMatchPathAttributes] {
	return terra.ReferenceAsList[Http2RouteMatchPathAttributes](m.ref.Append("path"))
}

func (m Http2RouteMatchAttributes) QueryParameter() terra.SetValue[Http2RouteMatchQueryParameterAttributes] {
	return terra.ReferenceAsSet[Http2RouteMatchQueryParameterAttributes](m.ref.Append("query_parameter"))
}

type Http2RouteMatchHeaderAttributes struct {
	ref terra.Reference
}

func (h Http2RouteMatchHeaderAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h Http2RouteMatchHeaderAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchHeaderAttributes {
	return Http2RouteMatchHeaderAttributes{ref: ref}
}

func (h Http2RouteMatchHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h Http2RouteMatchHeaderAttributes) Invert() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("invert"))
}

func (h Http2RouteMatchHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("name"))
}

func (h Http2RouteMatchHeaderAttributes) Match() terra.ListValue[Http2RouteMatchHeaderMatchAttributes] {
	return terra.ReferenceAsList[Http2RouteMatchHeaderMatchAttributes](h.ref.Append("match"))
}

type Http2RouteMatchHeaderMatchAttributes struct {
	ref terra.Reference
}

func (m Http2RouteMatchHeaderMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m Http2RouteMatchHeaderMatchAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchHeaderMatchAttributes {
	return Http2RouteMatchHeaderMatchAttributes{ref: ref}
}

func (m Http2RouteMatchHeaderMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m Http2RouteMatchHeaderMatchAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m Http2RouteMatchHeaderMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m Http2RouteMatchHeaderMatchAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex"))
}

func (m Http2RouteMatchHeaderMatchAttributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("suffix"))
}

func (m Http2RouteMatchHeaderMatchAttributes) Range() terra.ListValue[Http2RouteMatchHeaderMatchRangeAttributes] {
	return terra.ReferenceAsList[Http2RouteMatchHeaderMatchRangeAttributes](m.ref.Append("range"))
}

type Http2RouteMatchHeaderMatchRangeAttributes struct {
	ref terra.Reference
}

func (r Http2RouteMatchHeaderMatchRangeAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r Http2RouteMatchHeaderMatchRangeAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchHeaderMatchRangeAttributes {
	return Http2RouteMatchHeaderMatchRangeAttributes{ref: ref}
}

func (r Http2RouteMatchHeaderMatchRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r Http2RouteMatchHeaderMatchRangeAttributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r Http2RouteMatchHeaderMatchRangeAttributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type Http2RouteMatchHostnameAttributes struct {
	ref terra.Reference
}

func (h Http2RouteMatchHostnameAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h Http2RouteMatchHostnameAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchHostnameAttributes {
	return Http2RouteMatchHostnameAttributes{ref: ref}
}

func (h Http2RouteMatchHostnameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h Http2RouteMatchHostnameAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("exact"))
}

func (h Http2RouteMatchHostnameAttributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("suffix"))
}

type Http2RouteMatchPathAttributes struct {
	ref terra.Reference
}

func (p Http2RouteMatchPathAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p Http2RouteMatchPathAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchPathAttributes {
	return Http2RouteMatchPathAttributes{ref: ref}
}

func (p Http2RouteMatchPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p Http2RouteMatchPathAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

func (p Http2RouteMatchPathAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("regex"))
}

type Http2RouteMatchQueryParameterAttributes struct {
	ref terra.Reference
}

func (qp Http2RouteMatchQueryParameterAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp Http2RouteMatchQueryParameterAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchQueryParameterAttributes {
	return Http2RouteMatchQueryParameterAttributes{ref: ref}
}

func (qp Http2RouteMatchQueryParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp Http2RouteMatchQueryParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("name"))
}

func (qp Http2RouteMatchQueryParameterAttributes) Match() terra.ListValue[Http2RouteMatchQueryParameterMatchAttributes] {
	return terra.ReferenceAsList[Http2RouteMatchQueryParameterMatchAttributes](qp.ref.Append("match"))
}

type Http2RouteMatchQueryParameterMatchAttributes struct {
	ref terra.Reference
}

func (m Http2RouteMatchQueryParameterMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m Http2RouteMatchQueryParameterMatchAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchQueryParameterMatchAttributes {
	return Http2RouteMatchQueryParameterMatchAttributes{ref: ref}
}

func (m Http2RouteMatchQueryParameterMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m Http2RouteMatchQueryParameterMatchAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

type HttpRouteAttributes struct {
	ref terra.Reference
}

func (hr HttpRouteAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr HttpRouteAttributes) InternalWithRef(ref terra.Reference) HttpRouteAttributes {
	return HttpRouteAttributes{ref: ref}
}

func (hr HttpRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr HttpRouteAttributes) Action() terra.ListValue[HttpRouteActionAttributes] {
	return terra.ReferenceAsList[HttpRouteActionAttributes](hr.ref.Append("action"))
}

func (hr HttpRouteAttributes) Match() terra.ListValue[HttpRouteMatchAttributes] {
	return terra.ReferenceAsList[HttpRouteMatchAttributes](hr.ref.Append("match"))
}

type HttpRouteActionAttributes struct {
	ref terra.Reference
}

func (a HttpRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a HttpRouteActionAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionAttributes {
	return HttpRouteActionAttributes{ref: ref}
}

func (a HttpRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a HttpRouteActionAttributes) Rewrite() terra.ListValue[HttpRouteActionRewriteAttributes] {
	return terra.ReferenceAsList[HttpRouteActionRewriteAttributes](a.ref.Append("rewrite"))
}

func (a HttpRouteActionAttributes) Target() terra.ListValue[HttpRouteActionTargetAttributes] {
	return terra.ReferenceAsList[HttpRouteActionTargetAttributes](a.ref.Append("target"))
}

type HttpRouteActionRewriteAttributes struct {
	ref terra.Reference
}

func (r HttpRouteActionRewriteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r HttpRouteActionRewriteAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionRewriteAttributes {
	return HttpRouteActionRewriteAttributes{ref: ref}
}

func (r HttpRouteActionRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r HttpRouteActionRewriteAttributes) Hostname() terra.ListValue[HttpRouteActionRewriteHostnameAttributes] {
	return terra.ReferenceAsList[HttpRouteActionRewriteHostnameAttributes](r.ref.Append("hostname"))
}

func (r HttpRouteActionRewriteAttributes) Path() terra.ListValue[HttpRouteActionRewritePathAttributes] {
	return terra.ReferenceAsList[HttpRouteActionRewritePathAttributes](r.ref.Append("path"))
}

func (r HttpRouteActionRewriteAttributes) Prefix() terra.ListValue[HttpRouteActionRewritePrefixAttributes] {
	return terra.ReferenceAsList[HttpRouteActionRewritePrefixAttributes](r.ref.Append("prefix"))
}

type HttpRouteActionRewriteHostnameAttributes struct {
	ref terra.Reference
}

func (h HttpRouteActionRewriteHostnameAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HttpRouteActionRewriteHostnameAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionRewriteHostnameAttributes {
	return HttpRouteActionRewriteHostnameAttributes{ref: ref}
}

func (h HttpRouteActionRewriteHostnameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HttpRouteActionRewriteHostnameAttributes) DefaultTargetHostname() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("default_target_hostname"))
}

type HttpRouteActionRewritePathAttributes struct {
	ref terra.Reference
}

func (p HttpRouteActionRewritePathAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p HttpRouteActionRewritePathAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionRewritePathAttributes {
	return HttpRouteActionRewritePathAttributes{ref: ref}
}

func (p HttpRouteActionRewritePathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p HttpRouteActionRewritePathAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

type HttpRouteActionRewritePrefixAttributes struct {
	ref terra.Reference
}

func (p HttpRouteActionRewritePrefixAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p HttpRouteActionRewritePrefixAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionRewritePrefixAttributes {
	return HttpRouteActionRewritePrefixAttributes{ref: ref}
}

func (p HttpRouteActionRewritePrefixAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p HttpRouteActionRewritePrefixAttributes) DefaultPrefix() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("default_prefix"))
}

func (p HttpRouteActionRewritePrefixAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value"))
}

type HttpRouteActionTargetAttributes struct {
	ref terra.Reference
}

func (t HttpRouteActionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t HttpRouteActionTargetAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionTargetAttributes {
	return HttpRouteActionTargetAttributes{ref: ref}
}

func (t HttpRouteActionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t HttpRouteActionTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("port"))
}

func (t HttpRouteActionTargetAttributes) VirtualService() terra.ListValue[HttpRouteActionTargetVirtualServiceAttributes] {
	return terra.ReferenceAsList[HttpRouteActionTargetVirtualServiceAttributes](t.ref.Append("virtual_service"))
}

type HttpRouteActionTargetVirtualServiceAttributes struct {
	ref terra.Reference
}

func (vs HttpRouteActionTargetVirtualServiceAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs HttpRouteActionTargetVirtualServiceAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionTargetVirtualServiceAttributes {
	return HttpRouteActionTargetVirtualServiceAttributes{ref: ref}
}

func (vs HttpRouteActionTargetVirtualServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs HttpRouteActionTargetVirtualServiceAttributes) VirtualServiceName() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("virtual_service_name"))
}

type HttpRouteMatchAttributes struct {
	ref terra.Reference
}

func (m HttpRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m HttpRouteMatchAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchAttributes {
	return HttpRouteMatchAttributes{ref: ref}
}

func (m HttpRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m HttpRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m HttpRouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m HttpRouteMatchAttributes) Header() terra.SetValue[HttpRouteMatchHeaderAttributes] {
	return terra.ReferenceAsSet[HttpRouteMatchHeaderAttributes](m.ref.Append("header"))
}

func (m HttpRouteMatchAttributes) Hostname() terra.ListValue[HttpRouteMatchHostnameAttributes] {
	return terra.ReferenceAsList[HttpRouteMatchHostnameAttributes](m.ref.Append("hostname"))
}

func (m HttpRouteMatchAttributes) Path() terra.ListValue[HttpRouteMatchPathAttributes] {
	return terra.ReferenceAsList[HttpRouteMatchPathAttributes](m.ref.Append("path"))
}

func (m HttpRouteMatchAttributes) QueryParameter() terra.SetValue[HttpRouteMatchQueryParameterAttributes] {
	return terra.ReferenceAsSet[HttpRouteMatchQueryParameterAttributes](m.ref.Append("query_parameter"))
}

type HttpRouteMatchHeaderAttributes struct {
	ref terra.Reference
}

func (h HttpRouteMatchHeaderAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HttpRouteMatchHeaderAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchHeaderAttributes {
	return HttpRouteMatchHeaderAttributes{ref: ref}
}

func (h HttpRouteMatchHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HttpRouteMatchHeaderAttributes) Invert() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("invert"))
}

func (h HttpRouteMatchHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("name"))
}

func (h HttpRouteMatchHeaderAttributes) Match() terra.ListValue[HttpRouteMatchHeaderMatchAttributes] {
	return terra.ReferenceAsList[HttpRouteMatchHeaderMatchAttributes](h.ref.Append("match"))
}

type HttpRouteMatchHeaderMatchAttributes struct {
	ref terra.Reference
}

func (m HttpRouteMatchHeaderMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m HttpRouteMatchHeaderMatchAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchHeaderMatchAttributes {
	return HttpRouteMatchHeaderMatchAttributes{ref: ref}
}

func (m HttpRouteMatchHeaderMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m HttpRouteMatchHeaderMatchAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m HttpRouteMatchHeaderMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m HttpRouteMatchHeaderMatchAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex"))
}

func (m HttpRouteMatchHeaderMatchAttributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("suffix"))
}

func (m HttpRouteMatchHeaderMatchAttributes) Range() terra.ListValue[HttpRouteMatchHeaderMatchRangeAttributes] {
	return terra.ReferenceAsList[HttpRouteMatchHeaderMatchRangeAttributes](m.ref.Append("range"))
}

type HttpRouteMatchHeaderMatchRangeAttributes struct {
	ref terra.Reference
}

func (r HttpRouteMatchHeaderMatchRangeAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r HttpRouteMatchHeaderMatchRangeAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchHeaderMatchRangeAttributes {
	return HttpRouteMatchHeaderMatchRangeAttributes{ref: ref}
}

func (r HttpRouteMatchHeaderMatchRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r HttpRouteMatchHeaderMatchRangeAttributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r HttpRouteMatchHeaderMatchRangeAttributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type HttpRouteMatchHostnameAttributes struct {
	ref terra.Reference
}

func (h HttpRouteMatchHostnameAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HttpRouteMatchHostnameAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchHostnameAttributes {
	return HttpRouteMatchHostnameAttributes{ref: ref}
}

func (h HttpRouteMatchHostnameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HttpRouteMatchHostnameAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("exact"))
}

func (h HttpRouteMatchHostnameAttributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("suffix"))
}

type HttpRouteMatchPathAttributes struct {
	ref terra.Reference
}

func (p HttpRouteMatchPathAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p HttpRouteMatchPathAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchPathAttributes {
	return HttpRouteMatchPathAttributes{ref: ref}
}

func (p HttpRouteMatchPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p HttpRouteMatchPathAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

func (p HttpRouteMatchPathAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("regex"))
}

type HttpRouteMatchQueryParameterAttributes struct {
	ref terra.Reference
}

func (qp HttpRouteMatchQueryParameterAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp HttpRouteMatchQueryParameterAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchQueryParameterAttributes {
	return HttpRouteMatchQueryParameterAttributes{ref: ref}
}

func (qp HttpRouteMatchQueryParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp HttpRouteMatchQueryParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("name"))
}

func (qp HttpRouteMatchQueryParameterAttributes) Match() terra.ListValue[HttpRouteMatchQueryParameterMatchAttributes] {
	return terra.ReferenceAsList[HttpRouteMatchQueryParameterMatchAttributes](qp.ref.Append("match"))
}

type HttpRouteMatchQueryParameterMatchAttributes struct {
	ref terra.Reference
}

func (m HttpRouteMatchQueryParameterMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m HttpRouteMatchQueryParameterMatchAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchQueryParameterMatchAttributes {
	return HttpRouteMatchQueryParameterMatchAttributes{ref: ref}
}

func (m HttpRouteMatchQueryParameterMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m HttpRouteMatchQueryParameterMatchAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

type SpecState struct {
	Priority   float64           `json:"priority"`
	GrpcRoute  []GrpcRouteState  `json:"grpc_route"`
	Http2Route []Http2RouteState `json:"http2_route"`
	HttpRoute  []HttpRouteState  `json:"http_route"`
}

type GrpcRouteState struct {
	Action []GrpcRouteActionState `json:"action"`
	Match  []GrpcRouteMatchState  `json:"match"`
}

type GrpcRouteActionState struct {
	Target []GrpcRouteActionTargetState `json:"target"`
}

type GrpcRouteActionTargetState struct {
	Port           float64                                    `json:"port"`
	VirtualService []GrpcRouteActionTargetVirtualServiceState `json:"virtual_service"`
}

type GrpcRouteActionTargetVirtualServiceState struct {
	VirtualServiceName string `json:"virtual_service_name"`
}

type GrpcRouteMatchState struct {
	Port        float64 `json:"port"`
	ServiceName string  `json:"service_name"`
}

type Http2RouteState struct {
	Action []Http2RouteActionState `json:"action"`
	Match  []Http2RouteMatchState  `json:"match"`
}

type Http2RouteActionState struct {
	Rewrite []Http2RouteActionRewriteState `json:"rewrite"`
	Target  []Http2RouteActionTargetState  `json:"target"`
}

type Http2RouteActionRewriteState struct {
	Hostname []Http2RouteActionRewriteHostnameState `json:"hostname"`
	Path     []Http2RouteActionRewritePathState     `json:"path"`
	Prefix   []Http2RouteActionRewritePrefixState   `json:"prefix"`
}

type Http2RouteActionRewriteHostnameState struct {
	DefaultTargetHostname string `json:"default_target_hostname"`
}

type Http2RouteActionRewritePathState struct {
	Exact string `json:"exact"`
}

type Http2RouteActionRewritePrefixState struct {
	DefaultPrefix string `json:"default_prefix"`
	Value         string `json:"value"`
}

type Http2RouteActionTargetState struct {
	Port           float64                                     `json:"port"`
	VirtualService []Http2RouteActionTargetVirtualServiceState `json:"virtual_service"`
}

type Http2RouteActionTargetVirtualServiceState struct {
	VirtualServiceName string `json:"virtual_service_name"`
}

type Http2RouteMatchState struct {
	Port           float64                              `json:"port"`
	Prefix         string                               `json:"prefix"`
	Header         []Http2RouteMatchHeaderState         `json:"header"`
	Hostname       []Http2RouteMatchHostnameState       `json:"hostname"`
	Path           []Http2RouteMatchPathState           `json:"path"`
	QueryParameter []Http2RouteMatchQueryParameterState `json:"query_parameter"`
}

type Http2RouteMatchHeaderState struct {
	Invert bool                              `json:"invert"`
	Name   string                            `json:"name"`
	Match  []Http2RouteMatchHeaderMatchState `json:"match"`
}

type Http2RouteMatchHeaderMatchState struct {
	Exact  string                                 `json:"exact"`
	Prefix string                                 `json:"prefix"`
	Regex  string                                 `json:"regex"`
	Suffix string                                 `json:"suffix"`
	Range  []Http2RouteMatchHeaderMatchRangeState `json:"range"`
}

type Http2RouteMatchHeaderMatchRangeState struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type Http2RouteMatchHostnameState struct {
	Exact  string `json:"exact"`
	Suffix string `json:"suffix"`
}

type Http2RouteMatchPathState struct {
	Exact string `json:"exact"`
	Regex string `json:"regex"`
}

type Http2RouteMatchQueryParameterState struct {
	Name  string                                    `json:"name"`
	Match []Http2RouteMatchQueryParameterMatchState `json:"match"`
}

type Http2RouteMatchQueryParameterMatchState struct {
	Exact string `json:"exact"`
}

type HttpRouteState struct {
	Action []HttpRouteActionState `json:"action"`
	Match  []HttpRouteMatchState  `json:"match"`
}

type HttpRouteActionState struct {
	Rewrite []HttpRouteActionRewriteState `json:"rewrite"`
	Target  []HttpRouteActionTargetState  `json:"target"`
}

type HttpRouteActionRewriteState struct {
	Hostname []HttpRouteActionRewriteHostnameState `json:"hostname"`
	Path     []HttpRouteActionRewritePathState     `json:"path"`
	Prefix   []HttpRouteActionRewritePrefixState   `json:"prefix"`
}

type HttpRouteActionRewriteHostnameState struct {
	DefaultTargetHostname string `json:"default_target_hostname"`
}

type HttpRouteActionRewritePathState struct {
	Exact string `json:"exact"`
}

type HttpRouteActionRewritePrefixState struct {
	DefaultPrefix string `json:"default_prefix"`
	Value         string `json:"value"`
}

type HttpRouteActionTargetState struct {
	Port           float64                                    `json:"port"`
	VirtualService []HttpRouteActionTargetVirtualServiceState `json:"virtual_service"`
}

type HttpRouteActionTargetVirtualServiceState struct {
	VirtualServiceName string `json:"virtual_service_name"`
}

type HttpRouteMatchState struct {
	Port           float64                             `json:"port"`
	Prefix         string                              `json:"prefix"`
	Header         []HttpRouteMatchHeaderState         `json:"header"`
	Hostname       []HttpRouteMatchHostnameState       `json:"hostname"`
	Path           []HttpRouteMatchPathState           `json:"path"`
	QueryParameter []HttpRouteMatchQueryParameterState `json:"query_parameter"`
}

type HttpRouteMatchHeaderState struct {
	Invert bool                             `json:"invert"`
	Name   string                           `json:"name"`
	Match  []HttpRouteMatchHeaderMatchState `json:"match"`
}

type HttpRouteMatchHeaderMatchState struct {
	Exact  string                                `json:"exact"`
	Prefix string                                `json:"prefix"`
	Regex  string                                `json:"regex"`
	Suffix string                                `json:"suffix"`
	Range  []HttpRouteMatchHeaderMatchRangeState `json:"range"`
}

type HttpRouteMatchHeaderMatchRangeState struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type HttpRouteMatchHostnameState struct {
	Exact  string `json:"exact"`
	Suffix string `json:"suffix"`
}

type HttpRouteMatchPathState struct {
	Exact string `json:"exact"`
	Regex string `json:"regex"`
}

type HttpRouteMatchQueryParameterState struct {
	Name  string                                   `json:"name"`
	Match []HttpRouteMatchQueryParameterMatchState `json:"match"`
}

type HttpRouteMatchQueryParameterMatchState struct {
	Exact string `json:"exact"`
}
