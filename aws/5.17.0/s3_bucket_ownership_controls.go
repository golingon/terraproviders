// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3bucketownershipcontrols "github.com/golingon/terraproviders/aws/5.17.0/s3bucketownershipcontrols"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewS3BucketOwnershipControls creates a new instance of [S3BucketOwnershipControls].
func NewS3BucketOwnershipControls(name string, args S3BucketOwnershipControlsArgs) *S3BucketOwnershipControls {
	return &S3BucketOwnershipControls{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketOwnershipControls)(nil)

// S3BucketOwnershipControls represents the Terraform resource aws_s3_bucket_ownership_controls.
type S3BucketOwnershipControls struct {
	Name      string
	Args      S3BucketOwnershipControlsArgs
	state     *s3BucketOwnershipControlsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [S3BucketOwnershipControls].
func (sboc *S3BucketOwnershipControls) Type() string {
	return "aws_s3_bucket_ownership_controls"
}

// LocalName returns the local name for [S3BucketOwnershipControls].
func (sboc *S3BucketOwnershipControls) LocalName() string {
	return sboc.Name
}

// Configuration returns the configuration (args) for [S3BucketOwnershipControls].
func (sboc *S3BucketOwnershipControls) Configuration() interface{} {
	return sboc.Args
}

// DependOn is used for other resources to depend on [S3BucketOwnershipControls].
func (sboc *S3BucketOwnershipControls) DependOn() terra.Reference {
	return terra.ReferenceResource(sboc)
}

// Dependencies returns the list of resources [S3BucketOwnershipControls] depends_on.
func (sboc *S3BucketOwnershipControls) Dependencies() terra.Dependencies {
	return sboc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [S3BucketOwnershipControls].
func (sboc *S3BucketOwnershipControls) LifecycleManagement() *terra.Lifecycle {
	return sboc.Lifecycle
}

// Attributes returns the attributes for [S3BucketOwnershipControls].
func (sboc *S3BucketOwnershipControls) Attributes() s3BucketOwnershipControlsAttributes {
	return s3BucketOwnershipControlsAttributes{ref: terra.ReferenceResource(sboc)}
}

// ImportState imports the given attribute values into [S3BucketOwnershipControls]'s state.
func (sboc *S3BucketOwnershipControls) ImportState(av io.Reader) error {
	sboc.state = &s3BucketOwnershipControlsState{}
	if err := json.NewDecoder(av).Decode(sboc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sboc.Type(), sboc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [S3BucketOwnershipControls] has state.
func (sboc *S3BucketOwnershipControls) State() (*s3BucketOwnershipControlsState, bool) {
	return sboc.state, sboc.state != nil
}

// StateMust returns the state for [S3BucketOwnershipControls]. Panics if the state is nil.
func (sboc *S3BucketOwnershipControls) StateMust() *s3BucketOwnershipControlsState {
	if sboc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sboc.Type(), sboc.LocalName()))
	}
	return sboc.state
}

// S3BucketOwnershipControlsArgs contains the configurations for aws_s3_bucket_ownership_controls.
type S3BucketOwnershipControlsArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Rule: required
	Rule *s3bucketownershipcontrols.Rule `hcl:"rule,block" validate:"required"`
}
type s3BucketOwnershipControlsAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of aws_s3_bucket_ownership_controls.
func (sboc s3BucketOwnershipControlsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(sboc.ref.Append("bucket"))
}

// Id returns a reference to field id of aws_s3_bucket_ownership_controls.
func (sboc s3BucketOwnershipControlsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sboc.ref.Append("id"))
}

func (sboc s3BucketOwnershipControlsAttributes) Rule() terra.ListValue[s3bucketownershipcontrols.RuleAttributes] {
	return terra.ReferenceAsList[s3bucketownershipcontrols.RuleAttributes](sboc.ref.Append("rule"))
}

type s3BucketOwnershipControlsState struct {
	Bucket string                                `json:"bucket"`
	Id     string                                `json:"id"`
	Rule   []s3bucketownershipcontrols.RuleState `json:"rule"`
}
