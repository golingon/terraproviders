// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewTransferProfile creates a new instance of [TransferProfile].
func NewTransferProfile(name string, args TransferProfileArgs) *TransferProfile {
	return &TransferProfile{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TransferProfile)(nil)

// TransferProfile represents the Terraform resource aws_transfer_profile.
type TransferProfile struct {
	Name      string
	Args      TransferProfileArgs
	state     *transferProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [TransferProfile].
func (tp *TransferProfile) Type() string {
	return "aws_transfer_profile"
}

// LocalName returns the local name for [TransferProfile].
func (tp *TransferProfile) LocalName() string {
	return tp.Name
}

// Configuration returns the configuration (args) for [TransferProfile].
func (tp *TransferProfile) Configuration() interface{} {
	return tp.Args
}

// DependOn is used for other resources to depend on [TransferProfile].
func (tp *TransferProfile) DependOn() terra.Reference {
	return terra.ReferenceResource(tp)
}

// Dependencies returns the list of resources [TransferProfile] depends_on.
func (tp *TransferProfile) Dependencies() terra.Dependencies {
	return tp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [TransferProfile].
func (tp *TransferProfile) LifecycleManagement() *terra.Lifecycle {
	return tp.Lifecycle
}

// Attributes returns the attributes for [TransferProfile].
func (tp *TransferProfile) Attributes() transferProfileAttributes {
	return transferProfileAttributes{ref: terra.ReferenceResource(tp)}
}

// ImportState imports the given attribute values into [TransferProfile]'s state.
func (tp *TransferProfile) ImportState(av io.Reader) error {
	tp.state = &transferProfileState{}
	if err := json.NewDecoder(av).Decode(tp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tp.Type(), tp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [TransferProfile] has state.
func (tp *TransferProfile) State() (*transferProfileState, bool) {
	return tp.state, tp.state != nil
}

// StateMust returns the state for [TransferProfile]. Panics if the state is nil.
func (tp *TransferProfile) StateMust() *transferProfileState {
	if tp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tp.Type(), tp.LocalName()))
	}
	return tp.state
}

// TransferProfileArgs contains the configurations for aws_transfer_profile.
type TransferProfileArgs struct {
	// As2Id: string, required
	As2Id terra.StringValue `hcl:"as2_id,attr" validate:"required"`
	// CertificateIds: set of string, optional
	CertificateIds terra.SetValue[terra.StringValue] `hcl:"certificate_ids,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProfileType: string, required
	ProfileType terra.StringValue `hcl:"profile_type,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type transferProfileAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_transfer_profile.
func (tp transferProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("arn"))
}

// As2Id returns a reference to field as2_id of aws_transfer_profile.
func (tp transferProfileAttributes) As2Id() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("as2_id"))
}

// CertificateIds returns a reference to field certificate_ids of aws_transfer_profile.
func (tp transferProfileAttributes) CertificateIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tp.ref.Append("certificate_ids"))
}

// Id returns a reference to field id of aws_transfer_profile.
func (tp transferProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("id"))
}

// ProfileId returns a reference to field profile_id of aws_transfer_profile.
func (tp transferProfileAttributes) ProfileId() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("profile_id"))
}

// ProfileType returns a reference to field profile_type of aws_transfer_profile.
func (tp transferProfileAttributes) ProfileType() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("profile_type"))
}

// Tags returns a reference to field tags of aws_transfer_profile.
func (tp transferProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](tp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_transfer_profile.
func (tp transferProfileAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](tp.ref.Append("tags_all"))
}

type transferProfileState struct {
	Arn            string            `json:"arn"`
	As2Id          string            `json:"as2_id"`
	CertificateIds []string          `json:"certificate_ids"`
	Id             string            `json:"id"`
	ProfileId      string            `json:"profile_id"`
	ProfileType    string            `json:"profile_type"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
}
