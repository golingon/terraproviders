// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package pipespipe

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type EnrichmentParameters struct {
	// InputTemplate: string, optional
	InputTemplate terra.StringValue `hcl:"input_template,attr"`
	// EnrichmentParametersHttpParameters: optional
	HttpParameters *EnrichmentParametersHttpParameters `hcl:"http_parameters,block"`
}

type EnrichmentParametersHttpParameters struct {
	// HeaderParameters: map of string, optional
	HeaderParameters terra.MapValue[terra.StringValue] `hcl:"header_parameters,attr"`
	// PathParameterValues: list of string, optional
	PathParameterValues terra.ListValue[terra.StringValue] `hcl:"path_parameter_values,attr"`
	// QueryStringParameters: map of string, optional
	QueryStringParameters terra.MapValue[terra.StringValue] `hcl:"query_string_parameters,attr"`
}

type SourceParameters struct {
	// ActivemqBrokerParameters: optional
	ActivemqBrokerParameters *ActivemqBrokerParameters `hcl:"activemq_broker_parameters,block"`
	// DynamodbStreamParameters: optional
	DynamodbStreamParameters *DynamodbStreamParameters `hcl:"dynamodb_stream_parameters,block"`
	// FilterCriteria: optional
	FilterCriteria *FilterCriteria `hcl:"filter_criteria,block"`
	// SourceParametersKinesisStreamParameters: optional
	KinesisStreamParameters *SourceParametersKinesisStreamParameters `hcl:"kinesis_stream_parameters,block"`
	// ManagedStreamingKafkaParameters: optional
	ManagedStreamingKafkaParameters *ManagedStreamingKafkaParameters `hcl:"managed_streaming_kafka_parameters,block"`
	// RabbitmqBrokerParameters: optional
	RabbitmqBrokerParameters *RabbitmqBrokerParameters `hcl:"rabbitmq_broker_parameters,block"`
	// SelfManagedKafkaParameters: optional
	SelfManagedKafkaParameters *SelfManagedKafkaParameters `hcl:"self_managed_kafka_parameters,block"`
	// SourceParametersSqsQueueParameters: optional
	SqsQueueParameters *SourceParametersSqsQueueParameters `hcl:"sqs_queue_parameters,block"`
}

type ActivemqBrokerParameters struct {
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
	// QueueName: string, required
	QueueName terra.StringValue `hcl:"queue_name,attr" validate:"required"`
	// ActivemqBrokerParametersCredentials: required
	Credentials *ActivemqBrokerParametersCredentials `hcl:"credentials,block" validate:"required"`
}

type ActivemqBrokerParametersCredentials struct {
	// BasicAuth: string, required
	BasicAuth terra.StringValue `hcl:"basic_auth,attr" validate:"required"`
}

type DynamodbStreamParameters struct {
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
	// MaximumRecordAgeInSeconds: number, optional
	MaximumRecordAgeInSeconds terra.NumberValue `hcl:"maximum_record_age_in_seconds,attr"`
	// MaximumRetryAttempts: number, optional
	MaximumRetryAttempts terra.NumberValue `hcl:"maximum_retry_attempts,attr"`
	// OnPartialBatchItemFailure: string, optional
	OnPartialBatchItemFailure terra.StringValue `hcl:"on_partial_batch_item_failure,attr"`
	// ParallelizationFactor: number, optional
	ParallelizationFactor terra.NumberValue `hcl:"parallelization_factor,attr"`
	// StartingPosition: string, required
	StartingPosition terra.StringValue `hcl:"starting_position,attr" validate:"required"`
	// DynamodbStreamParametersDeadLetterConfig: optional
	DeadLetterConfig *DynamodbStreamParametersDeadLetterConfig `hcl:"dead_letter_config,block"`
}

type DynamodbStreamParametersDeadLetterConfig struct {
	// Arn: string, optional
	Arn terra.StringValue `hcl:"arn,attr"`
}

type FilterCriteria struct {
	// Filter: min=0,max=5
	Filter []Filter `hcl:"filter,block" validate:"min=0,max=5"`
}

type Filter struct {
	// Pattern: string, required
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
}

type SourceParametersKinesisStreamParameters struct {
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
	// MaximumRecordAgeInSeconds: number, optional
	MaximumRecordAgeInSeconds terra.NumberValue `hcl:"maximum_record_age_in_seconds,attr"`
	// MaximumRetryAttempts: number, optional
	MaximumRetryAttempts terra.NumberValue `hcl:"maximum_retry_attempts,attr"`
	// OnPartialBatchItemFailure: string, optional
	OnPartialBatchItemFailure terra.StringValue `hcl:"on_partial_batch_item_failure,attr"`
	// ParallelizationFactor: number, optional
	ParallelizationFactor terra.NumberValue `hcl:"parallelization_factor,attr"`
	// StartingPosition: string, required
	StartingPosition terra.StringValue `hcl:"starting_position,attr" validate:"required"`
	// StartingPositionTimestamp: string, optional
	StartingPositionTimestamp terra.StringValue `hcl:"starting_position_timestamp,attr"`
	// KinesisStreamParametersDeadLetterConfig: optional
	DeadLetterConfig *KinesisStreamParametersDeadLetterConfig `hcl:"dead_letter_config,block"`
}

type KinesisStreamParametersDeadLetterConfig struct {
	// Arn: string, optional
	Arn terra.StringValue `hcl:"arn,attr"`
}

type ManagedStreamingKafkaParameters struct {
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// ConsumerGroupId: string, optional
	ConsumerGroupId terra.StringValue `hcl:"consumer_group_id,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
	// StartingPosition: string, optional
	StartingPosition terra.StringValue `hcl:"starting_position,attr"`
	// TopicName: string, required
	TopicName terra.StringValue `hcl:"topic_name,attr" validate:"required"`
	// ManagedStreamingKafkaParametersCredentials: optional
	Credentials *ManagedStreamingKafkaParametersCredentials `hcl:"credentials,block"`
}

type ManagedStreamingKafkaParametersCredentials struct {
	// ClientCertificateTlsAuth: string, optional
	ClientCertificateTlsAuth terra.StringValue `hcl:"client_certificate_tls_auth,attr"`
	// SaslScram512Auth: string, optional
	SaslScram512Auth terra.StringValue `hcl:"sasl_scram_512_auth,attr"`
}

type RabbitmqBrokerParameters struct {
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
	// QueueName: string, required
	QueueName terra.StringValue `hcl:"queue_name,attr" validate:"required"`
	// VirtualHost: string, optional
	VirtualHost terra.StringValue `hcl:"virtual_host,attr"`
	// RabbitmqBrokerParametersCredentials: required
	Credentials *RabbitmqBrokerParametersCredentials `hcl:"credentials,block" validate:"required"`
}

type RabbitmqBrokerParametersCredentials struct {
	// BasicAuth: string, required
	BasicAuth terra.StringValue `hcl:"basic_auth,attr" validate:"required"`
}

type SelfManagedKafkaParameters struct {
	// AdditionalBootstrapServers: set of string, optional
	AdditionalBootstrapServers terra.SetValue[terra.StringValue] `hcl:"additional_bootstrap_servers,attr"`
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// ConsumerGroupId: string, optional
	ConsumerGroupId terra.StringValue `hcl:"consumer_group_id,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
	// ServerRootCaCertificate: string, optional
	ServerRootCaCertificate terra.StringValue `hcl:"server_root_ca_certificate,attr"`
	// StartingPosition: string, optional
	StartingPosition terra.StringValue `hcl:"starting_position,attr"`
	// TopicName: string, required
	TopicName terra.StringValue `hcl:"topic_name,attr" validate:"required"`
	// SelfManagedKafkaParametersCredentials: optional
	Credentials *SelfManagedKafkaParametersCredentials `hcl:"credentials,block"`
	// Vpc: optional
	Vpc *Vpc `hcl:"vpc,block"`
}

type SelfManagedKafkaParametersCredentials struct {
	// BasicAuth: string, required
	BasicAuth terra.StringValue `hcl:"basic_auth,attr" validate:"required"`
	// ClientCertificateTlsAuth: string, optional
	ClientCertificateTlsAuth terra.StringValue `hcl:"client_certificate_tls_auth,attr"`
	// SaslScram256Auth: string, optional
	SaslScram256Auth terra.StringValue `hcl:"sasl_scram_256_auth,attr"`
	// SaslScram512Auth: string, optional
	SaslScram512Auth terra.StringValue `hcl:"sasl_scram_512_auth,attr"`
}

type Vpc struct {
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Subnets: set of string, optional
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr"`
}

type SourceParametersSqsQueueParameters struct {
	// BatchSize: number, optional
	BatchSize terra.NumberValue `hcl:"batch_size,attr"`
	// MaximumBatchingWindowInSeconds: number, optional
	MaximumBatchingWindowInSeconds terra.NumberValue `hcl:"maximum_batching_window_in_seconds,attr"`
}

type TargetParameters struct {
	// InputTemplate: string, optional
	InputTemplate terra.StringValue `hcl:"input_template,attr"`
	// BatchJobParameters: optional
	BatchJobParameters *BatchJobParameters `hcl:"batch_job_parameters,block"`
	// CloudwatchLogsParameters: optional
	CloudwatchLogsParameters *CloudwatchLogsParameters `hcl:"cloudwatch_logs_parameters,block"`
	// EcsTaskParameters: optional
	EcsTaskParameters *EcsTaskParameters `hcl:"ecs_task_parameters,block"`
	// EventbridgeEventBusParameters: optional
	EventbridgeEventBusParameters *EventbridgeEventBusParameters `hcl:"eventbridge_event_bus_parameters,block"`
	// TargetParametersHttpParameters: optional
	HttpParameters *TargetParametersHttpParameters `hcl:"http_parameters,block"`
	// TargetParametersKinesisStreamParameters: optional
	KinesisStreamParameters *TargetParametersKinesisStreamParameters `hcl:"kinesis_stream_parameters,block"`
	// LambdaFunctionParameters: optional
	LambdaFunctionParameters *LambdaFunctionParameters `hcl:"lambda_function_parameters,block"`
	// RedshiftDataParameters: optional
	RedshiftDataParameters *RedshiftDataParameters `hcl:"redshift_data_parameters,block"`
	// SagemakerPipelineParameters: optional
	SagemakerPipelineParameters *SagemakerPipelineParameters `hcl:"sagemaker_pipeline_parameters,block"`
	// TargetParametersSqsQueueParameters: optional
	SqsQueueParameters *TargetParametersSqsQueueParameters `hcl:"sqs_queue_parameters,block"`
	// StepFunctionStateMachineParameters: optional
	StepFunctionStateMachineParameters *StepFunctionStateMachineParameters `hcl:"step_function_state_machine_parameters,block"`
}

type BatchJobParameters struct {
	// JobDefinition: string, required
	JobDefinition terra.StringValue `hcl:"job_definition,attr" validate:"required"`
	// JobName: string, required
	JobName terra.StringValue `hcl:"job_name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// ArrayProperties: optional
	ArrayProperties *ArrayProperties `hcl:"array_properties,block"`
	// ContainerOverrides: optional
	ContainerOverrides *ContainerOverrides `hcl:"container_overrides,block"`
	// DependsOn: min=0,max=20
	DependsOn []DependsOn `hcl:"depends_on,block" validate:"min=0,max=20"`
	// RetryStrategy: optional
	RetryStrategy *RetryStrategy `hcl:"retry_strategy,block"`
}

type ArrayProperties struct {
	// Size: number, optional
	Size terra.NumberValue `hcl:"size,attr"`
}

type ContainerOverrides struct {
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// InstanceType: string, optional
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// ContainerOverridesEnvironment: min=0
	Environment []ContainerOverridesEnvironment `hcl:"environment,block" validate:"min=0"`
	// ContainerOverridesResourceRequirement: min=0
	ResourceRequirement []ContainerOverridesResourceRequirement `hcl:"resource_requirement,block" validate:"min=0"`
}

type ContainerOverridesEnvironment struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type ContainerOverridesResourceRequirement struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type DependsOn struct {
	// JobId: string, optional
	JobId terra.StringValue `hcl:"job_id,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type RetryStrategy struct {
	// Attempts: number, optional
	Attempts terra.NumberValue `hcl:"attempts,attr"`
}

type CloudwatchLogsParameters struct {
	// LogStreamName: string, optional
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
	// Timestamp: string, optional
	Timestamp terra.StringValue `hcl:"timestamp,attr"`
}

type EcsTaskParameters struct {
	// EnableEcsManagedTags: bool, optional
	EnableEcsManagedTags terra.BoolValue `hcl:"enable_ecs_managed_tags,attr"`
	// EnableExecuteCommand: bool, optional
	EnableExecuteCommand terra.BoolValue `hcl:"enable_execute_command,attr"`
	// Group: string, optional
	Group terra.StringValue `hcl:"group,attr"`
	// LaunchType: string, optional
	LaunchType terra.StringValue `hcl:"launch_type,attr"`
	// PlatformVersion: string, optional
	PlatformVersion terra.StringValue `hcl:"platform_version,attr"`
	// PropagateTags: string, optional
	PropagateTags terra.StringValue `hcl:"propagate_tags,attr"`
	// ReferenceId: string, optional
	ReferenceId terra.StringValue `hcl:"reference_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TaskCount: number, optional
	TaskCount terra.NumberValue `hcl:"task_count,attr"`
	// TaskDefinitionArn: string, required
	TaskDefinitionArn terra.StringValue `hcl:"task_definition_arn,attr" validate:"required"`
	// CapacityProviderStrategy: min=0,max=6
	CapacityProviderStrategy []CapacityProviderStrategy `hcl:"capacity_provider_strategy,block" validate:"min=0,max=6"`
	// NetworkConfiguration: optional
	NetworkConfiguration *NetworkConfiguration `hcl:"network_configuration,block"`
	// Overrides: optional
	Overrides *Overrides `hcl:"overrides,block"`
	// PlacementConstraint: min=0,max=10
	PlacementConstraint []PlacementConstraint `hcl:"placement_constraint,block" validate:"min=0,max=10"`
	// PlacementStrategy: min=0,max=5
	PlacementStrategy []PlacementStrategy `hcl:"placement_strategy,block" validate:"min=0,max=5"`
}

type CapacityProviderStrategy struct {
	// Base: number, optional
	Base terra.NumberValue `hcl:"base,attr"`
	// CapacityProvider: string, required
	CapacityProvider terra.StringValue `hcl:"capacity_provider,attr" validate:"required"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type NetworkConfiguration struct {
	// AwsVpcConfiguration: optional
	AwsVpcConfiguration *AwsVpcConfiguration `hcl:"aws_vpc_configuration,block"`
}

type AwsVpcConfiguration struct {
	// AssignPublicIp: string, optional
	AssignPublicIp terra.StringValue `hcl:"assign_public_ip,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Subnets: set of string, optional
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr"`
}

type Overrides struct {
	// Cpu: string, optional
	Cpu terra.StringValue `hcl:"cpu,attr"`
	// ExecutionRoleArn: string, optional
	ExecutionRoleArn terra.StringValue `hcl:"execution_role_arn,attr"`
	// Memory: string, optional
	Memory terra.StringValue `hcl:"memory,attr"`
	// TaskRoleArn: string, optional
	TaskRoleArn terra.StringValue `hcl:"task_role_arn,attr"`
	// ContainerOverride: min=0
	ContainerOverride []ContainerOverride `hcl:"container_override,block" validate:"min=0"`
	// EphemeralStorage: optional
	EphemeralStorage *EphemeralStorage `hcl:"ephemeral_storage,block"`
	// InferenceAcceleratorOverride: min=0
	InferenceAcceleratorOverride []InferenceAcceleratorOverride `hcl:"inference_accelerator_override,block" validate:"min=0"`
}

type ContainerOverride struct {
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// Cpu: number, optional
	Cpu terra.NumberValue `hcl:"cpu,attr"`
	// Memory: number, optional
	Memory terra.NumberValue `hcl:"memory,attr"`
	// MemoryReservation: number, optional
	MemoryReservation terra.NumberValue `hcl:"memory_reservation,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ContainerOverrideEnvironment: min=0
	Environment []ContainerOverrideEnvironment `hcl:"environment,block" validate:"min=0"`
	// EnvironmentFile: min=0
	EnvironmentFile []EnvironmentFile `hcl:"environment_file,block" validate:"min=0"`
	// ContainerOverrideResourceRequirement: min=0
	ResourceRequirement []ContainerOverrideResourceRequirement `hcl:"resource_requirement,block" validate:"min=0"`
}

type ContainerOverrideEnvironment struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type EnvironmentFile struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ContainerOverrideResourceRequirement struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type EphemeralStorage struct {
	// SizeInGib: number, required
	SizeInGib terra.NumberValue `hcl:"size_in_gib,attr" validate:"required"`
}

type InferenceAcceleratorOverride struct {
	// DeviceName: string, optional
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// DeviceType: string, optional
	DeviceType terra.StringValue `hcl:"device_type,attr"`
}

type PlacementConstraint struct {
	// Expression: string, optional
	Expression terra.StringValue `hcl:"expression,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type PlacementStrategy struct {
	// Field: string, optional
	Field terra.StringValue `hcl:"field,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type EventbridgeEventBusParameters struct {
	// DetailType: string, optional
	DetailType terra.StringValue `hcl:"detail_type,attr"`
	// EndpointId: string, optional
	EndpointId terra.StringValue `hcl:"endpoint_id,attr"`
	// Resources: set of string, optional
	Resources terra.SetValue[terra.StringValue] `hcl:"resources,attr"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
	// Time: string, optional
	Time terra.StringValue `hcl:"time,attr"`
}

type TargetParametersHttpParameters struct {
	// HeaderParameters: map of string, optional
	HeaderParameters terra.MapValue[terra.StringValue] `hcl:"header_parameters,attr"`
	// PathParameterValues: list of string, optional
	PathParameterValues terra.ListValue[terra.StringValue] `hcl:"path_parameter_values,attr"`
	// QueryStringParameters: map of string, optional
	QueryStringParameters terra.MapValue[terra.StringValue] `hcl:"query_string_parameters,attr"`
}

type TargetParametersKinesisStreamParameters struct {
	// PartitionKey: string, required
	PartitionKey terra.StringValue `hcl:"partition_key,attr" validate:"required"`
}

type LambdaFunctionParameters struct {
	// InvocationType: string, required
	InvocationType terra.StringValue `hcl:"invocation_type,attr" validate:"required"`
}

type RedshiftDataParameters struct {
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// DbUser: string, optional
	DbUser terra.StringValue `hcl:"db_user,attr"`
	// SecretManagerArn: string, optional
	SecretManagerArn terra.StringValue `hcl:"secret_manager_arn,attr"`
	// Sqls: set of string, required
	Sqls terra.SetValue[terra.StringValue] `hcl:"sqls,attr" validate:"required"`
	// StatementName: string, optional
	StatementName terra.StringValue `hcl:"statement_name,attr"`
	// WithEvent: bool, optional
	WithEvent terra.BoolValue `hcl:"with_event,attr"`
}

type SagemakerPipelineParameters struct {
	// PipelineParameter: min=0,max=200
	PipelineParameter []PipelineParameter `hcl:"pipeline_parameter,block" validate:"min=0,max=200"`
}

type PipelineParameter struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type TargetParametersSqsQueueParameters struct {
	// MessageDeduplicationId: string, optional
	MessageDeduplicationId terra.StringValue `hcl:"message_deduplication_id,attr"`
	// MessageGroupId: string, optional
	MessageGroupId terra.StringValue `hcl:"message_group_id,attr"`
}

type StepFunctionStateMachineParameters struct {
	// InvocationType: string, required
	InvocationType terra.StringValue `hcl:"invocation_type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type EnrichmentParametersAttributes struct {
	ref terra.Reference
}

func (ep EnrichmentParametersAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep EnrichmentParametersAttributes) InternalWithRef(ref terra.Reference) EnrichmentParametersAttributes {
	return EnrichmentParametersAttributes{ref: ref}
}

func (ep EnrichmentParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep EnrichmentParametersAttributes) InputTemplate() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("input_template"))
}

func (ep EnrichmentParametersAttributes) HttpParameters() terra.ListValue[EnrichmentParametersHttpParametersAttributes] {
	return terra.ReferenceAsList[EnrichmentParametersHttpParametersAttributes](ep.ref.Append("http_parameters"))
}

type EnrichmentParametersHttpParametersAttributes struct {
	ref terra.Reference
}

func (hp EnrichmentParametersHttpParametersAttributes) InternalRef() (terra.Reference, error) {
	return hp.ref, nil
}

func (hp EnrichmentParametersHttpParametersAttributes) InternalWithRef(ref terra.Reference) EnrichmentParametersHttpParametersAttributes {
	return EnrichmentParametersHttpParametersAttributes{ref: ref}
}

func (hp EnrichmentParametersHttpParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hp.ref.InternalTokens()
}

func (hp EnrichmentParametersHttpParametersAttributes) HeaderParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hp.ref.Append("header_parameters"))
}

func (hp EnrichmentParametersHttpParametersAttributes) PathParameterValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hp.ref.Append("path_parameter_values"))
}

func (hp EnrichmentParametersHttpParametersAttributes) QueryStringParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hp.ref.Append("query_string_parameters"))
}

type SourceParametersAttributes struct {
	ref terra.Reference
}

func (sp SourceParametersAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp SourceParametersAttributes) InternalWithRef(ref terra.Reference) SourceParametersAttributes {
	return SourceParametersAttributes{ref: ref}
}

func (sp SourceParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp SourceParametersAttributes) ActivemqBrokerParameters() terra.ListValue[ActivemqBrokerParametersAttributes] {
	return terra.ReferenceAsList[ActivemqBrokerParametersAttributes](sp.ref.Append("activemq_broker_parameters"))
}

func (sp SourceParametersAttributes) DynamodbStreamParameters() terra.ListValue[DynamodbStreamParametersAttributes] {
	return terra.ReferenceAsList[DynamodbStreamParametersAttributes](sp.ref.Append("dynamodb_stream_parameters"))
}

func (sp SourceParametersAttributes) FilterCriteria() terra.ListValue[FilterCriteriaAttributes] {
	return terra.ReferenceAsList[FilterCriteriaAttributes](sp.ref.Append("filter_criteria"))
}

func (sp SourceParametersAttributes) KinesisStreamParameters() terra.ListValue[SourceParametersKinesisStreamParametersAttributes] {
	return terra.ReferenceAsList[SourceParametersKinesisStreamParametersAttributes](sp.ref.Append("kinesis_stream_parameters"))
}

func (sp SourceParametersAttributes) ManagedStreamingKafkaParameters() terra.ListValue[ManagedStreamingKafkaParametersAttributes] {
	return terra.ReferenceAsList[ManagedStreamingKafkaParametersAttributes](sp.ref.Append("managed_streaming_kafka_parameters"))
}

func (sp SourceParametersAttributes) RabbitmqBrokerParameters() terra.ListValue[RabbitmqBrokerParametersAttributes] {
	return terra.ReferenceAsList[RabbitmqBrokerParametersAttributes](sp.ref.Append("rabbitmq_broker_parameters"))
}

func (sp SourceParametersAttributes) SelfManagedKafkaParameters() terra.ListValue[SelfManagedKafkaParametersAttributes] {
	return terra.ReferenceAsList[SelfManagedKafkaParametersAttributes](sp.ref.Append("self_managed_kafka_parameters"))
}

func (sp SourceParametersAttributes) SqsQueueParameters() terra.ListValue[SourceParametersSqsQueueParametersAttributes] {
	return terra.ReferenceAsList[SourceParametersSqsQueueParametersAttributes](sp.ref.Append("sqs_queue_parameters"))
}

type ActivemqBrokerParametersAttributes struct {
	ref terra.Reference
}

func (abp ActivemqBrokerParametersAttributes) InternalRef() (terra.Reference, error) {
	return abp.ref, nil
}

func (abp ActivemqBrokerParametersAttributes) InternalWithRef(ref terra.Reference) ActivemqBrokerParametersAttributes {
	return ActivemqBrokerParametersAttributes{ref: ref}
}

func (abp ActivemqBrokerParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return abp.ref.InternalTokens()
}

func (abp ActivemqBrokerParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(abp.ref.Append("batch_size"))
}

func (abp ActivemqBrokerParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(abp.ref.Append("maximum_batching_window_in_seconds"))
}

func (abp ActivemqBrokerParametersAttributes) QueueName() terra.StringValue {
	return terra.ReferenceAsString(abp.ref.Append("queue_name"))
}

func (abp ActivemqBrokerParametersAttributes) Credentials() terra.ListValue[ActivemqBrokerParametersCredentialsAttributes] {
	return terra.ReferenceAsList[ActivemqBrokerParametersCredentialsAttributes](abp.ref.Append("credentials"))
}

type ActivemqBrokerParametersCredentialsAttributes struct {
	ref terra.Reference
}

func (c ActivemqBrokerParametersCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ActivemqBrokerParametersCredentialsAttributes) InternalWithRef(ref terra.Reference) ActivemqBrokerParametersCredentialsAttributes {
	return ActivemqBrokerParametersCredentialsAttributes{ref: ref}
}

func (c ActivemqBrokerParametersCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ActivemqBrokerParametersCredentialsAttributes) BasicAuth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("basic_auth"))
}

type DynamodbStreamParametersAttributes struct {
	ref terra.Reference
}

func (dsp DynamodbStreamParametersAttributes) InternalRef() (terra.Reference, error) {
	return dsp.ref, nil
}

func (dsp DynamodbStreamParametersAttributes) InternalWithRef(ref terra.Reference) DynamodbStreamParametersAttributes {
	return DynamodbStreamParametersAttributes{ref: ref}
}

func (dsp DynamodbStreamParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dsp.ref.InternalTokens()
}

func (dsp DynamodbStreamParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(dsp.ref.Append("batch_size"))
}

func (dsp DynamodbStreamParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(dsp.ref.Append("maximum_batching_window_in_seconds"))
}

func (dsp DynamodbStreamParametersAttributes) MaximumRecordAgeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(dsp.ref.Append("maximum_record_age_in_seconds"))
}

func (dsp DynamodbStreamParametersAttributes) MaximumRetryAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(dsp.ref.Append("maximum_retry_attempts"))
}

func (dsp DynamodbStreamParametersAttributes) OnPartialBatchItemFailure() terra.StringValue {
	return terra.ReferenceAsString(dsp.ref.Append("on_partial_batch_item_failure"))
}

func (dsp DynamodbStreamParametersAttributes) ParallelizationFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(dsp.ref.Append("parallelization_factor"))
}

func (dsp DynamodbStreamParametersAttributes) StartingPosition() terra.StringValue {
	return terra.ReferenceAsString(dsp.ref.Append("starting_position"))
}

func (dsp DynamodbStreamParametersAttributes) DeadLetterConfig() terra.ListValue[DynamodbStreamParametersDeadLetterConfigAttributes] {
	return terra.ReferenceAsList[DynamodbStreamParametersDeadLetterConfigAttributes](dsp.ref.Append("dead_letter_config"))
}

type DynamodbStreamParametersDeadLetterConfigAttributes struct {
	ref terra.Reference
}

func (dlc DynamodbStreamParametersDeadLetterConfigAttributes) InternalRef() (terra.Reference, error) {
	return dlc.ref, nil
}

func (dlc DynamodbStreamParametersDeadLetterConfigAttributes) InternalWithRef(ref terra.Reference) DynamodbStreamParametersDeadLetterConfigAttributes {
	return DynamodbStreamParametersDeadLetterConfigAttributes{ref: ref}
}

func (dlc DynamodbStreamParametersDeadLetterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dlc.ref.InternalTokens()
}

func (dlc DynamodbStreamParametersDeadLetterConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dlc.ref.Append("arn"))
}

type FilterCriteriaAttributes struct {
	ref terra.Reference
}

func (fc FilterCriteriaAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc FilterCriteriaAttributes) InternalWithRef(ref terra.Reference) FilterCriteriaAttributes {
	return FilterCriteriaAttributes{ref: ref}
}

func (fc FilterCriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc FilterCriteriaAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](fc.ref.Append("filter"))
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("pattern"))
}

type SourceParametersKinesisStreamParametersAttributes struct {
	ref terra.Reference
}

func (ksp SourceParametersKinesisStreamParametersAttributes) InternalRef() (terra.Reference, error) {
	return ksp.ref, nil
}

func (ksp SourceParametersKinesisStreamParametersAttributes) InternalWithRef(ref terra.Reference) SourceParametersKinesisStreamParametersAttributes {
	return SourceParametersKinesisStreamParametersAttributes{ref: ref}
}

func (ksp SourceParametersKinesisStreamParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ksp.ref.InternalTokens()
}

func (ksp SourceParametersKinesisStreamParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ksp.ref.Append("batch_size"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(ksp.ref.Append("maximum_batching_window_in_seconds"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) MaximumRecordAgeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(ksp.ref.Append("maximum_record_age_in_seconds"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) MaximumRetryAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(ksp.ref.Append("maximum_retry_attempts"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) OnPartialBatchItemFailure() terra.StringValue {
	return terra.ReferenceAsString(ksp.ref.Append("on_partial_batch_item_failure"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) ParallelizationFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(ksp.ref.Append("parallelization_factor"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) StartingPosition() terra.StringValue {
	return terra.ReferenceAsString(ksp.ref.Append("starting_position"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) StartingPositionTimestamp() terra.StringValue {
	return terra.ReferenceAsString(ksp.ref.Append("starting_position_timestamp"))
}

func (ksp SourceParametersKinesisStreamParametersAttributes) DeadLetterConfig() terra.ListValue[KinesisStreamParametersDeadLetterConfigAttributes] {
	return terra.ReferenceAsList[KinesisStreamParametersDeadLetterConfigAttributes](ksp.ref.Append("dead_letter_config"))
}

type KinesisStreamParametersDeadLetterConfigAttributes struct {
	ref terra.Reference
}

func (dlc KinesisStreamParametersDeadLetterConfigAttributes) InternalRef() (terra.Reference, error) {
	return dlc.ref, nil
}

func (dlc KinesisStreamParametersDeadLetterConfigAttributes) InternalWithRef(ref terra.Reference) KinesisStreamParametersDeadLetterConfigAttributes {
	return KinesisStreamParametersDeadLetterConfigAttributes{ref: ref}
}

func (dlc KinesisStreamParametersDeadLetterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dlc.ref.InternalTokens()
}

func (dlc KinesisStreamParametersDeadLetterConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dlc.ref.Append("arn"))
}

type ManagedStreamingKafkaParametersAttributes struct {
	ref terra.Reference
}

func (mskp ManagedStreamingKafkaParametersAttributes) InternalRef() (terra.Reference, error) {
	return mskp.ref, nil
}

func (mskp ManagedStreamingKafkaParametersAttributes) InternalWithRef(ref terra.Reference) ManagedStreamingKafkaParametersAttributes {
	return ManagedStreamingKafkaParametersAttributes{ref: ref}
}

func (mskp ManagedStreamingKafkaParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mskp.ref.InternalTokens()
}

func (mskp ManagedStreamingKafkaParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(mskp.ref.Append("batch_size"))
}

func (mskp ManagedStreamingKafkaParametersAttributes) ConsumerGroupId() terra.StringValue {
	return terra.ReferenceAsString(mskp.ref.Append("consumer_group_id"))
}

func (mskp ManagedStreamingKafkaParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(mskp.ref.Append("maximum_batching_window_in_seconds"))
}

func (mskp ManagedStreamingKafkaParametersAttributes) StartingPosition() terra.StringValue {
	return terra.ReferenceAsString(mskp.ref.Append("starting_position"))
}

func (mskp ManagedStreamingKafkaParametersAttributes) TopicName() terra.StringValue {
	return terra.ReferenceAsString(mskp.ref.Append("topic_name"))
}

func (mskp ManagedStreamingKafkaParametersAttributes) Credentials() terra.ListValue[ManagedStreamingKafkaParametersCredentialsAttributes] {
	return terra.ReferenceAsList[ManagedStreamingKafkaParametersCredentialsAttributes](mskp.ref.Append("credentials"))
}

type ManagedStreamingKafkaParametersCredentialsAttributes struct {
	ref terra.Reference
}

func (c ManagedStreamingKafkaParametersCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ManagedStreamingKafkaParametersCredentialsAttributes) InternalWithRef(ref terra.Reference) ManagedStreamingKafkaParametersCredentialsAttributes {
	return ManagedStreamingKafkaParametersCredentialsAttributes{ref: ref}
}

func (c ManagedStreamingKafkaParametersCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ManagedStreamingKafkaParametersCredentialsAttributes) ClientCertificateTlsAuth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("client_certificate_tls_auth"))
}

func (c ManagedStreamingKafkaParametersCredentialsAttributes) SaslScram512Auth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("sasl_scram_512_auth"))
}

type RabbitmqBrokerParametersAttributes struct {
	ref terra.Reference
}

func (rbp RabbitmqBrokerParametersAttributes) InternalRef() (terra.Reference, error) {
	return rbp.ref, nil
}

func (rbp RabbitmqBrokerParametersAttributes) InternalWithRef(ref terra.Reference) RabbitmqBrokerParametersAttributes {
	return RabbitmqBrokerParametersAttributes{ref: ref}
}

func (rbp RabbitmqBrokerParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rbp.ref.InternalTokens()
}

func (rbp RabbitmqBrokerParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(rbp.ref.Append("batch_size"))
}

func (rbp RabbitmqBrokerParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rbp.ref.Append("maximum_batching_window_in_seconds"))
}

func (rbp RabbitmqBrokerParametersAttributes) QueueName() terra.StringValue {
	return terra.ReferenceAsString(rbp.ref.Append("queue_name"))
}

func (rbp RabbitmqBrokerParametersAttributes) VirtualHost() terra.StringValue {
	return terra.ReferenceAsString(rbp.ref.Append("virtual_host"))
}

func (rbp RabbitmqBrokerParametersAttributes) Credentials() terra.ListValue[RabbitmqBrokerParametersCredentialsAttributes] {
	return terra.ReferenceAsList[RabbitmqBrokerParametersCredentialsAttributes](rbp.ref.Append("credentials"))
}

type RabbitmqBrokerParametersCredentialsAttributes struct {
	ref terra.Reference
}

func (c RabbitmqBrokerParametersCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c RabbitmqBrokerParametersCredentialsAttributes) InternalWithRef(ref terra.Reference) RabbitmqBrokerParametersCredentialsAttributes {
	return RabbitmqBrokerParametersCredentialsAttributes{ref: ref}
}

func (c RabbitmqBrokerParametersCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c RabbitmqBrokerParametersCredentialsAttributes) BasicAuth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("basic_auth"))
}

type SelfManagedKafkaParametersAttributes struct {
	ref terra.Reference
}

func (smkp SelfManagedKafkaParametersAttributes) InternalRef() (terra.Reference, error) {
	return smkp.ref, nil
}

func (smkp SelfManagedKafkaParametersAttributes) InternalWithRef(ref terra.Reference) SelfManagedKafkaParametersAttributes {
	return SelfManagedKafkaParametersAttributes{ref: ref}
}

func (smkp SelfManagedKafkaParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return smkp.ref.InternalTokens()
}

func (smkp SelfManagedKafkaParametersAttributes) AdditionalBootstrapServers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](smkp.ref.Append("additional_bootstrap_servers"))
}

func (smkp SelfManagedKafkaParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(smkp.ref.Append("batch_size"))
}

func (smkp SelfManagedKafkaParametersAttributes) ConsumerGroupId() terra.StringValue {
	return terra.ReferenceAsString(smkp.ref.Append("consumer_group_id"))
}

func (smkp SelfManagedKafkaParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(smkp.ref.Append("maximum_batching_window_in_seconds"))
}

func (smkp SelfManagedKafkaParametersAttributes) ServerRootCaCertificate() terra.StringValue {
	return terra.ReferenceAsString(smkp.ref.Append("server_root_ca_certificate"))
}

func (smkp SelfManagedKafkaParametersAttributes) StartingPosition() terra.StringValue {
	return terra.ReferenceAsString(smkp.ref.Append("starting_position"))
}

func (smkp SelfManagedKafkaParametersAttributes) TopicName() terra.StringValue {
	return terra.ReferenceAsString(smkp.ref.Append("topic_name"))
}

func (smkp SelfManagedKafkaParametersAttributes) Credentials() terra.ListValue[SelfManagedKafkaParametersCredentialsAttributes] {
	return terra.ReferenceAsList[SelfManagedKafkaParametersCredentialsAttributes](smkp.ref.Append("credentials"))
}

func (smkp SelfManagedKafkaParametersAttributes) Vpc() terra.ListValue[VpcAttributes] {
	return terra.ReferenceAsList[VpcAttributes](smkp.ref.Append("vpc"))
}

type SelfManagedKafkaParametersCredentialsAttributes struct {
	ref terra.Reference
}

func (c SelfManagedKafkaParametersCredentialsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c SelfManagedKafkaParametersCredentialsAttributes) InternalWithRef(ref terra.Reference) SelfManagedKafkaParametersCredentialsAttributes {
	return SelfManagedKafkaParametersCredentialsAttributes{ref: ref}
}

func (c SelfManagedKafkaParametersCredentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c SelfManagedKafkaParametersCredentialsAttributes) BasicAuth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("basic_auth"))
}

func (c SelfManagedKafkaParametersCredentialsAttributes) ClientCertificateTlsAuth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("client_certificate_tls_auth"))
}

func (c SelfManagedKafkaParametersCredentialsAttributes) SaslScram256Auth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("sasl_scram_256_auth"))
}

func (c SelfManagedKafkaParametersCredentialsAttributes) SaslScram512Auth() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("sasl_scram_512_auth"))
}

type VpcAttributes struct {
	ref terra.Reference
}

func (v VpcAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VpcAttributes) InternalWithRef(ref terra.Reference) VpcAttributes {
	return VpcAttributes{ref: ref}
}

func (v VpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VpcAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](v.ref.Append("security_groups"))
}

func (v VpcAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](v.ref.Append("subnets"))
}

type SourceParametersSqsQueueParametersAttributes struct {
	ref terra.Reference
}

func (sqp SourceParametersSqsQueueParametersAttributes) InternalRef() (terra.Reference, error) {
	return sqp.ref, nil
}

func (sqp SourceParametersSqsQueueParametersAttributes) InternalWithRef(ref terra.Reference) SourceParametersSqsQueueParametersAttributes {
	return SourceParametersSqsQueueParametersAttributes{ref: ref}
}

func (sqp SourceParametersSqsQueueParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sqp.ref.InternalTokens()
}

func (sqp SourceParametersSqsQueueParametersAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sqp.ref.Append("batch_size"))
}

func (sqp SourceParametersSqsQueueParametersAttributes) MaximumBatchingWindowInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sqp.ref.Append("maximum_batching_window_in_seconds"))
}

type TargetParametersAttributes struct {
	ref terra.Reference
}

func (tp TargetParametersAttributes) InternalRef() (terra.Reference, error) {
	return tp.ref, nil
}

func (tp TargetParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersAttributes {
	return TargetParametersAttributes{ref: ref}
}

func (tp TargetParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tp.ref.InternalTokens()
}

func (tp TargetParametersAttributes) InputTemplate() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("input_template"))
}

func (tp TargetParametersAttributes) BatchJobParameters() terra.ListValue[BatchJobParametersAttributes] {
	return terra.ReferenceAsList[BatchJobParametersAttributes](tp.ref.Append("batch_job_parameters"))
}

func (tp TargetParametersAttributes) CloudwatchLogsParameters() terra.ListValue[CloudwatchLogsParametersAttributes] {
	return terra.ReferenceAsList[CloudwatchLogsParametersAttributes](tp.ref.Append("cloudwatch_logs_parameters"))
}

func (tp TargetParametersAttributes) EcsTaskParameters() terra.ListValue[EcsTaskParametersAttributes] {
	return terra.ReferenceAsList[EcsTaskParametersAttributes](tp.ref.Append("ecs_task_parameters"))
}

func (tp TargetParametersAttributes) EventbridgeEventBusParameters() terra.ListValue[EventbridgeEventBusParametersAttributes] {
	return terra.ReferenceAsList[EventbridgeEventBusParametersAttributes](tp.ref.Append("eventbridge_event_bus_parameters"))
}

func (tp TargetParametersAttributes) HttpParameters() terra.ListValue[TargetParametersHttpParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersHttpParametersAttributes](tp.ref.Append("http_parameters"))
}

func (tp TargetParametersAttributes) KinesisStreamParameters() terra.ListValue[TargetParametersKinesisStreamParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersKinesisStreamParametersAttributes](tp.ref.Append("kinesis_stream_parameters"))
}

func (tp TargetParametersAttributes) LambdaFunctionParameters() terra.ListValue[LambdaFunctionParametersAttributes] {
	return terra.ReferenceAsList[LambdaFunctionParametersAttributes](tp.ref.Append("lambda_function_parameters"))
}

func (tp TargetParametersAttributes) RedshiftDataParameters() terra.ListValue[RedshiftDataParametersAttributes] {
	return terra.ReferenceAsList[RedshiftDataParametersAttributes](tp.ref.Append("redshift_data_parameters"))
}

func (tp TargetParametersAttributes) SagemakerPipelineParameters() terra.ListValue[SagemakerPipelineParametersAttributes] {
	return terra.ReferenceAsList[SagemakerPipelineParametersAttributes](tp.ref.Append("sagemaker_pipeline_parameters"))
}

func (tp TargetParametersAttributes) SqsQueueParameters() terra.ListValue[TargetParametersSqsQueueParametersAttributes] {
	return terra.ReferenceAsList[TargetParametersSqsQueueParametersAttributes](tp.ref.Append("sqs_queue_parameters"))
}

func (tp TargetParametersAttributes) StepFunctionStateMachineParameters() terra.ListValue[StepFunctionStateMachineParametersAttributes] {
	return terra.ReferenceAsList[StepFunctionStateMachineParametersAttributes](tp.ref.Append("step_function_state_machine_parameters"))
}

type BatchJobParametersAttributes struct {
	ref terra.Reference
}

func (bjp BatchJobParametersAttributes) InternalRef() (terra.Reference, error) {
	return bjp.ref, nil
}

func (bjp BatchJobParametersAttributes) InternalWithRef(ref terra.Reference) BatchJobParametersAttributes {
	return BatchJobParametersAttributes{ref: ref}
}

func (bjp BatchJobParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bjp.ref.InternalTokens()
}

func (bjp BatchJobParametersAttributes) JobDefinition() terra.StringValue {
	return terra.ReferenceAsString(bjp.ref.Append("job_definition"))
}

func (bjp BatchJobParametersAttributes) JobName() terra.StringValue {
	return terra.ReferenceAsString(bjp.ref.Append("job_name"))
}

func (bjp BatchJobParametersAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](bjp.ref.Append("parameters"))
}

func (bjp BatchJobParametersAttributes) ArrayProperties() terra.ListValue[ArrayPropertiesAttributes] {
	return terra.ReferenceAsList[ArrayPropertiesAttributes](bjp.ref.Append("array_properties"))
}

func (bjp BatchJobParametersAttributes) ContainerOverrides() terra.ListValue[ContainerOverridesAttributes] {
	return terra.ReferenceAsList[ContainerOverridesAttributes](bjp.ref.Append("container_overrides"))
}

func (bjp BatchJobParametersAttributes) DependsOn() terra.ListValue[DependsOnAttributes] {
	return terra.ReferenceAsList[DependsOnAttributes](bjp.ref.Append("depends_on"))
}

func (bjp BatchJobParametersAttributes) RetryStrategy() terra.ListValue[RetryStrategyAttributes] {
	return terra.ReferenceAsList[RetryStrategyAttributes](bjp.ref.Append("retry_strategy"))
}

type ArrayPropertiesAttributes struct {
	ref terra.Reference
}

func (ap ArrayPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap ArrayPropertiesAttributes) InternalWithRef(ref terra.Reference) ArrayPropertiesAttributes {
	return ArrayPropertiesAttributes{ref: ref}
}

func (ap ArrayPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap ArrayPropertiesAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ap.ref.Append("size"))
}

type ContainerOverridesAttributes struct {
	ref terra.Reference
}

func (co ContainerOverridesAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co ContainerOverridesAttributes) InternalWithRef(ref terra.Reference) ContainerOverridesAttributes {
	return ContainerOverridesAttributes{ref: ref}
}

func (co ContainerOverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co ContainerOverridesAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](co.ref.Append("command"))
}

func (co ContainerOverridesAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("instance_type"))
}

func (co ContainerOverridesAttributes) Environment() terra.ListValue[ContainerOverridesEnvironmentAttributes] {
	return terra.ReferenceAsList[ContainerOverridesEnvironmentAttributes](co.ref.Append("environment"))
}

func (co ContainerOverridesAttributes) ResourceRequirement() terra.ListValue[ContainerOverridesResourceRequirementAttributes] {
	return terra.ReferenceAsList[ContainerOverridesResourceRequirementAttributes](co.ref.Append("resource_requirement"))
}

type ContainerOverridesEnvironmentAttributes struct {
	ref terra.Reference
}

func (e ContainerOverridesEnvironmentAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ContainerOverridesEnvironmentAttributes) InternalWithRef(ref terra.Reference) ContainerOverridesEnvironmentAttributes {
	return ContainerOverridesEnvironmentAttributes{ref: ref}
}

func (e ContainerOverridesEnvironmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ContainerOverridesEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e ContainerOverridesEnvironmentAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type ContainerOverridesResourceRequirementAttributes struct {
	ref terra.Reference
}

func (rr ContainerOverridesResourceRequirementAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr ContainerOverridesResourceRequirementAttributes) InternalWithRef(ref terra.Reference) ContainerOverridesResourceRequirementAttributes {
	return ContainerOverridesResourceRequirementAttributes{ref: ref}
}

func (rr ContainerOverridesResourceRequirementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr ContainerOverridesResourceRequirementAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("type"))
}

func (rr ContainerOverridesResourceRequirementAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("value"))
}

type DependsOnAttributes struct {
	ref terra.Reference
}

func (do DependsOnAttributes) InternalRef() (terra.Reference, error) {
	return do.ref, nil
}

func (do DependsOnAttributes) InternalWithRef(ref terra.Reference) DependsOnAttributes {
	return DependsOnAttributes{ref: ref}
}

func (do DependsOnAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return do.ref.InternalTokens()
}

func (do DependsOnAttributes) JobId() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("job_id"))
}

func (do DependsOnAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("type"))
}

type RetryStrategyAttributes struct {
	ref terra.Reference
}

func (rs RetryStrategyAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RetryStrategyAttributes) InternalWithRef(ref terra.Reference) RetryStrategyAttributes {
	return RetryStrategyAttributes{ref: ref}
}

func (rs RetryStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RetryStrategyAttributes) Attempts() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("attempts"))
}

type CloudwatchLogsParametersAttributes struct {
	ref terra.Reference
}

func (clp CloudwatchLogsParametersAttributes) InternalRef() (terra.Reference, error) {
	return clp.ref, nil
}

func (clp CloudwatchLogsParametersAttributes) InternalWithRef(ref terra.Reference) CloudwatchLogsParametersAttributes {
	return CloudwatchLogsParametersAttributes{ref: ref}
}

func (clp CloudwatchLogsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clp.ref.InternalTokens()
}

func (clp CloudwatchLogsParametersAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clp.ref.Append("log_stream_name"))
}

func (clp CloudwatchLogsParametersAttributes) Timestamp() terra.StringValue {
	return terra.ReferenceAsString(clp.ref.Append("timestamp"))
}

type EcsTaskParametersAttributes struct {
	ref terra.Reference
}

func (etp EcsTaskParametersAttributes) InternalRef() (terra.Reference, error) {
	return etp.ref, nil
}

func (etp EcsTaskParametersAttributes) InternalWithRef(ref terra.Reference) EcsTaskParametersAttributes {
	return EcsTaskParametersAttributes{ref: ref}
}

func (etp EcsTaskParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return etp.ref.InternalTokens()
}

func (etp EcsTaskParametersAttributes) EnableEcsManagedTags() terra.BoolValue {
	return terra.ReferenceAsBool(etp.ref.Append("enable_ecs_managed_tags"))
}

func (etp EcsTaskParametersAttributes) EnableExecuteCommand() terra.BoolValue {
	return terra.ReferenceAsBool(etp.ref.Append("enable_execute_command"))
}

func (etp EcsTaskParametersAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(etp.ref.Append("group"))
}

func (etp EcsTaskParametersAttributes) LaunchType() terra.StringValue {
	return terra.ReferenceAsString(etp.ref.Append("launch_type"))
}

func (etp EcsTaskParametersAttributes) PlatformVersion() terra.StringValue {
	return terra.ReferenceAsString(etp.ref.Append("platform_version"))
}

func (etp EcsTaskParametersAttributes) PropagateTags() terra.StringValue {
	return terra.ReferenceAsString(etp.ref.Append("propagate_tags"))
}

func (etp EcsTaskParametersAttributes) ReferenceId() terra.StringValue {
	return terra.ReferenceAsString(etp.ref.Append("reference_id"))
}

func (etp EcsTaskParametersAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](etp.ref.Append("tags"))
}

func (etp EcsTaskParametersAttributes) TaskCount() terra.NumberValue {
	return terra.ReferenceAsNumber(etp.ref.Append("task_count"))
}

func (etp EcsTaskParametersAttributes) TaskDefinitionArn() terra.StringValue {
	return terra.ReferenceAsString(etp.ref.Append("task_definition_arn"))
}

func (etp EcsTaskParametersAttributes) CapacityProviderStrategy() terra.ListValue[CapacityProviderStrategyAttributes] {
	return terra.ReferenceAsList[CapacityProviderStrategyAttributes](etp.ref.Append("capacity_provider_strategy"))
}

func (etp EcsTaskParametersAttributes) NetworkConfiguration() terra.ListValue[NetworkConfigurationAttributes] {
	return terra.ReferenceAsList[NetworkConfigurationAttributes](etp.ref.Append("network_configuration"))
}

func (etp EcsTaskParametersAttributes) Overrides() terra.ListValue[OverridesAttributes] {
	return terra.ReferenceAsList[OverridesAttributes](etp.ref.Append("overrides"))
}

func (etp EcsTaskParametersAttributes) PlacementConstraint() terra.ListValue[PlacementConstraintAttributes] {
	return terra.ReferenceAsList[PlacementConstraintAttributes](etp.ref.Append("placement_constraint"))
}

func (etp EcsTaskParametersAttributes) PlacementStrategy() terra.ListValue[PlacementStrategyAttributes] {
	return terra.ReferenceAsList[PlacementStrategyAttributes](etp.ref.Append("placement_strategy"))
}

type CapacityProviderStrategyAttributes struct {
	ref terra.Reference
}

func (cps CapacityProviderStrategyAttributes) InternalRef() (terra.Reference, error) {
	return cps.ref, nil
}

func (cps CapacityProviderStrategyAttributes) InternalWithRef(ref terra.Reference) CapacityProviderStrategyAttributes {
	return CapacityProviderStrategyAttributes{ref: ref}
}

func (cps CapacityProviderStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cps.ref.InternalTokens()
}

func (cps CapacityProviderStrategyAttributes) Base() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("base"))
}

func (cps CapacityProviderStrategyAttributes) CapacityProvider() terra.StringValue {
	return terra.ReferenceAsString(cps.ref.Append("capacity_provider"))
}

func (cps CapacityProviderStrategyAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("weight"))
}

type NetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) NetworkConfigurationAttributes {
	return NetworkConfigurationAttributes{ref: ref}
}

func (nc NetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigurationAttributes) AwsVpcConfiguration() terra.ListValue[AwsVpcConfigurationAttributes] {
	return terra.ReferenceAsList[AwsVpcConfigurationAttributes](nc.ref.Append("aws_vpc_configuration"))
}

type AwsVpcConfigurationAttributes struct {
	ref terra.Reference
}

func (avc AwsVpcConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return avc.ref, nil
}

func (avc AwsVpcConfigurationAttributes) InternalWithRef(ref terra.Reference) AwsVpcConfigurationAttributes {
	return AwsVpcConfigurationAttributes{ref: ref}
}

func (avc AwsVpcConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return avc.ref.InternalTokens()
}

func (avc AwsVpcConfigurationAttributes) AssignPublicIp() terra.StringValue {
	return terra.ReferenceAsString(avc.ref.Append("assign_public_ip"))
}

func (avc AwsVpcConfigurationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](avc.ref.Append("security_groups"))
}

func (avc AwsVpcConfigurationAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](avc.ref.Append("subnets"))
}

type OverridesAttributes struct {
	ref terra.Reference
}

func (o OverridesAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OverridesAttributes) InternalWithRef(ref terra.Reference) OverridesAttributes {
	return OverridesAttributes{ref: ref}
}

func (o OverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o OverridesAttributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("cpu"))
}

func (o OverridesAttributes) ExecutionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("execution_role_arn"))
}

func (o OverridesAttributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("memory"))
}

func (o OverridesAttributes) TaskRoleArn() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("task_role_arn"))
}

func (o OverridesAttributes) ContainerOverride() terra.ListValue[ContainerOverrideAttributes] {
	return terra.ReferenceAsList[ContainerOverrideAttributes](o.ref.Append("container_override"))
}

func (o OverridesAttributes) EphemeralStorage() terra.ListValue[EphemeralStorageAttributes] {
	return terra.ReferenceAsList[EphemeralStorageAttributes](o.ref.Append("ephemeral_storage"))
}

func (o OverridesAttributes) InferenceAcceleratorOverride() terra.ListValue[InferenceAcceleratorOverrideAttributes] {
	return terra.ReferenceAsList[InferenceAcceleratorOverrideAttributes](o.ref.Append("inference_accelerator_override"))
}

type ContainerOverrideAttributes struct {
	ref terra.Reference
}

func (co ContainerOverrideAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co ContainerOverrideAttributes) InternalWithRef(ref terra.Reference) ContainerOverrideAttributes {
	return ContainerOverrideAttributes{ref: ref}
}

func (co ContainerOverrideAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co ContainerOverrideAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](co.ref.Append("command"))
}

func (co ContainerOverrideAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("cpu"))
}

func (co ContainerOverrideAttributes) Memory() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("memory"))
}

func (co ContainerOverrideAttributes) MemoryReservation() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("memory_reservation"))
}

func (co ContainerOverrideAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("name"))
}

func (co ContainerOverrideAttributes) Environment() terra.ListValue[ContainerOverrideEnvironmentAttributes] {
	return terra.ReferenceAsList[ContainerOverrideEnvironmentAttributes](co.ref.Append("environment"))
}

func (co ContainerOverrideAttributes) EnvironmentFile() terra.ListValue[EnvironmentFileAttributes] {
	return terra.ReferenceAsList[EnvironmentFileAttributes](co.ref.Append("environment_file"))
}

func (co ContainerOverrideAttributes) ResourceRequirement() terra.ListValue[ContainerOverrideResourceRequirementAttributes] {
	return terra.ReferenceAsList[ContainerOverrideResourceRequirementAttributes](co.ref.Append("resource_requirement"))
}

type ContainerOverrideEnvironmentAttributes struct {
	ref terra.Reference
}

func (e ContainerOverrideEnvironmentAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ContainerOverrideEnvironmentAttributes) InternalWithRef(ref terra.Reference) ContainerOverrideEnvironmentAttributes {
	return ContainerOverrideEnvironmentAttributes{ref: ref}
}

func (e ContainerOverrideEnvironmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ContainerOverrideEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

func (e ContainerOverrideEnvironmentAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type EnvironmentFileAttributes struct {
	ref terra.Reference
}

func (ef EnvironmentFileAttributes) InternalRef() (terra.Reference, error) {
	return ef.ref, nil
}

func (ef EnvironmentFileAttributes) InternalWithRef(ref terra.Reference) EnvironmentFileAttributes {
	return EnvironmentFileAttributes{ref: ref}
}

func (ef EnvironmentFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ef.ref.InternalTokens()
}

func (ef EnvironmentFileAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("type"))
}

func (ef EnvironmentFileAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("value"))
}

type ContainerOverrideResourceRequirementAttributes struct {
	ref terra.Reference
}

func (rr ContainerOverrideResourceRequirementAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr ContainerOverrideResourceRequirementAttributes) InternalWithRef(ref terra.Reference) ContainerOverrideResourceRequirementAttributes {
	return ContainerOverrideResourceRequirementAttributes{ref: ref}
}

func (rr ContainerOverrideResourceRequirementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr ContainerOverrideResourceRequirementAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("type"))
}

func (rr ContainerOverrideResourceRequirementAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("value"))
}

type EphemeralStorageAttributes struct {
	ref terra.Reference
}

func (es EphemeralStorageAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es EphemeralStorageAttributes) InternalWithRef(ref terra.Reference) EphemeralStorageAttributes {
	return EphemeralStorageAttributes{ref: ref}
}

func (es EphemeralStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es EphemeralStorageAttributes) SizeInGib() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("size_in_gib"))
}

type InferenceAcceleratorOverrideAttributes struct {
	ref terra.Reference
}

func (iao InferenceAcceleratorOverrideAttributes) InternalRef() (terra.Reference, error) {
	return iao.ref, nil
}

func (iao InferenceAcceleratorOverrideAttributes) InternalWithRef(ref terra.Reference) InferenceAcceleratorOverrideAttributes {
	return InferenceAcceleratorOverrideAttributes{ref: ref}
}

func (iao InferenceAcceleratorOverrideAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iao.ref.InternalTokens()
}

func (iao InferenceAcceleratorOverrideAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(iao.ref.Append("device_name"))
}

func (iao InferenceAcceleratorOverrideAttributes) DeviceType() terra.StringValue {
	return terra.ReferenceAsString(iao.ref.Append("device_type"))
}

type PlacementConstraintAttributes struct {
	ref terra.Reference
}

func (pc PlacementConstraintAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc PlacementConstraintAttributes) InternalWithRef(ref terra.Reference) PlacementConstraintAttributes {
	return PlacementConstraintAttributes{ref: ref}
}

func (pc PlacementConstraintAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc PlacementConstraintAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("expression"))
}

func (pc PlacementConstraintAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("type"))
}

type PlacementStrategyAttributes struct {
	ref terra.Reference
}

func (ps PlacementStrategyAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps PlacementStrategyAttributes) InternalWithRef(ref terra.Reference) PlacementStrategyAttributes {
	return PlacementStrategyAttributes{ref: ref}
}

func (ps PlacementStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps PlacementStrategyAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("field"))
}

func (ps PlacementStrategyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("type"))
}

type EventbridgeEventBusParametersAttributes struct {
	ref terra.Reference
}

func (eebp EventbridgeEventBusParametersAttributes) InternalRef() (terra.Reference, error) {
	return eebp.ref, nil
}

func (eebp EventbridgeEventBusParametersAttributes) InternalWithRef(ref terra.Reference) EventbridgeEventBusParametersAttributes {
	return EventbridgeEventBusParametersAttributes{ref: ref}
}

func (eebp EventbridgeEventBusParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eebp.ref.InternalTokens()
}

func (eebp EventbridgeEventBusParametersAttributes) DetailType() terra.StringValue {
	return terra.ReferenceAsString(eebp.ref.Append("detail_type"))
}

func (eebp EventbridgeEventBusParametersAttributes) EndpointId() terra.StringValue {
	return terra.ReferenceAsString(eebp.ref.Append("endpoint_id"))
}

func (eebp EventbridgeEventBusParametersAttributes) Resources() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](eebp.ref.Append("resources"))
}

func (eebp EventbridgeEventBusParametersAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(eebp.ref.Append("source"))
}

func (eebp EventbridgeEventBusParametersAttributes) Time() terra.StringValue {
	return terra.ReferenceAsString(eebp.ref.Append("time"))
}

type TargetParametersHttpParametersAttributes struct {
	ref terra.Reference
}

func (hp TargetParametersHttpParametersAttributes) InternalRef() (terra.Reference, error) {
	return hp.ref, nil
}

func (hp TargetParametersHttpParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersHttpParametersAttributes {
	return TargetParametersHttpParametersAttributes{ref: ref}
}

func (hp TargetParametersHttpParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hp.ref.InternalTokens()
}

func (hp TargetParametersHttpParametersAttributes) HeaderParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hp.ref.Append("header_parameters"))
}

func (hp TargetParametersHttpParametersAttributes) PathParameterValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hp.ref.Append("path_parameter_values"))
}

func (hp TargetParametersHttpParametersAttributes) QueryStringParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hp.ref.Append("query_string_parameters"))
}

type TargetParametersKinesisStreamParametersAttributes struct {
	ref terra.Reference
}

func (ksp TargetParametersKinesisStreamParametersAttributes) InternalRef() (terra.Reference, error) {
	return ksp.ref, nil
}

func (ksp TargetParametersKinesisStreamParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersKinesisStreamParametersAttributes {
	return TargetParametersKinesisStreamParametersAttributes{ref: ref}
}

func (ksp TargetParametersKinesisStreamParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ksp.ref.InternalTokens()
}

func (ksp TargetParametersKinesisStreamParametersAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceAsString(ksp.ref.Append("partition_key"))
}

type LambdaFunctionParametersAttributes struct {
	ref terra.Reference
}

func (lfp LambdaFunctionParametersAttributes) InternalRef() (terra.Reference, error) {
	return lfp.ref, nil
}

func (lfp LambdaFunctionParametersAttributes) InternalWithRef(ref terra.Reference) LambdaFunctionParametersAttributes {
	return LambdaFunctionParametersAttributes{ref: ref}
}

func (lfp LambdaFunctionParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lfp.ref.InternalTokens()
}

func (lfp LambdaFunctionParametersAttributes) InvocationType() terra.StringValue {
	return terra.ReferenceAsString(lfp.ref.Append("invocation_type"))
}

type RedshiftDataParametersAttributes struct {
	ref terra.Reference
}

func (rdp RedshiftDataParametersAttributes) InternalRef() (terra.Reference, error) {
	return rdp.ref, nil
}

func (rdp RedshiftDataParametersAttributes) InternalWithRef(ref terra.Reference) RedshiftDataParametersAttributes {
	return RedshiftDataParametersAttributes{ref: ref}
}

func (rdp RedshiftDataParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rdp.ref.InternalTokens()
}

func (rdp RedshiftDataParametersAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(rdp.ref.Append("database"))
}

func (rdp RedshiftDataParametersAttributes) DbUser() terra.StringValue {
	return terra.ReferenceAsString(rdp.ref.Append("db_user"))
}

func (rdp RedshiftDataParametersAttributes) SecretManagerArn() terra.StringValue {
	return terra.ReferenceAsString(rdp.ref.Append("secret_manager_arn"))
}

func (rdp RedshiftDataParametersAttributes) Sqls() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rdp.ref.Append("sqls"))
}

func (rdp RedshiftDataParametersAttributes) StatementName() terra.StringValue {
	return terra.ReferenceAsString(rdp.ref.Append("statement_name"))
}

func (rdp RedshiftDataParametersAttributes) WithEvent() terra.BoolValue {
	return terra.ReferenceAsBool(rdp.ref.Append("with_event"))
}

type SagemakerPipelineParametersAttributes struct {
	ref terra.Reference
}

func (spp SagemakerPipelineParametersAttributes) InternalRef() (terra.Reference, error) {
	return spp.ref, nil
}

func (spp SagemakerPipelineParametersAttributes) InternalWithRef(ref terra.Reference) SagemakerPipelineParametersAttributes {
	return SagemakerPipelineParametersAttributes{ref: ref}
}

func (spp SagemakerPipelineParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spp.ref.InternalTokens()
}

func (spp SagemakerPipelineParametersAttributes) PipelineParameter() terra.ListValue[PipelineParameterAttributes] {
	return terra.ReferenceAsList[PipelineParameterAttributes](spp.ref.Append("pipeline_parameter"))
}

type PipelineParameterAttributes struct {
	ref terra.Reference
}

func (pp PipelineParameterAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp PipelineParameterAttributes) InternalWithRef(ref terra.Reference) PipelineParameterAttributes {
	return PipelineParameterAttributes{ref: ref}
}

func (pp PipelineParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp PipelineParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("name"))
}

func (pp PipelineParameterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("value"))
}

type TargetParametersSqsQueueParametersAttributes struct {
	ref terra.Reference
}

func (sqp TargetParametersSqsQueueParametersAttributes) InternalRef() (terra.Reference, error) {
	return sqp.ref, nil
}

func (sqp TargetParametersSqsQueueParametersAttributes) InternalWithRef(ref terra.Reference) TargetParametersSqsQueueParametersAttributes {
	return TargetParametersSqsQueueParametersAttributes{ref: ref}
}

func (sqp TargetParametersSqsQueueParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sqp.ref.InternalTokens()
}

func (sqp TargetParametersSqsQueueParametersAttributes) MessageDeduplicationId() terra.StringValue {
	return terra.ReferenceAsString(sqp.ref.Append("message_deduplication_id"))
}

func (sqp TargetParametersSqsQueueParametersAttributes) MessageGroupId() terra.StringValue {
	return terra.ReferenceAsString(sqp.ref.Append("message_group_id"))
}

type StepFunctionStateMachineParametersAttributes struct {
	ref terra.Reference
}

func (sfsmp StepFunctionStateMachineParametersAttributes) InternalRef() (terra.Reference, error) {
	return sfsmp.ref, nil
}

func (sfsmp StepFunctionStateMachineParametersAttributes) InternalWithRef(ref terra.Reference) StepFunctionStateMachineParametersAttributes {
	return StepFunctionStateMachineParametersAttributes{ref: ref}
}

func (sfsmp StepFunctionStateMachineParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sfsmp.ref.InternalTokens()
}

func (sfsmp StepFunctionStateMachineParametersAttributes) InvocationType() terra.StringValue {
	return terra.ReferenceAsString(sfsmp.ref.Append("invocation_type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EnrichmentParametersState struct {
	InputTemplate  string                                    `json:"input_template"`
	HttpParameters []EnrichmentParametersHttpParametersState `json:"http_parameters"`
}

type EnrichmentParametersHttpParametersState struct {
	HeaderParameters      map[string]string `json:"header_parameters"`
	PathParameterValues   []string          `json:"path_parameter_values"`
	QueryStringParameters map[string]string `json:"query_string_parameters"`
}

type SourceParametersState struct {
	ActivemqBrokerParameters        []ActivemqBrokerParametersState                `json:"activemq_broker_parameters"`
	DynamodbStreamParameters        []DynamodbStreamParametersState                `json:"dynamodb_stream_parameters"`
	FilterCriteria                  []FilterCriteriaState                          `json:"filter_criteria"`
	KinesisStreamParameters         []SourceParametersKinesisStreamParametersState `json:"kinesis_stream_parameters"`
	ManagedStreamingKafkaParameters []ManagedStreamingKafkaParametersState         `json:"managed_streaming_kafka_parameters"`
	RabbitmqBrokerParameters        []RabbitmqBrokerParametersState                `json:"rabbitmq_broker_parameters"`
	SelfManagedKafkaParameters      []SelfManagedKafkaParametersState              `json:"self_managed_kafka_parameters"`
	SqsQueueParameters              []SourceParametersSqsQueueParametersState      `json:"sqs_queue_parameters"`
}

type ActivemqBrokerParametersState struct {
	BatchSize                      float64                                    `json:"batch_size"`
	MaximumBatchingWindowInSeconds float64                                    `json:"maximum_batching_window_in_seconds"`
	QueueName                      string                                     `json:"queue_name"`
	Credentials                    []ActivemqBrokerParametersCredentialsState `json:"credentials"`
}

type ActivemqBrokerParametersCredentialsState struct {
	BasicAuth string `json:"basic_auth"`
}

type DynamodbStreamParametersState struct {
	BatchSize                      float64                                         `json:"batch_size"`
	MaximumBatchingWindowInSeconds float64                                         `json:"maximum_batching_window_in_seconds"`
	MaximumRecordAgeInSeconds      float64                                         `json:"maximum_record_age_in_seconds"`
	MaximumRetryAttempts           float64                                         `json:"maximum_retry_attempts"`
	OnPartialBatchItemFailure      string                                          `json:"on_partial_batch_item_failure"`
	ParallelizationFactor          float64                                         `json:"parallelization_factor"`
	StartingPosition               string                                          `json:"starting_position"`
	DeadLetterConfig               []DynamodbStreamParametersDeadLetterConfigState `json:"dead_letter_config"`
}

type DynamodbStreamParametersDeadLetterConfigState struct {
	Arn string `json:"arn"`
}

type FilterCriteriaState struct {
	Filter []FilterState `json:"filter"`
}

type FilterState struct {
	Pattern string `json:"pattern"`
}

type SourceParametersKinesisStreamParametersState struct {
	BatchSize                      float64                                        `json:"batch_size"`
	MaximumBatchingWindowInSeconds float64                                        `json:"maximum_batching_window_in_seconds"`
	MaximumRecordAgeInSeconds      float64                                        `json:"maximum_record_age_in_seconds"`
	MaximumRetryAttempts           float64                                        `json:"maximum_retry_attempts"`
	OnPartialBatchItemFailure      string                                         `json:"on_partial_batch_item_failure"`
	ParallelizationFactor          float64                                        `json:"parallelization_factor"`
	StartingPosition               string                                         `json:"starting_position"`
	StartingPositionTimestamp      string                                         `json:"starting_position_timestamp"`
	DeadLetterConfig               []KinesisStreamParametersDeadLetterConfigState `json:"dead_letter_config"`
}

type KinesisStreamParametersDeadLetterConfigState struct {
	Arn string `json:"arn"`
}

type ManagedStreamingKafkaParametersState struct {
	BatchSize                      float64                                           `json:"batch_size"`
	ConsumerGroupId                string                                            `json:"consumer_group_id"`
	MaximumBatchingWindowInSeconds float64                                           `json:"maximum_batching_window_in_seconds"`
	StartingPosition               string                                            `json:"starting_position"`
	TopicName                      string                                            `json:"topic_name"`
	Credentials                    []ManagedStreamingKafkaParametersCredentialsState `json:"credentials"`
}

type ManagedStreamingKafkaParametersCredentialsState struct {
	ClientCertificateTlsAuth string `json:"client_certificate_tls_auth"`
	SaslScram512Auth         string `json:"sasl_scram_512_auth"`
}

type RabbitmqBrokerParametersState struct {
	BatchSize                      float64                                    `json:"batch_size"`
	MaximumBatchingWindowInSeconds float64                                    `json:"maximum_batching_window_in_seconds"`
	QueueName                      string                                     `json:"queue_name"`
	VirtualHost                    string                                     `json:"virtual_host"`
	Credentials                    []RabbitmqBrokerParametersCredentialsState `json:"credentials"`
}

type RabbitmqBrokerParametersCredentialsState struct {
	BasicAuth string `json:"basic_auth"`
}

type SelfManagedKafkaParametersState struct {
	AdditionalBootstrapServers     []string                                     `json:"additional_bootstrap_servers"`
	BatchSize                      float64                                      `json:"batch_size"`
	ConsumerGroupId                string                                       `json:"consumer_group_id"`
	MaximumBatchingWindowInSeconds float64                                      `json:"maximum_batching_window_in_seconds"`
	ServerRootCaCertificate        string                                       `json:"server_root_ca_certificate"`
	StartingPosition               string                                       `json:"starting_position"`
	TopicName                      string                                       `json:"topic_name"`
	Credentials                    []SelfManagedKafkaParametersCredentialsState `json:"credentials"`
	Vpc                            []VpcState                                   `json:"vpc"`
}

type SelfManagedKafkaParametersCredentialsState struct {
	BasicAuth                string `json:"basic_auth"`
	ClientCertificateTlsAuth string `json:"client_certificate_tls_auth"`
	SaslScram256Auth         string `json:"sasl_scram_256_auth"`
	SaslScram512Auth         string `json:"sasl_scram_512_auth"`
}

type VpcState struct {
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type SourceParametersSqsQueueParametersState struct {
	BatchSize                      float64 `json:"batch_size"`
	MaximumBatchingWindowInSeconds float64 `json:"maximum_batching_window_in_seconds"`
}

type TargetParametersState struct {
	InputTemplate                      string                                         `json:"input_template"`
	BatchJobParameters                 []BatchJobParametersState                      `json:"batch_job_parameters"`
	CloudwatchLogsParameters           []CloudwatchLogsParametersState                `json:"cloudwatch_logs_parameters"`
	EcsTaskParameters                  []EcsTaskParametersState                       `json:"ecs_task_parameters"`
	EventbridgeEventBusParameters      []EventbridgeEventBusParametersState           `json:"eventbridge_event_bus_parameters"`
	HttpParameters                     []TargetParametersHttpParametersState          `json:"http_parameters"`
	KinesisStreamParameters            []TargetParametersKinesisStreamParametersState `json:"kinesis_stream_parameters"`
	LambdaFunctionParameters           []LambdaFunctionParametersState                `json:"lambda_function_parameters"`
	RedshiftDataParameters             []RedshiftDataParametersState                  `json:"redshift_data_parameters"`
	SagemakerPipelineParameters        []SagemakerPipelineParametersState             `json:"sagemaker_pipeline_parameters"`
	SqsQueueParameters                 []TargetParametersSqsQueueParametersState      `json:"sqs_queue_parameters"`
	StepFunctionStateMachineParameters []StepFunctionStateMachineParametersState      `json:"step_function_state_machine_parameters"`
}

type BatchJobParametersState struct {
	JobDefinition      string                    `json:"job_definition"`
	JobName            string                    `json:"job_name"`
	Parameters         map[string]string         `json:"parameters"`
	ArrayProperties    []ArrayPropertiesState    `json:"array_properties"`
	ContainerOverrides []ContainerOverridesState `json:"container_overrides"`
	DependsOn          []DependsOnState          `json:"depends_on"`
	RetryStrategy      []RetryStrategyState      `json:"retry_strategy"`
}

type ArrayPropertiesState struct {
	Size float64 `json:"size"`
}

type ContainerOverridesState struct {
	Command             []string                                     `json:"command"`
	InstanceType        string                                       `json:"instance_type"`
	Environment         []ContainerOverridesEnvironmentState         `json:"environment"`
	ResourceRequirement []ContainerOverridesResourceRequirementState `json:"resource_requirement"`
}

type ContainerOverridesEnvironmentState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type ContainerOverridesResourceRequirementState struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type DependsOnState struct {
	JobId string `json:"job_id"`
	Type  string `json:"type"`
}

type RetryStrategyState struct {
	Attempts float64 `json:"attempts"`
}

type CloudwatchLogsParametersState struct {
	LogStreamName string `json:"log_stream_name"`
	Timestamp     string `json:"timestamp"`
}

type EcsTaskParametersState struct {
	EnableEcsManagedTags     bool                            `json:"enable_ecs_managed_tags"`
	EnableExecuteCommand     bool                            `json:"enable_execute_command"`
	Group                    string                          `json:"group"`
	LaunchType               string                          `json:"launch_type"`
	PlatformVersion          string                          `json:"platform_version"`
	PropagateTags            string                          `json:"propagate_tags"`
	ReferenceId              string                          `json:"reference_id"`
	Tags                     map[string]string               `json:"tags"`
	TaskCount                float64                         `json:"task_count"`
	TaskDefinitionArn        string                          `json:"task_definition_arn"`
	CapacityProviderStrategy []CapacityProviderStrategyState `json:"capacity_provider_strategy"`
	NetworkConfiguration     []NetworkConfigurationState     `json:"network_configuration"`
	Overrides                []OverridesState                `json:"overrides"`
	PlacementConstraint      []PlacementConstraintState      `json:"placement_constraint"`
	PlacementStrategy        []PlacementStrategyState        `json:"placement_strategy"`
}

type CapacityProviderStrategyState struct {
	Base             float64 `json:"base"`
	CapacityProvider string  `json:"capacity_provider"`
	Weight           float64 `json:"weight"`
}

type NetworkConfigurationState struct {
	AwsVpcConfiguration []AwsVpcConfigurationState `json:"aws_vpc_configuration"`
}

type AwsVpcConfigurationState struct {
	AssignPublicIp string   `json:"assign_public_ip"`
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type OverridesState struct {
	Cpu                          string                              `json:"cpu"`
	ExecutionRoleArn             string                              `json:"execution_role_arn"`
	Memory                       string                              `json:"memory"`
	TaskRoleArn                  string                              `json:"task_role_arn"`
	ContainerOverride            []ContainerOverrideState            `json:"container_override"`
	EphemeralStorage             []EphemeralStorageState             `json:"ephemeral_storage"`
	InferenceAcceleratorOverride []InferenceAcceleratorOverrideState `json:"inference_accelerator_override"`
}

type ContainerOverrideState struct {
	Command             []string                                    `json:"command"`
	Cpu                 float64                                     `json:"cpu"`
	Memory              float64                                     `json:"memory"`
	MemoryReservation   float64                                     `json:"memory_reservation"`
	Name                string                                      `json:"name"`
	Environment         []ContainerOverrideEnvironmentState         `json:"environment"`
	EnvironmentFile     []EnvironmentFileState                      `json:"environment_file"`
	ResourceRequirement []ContainerOverrideResourceRequirementState `json:"resource_requirement"`
}

type ContainerOverrideEnvironmentState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type EnvironmentFileState struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type ContainerOverrideResourceRequirementState struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type EphemeralStorageState struct {
	SizeInGib float64 `json:"size_in_gib"`
}

type InferenceAcceleratorOverrideState struct {
	DeviceName string `json:"device_name"`
	DeviceType string `json:"device_type"`
}

type PlacementConstraintState struct {
	Expression string `json:"expression"`
	Type       string `json:"type"`
}

type PlacementStrategyState struct {
	Field string `json:"field"`
	Type  string `json:"type"`
}

type EventbridgeEventBusParametersState struct {
	DetailType string   `json:"detail_type"`
	EndpointId string   `json:"endpoint_id"`
	Resources  []string `json:"resources"`
	Source     string   `json:"source"`
	Time       string   `json:"time"`
}

type TargetParametersHttpParametersState struct {
	HeaderParameters      map[string]string `json:"header_parameters"`
	PathParameterValues   []string          `json:"path_parameter_values"`
	QueryStringParameters map[string]string `json:"query_string_parameters"`
}

type TargetParametersKinesisStreamParametersState struct {
	PartitionKey string `json:"partition_key"`
}

type LambdaFunctionParametersState struct {
	InvocationType string `json:"invocation_type"`
}

type RedshiftDataParametersState struct {
	Database         string   `json:"database"`
	DbUser           string   `json:"db_user"`
	SecretManagerArn string   `json:"secret_manager_arn"`
	Sqls             []string `json:"sqls"`
	StatementName    string   `json:"statement_name"`
	WithEvent        bool     `json:"with_event"`
}

type SagemakerPipelineParametersState struct {
	PipelineParameter []PipelineParameterState `json:"pipeline_parameter"`
}

type PipelineParameterState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TargetParametersSqsQueueParametersState struct {
	MessageDeduplicationId string `json:"message_deduplication_id"`
	MessageGroupId         string `json:"message_group_id"`
}

type StepFunctionStateMachineParametersState struct {
	InvocationType string `json:"invocation_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
