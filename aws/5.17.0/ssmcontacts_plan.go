// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ssmcontactsplan "github.com/golingon/terraproviders/aws/5.17.0/ssmcontactsplan"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewSsmcontactsPlan creates a new instance of [SsmcontactsPlan].
func NewSsmcontactsPlan(name string, args SsmcontactsPlanArgs) *SsmcontactsPlan {
	return &SsmcontactsPlan{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SsmcontactsPlan)(nil)

// SsmcontactsPlan represents the Terraform resource aws_ssmcontacts_plan.
type SsmcontactsPlan struct {
	Name      string
	Args      SsmcontactsPlanArgs
	state     *ssmcontactsPlanState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SsmcontactsPlan].
func (sp *SsmcontactsPlan) Type() string {
	return "aws_ssmcontacts_plan"
}

// LocalName returns the local name for [SsmcontactsPlan].
func (sp *SsmcontactsPlan) LocalName() string {
	return sp.Name
}

// Configuration returns the configuration (args) for [SsmcontactsPlan].
func (sp *SsmcontactsPlan) Configuration() interface{} {
	return sp.Args
}

// DependOn is used for other resources to depend on [SsmcontactsPlan].
func (sp *SsmcontactsPlan) DependOn() terra.Reference {
	return terra.ReferenceResource(sp)
}

// Dependencies returns the list of resources [SsmcontactsPlan] depends_on.
func (sp *SsmcontactsPlan) Dependencies() terra.Dependencies {
	return sp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SsmcontactsPlan].
func (sp *SsmcontactsPlan) LifecycleManagement() *terra.Lifecycle {
	return sp.Lifecycle
}

// Attributes returns the attributes for [SsmcontactsPlan].
func (sp *SsmcontactsPlan) Attributes() ssmcontactsPlanAttributes {
	return ssmcontactsPlanAttributes{ref: terra.ReferenceResource(sp)}
}

// ImportState imports the given attribute values into [SsmcontactsPlan]'s state.
func (sp *SsmcontactsPlan) ImportState(av io.Reader) error {
	sp.state = &ssmcontactsPlanState{}
	if err := json.NewDecoder(av).Decode(sp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sp.Type(), sp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SsmcontactsPlan] has state.
func (sp *SsmcontactsPlan) State() (*ssmcontactsPlanState, bool) {
	return sp.state, sp.state != nil
}

// StateMust returns the state for [SsmcontactsPlan]. Panics if the state is nil.
func (sp *SsmcontactsPlan) StateMust() *ssmcontactsPlanState {
	if sp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sp.Type(), sp.LocalName()))
	}
	return sp.state
}

// SsmcontactsPlanArgs contains the configurations for aws_ssmcontacts_plan.
type SsmcontactsPlanArgs struct {
	// ContactId: string, required
	ContactId terra.StringValue `hcl:"contact_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Stage: min=1
	Stage []ssmcontactsplan.Stage `hcl:"stage,block" validate:"min=1"`
}
type ssmcontactsPlanAttributes struct {
	ref terra.Reference
}

// ContactId returns a reference to field contact_id of aws_ssmcontacts_plan.
func (sp ssmcontactsPlanAttributes) ContactId() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("contact_id"))
}

// Id returns a reference to field id of aws_ssmcontacts_plan.
func (sp ssmcontactsPlanAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("id"))
}

func (sp ssmcontactsPlanAttributes) Stage() terra.ListValue[ssmcontactsplan.StageAttributes] {
	return terra.ReferenceAsList[ssmcontactsplan.StageAttributes](sp.ref.Append("stage"))
}

type ssmcontactsPlanState struct {
	ContactId string                       `json:"contact_id"`
	Id        string                       `json:"id"`
	Stage     []ssmcontactsplan.StageState `json:"stage"`
}
