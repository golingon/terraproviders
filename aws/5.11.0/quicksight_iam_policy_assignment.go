// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	quicksightiampolicyassignment "github.com/golingon/terraproviders/aws/5.11.0/quicksightiampolicyassignment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewQuicksightIamPolicyAssignment creates a new instance of [QuicksightIamPolicyAssignment].
func NewQuicksightIamPolicyAssignment(name string, args QuicksightIamPolicyAssignmentArgs) *QuicksightIamPolicyAssignment {
	return &QuicksightIamPolicyAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*QuicksightIamPolicyAssignment)(nil)

// QuicksightIamPolicyAssignment represents the Terraform resource aws_quicksight_iam_policy_assignment.
type QuicksightIamPolicyAssignment struct {
	Name      string
	Args      QuicksightIamPolicyAssignmentArgs
	state     *quicksightIamPolicyAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [QuicksightIamPolicyAssignment].
func (qipa *QuicksightIamPolicyAssignment) Type() string {
	return "aws_quicksight_iam_policy_assignment"
}

// LocalName returns the local name for [QuicksightIamPolicyAssignment].
func (qipa *QuicksightIamPolicyAssignment) LocalName() string {
	return qipa.Name
}

// Configuration returns the configuration (args) for [QuicksightIamPolicyAssignment].
func (qipa *QuicksightIamPolicyAssignment) Configuration() interface{} {
	return qipa.Args
}

// DependOn is used for other resources to depend on [QuicksightIamPolicyAssignment].
func (qipa *QuicksightIamPolicyAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(qipa)
}

// Dependencies returns the list of resources [QuicksightIamPolicyAssignment] depends_on.
func (qipa *QuicksightIamPolicyAssignment) Dependencies() terra.Dependencies {
	return qipa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [QuicksightIamPolicyAssignment].
func (qipa *QuicksightIamPolicyAssignment) LifecycleManagement() *terra.Lifecycle {
	return qipa.Lifecycle
}

// Attributes returns the attributes for [QuicksightIamPolicyAssignment].
func (qipa *QuicksightIamPolicyAssignment) Attributes() quicksightIamPolicyAssignmentAttributes {
	return quicksightIamPolicyAssignmentAttributes{ref: terra.ReferenceResource(qipa)}
}

// ImportState imports the given attribute values into [QuicksightIamPolicyAssignment]'s state.
func (qipa *QuicksightIamPolicyAssignment) ImportState(av io.Reader) error {
	qipa.state = &quicksightIamPolicyAssignmentState{}
	if err := json.NewDecoder(av).Decode(qipa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", qipa.Type(), qipa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [QuicksightIamPolicyAssignment] has state.
func (qipa *QuicksightIamPolicyAssignment) State() (*quicksightIamPolicyAssignmentState, bool) {
	return qipa.state, qipa.state != nil
}

// StateMust returns the state for [QuicksightIamPolicyAssignment]. Panics if the state is nil.
func (qipa *QuicksightIamPolicyAssignment) StateMust() *quicksightIamPolicyAssignmentState {
	if qipa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", qipa.Type(), qipa.LocalName()))
	}
	return qipa.state
}

// QuicksightIamPolicyAssignmentArgs contains the configurations for aws_quicksight_iam_policy_assignment.
type QuicksightIamPolicyAssignmentArgs struct {
	// AssignmentName: string, required
	AssignmentName terra.StringValue `hcl:"assignment_name,attr" validate:"required"`
	// AssignmentStatus: string, required
	AssignmentStatus terra.StringValue `hcl:"assignment_status,attr" validate:"required"`
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// PolicyArn: string, optional
	PolicyArn terra.StringValue `hcl:"policy_arn,attr"`
	// Identities: min=0
	Identities []quicksightiampolicyassignment.Identities `hcl:"identities,block" validate:"min=0"`
}
type quicksightIamPolicyAssignmentAttributes struct {
	ref terra.Reference
}

// AssignmentId returns a reference to field assignment_id of aws_quicksight_iam_policy_assignment.
func (qipa quicksightIamPolicyAssignmentAttributes) AssignmentId() terra.StringValue {
	return terra.ReferenceAsString(qipa.ref.Append("assignment_id"))
}

// AssignmentName returns a reference to field assignment_name of aws_quicksight_iam_policy_assignment.
func (qipa quicksightIamPolicyAssignmentAttributes) AssignmentName() terra.StringValue {
	return terra.ReferenceAsString(qipa.ref.Append("assignment_name"))
}

// AssignmentStatus returns a reference to field assignment_status of aws_quicksight_iam_policy_assignment.
func (qipa quicksightIamPolicyAssignmentAttributes) AssignmentStatus() terra.StringValue {
	return terra.ReferenceAsString(qipa.ref.Append("assignment_status"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_iam_policy_assignment.
func (qipa quicksightIamPolicyAssignmentAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(qipa.ref.Append("aws_account_id"))
}

// Id returns a reference to field id of aws_quicksight_iam_policy_assignment.
func (qipa quicksightIamPolicyAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(qipa.ref.Append("id"))
}

// Namespace returns a reference to field namespace of aws_quicksight_iam_policy_assignment.
func (qipa quicksightIamPolicyAssignmentAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(qipa.ref.Append("namespace"))
}

// PolicyArn returns a reference to field policy_arn of aws_quicksight_iam_policy_assignment.
func (qipa quicksightIamPolicyAssignmentAttributes) PolicyArn() terra.StringValue {
	return terra.ReferenceAsString(qipa.ref.Append("policy_arn"))
}

func (qipa quicksightIamPolicyAssignmentAttributes) Identities() terra.ListValue[quicksightiampolicyassignment.IdentitiesAttributes] {
	return terra.ReferenceAsList[quicksightiampolicyassignment.IdentitiesAttributes](qipa.ref.Append("identities"))
}

type quicksightIamPolicyAssignmentState struct {
	AssignmentId     string                                          `json:"assignment_id"`
	AssignmentName   string                                          `json:"assignment_name"`
	AssignmentStatus string                                          `json:"assignment_status"`
	AwsAccountId     string                                          `json:"aws_account_id"`
	Id               string                                          `json:"id"`
	Namespace        string                                          `json:"namespace"`
	PolicyArn        string                                          `json:"policy_arn"`
	Identities       []quicksightiampolicyassignment.IdentitiesState `json:"identities"`
}
