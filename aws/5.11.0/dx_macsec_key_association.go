// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDxMacsecKeyAssociation creates a new instance of [DxMacsecKeyAssociation].
func NewDxMacsecKeyAssociation(name string, args DxMacsecKeyAssociationArgs) *DxMacsecKeyAssociation {
	return &DxMacsecKeyAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DxMacsecKeyAssociation)(nil)

// DxMacsecKeyAssociation represents the Terraform resource aws_dx_macsec_key_association.
type DxMacsecKeyAssociation struct {
	Name      string
	Args      DxMacsecKeyAssociationArgs
	state     *dxMacsecKeyAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DxMacsecKeyAssociation].
func (dmka *DxMacsecKeyAssociation) Type() string {
	return "aws_dx_macsec_key_association"
}

// LocalName returns the local name for [DxMacsecKeyAssociation].
func (dmka *DxMacsecKeyAssociation) LocalName() string {
	return dmka.Name
}

// Configuration returns the configuration (args) for [DxMacsecKeyAssociation].
func (dmka *DxMacsecKeyAssociation) Configuration() interface{} {
	return dmka.Args
}

// DependOn is used for other resources to depend on [DxMacsecKeyAssociation].
func (dmka *DxMacsecKeyAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(dmka)
}

// Dependencies returns the list of resources [DxMacsecKeyAssociation] depends_on.
func (dmka *DxMacsecKeyAssociation) Dependencies() terra.Dependencies {
	return dmka.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DxMacsecKeyAssociation].
func (dmka *DxMacsecKeyAssociation) LifecycleManagement() *terra.Lifecycle {
	return dmka.Lifecycle
}

// Attributes returns the attributes for [DxMacsecKeyAssociation].
func (dmka *DxMacsecKeyAssociation) Attributes() dxMacsecKeyAssociationAttributes {
	return dxMacsecKeyAssociationAttributes{ref: terra.ReferenceResource(dmka)}
}

// ImportState imports the given attribute values into [DxMacsecKeyAssociation]'s state.
func (dmka *DxMacsecKeyAssociation) ImportState(av io.Reader) error {
	dmka.state = &dxMacsecKeyAssociationState{}
	if err := json.NewDecoder(av).Decode(dmka.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dmka.Type(), dmka.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DxMacsecKeyAssociation] has state.
func (dmka *DxMacsecKeyAssociation) State() (*dxMacsecKeyAssociationState, bool) {
	return dmka.state, dmka.state != nil
}

// StateMust returns the state for [DxMacsecKeyAssociation]. Panics if the state is nil.
func (dmka *DxMacsecKeyAssociation) StateMust() *dxMacsecKeyAssociationState {
	if dmka.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dmka.Type(), dmka.LocalName()))
	}
	return dmka.state
}

// DxMacsecKeyAssociationArgs contains the configurations for aws_dx_macsec_key_association.
type DxMacsecKeyAssociationArgs struct {
	// Cak: string, optional
	Cak terra.StringValue `hcl:"cak,attr"`
	// Ckn: string, optional
	Ckn terra.StringValue `hcl:"ckn,attr"`
	// ConnectionId: string, required
	ConnectionId terra.StringValue `hcl:"connection_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SecretArn: string, optional
	SecretArn terra.StringValue `hcl:"secret_arn,attr"`
}
type dxMacsecKeyAssociationAttributes struct {
	ref terra.Reference
}

// Cak returns a reference to field cak of aws_dx_macsec_key_association.
func (dmka dxMacsecKeyAssociationAttributes) Cak() terra.StringValue {
	return terra.ReferenceAsString(dmka.ref.Append("cak"))
}

// Ckn returns a reference to field ckn of aws_dx_macsec_key_association.
func (dmka dxMacsecKeyAssociationAttributes) Ckn() terra.StringValue {
	return terra.ReferenceAsString(dmka.ref.Append("ckn"))
}

// ConnectionId returns a reference to field connection_id of aws_dx_macsec_key_association.
func (dmka dxMacsecKeyAssociationAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceAsString(dmka.ref.Append("connection_id"))
}

// Id returns a reference to field id of aws_dx_macsec_key_association.
func (dmka dxMacsecKeyAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dmka.ref.Append("id"))
}

// SecretArn returns a reference to field secret_arn of aws_dx_macsec_key_association.
func (dmka dxMacsecKeyAssociationAttributes) SecretArn() terra.StringValue {
	return terra.ReferenceAsString(dmka.ref.Append("secret_arn"))
}

// StartOn returns a reference to field start_on of aws_dx_macsec_key_association.
func (dmka dxMacsecKeyAssociationAttributes) StartOn() terra.StringValue {
	return terra.ReferenceAsString(dmka.ref.Append("start_on"))
}

// State returns a reference to field state of aws_dx_macsec_key_association.
func (dmka dxMacsecKeyAssociationAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(dmka.ref.Append("state"))
}

type dxMacsecKeyAssociationState struct {
	Cak          string `json:"cak"`
	Ckn          string `json:"ckn"`
	ConnectionId string `json:"connection_id"`
	Id           string `json:"id"`
	SecretArn    string `json:"secret_arn"`
	StartOn      string `json:"start_on"`
	State        string `json:"state"`
}
