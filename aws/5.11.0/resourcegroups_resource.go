// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	resourcegroupsresource "github.com/golingon/terraproviders/aws/5.11.0/resourcegroupsresource"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewResourcegroupsResource creates a new instance of [ResourcegroupsResource].
func NewResourcegroupsResource(name string, args ResourcegroupsResourceArgs) *ResourcegroupsResource {
	return &ResourcegroupsResource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ResourcegroupsResource)(nil)

// ResourcegroupsResource represents the Terraform resource aws_resourcegroups_resource.
type ResourcegroupsResource struct {
	Name      string
	Args      ResourcegroupsResourceArgs
	state     *resourcegroupsResourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ResourcegroupsResource].
func (rr *ResourcegroupsResource) Type() string {
	return "aws_resourcegroups_resource"
}

// LocalName returns the local name for [ResourcegroupsResource].
func (rr *ResourcegroupsResource) LocalName() string {
	return rr.Name
}

// Configuration returns the configuration (args) for [ResourcegroupsResource].
func (rr *ResourcegroupsResource) Configuration() interface{} {
	return rr.Args
}

// DependOn is used for other resources to depend on [ResourcegroupsResource].
func (rr *ResourcegroupsResource) DependOn() terra.Reference {
	return terra.ReferenceResource(rr)
}

// Dependencies returns the list of resources [ResourcegroupsResource] depends_on.
func (rr *ResourcegroupsResource) Dependencies() terra.Dependencies {
	return rr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ResourcegroupsResource].
func (rr *ResourcegroupsResource) LifecycleManagement() *terra.Lifecycle {
	return rr.Lifecycle
}

// Attributes returns the attributes for [ResourcegroupsResource].
func (rr *ResourcegroupsResource) Attributes() resourcegroupsResourceAttributes {
	return resourcegroupsResourceAttributes{ref: terra.ReferenceResource(rr)}
}

// ImportState imports the given attribute values into [ResourcegroupsResource]'s state.
func (rr *ResourcegroupsResource) ImportState(av io.Reader) error {
	rr.state = &resourcegroupsResourceState{}
	if err := json.NewDecoder(av).Decode(rr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rr.Type(), rr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ResourcegroupsResource] has state.
func (rr *ResourcegroupsResource) State() (*resourcegroupsResourceState, bool) {
	return rr.state, rr.state != nil
}

// StateMust returns the state for [ResourcegroupsResource]. Panics if the state is nil.
func (rr *ResourcegroupsResource) StateMust() *resourcegroupsResourceState {
	if rr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rr.Type(), rr.LocalName()))
	}
	return rr.state
}

// ResourcegroupsResourceArgs contains the configurations for aws_resourcegroups_resource.
type ResourcegroupsResourceArgs struct {
	// GroupArn: string, required
	GroupArn terra.StringValue `hcl:"group_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *resourcegroupsresource.Timeouts `hcl:"timeouts,block"`
}
type resourcegroupsResourceAttributes struct {
	ref terra.Reference
}

// GroupArn returns a reference to field group_arn of aws_resourcegroups_resource.
func (rr resourcegroupsResourceAttributes) GroupArn() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("group_arn"))
}

// Id returns a reference to field id of aws_resourcegroups_resource.
func (rr resourcegroupsResourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("id"))
}

// ResourceArn returns a reference to field resource_arn of aws_resourcegroups_resource.
func (rr resourcegroupsResourceAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("resource_arn"))
}

// ResourceType returns a reference to field resource_type of aws_resourcegroups_resource.
func (rr resourcegroupsResourceAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("resource_type"))
}

func (rr resourcegroupsResourceAttributes) Timeouts() resourcegroupsresource.TimeoutsAttributes {
	return terra.ReferenceAsSingle[resourcegroupsresource.TimeoutsAttributes](rr.ref.Append("timeouts"))
}

type resourcegroupsResourceState struct {
	GroupArn     string                                `json:"group_arn"`
	Id           string                                `json:"id"`
	ResourceArn  string                                `json:"resource_arn"`
	ResourceType string                                `json:"resource_type"`
	Timeouts     *resourcegroupsresource.TimeoutsState `json:"timeouts"`
}
