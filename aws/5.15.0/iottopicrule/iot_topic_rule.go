// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package iottopicrule

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CloudwatchAlarm struct {
	// AlarmName: string, required
	AlarmName terra.StringValue `hcl:"alarm_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// StateReason: string, required
	StateReason terra.StringValue `hcl:"state_reason,attr" validate:"required"`
	// StateValue: string, required
	StateValue terra.StringValue `hcl:"state_value,attr" validate:"required"`
}

type CloudwatchLogs struct {
	// LogGroupName: string, required
	LogGroupName terra.StringValue `hcl:"log_group_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type CloudwatchMetric struct {
	// MetricName: string, required
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// MetricNamespace: string, required
	MetricNamespace terra.StringValue `hcl:"metric_namespace,attr" validate:"required"`
	// MetricTimestamp: string, optional
	MetricTimestamp terra.StringValue `hcl:"metric_timestamp,attr"`
	// MetricUnit: string, required
	MetricUnit terra.StringValue `hcl:"metric_unit,attr" validate:"required"`
	// MetricValue: string, required
	MetricValue terra.StringValue `hcl:"metric_value,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type Dynamodb struct {
	// HashKeyField: string, required
	HashKeyField terra.StringValue `hcl:"hash_key_field,attr" validate:"required"`
	// HashKeyType: string, optional
	HashKeyType terra.StringValue `hcl:"hash_key_type,attr"`
	// HashKeyValue: string, required
	HashKeyValue terra.StringValue `hcl:"hash_key_value,attr" validate:"required"`
	// Operation: string, optional
	Operation terra.StringValue `hcl:"operation,attr"`
	// PayloadField: string, optional
	PayloadField terra.StringValue `hcl:"payload_field,attr"`
	// RangeKeyField: string, optional
	RangeKeyField terra.StringValue `hcl:"range_key_field,attr"`
	// RangeKeyType: string, optional
	RangeKeyType terra.StringValue `hcl:"range_key_type,attr"`
	// RangeKeyValue: string, optional
	RangeKeyValue terra.StringValue `hcl:"range_key_value,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type Dynamodbv2 struct {
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Dynamodbv2PutItem: optional
	PutItem *Dynamodbv2PutItem `hcl:"put_item,block"`
}

type Dynamodbv2PutItem struct {
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type Elasticsearch struct {
	// Endpoint: string, required
	Endpoint terra.StringValue `hcl:"endpoint,attr" validate:"required"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Index: string, required
	Index terra.StringValue `hcl:"index,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ErrorAction struct {
	// ErrorActionCloudwatchAlarm: optional
	CloudwatchAlarm *ErrorActionCloudwatchAlarm `hcl:"cloudwatch_alarm,block"`
	// ErrorActionCloudwatchLogs: optional
	CloudwatchLogs *ErrorActionCloudwatchLogs `hcl:"cloudwatch_logs,block"`
	// ErrorActionCloudwatchMetric: optional
	CloudwatchMetric *ErrorActionCloudwatchMetric `hcl:"cloudwatch_metric,block"`
	// ErrorActionDynamodb: optional
	Dynamodb *ErrorActionDynamodb `hcl:"dynamodb,block"`
	// ErrorActionDynamodbv2: optional
	Dynamodbv2 *ErrorActionDynamodbv2 `hcl:"dynamodbv2,block"`
	// ErrorActionElasticsearch: optional
	Elasticsearch *ErrorActionElasticsearch `hcl:"elasticsearch,block"`
	// ErrorActionFirehose: optional
	Firehose *ErrorActionFirehose `hcl:"firehose,block"`
	// ErrorActionHttp: optional
	Http *ErrorActionHttp `hcl:"http,block"`
	// ErrorActionIotAnalytics: optional
	IotAnalytics *ErrorActionIotAnalytics `hcl:"iot_analytics,block"`
	// ErrorActionIotEvents: optional
	IotEvents *ErrorActionIotEvents `hcl:"iot_events,block"`
	// ErrorActionKafka: optional
	Kafka *ErrorActionKafka `hcl:"kafka,block"`
	// ErrorActionKinesis: optional
	Kinesis *ErrorActionKinesis `hcl:"kinesis,block"`
	// ErrorActionLambda: optional
	Lambda *ErrorActionLambda `hcl:"lambda,block"`
	// ErrorActionRepublish: optional
	Republish *ErrorActionRepublish `hcl:"republish,block"`
	// ErrorActionS3: optional
	S3 *ErrorActionS3 `hcl:"s3,block"`
	// ErrorActionSns: optional
	Sns *ErrorActionSns `hcl:"sns,block"`
	// ErrorActionSqs: optional
	Sqs *ErrorActionSqs `hcl:"sqs,block"`
	// ErrorActionStepFunctions: optional
	StepFunctions *ErrorActionStepFunctions `hcl:"step_functions,block"`
	// ErrorActionTimestream: optional
	Timestream *ErrorActionTimestream `hcl:"timestream,block"`
}

type ErrorActionCloudwatchAlarm struct {
	// AlarmName: string, required
	AlarmName terra.StringValue `hcl:"alarm_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// StateReason: string, required
	StateReason terra.StringValue `hcl:"state_reason,attr" validate:"required"`
	// StateValue: string, required
	StateValue terra.StringValue `hcl:"state_value,attr" validate:"required"`
}

type ErrorActionCloudwatchLogs struct {
	// LogGroupName: string, required
	LogGroupName terra.StringValue `hcl:"log_group_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type ErrorActionCloudwatchMetric struct {
	// MetricName: string, required
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// MetricNamespace: string, required
	MetricNamespace terra.StringValue `hcl:"metric_namespace,attr" validate:"required"`
	// MetricTimestamp: string, optional
	MetricTimestamp terra.StringValue `hcl:"metric_timestamp,attr"`
	// MetricUnit: string, required
	MetricUnit terra.StringValue `hcl:"metric_unit,attr" validate:"required"`
	// MetricValue: string, required
	MetricValue terra.StringValue `hcl:"metric_value,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type ErrorActionDynamodb struct {
	// HashKeyField: string, required
	HashKeyField terra.StringValue `hcl:"hash_key_field,attr" validate:"required"`
	// HashKeyType: string, optional
	HashKeyType terra.StringValue `hcl:"hash_key_type,attr"`
	// HashKeyValue: string, required
	HashKeyValue terra.StringValue `hcl:"hash_key_value,attr" validate:"required"`
	// Operation: string, optional
	Operation terra.StringValue `hcl:"operation,attr"`
	// PayloadField: string, optional
	PayloadField terra.StringValue `hcl:"payload_field,attr"`
	// RangeKeyField: string, optional
	RangeKeyField terra.StringValue `hcl:"range_key_field,attr"`
	// RangeKeyType: string, optional
	RangeKeyType terra.StringValue `hcl:"range_key_type,attr"`
	// RangeKeyValue: string, optional
	RangeKeyValue terra.StringValue `hcl:"range_key_value,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type ErrorActionDynamodbv2 struct {
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// ErrorActionDynamodbv2PutItem: optional
	PutItem *ErrorActionDynamodbv2PutItem `hcl:"put_item,block"`
}

type ErrorActionDynamodbv2PutItem struct {
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type ErrorActionElasticsearch struct {
	// Endpoint: string, required
	Endpoint terra.StringValue `hcl:"endpoint,attr" validate:"required"`
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Index: string, required
	Index terra.StringValue `hcl:"index,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ErrorActionFirehose struct {
	// BatchMode: bool, optional
	BatchMode terra.BoolValue `hcl:"batch_mode,attr"`
	// DeliveryStreamName: string, required
	DeliveryStreamName terra.StringValue `hcl:"delivery_stream_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Separator: string, optional
	Separator terra.StringValue `hcl:"separator,attr"`
}

type ErrorActionHttp struct {
	// ConfirmationUrl: string, optional
	ConfirmationUrl terra.StringValue `hcl:"confirmation_url,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// ErrorActionHttpHttpHeader: min=0
	HttpHeader []ErrorActionHttpHttpHeader `hcl:"http_header,block" validate:"min=0"`
}

type ErrorActionHttpHttpHeader struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ErrorActionIotAnalytics struct {
	// BatchMode: bool, optional
	BatchMode terra.BoolValue `hcl:"batch_mode,attr"`
	// ChannelName: string, required
	ChannelName terra.StringValue `hcl:"channel_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type ErrorActionIotEvents struct {
	// BatchMode: bool, optional
	BatchMode terra.BoolValue `hcl:"batch_mode,attr"`
	// InputName: string, required
	InputName terra.StringValue `hcl:"input_name,attr" validate:"required"`
	// MessageId: string, optional
	MessageId terra.StringValue `hcl:"message_id,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type ErrorActionKafka struct {
	// ClientProperties: map of string, required
	ClientProperties terra.MapValue[terra.StringValue] `hcl:"client_properties,attr" validate:"required"`
	// DestinationArn: string, required
	DestinationArn terra.StringValue `hcl:"destination_arn,attr" validate:"required"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Partition: string, optional
	Partition terra.StringValue `hcl:"partition,attr"`
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
}

type ErrorActionKinesis struct {
	// PartitionKey: string, optional
	PartitionKey terra.StringValue `hcl:"partition_key,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// StreamName: string, required
	StreamName terra.StringValue `hcl:"stream_name,attr" validate:"required"`
}

type ErrorActionLambda struct {
	// FunctionArn: string, required
	FunctionArn terra.StringValue `hcl:"function_arn,attr" validate:"required"`
}

type ErrorActionRepublish struct {
	// Qos: number, optional
	Qos terra.NumberValue `hcl:"qos,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
}

type ErrorActionS3 struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// CannedAcl: string, optional
	CannedAcl terra.StringValue `hcl:"canned_acl,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type ErrorActionSns struct {
	// MessageFormat: string, optional
	MessageFormat terra.StringValue `hcl:"message_format,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TargetArn: string, required
	TargetArn terra.StringValue `hcl:"target_arn,attr" validate:"required"`
}

type ErrorActionSqs struct {
	// QueueUrl: string, required
	QueueUrl terra.StringValue `hcl:"queue_url,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// UseBase64: bool, required
	UseBase64 terra.BoolValue `hcl:"use_base64,attr" validate:"required"`
}

type ErrorActionStepFunctions struct {
	// ExecutionNamePrefix: string, optional
	ExecutionNamePrefix terra.StringValue `hcl:"execution_name_prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// StateMachineName: string, required
	StateMachineName terra.StringValue `hcl:"state_machine_name,attr" validate:"required"`
}

type ErrorActionTimestream struct {
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// ErrorActionTimestreamDimension: min=1
	Dimension []ErrorActionTimestreamDimension `hcl:"dimension,block" validate:"min=1"`
	// ErrorActionTimestreamTimestamp: optional
	Timestamp *ErrorActionTimestreamTimestamp `hcl:"timestamp,block"`
}

type ErrorActionTimestreamDimension struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ErrorActionTimestreamTimestamp struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Firehose struct {
	// BatchMode: bool, optional
	BatchMode terra.BoolValue `hcl:"batch_mode,attr"`
	// DeliveryStreamName: string, required
	DeliveryStreamName terra.StringValue `hcl:"delivery_stream_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Separator: string, optional
	Separator terra.StringValue `hcl:"separator,attr"`
}

type Http struct {
	// ConfirmationUrl: string, optional
	ConfirmationUrl terra.StringValue `hcl:"confirmation_url,attr"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// HttpHttpHeader: min=0
	HttpHeader []HttpHttpHeader `hcl:"http_header,block" validate:"min=0"`
}

type HttpHttpHeader struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type IotAnalytics struct {
	// BatchMode: bool, optional
	BatchMode terra.BoolValue `hcl:"batch_mode,attr"`
	// ChannelName: string, required
	ChannelName terra.StringValue `hcl:"channel_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type IotEvents struct {
	// BatchMode: bool, optional
	BatchMode terra.BoolValue `hcl:"batch_mode,attr"`
	// InputName: string, required
	InputName terra.StringValue `hcl:"input_name,attr" validate:"required"`
	// MessageId: string, optional
	MessageId terra.StringValue `hcl:"message_id,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type Kafka struct {
	// ClientProperties: map of string, required
	ClientProperties terra.MapValue[terra.StringValue] `hcl:"client_properties,attr" validate:"required"`
	// DestinationArn: string, required
	DestinationArn terra.StringValue `hcl:"destination_arn,attr" validate:"required"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Partition: string, optional
	Partition terra.StringValue `hcl:"partition,attr"`
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
}

type Kinesis struct {
	// PartitionKey: string, optional
	PartitionKey terra.StringValue `hcl:"partition_key,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// StreamName: string, required
	StreamName terra.StringValue `hcl:"stream_name,attr" validate:"required"`
}

type Lambda struct {
	// FunctionArn: string, required
	FunctionArn terra.StringValue `hcl:"function_arn,attr" validate:"required"`
}

type Republish struct {
	// Qos: number, optional
	Qos terra.NumberValue `hcl:"qos,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Topic: string, required
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
}

type S3 struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// CannedAcl: string, optional
	CannedAcl terra.StringValue `hcl:"canned_acl,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type Sns struct {
	// MessageFormat: string, optional
	MessageFormat terra.StringValue `hcl:"message_format,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TargetArn: string, required
	TargetArn terra.StringValue `hcl:"target_arn,attr" validate:"required"`
}

type Sqs struct {
	// QueueUrl: string, required
	QueueUrl terra.StringValue `hcl:"queue_url,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// UseBase64: bool, required
	UseBase64 terra.BoolValue `hcl:"use_base64,attr" validate:"required"`
}

type StepFunctions struct {
	// ExecutionNamePrefix: string, optional
	ExecutionNamePrefix terra.StringValue `hcl:"execution_name_prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// StateMachineName: string, required
	StateMachineName terra.StringValue `hcl:"state_machine_name,attr" validate:"required"`
}

type Timestream struct {
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// TimestreamDimension: min=1
	Dimension []TimestreamDimension `hcl:"dimension,block" validate:"min=1"`
	// TimestreamTimestamp: optional
	Timestamp *TimestreamTimestamp `hcl:"timestamp,block"`
}

type TimestreamDimension struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type TimestreamTimestamp struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type CloudwatchAlarmAttributes struct {
	ref terra.Reference
}

func (ca CloudwatchAlarmAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca CloudwatchAlarmAttributes) InternalWithRef(ref terra.Reference) CloudwatchAlarmAttributes {
	return CloudwatchAlarmAttributes{ref: ref}
}

func (ca CloudwatchAlarmAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca CloudwatchAlarmAttributes) AlarmName() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("alarm_name"))
}

func (ca CloudwatchAlarmAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("role_arn"))
}

func (ca CloudwatchAlarmAttributes) StateReason() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("state_reason"))
}

func (ca CloudwatchAlarmAttributes) StateValue() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("state_value"))
}

type CloudwatchLogsAttributes struct {
	ref terra.Reference
}

func (cl CloudwatchLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl CloudwatchLogsAttributes) InternalWithRef(ref terra.Reference) CloudwatchLogsAttributes {
	return CloudwatchLogsAttributes{ref: ref}
}

func (cl CloudwatchLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl CloudwatchLogsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("log_group_name"))
}

func (cl CloudwatchLogsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("role_arn"))
}

type CloudwatchMetricAttributes struct {
	ref terra.Reference
}

func (cm CloudwatchMetricAttributes) InternalRef() (terra.Reference, error) {
	return cm.ref, nil
}

func (cm CloudwatchMetricAttributes) InternalWithRef(ref terra.Reference) CloudwatchMetricAttributes {
	return CloudwatchMetricAttributes{ref: ref}
}

func (cm CloudwatchMetricAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cm.ref.InternalTokens()
}

func (cm CloudwatchMetricAttributes) MetricName() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_name"))
}

func (cm CloudwatchMetricAttributes) MetricNamespace() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_namespace"))
}

func (cm CloudwatchMetricAttributes) MetricTimestamp() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_timestamp"))
}

func (cm CloudwatchMetricAttributes) MetricUnit() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_unit"))
}

func (cm CloudwatchMetricAttributes) MetricValue() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_value"))
}

func (cm CloudwatchMetricAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("role_arn"))
}

type DynamodbAttributes struct {
	ref terra.Reference
}

func (d DynamodbAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DynamodbAttributes) InternalWithRef(ref terra.Reference) DynamodbAttributes {
	return DynamodbAttributes{ref: ref}
}

func (d DynamodbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DynamodbAttributes) HashKeyField() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("hash_key_field"))
}

func (d DynamodbAttributes) HashKeyType() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("hash_key_type"))
}

func (d DynamodbAttributes) HashKeyValue() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("hash_key_value"))
}

func (d DynamodbAttributes) Operation() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("operation"))
}

func (d DynamodbAttributes) PayloadField() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("payload_field"))
}

func (d DynamodbAttributes) RangeKeyField() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("range_key_field"))
}

func (d DynamodbAttributes) RangeKeyType() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("range_key_type"))
}

func (d DynamodbAttributes) RangeKeyValue() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("range_key_value"))
}

func (d DynamodbAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("role_arn"))
}

func (d DynamodbAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("table_name"))
}

type Dynamodbv2Attributes struct {
	ref terra.Reference
}

func (d Dynamodbv2Attributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d Dynamodbv2Attributes) InternalWithRef(ref terra.Reference) Dynamodbv2Attributes {
	return Dynamodbv2Attributes{ref: ref}
}

func (d Dynamodbv2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d Dynamodbv2Attributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("role_arn"))
}

func (d Dynamodbv2Attributes) PutItem() terra.ListValue[Dynamodbv2PutItemAttributes] {
	return terra.ReferenceAsList[Dynamodbv2PutItemAttributes](d.ref.Append("put_item"))
}

type Dynamodbv2PutItemAttributes struct {
	ref terra.Reference
}

func (pi Dynamodbv2PutItemAttributes) InternalRef() (terra.Reference, error) {
	return pi.ref, nil
}

func (pi Dynamodbv2PutItemAttributes) InternalWithRef(ref terra.Reference) Dynamodbv2PutItemAttributes {
	return Dynamodbv2PutItemAttributes{ref: ref}
}

func (pi Dynamodbv2PutItemAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pi.ref.InternalTokens()
}

func (pi Dynamodbv2PutItemAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(pi.ref.Append("table_name"))
}

type ElasticsearchAttributes struct {
	ref terra.Reference
}

func (e ElasticsearchAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ElasticsearchAttributes) InternalWithRef(ref terra.Reference) ElasticsearchAttributes {
	return ElasticsearchAttributes{ref: ref}
}

func (e ElasticsearchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ElasticsearchAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("endpoint"))
}

func (e ElasticsearchAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("id"))
}

func (e ElasticsearchAttributes) Index() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("index"))
}

func (e ElasticsearchAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("role_arn"))
}

func (e ElasticsearchAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type"))
}

type ErrorActionAttributes struct {
	ref terra.Reference
}

func (ea ErrorActionAttributes) InternalRef() (terra.Reference, error) {
	return ea.ref, nil
}

func (ea ErrorActionAttributes) InternalWithRef(ref terra.Reference) ErrorActionAttributes {
	return ErrorActionAttributes{ref: ref}
}

func (ea ErrorActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ea.ref.InternalTokens()
}

func (ea ErrorActionAttributes) CloudwatchAlarm() terra.ListValue[ErrorActionCloudwatchAlarmAttributes] {
	return terra.ReferenceAsList[ErrorActionCloudwatchAlarmAttributes](ea.ref.Append("cloudwatch_alarm"))
}

func (ea ErrorActionAttributes) CloudwatchLogs() terra.ListValue[ErrorActionCloudwatchLogsAttributes] {
	return terra.ReferenceAsList[ErrorActionCloudwatchLogsAttributes](ea.ref.Append("cloudwatch_logs"))
}

func (ea ErrorActionAttributes) CloudwatchMetric() terra.ListValue[ErrorActionCloudwatchMetricAttributes] {
	return terra.ReferenceAsList[ErrorActionCloudwatchMetricAttributes](ea.ref.Append("cloudwatch_metric"))
}

func (ea ErrorActionAttributes) Dynamodb() terra.ListValue[ErrorActionDynamodbAttributes] {
	return terra.ReferenceAsList[ErrorActionDynamodbAttributes](ea.ref.Append("dynamodb"))
}

func (ea ErrorActionAttributes) Dynamodbv2() terra.ListValue[ErrorActionDynamodbv2Attributes] {
	return terra.ReferenceAsList[ErrorActionDynamodbv2Attributes](ea.ref.Append("dynamodbv2"))
}

func (ea ErrorActionAttributes) Elasticsearch() terra.ListValue[ErrorActionElasticsearchAttributes] {
	return terra.ReferenceAsList[ErrorActionElasticsearchAttributes](ea.ref.Append("elasticsearch"))
}

func (ea ErrorActionAttributes) Firehose() terra.ListValue[ErrorActionFirehoseAttributes] {
	return terra.ReferenceAsList[ErrorActionFirehoseAttributes](ea.ref.Append("firehose"))
}

func (ea ErrorActionAttributes) Http() terra.ListValue[ErrorActionHttpAttributes] {
	return terra.ReferenceAsList[ErrorActionHttpAttributes](ea.ref.Append("http"))
}

func (ea ErrorActionAttributes) IotAnalytics() terra.ListValue[ErrorActionIotAnalyticsAttributes] {
	return terra.ReferenceAsList[ErrorActionIotAnalyticsAttributes](ea.ref.Append("iot_analytics"))
}

func (ea ErrorActionAttributes) IotEvents() terra.ListValue[ErrorActionIotEventsAttributes] {
	return terra.ReferenceAsList[ErrorActionIotEventsAttributes](ea.ref.Append("iot_events"))
}

func (ea ErrorActionAttributes) Kafka() terra.ListValue[ErrorActionKafkaAttributes] {
	return terra.ReferenceAsList[ErrorActionKafkaAttributes](ea.ref.Append("kafka"))
}

func (ea ErrorActionAttributes) Kinesis() terra.ListValue[ErrorActionKinesisAttributes] {
	return terra.ReferenceAsList[ErrorActionKinesisAttributes](ea.ref.Append("kinesis"))
}

func (ea ErrorActionAttributes) Lambda() terra.ListValue[ErrorActionLambdaAttributes] {
	return terra.ReferenceAsList[ErrorActionLambdaAttributes](ea.ref.Append("lambda"))
}

func (ea ErrorActionAttributes) Republish() terra.ListValue[ErrorActionRepublishAttributes] {
	return terra.ReferenceAsList[ErrorActionRepublishAttributes](ea.ref.Append("republish"))
}

func (ea ErrorActionAttributes) S3() terra.ListValue[ErrorActionS3Attributes] {
	return terra.ReferenceAsList[ErrorActionS3Attributes](ea.ref.Append("s3"))
}

func (ea ErrorActionAttributes) Sns() terra.ListValue[ErrorActionSnsAttributes] {
	return terra.ReferenceAsList[ErrorActionSnsAttributes](ea.ref.Append("sns"))
}

func (ea ErrorActionAttributes) Sqs() terra.ListValue[ErrorActionSqsAttributes] {
	return terra.ReferenceAsList[ErrorActionSqsAttributes](ea.ref.Append("sqs"))
}

func (ea ErrorActionAttributes) StepFunctions() terra.ListValue[ErrorActionStepFunctionsAttributes] {
	return terra.ReferenceAsList[ErrorActionStepFunctionsAttributes](ea.ref.Append("step_functions"))
}

func (ea ErrorActionAttributes) Timestream() terra.ListValue[ErrorActionTimestreamAttributes] {
	return terra.ReferenceAsList[ErrorActionTimestreamAttributes](ea.ref.Append("timestream"))
}

type ErrorActionCloudwatchAlarmAttributes struct {
	ref terra.Reference
}

func (ca ErrorActionCloudwatchAlarmAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca ErrorActionCloudwatchAlarmAttributes) InternalWithRef(ref terra.Reference) ErrorActionCloudwatchAlarmAttributes {
	return ErrorActionCloudwatchAlarmAttributes{ref: ref}
}

func (ca ErrorActionCloudwatchAlarmAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca ErrorActionCloudwatchAlarmAttributes) AlarmName() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("alarm_name"))
}

func (ca ErrorActionCloudwatchAlarmAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("role_arn"))
}

func (ca ErrorActionCloudwatchAlarmAttributes) StateReason() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("state_reason"))
}

func (ca ErrorActionCloudwatchAlarmAttributes) StateValue() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("state_value"))
}

type ErrorActionCloudwatchLogsAttributes struct {
	ref terra.Reference
}

func (cl ErrorActionCloudwatchLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl ErrorActionCloudwatchLogsAttributes) InternalWithRef(ref terra.Reference) ErrorActionCloudwatchLogsAttributes {
	return ErrorActionCloudwatchLogsAttributes{ref: ref}
}

func (cl ErrorActionCloudwatchLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl ErrorActionCloudwatchLogsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("log_group_name"))
}

func (cl ErrorActionCloudwatchLogsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("role_arn"))
}

type ErrorActionCloudwatchMetricAttributes struct {
	ref terra.Reference
}

func (cm ErrorActionCloudwatchMetricAttributes) InternalRef() (terra.Reference, error) {
	return cm.ref, nil
}

func (cm ErrorActionCloudwatchMetricAttributes) InternalWithRef(ref terra.Reference) ErrorActionCloudwatchMetricAttributes {
	return ErrorActionCloudwatchMetricAttributes{ref: ref}
}

func (cm ErrorActionCloudwatchMetricAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cm.ref.InternalTokens()
}

func (cm ErrorActionCloudwatchMetricAttributes) MetricName() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_name"))
}

func (cm ErrorActionCloudwatchMetricAttributes) MetricNamespace() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_namespace"))
}

func (cm ErrorActionCloudwatchMetricAttributes) MetricTimestamp() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_timestamp"))
}

func (cm ErrorActionCloudwatchMetricAttributes) MetricUnit() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_unit"))
}

func (cm ErrorActionCloudwatchMetricAttributes) MetricValue() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_value"))
}

func (cm ErrorActionCloudwatchMetricAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("role_arn"))
}

type ErrorActionDynamodbAttributes struct {
	ref terra.Reference
}

func (d ErrorActionDynamodbAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ErrorActionDynamodbAttributes) InternalWithRef(ref terra.Reference) ErrorActionDynamodbAttributes {
	return ErrorActionDynamodbAttributes{ref: ref}
}

func (d ErrorActionDynamodbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ErrorActionDynamodbAttributes) HashKeyField() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("hash_key_field"))
}

func (d ErrorActionDynamodbAttributes) HashKeyType() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("hash_key_type"))
}

func (d ErrorActionDynamodbAttributes) HashKeyValue() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("hash_key_value"))
}

func (d ErrorActionDynamodbAttributes) Operation() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("operation"))
}

func (d ErrorActionDynamodbAttributes) PayloadField() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("payload_field"))
}

func (d ErrorActionDynamodbAttributes) RangeKeyField() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("range_key_field"))
}

func (d ErrorActionDynamodbAttributes) RangeKeyType() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("range_key_type"))
}

func (d ErrorActionDynamodbAttributes) RangeKeyValue() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("range_key_value"))
}

func (d ErrorActionDynamodbAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("role_arn"))
}

func (d ErrorActionDynamodbAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("table_name"))
}

type ErrorActionDynamodbv2Attributes struct {
	ref terra.Reference
}

func (d ErrorActionDynamodbv2Attributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ErrorActionDynamodbv2Attributes) InternalWithRef(ref terra.Reference) ErrorActionDynamodbv2Attributes {
	return ErrorActionDynamodbv2Attributes{ref: ref}
}

func (d ErrorActionDynamodbv2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ErrorActionDynamodbv2Attributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("role_arn"))
}

func (d ErrorActionDynamodbv2Attributes) PutItem() terra.ListValue[ErrorActionDynamodbv2PutItemAttributes] {
	return terra.ReferenceAsList[ErrorActionDynamodbv2PutItemAttributes](d.ref.Append("put_item"))
}

type ErrorActionDynamodbv2PutItemAttributes struct {
	ref terra.Reference
}

func (pi ErrorActionDynamodbv2PutItemAttributes) InternalRef() (terra.Reference, error) {
	return pi.ref, nil
}

func (pi ErrorActionDynamodbv2PutItemAttributes) InternalWithRef(ref terra.Reference) ErrorActionDynamodbv2PutItemAttributes {
	return ErrorActionDynamodbv2PutItemAttributes{ref: ref}
}

func (pi ErrorActionDynamodbv2PutItemAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pi.ref.InternalTokens()
}

func (pi ErrorActionDynamodbv2PutItemAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(pi.ref.Append("table_name"))
}

type ErrorActionElasticsearchAttributes struct {
	ref terra.Reference
}

func (e ErrorActionElasticsearchAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ErrorActionElasticsearchAttributes) InternalWithRef(ref terra.Reference) ErrorActionElasticsearchAttributes {
	return ErrorActionElasticsearchAttributes{ref: ref}
}

func (e ErrorActionElasticsearchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ErrorActionElasticsearchAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("endpoint"))
}

func (e ErrorActionElasticsearchAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("id"))
}

func (e ErrorActionElasticsearchAttributes) Index() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("index"))
}

func (e ErrorActionElasticsearchAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("role_arn"))
}

func (e ErrorActionElasticsearchAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type"))
}

type ErrorActionFirehoseAttributes struct {
	ref terra.Reference
}

func (f ErrorActionFirehoseAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f ErrorActionFirehoseAttributes) InternalWithRef(ref terra.Reference) ErrorActionFirehoseAttributes {
	return ErrorActionFirehoseAttributes{ref: ref}
}

func (f ErrorActionFirehoseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f ErrorActionFirehoseAttributes) BatchMode() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("batch_mode"))
}

func (f ErrorActionFirehoseAttributes) DeliveryStreamName() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("delivery_stream_name"))
}

func (f ErrorActionFirehoseAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("role_arn"))
}

func (f ErrorActionFirehoseAttributes) Separator() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("separator"))
}

type ErrorActionHttpAttributes struct {
	ref terra.Reference
}

func (h ErrorActionHttpAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h ErrorActionHttpAttributes) InternalWithRef(ref terra.Reference) ErrorActionHttpAttributes {
	return ErrorActionHttpAttributes{ref: ref}
}

func (h ErrorActionHttpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h ErrorActionHttpAttributes) ConfirmationUrl() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("confirmation_url"))
}

func (h ErrorActionHttpAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("url"))
}

func (h ErrorActionHttpAttributes) HttpHeader() terra.ListValue[ErrorActionHttpHttpHeaderAttributes] {
	return terra.ReferenceAsList[ErrorActionHttpHttpHeaderAttributes](h.ref.Append("http_header"))
}

type ErrorActionHttpHttpHeaderAttributes struct {
	ref terra.Reference
}

func (hh ErrorActionHttpHttpHeaderAttributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh ErrorActionHttpHttpHeaderAttributes) InternalWithRef(ref terra.Reference) ErrorActionHttpHttpHeaderAttributes {
	return ErrorActionHttpHttpHeaderAttributes{ref: ref}
}

func (hh ErrorActionHttpHttpHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh ErrorActionHttpHttpHeaderAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("key"))
}

func (hh ErrorActionHttpHttpHeaderAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("value"))
}

type ErrorActionIotAnalyticsAttributes struct {
	ref terra.Reference
}

func (ia ErrorActionIotAnalyticsAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia ErrorActionIotAnalyticsAttributes) InternalWithRef(ref terra.Reference) ErrorActionIotAnalyticsAttributes {
	return ErrorActionIotAnalyticsAttributes{ref: ref}
}

func (ia ErrorActionIotAnalyticsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia ErrorActionIotAnalyticsAttributes) BatchMode() terra.BoolValue {
	return terra.ReferenceAsBool(ia.ref.Append("batch_mode"))
}

func (ia ErrorActionIotAnalyticsAttributes) ChannelName() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("channel_name"))
}

func (ia ErrorActionIotAnalyticsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("role_arn"))
}

type ErrorActionIotEventsAttributes struct {
	ref terra.Reference
}

func (ie ErrorActionIotEventsAttributes) InternalRef() (terra.Reference, error) {
	return ie.ref, nil
}

func (ie ErrorActionIotEventsAttributes) InternalWithRef(ref terra.Reference) ErrorActionIotEventsAttributes {
	return ErrorActionIotEventsAttributes{ref: ref}
}

func (ie ErrorActionIotEventsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ie.ref.InternalTokens()
}

func (ie ErrorActionIotEventsAttributes) BatchMode() terra.BoolValue {
	return terra.ReferenceAsBool(ie.ref.Append("batch_mode"))
}

func (ie ErrorActionIotEventsAttributes) InputName() terra.StringValue {
	return terra.ReferenceAsString(ie.ref.Append("input_name"))
}

func (ie ErrorActionIotEventsAttributes) MessageId() terra.StringValue {
	return terra.ReferenceAsString(ie.ref.Append("message_id"))
}

func (ie ErrorActionIotEventsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ie.ref.Append("role_arn"))
}

type ErrorActionKafkaAttributes struct {
	ref terra.Reference
}

func (k ErrorActionKafkaAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k ErrorActionKafkaAttributes) InternalWithRef(ref terra.Reference) ErrorActionKafkaAttributes {
	return ErrorActionKafkaAttributes{ref: ref}
}

func (k ErrorActionKafkaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k ErrorActionKafkaAttributes) ClientProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](k.ref.Append("client_properties"))
}

func (k ErrorActionKafkaAttributes) DestinationArn() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("destination_arn"))
}

func (k ErrorActionKafkaAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("key"))
}

func (k ErrorActionKafkaAttributes) Partition() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("partition"))
}

func (k ErrorActionKafkaAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("topic"))
}

type ErrorActionKinesisAttributes struct {
	ref terra.Reference
}

func (k ErrorActionKinesisAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k ErrorActionKinesisAttributes) InternalWithRef(ref terra.Reference) ErrorActionKinesisAttributes {
	return ErrorActionKinesisAttributes{ref: ref}
}

func (k ErrorActionKinesisAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k ErrorActionKinesisAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("partition_key"))
}

func (k ErrorActionKinesisAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("role_arn"))
}

func (k ErrorActionKinesisAttributes) StreamName() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("stream_name"))
}

type ErrorActionLambdaAttributes struct {
	ref terra.Reference
}

func (l ErrorActionLambdaAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l ErrorActionLambdaAttributes) InternalWithRef(ref terra.Reference) ErrorActionLambdaAttributes {
	return ErrorActionLambdaAttributes{ref: ref}
}

func (l ErrorActionLambdaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l ErrorActionLambdaAttributes) FunctionArn() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("function_arn"))
}

type ErrorActionRepublishAttributes struct {
	ref terra.Reference
}

func (r ErrorActionRepublishAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ErrorActionRepublishAttributes) InternalWithRef(ref terra.Reference) ErrorActionRepublishAttributes {
	return ErrorActionRepublishAttributes{ref: ref}
}

func (r ErrorActionRepublishAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ErrorActionRepublishAttributes) Qos() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("qos"))
}

func (r ErrorActionRepublishAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("role_arn"))
}

func (r ErrorActionRepublishAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("topic"))
}

type ErrorActionS3Attributes struct {
	ref terra.Reference
}

func (s ErrorActionS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ErrorActionS3Attributes) InternalWithRef(ref terra.Reference) ErrorActionS3Attributes {
	return ErrorActionS3Attributes{ref: ref}
}

func (s ErrorActionS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ErrorActionS3Attributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_name"))
}

func (s ErrorActionS3Attributes) CannedAcl() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("canned_acl"))
}

func (s ErrorActionS3Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key"))
}

func (s ErrorActionS3Attributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("role_arn"))
}

type ErrorActionSnsAttributes struct {
	ref terra.Reference
}

func (s ErrorActionSnsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ErrorActionSnsAttributes) InternalWithRef(ref terra.Reference) ErrorActionSnsAttributes {
	return ErrorActionSnsAttributes{ref: ref}
}

func (s ErrorActionSnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ErrorActionSnsAttributes) MessageFormat() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("message_format"))
}

func (s ErrorActionSnsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("role_arn"))
}

func (s ErrorActionSnsAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("target_arn"))
}

type ErrorActionSqsAttributes struct {
	ref terra.Reference
}

func (s ErrorActionSqsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ErrorActionSqsAttributes) InternalWithRef(ref terra.Reference) ErrorActionSqsAttributes {
	return ErrorActionSqsAttributes{ref: ref}
}

func (s ErrorActionSqsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ErrorActionSqsAttributes) QueueUrl() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("queue_url"))
}

func (s ErrorActionSqsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("role_arn"))
}

func (s ErrorActionSqsAttributes) UseBase64() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("use_base64"))
}

type ErrorActionStepFunctionsAttributes struct {
	ref terra.Reference
}

func (sf ErrorActionStepFunctionsAttributes) InternalRef() (terra.Reference, error) {
	return sf.ref, nil
}

func (sf ErrorActionStepFunctionsAttributes) InternalWithRef(ref terra.Reference) ErrorActionStepFunctionsAttributes {
	return ErrorActionStepFunctionsAttributes{ref: ref}
}

func (sf ErrorActionStepFunctionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sf.ref.InternalTokens()
}

func (sf ErrorActionStepFunctionsAttributes) ExecutionNamePrefix() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("execution_name_prefix"))
}

func (sf ErrorActionStepFunctionsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("role_arn"))
}

func (sf ErrorActionStepFunctionsAttributes) StateMachineName() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("state_machine_name"))
}

type ErrorActionTimestreamAttributes struct {
	ref terra.Reference
}

func (t ErrorActionTimestreamAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ErrorActionTimestreamAttributes) InternalWithRef(ref terra.Reference) ErrorActionTimestreamAttributes {
	return ErrorActionTimestreamAttributes{ref: ref}
}

func (t ErrorActionTimestreamAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ErrorActionTimestreamAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("database_name"))
}

func (t ErrorActionTimestreamAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("role_arn"))
}

func (t ErrorActionTimestreamAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("table_name"))
}

func (t ErrorActionTimestreamAttributes) Dimension() terra.SetValue[ErrorActionTimestreamDimensionAttributes] {
	return terra.ReferenceAsSet[ErrorActionTimestreamDimensionAttributes](t.ref.Append("dimension"))
}

func (t ErrorActionTimestreamAttributes) Timestamp() terra.ListValue[ErrorActionTimestreamTimestampAttributes] {
	return terra.ReferenceAsList[ErrorActionTimestreamTimestampAttributes](t.ref.Append("timestamp"))
}

type ErrorActionTimestreamDimensionAttributes struct {
	ref terra.Reference
}

func (d ErrorActionTimestreamDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ErrorActionTimestreamDimensionAttributes) InternalWithRef(ref terra.Reference) ErrorActionTimestreamDimensionAttributes {
	return ErrorActionTimestreamDimensionAttributes{ref: ref}
}

func (d ErrorActionTimestreamDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ErrorActionTimestreamDimensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d ErrorActionTimestreamDimensionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("value"))
}

type ErrorActionTimestreamTimestampAttributes struct {
	ref terra.Reference
}

func (t ErrorActionTimestreamTimestampAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ErrorActionTimestreamTimestampAttributes) InternalWithRef(ref terra.Reference) ErrorActionTimestreamTimestampAttributes {
	return ErrorActionTimestreamTimestampAttributes{ref: ref}
}

func (t ErrorActionTimestreamTimestampAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ErrorActionTimestreamTimestampAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("unit"))
}

func (t ErrorActionTimestreamTimestampAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type FirehoseAttributes struct {
	ref terra.Reference
}

func (f FirehoseAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FirehoseAttributes) InternalWithRef(ref terra.Reference) FirehoseAttributes {
	return FirehoseAttributes{ref: ref}
}

func (f FirehoseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FirehoseAttributes) BatchMode() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("batch_mode"))
}

func (f FirehoseAttributes) DeliveryStreamName() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("delivery_stream_name"))
}

func (f FirehoseAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("role_arn"))
}

func (f FirehoseAttributes) Separator() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("separator"))
}

type HttpAttributes struct {
	ref terra.Reference
}

func (h HttpAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HttpAttributes) InternalWithRef(ref terra.Reference) HttpAttributes {
	return HttpAttributes{ref: ref}
}

func (h HttpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HttpAttributes) ConfirmationUrl() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("confirmation_url"))
}

func (h HttpAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("url"))
}

func (h HttpAttributes) HttpHeader() terra.ListValue[HttpHttpHeaderAttributes] {
	return terra.ReferenceAsList[HttpHttpHeaderAttributes](h.ref.Append("http_header"))
}

type HttpHttpHeaderAttributes struct {
	ref terra.Reference
}

func (hh HttpHttpHeaderAttributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh HttpHttpHeaderAttributes) InternalWithRef(ref terra.Reference) HttpHttpHeaderAttributes {
	return HttpHttpHeaderAttributes{ref: ref}
}

func (hh HttpHttpHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh HttpHttpHeaderAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("key"))
}

func (hh HttpHttpHeaderAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("value"))
}

type IotAnalyticsAttributes struct {
	ref terra.Reference
}

func (ia IotAnalyticsAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia IotAnalyticsAttributes) InternalWithRef(ref terra.Reference) IotAnalyticsAttributes {
	return IotAnalyticsAttributes{ref: ref}
}

func (ia IotAnalyticsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia IotAnalyticsAttributes) BatchMode() terra.BoolValue {
	return terra.ReferenceAsBool(ia.ref.Append("batch_mode"))
}

func (ia IotAnalyticsAttributes) ChannelName() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("channel_name"))
}

func (ia IotAnalyticsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("role_arn"))
}

type IotEventsAttributes struct {
	ref terra.Reference
}

func (ie IotEventsAttributes) InternalRef() (terra.Reference, error) {
	return ie.ref, nil
}

func (ie IotEventsAttributes) InternalWithRef(ref terra.Reference) IotEventsAttributes {
	return IotEventsAttributes{ref: ref}
}

func (ie IotEventsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ie.ref.InternalTokens()
}

func (ie IotEventsAttributes) BatchMode() terra.BoolValue {
	return terra.ReferenceAsBool(ie.ref.Append("batch_mode"))
}

func (ie IotEventsAttributes) InputName() terra.StringValue {
	return terra.ReferenceAsString(ie.ref.Append("input_name"))
}

func (ie IotEventsAttributes) MessageId() terra.StringValue {
	return terra.ReferenceAsString(ie.ref.Append("message_id"))
}

func (ie IotEventsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ie.ref.Append("role_arn"))
}

type KafkaAttributes struct {
	ref terra.Reference
}

func (k KafkaAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k KafkaAttributes) InternalWithRef(ref terra.Reference) KafkaAttributes {
	return KafkaAttributes{ref: ref}
}

func (k KafkaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k KafkaAttributes) ClientProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](k.ref.Append("client_properties"))
}

func (k KafkaAttributes) DestinationArn() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("destination_arn"))
}

func (k KafkaAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("key"))
}

func (k KafkaAttributes) Partition() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("partition"))
}

func (k KafkaAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("topic"))
}

type KinesisAttributes struct {
	ref terra.Reference
}

func (k KinesisAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k KinesisAttributes) InternalWithRef(ref terra.Reference) KinesisAttributes {
	return KinesisAttributes{ref: ref}
}

func (k KinesisAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k KinesisAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("partition_key"))
}

func (k KinesisAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("role_arn"))
}

func (k KinesisAttributes) StreamName() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("stream_name"))
}

type LambdaAttributes struct {
	ref terra.Reference
}

func (l LambdaAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LambdaAttributes) InternalWithRef(ref terra.Reference) LambdaAttributes {
	return LambdaAttributes{ref: ref}
}

func (l LambdaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LambdaAttributes) FunctionArn() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("function_arn"))
}

type RepublishAttributes struct {
	ref terra.Reference
}

func (r RepublishAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RepublishAttributes) InternalWithRef(ref terra.Reference) RepublishAttributes {
	return RepublishAttributes{ref: ref}
}

func (r RepublishAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r RepublishAttributes) Qos() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("qos"))
}

func (r RepublishAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("role_arn"))
}

func (r RepublishAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("topic"))
}

type S3Attributes struct {
	ref terra.Reference
}

func (s S3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s S3Attributes) InternalWithRef(ref terra.Reference) S3Attributes {
	return S3Attributes{ref: ref}
}

func (s S3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s S3Attributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_name"))
}

func (s S3Attributes) CannedAcl() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("canned_acl"))
}

func (s S3Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key"))
}

func (s S3Attributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("role_arn"))
}

type SnsAttributes struct {
	ref terra.Reference
}

func (s SnsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SnsAttributes) InternalWithRef(ref terra.Reference) SnsAttributes {
	return SnsAttributes{ref: ref}
}

func (s SnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SnsAttributes) MessageFormat() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("message_format"))
}

func (s SnsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("role_arn"))
}

func (s SnsAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("target_arn"))
}

type SqsAttributes struct {
	ref terra.Reference
}

func (s SqsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SqsAttributes) InternalWithRef(ref terra.Reference) SqsAttributes {
	return SqsAttributes{ref: ref}
}

func (s SqsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SqsAttributes) QueueUrl() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("queue_url"))
}

func (s SqsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("role_arn"))
}

func (s SqsAttributes) UseBase64() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("use_base64"))
}

type StepFunctionsAttributes struct {
	ref terra.Reference
}

func (sf StepFunctionsAttributes) InternalRef() (terra.Reference, error) {
	return sf.ref, nil
}

func (sf StepFunctionsAttributes) InternalWithRef(ref terra.Reference) StepFunctionsAttributes {
	return StepFunctionsAttributes{ref: ref}
}

func (sf StepFunctionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sf.ref.InternalTokens()
}

func (sf StepFunctionsAttributes) ExecutionNamePrefix() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("execution_name_prefix"))
}

func (sf StepFunctionsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("role_arn"))
}

func (sf StepFunctionsAttributes) StateMachineName() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("state_machine_name"))
}

type TimestreamAttributes struct {
	ref terra.Reference
}

func (t TimestreamAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimestreamAttributes) InternalWithRef(ref terra.Reference) TimestreamAttributes {
	return TimestreamAttributes{ref: ref}
}

func (t TimestreamAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimestreamAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("database_name"))
}

func (t TimestreamAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("role_arn"))
}

func (t TimestreamAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("table_name"))
}

func (t TimestreamAttributes) Dimension() terra.SetValue[TimestreamDimensionAttributes] {
	return terra.ReferenceAsSet[TimestreamDimensionAttributes](t.ref.Append("dimension"))
}

func (t TimestreamAttributes) Timestamp() terra.ListValue[TimestreamTimestampAttributes] {
	return terra.ReferenceAsList[TimestreamTimestampAttributes](t.ref.Append("timestamp"))
}

type TimestreamDimensionAttributes struct {
	ref terra.Reference
}

func (d TimestreamDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d TimestreamDimensionAttributes) InternalWithRef(ref terra.Reference) TimestreamDimensionAttributes {
	return TimestreamDimensionAttributes{ref: ref}
}

func (d TimestreamDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d TimestreamDimensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d TimestreamDimensionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("value"))
}

type TimestreamTimestampAttributes struct {
	ref terra.Reference
}

func (t TimestreamTimestampAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimestreamTimestampAttributes) InternalWithRef(ref terra.Reference) TimestreamTimestampAttributes {
	return TimestreamTimestampAttributes{ref: ref}
}

func (t TimestreamTimestampAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimestreamTimestampAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("unit"))
}

func (t TimestreamTimestampAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type CloudwatchAlarmState struct {
	AlarmName   string `json:"alarm_name"`
	RoleArn     string `json:"role_arn"`
	StateReason string `json:"state_reason"`
	StateValue  string `json:"state_value"`
}

type CloudwatchLogsState struct {
	LogGroupName string `json:"log_group_name"`
	RoleArn      string `json:"role_arn"`
}

type CloudwatchMetricState struct {
	MetricName      string `json:"metric_name"`
	MetricNamespace string `json:"metric_namespace"`
	MetricTimestamp string `json:"metric_timestamp"`
	MetricUnit      string `json:"metric_unit"`
	MetricValue     string `json:"metric_value"`
	RoleArn         string `json:"role_arn"`
}

type DynamodbState struct {
	HashKeyField  string `json:"hash_key_field"`
	HashKeyType   string `json:"hash_key_type"`
	HashKeyValue  string `json:"hash_key_value"`
	Operation     string `json:"operation"`
	PayloadField  string `json:"payload_field"`
	RangeKeyField string `json:"range_key_field"`
	RangeKeyType  string `json:"range_key_type"`
	RangeKeyValue string `json:"range_key_value"`
	RoleArn       string `json:"role_arn"`
	TableName     string `json:"table_name"`
}

type Dynamodbv2State struct {
	RoleArn string                   `json:"role_arn"`
	PutItem []Dynamodbv2PutItemState `json:"put_item"`
}

type Dynamodbv2PutItemState struct {
	TableName string `json:"table_name"`
}

type ElasticsearchState struct {
	Endpoint string `json:"endpoint"`
	Id       string `json:"id"`
	Index    string `json:"index"`
	RoleArn  string `json:"role_arn"`
	Type     string `json:"type"`
}

type ErrorActionState struct {
	CloudwatchAlarm  []ErrorActionCloudwatchAlarmState  `json:"cloudwatch_alarm"`
	CloudwatchLogs   []ErrorActionCloudwatchLogsState   `json:"cloudwatch_logs"`
	CloudwatchMetric []ErrorActionCloudwatchMetricState `json:"cloudwatch_metric"`
	Dynamodb         []ErrorActionDynamodbState         `json:"dynamodb"`
	Dynamodbv2       []ErrorActionDynamodbv2State       `json:"dynamodbv2"`
	Elasticsearch    []ErrorActionElasticsearchState    `json:"elasticsearch"`
	Firehose         []ErrorActionFirehoseState         `json:"firehose"`
	Http             []ErrorActionHttpState             `json:"http"`
	IotAnalytics     []ErrorActionIotAnalyticsState     `json:"iot_analytics"`
	IotEvents        []ErrorActionIotEventsState        `json:"iot_events"`
	Kafka            []ErrorActionKafkaState            `json:"kafka"`
	Kinesis          []ErrorActionKinesisState          `json:"kinesis"`
	Lambda           []ErrorActionLambdaState           `json:"lambda"`
	Republish        []ErrorActionRepublishState        `json:"republish"`
	S3               []ErrorActionS3State               `json:"s3"`
	Sns              []ErrorActionSnsState              `json:"sns"`
	Sqs              []ErrorActionSqsState              `json:"sqs"`
	StepFunctions    []ErrorActionStepFunctionsState    `json:"step_functions"`
	Timestream       []ErrorActionTimestreamState       `json:"timestream"`
}

type ErrorActionCloudwatchAlarmState struct {
	AlarmName   string `json:"alarm_name"`
	RoleArn     string `json:"role_arn"`
	StateReason string `json:"state_reason"`
	StateValue  string `json:"state_value"`
}

type ErrorActionCloudwatchLogsState struct {
	LogGroupName string `json:"log_group_name"`
	RoleArn      string `json:"role_arn"`
}

type ErrorActionCloudwatchMetricState struct {
	MetricName      string `json:"metric_name"`
	MetricNamespace string `json:"metric_namespace"`
	MetricTimestamp string `json:"metric_timestamp"`
	MetricUnit      string `json:"metric_unit"`
	MetricValue     string `json:"metric_value"`
	RoleArn         string `json:"role_arn"`
}

type ErrorActionDynamodbState struct {
	HashKeyField  string `json:"hash_key_field"`
	HashKeyType   string `json:"hash_key_type"`
	HashKeyValue  string `json:"hash_key_value"`
	Operation     string `json:"operation"`
	PayloadField  string `json:"payload_field"`
	RangeKeyField string `json:"range_key_field"`
	RangeKeyType  string `json:"range_key_type"`
	RangeKeyValue string `json:"range_key_value"`
	RoleArn       string `json:"role_arn"`
	TableName     string `json:"table_name"`
}

type ErrorActionDynamodbv2State struct {
	RoleArn string                              `json:"role_arn"`
	PutItem []ErrorActionDynamodbv2PutItemState `json:"put_item"`
}

type ErrorActionDynamodbv2PutItemState struct {
	TableName string `json:"table_name"`
}

type ErrorActionElasticsearchState struct {
	Endpoint string `json:"endpoint"`
	Id       string `json:"id"`
	Index    string `json:"index"`
	RoleArn  string `json:"role_arn"`
	Type     string `json:"type"`
}

type ErrorActionFirehoseState struct {
	BatchMode          bool   `json:"batch_mode"`
	DeliveryStreamName string `json:"delivery_stream_name"`
	RoleArn            string `json:"role_arn"`
	Separator          string `json:"separator"`
}

type ErrorActionHttpState struct {
	ConfirmationUrl string                           `json:"confirmation_url"`
	Url             string                           `json:"url"`
	HttpHeader      []ErrorActionHttpHttpHeaderState `json:"http_header"`
}

type ErrorActionHttpHttpHeaderState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type ErrorActionIotAnalyticsState struct {
	BatchMode   bool   `json:"batch_mode"`
	ChannelName string `json:"channel_name"`
	RoleArn     string `json:"role_arn"`
}

type ErrorActionIotEventsState struct {
	BatchMode bool   `json:"batch_mode"`
	InputName string `json:"input_name"`
	MessageId string `json:"message_id"`
	RoleArn   string `json:"role_arn"`
}

type ErrorActionKafkaState struct {
	ClientProperties map[string]string `json:"client_properties"`
	DestinationArn   string            `json:"destination_arn"`
	Key              string            `json:"key"`
	Partition        string            `json:"partition"`
	Topic            string            `json:"topic"`
}

type ErrorActionKinesisState struct {
	PartitionKey string `json:"partition_key"`
	RoleArn      string `json:"role_arn"`
	StreamName   string `json:"stream_name"`
}

type ErrorActionLambdaState struct {
	FunctionArn string `json:"function_arn"`
}

type ErrorActionRepublishState struct {
	Qos     float64 `json:"qos"`
	RoleArn string  `json:"role_arn"`
	Topic   string  `json:"topic"`
}

type ErrorActionS3State struct {
	BucketName string `json:"bucket_name"`
	CannedAcl  string `json:"canned_acl"`
	Key        string `json:"key"`
	RoleArn    string `json:"role_arn"`
}

type ErrorActionSnsState struct {
	MessageFormat string `json:"message_format"`
	RoleArn       string `json:"role_arn"`
	TargetArn     string `json:"target_arn"`
}

type ErrorActionSqsState struct {
	QueueUrl  string `json:"queue_url"`
	RoleArn   string `json:"role_arn"`
	UseBase64 bool   `json:"use_base64"`
}

type ErrorActionStepFunctionsState struct {
	ExecutionNamePrefix string `json:"execution_name_prefix"`
	RoleArn             string `json:"role_arn"`
	StateMachineName    string `json:"state_machine_name"`
}

type ErrorActionTimestreamState struct {
	DatabaseName string                                `json:"database_name"`
	RoleArn      string                                `json:"role_arn"`
	TableName    string                                `json:"table_name"`
	Dimension    []ErrorActionTimestreamDimensionState `json:"dimension"`
	Timestamp    []ErrorActionTimestreamTimestampState `json:"timestamp"`
}

type ErrorActionTimestreamDimensionState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type ErrorActionTimestreamTimestampState struct {
	Unit  string `json:"unit"`
	Value string `json:"value"`
}

type FirehoseState struct {
	BatchMode          bool   `json:"batch_mode"`
	DeliveryStreamName string `json:"delivery_stream_name"`
	RoleArn            string `json:"role_arn"`
	Separator          string `json:"separator"`
}

type HttpState struct {
	ConfirmationUrl string                `json:"confirmation_url"`
	Url             string                `json:"url"`
	HttpHeader      []HttpHttpHeaderState `json:"http_header"`
}

type HttpHttpHeaderState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type IotAnalyticsState struct {
	BatchMode   bool   `json:"batch_mode"`
	ChannelName string `json:"channel_name"`
	RoleArn     string `json:"role_arn"`
}

type IotEventsState struct {
	BatchMode bool   `json:"batch_mode"`
	InputName string `json:"input_name"`
	MessageId string `json:"message_id"`
	RoleArn   string `json:"role_arn"`
}

type KafkaState struct {
	ClientProperties map[string]string `json:"client_properties"`
	DestinationArn   string            `json:"destination_arn"`
	Key              string            `json:"key"`
	Partition        string            `json:"partition"`
	Topic            string            `json:"topic"`
}

type KinesisState struct {
	PartitionKey string `json:"partition_key"`
	RoleArn      string `json:"role_arn"`
	StreamName   string `json:"stream_name"`
}

type LambdaState struct {
	FunctionArn string `json:"function_arn"`
}

type RepublishState struct {
	Qos     float64 `json:"qos"`
	RoleArn string  `json:"role_arn"`
	Topic   string  `json:"topic"`
}

type S3State struct {
	BucketName string `json:"bucket_name"`
	CannedAcl  string `json:"canned_acl"`
	Key        string `json:"key"`
	RoleArn    string `json:"role_arn"`
}

type SnsState struct {
	MessageFormat string `json:"message_format"`
	RoleArn       string `json:"role_arn"`
	TargetArn     string `json:"target_arn"`
}

type SqsState struct {
	QueueUrl  string `json:"queue_url"`
	RoleArn   string `json:"role_arn"`
	UseBase64 bool   `json:"use_base64"`
}

type StepFunctionsState struct {
	ExecutionNamePrefix string `json:"execution_name_prefix"`
	RoleArn             string `json:"role_arn"`
	StateMachineName    string `json:"state_machine_name"`
}

type TimestreamState struct {
	DatabaseName string                     `json:"database_name"`
	RoleArn      string                     `json:"role_arn"`
	TableName    string                     `json:"table_name"`
	Dimension    []TimestreamDimensionState `json:"dimension"`
	Timestamp    []TimestreamTimestampState `json:"timestamp"`
}

type TimestreamDimensionState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TimestreamTimestampState struct {
	Unit  string `json:"unit"`
	Value string `json:"value"`
}
