// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	datasynctask "github.com/golingon/terraproviders/aws/5.15.0/datasynctask"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDatasyncTask creates a new instance of [DatasyncTask].
func NewDatasyncTask(name string, args DatasyncTaskArgs) *DatasyncTask {
	return &DatasyncTask{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatasyncTask)(nil)

// DatasyncTask represents the Terraform resource aws_datasync_task.
type DatasyncTask struct {
	Name      string
	Args      DatasyncTaskArgs
	state     *datasyncTaskState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DatasyncTask].
func (dt *DatasyncTask) Type() string {
	return "aws_datasync_task"
}

// LocalName returns the local name for [DatasyncTask].
func (dt *DatasyncTask) LocalName() string {
	return dt.Name
}

// Configuration returns the configuration (args) for [DatasyncTask].
func (dt *DatasyncTask) Configuration() interface{} {
	return dt.Args
}

// DependOn is used for other resources to depend on [DatasyncTask].
func (dt *DatasyncTask) DependOn() terra.Reference {
	return terra.ReferenceResource(dt)
}

// Dependencies returns the list of resources [DatasyncTask] depends_on.
func (dt *DatasyncTask) Dependencies() terra.Dependencies {
	return dt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DatasyncTask].
func (dt *DatasyncTask) LifecycleManagement() *terra.Lifecycle {
	return dt.Lifecycle
}

// Attributes returns the attributes for [DatasyncTask].
func (dt *DatasyncTask) Attributes() datasyncTaskAttributes {
	return datasyncTaskAttributes{ref: terra.ReferenceResource(dt)}
}

// ImportState imports the given attribute values into [DatasyncTask]'s state.
func (dt *DatasyncTask) ImportState(av io.Reader) error {
	dt.state = &datasyncTaskState{}
	if err := json.NewDecoder(av).Decode(dt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dt.Type(), dt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DatasyncTask] has state.
func (dt *DatasyncTask) State() (*datasyncTaskState, bool) {
	return dt.state, dt.state != nil
}

// StateMust returns the state for [DatasyncTask]. Panics if the state is nil.
func (dt *DatasyncTask) StateMust() *datasyncTaskState {
	if dt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dt.Type(), dt.LocalName()))
	}
	return dt.state
}

// DatasyncTaskArgs contains the configurations for aws_datasync_task.
type DatasyncTaskArgs struct {
	// CloudwatchLogGroupArn: string, optional
	CloudwatchLogGroupArn terra.StringValue `hcl:"cloudwatch_log_group_arn,attr"`
	// DestinationLocationArn: string, required
	DestinationLocationArn terra.StringValue `hcl:"destination_location_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// SourceLocationArn: string, required
	SourceLocationArn terra.StringValue `hcl:"source_location_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Excludes: optional
	Excludes *datasynctask.Excludes `hcl:"excludes,block"`
	// Includes: optional
	Includes *datasynctask.Includes `hcl:"includes,block"`
	// Options: optional
	Options *datasynctask.Options `hcl:"options,block"`
	// Schedule: optional
	Schedule *datasynctask.Schedule `hcl:"schedule,block"`
	// Timeouts: optional
	Timeouts *datasynctask.Timeouts `hcl:"timeouts,block"`
}
type datasyncTaskAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_datasync_task.
func (dt datasyncTaskAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("arn"))
}

// CloudwatchLogGroupArn returns a reference to field cloudwatch_log_group_arn of aws_datasync_task.
func (dt datasyncTaskAttributes) CloudwatchLogGroupArn() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("cloudwatch_log_group_arn"))
}

// DestinationLocationArn returns a reference to field destination_location_arn of aws_datasync_task.
func (dt datasyncTaskAttributes) DestinationLocationArn() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("destination_location_arn"))
}

// Id returns a reference to field id of aws_datasync_task.
func (dt datasyncTaskAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("id"))
}

// Name returns a reference to field name of aws_datasync_task.
func (dt datasyncTaskAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("name"))
}

// SourceLocationArn returns a reference to field source_location_arn of aws_datasync_task.
func (dt datasyncTaskAttributes) SourceLocationArn() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("source_location_arn"))
}

// Tags returns a reference to field tags of aws_datasync_task.
func (dt datasyncTaskAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_datasync_task.
func (dt datasyncTaskAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dt.ref.Append("tags_all"))
}

func (dt datasyncTaskAttributes) Excludes() terra.ListValue[datasynctask.ExcludesAttributes] {
	return terra.ReferenceAsList[datasynctask.ExcludesAttributes](dt.ref.Append("excludes"))
}

func (dt datasyncTaskAttributes) Includes() terra.ListValue[datasynctask.IncludesAttributes] {
	return terra.ReferenceAsList[datasynctask.IncludesAttributes](dt.ref.Append("includes"))
}

func (dt datasyncTaskAttributes) Options() terra.ListValue[datasynctask.OptionsAttributes] {
	return terra.ReferenceAsList[datasynctask.OptionsAttributes](dt.ref.Append("options"))
}

func (dt datasyncTaskAttributes) Schedule() terra.ListValue[datasynctask.ScheduleAttributes] {
	return terra.ReferenceAsList[datasynctask.ScheduleAttributes](dt.ref.Append("schedule"))
}

func (dt datasyncTaskAttributes) Timeouts() datasynctask.TimeoutsAttributes {
	return terra.ReferenceAsSingle[datasynctask.TimeoutsAttributes](dt.ref.Append("timeouts"))
}

type datasyncTaskState struct {
	Arn                    string                       `json:"arn"`
	CloudwatchLogGroupArn  string                       `json:"cloudwatch_log_group_arn"`
	DestinationLocationArn string                       `json:"destination_location_arn"`
	Id                     string                       `json:"id"`
	Name                   string                       `json:"name"`
	SourceLocationArn      string                       `json:"source_location_arn"`
	Tags                   map[string]string            `json:"tags"`
	TagsAll                map[string]string            `json:"tags_all"`
	Excludes               []datasynctask.ExcludesState `json:"excludes"`
	Includes               []datasynctask.IncludesState `json:"includes"`
	Options                []datasynctask.OptionsState  `json:"options"`
	Schedule               []datasynctask.ScheduleState `json:"schedule"`
	Timeouts               *datasynctask.TimeoutsState  `json:"timeouts"`
}
