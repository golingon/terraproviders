// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package quicksightdataset

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type OutputColumns struct{}

type ColumnGroups struct {
	// GeoSpatialColumnGroup: optional
	GeoSpatialColumnGroup *GeoSpatialColumnGroup `hcl:"geo_spatial_column_group,block"`
}

type GeoSpatialColumnGroup struct {
	// Columns: list of string, required
	Columns terra.ListValue[terra.StringValue] `hcl:"columns,attr" validate:"required"`
	// CountryCode: string, required
	CountryCode terra.StringValue `hcl:"country_code,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type ColumnLevelPermissionRules struct {
	// ColumnNames: list of string, optional
	ColumnNames terra.ListValue[terra.StringValue] `hcl:"column_names,attr"`
	// Principals: list of string, optional
	Principals terra.ListValue[terra.StringValue] `hcl:"principals,attr"`
}

type DataSetUsageConfiguration struct {
	// DisableUseAsDirectQuerySource: bool, optional
	DisableUseAsDirectQuerySource terra.BoolValue `hcl:"disable_use_as_direct_query_source,attr"`
	// DisableUseAsImportedSource: bool, optional
	DisableUseAsImportedSource terra.BoolValue `hcl:"disable_use_as_imported_source,attr"`
}

type FieldFolders struct {
	// Columns: list of string, optional
	Columns terra.ListValue[terra.StringValue] `hcl:"columns,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FieldFoldersId: string, required
	FieldFoldersId terra.StringValue `hcl:"field_folders_id,attr" validate:"required"`
}

type LogicalTableMap struct {
	// Alias: string, required
	Alias terra.StringValue `hcl:"alias,attr" validate:"required"`
	// LogicalTableMapId: string, required
	LogicalTableMapId terra.StringValue `hcl:"logical_table_map_id,attr" validate:"required"`
	// DataTransforms: min=0,max=2048
	DataTransforms []DataTransforms `hcl:"data_transforms,block" validate:"min=0,max=2048"`
	// Source: required
	Source *Source `hcl:"source,block" validate:"required"`
}

type DataTransforms struct {
	// CastColumnTypeOperation: optional
	CastColumnTypeOperation *CastColumnTypeOperation `hcl:"cast_column_type_operation,block"`
	// CreateColumnsOperation: optional
	CreateColumnsOperation *CreateColumnsOperation `hcl:"create_columns_operation,block"`
	// FilterOperation: optional
	FilterOperation *FilterOperation `hcl:"filter_operation,block"`
	// ProjectOperation: optional
	ProjectOperation *ProjectOperation `hcl:"project_operation,block"`
	// RenameColumnOperation: optional
	RenameColumnOperation *RenameColumnOperation `hcl:"rename_column_operation,block"`
	// TagColumnOperation: optional
	TagColumnOperation *TagColumnOperation `hcl:"tag_column_operation,block"`
	// UntagColumnOperation: optional
	UntagColumnOperation *UntagColumnOperation `hcl:"untag_column_operation,block"`
}

type CastColumnTypeOperation struct {
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// Format: string, optional
	Format terra.StringValue `hcl:"format,attr"`
	// NewColumnType: string, required
	NewColumnType terra.StringValue `hcl:"new_column_type,attr" validate:"required"`
}

type CreateColumnsOperation struct {
	// CreateColumnsOperationColumns: min=1,max=128
	Columns []CreateColumnsOperationColumns `hcl:"columns,block" validate:"min=1,max=128"`
}

type CreateColumnsOperationColumns struct {
	// ColumnId: string, required
	ColumnId terra.StringValue `hcl:"column_id,attr" validate:"required"`
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// Expression: string, required
	Expression terra.StringValue `hcl:"expression,attr" validate:"required"`
}

type FilterOperation struct {
	// ConditionExpression: string, required
	ConditionExpression terra.StringValue `hcl:"condition_expression,attr" validate:"required"`
}

type ProjectOperation struct {
	// ProjectedColumns: list of string, required
	ProjectedColumns terra.ListValue[terra.StringValue] `hcl:"projected_columns,attr" validate:"required"`
}

type RenameColumnOperation struct {
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// NewColumnName: string, required
	NewColumnName terra.StringValue `hcl:"new_column_name,attr" validate:"required"`
}

type TagColumnOperation struct {
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// Tags: min=1,max=16
	Tags []Tags `hcl:"tags,block" validate:"min=1,max=16"`
}

type Tags struct {
	// ColumnGeographicRole: string, optional
	ColumnGeographicRole terra.StringValue `hcl:"column_geographic_role,attr"`
	// ColumnDescription: optional
	ColumnDescription *ColumnDescription `hcl:"column_description,block"`
}

type ColumnDescription struct {
	// Text: string, optional
	Text terra.StringValue `hcl:"text,attr"`
}

type UntagColumnOperation struct {
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// TagNames: list of string, required
	TagNames terra.ListValue[terra.StringValue] `hcl:"tag_names,attr" validate:"required"`
}

type Source struct {
	// DataSetArn: string, optional
	DataSetArn terra.StringValue `hcl:"data_set_arn,attr"`
	// PhysicalTableId: string, optional
	PhysicalTableId terra.StringValue `hcl:"physical_table_id,attr"`
	// JoinInstruction: optional
	JoinInstruction *JoinInstruction `hcl:"join_instruction,block"`
}

type JoinInstruction struct {
	// LeftOperand: string, required
	LeftOperand terra.StringValue `hcl:"left_operand,attr" validate:"required"`
	// OnClause: string, required
	OnClause terra.StringValue `hcl:"on_clause,attr" validate:"required"`
	// RightOperand: string, required
	RightOperand terra.StringValue `hcl:"right_operand,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// LeftJoinKeyProperties: optional
	LeftJoinKeyProperties *LeftJoinKeyProperties `hcl:"left_join_key_properties,block"`
	// RightJoinKeyProperties: optional
	RightJoinKeyProperties *RightJoinKeyProperties `hcl:"right_join_key_properties,block"`
}

type LeftJoinKeyProperties struct {
	// UniqueKey: bool, optional
	UniqueKey terra.BoolValue `hcl:"unique_key,attr"`
}

type RightJoinKeyProperties struct {
	// UniqueKey: bool, optional
	UniqueKey terra.BoolValue `hcl:"unique_key,attr"`
}

type Permissions struct {
	// Actions: set of string, required
	Actions terra.SetValue[terra.StringValue] `hcl:"actions,attr" validate:"required"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
}

type PhysicalTableMap struct {
	// PhysicalTableMapId: string, required
	PhysicalTableMapId terra.StringValue `hcl:"physical_table_map_id,attr" validate:"required"`
	// CustomSql: optional
	CustomSql *CustomSql `hcl:"custom_sql,block"`
	// RelationalTable: optional
	RelationalTable *RelationalTable `hcl:"relational_table,block"`
	// S3Source: optional
	S3Source *S3Source `hcl:"s3_source,block"`
}

type CustomSql struct {
	// DataSourceArn: string, required
	DataSourceArn terra.StringValue `hcl:"data_source_arn,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SqlQuery: string, required
	SqlQuery terra.StringValue `hcl:"sql_query,attr" validate:"required"`
	// CustomSqlColumns: min=0,max=2048
	Columns []CustomSqlColumns `hcl:"columns,block" validate:"min=0,max=2048"`
}

type CustomSqlColumns struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type RelationalTable struct {
	// Catalog: string, optional
	Catalog terra.StringValue `hcl:"catalog,attr"`
	// DataSourceArn: string, required
	DataSourceArn terra.StringValue `hcl:"data_source_arn,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// RelationalTableInputColumns: min=1,max=2048
	InputColumns []RelationalTableInputColumns `hcl:"input_columns,block" validate:"min=1,max=2048"`
}

type RelationalTableInputColumns struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type S3Source struct {
	// DataSourceArn: string, required
	DataSourceArn terra.StringValue `hcl:"data_source_arn,attr" validate:"required"`
	// S3SourceInputColumns: min=1,max=2048
	InputColumns []S3SourceInputColumns `hcl:"input_columns,block" validate:"min=1,max=2048"`
	// UploadSettings: required
	UploadSettings *UploadSettings `hcl:"upload_settings,block" validate:"required"`
}

type S3SourceInputColumns struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type UploadSettings struct {
	// ContainsHeader: bool, optional
	ContainsHeader terra.BoolValue `hcl:"contains_header,attr"`
	// Delimiter: string, optional
	Delimiter terra.StringValue `hcl:"delimiter,attr"`
	// Format: string, optional
	Format terra.StringValue `hcl:"format,attr"`
	// StartFromRow: number, optional
	StartFromRow terra.NumberValue `hcl:"start_from_row,attr"`
	// TextQualifier: string, optional
	TextQualifier terra.StringValue `hcl:"text_qualifier,attr"`
}

type RefreshProperties struct {
	// RefreshConfiguration: required
	RefreshConfiguration *RefreshConfiguration `hcl:"refresh_configuration,block" validate:"required"`
}

type RefreshConfiguration struct {
	// IncrementalRefresh: required
	IncrementalRefresh *IncrementalRefresh `hcl:"incremental_refresh,block" validate:"required"`
}

type IncrementalRefresh struct {
	// LookbackWindow: required
	LookbackWindow *LookbackWindow `hcl:"lookback_window,block" validate:"required"`
}

type LookbackWindow struct {
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// SizeUnit: string, required
	SizeUnit terra.StringValue `hcl:"size_unit,attr" validate:"required"`
}

type RowLevelPermissionDataSet struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// FormatVersion: string, optional
	FormatVersion terra.StringValue `hcl:"format_version,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// PermissionPolicy: string, required
	PermissionPolicy terra.StringValue `hcl:"permission_policy,attr" validate:"required"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
}

type RowLevelPermissionTagConfiguration struct {
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// TagRules: min=1,max=50
	TagRules []TagRules `hcl:"tag_rules,block" validate:"min=1,max=50"`
}

type TagRules struct {
	// ColumnName: string, required
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// MatchAllValue: string, optional
	MatchAllValue terra.StringValue `hcl:"match_all_value,attr"`
	// TagKey: string, required
	TagKey terra.StringValue `hcl:"tag_key,attr" validate:"required"`
	// TagMultiValueDelimiter: string, optional
	TagMultiValueDelimiter terra.StringValue `hcl:"tag_multi_value_delimiter,attr"`
}

type OutputColumnsAttributes struct {
	ref terra.Reference
}

func (oc OutputColumnsAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc OutputColumnsAttributes) InternalWithRef(ref terra.Reference) OutputColumnsAttributes {
	return OutputColumnsAttributes{ref: ref}
}

func (oc OutputColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc OutputColumnsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("description"))
}

func (oc OutputColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("name"))
}

func (oc OutputColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("type"))
}

type ColumnGroupsAttributes struct {
	ref terra.Reference
}

func (cg ColumnGroupsAttributes) InternalRef() (terra.Reference, error) {
	return cg.ref, nil
}

func (cg ColumnGroupsAttributes) InternalWithRef(ref terra.Reference) ColumnGroupsAttributes {
	return ColumnGroupsAttributes{ref: ref}
}

func (cg ColumnGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cg.ref.InternalTokens()
}

func (cg ColumnGroupsAttributes) GeoSpatialColumnGroup() terra.ListValue[GeoSpatialColumnGroupAttributes] {
	return terra.ReferenceAsList[GeoSpatialColumnGroupAttributes](cg.ref.Append("geo_spatial_column_group"))
}

type GeoSpatialColumnGroupAttributes struct {
	ref terra.Reference
}

func (gscg GeoSpatialColumnGroupAttributes) InternalRef() (terra.Reference, error) {
	return gscg.ref, nil
}

func (gscg GeoSpatialColumnGroupAttributes) InternalWithRef(ref terra.Reference) GeoSpatialColumnGroupAttributes {
	return GeoSpatialColumnGroupAttributes{ref: ref}
}

func (gscg GeoSpatialColumnGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gscg.ref.InternalTokens()
}

func (gscg GeoSpatialColumnGroupAttributes) Columns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gscg.ref.Append("columns"))
}

func (gscg GeoSpatialColumnGroupAttributes) CountryCode() terra.StringValue {
	return terra.ReferenceAsString(gscg.ref.Append("country_code"))
}

func (gscg GeoSpatialColumnGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gscg.ref.Append("name"))
}

type ColumnLevelPermissionRulesAttributes struct {
	ref terra.Reference
}

func (clpr ColumnLevelPermissionRulesAttributes) InternalRef() (terra.Reference, error) {
	return clpr.ref, nil
}

func (clpr ColumnLevelPermissionRulesAttributes) InternalWithRef(ref terra.Reference) ColumnLevelPermissionRulesAttributes {
	return ColumnLevelPermissionRulesAttributes{ref: ref}
}

func (clpr ColumnLevelPermissionRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clpr.ref.InternalTokens()
}

func (clpr ColumnLevelPermissionRulesAttributes) ColumnNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](clpr.ref.Append("column_names"))
}

func (clpr ColumnLevelPermissionRulesAttributes) Principals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](clpr.ref.Append("principals"))
}

type DataSetUsageConfigurationAttributes struct {
	ref terra.Reference
}

func (dsuc DataSetUsageConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dsuc.ref, nil
}

func (dsuc DataSetUsageConfigurationAttributes) InternalWithRef(ref terra.Reference) DataSetUsageConfigurationAttributes {
	return DataSetUsageConfigurationAttributes{ref: ref}
}

func (dsuc DataSetUsageConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dsuc.ref.InternalTokens()
}

func (dsuc DataSetUsageConfigurationAttributes) DisableUseAsDirectQuerySource() terra.BoolValue {
	return terra.ReferenceAsBool(dsuc.ref.Append("disable_use_as_direct_query_source"))
}

func (dsuc DataSetUsageConfigurationAttributes) DisableUseAsImportedSource() terra.BoolValue {
	return terra.ReferenceAsBool(dsuc.ref.Append("disable_use_as_imported_source"))
}

type FieldFoldersAttributes struct {
	ref terra.Reference
}

func (ff FieldFoldersAttributes) InternalRef() (terra.Reference, error) {
	return ff.ref, nil
}

func (ff FieldFoldersAttributes) InternalWithRef(ref terra.Reference) FieldFoldersAttributes {
	return FieldFoldersAttributes{ref: ref}
}

func (ff FieldFoldersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ff.ref.InternalTokens()
}

func (ff FieldFoldersAttributes) Columns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ff.ref.Append("columns"))
}

func (ff FieldFoldersAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ff.ref.Append("description"))
}

func (ff FieldFoldersAttributes) FieldFoldersId() terra.StringValue {
	return terra.ReferenceAsString(ff.ref.Append("field_folders_id"))
}

type LogicalTableMapAttributes struct {
	ref terra.Reference
}

func (ltm LogicalTableMapAttributes) InternalRef() (terra.Reference, error) {
	return ltm.ref, nil
}

func (ltm LogicalTableMapAttributes) InternalWithRef(ref terra.Reference) LogicalTableMapAttributes {
	return LogicalTableMapAttributes{ref: ref}
}

func (ltm LogicalTableMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ltm.ref.InternalTokens()
}

func (ltm LogicalTableMapAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(ltm.ref.Append("alias"))
}

func (ltm LogicalTableMapAttributes) LogicalTableMapId() terra.StringValue {
	return terra.ReferenceAsString(ltm.ref.Append("logical_table_map_id"))
}

func (ltm LogicalTableMapAttributes) DataTransforms() terra.ListValue[DataTransformsAttributes] {
	return terra.ReferenceAsList[DataTransformsAttributes](ltm.ref.Append("data_transforms"))
}

func (ltm LogicalTableMapAttributes) Source() terra.ListValue[SourceAttributes] {
	return terra.ReferenceAsList[SourceAttributes](ltm.ref.Append("source"))
}

type DataTransformsAttributes struct {
	ref terra.Reference
}

func (dt DataTransformsAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt DataTransformsAttributes) InternalWithRef(ref terra.Reference) DataTransformsAttributes {
	return DataTransformsAttributes{ref: ref}
}

func (dt DataTransformsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt DataTransformsAttributes) CastColumnTypeOperation() terra.ListValue[CastColumnTypeOperationAttributes] {
	return terra.ReferenceAsList[CastColumnTypeOperationAttributes](dt.ref.Append("cast_column_type_operation"))
}

func (dt DataTransformsAttributes) CreateColumnsOperation() terra.ListValue[CreateColumnsOperationAttributes] {
	return terra.ReferenceAsList[CreateColumnsOperationAttributes](dt.ref.Append("create_columns_operation"))
}

func (dt DataTransformsAttributes) FilterOperation() terra.ListValue[FilterOperationAttributes] {
	return terra.ReferenceAsList[FilterOperationAttributes](dt.ref.Append("filter_operation"))
}

func (dt DataTransformsAttributes) ProjectOperation() terra.ListValue[ProjectOperationAttributes] {
	return terra.ReferenceAsList[ProjectOperationAttributes](dt.ref.Append("project_operation"))
}

func (dt DataTransformsAttributes) RenameColumnOperation() terra.ListValue[RenameColumnOperationAttributes] {
	return terra.ReferenceAsList[RenameColumnOperationAttributes](dt.ref.Append("rename_column_operation"))
}

func (dt DataTransformsAttributes) TagColumnOperation() terra.ListValue[TagColumnOperationAttributes] {
	return terra.ReferenceAsList[TagColumnOperationAttributes](dt.ref.Append("tag_column_operation"))
}

func (dt DataTransformsAttributes) UntagColumnOperation() terra.ListValue[UntagColumnOperationAttributes] {
	return terra.ReferenceAsList[UntagColumnOperationAttributes](dt.ref.Append("untag_column_operation"))
}

type CastColumnTypeOperationAttributes struct {
	ref terra.Reference
}

func (ccto CastColumnTypeOperationAttributes) InternalRef() (terra.Reference, error) {
	return ccto.ref, nil
}

func (ccto CastColumnTypeOperationAttributes) InternalWithRef(ref terra.Reference) CastColumnTypeOperationAttributes {
	return CastColumnTypeOperationAttributes{ref: ref}
}

func (ccto CastColumnTypeOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccto.ref.InternalTokens()
}

func (ccto CastColumnTypeOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("column_name"))
}

func (ccto CastColumnTypeOperationAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("format"))
}

func (ccto CastColumnTypeOperationAttributes) NewColumnType() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("new_column_type"))
}

type CreateColumnsOperationAttributes struct {
	ref terra.Reference
}

func (cco CreateColumnsOperationAttributes) InternalRef() (terra.Reference, error) {
	return cco.ref, nil
}

func (cco CreateColumnsOperationAttributes) InternalWithRef(ref terra.Reference) CreateColumnsOperationAttributes {
	return CreateColumnsOperationAttributes{ref: ref}
}

func (cco CreateColumnsOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cco.ref.InternalTokens()
}

func (cco CreateColumnsOperationAttributes) Columns() terra.ListValue[CreateColumnsOperationColumnsAttributes] {
	return terra.ReferenceAsList[CreateColumnsOperationColumnsAttributes](cco.ref.Append("columns"))
}

type CreateColumnsOperationColumnsAttributes struct {
	ref terra.Reference
}

func (c CreateColumnsOperationColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CreateColumnsOperationColumnsAttributes) InternalWithRef(ref terra.Reference) CreateColumnsOperationColumnsAttributes {
	return CreateColumnsOperationColumnsAttributes{ref: ref}
}

func (c CreateColumnsOperationColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CreateColumnsOperationColumnsAttributes) ColumnId() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("column_id"))
}

func (c CreateColumnsOperationColumnsAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("column_name"))
}

func (c CreateColumnsOperationColumnsAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("expression"))
}

type FilterOperationAttributes struct {
	ref terra.Reference
}

func (fo FilterOperationAttributes) InternalRef() (terra.Reference, error) {
	return fo.ref, nil
}

func (fo FilterOperationAttributes) InternalWithRef(ref terra.Reference) FilterOperationAttributes {
	return FilterOperationAttributes{ref: ref}
}

func (fo FilterOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fo.ref.InternalTokens()
}

func (fo FilterOperationAttributes) ConditionExpression() terra.StringValue {
	return terra.ReferenceAsString(fo.ref.Append("condition_expression"))
}

type ProjectOperationAttributes struct {
	ref terra.Reference
}

func (po ProjectOperationAttributes) InternalRef() (terra.Reference, error) {
	return po.ref, nil
}

func (po ProjectOperationAttributes) InternalWithRef(ref terra.Reference) ProjectOperationAttributes {
	return ProjectOperationAttributes{ref: ref}
}

func (po ProjectOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return po.ref.InternalTokens()
}

func (po ProjectOperationAttributes) ProjectedColumns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](po.ref.Append("projected_columns"))
}

type RenameColumnOperationAttributes struct {
	ref terra.Reference
}

func (rco RenameColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return rco.ref, nil
}

func (rco RenameColumnOperationAttributes) InternalWithRef(ref terra.Reference) RenameColumnOperationAttributes {
	return RenameColumnOperationAttributes{ref: ref}
}

func (rco RenameColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rco.ref.InternalTokens()
}

func (rco RenameColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(rco.ref.Append("column_name"))
}

func (rco RenameColumnOperationAttributes) NewColumnName() terra.StringValue {
	return terra.ReferenceAsString(rco.ref.Append("new_column_name"))
}

type TagColumnOperationAttributes struct {
	ref terra.Reference
}

func (tco TagColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return tco.ref, nil
}

func (tco TagColumnOperationAttributes) InternalWithRef(ref terra.Reference) TagColumnOperationAttributes {
	return TagColumnOperationAttributes{ref: ref}
}

func (tco TagColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tco.ref.InternalTokens()
}

func (tco TagColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(tco.ref.Append("column_name"))
}

func (tco TagColumnOperationAttributes) Tags() terra.ListValue[TagsAttributes] {
	return terra.ReferenceAsList[TagsAttributes](tco.ref.Append("tags"))
}

type TagsAttributes struct {
	ref terra.Reference
}

func (t TagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TagsAttributes) InternalWithRef(ref terra.Reference) TagsAttributes {
	return TagsAttributes{ref: ref}
}

func (t TagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TagsAttributes) ColumnGeographicRole() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("column_geographic_role"))
}

func (t TagsAttributes) ColumnDescription() terra.ListValue[ColumnDescriptionAttributes] {
	return terra.ReferenceAsList[ColumnDescriptionAttributes](t.ref.Append("column_description"))
}

type ColumnDescriptionAttributes struct {
	ref terra.Reference
}

func (cd ColumnDescriptionAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd ColumnDescriptionAttributes) InternalWithRef(ref terra.Reference) ColumnDescriptionAttributes {
	return ColumnDescriptionAttributes{ref: ref}
}

func (cd ColumnDescriptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd ColumnDescriptionAttributes) Text() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("text"))
}

type UntagColumnOperationAttributes struct {
	ref terra.Reference
}

func (uco UntagColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return uco.ref, nil
}

func (uco UntagColumnOperationAttributes) InternalWithRef(ref terra.Reference) UntagColumnOperationAttributes {
	return UntagColumnOperationAttributes{ref: ref}
}

func (uco UntagColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uco.ref.InternalTokens()
}

func (uco UntagColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(uco.ref.Append("column_name"))
}

func (uco UntagColumnOperationAttributes) TagNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](uco.ref.Append("tag_names"))
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) DataSetArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("data_set_arn"))
}

func (s SourceAttributes) PhysicalTableId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("physical_table_id"))
}

func (s SourceAttributes) JoinInstruction() terra.ListValue[JoinInstructionAttributes] {
	return terra.ReferenceAsList[JoinInstructionAttributes](s.ref.Append("join_instruction"))
}

type JoinInstructionAttributes struct {
	ref terra.Reference
}

func (ji JoinInstructionAttributes) InternalRef() (terra.Reference, error) {
	return ji.ref, nil
}

func (ji JoinInstructionAttributes) InternalWithRef(ref terra.Reference) JoinInstructionAttributes {
	return JoinInstructionAttributes{ref: ref}
}

func (ji JoinInstructionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ji.ref.InternalTokens()
}

func (ji JoinInstructionAttributes) LeftOperand() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("left_operand"))
}

func (ji JoinInstructionAttributes) OnClause() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("on_clause"))
}

func (ji JoinInstructionAttributes) RightOperand() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("right_operand"))
}

func (ji JoinInstructionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("type"))
}

func (ji JoinInstructionAttributes) LeftJoinKeyProperties() terra.ListValue[LeftJoinKeyPropertiesAttributes] {
	return terra.ReferenceAsList[LeftJoinKeyPropertiesAttributes](ji.ref.Append("left_join_key_properties"))
}

func (ji JoinInstructionAttributes) RightJoinKeyProperties() terra.ListValue[RightJoinKeyPropertiesAttributes] {
	return terra.ReferenceAsList[RightJoinKeyPropertiesAttributes](ji.ref.Append("right_join_key_properties"))
}

type LeftJoinKeyPropertiesAttributes struct {
	ref terra.Reference
}

func (ljkp LeftJoinKeyPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return ljkp.ref, nil
}

func (ljkp LeftJoinKeyPropertiesAttributes) InternalWithRef(ref terra.Reference) LeftJoinKeyPropertiesAttributes {
	return LeftJoinKeyPropertiesAttributes{ref: ref}
}

func (ljkp LeftJoinKeyPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ljkp.ref.InternalTokens()
}

func (ljkp LeftJoinKeyPropertiesAttributes) UniqueKey() terra.BoolValue {
	return terra.ReferenceAsBool(ljkp.ref.Append("unique_key"))
}

type RightJoinKeyPropertiesAttributes struct {
	ref terra.Reference
}

func (rjkp RightJoinKeyPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return rjkp.ref, nil
}

func (rjkp RightJoinKeyPropertiesAttributes) InternalWithRef(ref terra.Reference) RightJoinKeyPropertiesAttributes {
	return RightJoinKeyPropertiesAttributes{ref: ref}
}

func (rjkp RightJoinKeyPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rjkp.ref.InternalTokens()
}

func (rjkp RightJoinKeyPropertiesAttributes) UniqueKey() terra.BoolValue {
	return terra.ReferenceAsBool(rjkp.ref.Append("unique_key"))
}

type PermissionsAttributes struct {
	ref terra.Reference
}

func (p PermissionsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PermissionsAttributes) InternalWithRef(ref terra.Reference) PermissionsAttributes {
	return PermissionsAttributes{ref: ref}
}

func (p PermissionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PermissionsAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("actions"))
}

func (p PermissionsAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("principal"))
}

type PhysicalTableMapAttributes struct {
	ref terra.Reference
}

func (ptm PhysicalTableMapAttributes) InternalRef() (terra.Reference, error) {
	return ptm.ref, nil
}

func (ptm PhysicalTableMapAttributes) InternalWithRef(ref terra.Reference) PhysicalTableMapAttributes {
	return PhysicalTableMapAttributes{ref: ref}
}

func (ptm PhysicalTableMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptm.ref.InternalTokens()
}

func (ptm PhysicalTableMapAttributes) PhysicalTableMapId() terra.StringValue {
	return terra.ReferenceAsString(ptm.ref.Append("physical_table_map_id"))
}

func (ptm PhysicalTableMapAttributes) CustomSql() terra.ListValue[CustomSqlAttributes] {
	return terra.ReferenceAsList[CustomSqlAttributes](ptm.ref.Append("custom_sql"))
}

func (ptm PhysicalTableMapAttributes) RelationalTable() terra.ListValue[RelationalTableAttributes] {
	return terra.ReferenceAsList[RelationalTableAttributes](ptm.ref.Append("relational_table"))
}

func (ptm PhysicalTableMapAttributes) S3Source() terra.ListValue[S3SourceAttributes] {
	return terra.ReferenceAsList[S3SourceAttributes](ptm.ref.Append("s3_source"))
}

type CustomSqlAttributes struct {
	ref terra.Reference
}

func (cs CustomSqlAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs CustomSqlAttributes) InternalWithRef(ref terra.Reference) CustomSqlAttributes {
	return CustomSqlAttributes{ref: ref}
}

func (cs CustomSqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs CustomSqlAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("data_source_arn"))
}

func (cs CustomSqlAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("name"))
}

func (cs CustomSqlAttributes) SqlQuery() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("sql_query"))
}

func (cs CustomSqlAttributes) Columns() terra.ListValue[CustomSqlColumnsAttributes] {
	return terra.ReferenceAsList[CustomSqlColumnsAttributes](cs.ref.Append("columns"))
}

type CustomSqlColumnsAttributes struct {
	ref terra.Reference
}

func (c CustomSqlColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CustomSqlColumnsAttributes) InternalWithRef(ref terra.Reference) CustomSqlColumnsAttributes {
	return CustomSqlColumnsAttributes{ref: ref}
}

func (c CustomSqlColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CustomSqlColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c CustomSqlColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type RelationalTableAttributes struct {
	ref terra.Reference
}

func (rt RelationalTableAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt RelationalTableAttributes) InternalWithRef(ref terra.Reference) RelationalTableAttributes {
	return RelationalTableAttributes{ref: ref}
}

func (rt RelationalTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt RelationalTableAttributes) Catalog() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("catalog"))
}

func (rt RelationalTableAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("data_source_arn"))
}

func (rt RelationalTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("name"))
}

func (rt RelationalTableAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("schema"))
}

func (rt RelationalTableAttributes) InputColumns() terra.ListValue[RelationalTableInputColumnsAttributes] {
	return terra.ReferenceAsList[RelationalTableInputColumnsAttributes](rt.ref.Append("input_columns"))
}

type RelationalTableInputColumnsAttributes struct {
	ref terra.Reference
}

func (ic RelationalTableInputColumnsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic RelationalTableInputColumnsAttributes) InternalWithRef(ref terra.Reference) RelationalTableInputColumnsAttributes {
	return RelationalTableInputColumnsAttributes{ref: ref}
}

func (ic RelationalTableInputColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic RelationalTableInputColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic RelationalTableInputColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("type"))
}

type S3SourceAttributes struct {
	ref terra.Reference
}

func (ss S3SourceAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss S3SourceAttributes) InternalWithRef(ref terra.Reference) S3SourceAttributes {
	return S3SourceAttributes{ref: ref}
}

func (ss S3SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss S3SourceAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("data_source_arn"))
}

func (ss S3SourceAttributes) InputColumns() terra.ListValue[S3SourceInputColumnsAttributes] {
	return terra.ReferenceAsList[S3SourceInputColumnsAttributes](ss.ref.Append("input_columns"))
}

func (ss S3SourceAttributes) UploadSettings() terra.ListValue[UploadSettingsAttributes] {
	return terra.ReferenceAsList[UploadSettingsAttributes](ss.ref.Append("upload_settings"))
}

type S3SourceInputColumnsAttributes struct {
	ref terra.Reference
}

func (ic S3SourceInputColumnsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic S3SourceInputColumnsAttributes) InternalWithRef(ref terra.Reference) S3SourceInputColumnsAttributes {
	return S3SourceInputColumnsAttributes{ref: ref}
}

func (ic S3SourceInputColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic S3SourceInputColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic S3SourceInputColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("type"))
}

type UploadSettingsAttributes struct {
	ref terra.Reference
}

func (us UploadSettingsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us UploadSettingsAttributes) InternalWithRef(ref terra.Reference) UploadSettingsAttributes {
	return UploadSettingsAttributes{ref: ref}
}

func (us UploadSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us UploadSettingsAttributes) ContainsHeader() terra.BoolValue {
	return terra.ReferenceAsBool(us.ref.Append("contains_header"))
}

func (us UploadSettingsAttributes) Delimiter() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("delimiter"))
}

func (us UploadSettingsAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("format"))
}

func (us UploadSettingsAttributes) StartFromRow() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("start_from_row"))
}

func (us UploadSettingsAttributes) TextQualifier() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("text_qualifier"))
}

type RefreshPropertiesAttributes struct {
	ref terra.Reference
}

func (rp RefreshPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp RefreshPropertiesAttributes) InternalWithRef(ref terra.Reference) RefreshPropertiesAttributes {
	return RefreshPropertiesAttributes{ref: ref}
}

func (rp RefreshPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp RefreshPropertiesAttributes) RefreshConfiguration() terra.ListValue[RefreshConfigurationAttributes] {
	return terra.ReferenceAsList[RefreshConfigurationAttributes](rp.ref.Append("refresh_configuration"))
}

type RefreshConfigurationAttributes struct {
	ref terra.Reference
}

func (rc RefreshConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc RefreshConfigurationAttributes) InternalWithRef(ref terra.Reference) RefreshConfigurationAttributes {
	return RefreshConfigurationAttributes{ref: ref}
}

func (rc RefreshConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc RefreshConfigurationAttributes) IncrementalRefresh() terra.ListValue[IncrementalRefreshAttributes] {
	return terra.ReferenceAsList[IncrementalRefreshAttributes](rc.ref.Append("incremental_refresh"))
}

type IncrementalRefreshAttributes struct {
	ref terra.Reference
}

func (ir IncrementalRefreshAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir IncrementalRefreshAttributes) InternalWithRef(ref terra.Reference) IncrementalRefreshAttributes {
	return IncrementalRefreshAttributes{ref: ref}
}

func (ir IncrementalRefreshAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir IncrementalRefreshAttributes) LookbackWindow() terra.ListValue[LookbackWindowAttributes] {
	return terra.ReferenceAsList[LookbackWindowAttributes](ir.ref.Append("lookback_window"))
}

type LookbackWindowAttributes struct {
	ref terra.Reference
}

func (lw LookbackWindowAttributes) InternalRef() (terra.Reference, error) {
	return lw.ref, nil
}

func (lw LookbackWindowAttributes) InternalWithRef(ref terra.Reference) LookbackWindowAttributes {
	return LookbackWindowAttributes{ref: ref}
}

func (lw LookbackWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lw.ref.InternalTokens()
}

func (lw LookbackWindowAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(lw.ref.Append("column_name"))
}

func (lw LookbackWindowAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(lw.ref.Append("size"))
}

func (lw LookbackWindowAttributes) SizeUnit() terra.StringValue {
	return terra.ReferenceAsString(lw.ref.Append("size_unit"))
}

type RowLevelPermissionDataSetAttributes struct {
	ref terra.Reference
}

func (rlpds RowLevelPermissionDataSetAttributes) InternalRef() (terra.Reference, error) {
	return rlpds.ref, nil
}

func (rlpds RowLevelPermissionDataSetAttributes) InternalWithRef(ref terra.Reference) RowLevelPermissionDataSetAttributes {
	return RowLevelPermissionDataSetAttributes{ref: ref}
}

func (rlpds RowLevelPermissionDataSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rlpds.ref.InternalTokens()
}

func (rlpds RowLevelPermissionDataSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("arn"))
}

func (rlpds RowLevelPermissionDataSetAttributes) FormatVersion() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("format_version"))
}

func (rlpds RowLevelPermissionDataSetAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("namespace"))
}

func (rlpds RowLevelPermissionDataSetAttributes) PermissionPolicy() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("permission_policy"))
}

func (rlpds RowLevelPermissionDataSetAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("status"))
}

type RowLevelPermissionTagConfigurationAttributes struct {
	ref terra.Reference
}

func (rlptc RowLevelPermissionTagConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rlptc.ref, nil
}

func (rlptc RowLevelPermissionTagConfigurationAttributes) InternalWithRef(ref terra.Reference) RowLevelPermissionTagConfigurationAttributes {
	return RowLevelPermissionTagConfigurationAttributes{ref: ref}
}

func (rlptc RowLevelPermissionTagConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rlptc.ref.InternalTokens()
}

func (rlptc RowLevelPermissionTagConfigurationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rlptc.ref.Append("status"))
}

func (rlptc RowLevelPermissionTagConfigurationAttributes) TagRules() terra.ListValue[TagRulesAttributes] {
	return terra.ReferenceAsList[TagRulesAttributes](rlptc.ref.Append("tag_rules"))
}

type TagRulesAttributes struct {
	ref terra.Reference
}

func (tr TagRulesAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr TagRulesAttributes) InternalWithRef(ref terra.Reference) TagRulesAttributes {
	return TagRulesAttributes{ref: ref}
}

func (tr TagRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr TagRulesAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("column_name"))
}

func (tr TagRulesAttributes) MatchAllValue() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("match_all_value"))
}

func (tr TagRulesAttributes) TagKey() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("tag_key"))
}

func (tr TagRulesAttributes) TagMultiValueDelimiter() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("tag_multi_value_delimiter"))
}

type OutputColumnsState struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	Type        string `json:"type"`
}

type ColumnGroupsState struct {
	GeoSpatialColumnGroup []GeoSpatialColumnGroupState `json:"geo_spatial_column_group"`
}

type GeoSpatialColumnGroupState struct {
	Columns     []string `json:"columns"`
	CountryCode string   `json:"country_code"`
	Name        string   `json:"name"`
}

type ColumnLevelPermissionRulesState struct {
	ColumnNames []string `json:"column_names"`
	Principals  []string `json:"principals"`
}

type DataSetUsageConfigurationState struct {
	DisableUseAsDirectQuerySource bool `json:"disable_use_as_direct_query_source"`
	DisableUseAsImportedSource    bool `json:"disable_use_as_imported_source"`
}

type FieldFoldersState struct {
	Columns        []string `json:"columns"`
	Description    string   `json:"description"`
	FieldFoldersId string   `json:"field_folders_id"`
}

type LogicalTableMapState struct {
	Alias             string                `json:"alias"`
	LogicalTableMapId string                `json:"logical_table_map_id"`
	DataTransforms    []DataTransformsState `json:"data_transforms"`
	Source            []SourceState         `json:"source"`
}

type DataTransformsState struct {
	CastColumnTypeOperation []CastColumnTypeOperationState `json:"cast_column_type_operation"`
	CreateColumnsOperation  []CreateColumnsOperationState  `json:"create_columns_operation"`
	FilterOperation         []FilterOperationState         `json:"filter_operation"`
	ProjectOperation        []ProjectOperationState        `json:"project_operation"`
	RenameColumnOperation   []RenameColumnOperationState   `json:"rename_column_operation"`
	TagColumnOperation      []TagColumnOperationState      `json:"tag_column_operation"`
	UntagColumnOperation    []UntagColumnOperationState    `json:"untag_column_operation"`
}

type CastColumnTypeOperationState struct {
	ColumnName    string `json:"column_name"`
	Format        string `json:"format"`
	NewColumnType string `json:"new_column_type"`
}

type CreateColumnsOperationState struct {
	Columns []CreateColumnsOperationColumnsState `json:"columns"`
}

type CreateColumnsOperationColumnsState struct {
	ColumnId   string `json:"column_id"`
	ColumnName string `json:"column_name"`
	Expression string `json:"expression"`
}

type FilterOperationState struct {
	ConditionExpression string `json:"condition_expression"`
}

type ProjectOperationState struct {
	ProjectedColumns []string `json:"projected_columns"`
}

type RenameColumnOperationState struct {
	ColumnName    string `json:"column_name"`
	NewColumnName string `json:"new_column_name"`
}

type TagColumnOperationState struct {
	ColumnName string      `json:"column_name"`
	Tags       []TagsState `json:"tags"`
}

type TagsState struct {
	ColumnGeographicRole string                   `json:"column_geographic_role"`
	ColumnDescription    []ColumnDescriptionState `json:"column_description"`
}

type ColumnDescriptionState struct {
	Text string `json:"text"`
}

type UntagColumnOperationState struct {
	ColumnName string   `json:"column_name"`
	TagNames   []string `json:"tag_names"`
}

type SourceState struct {
	DataSetArn      string                 `json:"data_set_arn"`
	PhysicalTableId string                 `json:"physical_table_id"`
	JoinInstruction []JoinInstructionState `json:"join_instruction"`
}

type JoinInstructionState struct {
	LeftOperand            string                        `json:"left_operand"`
	OnClause               string                        `json:"on_clause"`
	RightOperand           string                        `json:"right_operand"`
	Type                   string                        `json:"type"`
	LeftJoinKeyProperties  []LeftJoinKeyPropertiesState  `json:"left_join_key_properties"`
	RightJoinKeyProperties []RightJoinKeyPropertiesState `json:"right_join_key_properties"`
}

type LeftJoinKeyPropertiesState struct {
	UniqueKey bool `json:"unique_key"`
}

type RightJoinKeyPropertiesState struct {
	UniqueKey bool `json:"unique_key"`
}

type PermissionsState struct {
	Actions   []string `json:"actions"`
	Principal string   `json:"principal"`
}

type PhysicalTableMapState struct {
	PhysicalTableMapId string                 `json:"physical_table_map_id"`
	CustomSql          []CustomSqlState       `json:"custom_sql"`
	RelationalTable    []RelationalTableState `json:"relational_table"`
	S3Source           []S3SourceState        `json:"s3_source"`
}

type CustomSqlState struct {
	DataSourceArn string                  `json:"data_source_arn"`
	Name          string                  `json:"name"`
	SqlQuery      string                  `json:"sql_query"`
	Columns       []CustomSqlColumnsState `json:"columns"`
}

type CustomSqlColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type RelationalTableState struct {
	Catalog       string                             `json:"catalog"`
	DataSourceArn string                             `json:"data_source_arn"`
	Name          string                             `json:"name"`
	Schema        string                             `json:"schema"`
	InputColumns  []RelationalTableInputColumnsState `json:"input_columns"`
}

type RelationalTableInputColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type S3SourceState struct {
	DataSourceArn  string                      `json:"data_source_arn"`
	InputColumns   []S3SourceInputColumnsState `json:"input_columns"`
	UploadSettings []UploadSettingsState       `json:"upload_settings"`
}

type S3SourceInputColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type UploadSettingsState struct {
	ContainsHeader bool    `json:"contains_header"`
	Delimiter      string  `json:"delimiter"`
	Format         string  `json:"format"`
	StartFromRow   float64 `json:"start_from_row"`
	TextQualifier  string  `json:"text_qualifier"`
}

type RefreshPropertiesState struct {
	RefreshConfiguration []RefreshConfigurationState `json:"refresh_configuration"`
}

type RefreshConfigurationState struct {
	IncrementalRefresh []IncrementalRefreshState `json:"incremental_refresh"`
}

type IncrementalRefreshState struct {
	LookbackWindow []LookbackWindowState `json:"lookback_window"`
}

type LookbackWindowState struct {
	ColumnName string  `json:"column_name"`
	Size       float64 `json:"size"`
	SizeUnit   string  `json:"size_unit"`
}

type RowLevelPermissionDataSetState struct {
	Arn              string `json:"arn"`
	FormatVersion    string `json:"format_version"`
	Namespace        string `json:"namespace"`
	PermissionPolicy string `json:"permission_policy"`
	Status           string `json:"status"`
}

type RowLevelPermissionTagConfigurationState struct {
	Status   string          `json:"status"`
	TagRules []TagRulesState `json:"tag_rules"`
}

type TagRulesState struct {
	ColumnName             string `json:"column_name"`
	MatchAllValue          string `json:"match_all_value"`
	TagKey                 string `json:"tag_key"`
	TagMultiValueDelimiter string `json:"tag_multi_value_delimiter"`
}
