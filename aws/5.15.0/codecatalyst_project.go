// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	codecatalystproject "github.com/golingon/terraproviders/aws/5.15.0/codecatalystproject"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCodecatalystProject creates a new instance of [CodecatalystProject].
func NewCodecatalystProject(name string, args CodecatalystProjectArgs) *CodecatalystProject {
	return &CodecatalystProject{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodecatalystProject)(nil)

// CodecatalystProject represents the Terraform resource aws_codecatalyst_project.
type CodecatalystProject struct {
	Name      string
	Args      CodecatalystProjectArgs
	state     *codecatalystProjectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CodecatalystProject].
func (cp *CodecatalystProject) Type() string {
	return "aws_codecatalyst_project"
}

// LocalName returns the local name for [CodecatalystProject].
func (cp *CodecatalystProject) LocalName() string {
	return cp.Name
}

// Configuration returns the configuration (args) for [CodecatalystProject].
func (cp *CodecatalystProject) Configuration() interface{} {
	return cp.Args
}

// DependOn is used for other resources to depend on [CodecatalystProject].
func (cp *CodecatalystProject) DependOn() terra.Reference {
	return terra.ReferenceResource(cp)
}

// Dependencies returns the list of resources [CodecatalystProject] depends_on.
func (cp *CodecatalystProject) Dependencies() terra.Dependencies {
	return cp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CodecatalystProject].
func (cp *CodecatalystProject) LifecycleManagement() *terra.Lifecycle {
	return cp.Lifecycle
}

// Attributes returns the attributes for [CodecatalystProject].
func (cp *CodecatalystProject) Attributes() codecatalystProjectAttributes {
	return codecatalystProjectAttributes{ref: terra.ReferenceResource(cp)}
}

// ImportState imports the given attribute values into [CodecatalystProject]'s state.
func (cp *CodecatalystProject) ImportState(av io.Reader) error {
	cp.state = &codecatalystProjectState{}
	if err := json.NewDecoder(av).Decode(cp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cp.Type(), cp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CodecatalystProject] has state.
func (cp *CodecatalystProject) State() (*codecatalystProjectState, bool) {
	return cp.state, cp.state != nil
}

// StateMust returns the state for [CodecatalystProject]. Panics if the state is nil.
func (cp *CodecatalystProject) StateMust() *codecatalystProjectState {
	if cp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cp.Type(), cp.LocalName()))
	}
	return cp.state
}

// CodecatalystProjectArgs contains the configurations for aws_codecatalyst_project.
type CodecatalystProjectArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SpaceName: string, required
	SpaceName terra.StringValue `hcl:"space_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *codecatalystproject.Timeouts `hcl:"timeouts,block"`
}
type codecatalystProjectAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_codecatalyst_project.
func (cp codecatalystProjectAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("description"))
}

// DisplayName returns a reference to field display_name of aws_codecatalyst_project.
func (cp codecatalystProjectAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("display_name"))
}

// Id returns a reference to field id of aws_codecatalyst_project.
func (cp codecatalystProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("id"))
}

// Name returns a reference to field name of aws_codecatalyst_project.
func (cp codecatalystProjectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("name"))
}

// SpaceName returns a reference to field space_name of aws_codecatalyst_project.
func (cp codecatalystProjectAttributes) SpaceName() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("space_name"))
}

func (cp codecatalystProjectAttributes) Timeouts() codecatalystproject.TimeoutsAttributes {
	return terra.ReferenceAsSingle[codecatalystproject.TimeoutsAttributes](cp.ref.Append("timeouts"))
}

type codecatalystProjectState struct {
	Description string                             `json:"description"`
	DisplayName string                             `json:"display_name"`
	Id          string                             `json:"id"`
	Name        string                             `json:"name"`
	SpaceName   string                             `json:"space_name"`
	Timeouts    *codecatalystproject.TimeoutsState `json:"timeouts"`
}
