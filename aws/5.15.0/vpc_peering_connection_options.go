// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	vpcpeeringconnectionoptions "github.com/golingon/terraproviders/aws/5.15.0/vpcpeeringconnectionoptions"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewVpcPeeringConnectionOptions creates a new instance of [VpcPeeringConnectionOptions].
func NewVpcPeeringConnectionOptions(name string, args VpcPeeringConnectionOptionsArgs) *VpcPeeringConnectionOptions {
	return &VpcPeeringConnectionOptions{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpcPeeringConnectionOptions)(nil)

// VpcPeeringConnectionOptions represents the Terraform resource aws_vpc_peering_connection_options.
type VpcPeeringConnectionOptions struct {
	Name      string
	Args      VpcPeeringConnectionOptionsArgs
	state     *vpcPeeringConnectionOptionsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VpcPeeringConnectionOptions].
func (vpco *VpcPeeringConnectionOptions) Type() string {
	return "aws_vpc_peering_connection_options"
}

// LocalName returns the local name for [VpcPeeringConnectionOptions].
func (vpco *VpcPeeringConnectionOptions) LocalName() string {
	return vpco.Name
}

// Configuration returns the configuration (args) for [VpcPeeringConnectionOptions].
func (vpco *VpcPeeringConnectionOptions) Configuration() interface{} {
	return vpco.Args
}

// DependOn is used for other resources to depend on [VpcPeeringConnectionOptions].
func (vpco *VpcPeeringConnectionOptions) DependOn() terra.Reference {
	return terra.ReferenceResource(vpco)
}

// Dependencies returns the list of resources [VpcPeeringConnectionOptions] depends_on.
func (vpco *VpcPeeringConnectionOptions) Dependencies() terra.Dependencies {
	return vpco.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VpcPeeringConnectionOptions].
func (vpco *VpcPeeringConnectionOptions) LifecycleManagement() *terra.Lifecycle {
	return vpco.Lifecycle
}

// Attributes returns the attributes for [VpcPeeringConnectionOptions].
func (vpco *VpcPeeringConnectionOptions) Attributes() vpcPeeringConnectionOptionsAttributes {
	return vpcPeeringConnectionOptionsAttributes{ref: terra.ReferenceResource(vpco)}
}

// ImportState imports the given attribute values into [VpcPeeringConnectionOptions]'s state.
func (vpco *VpcPeeringConnectionOptions) ImportState(av io.Reader) error {
	vpco.state = &vpcPeeringConnectionOptionsState{}
	if err := json.NewDecoder(av).Decode(vpco.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vpco.Type(), vpco.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VpcPeeringConnectionOptions] has state.
func (vpco *VpcPeeringConnectionOptions) State() (*vpcPeeringConnectionOptionsState, bool) {
	return vpco.state, vpco.state != nil
}

// StateMust returns the state for [VpcPeeringConnectionOptions]. Panics if the state is nil.
func (vpco *VpcPeeringConnectionOptions) StateMust() *vpcPeeringConnectionOptionsState {
	if vpco.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vpco.Type(), vpco.LocalName()))
	}
	return vpco.state
}

// VpcPeeringConnectionOptionsArgs contains the configurations for aws_vpc_peering_connection_options.
type VpcPeeringConnectionOptionsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VpcPeeringConnectionId: string, required
	VpcPeeringConnectionId terra.StringValue `hcl:"vpc_peering_connection_id,attr" validate:"required"`
	// Accepter: optional
	Accepter *vpcpeeringconnectionoptions.Accepter `hcl:"accepter,block"`
	// Requester: optional
	Requester *vpcpeeringconnectionoptions.Requester `hcl:"requester,block"`
}
type vpcPeeringConnectionOptionsAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_vpc_peering_connection_options.
func (vpco vpcPeeringConnectionOptionsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vpco.ref.Append("id"))
}

// VpcPeeringConnectionId returns a reference to field vpc_peering_connection_id of aws_vpc_peering_connection_options.
func (vpco vpcPeeringConnectionOptionsAttributes) VpcPeeringConnectionId() terra.StringValue {
	return terra.ReferenceAsString(vpco.ref.Append("vpc_peering_connection_id"))
}

func (vpco vpcPeeringConnectionOptionsAttributes) Accepter() terra.ListValue[vpcpeeringconnectionoptions.AccepterAttributes] {
	return terra.ReferenceAsList[vpcpeeringconnectionoptions.AccepterAttributes](vpco.ref.Append("accepter"))
}

func (vpco vpcPeeringConnectionOptionsAttributes) Requester() terra.ListValue[vpcpeeringconnectionoptions.RequesterAttributes] {
	return terra.ReferenceAsList[vpcpeeringconnectionoptions.RequesterAttributes](vpco.ref.Append("requester"))
}

type vpcPeeringConnectionOptionsState struct {
	Id                     string                                       `json:"id"`
	VpcPeeringConnectionId string                                       `json:"vpc_peering_connection_id"`
	Accepter               []vpcpeeringconnectionoptions.AccepterState  `json:"accepter"`
	Requester              []vpcpeeringconnectionoptions.RequesterState `json:"requester"`
}
