// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	datasynclocationazureblob "github.com/golingon/terraproviders/aws/5.15.0/datasynclocationazureblob"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDatasyncLocationAzureBlob creates a new instance of [DatasyncLocationAzureBlob].
func NewDatasyncLocationAzureBlob(name string, args DatasyncLocationAzureBlobArgs) *DatasyncLocationAzureBlob {
	return &DatasyncLocationAzureBlob{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatasyncLocationAzureBlob)(nil)

// DatasyncLocationAzureBlob represents the Terraform resource aws_datasync_location_azure_blob.
type DatasyncLocationAzureBlob struct {
	Name      string
	Args      DatasyncLocationAzureBlobArgs
	state     *datasyncLocationAzureBlobState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DatasyncLocationAzureBlob].
func (dlab *DatasyncLocationAzureBlob) Type() string {
	return "aws_datasync_location_azure_blob"
}

// LocalName returns the local name for [DatasyncLocationAzureBlob].
func (dlab *DatasyncLocationAzureBlob) LocalName() string {
	return dlab.Name
}

// Configuration returns the configuration (args) for [DatasyncLocationAzureBlob].
func (dlab *DatasyncLocationAzureBlob) Configuration() interface{} {
	return dlab.Args
}

// DependOn is used for other resources to depend on [DatasyncLocationAzureBlob].
func (dlab *DatasyncLocationAzureBlob) DependOn() terra.Reference {
	return terra.ReferenceResource(dlab)
}

// Dependencies returns the list of resources [DatasyncLocationAzureBlob] depends_on.
func (dlab *DatasyncLocationAzureBlob) Dependencies() terra.Dependencies {
	return dlab.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DatasyncLocationAzureBlob].
func (dlab *DatasyncLocationAzureBlob) LifecycleManagement() *terra.Lifecycle {
	return dlab.Lifecycle
}

// Attributes returns the attributes for [DatasyncLocationAzureBlob].
func (dlab *DatasyncLocationAzureBlob) Attributes() datasyncLocationAzureBlobAttributes {
	return datasyncLocationAzureBlobAttributes{ref: terra.ReferenceResource(dlab)}
}

// ImportState imports the given attribute values into [DatasyncLocationAzureBlob]'s state.
func (dlab *DatasyncLocationAzureBlob) ImportState(av io.Reader) error {
	dlab.state = &datasyncLocationAzureBlobState{}
	if err := json.NewDecoder(av).Decode(dlab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dlab.Type(), dlab.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DatasyncLocationAzureBlob] has state.
func (dlab *DatasyncLocationAzureBlob) State() (*datasyncLocationAzureBlobState, bool) {
	return dlab.state, dlab.state != nil
}

// StateMust returns the state for [DatasyncLocationAzureBlob]. Panics if the state is nil.
func (dlab *DatasyncLocationAzureBlob) StateMust() *datasyncLocationAzureBlobState {
	if dlab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dlab.Type(), dlab.LocalName()))
	}
	return dlab.state
}

// DatasyncLocationAzureBlobArgs contains the configurations for aws_datasync_location_azure_blob.
type DatasyncLocationAzureBlobArgs struct {
	// AccessTier: string, optional
	AccessTier terra.StringValue `hcl:"access_tier,attr"`
	// AgentArns: set of string, required
	AgentArns terra.SetValue[terra.StringValue] `hcl:"agent_arns,attr" validate:"required"`
	// AuthenticationType: string, required
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr" validate:"required"`
	// BlobType: string, optional
	BlobType terra.StringValue `hcl:"blob_type,attr"`
	// ContainerUrl: string, required
	ContainerUrl terra.StringValue `hcl:"container_url,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Subdirectory: string, optional
	Subdirectory terra.StringValue `hcl:"subdirectory,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// SasConfiguration: optional
	SasConfiguration *datasynclocationazureblob.SasConfiguration `hcl:"sas_configuration,block"`
}
type datasyncLocationAzureBlobAttributes struct {
	ref terra.Reference
}

// AccessTier returns a reference to field access_tier of aws_datasync_location_azure_blob.
func (dlab datasyncLocationAzureBlobAttributes) AccessTier() terra.StringValue {
	return terra.ReferenceAsString(dlab.ref.Append("access_tier"))
}

// AgentArns returns a reference to field agent_arns of aws_datasync_location_azure_blob.
func (dlab datasyncLocationAzureBlobAttributes) AgentArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dlab.ref.Append("agent_arns"))
}

// Arn returns a reference to field arn of aws_datasync_location_azure_blob.
func (dlab datasyncLocationAzureBlobAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dlab.ref.Append("arn"))
}

// AuthenticationType returns a reference to field authentication_type of aws_datasync_location_azure_blob.
func (dlab datasyncLocationAzureBlobAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceAsString(dlab.ref.Append("authentication_type"))
}

// BlobType returns a reference to field blob_type of aws_datasync_location_azure_blob.
func (dlab datasyncLocationAzureBlobAttributes) BlobType() terra.StringValue {
	return terra.ReferenceAsString(dlab.ref.Append("blob_type"))
}

// ContainerUrl returns a reference to field container_url of aws_datasync_location_azure_blob.
func (dlab datasyncLocationAzureBlobAttributes) ContainerUrl() terra.StringValue {
	return terra.ReferenceAsString(dlab.ref.Append("container_url"))
}

// Id returns a reference to field id of aws_datasync_location_azure_blob.
func (dlab datasyncLocationAzureBlobAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dlab.ref.Append("id"))
}

// Subdirectory returns a reference to field subdirectory of aws_datasync_location_azure_blob.
func (dlab datasyncLocationAzureBlobAttributes) Subdirectory() terra.StringValue {
	return terra.ReferenceAsString(dlab.ref.Append("subdirectory"))
}

// Tags returns a reference to field tags of aws_datasync_location_azure_blob.
func (dlab datasyncLocationAzureBlobAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dlab.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_datasync_location_azure_blob.
func (dlab datasyncLocationAzureBlobAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dlab.ref.Append("tags_all"))
}

// Uri returns a reference to field uri of aws_datasync_location_azure_blob.
func (dlab datasyncLocationAzureBlobAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(dlab.ref.Append("uri"))
}

func (dlab datasyncLocationAzureBlobAttributes) SasConfiguration() terra.ListValue[datasynclocationazureblob.SasConfigurationAttributes] {
	return terra.ReferenceAsList[datasynclocationazureblob.SasConfigurationAttributes](dlab.ref.Append("sas_configuration"))
}

type datasyncLocationAzureBlobState struct {
	AccessTier         string                                            `json:"access_tier"`
	AgentArns          []string                                          `json:"agent_arns"`
	Arn                string                                            `json:"arn"`
	AuthenticationType string                                            `json:"authentication_type"`
	BlobType           string                                            `json:"blob_type"`
	ContainerUrl       string                                            `json:"container_url"`
	Id                 string                                            `json:"id"`
	Subdirectory       string                                            `json:"subdirectory"`
	Tags               map[string]string                                 `json:"tags"`
	TagsAll            map[string]string                                 `json:"tags_all"`
	Uri                string                                            `json:"uri"`
	SasConfiguration   []datasynclocationazureblob.SasConfigurationState `json:"sas_configuration"`
}
