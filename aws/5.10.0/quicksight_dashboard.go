// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	quicksightdashboard "github.com/golingon/terraproviders/aws/5.10.0/quicksightdashboard"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewQuicksightDashboard creates a new instance of [QuicksightDashboard].
func NewQuicksightDashboard(name string, args QuicksightDashboardArgs) *QuicksightDashboard {
	return &QuicksightDashboard{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*QuicksightDashboard)(nil)

// QuicksightDashboard represents the Terraform resource aws_quicksight_dashboard.
type QuicksightDashboard struct {
	Name      string
	Args      QuicksightDashboardArgs
	state     *quicksightDashboardState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [QuicksightDashboard].
func (qd *QuicksightDashboard) Type() string {
	return "aws_quicksight_dashboard"
}

// LocalName returns the local name for [QuicksightDashboard].
func (qd *QuicksightDashboard) LocalName() string {
	return qd.Name
}

// Configuration returns the configuration (args) for [QuicksightDashboard].
func (qd *QuicksightDashboard) Configuration() interface{} {
	return qd.Args
}

// DependOn is used for other resources to depend on [QuicksightDashboard].
func (qd *QuicksightDashboard) DependOn() terra.Reference {
	return terra.ReferenceResource(qd)
}

// Dependencies returns the list of resources [QuicksightDashboard] depends_on.
func (qd *QuicksightDashboard) Dependencies() terra.Dependencies {
	return qd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [QuicksightDashboard].
func (qd *QuicksightDashboard) LifecycleManagement() *terra.Lifecycle {
	return qd.Lifecycle
}

// Attributes returns the attributes for [QuicksightDashboard].
func (qd *QuicksightDashboard) Attributes() quicksightDashboardAttributes {
	return quicksightDashboardAttributes{ref: terra.ReferenceResource(qd)}
}

// ImportState imports the given attribute values into [QuicksightDashboard]'s state.
func (qd *QuicksightDashboard) ImportState(av io.Reader) error {
	qd.state = &quicksightDashboardState{}
	if err := json.NewDecoder(av).Decode(qd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", qd.Type(), qd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [QuicksightDashboard] has state.
func (qd *QuicksightDashboard) State() (*quicksightDashboardState, bool) {
	return qd.state, qd.state != nil
}

// StateMust returns the state for [QuicksightDashboard]. Panics if the state is nil.
func (qd *QuicksightDashboard) StateMust() *quicksightDashboardState {
	if qd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", qd.Type(), qd.LocalName()))
	}
	return qd.state
}

// QuicksightDashboardArgs contains the configurations for aws_quicksight_dashboard.
type QuicksightDashboardArgs struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// DashboardId: string, required
	DashboardId terra.StringValue `hcl:"dashboard_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ThemeArn: string, optional
	ThemeArn terra.StringValue `hcl:"theme_arn,attr"`
	// VersionDescription: string, required
	VersionDescription terra.StringValue `hcl:"version_description,attr" validate:"required"`
	// DashboardPublishOptions: optional
	DashboardPublishOptions *quicksightdashboard.DashboardPublishOptions `hcl:"dashboard_publish_options,block"`
	// Definition: optional
	Definition *quicksightdashboard.Definition `hcl:"definition,block"`
	// Parameters: optional
	Parameters *quicksightdashboard.Parameters `hcl:"parameters,block"`
	// Permissions: min=0,max=64
	Permissions []quicksightdashboard.Permissions `hcl:"permissions,block" validate:"min=0,max=64"`
	// SourceEntity: optional
	SourceEntity *quicksightdashboard.SourceEntity `hcl:"source_entity,block"`
	// Timeouts: optional
	Timeouts *quicksightdashboard.Timeouts `hcl:"timeouts,block"`
}
type quicksightDashboardAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(qd.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(qd.ref.Append("aws_account_id"))
}

// CreatedTime returns a reference to field created_time of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(qd.ref.Append("created_time"))
}

// DashboardId returns a reference to field dashboard_id of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) DashboardId() terra.StringValue {
	return terra.ReferenceAsString(qd.ref.Append("dashboard_id"))
}

// Id returns a reference to field id of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(qd.ref.Append("id"))
}

// LastPublishedTime returns a reference to field last_published_time of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) LastPublishedTime() terra.StringValue {
	return terra.ReferenceAsString(qd.ref.Append("last_published_time"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(qd.ref.Append("last_updated_time"))
}

// Name returns a reference to field name of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qd.ref.Append("name"))
}

// SourceEntityArn returns a reference to field source_entity_arn of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) SourceEntityArn() terra.StringValue {
	return terra.ReferenceAsString(qd.ref.Append("source_entity_arn"))
}

// Status returns a reference to field status of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(qd.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](qd.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](qd.ref.Append("tags_all"))
}

// ThemeArn returns a reference to field theme_arn of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) ThemeArn() terra.StringValue {
	return terra.ReferenceAsString(qd.ref.Append("theme_arn"))
}

// VersionDescription returns a reference to field version_description of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) VersionDescription() terra.StringValue {
	return terra.ReferenceAsString(qd.ref.Append("version_description"))
}

// VersionNumber returns a reference to field version_number of aws_quicksight_dashboard.
func (qd quicksightDashboardAttributes) VersionNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(qd.ref.Append("version_number"))
}

func (qd quicksightDashboardAttributes) DashboardPublishOptions() terra.ListValue[quicksightdashboard.DashboardPublishOptionsAttributes] {
	return terra.ReferenceAsList[quicksightdashboard.DashboardPublishOptionsAttributes](qd.ref.Append("dashboard_publish_options"))
}

func (qd quicksightDashboardAttributes) Definition() terra.ListValue[quicksightdashboard.DefinitionAttributes] {
	return terra.ReferenceAsList[quicksightdashboard.DefinitionAttributes](qd.ref.Append("definition"))
}

func (qd quicksightDashboardAttributes) Parameters() terra.ListValue[quicksightdashboard.ParametersAttributes] {
	return terra.ReferenceAsList[quicksightdashboard.ParametersAttributes](qd.ref.Append("parameters"))
}

func (qd quicksightDashboardAttributes) Permissions() terra.ListValue[quicksightdashboard.PermissionsAttributes] {
	return terra.ReferenceAsList[quicksightdashboard.PermissionsAttributes](qd.ref.Append("permissions"))
}

func (qd quicksightDashboardAttributes) SourceEntity() terra.ListValue[quicksightdashboard.SourceEntityAttributes] {
	return terra.ReferenceAsList[quicksightdashboard.SourceEntityAttributes](qd.ref.Append("source_entity"))
}

func (qd quicksightDashboardAttributes) Timeouts() quicksightdashboard.TimeoutsAttributes {
	return terra.ReferenceAsSingle[quicksightdashboard.TimeoutsAttributes](qd.ref.Append("timeouts"))
}

type quicksightDashboardState struct {
	Arn                     string                                             `json:"arn"`
	AwsAccountId            string                                             `json:"aws_account_id"`
	CreatedTime             string                                             `json:"created_time"`
	DashboardId             string                                             `json:"dashboard_id"`
	Id                      string                                             `json:"id"`
	LastPublishedTime       string                                             `json:"last_published_time"`
	LastUpdatedTime         string                                             `json:"last_updated_time"`
	Name                    string                                             `json:"name"`
	SourceEntityArn         string                                             `json:"source_entity_arn"`
	Status                  string                                             `json:"status"`
	Tags                    map[string]string                                  `json:"tags"`
	TagsAll                 map[string]string                                  `json:"tags_all"`
	ThemeArn                string                                             `json:"theme_arn"`
	VersionDescription      string                                             `json:"version_description"`
	VersionNumber           float64                                            `json:"version_number"`
	DashboardPublishOptions []quicksightdashboard.DashboardPublishOptionsState `json:"dashboard_publish_options"`
	Definition              []quicksightdashboard.DefinitionState              `json:"definition"`
	Parameters              []quicksightdashboard.ParametersState              `json:"parameters"`
	Permissions             []quicksightdashboard.PermissionsState             `json:"permissions"`
	SourceEntity            []quicksightdashboard.SourceEntityState            `json:"source_entity"`
	Timeouts                *quicksightdashboard.TimeoutsState                 `json:"timeouts"`
}
