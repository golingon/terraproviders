// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewLambdaInvocation creates a new instance of [LambdaInvocation].
func NewLambdaInvocation(name string, args LambdaInvocationArgs) *LambdaInvocation {
	return &LambdaInvocation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LambdaInvocation)(nil)

// LambdaInvocation represents the Terraform resource aws_lambda_invocation.
type LambdaInvocation struct {
	Name      string
	Args      LambdaInvocationArgs
	state     *lambdaInvocationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LambdaInvocation].
func (li *LambdaInvocation) Type() string {
	return "aws_lambda_invocation"
}

// LocalName returns the local name for [LambdaInvocation].
func (li *LambdaInvocation) LocalName() string {
	return li.Name
}

// Configuration returns the configuration (args) for [LambdaInvocation].
func (li *LambdaInvocation) Configuration() interface{} {
	return li.Args
}

// DependOn is used for other resources to depend on [LambdaInvocation].
func (li *LambdaInvocation) DependOn() terra.Reference {
	return terra.ReferenceResource(li)
}

// Dependencies returns the list of resources [LambdaInvocation] depends_on.
func (li *LambdaInvocation) Dependencies() terra.Dependencies {
	return li.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LambdaInvocation].
func (li *LambdaInvocation) LifecycleManagement() *terra.Lifecycle {
	return li.Lifecycle
}

// Attributes returns the attributes for [LambdaInvocation].
func (li *LambdaInvocation) Attributes() lambdaInvocationAttributes {
	return lambdaInvocationAttributes{ref: terra.ReferenceResource(li)}
}

// ImportState imports the given attribute values into [LambdaInvocation]'s state.
func (li *LambdaInvocation) ImportState(av io.Reader) error {
	li.state = &lambdaInvocationState{}
	if err := json.NewDecoder(av).Decode(li.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", li.Type(), li.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LambdaInvocation] has state.
func (li *LambdaInvocation) State() (*lambdaInvocationState, bool) {
	return li.state, li.state != nil
}

// StateMust returns the state for [LambdaInvocation]. Panics if the state is nil.
func (li *LambdaInvocation) StateMust() *lambdaInvocationState {
	if li.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", li.Type(), li.LocalName()))
	}
	return li.state
}

// LambdaInvocationArgs contains the configurations for aws_lambda_invocation.
type LambdaInvocationArgs struct {
	// FunctionName: string, required
	FunctionName terra.StringValue `hcl:"function_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Input: string, required
	Input terra.StringValue `hcl:"input,attr" validate:"required"`
	// LifecycleScope: string, optional
	LifecycleScope terra.StringValue `hcl:"lifecycle_scope,attr"`
	// Qualifier: string, optional
	Qualifier terra.StringValue `hcl:"qualifier,attr"`
	// TerraformKey: string, optional
	TerraformKey terra.StringValue `hcl:"terraform_key,attr"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
}
type lambdaInvocationAttributes struct {
	ref terra.Reference
}

// FunctionName returns a reference to field function_name of aws_lambda_invocation.
func (li lambdaInvocationAttributes) FunctionName() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("function_name"))
}

// Id returns a reference to field id of aws_lambda_invocation.
func (li lambdaInvocationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("id"))
}

// Input returns a reference to field input of aws_lambda_invocation.
func (li lambdaInvocationAttributes) Input() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("input"))
}

// LifecycleScope returns a reference to field lifecycle_scope of aws_lambda_invocation.
func (li lambdaInvocationAttributes) LifecycleScope() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("lifecycle_scope"))
}

// Qualifier returns a reference to field qualifier of aws_lambda_invocation.
func (li lambdaInvocationAttributes) Qualifier() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("qualifier"))
}

// Result returns a reference to field result of aws_lambda_invocation.
func (li lambdaInvocationAttributes) Result() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("result"))
}

// TerraformKey returns a reference to field terraform_key of aws_lambda_invocation.
func (li lambdaInvocationAttributes) TerraformKey() terra.StringValue {
	return terra.ReferenceAsString(li.ref.Append("terraform_key"))
}

// Triggers returns a reference to field triggers of aws_lambda_invocation.
func (li lambdaInvocationAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](li.ref.Append("triggers"))
}

type lambdaInvocationState struct {
	FunctionName   string            `json:"function_name"`
	Id             string            `json:"id"`
	Input          string            `json:"input"`
	LifecycleScope string            `json:"lifecycle_scope"`
	Qualifier      string            `json:"qualifier"`
	Result         string            `json:"result"`
	TerraformKey   string            `json:"terraform_key"`
	Triggers       map[string]string `json:"triggers"`
}
