// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	quicksightfolder "github.com/golingon/terraproviders/aws/5.10.0/quicksightfolder"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewQuicksightFolder creates a new instance of [QuicksightFolder].
func NewQuicksightFolder(name string, args QuicksightFolderArgs) *QuicksightFolder {
	return &QuicksightFolder{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*QuicksightFolder)(nil)

// QuicksightFolder represents the Terraform resource aws_quicksight_folder.
type QuicksightFolder struct {
	Name      string
	Args      QuicksightFolderArgs
	state     *quicksightFolderState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [QuicksightFolder].
func (qf *QuicksightFolder) Type() string {
	return "aws_quicksight_folder"
}

// LocalName returns the local name for [QuicksightFolder].
func (qf *QuicksightFolder) LocalName() string {
	return qf.Name
}

// Configuration returns the configuration (args) for [QuicksightFolder].
func (qf *QuicksightFolder) Configuration() interface{} {
	return qf.Args
}

// DependOn is used for other resources to depend on [QuicksightFolder].
func (qf *QuicksightFolder) DependOn() terra.Reference {
	return terra.ReferenceResource(qf)
}

// Dependencies returns the list of resources [QuicksightFolder] depends_on.
func (qf *QuicksightFolder) Dependencies() terra.Dependencies {
	return qf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [QuicksightFolder].
func (qf *QuicksightFolder) LifecycleManagement() *terra.Lifecycle {
	return qf.Lifecycle
}

// Attributes returns the attributes for [QuicksightFolder].
func (qf *QuicksightFolder) Attributes() quicksightFolderAttributes {
	return quicksightFolderAttributes{ref: terra.ReferenceResource(qf)}
}

// ImportState imports the given attribute values into [QuicksightFolder]'s state.
func (qf *QuicksightFolder) ImportState(av io.Reader) error {
	qf.state = &quicksightFolderState{}
	if err := json.NewDecoder(av).Decode(qf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", qf.Type(), qf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [QuicksightFolder] has state.
func (qf *QuicksightFolder) State() (*quicksightFolderState, bool) {
	return qf.state, qf.state != nil
}

// StateMust returns the state for [QuicksightFolder]. Panics if the state is nil.
func (qf *QuicksightFolder) StateMust() *quicksightFolderState {
	if qf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", qf.Type(), qf.LocalName()))
	}
	return qf.state
}

// QuicksightFolderArgs contains the configurations for aws_quicksight_folder.
type QuicksightFolderArgs struct {
	// AwsAccountId: string, optional
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// FolderId: string, required
	FolderId terra.StringValue `hcl:"folder_id,attr" validate:"required"`
	// FolderType: string, optional
	FolderType terra.StringValue `hcl:"folder_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ParentFolderArn: string, optional
	ParentFolderArn terra.StringValue `hcl:"parent_folder_arn,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Permissions: min=0,max=64
	Permissions []quicksightfolder.Permissions `hcl:"permissions,block" validate:"min=0,max=64"`
	// Timeouts: optional
	Timeouts *quicksightfolder.Timeouts `hcl:"timeouts,block"`
}
type quicksightFolderAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_quicksight_folder.
func (qf quicksightFolderAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(qf.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_folder.
func (qf quicksightFolderAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(qf.ref.Append("aws_account_id"))
}

// CreatedTime returns a reference to field created_time of aws_quicksight_folder.
func (qf quicksightFolderAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(qf.ref.Append("created_time"))
}

// FolderId returns a reference to field folder_id of aws_quicksight_folder.
func (qf quicksightFolderAttributes) FolderId() terra.StringValue {
	return terra.ReferenceAsString(qf.ref.Append("folder_id"))
}

// FolderPath returns a reference to field folder_path of aws_quicksight_folder.
func (qf quicksightFolderAttributes) FolderPath() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](qf.ref.Append("folder_path"))
}

// FolderType returns a reference to field folder_type of aws_quicksight_folder.
func (qf quicksightFolderAttributes) FolderType() terra.StringValue {
	return terra.ReferenceAsString(qf.ref.Append("folder_type"))
}

// Id returns a reference to field id of aws_quicksight_folder.
func (qf quicksightFolderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(qf.ref.Append("id"))
}

// LastUpdatedTime returns a reference to field last_updated_time of aws_quicksight_folder.
func (qf quicksightFolderAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceAsString(qf.ref.Append("last_updated_time"))
}

// Name returns a reference to field name of aws_quicksight_folder.
func (qf quicksightFolderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qf.ref.Append("name"))
}

// ParentFolderArn returns a reference to field parent_folder_arn of aws_quicksight_folder.
func (qf quicksightFolderAttributes) ParentFolderArn() terra.StringValue {
	return terra.ReferenceAsString(qf.ref.Append("parent_folder_arn"))
}

// Tags returns a reference to field tags of aws_quicksight_folder.
func (qf quicksightFolderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](qf.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_quicksight_folder.
func (qf quicksightFolderAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](qf.ref.Append("tags_all"))
}

func (qf quicksightFolderAttributes) Permissions() terra.ListValue[quicksightfolder.PermissionsAttributes] {
	return terra.ReferenceAsList[quicksightfolder.PermissionsAttributes](qf.ref.Append("permissions"))
}

func (qf quicksightFolderAttributes) Timeouts() quicksightfolder.TimeoutsAttributes {
	return terra.ReferenceAsSingle[quicksightfolder.TimeoutsAttributes](qf.ref.Append("timeouts"))
}

type quicksightFolderState struct {
	Arn             string                              `json:"arn"`
	AwsAccountId    string                              `json:"aws_account_id"`
	CreatedTime     string                              `json:"created_time"`
	FolderId        string                              `json:"folder_id"`
	FolderPath      []string                            `json:"folder_path"`
	FolderType      string                              `json:"folder_type"`
	Id              string                              `json:"id"`
	LastUpdatedTime string                              `json:"last_updated_time"`
	Name            string                              `json:"name"`
	ParentFolderArn string                              `json:"parent_folder_arn"`
	Tags            map[string]string                   `json:"tags"`
	TagsAll         map[string]string                   `json:"tags_all"`
	Permissions     []quicksightfolder.PermissionsState `json:"permissions"`
	Timeouts        *quicksightfolder.TimeoutsState     `json:"timeouts"`
}
