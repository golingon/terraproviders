// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package gluecatalogdatabase

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CreateTableDefaultPermission struct {
	// Permissions: set of string, optional
	Permissions terra.SetValue[terra.StringValue] `hcl:"permissions,attr"`
	// Principal: optional
	Principal *Principal `hcl:"principal,block"`
}

type Principal struct {
	// DataLakePrincipalIdentifier: string, optional
	DataLakePrincipalIdentifier terra.StringValue `hcl:"data_lake_principal_identifier,attr"`
}

type TargetDatabase struct {
	// CatalogId: string, required
	CatalogId terra.StringValue `hcl:"catalog_id,attr" validate:"required"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
}

type CreateTableDefaultPermissionAttributes struct {
	ref terra.Reference
}

func (ctdp CreateTableDefaultPermissionAttributes) InternalRef() (terra.Reference, error) {
	return ctdp.ref, nil
}

func (ctdp CreateTableDefaultPermissionAttributes) InternalWithRef(ref terra.Reference) CreateTableDefaultPermissionAttributes {
	return CreateTableDefaultPermissionAttributes{ref: ref}
}

func (ctdp CreateTableDefaultPermissionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ctdp.ref.InternalTokens()
}

func (ctdp CreateTableDefaultPermissionAttributes) Permissions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ctdp.ref.Append("permissions"))
}

func (ctdp CreateTableDefaultPermissionAttributes) Principal() terra.ListValue[PrincipalAttributes] {
	return terra.ReferenceAsList[PrincipalAttributes](ctdp.ref.Append("principal"))
}

type PrincipalAttributes struct {
	ref terra.Reference
}

func (p PrincipalAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p PrincipalAttributes) InternalWithRef(ref terra.Reference) PrincipalAttributes {
	return PrincipalAttributes{ref: ref}
}

func (p PrincipalAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p PrincipalAttributes) DataLakePrincipalIdentifier() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("data_lake_principal_identifier"))
}

type TargetDatabaseAttributes struct {
	ref terra.Reference
}

func (td TargetDatabaseAttributes) InternalRef() (terra.Reference, error) {
	return td.ref, nil
}

func (td TargetDatabaseAttributes) InternalWithRef(ref terra.Reference) TargetDatabaseAttributes {
	return TargetDatabaseAttributes{ref: ref}
}

func (td TargetDatabaseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return td.ref.InternalTokens()
}

func (td TargetDatabaseAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(td.ref.Append("catalog_id"))
}

func (td TargetDatabaseAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(td.ref.Append("database_name"))
}

func (td TargetDatabaseAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(td.ref.Append("region"))
}

type CreateTableDefaultPermissionState struct {
	Permissions []string         `json:"permissions"`
	Principal   []PrincipalState `json:"principal"`
}

type PrincipalState struct {
	DataLakePrincipalIdentifier string `json:"data_lake_principal_identifier"`
}

type TargetDatabaseState struct {
	CatalogId    string `json:"catalog_id"`
	DatabaseName string `json:"database_name"`
	Region       string `json:"region"`
}
