// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dynamodbcontributorinsights "github.com/golingon/terraproviders/aws/5.10.0/dynamodbcontributorinsights"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDynamodbContributorInsights creates a new instance of [DynamodbContributorInsights].
func NewDynamodbContributorInsights(name string, args DynamodbContributorInsightsArgs) *DynamodbContributorInsights {
	return &DynamodbContributorInsights{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DynamodbContributorInsights)(nil)

// DynamodbContributorInsights represents the Terraform resource aws_dynamodb_contributor_insights.
type DynamodbContributorInsights struct {
	Name      string
	Args      DynamodbContributorInsightsArgs
	state     *dynamodbContributorInsightsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DynamodbContributorInsights].
func (dci *DynamodbContributorInsights) Type() string {
	return "aws_dynamodb_contributor_insights"
}

// LocalName returns the local name for [DynamodbContributorInsights].
func (dci *DynamodbContributorInsights) LocalName() string {
	return dci.Name
}

// Configuration returns the configuration (args) for [DynamodbContributorInsights].
func (dci *DynamodbContributorInsights) Configuration() interface{} {
	return dci.Args
}

// DependOn is used for other resources to depend on [DynamodbContributorInsights].
func (dci *DynamodbContributorInsights) DependOn() terra.Reference {
	return terra.ReferenceResource(dci)
}

// Dependencies returns the list of resources [DynamodbContributorInsights] depends_on.
func (dci *DynamodbContributorInsights) Dependencies() terra.Dependencies {
	return dci.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DynamodbContributorInsights].
func (dci *DynamodbContributorInsights) LifecycleManagement() *terra.Lifecycle {
	return dci.Lifecycle
}

// Attributes returns the attributes for [DynamodbContributorInsights].
func (dci *DynamodbContributorInsights) Attributes() dynamodbContributorInsightsAttributes {
	return dynamodbContributorInsightsAttributes{ref: terra.ReferenceResource(dci)}
}

// ImportState imports the given attribute values into [DynamodbContributorInsights]'s state.
func (dci *DynamodbContributorInsights) ImportState(av io.Reader) error {
	dci.state = &dynamodbContributorInsightsState{}
	if err := json.NewDecoder(av).Decode(dci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dci.Type(), dci.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DynamodbContributorInsights] has state.
func (dci *DynamodbContributorInsights) State() (*dynamodbContributorInsightsState, bool) {
	return dci.state, dci.state != nil
}

// StateMust returns the state for [DynamodbContributorInsights]. Panics if the state is nil.
func (dci *DynamodbContributorInsights) StateMust() *dynamodbContributorInsightsState {
	if dci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dci.Type(), dci.LocalName()))
	}
	return dci.state
}

// DynamodbContributorInsightsArgs contains the configurations for aws_dynamodb_contributor_insights.
type DynamodbContributorInsightsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IndexName: string, optional
	IndexName terra.StringValue `hcl:"index_name,attr"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *dynamodbcontributorinsights.Timeouts `hcl:"timeouts,block"`
}
type dynamodbContributorInsightsAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_dynamodb_contributor_insights.
func (dci dynamodbContributorInsightsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dci.ref.Append("id"))
}

// IndexName returns a reference to field index_name of aws_dynamodb_contributor_insights.
func (dci dynamodbContributorInsightsAttributes) IndexName() terra.StringValue {
	return terra.ReferenceAsString(dci.ref.Append("index_name"))
}

// TableName returns a reference to field table_name of aws_dynamodb_contributor_insights.
func (dci dynamodbContributorInsightsAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(dci.ref.Append("table_name"))
}

func (dci dynamodbContributorInsightsAttributes) Timeouts() dynamodbcontributorinsights.TimeoutsAttributes {
	return terra.ReferenceAsSingle[dynamodbcontributorinsights.TimeoutsAttributes](dci.ref.Append("timeouts"))
}

type dynamodbContributorInsightsState struct {
	Id        string                                     `json:"id"`
	IndexName string                                     `json:"index_name"`
	TableName string                                     `json:"table_name"`
	Timeouts  *dynamodbcontributorinsights.TimeoutsState `json:"timeouts"`
}
