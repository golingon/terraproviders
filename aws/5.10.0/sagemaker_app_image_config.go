// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	sagemakerappimageconfig "github.com/golingon/terraproviders/aws/5.10.0/sagemakerappimageconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewSagemakerAppImageConfig creates a new instance of [SagemakerAppImageConfig].
func NewSagemakerAppImageConfig(name string, args SagemakerAppImageConfigArgs) *SagemakerAppImageConfig {
	return &SagemakerAppImageConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SagemakerAppImageConfig)(nil)

// SagemakerAppImageConfig represents the Terraform resource aws_sagemaker_app_image_config.
type SagemakerAppImageConfig struct {
	Name      string
	Args      SagemakerAppImageConfigArgs
	state     *sagemakerAppImageConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SagemakerAppImageConfig].
func (saic *SagemakerAppImageConfig) Type() string {
	return "aws_sagemaker_app_image_config"
}

// LocalName returns the local name for [SagemakerAppImageConfig].
func (saic *SagemakerAppImageConfig) LocalName() string {
	return saic.Name
}

// Configuration returns the configuration (args) for [SagemakerAppImageConfig].
func (saic *SagemakerAppImageConfig) Configuration() interface{} {
	return saic.Args
}

// DependOn is used for other resources to depend on [SagemakerAppImageConfig].
func (saic *SagemakerAppImageConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(saic)
}

// Dependencies returns the list of resources [SagemakerAppImageConfig] depends_on.
func (saic *SagemakerAppImageConfig) Dependencies() terra.Dependencies {
	return saic.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SagemakerAppImageConfig].
func (saic *SagemakerAppImageConfig) LifecycleManagement() *terra.Lifecycle {
	return saic.Lifecycle
}

// Attributes returns the attributes for [SagemakerAppImageConfig].
func (saic *SagemakerAppImageConfig) Attributes() sagemakerAppImageConfigAttributes {
	return sagemakerAppImageConfigAttributes{ref: terra.ReferenceResource(saic)}
}

// ImportState imports the given attribute values into [SagemakerAppImageConfig]'s state.
func (saic *SagemakerAppImageConfig) ImportState(av io.Reader) error {
	saic.state = &sagemakerAppImageConfigState{}
	if err := json.NewDecoder(av).Decode(saic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", saic.Type(), saic.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SagemakerAppImageConfig] has state.
func (saic *SagemakerAppImageConfig) State() (*sagemakerAppImageConfigState, bool) {
	return saic.state, saic.state != nil
}

// StateMust returns the state for [SagemakerAppImageConfig]. Panics if the state is nil.
func (saic *SagemakerAppImageConfig) StateMust() *sagemakerAppImageConfigState {
	if saic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", saic.Type(), saic.LocalName()))
	}
	return saic.state
}

// SagemakerAppImageConfigArgs contains the configurations for aws_sagemaker_app_image_config.
type SagemakerAppImageConfigArgs struct {
	// AppImageConfigName: string, required
	AppImageConfigName terra.StringValue `hcl:"app_image_config_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// KernelGatewayImageConfig: optional
	KernelGatewayImageConfig *sagemakerappimageconfig.KernelGatewayImageConfig `hcl:"kernel_gateway_image_config,block"`
}
type sagemakerAppImageConfigAttributes struct {
	ref terra.Reference
}

// AppImageConfigName returns a reference to field app_image_config_name of aws_sagemaker_app_image_config.
func (saic sagemakerAppImageConfigAttributes) AppImageConfigName() terra.StringValue {
	return terra.ReferenceAsString(saic.ref.Append("app_image_config_name"))
}

// Arn returns a reference to field arn of aws_sagemaker_app_image_config.
func (saic sagemakerAppImageConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(saic.ref.Append("arn"))
}

// Id returns a reference to field id of aws_sagemaker_app_image_config.
func (saic sagemakerAppImageConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(saic.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_sagemaker_app_image_config.
func (saic sagemakerAppImageConfigAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](saic.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_app_image_config.
func (saic sagemakerAppImageConfigAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](saic.ref.Append("tags_all"))
}

func (saic sagemakerAppImageConfigAttributes) KernelGatewayImageConfig() terra.ListValue[sagemakerappimageconfig.KernelGatewayImageConfigAttributes] {
	return terra.ReferenceAsList[sagemakerappimageconfig.KernelGatewayImageConfigAttributes](saic.ref.Append("kernel_gateway_image_config"))
}

type sagemakerAppImageConfigState struct {
	AppImageConfigName       string                                                  `json:"app_image_config_name"`
	Arn                      string                                                  `json:"arn"`
	Id                       string                                                  `json:"id"`
	Tags                     map[string]string                                       `json:"tags"`
	TagsAll                  map[string]string                                       `json:"tags_all"`
	KernelGatewayImageConfig []sagemakerappimageconfig.KernelGatewayImageConfigState `json:"kernel_gateway_image_config"`
}
