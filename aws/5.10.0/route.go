// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	route "github.com/golingon/terraproviders/aws/5.10.0/route"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewRoute creates a new instance of [Route].
func NewRoute(name string, args RouteArgs) *Route {
	return &Route{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route)(nil)

// Route represents the Terraform resource aws_route.
type Route struct {
	Name      string
	Args      RouteArgs
	state     *routeState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Route].
func (r *Route) Type() string {
	return "aws_route"
}

// LocalName returns the local name for [Route].
func (r *Route) LocalName() string {
	return r.Name
}

// Configuration returns the configuration (args) for [Route].
func (r *Route) Configuration() interface{} {
	return r.Args
}

// DependOn is used for other resources to depend on [Route].
func (r *Route) DependOn() terra.Reference {
	return terra.ReferenceResource(r)
}

// Dependencies returns the list of resources [Route] depends_on.
func (r *Route) Dependencies() terra.Dependencies {
	return r.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Route].
func (r *Route) LifecycleManagement() *terra.Lifecycle {
	return r.Lifecycle
}

// Attributes returns the attributes for [Route].
func (r *Route) Attributes() routeAttributes {
	return routeAttributes{ref: terra.ReferenceResource(r)}
}

// ImportState imports the given attribute values into [Route]'s state.
func (r *Route) ImportState(av io.Reader) error {
	r.state = &routeState{}
	if err := json.NewDecoder(av).Decode(r.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", r.Type(), r.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Route] has state.
func (r *Route) State() (*routeState, bool) {
	return r.state, r.state != nil
}

// StateMust returns the state for [Route]. Panics if the state is nil.
func (r *Route) StateMust() *routeState {
	if r.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", r.Type(), r.LocalName()))
	}
	return r.state
}

// RouteArgs contains the configurations for aws_route.
type RouteArgs struct {
	// CarrierGatewayId: string, optional
	CarrierGatewayId terra.StringValue `hcl:"carrier_gateway_id,attr"`
	// CoreNetworkArn: string, optional
	CoreNetworkArn terra.StringValue `hcl:"core_network_arn,attr"`
	// DestinationCidrBlock: string, optional
	DestinationCidrBlock terra.StringValue `hcl:"destination_cidr_block,attr"`
	// DestinationIpv6CidrBlock: string, optional
	DestinationIpv6CidrBlock terra.StringValue `hcl:"destination_ipv6_cidr_block,attr"`
	// DestinationPrefixListId: string, optional
	DestinationPrefixListId terra.StringValue `hcl:"destination_prefix_list_id,attr"`
	// EgressOnlyGatewayId: string, optional
	EgressOnlyGatewayId terra.StringValue `hcl:"egress_only_gateway_id,attr"`
	// GatewayId: string, optional
	GatewayId terra.StringValue `hcl:"gateway_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LocalGatewayId: string, optional
	LocalGatewayId terra.StringValue `hcl:"local_gateway_id,attr"`
	// NatGatewayId: string, optional
	NatGatewayId terra.StringValue `hcl:"nat_gateway_id,attr"`
	// NetworkInterfaceId: string, optional
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr"`
	// RouteTableId: string, required
	RouteTableId terra.StringValue `hcl:"route_table_id,attr" validate:"required"`
	// TransitGatewayId: string, optional
	TransitGatewayId terra.StringValue `hcl:"transit_gateway_id,attr"`
	// VpcEndpointId: string, optional
	VpcEndpointId terra.StringValue `hcl:"vpc_endpoint_id,attr"`
	// VpcPeeringConnectionId: string, optional
	VpcPeeringConnectionId terra.StringValue `hcl:"vpc_peering_connection_id,attr"`
	// Timeouts: optional
	Timeouts *route.Timeouts `hcl:"timeouts,block"`
}
type routeAttributes struct {
	ref terra.Reference
}

// CarrierGatewayId returns a reference to field carrier_gateway_id of aws_route.
func (r routeAttributes) CarrierGatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("carrier_gateway_id"))
}

// CoreNetworkArn returns a reference to field core_network_arn of aws_route.
func (r routeAttributes) CoreNetworkArn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("core_network_arn"))
}

// DestinationCidrBlock returns a reference to field destination_cidr_block of aws_route.
func (r routeAttributes) DestinationCidrBlock() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("destination_cidr_block"))
}

// DestinationIpv6CidrBlock returns a reference to field destination_ipv6_cidr_block of aws_route.
func (r routeAttributes) DestinationIpv6CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("destination_ipv6_cidr_block"))
}

// DestinationPrefixListId returns a reference to field destination_prefix_list_id of aws_route.
func (r routeAttributes) DestinationPrefixListId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("destination_prefix_list_id"))
}

// EgressOnlyGatewayId returns a reference to field egress_only_gateway_id of aws_route.
func (r routeAttributes) EgressOnlyGatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("egress_only_gateway_id"))
}

// GatewayId returns a reference to field gateway_id of aws_route.
func (r routeAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("gateway_id"))
}

// Id returns a reference to field id of aws_route.
func (r routeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_route.
func (r routeAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("instance_id"))
}

// InstanceOwnerId returns a reference to field instance_owner_id of aws_route.
func (r routeAttributes) InstanceOwnerId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("instance_owner_id"))
}

// LocalGatewayId returns a reference to field local_gateway_id of aws_route.
func (r routeAttributes) LocalGatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("local_gateway_id"))
}

// NatGatewayId returns a reference to field nat_gateway_id of aws_route.
func (r routeAttributes) NatGatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("nat_gateway_id"))
}

// NetworkInterfaceId returns a reference to field network_interface_id of aws_route.
func (r routeAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("network_interface_id"))
}

// Origin returns a reference to field origin of aws_route.
func (r routeAttributes) Origin() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("origin"))
}

// RouteTableId returns a reference to field route_table_id of aws_route.
func (r routeAttributes) RouteTableId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("route_table_id"))
}

// State returns a reference to field state of aws_route.
func (r routeAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("state"))
}

// TransitGatewayId returns a reference to field transit_gateway_id of aws_route.
func (r routeAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("transit_gateway_id"))
}

// VpcEndpointId returns a reference to field vpc_endpoint_id of aws_route.
func (r routeAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("vpc_endpoint_id"))
}

// VpcPeeringConnectionId returns a reference to field vpc_peering_connection_id of aws_route.
func (r routeAttributes) VpcPeeringConnectionId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("vpc_peering_connection_id"))
}

func (r routeAttributes) Timeouts() route.TimeoutsAttributes {
	return terra.ReferenceAsSingle[route.TimeoutsAttributes](r.ref.Append("timeouts"))
}

type routeState struct {
	CarrierGatewayId         string               `json:"carrier_gateway_id"`
	CoreNetworkArn           string               `json:"core_network_arn"`
	DestinationCidrBlock     string               `json:"destination_cidr_block"`
	DestinationIpv6CidrBlock string               `json:"destination_ipv6_cidr_block"`
	DestinationPrefixListId  string               `json:"destination_prefix_list_id"`
	EgressOnlyGatewayId      string               `json:"egress_only_gateway_id"`
	GatewayId                string               `json:"gateway_id"`
	Id                       string               `json:"id"`
	InstanceId               string               `json:"instance_id"`
	InstanceOwnerId          string               `json:"instance_owner_id"`
	LocalGatewayId           string               `json:"local_gateway_id"`
	NatGatewayId             string               `json:"nat_gateway_id"`
	NetworkInterfaceId       string               `json:"network_interface_id"`
	Origin                   string               `json:"origin"`
	RouteTableId             string               `json:"route_table_id"`
	State                    string               `json:"state"`
	TransitGatewayId         string               `json:"transit_gateway_id"`
	VpcEndpointId            string               `json:"vpc_endpoint_id"`
	VpcPeeringConnectionId   string               `json:"vpc_peering_connection_id"`
	Timeouts                 *route.TimeoutsState `json:"timeouts"`
}
