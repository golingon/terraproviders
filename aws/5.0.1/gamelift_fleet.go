// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	gameliftfleet "github.com/golingon/terraproviders/aws/5.0.1/gameliftfleet"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGameliftFleet creates a new instance of [GameliftFleet].
func NewGameliftFleet(name string, args GameliftFleetArgs) *GameliftFleet {
	return &GameliftFleet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GameliftFleet)(nil)

// GameliftFleet represents the Terraform resource aws_gamelift_fleet.
type GameliftFleet struct {
	Name      string
	Args      GameliftFleetArgs
	state     *gameliftFleetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GameliftFleet].
func (gf *GameliftFleet) Type() string {
	return "aws_gamelift_fleet"
}

// LocalName returns the local name for [GameliftFleet].
func (gf *GameliftFleet) LocalName() string {
	return gf.Name
}

// Configuration returns the configuration (args) for [GameliftFleet].
func (gf *GameliftFleet) Configuration() interface{} {
	return gf.Args
}

// DependOn is used for other resources to depend on [GameliftFleet].
func (gf *GameliftFleet) DependOn() terra.Reference {
	return terra.ReferenceResource(gf)
}

// Dependencies returns the list of resources [GameliftFleet] depends_on.
func (gf *GameliftFleet) Dependencies() terra.Dependencies {
	return gf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GameliftFleet].
func (gf *GameliftFleet) LifecycleManagement() *terra.Lifecycle {
	return gf.Lifecycle
}

// Attributes returns the attributes for [GameliftFleet].
func (gf *GameliftFleet) Attributes() gameliftFleetAttributes {
	return gameliftFleetAttributes{ref: terra.ReferenceResource(gf)}
}

// ImportState imports the given attribute values into [GameliftFleet]'s state.
func (gf *GameliftFleet) ImportState(av io.Reader) error {
	gf.state = &gameliftFleetState{}
	if err := json.NewDecoder(av).Decode(gf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gf.Type(), gf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GameliftFleet] has state.
func (gf *GameliftFleet) State() (*gameliftFleetState, bool) {
	return gf.state, gf.state != nil
}

// StateMust returns the state for [GameliftFleet]. Panics if the state is nil.
func (gf *GameliftFleet) StateMust() *gameliftFleetState {
	if gf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gf.Type(), gf.LocalName()))
	}
	return gf.state
}

// GameliftFleetArgs contains the configurations for aws_gamelift_fleet.
type GameliftFleetArgs struct {
	// BuildId: string, optional
	BuildId terra.StringValue `hcl:"build_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Ec2InstanceType: string, required
	Ec2InstanceType terra.StringValue `hcl:"ec2_instance_type,attr" validate:"required"`
	// FleetType: string, optional
	FleetType terra.StringValue `hcl:"fleet_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceRoleArn: string, optional
	InstanceRoleArn terra.StringValue `hcl:"instance_role_arn,attr"`
	// MetricGroups: list of string, optional
	MetricGroups terra.ListValue[terra.StringValue] `hcl:"metric_groups,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NewGameSessionProtectionPolicy: string, optional
	NewGameSessionProtectionPolicy terra.StringValue `hcl:"new_game_session_protection_policy,attr"`
	// ScriptId: string, optional
	ScriptId terra.StringValue `hcl:"script_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CertificateConfiguration: optional
	CertificateConfiguration *gameliftfleet.CertificateConfiguration `hcl:"certificate_configuration,block"`
	// Ec2InboundPermission: min=0,max=50
	Ec2InboundPermission []gameliftfleet.Ec2InboundPermission `hcl:"ec2_inbound_permission,block" validate:"min=0,max=50"`
	// ResourceCreationLimitPolicy: optional
	ResourceCreationLimitPolicy *gameliftfleet.ResourceCreationLimitPolicy `hcl:"resource_creation_limit_policy,block"`
	// RuntimeConfiguration: optional
	RuntimeConfiguration *gameliftfleet.RuntimeConfiguration `hcl:"runtime_configuration,block"`
	// Timeouts: optional
	Timeouts *gameliftfleet.Timeouts `hcl:"timeouts,block"`
}
type gameliftFleetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("arn"))
}

// BuildArn returns a reference to field build_arn of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) BuildArn() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("build_arn"))
}

// BuildId returns a reference to field build_id of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) BuildId() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("build_id"))
}

// Description returns a reference to field description of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("description"))
}

// Ec2InstanceType returns a reference to field ec2_instance_type of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) Ec2InstanceType() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("ec2_instance_type"))
}

// FleetType returns a reference to field fleet_type of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) FleetType() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("fleet_type"))
}

// Id returns a reference to field id of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("id"))
}

// InstanceRoleArn returns a reference to field instance_role_arn of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) InstanceRoleArn() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("instance_role_arn"))
}

// LogPaths returns a reference to field log_paths of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) LogPaths() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gf.ref.Append("log_paths"))
}

// MetricGroups returns a reference to field metric_groups of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) MetricGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gf.ref.Append("metric_groups"))
}

// Name returns a reference to field name of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("name"))
}

// NewGameSessionProtectionPolicy returns a reference to field new_game_session_protection_policy of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) NewGameSessionProtectionPolicy() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("new_game_session_protection_policy"))
}

// OperatingSystem returns a reference to field operating_system of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) OperatingSystem() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("operating_system"))
}

// ScriptArn returns a reference to field script_arn of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) ScriptArn() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("script_arn"))
}

// ScriptId returns a reference to field script_id of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) ScriptId() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("script_id"))
}

// Tags returns a reference to field tags of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gf.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_gamelift_fleet.
func (gf gameliftFleetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gf.ref.Append("tags_all"))
}

func (gf gameliftFleetAttributes) CertificateConfiguration() terra.ListValue[gameliftfleet.CertificateConfigurationAttributes] {
	return terra.ReferenceAsList[gameliftfleet.CertificateConfigurationAttributes](gf.ref.Append("certificate_configuration"))
}

func (gf gameliftFleetAttributes) Ec2InboundPermission() terra.SetValue[gameliftfleet.Ec2InboundPermissionAttributes] {
	return terra.ReferenceAsSet[gameliftfleet.Ec2InboundPermissionAttributes](gf.ref.Append("ec2_inbound_permission"))
}

func (gf gameliftFleetAttributes) ResourceCreationLimitPolicy() terra.ListValue[gameliftfleet.ResourceCreationLimitPolicyAttributes] {
	return terra.ReferenceAsList[gameliftfleet.ResourceCreationLimitPolicyAttributes](gf.ref.Append("resource_creation_limit_policy"))
}

func (gf gameliftFleetAttributes) RuntimeConfiguration() terra.ListValue[gameliftfleet.RuntimeConfigurationAttributes] {
	return terra.ReferenceAsList[gameliftfleet.RuntimeConfigurationAttributes](gf.ref.Append("runtime_configuration"))
}

func (gf gameliftFleetAttributes) Timeouts() gameliftfleet.TimeoutsAttributes {
	return terra.ReferenceAsSingle[gameliftfleet.TimeoutsAttributes](gf.ref.Append("timeouts"))
}

type gameliftFleetState struct {
	Arn                            string                                           `json:"arn"`
	BuildArn                       string                                           `json:"build_arn"`
	BuildId                        string                                           `json:"build_id"`
	Description                    string                                           `json:"description"`
	Ec2InstanceType                string                                           `json:"ec2_instance_type"`
	FleetType                      string                                           `json:"fleet_type"`
	Id                             string                                           `json:"id"`
	InstanceRoleArn                string                                           `json:"instance_role_arn"`
	LogPaths                       []string                                         `json:"log_paths"`
	MetricGroups                   []string                                         `json:"metric_groups"`
	Name                           string                                           `json:"name"`
	NewGameSessionProtectionPolicy string                                           `json:"new_game_session_protection_policy"`
	OperatingSystem                string                                           `json:"operating_system"`
	ScriptArn                      string                                           `json:"script_arn"`
	ScriptId                       string                                           `json:"script_id"`
	Tags                           map[string]string                                `json:"tags"`
	TagsAll                        map[string]string                                `json:"tags_all"`
	CertificateConfiguration       []gameliftfleet.CertificateConfigurationState    `json:"certificate_configuration"`
	Ec2InboundPermission           []gameliftfleet.Ec2InboundPermissionState        `json:"ec2_inbound_permission"`
	ResourceCreationLimitPolicy    []gameliftfleet.ResourceCreationLimitPolicyState `json:"resource_creation_limit_policy"`
	RuntimeConfiguration           []gameliftfleet.RuntimeConfigurationState        `json:"runtime_configuration"`
	Timeouts                       *gameliftfleet.TimeoutsState                     `json:"timeouts"`
}
