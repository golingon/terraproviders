// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	controltowercontrol "github.com/golingon/terraproviders/aws/5.0.1/controltowercontrol"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewControltowerControl creates a new instance of [ControltowerControl].
func NewControltowerControl(name string, args ControltowerControlArgs) *ControltowerControl {
	return &ControltowerControl{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ControltowerControl)(nil)

// ControltowerControl represents the Terraform resource aws_controltower_control.
type ControltowerControl struct {
	Name      string
	Args      ControltowerControlArgs
	state     *controltowerControlState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ControltowerControl].
func (cc *ControltowerControl) Type() string {
	return "aws_controltower_control"
}

// LocalName returns the local name for [ControltowerControl].
func (cc *ControltowerControl) LocalName() string {
	return cc.Name
}

// Configuration returns the configuration (args) for [ControltowerControl].
func (cc *ControltowerControl) Configuration() interface{} {
	return cc.Args
}

// DependOn is used for other resources to depend on [ControltowerControl].
func (cc *ControltowerControl) DependOn() terra.Reference {
	return terra.ReferenceResource(cc)
}

// Dependencies returns the list of resources [ControltowerControl] depends_on.
func (cc *ControltowerControl) Dependencies() terra.Dependencies {
	return cc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ControltowerControl].
func (cc *ControltowerControl) LifecycleManagement() *terra.Lifecycle {
	return cc.Lifecycle
}

// Attributes returns the attributes for [ControltowerControl].
func (cc *ControltowerControl) Attributes() controltowerControlAttributes {
	return controltowerControlAttributes{ref: terra.ReferenceResource(cc)}
}

// ImportState imports the given attribute values into [ControltowerControl]'s state.
func (cc *ControltowerControl) ImportState(av io.Reader) error {
	cc.state = &controltowerControlState{}
	if err := json.NewDecoder(av).Decode(cc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cc.Type(), cc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ControltowerControl] has state.
func (cc *ControltowerControl) State() (*controltowerControlState, bool) {
	return cc.state, cc.state != nil
}

// StateMust returns the state for [ControltowerControl]. Panics if the state is nil.
func (cc *ControltowerControl) StateMust() *controltowerControlState {
	if cc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cc.Type(), cc.LocalName()))
	}
	return cc.state
}

// ControltowerControlArgs contains the configurations for aws_controltower_control.
type ControltowerControlArgs struct {
	// ControlIdentifier: string, required
	ControlIdentifier terra.StringValue `hcl:"control_identifier,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TargetIdentifier: string, required
	TargetIdentifier terra.StringValue `hcl:"target_identifier,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *controltowercontrol.Timeouts `hcl:"timeouts,block"`
}
type controltowerControlAttributes struct {
	ref terra.Reference
}

// ControlIdentifier returns a reference to field control_identifier of aws_controltower_control.
func (cc controltowerControlAttributes) ControlIdentifier() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("control_identifier"))
}

// Id returns a reference to field id of aws_controltower_control.
func (cc controltowerControlAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("id"))
}

// TargetIdentifier returns a reference to field target_identifier of aws_controltower_control.
func (cc controltowerControlAttributes) TargetIdentifier() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("target_identifier"))
}

func (cc controltowerControlAttributes) Timeouts() controltowercontrol.TimeoutsAttributes {
	return terra.ReferenceAsSingle[controltowercontrol.TimeoutsAttributes](cc.ref.Append("timeouts"))
}

type controltowerControlState struct {
	ControlIdentifier string                             `json:"control_identifier"`
	Id                string                             `json:"id"`
	TargetIdentifier  string                             `json:"target_identifier"`
	Timeouts          *controltowercontrol.TimeoutsState `json:"timeouts"`
}
