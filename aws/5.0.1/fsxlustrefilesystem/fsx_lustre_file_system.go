// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package fsxlustrefilesystem

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type LogConfiguration struct {
	// Destination: string, optional
	Destination terra.StringValue `hcl:"destination,attr"`
	// Level: string, optional
	Level terra.StringValue `hcl:"level,attr"`
}

type RootSquashConfiguration struct {
	// NoSquashNids: set of string, optional
	NoSquashNids terra.SetValue[terra.StringValue] `hcl:"no_squash_nids,attr"`
	// RootSquash: string, optional
	RootSquash terra.StringValue `hcl:"root_squash,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LogConfigurationAttributes struct {
	ref terra.Reference
}

func (lc LogConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LogConfigurationAttributes) InternalWithRef(ref terra.Reference) LogConfigurationAttributes {
	return LogConfigurationAttributes{ref: ref}
}

func (lc LogConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LogConfigurationAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("destination"))
}

func (lc LogConfigurationAttributes) Level() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("level"))
}

type RootSquashConfigurationAttributes struct {
	ref terra.Reference
}

func (rsc RootSquashConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rsc.ref, nil
}

func (rsc RootSquashConfigurationAttributes) InternalWithRef(ref terra.Reference) RootSquashConfigurationAttributes {
	return RootSquashConfigurationAttributes{ref: ref}
}

func (rsc RootSquashConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rsc.ref.InternalTokens()
}

func (rsc RootSquashConfigurationAttributes) NoSquashNids() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rsc.ref.Append("no_squash_nids"))
}

func (rsc RootSquashConfigurationAttributes) RootSquash() terra.StringValue {
	return terra.ReferenceAsString(rsc.ref.Append("root_squash"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type LogConfigurationState struct {
	Destination string `json:"destination"`
	Level       string `json:"level"`
}

type RootSquashConfigurationState struct {
	NoSquashNids []string `json:"no_squash_nids"`
	RootSquash   string   `json:"root_squash"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
