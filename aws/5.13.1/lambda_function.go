// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lambdafunction "github.com/golingon/terraproviders/aws/5.13.1/lambdafunction"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewLambdaFunction creates a new instance of [LambdaFunction].
func NewLambdaFunction(name string, args LambdaFunctionArgs) *LambdaFunction {
	return &LambdaFunction{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LambdaFunction)(nil)

// LambdaFunction represents the Terraform resource aws_lambda_function.
type LambdaFunction struct {
	Name      string
	Args      LambdaFunctionArgs
	state     *lambdaFunctionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LambdaFunction].
func (lf *LambdaFunction) Type() string {
	return "aws_lambda_function"
}

// LocalName returns the local name for [LambdaFunction].
func (lf *LambdaFunction) LocalName() string {
	return lf.Name
}

// Configuration returns the configuration (args) for [LambdaFunction].
func (lf *LambdaFunction) Configuration() interface{} {
	return lf.Args
}

// DependOn is used for other resources to depend on [LambdaFunction].
func (lf *LambdaFunction) DependOn() terra.Reference {
	return terra.ReferenceResource(lf)
}

// Dependencies returns the list of resources [LambdaFunction] depends_on.
func (lf *LambdaFunction) Dependencies() terra.Dependencies {
	return lf.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LambdaFunction].
func (lf *LambdaFunction) LifecycleManagement() *terra.Lifecycle {
	return lf.Lifecycle
}

// Attributes returns the attributes for [LambdaFunction].
func (lf *LambdaFunction) Attributes() lambdaFunctionAttributes {
	return lambdaFunctionAttributes{ref: terra.ReferenceResource(lf)}
}

// ImportState imports the given attribute values into [LambdaFunction]'s state.
func (lf *LambdaFunction) ImportState(av io.Reader) error {
	lf.state = &lambdaFunctionState{}
	if err := json.NewDecoder(av).Decode(lf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lf.Type(), lf.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LambdaFunction] has state.
func (lf *LambdaFunction) State() (*lambdaFunctionState, bool) {
	return lf.state, lf.state != nil
}

// StateMust returns the state for [LambdaFunction]. Panics if the state is nil.
func (lf *LambdaFunction) StateMust() *lambdaFunctionState {
	if lf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lf.Type(), lf.LocalName()))
	}
	return lf.state
}

// LambdaFunctionArgs contains the configurations for aws_lambda_function.
type LambdaFunctionArgs struct {
	// Architectures: list of string, optional
	Architectures terra.ListValue[terra.StringValue] `hcl:"architectures,attr"`
	// CodeSigningConfigArn: string, optional
	CodeSigningConfigArn terra.StringValue `hcl:"code_signing_config_arn,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Filename: string, optional
	Filename terra.StringValue `hcl:"filename,attr"`
	// FunctionName: string, required
	FunctionName terra.StringValue `hcl:"function_name,attr" validate:"required"`
	// Handler: string, optional
	Handler terra.StringValue `hcl:"handler,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageUri: string, optional
	ImageUri terra.StringValue `hcl:"image_uri,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Layers: list of string, optional
	Layers terra.ListValue[terra.StringValue] `hcl:"layers,attr"`
	// MemorySize: number, optional
	MemorySize terra.NumberValue `hcl:"memory_size,attr"`
	// PackageType: string, optional
	PackageType terra.StringValue `hcl:"package_type,attr"`
	// Publish: bool, optional
	Publish terra.BoolValue `hcl:"publish,attr"`
	// ReplaceSecurityGroupsOnDestroy: bool, optional
	ReplaceSecurityGroupsOnDestroy terra.BoolValue `hcl:"replace_security_groups_on_destroy,attr"`
	// ReplacementSecurityGroupIds: set of string, optional
	ReplacementSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"replacement_security_group_ids,attr"`
	// ReservedConcurrentExecutions: number, optional
	ReservedConcurrentExecutions terra.NumberValue `hcl:"reserved_concurrent_executions,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Runtime: string, optional
	Runtime terra.StringValue `hcl:"runtime,attr"`
	// S3Bucket: string, optional
	S3Bucket terra.StringValue `hcl:"s3_bucket,attr"`
	// S3Key: string, optional
	S3Key terra.StringValue `hcl:"s3_key,attr"`
	// S3ObjectVersion: string, optional
	S3ObjectVersion terra.StringValue `hcl:"s3_object_version,attr"`
	// SkipDestroy: bool, optional
	SkipDestroy terra.BoolValue `hcl:"skip_destroy,attr"`
	// SourceCodeHash: string, optional
	SourceCodeHash terra.StringValue `hcl:"source_code_hash,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeout: number, optional
	Timeout terra.NumberValue `hcl:"timeout,attr"`
	// DeadLetterConfig: optional
	DeadLetterConfig *lambdafunction.DeadLetterConfig `hcl:"dead_letter_config,block"`
	// Environment: optional
	Environment *lambdafunction.Environment `hcl:"environment,block"`
	// EphemeralStorage: optional
	EphemeralStorage *lambdafunction.EphemeralStorage `hcl:"ephemeral_storage,block"`
	// FileSystemConfig: optional
	FileSystemConfig *lambdafunction.FileSystemConfig `hcl:"file_system_config,block"`
	// ImageConfig: optional
	ImageConfig *lambdafunction.ImageConfig `hcl:"image_config,block"`
	// SnapStart: optional
	SnapStart *lambdafunction.SnapStart `hcl:"snap_start,block"`
	// Timeouts: optional
	Timeouts *lambdafunction.Timeouts `hcl:"timeouts,block"`
	// TracingConfig: optional
	TracingConfig *lambdafunction.TracingConfig `hcl:"tracing_config,block"`
	// VpcConfig: optional
	VpcConfig *lambdafunction.VpcConfig `hcl:"vpc_config,block"`
}
type lambdaFunctionAttributes struct {
	ref terra.Reference
}

// Architectures returns a reference to field architectures of aws_lambda_function.
func (lf lambdaFunctionAttributes) Architectures() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lf.ref.Append("architectures"))
}

// Arn returns a reference to field arn of aws_lambda_function.
func (lf lambdaFunctionAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("arn"))
}

// CodeSigningConfigArn returns a reference to field code_signing_config_arn of aws_lambda_function.
func (lf lambdaFunctionAttributes) CodeSigningConfigArn() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("code_signing_config_arn"))
}

// Description returns a reference to field description of aws_lambda_function.
func (lf lambdaFunctionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("description"))
}

// Filename returns a reference to field filename of aws_lambda_function.
func (lf lambdaFunctionAttributes) Filename() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("filename"))
}

// FunctionName returns a reference to field function_name of aws_lambda_function.
func (lf lambdaFunctionAttributes) FunctionName() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("function_name"))
}

// Handler returns a reference to field handler of aws_lambda_function.
func (lf lambdaFunctionAttributes) Handler() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("handler"))
}

// Id returns a reference to field id of aws_lambda_function.
func (lf lambdaFunctionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("id"))
}

// ImageUri returns a reference to field image_uri of aws_lambda_function.
func (lf lambdaFunctionAttributes) ImageUri() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("image_uri"))
}

// InvokeArn returns a reference to field invoke_arn of aws_lambda_function.
func (lf lambdaFunctionAttributes) InvokeArn() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("invoke_arn"))
}

// KmsKeyArn returns a reference to field kms_key_arn of aws_lambda_function.
func (lf lambdaFunctionAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("kms_key_arn"))
}

// LastModified returns a reference to field last_modified of aws_lambda_function.
func (lf lambdaFunctionAttributes) LastModified() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("last_modified"))
}

// Layers returns a reference to field layers of aws_lambda_function.
func (lf lambdaFunctionAttributes) Layers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lf.ref.Append("layers"))
}

// MemorySize returns a reference to field memory_size of aws_lambda_function.
func (lf lambdaFunctionAttributes) MemorySize() terra.NumberValue {
	return terra.ReferenceAsNumber(lf.ref.Append("memory_size"))
}

// PackageType returns a reference to field package_type of aws_lambda_function.
func (lf lambdaFunctionAttributes) PackageType() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("package_type"))
}

// Publish returns a reference to field publish of aws_lambda_function.
func (lf lambdaFunctionAttributes) Publish() terra.BoolValue {
	return terra.ReferenceAsBool(lf.ref.Append("publish"))
}

// QualifiedArn returns a reference to field qualified_arn of aws_lambda_function.
func (lf lambdaFunctionAttributes) QualifiedArn() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("qualified_arn"))
}

// QualifiedInvokeArn returns a reference to field qualified_invoke_arn of aws_lambda_function.
func (lf lambdaFunctionAttributes) QualifiedInvokeArn() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("qualified_invoke_arn"))
}

// ReplaceSecurityGroupsOnDestroy returns a reference to field replace_security_groups_on_destroy of aws_lambda_function.
func (lf lambdaFunctionAttributes) ReplaceSecurityGroupsOnDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(lf.ref.Append("replace_security_groups_on_destroy"))
}

// ReplacementSecurityGroupIds returns a reference to field replacement_security_group_ids of aws_lambda_function.
func (lf lambdaFunctionAttributes) ReplacementSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lf.ref.Append("replacement_security_group_ids"))
}

// ReservedConcurrentExecutions returns a reference to field reserved_concurrent_executions of aws_lambda_function.
func (lf lambdaFunctionAttributes) ReservedConcurrentExecutions() terra.NumberValue {
	return terra.ReferenceAsNumber(lf.ref.Append("reserved_concurrent_executions"))
}

// Role returns a reference to field role of aws_lambda_function.
func (lf lambdaFunctionAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("role"))
}

// Runtime returns a reference to field runtime of aws_lambda_function.
func (lf lambdaFunctionAttributes) Runtime() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("runtime"))
}

// S3Bucket returns a reference to field s3_bucket of aws_lambda_function.
func (lf lambdaFunctionAttributes) S3Bucket() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("s3_bucket"))
}

// S3Key returns a reference to field s3_key of aws_lambda_function.
func (lf lambdaFunctionAttributes) S3Key() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("s3_key"))
}

// S3ObjectVersion returns a reference to field s3_object_version of aws_lambda_function.
func (lf lambdaFunctionAttributes) S3ObjectVersion() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("s3_object_version"))
}

// SigningJobArn returns a reference to field signing_job_arn of aws_lambda_function.
func (lf lambdaFunctionAttributes) SigningJobArn() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("signing_job_arn"))
}

// SigningProfileVersionArn returns a reference to field signing_profile_version_arn of aws_lambda_function.
func (lf lambdaFunctionAttributes) SigningProfileVersionArn() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("signing_profile_version_arn"))
}

// SkipDestroy returns a reference to field skip_destroy of aws_lambda_function.
func (lf lambdaFunctionAttributes) SkipDestroy() terra.BoolValue {
	return terra.ReferenceAsBool(lf.ref.Append("skip_destroy"))
}

// SourceCodeHash returns a reference to field source_code_hash of aws_lambda_function.
func (lf lambdaFunctionAttributes) SourceCodeHash() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("source_code_hash"))
}

// SourceCodeSize returns a reference to field source_code_size of aws_lambda_function.
func (lf lambdaFunctionAttributes) SourceCodeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(lf.ref.Append("source_code_size"))
}

// Tags returns a reference to field tags of aws_lambda_function.
func (lf lambdaFunctionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lf.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_lambda_function.
func (lf lambdaFunctionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lf.ref.Append("tags_all"))
}

// Timeout returns a reference to field timeout of aws_lambda_function.
func (lf lambdaFunctionAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(lf.ref.Append("timeout"))
}

// Version returns a reference to field version of aws_lambda_function.
func (lf lambdaFunctionAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("version"))
}

func (lf lambdaFunctionAttributes) DeadLetterConfig() terra.ListValue[lambdafunction.DeadLetterConfigAttributes] {
	return terra.ReferenceAsList[lambdafunction.DeadLetterConfigAttributes](lf.ref.Append("dead_letter_config"))
}

func (lf lambdaFunctionAttributes) Environment() terra.ListValue[lambdafunction.EnvironmentAttributes] {
	return terra.ReferenceAsList[lambdafunction.EnvironmentAttributes](lf.ref.Append("environment"))
}

func (lf lambdaFunctionAttributes) EphemeralStorage() terra.ListValue[lambdafunction.EphemeralStorageAttributes] {
	return terra.ReferenceAsList[lambdafunction.EphemeralStorageAttributes](lf.ref.Append("ephemeral_storage"))
}

func (lf lambdaFunctionAttributes) FileSystemConfig() terra.ListValue[lambdafunction.FileSystemConfigAttributes] {
	return terra.ReferenceAsList[lambdafunction.FileSystemConfigAttributes](lf.ref.Append("file_system_config"))
}

func (lf lambdaFunctionAttributes) ImageConfig() terra.ListValue[lambdafunction.ImageConfigAttributes] {
	return terra.ReferenceAsList[lambdafunction.ImageConfigAttributes](lf.ref.Append("image_config"))
}

func (lf lambdaFunctionAttributes) SnapStart() terra.ListValue[lambdafunction.SnapStartAttributes] {
	return terra.ReferenceAsList[lambdafunction.SnapStartAttributes](lf.ref.Append("snap_start"))
}

func (lf lambdaFunctionAttributes) Timeouts() lambdafunction.TimeoutsAttributes {
	return terra.ReferenceAsSingle[lambdafunction.TimeoutsAttributes](lf.ref.Append("timeouts"))
}

func (lf lambdaFunctionAttributes) TracingConfig() terra.ListValue[lambdafunction.TracingConfigAttributes] {
	return terra.ReferenceAsList[lambdafunction.TracingConfigAttributes](lf.ref.Append("tracing_config"))
}

func (lf lambdaFunctionAttributes) VpcConfig() terra.ListValue[lambdafunction.VpcConfigAttributes] {
	return terra.ReferenceAsList[lambdafunction.VpcConfigAttributes](lf.ref.Append("vpc_config"))
}

type lambdaFunctionState struct {
	Architectures                  []string                               `json:"architectures"`
	Arn                            string                                 `json:"arn"`
	CodeSigningConfigArn           string                                 `json:"code_signing_config_arn"`
	Description                    string                                 `json:"description"`
	Filename                       string                                 `json:"filename"`
	FunctionName                   string                                 `json:"function_name"`
	Handler                        string                                 `json:"handler"`
	Id                             string                                 `json:"id"`
	ImageUri                       string                                 `json:"image_uri"`
	InvokeArn                      string                                 `json:"invoke_arn"`
	KmsKeyArn                      string                                 `json:"kms_key_arn"`
	LastModified                   string                                 `json:"last_modified"`
	Layers                         []string                               `json:"layers"`
	MemorySize                     float64                                `json:"memory_size"`
	PackageType                    string                                 `json:"package_type"`
	Publish                        bool                                   `json:"publish"`
	QualifiedArn                   string                                 `json:"qualified_arn"`
	QualifiedInvokeArn             string                                 `json:"qualified_invoke_arn"`
	ReplaceSecurityGroupsOnDestroy bool                                   `json:"replace_security_groups_on_destroy"`
	ReplacementSecurityGroupIds    []string                               `json:"replacement_security_group_ids"`
	ReservedConcurrentExecutions   float64                                `json:"reserved_concurrent_executions"`
	Role                           string                                 `json:"role"`
	Runtime                        string                                 `json:"runtime"`
	S3Bucket                       string                                 `json:"s3_bucket"`
	S3Key                          string                                 `json:"s3_key"`
	S3ObjectVersion                string                                 `json:"s3_object_version"`
	SigningJobArn                  string                                 `json:"signing_job_arn"`
	SigningProfileVersionArn       string                                 `json:"signing_profile_version_arn"`
	SkipDestroy                    bool                                   `json:"skip_destroy"`
	SourceCodeHash                 string                                 `json:"source_code_hash"`
	SourceCodeSize                 float64                                `json:"source_code_size"`
	Tags                           map[string]string                      `json:"tags"`
	TagsAll                        map[string]string                      `json:"tags_all"`
	Timeout                        float64                                `json:"timeout"`
	Version                        string                                 `json:"version"`
	DeadLetterConfig               []lambdafunction.DeadLetterConfigState `json:"dead_letter_config"`
	Environment                    []lambdafunction.EnvironmentState      `json:"environment"`
	EphemeralStorage               []lambdafunction.EphemeralStorageState `json:"ephemeral_storage"`
	FileSystemConfig               []lambdafunction.FileSystemConfigState `json:"file_system_config"`
	ImageConfig                    []lambdafunction.ImageConfigState      `json:"image_config"`
	SnapStart                      []lambdafunction.SnapStartState        `json:"snap_start"`
	Timeouts                       *lambdafunction.TimeoutsState          `json:"timeouts"`
	TracingConfig                  []lambdafunction.TracingConfigState    `json:"tracing_config"`
	VpcConfig                      []lambdafunction.VpcConfigState        `json:"vpc_config"`
}
