// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataelb "github.com/golingon/terraproviders/aws/5.13.1/dataelb"
	"github.com/volvo-cars/lingon/pkg/terra"
)

// NewDataElb creates a new instance of [DataElb].
func NewDataElb(name string, args DataElbArgs) *DataElb {
	return &DataElb{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataElb)(nil)

// DataElb represents the Terraform data resource aws_elb.
type DataElb struct {
	Name string
	Args DataElbArgs
}

// DataSource returns the Terraform object type for [DataElb].
func (e *DataElb) DataSource() string {
	return "aws_elb"
}

// LocalName returns the local name for [DataElb].
func (e *DataElb) LocalName() string {
	return e.Name
}

// Configuration returns the configuration (args) for [DataElb].
func (e *DataElb) Configuration() interface{} {
	return e.Args
}

// Attributes returns the attributes for [DataElb].
func (e *DataElb) Attributes() dataElbAttributes {
	return dataElbAttributes{ref: terra.ReferenceDataResource(e)}
}

// DataElbArgs contains the configurations for aws_elb.
type DataElbArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// AccessLogs: min=0
	AccessLogs []dataelb.AccessLogs `hcl:"access_logs,block" validate:"min=0"`
	// HealthCheck: min=0
	HealthCheck []dataelb.HealthCheck `hcl:"health_check,block" validate:"min=0"`
	// Listener: min=0
	Listener []dataelb.Listener `hcl:"listener,block" validate:"min=0"`
}
type dataElbAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_elb.
func (e dataElbAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("arn"))
}

// AvailabilityZones returns a reference to field availability_zones of aws_elb.
func (e dataElbAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("availability_zones"))
}

// ConnectionDraining returns a reference to field connection_draining of aws_elb.
func (e dataElbAttributes) ConnectionDraining() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("connection_draining"))
}

// ConnectionDrainingTimeout returns a reference to field connection_draining_timeout of aws_elb.
func (e dataElbAttributes) ConnectionDrainingTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("connection_draining_timeout"))
}

// CrossZoneLoadBalancing returns a reference to field cross_zone_load_balancing of aws_elb.
func (e dataElbAttributes) CrossZoneLoadBalancing() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("cross_zone_load_balancing"))
}

// DesyncMitigationMode returns a reference to field desync_mitigation_mode of aws_elb.
func (e dataElbAttributes) DesyncMitigationMode() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("desync_mitigation_mode"))
}

// DnsName returns a reference to field dns_name of aws_elb.
func (e dataElbAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("dns_name"))
}

// Id returns a reference to field id of aws_elb.
func (e dataElbAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("id"))
}

// IdleTimeout returns a reference to field idle_timeout of aws_elb.
func (e dataElbAttributes) IdleTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("idle_timeout"))
}

// Instances returns a reference to field instances of aws_elb.
func (e dataElbAttributes) Instances() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("instances"))
}

// Internal returns a reference to field internal of aws_elb.
func (e dataElbAttributes) Internal() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("internal"))
}

// Name returns a reference to field name of aws_elb.
func (e dataElbAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("name"))
}

// SecurityGroups returns a reference to field security_groups of aws_elb.
func (e dataElbAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("security_groups"))
}

// SourceSecurityGroup returns a reference to field source_security_group of aws_elb.
func (e dataElbAttributes) SourceSecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("source_security_group"))
}

// SourceSecurityGroupId returns a reference to field source_security_group_id of aws_elb.
func (e dataElbAttributes) SourceSecurityGroupId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("source_security_group_id"))
}

// Subnets returns a reference to field subnets of aws_elb.
func (e dataElbAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("subnets"))
}

// Tags returns a reference to field tags of aws_elb.
func (e dataElbAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](e.ref.Append("tags"))
}

// ZoneId returns a reference to field zone_id of aws_elb.
func (e dataElbAttributes) ZoneId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("zone_id"))
}

func (e dataElbAttributes) AccessLogs() terra.ListValue[dataelb.AccessLogsAttributes] {
	return terra.ReferenceAsList[dataelb.AccessLogsAttributes](e.ref.Append("access_logs"))
}

func (e dataElbAttributes) HealthCheck() terra.ListValue[dataelb.HealthCheckAttributes] {
	return terra.ReferenceAsList[dataelb.HealthCheckAttributes](e.ref.Append("health_check"))
}

func (e dataElbAttributes) Listener() terra.SetValue[dataelb.ListenerAttributes] {
	return terra.ReferenceAsSet[dataelb.ListenerAttributes](e.ref.Append("listener"))
}
