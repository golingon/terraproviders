// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	servicecatalogprincipalportfolioassociation "github.com/golingon/terraproviders/aws/5.13.1/servicecatalogprincipalportfolioassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewServicecatalogPrincipalPortfolioAssociation creates a new instance of [ServicecatalogPrincipalPortfolioAssociation].
func NewServicecatalogPrincipalPortfolioAssociation(name string, args ServicecatalogPrincipalPortfolioAssociationArgs) *ServicecatalogPrincipalPortfolioAssociation {
	return &ServicecatalogPrincipalPortfolioAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicecatalogPrincipalPortfolioAssociation)(nil)

// ServicecatalogPrincipalPortfolioAssociation represents the Terraform resource aws_servicecatalog_principal_portfolio_association.
type ServicecatalogPrincipalPortfolioAssociation struct {
	Name      string
	Args      ServicecatalogPrincipalPortfolioAssociationArgs
	state     *servicecatalogPrincipalPortfolioAssociationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [ServicecatalogPrincipalPortfolioAssociation].
func (sppa *ServicecatalogPrincipalPortfolioAssociation) Type() string {
	return "aws_servicecatalog_principal_portfolio_association"
}

// LocalName returns the local name for [ServicecatalogPrincipalPortfolioAssociation].
func (sppa *ServicecatalogPrincipalPortfolioAssociation) LocalName() string {
	return sppa.Name
}

// Configuration returns the configuration (args) for [ServicecatalogPrincipalPortfolioAssociation].
func (sppa *ServicecatalogPrincipalPortfolioAssociation) Configuration() interface{} {
	return sppa.Args
}

// DependOn is used for other resources to depend on [ServicecatalogPrincipalPortfolioAssociation].
func (sppa *ServicecatalogPrincipalPortfolioAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(sppa)
}

// Dependencies returns the list of resources [ServicecatalogPrincipalPortfolioAssociation] depends_on.
func (sppa *ServicecatalogPrincipalPortfolioAssociation) Dependencies() terra.Dependencies {
	return sppa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [ServicecatalogPrincipalPortfolioAssociation].
func (sppa *ServicecatalogPrincipalPortfolioAssociation) LifecycleManagement() *terra.Lifecycle {
	return sppa.Lifecycle
}

// Attributes returns the attributes for [ServicecatalogPrincipalPortfolioAssociation].
func (sppa *ServicecatalogPrincipalPortfolioAssociation) Attributes() servicecatalogPrincipalPortfolioAssociationAttributes {
	return servicecatalogPrincipalPortfolioAssociationAttributes{ref: terra.ReferenceResource(sppa)}
}

// ImportState imports the given attribute values into [ServicecatalogPrincipalPortfolioAssociation]'s state.
func (sppa *ServicecatalogPrincipalPortfolioAssociation) ImportState(av io.Reader) error {
	sppa.state = &servicecatalogPrincipalPortfolioAssociationState{}
	if err := json.NewDecoder(av).Decode(sppa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sppa.Type(), sppa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [ServicecatalogPrincipalPortfolioAssociation] has state.
func (sppa *ServicecatalogPrincipalPortfolioAssociation) State() (*servicecatalogPrincipalPortfolioAssociationState, bool) {
	return sppa.state, sppa.state != nil
}

// StateMust returns the state for [ServicecatalogPrincipalPortfolioAssociation]. Panics if the state is nil.
func (sppa *ServicecatalogPrincipalPortfolioAssociation) StateMust() *servicecatalogPrincipalPortfolioAssociationState {
	if sppa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sppa.Type(), sppa.LocalName()))
	}
	return sppa.state
}

// ServicecatalogPrincipalPortfolioAssociationArgs contains the configurations for aws_servicecatalog_principal_portfolio_association.
type ServicecatalogPrincipalPortfolioAssociationArgs struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PortfolioId: string, required
	PortfolioId terra.StringValue `hcl:"portfolio_id,attr" validate:"required"`
	// PrincipalArn: string, required
	PrincipalArn terra.StringValue `hcl:"principal_arn,attr" validate:"required"`
	// PrincipalType: string, optional
	PrincipalType terra.StringValue `hcl:"principal_type,attr"`
	// Timeouts: optional
	Timeouts *servicecatalogprincipalportfolioassociation.Timeouts `hcl:"timeouts,block"`
}
type servicecatalogPrincipalPortfolioAssociationAttributes struct {
	ref terra.Reference
}

// AcceptLanguage returns a reference to field accept_language of aws_servicecatalog_principal_portfolio_association.
func (sppa servicecatalogPrincipalPortfolioAssociationAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceAsString(sppa.ref.Append("accept_language"))
}

// Id returns a reference to field id of aws_servicecatalog_principal_portfolio_association.
func (sppa servicecatalogPrincipalPortfolioAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sppa.ref.Append("id"))
}

// PortfolioId returns a reference to field portfolio_id of aws_servicecatalog_principal_portfolio_association.
func (sppa servicecatalogPrincipalPortfolioAssociationAttributes) PortfolioId() terra.StringValue {
	return terra.ReferenceAsString(sppa.ref.Append("portfolio_id"))
}

// PrincipalArn returns a reference to field principal_arn of aws_servicecatalog_principal_portfolio_association.
func (sppa servicecatalogPrincipalPortfolioAssociationAttributes) PrincipalArn() terra.StringValue {
	return terra.ReferenceAsString(sppa.ref.Append("principal_arn"))
}

// PrincipalType returns a reference to field principal_type of aws_servicecatalog_principal_portfolio_association.
func (sppa servicecatalogPrincipalPortfolioAssociationAttributes) PrincipalType() terra.StringValue {
	return terra.ReferenceAsString(sppa.ref.Append("principal_type"))
}

func (sppa servicecatalogPrincipalPortfolioAssociationAttributes) Timeouts() servicecatalogprincipalportfolioassociation.TimeoutsAttributes {
	return terra.ReferenceAsSingle[servicecatalogprincipalportfolioassociation.TimeoutsAttributes](sppa.ref.Append("timeouts"))
}

type servicecatalogPrincipalPortfolioAssociationState struct {
	AcceptLanguage string                                                     `json:"accept_language"`
	Id             string                                                     `json:"id"`
	PortfolioId    string                                                     `json:"portfolio_id"`
	PrincipalArn   string                                                     `json:"principal_arn"`
	PrincipalType  string                                                     `json:"principal_type"`
	Timeouts       *servicecatalogprincipalportfolioassociation.TimeoutsState `json:"timeouts"`
}
