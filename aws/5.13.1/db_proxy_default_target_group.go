// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dbproxydefaulttargetgroup "github.com/golingon/terraproviders/aws/5.13.1/dbproxydefaulttargetgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDbProxyDefaultTargetGroup creates a new instance of [DbProxyDefaultTargetGroup].
func NewDbProxyDefaultTargetGroup(name string, args DbProxyDefaultTargetGroupArgs) *DbProxyDefaultTargetGroup {
	return &DbProxyDefaultTargetGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DbProxyDefaultTargetGroup)(nil)

// DbProxyDefaultTargetGroup represents the Terraform resource aws_db_proxy_default_target_group.
type DbProxyDefaultTargetGroup struct {
	Name      string
	Args      DbProxyDefaultTargetGroupArgs
	state     *dbProxyDefaultTargetGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DbProxyDefaultTargetGroup].
func (dpdtg *DbProxyDefaultTargetGroup) Type() string {
	return "aws_db_proxy_default_target_group"
}

// LocalName returns the local name for [DbProxyDefaultTargetGroup].
func (dpdtg *DbProxyDefaultTargetGroup) LocalName() string {
	return dpdtg.Name
}

// Configuration returns the configuration (args) for [DbProxyDefaultTargetGroup].
func (dpdtg *DbProxyDefaultTargetGroup) Configuration() interface{} {
	return dpdtg.Args
}

// DependOn is used for other resources to depend on [DbProxyDefaultTargetGroup].
func (dpdtg *DbProxyDefaultTargetGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(dpdtg)
}

// Dependencies returns the list of resources [DbProxyDefaultTargetGroup] depends_on.
func (dpdtg *DbProxyDefaultTargetGroup) Dependencies() terra.Dependencies {
	return dpdtg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DbProxyDefaultTargetGroup].
func (dpdtg *DbProxyDefaultTargetGroup) LifecycleManagement() *terra.Lifecycle {
	return dpdtg.Lifecycle
}

// Attributes returns the attributes for [DbProxyDefaultTargetGroup].
func (dpdtg *DbProxyDefaultTargetGroup) Attributes() dbProxyDefaultTargetGroupAttributes {
	return dbProxyDefaultTargetGroupAttributes{ref: terra.ReferenceResource(dpdtg)}
}

// ImportState imports the given attribute values into [DbProxyDefaultTargetGroup]'s state.
func (dpdtg *DbProxyDefaultTargetGroup) ImportState(av io.Reader) error {
	dpdtg.state = &dbProxyDefaultTargetGroupState{}
	if err := json.NewDecoder(av).Decode(dpdtg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dpdtg.Type(), dpdtg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DbProxyDefaultTargetGroup] has state.
func (dpdtg *DbProxyDefaultTargetGroup) State() (*dbProxyDefaultTargetGroupState, bool) {
	return dpdtg.state, dpdtg.state != nil
}

// StateMust returns the state for [DbProxyDefaultTargetGroup]. Panics if the state is nil.
func (dpdtg *DbProxyDefaultTargetGroup) StateMust() *dbProxyDefaultTargetGroupState {
	if dpdtg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dpdtg.Type(), dpdtg.LocalName()))
	}
	return dpdtg.state
}

// DbProxyDefaultTargetGroupArgs contains the configurations for aws_db_proxy_default_target_group.
type DbProxyDefaultTargetGroupArgs struct {
	// DbProxyName: string, required
	DbProxyName terra.StringValue `hcl:"db_proxy_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ConnectionPoolConfig: optional
	ConnectionPoolConfig *dbproxydefaulttargetgroup.ConnectionPoolConfig `hcl:"connection_pool_config,block"`
	// Timeouts: optional
	Timeouts *dbproxydefaulttargetgroup.Timeouts `hcl:"timeouts,block"`
}
type dbProxyDefaultTargetGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_db_proxy_default_target_group.
func (dpdtg dbProxyDefaultTargetGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dpdtg.ref.Append("arn"))
}

// DbProxyName returns a reference to field db_proxy_name of aws_db_proxy_default_target_group.
func (dpdtg dbProxyDefaultTargetGroupAttributes) DbProxyName() terra.StringValue {
	return terra.ReferenceAsString(dpdtg.ref.Append("db_proxy_name"))
}

// Id returns a reference to field id of aws_db_proxy_default_target_group.
func (dpdtg dbProxyDefaultTargetGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dpdtg.ref.Append("id"))
}

// Name returns a reference to field name of aws_db_proxy_default_target_group.
func (dpdtg dbProxyDefaultTargetGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dpdtg.ref.Append("name"))
}

func (dpdtg dbProxyDefaultTargetGroupAttributes) ConnectionPoolConfig() terra.ListValue[dbproxydefaulttargetgroup.ConnectionPoolConfigAttributes] {
	return terra.ReferenceAsList[dbproxydefaulttargetgroup.ConnectionPoolConfigAttributes](dpdtg.ref.Append("connection_pool_config"))
}

func (dpdtg dbProxyDefaultTargetGroupAttributes) Timeouts() dbproxydefaulttargetgroup.TimeoutsAttributes {
	return terra.ReferenceAsSingle[dbproxydefaulttargetgroup.TimeoutsAttributes](dpdtg.ref.Append("timeouts"))
}

type dbProxyDefaultTargetGroupState struct {
	Arn                  string                                                `json:"arn"`
	DbProxyName          string                                                `json:"db_proxy_name"`
	Id                   string                                                `json:"id"`
	Name                 string                                                `json:"name"`
	ConnectionPoolConfig []dbproxydefaulttargetgroup.ConnectionPoolConfigState `json:"connection_pool_config"`
	Timeouts             *dbproxydefaulttargetgroup.TimeoutsState              `json:"timeouts"`
}
