// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	opensearchvpcendpoint "github.com/golingon/terraproviders/aws/5.13.1/opensearchvpcendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewOpensearchVpcEndpoint creates a new instance of [OpensearchVpcEndpoint].
func NewOpensearchVpcEndpoint(name string, args OpensearchVpcEndpointArgs) *OpensearchVpcEndpoint {
	return &OpensearchVpcEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OpensearchVpcEndpoint)(nil)

// OpensearchVpcEndpoint represents the Terraform resource aws_opensearch_vpc_endpoint.
type OpensearchVpcEndpoint struct {
	Name      string
	Args      OpensearchVpcEndpointArgs
	state     *opensearchVpcEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [OpensearchVpcEndpoint].
func (ove *OpensearchVpcEndpoint) Type() string {
	return "aws_opensearch_vpc_endpoint"
}

// LocalName returns the local name for [OpensearchVpcEndpoint].
func (ove *OpensearchVpcEndpoint) LocalName() string {
	return ove.Name
}

// Configuration returns the configuration (args) for [OpensearchVpcEndpoint].
func (ove *OpensearchVpcEndpoint) Configuration() interface{} {
	return ove.Args
}

// DependOn is used for other resources to depend on [OpensearchVpcEndpoint].
func (ove *OpensearchVpcEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(ove)
}

// Dependencies returns the list of resources [OpensearchVpcEndpoint] depends_on.
func (ove *OpensearchVpcEndpoint) Dependencies() terra.Dependencies {
	return ove.DependsOn
}

// LifecycleManagement returns the lifecycle block for [OpensearchVpcEndpoint].
func (ove *OpensearchVpcEndpoint) LifecycleManagement() *terra.Lifecycle {
	return ove.Lifecycle
}

// Attributes returns the attributes for [OpensearchVpcEndpoint].
func (ove *OpensearchVpcEndpoint) Attributes() opensearchVpcEndpointAttributes {
	return opensearchVpcEndpointAttributes{ref: terra.ReferenceResource(ove)}
}

// ImportState imports the given attribute values into [OpensearchVpcEndpoint]'s state.
func (ove *OpensearchVpcEndpoint) ImportState(av io.Reader) error {
	ove.state = &opensearchVpcEndpointState{}
	if err := json.NewDecoder(av).Decode(ove.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ove.Type(), ove.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [OpensearchVpcEndpoint] has state.
func (ove *OpensearchVpcEndpoint) State() (*opensearchVpcEndpointState, bool) {
	return ove.state, ove.state != nil
}

// StateMust returns the state for [OpensearchVpcEndpoint]. Panics if the state is nil.
func (ove *OpensearchVpcEndpoint) StateMust() *opensearchVpcEndpointState {
	if ove.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ove.Type(), ove.LocalName()))
	}
	return ove.state
}

// OpensearchVpcEndpointArgs contains the configurations for aws_opensearch_vpc_endpoint.
type OpensearchVpcEndpointArgs struct {
	// DomainArn: string, required
	DomainArn terra.StringValue `hcl:"domain_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *opensearchvpcendpoint.Timeouts `hcl:"timeouts,block"`
	// VpcOptions: required
	VpcOptions *opensearchvpcendpoint.VpcOptions `hcl:"vpc_options,block" validate:"required"`
}
type opensearchVpcEndpointAttributes struct {
	ref terra.Reference
}

// DomainArn returns a reference to field domain_arn of aws_opensearch_vpc_endpoint.
func (ove opensearchVpcEndpointAttributes) DomainArn() terra.StringValue {
	return terra.ReferenceAsString(ove.ref.Append("domain_arn"))
}

// Endpoint returns a reference to field endpoint of aws_opensearch_vpc_endpoint.
func (ove opensearchVpcEndpointAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(ove.ref.Append("endpoint"))
}

// Id returns a reference to field id of aws_opensearch_vpc_endpoint.
func (ove opensearchVpcEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ove.ref.Append("id"))
}

func (ove opensearchVpcEndpointAttributes) Timeouts() opensearchvpcendpoint.TimeoutsAttributes {
	return terra.ReferenceAsSingle[opensearchvpcendpoint.TimeoutsAttributes](ove.ref.Append("timeouts"))
}

func (ove opensearchVpcEndpointAttributes) VpcOptions() terra.ListValue[opensearchvpcendpoint.VpcOptionsAttributes] {
	return terra.ReferenceAsList[opensearchvpcendpoint.VpcOptionsAttributes](ove.ref.Append("vpc_options"))
}

type opensearchVpcEndpointState struct {
	DomainArn  string                                  `json:"domain_arn"`
	Endpoint   string                                  `json:"endpoint"`
	Id         string                                  `json:"id"`
	Timeouts   *opensearchvpcendpoint.TimeoutsState    `json:"timeouts"`
	VpcOptions []opensearchvpcendpoint.VpcOptionsState `json:"vpc_options"`
}
