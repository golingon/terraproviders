// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package finspacekxcluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AutoScalingConfiguration struct {
	// AutoScalingMetric: string, required
	AutoScalingMetric terra.StringValue `hcl:"auto_scaling_metric,attr" validate:"required"`
	// MaxNodeCount: number, required
	MaxNodeCount terra.NumberValue `hcl:"max_node_count,attr" validate:"required"`
	// MetricTarget: number, required
	MetricTarget terra.NumberValue `hcl:"metric_target,attr" validate:"required"`
	// MinNodeCount: number, required
	MinNodeCount terra.NumberValue `hcl:"min_node_count,attr" validate:"required"`
	// ScaleInCooldownSeconds: number, required
	ScaleInCooldownSeconds terra.NumberValue `hcl:"scale_in_cooldown_seconds,attr" validate:"required"`
	// ScaleOutCooldownSeconds: number, required
	ScaleOutCooldownSeconds terra.NumberValue `hcl:"scale_out_cooldown_seconds,attr" validate:"required"`
}

type CacheStorageConfigurations struct {
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type CapacityConfiguration struct {
	// NodeCount: number, required
	NodeCount terra.NumberValue `hcl:"node_count,attr" validate:"required"`
	// NodeType: string, required
	NodeType terra.StringValue `hcl:"node_type,attr" validate:"required"`
}

type Code struct {
	// S3Bucket: string, required
	S3Bucket terra.StringValue `hcl:"s3_bucket,attr" validate:"required"`
	// S3Key: string, required
	S3Key terra.StringValue `hcl:"s3_key,attr" validate:"required"`
	// S3ObjectVersion: string, optional
	S3ObjectVersion terra.StringValue `hcl:"s3_object_version,attr"`
}

type Database struct {
	// ChangesetId: string, optional
	ChangesetId terra.StringValue `hcl:"changeset_id,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// CacheConfigurations: min=1
	CacheConfigurations []CacheConfigurations `hcl:"cache_configurations,block" validate:"min=1"`
}

type CacheConfigurations struct {
	// CacheType: string, required
	CacheType terra.StringValue `hcl:"cache_type,attr" validate:"required"`
	// DbPaths: set of string, required
	DbPaths terra.SetValue[terra.StringValue] `hcl:"db_paths,attr" validate:"required"`
}

type SavedownStorageConfiguration struct {
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VpcConfiguration struct {
	// IpAddressType: string, required
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr" validate:"required"`
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
}

type AutoScalingConfigurationAttributes struct {
	ref terra.Reference
}

func (asc AutoScalingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return asc.ref, nil
}

func (asc AutoScalingConfigurationAttributes) InternalWithRef(ref terra.Reference) AutoScalingConfigurationAttributes {
	return AutoScalingConfigurationAttributes{ref: ref}
}

func (asc AutoScalingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asc.ref.InternalTokens()
}

func (asc AutoScalingConfigurationAttributes) AutoScalingMetric() terra.StringValue {
	return terra.ReferenceAsString(asc.ref.Append("auto_scaling_metric"))
}

func (asc AutoScalingConfigurationAttributes) MaxNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(asc.ref.Append("max_node_count"))
}

func (asc AutoScalingConfigurationAttributes) MetricTarget() terra.NumberValue {
	return terra.ReferenceAsNumber(asc.ref.Append("metric_target"))
}

func (asc AutoScalingConfigurationAttributes) MinNodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(asc.ref.Append("min_node_count"))
}

func (asc AutoScalingConfigurationAttributes) ScaleInCooldownSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(asc.ref.Append("scale_in_cooldown_seconds"))
}

func (asc AutoScalingConfigurationAttributes) ScaleOutCooldownSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(asc.ref.Append("scale_out_cooldown_seconds"))
}

type CacheStorageConfigurationsAttributes struct {
	ref terra.Reference
}

func (csc CacheStorageConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return csc.ref, nil
}

func (csc CacheStorageConfigurationsAttributes) InternalWithRef(ref terra.Reference) CacheStorageConfigurationsAttributes {
	return CacheStorageConfigurationsAttributes{ref: ref}
}

func (csc CacheStorageConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return csc.ref.InternalTokens()
}

func (csc CacheStorageConfigurationsAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(csc.ref.Append("size"))
}

func (csc CacheStorageConfigurationsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(csc.ref.Append("type"))
}

type CapacityConfigurationAttributes struct {
	ref terra.Reference
}

func (cc CapacityConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc CapacityConfigurationAttributes) InternalWithRef(ref terra.Reference) CapacityConfigurationAttributes {
	return CapacityConfigurationAttributes{ref: ref}
}

func (cc CapacityConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc CapacityConfigurationAttributes) NodeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("node_count"))
}

func (cc CapacityConfigurationAttributes) NodeType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("node_type"))
}

type CodeAttributes struct {
	ref terra.Reference
}

func (c CodeAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CodeAttributes) InternalWithRef(ref terra.Reference) CodeAttributes {
	return CodeAttributes{ref: ref}
}

func (c CodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CodeAttributes) S3Bucket() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("s3_bucket"))
}

func (c CodeAttributes) S3Key() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("s3_key"))
}

func (c CodeAttributes) S3ObjectVersion() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("s3_object_version"))
}

type DatabaseAttributes struct {
	ref terra.Reference
}

func (d DatabaseAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DatabaseAttributes) InternalWithRef(ref terra.Reference) DatabaseAttributes {
	return DatabaseAttributes{ref: ref}
}

func (d DatabaseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DatabaseAttributes) ChangesetId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("changeset_id"))
}

func (d DatabaseAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("database_name"))
}

func (d DatabaseAttributes) CacheConfigurations() terra.ListValue[CacheConfigurationsAttributes] {
	return terra.ReferenceAsList[CacheConfigurationsAttributes](d.ref.Append("cache_configurations"))
}

type CacheConfigurationsAttributes struct {
	ref terra.Reference
}

func (cc CacheConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc CacheConfigurationsAttributes) InternalWithRef(ref terra.Reference) CacheConfigurationsAttributes {
	return CacheConfigurationsAttributes{ref: ref}
}

func (cc CacheConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc CacheConfigurationsAttributes) CacheType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("cache_type"))
}

func (cc CacheConfigurationsAttributes) DbPaths() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("db_paths"))
}

type SavedownStorageConfigurationAttributes struct {
	ref terra.Reference
}

func (ssc SavedownStorageConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ssc.ref, nil
}

func (ssc SavedownStorageConfigurationAttributes) InternalWithRef(ref terra.Reference) SavedownStorageConfigurationAttributes {
	return SavedownStorageConfigurationAttributes{ref: ref}
}

func (ssc SavedownStorageConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssc.ref.InternalTokens()
}

func (ssc SavedownStorageConfigurationAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ssc.ref.Append("size"))
}

func (ssc SavedownStorageConfigurationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VpcConfigurationAttributes struct {
	ref terra.Reference
}

func (vc VpcConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VpcConfigurationAttributes) InternalWithRef(ref terra.Reference) VpcConfigurationAttributes {
	return VpcConfigurationAttributes{ref: ref}
}

func (vc VpcConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VpcConfigurationAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("ip_address_type"))
}

func (vc VpcConfigurationAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc VpcConfigurationAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

func (vc VpcConfigurationAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_id"))
}

type AutoScalingConfigurationState struct {
	AutoScalingMetric       string  `json:"auto_scaling_metric"`
	MaxNodeCount            float64 `json:"max_node_count"`
	MetricTarget            float64 `json:"metric_target"`
	MinNodeCount            float64 `json:"min_node_count"`
	ScaleInCooldownSeconds  float64 `json:"scale_in_cooldown_seconds"`
	ScaleOutCooldownSeconds float64 `json:"scale_out_cooldown_seconds"`
}

type CacheStorageConfigurationsState struct {
	Size float64 `json:"size"`
	Type string  `json:"type"`
}

type CapacityConfigurationState struct {
	NodeCount float64 `json:"node_count"`
	NodeType  string  `json:"node_type"`
}

type CodeState struct {
	S3Bucket        string `json:"s3_bucket"`
	S3Key           string `json:"s3_key"`
	S3ObjectVersion string `json:"s3_object_version"`
}

type DatabaseState struct {
	ChangesetId         string                     `json:"changeset_id"`
	DatabaseName        string                     `json:"database_name"`
	CacheConfigurations []CacheConfigurationsState `json:"cache_configurations"`
}

type CacheConfigurationsState struct {
	CacheType string   `json:"cache_type"`
	DbPaths   []string `json:"db_paths"`
}

type SavedownStorageConfigurationState struct {
	Size float64 `json:"size"`
	Type string  `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcConfigurationState struct {
	IpAddressType    string   `json:"ip_address_type"`
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
	VpcId            string   `json:"vpc_id"`
}
