// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAccessanalyzerAnalyzer creates a new instance of [AccessanalyzerAnalyzer].
func NewAccessanalyzerAnalyzer(name string, args AccessanalyzerAnalyzerArgs) *AccessanalyzerAnalyzer {
	return &AccessanalyzerAnalyzer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccessanalyzerAnalyzer)(nil)

// AccessanalyzerAnalyzer represents the Terraform resource aws_accessanalyzer_analyzer.
type AccessanalyzerAnalyzer struct {
	Name      string
	Args      AccessanalyzerAnalyzerArgs
	state     *accessanalyzerAnalyzerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AccessanalyzerAnalyzer].
func (aa *AccessanalyzerAnalyzer) Type() string {
	return "aws_accessanalyzer_analyzer"
}

// LocalName returns the local name for [AccessanalyzerAnalyzer].
func (aa *AccessanalyzerAnalyzer) LocalName() string {
	return aa.Name
}

// Configuration returns the configuration (args) for [AccessanalyzerAnalyzer].
func (aa *AccessanalyzerAnalyzer) Configuration() interface{} {
	return aa.Args
}

// DependOn is used for other resources to depend on [AccessanalyzerAnalyzer].
func (aa *AccessanalyzerAnalyzer) DependOn() terra.Reference {
	return terra.ReferenceResource(aa)
}

// Dependencies returns the list of resources [AccessanalyzerAnalyzer] depends_on.
func (aa *AccessanalyzerAnalyzer) Dependencies() terra.Dependencies {
	return aa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AccessanalyzerAnalyzer].
func (aa *AccessanalyzerAnalyzer) LifecycleManagement() *terra.Lifecycle {
	return aa.Lifecycle
}

// Attributes returns the attributes for [AccessanalyzerAnalyzer].
func (aa *AccessanalyzerAnalyzer) Attributes() accessanalyzerAnalyzerAttributes {
	return accessanalyzerAnalyzerAttributes{ref: terra.ReferenceResource(aa)}
}

// ImportState imports the given attribute values into [AccessanalyzerAnalyzer]'s state.
func (aa *AccessanalyzerAnalyzer) ImportState(av io.Reader) error {
	aa.state = &accessanalyzerAnalyzerState{}
	if err := json.NewDecoder(av).Decode(aa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aa.Type(), aa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AccessanalyzerAnalyzer] has state.
func (aa *AccessanalyzerAnalyzer) State() (*accessanalyzerAnalyzerState, bool) {
	return aa.state, aa.state != nil
}

// StateMust returns the state for [AccessanalyzerAnalyzer]. Panics if the state is nil.
func (aa *AccessanalyzerAnalyzer) StateMust() *accessanalyzerAnalyzerState {
	if aa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aa.Type(), aa.LocalName()))
	}
	return aa.state
}

// AccessanalyzerAnalyzerArgs contains the configurations for aws_accessanalyzer_analyzer.
type AccessanalyzerAnalyzerArgs struct {
	// AnalyzerName: string, required
	AnalyzerName terra.StringValue `hcl:"analyzer_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}
type accessanalyzerAnalyzerAttributes struct {
	ref terra.Reference
}

// AnalyzerName returns a reference to field analyzer_name of aws_accessanalyzer_analyzer.
func (aa accessanalyzerAnalyzerAttributes) AnalyzerName() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("analyzer_name"))
}

// Arn returns a reference to field arn of aws_accessanalyzer_analyzer.
func (aa accessanalyzerAnalyzerAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("arn"))
}

// Id returns a reference to field id of aws_accessanalyzer_analyzer.
func (aa accessanalyzerAnalyzerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_accessanalyzer_analyzer.
func (aa accessanalyzerAnalyzerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aa.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_accessanalyzer_analyzer.
func (aa accessanalyzerAnalyzerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aa.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_accessanalyzer_analyzer.
func (aa accessanalyzerAnalyzerAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("type"))
}

type accessanalyzerAnalyzerState struct {
	AnalyzerName string            `json:"analyzer_name"`
	Arn          string            `json:"arn"`
	Id           string            `json:"id"`
	Tags         map[string]string `json:"tags"`
	TagsAll      map[string]string `json:"tags_all"`
	Type         string            `json:"type"`
}
