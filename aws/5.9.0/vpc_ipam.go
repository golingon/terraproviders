// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	vpcipam "github.com/golingon/terraproviders/aws/5.9.0/vpcipam"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewVpcIpam creates a new instance of [VpcIpam].
func NewVpcIpam(name string, args VpcIpamArgs) *VpcIpam {
	return &VpcIpam{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpcIpam)(nil)

// VpcIpam represents the Terraform resource aws_vpc_ipam.
type VpcIpam struct {
	Name      string
	Args      VpcIpamArgs
	state     *vpcIpamState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VpcIpam].
func (vi *VpcIpam) Type() string {
	return "aws_vpc_ipam"
}

// LocalName returns the local name for [VpcIpam].
func (vi *VpcIpam) LocalName() string {
	return vi.Name
}

// Configuration returns the configuration (args) for [VpcIpam].
func (vi *VpcIpam) Configuration() interface{} {
	return vi.Args
}

// DependOn is used for other resources to depend on [VpcIpam].
func (vi *VpcIpam) DependOn() terra.Reference {
	return terra.ReferenceResource(vi)
}

// Dependencies returns the list of resources [VpcIpam] depends_on.
func (vi *VpcIpam) Dependencies() terra.Dependencies {
	return vi.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VpcIpam].
func (vi *VpcIpam) LifecycleManagement() *terra.Lifecycle {
	return vi.Lifecycle
}

// Attributes returns the attributes for [VpcIpam].
func (vi *VpcIpam) Attributes() vpcIpamAttributes {
	return vpcIpamAttributes{ref: terra.ReferenceResource(vi)}
}

// ImportState imports the given attribute values into [VpcIpam]'s state.
func (vi *VpcIpam) ImportState(av io.Reader) error {
	vi.state = &vpcIpamState{}
	if err := json.NewDecoder(av).Decode(vi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vi.Type(), vi.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VpcIpam] has state.
func (vi *VpcIpam) State() (*vpcIpamState, bool) {
	return vi.state, vi.state != nil
}

// StateMust returns the state for [VpcIpam]. Panics if the state is nil.
func (vi *VpcIpam) StateMust() *vpcIpamState {
	if vi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vi.Type(), vi.LocalName()))
	}
	return vi.state
}

// VpcIpamArgs contains the configurations for aws_vpc_ipam.
type VpcIpamArgs struct {
	// Cascade: bool, optional
	Cascade terra.BoolValue `hcl:"cascade,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// OperatingRegions: min=1
	OperatingRegions []vpcipam.OperatingRegions `hcl:"operating_regions,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *vpcipam.Timeouts `hcl:"timeouts,block"`
}
type vpcIpamAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpc_ipam.
func (vi vpcIpamAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("arn"))
}

// Cascade returns a reference to field cascade of aws_vpc_ipam.
func (vi vpcIpamAttributes) Cascade() terra.BoolValue {
	return terra.ReferenceAsBool(vi.ref.Append("cascade"))
}

// DefaultResourceDiscoveryAssociationId returns a reference to field default_resource_discovery_association_id of aws_vpc_ipam.
func (vi vpcIpamAttributes) DefaultResourceDiscoveryAssociationId() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("default_resource_discovery_association_id"))
}

// DefaultResourceDiscoveryId returns a reference to field default_resource_discovery_id of aws_vpc_ipam.
func (vi vpcIpamAttributes) DefaultResourceDiscoveryId() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("default_resource_discovery_id"))
}

// Description returns a reference to field description of aws_vpc_ipam.
func (vi vpcIpamAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("description"))
}

// Id returns a reference to field id of aws_vpc_ipam.
func (vi vpcIpamAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("id"))
}

// PrivateDefaultScopeId returns a reference to field private_default_scope_id of aws_vpc_ipam.
func (vi vpcIpamAttributes) PrivateDefaultScopeId() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("private_default_scope_id"))
}

// PublicDefaultScopeId returns a reference to field public_default_scope_id of aws_vpc_ipam.
func (vi vpcIpamAttributes) PublicDefaultScopeId() terra.StringValue {
	return terra.ReferenceAsString(vi.ref.Append("public_default_scope_id"))
}

// ScopeCount returns a reference to field scope_count of aws_vpc_ipam.
func (vi vpcIpamAttributes) ScopeCount() terra.NumberValue {
	return terra.ReferenceAsNumber(vi.ref.Append("scope_count"))
}

// Tags returns a reference to field tags of aws_vpc_ipam.
func (vi vpcIpamAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vi.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpc_ipam.
func (vi vpcIpamAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vi.ref.Append("tags_all"))
}

func (vi vpcIpamAttributes) OperatingRegions() terra.SetValue[vpcipam.OperatingRegionsAttributes] {
	return terra.ReferenceAsSet[vpcipam.OperatingRegionsAttributes](vi.ref.Append("operating_regions"))
}

func (vi vpcIpamAttributes) Timeouts() vpcipam.TimeoutsAttributes {
	return terra.ReferenceAsSingle[vpcipam.TimeoutsAttributes](vi.ref.Append("timeouts"))
}

type vpcIpamState struct {
	Arn                                   string                          `json:"arn"`
	Cascade                               bool                            `json:"cascade"`
	DefaultResourceDiscoveryAssociationId string                          `json:"default_resource_discovery_association_id"`
	DefaultResourceDiscoveryId            string                          `json:"default_resource_discovery_id"`
	Description                           string                          `json:"description"`
	Id                                    string                          `json:"id"`
	PrivateDefaultScopeId                 string                          `json:"private_default_scope_id"`
	PublicDefaultScopeId                  string                          `json:"public_default_scope_id"`
	ScopeCount                            float64                         `json:"scope_count"`
	Tags                                  map[string]string               `json:"tags"`
	TagsAll                               map[string]string               `json:"tags_all"`
	OperatingRegions                      []vpcipam.OperatingRegionsState `json:"operating_regions"`
	Timeouts                              *vpcipam.TimeoutsState          `json:"timeouts"`
}
