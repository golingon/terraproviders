// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewVpclatticeResourcePolicy creates a new instance of [VpclatticeResourcePolicy].
func NewVpclatticeResourcePolicy(name string, args VpclatticeResourcePolicyArgs) *VpclatticeResourcePolicy {
	return &VpclatticeResourcePolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpclatticeResourcePolicy)(nil)

// VpclatticeResourcePolicy represents the Terraform resource aws_vpclattice_resource_policy.
type VpclatticeResourcePolicy struct {
	Name      string
	Args      VpclatticeResourcePolicyArgs
	state     *vpclatticeResourcePolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [VpclatticeResourcePolicy].
func (vrp *VpclatticeResourcePolicy) Type() string {
	return "aws_vpclattice_resource_policy"
}

// LocalName returns the local name for [VpclatticeResourcePolicy].
func (vrp *VpclatticeResourcePolicy) LocalName() string {
	return vrp.Name
}

// Configuration returns the configuration (args) for [VpclatticeResourcePolicy].
func (vrp *VpclatticeResourcePolicy) Configuration() interface{} {
	return vrp.Args
}

// DependOn is used for other resources to depend on [VpclatticeResourcePolicy].
func (vrp *VpclatticeResourcePolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(vrp)
}

// Dependencies returns the list of resources [VpclatticeResourcePolicy] depends_on.
func (vrp *VpclatticeResourcePolicy) Dependencies() terra.Dependencies {
	return vrp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [VpclatticeResourcePolicy].
func (vrp *VpclatticeResourcePolicy) LifecycleManagement() *terra.Lifecycle {
	return vrp.Lifecycle
}

// Attributes returns the attributes for [VpclatticeResourcePolicy].
func (vrp *VpclatticeResourcePolicy) Attributes() vpclatticeResourcePolicyAttributes {
	return vpclatticeResourcePolicyAttributes{ref: terra.ReferenceResource(vrp)}
}

// ImportState imports the given attribute values into [VpclatticeResourcePolicy]'s state.
func (vrp *VpclatticeResourcePolicy) ImportState(av io.Reader) error {
	vrp.state = &vpclatticeResourcePolicyState{}
	if err := json.NewDecoder(av).Decode(vrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vrp.Type(), vrp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [VpclatticeResourcePolicy] has state.
func (vrp *VpclatticeResourcePolicy) State() (*vpclatticeResourcePolicyState, bool) {
	return vrp.state, vrp.state != nil
}

// StateMust returns the state for [VpclatticeResourcePolicy]. Panics if the state is nil.
func (vrp *VpclatticeResourcePolicy) StateMust() *vpclatticeResourcePolicyState {
	if vrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vrp.Type(), vrp.LocalName()))
	}
	return vrp.state
}

// VpclatticeResourcePolicyArgs contains the configurations for aws_vpclattice_resource_policy.
type VpclatticeResourcePolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
}
type vpclatticeResourcePolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_vpclattice_resource_policy.
func (vrp vpclatticeResourcePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vrp.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_vpclattice_resource_policy.
func (vrp vpclatticeResourcePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(vrp.ref.Append("policy"))
}

// ResourceArn returns a reference to field resource_arn of aws_vpclattice_resource_policy.
func (vrp vpclatticeResourcePolicyAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(vrp.ref.Append("resource_arn"))
}

type vpclatticeResourcePolicyState struct {
	Id          string `json:"id"`
	Policy      string `json:"policy"`
	ResourceArn string `json:"resource_arn"`
}
