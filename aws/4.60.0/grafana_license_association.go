// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	grafanalicenseassociation "github.com/golingon/terraproviders/aws/4.60.0/grafanalicenseassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGrafanaLicenseAssociation(name string, args GrafanaLicenseAssociationArgs) *GrafanaLicenseAssociation {
	return &GrafanaLicenseAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GrafanaLicenseAssociation)(nil)

type GrafanaLicenseAssociation struct {
	Name  string
	Args  GrafanaLicenseAssociationArgs
	state *grafanaLicenseAssociationState
}

func (gla *GrafanaLicenseAssociation) Type() string {
	return "aws_grafana_license_association"
}

func (gla *GrafanaLicenseAssociation) LocalName() string {
	return gla.Name
}

func (gla *GrafanaLicenseAssociation) Configuration() interface{} {
	return gla.Args
}

func (gla *GrafanaLicenseAssociation) Attributes() grafanaLicenseAssociationAttributes {
	return grafanaLicenseAssociationAttributes{ref: terra.ReferenceResource(gla)}
}

func (gla *GrafanaLicenseAssociation) ImportState(av io.Reader) error {
	gla.state = &grafanaLicenseAssociationState{}
	if err := json.NewDecoder(av).Decode(gla.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gla.Type(), gla.LocalName(), err)
	}
	return nil
}

func (gla *GrafanaLicenseAssociation) State() (*grafanaLicenseAssociationState, bool) {
	return gla.state, gla.state != nil
}

func (gla *GrafanaLicenseAssociation) StateMust() *grafanaLicenseAssociationState {
	if gla.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gla.Type(), gla.LocalName()))
	}
	return gla.state
}

func (gla *GrafanaLicenseAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(gla)
}

type GrafanaLicenseAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseType: string, required
	LicenseType terra.StringValue `hcl:"license_type,attr" validate:"required"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *grafanalicenseassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that GrafanaLicenseAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type grafanaLicenseAssociationAttributes struct {
	ref terra.Reference
}

func (gla grafanaLicenseAssociationAttributes) FreeTrialExpiration() terra.StringValue {
	return terra.ReferenceString(gla.ref.Append("free_trial_expiration"))
}

func (gla grafanaLicenseAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gla.ref.Append("id"))
}

func (gla grafanaLicenseAssociationAttributes) LicenseExpiration() terra.StringValue {
	return terra.ReferenceString(gla.ref.Append("license_expiration"))
}

func (gla grafanaLicenseAssociationAttributes) LicenseType() terra.StringValue {
	return terra.ReferenceString(gla.ref.Append("license_type"))
}

func (gla grafanaLicenseAssociationAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceString(gla.ref.Append("workspace_id"))
}

func (gla grafanaLicenseAssociationAttributes) Timeouts() grafanalicenseassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[grafanalicenseassociation.TimeoutsAttributes](gla.ref.Append("timeouts"))
}

type grafanaLicenseAssociationState struct {
	FreeTrialExpiration string                                   `json:"free_trial_expiration"`
	Id                  string                                   `json:"id"`
	LicenseExpiration   string                                   `json:"license_expiration"`
	LicenseType         string                                   `json:"license_type"`
	WorkspaceId         string                                   `json:"workspace_id"`
	Timeouts            *grafanalicenseassociation.TimeoutsState `json:"timeouts"`
}
