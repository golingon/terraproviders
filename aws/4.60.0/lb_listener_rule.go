// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lblistenerrule "github.com/golingon/terraproviders/aws/4.60.0/lblistenerrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLbListenerRule(name string, args LbListenerRuleArgs) *LbListenerRule {
	return &LbListenerRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LbListenerRule)(nil)

type LbListenerRule struct {
	Name  string
	Args  LbListenerRuleArgs
	state *lbListenerRuleState
}

func (llr *LbListenerRule) Type() string {
	return "aws_lb_listener_rule"
}

func (llr *LbListenerRule) LocalName() string {
	return llr.Name
}

func (llr *LbListenerRule) Configuration() interface{} {
	return llr.Args
}

func (llr *LbListenerRule) Attributes() lbListenerRuleAttributes {
	return lbListenerRuleAttributes{ref: terra.ReferenceResource(llr)}
}

func (llr *LbListenerRule) ImportState(av io.Reader) error {
	llr.state = &lbListenerRuleState{}
	if err := json.NewDecoder(av).Decode(llr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", llr.Type(), llr.LocalName(), err)
	}
	return nil
}

func (llr *LbListenerRule) State() (*lbListenerRuleState, bool) {
	return llr.state, llr.state != nil
}

func (llr *LbListenerRule) StateMust() *lbListenerRuleState {
	if llr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", llr.Type(), llr.LocalName()))
	}
	return llr.state
}

func (llr *LbListenerRule) DependOn() terra.Reference {
	return terra.ReferenceResource(llr)
}

type LbListenerRuleArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListenerArn: string, required
	ListenerArn terra.StringValue `hcl:"listener_arn,attr" validate:"required"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Action: min=1
	Action []lblistenerrule.Action `hcl:"action,block" validate:"min=1"`
	// Condition: min=1
	Condition []lblistenerrule.Condition `hcl:"condition,block" validate:"min=1"`
	// DependsOn contains resources that LbListenerRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lbListenerRuleAttributes struct {
	ref terra.Reference
}

func (llr lbListenerRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(llr.ref.Append("arn"))
}

func (llr lbListenerRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(llr.ref.Append("id"))
}

func (llr lbListenerRuleAttributes) ListenerArn() terra.StringValue {
	return terra.ReferenceString(llr.ref.Append("listener_arn"))
}

func (llr lbListenerRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(llr.ref.Append("priority"))
}

func (llr lbListenerRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](llr.ref.Append("tags"))
}

func (llr lbListenerRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](llr.ref.Append("tags_all"))
}

func (llr lbListenerRuleAttributes) Action() terra.ListValue[lblistenerrule.ActionAttributes] {
	return terra.ReferenceList[lblistenerrule.ActionAttributes](llr.ref.Append("action"))
}

func (llr lbListenerRuleAttributes) Condition() terra.SetValue[lblistenerrule.ConditionAttributes] {
	return terra.ReferenceSet[lblistenerrule.ConditionAttributes](llr.ref.Append("condition"))
}

type lbListenerRuleState struct {
	Arn         string                          `json:"arn"`
	Id          string                          `json:"id"`
	ListenerArn string                          `json:"listener_arn"`
	Priority    float64                         `json:"priority"`
	Tags        map[string]string               `json:"tags"`
	TagsAll     map[string]string               `json:"tags_all"`
	Action      []lblistenerrule.ActionState    `json:"action"`
	Condition   []lblistenerrule.ConditionState `json:"condition"`
}
