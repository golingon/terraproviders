// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDetectiveGraph(name string, args DetectiveGraphArgs) *DetectiveGraph {
	return &DetectiveGraph{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DetectiveGraph)(nil)

type DetectiveGraph struct {
	Name  string
	Args  DetectiveGraphArgs
	state *detectiveGraphState
}

func (dg *DetectiveGraph) Type() string {
	return "aws_detective_graph"
}

func (dg *DetectiveGraph) LocalName() string {
	return dg.Name
}

func (dg *DetectiveGraph) Configuration() interface{} {
	return dg.Args
}

func (dg *DetectiveGraph) Attributes() detectiveGraphAttributes {
	return detectiveGraphAttributes{ref: terra.ReferenceResource(dg)}
}

func (dg *DetectiveGraph) ImportState(av io.Reader) error {
	dg.state = &detectiveGraphState{}
	if err := json.NewDecoder(av).Decode(dg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dg.Type(), dg.LocalName(), err)
	}
	return nil
}

func (dg *DetectiveGraph) State() (*detectiveGraphState, bool) {
	return dg.state, dg.state != nil
}

func (dg *DetectiveGraph) StateMust() *detectiveGraphState {
	if dg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dg.Type(), dg.LocalName()))
	}
	return dg.state
}

func (dg *DetectiveGraph) DependOn() terra.Reference {
	return terra.ReferenceResource(dg)
}

type DetectiveGraphArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that DetectiveGraph depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type detectiveGraphAttributes struct {
	ref terra.Reference
}

func (dg detectiveGraphAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceString(dg.ref.Append("created_time"))
}

func (dg detectiveGraphAttributes) GraphArn() terra.StringValue {
	return terra.ReferenceString(dg.ref.Append("graph_arn"))
}

func (dg detectiveGraphAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dg.ref.Append("id"))
}

func (dg detectiveGraphAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dg.ref.Append("tags"))
}

func (dg detectiveGraphAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dg.ref.Append("tags_all"))
}

type detectiveGraphState struct {
	CreatedTime string            `json:"created_time"`
	GraphArn    string            `json:"graph_arn"`
	Id          string            `json:"id"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
