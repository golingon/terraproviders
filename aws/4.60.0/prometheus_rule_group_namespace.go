// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrometheusRuleGroupNamespace(name string, args PrometheusRuleGroupNamespaceArgs) *PrometheusRuleGroupNamespace {
	return &PrometheusRuleGroupNamespace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrometheusRuleGroupNamespace)(nil)

type PrometheusRuleGroupNamespace struct {
	Name  string
	Args  PrometheusRuleGroupNamespaceArgs
	state *prometheusRuleGroupNamespaceState
}

func (prgn *PrometheusRuleGroupNamespace) Type() string {
	return "aws_prometheus_rule_group_namespace"
}

func (prgn *PrometheusRuleGroupNamespace) LocalName() string {
	return prgn.Name
}

func (prgn *PrometheusRuleGroupNamespace) Configuration() interface{} {
	return prgn.Args
}

func (prgn *PrometheusRuleGroupNamespace) Attributes() prometheusRuleGroupNamespaceAttributes {
	return prometheusRuleGroupNamespaceAttributes{ref: terra.ReferenceResource(prgn)}
}

func (prgn *PrometheusRuleGroupNamespace) ImportState(av io.Reader) error {
	prgn.state = &prometheusRuleGroupNamespaceState{}
	if err := json.NewDecoder(av).Decode(prgn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", prgn.Type(), prgn.LocalName(), err)
	}
	return nil
}

func (prgn *PrometheusRuleGroupNamespace) State() (*prometheusRuleGroupNamespaceState, bool) {
	return prgn.state, prgn.state != nil
}

func (prgn *PrometheusRuleGroupNamespace) StateMust() *prometheusRuleGroupNamespaceState {
	if prgn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", prgn.Type(), prgn.LocalName()))
	}
	return prgn.state
}

func (prgn *PrometheusRuleGroupNamespace) DependOn() terra.Reference {
	return terra.ReferenceResource(prgn)
}

type PrometheusRuleGroupNamespaceArgs struct {
	// Data: string, required
	Data terra.StringValue `hcl:"data,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// DependsOn contains resources that PrometheusRuleGroupNamespace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type prometheusRuleGroupNamespaceAttributes struct {
	ref terra.Reference
}

func (prgn prometheusRuleGroupNamespaceAttributes) Data() terra.StringValue {
	return terra.ReferenceString(prgn.ref.Append("data"))
}

func (prgn prometheusRuleGroupNamespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(prgn.ref.Append("id"))
}

func (prgn prometheusRuleGroupNamespaceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(prgn.ref.Append("name"))
}

func (prgn prometheusRuleGroupNamespaceAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceString(prgn.ref.Append("workspace_id"))
}

type prometheusRuleGroupNamespaceState struct {
	Data        string `json:"data"`
	Id          string `json:"id"`
	Name        string `json:"name"`
	WorkspaceId string `json:"workspace_id"`
}
