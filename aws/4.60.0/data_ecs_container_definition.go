// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import "github.com/volvo-cars/lingon/pkg/terra"

func NewDataEcsContainerDefinition(name string, args DataEcsContainerDefinitionArgs) *DataEcsContainerDefinition {
	return &DataEcsContainerDefinition{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataEcsContainerDefinition)(nil)

type DataEcsContainerDefinition struct {
	Name string
	Args DataEcsContainerDefinitionArgs
}

func (ecd *DataEcsContainerDefinition) DataSource() string {
	return "aws_ecs_container_definition"
}

func (ecd *DataEcsContainerDefinition) LocalName() string {
	return ecd.Name
}

func (ecd *DataEcsContainerDefinition) Configuration() interface{} {
	return ecd.Args
}

func (ecd *DataEcsContainerDefinition) Attributes() dataEcsContainerDefinitionAttributes {
	return dataEcsContainerDefinitionAttributes{ref: terra.ReferenceDataResource(ecd)}
}

type DataEcsContainerDefinitionArgs struct {
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TaskDefinition: string, required
	TaskDefinition terra.StringValue `hcl:"task_definition,attr" validate:"required"`
}
type dataEcsContainerDefinitionAttributes struct {
	ref terra.Reference
}

func (ecd dataEcsContainerDefinitionAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceString(ecd.ref.Append("container_name"))
}

func (ecd dataEcsContainerDefinitionAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceNumber(ecd.ref.Append("cpu"))
}

func (ecd dataEcsContainerDefinitionAttributes) DisableNetworking() terra.BoolValue {
	return terra.ReferenceBool(ecd.ref.Append("disable_networking"))
}

func (ecd dataEcsContainerDefinitionAttributes) DockerLabels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ecd.ref.Append("docker_labels"))
}

func (ecd dataEcsContainerDefinitionAttributes) Environment() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ecd.ref.Append("environment"))
}

func (ecd dataEcsContainerDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ecd.ref.Append("id"))
}

func (ecd dataEcsContainerDefinitionAttributes) Image() terra.StringValue {
	return terra.ReferenceString(ecd.ref.Append("image"))
}

func (ecd dataEcsContainerDefinitionAttributes) ImageDigest() terra.StringValue {
	return terra.ReferenceString(ecd.ref.Append("image_digest"))
}

func (ecd dataEcsContainerDefinitionAttributes) Memory() terra.NumberValue {
	return terra.ReferenceNumber(ecd.ref.Append("memory"))
}

func (ecd dataEcsContainerDefinitionAttributes) MemoryReservation() terra.NumberValue {
	return terra.ReferenceNumber(ecd.ref.Append("memory_reservation"))
}

func (ecd dataEcsContainerDefinitionAttributes) TaskDefinition() terra.StringValue {
	return terra.ReferenceString(ecd.ref.Append("task_definition"))
}
