// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	wafv2rulegroup "github.com/golingon/terraproviders/aws/4.60.0/wafv2rulegroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWafv2RuleGroup(name string, args Wafv2RuleGroupArgs) *Wafv2RuleGroup {
	return &Wafv2RuleGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Wafv2RuleGroup)(nil)

type Wafv2RuleGroup struct {
	Name  string
	Args  Wafv2RuleGroupArgs
	state *wafv2RuleGroupState
}

func (wrg *Wafv2RuleGroup) Type() string {
	return "aws_wafv2_rule_group"
}

func (wrg *Wafv2RuleGroup) LocalName() string {
	return wrg.Name
}

func (wrg *Wafv2RuleGroup) Configuration() interface{} {
	return wrg.Args
}

func (wrg *Wafv2RuleGroup) Attributes() wafv2RuleGroupAttributes {
	return wafv2RuleGroupAttributes{ref: terra.ReferenceResource(wrg)}
}

func (wrg *Wafv2RuleGroup) ImportState(av io.Reader) error {
	wrg.state = &wafv2RuleGroupState{}
	if err := json.NewDecoder(av).Decode(wrg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wrg.Type(), wrg.LocalName(), err)
	}
	return nil
}

func (wrg *Wafv2RuleGroup) State() (*wafv2RuleGroupState, bool) {
	return wrg.state, wrg.state != nil
}

func (wrg *Wafv2RuleGroup) StateMust() *wafv2RuleGroupState {
	if wrg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wrg.Type(), wrg.LocalName()))
	}
	return wrg.state
}

func (wrg *Wafv2RuleGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(wrg)
}

type Wafv2RuleGroupArgs struct {
	// Capacity: number, required
	Capacity terra.NumberValue `hcl:"capacity,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CustomResponseBody: min=0
	CustomResponseBody []wafv2rulegroup.CustomResponseBody `hcl:"custom_response_body,block" validate:"min=0"`
	// Rule: min=0
	Rule []wafv2rulegroup.Rule `hcl:"rule,block" validate:"min=0"`
	// VisibilityConfig: required
	VisibilityConfig *wafv2rulegroup.VisibilityConfig `hcl:"visibility_config,block" validate:"required"`
	// DependsOn contains resources that Wafv2RuleGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type wafv2RuleGroupAttributes struct {
	ref terra.Reference
}

func (wrg wafv2RuleGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("arn"))
}

func (wrg wafv2RuleGroupAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceNumber(wrg.ref.Append("capacity"))
}

func (wrg wafv2RuleGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("description"))
}

func (wrg wafv2RuleGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("id"))
}

func (wrg wafv2RuleGroupAttributes) LockToken() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("lock_token"))
}

func (wrg wafv2RuleGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("name"))
}

func (wrg wafv2RuleGroupAttributes) Scope() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("scope"))
}

func (wrg wafv2RuleGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wrg.ref.Append("tags"))
}

func (wrg wafv2RuleGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wrg.ref.Append("tags_all"))
}

func (wrg wafv2RuleGroupAttributes) CustomResponseBody() terra.SetValue[wafv2rulegroup.CustomResponseBodyAttributes] {
	return terra.ReferenceSet[wafv2rulegroup.CustomResponseBodyAttributes](wrg.ref.Append("custom_response_body"))
}

func (wrg wafv2RuleGroupAttributes) Rule() terra.SetValue[wafv2rulegroup.RuleAttributes] {
	return terra.ReferenceSet[wafv2rulegroup.RuleAttributes](wrg.ref.Append("rule"))
}

func (wrg wafv2RuleGroupAttributes) VisibilityConfig() terra.ListValue[wafv2rulegroup.VisibilityConfigAttributes] {
	return terra.ReferenceList[wafv2rulegroup.VisibilityConfigAttributes](wrg.ref.Append("visibility_config"))
}

type wafv2RuleGroupState struct {
	Arn                string                                   `json:"arn"`
	Capacity           float64                                  `json:"capacity"`
	Description        string                                   `json:"description"`
	Id                 string                                   `json:"id"`
	LockToken          string                                   `json:"lock_token"`
	Name               string                                   `json:"name"`
	Scope              string                                   `json:"scope"`
	Tags               map[string]string                        `json:"tags"`
	TagsAll            map[string]string                        `json:"tags_all"`
	CustomResponseBody []wafv2rulegroup.CustomResponseBodyState `json:"custom_response_body"`
	Rule               []wafv2rulegroup.RuleState               `json:"rule"`
	VisibilityConfig   []wafv2rulegroup.VisibilityConfigState   `json:"visibility_config"`
}
