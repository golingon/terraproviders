// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDmsCertificate(name string, args DmsCertificateArgs) *DmsCertificate {
	return &DmsCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DmsCertificate)(nil)

type DmsCertificate struct {
	Name  string
	Args  DmsCertificateArgs
	state *dmsCertificateState
}

func (dc *DmsCertificate) Type() string {
	return "aws_dms_certificate"
}

func (dc *DmsCertificate) LocalName() string {
	return dc.Name
}

func (dc *DmsCertificate) Configuration() interface{} {
	return dc.Args
}

func (dc *DmsCertificate) Attributes() dmsCertificateAttributes {
	return dmsCertificateAttributes{ref: terra.ReferenceResource(dc)}
}

func (dc *DmsCertificate) ImportState(av io.Reader) error {
	dc.state = &dmsCertificateState{}
	if err := json.NewDecoder(av).Decode(dc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dc.Type(), dc.LocalName(), err)
	}
	return nil
}

func (dc *DmsCertificate) State() (*dmsCertificateState, bool) {
	return dc.state, dc.state != nil
}

func (dc *DmsCertificate) StateMust() *dmsCertificateState {
	if dc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dc.Type(), dc.LocalName()))
	}
	return dc.state
}

func (dc *DmsCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(dc)
}

type DmsCertificateArgs struct {
	// CertificateId: string, required
	CertificateId terra.StringValue `hcl:"certificate_id,attr" validate:"required"`
	// CertificatePem: string, optional
	CertificatePem terra.StringValue `hcl:"certificate_pem,attr"`
	// CertificateWallet: string, optional
	CertificateWallet terra.StringValue `hcl:"certificate_wallet,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that DmsCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dmsCertificateAttributes struct {
	ref terra.Reference
}

func (dc dmsCertificateAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("certificate_arn"))
}

func (dc dmsCertificateAttributes) CertificateId() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("certificate_id"))
}

func (dc dmsCertificateAttributes) CertificatePem() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("certificate_pem"))
}

func (dc dmsCertificateAttributes) CertificateWallet() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("certificate_wallet"))
}

func (dc dmsCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("id"))
}

func (dc dmsCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dc.ref.Append("tags"))
}

func (dc dmsCertificateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dc.ref.Append("tags_all"))
}

type dmsCertificateState struct {
	CertificateArn    string            `json:"certificate_arn"`
	CertificateId     string            `json:"certificate_id"`
	CertificatePem    string            `json:"certificate_pem"`
	CertificateWallet string            `json:"certificate_wallet"`
	Id                string            `json:"id"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
}
