// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiGatewayClientCertificate(name string, args ApiGatewayClientCertificateArgs) *ApiGatewayClientCertificate {
	return &ApiGatewayClientCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayClientCertificate)(nil)

type ApiGatewayClientCertificate struct {
	Name  string
	Args  ApiGatewayClientCertificateArgs
	state *apiGatewayClientCertificateState
}

func (agcc *ApiGatewayClientCertificate) Type() string {
	return "aws_api_gateway_client_certificate"
}

func (agcc *ApiGatewayClientCertificate) LocalName() string {
	return agcc.Name
}

func (agcc *ApiGatewayClientCertificate) Configuration() interface{} {
	return agcc.Args
}

func (agcc *ApiGatewayClientCertificate) Attributes() apiGatewayClientCertificateAttributes {
	return apiGatewayClientCertificateAttributes{ref: terra.ReferenceResource(agcc)}
}

func (agcc *ApiGatewayClientCertificate) ImportState(av io.Reader) error {
	agcc.state = &apiGatewayClientCertificateState{}
	if err := json.NewDecoder(av).Decode(agcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agcc.Type(), agcc.LocalName(), err)
	}
	return nil
}

func (agcc *ApiGatewayClientCertificate) State() (*apiGatewayClientCertificateState, bool) {
	return agcc.state, agcc.state != nil
}

func (agcc *ApiGatewayClientCertificate) StateMust() *apiGatewayClientCertificateState {
	if agcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agcc.Type(), agcc.LocalName()))
	}
	return agcc.state
}

func (agcc *ApiGatewayClientCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(agcc)
}

type ApiGatewayClientCertificateArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that ApiGatewayClientCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiGatewayClientCertificateAttributes struct {
	ref terra.Reference
}

func (agcc apiGatewayClientCertificateAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(agcc.ref.Append("arn"))
}

func (agcc apiGatewayClientCertificateAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceString(agcc.ref.Append("created_date"))
}

func (agcc apiGatewayClientCertificateAttributes) Description() terra.StringValue {
	return terra.ReferenceString(agcc.ref.Append("description"))
}

func (agcc apiGatewayClientCertificateAttributes) ExpirationDate() terra.StringValue {
	return terra.ReferenceString(agcc.ref.Append("expiration_date"))
}

func (agcc apiGatewayClientCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(agcc.ref.Append("id"))
}

func (agcc apiGatewayClientCertificateAttributes) PemEncodedCertificate() terra.StringValue {
	return terra.ReferenceString(agcc.ref.Append("pem_encoded_certificate"))
}

func (agcc apiGatewayClientCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agcc.ref.Append("tags"))
}

func (agcc apiGatewayClientCertificateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agcc.ref.Append("tags_all"))
}

type apiGatewayClientCertificateState struct {
	Arn                   string            `json:"arn"`
	CreatedDate           string            `json:"created_date"`
	Description           string            `json:"description"`
	ExpirationDate        string            `json:"expiration_date"`
	Id                    string            `json:"id"`
	PemEncodedCertificate string            `json:"pem_encoded_certificate"`
	Tags                  map[string]string `json:"tags"`
	TagsAll               map[string]string `json:"tags_all"`
}
