// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataec2instancetype "github.com/golingon/terraproviders/aws/4.60.0/dataec2instancetype"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataEc2InstanceType(name string, args DataEc2InstanceTypeArgs) *DataEc2InstanceType {
	return &DataEc2InstanceType{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataEc2InstanceType)(nil)

type DataEc2InstanceType struct {
	Name string
	Args DataEc2InstanceTypeArgs
}

func (eit *DataEc2InstanceType) DataSource() string {
	return "aws_ec2_instance_type"
}

func (eit *DataEc2InstanceType) LocalName() string {
	return eit.Name
}

func (eit *DataEc2InstanceType) Configuration() interface{} {
	return eit.Args
}

func (eit *DataEc2InstanceType) Attributes() dataEc2InstanceTypeAttributes {
	return dataEc2InstanceTypeAttributes{ref: terra.ReferenceDataResource(eit)}
}

type DataEc2InstanceTypeArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// Fpgas: min=0
	Fpgas []dataec2instancetype.Fpgas `hcl:"fpgas,block" validate:"min=0"`
	// Gpus: min=0
	Gpus []dataec2instancetype.Gpus `hcl:"gpus,block" validate:"min=0"`
	// InferenceAccelerators: min=0
	InferenceAccelerators []dataec2instancetype.InferenceAccelerators `hcl:"inference_accelerators,block" validate:"min=0"`
	// InstanceDisks: min=0
	InstanceDisks []dataec2instancetype.InstanceDisks `hcl:"instance_disks,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dataec2instancetype.Timeouts `hcl:"timeouts,block"`
}
type dataEc2InstanceTypeAttributes struct {
	ref terra.Reference
}

func (eit dataEc2InstanceTypeAttributes) AutoRecoverySupported() terra.BoolValue {
	return terra.ReferenceBool(eit.ref.Append("auto_recovery_supported"))
}

func (eit dataEc2InstanceTypeAttributes) BareMetal() terra.BoolValue {
	return terra.ReferenceBool(eit.ref.Append("bare_metal"))
}

func (eit dataEc2InstanceTypeAttributes) BurstablePerformanceSupported() terra.BoolValue {
	return terra.ReferenceBool(eit.ref.Append("burstable_performance_supported"))
}

func (eit dataEc2InstanceTypeAttributes) CurrentGeneration() terra.BoolValue {
	return terra.ReferenceBool(eit.ref.Append("current_generation"))
}

func (eit dataEc2InstanceTypeAttributes) DedicatedHostsSupported() terra.BoolValue {
	return terra.ReferenceBool(eit.ref.Append("dedicated_hosts_supported"))
}

func (eit dataEc2InstanceTypeAttributes) DefaultCores() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("default_cores"))
}

func (eit dataEc2InstanceTypeAttributes) DefaultThreadsPerCore() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("default_threads_per_core"))
}

func (eit dataEc2InstanceTypeAttributes) DefaultVcpus() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("default_vcpus"))
}

func (eit dataEc2InstanceTypeAttributes) EbsEncryptionSupport() terra.StringValue {
	return terra.ReferenceString(eit.ref.Append("ebs_encryption_support"))
}

func (eit dataEc2InstanceTypeAttributes) EbsNvmeSupport() terra.StringValue {
	return terra.ReferenceString(eit.ref.Append("ebs_nvme_support"))
}

func (eit dataEc2InstanceTypeAttributes) EbsOptimizedSupport() terra.StringValue {
	return terra.ReferenceString(eit.ref.Append("ebs_optimized_support"))
}

func (eit dataEc2InstanceTypeAttributes) EbsPerformanceBaselineBandwidth() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("ebs_performance_baseline_bandwidth"))
}

func (eit dataEc2InstanceTypeAttributes) EbsPerformanceBaselineIops() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("ebs_performance_baseline_iops"))
}

func (eit dataEc2InstanceTypeAttributes) EbsPerformanceBaselineThroughput() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("ebs_performance_baseline_throughput"))
}

func (eit dataEc2InstanceTypeAttributes) EbsPerformanceMaximumBandwidth() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("ebs_performance_maximum_bandwidth"))
}

func (eit dataEc2InstanceTypeAttributes) EbsPerformanceMaximumIops() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("ebs_performance_maximum_iops"))
}

func (eit dataEc2InstanceTypeAttributes) EbsPerformanceMaximumThroughput() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("ebs_performance_maximum_throughput"))
}

func (eit dataEc2InstanceTypeAttributes) EfaSupported() terra.BoolValue {
	return terra.ReferenceBool(eit.ref.Append("efa_supported"))
}

func (eit dataEc2InstanceTypeAttributes) EnaSupport() terra.StringValue {
	return terra.ReferenceString(eit.ref.Append("ena_support"))
}

func (eit dataEc2InstanceTypeAttributes) EncryptionInTransitSupported() terra.BoolValue {
	return terra.ReferenceBool(eit.ref.Append("encryption_in_transit_supported"))
}

func (eit dataEc2InstanceTypeAttributes) FreeTierEligible() terra.BoolValue {
	return terra.ReferenceBool(eit.ref.Append("free_tier_eligible"))
}

func (eit dataEc2InstanceTypeAttributes) HibernationSupported() terra.BoolValue {
	return terra.ReferenceBool(eit.ref.Append("hibernation_supported"))
}

func (eit dataEc2InstanceTypeAttributes) Hypervisor() terra.StringValue {
	return terra.ReferenceString(eit.ref.Append("hypervisor"))
}

func (eit dataEc2InstanceTypeAttributes) Id() terra.StringValue {
	return terra.ReferenceString(eit.ref.Append("id"))
}

func (eit dataEc2InstanceTypeAttributes) InstanceStorageSupported() terra.BoolValue {
	return terra.ReferenceBool(eit.ref.Append("instance_storage_supported"))
}

func (eit dataEc2InstanceTypeAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceString(eit.ref.Append("instance_type"))
}

func (eit dataEc2InstanceTypeAttributes) Ipv6Supported() terra.BoolValue {
	return terra.ReferenceBool(eit.ref.Append("ipv6_supported"))
}

func (eit dataEc2InstanceTypeAttributes) MaximumIpv4AddressesPerInterface() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("maximum_ipv4_addresses_per_interface"))
}

func (eit dataEc2InstanceTypeAttributes) MaximumIpv6AddressesPerInterface() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("maximum_ipv6_addresses_per_interface"))
}

func (eit dataEc2InstanceTypeAttributes) MaximumNetworkInterfaces() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("maximum_network_interfaces"))
}

func (eit dataEc2InstanceTypeAttributes) MemorySize() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("memory_size"))
}

func (eit dataEc2InstanceTypeAttributes) NetworkPerformance() terra.StringValue {
	return terra.ReferenceString(eit.ref.Append("network_performance"))
}

func (eit dataEc2InstanceTypeAttributes) SupportedArchitectures() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](eit.ref.Append("supported_architectures"))
}

func (eit dataEc2InstanceTypeAttributes) SupportedPlacementStrategies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](eit.ref.Append("supported_placement_strategies"))
}

func (eit dataEc2InstanceTypeAttributes) SupportedRootDeviceTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](eit.ref.Append("supported_root_device_types"))
}

func (eit dataEc2InstanceTypeAttributes) SupportedUsagesClasses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](eit.ref.Append("supported_usages_classes"))
}

func (eit dataEc2InstanceTypeAttributes) SupportedVirtualizationTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](eit.ref.Append("supported_virtualization_types"))
}

func (eit dataEc2InstanceTypeAttributes) SustainedClockSpeed() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("sustained_clock_speed"))
}

func (eit dataEc2InstanceTypeAttributes) TotalFpgaMemory() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("total_fpga_memory"))
}

func (eit dataEc2InstanceTypeAttributes) TotalGpuMemory() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("total_gpu_memory"))
}

func (eit dataEc2InstanceTypeAttributes) TotalInstanceStorage() terra.NumberValue {
	return terra.ReferenceNumber(eit.ref.Append("total_instance_storage"))
}

func (eit dataEc2InstanceTypeAttributes) ValidCores() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceList[terra.NumberValue](eit.ref.Append("valid_cores"))
}

func (eit dataEc2InstanceTypeAttributes) ValidThreadsPerCore() terra.ListValue[terra.NumberValue] {
	return terra.ReferenceList[terra.NumberValue](eit.ref.Append("valid_threads_per_core"))
}

func (eit dataEc2InstanceTypeAttributes) Fpgas() terra.SetValue[dataec2instancetype.FpgasAttributes] {
	return terra.ReferenceSet[dataec2instancetype.FpgasAttributes](eit.ref.Append("fpgas"))
}

func (eit dataEc2InstanceTypeAttributes) Gpus() terra.SetValue[dataec2instancetype.GpusAttributes] {
	return terra.ReferenceSet[dataec2instancetype.GpusAttributes](eit.ref.Append("gpus"))
}

func (eit dataEc2InstanceTypeAttributes) InferenceAccelerators() terra.SetValue[dataec2instancetype.InferenceAcceleratorsAttributes] {
	return terra.ReferenceSet[dataec2instancetype.InferenceAcceleratorsAttributes](eit.ref.Append("inference_accelerators"))
}

func (eit dataEc2InstanceTypeAttributes) InstanceDisks() terra.SetValue[dataec2instancetype.InstanceDisksAttributes] {
	return terra.ReferenceSet[dataec2instancetype.InstanceDisksAttributes](eit.ref.Append("instance_disks"))
}

func (eit dataEc2InstanceTypeAttributes) Timeouts() dataec2instancetype.TimeoutsAttributes {
	return terra.ReferenceSingle[dataec2instancetype.TimeoutsAttributes](eit.ref.Append("timeouts"))
}
