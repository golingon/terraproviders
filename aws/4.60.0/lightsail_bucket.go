// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLightsailBucket(name string, args LightsailBucketArgs) *LightsailBucket {
	return &LightsailBucket{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LightsailBucket)(nil)

type LightsailBucket struct {
	Name  string
	Args  LightsailBucketArgs
	state *lightsailBucketState
}

func (lb *LightsailBucket) Type() string {
	return "aws_lightsail_bucket"
}

func (lb *LightsailBucket) LocalName() string {
	return lb.Name
}

func (lb *LightsailBucket) Configuration() interface{} {
	return lb.Args
}

func (lb *LightsailBucket) Attributes() lightsailBucketAttributes {
	return lightsailBucketAttributes{ref: terra.ReferenceResource(lb)}
}

func (lb *LightsailBucket) ImportState(av io.Reader) error {
	lb.state = &lightsailBucketState{}
	if err := json.NewDecoder(av).Decode(lb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lb.Type(), lb.LocalName(), err)
	}
	return nil
}

func (lb *LightsailBucket) State() (*lightsailBucketState, bool) {
	return lb.state, lb.state != nil
}

func (lb *LightsailBucket) StateMust() *lightsailBucketState {
	if lb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lb.Type(), lb.LocalName()))
	}
	return lb.state
}

func (lb *LightsailBucket) DependOn() terra.Reference {
	return terra.ReferenceResource(lb)
}

type LightsailBucketArgs struct {
	// BundleId: string, required
	BundleId terra.StringValue `hcl:"bundle_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that LightsailBucket depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lightsailBucketAttributes struct {
	ref terra.Reference
}

func (lb lightsailBucketAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(lb.ref.Append("arn"))
}

func (lb lightsailBucketAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceString(lb.ref.Append("availability_zone"))
}

func (lb lightsailBucketAttributes) BundleId() terra.StringValue {
	return terra.ReferenceString(lb.ref.Append("bundle_id"))
}

func (lb lightsailBucketAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceString(lb.ref.Append("created_at"))
}

func (lb lightsailBucketAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lb.ref.Append("id"))
}

func (lb lightsailBucketAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lb.ref.Append("name"))
}

func (lb lightsailBucketAttributes) Region() terra.StringValue {
	return terra.ReferenceString(lb.ref.Append("region"))
}

func (lb lightsailBucketAttributes) SupportCode() terra.StringValue {
	return terra.ReferenceString(lb.ref.Append("support_code"))
}

func (lb lightsailBucketAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lb.ref.Append("tags"))
}

func (lb lightsailBucketAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lb.ref.Append("tags_all"))
}

func (lb lightsailBucketAttributes) Url() terra.StringValue {
	return terra.ReferenceString(lb.ref.Append("url"))
}

type lightsailBucketState struct {
	Arn              string            `json:"arn"`
	AvailabilityZone string            `json:"availability_zone"`
	BundleId         string            `json:"bundle_id"`
	CreatedAt        string            `json:"created_at"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	Region           string            `json:"region"`
	SupportCode      string            `json:"support_code"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
	Url              string            `json:"url"`
}
