// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataconnectroutingprofile "github.com/golingon/terraproviders/aws/4.60.0/dataconnectroutingprofile"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataConnectRoutingProfile(name string, args DataConnectRoutingProfileArgs) *DataConnectRoutingProfile {
	return &DataConnectRoutingProfile{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataConnectRoutingProfile)(nil)

type DataConnectRoutingProfile struct {
	Name string
	Args DataConnectRoutingProfileArgs
}

func (crp *DataConnectRoutingProfile) DataSource() string {
	return "aws_connect_routing_profile"
}

func (crp *DataConnectRoutingProfile) LocalName() string {
	return crp.Name
}

func (crp *DataConnectRoutingProfile) Configuration() interface{} {
	return crp.Args
}

func (crp *DataConnectRoutingProfile) Attributes() dataConnectRoutingProfileAttributes {
	return dataConnectRoutingProfileAttributes{ref: terra.ReferenceDataResource(crp)}
}

type DataConnectRoutingProfileArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// RoutingProfileId: string, optional
	RoutingProfileId terra.StringValue `hcl:"routing_profile_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// MediaConcurrencies: min=0
	MediaConcurrencies []dataconnectroutingprofile.MediaConcurrencies `hcl:"media_concurrencies,block" validate:"min=0"`
	// QueueConfigs: min=0
	QueueConfigs []dataconnectroutingprofile.QueueConfigs `hcl:"queue_configs,block" validate:"min=0"`
}
type dataConnectRoutingProfileAttributes struct {
	ref terra.Reference
}

func (crp dataConnectRoutingProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("arn"))
}

func (crp dataConnectRoutingProfileAttributes) DefaultOutboundQueueId() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("default_outbound_queue_id"))
}

func (crp dataConnectRoutingProfileAttributes) Description() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("description"))
}

func (crp dataConnectRoutingProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("id"))
}

func (crp dataConnectRoutingProfileAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("instance_id"))
}

func (crp dataConnectRoutingProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("name"))
}

func (crp dataConnectRoutingProfileAttributes) RoutingProfileId() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("routing_profile_id"))
}

func (crp dataConnectRoutingProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](crp.ref.Append("tags"))
}

func (crp dataConnectRoutingProfileAttributes) MediaConcurrencies() terra.SetValue[dataconnectroutingprofile.MediaConcurrenciesAttributes] {
	return terra.ReferenceSet[dataconnectroutingprofile.MediaConcurrenciesAttributes](crp.ref.Append("media_concurrencies"))
}

func (crp dataConnectRoutingProfileAttributes) QueueConfigs() terra.SetValue[dataconnectroutingprofile.QueueConfigsAttributes] {
	return terra.ReferenceSet[dataconnectroutingprofile.QueueConfigsAttributes](crp.ref.Append("queue_configs"))
}
