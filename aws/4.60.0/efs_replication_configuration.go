// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	efsreplicationconfiguration "github.com/golingon/terraproviders/aws/4.60.0/efsreplicationconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEfsReplicationConfiguration(name string, args EfsReplicationConfigurationArgs) *EfsReplicationConfiguration {
	return &EfsReplicationConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EfsReplicationConfiguration)(nil)

type EfsReplicationConfiguration struct {
	Name  string
	Args  EfsReplicationConfigurationArgs
	state *efsReplicationConfigurationState
}

func (erc *EfsReplicationConfiguration) Type() string {
	return "aws_efs_replication_configuration"
}

func (erc *EfsReplicationConfiguration) LocalName() string {
	return erc.Name
}

func (erc *EfsReplicationConfiguration) Configuration() interface{} {
	return erc.Args
}

func (erc *EfsReplicationConfiguration) Attributes() efsReplicationConfigurationAttributes {
	return efsReplicationConfigurationAttributes{ref: terra.ReferenceResource(erc)}
}

func (erc *EfsReplicationConfiguration) ImportState(av io.Reader) error {
	erc.state = &efsReplicationConfigurationState{}
	if err := json.NewDecoder(av).Decode(erc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", erc.Type(), erc.LocalName(), err)
	}
	return nil
}

func (erc *EfsReplicationConfiguration) State() (*efsReplicationConfigurationState, bool) {
	return erc.state, erc.state != nil
}

func (erc *EfsReplicationConfiguration) StateMust() *efsReplicationConfigurationState {
	if erc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", erc.Type(), erc.LocalName()))
	}
	return erc.state
}

func (erc *EfsReplicationConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(erc)
}

type EfsReplicationConfigurationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SourceFileSystemId: string, required
	SourceFileSystemId terra.StringValue `hcl:"source_file_system_id,attr" validate:"required"`
	// Destination: required
	Destination *efsreplicationconfiguration.Destination `hcl:"destination,block" validate:"required"`
	// Timeouts: optional
	Timeouts *efsreplicationconfiguration.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EfsReplicationConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type efsReplicationConfigurationAttributes struct {
	ref terra.Reference
}

func (erc efsReplicationConfigurationAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceString(erc.ref.Append("creation_time"))
}

func (erc efsReplicationConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(erc.ref.Append("id"))
}

func (erc efsReplicationConfigurationAttributes) OriginalSourceFileSystemArn() terra.StringValue {
	return terra.ReferenceString(erc.ref.Append("original_source_file_system_arn"))
}

func (erc efsReplicationConfigurationAttributes) SourceFileSystemArn() terra.StringValue {
	return terra.ReferenceString(erc.ref.Append("source_file_system_arn"))
}

func (erc efsReplicationConfigurationAttributes) SourceFileSystemId() terra.StringValue {
	return terra.ReferenceString(erc.ref.Append("source_file_system_id"))
}

func (erc efsReplicationConfigurationAttributes) SourceFileSystemRegion() terra.StringValue {
	return terra.ReferenceString(erc.ref.Append("source_file_system_region"))
}

func (erc efsReplicationConfigurationAttributes) Destination() terra.ListValue[efsreplicationconfiguration.DestinationAttributes] {
	return terra.ReferenceList[efsreplicationconfiguration.DestinationAttributes](erc.ref.Append("destination"))
}

func (erc efsReplicationConfigurationAttributes) Timeouts() efsreplicationconfiguration.TimeoutsAttributes {
	return terra.ReferenceSingle[efsreplicationconfiguration.TimeoutsAttributes](erc.ref.Append("timeouts"))
}

type efsReplicationConfigurationState struct {
	CreationTime                string                                         `json:"creation_time"`
	Id                          string                                         `json:"id"`
	OriginalSourceFileSystemArn string                                         `json:"original_source_file_system_arn"`
	SourceFileSystemArn         string                                         `json:"source_file_system_arn"`
	SourceFileSystemId          string                                         `json:"source_file_system_id"`
	SourceFileSystemRegion      string                                         `json:"source_file_system_region"`
	Destination                 []efsreplicationconfiguration.DestinationState `json:"destination"`
	Timeouts                    *efsreplicationconfiguration.TimeoutsState     `json:"timeouts"`
}
