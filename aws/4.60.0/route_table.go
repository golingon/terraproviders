// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	routetable "github.com/golingon/terraproviders/aws/4.60.0/routetable"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRouteTable(name string, args RouteTableArgs) *RouteTable {
	return &RouteTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RouteTable)(nil)

type RouteTable struct {
	Name  string
	Args  RouteTableArgs
	state *routeTableState
}

func (rt *RouteTable) Type() string {
	return "aws_route_table"
}

func (rt *RouteTable) LocalName() string {
	return rt.Name
}

func (rt *RouteTable) Configuration() interface{} {
	return rt.Args
}

func (rt *RouteTable) Attributes() routeTableAttributes {
	return routeTableAttributes{ref: terra.ReferenceResource(rt)}
}

func (rt *RouteTable) ImportState(av io.Reader) error {
	rt.state = &routeTableState{}
	if err := json.NewDecoder(av).Decode(rt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rt.Type(), rt.LocalName(), err)
	}
	return nil
}

func (rt *RouteTable) State() (*routeTableState, bool) {
	return rt.state, rt.state != nil
}

func (rt *RouteTable) StateMust() *routeTableState {
	if rt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rt.Type(), rt.LocalName()))
	}
	return rt.state
}

func (rt *RouteTable) DependOn() terra.Reference {
	return terra.ReferenceResource(rt)
}

type RouteTableArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PropagatingVgws: set of string, optional
	PropagatingVgws terra.SetValue[terra.StringValue] `hcl:"propagating_vgws,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// Route: min=0
	Route []routetable.Route `hcl:"route,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *routetable.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RouteTable depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type routeTableAttributes struct {
	ref terra.Reference
}

func (rt routeTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("arn"))
}

func (rt routeTableAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("id"))
}

func (rt routeTableAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("owner_id"))
}

func (rt routeTableAttributes) PropagatingVgws() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rt.ref.Append("propagating_vgws"))
}

func (rt routeTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rt.ref.Append("tags"))
}

func (rt routeTableAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rt.ref.Append("tags_all"))
}

func (rt routeTableAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("vpc_id"))
}

func (rt routeTableAttributes) Route() terra.SetValue[routetable.RouteAttributes] {
	return terra.ReferenceSet[routetable.RouteAttributes](rt.ref.Append("route"))
}

func (rt routeTableAttributes) Timeouts() routetable.TimeoutsAttributes {
	return terra.ReferenceSingle[routetable.TimeoutsAttributes](rt.ref.Append("timeouts"))
}

type routeTableState struct {
	Arn             string                    `json:"arn"`
	Id              string                    `json:"id"`
	OwnerId         string                    `json:"owner_id"`
	PropagatingVgws []string                  `json:"propagating_vgws"`
	Tags            map[string]string         `json:"tags"`
	TagsAll         map[string]string         `json:"tags_all"`
	VpcId           string                    `json:"vpc_id"`
	Route           []routetable.RouteState   `json:"route"`
	Timeouts        *routetable.TimeoutsState `json:"timeouts"`
}
