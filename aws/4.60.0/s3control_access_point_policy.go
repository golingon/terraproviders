// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3ControlAccessPointPolicy(name string, args S3ControlAccessPointPolicyArgs) *S3ControlAccessPointPolicy {
	return &S3ControlAccessPointPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3ControlAccessPointPolicy)(nil)

type S3ControlAccessPointPolicy struct {
	Name  string
	Args  S3ControlAccessPointPolicyArgs
	state *s3ControlAccessPointPolicyState
}

func (sapp *S3ControlAccessPointPolicy) Type() string {
	return "aws_s3control_access_point_policy"
}

func (sapp *S3ControlAccessPointPolicy) LocalName() string {
	return sapp.Name
}

func (sapp *S3ControlAccessPointPolicy) Configuration() interface{} {
	return sapp.Args
}

func (sapp *S3ControlAccessPointPolicy) Attributes() s3ControlAccessPointPolicyAttributes {
	return s3ControlAccessPointPolicyAttributes{ref: terra.ReferenceResource(sapp)}
}

func (sapp *S3ControlAccessPointPolicy) ImportState(av io.Reader) error {
	sapp.state = &s3ControlAccessPointPolicyState{}
	if err := json.NewDecoder(av).Decode(sapp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sapp.Type(), sapp.LocalName(), err)
	}
	return nil
}

func (sapp *S3ControlAccessPointPolicy) State() (*s3ControlAccessPointPolicyState, bool) {
	return sapp.state, sapp.state != nil
}

func (sapp *S3ControlAccessPointPolicy) StateMust() *s3ControlAccessPointPolicyState {
	if sapp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sapp.Type(), sapp.LocalName()))
	}
	return sapp.state
}

func (sapp *S3ControlAccessPointPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(sapp)
}

type S3ControlAccessPointPolicyArgs struct {
	// AccessPointArn: string, required
	AccessPointArn terra.StringValue `hcl:"access_point_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// DependsOn contains resources that S3ControlAccessPointPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3ControlAccessPointPolicyAttributes struct {
	ref terra.Reference
}

func (sapp s3ControlAccessPointPolicyAttributes) AccessPointArn() terra.StringValue {
	return terra.ReferenceString(sapp.ref.Append("access_point_arn"))
}

func (sapp s3ControlAccessPointPolicyAttributes) HasPublicAccessPolicy() terra.BoolValue {
	return terra.ReferenceBool(sapp.ref.Append("has_public_access_policy"))
}

func (sapp s3ControlAccessPointPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sapp.ref.Append("id"))
}

func (sapp s3ControlAccessPointPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(sapp.ref.Append("policy"))
}

type s3ControlAccessPointPolicyState struct {
	AccessPointArn        string `json:"access_point_arn"`
	HasPublicAccessPolicy bool   `json:"has_public_access_policy"`
	Id                    string `json:"id"`
	Policy                string `json:"policy"`
}
