// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53VpcAssociationAuthorization(name string, args Route53VpcAssociationAuthorizationArgs) *Route53VpcAssociationAuthorization {
	return &Route53VpcAssociationAuthorization{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53VpcAssociationAuthorization)(nil)

type Route53VpcAssociationAuthorization struct {
	Name  string
	Args  Route53VpcAssociationAuthorizationArgs
	state *route53VpcAssociationAuthorizationState
}

func (rvaa *Route53VpcAssociationAuthorization) Type() string {
	return "aws_route53_vpc_association_authorization"
}

func (rvaa *Route53VpcAssociationAuthorization) LocalName() string {
	return rvaa.Name
}

func (rvaa *Route53VpcAssociationAuthorization) Configuration() interface{} {
	return rvaa.Args
}

func (rvaa *Route53VpcAssociationAuthorization) Attributes() route53VpcAssociationAuthorizationAttributes {
	return route53VpcAssociationAuthorizationAttributes{ref: terra.ReferenceResource(rvaa)}
}

func (rvaa *Route53VpcAssociationAuthorization) ImportState(av io.Reader) error {
	rvaa.state = &route53VpcAssociationAuthorizationState{}
	if err := json.NewDecoder(av).Decode(rvaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rvaa.Type(), rvaa.LocalName(), err)
	}
	return nil
}

func (rvaa *Route53VpcAssociationAuthorization) State() (*route53VpcAssociationAuthorizationState, bool) {
	return rvaa.state, rvaa.state != nil
}

func (rvaa *Route53VpcAssociationAuthorization) StateMust() *route53VpcAssociationAuthorizationState {
	if rvaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rvaa.Type(), rvaa.LocalName()))
	}
	return rvaa.state
}

func (rvaa *Route53VpcAssociationAuthorization) DependOn() terra.Reference {
	return terra.ReferenceResource(rvaa)
}

type Route53VpcAssociationAuthorizationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// VpcRegion: string, optional
	VpcRegion terra.StringValue `hcl:"vpc_region,attr"`
	// ZoneId: string, required
	ZoneId terra.StringValue `hcl:"zone_id,attr" validate:"required"`
	// DependsOn contains resources that Route53VpcAssociationAuthorization depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53VpcAssociationAuthorizationAttributes struct {
	ref terra.Reference
}

func (rvaa route53VpcAssociationAuthorizationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rvaa.ref.Append("id"))
}

func (rvaa route53VpcAssociationAuthorizationAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(rvaa.ref.Append("vpc_id"))
}

func (rvaa route53VpcAssociationAuthorizationAttributes) VpcRegion() terra.StringValue {
	return terra.ReferenceString(rvaa.ref.Append("vpc_region"))
}

func (rvaa route53VpcAssociationAuthorizationAttributes) ZoneId() terra.StringValue {
	return terra.ReferenceString(rvaa.ref.Append("zone_id"))
}

type route53VpcAssociationAuthorizationState struct {
	Id        string `json:"id"`
	VpcId     string `json:"vpc_id"`
	VpcRegion string `json:"vpc_region"`
	ZoneId    string `json:"zone_id"`
}
