// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	loadbalancerpolicy "github.com/golingon/terraproviders/aws/4.60.0/loadbalancerpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLoadBalancerPolicy(name string, args LoadBalancerPolicyArgs) *LoadBalancerPolicy {
	return &LoadBalancerPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LoadBalancerPolicy)(nil)

type LoadBalancerPolicy struct {
	Name  string
	Args  LoadBalancerPolicyArgs
	state *loadBalancerPolicyState
}

func (lbp *LoadBalancerPolicy) Type() string {
	return "aws_load_balancer_policy"
}

func (lbp *LoadBalancerPolicy) LocalName() string {
	return lbp.Name
}

func (lbp *LoadBalancerPolicy) Configuration() interface{} {
	return lbp.Args
}

func (lbp *LoadBalancerPolicy) Attributes() loadBalancerPolicyAttributes {
	return loadBalancerPolicyAttributes{ref: terra.ReferenceResource(lbp)}
}

func (lbp *LoadBalancerPolicy) ImportState(av io.Reader) error {
	lbp.state = &loadBalancerPolicyState{}
	if err := json.NewDecoder(av).Decode(lbp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lbp.Type(), lbp.LocalName(), err)
	}
	return nil
}

func (lbp *LoadBalancerPolicy) State() (*loadBalancerPolicyState, bool) {
	return lbp.state, lbp.state != nil
}

func (lbp *LoadBalancerPolicy) StateMust() *loadBalancerPolicyState {
	if lbp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lbp.Type(), lbp.LocalName()))
	}
	return lbp.state
}

func (lbp *LoadBalancerPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(lbp)
}

type LoadBalancerPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoadBalancerName: string, required
	LoadBalancerName terra.StringValue `hcl:"load_balancer_name,attr" validate:"required"`
	// PolicyName: string, required
	PolicyName terra.StringValue `hcl:"policy_name,attr" validate:"required"`
	// PolicyTypeName: string, required
	PolicyTypeName terra.StringValue `hcl:"policy_type_name,attr" validate:"required"`
	// PolicyAttribute: min=0
	PolicyAttribute []loadbalancerpolicy.PolicyAttribute `hcl:"policy_attribute,block" validate:"min=0"`
	// DependsOn contains resources that LoadBalancerPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type loadBalancerPolicyAttributes struct {
	ref terra.Reference
}

func (lbp loadBalancerPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lbp.ref.Append("id"))
}

func (lbp loadBalancerPolicyAttributes) LoadBalancerName() terra.StringValue {
	return terra.ReferenceString(lbp.ref.Append("load_balancer_name"))
}

func (lbp loadBalancerPolicyAttributes) PolicyName() terra.StringValue {
	return terra.ReferenceString(lbp.ref.Append("policy_name"))
}

func (lbp loadBalancerPolicyAttributes) PolicyTypeName() terra.StringValue {
	return terra.ReferenceString(lbp.ref.Append("policy_type_name"))
}

func (lbp loadBalancerPolicyAttributes) PolicyAttribute() terra.SetValue[loadbalancerpolicy.PolicyAttributeAttributes] {
	return terra.ReferenceSet[loadbalancerpolicy.PolicyAttributeAttributes](lbp.ref.Append("policy_attribute"))
}

type loadBalancerPolicyState struct {
	Id               string                                    `json:"id"`
	LoadBalancerName string                                    `json:"load_balancer_name"`
	PolicyName       string                                    `json:"policy_name"`
	PolicyTypeName   string                                    `json:"policy_type_name"`
	PolicyAttribute  []loadbalancerpolicy.PolicyAttributeState `json:"policy_attribute"`
}
