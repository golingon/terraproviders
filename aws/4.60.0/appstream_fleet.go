// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	appstreamfleet "github.com/golingon/terraproviders/aws/4.60.0/appstreamfleet"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppstreamFleet(name string, args AppstreamFleetArgs) *AppstreamFleet {
	return &AppstreamFleet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppstreamFleet)(nil)

type AppstreamFleet struct {
	Name  string
	Args  AppstreamFleetArgs
	state *appstreamFleetState
}

func (af *AppstreamFleet) Type() string {
	return "aws_appstream_fleet"
}

func (af *AppstreamFleet) LocalName() string {
	return af.Name
}

func (af *AppstreamFleet) Configuration() interface{} {
	return af.Args
}

func (af *AppstreamFleet) Attributes() appstreamFleetAttributes {
	return appstreamFleetAttributes{ref: terra.ReferenceResource(af)}
}

func (af *AppstreamFleet) ImportState(av io.Reader) error {
	af.state = &appstreamFleetState{}
	if err := json.NewDecoder(av).Decode(af.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", af.Type(), af.LocalName(), err)
	}
	return nil
}

func (af *AppstreamFleet) State() (*appstreamFleetState, bool) {
	return af.state, af.state != nil
}

func (af *AppstreamFleet) StateMust() *appstreamFleetState {
	if af.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", af.Type(), af.LocalName()))
	}
	return af.state
}

func (af *AppstreamFleet) DependOn() terra.Reference {
	return terra.ReferenceResource(af)
}

type AppstreamFleetArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisconnectTimeoutInSeconds: number, optional
	DisconnectTimeoutInSeconds terra.NumberValue `hcl:"disconnect_timeout_in_seconds,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// EnableDefaultInternetAccess: bool, optional
	EnableDefaultInternetAccess terra.BoolValue `hcl:"enable_default_internet_access,attr"`
	// FleetType: string, optional
	FleetType terra.StringValue `hcl:"fleet_type,attr"`
	// IamRoleArn: string, optional
	IamRoleArn terra.StringValue `hcl:"iam_role_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdleDisconnectTimeoutInSeconds: number, optional
	IdleDisconnectTimeoutInSeconds terra.NumberValue `hcl:"idle_disconnect_timeout_in_seconds,attr"`
	// ImageArn: string, optional
	ImageArn terra.StringValue `hcl:"image_arn,attr"`
	// ImageName: string, optional
	ImageName terra.StringValue `hcl:"image_name,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// MaxUserDurationInSeconds: number, optional
	MaxUserDurationInSeconds terra.NumberValue `hcl:"max_user_duration_in_seconds,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StreamView: string, optional
	StreamView terra.StringValue `hcl:"stream_view,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ComputeCapacity: required
	ComputeCapacity *appstreamfleet.ComputeCapacity `hcl:"compute_capacity,block" validate:"required"`
	// DomainJoinInfo: optional
	DomainJoinInfo *appstreamfleet.DomainJoinInfo `hcl:"domain_join_info,block"`
	// VpcConfig: optional
	VpcConfig *appstreamfleet.VpcConfig `hcl:"vpc_config,block"`
	// DependsOn contains resources that AppstreamFleet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appstreamFleetAttributes struct {
	ref terra.Reference
}

func (af appstreamFleetAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("arn"))
}

func (af appstreamFleetAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("created_time"))
}

func (af appstreamFleetAttributes) Description() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("description"))
}

func (af appstreamFleetAttributes) DisconnectTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceNumber(af.ref.Append("disconnect_timeout_in_seconds"))
}

func (af appstreamFleetAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("display_name"))
}

func (af appstreamFleetAttributes) EnableDefaultInternetAccess() terra.BoolValue {
	return terra.ReferenceBool(af.ref.Append("enable_default_internet_access"))
}

func (af appstreamFleetAttributes) FleetType() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("fleet_type"))
}

func (af appstreamFleetAttributes) IamRoleArn() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("iam_role_arn"))
}

func (af appstreamFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("id"))
}

func (af appstreamFleetAttributes) IdleDisconnectTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceNumber(af.ref.Append("idle_disconnect_timeout_in_seconds"))
}

func (af appstreamFleetAttributes) ImageArn() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("image_arn"))
}

func (af appstreamFleetAttributes) ImageName() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("image_name"))
}

func (af appstreamFleetAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("instance_type"))
}

func (af appstreamFleetAttributes) MaxUserDurationInSeconds() terra.NumberValue {
	return terra.ReferenceNumber(af.ref.Append("max_user_duration_in_seconds"))
}

func (af appstreamFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("name"))
}

func (af appstreamFleetAttributes) State() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("state"))
}

func (af appstreamFleetAttributes) StreamView() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("stream_view"))
}

func (af appstreamFleetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](af.ref.Append("tags"))
}

func (af appstreamFleetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](af.ref.Append("tags_all"))
}

func (af appstreamFleetAttributes) ComputeCapacity() terra.ListValue[appstreamfleet.ComputeCapacityAttributes] {
	return terra.ReferenceList[appstreamfleet.ComputeCapacityAttributes](af.ref.Append("compute_capacity"))
}

func (af appstreamFleetAttributes) DomainJoinInfo() terra.ListValue[appstreamfleet.DomainJoinInfoAttributes] {
	return terra.ReferenceList[appstreamfleet.DomainJoinInfoAttributes](af.ref.Append("domain_join_info"))
}

func (af appstreamFleetAttributes) VpcConfig() terra.ListValue[appstreamfleet.VpcConfigAttributes] {
	return terra.ReferenceList[appstreamfleet.VpcConfigAttributes](af.ref.Append("vpc_config"))
}

type appstreamFleetState struct {
	Arn                            string                                `json:"arn"`
	CreatedTime                    string                                `json:"created_time"`
	Description                    string                                `json:"description"`
	DisconnectTimeoutInSeconds     float64                               `json:"disconnect_timeout_in_seconds"`
	DisplayName                    string                                `json:"display_name"`
	EnableDefaultInternetAccess    bool                                  `json:"enable_default_internet_access"`
	FleetType                      string                                `json:"fleet_type"`
	IamRoleArn                     string                                `json:"iam_role_arn"`
	Id                             string                                `json:"id"`
	IdleDisconnectTimeoutInSeconds float64                               `json:"idle_disconnect_timeout_in_seconds"`
	ImageArn                       string                                `json:"image_arn"`
	ImageName                      string                                `json:"image_name"`
	InstanceType                   string                                `json:"instance_type"`
	MaxUserDurationInSeconds       float64                               `json:"max_user_duration_in_seconds"`
	Name                           string                                `json:"name"`
	State                          string                                `json:"state"`
	StreamView                     string                                `json:"stream_view"`
	Tags                           map[string]string                     `json:"tags"`
	TagsAll                        map[string]string                     `json:"tags_all"`
	ComputeCapacity                []appstreamfleet.ComputeCapacityState `json:"compute_capacity"`
	DomainJoinInfo                 []appstreamfleet.DomainJoinInfoState  `json:"domain_join_info"`
	VpcConfig                      []appstreamfleet.VpcConfigState       `json:"vpc_config"`
}
