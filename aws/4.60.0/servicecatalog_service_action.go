// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	servicecatalogserviceaction "github.com/golingon/terraproviders/aws/4.60.0/servicecatalogserviceaction"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicecatalogServiceAction(name string, args ServicecatalogServiceActionArgs) *ServicecatalogServiceAction {
	return &ServicecatalogServiceAction{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicecatalogServiceAction)(nil)

type ServicecatalogServiceAction struct {
	Name  string
	Args  ServicecatalogServiceActionArgs
	state *servicecatalogServiceActionState
}

func (ssa *ServicecatalogServiceAction) Type() string {
	return "aws_servicecatalog_service_action"
}

func (ssa *ServicecatalogServiceAction) LocalName() string {
	return ssa.Name
}

func (ssa *ServicecatalogServiceAction) Configuration() interface{} {
	return ssa.Args
}

func (ssa *ServicecatalogServiceAction) Attributes() servicecatalogServiceActionAttributes {
	return servicecatalogServiceActionAttributes{ref: terra.ReferenceResource(ssa)}
}

func (ssa *ServicecatalogServiceAction) ImportState(av io.Reader) error {
	ssa.state = &servicecatalogServiceActionState{}
	if err := json.NewDecoder(av).Decode(ssa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssa.Type(), ssa.LocalName(), err)
	}
	return nil
}

func (ssa *ServicecatalogServiceAction) State() (*servicecatalogServiceActionState, bool) {
	return ssa.state, ssa.state != nil
}

func (ssa *ServicecatalogServiceAction) StateMust() *servicecatalogServiceActionState {
	if ssa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssa.Type(), ssa.LocalName()))
	}
	return ssa.state
}

func (ssa *ServicecatalogServiceAction) DependOn() terra.Reference {
	return terra.ReferenceResource(ssa)
}

type ServicecatalogServiceActionArgs struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Definition: required
	Definition *servicecatalogserviceaction.Definition `hcl:"definition,block" validate:"required"`
	// Timeouts: optional
	Timeouts *servicecatalogserviceaction.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServicecatalogServiceAction depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicecatalogServiceActionAttributes struct {
	ref terra.Reference
}

func (ssa servicecatalogServiceActionAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceString(ssa.ref.Append("accept_language"))
}

func (ssa servicecatalogServiceActionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ssa.ref.Append("description"))
}

func (ssa servicecatalogServiceActionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssa.ref.Append("id"))
}

func (ssa servicecatalogServiceActionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ssa.ref.Append("name"))
}

func (ssa servicecatalogServiceActionAttributes) Definition() terra.ListValue[servicecatalogserviceaction.DefinitionAttributes] {
	return terra.ReferenceList[servicecatalogserviceaction.DefinitionAttributes](ssa.ref.Append("definition"))
}

func (ssa servicecatalogServiceActionAttributes) Timeouts() servicecatalogserviceaction.TimeoutsAttributes {
	return terra.ReferenceSingle[servicecatalogserviceaction.TimeoutsAttributes](ssa.ref.Append("timeouts"))
}

type servicecatalogServiceActionState struct {
	AcceptLanguage string                                        `json:"accept_language"`
	Description    string                                        `json:"description"`
	Id             string                                        `json:"id"`
	Name           string                                        `json:"name"`
	Definition     []servicecatalogserviceaction.DefinitionState `json:"definition"`
	Timeouts       *servicecatalogserviceaction.TimeoutsState    `json:"timeouts"`
}
