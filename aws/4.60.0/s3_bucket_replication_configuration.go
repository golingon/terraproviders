// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3bucketreplicationconfiguration "github.com/golingon/terraproviders/aws/4.60.0/s3bucketreplicationconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketReplicationConfiguration(name string, args S3BucketReplicationConfigurationArgs) *S3BucketReplicationConfiguration {
	return &S3BucketReplicationConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketReplicationConfiguration)(nil)

type S3BucketReplicationConfiguration struct {
	Name  string
	Args  S3BucketReplicationConfigurationArgs
	state *s3BucketReplicationConfigurationState
}

func (sbrc *S3BucketReplicationConfiguration) Type() string {
	return "aws_s3_bucket_replication_configuration"
}

func (sbrc *S3BucketReplicationConfiguration) LocalName() string {
	return sbrc.Name
}

func (sbrc *S3BucketReplicationConfiguration) Configuration() interface{} {
	return sbrc.Args
}

func (sbrc *S3BucketReplicationConfiguration) Attributes() s3BucketReplicationConfigurationAttributes {
	return s3BucketReplicationConfigurationAttributes{ref: terra.ReferenceResource(sbrc)}
}

func (sbrc *S3BucketReplicationConfiguration) ImportState(av io.Reader) error {
	sbrc.state = &s3BucketReplicationConfigurationState{}
	if err := json.NewDecoder(av).Decode(sbrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbrc.Type(), sbrc.LocalName(), err)
	}
	return nil
}

func (sbrc *S3BucketReplicationConfiguration) State() (*s3BucketReplicationConfigurationState, bool) {
	return sbrc.state, sbrc.state != nil
}

func (sbrc *S3BucketReplicationConfiguration) StateMust() *s3BucketReplicationConfigurationState {
	if sbrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbrc.Type(), sbrc.LocalName()))
	}
	return sbrc.state
}

func (sbrc *S3BucketReplicationConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(sbrc)
}

type S3BucketReplicationConfigurationArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Token: string, optional
	Token terra.StringValue `hcl:"token,attr"`
	// Rule: min=1,max=1000
	Rule []s3bucketreplicationconfiguration.Rule `hcl:"rule,block" validate:"min=1,max=1000"`
	// DependsOn contains resources that S3BucketReplicationConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketReplicationConfigurationAttributes struct {
	ref terra.Reference
}

func (sbrc s3BucketReplicationConfigurationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbrc.ref.Append("bucket"))
}

func (sbrc s3BucketReplicationConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbrc.ref.Append("id"))
}

func (sbrc s3BucketReplicationConfigurationAttributes) Role() terra.StringValue {
	return terra.ReferenceString(sbrc.ref.Append("role"))
}

func (sbrc s3BucketReplicationConfigurationAttributes) Token() terra.StringValue {
	return terra.ReferenceString(sbrc.ref.Append("token"))
}

func (sbrc s3BucketReplicationConfigurationAttributes) Rule() terra.ListValue[s3bucketreplicationconfiguration.RuleAttributes] {
	return terra.ReferenceList[s3bucketreplicationconfiguration.RuleAttributes](sbrc.ref.Append("rule"))
}

type s3BucketReplicationConfigurationState struct {
	Bucket string                                       `json:"bucket"`
	Id     string                                       `json:"id"`
	Role   string                                       `json:"role"`
	Token  string                                       `json:"token"`
	Rule   []s3bucketreplicationconfiguration.RuleState `json:"rule"`
}
