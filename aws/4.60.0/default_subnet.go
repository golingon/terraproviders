// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	defaultsubnet "github.com/golingon/terraproviders/aws/4.60.0/defaultsubnet"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDefaultSubnet(name string, args DefaultSubnetArgs) *DefaultSubnet {
	return &DefaultSubnet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DefaultSubnet)(nil)

type DefaultSubnet struct {
	Name  string
	Args  DefaultSubnetArgs
	state *defaultSubnetState
}

func (ds *DefaultSubnet) Type() string {
	return "aws_default_subnet"
}

func (ds *DefaultSubnet) LocalName() string {
	return ds.Name
}

func (ds *DefaultSubnet) Configuration() interface{} {
	return ds.Args
}

func (ds *DefaultSubnet) Attributes() defaultSubnetAttributes {
	return defaultSubnetAttributes{ref: terra.ReferenceResource(ds)}
}

func (ds *DefaultSubnet) ImportState(av io.Reader) error {
	ds.state = &defaultSubnetState{}
	if err := json.NewDecoder(av).Decode(ds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ds.Type(), ds.LocalName(), err)
	}
	return nil
}

func (ds *DefaultSubnet) State() (*defaultSubnetState, bool) {
	return ds.state, ds.state != nil
}

func (ds *DefaultSubnet) StateMust() *defaultSubnetState {
	if ds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ds.Type(), ds.LocalName()))
	}
	return ds.state
}

func (ds *DefaultSubnet) DependOn() terra.Reference {
	return terra.ReferenceResource(ds)
}

type DefaultSubnetArgs struct {
	// AssignIpv6AddressOnCreation: bool, optional
	AssignIpv6AddressOnCreation terra.BoolValue `hcl:"assign_ipv6_address_on_creation,attr"`
	// AvailabilityZone: string, required
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr" validate:"required"`
	// CustomerOwnedIpv4Pool: string, optional
	CustomerOwnedIpv4Pool terra.StringValue `hcl:"customer_owned_ipv4_pool,attr"`
	// EnableDns64: bool, optional
	EnableDns64 terra.BoolValue `hcl:"enable_dns64,attr"`
	// EnableResourceNameDnsARecordOnLaunch: bool, optional
	EnableResourceNameDnsARecordOnLaunch terra.BoolValue `hcl:"enable_resource_name_dns_a_record_on_launch,attr"`
	// EnableResourceNameDnsAaaaRecordOnLaunch: bool, optional
	EnableResourceNameDnsAaaaRecordOnLaunch terra.BoolValue `hcl:"enable_resource_name_dns_aaaa_record_on_launch,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Ipv6CidrBlock: string, optional
	Ipv6CidrBlock terra.StringValue `hcl:"ipv6_cidr_block,attr"`
	// Ipv6Native: bool, optional
	Ipv6Native terra.BoolValue `hcl:"ipv6_native,attr"`
	// MapCustomerOwnedIpOnLaunch: bool, optional
	MapCustomerOwnedIpOnLaunch terra.BoolValue `hcl:"map_customer_owned_ip_on_launch,attr"`
	// MapPublicIpOnLaunch: bool, optional
	MapPublicIpOnLaunch terra.BoolValue `hcl:"map_public_ip_on_launch,attr"`
	// PrivateDnsHostnameTypeOnLaunch: string, optional
	PrivateDnsHostnameTypeOnLaunch terra.StringValue `hcl:"private_dns_hostname_type_on_launch,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *defaultsubnet.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DefaultSubnet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type defaultSubnetAttributes struct {
	ref terra.Reference
}

func (ds defaultSubnetAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("arn"))
}

func (ds defaultSubnetAttributes) AssignIpv6AddressOnCreation() terra.BoolValue {
	return terra.ReferenceBool(ds.ref.Append("assign_ipv6_address_on_creation"))
}

func (ds defaultSubnetAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("availability_zone"))
}

func (ds defaultSubnetAttributes) AvailabilityZoneId() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("availability_zone_id"))
}

func (ds defaultSubnetAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("cidr_block"))
}

func (ds defaultSubnetAttributes) CustomerOwnedIpv4Pool() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("customer_owned_ipv4_pool"))
}

func (ds defaultSubnetAttributes) EnableDns64() terra.BoolValue {
	return terra.ReferenceBool(ds.ref.Append("enable_dns64"))
}

func (ds defaultSubnetAttributes) EnableResourceNameDnsARecordOnLaunch() terra.BoolValue {
	return terra.ReferenceBool(ds.ref.Append("enable_resource_name_dns_a_record_on_launch"))
}

func (ds defaultSubnetAttributes) EnableResourceNameDnsAaaaRecordOnLaunch() terra.BoolValue {
	return terra.ReferenceBool(ds.ref.Append("enable_resource_name_dns_aaaa_record_on_launch"))
}

func (ds defaultSubnetAttributes) ExistingDefaultSubnet() terra.BoolValue {
	return terra.ReferenceBool(ds.ref.Append("existing_default_subnet"))
}

func (ds defaultSubnetAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceBool(ds.ref.Append("force_destroy"))
}

func (ds defaultSubnetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("id"))
}

func (ds defaultSubnetAttributes) Ipv6CidrBlock() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("ipv6_cidr_block"))
}

func (ds defaultSubnetAttributes) Ipv6CidrBlockAssociationId() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("ipv6_cidr_block_association_id"))
}

func (ds defaultSubnetAttributes) Ipv6Native() terra.BoolValue {
	return terra.ReferenceBool(ds.ref.Append("ipv6_native"))
}

func (ds defaultSubnetAttributes) MapCustomerOwnedIpOnLaunch() terra.BoolValue {
	return terra.ReferenceBool(ds.ref.Append("map_customer_owned_ip_on_launch"))
}

func (ds defaultSubnetAttributes) MapPublicIpOnLaunch() terra.BoolValue {
	return terra.ReferenceBool(ds.ref.Append("map_public_ip_on_launch"))
}

func (ds defaultSubnetAttributes) OutpostArn() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("outpost_arn"))
}

func (ds defaultSubnetAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("owner_id"))
}

func (ds defaultSubnetAttributes) PrivateDnsHostnameTypeOnLaunch() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("private_dns_hostname_type_on_launch"))
}

func (ds defaultSubnetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ds.ref.Append("tags"))
}

func (ds defaultSubnetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ds.ref.Append("tags_all"))
}

func (ds defaultSubnetAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("vpc_id"))
}

func (ds defaultSubnetAttributes) Timeouts() defaultsubnet.TimeoutsAttributes {
	return terra.ReferenceSingle[defaultsubnet.TimeoutsAttributes](ds.ref.Append("timeouts"))
}

type defaultSubnetState struct {
	Arn                                     string                       `json:"arn"`
	AssignIpv6AddressOnCreation             bool                         `json:"assign_ipv6_address_on_creation"`
	AvailabilityZone                        string                       `json:"availability_zone"`
	AvailabilityZoneId                      string                       `json:"availability_zone_id"`
	CidrBlock                               string                       `json:"cidr_block"`
	CustomerOwnedIpv4Pool                   string                       `json:"customer_owned_ipv4_pool"`
	EnableDns64                             bool                         `json:"enable_dns64"`
	EnableResourceNameDnsARecordOnLaunch    bool                         `json:"enable_resource_name_dns_a_record_on_launch"`
	EnableResourceNameDnsAaaaRecordOnLaunch bool                         `json:"enable_resource_name_dns_aaaa_record_on_launch"`
	ExistingDefaultSubnet                   bool                         `json:"existing_default_subnet"`
	ForceDestroy                            bool                         `json:"force_destroy"`
	Id                                      string                       `json:"id"`
	Ipv6CidrBlock                           string                       `json:"ipv6_cidr_block"`
	Ipv6CidrBlockAssociationId              string                       `json:"ipv6_cidr_block_association_id"`
	Ipv6Native                              bool                         `json:"ipv6_native"`
	MapCustomerOwnedIpOnLaunch              bool                         `json:"map_customer_owned_ip_on_launch"`
	MapPublicIpOnLaunch                     bool                         `json:"map_public_ip_on_launch"`
	OutpostArn                              string                       `json:"outpost_arn"`
	OwnerId                                 string                       `json:"owner_id"`
	PrivateDnsHostnameTypeOnLaunch          string                       `json:"private_dns_hostname_type_on_launch"`
	Tags                                    map[string]string            `json:"tags"`
	TagsAll                                 map[string]string            `json:"tags_all"`
	VpcId                                   string                       `json:"vpc_id"`
	Timeouts                                *defaultsubnet.TimeoutsState `json:"timeouts"`
}
