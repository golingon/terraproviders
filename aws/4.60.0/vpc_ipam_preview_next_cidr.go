// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVpcIpamPreviewNextCidr(name string, args VpcIpamPreviewNextCidrArgs) *VpcIpamPreviewNextCidr {
	return &VpcIpamPreviewNextCidr{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpcIpamPreviewNextCidr)(nil)

type VpcIpamPreviewNextCidr struct {
	Name  string
	Args  VpcIpamPreviewNextCidrArgs
	state *vpcIpamPreviewNextCidrState
}

func (vipnc *VpcIpamPreviewNextCidr) Type() string {
	return "aws_vpc_ipam_preview_next_cidr"
}

func (vipnc *VpcIpamPreviewNextCidr) LocalName() string {
	return vipnc.Name
}

func (vipnc *VpcIpamPreviewNextCidr) Configuration() interface{} {
	return vipnc.Args
}

func (vipnc *VpcIpamPreviewNextCidr) Attributes() vpcIpamPreviewNextCidrAttributes {
	return vpcIpamPreviewNextCidrAttributes{ref: terra.ReferenceResource(vipnc)}
}

func (vipnc *VpcIpamPreviewNextCidr) ImportState(av io.Reader) error {
	vipnc.state = &vpcIpamPreviewNextCidrState{}
	if err := json.NewDecoder(av).Decode(vipnc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vipnc.Type(), vipnc.LocalName(), err)
	}
	return nil
}

func (vipnc *VpcIpamPreviewNextCidr) State() (*vpcIpamPreviewNextCidrState, bool) {
	return vipnc.state, vipnc.state != nil
}

func (vipnc *VpcIpamPreviewNextCidr) StateMust() *vpcIpamPreviewNextCidrState {
	if vipnc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vipnc.Type(), vipnc.LocalName()))
	}
	return vipnc.state
}

func (vipnc *VpcIpamPreviewNextCidr) DependOn() terra.Reference {
	return terra.ReferenceResource(vipnc)
}

type VpcIpamPreviewNextCidrArgs struct {
	// DisallowedCidrs: set of string, optional
	DisallowedCidrs terra.SetValue[terra.StringValue] `hcl:"disallowed_cidrs,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpamPoolId: string, required
	IpamPoolId terra.StringValue `hcl:"ipam_pool_id,attr" validate:"required"`
	// NetmaskLength: number, optional
	NetmaskLength terra.NumberValue `hcl:"netmask_length,attr"`
	// DependsOn contains resources that VpcIpamPreviewNextCidr depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vpcIpamPreviewNextCidrAttributes struct {
	ref terra.Reference
}

func (vipnc vpcIpamPreviewNextCidrAttributes) Cidr() terra.StringValue {
	return terra.ReferenceString(vipnc.ref.Append("cidr"))
}

func (vipnc vpcIpamPreviewNextCidrAttributes) DisallowedCidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](vipnc.ref.Append("disallowed_cidrs"))
}

func (vipnc vpcIpamPreviewNextCidrAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vipnc.ref.Append("id"))
}

func (vipnc vpcIpamPreviewNextCidrAttributes) IpamPoolId() terra.StringValue {
	return terra.ReferenceString(vipnc.ref.Append("ipam_pool_id"))
}

func (vipnc vpcIpamPreviewNextCidrAttributes) NetmaskLength() terra.NumberValue {
	return terra.ReferenceNumber(vipnc.ref.Append("netmask_length"))
}

type vpcIpamPreviewNextCidrState struct {
	Cidr            string   `json:"cidr"`
	DisallowedCidrs []string `json:"disallowed_cidrs"`
	Id              string   `json:"id"`
	IpamPoolId      string   `json:"ipam_pool_id"`
	NetmaskLength   float64  `json:"netmask_length"`
}
