// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkinterface "github.com/golingon/terraproviders/aws/4.60.0/networkinterface"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkInterface(name string, args NetworkInterfaceArgs) *NetworkInterface {
	return &NetworkInterface{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkInterface)(nil)

type NetworkInterface struct {
	Name  string
	Args  NetworkInterfaceArgs
	state *networkInterfaceState
}

func (ni *NetworkInterface) Type() string {
	return "aws_network_interface"
}

func (ni *NetworkInterface) LocalName() string {
	return ni.Name
}

func (ni *NetworkInterface) Configuration() interface{} {
	return ni.Args
}

func (ni *NetworkInterface) Attributes() networkInterfaceAttributes {
	return networkInterfaceAttributes{ref: terra.ReferenceResource(ni)}
}

func (ni *NetworkInterface) ImportState(av io.Reader) error {
	ni.state = &networkInterfaceState{}
	if err := json.NewDecoder(av).Decode(ni.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ni.Type(), ni.LocalName(), err)
	}
	return nil
}

func (ni *NetworkInterface) State() (*networkInterfaceState, bool) {
	return ni.state, ni.state != nil
}

func (ni *NetworkInterface) StateMust() *networkInterfaceState {
	if ni.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ni.Type(), ni.LocalName()))
	}
	return ni.state
}

func (ni *NetworkInterface) DependOn() terra.Reference {
	return terra.ReferenceResource(ni)
}

type NetworkInterfaceArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InterfaceType: string, optional
	InterfaceType terra.StringValue `hcl:"interface_type,attr"`
	// Ipv4PrefixCount: number, optional
	Ipv4PrefixCount terra.NumberValue `hcl:"ipv4_prefix_count,attr"`
	// Ipv4Prefixes: set of string, optional
	Ipv4Prefixes terra.SetValue[terra.StringValue] `hcl:"ipv4_prefixes,attr"`
	// Ipv6AddressCount: number, optional
	Ipv6AddressCount terra.NumberValue `hcl:"ipv6_address_count,attr"`
	// Ipv6AddressList: list of string, optional
	Ipv6AddressList terra.ListValue[terra.StringValue] `hcl:"ipv6_address_list,attr"`
	// Ipv6AddressListEnabled: bool, optional
	Ipv6AddressListEnabled terra.BoolValue `hcl:"ipv6_address_list_enabled,attr"`
	// Ipv6Addresses: set of string, optional
	Ipv6Addresses terra.SetValue[terra.StringValue] `hcl:"ipv6_addresses,attr"`
	// Ipv6PrefixCount: number, optional
	Ipv6PrefixCount terra.NumberValue `hcl:"ipv6_prefix_count,attr"`
	// Ipv6Prefixes: set of string, optional
	Ipv6Prefixes terra.SetValue[terra.StringValue] `hcl:"ipv6_prefixes,attr"`
	// PrivateIp: string, optional
	PrivateIp terra.StringValue `hcl:"private_ip,attr"`
	// PrivateIpList: list of string, optional
	PrivateIpList terra.ListValue[terra.StringValue] `hcl:"private_ip_list,attr"`
	// PrivateIpListEnabled: bool, optional
	PrivateIpListEnabled terra.BoolValue `hcl:"private_ip_list_enabled,attr"`
	// PrivateIps: set of string, optional
	PrivateIps terra.SetValue[terra.StringValue] `hcl:"private_ips,attr"`
	// PrivateIpsCount: number, optional
	PrivateIpsCount terra.NumberValue `hcl:"private_ips_count,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// SourceDestCheck: bool, optional
	SourceDestCheck terra.BoolValue `hcl:"source_dest_check,attr"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Attachment: min=0
	Attachment []networkinterface.Attachment `hcl:"attachment,block" validate:"min=0"`
	// DependsOn contains resources that NetworkInterface depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkInterfaceAttributes struct {
	ref terra.Reference
}

func (ni networkInterfaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("arn"))
}

func (ni networkInterfaceAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("description"))
}

func (ni networkInterfaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("id"))
}

func (ni networkInterfaceAttributes) InterfaceType() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("interface_type"))
}

func (ni networkInterfaceAttributes) Ipv4PrefixCount() terra.NumberValue {
	return terra.ReferenceNumber(ni.ref.Append("ipv4_prefix_count"))
}

func (ni networkInterfaceAttributes) Ipv4Prefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ni.ref.Append("ipv4_prefixes"))
}

func (ni networkInterfaceAttributes) Ipv6AddressCount() terra.NumberValue {
	return terra.ReferenceNumber(ni.ref.Append("ipv6_address_count"))
}

func (ni networkInterfaceAttributes) Ipv6AddressList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ni.ref.Append("ipv6_address_list"))
}

func (ni networkInterfaceAttributes) Ipv6AddressListEnabled() terra.BoolValue {
	return terra.ReferenceBool(ni.ref.Append("ipv6_address_list_enabled"))
}

func (ni networkInterfaceAttributes) Ipv6Addresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ni.ref.Append("ipv6_addresses"))
}

func (ni networkInterfaceAttributes) Ipv6PrefixCount() terra.NumberValue {
	return terra.ReferenceNumber(ni.ref.Append("ipv6_prefix_count"))
}

func (ni networkInterfaceAttributes) Ipv6Prefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ni.ref.Append("ipv6_prefixes"))
}

func (ni networkInterfaceAttributes) MacAddress() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("mac_address"))
}

func (ni networkInterfaceAttributes) OutpostArn() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("outpost_arn"))
}

func (ni networkInterfaceAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("owner_id"))
}

func (ni networkInterfaceAttributes) PrivateDnsName() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("private_dns_name"))
}

func (ni networkInterfaceAttributes) PrivateIp() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("private_ip"))
}

func (ni networkInterfaceAttributes) PrivateIpList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ni.ref.Append("private_ip_list"))
}

func (ni networkInterfaceAttributes) PrivateIpListEnabled() terra.BoolValue {
	return terra.ReferenceBool(ni.ref.Append("private_ip_list_enabled"))
}

func (ni networkInterfaceAttributes) PrivateIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ni.ref.Append("private_ips"))
}

func (ni networkInterfaceAttributes) PrivateIpsCount() terra.NumberValue {
	return terra.ReferenceNumber(ni.ref.Append("private_ips_count"))
}

func (ni networkInterfaceAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ni.ref.Append("security_groups"))
}

func (ni networkInterfaceAttributes) SourceDestCheck() terra.BoolValue {
	return terra.ReferenceBool(ni.ref.Append("source_dest_check"))
}

func (ni networkInterfaceAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(ni.ref.Append("subnet_id"))
}

func (ni networkInterfaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ni.ref.Append("tags"))
}

func (ni networkInterfaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ni.ref.Append("tags_all"))
}

func (ni networkInterfaceAttributes) Attachment() terra.SetValue[networkinterface.AttachmentAttributes] {
	return terra.ReferenceSet[networkinterface.AttachmentAttributes](ni.ref.Append("attachment"))
}

type networkInterfaceState struct {
	Arn                    string                             `json:"arn"`
	Description            string                             `json:"description"`
	Id                     string                             `json:"id"`
	InterfaceType          string                             `json:"interface_type"`
	Ipv4PrefixCount        float64                            `json:"ipv4_prefix_count"`
	Ipv4Prefixes           []string                           `json:"ipv4_prefixes"`
	Ipv6AddressCount       float64                            `json:"ipv6_address_count"`
	Ipv6AddressList        []string                           `json:"ipv6_address_list"`
	Ipv6AddressListEnabled bool                               `json:"ipv6_address_list_enabled"`
	Ipv6Addresses          []string                           `json:"ipv6_addresses"`
	Ipv6PrefixCount        float64                            `json:"ipv6_prefix_count"`
	Ipv6Prefixes           []string                           `json:"ipv6_prefixes"`
	MacAddress             string                             `json:"mac_address"`
	OutpostArn             string                             `json:"outpost_arn"`
	OwnerId                string                             `json:"owner_id"`
	PrivateDnsName         string                             `json:"private_dns_name"`
	PrivateIp              string                             `json:"private_ip"`
	PrivateIpList          []string                           `json:"private_ip_list"`
	PrivateIpListEnabled   bool                               `json:"private_ip_list_enabled"`
	PrivateIps             []string                           `json:"private_ips"`
	PrivateIpsCount        float64                            `json:"private_ips_count"`
	SecurityGroups         []string                           `json:"security_groups"`
	SourceDestCheck        bool                               `json:"source_dest_check"`
	SubnetId               string                             `json:"subnet_id"`
	Tags                   map[string]string                  `json:"tags"`
	TagsAll                map[string]string                  `json:"tags_all"`
	Attachment             []networkinterface.AttachmentState `json:"attachment"`
}
