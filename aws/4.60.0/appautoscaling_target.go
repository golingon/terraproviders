// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppautoscalingTarget(name string, args AppautoscalingTargetArgs) *AppautoscalingTarget {
	return &AppautoscalingTarget{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppautoscalingTarget)(nil)

type AppautoscalingTarget struct {
	Name  string
	Args  AppautoscalingTargetArgs
	state *appautoscalingTargetState
}

func (at *AppautoscalingTarget) Type() string {
	return "aws_appautoscaling_target"
}

func (at *AppautoscalingTarget) LocalName() string {
	return at.Name
}

func (at *AppautoscalingTarget) Configuration() interface{} {
	return at.Args
}

func (at *AppautoscalingTarget) Attributes() appautoscalingTargetAttributes {
	return appautoscalingTargetAttributes{ref: terra.ReferenceResource(at)}
}

func (at *AppautoscalingTarget) ImportState(av io.Reader) error {
	at.state = &appautoscalingTargetState{}
	if err := json.NewDecoder(av).Decode(at.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", at.Type(), at.LocalName(), err)
	}
	return nil
}

func (at *AppautoscalingTarget) State() (*appautoscalingTargetState, bool) {
	return at.state, at.state != nil
}

func (at *AppautoscalingTarget) StateMust() *appautoscalingTargetState {
	if at.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", at.Type(), at.LocalName()))
	}
	return at.state
}

func (at *AppautoscalingTarget) DependOn() terra.Reference {
	return terra.ReferenceResource(at)
}

type AppautoscalingTargetArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxCapacity: number, required
	MaxCapacity terra.NumberValue `hcl:"max_capacity,attr" validate:"required"`
	// MinCapacity: number, required
	MinCapacity terra.NumberValue `hcl:"min_capacity,attr" validate:"required"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// ScalableDimension: string, required
	ScalableDimension terra.StringValue `hcl:"scalable_dimension,attr" validate:"required"`
	// ServiceNamespace: string, required
	ServiceNamespace terra.StringValue `hcl:"service_namespace,attr" validate:"required"`
	// DependsOn contains resources that AppautoscalingTarget depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appautoscalingTargetAttributes struct {
	ref terra.Reference
}

func (at appautoscalingTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(at.ref.Append("id"))
}

func (at appautoscalingTargetAttributes) MaxCapacity() terra.NumberValue {
	return terra.ReferenceNumber(at.ref.Append("max_capacity"))
}

func (at appautoscalingTargetAttributes) MinCapacity() terra.NumberValue {
	return terra.ReferenceNumber(at.ref.Append("min_capacity"))
}

func (at appautoscalingTargetAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(at.ref.Append("resource_id"))
}

func (at appautoscalingTargetAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(at.ref.Append("role_arn"))
}

func (at appautoscalingTargetAttributes) ScalableDimension() terra.StringValue {
	return terra.ReferenceString(at.ref.Append("scalable_dimension"))
}

func (at appautoscalingTargetAttributes) ServiceNamespace() terra.StringValue {
	return terra.ReferenceString(at.ref.Append("service_namespace"))
}

type appautoscalingTargetState struct {
	Id                string  `json:"id"`
	MaxCapacity       float64 `json:"max_capacity"`
	MinCapacity       float64 `json:"min_capacity"`
	ResourceId        string  `json:"resource_id"`
	RoleArn           string  `json:"role_arn"`
	ScalableDimension string  `json:"scalable_dimension"`
	ServiceNamespace  string  `json:"service_namespace"`
}
