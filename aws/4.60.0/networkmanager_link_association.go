// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkmanagerlinkassociation "github.com/golingon/terraproviders/aws/4.60.0/networkmanagerlinkassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkmanagerLinkAssociation(name string, args NetworkmanagerLinkAssociationArgs) *NetworkmanagerLinkAssociation {
	return &NetworkmanagerLinkAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkmanagerLinkAssociation)(nil)

type NetworkmanagerLinkAssociation struct {
	Name  string
	Args  NetworkmanagerLinkAssociationArgs
	state *networkmanagerLinkAssociationState
}

func (nla *NetworkmanagerLinkAssociation) Type() string {
	return "aws_networkmanager_link_association"
}

func (nla *NetworkmanagerLinkAssociation) LocalName() string {
	return nla.Name
}

func (nla *NetworkmanagerLinkAssociation) Configuration() interface{} {
	return nla.Args
}

func (nla *NetworkmanagerLinkAssociation) Attributes() networkmanagerLinkAssociationAttributes {
	return networkmanagerLinkAssociationAttributes{ref: terra.ReferenceResource(nla)}
}

func (nla *NetworkmanagerLinkAssociation) ImportState(av io.Reader) error {
	nla.state = &networkmanagerLinkAssociationState{}
	if err := json.NewDecoder(av).Decode(nla.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nla.Type(), nla.LocalName(), err)
	}
	return nil
}

func (nla *NetworkmanagerLinkAssociation) State() (*networkmanagerLinkAssociationState, bool) {
	return nla.state, nla.state != nil
}

func (nla *NetworkmanagerLinkAssociation) StateMust() *networkmanagerLinkAssociationState {
	if nla.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nla.Type(), nla.LocalName()))
	}
	return nla.state
}

func (nla *NetworkmanagerLinkAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(nla)
}

type NetworkmanagerLinkAssociationArgs struct {
	// DeviceId: string, required
	DeviceId terra.StringValue `hcl:"device_id,attr" validate:"required"`
	// GlobalNetworkId: string, required
	GlobalNetworkId terra.StringValue `hcl:"global_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkId: string, required
	LinkId terra.StringValue `hcl:"link_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *networkmanagerlinkassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkmanagerLinkAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkmanagerLinkAssociationAttributes struct {
	ref terra.Reference
}

func (nla networkmanagerLinkAssociationAttributes) DeviceId() terra.StringValue {
	return terra.ReferenceString(nla.ref.Append("device_id"))
}

func (nla networkmanagerLinkAssociationAttributes) GlobalNetworkId() terra.StringValue {
	return terra.ReferenceString(nla.ref.Append("global_network_id"))
}

func (nla networkmanagerLinkAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nla.ref.Append("id"))
}

func (nla networkmanagerLinkAssociationAttributes) LinkId() terra.StringValue {
	return terra.ReferenceString(nla.ref.Append("link_id"))
}

func (nla networkmanagerLinkAssociationAttributes) Timeouts() networkmanagerlinkassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagerlinkassociation.TimeoutsAttributes](nla.ref.Append("timeouts"))
}

type networkmanagerLinkAssociationState struct {
	DeviceId        string                                       `json:"device_id"`
	GlobalNetworkId string                                       `json:"global_network_id"`
	Id              string                                       `json:"id"`
	LinkId          string                                       `json:"link_id"`
	Timeouts        *networkmanagerlinkassociation.TimeoutsState `json:"timeouts"`
}
