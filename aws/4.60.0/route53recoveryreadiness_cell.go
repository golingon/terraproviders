// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	route53recoveryreadinesscell "github.com/golingon/terraproviders/aws/4.60.0/route53recoveryreadinesscell"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53RecoveryreadinessCell(name string, args Route53RecoveryreadinessCellArgs) *Route53RecoveryreadinessCell {
	return &Route53RecoveryreadinessCell{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53RecoveryreadinessCell)(nil)

type Route53RecoveryreadinessCell struct {
	Name  string
	Args  Route53RecoveryreadinessCellArgs
	state *route53RecoveryreadinessCellState
}

func (rc *Route53RecoveryreadinessCell) Type() string {
	return "aws_route53recoveryreadiness_cell"
}

func (rc *Route53RecoveryreadinessCell) LocalName() string {
	return rc.Name
}

func (rc *Route53RecoveryreadinessCell) Configuration() interface{} {
	return rc.Args
}

func (rc *Route53RecoveryreadinessCell) Attributes() route53RecoveryreadinessCellAttributes {
	return route53RecoveryreadinessCellAttributes{ref: terra.ReferenceResource(rc)}
}

func (rc *Route53RecoveryreadinessCell) ImportState(av io.Reader) error {
	rc.state = &route53RecoveryreadinessCellState{}
	if err := json.NewDecoder(av).Decode(rc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rc.Type(), rc.LocalName(), err)
	}
	return nil
}

func (rc *Route53RecoveryreadinessCell) State() (*route53RecoveryreadinessCellState, bool) {
	return rc.state, rc.state != nil
}

func (rc *Route53RecoveryreadinessCell) StateMust() *route53RecoveryreadinessCellState {
	if rc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rc.Type(), rc.LocalName()))
	}
	return rc.state
}

func (rc *Route53RecoveryreadinessCell) DependOn() terra.Reference {
	return terra.ReferenceResource(rc)
}

type Route53RecoveryreadinessCellArgs struct {
	// CellName: string, required
	CellName terra.StringValue `hcl:"cell_name,attr" validate:"required"`
	// Cells: list of string, optional
	Cells terra.ListValue[terra.StringValue] `hcl:"cells,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *route53recoveryreadinesscell.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Route53RecoveryreadinessCell depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53RecoveryreadinessCellAttributes struct {
	ref terra.Reference
}

func (rc route53RecoveryreadinessCellAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("arn"))
}

func (rc route53RecoveryreadinessCellAttributes) CellName() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("cell_name"))
}

func (rc route53RecoveryreadinessCellAttributes) Cells() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](rc.ref.Append("cells"))
}

func (rc route53RecoveryreadinessCellAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("id"))
}

func (rc route53RecoveryreadinessCellAttributes) ParentReadinessScopes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](rc.ref.Append("parent_readiness_scopes"))
}

func (rc route53RecoveryreadinessCellAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rc.ref.Append("tags"))
}

func (rc route53RecoveryreadinessCellAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rc.ref.Append("tags_all"))
}

func (rc route53RecoveryreadinessCellAttributes) Timeouts() route53recoveryreadinesscell.TimeoutsAttributes {
	return terra.ReferenceSingle[route53recoveryreadinesscell.TimeoutsAttributes](rc.ref.Append("timeouts"))
}

type route53RecoveryreadinessCellState struct {
	Arn                   string                                      `json:"arn"`
	CellName              string                                      `json:"cell_name"`
	Cells                 []string                                    `json:"cells"`
	Id                    string                                      `json:"id"`
	ParentReadinessScopes []string                                    `json:"parent_readiness_scopes"`
	Tags                  map[string]string                           `json:"tags"`
	TagsAll               map[string]string                           `json:"tags_all"`
	Timeouts              *route53recoveryreadinesscell.TimeoutsState `json:"timeouts"`
}
