// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApprunnerConnection(name string, args ApprunnerConnectionArgs) *ApprunnerConnection {
	return &ApprunnerConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApprunnerConnection)(nil)

type ApprunnerConnection struct {
	Name  string
	Args  ApprunnerConnectionArgs
	state *apprunnerConnectionState
}

func (ac *ApprunnerConnection) Type() string {
	return "aws_apprunner_connection"
}

func (ac *ApprunnerConnection) LocalName() string {
	return ac.Name
}

func (ac *ApprunnerConnection) Configuration() interface{} {
	return ac.Args
}

func (ac *ApprunnerConnection) Attributes() apprunnerConnectionAttributes {
	return apprunnerConnectionAttributes{ref: terra.ReferenceResource(ac)}
}

func (ac *ApprunnerConnection) ImportState(av io.Reader) error {
	ac.state = &apprunnerConnectionState{}
	if err := json.NewDecoder(av).Decode(ac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ac.Type(), ac.LocalName(), err)
	}
	return nil
}

func (ac *ApprunnerConnection) State() (*apprunnerConnectionState, bool) {
	return ac.state, ac.state != nil
}

func (ac *ApprunnerConnection) StateMust() *apprunnerConnectionState {
	if ac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ac.Type(), ac.LocalName()))
	}
	return ac.state
}

func (ac *ApprunnerConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(ac)
}

type ApprunnerConnectionArgs struct {
	// ConnectionName: string, required
	ConnectionName terra.StringValue `hcl:"connection_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProviderType: string, required
	ProviderType terra.StringValue `hcl:"provider_type,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that ApprunnerConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apprunnerConnectionAttributes struct {
	ref terra.Reference
}

func (ac apprunnerConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("arn"))
}

func (ac apprunnerConnectionAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("connection_name"))
}

func (ac apprunnerConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("id"))
}

func (ac apprunnerConnectionAttributes) ProviderType() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("provider_type"))
}

func (ac apprunnerConnectionAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("status"))
}

func (ac apprunnerConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ac.ref.Append("tags"))
}

func (ac apprunnerConnectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ac.ref.Append("tags_all"))
}

type apprunnerConnectionState struct {
	Arn            string            `json:"arn"`
	ConnectionName string            `json:"connection_name"`
	Id             string            `json:"id"`
	ProviderType   string            `json:"provider_type"`
	Status         string            `json:"status"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
}
