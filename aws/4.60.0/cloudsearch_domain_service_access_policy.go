// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudsearchdomainserviceaccesspolicy "github.com/golingon/terraproviders/aws/4.60.0/cloudsearchdomainserviceaccesspolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudsearchDomainServiceAccessPolicy(name string, args CloudsearchDomainServiceAccessPolicyArgs) *CloudsearchDomainServiceAccessPolicy {
	return &CloudsearchDomainServiceAccessPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudsearchDomainServiceAccessPolicy)(nil)

type CloudsearchDomainServiceAccessPolicy struct {
	Name  string
	Args  CloudsearchDomainServiceAccessPolicyArgs
	state *cloudsearchDomainServiceAccessPolicyState
}

func (cdsap *CloudsearchDomainServiceAccessPolicy) Type() string {
	return "aws_cloudsearch_domain_service_access_policy"
}

func (cdsap *CloudsearchDomainServiceAccessPolicy) LocalName() string {
	return cdsap.Name
}

func (cdsap *CloudsearchDomainServiceAccessPolicy) Configuration() interface{} {
	return cdsap.Args
}

func (cdsap *CloudsearchDomainServiceAccessPolicy) Attributes() cloudsearchDomainServiceAccessPolicyAttributes {
	return cloudsearchDomainServiceAccessPolicyAttributes{ref: terra.ReferenceResource(cdsap)}
}

func (cdsap *CloudsearchDomainServiceAccessPolicy) ImportState(av io.Reader) error {
	cdsap.state = &cloudsearchDomainServiceAccessPolicyState{}
	if err := json.NewDecoder(av).Decode(cdsap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cdsap.Type(), cdsap.LocalName(), err)
	}
	return nil
}

func (cdsap *CloudsearchDomainServiceAccessPolicy) State() (*cloudsearchDomainServiceAccessPolicyState, bool) {
	return cdsap.state, cdsap.state != nil
}

func (cdsap *CloudsearchDomainServiceAccessPolicy) StateMust() *cloudsearchDomainServiceAccessPolicyState {
	if cdsap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cdsap.Type(), cdsap.LocalName()))
	}
	return cdsap.state
}

func (cdsap *CloudsearchDomainServiceAccessPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(cdsap)
}

type CloudsearchDomainServiceAccessPolicyArgs struct {
	// AccessPolicy: string, required
	AccessPolicy terra.StringValue `hcl:"access_policy,attr" validate:"required"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *cloudsearchdomainserviceaccesspolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudsearchDomainServiceAccessPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudsearchDomainServiceAccessPolicyAttributes struct {
	ref terra.Reference
}

func (cdsap cloudsearchDomainServiceAccessPolicyAttributes) AccessPolicy() terra.StringValue {
	return terra.ReferenceString(cdsap.ref.Append("access_policy"))
}

func (cdsap cloudsearchDomainServiceAccessPolicyAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(cdsap.ref.Append("domain_name"))
}

func (cdsap cloudsearchDomainServiceAccessPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cdsap.ref.Append("id"))
}

func (cdsap cloudsearchDomainServiceAccessPolicyAttributes) Timeouts() cloudsearchdomainserviceaccesspolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudsearchdomainserviceaccesspolicy.TimeoutsAttributes](cdsap.ref.Append("timeouts"))
}

type cloudsearchDomainServiceAccessPolicyState struct {
	AccessPolicy string                                              `json:"access_policy"`
	DomainName   string                                              `json:"domain_name"`
	Id           string                                              `json:"id"`
	Timeouts     *cloudsearchdomainserviceaccesspolicy.TimeoutsState `json:"timeouts"`
}
