// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	sesv2dedicatedipassignment "github.com/golingon/terraproviders/aws/4.60.0/sesv2dedicatedipassignment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSesv2DedicatedIpAssignment(name string, args Sesv2DedicatedIpAssignmentArgs) *Sesv2DedicatedIpAssignment {
	return &Sesv2DedicatedIpAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Sesv2DedicatedIpAssignment)(nil)

type Sesv2DedicatedIpAssignment struct {
	Name  string
	Args  Sesv2DedicatedIpAssignmentArgs
	state *sesv2DedicatedIpAssignmentState
}

func (sdia *Sesv2DedicatedIpAssignment) Type() string {
	return "aws_sesv2_dedicated_ip_assignment"
}

func (sdia *Sesv2DedicatedIpAssignment) LocalName() string {
	return sdia.Name
}

func (sdia *Sesv2DedicatedIpAssignment) Configuration() interface{} {
	return sdia.Args
}

func (sdia *Sesv2DedicatedIpAssignment) Attributes() sesv2DedicatedIpAssignmentAttributes {
	return sesv2DedicatedIpAssignmentAttributes{ref: terra.ReferenceResource(sdia)}
}

func (sdia *Sesv2DedicatedIpAssignment) ImportState(av io.Reader) error {
	sdia.state = &sesv2DedicatedIpAssignmentState{}
	if err := json.NewDecoder(av).Decode(sdia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdia.Type(), sdia.LocalName(), err)
	}
	return nil
}

func (sdia *Sesv2DedicatedIpAssignment) State() (*sesv2DedicatedIpAssignmentState, bool) {
	return sdia.state, sdia.state != nil
}

func (sdia *Sesv2DedicatedIpAssignment) StateMust() *sesv2DedicatedIpAssignmentState {
	if sdia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdia.Type(), sdia.LocalName()))
	}
	return sdia.state
}

func (sdia *Sesv2DedicatedIpAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(sdia)
}

type Sesv2DedicatedIpAssignmentArgs struct {
	// DestinationPoolName: string, required
	DestinationPoolName terra.StringValue `hcl:"destination_pool_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Ip: string, required
	Ip terra.StringValue `hcl:"ip,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *sesv2dedicatedipassignment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Sesv2DedicatedIpAssignment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sesv2DedicatedIpAssignmentAttributes struct {
	ref terra.Reference
}

func (sdia sesv2DedicatedIpAssignmentAttributes) DestinationPoolName() terra.StringValue {
	return terra.ReferenceString(sdia.ref.Append("destination_pool_name"))
}

func (sdia sesv2DedicatedIpAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sdia.ref.Append("id"))
}

func (sdia sesv2DedicatedIpAssignmentAttributes) Ip() terra.StringValue {
	return terra.ReferenceString(sdia.ref.Append("ip"))
}

func (sdia sesv2DedicatedIpAssignmentAttributes) Timeouts() sesv2dedicatedipassignment.TimeoutsAttributes {
	return terra.ReferenceSingle[sesv2dedicatedipassignment.TimeoutsAttributes](sdia.ref.Append("timeouts"))
}

type sesv2DedicatedIpAssignmentState struct {
	DestinationPoolName string                                    `json:"destination_pool_name"`
	Id                  string                                    `json:"id"`
	Ip                  string                                    `json:"ip"`
	Timeouts            *sesv2dedicatedipassignment.TimeoutsState `json:"timeouts"`
}
