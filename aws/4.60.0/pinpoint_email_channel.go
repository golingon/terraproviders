// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPinpointEmailChannel(name string, args PinpointEmailChannelArgs) *PinpointEmailChannel {
	return &PinpointEmailChannel{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PinpointEmailChannel)(nil)

type PinpointEmailChannel struct {
	Name  string
	Args  PinpointEmailChannelArgs
	state *pinpointEmailChannelState
}

func (pec *PinpointEmailChannel) Type() string {
	return "aws_pinpoint_email_channel"
}

func (pec *PinpointEmailChannel) LocalName() string {
	return pec.Name
}

func (pec *PinpointEmailChannel) Configuration() interface{} {
	return pec.Args
}

func (pec *PinpointEmailChannel) Attributes() pinpointEmailChannelAttributes {
	return pinpointEmailChannelAttributes{ref: terra.ReferenceResource(pec)}
}

func (pec *PinpointEmailChannel) ImportState(av io.Reader) error {
	pec.state = &pinpointEmailChannelState{}
	if err := json.NewDecoder(av).Decode(pec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pec.Type(), pec.LocalName(), err)
	}
	return nil
}

func (pec *PinpointEmailChannel) State() (*pinpointEmailChannelState, bool) {
	return pec.state, pec.state != nil
}

func (pec *PinpointEmailChannel) StateMust() *pinpointEmailChannelState {
	if pec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pec.Type(), pec.LocalName()))
	}
	return pec.state
}

func (pec *PinpointEmailChannel) DependOn() terra.Reference {
	return terra.ReferenceResource(pec)
}

type PinpointEmailChannelArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// ConfigurationSet: string, optional
	ConfigurationSet terra.StringValue `hcl:"configuration_set,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// FromAddress: string, required
	FromAddress terra.StringValue `hcl:"from_address,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Identity: string, required
	Identity terra.StringValue `hcl:"identity,attr" validate:"required"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// DependsOn contains resources that PinpointEmailChannel depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type pinpointEmailChannelAttributes struct {
	ref terra.Reference
}

func (pec pinpointEmailChannelAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceString(pec.ref.Append("application_id"))
}

func (pec pinpointEmailChannelAttributes) ConfigurationSet() terra.StringValue {
	return terra.ReferenceString(pec.ref.Append("configuration_set"))
}

func (pec pinpointEmailChannelAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(pec.ref.Append("enabled"))
}

func (pec pinpointEmailChannelAttributes) FromAddress() terra.StringValue {
	return terra.ReferenceString(pec.ref.Append("from_address"))
}

func (pec pinpointEmailChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pec.ref.Append("id"))
}

func (pec pinpointEmailChannelAttributes) Identity() terra.StringValue {
	return terra.ReferenceString(pec.ref.Append("identity"))
}

func (pec pinpointEmailChannelAttributes) MessagesPerSecond() terra.NumberValue {
	return terra.ReferenceNumber(pec.ref.Append("messages_per_second"))
}

func (pec pinpointEmailChannelAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(pec.ref.Append("role_arn"))
}

type pinpointEmailChannelState struct {
	ApplicationId     string  `json:"application_id"`
	ConfigurationSet  string  `json:"configuration_set"`
	Enabled           bool    `json:"enabled"`
	FromAddress       string  `json:"from_address"`
	Id                string  `json:"id"`
	Identity          string  `json:"identity"`
	MessagesPerSecond float64 `json:"messages_per_second"`
	RoleArn           string  `json:"role_arn"`
}
