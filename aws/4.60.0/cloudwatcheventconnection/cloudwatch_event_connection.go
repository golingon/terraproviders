// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package cloudwatcheventconnection

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AuthParameters struct {
	// ApiKey: optional
	ApiKey *ApiKey `hcl:"api_key,block"`
	// Basic: optional
	Basic *Basic `hcl:"basic,block"`
	// InvocationHttpParameters: optional
	InvocationHttpParameters *InvocationHttpParameters `hcl:"invocation_http_parameters,block"`
	// Oauth: optional
	Oauth *Oauth `hcl:"oauth,block"`
}

type ApiKey struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Basic struct {
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type InvocationHttpParameters struct {
	// InvocationHttpParametersBody: min=0
	Body []InvocationHttpParametersBody `hcl:"body,block" validate:"min=0"`
	// InvocationHttpParametersHeader: min=0
	Header []InvocationHttpParametersHeader `hcl:"header,block" validate:"min=0"`
	// InvocationHttpParametersQueryString: min=0
	QueryString []InvocationHttpParametersQueryString `hcl:"query_string,block" validate:"min=0"`
}

type InvocationHttpParametersBody struct {
	// IsValueSecret: bool, optional
	IsValueSecret terra.BoolValue `hcl:"is_value_secret,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type InvocationHttpParametersHeader struct {
	// IsValueSecret: bool, optional
	IsValueSecret terra.BoolValue `hcl:"is_value_secret,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type InvocationHttpParametersQueryString struct {
	// IsValueSecret: bool, optional
	IsValueSecret terra.BoolValue `hcl:"is_value_secret,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Oauth struct {
	// AuthorizationEndpoint: string, required
	AuthorizationEndpoint terra.StringValue `hcl:"authorization_endpoint,attr" validate:"required"`
	// HttpMethod: string, required
	HttpMethod terra.StringValue `hcl:"http_method,attr" validate:"required"`
	// ClientParameters: optional
	ClientParameters *ClientParameters `hcl:"client_parameters,block"`
	// OauthHttpParameters: required
	OauthHttpParameters *OauthHttpParameters `hcl:"oauth_http_parameters,block" validate:"required"`
}

type ClientParameters struct {
	// ClientId: string, required
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret: string, required
	ClientSecret terra.StringValue `hcl:"client_secret,attr" validate:"required"`
}

type OauthHttpParameters struct {
	// OauthHttpParametersBody: min=0
	Body []OauthHttpParametersBody `hcl:"body,block" validate:"min=0"`
	// OauthHttpParametersHeader: min=0
	Header []OauthHttpParametersHeader `hcl:"header,block" validate:"min=0"`
	// OauthHttpParametersQueryString: min=0
	QueryString []OauthHttpParametersQueryString `hcl:"query_string,block" validate:"min=0"`
}

type OauthHttpParametersBody struct {
	// IsValueSecret: bool, optional
	IsValueSecret terra.BoolValue `hcl:"is_value_secret,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type OauthHttpParametersHeader struct {
	// IsValueSecret: bool, optional
	IsValueSecret terra.BoolValue `hcl:"is_value_secret,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type OauthHttpParametersQueryString struct {
	// IsValueSecret: bool, optional
	IsValueSecret terra.BoolValue `hcl:"is_value_secret,attr"`
	// Key: string, optional
	Key terra.StringValue `hcl:"key,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type AuthParametersAttributes struct {
	ref terra.Reference
}

func (ap AuthParametersAttributes) InternalRef() terra.Reference {
	return ap.ref
}

func (ap AuthParametersAttributes) InternalWithRef(ref terra.Reference) AuthParametersAttributes {
	return AuthParametersAttributes{ref: ref}
}

func (ap AuthParametersAttributes) InternalTokens() hclwrite.Tokens {
	return ap.ref.InternalTokens()
}

func (ap AuthParametersAttributes) ApiKey() terra.ListValue[ApiKeyAttributes] {
	return terra.ReferenceAsList[ApiKeyAttributes](ap.ref.Append("api_key"))
}

func (ap AuthParametersAttributes) Basic() terra.ListValue[BasicAttributes] {
	return terra.ReferenceAsList[BasicAttributes](ap.ref.Append("basic"))
}

func (ap AuthParametersAttributes) InvocationHttpParameters() terra.ListValue[InvocationHttpParametersAttributes] {
	return terra.ReferenceAsList[InvocationHttpParametersAttributes](ap.ref.Append("invocation_http_parameters"))
}

func (ap AuthParametersAttributes) Oauth() terra.ListValue[OauthAttributes] {
	return terra.ReferenceAsList[OauthAttributes](ap.ref.Append("oauth"))
}

type ApiKeyAttributes struct {
	ref terra.Reference
}

func (ak ApiKeyAttributes) InternalRef() terra.Reference {
	return ak.ref
}

func (ak ApiKeyAttributes) InternalWithRef(ref terra.Reference) ApiKeyAttributes {
	return ApiKeyAttributes{ref: ref}
}

func (ak ApiKeyAttributes) InternalTokens() hclwrite.Tokens {
	return ak.ref.InternalTokens()
}

func (ak ApiKeyAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ak.ref.Append("key"))
}

func (ak ApiKeyAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ak.ref.Append("value"))
}

type BasicAttributes struct {
	ref terra.Reference
}

func (b BasicAttributes) InternalRef() terra.Reference {
	return b.ref
}

func (b BasicAttributes) InternalWithRef(ref terra.Reference) BasicAttributes {
	return BasicAttributes{ref: ref}
}

func (b BasicAttributes) InternalTokens() hclwrite.Tokens {
	return b.ref.InternalTokens()
}

func (b BasicAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("password"))
}

func (b BasicAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("username"))
}

type InvocationHttpParametersAttributes struct {
	ref terra.Reference
}

func (ihp InvocationHttpParametersAttributes) InternalRef() terra.Reference {
	return ihp.ref
}

func (ihp InvocationHttpParametersAttributes) InternalWithRef(ref terra.Reference) InvocationHttpParametersAttributes {
	return InvocationHttpParametersAttributes{ref: ref}
}

func (ihp InvocationHttpParametersAttributes) InternalTokens() hclwrite.Tokens {
	return ihp.ref.InternalTokens()
}

func (ihp InvocationHttpParametersAttributes) Body() terra.ListValue[InvocationHttpParametersBodyAttributes] {
	return terra.ReferenceAsList[InvocationHttpParametersBodyAttributes](ihp.ref.Append("body"))
}

func (ihp InvocationHttpParametersAttributes) Header() terra.ListValue[InvocationHttpParametersHeaderAttributes] {
	return terra.ReferenceAsList[InvocationHttpParametersHeaderAttributes](ihp.ref.Append("header"))
}

func (ihp InvocationHttpParametersAttributes) QueryString() terra.ListValue[InvocationHttpParametersQueryStringAttributes] {
	return terra.ReferenceAsList[InvocationHttpParametersQueryStringAttributes](ihp.ref.Append("query_string"))
}

type InvocationHttpParametersBodyAttributes struct {
	ref terra.Reference
}

func (b InvocationHttpParametersBodyAttributes) InternalRef() terra.Reference {
	return b.ref
}

func (b InvocationHttpParametersBodyAttributes) InternalWithRef(ref terra.Reference) InvocationHttpParametersBodyAttributes {
	return InvocationHttpParametersBodyAttributes{ref: ref}
}

func (b InvocationHttpParametersBodyAttributes) InternalTokens() hclwrite.Tokens {
	return b.ref.InternalTokens()
}

func (b InvocationHttpParametersBodyAttributes) IsValueSecret() terra.BoolValue {
	return terra.ReferenceAsBool(b.ref.Append("is_value_secret"))
}

func (b InvocationHttpParametersBodyAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("key"))
}

func (b InvocationHttpParametersBodyAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("value"))
}

type InvocationHttpParametersHeaderAttributes struct {
	ref terra.Reference
}

func (h InvocationHttpParametersHeaderAttributes) InternalRef() terra.Reference {
	return h.ref
}

func (h InvocationHttpParametersHeaderAttributes) InternalWithRef(ref terra.Reference) InvocationHttpParametersHeaderAttributes {
	return InvocationHttpParametersHeaderAttributes{ref: ref}
}

func (h InvocationHttpParametersHeaderAttributes) InternalTokens() hclwrite.Tokens {
	return h.ref.InternalTokens()
}

func (h InvocationHttpParametersHeaderAttributes) IsValueSecret() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("is_value_secret"))
}

func (h InvocationHttpParametersHeaderAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("key"))
}

func (h InvocationHttpParametersHeaderAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("value"))
}

type InvocationHttpParametersQueryStringAttributes struct {
	ref terra.Reference
}

func (qs InvocationHttpParametersQueryStringAttributes) InternalRef() terra.Reference {
	return qs.ref
}

func (qs InvocationHttpParametersQueryStringAttributes) InternalWithRef(ref terra.Reference) InvocationHttpParametersQueryStringAttributes {
	return InvocationHttpParametersQueryStringAttributes{ref: ref}
}

func (qs InvocationHttpParametersQueryStringAttributes) InternalTokens() hclwrite.Tokens {
	return qs.ref.InternalTokens()
}

func (qs InvocationHttpParametersQueryStringAttributes) IsValueSecret() terra.BoolValue {
	return terra.ReferenceAsBool(qs.ref.Append("is_value_secret"))
}

func (qs InvocationHttpParametersQueryStringAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(qs.ref.Append("key"))
}

func (qs InvocationHttpParametersQueryStringAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(qs.ref.Append("value"))
}

type OauthAttributes struct {
	ref terra.Reference
}

func (o OauthAttributes) InternalRef() terra.Reference {
	return o.ref
}

func (o OauthAttributes) InternalWithRef(ref terra.Reference) OauthAttributes {
	return OauthAttributes{ref: ref}
}

func (o OauthAttributes) InternalTokens() hclwrite.Tokens {
	return o.ref.InternalTokens()
}

func (o OauthAttributes) AuthorizationEndpoint() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("authorization_endpoint"))
}

func (o OauthAttributes) HttpMethod() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("http_method"))
}

func (o OauthAttributes) ClientParameters() terra.ListValue[ClientParametersAttributes] {
	return terra.ReferenceAsList[ClientParametersAttributes](o.ref.Append("client_parameters"))
}

func (o OauthAttributes) OauthHttpParameters() terra.ListValue[OauthHttpParametersAttributes] {
	return terra.ReferenceAsList[OauthHttpParametersAttributes](o.ref.Append("oauth_http_parameters"))
}

type ClientParametersAttributes struct {
	ref terra.Reference
}

func (cp ClientParametersAttributes) InternalRef() terra.Reference {
	return cp.ref
}

func (cp ClientParametersAttributes) InternalWithRef(ref terra.Reference) ClientParametersAttributes {
	return ClientParametersAttributes{ref: ref}
}

func (cp ClientParametersAttributes) InternalTokens() hclwrite.Tokens {
	return cp.ref.InternalTokens()
}

func (cp ClientParametersAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("client_id"))
}

func (cp ClientParametersAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("client_secret"))
}

type OauthHttpParametersAttributes struct {
	ref terra.Reference
}

func (ohp OauthHttpParametersAttributes) InternalRef() terra.Reference {
	return ohp.ref
}

func (ohp OauthHttpParametersAttributes) InternalWithRef(ref terra.Reference) OauthHttpParametersAttributes {
	return OauthHttpParametersAttributes{ref: ref}
}

func (ohp OauthHttpParametersAttributes) InternalTokens() hclwrite.Tokens {
	return ohp.ref.InternalTokens()
}

func (ohp OauthHttpParametersAttributes) Body() terra.ListValue[OauthHttpParametersBodyAttributes] {
	return terra.ReferenceAsList[OauthHttpParametersBodyAttributes](ohp.ref.Append("body"))
}

func (ohp OauthHttpParametersAttributes) Header() terra.ListValue[OauthHttpParametersHeaderAttributes] {
	return terra.ReferenceAsList[OauthHttpParametersHeaderAttributes](ohp.ref.Append("header"))
}

func (ohp OauthHttpParametersAttributes) QueryString() terra.ListValue[OauthHttpParametersQueryStringAttributes] {
	return terra.ReferenceAsList[OauthHttpParametersQueryStringAttributes](ohp.ref.Append("query_string"))
}

type OauthHttpParametersBodyAttributes struct {
	ref terra.Reference
}

func (b OauthHttpParametersBodyAttributes) InternalRef() terra.Reference {
	return b.ref
}

func (b OauthHttpParametersBodyAttributes) InternalWithRef(ref terra.Reference) OauthHttpParametersBodyAttributes {
	return OauthHttpParametersBodyAttributes{ref: ref}
}

func (b OauthHttpParametersBodyAttributes) InternalTokens() hclwrite.Tokens {
	return b.ref.InternalTokens()
}

func (b OauthHttpParametersBodyAttributes) IsValueSecret() terra.BoolValue {
	return terra.ReferenceAsBool(b.ref.Append("is_value_secret"))
}

func (b OauthHttpParametersBodyAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("key"))
}

func (b OauthHttpParametersBodyAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("value"))
}

type OauthHttpParametersHeaderAttributes struct {
	ref terra.Reference
}

func (h OauthHttpParametersHeaderAttributes) InternalRef() terra.Reference {
	return h.ref
}

func (h OauthHttpParametersHeaderAttributes) InternalWithRef(ref terra.Reference) OauthHttpParametersHeaderAttributes {
	return OauthHttpParametersHeaderAttributes{ref: ref}
}

func (h OauthHttpParametersHeaderAttributes) InternalTokens() hclwrite.Tokens {
	return h.ref.InternalTokens()
}

func (h OauthHttpParametersHeaderAttributes) IsValueSecret() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("is_value_secret"))
}

func (h OauthHttpParametersHeaderAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("key"))
}

func (h OauthHttpParametersHeaderAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("value"))
}

type OauthHttpParametersQueryStringAttributes struct {
	ref terra.Reference
}

func (qs OauthHttpParametersQueryStringAttributes) InternalRef() terra.Reference {
	return qs.ref
}

func (qs OauthHttpParametersQueryStringAttributes) InternalWithRef(ref terra.Reference) OauthHttpParametersQueryStringAttributes {
	return OauthHttpParametersQueryStringAttributes{ref: ref}
}

func (qs OauthHttpParametersQueryStringAttributes) InternalTokens() hclwrite.Tokens {
	return qs.ref.InternalTokens()
}

func (qs OauthHttpParametersQueryStringAttributes) IsValueSecret() terra.BoolValue {
	return terra.ReferenceAsBool(qs.ref.Append("is_value_secret"))
}

func (qs OauthHttpParametersQueryStringAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(qs.ref.Append("key"))
}

func (qs OauthHttpParametersQueryStringAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(qs.ref.Append("value"))
}

type AuthParametersState struct {
	ApiKey                   []ApiKeyState                   `json:"api_key"`
	Basic                    []BasicState                    `json:"basic"`
	InvocationHttpParameters []InvocationHttpParametersState `json:"invocation_http_parameters"`
	Oauth                    []OauthState                    `json:"oauth"`
}

type ApiKeyState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type BasicState struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type InvocationHttpParametersState struct {
	Body        []InvocationHttpParametersBodyState        `json:"body"`
	Header      []InvocationHttpParametersHeaderState      `json:"header"`
	QueryString []InvocationHttpParametersQueryStringState `json:"query_string"`
}

type InvocationHttpParametersBodyState struct {
	IsValueSecret bool   `json:"is_value_secret"`
	Key           string `json:"key"`
	Value         string `json:"value"`
}

type InvocationHttpParametersHeaderState struct {
	IsValueSecret bool   `json:"is_value_secret"`
	Key           string `json:"key"`
	Value         string `json:"value"`
}

type InvocationHttpParametersQueryStringState struct {
	IsValueSecret bool   `json:"is_value_secret"`
	Key           string `json:"key"`
	Value         string `json:"value"`
}

type OauthState struct {
	AuthorizationEndpoint string                     `json:"authorization_endpoint"`
	HttpMethod            string                     `json:"http_method"`
	ClientParameters      []ClientParametersState    `json:"client_parameters"`
	OauthHttpParameters   []OauthHttpParametersState `json:"oauth_http_parameters"`
}

type ClientParametersState struct {
	ClientId     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
}

type OauthHttpParametersState struct {
	Body        []OauthHttpParametersBodyState        `json:"body"`
	Header      []OauthHttpParametersHeaderState      `json:"header"`
	QueryString []OauthHttpParametersQueryStringState `json:"query_string"`
}

type OauthHttpParametersBodyState struct {
	IsValueSecret bool   `json:"is_value_secret"`
	Key           string `json:"key"`
	Value         string `json:"value"`
}

type OauthHttpParametersHeaderState struct {
	IsValueSecret bool   `json:"is_value_secret"`
	Key           string `json:"key"`
	Value         string `json:"value"`
}

type OauthHttpParametersQueryStringState struct {
	IsValueSecret bool   `json:"is_value_secret"`
	Key           string `json:"key"`
	Value         string `json:"value"`
}
