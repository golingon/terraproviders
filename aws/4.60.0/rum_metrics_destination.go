// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRumMetricsDestination(name string, args RumMetricsDestinationArgs) *RumMetricsDestination {
	return &RumMetricsDestination{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RumMetricsDestination)(nil)

type RumMetricsDestination struct {
	Name  string
	Args  RumMetricsDestinationArgs
	state *rumMetricsDestinationState
}

func (rmd *RumMetricsDestination) Type() string {
	return "aws_rum_metrics_destination"
}

func (rmd *RumMetricsDestination) LocalName() string {
	return rmd.Name
}

func (rmd *RumMetricsDestination) Configuration() interface{} {
	return rmd.Args
}

func (rmd *RumMetricsDestination) Attributes() rumMetricsDestinationAttributes {
	return rumMetricsDestinationAttributes{ref: terra.ReferenceResource(rmd)}
}

func (rmd *RumMetricsDestination) ImportState(av io.Reader) error {
	rmd.state = &rumMetricsDestinationState{}
	if err := json.NewDecoder(av).Decode(rmd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rmd.Type(), rmd.LocalName(), err)
	}
	return nil
}

func (rmd *RumMetricsDestination) State() (*rumMetricsDestinationState, bool) {
	return rmd.state, rmd.state != nil
}

func (rmd *RumMetricsDestination) StateMust() *rumMetricsDestinationState {
	if rmd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rmd.Type(), rmd.LocalName()))
	}
	return rmd.state
}

func (rmd *RumMetricsDestination) DependOn() terra.Reference {
	return terra.ReferenceResource(rmd)
}

type RumMetricsDestinationArgs struct {
	// AppMonitorName: string, required
	AppMonitorName terra.StringValue `hcl:"app_monitor_name,attr" validate:"required"`
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// DestinationArn: string, optional
	DestinationArn terra.StringValue `hcl:"destination_arn,attr"`
	// IamRoleArn: string, optional
	IamRoleArn terra.StringValue `hcl:"iam_role_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DependsOn contains resources that RumMetricsDestination depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type rumMetricsDestinationAttributes struct {
	ref terra.Reference
}

func (rmd rumMetricsDestinationAttributes) AppMonitorName() terra.StringValue {
	return terra.ReferenceString(rmd.ref.Append("app_monitor_name"))
}

func (rmd rumMetricsDestinationAttributes) Destination() terra.StringValue {
	return terra.ReferenceString(rmd.ref.Append("destination"))
}

func (rmd rumMetricsDestinationAttributes) DestinationArn() terra.StringValue {
	return terra.ReferenceString(rmd.ref.Append("destination_arn"))
}

func (rmd rumMetricsDestinationAttributes) IamRoleArn() terra.StringValue {
	return terra.ReferenceString(rmd.ref.Append("iam_role_arn"))
}

func (rmd rumMetricsDestinationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rmd.ref.Append("id"))
}

type rumMetricsDestinationState struct {
	AppMonitorName string `json:"app_monitor_name"`
	Destination    string `json:"destination"`
	DestinationArn string `json:"destination_arn"`
	IamRoleArn     string `json:"iam_role_arn"`
	Id             string `json:"id"`
}
