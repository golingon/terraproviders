// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataconnectuserhierarchystructure

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type HierarchyStructure struct {
	// LevelFive: min=0
	LevelFive []LevelFive `hcl:"level_five,block" validate:"min=0"`
	// LevelFour: min=0
	LevelFour []LevelFour `hcl:"level_four,block" validate:"min=0"`
	// LevelOne: min=0
	LevelOne []LevelOne `hcl:"level_one,block" validate:"min=0"`
	// LevelThree: min=0
	LevelThree []LevelThree `hcl:"level_three,block" validate:"min=0"`
	// LevelTwo: min=0
	LevelTwo []LevelTwo `hcl:"level_two,block" validate:"min=0"`
}

type LevelFive struct{}

type LevelFour struct{}

type LevelOne struct{}

type LevelThree struct{}

type LevelTwo struct{}

type HierarchyStructureAttributes struct {
	ref terra.Reference
}

func (hs HierarchyStructureAttributes) InternalRef() terra.Reference {
	return hs.ref
}

func (hs HierarchyStructureAttributes) InternalWithRef(ref terra.Reference) HierarchyStructureAttributes {
	return HierarchyStructureAttributes{ref: ref}
}

func (hs HierarchyStructureAttributes) InternalTokens() hclwrite.Tokens {
	return hs.ref.InternalTokens()
}

func (hs HierarchyStructureAttributes) LevelFive() terra.ListValue[LevelFiveAttributes] {
	return terra.ReferenceList[LevelFiveAttributes](hs.ref.Append("level_five"))
}

func (hs HierarchyStructureAttributes) LevelFour() terra.ListValue[LevelFourAttributes] {
	return terra.ReferenceList[LevelFourAttributes](hs.ref.Append("level_four"))
}

func (hs HierarchyStructureAttributes) LevelOne() terra.ListValue[LevelOneAttributes] {
	return terra.ReferenceList[LevelOneAttributes](hs.ref.Append("level_one"))
}

func (hs HierarchyStructureAttributes) LevelThree() terra.ListValue[LevelThreeAttributes] {
	return terra.ReferenceList[LevelThreeAttributes](hs.ref.Append("level_three"))
}

func (hs HierarchyStructureAttributes) LevelTwo() terra.ListValue[LevelTwoAttributes] {
	return terra.ReferenceList[LevelTwoAttributes](hs.ref.Append("level_two"))
}

type LevelFiveAttributes struct {
	ref terra.Reference
}

func (lf LevelFiveAttributes) InternalRef() terra.Reference {
	return lf.ref
}

func (lf LevelFiveAttributes) InternalWithRef(ref terra.Reference) LevelFiveAttributes {
	return LevelFiveAttributes{ref: ref}
}

func (lf LevelFiveAttributes) InternalTokens() hclwrite.Tokens {
	return lf.ref.InternalTokens()
}

func (lf LevelFiveAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(lf.ref.Append("arn"))
}

func (lf LevelFiveAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lf.ref.Append("id"))
}

func (lf LevelFiveAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lf.ref.Append("name"))
}

type LevelFourAttributes struct {
	ref terra.Reference
}

func (lf LevelFourAttributes) InternalRef() terra.Reference {
	return lf.ref
}

func (lf LevelFourAttributes) InternalWithRef(ref terra.Reference) LevelFourAttributes {
	return LevelFourAttributes{ref: ref}
}

func (lf LevelFourAttributes) InternalTokens() hclwrite.Tokens {
	return lf.ref.InternalTokens()
}

func (lf LevelFourAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(lf.ref.Append("arn"))
}

func (lf LevelFourAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lf.ref.Append("id"))
}

func (lf LevelFourAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lf.ref.Append("name"))
}

type LevelOneAttributes struct {
	ref terra.Reference
}

func (lo LevelOneAttributes) InternalRef() terra.Reference {
	return lo.ref
}

func (lo LevelOneAttributes) InternalWithRef(ref terra.Reference) LevelOneAttributes {
	return LevelOneAttributes{ref: ref}
}

func (lo LevelOneAttributes) InternalTokens() hclwrite.Tokens {
	return lo.ref.InternalTokens()
}

func (lo LevelOneAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(lo.ref.Append("arn"))
}

func (lo LevelOneAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lo.ref.Append("id"))
}

func (lo LevelOneAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lo.ref.Append("name"))
}

type LevelThreeAttributes struct {
	ref terra.Reference
}

func (lt LevelThreeAttributes) InternalRef() terra.Reference {
	return lt.ref
}

func (lt LevelThreeAttributes) InternalWithRef(ref terra.Reference) LevelThreeAttributes {
	return LevelThreeAttributes{ref: ref}
}

func (lt LevelThreeAttributes) InternalTokens() hclwrite.Tokens {
	return lt.ref.InternalTokens()
}

func (lt LevelThreeAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(lt.ref.Append("arn"))
}

func (lt LevelThreeAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lt.ref.Append("id"))
}

func (lt LevelThreeAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lt.ref.Append("name"))
}

type LevelTwoAttributes struct {
	ref terra.Reference
}

func (lt LevelTwoAttributes) InternalRef() terra.Reference {
	return lt.ref
}

func (lt LevelTwoAttributes) InternalWithRef(ref terra.Reference) LevelTwoAttributes {
	return LevelTwoAttributes{ref: ref}
}

func (lt LevelTwoAttributes) InternalTokens() hclwrite.Tokens {
	return lt.ref.InternalTokens()
}

func (lt LevelTwoAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(lt.ref.Append("arn"))
}

func (lt LevelTwoAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lt.ref.Append("id"))
}

func (lt LevelTwoAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lt.ref.Append("name"))
}

type HierarchyStructureState struct {
	LevelFive  []LevelFiveState  `json:"level_five"`
	LevelFour  []LevelFourState  `json:"level_four"`
	LevelOne   []LevelOneState   `json:"level_one"`
	LevelThree []LevelThreeState `json:"level_three"`
	LevelTwo   []LevelTwoState   `json:"level_two"`
}

type LevelFiveState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type LevelFourState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type LevelOneState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type LevelThreeState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type LevelTwoState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}
