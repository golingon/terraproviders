// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	mediaconvertqueue "github.com/golingon/terraproviders/aws/4.60.0/mediaconvertqueue"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMediaConvertQueue(name string, args MediaConvertQueueArgs) *MediaConvertQueue {
	return &MediaConvertQueue{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MediaConvertQueue)(nil)

type MediaConvertQueue struct {
	Name  string
	Args  MediaConvertQueueArgs
	state *mediaConvertQueueState
}

func (mcq *MediaConvertQueue) Type() string {
	return "aws_media_convert_queue"
}

func (mcq *MediaConvertQueue) LocalName() string {
	return mcq.Name
}

func (mcq *MediaConvertQueue) Configuration() interface{} {
	return mcq.Args
}

func (mcq *MediaConvertQueue) Attributes() mediaConvertQueueAttributes {
	return mediaConvertQueueAttributes{ref: terra.ReferenceResource(mcq)}
}

func (mcq *MediaConvertQueue) ImportState(av io.Reader) error {
	mcq.state = &mediaConvertQueueState{}
	if err := json.NewDecoder(av).Decode(mcq.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mcq.Type(), mcq.LocalName(), err)
	}
	return nil
}

func (mcq *MediaConvertQueue) State() (*mediaConvertQueueState, bool) {
	return mcq.state, mcq.state != nil
}

func (mcq *MediaConvertQueue) StateMust() *mediaConvertQueueState {
	if mcq.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mcq.Type(), mcq.LocalName()))
	}
	return mcq.state
}

func (mcq *MediaConvertQueue) DependOn() terra.Reference {
	return terra.ReferenceResource(mcq)
}

type MediaConvertQueueArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PricingPlan: string, optional
	PricingPlan terra.StringValue `hcl:"pricing_plan,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ReservationPlanSettings: optional
	ReservationPlanSettings *mediaconvertqueue.ReservationPlanSettings `hcl:"reservation_plan_settings,block"`
	// DependsOn contains resources that MediaConvertQueue depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mediaConvertQueueAttributes struct {
	ref terra.Reference
}

func (mcq mediaConvertQueueAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(mcq.ref.Append("arn"))
}

func (mcq mediaConvertQueueAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mcq.ref.Append("description"))
}

func (mcq mediaConvertQueueAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mcq.ref.Append("id"))
}

func (mcq mediaConvertQueueAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mcq.ref.Append("name"))
}

func (mcq mediaConvertQueueAttributes) PricingPlan() terra.StringValue {
	return terra.ReferenceString(mcq.ref.Append("pricing_plan"))
}

func (mcq mediaConvertQueueAttributes) Status() terra.StringValue {
	return terra.ReferenceString(mcq.ref.Append("status"))
}

func (mcq mediaConvertQueueAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mcq.ref.Append("tags"))
}

func (mcq mediaConvertQueueAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mcq.ref.Append("tags_all"))
}

func (mcq mediaConvertQueueAttributes) ReservationPlanSettings() terra.ListValue[mediaconvertqueue.ReservationPlanSettingsAttributes] {
	return terra.ReferenceList[mediaconvertqueue.ReservationPlanSettingsAttributes](mcq.ref.Append("reservation_plan_settings"))
}

type mediaConvertQueueState struct {
	Arn                     string                                           `json:"arn"`
	Description             string                                           `json:"description"`
	Id                      string                                           `json:"id"`
	Name                    string                                           `json:"name"`
	PricingPlan             string                                           `json:"pricing_plan"`
	Status                  string                                           `json:"status"`
	Tags                    map[string]string                                `json:"tags"`
	TagsAll                 map[string]string                                `json:"tags_all"`
	ReservationPlanSettings []mediaconvertqueue.ReservationPlanSettingsState `json:"reservation_plan_settings"`
}
