// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketPolicy(name string, args S3BucketPolicyArgs) *S3BucketPolicy {
	return &S3BucketPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketPolicy)(nil)

type S3BucketPolicy struct {
	Name  string
	Args  S3BucketPolicyArgs
	state *s3BucketPolicyState
}

func (sbp *S3BucketPolicy) Type() string {
	return "aws_s3_bucket_policy"
}

func (sbp *S3BucketPolicy) LocalName() string {
	return sbp.Name
}

func (sbp *S3BucketPolicy) Configuration() interface{} {
	return sbp.Args
}

func (sbp *S3BucketPolicy) Attributes() s3BucketPolicyAttributes {
	return s3BucketPolicyAttributes{ref: terra.ReferenceResource(sbp)}
}

func (sbp *S3BucketPolicy) ImportState(av io.Reader) error {
	sbp.state = &s3BucketPolicyState{}
	if err := json.NewDecoder(av).Decode(sbp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbp.Type(), sbp.LocalName(), err)
	}
	return nil
}

func (sbp *S3BucketPolicy) State() (*s3BucketPolicyState, bool) {
	return sbp.state, sbp.state != nil
}

func (sbp *S3BucketPolicy) StateMust() *s3BucketPolicyState {
	if sbp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbp.Type(), sbp.LocalName()))
	}
	return sbp.state
}

func (sbp *S3BucketPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(sbp)
}

type S3BucketPolicyArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// DependsOn contains resources that S3BucketPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketPolicyAttributes struct {
	ref terra.Reference
}

func (sbp s3BucketPolicyAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbp.ref.Append("bucket"))
}

func (sbp s3BucketPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbp.ref.Append("id"))
}

func (sbp s3BucketPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(sbp.ref.Append("policy"))
}

type s3BucketPolicyState struct {
	Bucket string `json:"bucket"`
	Id     string `json:"id"`
	Policy string `json:"policy"`
}
