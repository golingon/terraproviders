// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	accessanalyzerarchiverule "github.com/golingon/terraproviders/aws/4.60.0/accessanalyzerarchiverule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAccessanalyzerArchiveRule(name string, args AccessanalyzerArchiveRuleArgs) *AccessanalyzerArchiveRule {
	return &AccessanalyzerArchiveRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccessanalyzerArchiveRule)(nil)

type AccessanalyzerArchiveRule struct {
	Name  string
	Args  AccessanalyzerArchiveRuleArgs
	state *accessanalyzerArchiveRuleState
}

func (aar *AccessanalyzerArchiveRule) Type() string {
	return "aws_accessanalyzer_archive_rule"
}

func (aar *AccessanalyzerArchiveRule) LocalName() string {
	return aar.Name
}

func (aar *AccessanalyzerArchiveRule) Configuration() interface{} {
	return aar.Args
}

func (aar *AccessanalyzerArchiveRule) Attributes() accessanalyzerArchiveRuleAttributes {
	return accessanalyzerArchiveRuleAttributes{ref: terra.ReferenceResource(aar)}
}

func (aar *AccessanalyzerArchiveRule) ImportState(av io.Reader) error {
	aar.state = &accessanalyzerArchiveRuleState{}
	if err := json.NewDecoder(av).Decode(aar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aar.Type(), aar.LocalName(), err)
	}
	return nil
}

func (aar *AccessanalyzerArchiveRule) State() (*accessanalyzerArchiveRuleState, bool) {
	return aar.state, aar.state != nil
}

func (aar *AccessanalyzerArchiveRule) StateMust() *accessanalyzerArchiveRuleState {
	if aar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aar.Type(), aar.LocalName()))
	}
	return aar.state
}

func (aar *AccessanalyzerArchiveRule) DependOn() terra.Reference {
	return terra.ReferenceResource(aar)
}

type AccessanalyzerArchiveRuleArgs struct {
	// AnalyzerName: string, required
	AnalyzerName terra.StringValue `hcl:"analyzer_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RuleName: string, required
	RuleName terra.StringValue `hcl:"rule_name,attr" validate:"required"`
	// Filter: min=1
	Filter []accessanalyzerarchiverule.Filter `hcl:"filter,block" validate:"min=1"`
	// DependsOn contains resources that AccessanalyzerArchiveRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type accessanalyzerArchiveRuleAttributes struct {
	ref terra.Reference
}

func (aar accessanalyzerArchiveRuleAttributes) AnalyzerName() terra.StringValue {
	return terra.ReferenceString(aar.ref.Append("analyzer_name"))
}

func (aar accessanalyzerArchiveRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aar.ref.Append("id"))
}

func (aar accessanalyzerArchiveRuleAttributes) RuleName() terra.StringValue {
	return terra.ReferenceString(aar.ref.Append("rule_name"))
}

func (aar accessanalyzerArchiveRuleAttributes) Filter() terra.SetValue[accessanalyzerarchiverule.FilterAttributes] {
	return terra.ReferenceSet[accessanalyzerarchiverule.FilterAttributes](aar.ref.Append("filter"))
}

type accessanalyzerArchiveRuleState struct {
	AnalyzerName string                                  `json:"analyzer_name"`
	Id           string                                  `json:"id"`
	RuleName     string                                  `json:"rule_name"`
	Filter       []accessanalyzerarchiverule.FilterState `json:"filter"`
}
