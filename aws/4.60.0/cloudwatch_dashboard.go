// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudwatchDashboard(name string, args CloudwatchDashboardArgs) *CloudwatchDashboard {
	return &CloudwatchDashboard{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudwatchDashboard)(nil)

type CloudwatchDashboard struct {
	Name  string
	Args  CloudwatchDashboardArgs
	state *cloudwatchDashboardState
}

func (cd *CloudwatchDashboard) Type() string {
	return "aws_cloudwatch_dashboard"
}

func (cd *CloudwatchDashboard) LocalName() string {
	return cd.Name
}

func (cd *CloudwatchDashboard) Configuration() interface{} {
	return cd.Args
}

func (cd *CloudwatchDashboard) Attributes() cloudwatchDashboardAttributes {
	return cloudwatchDashboardAttributes{ref: terra.ReferenceResource(cd)}
}

func (cd *CloudwatchDashboard) ImportState(av io.Reader) error {
	cd.state = &cloudwatchDashboardState{}
	if err := json.NewDecoder(av).Decode(cd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cd.Type(), cd.LocalName(), err)
	}
	return nil
}

func (cd *CloudwatchDashboard) State() (*cloudwatchDashboardState, bool) {
	return cd.state, cd.state != nil
}

func (cd *CloudwatchDashboard) StateMust() *cloudwatchDashboardState {
	if cd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cd.Type(), cd.LocalName()))
	}
	return cd.state
}

func (cd *CloudwatchDashboard) DependOn() terra.Reference {
	return terra.ReferenceResource(cd)
}

type CloudwatchDashboardArgs struct {
	// DashboardBody: string, required
	DashboardBody terra.StringValue `hcl:"dashboard_body,attr" validate:"required"`
	// DashboardName: string, required
	DashboardName terra.StringValue `hcl:"dashboard_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DependsOn contains resources that CloudwatchDashboard depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudwatchDashboardAttributes struct {
	ref terra.Reference
}

func (cd cloudwatchDashboardAttributes) DashboardArn() terra.StringValue {
	return terra.ReferenceString(cd.ref.Append("dashboard_arn"))
}

func (cd cloudwatchDashboardAttributes) DashboardBody() terra.StringValue {
	return terra.ReferenceString(cd.ref.Append("dashboard_body"))
}

func (cd cloudwatchDashboardAttributes) DashboardName() terra.StringValue {
	return terra.ReferenceString(cd.ref.Append("dashboard_name"))
}

func (cd cloudwatchDashboardAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cd.ref.Append("id"))
}

type cloudwatchDashboardState struct {
	DashboardArn  string `json:"dashboard_arn"`
	DashboardBody string `json:"dashboard_body"`
	DashboardName string `json:"dashboard_name"`
	Id            string `json:"id"`
}
