// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudwatchmetricalarm "github.com/golingon/terraproviders/aws/4.60.0/cloudwatchmetricalarm"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudwatchMetricAlarm(name string, args CloudwatchMetricAlarmArgs) *CloudwatchMetricAlarm {
	return &CloudwatchMetricAlarm{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudwatchMetricAlarm)(nil)

type CloudwatchMetricAlarm struct {
	Name  string
	Args  CloudwatchMetricAlarmArgs
	state *cloudwatchMetricAlarmState
}

func (cma *CloudwatchMetricAlarm) Type() string {
	return "aws_cloudwatch_metric_alarm"
}

func (cma *CloudwatchMetricAlarm) LocalName() string {
	return cma.Name
}

func (cma *CloudwatchMetricAlarm) Configuration() interface{} {
	return cma.Args
}

func (cma *CloudwatchMetricAlarm) Attributes() cloudwatchMetricAlarmAttributes {
	return cloudwatchMetricAlarmAttributes{ref: terra.ReferenceResource(cma)}
}

func (cma *CloudwatchMetricAlarm) ImportState(av io.Reader) error {
	cma.state = &cloudwatchMetricAlarmState{}
	if err := json.NewDecoder(av).Decode(cma.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cma.Type(), cma.LocalName(), err)
	}
	return nil
}

func (cma *CloudwatchMetricAlarm) State() (*cloudwatchMetricAlarmState, bool) {
	return cma.state, cma.state != nil
}

func (cma *CloudwatchMetricAlarm) StateMust() *cloudwatchMetricAlarmState {
	if cma.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cma.Type(), cma.LocalName()))
	}
	return cma.state
}

func (cma *CloudwatchMetricAlarm) DependOn() terra.Reference {
	return terra.ReferenceResource(cma)
}

type CloudwatchMetricAlarmArgs struct {
	// ActionsEnabled: bool, optional
	ActionsEnabled terra.BoolValue `hcl:"actions_enabled,attr"`
	// AlarmActions: set of string, optional
	AlarmActions terra.SetValue[terra.StringValue] `hcl:"alarm_actions,attr"`
	// AlarmDescription: string, optional
	AlarmDescription terra.StringValue `hcl:"alarm_description,attr"`
	// AlarmName: string, required
	AlarmName terra.StringValue `hcl:"alarm_name,attr" validate:"required"`
	// ComparisonOperator: string, required
	ComparisonOperator terra.StringValue `hcl:"comparison_operator,attr" validate:"required"`
	// DatapointsToAlarm: number, optional
	DatapointsToAlarm terra.NumberValue `hcl:"datapoints_to_alarm,attr"`
	// Dimensions: map of string, optional
	Dimensions terra.MapValue[terra.StringValue] `hcl:"dimensions,attr"`
	// EvaluateLowSampleCountPercentiles: string, optional
	EvaluateLowSampleCountPercentiles terra.StringValue `hcl:"evaluate_low_sample_count_percentiles,attr"`
	// EvaluationPeriods: number, required
	EvaluationPeriods terra.NumberValue `hcl:"evaluation_periods,attr" validate:"required"`
	// ExtendedStatistic: string, optional
	ExtendedStatistic terra.StringValue `hcl:"extended_statistic,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InsufficientDataActions: set of string, optional
	InsufficientDataActions terra.SetValue[terra.StringValue] `hcl:"insufficient_data_actions,attr"`
	// MetricName: string, optional
	MetricName terra.StringValue `hcl:"metric_name,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// OkActions: set of string, optional
	OkActions terra.SetValue[terra.StringValue] `hcl:"ok_actions,attr"`
	// Period: number, optional
	Period terra.NumberValue `hcl:"period,attr"`
	// Statistic: string, optional
	Statistic terra.StringValue `hcl:"statistic,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Threshold: number, optional
	Threshold terra.NumberValue `hcl:"threshold,attr"`
	// ThresholdMetricId: string, optional
	ThresholdMetricId terra.StringValue `hcl:"threshold_metric_id,attr"`
	// TreatMissingData: string, optional
	TreatMissingData terra.StringValue `hcl:"treat_missing_data,attr"`
	// Unit: string, optional
	Unit terra.StringValue `hcl:"unit,attr"`
	// MetricQuery: min=0
	MetricQuery []cloudwatchmetricalarm.MetricQuery `hcl:"metric_query,block" validate:"min=0"`
	// DependsOn contains resources that CloudwatchMetricAlarm depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudwatchMetricAlarmAttributes struct {
	ref terra.Reference
}

func (cma cloudwatchMetricAlarmAttributes) ActionsEnabled() terra.BoolValue {
	return terra.ReferenceBool(cma.ref.Append("actions_enabled"))
}

func (cma cloudwatchMetricAlarmAttributes) AlarmActions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cma.ref.Append("alarm_actions"))
}

func (cma cloudwatchMetricAlarmAttributes) AlarmDescription() terra.StringValue {
	return terra.ReferenceString(cma.ref.Append("alarm_description"))
}

func (cma cloudwatchMetricAlarmAttributes) AlarmName() terra.StringValue {
	return terra.ReferenceString(cma.ref.Append("alarm_name"))
}

func (cma cloudwatchMetricAlarmAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cma.ref.Append("arn"))
}

func (cma cloudwatchMetricAlarmAttributes) ComparisonOperator() terra.StringValue {
	return terra.ReferenceString(cma.ref.Append("comparison_operator"))
}

func (cma cloudwatchMetricAlarmAttributes) DatapointsToAlarm() terra.NumberValue {
	return terra.ReferenceNumber(cma.ref.Append("datapoints_to_alarm"))
}

func (cma cloudwatchMetricAlarmAttributes) Dimensions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cma.ref.Append("dimensions"))
}

func (cma cloudwatchMetricAlarmAttributes) EvaluateLowSampleCountPercentiles() terra.StringValue {
	return terra.ReferenceString(cma.ref.Append("evaluate_low_sample_count_percentiles"))
}

func (cma cloudwatchMetricAlarmAttributes) EvaluationPeriods() terra.NumberValue {
	return terra.ReferenceNumber(cma.ref.Append("evaluation_periods"))
}

func (cma cloudwatchMetricAlarmAttributes) ExtendedStatistic() terra.StringValue {
	return terra.ReferenceString(cma.ref.Append("extended_statistic"))
}

func (cma cloudwatchMetricAlarmAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cma.ref.Append("id"))
}

func (cma cloudwatchMetricAlarmAttributes) InsufficientDataActions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cma.ref.Append("insufficient_data_actions"))
}

func (cma cloudwatchMetricAlarmAttributes) MetricName() terra.StringValue {
	return terra.ReferenceString(cma.ref.Append("metric_name"))
}

func (cma cloudwatchMetricAlarmAttributes) Namespace() terra.StringValue {
	return terra.ReferenceString(cma.ref.Append("namespace"))
}

func (cma cloudwatchMetricAlarmAttributes) OkActions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cma.ref.Append("ok_actions"))
}

func (cma cloudwatchMetricAlarmAttributes) Period() terra.NumberValue {
	return terra.ReferenceNumber(cma.ref.Append("period"))
}

func (cma cloudwatchMetricAlarmAttributes) Statistic() terra.StringValue {
	return terra.ReferenceString(cma.ref.Append("statistic"))
}

func (cma cloudwatchMetricAlarmAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cma.ref.Append("tags"))
}

func (cma cloudwatchMetricAlarmAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cma.ref.Append("tags_all"))
}

func (cma cloudwatchMetricAlarmAttributes) Threshold() terra.NumberValue {
	return terra.ReferenceNumber(cma.ref.Append("threshold"))
}

func (cma cloudwatchMetricAlarmAttributes) ThresholdMetricId() terra.StringValue {
	return terra.ReferenceString(cma.ref.Append("threshold_metric_id"))
}

func (cma cloudwatchMetricAlarmAttributes) TreatMissingData() terra.StringValue {
	return terra.ReferenceString(cma.ref.Append("treat_missing_data"))
}

func (cma cloudwatchMetricAlarmAttributes) Unit() terra.StringValue {
	return terra.ReferenceString(cma.ref.Append("unit"))
}

func (cma cloudwatchMetricAlarmAttributes) MetricQuery() terra.SetValue[cloudwatchmetricalarm.MetricQueryAttributes] {
	return terra.ReferenceSet[cloudwatchmetricalarm.MetricQueryAttributes](cma.ref.Append("metric_query"))
}

type cloudwatchMetricAlarmState struct {
	ActionsEnabled                    bool                                     `json:"actions_enabled"`
	AlarmActions                      []string                                 `json:"alarm_actions"`
	AlarmDescription                  string                                   `json:"alarm_description"`
	AlarmName                         string                                   `json:"alarm_name"`
	Arn                               string                                   `json:"arn"`
	ComparisonOperator                string                                   `json:"comparison_operator"`
	DatapointsToAlarm                 float64                                  `json:"datapoints_to_alarm"`
	Dimensions                        map[string]string                        `json:"dimensions"`
	EvaluateLowSampleCountPercentiles string                                   `json:"evaluate_low_sample_count_percentiles"`
	EvaluationPeriods                 float64                                  `json:"evaluation_periods"`
	ExtendedStatistic                 string                                   `json:"extended_statistic"`
	Id                                string                                   `json:"id"`
	InsufficientDataActions           []string                                 `json:"insufficient_data_actions"`
	MetricName                        string                                   `json:"metric_name"`
	Namespace                         string                                   `json:"namespace"`
	OkActions                         []string                                 `json:"ok_actions"`
	Period                            float64                                  `json:"period"`
	Statistic                         string                                   `json:"statistic"`
	Tags                              map[string]string                        `json:"tags"`
	TagsAll                           map[string]string                        `json:"tags_all"`
	Threshold                         float64                                  `json:"threshold"`
	ThresholdMetricId                 string                                   `json:"threshold_metric_id"`
	TreatMissingData                  string                                   `json:"treat_missing_data"`
	Unit                              string                                   `json:"unit"`
	MetricQuery                       []cloudwatchmetricalarm.MetricQueryState `json:"metric_query"`
}
