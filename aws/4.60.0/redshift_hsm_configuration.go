// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftHsmConfiguration(name string, args RedshiftHsmConfigurationArgs) *RedshiftHsmConfiguration {
	return &RedshiftHsmConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftHsmConfiguration)(nil)

type RedshiftHsmConfiguration struct {
	Name  string
	Args  RedshiftHsmConfigurationArgs
	state *redshiftHsmConfigurationState
}

func (rhc *RedshiftHsmConfiguration) Type() string {
	return "aws_redshift_hsm_configuration"
}

func (rhc *RedshiftHsmConfiguration) LocalName() string {
	return rhc.Name
}

func (rhc *RedshiftHsmConfiguration) Configuration() interface{} {
	return rhc.Args
}

func (rhc *RedshiftHsmConfiguration) Attributes() redshiftHsmConfigurationAttributes {
	return redshiftHsmConfigurationAttributes{ref: terra.ReferenceResource(rhc)}
}

func (rhc *RedshiftHsmConfiguration) ImportState(av io.Reader) error {
	rhc.state = &redshiftHsmConfigurationState{}
	if err := json.NewDecoder(av).Decode(rhc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rhc.Type(), rhc.LocalName(), err)
	}
	return nil
}

func (rhc *RedshiftHsmConfiguration) State() (*redshiftHsmConfigurationState, bool) {
	return rhc.state, rhc.state != nil
}

func (rhc *RedshiftHsmConfiguration) StateMust() *redshiftHsmConfigurationState {
	if rhc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rhc.Type(), rhc.LocalName()))
	}
	return rhc.state
}

func (rhc *RedshiftHsmConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(rhc)
}

type RedshiftHsmConfigurationArgs struct {
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// HsmConfigurationIdentifier: string, required
	HsmConfigurationIdentifier terra.StringValue `hcl:"hsm_configuration_identifier,attr" validate:"required"`
	// HsmIpAddress: string, required
	HsmIpAddress terra.StringValue `hcl:"hsm_ip_address,attr" validate:"required"`
	// HsmPartitionName: string, required
	HsmPartitionName terra.StringValue `hcl:"hsm_partition_name,attr" validate:"required"`
	// HsmPartitionPassword: string, required
	HsmPartitionPassword terra.StringValue `hcl:"hsm_partition_password,attr" validate:"required"`
	// HsmServerPublicCertificate: string, required
	HsmServerPublicCertificate terra.StringValue `hcl:"hsm_server_public_certificate,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that RedshiftHsmConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftHsmConfigurationAttributes struct {
	ref terra.Reference
}

func (rhc redshiftHsmConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("arn"))
}

func (rhc redshiftHsmConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("description"))
}

func (rhc redshiftHsmConfigurationAttributes) HsmConfigurationIdentifier() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("hsm_configuration_identifier"))
}

func (rhc redshiftHsmConfigurationAttributes) HsmIpAddress() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("hsm_ip_address"))
}

func (rhc redshiftHsmConfigurationAttributes) HsmPartitionName() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("hsm_partition_name"))
}

func (rhc redshiftHsmConfigurationAttributes) HsmPartitionPassword() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("hsm_partition_password"))
}

func (rhc redshiftHsmConfigurationAttributes) HsmServerPublicCertificate() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("hsm_server_public_certificate"))
}

func (rhc redshiftHsmConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("id"))
}

func (rhc redshiftHsmConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rhc.ref.Append("tags"))
}

func (rhc redshiftHsmConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rhc.ref.Append("tags_all"))
}

type redshiftHsmConfigurationState struct {
	Arn                        string            `json:"arn"`
	Description                string            `json:"description"`
	HsmConfigurationIdentifier string            `json:"hsm_configuration_identifier"`
	HsmIpAddress               string            `json:"hsm_ip_address"`
	HsmPartitionName           string            `json:"hsm_partition_name"`
	HsmPartitionPassword       string            `json:"hsm_partition_password"`
	HsmServerPublicCertificate string            `json:"hsm_server_public_certificate"`
	Id                         string            `json:"id"`
	Tags                       map[string]string `json:"tags"`
	TagsAll                    map[string]string `json:"tags_all"`
}
