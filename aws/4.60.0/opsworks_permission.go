// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOpsworksPermission(name string, args OpsworksPermissionArgs) *OpsworksPermission {
	return &OpsworksPermission{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OpsworksPermission)(nil)

type OpsworksPermission struct {
	Name  string
	Args  OpsworksPermissionArgs
	state *opsworksPermissionState
}

func (op *OpsworksPermission) Type() string {
	return "aws_opsworks_permission"
}

func (op *OpsworksPermission) LocalName() string {
	return op.Name
}

func (op *OpsworksPermission) Configuration() interface{} {
	return op.Args
}

func (op *OpsworksPermission) Attributes() opsworksPermissionAttributes {
	return opsworksPermissionAttributes{ref: terra.ReferenceResource(op)}
}

func (op *OpsworksPermission) ImportState(av io.Reader) error {
	op.state = &opsworksPermissionState{}
	if err := json.NewDecoder(av).Decode(op.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", op.Type(), op.LocalName(), err)
	}
	return nil
}

func (op *OpsworksPermission) State() (*opsworksPermissionState, bool) {
	return op.state, op.state != nil
}

func (op *OpsworksPermission) StateMust() *opsworksPermissionState {
	if op.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", op.Type(), op.LocalName()))
	}
	return op.state
}

func (op *OpsworksPermission) DependOn() terra.Reference {
	return terra.ReferenceResource(op)
}

type OpsworksPermissionArgs struct {
	// AllowSsh: bool, optional
	AllowSsh terra.BoolValue `hcl:"allow_ssh,attr"`
	// AllowSudo: bool, optional
	AllowSudo terra.BoolValue `hcl:"allow_sudo,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Level: string, optional
	Level terra.StringValue `hcl:"level,attr"`
	// StackId: string, required
	StackId terra.StringValue `hcl:"stack_id,attr" validate:"required"`
	// UserArn: string, required
	UserArn terra.StringValue `hcl:"user_arn,attr" validate:"required"`
	// DependsOn contains resources that OpsworksPermission depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type opsworksPermissionAttributes struct {
	ref terra.Reference
}

func (op opsworksPermissionAttributes) AllowSsh() terra.BoolValue {
	return terra.ReferenceBool(op.ref.Append("allow_ssh"))
}

func (op opsworksPermissionAttributes) AllowSudo() terra.BoolValue {
	return terra.ReferenceBool(op.ref.Append("allow_sudo"))
}

func (op opsworksPermissionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("id"))
}

func (op opsworksPermissionAttributes) Level() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("level"))
}

func (op opsworksPermissionAttributes) StackId() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("stack_id"))
}

func (op opsworksPermissionAttributes) UserArn() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("user_arn"))
}

type opsworksPermissionState struct {
	AllowSsh  bool   `json:"allow_ssh"`
	AllowSudo bool   `json:"allow_sudo"`
	Id        string `json:"id"`
	Level     string `json:"level"`
	StackId   string `json:"stack_id"`
	UserArn   string `json:"user_arn"`
}
