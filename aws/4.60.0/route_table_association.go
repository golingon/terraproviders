// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRouteTableAssociation(name string, args RouteTableAssociationArgs) *RouteTableAssociation {
	return &RouteTableAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RouteTableAssociation)(nil)

type RouteTableAssociation struct {
	Name  string
	Args  RouteTableAssociationArgs
	state *routeTableAssociationState
}

func (rta *RouteTableAssociation) Type() string {
	return "aws_route_table_association"
}

func (rta *RouteTableAssociation) LocalName() string {
	return rta.Name
}

func (rta *RouteTableAssociation) Configuration() interface{} {
	return rta.Args
}

func (rta *RouteTableAssociation) Attributes() routeTableAssociationAttributes {
	return routeTableAssociationAttributes{ref: terra.ReferenceResource(rta)}
}

func (rta *RouteTableAssociation) ImportState(av io.Reader) error {
	rta.state = &routeTableAssociationState{}
	if err := json.NewDecoder(av).Decode(rta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rta.Type(), rta.LocalName(), err)
	}
	return nil
}

func (rta *RouteTableAssociation) State() (*routeTableAssociationState, bool) {
	return rta.state, rta.state != nil
}

func (rta *RouteTableAssociation) StateMust() *routeTableAssociationState {
	if rta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rta.Type(), rta.LocalName()))
	}
	return rta.state
}

func (rta *RouteTableAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(rta)
}

type RouteTableAssociationArgs struct {
	// GatewayId: string, optional
	GatewayId terra.StringValue `hcl:"gateway_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RouteTableId: string, required
	RouteTableId terra.StringValue `hcl:"route_table_id,attr" validate:"required"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// DependsOn contains resources that RouteTableAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type routeTableAssociationAttributes struct {
	ref terra.Reference
}

func (rta routeTableAssociationAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceString(rta.ref.Append("gateway_id"))
}

func (rta routeTableAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rta.ref.Append("id"))
}

func (rta routeTableAssociationAttributes) RouteTableId() terra.StringValue {
	return terra.ReferenceString(rta.ref.Append("route_table_id"))
}

func (rta routeTableAssociationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(rta.ref.Append("subnet_id"))
}

type routeTableAssociationState struct {
	GatewayId    string `json:"gateway_id"`
	Id           string `json:"id"`
	RouteTableId string `json:"route_table_id"`
	SubnetId     string `json:"subnet_id"`
}
