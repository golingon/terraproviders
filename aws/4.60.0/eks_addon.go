// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	eksaddon "github.com/golingon/terraproviders/aws/4.60.0/eksaddon"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEksAddon(name string, args EksAddonArgs) *EksAddon {
	return &EksAddon{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EksAddon)(nil)

type EksAddon struct {
	Name  string
	Args  EksAddonArgs
	state *eksAddonState
}

func (ea *EksAddon) Type() string {
	return "aws_eks_addon"
}

func (ea *EksAddon) LocalName() string {
	return ea.Name
}

func (ea *EksAddon) Configuration() interface{} {
	return ea.Args
}

func (ea *EksAddon) Attributes() eksAddonAttributes {
	return eksAddonAttributes{ref: terra.ReferenceResource(ea)}
}

func (ea *EksAddon) ImportState(av io.Reader) error {
	ea.state = &eksAddonState{}
	if err := json.NewDecoder(av).Decode(ea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ea.Type(), ea.LocalName(), err)
	}
	return nil
}

func (ea *EksAddon) State() (*eksAddonState, bool) {
	return ea.state, ea.state != nil
}

func (ea *EksAddon) StateMust() *eksAddonState {
	if ea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ea.Type(), ea.LocalName()))
	}
	return ea.state
}

func (ea *EksAddon) DependOn() terra.Reference {
	return terra.ReferenceResource(ea)
}

type EksAddonArgs struct {
	// AddonName: string, required
	AddonName terra.StringValue `hcl:"addon_name,attr" validate:"required"`
	// AddonVersion: string, optional
	AddonVersion terra.StringValue `hcl:"addon_version,attr"`
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// ConfigurationValues: string, optional
	ConfigurationValues terra.StringValue `hcl:"configuration_values,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Preserve: bool, optional
	Preserve terra.BoolValue `hcl:"preserve,attr"`
	// ResolveConflicts: string, optional
	ResolveConflicts terra.StringValue `hcl:"resolve_conflicts,attr"`
	// ServiceAccountRoleArn: string, optional
	ServiceAccountRoleArn terra.StringValue `hcl:"service_account_role_arn,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *eksaddon.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EksAddon depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eksAddonAttributes struct {
	ref terra.Reference
}

func (ea eksAddonAttributes) AddonName() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("addon_name"))
}

func (ea eksAddonAttributes) AddonVersion() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("addon_version"))
}

func (ea eksAddonAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("arn"))
}

func (ea eksAddonAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("cluster_name"))
}

func (ea eksAddonAttributes) ConfigurationValues() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("configuration_values"))
}

func (ea eksAddonAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("created_at"))
}

func (ea eksAddonAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("id"))
}

func (ea eksAddonAttributes) ModifiedAt() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("modified_at"))
}

func (ea eksAddonAttributes) Preserve() terra.BoolValue {
	return terra.ReferenceBool(ea.ref.Append("preserve"))
}

func (ea eksAddonAttributes) ResolveConflicts() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("resolve_conflicts"))
}

func (ea eksAddonAttributes) ServiceAccountRoleArn() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("service_account_role_arn"))
}

func (ea eksAddonAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ea.ref.Append("tags"))
}

func (ea eksAddonAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ea.ref.Append("tags_all"))
}

func (ea eksAddonAttributes) Timeouts() eksaddon.TimeoutsAttributes {
	return terra.ReferenceSingle[eksaddon.TimeoutsAttributes](ea.ref.Append("timeouts"))
}

type eksAddonState struct {
	AddonName             string                  `json:"addon_name"`
	AddonVersion          string                  `json:"addon_version"`
	Arn                   string                  `json:"arn"`
	ClusterName           string                  `json:"cluster_name"`
	ConfigurationValues   string                  `json:"configuration_values"`
	CreatedAt             string                  `json:"created_at"`
	Id                    string                  `json:"id"`
	ModifiedAt            string                  `json:"modified_at"`
	Preserve              bool                    `json:"preserve"`
	ResolveConflicts      string                  `json:"resolve_conflicts"`
	ServiceAccountRoleArn string                  `json:"service_account_role_arn"`
	Tags                  map[string]string       `json:"tags"`
	TagsAll               map[string]string       `json:"tags_all"`
	Timeouts              *eksaddon.TimeoutsState `json:"timeouts"`
}
