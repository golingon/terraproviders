// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudhsmv2cluster "github.com/golingon/terraproviders/aws/4.60.0/cloudhsmv2cluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCloudhsmV2Cluster creates a new instance of [CloudhsmV2Cluster].
func NewCloudhsmV2Cluster(name string, args CloudhsmV2ClusterArgs) *CloudhsmV2Cluster {
	return &CloudhsmV2Cluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudhsmV2Cluster)(nil)

// CloudhsmV2Cluster represents the Terraform resource aws_cloudhsm_v2_cluster.
type CloudhsmV2Cluster struct {
	Name      string
	Args      CloudhsmV2ClusterArgs
	state     *cloudhsmV2ClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CloudhsmV2Cluster].
func (cvc *CloudhsmV2Cluster) Type() string {
	return "aws_cloudhsm_v2_cluster"
}

// LocalName returns the local name for [CloudhsmV2Cluster].
func (cvc *CloudhsmV2Cluster) LocalName() string {
	return cvc.Name
}

// Configuration returns the configuration (args) for [CloudhsmV2Cluster].
func (cvc *CloudhsmV2Cluster) Configuration() interface{} {
	return cvc.Args
}

// DependOn is used for other resources to depend on [CloudhsmV2Cluster].
func (cvc *CloudhsmV2Cluster) DependOn() terra.Reference {
	return terra.ReferenceResource(cvc)
}

// Dependencies returns the list of resources [CloudhsmV2Cluster] depends_on.
func (cvc *CloudhsmV2Cluster) Dependencies() terra.Dependencies {
	return cvc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CloudhsmV2Cluster].
func (cvc *CloudhsmV2Cluster) LifecycleManagement() *terra.Lifecycle {
	return cvc.Lifecycle
}

// Attributes returns the attributes for [CloudhsmV2Cluster].
func (cvc *CloudhsmV2Cluster) Attributes() cloudhsmV2ClusterAttributes {
	return cloudhsmV2ClusterAttributes{ref: terra.ReferenceResource(cvc)}
}

// ImportState imports the given attribute values into [CloudhsmV2Cluster]'s state.
func (cvc *CloudhsmV2Cluster) ImportState(av io.Reader) error {
	cvc.state = &cloudhsmV2ClusterState{}
	if err := json.NewDecoder(av).Decode(cvc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cvc.Type(), cvc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CloudhsmV2Cluster] has state.
func (cvc *CloudhsmV2Cluster) State() (*cloudhsmV2ClusterState, bool) {
	return cvc.state, cvc.state != nil
}

// StateMust returns the state for [CloudhsmV2Cluster]. Panics if the state is nil.
func (cvc *CloudhsmV2Cluster) StateMust() *cloudhsmV2ClusterState {
	if cvc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cvc.Type(), cvc.LocalName()))
	}
	return cvc.state
}

// CloudhsmV2ClusterArgs contains the configurations for aws_cloudhsm_v2_cluster.
type CloudhsmV2ClusterArgs struct {
	// HsmType: string, required
	HsmType terra.StringValue `hcl:"hsm_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SourceBackupIdentifier: string, optional
	SourceBackupIdentifier terra.StringValue `hcl:"source_backup_identifier,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ClusterCertificates: min=0
	ClusterCertificates []cloudhsmv2cluster.ClusterCertificates `hcl:"cluster_certificates,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *cloudhsmv2cluster.Timeouts `hcl:"timeouts,block"`
}
type cloudhsmV2ClusterAttributes struct {
	ref terra.Reference
}

// ClusterId returns a reference to field cluster_id of aws_cloudhsm_v2_cluster.
func (cvc cloudhsmV2ClusterAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(cvc.ref.Append("cluster_id"))
}

// ClusterState returns a reference to field cluster_state of aws_cloudhsm_v2_cluster.
func (cvc cloudhsmV2ClusterAttributes) ClusterState() terra.StringValue {
	return terra.ReferenceAsString(cvc.ref.Append("cluster_state"))
}

// HsmType returns a reference to field hsm_type of aws_cloudhsm_v2_cluster.
func (cvc cloudhsmV2ClusterAttributes) HsmType() terra.StringValue {
	return terra.ReferenceAsString(cvc.ref.Append("hsm_type"))
}

// Id returns a reference to field id of aws_cloudhsm_v2_cluster.
func (cvc cloudhsmV2ClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cvc.ref.Append("id"))
}

// SecurityGroupId returns a reference to field security_group_id of aws_cloudhsm_v2_cluster.
func (cvc cloudhsmV2ClusterAttributes) SecurityGroupId() terra.StringValue {
	return terra.ReferenceAsString(cvc.ref.Append("security_group_id"))
}

// SourceBackupIdentifier returns a reference to field source_backup_identifier of aws_cloudhsm_v2_cluster.
func (cvc cloudhsmV2ClusterAttributes) SourceBackupIdentifier() terra.StringValue {
	return terra.ReferenceAsString(cvc.ref.Append("source_backup_identifier"))
}

// SubnetIds returns a reference to field subnet_ids of aws_cloudhsm_v2_cluster.
func (cvc cloudhsmV2ClusterAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cvc.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_cloudhsm_v2_cluster.
func (cvc cloudhsmV2ClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cvc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cloudhsm_v2_cluster.
func (cvc cloudhsmV2ClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cvc.ref.Append("tags_all"))
}

// VpcId returns a reference to field vpc_id of aws_cloudhsm_v2_cluster.
func (cvc cloudhsmV2ClusterAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(cvc.ref.Append("vpc_id"))
}

func (cvc cloudhsmV2ClusterAttributes) ClusterCertificates() terra.ListValue[cloudhsmv2cluster.ClusterCertificatesAttributes] {
	return terra.ReferenceAsList[cloudhsmv2cluster.ClusterCertificatesAttributes](cvc.ref.Append("cluster_certificates"))
}

func (cvc cloudhsmV2ClusterAttributes) Timeouts() cloudhsmv2cluster.TimeoutsAttributes {
	return terra.ReferenceAsSingle[cloudhsmv2cluster.TimeoutsAttributes](cvc.ref.Append("timeouts"))
}

type cloudhsmV2ClusterState struct {
	ClusterId              string                                       `json:"cluster_id"`
	ClusterState           string                                       `json:"cluster_state"`
	HsmType                string                                       `json:"hsm_type"`
	Id                     string                                       `json:"id"`
	SecurityGroupId        string                                       `json:"security_group_id"`
	SourceBackupIdentifier string                                       `json:"source_backup_identifier"`
	SubnetIds              []string                                     `json:"subnet_ids"`
	Tags                   map[string]string                            `json:"tags"`
	TagsAll                map[string]string                            `json:"tags_all"`
	VpcId                  string                                       `json:"vpc_id"`
	ClusterCertificates    []cloudhsmv2cluster.ClusterCertificatesState `json:"cluster_certificates"`
	Timeouts               *cloudhsmv2cluster.TimeoutsState             `json:"timeouts"`
}
