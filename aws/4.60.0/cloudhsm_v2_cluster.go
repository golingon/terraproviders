// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudhsmv2cluster "github.com/golingon/terraproviders/aws/4.60.0/cloudhsmv2cluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudhsmV2Cluster(name string, args CloudhsmV2ClusterArgs) *CloudhsmV2Cluster {
	return &CloudhsmV2Cluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudhsmV2Cluster)(nil)

type CloudhsmV2Cluster struct {
	Name  string
	Args  CloudhsmV2ClusterArgs
	state *cloudhsmV2ClusterState
}

func (cvc *CloudhsmV2Cluster) Type() string {
	return "aws_cloudhsm_v2_cluster"
}

func (cvc *CloudhsmV2Cluster) LocalName() string {
	return cvc.Name
}

func (cvc *CloudhsmV2Cluster) Configuration() interface{} {
	return cvc.Args
}

func (cvc *CloudhsmV2Cluster) Attributes() cloudhsmV2ClusterAttributes {
	return cloudhsmV2ClusterAttributes{ref: terra.ReferenceResource(cvc)}
}

func (cvc *CloudhsmV2Cluster) ImportState(av io.Reader) error {
	cvc.state = &cloudhsmV2ClusterState{}
	if err := json.NewDecoder(av).Decode(cvc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cvc.Type(), cvc.LocalName(), err)
	}
	return nil
}

func (cvc *CloudhsmV2Cluster) State() (*cloudhsmV2ClusterState, bool) {
	return cvc.state, cvc.state != nil
}

func (cvc *CloudhsmV2Cluster) StateMust() *cloudhsmV2ClusterState {
	if cvc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cvc.Type(), cvc.LocalName()))
	}
	return cvc.state
}

func (cvc *CloudhsmV2Cluster) DependOn() terra.Reference {
	return terra.ReferenceResource(cvc)
}

type CloudhsmV2ClusterArgs struct {
	// HsmType: string, required
	HsmType terra.StringValue `hcl:"hsm_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SourceBackupIdentifier: string, optional
	SourceBackupIdentifier terra.StringValue `hcl:"source_backup_identifier,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ClusterCertificates: min=0
	ClusterCertificates []cloudhsmv2cluster.ClusterCertificates `hcl:"cluster_certificates,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *cloudhsmv2cluster.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudhsmV2Cluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudhsmV2ClusterAttributes struct {
	ref terra.Reference
}

func (cvc cloudhsmV2ClusterAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceString(cvc.ref.Append("cluster_id"))
}

func (cvc cloudhsmV2ClusterAttributes) ClusterState() terra.StringValue {
	return terra.ReferenceString(cvc.ref.Append("cluster_state"))
}

func (cvc cloudhsmV2ClusterAttributes) HsmType() terra.StringValue {
	return terra.ReferenceString(cvc.ref.Append("hsm_type"))
}

func (cvc cloudhsmV2ClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cvc.ref.Append("id"))
}

func (cvc cloudhsmV2ClusterAttributes) SecurityGroupId() terra.StringValue {
	return terra.ReferenceString(cvc.ref.Append("security_group_id"))
}

func (cvc cloudhsmV2ClusterAttributes) SourceBackupIdentifier() terra.StringValue {
	return terra.ReferenceString(cvc.ref.Append("source_backup_identifier"))
}

func (cvc cloudhsmV2ClusterAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cvc.ref.Append("subnet_ids"))
}

func (cvc cloudhsmV2ClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cvc.ref.Append("tags"))
}

func (cvc cloudhsmV2ClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cvc.ref.Append("tags_all"))
}

func (cvc cloudhsmV2ClusterAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(cvc.ref.Append("vpc_id"))
}

func (cvc cloudhsmV2ClusterAttributes) ClusterCertificates() terra.ListValue[cloudhsmv2cluster.ClusterCertificatesAttributes] {
	return terra.ReferenceList[cloudhsmv2cluster.ClusterCertificatesAttributes](cvc.ref.Append("cluster_certificates"))
}

func (cvc cloudhsmV2ClusterAttributes) Timeouts() cloudhsmv2cluster.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudhsmv2cluster.TimeoutsAttributes](cvc.ref.Append("timeouts"))
}

type cloudhsmV2ClusterState struct {
	ClusterId              string                                       `json:"cluster_id"`
	ClusterState           string                                       `json:"cluster_state"`
	HsmType                string                                       `json:"hsm_type"`
	Id                     string                                       `json:"id"`
	SecurityGroupId        string                                       `json:"security_group_id"`
	SourceBackupIdentifier string                                       `json:"source_backup_identifier"`
	SubnetIds              []string                                     `json:"subnet_ids"`
	Tags                   map[string]string                            `json:"tags"`
	TagsAll                map[string]string                            `json:"tags_all"`
	VpcId                  string                                       `json:"vpc_id"`
	ClusterCertificates    []cloudhsmv2cluster.ClusterCertificatesState `json:"cluster_certificates"`
	Timeouts               *cloudhsmv2cluster.TimeoutsState             `json:"timeouts"`
}
