// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package kinesisanalyticsv2application

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ApplicationConfiguration struct {
	// ApplicationCodeConfiguration: required
	ApplicationCodeConfiguration *ApplicationCodeConfiguration `hcl:"application_code_configuration,block" validate:"required"`
	// ApplicationSnapshotConfiguration: optional
	ApplicationSnapshotConfiguration *ApplicationSnapshotConfiguration `hcl:"application_snapshot_configuration,block"`
	// EnvironmentProperties: optional
	EnvironmentProperties *EnvironmentProperties `hcl:"environment_properties,block"`
	// FlinkApplicationConfiguration: optional
	FlinkApplicationConfiguration *FlinkApplicationConfiguration `hcl:"flink_application_configuration,block"`
	// RunConfiguration: optional
	RunConfiguration *RunConfiguration `hcl:"run_configuration,block"`
	// SqlApplicationConfiguration: optional
	SqlApplicationConfiguration *SqlApplicationConfiguration `hcl:"sql_application_configuration,block"`
	// VpcConfiguration: optional
	VpcConfiguration *VpcConfiguration `hcl:"vpc_configuration,block"`
}

type ApplicationCodeConfiguration struct {
	// CodeContentType: string, required
	CodeContentType terra.StringValue `hcl:"code_content_type,attr" validate:"required"`
	// CodeContent: optional
	CodeContent *CodeContent `hcl:"code_content,block"`
}

type CodeContent struct {
	// TextContent: string, optional
	TextContent terra.StringValue `hcl:"text_content,attr"`
	// S3ContentLocation: optional
	S3ContentLocation *S3ContentLocation `hcl:"s3_content_location,block"`
}

type S3ContentLocation struct {
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// FileKey: string, required
	FileKey terra.StringValue `hcl:"file_key,attr" validate:"required"`
	// ObjectVersion: string, optional
	ObjectVersion terra.StringValue `hcl:"object_version,attr"`
}

type ApplicationSnapshotConfiguration struct {
	// SnapshotsEnabled: bool, required
	SnapshotsEnabled terra.BoolValue `hcl:"snapshots_enabled,attr" validate:"required"`
}

type EnvironmentProperties struct {
	// PropertyGroup: min=1,max=50
	PropertyGroup []PropertyGroup `hcl:"property_group,block" validate:"min=1,max=50"`
}

type PropertyGroup struct {
	// PropertyGroupId: string, required
	PropertyGroupId terra.StringValue `hcl:"property_group_id,attr" validate:"required"`
	// PropertyMap: map of string, required
	PropertyMap terra.MapValue[terra.StringValue] `hcl:"property_map,attr" validate:"required"`
}

type FlinkApplicationConfiguration struct {
	// CheckpointConfiguration: optional
	CheckpointConfiguration *CheckpointConfiguration `hcl:"checkpoint_configuration,block"`
	// MonitoringConfiguration: optional
	MonitoringConfiguration *MonitoringConfiguration `hcl:"monitoring_configuration,block"`
	// ParallelismConfiguration: optional
	ParallelismConfiguration *ParallelismConfiguration `hcl:"parallelism_configuration,block"`
}

type CheckpointConfiguration struct {
	// CheckpointInterval: number, optional
	CheckpointInterval terra.NumberValue `hcl:"checkpoint_interval,attr"`
	// CheckpointingEnabled: bool, optional
	CheckpointingEnabled terra.BoolValue `hcl:"checkpointing_enabled,attr"`
	// ConfigurationType: string, required
	ConfigurationType terra.StringValue `hcl:"configuration_type,attr" validate:"required"`
	// MinPauseBetweenCheckpoints: number, optional
	MinPauseBetweenCheckpoints terra.NumberValue `hcl:"min_pause_between_checkpoints,attr"`
}

type MonitoringConfiguration struct {
	// ConfigurationType: string, required
	ConfigurationType terra.StringValue `hcl:"configuration_type,attr" validate:"required"`
	// LogLevel: string, optional
	LogLevel terra.StringValue `hcl:"log_level,attr"`
	// MetricsLevel: string, optional
	MetricsLevel terra.StringValue `hcl:"metrics_level,attr"`
}

type ParallelismConfiguration struct {
	// AutoScalingEnabled: bool, optional
	AutoScalingEnabled terra.BoolValue `hcl:"auto_scaling_enabled,attr"`
	// ConfigurationType: string, required
	ConfigurationType terra.StringValue `hcl:"configuration_type,attr" validate:"required"`
	// Parallelism: number, optional
	Parallelism terra.NumberValue `hcl:"parallelism,attr"`
	// ParallelismPerKpu: number, optional
	ParallelismPerKpu terra.NumberValue `hcl:"parallelism_per_kpu,attr"`
}

type RunConfiguration struct {
	// ApplicationRestoreConfiguration: optional
	ApplicationRestoreConfiguration *ApplicationRestoreConfiguration `hcl:"application_restore_configuration,block"`
	// FlinkRunConfiguration: optional
	FlinkRunConfiguration *FlinkRunConfiguration `hcl:"flink_run_configuration,block"`
}

type ApplicationRestoreConfiguration struct {
	// ApplicationRestoreType: string, optional
	ApplicationRestoreType terra.StringValue `hcl:"application_restore_type,attr"`
	// SnapshotName: string, optional
	SnapshotName terra.StringValue `hcl:"snapshot_name,attr"`
}

type FlinkRunConfiguration struct {
	// AllowNonRestoredState: bool, optional
	AllowNonRestoredState terra.BoolValue `hcl:"allow_non_restored_state,attr"`
}

type SqlApplicationConfiguration struct {
	// Input: optional
	Input *Input `hcl:"input,block"`
	// Output: min=0,max=3
	Output []Output `hcl:"output,block" validate:"min=0,max=3"`
	// ReferenceDataSource: optional
	ReferenceDataSource *ReferenceDataSource `hcl:"reference_data_source,block"`
}

type Input struct {
	// NamePrefix: string, required
	NamePrefix terra.StringValue `hcl:"name_prefix,attr" validate:"required"`
	// InputParallelism: optional
	InputParallelism *InputParallelism `hcl:"input_parallelism,block"`
	// InputProcessingConfiguration: optional
	InputProcessingConfiguration *InputProcessingConfiguration `hcl:"input_processing_configuration,block"`
	// InputSchema: required
	InputSchema *InputSchema `hcl:"input_schema,block" validate:"required"`
	// InputStartingPositionConfiguration: min=0
	InputStartingPositionConfiguration []InputStartingPositionConfiguration `hcl:"input_starting_position_configuration,block" validate:"min=0"`
	// KinesisFirehoseInput: optional
	KinesisFirehoseInput *KinesisFirehoseInput `hcl:"kinesis_firehose_input,block"`
	// KinesisStreamsInput: optional
	KinesisStreamsInput *KinesisStreamsInput `hcl:"kinesis_streams_input,block"`
}

type InputParallelism struct {
	// Count: number, optional
	Count terra.NumberValue `hcl:"count,attr"`
}

type InputProcessingConfiguration struct {
	// InputLambdaProcessor: required
	InputLambdaProcessor *InputLambdaProcessor `hcl:"input_lambda_processor,block" validate:"required"`
}

type InputLambdaProcessor struct {
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
}

type InputSchema struct {
	// RecordEncoding: string, optional
	RecordEncoding terra.StringValue `hcl:"record_encoding,attr"`
	// InputSchemaRecordColumn: min=1,max=1000
	RecordColumn []InputSchemaRecordColumn `hcl:"record_column,block" validate:"min=1,max=1000"`
	// InputSchemaRecordFormat: required
	RecordFormat *InputSchemaRecordFormat `hcl:"record_format,block" validate:"required"`
}

type InputSchemaRecordColumn struct {
	// Mapping: string, optional
	Mapping terra.StringValue `hcl:"mapping,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SqlType: string, required
	SqlType terra.StringValue `hcl:"sql_type,attr" validate:"required"`
}

type InputSchemaRecordFormat struct {
	// RecordFormatType: string, required
	RecordFormatType terra.StringValue `hcl:"record_format_type,attr" validate:"required"`
	// InputSchemaRecordFormatMappingParameters: required
	MappingParameters *InputSchemaRecordFormatMappingParameters `hcl:"mapping_parameters,block" validate:"required"`
}

type InputSchemaRecordFormatMappingParameters struct {
	// InputSchemaRecordFormatMappingParametersCsvMappingParameters: optional
	CsvMappingParameters *InputSchemaRecordFormatMappingParametersCsvMappingParameters `hcl:"csv_mapping_parameters,block"`
	// InputSchemaRecordFormatMappingParametersJsonMappingParameters: optional
	JsonMappingParameters *InputSchemaRecordFormatMappingParametersJsonMappingParameters `hcl:"json_mapping_parameters,block"`
}

type InputSchemaRecordFormatMappingParametersCsvMappingParameters struct {
	// RecordColumnDelimiter: string, required
	RecordColumnDelimiter terra.StringValue `hcl:"record_column_delimiter,attr" validate:"required"`
	// RecordRowDelimiter: string, required
	RecordRowDelimiter terra.StringValue `hcl:"record_row_delimiter,attr" validate:"required"`
}

type InputSchemaRecordFormatMappingParametersJsonMappingParameters struct {
	// RecordRowPath: string, required
	RecordRowPath terra.StringValue `hcl:"record_row_path,attr" validate:"required"`
}

type InputStartingPositionConfiguration struct {
	// InputStartingPosition: string, optional
	InputStartingPosition terra.StringValue `hcl:"input_starting_position,attr"`
}

type KinesisFirehoseInput struct {
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
}

type KinesisStreamsInput struct {
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
}

type Output struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// DestinationSchema: required
	DestinationSchema *DestinationSchema `hcl:"destination_schema,block" validate:"required"`
	// KinesisFirehoseOutput: optional
	KinesisFirehoseOutput *KinesisFirehoseOutput `hcl:"kinesis_firehose_output,block"`
	// KinesisStreamsOutput: optional
	KinesisStreamsOutput *KinesisStreamsOutput `hcl:"kinesis_streams_output,block"`
	// LambdaOutput: optional
	LambdaOutput *LambdaOutput `hcl:"lambda_output,block"`
}

type DestinationSchema struct {
	// RecordFormatType: string, required
	RecordFormatType terra.StringValue `hcl:"record_format_type,attr" validate:"required"`
}

type KinesisFirehoseOutput struct {
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
}

type KinesisStreamsOutput struct {
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
}

type LambdaOutput struct {
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
}

type ReferenceDataSource struct {
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// ReferenceSchema: required
	ReferenceSchema *ReferenceSchema `hcl:"reference_schema,block" validate:"required"`
	// S3ReferenceDataSource: required
	S3ReferenceDataSource *S3ReferenceDataSource `hcl:"s3_reference_data_source,block" validate:"required"`
}

type ReferenceSchema struct {
	// RecordEncoding: string, optional
	RecordEncoding terra.StringValue `hcl:"record_encoding,attr"`
	// ReferenceSchemaRecordColumn: min=1,max=1000
	RecordColumn []ReferenceSchemaRecordColumn `hcl:"record_column,block" validate:"min=1,max=1000"`
	// ReferenceSchemaRecordFormat: required
	RecordFormat *ReferenceSchemaRecordFormat `hcl:"record_format,block" validate:"required"`
}

type ReferenceSchemaRecordColumn struct {
	// Mapping: string, optional
	Mapping terra.StringValue `hcl:"mapping,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SqlType: string, required
	SqlType terra.StringValue `hcl:"sql_type,attr" validate:"required"`
}

type ReferenceSchemaRecordFormat struct {
	// RecordFormatType: string, required
	RecordFormatType terra.StringValue `hcl:"record_format_type,attr" validate:"required"`
	// ReferenceSchemaRecordFormatMappingParameters: required
	MappingParameters *ReferenceSchemaRecordFormatMappingParameters `hcl:"mapping_parameters,block" validate:"required"`
}

type ReferenceSchemaRecordFormatMappingParameters struct {
	// ReferenceSchemaRecordFormatMappingParametersCsvMappingParameters: optional
	CsvMappingParameters *ReferenceSchemaRecordFormatMappingParametersCsvMappingParameters `hcl:"csv_mapping_parameters,block"`
	// ReferenceSchemaRecordFormatMappingParametersJsonMappingParameters: optional
	JsonMappingParameters *ReferenceSchemaRecordFormatMappingParametersJsonMappingParameters `hcl:"json_mapping_parameters,block"`
}

type ReferenceSchemaRecordFormatMappingParametersCsvMappingParameters struct {
	// RecordColumnDelimiter: string, required
	RecordColumnDelimiter terra.StringValue `hcl:"record_column_delimiter,attr" validate:"required"`
	// RecordRowDelimiter: string, required
	RecordRowDelimiter terra.StringValue `hcl:"record_row_delimiter,attr" validate:"required"`
}

type ReferenceSchemaRecordFormatMappingParametersJsonMappingParameters struct {
	// RecordRowPath: string, required
	RecordRowPath terra.StringValue `hcl:"record_row_path,attr" validate:"required"`
}

type S3ReferenceDataSource struct {
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// FileKey: string, required
	FileKey terra.StringValue `hcl:"file_key,attr" validate:"required"`
}

type VpcConfiguration struct {
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type CloudwatchLoggingOptions struct {
	// LogStreamArn: string, required
	LogStreamArn terra.StringValue `hcl:"log_stream_arn,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ApplicationConfigurationAttributes struct {
	ref terra.Reference
}

func (ac ApplicationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac ApplicationConfigurationAttributes) InternalWithRef(ref terra.Reference) ApplicationConfigurationAttributes {
	return ApplicationConfigurationAttributes{ref: ref}
}

func (ac ApplicationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac ApplicationConfigurationAttributes) ApplicationCodeConfiguration() terra.ListValue[ApplicationCodeConfigurationAttributes] {
	return terra.ReferenceAsList[ApplicationCodeConfigurationAttributes](ac.ref.Append("application_code_configuration"))
}

func (ac ApplicationConfigurationAttributes) ApplicationSnapshotConfiguration() terra.ListValue[ApplicationSnapshotConfigurationAttributes] {
	return terra.ReferenceAsList[ApplicationSnapshotConfigurationAttributes](ac.ref.Append("application_snapshot_configuration"))
}

func (ac ApplicationConfigurationAttributes) EnvironmentProperties() terra.ListValue[EnvironmentPropertiesAttributes] {
	return terra.ReferenceAsList[EnvironmentPropertiesAttributes](ac.ref.Append("environment_properties"))
}

func (ac ApplicationConfigurationAttributes) FlinkApplicationConfiguration() terra.ListValue[FlinkApplicationConfigurationAttributes] {
	return terra.ReferenceAsList[FlinkApplicationConfigurationAttributes](ac.ref.Append("flink_application_configuration"))
}

func (ac ApplicationConfigurationAttributes) RunConfiguration() terra.ListValue[RunConfigurationAttributes] {
	return terra.ReferenceAsList[RunConfigurationAttributes](ac.ref.Append("run_configuration"))
}

func (ac ApplicationConfigurationAttributes) SqlApplicationConfiguration() terra.ListValue[SqlApplicationConfigurationAttributes] {
	return terra.ReferenceAsList[SqlApplicationConfigurationAttributes](ac.ref.Append("sql_application_configuration"))
}

func (ac ApplicationConfigurationAttributes) VpcConfiguration() terra.ListValue[VpcConfigurationAttributes] {
	return terra.ReferenceAsList[VpcConfigurationAttributes](ac.ref.Append("vpc_configuration"))
}

type ApplicationCodeConfigurationAttributes struct {
	ref terra.Reference
}

func (acc ApplicationCodeConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return acc.ref, nil
}

func (acc ApplicationCodeConfigurationAttributes) InternalWithRef(ref terra.Reference) ApplicationCodeConfigurationAttributes {
	return ApplicationCodeConfigurationAttributes{ref: ref}
}

func (acc ApplicationCodeConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return acc.ref.InternalTokens()
}

func (acc ApplicationCodeConfigurationAttributes) CodeContentType() terra.StringValue {
	return terra.ReferenceAsString(acc.ref.Append("code_content_type"))
}

func (acc ApplicationCodeConfigurationAttributes) CodeContent() terra.ListValue[CodeContentAttributes] {
	return terra.ReferenceAsList[CodeContentAttributes](acc.ref.Append("code_content"))
}

type CodeContentAttributes struct {
	ref terra.Reference
}

func (cc CodeContentAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc CodeContentAttributes) InternalWithRef(ref terra.Reference) CodeContentAttributes {
	return CodeContentAttributes{ref: ref}
}

func (cc CodeContentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc CodeContentAttributes) TextContent() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("text_content"))
}

func (cc CodeContentAttributes) S3ContentLocation() terra.ListValue[S3ContentLocationAttributes] {
	return terra.ReferenceAsList[S3ContentLocationAttributes](cc.ref.Append("s3_content_location"))
}

type S3ContentLocationAttributes struct {
	ref terra.Reference
}

func (scl S3ContentLocationAttributes) InternalRef() (terra.Reference, error) {
	return scl.ref, nil
}

func (scl S3ContentLocationAttributes) InternalWithRef(ref terra.Reference) S3ContentLocationAttributes {
	return S3ContentLocationAttributes{ref: ref}
}

func (scl S3ContentLocationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return scl.ref.InternalTokens()
}

func (scl S3ContentLocationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(scl.ref.Append("bucket_arn"))
}

func (scl S3ContentLocationAttributes) FileKey() terra.StringValue {
	return terra.ReferenceAsString(scl.ref.Append("file_key"))
}

func (scl S3ContentLocationAttributes) ObjectVersion() terra.StringValue {
	return terra.ReferenceAsString(scl.ref.Append("object_version"))
}

type ApplicationSnapshotConfigurationAttributes struct {
	ref terra.Reference
}

func (asc ApplicationSnapshotConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return asc.ref, nil
}

func (asc ApplicationSnapshotConfigurationAttributes) InternalWithRef(ref terra.Reference) ApplicationSnapshotConfigurationAttributes {
	return ApplicationSnapshotConfigurationAttributes{ref: ref}
}

func (asc ApplicationSnapshotConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asc.ref.InternalTokens()
}

func (asc ApplicationSnapshotConfigurationAttributes) SnapshotsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(asc.ref.Append("snapshots_enabled"))
}

type EnvironmentPropertiesAttributes struct {
	ref terra.Reference
}

func (ep EnvironmentPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep EnvironmentPropertiesAttributes) InternalWithRef(ref terra.Reference) EnvironmentPropertiesAttributes {
	return EnvironmentPropertiesAttributes{ref: ref}
}

func (ep EnvironmentPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep EnvironmentPropertiesAttributes) PropertyGroup() terra.SetValue[PropertyGroupAttributes] {
	return terra.ReferenceAsSet[PropertyGroupAttributes](ep.ref.Append("property_group"))
}

type PropertyGroupAttributes struct {
	ref terra.Reference
}

func (pg PropertyGroupAttributes) InternalRef() (terra.Reference, error) {
	return pg.ref, nil
}

func (pg PropertyGroupAttributes) InternalWithRef(ref terra.Reference) PropertyGroupAttributes {
	return PropertyGroupAttributes{ref: ref}
}

func (pg PropertyGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pg.ref.InternalTokens()
}

func (pg PropertyGroupAttributes) PropertyGroupId() terra.StringValue {
	return terra.ReferenceAsString(pg.ref.Append("property_group_id"))
}

func (pg PropertyGroupAttributes) PropertyMap() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pg.ref.Append("property_map"))
}

type FlinkApplicationConfigurationAttributes struct {
	ref terra.Reference
}

func (fac FlinkApplicationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return fac.ref, nil
}

func (fac FlinkApplicationConfigurationAttributes) InternalWithRef(ref terra.Reference) FlinkApplicationConfigurationAttributes {
	return FlinkApplicationConfigurationAttributes{ref: ref}
}

func (fac FlinkApplicationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fac.ref.InternalTokens()
}

func (fac FlinkApplicationConfigurationAttributes) CheckpointConfiguration() terra.ListValue[CheckpointConfigurationAttributes] {
	return terra.ReferenceAsList[CheckpointConfigurationAttributes](fac.ref.Append("checkpoint_configuration"))
}

func (fac FlinkApplicationConfigurationAttributes) MonitoringConfiguration() terra.ListValue[MonitoringConfigurationAttributes] {
	return terra.ReferenceAsList[MonitoringConfigurationAttributes](fac.ref.Append("monitoring_configuration"))
}

func (fac FlinkApplicationConfigurationAttributes) ParallelismConfiguration() terra.ListValue[ParallelismConfigurationAttributes] {
	return terra.ReferenceAsList[ParallelismConfigurationAttributes](fac.ref.Append("parallelism_configuration"))
}

type CheckpointConfigurationAttributes struct {
	ref terra.Reference
}

func (cc CheckpointConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc CheckpointConfigurationAttributes) InternalWithRef(ref terra.Reference) CheckpointConfigurationAttributes {
	return CheckpointConfigurationAttributes{ref: ref}
}

func (cc CheckpointConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc CheckpointConfigurationAttributes) CheckpointInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("checkpoint_interval"))
}

func (cc CheckpointConfigurationAttributes) CheckpointingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("checkpointing_enabled"))
}

func (cc CheckpointConfigurationAttributes) ConfigurationType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("configuration_type"))
}

func (cc CheckpointConfigurationAttributes) MinPauseBetweenCheckpoints() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("min_pause_between_checkpoints"))
}

type MonitoringConfigurationAttributes struct {
	ref terra.Reference
}

func (mc MonitoringConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MonitoringConfigurationAttributes) InternalWithRef(ref terra.Reference) MonitoringConfigurationAttributes {
	return MonitoringConfigurationAttributes{ref: ref}
}

func (mc MonitoringConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MonitoringConfigurationAttributes) ConfigurationType() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("configuration_type"))
}

func (mc MonitoringConfigurationAttributes) LogLevel() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("log_level"))
}

func (mc MonitoringConfigurationAttributes) MetricsLevel() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("metrics_level"))
}

type ParallelismConfigurationAttributes struct {
	ref terra.Reference
}

func (pc ParallelismConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ParallelismConfigurationAttributes) InternalWithRef(ref terra.Reference) ParallelismConfigurationAttributes {
	return ParallelismConfigurationAttributes{ref: ref}
}

func (pc ParallelismConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ParallelismConfigurationAttributes) AutoScalingEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("auto_scaling_enabled"))
}

func (pc ParallelismConfigurationAttributes) ConfigurationType() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("configuration_type"))
}

func (pc ParallelismConfigurationAttributes) Parallelism() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("parallelism"))
}

func (pc ParallelismConfigurationAttributes) ParallelismPerKpu() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("parallelism_per_kpu"))
}

type RunConfigurationAttributes struct {
	ref terra.Reference
}

func (rc RunConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc RunConfigurationAttributes) InternalWithRef(ref terra.Reference) RunConfigurationAttributes {
	return RunConfigurationAttributes{ref: ref}
}

func (rc RunConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc RunConfigurationAttributes) ApplicationRestoreConfiguration() terra.ListValue[ApplicationRestoreConfigurationAttributes] {
	return terra.ReferenceAsList[ApplicationRestoreConfigurationAttributes](rc.ref.Append("application_restore_configuration"))
}

func (rc RunConfigurationAttributes) FlinkRunConfiguration() terra.ListValue[FlinkRunConfigurationAttributes] {
	return terra.ReferenceAsList[FlinkRunConfigurationAttributes](rc.ref.Append("flink_run_configuration"))
}

type ApplicationRestoreConfigurationAttributes struct {
	ref terra.Reference
}

func (arc ApplicationRestoreConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return arc.ref, nil
}

func (arc ApplicationRestoreConfigurationAttributes) InternalWithRef(ref terra.Reference) ApplicationRestoreConfigurationAttributes {
	return ApplicationRestoreConfigurationAttributes{ref: ref}
}

func (arc ApplicationRestoreConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return arc.ref.InternalTokens()
}

func (arc ApplicationRestoreConfigurationAttributes) ApplicationRestoreType() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("application_restore_type"))
}

func (arc ApplicationRestoreConfigurationAttributes) SnapshotName() terra.StringValue {
	return terra.ReferenceAsString(arc.ref.Append("snapshot_name"))
}

type FlinkRunConfigurationAttributes struct {
	ref terra.Reference
}

func (frc FlinkRunConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return frc.ref, nil
}

func (frc FlinkRunConfigurationAttributes) InternalWithRef(ref terra.Reference) FlinkRunConfigurationAttributes {
	return FlinkRunConfigurationAttributes{ref: ref}
}

func (frc FlinkRunConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return frc.ref.InternalTokens()
}

func (frc FlinkRunConfigurationAttributes) AllowNonRestoredState() terra.BoolValue {
	return terra.ReferenceAsBool(frc.ref.Append("allow_non_restored_state"))
}

type SqlApplicationConfigurationAttributes struct {
	ref terra.Reference
}

func (sac SqlApplicationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sac.ref, nil
}

func (sac SqlApplicationConfigurationAttributes) InternalWithRef(ref terra.Reference) SqlApplicationConfigurationAttributes {
	return SqlApplicationConfigurationAttributes{ref: ref}
}

func (sac SqlApplicationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sac.ref.InternalTokens()
}

func (sac SqlApplicationConfigurationAttributes) Input() terra.ListValue[InputAttributes] {
	return terra.ReferenceAsList[InputAttributes](sac.ref.Append("input"))
}

func (sac SqlApplicationConfigurationAttributes) Output() terra.SetValue[OutputAttributes] {
	return terra.ReferenceAsSet[OutputAttributes](sac.ref.Append("output"))
}

func (sac SqlApplicationConfigurationAttributes) ReferenceDataSource() terra.ListValue[ReferenceDataSourceAttributes] {
	return terra.ReferenceAsList[ReferenceDataSourceAttributes](sac.ref.Append("reference_data_source"))
}

type InputAttributes struct {
	ref terra.Reference
}

func (i InputAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i InputAttributes) InternalWithRef(ref terra.Reference) InputAttributes {
	return InputAttributes{ref: ref}
}

func (i InputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i InputAttributes) InAppStreamNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("in_app_stream_names"))
}

func (i InputAttributes) InputId() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("input_id"))
}

func (i InputAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("name_prefix"))
}

func (i InputAttributes) InputParallelism() terra.ListValue[InputParallelismAttributes] {
	return terra.ReferenceAsList[InputParallelismAttributes](i.ref.Append("input_parallelism"))
}

func (i InputAttributes) InputProcessingConfiguration() terra.ListValue[InputProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[InputProcessingConfigurationAttributes](i.ref.Append("input_processing_configuration"))
}

func (i InputAttributes) InputSchema() terra.ListValue[InputSchemaAttributes] {
	return terra.ReferenceAsList[InputSchemaAttributes](i.ref.Append("input_schema"))
}

func (i InputAttributes) InputStartingPositionConfiguration() terra.ListValue[InputStartingPositionConfigurationAttributes] {
	return terra.ReferenceAsList[InputStartingPositionConfigurationAttributes](i.ref.Append("input_starting_position_configuration"))
}

func (i InputAttributes) KinesisFirehoseInput() terra.ListValue[KinesisFirehoseInputAttributes] {
	return terra.ReferenceAsList[KinesisFirehoseInputAttributes](i.ref.Append("kinesis_firehose_input"))
}

func (i InputAttributes) KinesisStreamsInput() terra.ListValue[KinesisStreamsInputAttributes] {
	return terra.ReferenceAsList[KinesisStreamsInputAttributes](i.ref.Append("kinesis_streams_input"))
}

type InputParallelismAttributes struct {
	ref terra.Reference
}

func (ip InputParallelismAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip InputParallelismAttributes) InternalWithRef(ref terra.Reference) InputParallelismAttributes {
	return InputParallelismAttributes{ref: ref}
}

func (ip InputParallelismAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip InputParallelismAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(ip.ref.Append("count"))
}

type InputProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (ipc InputProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ipc.ref, nil
}

func (ipc InputProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) InputProcessingConfigurationAttributes {
	return InputProcessingConfigurationAttributes{ref: ref}
}

func (ipc InputProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ipc.ref.InternalTokens()
}

func (ipc InputProcessingConfigurationAttributes) InputLambdaProcessor() terra.ListValue[InputLambdaProcessorAttributes] {
	return terra.ReferenceAsList[InputLambdaProcessorAttributes](ipc.ref.Append("input_lambda_processor"))
}

type InputLambdaProcessorAttributes struct {
	ref terra.Reference
}

func (ilp InputLambdaProcessorAttributes) InternalRef() (terra.Reference, error) {
	return ilp.ref, nil
}

func (ilp InputLambdaProcessorAttributes) InternalWithRef(ref terra.Reference) InputLambdaProcessorAttributes {
	return InputLambdaProcessorAttributes{ref: ref}
}

func (ilp InputLambdaProcessorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ilp.ref.InternalTokens()
}

func (ilp InputLambdaProcessorAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(ilp.ref.Append("resource_arn"))
}

type InputSchemaAttributes struct {
	ref terra.Reference
}

func (is InputSchemaAttributes) InternalRef() (terra.Reference, error) {
	return is.ref, nil
}

func (is InputSchemaAttributes) InternalWithRef(ref terra.Reference) InputSchemaAttributes {
	return InputSchemaAttributes{ref: ref}
}

func (is InputSchemaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return is.ref.InternalTokens()
}

func (is InputSchemaAttributes) RecordEncoding() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("record_encoding"))
}

func (is InputSchemaAttributes) RecordColumn() terra.ListValue[InputSchemaRecordColumnAttributes] {
	return terra.ReferenceAsList[InputSchemaRecordColumnAttributes](is.ref.Append("record_column"))
}

func (is InputSchemaAttributes) RecordFormat() terra.ListValue[InputSchemaRecordFormatAttributes] {
	return terra.ReferenceAsList[InputSchemaRecordFormatAttributes](is.ref.Append("record_format"))
}

type InputSchemaRecordColumnAttributes struct {
	ref terra.Reference
}

func (rc InputSchemaRecordColumnAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc InputSchemaRecordColumnAttributes) InternalWithRef(ref terra.Reference) InputSchemaRecordColumnAttributes {
	return InputSchemaRecordColumnAttributes{ref: ref}
}

func (rc InputSchemaRecordColumnAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc InputSchemaRecordColumnAttributes) Mapping() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("mapping"))
}

func (rc InputSchemaRecordColumnAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("name"))
}

func (rc InputSchemaRecordColumnAttributes) SqlType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("sql_type"))
}

type InputSchemaRecordFormatAttributes struct {
	ref terra.Reference
}

func (rf InputSchemaRecordFormatAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf InputSchemaRecordFormatAttributes) InternalWithRef(ref terra.Reference) InputSchemaRecordFormatAttributes {
	return InputSchemaRecordFormatAttributes{ref: ref}
}

func (rf InputSchemaRecordFormatAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf InputSchemaRecordFormatAttributes) RecordFormatType() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("record_format_type"))
}

func (rf InputSchemaRecordFormatAttributes) MappingParameters() terra.ListValue[InputSchemaRecordFormatMappingParametersAttributes] {
	return terra.ReferenceAsList[InputSchemaRecordFormatMappingParametersAttributes](rf.ref.Append("mapping_parameters"))
}

type InputSchemaRecordFormatMappingParametersAttributes struct {
	ref terra.Reference
}

func (mp InputSchemaRecordFormatMappingParametersAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp InputSchemaRecordFormatMappingParametersAttributes) InternalWithRef(ref terra.Reference) InputSchemaRecordFormatMappingParametersAttributes {
	return InputSchemaRecordFormatMappingParametersAttributes{ref: ref}
}

func (mp InputSchemaRecordFormatMappingParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp InputSchemaRecordFormatMappingParametersAttributes) CsvMappingParameters() terra.ListValue[InputSchemaRecordFormatMappingParametersCsvMappingParametersAttributes] {
	return terra.ReferenceAsList[InputSchemaRecordFormatMappingParametersCsvMappingParametersAttributes](mp.ref.Append("csv_mapping_parameters"))
}

func (mp InputSchemaRecordFormatMappingParametersAttributes) JsonMappingParameters() terra.ListValue[InputSchemaRecordFormatMappingParametersJsonMappingParametersAttributes] {
	return terra.ReferenceAsList[InputSchemaRecordFormatMappingParametersJsonMappingParametersAttributes](mp.ref.Append("json_mapping_parameters"))
}

type InputSchemaRecordFormatMappingParametersCsvMappingParametersAttributes struct {
	ref terra.Reference
}

func (cmp InputSchemaRecordFormatMappingParametersCsvMappingParametersAttributes) InternalRef() (terra.Reference, error) {
	return cmp.ref, nil
}

func (cmp InputSchemaRecordFormatMappingParametersCsvMappingParametersAttributes) InternalWithRef(ref terra.Reference) InputSchemaRecordFormatMappingParametersCsvMappingParametersAttributes {
	return InputSchemaRecordFormatMappingParametersCsvMappingParametersAttributes{ref: ref}
}

func (cmp InputSchemaRecordFormatMappingParametersCsvMappingParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cmp.ref.InternalTokens()
}

func (cmp InputSchemaRecordFormatMappingParametersCsvMappingParametersAttributes) RecordColumnDelimiter() terra.StringValue {
	return terra.ReferenceAsString(cmp.ref.Append("record_column_delimiter"))
}

func (cmp InputSchemaRecordFormatMappingParametersCsvMappingParametersAttributes) RecordRowDelimiter() terra.StringValue {
	return terra.ReferenceAsString(cmp.ref.Append("record_row_delimiter"))
}

type InputSchemaRecordFormatMappingParametersJsonMappingParametersAttributes struct {
	ref terra.Reference
}

func (jmp InputSchemaRecordFormatMappingParametersJsonMappingParametersAttributes) InternalRef() (terra.Reference, error) {
	return jmp.ref, nil
}

func (jmp InputSchemaRecordFormatMappingParametersJsonMappingParametersAttributes) InternalWithRef(ref terra.Reference) InputSchemaRecordFormatMappingParametersJsonMappingParametersAttributes {
	return InputSchemaRecordFormatMappingParametersJsonMappingParametersAttributes{ref: ref}
}

func (jmp InputSchemaRecordFormatMappingParametersJsonMappingParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jmp.ref.InternalTokens()
}

func (jmp InputSchemaRecordFormatMappingParametersJsonMappingParametersAttributes) RecordRowPath() terra.StringValue {
	return terra.ReferenceAsString(jmp.ref.Append("record_row_path"))
}

type InputStartingPositionConfigurationAttributes struct {
	ref terra.Reference
}

func (ispc InputStartingPositionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ispc.ref, nil
}

func (ispc InputStartingPositionConfigurationAttributes) InternalWithRef(ref terra.Reference) InputStartingPositionConfigurationAttributes {
	return InputStartingPositionConfigurationAttributes{ref: ref}
}

func (ispc InputStartingPositionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ispc.ref.InternalTokens()
}

func (ispc InputStartingPositionConfigurationAttributes) InputStartingPosition() terra.StringValue {
	return terra.ReferenceAsString(ispc.ref.Append("input_starting_position"))
}

type KinesisFirehoseInputAttributes struct {
	ref terra.Reference
}

func (kfi KinesisFirehoseInputAttributes) InternalRef() (terra.Reference, error) {
	return kfi.ref, nil
}

func (kfi KinesisFirehoseInputAttributes) InternalWithRef(ref terra.Reference) KinesisFirehoseInputAttributes {
	return KinesisFirehoseInputAttributes{ref: ref}
}

func (kfi KinesisFirehoseInputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kfi.ref.InternalTokens()
}

func (kfi KinesisFirehoseInputAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(kfi.ref.Append("resource_arn"))
}

type KinesisStreamsInputAttributes struct {
	ref terra.Reference
}

func (ksi KinesisStreamsInputAttributes) InternalRef() (terra.Reference, error) {
	return ksi.ref, nil
}

func (ksi KinesisStreamsInputAttributes) InternalWithRef(ref terra.Reference) KinesisStreamsInputAttributes {
	return KinesisStreamsInputAttributes{ref: ref}
}

func (ksi KinesisStreamsInputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ksi.ref.InternalTokens()
}

func (ksi KinesisStreamsInputAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(ksi.ref.Append("resource_arn"))
}

type OutputAttributes struct {
	ref terra.Reference
}

func (o OutputAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OutputAttributes) InternalWithRef(ref terra.Reference) OutputAttributes {
	return OutputAttributes{ref: ref}
}

func (o OutputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o OutputAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("name"))
}

func (o OutputAttributes) OutputId() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("output_id"))
}

func (o OutputAttributes) DestinationSchema() terra.ListValue[DestinationSchemaAttributes] {
	return terra.ReferenceAsList[DestinationSchemaAttributes](o.ref.Append("destination_schema"))
}

func (o OutputAttributes) KinesisFirehoseOutput() terra.ListValue[KinesisFirehoseOutputAttributes] {
	return terra.ReferenceAsList[KinesisFirehoseOutputAttributes](o.ref.Append("kinesis_firehose_output"))
}

func (o OutputAttributes) KinesisStreamsOutput() terra.ListValue[KinesisStreamsOutputAttributes] {
	return terra.ReferenceAsList[KinesisStreamsOutputAttributes](o.ref.Append("kinesis_streams_output"))
}

func (o OutputAttributes) LambdaOutput() terra.ListValue[LambdaOutputAttributes] {
	return terra.ReferenceAsList[LambdaOutputAttributes](o.ref.Append("lambda_output"))
}

type DestinationSchemaAttributes struct {
	ref terra.Reference
}

func (ds DestinationSchemaAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds DestinationSchemaAttributes) InternalWithRef(ref terra.Reference) DestinationSchemaAttributes {
	return DestinationSchemaAttributes{ref: ref}
}

func (ds DestinationSchemaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds DestinationSchemaAttributes) RecordFormatType() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("record_format_type"))
}

type KinesisFirehoseOutputAttributes struct {
	ref terra.Reference
}

func (kfo KinesisFirehoseOutputAttributes) InternalRef() (terra.Reference, error) {
	return kfo.ref, nil
}

func (kfo KinesisFirehoseOutputAttributes) InternalWithRef(ref terra.Reference) KinesisFirehoseOutputAttributes {
	return KinesisFirehoseOutputAttributes{ref: ref}
}

func (kfo KinesisFirehoseOutputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kfo.ref.InternalTokens()
}

func (kfo KinesisFirehoseOutputAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(kfo.ref.Append("resource_arn"))
}

type KinesisStreamsOutputAttributes struct {
	ref terra.Reference
}

func (kso KinesisStreamsOutputAttributes) InternalRef() (terra.Reference, error) {
	return kso.ref, nil
}

func (kso KinesisStreamsOutputAttributes) InternalWithRef(ref terra.Reference) KinesisStreamsOutputAttributes {
	return KinesisStreamsOutputAttributes{ref: ref}
}

func (kso KinesisStreamsOutputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kso.ref.InternalTokens()
}

func (kso KinesisStreamsOutputAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(kso.ref.Append("resource_arn"))
}

type LambdaOutputAttributes struct {
	ref terra.Reference
}

func (lo LambdaOutputAttributes) InternalRef() (terra.Reference, error) {
	return lo.ref, nil
}

func (lo LambdaOutputAttributes) InternalWithRef(ref terra.Reference) LambdaOutputAttributes {
	return LambdaOutputAttributes{ref: ref}
}

func (lo LambdaOutputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lo.ref.InternalTokens()
}

func (lo LambdaOutputAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(lo.ref.Append("resource_arn"))
}

type ReferenceDataSourceAttributes struct {
	ref terra.Reference
}

func (rds ReferenceDataSourceAttributes) InternalRef() (terra.Reference, error) {
	return rds.ref, nil
}

func (rds ReferenceDataSourceAttributes) InternalWithRef(ref terra.Reference) ReferenceDataSourceAttributes {
	return ReferenceDataSourceAttributes{ref: ref}
}

func (rds ReferenceDataSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rds.ref.InternalTokens()
}

func (rds ReferenceDataSourceAttributes) ReferenceId() terra.StringValue {
	return terra.ReferenceAsString(rds.ref.Append("reference_id"))
}

func (rds ReferenceDataSourceAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(rds.ref.Append("table_name"))
}

func (rds ReferenceDataSourceAttributes) ReferenceSchema() terra.ListValue[ReferenceSchemaAttributes] {
	return terra.ReferenceAsList[ReferenceSchemaAttributes](rds.ref.Append("reference_schema"))
}

func (rds ReferenceDataSourceAttributes) S3ReferenceDataSource() terra.ListValue[S3ReferenceDataSourceAttributes] {
	return terra.ReferenceAsList[S3ReferenceDataSourceAttributes](rds.ref.Append("s3_reference_data_source"))
}

type ReferenceSchemaAttributes struct {
	ref terra.Reference
}

func (rs ReferenceSchemaAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs ReferenceSchemaAttributes) InternalWithRef(ref terra.Reference) ReferenceSchemaAttributes {
	return ReferenceSchemaAttributes{ref: ref}
}

func (rs ReferenceSchemaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs ReferenceSchemaAttributes) RecordEncoding() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("record_encoding"))
}

func (rs ReferenceSchemaAttributes) RecordColumn() terra.ListValue[ReferenceSchemaRecordColumnAttributes] {
	return terra.ReferenceAsList[ReferenceSchemaRecordColumnAttributes](rs.ref.Append("record_column"))
}

func (rs ReferenceSchemaAttributes) RecordFormat() terra.ListValue[ReferenceSchemaRecordFormatAttributes] {
	return terra.ReferenceAsList[ReferenceSchemaRecordFormatAttributes](rs.ref.Append("record_format"))
}

type ReferenceSchemaRecordColumnAttributes struct {
	ref terra.Reference
}

func (rc ReferenceSchemaRecordColumnAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc ReferenceSchemaRecordColumnAttributes) InternalWithRef(ref terra.Reference) ReferenceSchemaRecordColumnAttributes {
	return ReferenceSchemaRecordColumnAttributes{ref: ref}
}

func (rc ReferenceSchemaRecordColumnAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc ReferenceSchemaRecordColumnAttributes) Mapping() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("mapping"))
}

func (rc ReferenceSchemaRecordColumnAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("name"))
}

func (rc ReferenceSchemaRecordColumnAttributes) SqlType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("sql_type"))
}

type ReferenceSchemaRecordFormatAttributes struct {
	ref terra.Reference
}

func (rf ReferenceSchemaRecordFormatAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf ReferenceSchemaRecordFormatAttributes) InternalWithRef(ref terra.Reference) ReferenceSchemaRecordFormatAttributes {
	return ReferenceSchemaRecordFormatAttributes{ref: ref}
}

func (rf ReferenceSchemaRecordFormatAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf ReferenceSchemaRecordFormatAttributes) RecordFormatType() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("record_format_type"))
}

func (rf ReferenceSchemaRecordFormatAttributes) MappingParameters() terra.ListValue[ReferenceSchemaRecordFormatMappingParametersAttributes] {
	return terra.ReferenceAsList[ReferenceSchemaRecordFormatMappingParametersAttributes](rf.ref.Append("mapping_parameters"))
}

type ReferenceSchemaRecordFormatMappingParametersAttributes struct {
	ref terra.Reference
}

func (mp ReferenceSchemaRecordFormatMappingParametersAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp ReferenceSchemaRecordFormatMappingParametersAttributes) InternalWithRef(ref terra.Reference) ReferenceSchemaRecordFormatMappingParametersAttributes {
	return ReferenceSchemaRecordFormatMappingParametersAttributes{ref: ref}
}

func (mp ReferenceSchemaRecordFormatMappingParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp ReferenceSchemaRecordFormatMappingParametersAttributes) CsvMappingParameters() terra.ListValue[ReferenceSchemaRecordFormatMappingParametersCsvMappingParametersAttributes] {
	return terra.ReferenceAsList[ReferenceSchemaRecordFormatMappingParametersCsvMappingParametersAttributes](mp.ref.Append("csv_mapping_parameters"))
}

func (mp ReferenceSchemaRecordFormatMappingParametersAttributes) JsonMappingParameters() terra.ListValue[ReferenceSchemaRecordFormatMappingParametersJsonMappingParametersAttributes] {
	return terra.ReferenceAsList[ReferenceSchemaRecordFormatMappingParametersJsonMappingParametersAttributes](mp.ref.Append("json_mapping_parameters"))
}

type ReferenceSchemaRecordFormatMappingParametersCsvMappingParametersAttributes struct {
	ref terra.Reference
}

func (cmp ReferenceSchemaRecordFormatMappingParametersCsvMappingParametersAttributes) InternalRef() (terra.Reference, error) {
	return cmp.ref, nil
}

func (cmp ReferenceSchemaRecordFormatMappingParametersCsvMappingParametersAttributes) InternalWithRef(ref terra.Reference) ReferenceSchemaRecordFormatMappingParametersCsvMappingParametersAttributes {
	return ReferenceSchemaRecordFormatMappingParametersCsvMappingParametersAttributes{ref: ref}
}

func (cmp ReferenceSchemaRecordFormatMappingParametersCsvMappingParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cmp.ref.InternalTokens()
}

func (cmp ReferenceSchemaRecordFormatMappingParametersCsvMappingParametersAttributes) RecordColumnDelimiter() terra.StringValue {
	return terra.ReferenceAsString(cmp.ref.Append("record_column_delimiter"))
}

func (cmp ReferenceSchemaRecordFormatMappingParametersCsvMappingParametersAttributes) RecordRowDelimiter() terra.StringValue {
	return terra.ReferenceAsString(cmp.ref.Append("record_row_delimiter"))
}

type ReferenceSchemaRecordFormatMappingParametersJsonMappingParametersAttributes struct {
	ref terra.Reference
}

func (jmp ReferenceSchemaRecordFormatMappingParametersJsonMappingParametersAttributes) InternalRef() (terra.Reference, error) {
	return jmp.ref, nil
}

func (jmp ReferenceSchemaRecordFormatMappingParametersJsonMappingParametersAttributes) InternalWithRef(ref terra.Reference) ReferenceSchemaRecordFormatMappingParametersJsonMappingParametersAttributes {
	return ReferenceSchemaRecordFormatMappingParametersJsonMappingParametersAttributes{ref: ref}
}

func (jmp ReferenceSchemaRecordFormatMappingParametersJsonMappingParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jmp.ref.InternalTokens()
}

func (jmp ReferenceSchemaRecordFormatMappingParametersJsonMappingParametersAttributes) RecordRowPath() terra.StringValue {
	return terra.ReferenceAsString(jmp.ref.Append("record_row_path"))
}

type S3ReferenceDataSourceAttributes struct {
	ref terra.Reference
}

func (srds S3ReferenceDataSourceAttributes) InternalRef() (terra.Reference, error) {
	return srds.ref, nil
}

func (srds S3ReferenceDataSourceAttributes) InternalWithRef(ref terra.Reference) S3ReferenceDataSourceAttributes {
	return S3ReferenceDataSourceAttributes{ref: ref}
}

func (srds S3ReferenceDataSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return srds.ref.InternalTokens()
}

func (srds S3ReferenceDataSourceAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(srds.ref.Append("bucket_arn"))
}

func (srds S3ReferenceDataSourceAttributes) FileKey() terra.StringValue {
	return terra.ReferenceAsString(srds.ref.Append("file_key"))
}

type VpcConfigurationAttributes struct {
	ref terra.Reference
}

func (vc VpcConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VpcConfigurationAttributes) InternalWithRef(ref terra.Reference) VpcConfigurationAttributes {
	return VpcConfigurationAttributes{ref: ref}
}

func (vc VpcConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc VpcConfigurationAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc VpcConfigurationAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

func (vc VpcConfigurationAttributes) VpcConfigurationId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_configuration_id"))
}

func (vc VpcConfigurationAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_id"))
}

type CloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo CloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo CloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) CloudwatchLoggingOptionsAttributes {
	return CloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo CloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo CloudwatchLoggingOptionsAttributes) CloudwatchLoggingOptionId() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("cloudwatch_logging_option_id"))
}

func (clo CloudwatchLoggingOptionsAttributes) LogStreamArn() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_arn"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ApplicationConfigurationState struct {
	ApplicationCodeConfiguration     []ApplicationCodeConfigurationState     `json:"application_code_configuration"`
	ApplicationSnapshotConfiguration []ApplicationSnapshotConfigurationState `json:"application_snapshot_configuration"`
	EnvironmentProperties            []EnvironmentPropertiesState            `json:"environment_properties"`
	FlinkApplicationConfiguration    []FlinkApplicationConfigurationState    `json:"flink_application_configuration"`
	RunConfiguration                 []RunConfigurationState                 `json:"run_configuration"`
	SqlApplicationConfiguration      []SqlApplicationConfigurationState      `json:"sql_application_configuration"`
	VpcConfiguration                 []VpcConfigurationState                 `json:"vpc_configuration"`
}

type ApplicationCodeConfigurationState struct {
	CodeContentType string             `json:"code_content_type"`
	CodeContent     []CodeContentState `json:"code_content"`
}

type CodeContentState struct {
	TextContent       string                   `json:"text_content"`
	S3ContentLocation []S3ContentLocationState `json:"s3_content_location"`
}

type S3ContentLocationState struct {
	BucketArn     string `json:"bucket_arn"`
	FileKey       string `json:"file_key"`
	ObjectVersion string `json:"object_version"`
}

type ApplicationSnapshotConfigurationState struct {
	SnapshotsEnabled bool `json:"snapshots_enabled"`
}

type EnvironmentPropertiesState struct {
	PropertyGroup []PropertyGroupState `json:"property_group"`
}

type PropertyGroupState struct {
	PropertyGroupId string            `json:"property_group_id"`
	PropertyMap     map[string]string `json:"property_map"`
}

type FlinkApplicationConfigurationState struct {
	CheckpointConfiguration  []CheckpointConfigurationState  `json:"checkpoint_configuration"`
	MonitoringConfiguration  []MonitoringConfigurationState  `json:"monitoring_configuration"`
	ParallelismConfiguration []ParallelismConfigurationState `json:"parallelism_configuration"`
}

type CheckpointConfigurationState struct {
	CheckpointInterval         float64 `json:"checkpoint_interval"`
	CheckpointingEnabled       bool    `json:"checkpointing_enabled"`
	ConfigurationType          string  `json:"configuration_type"`
	MinPauseBetweenCheckpoints float64 `json:"min_pause_between_checkpoints"`
}

type MonitoringConfigurationState struct {
	ConfigurationType string `json:"configuration_type"`
	LogLevel          string `json:"log_level"`
	MetricsLevel      string `json:"metrics_level"`
}

type ParallelismConfigurationState struct {
	AutoScalingEnabled bool    `json:"auto_scaling_enabled"`
	ConfigurationType  string  `json:"configuration_type"`
	Parallelism        float64 `json:"parallelism"`
	ParallelismPerKpu  float64 `json:"parallelism_per_kpu"`
}

type RunConfigurationState struct {
	ApplicationRestoreConfiguration []ApplicationRestoreConfigurationState `json:"application_restore_configuration"`
	FlinkRunConfiguration           []FlinkRunConfigurationState           `json:"flink_run_configuration"`
}

type ApplicationRestoreConfigurationState struct {
	ApplicationRestoreType string `json:"application_restore_type"`
	SnapshotName           string `json:"snapshot_name"`
}

type FlinkRunConfigurationState struct {
	AllowNonRestoredState bool `json:"allow_non_restored_state"`
}

type SqlApplicationConfigurationState struct {
	Input               []InputState               `json:"input"`
	Output              []OutputState              `json:"output"`
	ReferenceDataSource []ReferenceDataSourceState `json:"reference_data_source"`
}

type InputState struct {
	InAppStreamNames                   []string                                  `json:"in_app_stream_names"`
	InputId                            string                                    `json:"input_id"`
	NamePrefix                         string                                    `json:"name_prefix"`
	InputParallelism                   []InputParallelismState                   `json:"input_parallelism"`
	InputProcessingConfiguration       []InputProcessingConfigurationState       `json:"input_processing_configuration"`
	InputSchema                        []InputSchemaState                        `json:"input_schema"`
	InputStartingPositionConfiguration []InputStartingPositionConfigurationState `json:"input_starting_position_configuration"`
	KinesisFirehoseInput               []KinesisFirehoseInputState               `json:"kinesis_firehose_input"`
	KinesisStreamsInput                []KinesisStreamsInputState                `json:"kinesis_streams_input"`
}

type InputParallelismState struct {
	Count float64 `json:"count"`
}

type InputProcessingConfigurationState struct {
	InputLambdaProcessor []InputLambdaProcessorState `json:"input_lambda_processor"`
}

type InputLambdaProcessorState struct {
	ResourceArn string `json:"resource_arn"`
}

type InputSchemaState struct {
	RecordEncoding string                         `json:"record_encoding"`
	RecordColumn   []InputSchemaRecordColumnState `json:"record_column"`
	RecordFormat   []InputSchemaRecordFormatState `json:"record_format"`
}

type InputSchemaRecordColumnState struct {
	Mapping string `json:"mapping"`
	Name    string `json:"name"`
	SqlType string `json:"sql_type"`
}

type InputSchemaRecordFormatState struct {
	RecordFormatType  string                                          `json:"record_format_type"`
	MappingParameters []InputSchemaRecordFormatMappingParametersState `json:"mapping_parameters"`
}

type InputSchemaRecordFormatMappingParametersState struct {
	CsvMappingParameters  []InputSchemaRecordFormatMappingParametersCsvMappingParametersState  `json:"csv_mapping_parameters"`
	JsonMappingParameters []InputSchemaRecordFormatMappingParametersJsonMappingParametersState `json:"json_mapping_parameters"`
}

type InputSchemaRecordFormatMappingParametersCsvMappingParametersState struct {
	RecordColumnDelimiter string `json:"record_column_delimiter"`
	RecordRowDelimiter    string `json:"record_row_delimiter"`
}

type InputSchemaRecordFormatMappingParametersJsonMappingParametersState struct {
	RecordRowPath string `json:"record_row_path"`
}

type InputStartingPositionConfigurationState struct {
	InputStartingPosition string `json:"input_starting_position"`
}

type KinesisFirehoseInputState struct {
	ResourceArn string `json:"resource_arn"`
}

type KinesisStreamsInputState struct {
	ResourceArn string `json:"resource_arn"`
}

type OutputState struct {
	Name                  string                       `json:"name"`
	OutputId              string                       `json:"output_id"`
	DestinationSchema     []DestinationSchemaState     `json:"destination_schema"`
	KinesisFirehoseOutput []KinesisFirehoseOutputState `json:"kinesis_firehose_output"`
	KinesisStreamsOutput  []KinesisStreamsOutputState  `json:"kinesis_streams_output"`
	LambdaOutput          []LambdaOutputState          `json:"lambda_output"`
}

type DestinationSchemaState struct {
	RecordFormatType string `json:"record_format_type"`
}

type KinesisFirehoseOutputState struct {
	ResourceArn string `json:"resource_arn"`
}

type KinesisStreamsOutputState struct {
	ResourceArn string `json:"resource_arn"`
}

type LambdaOutputState struct {
	ResourceArn string `json:"resource_arn"`
}

type ReferenceDataSourceState struct {
	ReferenceId           string                       `json:"reference_id"`
	TableName             string                       `json:"table_name"`
	ReferenceSchema       []ReferenceSchemaState       `json:"reference_schema"`
	S3ReferenceDataSource []S3ReferenceDataSourceState `json:"s3_reference_data_source"`
}

type ReferenceSchemaState struct {
	RecordEncoding string                             `json:"record_encoding"`
	RecordColumn   []ReferenceSchemaRecordColumnState `json:"record_column"`
	RecordFormat   []ReferenceSchemaRecordFormatState `json:"record_format"`
}

type ReferenceSchemaRecordColumnState struct {
	Mapping string `json:"mapping"`
	Name    string `json:"name"`
	SqlType string `json:"sql_type"`
}

type ReferenceSchemaRecordFormatState struct {
	RecordFormatType  string                                              `json:"record_format_type"`
	MappingParameters []ReferenceSchemaRecordFormatMappingParametersState `json:"mapping_parameters"`
}

type ReferenceSchemaRecordFormatMappingParametersState struct {
	CsvMappingParameters  []ReferenceSchemaRecordFormatMappingParametersCsvMappingParametersState  `json:"csv_mapping_parameters"`
	JsonMappingParameters []ReferenceSchemaRecordFormatMappingParametersJsonMappingParametersState `json:"json_mapping_parameters"`
}

type ReferenceSchemaRecordFormatMappingParametersCsvMappingParametersState struct {
	RecordColumnDelimiter string `json:"record_column_delimiter"`
	RecordRowDelimiter    string `json:"record_row_delimiter"`
}

type ReferenceSchemaRecordFormatMappingParametersJsonMappingParametersState struct {
	RecordRowPath string `json:"record_row_path"`
}

type S3ReferenceDataSourceState struct {
	BucketArn string `json:"bucket_arn"`
	FileKey   string `json:"file_key"`
}

type VpcConfigurationState struct {
	SecurityGroupIds   []string `json:"security_group_ids"`
	SubnetIds          []string `json:"subnet_ids"`
	VpcConfigurationId string   `json:"vpc_configuration_id"`
	VpcId              string   `json:"vpc_id"`
}

type CloudwatchLoggingOptionsState struct {
	CloudwatchLoggingOptionId string `json:"cloudwatch_logging_option_id"`
	LogStreamArn              string `json:"log_stream_arn"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
