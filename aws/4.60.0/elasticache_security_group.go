// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewElasticacheSecurityGroup(name string, args ElasticacheSecurityGroupArgs) *ElasticacheSecurityGroup {
	return &ElasticacheSecurityGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElasticacheSecurityGroup)(nil)

type ElasticacheSecurityGroup struct {
	Name  string
	Args  ElasticacheSecurityGroupArgs
	state *elasticacheSecurityGroupState
}

func (esg *ElasticacheSecurityGroup) Type() string {
	return "aws_elasticache_security_group"
}

func (esg *ElasticacheSecurityGroup) LocalName() string {
	return esg.Name
}

func (esg *ElasticacheSecurityGroup) Configuration() interface{} {
	return esg.Args
}

func (esg *ElasticacheSecurityGroup) Attributes() elasticacheSecurityGroupAttributes {
	return elasticacheSecurityGroupAttributes{ref: terra.ReferenceResource(esg)}
}

func (esg *ElasticacheSecurityGroup) ImportState(av io.Reader) error {
	esg.state = &elasticacheSecurityGroupState{}
	if err := json.NewDecoder(av).Decode(esg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", esg.Type(), esg.LocalName(), err)
	}
	return nil
}

func (esg *ElasticacheSecurityGroup) State() (*elasticacheSecurityGroupState, bool) {
	return esg.state, esg.state != nil
}

func (esg *ElasticacheSecurityGroup) StateMust() *elasticacheSecurityGroupState {
	if esg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", esg.Type(), esg.LocalName()))
	}
	return esg.state
}

func (esg *ElasticacheSecurityGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(esg)
}

type ElasticacheSecurityGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SecurityGroupNames: set of string, required
	SecurityGroupNames terra.SetValue[terra.StringValue] `hcl:"security_group_names,attr" validate:"required"`
	// DependsOn contains resources that ElasticacheSecurityGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type elasticacheSecurityGroupAttributes struct {
	ref terra.Reference
}

func (esg elasticacheSecurityGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(esg.ref.Append("description"))
}

func (esg elasticacheSecurityGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(esg.ref.Append("id"))
}

func (esg elasticacheSecurityGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(esg.ref.Append("name"))
}

func (esg elasticacheSecurityGroupAttributes) SecurityGroupNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](esg.ref.Append("security_group_names"))
}

type elasticacheSecurityGroupState struct {
	Description        string   `json:"description"`
	Id                 string   `json:"id"`
	Name               string   `json:"name"`
	SecurityGroupNames []string `json:"security_group_names"`
}
