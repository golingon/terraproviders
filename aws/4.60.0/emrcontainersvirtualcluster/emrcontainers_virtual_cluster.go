// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package emrcontainersvirtualcluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ContainerProvider struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Info: required
	Info *Info `hcl:"info,block" validate:"required"`
}

type Info struct {
	// EksInfo: required
	EksInfo *EksInfo `hcl:"eks_info,block" validate:"required"`
}

type EksInfo struct {
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}

type Timeouts struct {
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type ContainerProviderAttributes struct {
	ref terra.Reference
}

func (cp ContainerProviderAttributes) InternalRef() terra.Reference {
	return cp.ref
}

func (cp ContainerProviderAttributes) InternalWithRef(ref terra.Reference) ContainerProviderAttributes {
	return ContainerProviderAttributes{ref: ref}
}

func (cp ContainerProviderAttributes) InternalTokens() hclwrite.Tokens {
	return cp.ref.InternalTokens()
}

func (cp ContainerProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cp.ref.Append("id"))
}

func (cp ContainerProviderAttributes) Type() terra.StringValue {
	return terra.ReferenceString(cp.ref.Append("type"))
}

func (cp ContainerProviderAttributes) Info() terra.ListValue[InfoAttributes] {
	return terra.ReferenceList[InfoAttributes](cp.ref.Append("info"))
}

type InfoAttributes struct {
	ref terra.Reference
}

func (i InfoAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i InfoAttributes) InternalWithRef(ref terra.Reference) InfoAttributes {
	return InfoAttributes{ref: ref}
}

func (i InfoAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i InfoAttributes) EksInfo() terra.ListValue[EksInfoAttributes] {
	return terra.ReferenceList[EksInfoAttributes](i.ref.Append("eks_info"))
}

type EksInfoAttributes struct {
	ref terra.Reference
}

func (ei EksInfoAttributes) InternalRef() terra.Reference {
	return ei.ref
}

func (ei EksInfoAttributes) InternalWithRef(ref terra.Reference) EksInfoAttributes {
	return EksInfoAttributes{ref: ref}
}

func (ei EksInfoAttributes) InternalTokens() hclwrite.Tokens {
	return ei.ref.InternalTokens()
}

func (ei EksInfoAttributes) Namespace() terra.StringValue {
	return terra.ReferenceString(ei.ref.Append("namespace"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

type ContainerProviderState struct {
	Id   string      `json:"id"`
	Type string      `json:"type"`
	Info []InfoState `json:"info"`
}

type InfoState struct {
	EksInfo []EksInfoState `json:"eks_info"`
}

type EksInfoState struct {
	Namespace string `json:"namespace"`
}

type TimeoutsState struct {
	Delete string `json:"delete"`
}
