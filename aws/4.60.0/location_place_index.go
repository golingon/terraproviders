// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	locationplaceindex "github.com/golingon/terraproviders/aws/4.60.0/locationplaceindex"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLocationPlaceIndex(name string, args LocationPlaceIndexArgs) *LocationPlaceIndex {
	return &LocationPlaceIndex{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LocationPlaceIndex)(nil)

type LocationPlaceIndex struct {
	Name  string
	Args  LocationPlaceIndexArgs
	state *locationPlaceIndexState
}

func (lpi *LocationPlaceIndex) Type() string {
	return "aws_location_place_index"
}

func (lpi *LocationPlaceIndex) LocalName() string {
	return lpi.Name
}

func (lpi *LocationPlaceIndex) Configuration() interface{} {
	return lpi.Args
}

func (lpi *LocationPlaceIndex) Attributes() locationPlaceIndexAttributes {
	return locationPlaceIndexAttributes{ref: terra.ReferenceResource(lpi)}
}

func (lpi *LocationPlaceIndex) ImportState(av io.Reader) error {
	lpi.state = &locationPlaceIndexState{}
	if err := json.NewDecoder(av).Decode(lpi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lpi.Type(), lpi.LocalName(), err)
	}
	return nil
}

func (lpi *LocationPlaceIndex) State() (*locationPlaceIndexState, bool) {
	return lpi.state, lpi.state != nil
}

func (lpi *LocationPlaceIndex) StateMust() *locationPlaceIndexState {
	if lpi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lpi.Type(), lpi.LocalName()))
	}
	return lpi.state
}

func (lpi *LocationPlaceIndex) DependOn() terra.Reference {
	return terra.ReferenceResource(lpi)
}

type LocationPlaceIndexArgs struct {
	// DataSource: string, required
	DataSource terra.StringValue `hcl:"data_source,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IndexName: string, required
	IndexName terra.StringValue `hcl:"index_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DataSourceConfiguration: optional
	DataSourceConfiguration *locationplaceindex.DataSourceConfiguration `hcl:"data_source_configuration,block"`
	// DependsOn contains resources that LocationPlaceIndex depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type locationPlaceIndexAttributes struct {
	ref terra.Reference
}

func (lpi locationPlaceIndexAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(lpi.ref.Append("create_time"))
}

func (lpi locationPlaceIndexAttributes) DataSource() terra.StringValue {
	return terra.ReferenceString(lpi.ref.Append("data_source"))
}

func (lpi locationPlaceIndexAttributes) Description() terra.StringValue {
	return terra.ReferenceString(lpi.ref.Append("description"))
}

func (lpi locationPlaceIndexAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lpi.ref.Append("id"))
}

func (lpi locationPlaceIndexAttributes) IndexArn() terra.StringValue {
	return terra.ReferenceString(lpi.ref.Append("index_arn"))
}

func (lpi locationPlaceIndexAttributes) IndexName() terra.StringValue {
	return terra.ReferenceString(lpi.ref.Append("index_name"))
}

func (lpi locationPlaceIndexAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lpi.ref.Append("tags"))
}

func (lpi locationPlaceIndexAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lpi.ref.Append("tags_all"))
}

func (lpi locationPlaceIndexAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(lpi.ref.Append("update_time"))
}

func (lpi locationPlaceIndexAttributes) DataSourceConfiguration() terra.ListValue[locationplaceindex.DataSourceConfigurationAttributes] {
	return terra.ReferenceList[locationplaceindex.DataSourceConfigurationAttributes](lpi.ref.Append("data_source_configuration"))
}

type locationPlaceIndexState struct {
	CreateTime              string                                            `json:"create_time"`
	DataSource              string                                            `json:"data_source"`
	Description             string                                            `json:"description"`
	Id                      string                                            `json:"id"`
	IndexArn                string                                            `json:"index_arn"`
	IndexName               string                                            `json:"index_name"`
	Tags                    map[string]string                                 `json:"tags"`
	TagsAll                 map[string]string                                 `json:"tags_all"`
	UpdateTime              string                                            `json:"update_time"`
	DataSourceConfiguration []locationplaceindex.DataSourceConfigurationState `json:"data_source_configuration"`
}
