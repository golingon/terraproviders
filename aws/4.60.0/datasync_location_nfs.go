// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	datasynclocationnfs "github.com/golingon/terraproviders/aws/4.60.0/datasynclocationnfs"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatasyncLocationNfs(name string, args DatasyncLocationNfsArgs) *DatasyncLocationNfs {
	return &DatasyncLocationNfs{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatasyncLocationNfs)(nil)

type DatasyncLocationNfs struct {
	Name  string
	Args  DatasyncLocationNfsArgs
	state *datasyncLocationNfsState
}

func (dln *DatasyncLocationNfs) Type() string {
	return "aws_datasync_location_nfs"
}

func (dln *DatasyncLocationNfs) LocalName() string {
	return dln.Name
}

func (dln *DatasyncLocationNfs) Configuration() interface{} {
	return dln.Args
}

func (dln *DatasyncLocationNfs) Attributes() datasyncLocationNfsAttributes {
	return datasyncLocationNfsAttributes{ref: terra.ReferenceResource(dln)}
}

func (dln *DatasyncLocationNfs) ImportState(av io.Reader) error {
	dln.state = &datasyncLocationNfsState{}
	if err := json.NewDecoder(av).Decode(dln.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dln.Type(), dln.LocalName(), err)
	}
	return nil
}

func (dln *DatasyncLocationNfs) State() (*datasyncLocationNfsState, bool) {
	return dln.state, dln.state != nil
}

func (dln *DatasyncLocationNfs) StateMust() *datasyncLocationNfsState {
	if dln.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dln.Type(), dln.LocalName()))
	}
	return dln.state
}

func (dln *DatasyncLocationNfs) DependOn() terra.Reference {
	return terra.ReferenceResource(dln)
}

type DatasyncLocationNfsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServerHostname: string, required
	ServerHostname terra.StringValue `hcl:"server_hostname,attr" validate:"required"`
	// Subdirectory: string, required
	Subdirectory terra.StringValue `hcl:"subdirectory,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// MountOptions: optional
	MountOptions *datasynclocationnfs.MountOptions `hcl:"mount_options,block"`
	// OnPremConfig: required
	OnPremConfig *datasynclocationnfs.OnPremConfig `hcl:"on_prem_config,block" validate:"required"`
	// DependsOn contains resources that DatasyncLocationNfs depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type datasyncLocationNfsAttributes struct {
	ref terra.Reference
}

func (dln datasyncLocationNfsAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dln.ref.Append("arn"))
}

func (dln datasyncLocationNfsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dln.ref.Append("id"))
}

func (dln datasyncLocationNfsAttributes) ServerHostname() terra.StringValue {
	return terra.ReferenceString(dln.ref.Append("server_hostname"))
}

func (dln datasyncLocationNfsAttributes) Subdirectory() terra.StringValue {
	return terra.ReferenceString(dln.ref.Append("subdirectory"))
}

func (dln datasyncLocationNfsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dln.ref.Append("tags"))
}

func (dln datasyncLocationNfsAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dln.ref.Append("tags_all"))
}

func (dln datasyncLocationNfsAttributes) Uri() terra.StringValue {
	return terra.ReferenceString(dln.ref.Append("uri"))
}

func (dln datasyncLocationNfsAttributes) MountOptions() terra.ListValue[datasynclocationnfs.MountOptionsAttributes] {
	return terra.ReferenceList[datasynclocationnfs.MountOptionsAttributes](dln.ref.Append("mount_options"))
}

func (dln datasyncLocationNfsAttributes) OnPremConfig() terra.ListValue[datasynclocationnfs.OnPremConfigAttributes] {
	return terra.ReferenceList[datasynclocationnfs.OnPremConfigAttributes](dln.ref.Append("on_prem_config"))
}

type datasyncLocationNfsState struct {
	Arn            string                                  `json:"arn"`
	Id             string                                  `json:"id"`
	ServerHostname string                                  `json:"server_hostname"`
	Subdirectory   string                                  `json:"subdirectory"`
	Tags           map[string]string                       `json:"tags"`
	TagsAll        map[string]string                       `json:"tags_all"`
	Uri            string                                  `json:"uri"`
	MountOptions   []datasynclocationnfs.MountOptionsState `json:"mount_options"`
	OnPremConfig   []datasynclocationnfs.OnPremConfigState `json:"on_prem_config"`
}
