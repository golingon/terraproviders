// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package appmeshvirtualnode

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Spec struct {
	// Backend: min=0,max=50
	Backend []Backend `hcl:"backend,block" validate:"min=0,max=50"`
	// BackendDefaults: optional
	BackendDefaults *BackendDefaults `hcl:"backend_defaults,block"`
	// Listener: min=0
	Listener []Listener `hcl:"listener,block" validate:"min=0"`
	// Logging: optional
	Logging *Logging `hcl:"logging,block"`
	// ServiceDiscovery: optional
	ServiceDiscovery *ServiceDiscovery `hcl:"service_discovery,block"`
}

type Backend struct {
	// VirtualService: required
	VirtualService *VirtualService `hcl:"virtual_service,block" validate:"required"`
}

type VirtualService struct {
	// VirtualServiceName: string, required
	VirtualServiceName terra.StringValue `hcl:"virtual_service_name,attr" validate:"required"`
	// VirtualServiceClientPolicy: optional
	ClientPolicy *VirtualServiceClientPolicy `hcl:"client_policy,block"`
}

type VirtualServiceClientPolicy struct {
	// VirtualServiceClientPolicyTls: optional
	Tls *VirtualServiceClientPolicyTls `hcl:"tls,block"`
}

type VirtualServiceClientPolicyTls struct {
	// Enforce: bool, optional
	Enforce terra.BoolValue `hcl:"enforce,attr"`
	// Ports: set of number, optional
	Ports terra.SetValue[terra.NumberValue] `hcl:"ports,attr"`
	// VirtualServiceClientPolicyTlsCertificate: optional
	Certificate *VirtualServiceClientPolicyTlsCertificate `hcl:"certificate,block"`
	// VirtualServiceClientPolicyTlsValidation: required
	Validation *VirtualServiceClientPolicyTlsValidation `hcl:"validation,block" validate:"required"`
}

type VirtualServiceClientPolicyTlsCertificate struct {
	// VirtualServiceClientPolicyTlsCertificateFile: optional
	File *VirtualServiceClientPolicyTlsCertificateFile `hcl:"file,block"`
	// VirtualServiceClientPolicyTlsCertificateSds: optional
	Sds *VirtualServiceClientPolicyTlsCertificateSds `hcl:"sds,block"`
}

type VirtualServiceClientPolicyTlsCertificateFile struct {
	// CertificateChain: string, required
	CertificateChain terra.StringValue `hcl:"certificate_chain,attr" validate:"required"`
	// PrivateKey: string, required
	PrivateKey terra.StringValue `hcl:"private_key,attr" validate:"required"`
}

type VirtualServiceClientPolicyTlsCertificateSds struct {
	// SecretName: string, required
	SecretName terra.StringValue `hcl:"secret_name,attr" validate:"required"`
}

type VirtualServiceClientPolicyTlsValidation struct {
	// VirtualServiceClientPolicyTlsValidationSubjectAlternativeNames: optional
	SubjectAlternativeNames *VirtualServiceClientPolicyTlsValidationSubjectAlternativeNames `hcl:"subject_alternative_names,block"`
	// VirtualServiceClientPolicyTlsValidationTrust: required
	Trust *VirtualServiceClientPolicyTlsValidationTrust `hcl:"trust,block" validate:"required"`
}

type VirtualServiceClientPolicyTlsValidationSubjectAlternativeNames struct {
	// VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch: required
	Match *VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch `hcl:"match,block" validate:"required"`
}

type VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch struct {
	// Exact: set of string, required
	Exact terra.SetValue[terra.StringValue] `hcl:"exact,attr" validate:"required"`
}

type VirtualServiceClientPolicyTlsValidationTrust struct {
	// VirtualServiceClientPolicyTlsValidationTrustAcm: optional
	Acm *VirtualServiceClientPolicyTlsValidationTrustAcm `hcl:"acm,block"`
	// VirtualServiceClientPolicyTlsValidationTrustFile: optional
	File *VirtualServiceClientPolicyTlsValidationTrustFile `hcl:"file,block"`
	// VirtualServiceClientPolicyTlsValidationTrustSds: optional
	Sds *VirtualServiceClientPolicyTlsValidationTrustSds `hcl:"sds,block"`
}

type VirtualServiceClientPolicyTlsValidationTrustAcm struct {
	// CertificateAuthorityArns: set of string, required
	CertificateAuthorityArns terra.SetValue[terra.StringValue] `hcl:"certificate_authority_arns,attr" validate:"required"`
}

type VirtualServiceClientPolicyTlsValidationTrustFile struct {
	// CertificateChain: string, required
	CertificateChain terra.StringValue `hcl:"certificate_chain,attr" validate:"required"`
}

type VirtualServiceClientPolicyTlsValidationTrustSds struct {
	// SecretName: string, required
	SecretName terra.StringValue `hcl:"secret_name,attr" validate:"required"`
}

type BackendDefaults struct {
	// BackendDefaultsClientPolicy: optional
	ClientPolicy *BackendDefaultsClientPolicy `hcl:"client_policy,block"`
}

type BackendDefaultsClientPolicy struct {
	// BackendDefaultsClientPolicyTls: optional
	Tls *BackendDefaultsClientPolicyTls `hcl:"tls,block"`
}

type BackendDefaultsClientPolicyTls struct {
	// Enforce: bool, optional
	Enforce terra.BoolValue `hcl:"enforce,attr"`
	// Ports: set of number, optional
	Ports terra.SetValue[terra.NumberValue] `hcl:"ports,attr"`
	// BackendDefaultsClientPolicyTlsCertificate: optional
	Certificate *BackendDefaultsClientPolicyTlsCertificate `hcl:"certificate,block"`
	// BackendDefaultsClientPolicyTlsValidation: required
	Validation *BackendDefaultsClientPolicyTlsValidation `hcl:"validation,block" validate:"required"`
}

type BackendDefaultsClientPolicyTlsCertificate struct {
	// BackendDefaultsClientPolicyTlsCertificateFile: optional
	File *BackendDefaultsClientPolicyTlsCertificateFile `hcl:"file,block"`
	// BackendDefaultsClientPolicyTlsCertificateSds: optional
	Sds *BackendDefaultsClientPolicyTlsCertificateSds `hcl:"sds,block"`
}

type BackendDefaultsClientPolicyTlsCertificateFile struct {
	// CertificateChain: string, required
	CertificateChain terra.StringValue `hcl:"certificate_chain,attr" validate:"required"`
	// PrivateKey: string, required
	PrivateKey terra.StringValue `hcl:"private_key,attr" validate:"required"`
}

type BackendDefaultsClientPolicyTlsCertificateSds struct {
	// SecretName: string, required
	SecretName terra.StringValue `hcl:"secret_name,attr" validate:"required"`
}

type BackendDefaultsClientPolicyTlsValidation struct {
	// BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames: optional
	SubjectAlternativeNames *BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames `hcl:"subject_alternative_names,block"`
	// BackendDefaultsClientPolicyTlsValidationTrust: required
	Trust *BackendDefaultsClientPolicyTlsValidationTrust `hcl:"trust,block" validate:"required"`
}

type BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames struct {
	// BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch: required
	Match *BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch `hcl:"match,block" validate:"required"`
}

type BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch struct {
	// Exact: set of string, required
	Exact terra.SetValue[terra.StringValue] `hcl:"exact,attr" validate:"required"`
}

type BackendDefaultsClientPolicyTlsValidationTrust struct {
	// BackendDefaultsClientPolicyTlsValidationTrustAcm: optional
	Acm *BackendDefaultsClientPolicyTlsValidationTrustAcm `hcl:"acm,block"`
	// BackendDefaultsClientPolicyTlsValidationTrustFile: optional
	File *BackendDefaultsClientPolicyTlsValidationTrustFile `hcl:"file,block"`
	// BackendDefaultsClientPolicyTlsValidationTrustSds: optional
	Sds *BackendDefaultsClientPolicyTlsValidationTrustSds `hcl:"sds,block"`
}

type BackendDefaultsClientPolicyTlsValidationTrustAcm struct {
	// CertificateAuthorityArns: set of string, required
	CertificateAuthorityArns terra.SetValue[terra.StringValue] `hcl:"certificate_authority_arns,attr" validate:"required"`
}

type BackendDefaultsClientPolicyTlsValidationTrustFile struct {
	// CertificateChain: string, required
	CertificateChain terra.StringValue `hcl:"certificate_chain,attr" validate:"required"`
}

type BackendDefaultsClientPolicyTlsValidationTrustSds struct {
	// SecretName: string, required
	SecretName terra.StringValue `hcl:"secret_name,attr" validate:"required"`
}

type Listener struct {
	// ConnectionPool: optional
	ConnectionPool *ConnectionPool `hcl:"connection_pool,block"`
	// HealthCheck: optional
	HealthCheck *HealthCheck `hcl:"health_check,block"`
	// OutlierDetection: optional
	OutlierDetection *OutlierDetection `hcl:"outlier_detection,block"`
	// PortMapping: required
	PortMapping *PortMapping `hcl:"port_mapping,block" validate:"required"`
	// Timeout: optional
	Timeout *Timeout `hcl:"timeout,block"`
	// ListenerTls: optional
	Tls *ListenerTls `hcl:"tls,block"`
}

type ConnectionPool struct {
	// ConnectionPoolGrpc: optional
	Grpc *ConnectionPoolGrpc `hcl:"grpc,block"`
	// ConnectionPoolHttp: min=0
	Http []ConnectionPoolHttp `hcl:"http,block" validate:"min=0"`
	// ConnectionPoolHttp2: min=0
	Http2 []ConnectionPoolHttp2 `hcl:"http2,block" validate:"min=0"`
	// ConnectionPoolTcp: min=0
	Tcp []ConnectionPoolTcp `hcl:"tcp,block" validate:"min=0"`
}

type ConnectionPoolGrpc struct {
	// MaxRequests: number, required
	MaxRequests terra.NumberValue `hcl:"max_requests,attr" validate:"required"`
}

type ConnectionPoolHttp struct {
	// MaxConnections: number, required
	MaxConnections terra.NumberValue `hcl:"max_connections,attr" validate:"required"`
	// MaxPendingRequests: number, optional
	MaxPendingRequests terra.NumberValue `hcl:"max_pending_requests,attr"`
}

type ConnectionPoolHttp2 struct {
	// MaxRequests: number, required
	MaxRequests terra.NumberValue `hcl:"max_requests,attr" validate:"required"`
}

type ConnectionPoolTcp struct {
	// MaxConnections: number, required
	MaxConnections terra.NumberValue `hcl:"max_connections,attr" validate:"required"`
}

type HealthCheck struct {
	// HealthyThreshold: number, required
	HealthyThreshold terra.NumberValue `hcl:"healthy_threshold,attr" validate:"required"`
	// IntervalMillis: number, required
	IntervalMillis terra.NumberValue `hcl:"interval_millis,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// TimeoutMillis: number, required
	TimeoutMillis terra.NumberValue `hcl:"timeout_millis,attr" validate:"required"`
	// UnhealthyThreshold: number, required
	UnhealthyThreshold terra.NumberValue `hcl:"unhealthy_threshold,attr" validate:"required"`
}

type OutlierDetection struct {
	// MaxEjectionPercent: number, required
	MaxEjectionPercent terra.NumberValue `hcl:"max_ejection_percent,attr" validate:"required"`
	// MaxServerErrors: number, required
	MaxServerErrors terra.NumberValue `hcl:"max_server_errors,attr" validate:"required"`
	// BaseEjectionDuration: required
	BaseEjectionDuration *BaseEjectionDuration `hcl:"base_ejection_duration,block" validate:"required"`
	// Interval: required
	Interval *Interval `hcl:"interval,block" validate:"required"`
}

type BaseEjectionDuration struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type Interval struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type PortMapping struct {
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
}

type Timeout struct {
	// TimeoutGrpc: optional
	Grpc *TimeoutGrpc `hcl:"grpc,block"`
	// TimeoutHttp: optional
	Http *TimeoutHttp `hcl:"http,block"`
	// TimeoutHttp2: optional
	Http2 *TimeoutHttp2 `hcl:"http2,block"`
	// TimeoutTcp: optional
	Tcp *TimeoutTcp `hcl:"tcp,block"`
}

type TimeoutGrpc struct {
	// GrpcIdle: optional
	Idle *GrpcIdle `hcl:"idle,block"`
	// GrpcPerRequest: optional
	PerRequest *GrpcPerRequest `hcl:"per_request,block"`
}

type GrpcIdle struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type GrpcPerRequest struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type TimeoutHttp struct {
	// HttpIdle: optional
	Idle *HttpIdle `hcl:"idle,block"`
	// HttpPerRequest: optional
	PerRequest *HttpPerRequest `hcl:"per_request,block"`
}

type HttpIdle struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type HttpPerRequest struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type TimeoutHttp2 struct {
	// Http2Idle: optional
	Idle *Http2Idle `hcl:"idle,block"`
	// Http2PerRequest: optional
	PerRequest *Http2PerRequest `hcl:"per_request,block"`
}

type Http2Idle struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type Http2PerRequest struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type TimeoutTcp struct {
	// TcpIdle: optional
	Idle *TcpIdle `hcl:"idle,block"`
}

type TcpIdle struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type ListenerTls struct {
	// Mode: string, required
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
	// ListenerTlsCertificate: required
	Certificate *ListenerTlsCertificate `hcl:"certificate,block" validate:"required"`
	// ListenerTlsValidation: optional
	Validation *ListenerTlsValidation `hcl:"validation,block"`
}

type ListenerTlsCertificate struct {
	// CertificateAcm: optional
	Acm *CertificateAcm `hcl:"acm,block"`
	// ListenerTlsCertificateFile: optional
	File *ListenerTlsCertificateFile `hcl:"file,block"`
	// ListenerTlsCertificateSds: optional
	Sds *ListenerTlsCertificateSds `hcl:"sds,block"`
}

type CertificateAcm struct {
	// CertificateArn: string, required
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr" validate:"required"`
}

type ListenerTlsCertificateFile struct {
	// CertificateChain: string, required
	CertificateChain terra.StringValue `hcl:"certificate_chain,attr" validate:"required"`
	// PrivateKey: string, required
	PrivateKey terra.StringValue `hcl:"private_key,attr" validate:"required"`
}

type ListenerTlsCertificateSds struct {
	// SecretName: string, required
	SecretName terra.StringValue `hcl:"secret_name,attr" validate:"required"`
}

type ListenerTlsValidation struct {
	// ListenerTlsValidationSubjectAlternativeNames: optional
	SubjectAlternativeNames *ListenerTlsValidationSubjectAlternativeNames `hcl:"subject_alternative_names,block"`
	// ListenerTlsValidationTrust: required
	Trust *ListenerTlsValidationTrust `hcl:"trust,block" validate:"required"`
}

type ListenerTlsValidationSubjectAlternativeNames struct {
	// ListenerTlsValidationSubjectAlternativeNamesMatch: required
	Match *ListenerTlsValidationSubjectAlternativeNamesMatch `hcl:"match,block" validate:"required"`
}

type ListenerTlsValidationSubjectAlternativeNamesMatch struct {
	// Exact: set of string, required
	Exact terra.SetValue[terra.StringValue] `hcl:"exact,attr" validate:"required"`
}

type ListenerTlsValidationTrust struct {
	// ListenerTlsValidationTrustFile: optional
	File *ListenerTlsValidationTrustFile `hcl:"file,block"`
	// ListenerTlsValidationTrustSds: optional
	Sds *ListenerTlsValidationTrustSds `hcl:"sds,block"`
}

type ListenerTlsValidationTrustFile struct {
	// CertificateChain: string, required
	CertificateChain terra.StringValue `hcl:"certificate_chain,attr" validate:"required"`
}

type ListenerTlsValidationTrustSds struct {
	// SecretName: string, required
	SecretName terra.StringValue `hcl:"secret_name,attr" validate:"required"`
}

type Logging struct {
	// AccessLog: optional
	AccessLog *AccessLog `hcl:"access_log,block"`
}

type AccessLog struct {
	// AccessLogFile: optional
	File *AccessLogFile `hcl:"file,block"`
}

type AccessLogFile struct {
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Format: optional
	Format *Format `hcl:"format,block"`
}

type Format struct {
	// Text: string, optional
	Text terra.StringValue `hcl:"text,attr"`
	// Json: min=0
	Json []Json `hcl:"json,block" validate:"min=0"`
}

type Json struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ServiceDiscovery struct {
	// AwsCloudMap: optional
	AwsCloudMap *AwsCloudMap `hcl:"aws_cloud_map,block"`
	// Dns: optional
	Dns *Dns `hcl:"dns,block"`
}

type AwsCloudMap struct {
	// Attributes: map of string, optional
	Attributes terra.MapValue[terra.StringValue] `hcl:"attributes,attr"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
}

type Dns struct {
	// Hostname: string, required
	Hostname terra.StringValue `hcl:"hostname,attr" validate:"required"`
}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) Backend() terra.SetValue[BackendAttributes] {
	return terra.ReferenceAsSet[BackendAttributes](s.ref.Append("backend"))
}

func (s SpecAttributes) BackendDefaults() terra.ListValue[BackendDefaultsAttributes] {
	return terra.ReferenceAsList[BackendDefaultsAttributes](s.ref.Append("backend_defaults"))
}

func (s SpecAttributes) Listener() terra.ListValue[ListenerAttributes] {
	return terra.ReferenceAsList[ListenerAttributes](s.ref.Append("listener"))
}

func (s SpecAttributes) Logging() terra.ListValue[LoggingAttributes] {
	return terra.ReferenceAsList[LoggingAttributes](s.ref.Append("logging"))
}

func (s SpecAttributes) ServiceDiscovery() terra.ListValue[ServiceDiscoveryAttributes] {
	return terra.ReferenceAsList[ServiceDiscoveryAttributes](s.ref.Append("service_discovery"))
}

type BackendAttributes struct {
	ref terra.Reference
}

func (b BackendAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b BackendAttributes) InternalWithRef(ref terra.Reference) BackendAttributes {
	return BackendAttributes{ref: ref}
}

func (b BackendAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b BackendAttributes) VirtualService() terra.ListValue[VirtualServiceAttributes] {
	return terra.ReferenceAsList[VirtualServiceAttributes](b.ref.Append("virtual_service"))
}

type VirtualServiceAttributes struct {
	ref terra.Reference
}

func (vs VirtualServiceAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs VirtualServiceAttributes) InternalWithRef(ref terra.Reference) VirtualServiceAttributes {
	return VirtualServiceAttributes{ref: ref}
}

func (vs VirtualServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs VirtualServiceAttributes) VirtualServiceName() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("virtual_service_name"))
}

func (vs VirtualServiceAttributes) ClientPolicy() terra.ListValue[VirtualServiceClientPolicyAttributes] {
	return terra.ReferenceAsList[VirtualServiceClientPolicyAttributes](vs.ref.Append("client_policy"))
}

type VirtualServiceClientPolicyAttributes struct {
	ref terra.Reference
}

func (cp VirtualServiceClientPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp VirtualServiceClientPolicyAttributes) InternalWithRef(ref terra.Reference) VirtualServiceClientPolicyAttributes {
	return VirtualServiceClientPolicyAttributes{ref: ref}
}

func (cp VirtualServiceClientPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp VirtualServiceClientPolicyAttributes) Tls() terra.ListValue[VirtualServiceClientPolicyTlsAttributes] {
	return terra.ReferenceAsList[VirtualServiceClientPolicyTlsAttributes](cp.ref.Append("tls"))
}

type VirtualServiceClientPolicyTlsAttributes struct {
	ref terra.Reference
}

func (t VirtualServiceClientPolicyTlsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t VirtualServiceClientPolicyTlsAttributes) InternalWithRef(ref terra.Reference) VirtualServiceClientPolicyTlsAttributes {
	return VirtualServiceClientPolicyTlsAttributes{ref: ref}
}

func (t VirtualServiceClientPolicyTlsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t VirtualServiceClientPolicyTlsAttributes) Enforce() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("enforce"))
}

func (t VirtualServiceClientPolicyTlsAttributes) Ports() terra.SetValue[terra.NumberValue] {
	return terra.ReferenceAsSet[terra.NumberValue](t.ref.Append("ports"))
}

func (t VirtualServiceClientPolicyTlsAttributes) Certificate() terra.ListValue[VirtualServiceClientPolicyTlsCertificateAttributes] {
	return terra.ReferenceAsList[VirtualServiceClientPolicyTlsCertificateAttributes](t.ref.Append("certificate"))
}

func (t VirtualServiceClientPolicyTlsAttributes) Validation() terra.ListValue[VirtualServiceClientPolicyTlsValidationAttributes] {
	return terra.ReferenceAsList[VirtualServiceClientPolicyTlsValidationAttributes](t.ref.Append("validation"))
}

type VirtualServiceClientPolicyTlsCertificateAttributes struct {
	ref terra.Reference
}

func (c VirtualServiceClientPolicyTlsCertificateAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c VirtualServiceClientPolicyTlsCertificateAttributes) InternalWithRef(ref terra.Reference) VirtualServiceClientPolicyTlsCertificateAttributes {
	return VirtualServiceClientPolicyTlsCertificateAttributes{ref: ref}
}

func (c VirtualServiceClientPolicyTlsCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c VirtualServiceClientPolicyTlsCertificateAttributes) File() terra.ListValue[VirtualServiceClientPolicyTlsCertificateFileAttributes] {
	return terra.ReferenceAsList[VirtualServiceClientPolicyTlsCertificateFileAttributes](c.ref.Append("file"))
}

func (c VirtualServiceClientPolicyTlsCertificateAttributes) Sds() terra.ListValue[VirtualServiceClientPolicyTlsCertificateSdsAttributes] {
	return terra.ReferenceAsList[VirtualServiceClientPolicyTlsCertificateSdsAttributes](c.ref.Append("sds"))
}

type VirtualServiceClientPolicyTlsCertificateFileAttributes struct {
	ref terra.Reference
}

func (f VirtualServiceClientPolicyTlsCertificateFileAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f VirtualServiceClientPolicyTlsCertificateFileAttributes) InternalWithRef(ref terra.Reference) VirtualServiceClientPolicyTlsCertificateFileAttributes {
	return VirtualServiceClientPolicyTlsCertificateFileAttributes{ref: ref}
}

func (f VirtualServiceClientPolicyTlsCertificateFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f VirtualServiceClientPolicyTlsCertificateFileAttributes) CertificateChain() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("certificate_chain"))
}

func (f VirtualServiceClientPolicyTlsCertificateFileAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("private_key"))
}

type VirtualServiceClientPolicyTlsCertificateSdsAttributes struct {
	ref terra.Reference
}

func (s VirtualServiceClientPolicyTlsCertificateSdsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s VirtualServiceClientPolicyTlsCertificateSdsAttributes) InternalWithRef(ref terra.Reference) VirtualServiceClientPolicyTlsCertificateSdsAttributes {
	return VirtualServiceClientPolicyTlsCertificateSdsAttributes{ref: ref}
}

func (s VirtualServiceClientPolicyTlsCertificateSdsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s VirtualServiceClientPolicyTlsCertificateSdsAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret_name"))
}

type VirtualServiceClientPolicyTlsValidationAttributes struct {
	ref terra.Reference
}

func (v VirtualServiceClientPolicyTlsValidationAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VirtualServiceClientPolicyTlsValidationAttributes) InternalWithRef(ref terra.Reference) VirtualServiceClientPolicyTlsValidationAttributes {
	return VirtualServiceClientPolicyTlsValidationAttributes{ref: ref}
}

func (v VirtualServiceClientPolicyTlsValidationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VirtualServiceClientPolicyTlsValidationAttributes) SubjectAlternativeNames() terra.ListValue[VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesAttributes] {
	return terra.ReferenceAsList[VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesAttributes](v.ref.Append("subject_alternative_names"))
}

func (v VirtualServiceClientPolicyTlsValidationAttributes) Trust() terra.ListValue[VirtualServiceClientPolicyTlsValidationTrustAttributes] {
	return terra.ReferenceAsList[VirtualServiceClientPolicyTlsValidationTrustAttributes](v.ref.Append("trust"))
}

type VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesAttributes struct {
	ref terra.Reference
}

func (san VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesAttributes) InternalRef() (terra.Reference, error) {
	return san.ref, nil
}

func (san VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesAttributes) InternalWithRef(ref terra.Reference) VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesAttributes {
	return VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesAttributes{ref: ref}
}

func (san VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return san.ref.InternalTokens()
}

func (san VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesAttributes) Match() terra.ListValue[VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes] {
	return terra.ReferenceAsList[VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes](san.ref.Append("match"))
}

type VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes struct {
	ref terra.Reference
}

func (m VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes) InternalWithRef(ref terra.Reference) VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes {
	return VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes{ref: ref}
}

func (m VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes) Exact() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](m.ref.Append("exact"))
}

type VirtualServiceClientPolicyTlsValidationTrustAttributes struct {
	ref terra.Reference
}

func (t VirtualServiceClientPolicyTlsValidationTrustAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t VirtualServiceClientPolicyTlsValidationTrustAttributes) InternalWithRef(ref terra.Reference) VirtualServiceClientPolicyTlsValidationTrustAttributes {
	return VirtualServiceClientPolicyTlsValidationTrustAttributes{ref: ref}
}

func (t VirtualServiceClientPolicyTlsValidationTrustAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t VirtualServiceClientPolicyTlsValidationTrustAttributes) Acm() terra.ListValue[VirtualServiceClientPolicyTlsValidationTrustAcmAttributes] {
	return terra.ReferenceAsList[VirtualServiceClientPolicyTlsValidationTrustAcmAttributes](t.ref.Append("acm"))
}

func (t VirtualServiceClientPolicyTlsValidationTrustAttributes) File() terra.ListValue[VirtualServiceClientPolicyTlsValidationTrustFileAttributes] {
	return terra.ReferenceAsList[VirtualServiceClientPolicyTlsValidationTrustFileAttributes](t.ref.Append("file"))
}

func (t VirtualServiceClientPolicyTlsValidationTrustAttributes) Sds() terra.ListValue[VirtualServiceClientPolicyTlsValidationTrustSdsAttributes] {
	return terra.ReferenceAsList[VirtualServiceClientPolicyTlsValidationTrustSdsAttributes](t.ref.Append("sds"))
}

type VirtualServiceClientPolicyTlsValidationTrustAcmAttributes struct {
	ref terra.Reference
}

func (a VirtualServiceClientPolicyTlsValidationTrustAcmAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a VirtualServiceClientPolicyTlsValidationTrustAcmAttributes) InternalWithRef(ref terra.Reference) VirtualServiceClientPolicyTlsValidationTrustAcmAttributes {
	return VirtualServiceClientPolicyTlsValidationTrustAcmAttributes{ref: ref}
}

func (a VirtualServiceClientPolicyTlsValidationTrustAcmAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a VirtualServiceClientPolicyTlsValidationTrustAcmAttributes) CertificateAuthorityArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](a.ref.Append("certificate_authority_arns"))
}

type VirtualServiceClientPolicyTlsValidationTrustFileAttributes struct {
	ref terra.Reference
}

func (f VirtualServiceClientPolicyTlsValidationTrustFileAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f VirtualServiceClientPolicyTlsValidationTrustFileAttributes) InternalWithRef(ref terra.Reference) VirtualServiceClientPolicyTlsValidationTrustFileAttributes {
	return VirtualServiceClientPolicyTlsValidationTrustFileAttributes{ref: ref}
}

func (f VirtualServiceClientPolicyTlsValidationTrustFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f VirtualServiceClientPolicyTlsValidationTrustFileAttributes) CertificateChain() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("certificate_chain"))
}

type VirtualServiceClientPolicyTlsValidationTrustSdsAttributes struct {
	ref terra.Reference
}

func (s VirtualServiceClientPolicyTlsValidationTrustSdsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s VirtualServiceClientPolicyTlsValidationTrustSdsAttributes) InternalWithRef(ref terra.Reference) VirtualServiceClientPolicyTlsValidationTrustSdsAttributes {
	return VirtualServiceClientPolicyTlsValidationTrustSdsAttributes{ref: ref}
}

func (s VirtualServiceClientPolicyTlsValidationTrustSdsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s VirtualServiceClientPolicyTlsValidationTrustSdsAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret_name"))
}

type BackendDefaultsAttributes struct {
	ref terra.Reference
}

func (bd BackendDefaultsAttributes) InternalRef() (terra.Reference, error) {
	return bd.ref, nil
}

func (bd BackendDefaultsAttributes) InternalWithRef(ref terra.Reference) BackendDefaultsAttributes {
	return BackendDefaultsAttributes{ref: ref}
}

func (bd BackendDefaultsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bd.ref.InternalTokens()
}

func (bd BackendDefaultsAttributes) ClientPolicy() terra.ListValue[BackendDefaultsClientPolicyAttributes] {
	return terra.ReferenceAsList[BackendDefaultsClientPolicyAttributes](bd.ref.Append("client_policy"))
}

type BackendDefaultsClientPolicyAttributes struct {
	ref terra.Reference
}

func (cp BackendDefaultsClientPolicyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp BackendDefaultsClientPolicyAttributes) InternalWithRef(ref terra.Reference) BackendDefaultsClientPolicyAttributes {
	return BackendDefaultsClientPolicyAttributes{ref: ref}
}

func (cp BackendDefaultsClientPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp BackendDefaultsClientPolicyAttributes) Tls() terra.ListValue[BackendDefaultsClientPolicyTlsAttributes] {
	return terra.ReferenceAsList[BackendDefaultsClientPolicyTlsAttributes](cp.ref.Append("tls"))
}

type BackendDefaultsClientPolicyTlsAttributes struct {
	ref terra.Reference
}

func (t BackendDefaultsClientPolicyTlsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t BackendDefaultsClientPolicyTlsAttributes) InternalWithRef(ref terra.Reference) BackendDefaultsClientPolicyTlsAttributes {
	return BackendDefaultsClientPolicyTlsAttributes{ref: ref}
}

func (t BackendDefaultsClientPolicyTlsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t BackendDefaultsClientPolicyTlsAttributes) Enforce() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("enforce"))
}

func (t BackendDefaultsClientPolicyTlsAttributes) Ports() terra.SetValue[terra.NumberValue] {
	return terra.ReferenceAsSet[terra.NumberValue](t.ref.Append("ports"))
}

func (t BackendDefaultsClientPolicyTlsAttributes) Certificate() terra.ListValue[BackendDefaultsClientPolicyTlsCertificateAttributes] {
	return terra.ReferenceAsList[BackendDefaultsClientPolicyTlsCertificateAttributes](t.ref.Append("certificate"))
}

func (t BackendDefaultsClientPolicyTlsAttributes) Validation() terra.ListValue[BackendDefaultsClientPolicyTlsValidationAttributes] {
	return terra.ReferenceAsList[BackendDefaultsClientPolicyTlsValidationAttributes](t.ref.Append("validation"))
}

type BackendDefaultsClientPolicyTlsCertificateAttributes struct {
	ref terra.Reference
}

func (c BackendDefaultsClientPolicyTlsCertificateAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c BackendDefaultsClientPolicyTlsCertificateAttributes) InternalWithRef(ref terra.Reference) BackendDefaultsClientPolicyTlsCertificateAttributes {
	return BackendDefaultsClientPolicyTlsCertificateAttributes{ref: ref}
}

func (c BackendDefaultsClientPolicyTlsCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c BackendDefaultsClientPolicyTlsCertificateAttributes) File() terra.ListValue[BackendDefaultsClientPolicyTlsCertificateFileAttributes] {
	return terra.ReferenceAsList[BackendDefaultsClientPolicyTlsCertificateFileAttributes](c.ref.Append("file"))
}

func (c BackendDefaultsClientPolicyTlsCertificateAttributes) Sds() terra.ListValue[BackendDefaultsClientPolicyTlsCertificateSdsAttributes] {
	return terra.ReferenceAsList[BackendDefaultsClientPolicyTlsCertificateSdsAttributes](c.ref.Append("sds"))
}

type BackendDefaultsClientPolicyTlsCertificateFileAttributes struct {
	ref terra.Reference
}

func (f BackendDefaultsClientPolicyTlsCertificateFileAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f BackendDefaultsClientPolicyTlsCertificateFileAttributes) InternalWithRef(ref terra.Reference) BackendDefaultsClientPolicyTlsCertificateFileAttributes {
	return BackendDefaultsClientPolicyTlsCertificateFileAttributes{ref: ref}
}

func (f BackendDefaultsClientPolicyTlsCertificateFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f BackendDefaultsClientPolicyTlsCertificateFileAttributes) CertificateChain() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("certificate_chain"))
}

func (f BackendDefaultsClientPolicyTlsCertificateFileAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("private_key"))
}

type BackendDefaultsClientPolicyTlsCertificateSdsAttributes struct {
	ref terra.Reference
}

func (s BackendDefaultsClientPolicyTlsCertificateSdsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s BackendDefaultsClientPolicyTlsCertificateSdsAttributes) InternalWithRef(ref terra.Reference) BackendDefaultsClientPolicyTlsCertificateSdsAttributes {
	return BackendDefaultsClientPolicyTlsCertificateSdsAttributes{ref: ref}
}

func (s BackendDefaultsClientPolicyTlsCertificateSdsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s BackendDefaultsClientPolicyTlsCertificateSdsAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret_name"))
}

type BackendDefaultsClientPolicyTlsValidationAttributes struct {
	ref terra.Reference
}

func (v BackendDefaultsClientPolicyTlsValidationAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v BackendDefaultsClientPolicyTlsValidationAttributes) InternalWithRef(ref terra.Reference) BackendDefaultsClientPolicyTlsValidationAttributes {
	return BackendDefaultsClientPolicyTlsValidationAttributes{ref: ref}
}

func (v BackendDefaultsClientPolicyTlsValidationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v BackendDefaultsClientPolicyTlsValidationAttributes) SubjectAlternativeNames() terra.ListValue[BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesAttributes] {
	return terra.ReferenceAsList[BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesAttributes](v.ref.Append("subject_alternative_names"))
}

func (v BackendDefaultsClientPolicyTlsValidationAttributes) Trust() terra.ListValue[BackendDefaultsClientPolicyTlsValidationTrustAttributes] {
	return terra.ReferenceAsList[BackendDefaultsClientPolicyTlsValidationTrustAttributes](v.ref.Append("trust"))
}

type BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesAttributes struct {
	ref terra.Reference
}

func (san BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesAttributes) InternalRef() (terra.Reference, error) {
	return san.ref, nil
}

func (san BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesAttributes) InternalWithRef(ref terra.Reference) BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesAttributes {
	return BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesAttributes{ref: ref}
}

func (san BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return san.ref.InternalTokens()
}

func (san BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesAttributes) Match() terra.ListValue[BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes] {
	return terra.ReferenceAsList[BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes](san.ref.Append("match"))
}

type BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes struct {
	ref terra.Reference
}

func (m BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes) InternalWithRef(ref terra.Reference) BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes {
	return BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes{ref: ref}
}

func (m BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchAttributes) Exact() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](m.ref.Append("exact"))
}

type BackendDefaultsClientPolicyTlsValidationTrustAttributes struct {
	ref terra.Reference
}

func (t BackendDefaultsClientPolicyTlsValidationTrustAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t BackendDefaultsClientPolicyTlsValidationTrustAttributes) InternalWithRef(ref terra.Reference) BackendDefaultsClientPolicyTlsValidationTrustAttributes {
	return BackendDefaultsClientPolicyTlsValidationTrustAttributes{ref: ref}
}

func (t BackendDefaultsClientPolicyTlsValidationTrustAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t BackendDefaultsClientPolicyTlsValidationTrustAttributes) Acm() terra.ListValue[BackendDefaultsClientPolicyTlsValidationTrustAcmAttributes] {
	return terra.ReferenceAsList[BackendDefaultsClientPolicyTlsValidationTrustAcmAttributes](t.ref.Append("acm"))
}

func (t BackendDefaultsClientPolicyTlsValidationTrustAttributes) File() terra.ListValue[BackendDefaultsClientPolicyTlsValidationTrustFileAttributes] {
	return terra.ReferenceAsList[BackendDefaultsClientPolicyTlsValidationTrustFileAttributes](t.ref.Append("file"))
}

func (t BackendDefaultsClientPolicyTlsValidationTrustAttributes) Sds() terra.ListValue[BackendDefaultsClientPolicyTlsValidationTrustSdsAttributes] {
	return terra.ReferenceAsList[BackendDefaultsClientPolicyTlsValidationTrustSdsAttributes](t.ref.Append("sds"))
}

type BackendDefaultsClientPolicyTlsValidationTrustAcmAttributes struct {
	ref terra.Reference
}

func (a BackendDefaultsClientPolicyTlsValidationTrustAcmAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a BackendDefaultsClientPolicyTlsValidationTrustAcmAttributes) InternalWithRef(ref terra.Reference) BackendDefaultsClientPolicyTlsValidationTrustAcmAttributes {
	return BackendDefaultsClientPolicyTlsValidationTrustAcmAttributes{ref: ref}
}

func (a BackendDefaultsClientPolicyTlsValidationTrustAcmAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a BackendDefaultsClientPolicyTlsValidationTrustAcmAttributes) CertificateAuthorityArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](a.ref.Append("certificate_authority_arns"))
}

type BackendDefaultsClientPolicyTlsValidationTrustFileAttributes struct {
	ref terra.Reference
}

func (f BackendDefaultsClientPolicyTlsValidationTrustFileAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f BackendDefaultsClientPolicyTlsValidationTrustFileAttributes) InternalWithRef(ref terra.Reference) BackendDefaultsClientPolicyTlsValidationTrustFileAttributes {
	return BackendDefaultsClientPolicyTlsValidationTrustFileAttributes{ref: ref}
}

func (f BackendDefaultsClientPolicyTlsValidationTrustFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f BackendDefaultsClientPolicyTlsValidationTrustFileAttributes) CertificateChain() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("certificate_chain"))
}

type BackendDefaultsClientPolicyTlsValidationTrustSdsAttributes struct {
	ref terra.Reference
}

func (s BackendDefaultsClientPolicyTlsValidationTrustSdsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s BackendDefaultsClientPolicyTlsValidationTrustSdsAttributes) InternalWithRef(ref terra.Reference) BackendDefaultsClientPolicyTlsValidationTrustSdsAttributes {
	return BackendDefaultsClientPolicyTlsValidationTrustSdsAttributes{ref: ref}
}

func (s BackendDefaultsClientPolicyTlsValidationTrustSdsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s BackendDefaultsClientPolicyTlsValidationTrustSdsAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret_name"))
}

type ListenerAttributes struct {
	ref terra.Reference
}

func (l ListenerAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l ListenerAttributes) InternalWithRef(ref terra.Reference) ListenerAttributes {
	return ListenerAttributes{ref: ref}
}

func (l ListenerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l ListenerAttributes) ConnectionPool() terra.ListValue[ConnectionPoolAttributes] {
	return terra.ReferenceAsList[ConnectionPoolAttributes](l.ref.Append("connection_pool"))
}

func (l ListenerAttributes) HealthCheck() terra.ListValue[HealthCheckAttributes] {
	return terra.ReferenceAsList[HealthCheckAttributes](l.ref.Append("health_check"))
}

func (l ListenerAttributes) OutlierDetection() terra.ListValue[OutlierDetectionAttributes] {
	return terra.ReferenceAsList[OutlierDetectionAttributes](l.ref.Append("outlier_detection"))
}

func (l ListenerAttributes) PortMapping() terra.ListValue[PortMappingAttributes] {
	return terra.ReferenceAsList[PortMappingAttributes](l.ref.Append("port_mapping"))
}

func (l ListenerAttributes) Timeout() terra.ListValue[TimeoutAttributes] {
	return terra.ReferenceAsList[TimeoutAttributes](l.ref.Append("timeout"))
}

func (l ListenerAttributes) Tls() terra.ListValue[ListenerTlsAttributes] {
	return terra.ReferenceAsList[ListenerTlsAttributes](l.ref.Append("tls"))
}

type ConnectionPoolAttributes struct {
	ref terra.Reference
}

func (cp ConnectionPoolAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp ConnectionPoolAttributes) InternalWithRef(ref terra.Reference) ConnectionPoolAttributes {
	return ConnectionPoolAttributes{ref: ref}
}

func (cp ConnectionPoolAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp ConnectionPoolAttributes) Grpc() terra.ListValue[ConnectionPoolGrpcAttributes] {
	return terra.ReferenceAsList[ConnectionPoolGrpcAttributes](cp.ref.Append("grpc"))
}

func (cp ConnectionPoolAttributes) Http() terra.ListValue[ConnectionPoolHttpAttributes] {
	return terra.ReferenceAsList[ConnectionPoolHttpAttributes](cp.ref.Append("http"))
}

func (cp ConnectionPoolAttributes) Http2() terra.ListValue[ConnectionPoolHttp2Attributes] {
	return terra.ReferenceAsList[ConnectionPoolHttp2Attributes](cp.ref.Append("http2"))
}

func (cp ConnectionPoolAttributes) Tcp() terra.ListValue[ConnectionPoolTcpAttributes] {
	return terra.ReferenceAsList[ConnectionPoolTcpAttributes](cp.ref.Append("tcp"))
}

type ConnectionPoolGrpcAttributes struct {
	ref terra.Reference
}

func (g ConnectionPoolGrpcAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g ConnectionPoolGrpcAttributes) InternalWithRef(ref terra.Reference) ConnectionPoolGrpcAttributes {
	return ConnectionPoolGrpcAttributes{ref: ref}
}

func (g ConnectionPoolGrpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g ConnectionPoolGrpcAttributes) MaxRequests() terra.NumberValue {
	return terra.ReferenceAsNumber(g.ref.Append("max_requests"))
}

type ConnectionPoolHttpAttributes struct {
	ref terra.Reference
}

func (h ConnectionPoolHttpAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h ConnectionPoolHttpAttributes) InternalWithRef(ref terra.Reference) ConnectionPoolHttpAttributes {
	return ConnectionPoolHttpAttributes{ref: ref}
}

func (h ConnectionPoolHttpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h ConnectionPoolHttpAttributes) MaxConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(h.ref.Append("max_connections"))
}

func (h ConnectionPoolHttpAttributes) MaxPendingRequests() terra.NumberValue {
	return terra.ReferenceAsNumber(h.ref.Append("max_pending_requests"))
}

type ConnectionPoolHttp2Attributes struct {
	ref terra.Reference
}

func (h ConnectionPoolHttp2Attributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h ConnectionPoolHttp2Attributes) InternalWithRef(ref terra.Reference) ConnectionPoolHttp2Attributes {
	return ConnectionPoolHttp2Attributes{ref: ref}
}

func (h ConnectionPoolHttp2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h ConnectionPoolHttp2Attributes) MaxRequests() terra.NumberValue {
	return terra.ReferenceAsNumber(h.ref.Append("max_requests"))
}

type ConnectionPoolTcpAttributes struct {
	ref terra.Reference
}

func (t ConnectionPoolTcpAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ConnectionPoolTcpAttributes) InternalWithRef(ref terra.Reference) ConnectionPoolTcpAttributes {
	return ConnectionPoolTcpAttributes{ref: ref}
}

func (t ConnectionPoolTcpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ConnectionPoolTcpAttributes) MaxConnections() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("max_connections"))
}

type HealthCheckAttributes struct {
	ref terra.Reference
}

func (hc HealthCheckAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc HealthCheckAttributes) InternalWithRef(ref terra.Reference) HealthCheckAttributes {
	return HealthCheckAttributes{ref: ref}
}

func (hc HealthCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc HealthCheckAttributes) HealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("healthy_threshold"))
}

func (hc HealthCheckAttributes) IntervalMillis() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("interval_millis"))
}

func (hc HealthCheckAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("path"))
}

func (hc HealthCheckAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("port"))
}

func (hc HealthCheckAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("protocol"))
}

func (hc HealthCheckAttributes) TimeoutMillis() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("timeout_millis"))
}

func (hc HealthCheckAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("unhealthy_threshold"))
}

type OutlierDetectionAttributes struct {
	ref terra.Reference
}

func (od OutlierDetectionAttributes) InternalRef() (terra.Reference, error) {
	return od.ref, nil
}

func (od OutlierDetectionAttributes) InternalWithRef(ref terra.Reference) OutlierDetectionAttributes {
	return OutlierDetectionAttributes{ref: ref}
}

func (od OutlierDetectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return od.ref.InternalTokens()
}

func (od OutlierDetectionAttributes) MaxEjectionPercent() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("max_ejection_percent"))
}

func (od OutlierDetectionAttributes) MaxServerErrors() terra.NumberValue {
	return terra.ReferenceAsNumber(od.ref.Append("max_server_errors"))
}

func (od OutlierDetectionAttributes) BaseEjectionDuration() terra.ListValue[BaseEjectionDurationAttributes] {
	return terra.ReferenceAsList[BaseEjectionDurationAttributes](od.ref.Append("base_ejection_duration"))
}

func (od OutlierDetectionAttributes) Interval() terra.ListValue[IntervalAttributes] {
	return terra.ReferenceAsList[IntervalAttributes](od.ref.Append("interval"))
}

type BaseEjectionDurationAttributes struct {
	ref terra.Reference
}

func (bed BaseEjectionDurationAttributes) InternalRef() (terra.Reference, error) {
	return bed.ref, nil
}

func (bed BaseEjectionDurationAttributes) InternalWithRef(ref terra.Reference) BaseEjectionDurationAttributes {
	return BaseEjectionDurationAttributes{ref: ref}
}

func (bed BaseEjectionDurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bed.ref.InternalTokens()
}

func (bed BaseEjectionDurationAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(bed.ref.Append("unit"))
}

func (bed BaseEjectionDurationAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(bed.ref.Append("value"))
}

type IntervalAttributes struct {
	ref terra.Reference
}

func (i IntervalAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i IntervalAttributes) InternalWithRef(ref terra.Reference) IntervalAttributes {
	return IntervalAttributes{ref: ref}
}

func (i IntervalAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i IntervalAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("unit"))
}

func (i IntervalAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type PortMappingAttributes struct {
	ref terra.Reference
}

func (pm PortMappingAttributes) InternalRef() (terra.Reference, error) {
	return pm.ref, nil
}

func (pm PortMappingAttributes) InternalWithRef(ref terra.Reference) PortMappingAttributes {
	return PortMappingAttributes{ref: ref}
}

func (pm PortMappingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pm.ref.InternalTokens()
}

func (pm PortMappingAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(pm.ref.Append("port"))
}

func (pm PortMappingAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("protocol"))
}

type TimeoutAttributes struct {
	ref terra.Reference
}

func (t TimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutAttributes) InternalWithRef(ref terra.Reference) TimeoutAttributes {
	return TimeoutAttributes{ref: ref}
}

func (t TimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutAttributes) Grpc() terra.ListValue[TimeoutGrpcAttributes] {
	return terra.ReferenceAsList[TimeoutGrpcAttributes](t.ref.Append("grpc"))
}

func (t TimeoutAttributes) Http() terra.ListValue[TimeoutHttpAttributes] {
	return terra.ReferenceAsList[TimeoutHttpAttributes](t.ref.Append("http"))
}

func (t TimeoutAttributes) Http2() terra.ListValue[TimeoutHttp2Attributes] {
	return terra.ReferenceAsList[TimeoutHttp2Attributes](t.ref.Append("http2"))
}

func (t TimeoutAttributes) Tcp() terra.ListValue[TimeoutTcpAttributes] {
	return terra.ReferenceAsList[TimeoutTcpAttributes](t.ref.Append("tcp"))
}

type TimeoutGrpcAttributes struct {
	ref terra.Reference
}

func (g TimeoutGrpcAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g TimeoutGrpcAttributes) InternalWithRef(ref terra.Reference) TimeoutGrpcAttributes {
	return TimeoutGrpcAttributes{ref: ref}
}

func (g TimeoutGrpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g TimeoutGrpcAttributes) Idle() terra.ListValue[GrpcIdleAttributes] {
	return terra.ReferenceAsList[GrpcIdleAttributes](g.ref.Append("idle"))
}

func (g TimeoutGrpcAttributes) PerRequest() terra.ListValue[GrpcPerRequestAttributes] {
	return terra.ReferenceAsList[GrpcPerRequestAttributes](g.ref.Append("per_request"))
}

type GrpcIdleAttributes struct {
	ref terra.Reference
}

func (i GrpcIdleAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i GrpcIdleAttributes) InternalWithRef(ref terra.Reference) GrpcIdleAttributes {
	return GrpcIdleAttributes{ref: ref}
}

func (i GrpcIdleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i GrpcIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("unit"))
}

func (i GrpcIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type GrpcPerRequestAttributes struct {
	ref terra.Reference
}

func (pr GrpcPerRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr GrpcPerRequestAttributes) InternalWithRef(ref terra.Reference) GrpcPerRequestAttributes {
	return GrpcPerRequestAttributes{ref: ref}
}

func (pr GrpcPerRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr GrpcPerRequestAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("unit"))
}

func (pr GrpcPerRequestAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("value"))
}

type TimeoutHttpAttributes struct {
	ref terra.Reference
}

func (h TimeoutHttpAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h TimeoutHttpAttributes) InternalWithRef(ref terra.Reference) TimeoutHttpAttributes {
	return TimeoutHttpAttributes{ref: ref}
}

func (h TimeoutHttpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h TimeoutHttpAttributes) Idle() terra.ListValue[HttpIdleAttributes] {
	return terra.ReferenceAsList[HttpIdleAttributes](h.ref.Append("idle"))
}

func (h TimeoutHttpAttributes) PerRequest() terra.ListValue[HttpPerRequestAttributes] {
	return terra.ReferenceAsList[HttpPerRequestAttributes](h.ref.Append("per_request"))
}

type HttpIdleAttributes struct {
	ref terra.Reference
}

func (i HttpIdleAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i HttpIdleAttributes) InternalWithRef(ref terra.Reference) HttpIdleAttributes {
	return HttpIdleAttributes{ref: ref}
}

func (i HttpIdleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i HttpIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("unit"))
}

func (i HttpIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type HttpPerRequestAttributes struct {
	ref terra.Reference
}

func (pr HttpPerRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr HttpPerRequestAttributes) InternalWithRef(ref terra.Reference) HttpPerRequestAttributes {
	return HttpPerRequestAttributes{ref: ref}
}

func (pr HttpPerRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr HttpPerRequestAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("unit"))
}

func (pr HttpPerRequestAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("value"))
}

type TimeoutHttp2Attributes struct {
	ref terra.Reference
}

func (h TimeoutHttp2Attributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h TimeoutHttp2Attributes) InternalWithRef(ref terra.Reference) TimeoutHttp2Attributes {
	return TimeoutHttp2Attributes{ref: ref}
}

func (h TimeoutHttp2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h TimeoutHttp2Attributes) Idle() terra.ListValue[Http2IdleAttributes] {
	return terra.ReferenceAsList[Http2IdleAttributes](h.ref.Append("idle"))
}

func (h TimeoutHttp2Attributes) PerRequest() terra.ListValue[Http2PerRequestAttributes] {
	return terra.ReferenceAsList[Http2PerRequestAttributes](h.ref.Append("per_request"))
}

type Http2IdleAttributes struct {
	ref terra.Reference
}

func (i Http2IdleAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i Http2IdleAttributes) InternalWithRef(ref terra.Reference) Http2IdleAttributes {
	return Http2IdleAttributes{ref: ref}
}

func (i Http2IdleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i Http2IdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("unit"))
}

func (i Http2IdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type Http2PerRequestAttributes struct {
	ref terra.Reference
}

func (pr Http2PerRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr Http2PerRequestAttributes) InternalWithRef(ref terra.Reference) Http2PerRequestAttributes {
	return Http2PerRequestAttributes{ref: ref}
}

func (pr Http2PerRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr Http2PerRequestAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("unit"))
}

func (pr Http2PerRequestAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("value"))
}

type TimeoutTcpAttributes struct {
	ref terra.Reference
}

func (t TimeoutTcpAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutTcpAttributes) InternalWithRef(ref terra.Reference) TimeoutTcpAttributes {
	return TimeoutTcpAttributes{ref: ref}
}

func (t TimeoutTcpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutTcpAttributes) Idle() terra.ListValue[TcpIdleAttributes] {
	return terra.ReferenceAsList[TcpIdleAttributes](t.ref.Append("idle"))
}

type TcpIdleAttributes struct {
	ref terra.Reference
}

func (i TcpIdleAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i TcpIdleAttributes) InternalWithRef(ref terra.Reference) TcpIdleAttributes {
	return TcpIdleAttributes{ref: ref}
}

func (i TcpIdleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i TcpIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("unit"))
}

func (i TcpIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type ListenerTlsAttributes struct {
	ref terra.Reference
}

func (t ListenerTlsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ListenerTlsAttributes) InternalWithRef(ref terra.Reference) ListenerTlsAttributes {
	return ListenerTlsAttributes{ref: ref}
}

func (t ListenerTlsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ListenerTlsAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("mode"))
}

func (t ListenerTlsAttributes) Certificate() terra.ListValue[ListenerTlsCertificateAttributes] {
	return terra.ReferenceAsList[ListenerTlsCertificateAttributes](t.ref.Append("certificate"))
}

func (t ListenerTlsAttributes) Validation() terra.ListValue[ListenerTlsValidationAttributes] {
	return terra.ReferenceAsList[ListenerTlsValidationAttributes](t.ref.Append("validation"))
}

type ListenerTlsCertificateAttributes struct {
	ref terra.Reference
}

func (c ListenerTlsCertificateAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ListenerTlsCertificateAttributes) InternalWithRef(ref terra.Reference) ListenerTlsCertificateAttributes {
	return ListenerTlsCertificateAttributes{ref: ref}
}

func (c ListenerTlsCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c ListenerTlsCertificateAttributes) Acm() terra.ListValue[CertificateAcmAttributes] {
	return terra.ReferenceAsList[CertificateAcmAttributes](c.ref.Append("acm"))
}

func (c ListenerTlsCertificateAttributes) File() terra.ListValue[ListenerTlsCertificateFileAttributes] {
	return terra.ReferenceAsList[ListenerTlsCertificateFileAttributes](c.ref.Append("file"))
}

func (c ListenerTlsCertificateAttributes) Sds() terra.ListValue[ListenerTlsCertificateSdsAttributes] {
	return terra.ReferenceAsList[ListenerTlsCertificateSdsAttributes](c.ref.Append("sds"))
}

type CertificateAcmAttributes struct {
	ref terra.Reference
}

func (a CertificateAcmAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a CertificateAcmAttributes) InternalWithRef(ref terra.Reference) CertificateAcmAttributes {
	return CertificateAcmAttributes{ref: ref}
}

func (a CertificateAcmAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a CertificateAcmAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("certificate_arn"))
}

type ListenerTlsCertificateFileAttributes struct {
	ref terra.Reference
}

func (f ListenerTlsCertificateFileAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f ListenerTlsCertificateFileAttributes) InternalWithRef(ref terra.Reference) ListenerTlsCertificateFileAttributes {
	return ListenerTlsCertificateFileAttributes{ref: ref}
}

func (f ListenerTlsCertificateFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f ListenerTlsCertificateFileAttributes) CertificateChain() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("certificate_chain"))
}

func (f ListenerTlsCertificateFileAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("private_key"))
}

type ListenerTlsCertificateSdsAttributes struct {
	ref terra.Reference
}

func (s ListenerTlsCertificateSdsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ListenerTlsCertificateSdsAttributes) InternalWithRef(ref terra.Reference) ListenerTlsCertificateSdsAttributes {
	return ListenerTlsCertificateSdsAttributes{ref: ref}
}

func (s ListenerTlsCertificateSdsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ListenerTlsCertificateSdsAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret_name"))
}

type ListenerTlsValidationAttributes struct {
	ref terra.Reference
}

func (v ListenerTlsValidationAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v ListenerTlsValidationAttributes) InternalWithRef(ref terra.Reference) ListenerTlsValidationAttributes {
	return ListenerTlsValidationAttributes{ref: ref}
}

func (v ListenerTlsValidationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v ListenerTlsValidationAttributes) SubjectAlternativeNames() terra.ListValue[ListenerTlsValidationSubjectAlternativeNamesAttributes] {
	return terra.ReferenceAsList[ListenerTlsValidationSubjectAlternativeNamesAttributes](v.ref.Append("subject_alternative_names"))
}

func (v ListenerTlsValidationAttributes) Trust() terra.ListValue[ListenerTlsValidationTrustAttributes] {
	return terra.ReferenceAsList[ListenerTlsValidationTrustAttributes](v.ref.Append("trust"))
}

type ListenerTlsValidationSubjectAlternativeNamesAttributes struct {
	ref terra.Reference
}

func (san ListenerTlsValidationSubjectAlternativeNamesAttributes) InternalRef() (terra.Reference, error) {
	return san.ref, nil
}

func (san ListenerTlsValidationSubjectAlternativeNamesAttributes) InternalWithRef(ref terra.Reference) ListenerTlsValidationSubjectAlternativeNamesAttributes {
	return ListenerTlsValidationSubjectAlternativeNamesAttributes{ref: ref}
}

func (san ListenerTlsValidationSubjectAlternativeNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return san.ref.InternalTokens()
}

func (san ListenerTlsValidationSubjectAlternativeNamesAttributes) Match() terra.ListValue[ListenerTlsValidationSubjectAlternativeNamesMatchAttributes] {
	return terra.ReferenceAsList[ListenerTlsValidationSubjectAlternativeNamesMatchAttributes](san.ref.Append("match"))
}

type ListenerTlsValidationSubjectAlternativeNamesMatchAttributes struct {
	ref terra.Reference
}

func (m ListenerTlsValidationSubjectAlternativeNamesMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ListenerTlsValidationSubjectAlternativeNamesMatchAttributes) InternalWithRef(ref terra.Reference) ListenerTlsValidationSubjectAlternativeNamesMatchAttributes {
	return ListenerTlsValidationSubjectAlternativeNamesMatchAttributes{ref: ref}
}

func (m ListenerTlsValidationSubjectAlternativeNamesMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m ListenerTlsValidationSubjectAlternativeNamesMatchAttributes) Exact() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](m.ref.Append("exact"))
}

type ListenerTlsValidationTrustAttributes struct {
	ref terra.Reference
}

func (t ListenerTlsValidationTrustAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ListenerTlsValidationTrustAttributes) InternalWithRef(ref terra.Reference) ListenerTlsValidationTrustAttributes {
	return ListenerTlsValidationTrustAttributes{ref: ref}
}

func (t ListenerTlsValidationTrustAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ListenerTlsValidationTrustAttributes) File() terra.ListValue[ListenerTlsValidationTrustFileAttributes] {
	return terra.ReferenceAsList[ListenerTlsValidationTrustFileAttributes](t.ref.Append("file"))
}

func (t ListenerTlsValidationTrustAttributes) Sds() terra.ListValue[ListenerTlsValidationTrustSdsAttributes] {
	return terra.ReferenceAsList[ListenerTlsValidationTrustSdsAttributes](t.ref.Append("sds"))
}

type ListenerTlsValidationTrustFileAttributes struct {
	ref terra.Reference
}

func (f ListenerTlsValidationTrustFileAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f ListenerTlsValidationTrustFileAttributes) InternalWithRef(ref terra.Reference) ListenerTlsValidationTrustFileAttributes {
	return ListenerTlsValidationTrustFileAttributes{ref: ref}
}

func (f ListenerTlsValidationTrustFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f ListenerTlsValidationTrustFileAttributes) CertificateChain() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("certificate_chain"))
}

type ListenerTlsValidationTrustSdsAttributes struct {
	ref terra.Reference
}

func (s ListenerTlsValidationTrustSdsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ListenerTlsValidationTrustSdsAttributes) InternalWithRef(ref terra.Reference) ListenerTlsValidationTrustSdsAttributes {
	return ListenerTlsValidationTrustSdsAttributes{ref: ref}
}

func (s ListenerTlsValidationTrustSdsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s ListenerTlsValidationTrustSdsAttributes) SecretName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("secret_name"))
}

type LoggingAttributes struct {
	ref terra.Reference
}

func (l LoggingAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l LoggingAttributes) InternalWithRef(ref terra.Reference) LoggingAttributes {
	return LoggingAttributes{ref: ref}
}

func (l LoggingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l LoggingAttributes) AccessLog() terra.ListValue[AccessLogAttributes] {
	return terra.ReferenceAsList[AccessLogAttributes](l.ref.Append("access_log"))
}

type AccessLogAttributes struct {
	ref terra.Reference
}

func (al AccessLogAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al AccessLogAttributes) InternalWithRef(ref terra.Reference) AccessLogAttributes {
	return AccessLogAttributes{ref: ref}
}

func (al AccessLogAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al AccessLogAttributes) File() terra.ListValue[AccessLogFileAttributes] {
	return terra.ReferenceAsList[AccessLogFileAttributes](al.ref.Append("file"))
}

type AccessLogFileAttributes struct {
	ref terra.Reference
}

func (f AccessLogFileAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f AccessLogFileAttributes) InternalWithRef(ref terra.Reference) AccessLogFileAttributes {
	return AccessLogFileAttributes{ref: ref}
}

func (f AccessLogFileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f AccessLogFileAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("path"))
}

func (f AccessLogFileAttributes) Format() terra.ListValue[FormatAttributes] {
	return terra.ReferenceAsList[FormatAttributes](f.ref.Append("format"))
}

type FormatAttributes struct {
	ref terra.Reference
}

func (f FormatAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FormatAttributes) InternalWithRef(ref terra.Reference) FormatAttributes {
	return FormatAttributes{ref: ref}
}

func (f FormatAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f FormatAttributes) Text() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("text"))
}

func (f FormatAttributes) Json() terra.ListValue[JsonAttributes] {
	return terra.ReferenceAsList[JsonAttributes](f.ref.Append("json"))
}

type JsonAttributes struct {
	ref terra.Reference
}

func (j JsonAttributes) InternalRef() (terra.Reference, error) {
	return j.ref, nil
}

func (j JsonAttributes) InternalWithRef(ref terra.Reference) JsonAttributes {
	return JsonAttributes{ref: ref}
}

func (j JsonAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return j.ref.InternalTokens()
}

func (j JsonAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(j.ref.Append("key"))
}

func (j JsonAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(j.ref.Append("value"))
}

type ServiceDiscoveryAttributes struct {
	ref terra.Reference
}

func (sd ServiceDiscoveryAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd ServiceDiscoveryAttributes) InternalWithRef(ref terra.Reference) ServiceDiscoveryAttributes {
	return ServiceDiscoveryAttributes{ref: ref}
}

func (sd ServiceDiscoveryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd ServiceDiscoveryAttributes) AwsCloudMap() terra.ListValue[AwsCloudMapAttributes] {
	return terra.ReferenceAsList[AwsCloudMapAttributes](sd.ref.Append("aws_cloud_map"))
}

func (sd ServiceDiscoveryAttributes) Dns() terra.ListValue[DnsAttributes] {
	return terra.ReferenceAsList[DnsAttributes](sd.ref.Append("dns"))
}

type AwsCloudMapAttributes struct {
	ref terra.Reference
}

func (acm AwsCloudMapAttributes) InternalRef() (terra.Reference, error) {
	return acm.ref, nil
}

func (acm AwsCloudMapAttributes) InternalWithRef(ref terra.Reference) AwsCloudMapAttributes {
	return AwsCloudMapAttributes{ref: ref}
}

func (acm AwsCloudMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return acm.ref.InternalTokens()
}

func (acm AwsCloudMapAttributes) Attributes() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acm.ref.Append("attributes"))
}

func (acm AwsCloudMapAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceAsString(acm.ref.Append("namespace_name"))
}

func (acm AwsCloudMapAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(acm.ref.Append("service_name"))
}

type DnsAttributes struct {
	ref terra.Reference
}

func (d DnsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DnsAttributes) InternalWithRef(ref terra.Reference) DnsAttributes {
	return DnsAttributes{ref: ref}
}

func (d DnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DnsAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("hostname"))
}

type SpecState struct {
	Backend          []BackendState          `json:"backend"`
	BackendDefaults  []BackendDefaultsState  `json:"backend_defaults"`
	Listener         []ListenerState         `json:"listener"`
	Logging          []LoggingState          `json:"logging"`
	ServiceDiscovery []ServiceDiscoveryState `json:"service_discovery"`
}

type BackendState struct {
	VirtualService []VirtualServiceState `json:"virtual_service"`
}

type VirtualServiceState struct {
	VirtualServiceName string                            `json:"virtual_service_name"`
	ClientPolicy       []VirtualServiceClientPolicyState `json:"client_policy"`
}

type VirtualServiceClientPolicyState struct {
	Tls []VirtualServiceClientPolicyTlsState `json:"tls"`
}

type VirtualServiceClientPolicyTlsState struct {
	Enforce     bool                                            `json:"enforce"`
	Ports       []float64                                       `json:"ports"`
	Certificate []VirtualServiceClientPolicyTlsCertificateState `json:"certificate"`
	Validation  []VirtualServiceClientPolicyTlsValidationState  `json:"validation"`
}

type VirtualServiceClientPolicyTlsCertificateState struct {
	File []VirtualServiceClientPolicyTlsCertificateFileState `json:"file"`
	Sds  []VirtualServiceClientPolicyTlsCertificateSdsState  `json:"sds"`
}

type VirtualServiceClientPolicyTlsCertificateFileState struct {
	CertificateChain string `json:"certificate_chain"`
	PrivateKey       string `json:"private_key"`
}

type VirtualServiceClientPolicyTlsCertificateSdsState struct {
	SecretName string `json:"secret_name"`
}

type VirtualServiceClientPolicyTlsValidationState struct {
	SubjectAlternativeNames []VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesState `json:"subject_alternative_names"`
	Trust                   []VirtualServiceClientPolicyTlsValidationTrustState                   `json:"trust"`
}

type VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesState struct {
	Match []VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchState `json:"match"`
}

type VirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchState struct {
	Exact []string `json:"exact"`
}

type VirtualServiceClientPolicyTlsValidationTrustState struct {
	Acm  []VirtualServiceClientPolicyTlsValidationTrustAcmState  `json:"acm"`
	File []VirtualServiceClientPolicyTlsValidationTrustFileState `json:"file"`
	Sds  []VirtualServiceClientPolicyTlsValidationTrustSdsState  `json:"sds"`
}

type VirtualServiceClientPolicyTlsValidationTrustAcmState struct {
	CertificateAuthorityArns []string `json:"certificate_authority_arns"`
}

type VirtualServiceClientPolicyTlsValidationTrustFileState struct {
	CertificateChain string `json:"certificate_chain"`
}

type VirtualServiceClientPolicyTlsValidationTrustSdsState struct {
	SecretName string `json:"secret_name"`
}

type BackendDefaultsState struct {
	ClientPolicy []BackendDefaultsClientPolicyState `json:"client_policy"`
}

type BackendDefaultsClientPolicyState struct {
	Tls []BackendDefaultsClientPolicyTlsState `json:"tls"`
}

type BackendDefaultsClientPolicyTlsState struct {
	Enforce     bool                                             `json:"enforce"`
	Ports       []float64                                        `json:"ports"`
	Certificate []BackendDefaultsClientPolicyTlsCertificateState `json:"certificate"`
	Validation  []BackendDefaultsClientPolicyTlsValidationState  `json:"validation"`
}

type BackendDefaultsClientPolicyTlsCertificateState struct {
	File []BackendDefaultsClientPolicyTlsCertificateFileState `json:"file"`
	Sds  []BackendDefaultsClientPolicyTlsCertificateSdsState  `json:"sds"`
}

type BackendDefaultsClientPolicyTlsCertificateFileState struct {
	CertificateChain string `json:"certificate_chain"`
	PrivateKey       string `json:"private_key"`
}

type BackendDefaultsClientPolicyTlsCertificateSdsState struct {
	SecretName string `json:"secret_name"`
}

type BackendDefaultsClientPolicyTlsValidationState struct {
	SubjectAlternativeNames []BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesState `json:"subject_alternative_names"`
	Trust                   []BackendDefaultsClientPolicyTlsValidationTrustState                   `json:"trust"`
}

type BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesState struct {
	Match []BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchState `json:"match"`
}

type BackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchState struct {
	Exact []string `json:"exact"`
}

type BackendDefaultsClientPolicyTlsValidationTrustState struct {
	Acm  []BackendDefaultsClientPolicyTlsValidationTrustAcmState  `json:"acm"`
	File []BackendDefaultsClientPolicyTlsValidationTrustFileState `json:"file"`
	Sds  []BackendDefaultsClientPolicyTlsValidationTrustSdsState  `json:"sds"`
}

type BackendDefaultsClientPolicyTlsValidationTrustAcmState struct {
	CertificateAuthorityArns []string `json:"certificate_authority_arns"`
}

type BackendDefaultsClientPolicyTlsValidationTrustFileState struct {
	CertificateChain string `json:"certificate_chain"`
}

type BackendDefaultsClientPolicyTlsValidationTrustSdsState struct {
	SecretName string `json:"secret_name"`
}

type ListenerState struct {
	ConnectionPool   []ConnectionPoolState   `json:"connection_pool"`
	HealthCheck      []HealthCheckState      `json:"health_check"`
	OutlierDetection []OutlierDetectionState `json:"outlier_detection"`
	PortMapping      []PortMappingState      `json:"port_mapping"`
	Timeout          []TimeoutState          `json:"timeout"`
	Tls              []ListenerTlsState      `json:"tls"`
}

type ConnectionPoolState struct {
	Grpc  []ConnectionPoolGrpcState  `json:"grpc"`
	Http  []ConnectionPoolHttpState  `json:"http"`
	Http2 []ConnectionPoolHttp2State `json:"http2"`
	Tcp   []ConnectionPoolTcpState   `json:"tcp"`
}

type ConnectionPoolGrpcState struct {
	MaxRequests float64 `json:"max_requests"`
}

type ConnectionPoolHttpState struct {
	MaxConnections     float64 `json:"max_connections"`
	MaxPendingRequests float64 `json:"max_pending_requests"`
}

type ConnectionPoolHttp2State struct {
	MaxRequests float64 `json:"max_requests"`
}

type ConnectionPoolTcpState struct {
	MaxConnections float64 `json:"max_connections"`
}

type HealthCheckState struct {
	HealthyThreshold   float64 `json:"healthy_threshold"`
	IntervalMillis     float64 `json:"interval_millis"`
	Path               string  `json:"path"`
	Port               float64 `json:"port"`
	Protocol           string  `json:"protocol"`
	TimeoutMillis      float64 `json:"timeout_millis"`
	UnhealthyThreshold float64 `json:"unhealthy_threshold"`
}

type OutlierDetectionState struct {
	MaxEjectionPercent   float64                     `json:"max_ejection_percent"`
	MaxServerErrors      float64                     `json:"max_server_errors"`
	BaseEjectionDuration []BaseEjectionDurationState `json:"base_ejection_duration"`
	Interval             []IntervalState             `json:"interval"`
}

type BaseEjectionDurationState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type IntervalState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type PortMappingState struct {
	Port     float64 `json:"port"`
	Protocol string  `json:"protocol"`
}

type TimeoutState struct {
	Grpc  []TimeoutGrpcState  `json:"grpc"`
	Http  []TimeoutHttpState  `json:"http"`
	Http2 []TimeoutHttp2State `json:"http2"`
	Tcp   []TimeoutTcpState   `json:"tcp"`
}

type TimeoutGrpcState struct {
	Idle       []GrpcIdleState       `json:"idle"`
	PerRequest []GrpcPerRequestState `json:"per_request"`
}

type GrpcIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type GrpcPerRequestState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type TimeoutHttpState struct {
	Idle       []HttpIdleState       `json:"idle"`
	PerRequest []HttpPerRequestState `json:"per_request"`
}

type HttpIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type HttpPerRequestState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type TimeoutHttp2State struct {
	Idle       []Http2IdleState       `json:"idle"`
	PerRequest []Http2PerRequestState `json:"per_request"`
}

type Http2IdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type Http2PerRequestState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type TimeoutTcpState struct {
	Idle []TcpIdleState `json:"idle"`
}

type TcpIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type ListenerTlsState struct {
	Mode        string                        `json:"mode"`
	Certificate []ListenerTlsCertificateState `json:"certificate"`
	Validation  []ListenerTlsValidationState  `json:"validation"`
}

type ListenerTlsCertificateState struct {
	Acm  []CertificateAcmState             `json:"acm"`
	File []ListenerTlsCertificateFileState `json:"file"`
	Sds  []ListenerTlsCertificateSdsState  `json:"sds"`
}

type CertificateAcmState struct {
	CertificateArn string `json:"certificate_arn"`
}

type ListenerTlsCertificateFileState struct {
	CertificateChain string `json:"certificate_chain"`
	PrivateKey       string `json:"private_key"`
}

type ListenerTlsCertificateSdsState struct {
	SecretName string `json:"secret_name"`
}

type ListenerTlsValidationState struct {
	SubjectAlternativeNames []ListenerTlsValidationSubjectAlternativeNamesState `json:"subject_alternative_names"`
	Trust                   []ListenerTlsValidationTrustState                   `json:"trust"`
}

type ListenerTlsValidationSubjectAlternativeNamesState struct {
	Match []ListenerTlsValidationSubjectAlternativeNamesMatchState `json:"match"`
}

type ListenerTlsValidationSubjectAlternativeNamesMatchState struct {
	Exact []string `json:"exact"`
}

type ListenerTlsValidationTrustState struct {
	File []ListenerTlsValidationTrustFileState `json:"file"`
	Sds  []ListenerTlsValidationTrustSdsState  `json:"sds"`
}

type ListenerTlsValidationTrustFileState struct {
	CertificateChain string `json:"certificate_chain"`
}

type ListenerTlsValidationTrustSdsState struct {
	SecretName string `json:"secret_name"`
}

type LoggingState struct {
	AccessLog []AccessLogState `json:"access_log"`
}

type AccessLogState struct {
	File []AccessLogFileState `json:"file"`
}

type AccessLogFileState struct {
	Path   string        `json:"path"`
	Format []FormatState `json:"format"`
}

type FormatState struct {
	Text string      `json:"text"`
	Json []JsonState `json:"json"`
}

type JsonState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type ServiceDiscoveryState struct {
	AwsCloudMap []AwsCloudMapState `json:"aws_cloud_map"`
	Dns         []DnsState         `json:"dns"`
}

type AwsCloudMapState struct {
	Attributes    map[string]string `json:"attributes"`
	NamespaceName string            `json:"namespace_name"`
	ServiceName   string            `json:"service_name"`
}

type DnsState struct {
	Hostname string `json:"hostname"`
}
