// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	vpcpeeringconnectionaccepter "github.com/golingon/terraproviders/aws/4.60.0/vpcpeeringconnectionaccepter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVpcPeeringConnectionAccepter(name string, args VpcPeeringConnectionAccepterArgs) *VpcPeeringConnectionAccepter {
	return &VpcPeeringConnectionAccepter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpcPeeringConnectionAccepter)(nil)

type VpcPeeringConnectionAccepter struct {
	Name  string
	Args  VpcPeeringConnectionAccepterArgs
	state *vpcPeeringConnectionAccepterState
}

func (vpca *VpcPeeringConnectionAccepter) Type() string {
	return "aws_vpc_peering_connection_accepter"
}

func (vpca *VpcPeeringConnectionAccepter) LocalName() string {
	return vpca.Name
}

func (vpca *VpcPeeringConnectionAccepter) Configuration() interface{} {
	return vpca.Args
}

func (vpca *VpcPeeringConnectionAccepter) Attributes() vpcPeeringConnectionAccepterAttributes {
	return vpcPeeringConnectionAccepterAttributes{ref: terra.ReferenceResource(vpca)}
}

func (vpca *VpcPeeringConnectionAccepter) ImportState(av io.Reader) error {
	vpca.state = &vpcPeeringConnectionAccepterState{}
	if err := json.NewDecoder(av).Decode(vpca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vpca.Type(), vpca.LocalName(), err)
	}
	return nil
}

func (vpca *VpcPeeringConnectionAccepter) State() (*vpcPeeringConnectionAccepterState, bool) {
	return vpca.state, vpca.state != nil
}

func (vpca *VpcPeeringConnectionAccepter) StateMust() *vpcPeeringConnectionAccepterState {
	if vpca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vpca.Type(), vpca.LocalName()))
	}
	return vpca.state
}

func (vpca *VpcPeeringConnectionAccepter) DependOn() terra.Reference {
	return terra.ReferenceResource(vpca)
}

type VpcPeeringConnectionAccepterArgs struct {
	// AutoAccept: bool, optional
	AutoAccept terra.BoolValue `hcl:"auto_accept,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcPeeringConnectionId: string, required
	VpcPeeringConnectionId terra.StringValue `hcl:"vpc_peering_connection_id,attr" validate:"required"`
	// Accepter: optional
	Accepter *vpcpeeringconnectionaccepter.Accepter `hcl:"accepter,block"`
	// Requester: optional
	Requester *vpcpeeringconnectionaccepter.Requester `hcl:"requester,block"`
	// Timeouts: optional
	Timeouts *vpcpeeringconnectionaccepter.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VpcPeeringConnectionAccepter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vpcPeeringConnectionAccepterAttributes struct {
	ref terra.Reference
}

func (vpca vpcPeeringConnectionAccepterAttributes) AcceptStatus() terra.StringValue {
	return terra.ReferenceString(vpca.ref.Append("accept_status"))
}

func (vpca vpcPeeringConnectionAccepterAttributes) AutoAccept() terra.BoolValue {
	return terra.ReferenceBool(vpca.ref.Append("auto_accept"))
}

func (vpca vpcPeeringConnectionAccepterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vpca.ref.Append("id"))
}

func (vpca vpcPeeringConnectionAccepterAttributes) PeerOwnerId() terra.StringValue {
	return terra.ReferenceString(vpca.ref.Append("peer_owner_id"))
}

func (vpca vpcPeeringConnectionAccepterAttributes) PeerRegion() terra.StringValue {
	return terra.ReferenceString(vpca.ref.Append("peer_region"))
}

func (vpca vpcPeeringConnectionAccepterAttributes) PeerVpcId() terra.StringValue {
	return terra.ReferenceString(vpca.ref.Append("peer_vpc_id"))
}

func (vpca vpcPeeringConnectionAccepterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vpca.ref.Append("tags"))
}

func (vpca vpcPeeringConnectionAccepterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vpca.ref.Append("tags_all"))
}

func (vpca vpcPeeringConnectionAccepterAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(vpca.ref.Append("vpc_id"))
}

func (vpca vpcPeeringConnectionAccepterAttributes) VpcPeeringConnectionId() terra.StringValue {
	return terra.ReferenceString(vpca.ref.Append("vpc_peering_connection_id"))
}

func (vpca vpcPeeringConnectionAccepterAttributes) Accepter() terra.ListValue[vpcpeeringconnectionaccepter.AccepterAttributes] {
	return terra.ReferenceList[vpcpeeringconnectionaccepter.AccepterAttributes](vpca.ref.Append("accepter"))
}

func (vpca vpcPeeringConnectionAccepterAttributes) Requester() terra.ListValue[vpcpeeringconnectionaccepter.RequesterAttributes] {
	return terra.ReferenceList[vpcpeeringconnectionaccepter.RequesterAttributes](vpca.ref.Append("requester"))
}

func (vpca vpcPeeringConnectionAccepterAttributes) Timeouts() vpcpeeringconnectionaccepter.TimeoutsAttributes {
	return terra.ReferenceSingle[vpcpeeringconnectionaccepter.TimeoutsAttributes](vpca.ref.Append("timeouts"))
}

type vpcPeeringConnectionAccepterState struct {
	AcceptStatus           string                                        `json:"accept_status"`
	AutoAccept             bool                                          `json:"auto_accept"`
	Id                     string                                        `json:"id"`
	PeerOwnerId            string                                        `json:"peer_owner_id"`
	PeerRegion             string                                        `json:"peer_region"`
	PeerVpcId              string                                        `json:"peer_vpc_id"`
	Tags                   map[string]string                             `json:"tags"`
	TagsAll                map[string]string                             `json:"tags_all"`
	VpcId                  string                                        `json:"vpc_id"`
	VpcPeeringConnectionId string                                        `json:"vpc_peering_connection_id"`
	Accepter               []vpcpeeringconnectionaccepter.AccepterState  `json:"accepter"`
	Requester              []vpcpeeringconnectionaccepter.RequesterState `json:"requester"`
	Timeouts               *vpcpeeringconnectionaccepter.TimeoutsState   `json:"timeouts"`
}
