// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package opsworksapplication

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AppSource struct {
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// Revision: string, optional
	Revision terra.StringValue `hcl:"revision,attr"`
	// SshKey: string, optional
	SshKey terra.StringValue `hcl:"ssh_key,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Url: string, optional
	Url terra.StringValue `hcl:"url,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type Environment struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Secure: bool, optional
	Secure terra.BoolValue `hcl:"secure,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type SslConfiguration struct {
	// Certificate: string, required
	Certificate terra.StringValue `hcl:"certificate,attr" validate:"required"`
	// Chain: string, optional
	Chain terra.StringValue `hcl:"chain,attr"`
	// PrivateKey: string, required
	PrivateKey terra.StringValue `hcl:"private_key,attr" validate:"required"`
}

type AppSourceAttributes struct {
	ref terra.Reference
}

func (as AppSourceAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AppSourceAttributes) InternalWithRef(ref terra.Reference) AppSourceAttributes {
	return AppSourceAttributes{ref: ref}
}

func (as AppSourceAttributes) InternalTokens() hclwrite.Tokens {
	return as.ref.InternalTokens()
}

func (as AppSourceAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("password"))
}

func (as AppSourceAttributes) Revision() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("revision"))
}

func (as AppSourceAttributes) SshKey() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("ssh_key"))
}

func (as AppSourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("type"))
}

func (as AppSourceAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("url"))
}

func (as AppSourceAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("username"))
}

type EnvironmentAttributes struct {
	ref terra.Reference
}

func (e EnvironmentAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EnvironmentAttributes) InternalWithRef(ref terra.Reference) EnvironmentAttributes {
	return EnvironmentAttributes{ref: ref}
}

func (e EnvironmentAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e EnvironmentAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("key"))
}

func (e EnvironmentAttributes) Secure() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("secure"))
}

func (e EnvironmentAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type SslConfigurationAttributes struct {
	ref terra.Reference
}

func (sc SslConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc SslConfigurationAttributes) InternalWithRef(ref terra.Reference) SslConfigurationAttributes {
	return SslConfigurationAttributes{ref: ref}
}

func (sc SslConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return sc.ref.InternalTokens()
}

func (sc SslConfigurationAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("certificate"))
}

func (sc SslConfigurationAttributes) Chain() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("chain"))
}

func (sc SslConfigurationAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("private_key"))
}

type AppSourceState struct {
	Password string `json:"password"`
	Revision string `json:"revision"`
	SshKey   string `json:"ssh_key"`
	Type     string `json:"type"`
	Url      string `json:"url"`
	Username string `json:"username"`
}

type EnvironmentState struct {
	Key    string `json:"key"`
	Secure bool   `json:"secure"`
	Value  string `json:"value"`
}

type SslConfigurationState struct {
	Certificate string `json:"certificate"`
	Chain       string `json:"chain"`
	PrivateKey  string `json:"private_key"`
}
