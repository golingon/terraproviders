// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSagemakerModelPackageGroupPolicy(name string, args SagemakerModelPackageGroupPolicyArgs) *SagemakerModelPackageGroupPolicy {
	return &SagemakerModelPackageGroupPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SagemakerModelPackageGroupPolicy)(nil)

type SagemakerModelPackageGroupPolicy struct {
	Name  string
	Args  SagemakerModelPackageGroupPolicyArgs
	state *sagemakerModelPackageGroupPolicyState
}

func (smpgp *SagemakerModelPackageGroupPolicy) Type() string {
	return "aws_sagemaker_model_package_group_policy"
}

func (smpgp *SagemakerModelPackageGroupPolicy) LocalName() string {
	return smpgp.Name
}

func (smpgp *SagemakerModelPackageGroupPolicy) Configuration() interface{} {
	return smpgp.Args
}

func (smpgp *SagemakerModelPackageGroupPolicy) Attributes() sagemakerModelPackageGroupPolicyAttributes {
	return sagemakerModelPackageGroupPolicyAttributes{ref: terra.ReferenceResource(smpgp)}
}

func (smpgp *SagemakerModelPackageGroupPolicy) ImportState(av io.Reader) error {
	smpgp.state = &sagemakerModelPackageGroupPolicyState{}
	if err := json.NewDecoder(av).Decode(smpgp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", smpgp.Type(), smpgp.LocalName(), err)
	}
	return nil
}

func (smpgp *SagemakerModelPackageGroupPolicy) State() (*sagemakerModelPackageGroupPolicyState, bool) {
	return smpgp.state, smpgp.state != nil
}

func (smpgp *SagemakerModelPackageGroupPolicy) StateMust() *sagemakerModelPackageGroupPolicyState {
	if smpgp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", smpgp.Type(), smpgp.LocalName()))
	}
	return smpgp.state
}

func (smpgp *SagemakerModelPackageGroupPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(smpgp)
}

type SagemakerModelPackageGroupPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ModelPackageGroupName: string, required
	ModelPackageGroupName terra.StringValue `hcl:"model_package_group_name,attr" validate:"required"`
	// ResourcePolicy: string, required
	ResourcePolicy terra.StringValue `hcl:"resource_policy,attr" validate:"required"`
	// DependsOn contains resources that SagemakerModelPackageGroupPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sagemakerModelPackageGroupPolicyAttributes struct {
	ref terra.Reference
}

func (smpgp sagemakerModelPackageGroupPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(smpgp.ref.Append("id"))
}

func (smpgp sagemakerModelPackageGroupPolicyAttributes) ModelPackageGroupName() terra.StringValue {
	return terra.ReferenceString(smpgp.ref.Append("model_package_group_name"))
}

func (smpgp sagemakerModelPackageGroupPolicyAttributes) ResourcePolicy() terra.StringValue {
	return terra.ReferenceString(smpgp.ref.Append("resource_policy"))
}

type sagemakerModelPackageGroupPolicyState struct {
	Id                    string `json:"id"`
	ModelPackageGroupName string `json:"model_package_group_name"`
	ResourcePolicy        string `json:"resource_policy"`
}
