// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSagemakerImageVersion(name string, args SagemakerImageVersionArgs) *SagemakerImageVersion {
	return &SagemakerImageVersion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SagemakerImageVersion)(nil)

type SagemakerImageVersion struct {
	Name  string
	Args  SagemakerImageVersionArgs
	state *sagemakerImageVersionState
}

func (siv *SagemakerImageVersion) Type() string {
	return "aws_sagemaker_image_version"
}

func (siv *SagemakerImageVersion) LocalName() string {
	return siv.Name
}

func (siv *SagemakerImageVersion) Configuration() interface{} {
	return siv.Args
}

func (siv *SagemakerImageVersion) Attributes() sagemakerImageVersionAttributes {
	return sagemakerImageVersionAttributes{ref: terra.ReferenceResource(siv)}
}

func (siv *SagemakerImageVersion) ImportState(av io.Reader) error {
	siv.state = &sagemakerImageVersionState{}
	if err := json.NewDecoder(av).Decode(siv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", siv.Type(), siv.LocalName(), err)
	}
	return nil
}

func (siv *SagemakerImageVersion) State() (*sagemakerImageVersionState, bool) {
	return siv.state, siv.state != nil
}

func (siv *SagemakerImageVersion) StateMust() *sagemakerImageVersionState {
	if siv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", siv.Type(), siv.LocalName()))
	}
	return siv.state
}

func (siv *SagemakerImageVersion) DependOn() terra.Reference {
	return terra.ReferenceResource(siv)
}

type SagemakerImageVersionArgs struct {
	// BaseImage: string, required
	BaseImage terra.StringValue `hcl:"base_image,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageName: string, required
	ImageName terra.StringValue `hcl:"image_name,attr" validate:"required"`
	// DependsOn contains resources that SagemakerImageVersion depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sagemakerImageVersionAttributes struct {
	ref terra.Reference
}

func (siv sagemakerImageVersionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("arn"))
}

func (siv sagemakerImageVersionAttributes) BaseImage() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("base_image"))
}

func (siv sagemakerImageVersionAttributes) ContainerImage() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("container_image"))
}

func (siv sagemakerImageVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("id"))
}

func (siv sagemakerImageVersionAttributes) ImageArn() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("image_arn"))
}

func (siv sagemakerImageVersionAttributes) ImageName() terra.StringValue {
	return terra.ReferenceString(siv.ref.Append("image_name"))
}

func (siv sagemakerImageVersionAttributes) Version() terra.NumberValue {
	return terra.ReferenceNumber(siv.ref.Append("version"))
}

type sagemakerImageVersionState struct {
	Arn            string  `json:"arn"`
	BaseImage      string  `json:"base_image"`
	ContainerImage string  `json:"container_image"`
	Id             string  `json:"id"`
	ImageArn       string  `json:"image_arn"`
	ImageName      string  `json:"image_name"`
	Version        float64 `json:"version"`
}
