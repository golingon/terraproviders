// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	devicefarmtestgridproject "github.com/golingon/terraproviders/aws/4.60.0/devicefarmtestgridproject"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDevicefarmTestGridProject(name string, args DevicefarmTestGridProjectArgs) *DevicefarmTestGridProject {
	return &DevicefarmTestGridProject{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DevicefarmTestGridProject)(nil)

type DevicefarmTestGridProject struct {
	Name  string
	Args  DevicefarmTestGridProjectArgs
	state *devicefarmTestGridProjectState
}

func (dtgp *DevicefarmTestGridProject) Type() string {
	return "aws_devicefarm_test_grid_project"
}

func (dtgp *DevicefarmTestGridProject) LocalName() string {
	return dtgp.Name
}

func (dtgp *DevicefarmTestGridProject) Configuration() interface{} {
	return dtgp.Args
}

func (dtgp *DevicefarmTestGridProject) Attributes() devicefarmTestGridProjectAttributes {
	return devicefarmTestGridProjectAttributes{ref: terra.ReferenceResource(dtgp)}
}

func (dtgp *DevicefarmTestGridProject) ImportState(av io.Reader) error {
	dtgp.state = &devicefarmTestGridProjectState{}
	if err := json.NewDecoder(av).Decode(dtgp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dtgp.Type(), dtgp.LocalName(), err)
	}
	return nil
}

func (dtgp *DevicefarmTestGridProject) State() (*devicefarmTestGridProjectState, bool) {
	return dtgp.state, dtgp.state != nil
}

func (dtgp *DevicefarmTestGridProject) StateMust() *devicefarmTestGridProjectState {
	if dtgp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dtgp.Type(), dtgp.LocalName()))
	}
	return dtgp.state
}

func (dtgp *DevicefarmTestGridProject) DependOn() terra.Reference {
	return terra.ReferenceResource(dtgp)
}

type DevicefarmTestGridProjectArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcConfig: optional
	VpcConfig *devicefarmtestgridproject.VpcConfig `hcl:"vpc_config,block"`
	// DependsOn contains resources that DevicefarmTestGridProject depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type devicefarmTestGridProjectAttributes struct {
	ref terra.Reference
}

func (dtgp devicefarmTestGridProjectAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dtgp.ref.Append("arn"))
}

func (dtgp devicefarmTestGridProjectAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dtgp.ref.Append("description"))
}

func (dtgp devicefarmTestGridProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dtgp.ref.Append("id"))
}

func (dtgp devicefarmTestGridProjectAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dtgp.ref.Append("name"))
}

func (dtgp devicefarmTestGridProjectAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dtgp.ref.Append("tags"))
}

func (dtgp devicefarmTestGridProjectAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dtgp.ref.Append("tags_all"))
}

func (dtgp devicefarmTestGridProjectAttributes) VpcConfig() terra.ListValue[devicefarmtestgridproject.VpcConfigAttributes] {
	return terra.ReferenceList[devicefarmtestgridproject.VpcConfigAttributes](dtgp.ref.Append("vpc_config"))
}

type devicefarmTestGridProjectState struct {
	Arn         string                                     `json:"arn"`
	Description string                                     `json:"description"`
	Id          string                                     `json:"id"`
	Name        string                                     `json:"name"`
	Tags        map[string]string                          `json:"tags"`
	TagsAll     map[string]string                          `json:"tags_all"`
	VpcConfig   []devicefarmtestgridproject.VpcConfigState `json:"vpc_config"`
}
