// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMskScramSecretAssociation(name string, args MskScramSecretAssociationArgs) *MskScramSecretAssociation {
	return &MskScramSecretAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MskScramSecretAssociation)(nil)

type MskScramSecretAssociation struct {
	Name  string
	Args  MskScramSecretAssociationArgs
	state *mskScramSecretAssociationState
}

func (mssa *MskScramSecretAssociation) Type() string {
	return "aws_msk_scram_secret_association"
}

func (mssa *MskScramSecretAssociation) LocalName() string {
	return mssa.Name
}

func (mssa *MskScramSecretAssociation) Configuration() interface{} {
	return mssa.Args
}

func (mssa *MskScramSecretAssociation) Attributes() mskScramSecretAssociationAttributes {
	return mskScramSecretAssociationAttributes{ref: terra.ReferenceResource(mssa)}
}

func (mssa *MskScramSecretAssociation) ImportState(av io.Reader) error {
	mssa.state = &mskScramSecretAssociationState{}
	if err := json.NewDecoder(av).Decode(mssa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mssa.Type(), mssa.LocalName(), err)
	}
	return nil
}

func (mssa *MskScramSecretAssociation) State() (*mskScramSecretAssociationState, bool) {
	return mssa.state, mssa.state != nil
}

func (mssa *MskScramSecretAssociation) StateMust() *mskScramSecretAssociationState {
	if mssa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mssa.Type(), mssa.LocalName()))
	}
	return mssa.state
}

func (mssa *MskScramSecretAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(mssa)
}

type MskScramSecretAssociationArgs struct {
	// ClusterArn: string, required
	ClusterArn terra.StringValue `hcl:"cluster_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SecretArnList: set of string, required
	SecretArnList terra.SetValue[terra.StringValue] `hcl:"secret_arn_list,attr" validate:"required"`
	// DependsOn contains resources that MskScramSecretAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mskScramSecretAssociationAttributes struct {
	ref terra.Reference
}

func (mssa mskScramSecretAssociationAttributes) ClusterArn() terra.StringValue {
	return terra.ReferenceString(mssa.ref.Append("cluster_arn"))
}

func (mssa mskScramSecretAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mssa.ref.Append("id"))
}

func (mssa mskScramSecretAssociationAttributes) SecretArnList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](mssa.ref.Append("secret_arn_list"))
}

type mskScramSecretAssociationState struct {
	ClusterArn    string   `json:"cluster_arn"`
	Id            string   `json:"id"`
	SecretArnList []string `json:"secret_arn_list"`
}
