// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	snapshotcreatevolumepermission "github.com/golingon/terraproviders/aws/4.60.0/snapshotcreatevolumepermission"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSnapshotCreateVolumePermission(name string, args SnapshotCreateVolumePermissionArgs) *SnapshotCreateVolumePermission {
	return &SnapshotCreateVolumePermission{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SnapshotCreateVolumePermission)(nil)

type SnapshotCreateVolumePermission struct {
	Name  string
	Args  SnapshotCreateVolumePermissionArgs
	state *snapshotCreateVolumePermissionState
}

func (scvp *SnapshotCreateVolumePermission) Type() string {
	return "aws_snapshot_create_volume_permission"
}

func (scvp *SnapshotCreateVolumePermission) LocalName() string {
	return scvp.Name
}

func (scvp *SnapshotCreateVolumePermission) Configuration() interface{} {
	return scvp.Args
}

func (scvp *SnapshotCreateVolumePermission) Attributes() snapshotCreateVolumePermissionAttributes {
	return snapshotCreateVolumePermissionAttributes{ref: terra.ReferenceResource(scvp)}
}

func (scvp *SnapshotCreateVolumePermission) ImportState(av io.Reader) error {
	scvp.state = &snapshotCreateVolumePermissionState{}
	if err := json.NewDecoder(av).Decode(scvp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scvp.Type(), scvp.LocalName(), err)
	}
	return nil
}

func (scvp *SnapshotCreateVolumePermission) State() (*snapshotCreateVolumePermissionState, bool) {
	return scvp.state, scvp.state != nil
}

func (scvp *SnapshotCreateVolumePermission) StateMust() *snapshotCreateVolumePermissionState {
	if scvp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scvp.Type(), scvp.LocalName()))
	}
	return scvp.state
}

func (scvp *SnapshotCreateVolumePermission) DependOn() terra.Reference {
	return terra.ReferenceResource(scvp)
}

type SnapshotCreateVolumePermissionArgs struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SnapshotId: string, required
	SnapshotId terra.StringValue `hcl:"snapshot_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *snapshotcreatevolumepermission.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SnapshotCreateVolumePermission depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type snapshotCreateVolumePermissionAttributes struct {
	ref terra.Reference
}

func (scvp snapshotCreateVolumePermissionAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(scvp.ref.Append("account_id"))
}

func (scvp snapshotCreateVolumePermissionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scvp.ref.Append("id"))
}

func (scvp snapshotCreateVolumePermissionAttributes) SnapshotId() terra.StringValue {
	return terra.ReferenceString(scvp.ref.Append("snapshot_id"))
}

func (scvp snapshotCreateVolumePermissionAttributes) Timeouts() snapshotcreatevolumepermission.TimeoutsAttributes {
	return terra.ReferenceSingle[snapshotcreatevolumepermission.TimeoutsAttributes](scvp.ref.Append("timeouts"))
}

type snapshotCreateVolumePermissionState struct {
	AccountId  string                                        `json:"account_id"`
	Id         string                                        `json:"id"`
	SnapshotId string                                        `json:"snapshot_id"`
	Timeouts   *snapshotcreatevolumepermission.TimeoutsState `json:"timeouts"`
}
