// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	athenadatabase "github.com/golingon/terraproviders/aws/4.60.0/athenadatabase"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAthenaDatabase(name string, args AthenaDatabaseArgs) *AthenaDatabase {
	return &AthenaDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AthenaDatabase)(nil)

type AthenaDatabase struct {
	Name  string
	Args  AthenaDatabaseArgs
	state *athenaDatabaseState
}

func (ad *AthenaDatabase) Type() string {
	return "aws_athena_database"
}

func (ad *AthenaDatabase) LocalName() string {
	return ad.Name
}

func (ad *AthenaDatabase) Configuration() interface{} {
	return ad.Args
}

func (ad *AthenaDatabase) Attributes() athenaDatabaseAttributes {
	return athenaDatabaseAttributes{ref: terra.ReferenceResource(ad)}
}

func (ad *AthenaDatabase) ImportState(av io.Reader) error {
	ad.state = &athenaDatabaseState{}
	if err := json.NewDecoder(av).Decode(ad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ad.Type(), ad.LocalName(), err)
	}
	return nil
}

func (ad *AthenaDatabase) State() (*athenaDatabaseState, bool) {
	return ad.state, ad.state != nil
}

func (ad *AthenaDatabase) StateMust() *athenaDatabaseState {
	if ad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ad.Type(), ad.LocalName()))
	}
	return ad.state
}

func (ad *AthenaDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(ad)
}

type AthenaDatabaseArgs struct {
	// Bucket: string, optional
	Bucket terra.StringValue `hcl:"bucket,attr"`
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// AclConfiguration: optional
	AclConfiguration *athenadatabase.AclConfiguration `hcl:"acl_configuration,block"`
	// EncryptionConfiguration: optional
	EncryptionConfiguration *athenadatabase.EncryptionConfiguration `hcl:"encryption_configuration,block"`
	// DependsOn contains resources that AthenaDatabase depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type athenaDatabaseAttributes struct {
	ref terra.Reference
}

func (ad athenaDatabaseAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("bucket"))
}

func (ad athenaDatabaseAttributes) Comment() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("comment"))
}

func (ad athenaDatabaseAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("expected_bucket_owner"))
}

func (ad athenaDatabaseAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceBool(ad.ref.Append("force_destroy"))
}

func (ad athenaDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("id"))
}

func (ad athenaDatabaseAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("name"))
}

func (ad athenaDatabaseAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ad.ref.Append("properties"))
}

func (ad athenaDatabaseAttributes) AclConfiguration() terra.ListValue[athenadatabase.AclConfigurationAttributes] {
	return terra.ReferenceList[athenadatabase.AclConfigurationAttributes](ad.ref.Append("acl_configuration"))
}

func (ad athenaDatabaseAttributes) EncryptionConfiguration() terra.ListValue[athenadatabase.EncryptionConfigurationAttributes] {
	return terra.ReferenceList[athenadatabase.EncryptionConfigurationAttributes](ad.ref.Append("encryption_configuration"))
}

type athenaDatabaseState struct {
	Bucket                  string                                        `json:"bucket"`
	Comment                 string                                        `json:"comment"`
	ExpectedBucketOwner     string                                        `json:"expected_bucket_owner"`
	ForceDestroy            bool                                          `json:"force_destroy"`
	Id                      string                                        `json:"id"`
	Name                    string                                        `json:"name"`
	Properties              map[string]string                             `json:"properties"`
	AclConfiguration        []athenadatabase.AclConfigurationState        `json:"acl_configuration"`
	EncryptionConfiguration []athenadatabase.EncryptionConfigurationState `json:"encryption_configuration"`
}
