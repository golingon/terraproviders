// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCodecommitApprovalRuleTemplate(name string, args CodecommitApprovalRuleTemplateArgs) *CodecommitApprovalRuleTemplate {
	return &CodecommitApprovalRuleTemplate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodecommitApprovalRuleTemplate)(nil)

type CodecommitApprovalRuleTemplate struct {
	Name  string
	Args  CodecommitApprovalRuleTemplateArgs
	state *codecommitApprovalRuleTemplateState
}

func (cart *CodecommitApprovalRuleTemplate) Type() string {
	return "aws_codecommit_approval_rule_template"
}

func (cart *CodecommitApprovalRuleTemplate) LocalName() string {
	return cart.Name
}

func (cart *CodecommitApprovalRuleTemplate) Configuration() interface{} {
	return cart.Args
}

func (cart *CodecommitApprovalRuleTemplate) Attributes() codecommitApprovalRuleTemplateAttributes {
	return codecommitApprovalRuleTemplateAttributes{ref: terra.ReferenceResource(cart)}
}

func (cart *CodecommitApprovalRuleTemplate) ImportState(av io.Reader) error {
	cart.state = &codecommitApprovalRuleTemplateState{}
	if err := json.NewDecoder(av).Decode(cart.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cart.Type(), cart.LocalName(), err)
	}
	return nil
}

func (cart *CodecommitApprovalRuleTemplate) State() (*codecommitApprovalRuleTemplateState, bool) {
	return cart.state, cart.state != nil
}

func (cart *CodecommitApprovalRuleTemplate) StateMust() *codecommitApprovalRuleTemplateState {
	if cart.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cart.Type(), cart.LocalName()))
	}
	return cart.state
}

func (cart *CodecommitApprovalRuleTemplate) DependOn() terra.Reference {
	return terra.ReferenceResource(cart)
}

type CodecommitApprovalRuleTemplateArgs struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// DependsOn contains resources that CodecommitApprovalRuleTemplate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type codecommitApprovalRuleTemplateAttributes struct {
	ref terra.Reference
}

func (cart codecommitApprovalRuleTemplateAttributes) ApprovalRuleTemplateId() terra.StringValue {
	return terra.ReferenceString(cart.ref.Append("approval_rule_template_id"))
}

func (cart codecommitApprovalRuleTemplateAttributes) Content() terra.StringValue {
	return terra.ReferenceString(cart.ref.Append("content"))
}

func (cart codecommitApprovalRuleTemplateAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceString(cart.ref.Append("creation_date"))
}

func (cart codecommitApprovalRuleTemplateAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cart.ref.Append("description"))
}

func (cart codecommitApprovalRuleTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cart.ref.Append("id"))
}

func (cart codecommitApprovalRuleTemplateAttributes) LastModifiedDate() terra.StringValue {
	return terra.ReferenceString(cart.ref.Append("last_modified_date"))
}

func (cart codecommitApprovalRuleTemplateAttributes) LastModifiedUser() terra.StringValue {
	return terra.ReferenceString(cart.ref.Append("last_modified_user"))
}

func (cart codecommitApprovalRuleTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cart.ref.Append("name"))
}

func (cart codecommitApprovalRuleTemplateAttributes) RuleContentSha256() terra.StringValue {
	return terra.ReferenceString(cart.ref.Append("rule_content_sha256"))
}

type codecommitApprovalRuleTemplateState struct {
	ApprovalRuleTemplateId string `json:"approval_rule_template_id"`
	Content                string `json:"content"`
	CreationDate           string `json:"creation_date"`
	Description            string `json:"description"`
	Id                     string `json:"id"`
	LastModifiedDate       string `json:"last_modified_date"`
	LastModifiedUser       string `json:"last_modified_user"`
	Name                   string `json:"name"`
	RuleContentSha256      string `json:"rule_content_sha256"`
}
