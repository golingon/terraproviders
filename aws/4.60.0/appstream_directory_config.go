// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	appstreamdirectoryconfig "github.com/golingon/terraproviders/aws/4.60.0/appstreamdirectoryconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppstreamDirectoryConfig(name string, args AppstreamDirectoryConfigArgs) *AppstreamDirectoryConfig {
	return &AppstreamDirectoryConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppstreamDirectoryConfig)(nil)

type AppstreamDirectoryConfig struct {
	Name  string
	Args  AppstreamDirectoryConfigArgs
	state *appstreamDirectoryConfigState
}

func (adc *AppstreamDirectoryConfig) Type() string {
	return "aws_appstream_directory_config"
}

func (adc *AppstreamDirectoryConfig) LocalName() string {
	return adc.Name
}

func (adc *AppstreamDirectoryConfig) Configuration() interface{} {
	return adc.Args
}

func (adc *AppstreamDirectoryConfig) Attributes() appstreamDirectoryConfigAttributes {
	return appstreamDirectoryConfigAttributes{ref: terra.ReferenceResource(adc)}
}

func (adc *AppstreamDirectoryConfig) ImportState(av io.Reader) error {
	adc.state = &appstreamDirectoryConfigState{}
	if err := json.NewDecoder(av).Decode(adc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adc.Type(), adc.LocalName(), err)
	}
	return nil
}

func (adc *AppstreamDirectoryConfig) State() (*appstreamDirectoryConfigState, bool) {
	return adc.state, adc.state != nil
}

func (adc *AppstreamDirectoryConfig) StateMust() *appstreamDirectoryConfigState {
	if adc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adc.Type(), adc.LocalName()))
	}
	return adc.state
}

func (adc *AppstreamDirectoryConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(adc)
}

type AppstreamDirectoryConfigArgs struct {
	// DirectoryName: string, required
	DirectoryName terra.StringValue `hcl:"directory_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OrganizationalUnitDistinguishedNames: set of string, required
	OrganizationalUnitDistinguishedNames terra.SetValue[terra.StringValue] `hcl:"organizational_unit_distinguished_names,attr" validate:"required"`
	// ServiceAccountCredentials: required
	ServiceAccountCredentials *appstreamdirectoryconfig.ServiceAccountCredentials `hcl:"service_account_credentials,block" validate:"required"`
	// DependsOn contains resources that AppstreamDirectoryConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appstreamDirectoryConfigAttributes struct {
	ref terra.Reference
}

func (adc appstreamDirectoryConfigAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("created_time"))
}

func (adc appstreamDirectoryConfigAttributes) DirectoryName() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("directory_name"))
}

func (adc appstreamDirectoryConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("id"))
}

func (adc appstreamDirectoryConfigAttributes) OrganizationalUnitDistinguishedNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](adc.ref.Append("organizational_unit_distinguished_names"))
}

func (adc appstreamDirectoryConfigAttributes) ServiceAccountCredentials() terra.ListValue[appstreamdirectoryconfig.ServiceAccountCredentialsAttributes] {
	return terra.ReferenceList[appstreamdirectoryconfig.ServiceAccountCredentialsAttributes](adc.ref.Append("service_account_credentials"))
}

type appstreamDirectoryConfigState struct {
	CreatedTime                          string                                                    `json:"created_time"`
	DirectoryName                        string                                                    `json:"directory_name"`
	Id                                   string                                                    `json:"id"`
	OrganizationalUnitDistinguishedNames []string                                                  `json:"organizational_unit_distinguished_names"`
	ServiceAccountCredentials            []appstreamdirectoryconfig.ServiceAccountCredentialsState `json:"service_account_credentials"`
}
