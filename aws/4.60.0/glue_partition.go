// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	gluepartition "github.com/golingon/terraproviders/aws/4.60.0/gluepartition"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGluePartition(name string, args GluePartitionArgs) *GluePartition {
	return &GluePartition{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GluePartition)(nil)

type GluePartition struct {
	Name  string
	Args  GluePartitionArgs
	state *gluePartitionState
}

func (gp *GluePartition) Type() string {
	return "aws_glue_partition"
}

func (gp *GluePartition) LocalName() string {
	return gp.Name
}

func (gp *GluePartition) Configuration() interface{} {
	return gp.Args
}

func (gp *GluePartition) Attributes() gluePartitionAttributes {
	return gluePartitionAttributes{ref: terra.ReferenceResource(gp)}
}

func (gp *GluePartition) ImportState(av io.Reader) error {
	gp.state = &gluePartitionState{}
	if err := json.NewDecoder(av).Decode(gp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gp.Type(), gp.LocalName(), err)
	}
	return nil
}

func (gp *GluePartition) State() (*gluePartitionState, bool) {
	return gp.state, gp.state != nil
}

func (gp *GluePartition) StateMust() *gluePartitionState {
	if gp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gp.Type(), gp.LocalName()))
	}
	return gp.state
}

func (gp *GluePartition) DependOn() terra.Reference {
	return terra.ReferenceResource(gp)
}

type GluePartitionArgs struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// PartitionValues: list of string, required
	PartitionValues terra.ListValue[terra.StringValue] `hcl:"partition_values,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// StorageDescriptor: optional
	StorageDescriptor *gluepartition.StorageDescriptor `hcl:"storage_descriptor,block"`
	// DependsOn contains resources that GluePartition depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type gluePartitionAttributes struct {
	ref terra.Reference
}

func (gp gluePartitionAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceString(gp.ref.Append("catalog_id"))
}

func (gp gluePartitionAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceString(gp.ref.Append("creation_time"))
}

func (gp gluePartitionAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceString(gp.ref.Append("database_name"))
}

func (gp gluePartitionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gp.ref.Append("id"))
}

func (gp gluePartitionAttributes) LastAccessedTime() terra.StringValue {
	return terra.ReferenceString(gp.ref.Append("last_accessed_time"))
}

func (gp gluePartitionAttributes) LastAnalyzedTime() terra.StringValue {
	return terra.ReferenceString(gp.ref.Append("last_analyzed_time"))
}

func (gp gluePartitionAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gp.ref.Append("parameters"))
}

func (gp gluePartitionAttributes) PartitionValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](gp.ref.Append("partition_values"))
}

func (gp gluePartitionAttributes) TableName() terra.StringValue {
	return terra.ReferenceString(gp.ref.Append("table_name"))
}

func (gp gluePartitionAttributes) StorageDescriptor() terra.ListValue[gluepartition.StorageDescriptorAttributes] {
	return terra.ReferenceList[gluepartition.StorageDescriptorAttributes](gp.ref.Append("storage_descriptor"))
}

type gluePartitionState struct {
	CatalogId         string                                 `json:"catalog_id"`
	CreationTime      string                                 `json:"creation_time"`
	DatabaseName      string                                 `json:"database_name"`
	Id                string                                 `json:"id"`
	LastAccessedTime  string                                 `json:"last_accessed_time"`
	LastAnalyzedTime  string                                 `json:"last_analyzed_time"`
	Parameters        map[string]string                      `json:"parameters"`
	PartitionValues   []string                               `json:"partition_values"`
	TableName         string                                 `json:"table_name"`
	StorageDescriptor []gluepartition.StorageDescriptorState `json:"storage_descriptor"`
}
