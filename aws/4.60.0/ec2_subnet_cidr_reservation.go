// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2SubnetCidrReservation(name string, args Ec2SubnetCidrReservationArgs) *Ec2SubnetCidrReservation {
	return &Ec2SubnetCidrReservation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2SubnetCidrReservation)(nil)

type Ec2SubnetCidrReservation struct {
	Name  string
	Args  Ec2SubnetCidrReservationArgs
	state *ec2SubnetCidrReservationState
}

func (escr *Ec2SubnetCidrReservation) Type() string {
	return "aws_ec2_subnet_cidr_reservation"
}

func (escr *Ec2SubnetCidrReservation) LocalName() string {
	return escr.Name
}

func (escr *Ec2SubnetCidrReservation) Configuration() interface{} {
	return escr.Args
}

func (escr *Ec2SubnetCidrReservation) Attributes() ec2SubnetCidrReservationAttributes {
	return ec2SubnetCidrReservationAttributes{ref: terra.ReferenceResource(escr)}
}

func (escr *Ec2SubnetCidrReservation) ImportState(av io.Reader) error {
	escr.state = &ec2SubnetCidrReservationState{}
	if err := json.NewDecoder(av).Decode(escr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", escr.Type(), escr.LocalName(), err)
	}
	return nil
}

func (escr *Ec2SubnetCidrReservation) State() (*ec2SubnetCidrReservationState, bool) {
	return escr.state, escr.state != nil
}

func (escr *Ec2SubnetCidrReservation) StateMust() *ec2SubnetCidrReservationState {
	if escr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", escr.Type(), escr.LocalName()))
	}
	return escr.state
}

func (escr *Ec2SubnetCidrReservation) DependOn() terra.Reference {
	return terra.ReferenceResource(escr)
}

type Ec2SubnetCidrReservationArgs struct {
	// CidrBlock: string, required
	CidrBlock terra.StringValue `hcl:"cidr_block,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ReservationType: string, required
	ReservationType terra.StringValue `hcl:"reservation_type,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// DependsOn contains resources that Ec2SubnetCidrReservation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2SubnetCidrReservationAttributes struct {
	ref terra.Reference
}

func (escr ec2SubnetCidrReservationAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceString(escr.ref.Append("cidr_block"))
}

func (escr ec2SubnetCidrReservationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(escr.ref.Append("description"))
}

func (escr ec2SubnetCidrReservationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(escr.ref.Append("id"))
}

func (escr ec2SubnetCidrReservationAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(escr.ref.Append("owner_id"))
}

func (escr ec2SubnetCidrReservationAttributes) ReservationType() terra.StringValue {
	return terra.ReferenceString(escr.ref.Append("reservation_type"))
}

func (escr ec2SubnetCidrReservationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(escr.ref.Append("subnet_id"))
}

type ec2SubnetCidrReservationState struct {
	CidrBlock       string `json:"cidr_block"`
	Description     string `json:"description"`
	Id              string `json:"id"`
	OwnerId         string `json:"owner_id"`
	ReservationType string `json:"reservation_type"`
	SubnetId        string `json:"subnet_id"`
}
