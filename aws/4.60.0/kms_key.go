// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKmsKey(name string, args KmsKeyArgs) *KmsKey {
	return &KmsKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsKey)(nil)

type KmsKey struct {
	Name  string
	Args  KmsKeyArgs
	state *kmsKeyState
}

func (kk *KmsKey) Type() string {
	return "aws_kms_key"
}

func (kk *KmsKey) LocalName() string {
	return kk.Name
}

func (kk *KmsKey) Configuration() interface{} {
	return kk.Args
}

func (kk *KmsKey) Attributes() kmsKeyAttributes {
	return kmsKeyAttributes{ref: terra.ReferenceResource(kk)}
}

func (kk *KmsKey) ImportState(av io.Reader) error {
	kk.state = &kmsKeyState{}
	if err := json.NewDecoder(av).Decode(kk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kk.Type(), kk.LocalName(), err)
	}
	return nil
}

func (kk *KmsKey) State() (*kmsKeyState, bool) {
	return kk.state, kk.state != nil
}

func (kk *KmsKey) StateMust() *kmsKeyState {
	if kk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kk.Type(), kk.LocalName()))
	}
	return kk.state
}

func (kk *KmsKey) DependOn() terra.Reference {
	return terra.ReferenceResource(kk)
}

type KmsKeyArgs struct {
	// BypassPolicyLockoutSafetyCheck: bool, optional
	BypassPolicyLockoutSafetyCheck terra.BoolValue `hcl:"bypass_policy_lockout_safety_check,attr"`
	// CustomKeyStoreId: string, optional
	CustomKeyStoreId terra.StringValue `hcl:"custom_key_store_id,attr"`
	// CustomerMasterKeySpec: string, optional
	CustomerMasterKeySpec terra.StringValue `hcl:"customer_master_key_spec,attr"`
	// DeletionWindowInDays: number, optional
	DeletionWindowInDays terra.NumberValue `hcl:"deletion_window_in_days,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnableKeyRotation: bool, optional
	EnableKeyRotation terra.BoolValue `hcl:"enable_key_rotation,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsEnabled: bool, optional
	IsEnabled terra.BoolValue `hcl:"is_enabled,attr"`
	// KeyUsage: string, optional
	KeyUsage terra.StringValue `hcl:"key_usage,attr"`
	// MultiRegion: bool, optional
	MultiRegion terra.BoolValue `hcl:"multi_region,attr"`
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that KmsKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kmsKeyAttributes struct {
	ref terra.Reference
}

func (kk kmsKeyAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(kk.ref.Append("arn"))
}

func (kk kmsKeyAttributes) BypassPolicyLockoutSafetyCheck() terra.BoolValue {
	return terra.ReferenceBool(kk.ref.Append("bypass_policy_lockout_safety_check"))
}

func (kk kmsKeyAttributes) CustomKeyStoreId() terra.StringValue {
	return terra.ReferenceString(kk.ref.Append("custom_key_store_id"))
}

func (kk kmsKeyAttributes) CustomerMasterKeySpec() terra.StringValue {
	return terra.ReferenceString(kk.ref.Append("customer_master_key_spec"))
}

func (kk kmsKeyAttributes) DeletionWindowInDays() terra.NumberValue {
	return terra.ReferenceNumber(kk.ref.Append("deletion_window_in_days"))
}

func (kk kmsKeyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(kk.ref.Append("description"))
}

func (kk kmsKeyAttributes) EnableKeyRotation() terra.BoolValue {
	return terra.ReferenceBool(kk.ref.Append("enable_key_rotation"))
}

func (kk kmsKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kk.ref.Append("id"))
}

func (kk kmsKeyAttributes) IsEnabled() terra.BoolValue {
	return terra.ReferenceBool(kk.ref.Append("is_enabled"))
}

func (kk kmsKeyAttributes) KeyId() terra.StringValue {
	return terra.ReferenceString(kk.ref.Append("key_id"))
}

func (kk kmsKeyAttributes) KeyUsage() terra.StringValue {
	return terra.ReferenceString(kk.ref.Append("key_usage"))
}

func (kk kmsKeyAttributes) MultiRegion() terra.BoolValue {
	return terra.ReferenceBool(kk.ref.Append("multi_region"))
}

func (kk kmsKeyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(kk.ref.Append("policy"))
}

func (kk kmsKeyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](kk.ref.Append("tags"))
}

func (kk kmsKeyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](kk.ref.Append("tags_all"))
}

type kmsKeyState struct {
	Arn                            string            `json:"arn"`
	BypassPolicyLockoutSafetyCheck bool              `json:"bypass_policy_lockout_safety_check"`
	CustomKeyStoreId               string            `json:"custom_key_store_id"`
	CustomerMasterKeySpec          string            `json:"customer_master_key_spec"`
	DeletionWindowInDays           float64           `json:"deletion_window_in_days"`
	Description                    string            `json:"description"`
	EnableKeyRotation              bool              `json:"enable_key_rotation"`
	Id                             string            `json:"id"`
	IsEnabled                      bool              `json:"is_enabled"`
	KeyId                          string            `json:"key_id"`
	KeyUsage                       string            `json:"key_usage"`
	MultiRegion                    bool              `json:"multi_region"`
	Policy                         string            `json:"policy"`
	Tags                           map[string]string `json:"tags"`
	TagsAll                        map[string]string `json:"tags_all"`
}
