// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamServiceLinkedRole(name string, args IamServiceLinkedRoleArgs) *IamServiceLinkedRole {
	return &IamServiceLinkedRole{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamServiceLinkedRole)(nil)

type IamServiceLinkedRole struct {
	Name  string
	Args  IamServiceLinkedRoleArgs
	state *iamServiceLinkedRoleState
}

func (islr *IamServiceLinkedRole) Type() string {
	return "aws_iam_service_linked_role"
}

func (islr *IamServiceLinkedRole) LocalName() string {
	return islr.Name
}

func (islr *IamServiceLinkedRole) Configuration() interface{} {
	return islr.Args
}

func (islr *IamServiceLinkedRole) Attributes() iamServiceLinkedRoleAttributes {
	return iamServiceLinkedRoleAttributes{ref: terra.ReferenceResource(islr)}
}

func (islr *IamServiceLinkedRole) ImportState(av io.Reader) error {
	islr.state = &iamServiceLinkedRoleState{}
	if err := json.NewDecoder(av).Decode(islr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", islr.Type(), islr.LocalName(), err)
	}
	return nil
}

func (islr *IamServiceLinkedRole) State() (*iamServiceLinkedRoleState, bool) {
	return islr.state, islr.state != nil
}

func (islr *IamServiceLinkedRole) StateMust() *iamServiceLinkedRoleState {
	if islr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", islr.Type(), islr.LocalName()))
	}
	return islr.state
}

func (islr *IamServiceLinkedRole) DependOn() terra.Reference {
	return terra.ReferenceResource(islr)
}

type IamServiceLinkedRoleArgs struct {
	// AwsServiceName: string, required
	AwsServiceName terra.StringValue `hcl:"aws_service_name,attr" validate:"required"`
	// CustomSuffix: string, optional
	CustomSuffix terra.StringValue `hcl:"custom_suffix,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that IamServiceLinkedRole depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamServiceLinkedRoleAttributes struct {
	ref terra.Reference
}

func (islr iamServiceLinkedRoleAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(islr.ref.Append("arn"))
}

func (islr iamServiceLinkedRoleAttributes) AwsServiceName() terra.StringValue {
	return terra.ReferenceString(islr.ref.Append("aws_service_name"))
}

func (islr iamServiceLinkedRoleAttributes) CreateDate() terra.StringValue {
	return terra.ReferenceString(islr.ref.Append("create_date"))
}

func (islr iamServiceLinkedRoleAttributes) CustomSuffix() terra.StringValue {
	return terra.ReferenceString(islr.ref.Append("custom_suffix"))
}

func (islr iamServiceLinkedRoleAttributes) Description() terra.StringValue {
	return terra.ReferenceString(islr.ref.Append("description"))
}

func (islr iamServiceLinkedRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(islr.ref.Append("id"))
}

func (islr iamServiceLinkedRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(islr.ref.Append("name"))
}

func (islr iamServiceLinkedRoleAttributes) Path() terra.StringValue {
	return terra.ReferenceString(islr.ref.Append("path"))
}

func (islr iamServiceLinkedRoleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](islr.ref.Append("tags"))
}

func (islr iamServiceLinkedRoleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](islr.ref.Append("tags_all"))
}

func (islr iamServiceLinkedRoleAttributes) UniqueId() terra.StringValue {
	return terra.ReferenceString(islr.ref.Append("unique_id"))
}

type iamServiceLinkedRoleState struct {
	Arn            string            `json:"arn"`
	AwsServiceName string            `json:"aws_service_name"`
	CreateDate     string            `json:"create_date"`
	CustomSuffix   string            `json:"custom_suffix"`
	Description    string            `json:"description"`
	Id             string            `json:"id"`
	Name           string            `json:"name"`
	Path           string            `json:"path"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
	UniqueId       string            `json:"unique_id"`
}
