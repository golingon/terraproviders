// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	vpcendpoint "github.com/golingon/terraproviders/aws/4.60.0/vpcendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVpcEndpoint(name string, args VpcEndpointArgs) *VpcEndpoint {
	return &VpcEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpcEndpoint)(nil)

type VpcEndpoint struct {
	Name  string
	Args  VpcEndpointArgs
	state *vpcEndpointState
}

func (ve *VpcEndpoint) Type() string {
	return "aws_vpc_endpoint"
}

func (ve *VpcEndpoint) LocalName() string {
	return ve.Name
}

func (ve *VpcEndpoint) Configuration() interface{} {
	return ve.Args
}

func (ve *VpcEndpoint) Attributes() vpcEndpointAttributes {
	return vpcEndpointAttributes{ref: terra.ReferenceResource(ve)}
}

func (ve *VpcEndpoint) ImportState(av io.Reader) error {
	ve.state = &vpcEndpointState{}
	if err := json.NewDecoder(av).Decode(ve.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ve.Type(), ve.LocalName(), err)
	}
	return nil
}

func (ve *VpcEndpoint) State() (*vpcEndpointState, bool) {
	return ve.state, ve.state != nil
}

func (ve *VpcEndpoint) StateMust() *vpcEndpointState {
	if ve.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ve.Type(), ve.LocalName()))
	}
	return ve.state
}

func (ve *VpcEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(ve)
}

type VpcEndpointArgs struct {
	// AutoAccept: bool, optional
	AutoAccept terra.BoolValue `hcl:"auto_accept,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddressType: string, optional
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr"`
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
	// PrivateDnsEnabled: bool, optional
	PrivateDnsEnabled terra.BoolValue `hcl:"private_dns_enabled,attr"`
	// RouteTableIds: set of string, optional
	RouteTableIds terra.SetValue[terra.StringValue] `hcl:"route_table_ids,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcEndpointType: string, optional
	VpcEndpointType terra.StringValue `hcl:"vpc_endpoint_type,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// DnsEntry: min=0
	DnsEntry []vpcendpoint.DnsEntry `hcl:"dns_entry,block" validate:"min=0"`
	// DnsOptions: optional
	DnsOptions *vpcendpoint.DnsOptions `hcl:"dns_options,block"`
	// Timeouts: optional
	Timeouts *vpcendpoint.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VpcEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vpcEndpointAttributes struct {
	ref terra.Reference
}

func (ve vpcEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ve.ref.Append("arn"))
}

func (ve vpcEndpointAttributes) AutoAccept() terra.BoolValue {
	return terra.ReferenceBool(ve.ref.Append("auto_accept"))
}

func (ve vpcEndpointAttributes) CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ve.ref.Append("cidr_blocks"))
}

func (ve vpcEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ve.ref.Append("id"))
}

func (ve vpcEndpointAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceString(ve.ref.Append("ip_address_type"))
}

func (ve vpcEndpointAttributes) NetworkInterfaceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ve.ref.Append("network_interface_ids"))
}

func (ve vpcEndpointAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(ve.ref.Append("owner_id"))
}

func (ve vpcEndpointAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(ve.ref.Append("policy"))
}

func (ve vpcEndpointAttributes) PrefixListId() terra.StringValue {
	return terra.ReferenceString(ve.ref.Append("prefix_list_id"))
}

func (ve vpcEndpointAttributes) PrivateDnsEnabled() terra.BoolValue {
	return terra.ReferenceBool(ve.ref.Append("private_dns_enabled"))
}

func (ve vpcEndpointAttributes) RequesterManaged() terra.BoolValue {
	return terra.ReferenceBool(ve.ref.Append("requester_managed"))
}

func (ve vpcEndpointAttributes) RouteTableIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ve.ref.Append("route_table_ids"))
}

func (ve vpcEndpointAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ve.ref.Append("security_group_ids"))
}

func (ve vpcEndpointAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceString(ve.ref.Append("service_name"))
}

func (ve vpcEndpointAttributes) State() terra.StringValue {
	return terra.ReferenceString(ve.ref.Append("state"))
}

func (ve vpcEndpointAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ve.ref.Append("subnet_ids"))
}

func (ve vpcEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ve.ref.Append("tags"))
}

func (ve vpcEndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ve.ref.Append("tags_all"))
}

func (ve vpcEndpointAttributes) VpcEndpointType() terra.StringValue {
	return terra.ReferenceString(ve.ref.Append("vpc_endpoint_type"))
}

func (ve vpcEndpointAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(ve.ref.Append("vpc_id"))
}

func (ve vpcEndpointAttributes) DnsEntry() terra.ListValue[vpcendpoint.DnsEntryAttributes] {
	return terra.ReferenceList[vpcendpoint.DnsEntryAttributes](ve.ref.Append("dns_entry"))
}

func (ve vpcEndpointAttributes) DnsOptions() terra.ListValue[vpcendpoint.DnsOptionsAttributes] {
	return terra.ReferenceList[vpcendpoint.DnsOptionsAttributes](ve.ref.Append("dns_options"))
}

func (ve vpcEndpointAttributes) Timeouts() vpcendpoint.TimeoutsAttributes {
	return terra.ReferenceSingle[vpcendpoint.TimeoutsAttributes](ve.ref.Append("timeouts"))
}

type vpcEndpointState struct {
	Arn                 string                        `json:"arn"`
	AutoAccept          bool                          `json:"auto_accept"`
	CidrBlocks          []string                      `json:"cidr_blocks"`
	Id                  string                        `json:"id"`
	IpAddressType       string                        `json:"ip_address_type"`
	NetworkInterfaceIds []string                      `json:"network_interface_ids"`
	OwnerId             string                        `json:"owner_id"`
	Policy              string                        `json:"policy"`
	PrefixListId        string                        `json:"prefix_list_id"`
	PrivateDnsEnabled   bool                          `json:"private_dns_enabled"`
	RequesterManaged    bool                          `json:"requester_managed"`
	RouteTableIds       []string                      `json:"route_table_ids"`
	SecurityGroupIds    []string                      `json:"security_group_ids"`
	ServiceName         string                        `json:"service_name"`
	State               string                        `json:"state"`
	SubnetIds           []string                      `json:"subnet_ids"`
	Tags                map[string]string             `json:"tags"`
	TagsAll             map[string]string             `json:"tags_all"`
	VpcEndpointType     string                        `json:"vpc_endpoint_type"`
	VpcId               string                        `json:"vpc_id"`
	DnsEntry            []vpcendpoint.DnsEntryState   `json:"dns_entry"`
	DnsOptions          []vpcendpoint.DnsOptionsState `json:"dns_options"`
	Timeouts            *vpcendpoint.TimeoutsState    `json:"timeouts"`
}
