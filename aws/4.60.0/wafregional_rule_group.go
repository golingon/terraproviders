// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	wafregionalrulegroup "github.com/golingon/terraproviders/aws/4.60.0/wafregionalrulegroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWafregionalRuleGroup(name string, args WafregionalRuleGroupArgs) *WafregionalRuleGroup {
	return &WafregionalRuleGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WafregionalRuleGroup)(nil)

type WafregionalRuleGroup struct {
	Name  string
	Args  WafregionalRuleGroupArgs
	state *wafregionalRuleGroupState
}

func (wrg *WafregionalRuleGroup) Type() string {
	return "aws_wafregional_rule_group"
}

func (wrg *WafregionalRuleGroup) LocalName() string {
	return wrg.Name
}

func (wrg *WafregionalRuleGroup) Configuration() interface{} {
	return wrg.Args
}

func (wrg *WafregionalRuleGroup) Attributes() wafregionalRuleGroupAttributes {
	return wafregionalRuleGroupAttributes{ref: terra.ReferenceResource(wrg)}
}

func (wrg *WafregionalRuleGroup) ImportState(av io.Reader) error {
	wrg.state = &wafregionalRuleGroupState{}
	if err := json.NewDecoder(av).Decode(wrg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wrg.Type(), wrg.LocalName(), err)
	}
	return nil
}

func (wrg *WafregionalRuleGroup) State() (*wafregionalRuleGroupState, bool) {
	return wrg.state, wrg.state != nil
}

func (wrg *WafregionalRuleGroup) StateMust() *wafregionalRuleGroupState {
	if wrg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wrg.Type(), wrg.LocalName()))
	}
	return wrg.state
}

func (wrg *WafregionalRuleGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(wrg)
}

type WafregionalRuleGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MetricName: string, required
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ActivatedRule: min=0
	ActivatedRule []wafregionalrulegroup.ActivatedRule `hcl:"activated_rule,block" validate:"min=0"`
	// DependsOn contains resources that WafregionalRuleGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type wafregionalRuleGroupAttributes struct {
	ref terra.Reference
}

func (wrg wafregionalRuleGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("arn"))
}

func (wrg wafregionalRuleGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("id"))
}

func (wrg wafregionalRuleGroupAttributes) MetricName() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("metric_name"))
}

func (wrg wafregionalRuleGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("name"))
}

func (wrg wafregionalRuleGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wrg.ref.Append("tags"))
}

func (wrg wafregionalRuleGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wrg.ref.Append("tags_all"))
}

func (wrg wafregionalRuleGroupAttributes) ActivatedRule() terra.SetValue[wafregionalrulegroup.ActivatedRuleAttributes] {
	return terra.ReferenceSet[wafregionalrulegroup.ActivatedRuleAttributes](wrg.ref.Append("activated_rule"))
}

type wafregionalRuleGroupState struct {
	Arn           string                                    `json:"arn"`
	Id            string                                    `json:"id"`
	MetricName    string                                    `json:"metric_name"`
	Name          string                                    `json:"name"`
	Tags          map[string]string                         `json:"tags"`
	TagsAll       map[string]string                         `json:"tags_all"`
	ActivatedRule []wafregionalrulegroup.ActivatedRuleState `json:"activated_rule"`
}
