// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAmiLaunchPermission(name string, args AmiLaunchPermissionArgs) *AmiLaunchPermission {
	return &AmiLaunchPermission{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AmiLaunchPermission)(nil)

type AmiLaunchPermission struct {
	Name  string
	Args  AmiLaunchPermissionArgs
	state *amiLaunchPermissionState
}

func (alp *AmiLaunchPermission) Type() string {
	return "aws_ami_launch_permission"
}

func (alp *AmiLaunchPermission) LocalName() string {
	return alp.Name
}

func (alp *AmiLaunchPermission) Configuration() interface{} {
	return alp.Args
}

func (alp *AmiLaunchPermission) Attributes() amiLaunchPermissionAttributes {
	return amiLaunchPermissionAttributes{ref: terra.ReferenceResource(alp)}
}

func (alp *AmiLaunchPermission) ImportState(av io.Reader) error {
	alp.state = &amiLaunchPermissionState{}
	if err := json.NewDecoder(av).Decode(alp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alp.Type(), alp.LocalName(), err)
	}
	return nil
}

func (alp *AmiLaunchPermission) State() (*amiLaunchPermissionState, bool) {
	return alp.state, alp.state != nil
}

func (alp *AmiLaunchPermission) StateMust() *amiLaunchPermissionState {
	if alp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alp.Type(), alp.LocalName()))
	}
	return alp.state
}

func (alp *AmiLaunchPermission) DependOn() terra.Reference {
	return terra.ReferenceResource(alp)
}

type AmiLaunchPermissionArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Group: string, optional
	Group terra.StringValue `hcl:"group,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageId: string, required
	ImageId terra.StringValue `hcl:"image_id,attr" validate:"required"`
	// OrganizationArn: string, optional
	OrganizationArn terra.StringValue `hcl:"organization_arn,attr"`
	// OrganizationalUnitArn: string, optional
	OrganizationalUnitArn terra.StringValue `hcl:"organizational_unit_arn,attr"`
	// DependsOn contains resources that AmiLaunchPermission depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type amiLaunchPermissionAttributes struct {
	ref terra.Reference
}

func (alp amiLaunchPermissionAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(alp.ref.Append("account_id"))
}

func (alp amiLaunchPermissionAttributes) Group() terra.StringValue {
	return terra.ReferenceString(alp.ref.Append("group"))
}

func (alp amiLaunchPermissionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(alp.ref.Append("id"))
}

func (alp amiLaunchPermissionAttributes) ImageId() terra.StringValue {
	return terra.ReferenceString(alp.ref.Append("image_id"))
}

func (alp amiLaunchPermissionAttributes) OrganizationArn() terra.StringValue {
	return terra.ReferenceString(alp.ref.Append("organization_arn"))
}

func (alp amiLaunchPermissionAttributes) OrganizationalUnitArn() terra.StringValue {
	return terra.ReferenceString(alp.ref.Append("organizational_unit_arn"))
}

type amiLaunchPermissionState struct {
	AccountId             string `json:"account_id"`
	Group                 string `json:"group"`
	Id                    string `json:"id"`
	ImageId               string `json:"image_id"`
	OrganizationArn       string `json:"organization_arn"`
	OrganizationalUnitArn string `json:"organizational_unit_arn"`
}
