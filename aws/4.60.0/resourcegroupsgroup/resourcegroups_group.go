// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package resourcegroupsgroup

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Configuration struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Parameters: min=0
	Parameters []Parameters `hcl:"parameters,block" validate:"min=0"`
}

type Parameters struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ResourceQuery struct {
	// Query: string, required
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConfigurationAttributes struct {
	ref terra.Reference
}

func (c ConfigurationAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c ConfigurationAttributes) InternalWithRef(ref terra.Reference) ConfigurationAttributes {
	return ConfigurationAttributes{ref: ref}
}

func (c ConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ConfigurationAttributes) Type() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("type"))
}

func (c ConfigurationAttributes) Parameters() terra.SetValue[ParametersAttributes] {
	return terra.ReferenceSet[ParametersAttributes](c.ref.Append("parameters"))
}

type ParametersAttributes struct {
	ref terra.Reference
}

func (p ParametersAttributes) InternalRef() terra.Reference {
	return p.ref
}

func (p ParametersAttributes) InternalWithRef(ref terra.Reference) ParametersAttributes {
	return ParametersAttributes{ref: ref}
}

func (p ParametersAttributes) InternalTokens() hclwrite.Tokens {
	return p.ref.InternalTokens()
}

func (p ParametersAttributes) Name() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("name"))
}

func (p ParametersAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](p.ref.Append("values"))
}

type ResourceQueryAttributes struct {
	ref terra.Reference
}

func (rq ResourceQueryAttributes) InternalRef() terra.Reference {
	return rq.ref
}

func (rq ResourceQueryAttributes) InternalWithRef(ref terra.Reference) ResourceQueryAttributes {
	return ResourceQueryAttributes{ref: ref}
}

func (rq ResourceQueryAttributes) InternalTokens() hclwrite.Tokens {
	return rq.ref.InternalTokens()
}

func (rq ResourceQueryAttributes) Query() terra.StringValue {
	return terra.ReferenceString(rq.ref.Append("query"))
}

func (rq ResourceQueryAttributes) Type() terra.StringValue {
	return terra.ReferenceString(rq.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type ConfigurationState struct {
	Type       string            `json:"type"`
	Parameters []ParametersState `json:"parameters"`
}

type ParametersState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type ResourceQueryState struct {
	Query string `json:"query"`
	Type  string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Update string `json:"update"`
}
