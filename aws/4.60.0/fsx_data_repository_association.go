// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	fsxdatarepositoryassociation "github.com/golingon/terraproviders/aws/4.60.0/fsxdatarepositoryassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFsxDataRepositoryAssociation(name string, args FsxDataRepositoryAssociationArgs) *FsxDataRepositoryAssociation {
	return &FsxDataRepositoryAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FsxDataRepositoryAssociation)(nil)

type FsxDataRepositoryAssociation struct {
	Name  string
	Args  FsxDataRepositoryAssociationArgs
	state *fsxDataRepositoryAssociationState
}

func (fdra *FsxDataRepositoryAssociation) Type() string {
	return "aws_fsx_data_repository_association"
}

func (fdra *FsxDataRepositoryAssociation) LocalName() string {
	return fdra.Name
}

func (fdra *FsxDataRepositoryAssociation) Configuration() interface{} {
	return fdra.Args
}

func (fdra *FsxDataRepositoryAssociation) Attributes() fsxDataRepositoryAssociationAttributes {
	return fsxDataRepositoryAssociationAttributes{ref: terra.ReferenceResource(fdra)}
}

func (fdra *FsxDataRepositoryAssociation) ImportState(av io.Reader) error {
	fdra.state = &fsxDataRepositoryAssociationState{}
	if err := json.NewDecoder(av).Decode(fdra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fdra.Type(), fdra.LocalName(), err)
	}
	return nil
}

func (fdra *FsxDataRepositoryAssociation) State() (*fsxDataRepositoryAssociationState, bool) {
	return fdra.state, fdra.state != nil
}

func (fdra *FsxDataRepositoryAssociation) StateMust() *fsxDataRepositoryAssociationState {
	if fdra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fdra.Type(), fdra.LocalName()))
	}
	return fdra.state
}

func (fdra *FsxDataRepositoryAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(fdra)
}

type FsxDataRepositoryAssociationArgs struct {
	// BatchImportMetaDataOnCreate: bool, optional
	BatchImportMetaDataOnCreate terra.BoolValue `hcl:"batch_import_meta_data_on_create,attr"`
	// DataRepositoryPath: string, required
	DataRepositoryPath terra.StringValue `hcl:"data_repository_path,attr" validate:"required"`
	// DeleteDataInFilesystem: bool, optional
	DeleteDataInFilesystem terra.BoolValue `hcl:"delete_data_in_filesystem,attr"`
	// FileSystemId: string, required
	FileSystemId terra.StringValue `hcl:"file_system_id,attr" validate:"required"`
	// FileSystemPath: string, required
	FileSystemPath terra.StringValue `hcl:"file_system_path,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImportedFileChunkSize: number, optional
	ImportedFileChunkSize terra.NumberValue `hcl:"imported_file_chunk_size,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// S3: optional
	S3 *fsxdatarepositoryassociation.S3 `hcl:"s3,block"`
	// Timeouts: optional
	Timeouts *fsxdatarepositoryassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FsxDataRepositoryAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type fsxDataRepositoryAssociationAttributes struct {
	ref terra.Reference
}

func (fdra fsxDataRepositoryAssociationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(fdra.ref.Append("arn"))
}

func (fdra fsxDataRepositoryAssociationAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceString(fdra.ref.Append("association_id"))
}

func (fdra fsxDataRepositoryAssociationAttributes) BatchImportMetaDataOnCreate() terra.BoolValue {
	return terra.ReferenceBool(fdra.ref.Append("batch_import_meta_data_on_create"))
}

func (fdra fsxDataRepositoryAssociationAttributes) DataRepositoryPath() terra.StringValue {
	return terra.ReferenceString(fdra.ref.Append("data_repository_path"))
}

func (fdra fsxDataRepositoryAssociationAttributes) DeleteDataInFilesystem() terra.BoolValue {
	return terra.ReferenceBool(fdra.ref.Append("delete_data_in_filesystem"))
}

func (fdra fsxDataRepositoryAssociationAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceString(fdra.ref.Append("file_system_id"))
}

func (fdra fsxDataRepositoryAssociationAttributes) FileSystemPath() terra.StringValue {
	return terra.ReferenceString(fdra.ref.Append("file_system_path"))
}

func (fdra fsxDataRepositoryAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fdra.ref.Append("id"))
}

func (fdra fsxDataRepositoryAssociationAttributes) ImportedFileChunkSize() terra.NumberValue {
	return terra.ReferenceNumber(fdra.ref.Append("imported_file_chunk_size"))
}

func (fdra fsxDataRepositoryAssociationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fdra.ref.Append("tags"))
}

func (fdra fsxDataRepositoryAssociationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fdra.ref.Append("tags_all"))
}

func (fdra fsxDataRepositoryAssociationAttributes) S3() terra.ListValue[fsxdatarepositoryassociation.S3Attributes] {
	return terra.ReferenceList[fsxdatarepositoryassociation.S3Attributes](fdra.ref.Append("s3"))
}

func (fdra fsxDataRepositoryAssociationAttributes) Timeouts() fsxdatarepositoryassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[fsxdatarepositoryassociation.TimeoutsAttributes](fdra.ref.Append("timeouts"))
}

type fsxDataRepositoryAssociationState struct {
	Arn                         string                                      `json:"arn"`
	AssociationId               string                                      `json:"association_id"`
	BatchImportMetaDataOnCreate bool                                        `json:"batch_import_meta_data_on_create"`
	DataRepositoryPath          string                                      `json:"data_repository_path"`
	DeleteDataInFilesystem      bool                                        `json:"delete_data_in_filesystem"`
	FileSystemId                string                                      `json:"file_system_id"`
	FileSystemPath              string                                      `json:"file_system_path"`
	Id                          string                                      `json:"id"`
	ImportedFileChunkSize       float64                                     `json:"imported_file_chunk_size"`
	Tags                        map[string]string                           `json:"tags"`
	TagsAll                     map[string]string                           `json:"tags_all"`
	S3                          []fsxdatarepositoryassociation.S3State      `json:"s3"`
	Timeouts                    *fsxdatarepositoryassociation.TimeoutsState `json:"timeouts"`
}
