// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dbproxyendpoint "github.com/golingon/terraproviders/aws/4.60.0/dbproxyendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDbProxyEndpoint(name string, args DbProxyEndpointArgs) *DbProxyEndpoint {
	return &DbProxyEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DbProxyEndpoint)(nil)

type DbProxyEndpoint struct {
	Name  string
	Args  DbProxyEndpointArgs
	state *dbProxyEndpointState
}

func (dpe *DbProxyEndpoint) Type() string {
	return "aws_db_proxy_endpoint"
}

func (dpe *DbProxyEndpoint) LocalName() string {
	return dpe.Name
}

func (dpe *DbProxyEndpoint) Configuration() interface{} {
	return dpe.Args
}

func (dpe *DbProxyEndpoint) Attributes() dbProxyEndpointAttributes {
	return dbProxyEndpointAttributes{ref: terra.ReferenceResource(dpe)}
}

func (dpe *DbProxyEndpoint) ImportState(av io.Reader) error {
	dpe.state = &dbProxyEndpointState{}
	if err := json.NewDecoder(av).Decode(dpe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dpe.Type(), dpe.LocalName(), err)
	}
	return nil
}

func (dpe *DbProxyEndpoint) State() (*dbProxyEndpointState, bool) {
	return dpe.state, dpe.state != nil
}

func (dpe *DbProxyEndpoint) StateMust() *dbProxyEndpointState {
	if dpe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dpe.Type(), dpe.LocalName()))
	}
	return dpe.state
}

func (dpe *DbProxyEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(dpe)
}

type DbProxyEndpointArgs struct {
	// DbProxyEndpointName: string, required
	DbProxyEndpointName terra.StringValue `hcl:"db_proxy_endpoint_name,attr" validate:"required"`
	// DbProxyName: string, required
	DbProxyName terra.StringValue `hcl:"db_proxy_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetRole: string, optional
	TargetRole terra.StringValue `hcl:"target_role,attr"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// VpcSubnetIds: set of string, required
	VpcSubnetIds terra.SetValue[terra.StringValue] `hcl:"vpc_subnet_ids,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *dbproxyendpoint.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DbProxyEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dbProxyEndpointAttributes struct {
	ref terra.Reference
}

func (dpe dbProxyEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dpe.ref.Append("arn"))
}

func (dpe dbProxyEndpointAttributes) DbProxyEndpointName() terra.StringValue {
	return terra.ReferenceString(dpe.ref.Append("db_proxy_endpoint_name"))
}

func (dpe dbProxyEndpointAttributes) DbProxyName() terra.StringValue {
	return terra.ReferenceString(dpe.ref.Append("db_proxy_name"))
}

func (dpe dbProxyEndpointAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(dpe.ref.Append("endpoint"))
}

func (dpe dbProxyEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dpe.ref.Append("id"))
}

func (dpe dbProxyEndpointAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceBool(dpe.ref.Append("is_default"))
}

func (dpe dbProxyEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dpe.ref.Append("tags"))
}

func (dpe dbProxyEndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dpe.ref.Append("tags_all"))
}

func (dpe dbProxyEndpointAttributes) TargetRole() terra.StringValue {
	return terra.ReferenceString(dpe.ref.Append("target_role"))
}

func (dpe dbProxyEndpointAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(dpe.ref.Append("vpc_id"))
}

func (dpe dbProxyEndpointAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dpe.ref.Append("vpc_security_group_ids"))
}

func (dpe dbProxyEndpointAttributes) VpcSubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dpe.ref.Append("vpc_subnet_ids"))
}

func (dpe dbProxyEndpointAttributes) Timeouts() dbproxyendpoint.TimeoutsAttributes {
	return terra.ReferenceSingle[dbproxyendpoint.TimeoutsAttributes](dpe.ref.Append("timeouts"))
}

type dbProxyEndpointState struct {
	Arn                 string                         `json:"arn"`
	DbProxyEndpointName string                         `json:"db_proxy_endpoint_name"`
	DbProxyName         string                         `json:"db_proxy_name"`
	Endpoint            string                         `json:"endpoint"`
	Id                  string                         `json:"id"`
	IsDefault           bool                           `json:"is_default"`
	Tags                map[string]string              `json:"tags"`
	TagsAll             map[string]string              `json:"tags_all"`
	TargetRole          string                         `json:"target_role"`
	VpcId               string                         `json:"vpc_id"`
	VpcSecurityGroupIds []string                       `json:"vpc_security_group_ids"`
	VpcSubnetIds        []string                       `json:"vpc_subnet_ids"`
	Timeouts            *dbproxyendpoint.TimeoutsState `json:"timeouts"`
}
