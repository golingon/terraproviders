// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkmanagercorenetworkpolicyattachment "github.com/golingon/terraproviders/aws/4.60.0/networkmanagercorenetworkpolicyattachment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkmanagerCoreNetworkPolicyAttachment(name string, args NetworkmanagerCoreNetworkPolicyAttachmentArgs) *NetworkmanagerCoreNetworkPolicyAttachment {
	return &NetworkmanagerCoreNetworkPolicyAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkmanagerCoreNetworkPolicyAttachment)(nil)

type NetworkmanagerCoreNetworkPolicyAttachment struct {
	Name  string
	Args  NetworkmanagerCoreNetworkPolicyAttachmentArgs
	state *networkmanagerCoreNetworkPolicyAttachmentState
}

func (ncnpa *NetworkmanagerCoreNetworkPolicyAttachment) Type() string {
	return "aws_networkmanager_core_network_policy_attachment"
}

func (ncnpa *NetworkmanagerCoreNetworkPolicyAttachment) LocalName() string {
	return ncnpa.Name
}

func (ncnpa *NetworkmanagerCoreNetworkPolicyAttachment) Configuration() interface{} {
	return ncnpa.Args
}

func (ncnpa *NetworkmanagerCoreNetworkPolicyAttachment) Attributes() networkmanagerCoreNetworkPolicyAttachmentAttributes {
	return networkmanagerCoreNetworkPolicyAttachmentAttributes{ref: terra.ReferenceResource(ncnpa)}
}

func (ncnpa *NetworkmanagerCoreNetworkPolicyAttachment) ImportState(av io.Reader) error {
	ncnpa.state = &networkmanagerCoreNetworkPolicyAttachmentState{}
	if err := json.NewDecoder(av).Decode(ncnpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ncnpa.Type(), ncnpa.LocalName(), err)
	}
	return nil
}

func (ncnpa *NetworkmanagerCoreNetworkPolicyAttachment) State() (*networkmanagerCoreNetworkPolicyAttachmentState, bool) {
	return ncnpa.state, ncnpa.state != nil
}

func (ncnpa *NetworkmanagerCoreNetworkPolicyAttachment) StateMust() *networkmanagerCoreNetworkPolicyAttachmentState {
	if ncnpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ncnpa.Type(), ncnpa.LocalName()))
	}
	return ncnpa.state
}

func (ncnpa *NetworkmanagerCoreNetworkPolicyAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(ncnpa)
}

type NetworkmanagerCoreNetworkPolicyAttachmentArgs struct {
	// CoreNetworkId: string, required
	CoreNetworkId terra.StringValue `hcl:"core_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyDocument: string, required
	PolicyDocument terra.StringValue `hcl:"policy_document,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *networkmanagercorenetworkpolicyattachment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkmanagerCoreNetworkPolicyAttachment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkmanagerCoreNetworkPolicyAttachmentAttributes struct {
	ref terra.Reference
}

func (ncnpa networkmanagerCoreNetworkPolicyAttachmentAttributes) CoreNetworkId() terra.StringValue {
	return terra.ReferenceString(ncnpa.ref.Append("core_network_id"))
}

func (ncnpa networkmanagerCoreNetworkPolicyAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ncnpa.ref.Append("id"))
}

func (ncnpa networkmanagerCoreNetworkPolicyAttachmentAttributes) PolicyDocument() terra.StringValue {
	return terra.ReferenceString(ncnpa.ref.Append("policy_document"))
}

func (ncnpa networkmanagerCoreNetworkPolicyAttachmentAttributes) State() terra.StringValue {
	return terra.ReferenceString(ncnpa.ref.Append("state"))
}

func (ncnpa networkmanagerCoreNetworkPolicyAttachmentAttributes) Timeouts() networkmanagercorenetworkpolicyattachment.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagercorenetworkpolicyattachment.TimeoutsAttributes](ncnpa.ref.Append("timeouts"))
}

type networkmanagerCoreNetworkPolicyAttachmentState struct {
	CoreNetworkId  string                                                   `json:"core_network_id"`
	Id             string                                                   `json:"id"`
	PolicyDocument string                                                   `json:"policy_document"`
	State          string                                                   `json:"state"`
	Timeouts       *networkmanagercorenetworkpolicyattachment.TimeoutsState `json:"timeouts"`
}
