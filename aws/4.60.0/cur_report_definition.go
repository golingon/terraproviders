// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCurReportDefinition(name string, args CurReportDefinitionArgs) *CurReportDefinition {
	return &CurReportDefinition{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CurReportDefinition)(nil)

type CurReportDefinition struct {
	Name  string
	Args  CurReportDefinitionArgs
	state *curReportDefinitionState
}

func (crd *CurReportDefinition) Type() string {
	return "aws_cur_report_definition"
}

func (crd *CurReportDefinition) LocalName() string {
	return crd.Name
}

func (crd *CurReportDefinition) Configuration() interface{} {
	return crd.Args
}

func (crd *CurReportDefinition) Attributes() curReportDefinitionAttributes {
	return curReportDefinitionAttributes{ref: terra.ReferenceResource(crd)}
}

func (crd *CurReportDefinition) ImportState(av io.Reader) error {
	crd.state = &curReportDefinitionState{}
	if err := json.NewDecoder(av).Decode(crd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crd.Type(), crd.LocalName(), err)
	}
	return nil
}

func (crd *CurReportDefinition) State() (*curReportDefinitionState, bool) {
	return crd.state, crd.state != nil
}

func (crd *CurReportDefinition) StateMust() *curReportDefinitionState {
	if crd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crd.Type(), crd.LocalName()))
	}
	return crd.state
}

func (crd *CurReportDefinition) DependOn() terra.Reference {
	return terra.ReferenceResource(crd)
}

type CurReportDefinitionArgs struct {
	// AdditionalArtifacts: set of string, optional
	AdditionalArtifacts terra.SetValue[terra.StringValue] `hcl:"additional_artifacts,attr"`
	// AdditionalSchemaElements: set of string, required
	AdditionalSchemaElements terra.SetValue[terra.StringValue] `hcl:"additional_schema_elements,attr" validate:"required"`
	// Compression: string, required
	Compression terra.StringValue `hcl:"compression,attr" validate:"required"`
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RefreshClosedReports: bool, optional
	RefreshClosedReports terra.BoolValue `hcl:"refresh_closed_reports,attr"`
	// ReportName: string, required
	ReportName terra.StringValue `hcl:"report_name,attr" validate:"required"`
	// ReportVersioning: string, optional
	ReportVersioning terra.StringValue `hcl:"report_versioning,attr"`
	// S3Bucket: string, required
	S3Bucket terra.StringValue `hcl:"s3_bucket,attr" validate:"required"`
	// S3Prefix: string, optional
	S3Prefix terra.StringValue `hcl:"s3_prefix,attr"`
	// S3Region: string, required
	S3Region terra.StringValue `hcl:"s3_region,attr" validate:"required"`
	// TimeUnit: string, required
	TimeUnit terra.StringValue `hcl:"time_unit,attr" validate:"required"`
	// DependsOn contains resources that CurReportDefinition depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type curReportDefinitionAttributes struct {
	ref terra.Reference
}

func (crd curReportDefinitionAttributes) AdditionalArtifacts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](crd.ref.Append("additional_artifacts"))
}

func (crd curReportDefinitionAttributes) AdditionalSchemaElements() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](crd.ref.Append("additional_schema_elements"))
}

func (crd curReportDefinitionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(crd.ref.Append("arn"))
}

func (crd curReportDefinitionAttributes) Compression() terra.StringValue {
	return terra.ReferenceString(crd.ref.Append("compression"))
}

func (crd curReportDefinitionAttributes) Format() terra.StringValue {
	return terra.ReferenceString(crd.ref.Append("format"))
}

func (crd curReportDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crd.ref.Append("id"))
}

func (crd curReportDefinitionAttributes) RefreshClosedReports() terra.BoolValue {
	return terra.ReferenceBool(crd.ref.Append("refresh_closed_reports"))
}

func (crd curReportDefinitionAttributes) ReportName() terra.StringValue {
	return terra.ReferenceString(crd.ref.Append("report_name"))
}

func (crd curReportDefinitionAttributes) ReportVersioning() terra.StringValue {
	return terra.ReferenceString(crd.ref.Append("report_versioning"))
}

func (crd curReportDefinitionAttributes) S3Bucket() terra.StringValue {
	return terra.ReferenceString(crd.ref.Append("s3_bucket"))
}

func (crd curReportDefinitionAttributes) S3Prefix() terra.StringValue {
	return terra.ReferenceString(crd.ref.Append("s3_prefix"))
}

func (crd curReportDefinitionAttributes) S3Region() terra.StringValue {
	return terra.ReferenceString(crd.ref.Append("s3_region"))
}

func (crd curReportDefinitionAttributes) TimeUnit() terra.StringValue {
	return terra.ReferenceString(crd.ref.Append("time_unit"))
}

type curReportDefinitionState struct {
	AdditionalArtifacts      []string `json:"additional_artifacts"`
	AdditionalSchemaElements []string `json:"additional_schema_elements"`
	Arn                      string   `json:"arn"`
	Compression              string   `json:"compression"`
	Format                   string   `json:"format"`
	Id                       string   `json:"id"`
	RefreshClosedReports     bool     `json:"refresh_closed_reports"`
	ReportName               string   `json:"report_name"`
	ReportVersioning         string   `json:"report_versioning"`
	S3Bucket                 string   `json:"s3_bucket"`
	S3Prefix                 string   `json:"s3_prefix"`
	S3Region                 string   `json:"s3_region"`
	TimeUnit                 string   `json:"time_unit"`
}
