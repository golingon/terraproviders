// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataservicecataloglaunchpaths

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Summaries struct {
	// ConstraintSummaries: min=0
	ConstraintSummaries []ConstraintSummaries `hcl:"constraint_summaries,block" validate:"min=0"`
}

type ConstraintSummaries struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type SummariesAttributes struct {
	ref terra.Reference
}

func (s SummariesAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SummariesAttributes) InternalWithRef(ref terra.Reference) SummariesAttributes {
	return SummariesAttributes{ref: ref}
}

func (s SummariesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SummariesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s SummariesAttributes) PathId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("path_id"))
}

func (s SummariesAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("tags"))
}

func (s SummariesAttributes) ConstraintSummaries() terra.ListValue[ConstraintSummariesAttributes] {
	return terra.ReferenceAsList[ConstraintSummariesAttributes](s.ref.Append("constraint_summaries"))
}

type ConstraintSummariesAttributes struct {
	ref terra.Reference
}

func (cs ConstraintSummariesAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs ConstraintSummariesAttributes) InternalWithRef(ref terra.Reference) ConstraintSummariesAttributes {
	return ConstraintSummariesAttributes{ref: ref}
}

func (cs ConstraintSummariesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs ConstraintSummariesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("description"))
}

func (cs ConstraintSummariesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type SummariesState struct {
	Name                string                     `json:"name"`
	PathId              string                     `json:"path_id"`
	Tags                map[string]string          `json:"tags"`
	ConstraintSummaries []ConstraintSummariesState `json:"constraint_summaries"`
}

type ConstraintSummariesState struct {
	Description string `json:"description"`
	Type        string `json:"type"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
