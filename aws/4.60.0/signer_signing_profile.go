// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	signersigningprofile "github.com/golingon/terraproviders/aws/4.60.0/signersigningprofile"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSignerSigningProfile(name string, args SignerSigningProfileArgs) *SignerSigningProfile {
	return &SignerSigningProfile{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SignerSigningProfile)(nil)

type SignerSigningProfile struct {
	Name  string
	Args  SignerSigningProfileArgs
	state *signerSigningProfileState
}

func (ssp *SignerSigningProfile) Type() string {
	return "aws_signer_signing_profile"
}

func (ssp *SignerSigningProfile) LocalName() string {
	return ssp.Name
}

func (ssp *SignerSigningProfile) Configuration() interface{} {
	return ssp.Args
}

func (ssp *SignerSigningProfile) Attributes() signerSigningProfileAttributes {
	return signerSigningProfileAttributes{ref: terra.ReferenceResource(ssp)}
}

func (ssp *SignerSigningProfile) ImportState(av io.Reader) error {
	ssp.state = &signerSigningProfileState{}
	if err := json.NewDecoder(av).Decode(ssp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssp.Type(), ssp.LocalName(), err)
	}
	return nil
}

func (ssp *SignerSigningProfile) State() (*signerSigningProfileState, bool) {
	return ssp.state, ssp.state != nil
}

func (ssp *SignerSigningProfile) StateMust() *signerSigningProfileState {
	if ssp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssp.Type(), ssp.LocalName()))
	}
	return ssp.state
}

func (ssp *SignerSigningProfile) DependOn() terra.Reference {
	return terra.ReferenceResource(ssp)
}

type SignerSigningProfileArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// PlatformId: string, required
	PlatformId terra.StringValue `hcl:"platform_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// RevocationRecord: min=0
	RevocationRecord []signersigningprofile.RevocationRecord `hcl:"revocation_record,block" validate:"min=0"`
	// SignatureValidityPeriod: optional
	SignatureValidityPeriod *signersigningprofile.SignatureValidityPeriod `hcl:"signature_validity_period,block"`
	// DependsOn contains resources that SignerSigningProfile depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type signerSigningProfileAttributes struct {
	ref terra.Reference
}

func (ssp signerSigningProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("arn"))
}

func (ssp signerSigningProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("id"))
}

func (ssp signerSigningProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("name"))
}

func (ssp signerSigningProfileAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("name_prefix"))
}

func (ssp signerSigningProfileAttributes) PlatformDisplayName() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("platform_display_name"))
}

func (ssp signerSigningProfileAttributes) PlatformId() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("platform_id"))
}

func (ssp signerSigningProfileAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("status"))
}

func (ssp signerSigningProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ssp.ref.Append("tags"))
}

func (ssp signerSigningProfileAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ssp.ref.Append("tags_all"))
}

func (ssp signerSigningProfileAttributes) Version() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("version"))
}

func (ssp signerSigningProfileAttributes) VersionArn() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("version_arn"))
}

func (ssp signerSigningProfileAttributes) RevocationRecord() terra.ListValue[signersigningprofile.RevocationRecordAttributes] {
	return terra.ReferenceList[signersigningprofile.RevocationRecordAttributes](ssp.ref.Append("revocation_record"))
}

func (ssp signerSigningProfileAttributes) SignatureValidityPeriod() terra.ListValue[signersigningprofile.SignatureValidityPeriodAttributes] {
	return terra.ReferenceList[signersigningprofile.SignatureValidityPeriodAttributes](ssp.ref.Append("signature_validity_period"))
}

type signerSigningProfileState struct {
	Arn                     string                                              `json:"arn"`
	Id                      string                                              `json:"id"`
	Name                    string                                              `json:"name"`
	NamePrefix              string                                              `json:"name_prefix"`
	PlatformDisplayName     string                                              `json:"platform_display_name"`
	PlatformId              string                                              `json:"platform_id"`
	Status                  string                                              `json:"status"`
	Tags                    map[string]string                                   `json:"tags"`
	TagsAll                 map[string]string                                   `json:"tags_all"`
	Version                 string                                              `json:"version"`
	VersionArn              string                                              `json:"version_arn"`
	RevocationRecord        []signersigningprofile.RevocationRecordState        `json:"revocation_record"`
	SignatureValidityPeriod []signersigningprofile.SignatureValidityPeriodState `json:"signature_validity_period"`
}
