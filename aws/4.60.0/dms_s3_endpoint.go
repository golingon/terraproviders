// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dmss3endpoint "github.com/golingon/terraproviders/aws/4.60.0/dmss3endpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDmsS3Endpoint(name string, args DmsS3EndpointArgs) *DmsS3Endpoint {
	return &DmsS3Endpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DmsS3Endpoint)(nil)

type DmsS3Endpoint struct {
	Name  string
	Args  DmsS3EndpointArgs
	state *dmsS3EndpointState
}

func (dse *DmsS3Endpoint) Type() string {
	return "aws_dms_s3_endpoint"
}

func (dse *DmsS3Endpoint) LocalName() string {
	return dse.Name
}

func (dse *DmsS3Endpoint) Configuration() interface{} {
	return dse.Args
}

func (dse *DmsS3Endpoint) Attributes() dmsS3EndpointAttributes {
	return dmsS3EndpointAttributes{ref: terra.ReferenceResource(dse)}
}

func (dse *DmsS3Endpoint) ImportState(av io.Reader) error {
	dse.state = &dmsS3EndpointState{}
	if err := json.NewDecoder(av).Decode(dse.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dse.Type(), dse.LocalName(), err)
	}
	return nil
}

func (dse *DmsS3Endpoint) State() (*dmsS3EndpointState, bool) {
	return dse.state, dse.state != nil
}

func (dse *DmsS3Endpoint) StateMust() *dmsS3EndpointState {
	if dse.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dse.Type(), dse.LocalName()))
	}
	return dse.state
}

func (dse *DmsS3Endpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(dse)
}

type DmsS3EndpointArgs struct {
	// AddColumnName: bool, optional
	AddColumnName terra.BoolValue `hcl:"add_column_name,attr"`
	// AddTrailingPaddingCharacter: bool, optional
	AddTrailingPaddingCharacter terra.BoolValue `hcl:"add_trailing_padding_character,attr"`
	// BucketFolder: string, optional
	BucketFolder terra.StringValue `hcl:"bucket_folder,attr"`
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// CannedAclForObjects: string, optional
	CannedAclForObjects terra.StringValue `hcl:"canned_acl_for_objects,attr"`
	// CdcInsertsAndUpdates: bool, optional
	CdcInsertsAndUpdates terra.BoolValue `hcl:"cdc_inserts_and_updates,attr"`
	// CdcInsertsOnly: bool, optional
	CdcInsertsOnly terra.BoolValue `hcl:"cdc_inserts_only,attr"`
	// CdcMaxBatchInterval: number, optional
	CdcMaxBatchInterval terra.NumberValue `hcl:"cdc_max_batch_interval,attr"`
	// CdcMinFileSize: number, optional
	CdcMinFileSize terra.NumberValue `hcl:"cdc_min_file_size,attr"`
	// CdcPath: string, optional
	CdcPath terra.StringValue `hcl:"cdc_path,attr"`
	// CertificateArn: string, optional
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr"`
	// CompressionType: string, optional
	CompressionType terra.StringValue `hcl:"compression_type,attr"`
	// CsvDelimiter: string, optional
	CsvDelimiter terra.StringValue `hcl:"csv_delimiter,attr"`
	// CsvNoSupValue: string, optional
	CsvNoSupValue terra.StringValue `hcl:"csv_no_sup_value,attr"`
	// CsvNullValue: string, optional
	CsvNullValue terra.StringValue `hcl:"csv_null_value,attr"`
	// CsvRowDelimiter: string, optional
	CsvRowDelimiter terra.StringValue `hcl:"csv_row_delimiter,attr"`
	// DataFormat: string, optional
	DataFormat terra.StringValue `hcl:"data_format,attr"`
	// DataPageSize: number, optional
	DataPageSize terra.NumberValue `hcl:"data_page_size,attr"`
	// DatePartitionDelimiter: string, optional
	DatePartitionDelimiter terra.StringValue `hcl:"date_partition_delimiter,attr"`
	// DatePartitionEnabled: bool, optional
	DatePartitionEnabled terra.BoolValue `hcl:"date_partition_enabled,attr"`
	// DatePartitionSequence: string, optional
	DatePartitionSequence terra.StringValue `hcl:"date_partition_sequence,attr"`
	// DatePartitionTimezone: string, optional
	DatePartitionTimezone terra.StringValue `hcl:"date_partition_timezone,attr"`
	// DetachTargetOnLobLookupFailureParquet: bool, optional
	DetachTargetOnLobLookupFailureParquet terra.BoolValue `hcl:"detach_target_on_lob_lookup_failure_parquet,attr"`
	// DictPageSizeLimit: number, optional
	DictPageSizeLimit terra.NumberValue `hcl:"dict_page_size_limit,attr"`
	// EnableStatistics: bool, optional
	EnableStatistics terra.BoolValue `hcl:"enable_statistics,attr"`
	// EncodingType: string, optional
	EncodingType terra.StringValue `hcl:"encoding_type,attr"`
	// EncryptionMode: string, optional
	EncryptionMode terra.StringValue `hcl:"encryption_mode,attr"`
	// EndpointId: string, required
	EndpointId terra.StringValue `hcl:"endpoint_id,attr" validate:"required"`
	// EndpointType: string, required
	EndpointType terra.StringValue `hcl:"endpoint_type,attr" validate:"required"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// ExternalTableDefinition: string, optional
	ExternalTableDefinition terra.StringValue `hcl:"external_table_definition,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreHeaderRows: number, optional
	IgnoreHeaderRows terra.NumberValue `hcl:"ignore_header_rows,attr"`
	// IncludeOpForFullLoad: bool, optional
	IncludeOpForFullLoad terra.BoolValue `hcl:"include_op_for_full_load,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// MaxFileSize: number, optional
	MaxFileSize terra.NumberValue `hcl:"max_file_size,attr"`
	// ParquetTimestampInMillisecond: bool, optional
	ParquetTimestampInMillisecond terra.BoolValue `hcl:"parquet_timestamp_in_millisecond,attr"`
	// ParquetVersion: string, optional
	ParquetVersion terra.StringValue `hcl:"parquet_version,attr"`
	// PreserveTransactions: bool, optional
	PreserveTransactions terra.BoolValue `hcl:"preserve_transactions,attr"`
	// Rfc4180: bool, optional
	Rfc4180 terra.BoolValue `hcl:"rfc_4180,attr"`
	// RowGroupLength: number, optional
	RowGroupLength terra.NumberValue `hcl:"row_group_length,attr"`
	// ServerSideEncryptionKmsKeyId: string, optional
	ServerSideEncryptionKmsKeyId terra.StringValue `hcl:"server_side_encryption_kms_key_id,attr"`
	// ServiceAccessRoleArn: string, required
	ServiceAccessRoleArn terra.StringValue `hcl:"service_access_role_arn,attr" validate:"required"`
	// SslMode: string, optional
	SslMode terra.StringValue `hcl:"ssl_mode,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TimestampColumnName: string, optional
	TimestampColumnName terra.StringValue `hcl:"timestamp_column_name,attr"`
	// UseCsvNoSupValue: bool, optional
	UseCsvNoSupValue terra.BoolValue `hcl:"use_csv_no_sup_value,attr"`
	// UseTaskStartTimeForFullLoadTimestamp: bool, optional
	UseTaskStartTimeForFullLoadTimestamp terra.BoolValue `hcl:"use_task_start_time_for_full_load_timestamp,attr"`
	// Timeouts: optional
	Timeouts *dmss3endpoint.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DmsS3Endpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dmsS3EndpointAttributes struct {
	ref terra.Reference
}

func (dse dmsS3EndpointAttributes) AddColumnName() terra.BoolValue {
	return terra.ReferenceBool(dse.ref.Append("add_column_name"))
}

func (dse dmsS3EndpointAttributes) AddTrailingPaddingCharacter() terra.BoolValue {
	return terra.ReferenceBool(dse.ref.Append("add_trailing_padding_character"))
}

func (dse dmsS3EndpointAttributes) BucketFolder() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("bucket_folder"))
}

func (dse dmsS3EndpointAttributes) BucketName() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("bucket_name"))
}

func (dse dmsS3EndpointAttributes) CannedAclForObjects() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("canned_acl_for_objects"))
}

func (dse dmsS3EndpointAttributes) CdcInsertsAndUpdates() terra.BoolValue {
	return terra.ReferenceBool(dse.ref.Append("cdc_inserts_and_updates"))
}

func (dse dmsS3EndpointAttributes) CdcInsertsOnly() terra.BoolValue {
	return terra.ReferenceBool(dse.ref.Append("cdc_inserts_only"))
}

func (dse dmsS3EndpointAttributes) CdcMaxBatchInterval() terra.NumberValue {
	return terra.ReferenceNumber(dse.ref.Append("cdc_max_batch_interval"))
}

func (dse dmsS3EndpointAttributes) CdcMinFileSize() terra.NumberValue {
	return terra.ReferenceNumber(dse.ref.Append("cdc_min_file_size"))
}

func (dse dmsS3EndpointAttributes) CdcPath() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("cdc_path"))
}

func (dse dmsS3EndpointAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("certificate_arn"))
}

func (dse dmsS3EndpointAttributes) CompressionType() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("compression_type"))
}

func (dse dmsS3EndpointAttributes) CsvDelimiter() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("csv_delimiter"))
}

func (dse dmsS3EndpointAttributes) CsvNoSupValue() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("csv_no_sup_value"))
}

func (dse dmsS3EndpointAttributes) CsvNullValue() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("csv_null_value"))
}

func (dse dmsS3EndpointAttributes) CsvRowDelimiter() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("csv_row_delimiter"))
}

func (dse dmsS3EndpointAttributes) DataFormat() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("data_format"))
}

func (dse dmsS3EndpointAttributes) DataPageSize() terra.NumberValue {
	return terra.ReferenceNumber(dse.ref.Append("data_page_size"))
}

func (dse dmsS3EndpointAttributes) DatePartitionDelimiter() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("date_partition_delimiter"))
}

func (dse dmsS3EndpointAttributes) DatePartitionEnabled() terra.BoolValue {
	return terra.ReferenceBool(dse.ref.Append("date_partition_enabled"))
}

func (dse dmsS3EndpointAttributes) DatePartitionSequence() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("date_partition_sequence"))
}

func (dse dmsS3EndpointAttributes) DatePartitionTimezone() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("date_partition_timezone"))
}

func (dse dmsS3EndpointAttributes) DetachTargetOnLobLookupFailureParquet() terra.BoolValue {
	return terra.ReferenceBool(dse.ref.Append("detach_target_on_lob_lookup_failure_parquet"))
}

func (dse dmsS3EndpointAttributes) DictPageSizeLimit() terra.NumberValue {
	return terra.ReferenceNumber(dse.ref.Append("dict_page_size_limit"))
}

func (dse dmsS3EndpointAttributes) EnableStatistics() terra.BoolValue {
	return terra.ReferenceBool(dse.ref.Append("enable_statistics"))
}

func (dse dmsS3EndpointAttributes) EncodingType() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("encoding_type"))
}

func (dse dmsS3EndpointAttributes) EncryptionMode() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("encryption_mode"))
}

func (dse dmsS3EndpointAttributes) EndpointArn() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("endpoint_arn"))
}

func (dse dmsS3EndpointAttributes) EndpointId() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("endpoint_id"))
}

func (dse dmsS3EndpointAttributes) EndpointType() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("endpoint_type"))
}

func (dse dmsS3EndpointAttributes) EngineDisplayName() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("engine_display_name"))
}

func (dse dmsS3EndpointAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("expected_bucket_owner"))
}

func (dse dmsS3EndpointAttributes) ExternalId() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("external_id"))
}

func (dse dmsS3EndpointAttributes) ExternalTableDefinition() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("external_table_definition"))
}

func (dse dmsS3EndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("id"))
}

func (dse dmsS3EndpointAttributes) IgnoreHeaderRows() terra.NumberValue {
	return terra.ReferenceNumber(dse.ref.Append("ignore_header_rows"))
}

func (dse dmsS3EndpointAttributes) IncludeOpForFullLoad() terra.BoolValue {
	return terra.ReferenceBool(dse.ref.Append("include_op_for_full_load"))
}

func (dse dmsS3EndpointAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("kms_key_arn"))
}

func (dse dmsS3EndpointAttributes) MaxFileSize() terra.NumberValue {
	return terra.ReferenceNumber(dse.ref.Append("max_file_size"))
}

func (dse dmsS3EndpointAttributes) ParquetTimestampInMillisecond() terra.BoolValue {
	return terra.ReferenceBool(dse.ref.Append("parquet_timestamp_in_millisecond"))
}

func (dse dmsS3EndpointAttributes) ParquetVersion() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("parquet_version"))
}

func (dse dmsS3EndpointAttributes) PreserveTransactions() terra.BoolValue {
	return terra.ReferenceBool(dse.ref.Append("preserve_transactions"))
}

func (dse dmsS3EndpointAttributes) Rfc4180() terra.BoolValue {
	return terra.ReferenceBool(dse.ref.Append("rfc_4180"))
}

func (dse dmsS3EndpointAttributes) RowGroupLength() terra.NumberValue {
	return terra.ReferenceNumber(dse.ref.Append("row_group_length"))
}

func (dse dmsS3EndpointAttributes) ServerSideEncryptionKmsKeyId() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("server_side_encryption_kms_key_id"))
}

func (dse dmsS3EndpointAttributes) ServiceAccessRoleArn() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("service_access_role_arn"))
}

func (dse dmsS3EndpointAttributes) SslMode() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("ssl_mode"))
}

func (dse dmsS3EndpointAttributes) Status() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("status"))
}

func (dse dmsS3EndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dse.ref.Append("tags"))
}

func (dse dmsS3EndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dse.ref.Append("tags_all"))
}

func (dse dmsS3EndpointAttributes) TimestampColumnName() terra.StringValue {
	return terra.ReferenceString(dse.ref.Append("timestamp_column_name"))
}

func (dse dmsS3EndpointAttributes) UseCsvNoSupValue() terra.BoolValue {
	return terra.ReferenceBool(dse.ref.Append("use_csv_no_sup_value"))
}

func (dse dmsS3EndpointAttributes) UseTaskStartTimeForFullLoadTimestamp() terra.BoolValue {
	return terra.ReferenceBool(dse.ref.Append("use_task_start_time_for_full_load_timestamp"))
}

func (dse dmsS3EndpointAttributes) Timeouts() dmss3endpoint.TimeoutsAttributes {
	return terra.ReferenceSingle[dmss3endpoint.TimeoutsAttributes](dse.ref.Append("timeouts"))
}

type dmsS3EndpointState struct {
	AddColumnName                         bool                         `json:"add_column_name"`
	AddTrailingPaddingCharacter           bool                         `json:"add_trailing_padding_character"`
	BucketFolder                          string                       `json:"bucket_folder"`
	BucketName                            string                       `json:"bucket_name"`
	CannedAclForObjects                   string                       `json:"canned_acl_for_objects"`
	CdcInsertsAndUpdates                  bool                         `json:"cdc_inserts_and_updates"`
	CdcInsertsOnly                        bool                         `json:"cdc_inserts_only"`
	CdcMaxBatchInterval                   float64                      `json:"cdc_max_batch_interval"`
	CdcMinFileSize                        float64                      `json:"cdc_min_file_size"`
	CdcPath                               string                       `json:"cdc_path"`
	CertificateArn                        string                       `json:"certificate_arn"`
	CompressionType                       string                       `json:"compression_type"`
	CsvDelimiter                          string                       `json:"csv_delimiter"`
	CsvNoSupValue                         string                       `json:"csv_no_sup_value"`
	CsvNullValue                          string                       `json:"csv_null_value"`
	CsvRowDelimiter                       string                       `json:"csv_row_delimiter"`
	DataFormat                            string                       `json:"data_format"`
	DataPageSize                          float64                      `json:"data_page_size"`
	DatePartitionDelimiter                string                       `json:"date_partition_delimiter"`
	DatePartitionEnabled                  bool                         `json:"date_partition_enabled"`
	DatePartitionSequence                 string                       `json:"date_partition_sequence"`
	DatePartitionTimezone                 string                       `json:"date_partition_timezone"`
	DetachTargetOnLobLookupFailureParquet bool                         `json:"detach_target_on_lob_lookup_failure_parquet"`
	DictPageSizeLimit                     float64                      `json:"dict_page_size_limit"`
	EnableStatistics                      bool                         `json:"enable_statistics"`
	EncodingType                          string                       `json:"encoding_type"`
	EncryptionMode                        string                       `json:"encryption_mode"`
	EndpointArn                           string                       `json:"endpoint_arn"`
	EndpointId                            string                       `json:"endpoint_id"`
	EndpointType                          string                       `json:"endpoint_type"`
	EngineDisplayName                     string                       `json:"engine_display_name"`
	ExpectedBucketOwner                   string                       `json:"expected_bucket_owner"`
	ExternalId                            string                       `json:"external_id"`
	ExternalTableDefinition               string                       `json:"external_table_definition"`
	Id                                    string                       `json:"id"`
	IgnoreHeaderRows                      float64                      `json:"ignore_header_rows"`
	IncludeOpForFullLoad                  bool                         `json:"include_op_for_full_load"`
	KmsKeyArn                             string                       `json:"kms_key_arn"`
	MaxFileSize                           float64                      `json:"max_file_size"`
	ParquetTimestampInMillisecond         bool                         `json:"parquet_timestamp_in_millisecond"`
	ParquetVersion                        string                       `json:"parquet_version"`
	PreserveTransactions                  bool                         `json:"preserve_transactions"`
	Rfc4180                               bool                         `json:"rfc_4180"`
	RowGroupLength                        float64                      `json:"row_group_length"`
	ServerSideEncryptionKmsKeyId          string                       `json:"server_side_encryption_kms_key_id"`
	ServiceAccessRoleArn                  string                       `json:"service_access_role_arn"`
	SslMode                               string                       `json:"ssl_mode"`
	Status                                string                       `json:"status"`
	Tags                                  map[string]string            `json:"tags"`
	TagsAll                               map[string]string            `json:"tags_all"`
	TimestampColumnName                   string                       `json:"timestamp_column_name"`
	UseCsvNoSupValue                      bool                         `json:"use_csv_no_sup_value"`
	UseTaskStartTimeForFullLoadTimestamp  bool                         `json:"use_task_start_time_for_full_load_timestamp"`
	Timeouts                              *dmss3endpoint.TimeoutsState `json:"timeouts"`
}
