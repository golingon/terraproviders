// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package appflowflow

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type DestinationFlowConfig struct {
	// ApiVersion: string, optional
	ApiVersion terra.StringValue `hcl:"api_version,attr"`
	// ConnectorProfileName: string, optional
	ConnectorProfileName terra.StringValue `hcl:"connector_profile_name,attr"`
	// ConnectorType: string, required
	ConnectorType terra.StringValue `hcl:"connector_type,attr" validate:"required"`
	// DestinationConnectorProperties: required
	DestinationConnectorProperties *DestinationConnectorProperties `hcl:"destination_connector_properties,block" validate:"required"`
}

type DestinationConnectorProperties struct {
	// DestinationConnectorPropertiesCustomConnector: optional
	CustomConnector *DestinationConnectorPropertiesCustomConnector `hcl:"custom_connector,block"`
	// CustomerProfiles: optional
	CustomerProfiles *CustomerProfiles `hcl:"customer_profiles,block"`
	// EventBridge: optional
	EventBridge *EventBridge `hcl:"event_bridge,block"`
	// Honeycode: optional
	Honeycode *Honeycode `hcl:"honeycode,block"`
	// LookoutMetrics: optional
	LookoutMetrics *LookoutMetrics `hcl:"lookout_metrics,block"`
	// DestinationConnectorPropertiesMarketo: optional
	Marketo *DestinationConnectorPropertiesMarketo `hcl:"marketo,block"`
	// Redshift: optional
	Redshift *Redshift `hcl:"redshift,block"`
	// DestinationConnectorPropertiesS3: optional
	S3 *DestinationConnectorPropertiesS3 `hcl:"s3,block"`
	// DestinationConnectorPropertiesSalesforce: optional
	Salesforce *DestinationConnectorPropertiesSalesforce `hcl:"salesforce,block"`
	// DestinationConnectorPropertiesSapoData: optional
	SapoData *DestinationConnectorPropertiesSapoData `hcl:"sapo_data,block"`
	// Snowflake: optional
	Snowflake *Snowflake `hcl:"snowflake,block"`
	// Upsolver: optional
	Upsolver *Upsolver `hcl:"upsolver,block"`
	// DestinationConnectorPropertiesZendesk: optional
	Zendesk *DestinationConnectorPropertiesZendesk `hcl:"zendesk,block"`
}

type DestinationConnectorPropertiesCustomConnector struct {
	// CustomProperties: map of string, optional
	CustomProperties terra.MapValue[terra.StringValue] `hcl:"custom_properties,attr"`
	// EntityName: string, required
	EntityName terra.StringValue `hcl:"entity_name,attr" validate:"required"`
	// IdFieldNames: list of string, optional
	IdFieldNames terra.ListValue[terra.StringValue] `hcl:"id_field_names,attr"`
	// WriteOperationType: string, optional
	WriteOperationType terra.StringValue `hcl:"write_operation_type,attr"`
	// CustomConnectorErrorHandlingConfig: optional
	ErrorHandlingConfig *CustomConnectorErrorHandlingConfig `hcl:"error_handling_config,block"`
}

type CustomConnectorErrorHandlingConfig struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// FailOnFirstDestinationError: bool, optional
	FailOnFirstDestinationError terra.BoolValue `hcl:"fail_on_first_destination_error,attr"`
}

type CustomerProfiles struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// ObjectTypeName: string, optional
	ObjectTypeName terra.StringValue `hcl:"object_type_name,attr"`
}

type EventBridge struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
	// EventBridgeErrorHandlingConfig: optional
	ErrorHandlingConfig *EventBridgeErrorHandlingConfig `hcl:"error_handling_config,block"`
}

type EventBridgeErrorHandlingConfig struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// FailOnFirstDestinationError: bool, optional
	FailOnFirstDestinationError terra.BoolValue `hcl:"fail_on_first_destination_error,attr"`
}

type Honeycode struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
	// HoneycodeErrorHandlingConfig: optional
	ErrorHandlingConfig *HoneycodeErrorHandlingConfig `hcl:"error_handling_config,block"`
}

type HoneycodeErrorHandlingConfig struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// FailOnFirstDestinationError: bool, optional
	FailOnFirstDestinationError terra.BoolValue `hcl:"fail_on_first_destination_error,attr"`
}

type LookoutMetrics struct{}

type DestinationConnectorPropertiesMarketo struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
	// MarketoErrorHandlingConfig: optional
	ErrorHandlingConfig *MarketoErrorHandlingConfig `hcl:"error_handling_config,block"`
}

type MarketoErrorHandlingConfig struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// FailOnFirstDestinationError: bool, optional
	FailOnFirstDestinationError terra.BoolValue `hcl:"fail_on_first_destination_error,attr"`
}

type Redshift struct {
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// IntermediateBucketName: string, required
	IntermediateBucketName terra.StringValue `hcl:"intermediate_bucket_name,attr" validate:"required"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
	// RedshiftErrorHandlingConfig: optional
	ErrorHandlingConfig *RedshiftErrorHandlingConfig `hcl:"error_handling_config,block"`
}

type RedshiftErrorHandlingConfig struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// FailOnFirstDestinationError: bool, optional
	FailOnFirstDestinationError terra.BoolValue `hcl:"fail_on_first_destination_error,attr"`
}

type DestinationConnectorPropertiesS3 struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// S3S3OutputFormatConfig: optional
	S3OutputFormatConfig *S3S3OutputFormatConfig `hcl:"s3_output_format_config,block"`
}

type S3S3OutputFormatConfig struct {
	// FileType: string, optional
	FileType terra.StringValue `hcl:"file_type,attr"`
	// PreserveSourceDataTyping: bool, optional
	PreserveSourceDataTyping terra.BoolValue `hcl:"preserve_source_data_typing,attr"`
	// S3S3OutputFormatConfigAggregationConfig: optional
	AggregationConfig *S3S3OutputFormatConfigAggregationConfig `hcl:"aggregation_config,block"`
	// S3S3OutputFormatConfigPrefixConfig: optional
	PrefixConfig *S3S3OutputFormatConfigPrefixConfig `hcl:"prefix_config,block"`
}

type S3S3OutputFormatConfigAggregationConfig struct {
	// AggregationType: string, optional
	AggregationType terra.StringValue `hcl:"aggregation_type,attr"`
}

type S3S3OutputFormatConfigPrefixConfig struct {
	// PrefixFormat: string, optional
	PrefixFormat terra.StringValue `hcl:"prefix_format,attr"`
	// PrefixType: string, optional
	PrefixType terra.StringValue `hcl:"prefix_type,attr"`
}

type DestinationConnectorPropertiesSalesforce struct {
	// IdFieldNames: list of string, optional
	IdFieldNames terra.ListValue[terra.StringValue] `hcl:"id_field_names,attr"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
	// WriteOperationType: string, optional
	WriteOperationType terra.StringValue `hcl:"write_operation_type,attr"`
	// SalesforceErrorHandlingConfig: optional
	ErrorHandlingConfig *SalesforceErrorHandlingConfig `hcl:"error_handling_config,block"`
}

type SalesforceErrorHandlingConfig struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// FailOnFirstDestinationError: bool, optional
	FailOnFirstDestinationError terra.BoolValue `hcl:"fail_on_first_destination_error,attr"`
}

type DestinationConnectorPropertiesSapoData struct {
	// IdFieldNames: list of string, optional
	IdFieldNames terra.ListValue[terra.StringValue] `hcl:"id_field_names,attr"`
	// ObjectPath: string, required
	ObjectPath terra.StringValue `hcl:"object_path,attr" validate:"required"`
	// WriteOperationType: string, optional
	WriteOperationType terra.StringValue `hcl:"write_operation_type,attr"`
	// SapoDataErrorHandlingConfig: optional
	ErrorHandlingConfig *SapoDataErrorHandlingConfig `hcl:"error_handling_config,block"`
	// SuccessResponseHandlingConfig: optional
	SuccessResponseHandlingConfig *SuccessResponseHandlingConfig `hcl:"success_response_handling_config,block"`
}

type SapoDataErrorHandlingConfig struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// FailOnFirstDestinationError: bool, optional
	FailOnFirstDestinationError terra.BoolValue `hcl:"fail_on_first_destination_error,attr"`
}

type SuccessResponseHandlingConfig struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
}

type Snowflake struct {
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// IntermediateBucketName: string, required
	IntermediateBucketName terra.StringValue `hcl:"intermediate_bucket_name,attr" validate:"required"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
	// SnowflakeErrorHandlingConfig: optional
	ErrorHandlingConfig *SnowflakeErrorHandlingConfig `hcl:"error_handling_config,block"`
}

type SnowflakeErrorHandlingConfig struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// FailOnFirstDestinationError: bool, optional
	FailOnFirstDestinationError terra.BoolValue `hcl:"fail_on_first_destination_error,attr"`
}

type Upsolver struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// UpsolverS3OutputFormatConfig: required
	S3OutputFormatConfig *UpsolverS3OutputFormatConfig `hcl:"s3_output_format_config,block" validate:"required"`
}

type UpsolverS3OutputFormatConfig struct {
	// FileType: string, optional
	FileType terra.StringValue `hcl:"file_type,attr"`
	// UpsolverS3OutputFormatConfigAggregationConfig: optional
	AggregationConfig *UpsolverS3OutputFormatConfigAggregationConfig `hcl:"aggregation_config,block"`
	// UpsolverS3OutputFormatConfigPrefixConfig: required
	PrefixConfig *UpsolverS3OutputFormatConfigPrefixConfig `hcl:"prefix_config,block" validate:"required"`
}

type UpsolverS3OutputFormatConfigAggregationConfig struct {
	// AggregationType: string, optional
	AggregationType terra.StringValue `hcl:"aggregation_type,attr"`
}

type UpsolverS3OutputFormatConfigPrefixConfig struct {
	// PrefixFormat: string, optional
	PrefixFormat terra.StringValue `hcl:"prefix_format,attr"`
	// PrefixType: string, required
	PrefixType terra.StringValue `hcl:"prefix_type,attr" validate:"required"`
}

type DestinationConnectorPropertiesZendesk struct {
	// IdFieldNames: list of string, optional
	IdFieldNames terra.ListValue[terra.StringValue] `hcl:"id_field_names,attr"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
	// WriteOperationType: string, optional
	WriteOperationType terra.StringValue `hcl:"write_operation_type,attr"`
	// ZendeskErrorHandlingConfig: optional
	ErrorHandlingConfig *ZendeskErrorHandlingConfig `hcl:"error_handling_config,block"`
}

type ZendeskErrorHandlingConfig struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// FailOnFirstDestinationError: bool, optional
	FailOnFirstDestinationError terra.BoolValue `hcl:"fail_on_first_destination_error,attr"`
}

type SourceFlowConfig struct {
	// ApiVersion: string, optional
	ApiVersion terra.StringValue `hcl:"api_version,attr"`
	// ConnectorProfileName: string, optional
	ConnectorProfileName terra.StringValue `hcl:"connector_profile_name,attr"`
	// ConnectorType: string, required
	ConnectorType terra.StringValue `hcl:"connector_type,attr" validate:"required"`
	// IncrementalPullConfig: optional
	IncrementalPullConfig *IncrementalPullConfig `hcl:"incremental_pull_config,block"`
	// SourceConnectorProperties: required
	SourceConnectorProperties *SourceConnectorProperties `hcl:"source_connector_properties,block" validate:"required"`
}

type IncrementalPullConfig struct {
	// DatetimeTypeFieldName: string, optional
	DatetimeTypeFieldName terra.StringValue `hcl:"datetime_type_field_name,attr"`
}

type SourceConnectorProperties struct {
	// Amplitude: optional
	Amplitude *Amplitude `hcl:"amplitude,block"`
	// SourceConnectorPropertiesCustomConnector: optional
	CustomConnector *SourceConnectorPropertiesCustomConnector `hcl:"custom_connector,block"`
	// Datadog: optional
	Datadog *Datadog `hcl:"datadog,block"`
	// Dynatrace: optional
	Dynatrace *Dynatrace `hcl:"dynatrace,block"`
	// GoogleAnalytics: optional
	GoogleAnalytics *GoogleAnalytics `hcl:"google_analytics,block"`
	// InforNexus: optional
	InforNexus *InforNexus `hcl:"infor_nexus,block"`
	// SourceConnectorPropertiesMarketo: optional
	Marketo *SourceConnectorPropertiesMarketo `hcl:"marketo,block"`
	// SourceConnectorPropertiesS3: optional
	S3 *SourceConnectorPropertiesS3 `hcl:"s3,block"`
	// SourceConnectorPropertiesSalesforce: optional
	Salesforce *SourceConnectorPropertiesSalesforce `hcl:"salesforce,block"`
	// SourceConnectorPropertiesSapoData: optional
	SapoData *SourceConnectorPropertiesSapoData `hcl:"sapo_data,block"`
	// ServiceNow: optional
	ServiceNow *ServiceNow `hcl:"service_now,block"`
	// Singular: optional
	Singular *Singular `hcl:"singular,block"`
	// Slack: optional
	Slack *Slack `hcl:"slack,block"`
	// Trendmicro: optional
	Trendmicro *Trendmicro `hcl:"trendmicro,block"`
	// Veeva: optional
	Veeva *Veeva `hcl:"veeva,block"`
	// SourceConnectorPropertiesZendesk: optional
	Zendesk *SourceConnectorPropertiesZendesk `hcl:"zendesk,block"`
}

type Amplitude struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type SourceConnectorPropertiesCustomConnector struct {
	// CustomProperties: map of string, optional
	CustomProperties terra.MapValue[terra.StringValue] `hcl:"custom_properties,attr"`
	// EntityName: string, required
	EntityName terra.StringValue `hcl:"entity_name,attr" validate:"required"`
}

type Datadog struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type Dynatrace struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type GoogleAnalytics struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type InforNexus struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type SourceConnectorPropertiesMarketo struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type SourceConnectorPropertiesS3 struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// BucketPrefix: string, optional
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// S3InputFormatConfig: optional
	S3InputFormatConfig *S3InputFormatConfig `hcl:"s3_input_format_config,block"`
}

type S3InputFormatConfig struct {
	// S3InputFileType: string, optional
	S3InputFileType terra.StringValue `hcl:"s3_input_file_type,attr"`
}

type SourceConnectorPropertiesSalesforce struct {
	// EnableDynamicFieldUpdate: bool, optional
	EnableDynamicFieldUpdate terra.BoolValue `hcl:"enable_dynamic_field_update,attr"`
	// IncludeDeletedRecords: bool, optional
	IncludeDeletedRecords terra.BoolValue `hcl:"include_deleted_records,attr"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type SourceConnectorPropertiesSapoData struct {
	// ObjectPath: string, required
	ObjectPath terra.StringValue `hcl:"object_path,attr" validate:"required"`
}

type ServiceNow struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type Singular struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type Slack struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type Trendmicro struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type Veeva struct {
	// DocumentType: string, optional
	DocumentType terra.StringValue `hcl:"document_type,attr"`
	// IncludeAllVersions: bool, optional
	IncludeAllVersions terra.BoolValue `hcl:"include_all_versions,attr"`
	// IncludeRenditions: bool, optional
	IncludeRenditions terra.BoolValue `hcl:"include_renditions,attr"`
	// IncludeSourceFiles: bool, optional
	IncludeSourceFiles terra.BoolValue `hcl:"include_source_files,attr"`
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type SourceConnectorPropertiesZendesk struct {
	// Object: string, required
	Object terra.StringValue `hcl:"object,attr" validate:"required"`
}

type Task struct {
	// DestinationField: string, optional
	DestinationField terra.StringValue `hcl:"destination_field,attr"`
	// SourceFields: list of string, required
	SourceFields terra.ListValue[terra.StringValue] `hcl:"source_fields,attr" validate:"required"`
	// TaskProperties: map of string, optional
	TaskProperties terra.MapValue[terra.StringValue] `hcl:"task_properties,attr"`
	// TaskType: string, required
	TaskType terra.StringValue `hcl:"task_type,attr" validate:"required"`
	// ConnectorOperator: min=0
	ConnectorOperator []ConnectorOperator `hcl:"connector_operator,block" validate:"min=0"`
}

type ConnectorOperator struct {
	// Amplitude: string, optional
	Amplitude terra.StringValue `hcl:"amplitude,attr"`
	// CustomConnector: string, optional
	CustomConnector terra.StringValue `hcl:"custom_connector,attr"`
	// Datadog: string, optional
	Datadog terra.StringValue `hcl:"datadog,attr"`
	// Dynatrace: string, optional
	Dynatrace terra.StringValue `hcl:"dynatrace,attr"`
	// GoogleAnalytics: string, optional
	GoogleAnalytics terra.StringValue `hcl:"google_analytics,attr"`
	// InforNexus: string, optional
	InforNexus terra.StringValue `hcl:"infor_nexus,attr"`
	// Marketo: string, optional
	Marketo terra.StringValue `hcl:"marketo,attr"`
	// S3: string, optional
	S3 terra.StringValue `hcl:"s3,attr"`
	// Salesforce: string, optional
	Salesforce terra.StringValue `hcl:"salesforce,attr"`
	// SapoData: string, optional
	SapoData terra.StringValue `hcl:"sapo_data,attr"`
	// ServiceNow: string, optional
	ServiceNow terra.StringValue `hcl:"service_now,attr"`
	// Singular: string, optional
	Singular terra.StringValue `hcl:"singular,attr"`
	// Slack: string, optional
	Slack terra.StringValue `hcl:"slack,attr"`
	// Trendmicro: string, optional
	Trendmicro terra.StringValue `hcl:"trendmicro,attr"`
	// Veeva: string, optional
	Veeva terra.StringValue `hcl:"veeva,attr"`
	// Zendesk: string, optional
	Zendesk terra.StringValue `hcl:"zendesk,attr"`
}

type TriggerConfig struct {
	// TriggerType: string, required
	TriggerType terra.StringValue `hcl:"trigger_type,attr" validate:"required"`
	// TriggerProperties: optional
	TriggerProperties *TriggerProperties `hcl:"trigger_properties,block"`
}

type TriggerProperties struct {
	// Scheduled: optional
	Scheduled *Scheduled `hcl:"scheduled,block"`
}

type Scheduled struct {
	// DataPullMode: string, optional
	DataPullMode terra.StringValue `hcl:"data_pull_mode,attr"`
	// FirstExecutionFrom: string, optional
	FirstExecutionFrom terra.StringValue `hcl:"first_execution_from,attr"`
	// ScheduleEndTime: string, optional
	ScheduleEndTime terra.StringValue `hcl:"schedule_end_time,attr"`
	// ScheduleExpression: string, required
	ScheduleExpression terra.StringValue `hcl:"schedule_expression,attr" validate:"required"`
	// ScheduleOffset: number, optional
	ScheduleOffset terra.NumberValue `hcl:"schedule_offset,attr"`
	// ScheduleStartTime: string, optional
	ScheduleStartTime terra.StringValue `hcl:"schedule_start_time,attr"`
	// Timezone: string, optional
	Timezone terra.StringValue `hcl:"timezone,attr"`
}

type DestinationFlowConfigAttributes struct {
	ref terra.Reference
}

func (dfc DestinationFlowConfigAttributes) InternalRef() (terra.Reference, error) {
	return dfc.ref, nil
}

func (dfc DestinationFlowConfigAttributes) InternalWithRef(ref terra.Reference) DestinationFlowConfigAttributes {
	return DestinationFlowConfigAttributes{ref: ref}
}

func (dfc DestinationFlowConfigAttributes) InternalTokens() hclwrite.Tokens {
	return dfc.ref.InternalTokens()
}

func (dfc DestinationFlowConfigAttributes) ApiVersion() terra.StringValue {
	return terra.ReferenceAsString(dfc.ref.Append("api_version"))
}

func (dfc DestinationFlowConfigAttributes) ConnectorProfileName() terra.StringValue {
	return terra.ReferenceAsString(dfc.ref.Append("connector_profile_name"))
}

func (dfc DestinationFlowConfigAttributes) ConnectorType() terra.StringValue {
	return terra.ReferenceAsString(dfc.ref.Append("connector_type"))
}

func (dfc DestinationFlowConfigAttributes) DestinationConnectorProperties() terra.ListValue[DestinationConnectorPropertiesAttributes] {
	return terra.ReferenceAsList[DestinationConnectorPropertiesAttributes](dfc.ref.Append("destination_connector_properties"))
}

type DestinationConnectorPropertiesAttributes struct {
	ref terra.Reference
}

func (dcp DestinationConnectorPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return dcp.ref, nil
}

func (dcp DestinationConnectorPropertiesAttributes) InternalWithRef(ref terra.Reference) DestinationConnectorPropertiesAttributes {
	return DestinationConnectorPropertiesAttributes{ref: ref}
}

func (dcp DestinationConnectorPropertiesAttributes) InternalTokens() hclwrite.Tokens {
	return dcp.ref.InternalTokens()
}

func (dcp DestinationConnectorPropertiesAttributes) CustomConnector() terra.ListValue[DestinationConnectorPropertiesCustomConnectorAttributes] {
	return terra.ReferenceAsList[DestinationConnectorPropertiesCustomConnectorAttributes](dcp.ref.Append("custom_connector"))
}

func (dcp DestinationConnectorPropertiesAttributes) CustomerProfiles() terra.ListValue[CustomerProfilesAttributes] {
	return terra.ReferenceAsList[CustomerProfilesAttributes](dcp.ref.Append("customer_profiles"))
}

func (dcp DestinationConnectorPropertiesAttributes) EventBridge() terra.ListValue[EventBridgeAttributes] {
	return terra.ReferenceAsList[EventBridgeAttributes](dcp.ref.Append("event_bridge"))
}

func (dcp DestinationConnectorPropertiesAttributes) Honeycode() terra.ListValue[HoneycodeAttributes] {
	return terra.ReferenceAsList[HoneycodeAttributes](dcp.ref.Append("honeycode"))
}

func (dcp DestinationConnectorPropertiesAttributes) LookoutMetrics() terra.ListValue[LookoutMetricsAttributes] {
	return terra.ReferenceAsList[LookoutMetricsAttributes](dcp.ref.Append("lookout_metrics"))
}

func (dcp DestinationConnectorPropertiesAttributes) Marketo() terra.ListValue[DestinationConnectorPropertiesMarketoAttributes] {
	return terra.ReferenceAsList[DestinationConnectorPropertiesMarketoAttributes](dcp.ref.Append("marketo"))
}

func (dcp DestinationConnectorPropertiesAttributes) Redshift() terra.ListValue[RedshiftAttributes] {
	return terra.ReferenceAsList[RedshiftAttributes](dcp.ref.Append("redshift"))
}

func (dcp DestinationConnectorPropertiesAttributes) S3() terra.ListValue[DestinationConnectorPropertiesS3Attributes] {
	return terra.ReferenceAsList[DestinationConnectorPropertiesS3Attributes](dcp.ref.Append("s3"))
}

func (dcp DestinationConnectorPropertiesAttributes) Salesforce() terra.ListValue[DestinationConnectorPropertiesSalesforceAttributes] {
	return terra.ReferenceAsList[DestinationConnectorPropertiesSalesforceAttributes](dcp.ref.Append("salesforce"))
}

func (dcp DestinationConnectorPropertiesAttributes) SapoData() terra.ListValue[DestinationConnectorPropertiesSapoDataAttributes] {
	return terra.ReferenceAsList[DestinationConnectorPropertiesSapoDataAttributes](dcp.ref.Append("sapo_data"))
}

func (dcp DestinationConnectorPropertiesAttributes) Snowflake() terra.ListValue[SnowflakeAttributes] {
	return terra.ReferenceAsList[SnowflakeAttributes](dcp.ref.Append("snowflake"))
}

func (dcp DestinationConnectorPropertiesAttributes) Upsolver() terra.ListValue[UpsolverAttributes] {
	return terra.ReferenceAsList[UpsolverAttributes](dcp.ref.Append("upsolver"))
}

func (dcp DestinationConnectorPropertiesAttributes) Zendesk() terra.ListValue[DestinationConnectorPropertiesZendeskAttributes] {
	return terra.ReferenceAsList[DestinationConnectorPropertiesZendeskAttributes](dcp.ref.Append("zendesk"))
}

type DestinationConnectorPropertiesCustomConnectorAttributes struct {
	ref terra.Reference
}

func (cc DestinationConnectorPropertiesCustomConnectorAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc DestinationConnectorPropertiesCustomConnectorAttributes) InternalWithRef(ref terra.Reference) DestinationConnectorPropertiesCustomConnectorAttributes {
	return DestinationConnectorPropertiesCustomConnectorAttributes{ref: ref}
}

func (cc DestinationConnectorPropertiesCustomConnectorAttributes) InternalTokens() hclwrite.Tokens {
	return cc.ref.InternalTokens()
}

func (cc DestinationConnectorPropertiesCustomConnectorAttributes) CustomProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cc.ref.Append("custom_properties"))
}

func (cc DestinationConnectorPropertiesCustomConnectorAttributes) EntityName() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("entity_name"))
}

func (cc DestinationConnectorPropertiesCustomConnectorAttributes) IdFieldNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cc.ref.Append("id_field_names"))
}

func (cc DestinationConnectorPropertiesCustomConnectorAttributes) WriteOperationType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("write_operation_type"))
}

func (cc DestinationConnectorPropertiesCustomConnectorAttributes) ErrorHandlingConfig() terra.ListValue[CustomConnectorErrorHandlingConfigAttributes] {
	return terra.ReferenceAsList[CustomConnectorErrorHandlingConfigAttributes](cc.ref.Append("error_handling_config"))
}

type CustomConnectorErrorHandlingConfigAttributes struct {
	ref terra.Reference
}

func (ehc CustomConnectorErrorHandlingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ehc.ref, nil
}

func (ehc CustomConnectorErrorHandlingConfigAttributes) InternalWithRef(ref terra.Reference) CustomConnectorErrorHandlingConfigAttributes {
	return CustomConnectorErrorHandlingConfigAttributes{ref: ref}
}

func (ehc CustomConnectorErrorHandlingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ehc.ref.InternalTokens()
}

func (ehc CustomConnectorErrorHandlingConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_name"))
}

func (ehc CustomConnectorErrorHandlingConfigAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_prefix"))
}

func (ehc CustomConnectorErrorHandlingConfigAttributes) FailOnFirstDestinationError() terra.BoolValue {
	return terra.ReferenceAsBool(ehc.ref.Append("fail_on_first_destination_error"))
}

type CustomerProfilesAttributes struct {
	ref terra.Reference
}

func (cp CustomerProfilesAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp CustomerProfilesAttributes) InternalWithRef(ref terra.Reference) CustomerProfilesAttributes {
	return CustomerProfilesAttributes{ref: ref}
}

func (cp CustomerProfilesAttributes) InternalTokens() hclwrite.Tokens {
	return cp.ref.InternalTokens()
}

func (cp CustomerProfilesAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("domain_name"))
}

func (cp CustomerProfilesAttributes) ObjectTypeName() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("object_type_name"))
}

type EventBridgeAttributes struct {
	ref terra.Reference
}

func (eb EventBridgeAttributes) InternalRef() (terra.Reference, error) {
	return eb.ref, nil
}

func (eb EventBridgeAttributes) InternalWithRef(ref terra.Reference) EventBridgeAttributes {
	return EventBridgeAttributes{ref: ref}
}

func (eb EventBridgeAttributes) InternalTokens() hclwrite.Tokens {
	return eb.ref.InternalTokens()
}

func (eb EventBridgeAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(eb.ref.Append("object"))
}

func (eb EventBridgeAttributes) ErrorHandlingConfig() terra.ListValue[EventBridgeErrorHandlingConfigAttributes] {
	return terra.ReferenceAsList[EventBridgeErrorHandlingConfigAttributes](eb.ref.Append("error_handling_config"))
}

type EventBridgeErrorHandlingConfigAttributes struct {
	ref terra.Reference
}

func (ehc EventBridgeErrorHandlingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ehc.ref, nil
}

func (ehc EventBridgeErrorHandlingConfigAttributes) InternalWithRef(ref terra.Reference) EventBridgeErrorHandlingConfigAttributes {
	return EventBridgeErrorHandlingConfigAttributes{ref: ref}
}

func (ehc EventBridgeErrorHandlingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ehc.ref.InternalTokens()
}

func (ehc EventBridgeErrorHandlingConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_name"))
}

func (ehc EventBridgeErrorHandlingConfigAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_prefix"))
}

func (ehc EventBridgeErrorHandlingConfigAttributes) FailOnFirstDestinationError() terra.BoolValue {
	return terra.ReferenceAsBool(ehc.ref.Append("fail_on_first_destination_error"))
}

type HoneycodeAttributes struct {
	ref terra.Reference
}

func (h HoneycodeAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HoneycodeAttributes) InternalWithRef(ref terra.Reference) HoneycodeAttributes {
	return HoneycodeAttributes{ref: ref}
}

func (h HoneycodeAttributes) InternalTokens() hclwrite.Tokens {
	return h.ref.InternalTokens()
}

func (h HoneycodeAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("object"))
}

func (h HoneycodeAttributes) ErrorHandlingConfig() terra.ListValue[HoneycodeErrorHandlingConfigAttributes] {
	return terra.ReferenceAsList[HoneycodeErrorHandlingConfigAttributes](h.ref.Append("error_handling_config"))
}

type HoneycodeErrorHandlingConfigAttributes struct {
	ref terra.Reference
}

func (ehc HoneycodeErrorHandlingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ehc.ref, nil
}

func (ehc HoneycodeErrorHandlingConfigAttributes) InternalWithRef(ref terra.Reference) HoneycodeErrorHandlingConfigAttributes {
	return HoneycodeErrorHandlingConfigAttributes{ref: ref}
}

func (ehc HoneycodeErrorHandlingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ehc.ref.InternalTokens()
}

func (ehc HoneycodeErrorHandlingConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_name"))
}

func (ehc HoneycodeErrorHandlingConfigAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_prefix"))
}

func (ehc HoneycodeErrorHandlingConfigAttributes) FailOnFirstDestinationError() terra.BoolValue {
	return terra.ReferenceAsBool(ehc.ref.Append("fail_on_first_destination_error"))
}

type LookoutMetricsAttributes struct {
	ref terra.Reference
}

func (lm LookoutMetricsAttributes) InternalRef() (terra.Reference, error) {
	return lm.ref, nil
}

func (lm LookoutMetricsAttributes) InternalWithRef(ref terra.Reference) LookoutMetricsAttributes {
	return LookoutMetricsAttributes{ref: ref}
}

func (lm LookoutMetricsAttributes) InternalTokens() hclwrite.Tokens {
	return lm.ref.InternalTokens()
}

type DestinationConnectorPropertiesMarketoAttributes struct {
	ref terra.Reference
}

func (m DestinationConnectorPropertiesMarketoAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m DestinationConnectorPropertiesMarketoAttributes) InternalWithRef(ref terra.Reference) DestinationConnectorPropertiesMarketoAttributes {
	return DestinationConnectorPropertiesMarketoAttributes{ref: ref}
}

func (m DestinationConnectorPropertiesMarketoAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m DestinationConnectorPropertiesMarketoAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("object"))
}

func (m DestinationConnectorPropertiesMarketoAttributes) ErrorHandlingConfig() terra.ListValue[MarketoErrorHandlingConfigAttributes] {
	return terra.ReferenceAsList[MarketoErrorHandlingConfigAttributes](m.ref.Append("error_handling_config"))
}

type MarketoErrorHandlingConfigAttributes struct {
	ref terra.Reference
}

func (ehc MarketoErrorHandlingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ehc.ref, nil
}

func (ehc MarketoErrorHandlingConfigAttributes) InternalWithRef(ref terra.Reference) MarketoErrorHandlingConfigAttributes {
	return MarketoErrorHandlingConfigAttributes{ref: ref}
}

func (ehc MarketoErrorHandlingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ehc.ref.InternalTokens()
}

func (ehc MarketoErrorHandlingConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_name"))
}

func (ehc MarketoErrorHandlingConfigAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_prefix"))
}

func (ehc MarketoErrorHandlingConfigAttributes) FailOnFirstDestinationError() terra.BoolValue {
	return terra.ReferenceAsBool(ehc.ref.Append("fail_on_first_destination_error"))
}

type RedshiftAttributes struct {
	ref terra.Reference
}

func (r RedshiftAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RedshiftAttributes) InternalWithRef(ref terra.Reference) RedshiftAttributes {
	return RedshiftAttributes{ref: ref}
}

func (r RedshiftAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RedshiftAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("bucket_prefix"))
}

func (r RedshiftAttributes) IntermediateBucketName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("intermediate_bucket_name"))
}

func (r RedshiftAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("object"))
}

func (r RedshiftAttributes) ErrorHandlingConfig() terra.ListValue[RedshiftErrorHandlingConfigAttributes] {
	return terra.ReferenceAsList[RedshiftErrorHandlingConfigAttributes](r.ref.Append("error_handling_config"))
}

type RedshiftErrorHandlingConfigAttributes struct {
	ref terra.Reference
}

func (ehc RedshiftErrorHandlingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ehc.ref, nil
}

func (ehc RedshiftErrorHandlingConfigAttributes) InternalWithRef(ref terra.Reference) RedshiftErrorHandlingConfigAttributes {
	return RedshiftErrorHandlingConfigAttributes{ref: ref}
}

func (ehc RedshiftErrorHandlingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ehc.ref.InternalTokens()
}

func (ehc RedshiftErrorHandlingConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_name"))
}

func (ehc RedshiftErrorHandlingConfigAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_prefix"))
}

func (ehc RedshiftErrorHandlingConfigAttributes) FailOnFirstDestinationError() terra.BoolValue {
	return terra.ReferenceAsBool(ehc.ref.Append("fail_on_first_destination_error"))
}

type DestinationConnectorPropertiesS3Attributes struct {
	ref terra.Reference
}

func (s DestinationConnectorPropertiesS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DestinationConnectorPropertiesS3Attributes) InternalWithRef(ref terra.Reference) DestinationConnectorPropertiesS3Attributes {
	return DestinationConnectorPropertiesS3Attributes{ref: ref}
}

func (s DestinationConnectorPropertiesS3Attributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s DestinationConnectorPropertiesS3Attributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_name"))
}

func (s DestinationConnectorPropertiesS3Attributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_prefix"))
}

func (s DestinationConnectorPropertiesS3Attributes) S3OutputFormatConfig() terra.ListValue[S3S3OutputFormatConfigAttributes] {
	return terra.ReferenceAsList[S3S3OutputFormatConfigAttributes](s.ref.Append("s3_output_format_config"))
}

type S3S3OutputFormatConfigAttributes struct {
	ref terra.Reference
}

func (sofc S3S3OutputFormatConfigAttributes) InternalRef() (terra.Reference, error) {
	return sofc.ref, nil
}

func (sofc S3S3OutputFormatConfigAttributes) InternalWithRef(ref terra.Reference) S3S3OutputFormatConfigAttributes {
	return S3S3OutputFormatConfigAttributes{ref: ref}
}

func (sofc S3S3OutputFormatConfigAttributes) InternalTokens() hclwrite.Tokens {
	return sofc.ref.InternalTokens()
}

func (sofc S3S3OutputFormatConfigAttributes) FileType() terra.StringValue {
	return terra.ReferenceAsString(sofc.ref.Append("file_type"))
}

func (sofc S3S3OutputFormatConfigAttributes) PreserveSourceDataTyping() terra.BoolValue {
	return terra.ReferenceAsBool(sofc.ref.Append("preserve_source_data_typing"))
}

func (sofc S3S3OutputFormatConfigAttributes) AggregationConfig() terra.ListValue[S3S3OutputFormatConfigAggregationConfigAttributes] {
	return terra.ReferenceAsList[S3S3OutputFormatConfigAggregationConfigAttributes](sofc.ref.Append("aggregation_config"))
}

func (sofc S3S3OutputFormatConfigAttributes) PrefixConfig() terra.ListValue[S3S3OutputFormatConfigPrefixConfigAttributes] {
	return terra.ReferenceAsList[S3S3OutputFormatConfigPrefixConfigAttributes](sofc.ref.Append("prefix_config"))
}

type S3S3OutputFormatConfigAggregationConfigAttributes struct {
	ref terra.Reference
}

func (ac S3S3OutputFormatConfigAggregationConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac S3S3OutputFormatConfigAggregationConfigAttributes) InternalWithRef(ref terra.Reference) S3S3OutputFormatConfigAggregationConfigAttributes {
	return S3S3OutputFormatConfigAggregationConfigAttributes{ref: ref}
}

func (ac S3S3OutputFormatConfigAggregationConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ac.ref.InternalTokens()
}

func (ac S3S3OutputFormatConfigAggregationConfigAttributes) AggregationType() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("aggregation_type"))
}

type S3S3OutputFormatConfigPrefixConfigAttributes struct {
	ref terra.Reference
}

func (pc S3S3OutputFormatConfigPrefixConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc S3S3OutputFormatConfigPrefixConfigAttributes) InternalWithRef(ref terra.Reference) S3S3OutputFormatConfigPrefixConfigAttributes {
	return S3S3OutputFormatConfigPrefixConfigAttributes{ref: ref}
}

func (pc S3S3OutputFormatConfigPrefixConfigAttributes) InternalTokens() hclwrite.Tokens {
	return pc.ref.InternalTokens()
}

func (pc S3S3OutputFormatConfigPrefixConfigAttributes) PrefixFormat() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("prefix_format"))
}

func (pc S3S3OutputFormatConfigPrefixConfigAttributes) PrefixType() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("prefix_type"))
}

type DestinationConnectorPropertiesSalesforceAttributes struct {
	ref terra.Reference
}

func (s DestinationConnectorPropertiesSalesforceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DestinationConnectorPropertiesSalesforceAttributes) InternalWithRef(ref terra.Reference) DestinationConnectorPropertiesSalesforceAttributes {
	return DestinationConnectorPropertiesSalesforceAttributes{ref: ref}
}

func (s DestinationConnectorPropertiesSalesforceAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s DestinationConnectorPropertiesSalesforceAttributes) IdFieldNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("id_field_names"))
}

func (s DestinationConnectorPropertiesSalesforceAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("object"))
}

func (s DestinationConnectorPropertiesSalesforceAttributes) WriteOperationType() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("write_operation_type"))
}

func (s DestinationConnectorPropertiesSalesforceAttributes) ErrorHandlingConfig() terra.ListValue[SalesforceErrorHandlingConfigAttributes] {
	return terra.ReferenceAsList[SalesforceErrorHandlingConfigAttributes](s.ref.Append("error_handling_config"))
}

type SalesforceErrorHandlingConfigAttributes struct {
	ref terra.Reference
}

func (ehc SalesforceErrorHandlingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ehc.ref, nil
}

func (ehc SalesforceErrorHandlingConfigAttributes) InternalWithRef(ref terra.Reference) SalesforceErrorHandlingConfigAttributes {
	return SalesforceErrorHandlingConfigAttributes{ref: ref}
}

func (ehc SalesforceErrorHandlingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ehc.ref.InternalTokens()
}

func (ehc SalesforceErrorHandlingConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_name"))
}

func (ehc SalesforceErrorHandlingConfigAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_prefix"))
}

func (ehc SalesforceErrorHandlingConfigAttributes) FailOnFirstDestinationError() terra.BoolValue {
	return terra.ReferenceAsBool(ehc.ref.Append("fail_on_first_destination_error"))
}

type DestinationConnectorPropertiesSapoDataAttributes struct {
	ref terra.Reference
}

func (sd DestinationConnectorPropertiesSapoDataAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd DestinationConnectorPropertiesSapoDataAttributes) InternalWithRef(ref terra.Reference) DestinationConnectorPropertiesSapoDataAttributes {
	return DestinationConnectorPropertiesSapoDataAttributes{ref: ref}
}

func (sd DestinationConnectorPropertiesSapoDataAttributes) InternalTokens() hclwrite.Tokens {
	return sd.ref.InternalTokens()
}

func (sd DestinationConnectorPropertiesSapoDataAttributes) IdFieldNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sd.ref.Append("id_field_names"))
}

func (sd DestinationConnectorPropertiesSapoDataAttributes) ObjectPath() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("object_path"))
}

func (sd DestinationConnectorPropertiesSapoDataAttributes) WriteOperationType() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("write_operation_type"))
}

func (sd DestinationConnectorPropertiesSapoDataAttributes) ErrorHandlingConfig() terra.ListValue[SapoDataErrorHandlingConfigAttributes] {
	return terra.ReferenceAsList[SapoDataErrorHandlingConfigAttributes](sd.ref.Append("error_handling_config"))
}

func (sd DestinationConnectorPropertiesSapoDataAttributes) SuccessResponseHandlingConfig() terra.ListValue[SuccessResponseHandlingConfigAttributes] {
	return terra.ReferenceAsList[SuccessResponseHandlingConfigAttributes](sd.ref.Append("success_response_handling_config"))
}

type SapoDataErrorHandlingConfigAttributes struct {
	ref terra.Reference
}

func (ehc SapoDataErrorHandlingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ehc.ref, nil
}

func (ehc SapoDataErrorHandlingConfigAttributes) InternalWithRef(ref terra.Reference) SapoDataErrorHandlingConfigAttributes {
	return SapoDataErrorHandlingConfigAttributes{ref: ref}
}

func (ehc SapoDataErrorHandlingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ehc.ref.InternalTokens()
}

func (ehc SapoDataErrorHandlingConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_name"))
}

func (ehc SapoDataErrorHandlingConfigAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_prefix"))
}

func (ehc SapoDataErrorHandlingConfigAttributes) FailOnFirstDestinationError() terra.BoolValue {
	return terra.ReferenceAsBool(ehc.ref.Append("fail_on_first_destination_error"))
}

type SuccessResponseHandlingConfigAttributes struct {
	ref terra.Reference
}

func (srhc SuccessResponseHandlingConfigAttributes) InternalRef() (terra.Reference, error) {
	return srhc.ref, nil
}

func (srhc SuccessResponseHandlingConfigAttributes) InternalWithRef(ref terra.Reference) SuccessResponseHandlingConfigAttributes {
	return SuccessResponseHandlingConfigAttributes{ref: ref}
}

func (srhc SuccessResponseHandlingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return srhc.ref.InternalTokens()
}

func (srhc SuccessResponseHandlingConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(srhc.ref.Append("bucket_name"))
}

func (srhc SuccessResponseHandlingConfigAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(srhc.ref.Append("bucket_prefix"))
}

type SnowflakeAttributes struct {
	ref terra.Reference
}

func (s SnowflakeAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SnowflakeAttributes) InternalWithRef(ref terra.Reference) SnowflakeAttributes {
	return SnowflakeAttributes{ref: ref}
}

func (s SnowflakeAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SnowflakeAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_prefix"))
}

func (s SnowflakeAttributes) IntermediateBucketName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("intermediate_bucket_name"))
}

func (s SnowflakeAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("object"))
}

func (s SnowflakeAttributes) ErrorHandlingConfig() terra.ListValue[SnowflakeErrorHandlingConfigAttributes] {
	return terra.ReferenceAsList[SnowflakeErrorHandlingConfigAttributes](s.ref.Append("error_handling_config"))
}

type SnowflakeErrorHandlingConfigAttributes struct {
	ref terra.Reference
}

func (ehc SnowflakeErrorHandlingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ehc.ref, nil
}

func (ehc SnowflakeErrorHandlingConfigAttributes) InternalWithRef(ref terra.Reference) SnowflakeErrorHandlingConfigAttributes {
	return SnowflakeErrorHandlingConfigAttributes{ref: ref}
}

func (ehc SnowflakeErrorHandlingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ehc.ref.InternalTokens()
}

func (ehc SnowflakeErrorHandlingConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_name"))
}

func (ehc SnowflakeErrorHandlingConfigAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_prefix"))
}

func (ehc SnowflakeErrorHandlingConfigAttributes) FailOnFirstDestinationError() terra.BoolValue {
	return terra.ReferenceAsBool(ehc.ref.Append("fail_on_first_destination_error"))
}

type UpsolverAttributes struct {
	ref terra.Reference
}

func (u UpsolverAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u UpsolverAttributes) InternalWithRef(ref terra.Reference) UpsolverAttributes {
	return UpsolverAttributes{ref: ref}
}

func (u UpsolverAttributes) InternalTokens() hclwrite.Tokens {
	return u.ref.InternalTokens()
}

func (u UpsolverAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("bucket_name"))
}

func (u UpsolverAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("bucket_prefix"))
}

func (u UpsolverAttributes) S3OutputFormatConfig() terra.ListValue[UpsolverS3OutputFormatConfigAttributes] {
	return terra.ReferenceAsList[UpsolverS3OutputFormatConfigAttributes](u.ref.Append("s3_output_format_config"))
}

type UpsolverS3OutputFormatConfigAttributes struct {
	ref terra.Reference
}

func (sofc UpsolverS3OutputFormatConfigAttributes) InternalRef() (terra.Reference, error) {
	return sofc.ref, nil
}

func (sofc UpsolverS3OutputFormatConfigAttributes) InternalWithRef(ref terra.Reference) UpsolverS3OutputFormatConfigAttributes {
	return UpsolverS3OutputFormatConfigAttributes{ref: ref}
}

func (sofc UpsolverS3OutputFormatConfigAttributes) InternalTokens() hclwrite.Tokens {
	return sofc.ref.InternalTokens()
}

func (sofc UpsolverS3OutputFormatConfigAttributes) FileType() terra.StringValue {
	return terra.ReferenceAsString(sofc.ref.Append("file_type"))
}

func (sofc UpsolverS3OutputFormatConfigAttributes) AggregationConfig() terra.ListValue[UpsolverS3OutputFormatConfigAggregationConfigAttributes] {
	return terra.ReferenceAsList[UpsolverS3OutputFormatConfigAggregationConfigAttributes](sofc.ref.Append("aggregation_config"))
}

func (sofc UpsolverS3OutputFormatConfigAttributes) PrefixConfig() terra.ListValue[UpsolverS3OutputFormatConfigPrefixConfigAttributes] {
	return terra.ReferenceAsList[UpsolverS3OutputFormatConfigPrefixConfigAttributes](sofc.ref.Append("prefix_config"))
}

type UpsolverS3OutputFormatConfigAggregationConfigAttributes struct {
	ref terra.Reference
}

func (ac UpsolverS3OutputFormatConfigAggregationConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac UpsolverS3OutputFormatConfigAggregationConfigAttributes) InternalWithRef(ref terra.Reference) UpsolverS3OutputFormatConfigAggregationConfigAttributes {
	return UpsolverS3OutputFormatConfigAggregationConfigAttributes{ref: ref}
}

func (ac UpsolverS3OutputFormatConfigAggregationConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ac.ref.InternalTokens()
}

func (ac UpsolverS3OutputFormatConfigAggregationConfigAttributes) AggregationType() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("aggregation_type"))
}

type UpsolverS3OutputFormatConfigPrefixConfigAttributes struct {
	ref terra.Reference
}

func (pc UpsolverS3OutputFormatConfigPrefixConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc UpsolverS3OutputFormatConfigPrefixConfigAttributes) InternalWithRef(ref terra.Reference) UpsolverS3OutputFormatConfigPrefixConfigAttributes {
	return UpsolverS3OutputFormatConfigPrefixConfigAttributes{ref: ref}
}

func (pc UpsolverS3OutputFormatConfigPrefixConfigAttributes) InternalTokens() hclwrite.Tokens {
	return pc.ref.InternalTokens()
}

func (pc UpsolverS3OutputFormatConfigPrefixConfigAttributes) PrefixFormat() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("prefix_format"))
}

func (pc UpsolverS3OutputFormatConfigPrefixConfigAttributes) PrefixType() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("prefix_type"))
}

type DestinationConnectorPropertiesZendeskAttributes struct {
	ref terra.Reference
}

func (z DestinationConnectorPropertiesZendeskAttributes) InternalRef() (terra.Reference, error) {
	return z.ref, nil
}

func (z DestinationConnectorPropertiesZendeskAttributes) InternalWithRef(ref terra.Reference) DestinationConnectorPropertiesZendeskAttributes {
	return DestinationConnectorPropertiesZendeskAttributes{ref: ref}
}

func (z DestinationConnectorPropertiesZendeskAttributes) InternalTokens() hclwrite.Tokens {
	return z.ref.InternalTokens()
}

func (z DestinationConnectorPropertiesZendeskAttributes) IdFieldNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](z.ref.Append("id_field_names"))
}

func (z DestinationConnectorPropertiesZendeskAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("object"))
}

func (z DestinationConnectorPropertiesZendeskAttributes) WriteOperationType() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("write_operation_type"))
}

func (z DestinationConnectorPropertiesZendeskAttributes) ErrorHandlingConfig() terra.ListValue[ZendeskErrorHandlingConfigAttributes] {
	return terra.ReferenceAsList[ZendeskErrorHandlingConfigAttributes](z.ref.Append("error_handling_config"))
}

type ZendeskErrorHandlingConfigAttributes struct {
	ref terra.Reference
}

func (ehc ZendeskErrorHandlingConfigAttributes) InternalRef() (terra.Reference, error) {
	return ehc.ref, nil
}

func (ehc ZendeskErrorHandlingConfigAttributes) InternalWithRef(ref terra.Reference) ZendeskErrorHandlingConfigAttributes {
	return ZendeskErrorHandlingConfigAttributes{ref: ref}
}

func (ehc ZendeskErrorHandlingConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ehc.ref.InternalTokens()
}

func (ehc ZendeskErrorHandlingConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_name"))
}

func (ehc ZendeskErrorHandlingConfigAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(ehc.ref.Append("bucket_prefix"))
}

func (ehc ZendeskErrorHandlingConfigAttributes) FailOnFirstDestinationError() terra.BoolValue {
	return terra.ReferenceAsBool(ehc.ref.Append("fail_on_first_destination_error"))
}

type SourceFlowConfigAttributes struct {
	ref terra.Reference
}

func (sfc SourceFlowConfigAttributes) InternalRef() (terra.Reference, error) {
	return sfc.ref, nil
}

func (sfc SourceFlowConfigAttributes) InternalWithRef(ref terra.Reference) SourceFlowConfigAttributes {
	return SourceFlowConfigAttributes{ref: ref}
}

func (sfc SourceFlowConfigAttributes) InternalTokens() hclwrite.Tokens {
	return sfc.ref.InternalTokens()
}

func (sfc SourceFlowConfigAttributes) ApiVersion() terra.StringValue {
	return terra.ReferenceAsString(sfc.ref.Append("api_version"))
}

func (sfc SourceFlowConfigAttributes) ConnectorProfileName() terra.StringValue {
	return terra.ReferenceAsString(sfc.ref.Append("connector_profile_name"))
}

func (sfc SourceFlowConfigAttributes) ConnectorType() terra.StringValue {
	return terra.ReferenceAsString(sfc.ref.Append("connector_type"))
}

func (sfc SourceFlowConfigAttributes) IncrementalPullConfig() terra.ListValue[IncrementalPullConfigAttributes] {
	return terra.ReferenceAsList[IncrementalPullConfigAttributes](sfc.ref.Append("incremental_pull_config"))
}

func (sfc SourceFlowConfigAttributes) SourceConnectorProperties() terra.ListValue[SourceConnectorPropertiesAttributes] {
	return terra.ReferenceAsList[SourceConnectorPropertiesAttributes](sfc.ref.Append("source_connector_properties"))
}

type IncrementalPullConfigAttributes struct {
	ref terra.Reference
}

func (ipc IncrementalPullConfigAttributes) InternalRef() (terra.Reference, error) {
	return ipc.ref, nil
}

func (ipc IncrementalPullConfigAttributes) InternalWithRef(ref terra.Reference) IncrementalPullConfigAttributes {
	return IncrementalPullConfigAttributes{ref: ref}
}

func (ipc IncrementalPullConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ipc.ref.InternalTokens()
}

func (ipc IncrementalPullConfigAttributes) DatetimeTypeFieldName() terra.StringValue {
	return terra.ReferenceAsString(ipc.ref.Append("datetime_type_field_name"))
}

type SourceConnectorPropertiesAttributes struct {
	ref terra.Reference
}

func (scp SourceConnectorPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return scp.ref, nil
}

func (scp SourceConnectorPropertiesAttributes) InternalWithRef(ref terra.Reference) SourceConnectorPropertiesAttributes {
	return SourceConnectorPropertiesAttributes{ref: ref}
}

func (scp SourceConnectorPropertiesAttributes) InternalTokens() hclwrite.Tokens {
	return scp.ref.InternalTokens()
}

func (scp SourceConnectorPropertiesAttributes) Amplitude() terra.ListValue[AmplitudeAttributes] {
	return terra.ReferenceAsList[AmplitudeAttributes](scp.ref.Append("amplitude"))
}

func (scp SourceConnectorPropertiesAttributes) CustomConnector() terra.ListValue[SourceConnectorPropertiesCustomConnectorAttributes] {
	return terra.ReferenceAsList[SourceConnectorPropertiesCustomConnectorAttributes](scp.ref.Append("custom_connector"))
}

func (scp SourceConnectorPropertiesAttributes) Datadog() terra.ListValue[DatadogAttributes] {
	return terra.ReferenceAsList[DatadogAttributes](scp.ref.Append("datadog"))
}

func (scp SourceConnectorPropertiesAttributes) Dynatrace() terra.ListValue[DynatraceAttributes] {
	return terra.ReferenceAsList[DynatraceAttributes](scp.ref.Append("dynatrace"))
}

func (scp SourceConnectorPropertiesAttributes) GoogleAnalytics() terra.ListValue[GoogleAnalyticsAttributes] {
	return terra.ReferenceAsList[GoogleAnalyticsAttributes](scp.ref.Append("google_analytics"))
}

func (scp SourceConnectorPropertiesAttributes) InforNexus() terra.ListValue[InforNexusAttributes] {
	return terra.ReferenceAsList[InforNexusAttributes](scp.ref.Append("infor_nexus"))
}

func (scp SourceConnectorPropertiesAttributes) Marketo() terra.ListValue[SourceConnectorPropertiesMarketoAttributes] {
	return terra.ReferenceAsList[SourceConnectorPropertiesMarketoAttributes](scp.ref.Append("marketo"))
}

func (scp SourceConnectorPropertiesAttributes) S3() terra.ListValue[SourceConnectorPropertiesS3Attributes] {
	return terra.ReferenceAsList[SourceConnectorPropertiesS3Attributes](scp.ref.Append("s3"))
}

func (scp SourceConnectorPropertiesAttributes) Salesforce() terra.ListValue[SourceConnectorPropertiesSalesforceAttributes] {
	return terra.ReferenceAsList[SourceConnectorPropertiesSalesforceAttributes](scp.ref.Append("salesforce"))
}

func (scp SourceConnectorPropertiesAttributes) SapoData() terra.ListValue[SourceConnectorPropertiesSapoDataAttributes] {
	return terra.ReferenceAsList[SourceConnectorPropertiesSapoDataAttributes](scp.ref.Append("sapo_data"))
}

func (scp SourceConnectorPropertiesAttributes) ServiceNow() terra.ListValue[ServiceNowAttributes] {
	return terra.ReferenceAsList[ServiceNowAttributes](scp.ref.Append("service_now"))
}

func (scp SourceConnectorPropertiesAttributes) Singular() terra.ListValue[SingularAttributes] {
	return terra.ReferenceAsList[SingularAttributes](scp.ref.Append("singular"))
}

func (scp SourceConnectorPropertiesAttributes) Slack() terra.ListValue[SlackAttributes] {
	return terra.ReferenceAsList[SlackAttributes](scp.ref.Append("slack"))
}

func (scp SourceConnectorPropertiesAttributes) Trendmicro() terra.ListValue[TrendmicroAttributes] {
	return terra.ReferenceAsList[TrendmicroAttributes](scp.ref.Append("trendmicro"))
}

func (scp SourceConnectorPropertiesAttributes) Veeva() terra.ListValue[VeevaAttributes] {
	return terra.ReferenceAsList[VeevaAttributes](scp.ref.Append("veeva"))
}

func (scp SourceConnectorPropertiesAttributes) Zendesk() terra.ListValue[SourceConnectorPropertiesZendeskAttributes] {
	return terra.ReferenceAsList[SourceConnectorPropertiesZendeskAttributes](scp.ref.Append("zendesk"))
}

type AmplitudeAttributes struct {
	ref terra.Reference
}

func (a AmplitudeAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AmplitudeAttributes) InternalWithRef(ref terra.Reference) AmplitudeAttributes {
	return AmplitudeAttributes{ref: ref}
}

func (a AmplitudeAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a AmplitudeAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("object"))
}

type SourceConnectorPropertiesCustomConnectorAttributes struct {
	ref terra.Reference
}

func (cc SourceConnectorPropertiesCustomConnectorAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc SourceConnectorPropertiesCustomConnectorAttributes) InternalWithRef(ref terra.Reference) SourceConnectorPropertiesCustomConnectorAttributes {
	return SourceConnectorPropertiesCustomConnectorAttributes{ref: ref}
}

func (cc SourceConnectorPropertiesCustomConnectorAttributes) InternalTokens() hclwrite.Tokens {
	return cc.ref.InternalTokens()
}

func (cc SourceConnectorPropertiesCustomConnectorAttributes) CustomProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cc.ref.Append("custom_properties"))
}

func (cc SourceConnectorPropertiesCustomConnectorAttributes) EntityName() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("entity_name"))
}

type DatadogAttributes struct {
	ref terra.Reference
}

func (d DatadogAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DatadogAttributes) InternalWithRef(ref terra.Reference) DatadogAttributes {
	return DatadogAttributes{ref: ref}
}

func (d DatadogAttributes) InternalTokens() hclwrite.Tokens {
	return d.ref.InternalTokens()
}

func (d DatadogAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("object"))
}

type DynatraceAttributes struct {
	ref terra.Reference
}

func (d DynatraceAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DynatraceAttributes) InternalWithRef(ref terra.Reference) DynatraceAttributes {
	return DynatraceAttributes{ref: ref}
}

func (d DynatraceAttributes) InternalTokens() hclwrite.Tokens {
	return d.ref.InternalTokens()
}

func (d DynatraceAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("object"))
}

type GoogleAnalyticsAttributes struct {
	ref terra.Reference
}

func (ga GoogleAnalyticsAttributes) InternalRef() (terra.Reference, error) {
	return ga.ref, nil
}

func (ga GoogleAnalyticsAttributes) InternalWithRef(ref terra.Reference) GoogleAnalyticsAttributes {
	return GoogleAnalyticsAttributes{ref: ref}
}

func (ga GoogleAnalyticsAttributes) InternalTokens() hclwrite.Tokens {
	return ga.ref.InternalTokens()
}

func (ga GoogleAnalyticsAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(ga.ref.Append("object"))
}

type InforNexusAttributes struct {
	ref terra.Reference
}

func (in InforNexusAttributes) InternalRef() (terra.Reference, error) {
	return in.ref, nil
}

func (in InforNexusAttributes) InternalWithRef(ref terra.Reference) InforNexusAttributes {
	return InforNexusAttributes{ref: ref}
}

func (in InforNexusAttributes) InternalTokens() hclwrite.Tokens {
	return in.ref.InternalTokens()
}

func (in InforNexusAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(in.ref.Append("object"))
}

type SourceConnectorPropertiesMarketoAttributes struct {
	ref terra.Reference
}

func (m SourceConnectorPropertiesMarketoAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m SourceConnectorPropertiesMarketoAttributes) InternalWithRef(ref terra.Reference) SourceConnectorPropertiesMarketoAttributes {
	return SourceConnectorPropertiesMarketoAttributes{ref: ref}
}

func (m SourceConnectorPropertiesMarketoAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m SourceConnectorPropertiesMarketoAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("object"))
}

type SourceConnectorPropertiesS3Attributes struct {
	ref terra.Reference
}

func (s SourceConnectorPropertiesS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceConnectorPropertiesS3Attributes) InternalWithRef(ref terra.Reference) SourceConnectorPropertiesS3Attributes {
	return SourceConnectorPropertiesS3Attributes{ref: ref}
}

func (s SourceConnectorPropertiesS3Attributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SourceConnectorPropertiesS3Attributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_name"))
}

func (s SourceConnectorPropertiesS3Attributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_prefix"))
}

func (s SourceConnectorPropertiesS3Attributes) S3InputFormatConfig() terra.ListValue[S3InputFormatConfigAttributes] {
	return terra.ReferenceAsList[S3InputFormatConfigAttributes](s.ref.Append("s3_input_format_config"))
}

type S3InputFormatConfigAttributes struct {
	ref terra.Reference
}

func (sifc S3InputFormatConfigAttributes) InternalRef() (terra.Reference, error) {
	return sifc.ref, nil
}

func (sifc S3InputFormatConfigAttributes) InternalWithRef(ref terra.Reference) S3InputFormatConfigAttributes {
	return S3InputFormatConfigAttributes{ref: ref}
}

func (sifc S3InputFormatConfigAttributes) InternalTokens() hclwrite.Tokens {
	return sifc.ref.InternalTokens()
}

func (sifc S3InputFormatConfigAttributes) S3InputFileType() terra.StringValue {
	return terra.ReferenceAsString(sifc.ref.Append("s3_input_file_type"))
}

type SourceConnectorPropertiesSalesforceAttributes struct {
	ref terra.Reference
}

func (s SourceConnectorPropertiesSalesforceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourceConnectorPropertiesSalesforceAttributes) InternalWithRef(ref terra.Reference) SourceConnectorPropertiesSalesforceAttributes {
	return SourceConnectorPropertiesSalesforceAttributes{ref: ref}
}

func (s SourceConnectorPropertiesSalesforceAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SourceConnectorPropertiesSalesforceAttributes) EnableDynamicFieldUpdate() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("enable_dynamic_field_update"))
}

func (s SourceConnectorPropertiesSalesforceAttributes) IncludeDeletedRecords() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("include_deleted_records"))
}

func (s SourceConnectorPropertiesSalesforceAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("object"))
}

type SourceConnectorPropertiesSapoDataAttributes struct {
	ref terra.Reference
}

func (sd SourceConnectorPropertiesSapoDataAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd SourceConnectorPropertiesSapoDataAttributes) InternalWithRef(ref terra.Reference) SourceConnectorPropertiesSapoDataAttributes {
	return SourceConnectorPropertiesSapoDataAttributes{ref: ref}
}

func (sd SourceConnectorPropertiesSapoDataAttributes) InternalTokens() hclwrite.Tokens {
	return sd.ref.InternalTokens()
}

func (sd SourceConnectorPropertiesSapoDataAttributes) ObjectPath() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("object_path"))
}

type ServiceNowAttributes struct {
	ref terra.Reference
}

func (sn ServiceNowAttributes) InternalRef() (terra.Reference, error) {
	return sn.ref, nil
}

func (sn ServiceNowAttributes) InternalWithRef(ref terra.Reference) ServiceNowAttributes {
	return ServiceNowAttributes{ref: ref}
}

func (sn ServiceNowAttributes) InternalTokens() hclwrite.Tokens {
	return sn.ref.InternalTokens()
}

func (sn ServiceNowAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(sn.ref.Append("object"))
}

type SingularAttributes struct {
	ref terra.Reference
}

func (s SingularAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SingularAttributes) InternalWithRef(ref terra.Reference) SingularAttributes {
	return SingularAttributes{ref: ref}
}

func (s SingularAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SingularAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("object"))
}

type SlackAttributes struct {
	ref terra.Reference
}

func (s SlackAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SlackAttributes) InternalWithRef(ref terra.Reference) SlackAttributes {
	return SlackAttributes{ref: ref}
}

func (s SlackAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SlackAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("object"))
}

type TrendmicroAttributes struct {
	ref terra.Reference
}

func (t TrendmicroAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TrendmicroAttributes) InternalWithRef(ref terra.Reference) TrendmicroAttributes {
	return TrendmicroAttributes{ref: ref}
}

func (t TrendmicroAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TrendmicroAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("object"))
}

type VeevaAttributes struct {
	ref terra.Reference
}

func (v VeevaAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VeevaAttributes) InternalWithRef(ref terra.Reference) VeevaAttributes {
	return VeevaAttributes{ref: ref}
}

func (v VeevaAttributes) InternalTokens() hclwrite.Tokens {
	return v.ref.InternalTokens()
}

func (v VeevaAttributes) DocumentType() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("document_type"))
}

func (v VeevaAttributes) IncludeAllVersions() terra.BoolValue {
	return terra.ReferenceAsBool(v.ref.Append("include_all_versions"))
}

func (v VeevaAttributes) IncludeRenditions() terra.BoolValue {
	return terra.ReferenceAsBool(v.ref.Append("include_renditions"))
}

func (v VeevaAttributes) IncludeSourceFiles() terra.BoolValue {
	return terra.ReferenceAsBool(v.ref.Append("include_source_files"))
}

func (v VeevaAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("object"))
}

type SourceConnectorPropertiesZendeskAttributes struct {
	ref terra.Reference
}

func (z SourceConnectorPropertiesZendeskAttributes) InternalRef() (terra.Reference, error) {
	return z.ref, nil
}

func (z SourceConnectorPropertiesZendeskAttributes) InternalWithRef(ref terra.Reference) SourceConnectorPropertiesZendeskAttributes {
	return SourceConnectorPropertiesZendeskAttributes{ref: ref}
}

func (z SourceConnectorPropertiesZendeskAttributes) InternalTokens() hclwrite.Tokens {
	return z.ref.InternalTokens()
}

func (z SourceConnectorPropertiesZendeskAttributes) Object() terra.StringValue {
	return terra.ReferenceAsString(z.ref.Append("object"))
}

type TaskAttributes struct {
	ref terra.Reference
}

func (t TaskAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TaskAttributes) InternalWithRef(ref terra.Reference) TaskAttributes {
	return TaskAttributes{ref: ref}
}

func (t TaskAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TaskAttributes) DestinationField() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("destination_field"))
}

func (t TaskAttributes) SourceFields() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("source_fields"))
}

func (t TaskAttributes) TaskProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](t.ref.Append("task_properties"))
}

func (t TaskAttributes) TaskType() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("task_type"))
}

func (t TaskAttributes) ConnectorOperator() terra.ListValue[ConnectorOperatorAttributes] {
	return terra.ReferenceAsList[ConnectorOperatorAttributes](t.ref.Append("connector_operator"))
}

type ConnectorOperatorAttributes struct {
	ref terra.Reference
}

func (co ConnectorOperatorAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co ConnectorOperatorAttributes) InternalWithRef(ref terra.Reference) ConnectorOperatorAttributes {
	return ConnectorOperatorAttributes{ref: ref}
}

func (co ConnectorOperatorAttributes) InternalTokens() hclwrite.Tokens {
	return co.ref.InternalTokens()
}

func (co ConnectorOperatorAttributes) Amplitude() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("amplitude"))
}

func (co ConnectorOperatorAttributes) CustomConnector() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("custom_connector"))
}

func (co ConnectorOperatorAttributes) Datadog() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("datadog"))
}

func (co ConnectorOperatorAttributes) Dynatrace() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("dynatrace"))
}

func (co ConnectorOperatorAttributes) GoogleAnalytics() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("google_analytics"))
}

func (co ConnectorOperatorAttributes) InforNexus() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("infor_nexus"))
}

func (co ConnectorOperatorAttributes) Marketo() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("marketo"))
}

func (co ConnectorOperatorAttributes) S3() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("s3"))
}

func (co ConnectorOperatorAttributes) Salesforce() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("salesforce"))
}

func (co ConnectorOperatorAttributes) SapoData() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("sapo_data"))
}

func (co ConnectorOperatorAttributes) ServiceNow() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("service_now"))
}

func (co ConnectorOperatorAttributes) Singular() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("singular"))
}

func (co ConnectorOperatorAttributes) Slack() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("slack"))
}

func (co ConnectorOperatorAttributes) Trendmicro() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("trendmicro"))
}

func (co ConnectorOperatorAttributes) Veeva() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("veeva"))
}

func (co ConnectorOperatorAttributes) Zendesk() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("zendesk"))
}

type TriggerConfigAttributes struct {
	ref terra.Reference
}

func (tc TriggerConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TriggerConfigAttributes) InternalWithRef(ref terra.Reference) TriggerConfigAttributes {
	return TriggerConfigAttributes{ref: ref}
}

func (tc TriggerConfigAttributes) InternalTokens() hclwrite.Tokens {
	return tc.ref.InternalTokens()
}

func (tc TriggerConfigAttributes) TriggerType() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("trigger_type"))
}

func (tc TriggerConfigAttributes) TriggerProperties() terra.ListValue[TriggerPropertiesAttributes] {
	return terra.ReferenceAsList[TriggerPropertiesAttributes](tc.ref.Append("trigger_properties"))
}

type TriggerPropertiesAttributes struct {
	ref terra.Reference
}

func (tp TriggerPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return tp.ref, nil
}

func (tp TriggerPropertiesAttributes) InternalWithRef(ref terra.Reference) TriggerPropertiesAttributes {
	return TriggerPropertiesAttributes{ref: ref}
}

func (tp TriggerPropertiesAttributes) InternalTokens() hclwrite.Tokens {
	return tp.ref.InternalTokens()
}

func (tp TriggerPropertiesAttributes) Scheduled() terra.ListValue[ScheduledAttributes] {
	return terra.ReferenceAsList[ScheduledAttributes](tp.ref.Append("scheduled"))
}

type ScheduledAttributes struct {
	ref terra.Reference
}

func (s ScheduledAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s ScheduledAttributes) InternalWithRef(ref terra.Reference) ScheduledAttributes {
	return ScheduledAttributes{ref: ref}
}

func (s ScheduledAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s ScheduledAttributes) DataPullMode() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("data_pull_mode"))
}

func (s ScheduledAttributes) FirstExecutionFrom() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("first_execution_from"))
}

func (s ScheduledAttributes) ScheduleEndTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("schedule_end_time"))
}

func (s ScheduledAttributes) ScheduleExpression() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("schedule_expression"))
}

func (s ScheduledAttributes) ScheduleOffset() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("schedule_offset"))
}

func (s ScheduledAttributes) ScheduleStartTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("schedule_start_time"))
}

func (s ScheduledAttributes) Timezone() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("timezone"))
}

type DestinationFlowConfigState struct {
	ApiVersion                     string                                `json:"api_version"`
	ConnectorProfileName           string                                `json:"connector_profile_name"`
	ConnectorType                  string                                `json:"connector_type"`
	DestinationConnectorProperties []DestinationConnectorPropertiesState `json:"destination_connector_properties"`
}

type DestinationConnectorPropertiesState struct {
	CustomConnector  []DestinationConnectorPropertiesCustomConnectorState `json:"custom_connector"`
	CustomerProfiles []CustomerProfilesState                              `json:"customer_profiles"`
	EventBridge      []EventBridgeState                                   `json:"event_bridge"`
	Honeycode        []HoneycodeState                                     `json:"honeycode"`
	LookoutMetrics   []LookoutMetricsState                                `json:"lookout_metrics"`
	Marketo          []DestinationConnectorPropertiesMarketoState         `json:"marketo"`
	Redshift         []RedshiftState                                      `json:"redshift"`
	S3               []DestinationConnectorPropertiesS3State              `json:"s3"`
	Salesforce       []DestinationConnectorPropertiesSalesforceState      `json:"salesforce"`
	SapoData         []DestinationConnectorPropertiesSapoDataState        `json:"sapo_data"`
	Snowflake        []SnowflakeState                                     `json:"snowflake"`
	Upsolver         []UpsolverState                                      `json:"upsolver"`
	Zendesk          []DestinationConnectorPropertiesZendeskState         `json:"zendesk"`
}

type DestinationConnectorPropertiesCustomConnectorState struct {
	CustomProperties    map[string]string                         `json:"custom_properties"`
	EntityName          string                                    `json:"entity_name"`
	IdFieldNames        []string                                  `json:"id_field_names"`
	WriteOperationType  string                                    `json:"write_operation_type"`
	ErrorHandlingConfig []CustomConnectorErrorHandlingConfigState `json:"error_handling_config"`
}

type CustomConnectorErrorHandlingConfigState struct {
	BucketName                  string `json:"bucket_name"`
	BucketPrefix                string `json:"bucket_prefix"`
	FailOnFirstDestinationError bool   `json:"fail_on_first_destination_error"`
}

type CustomerProfilesState struct {
	DomainName     string `json:"domain_name"`
	ObjectTypeName string `json:"object_type_name"`
}

type EventBridgeState struct {
	Object              string                                `json:"object"`
	ErrorHandlingConfig []EventBridgeErrorHandlingConfigState `json:"error_handling_config"`
}

type EventBridgeErrorHandlingConfigState struct {
	BucketName                  string `json:"bucket_name"`
	BucketPrefix                string `json:"bucket_prefix"`
	FailOnFirstDestinationError bool   `json:"fail_on_first_destination_error"`
}

type HoneycodeState struct {
	Object              string                              `json:"object"`
	ErrorHandlingConfig []HoneycodeErrorHandlingConfigState `json:"error_handling_config"`
}

type HoneycodeErrorHandlingConfigState struct {
	BucketName                  string `json:"bucket_name"`
	BucketPrefix                string `json:"bucket_prefix"`
	FailOnFirstDestinationError bool   `json:"fail_on_first_destination_error"`
}

type LookoutMetricsState struct{}

type DestinationConnectorPropertiesMarketoState struct {
	Object              string                            `json:"object"`
	ErrorHandlingConfig []MarketoErrorHandlingConfigState `json:"error_handling_config"`
}

type MarketoErrorHandlingConfigState struct {
	BucketName                  string `json:"bucket_name"`
	BucketPrefix                string `json:"bucket_prefix"`
	FailOnFirstDestinationError bool   `json:"fail_on_first_destination_error"`
}

type RedshiftState struct {
	BucketPrefix           string                             `json:"bucket_prefix"`
	IntermediateBucketName string                             `json:"intermediate_bucket_name"`
	Object                 string                             `json:"object"`
	ErrorHandlingConfig    []RedshiftErrorHandlingConfigState `json:"error_handling_config"`
}

type RedshiftErrorHandlingConfigState struct {
	BucketName                  string `json:"bucket_name"`
	BucketPrefix                string `json:"bucket_prefix"`
	FailOnFirstDestinationError bool   `json:"fail_on_first_destination_error"`
}

type DestinationConnectorPropertiesS3State struct {
	BucketName           string                        `json:"bucket_name"`
	BucketPrefix         string                        `json:"bucket_prefix"`
	S3OutputFormatConfig []S3S3OutputFormatConfigState `json:"s3_output_format_config"`
}

type S3S3OutputFormatConfigState struct {
	FileType                 string                                         `json:"file_type"`
	PreserveSourceDataTyping bool                                           `json:"preserve_source_data_typing"`
	AggregationConfig        []S3S3OutputFormatConfigAggregationConfigState `json:"aggregation_config"`
	PrefixConfig             []S3S3OutputFormatConfigPrefixConfigState      `json:"prefix_config"`
}

type S3S3OutputFormatConfigAggregationConfigState struct {
	AggregationType string `json:"aggregation_type"`
}

type S3S3OutputFormatConfigPrefixConfigState struct {
	PrefixFormat string `json:"prefix_format"`
	PrefixType   string `json:"prefix_type"`
}

type DestinationConnectorPropertiesSalesforceState struct {
	IdFieldNames        []string                             `json:"id_field_names"`
	Object              string                               `json:"object"`
	WriteOperationType  string                               `json:"write_operation_type"`
	ErrorHandlingConfig []SalesforceErrorHandlingConfigState `json:"error_handling_config"`
}

type SalesforceErrorHandlingConfigState struct {
	BucketName                  string `json:"bucket_name"`
	BucketPrefix                string `json:"bucket_prefix"`
	FailOnFirstDestinationError bool   `json:"fail_on_first_destination_error"`
}

type DestinationConnectorPropertiesSapoDataState struct {
	IdFieldNames                  []string                             `json:"id_field_names"`
	ObjectPath                    string                               `json:"object_path"`
	WriteOperationType            string                               `json:"write_operation_type"`
	ErrorHandlingConfig           []SapoDataErrorHandlingConfigState   `json:"error_handling_config"`
	SuccessResponseHandlingConfig []SuccessResponseHandlingConfigState `json:"success_response_handling_config"`
}

type SapoDataErrorHandlingConfigState struct {
	BucketName                  string `json:"bucket_name"`
	BucketPrefix                string `json:"bucket_prefix"`
	FailOnFirstDestinationError bool   `json:"fail_on_first_destination_error"`
}

type SuccessResponseHandlingConfigState struct {
	BucketName   string `json:"bucket_name"`
	BucketPrefix string `json:"bucket_prefix"`
}

type SnowflakeState struct {
	BucketPrefix           string                              `json:"bucket_prefix"`
	IntermediateBucketName string                              `json:"intermediate_bucket_name"`
	Object                 string                              `json:"object"`
	ErrorHandlingConfig    []SnowflakeErrorHandlingConfigState `json:"error_handling_config"`
}

type SnowflakeErrorHandlingConfigState struct {
	BucketName                  string `json:"bucket_name"`
	BucketPrefix                string `json:"bucket_prefix"`
	FailOnFirstDestinationError bool   `json:"fail_on_first_destination_error"`
}

type UpsolverState struct {
	BucketName           string                              `json:"bucket_name"`
	BucketPrefix         string                              `json:"bucket_prefix"`
	S3OutputFormatConfig []UpsolverS3OutputFormatConfigState `json:"s3_output_format_config"`
}

type UpsolverS3OutputFormatConfigState struct {
	FileType          string                                               `json:"file_type"`
	AggregationConfig []UpsolverS3OutputFormatConfigAggregationConfigState `json:"aggregation_config"`
	PrefixConfig      []UpsolverS3OutputFormatConfigPrefixConfigState      `json:"prefix_config"`
}

type UpsolverS3OutputFormatConfigAggregationConfigState struct {
	AggregationType string `json:"aggregation_type"`
}

type UpsolverS3OutputFormatConfigPrefixConfigState struct {
	PrefixFormat string `json:"prefix_format"`
	PrefixType   string `json:"prefix_type"`
}

type DestinationConnectorPropertiesZendeskState struct {
	IdFieldNames        []string                          `json:"id_field_names"`
	Object              string                            `json:"object"`
	WriteOperationType  string                            `json:"write_operation_type"`
	ErrorHandlingConfig []ZendeskErrorHandlingConfigState `json:"error_handling_config"`
}

type ZendeskErrorHandlingConfigState struct {
	BucketName                  string `json:"bucket_name"`
	BucketPrefix                string `json:"bucket_prefix"`
	FailOnFirstDestinationError bool   `json:"fail_on_first_destination_error"`
}

type SourceFlowConfigState struct {
	ApiVersion                string                           `json:"api_version"`
	ConnectorProfileName      string                           `json:"connector_profile_name"`
	ConnectorType             string                           `json:"connector_type"`
	IncrementalPullConfig     []IncrementalPullConfigState     `json:"incremental_pull_config"`
	SourceConnectorProperties []SourceConnectorPropertiesState `json:"source_connector_properties"`
}

type IncrementalPullConfigState struct {
	DatetimeTypeFieldName string `json:"datetime_type_field_name"`
}

type SourceConnectorPropertiesState struct {
	Amplitude       []AmplitudeState                                `json:"amplitude"`
	CustomConnector []SourceConnectorPropertiesCustomConnectorState `json:"custom_connector"`
	Datadog         []DatadogState                                  `json:"datadog"`
	Dynatrace       []DynatraceState                                `json:"dynatrace"`
	GoogleAnalytics []GoogleAnalyticsState                          `json:"google_analytics"`
	InforNexus      []InforNexusState                               `json:"infor_nexus"`
	Marketo         []SourceConnectorPropertiesMarketoState         `json:"marketo"`
	S3              []SourceConnectorPropertiesS3State              `json:"s3"`
	Salesforce      []SourceConnectorPropertiesSalesforceState      `json:"salesforce"`
	SapoData        []SourceConnectorPropertiesSapoDataState        `json:"sapo_data"`
	ServiceNow      []ServiceNowState                               `json:"service_now"`
	Singular        []SingularState                                 `json:"singular"`
	Slack           []SlackState                                    `json:"slack"`
	Trendmicro      []TrendmicroState                               `json:"trendmicro"`
	Veeva           []VeevaState                                    `json:"veeva"`
	Zendesk         []SourceConnectorPropertiesZendeskState         `json:"zendesk"`
}

type AmplitudeState struct {
	Object string `json:"object"`
}

type SourceConnectorPropertiesCustomConnectorState struct {
	CustomProperties map[string]string `json:"custom_properties"`
	EntityName       string            `json:"entity_name"`
}

type DatadogState struct {
	Object string `json:"object"`
}

type DynatraceState struct {
	Object string `json:"object"`
}

type GoogleAnalyticsState struct {
	Object string `json:"object"`
}

type InforNexusState struct {
	Object string `json:"object"`
}

type SourceConnectorPropertiesMarketoState struct {
	Object string `json:"object"`
}

type SourceConnectorPropertiesS3State struct {
	BucketName          string                     `json:"bucket_name"`
	BucketPrefix        string                     `json:"bucket_prefix"`
	S3InputFormatConfig []S3InputFormatConfigState `json:"s3_input_format_config"`
}

type S3InputFormatConfigState struct {
	S3InputFileType string `json:"s3_input_file_type"`
}

type SourceConnectorPropertiesSalesforceState struct {
	EnableDynamicFieldUpdate bool   `json:"enable_dynamic_field_update"`
	IncludeDeletedRecords    bool   `json:"include_deleted_records"`
	Object                   string `json:"object"`
}

type SourceConnectorPropertiesSapoDataState struct {
	ObjectPath string `json:"object_path"`
}

type ServiceNowState struct {
	Object string `json:"object"`
}

type SingularState struct {
	Object string `json:"object"`
}

type SlackState struct {
	Object string `json:"object"`
}

type TrendmicroState struct {
	Object string `json:"object"`
}

type VeevaState struct {
	DocumentType       string `json:"document_type"`
	IncludeAllVersions bool   `json:"include_all_versions"`
	IncludeRenditions  bool   `json:"include_renditions"`
	IncludeSourceFiles bool   `json:"include_source_files"`
	Object             string `json:"object"`
}

type SourceConnectorPropertiesZendeskState struct {
	Object string `json:"object"`
}

type TaskState struct {
	DestinationField  string                   `json:"destination_field"`
	SourceFields      []string                 `json:"source_fields"`
	TaskProperties    map[string]string        `json:"task_properties"`
	TaskType          string                   `json:"task_type"`
	ConnectorOperator []ConnectorOperatorState `json:"connector_operator"`
}

type ConnectorOperatorState struct {
	Amplitude       string `json:"amplitude"`
	CustomConnector string `json:"custom_connector"`
	Datadog         string `json:"datadog"`
	Dynatrace       string `json:"dynatrace"`
	GoogleAnalytics string `json:"google_analytics"`
	InforNexus      string `json:"infor_nexus"`
	Marketo         string `json:"marketo"`
	S3              string `json:"s3"`
	Salesforce      string `json:"salesforce"`
	SapoData        string `json:"sapo_data"`
	ServiceNow      string `json:"service_now"`
	Singular        string `json:"singular"`
	Slack           string `json:"slack"`
	Trendmicro      string `json:"trendmicro"`
	Veeva           string `json:"veeva"`
	Zendesk         string `json:"zendesk"`
}

type TriggerConfigState struct {
	TriggerType       string                   `json:"trigger_type"`
	TriggerProperties []TriggerPropertiesState `json:"trigger_properties"`
}

type TriggerPropertiesState struct {
	Scheduled []ScheduledState `json:"scheduled"`
}

type ScheduledState struct {
	DataPullMode       string  `json:"data_pull_mode"`
	FirstExecutionFrom string  `json:"first_execution_from"`
	ScheduleEndTime    string  `json:"schedule_end_time"`
	ScheduleExpression string  `json:"schedule_expression"`
	ScheduleOffset     float64 `json:"schedule_offset"`
	ScheduleStartTime  string  `json:"schedule_start_time"`
	Timezone           string  `json:"timezone"`
}
