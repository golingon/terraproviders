// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamAccessKey(name string, args IamAccessKeyArgs) *IamAccessKey {
	return &IamAccessKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamAccessKey)(nil)

type IamAccessKey struct {
	Name  string
	Args  IamAccessKeyArgs
	state *iamAccessKeyState
}

func (iak *IamAccessKey) Type() string {
	return "aws_iam_access_key"
}

func (iak *IamAccessKey) LocalName() string {
	return iak.Name
}

func (iak *IamAccessKey) Configuration() interface{} {
	return iak.Args
}

func (iak *IamAccessKey) Attributes() iamAccessKeyAttributes {
	return iamAccessKeyAttributes{ref: terra.ReferenceResource(iak)}
}

func (iak *IamAccessKey) ImportState(av io.Reader) error {
	iak.state = &iamAccessKeyState{}
	if err := json.NewDecoder(av).Decode(iak.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iak.Type(), iak.LocalName(), err)
	}
	return nil
}

func (iak *IamAccessKey) State() (*iamAccessKeyState, bool) {
	return iak.state, iak.state != nil
}

func (iak *IamAccessKey) StateMust() *iamAccessKeyState {
	if iak.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iak.Type(), iak.LocalName()))
	}
	return iak.state
}

func (iak *IamAccessKey) DependOn() terra.Reference {
	return terra.ReferenceResource(iak)
}

type IamAccessKeyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PgpKey: string, optional
	PgpKey terra.StringValue `hcl:"pgp_key,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// User: string, required
	User terra.StringValue `hcl:"user,attr" validate:"required"`
	// DependsOn contains resources that IamAccessKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamAccessKeyAttributes struct {
	ref terra.Reference
}

func (iak iamAccessKeyAttributes) CreateDate() terra.StringValue {
	return terra.ReferenceString(iak.ref.Append("create_date"))
}

func (iak iamAccessKeyAttributes) EncryptedSecret() terra.StringValue {
	return terra.ReferenceString(iak.ref.Append("encrypted_secret"))
}

func (iak iamAccessKeyAttributes) EncryptedSesSmtpPasswordV4() terra.StringValue {
	return terra.ReferenceString(iak.ref.Append("encrypted_ses_smtp_password_v4"))
}

func (iak iamAccessKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iak.ref.Append("id"))
}

func (iak iamAccessKeyAttributes) KeyFingerprint() terra.StringValue {
	return terra.ReferenceString(iak.ref.Append("key_fingerprint"))
}

func (iak iamAccessKeyAttributes) PgpKey() terra.StringValue {
	return terra.ReferenceString(iak.ref.Append("pgp_key"))
}

func (iak iamAccessKeyAttributes) Secret() terra.StringValue {
	return terra.ReferenceString(iak.ref.Append("secret"))
}

func (iak iamAccessKeyAttributes) SesSmtpPasswordV4() terra.StringValue {
	return terra.ReferenceString(iak.ref.Append("ses_smtp_password_v4"))
}

func (iak iamAccessKeyAttributes) Status() terra.StringValue {
	return terra.ReferenceString(iak.ref.Append("status"))
}

func (iak iamAccessKeyAttributes) User() terra.StringValue {
	return terra.ReferenceString(iak.ref.Append("user"))
}

type iamAccessKeyState struct {
	CreateDate                 string `json:"create_date"`
	EncryptedSecret            string `json:"encrypted_secret"`
	EncryptedSesSmtpPasswordV4 string `json:"encrypted_ses_smtp_password_v4"`
	Id                         string `json:"id"`
	KeyFingerprint             string `json:"key_fingerprint"`
	PgpKey                     string `json:"pgp_key"`
	Secret                     string `json:"secret"`
	SesSmtpPasswordV4          string `json:"ses_smtp_password_v4"`
	Status                     string `json:"status"`
	User                       string `json:"user"`
}
