// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	apigatewayv2route "github.com/golingon/terraproviders/aws/4.60.0/apigatewayv2route"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigatewayv2Route(name string, args Apigatewayv2RouteArgs) *Apigatewayv2Route {
	return &Apigatewayv2Route{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Apigatewayv2Route)(nil)

type Apigatewayv2Route struct {
	Name  string
	Args  Apigatewayv2RouteArgs
	state *apigatewayv2RouteState
}

func (ar *Apigatewayv2Route) Type() string {
	return "aws_apigatewayv2_route"
}

func (ar *Apigatewayv2Route) LocalName() string {
	return ar.Name
}

func (ar *Apigatewayv2Route) Configuration() interface{} {
	return ar.Args
}

func (ar *Apigatewayv2Route) Attributes() apigatewayv2RouteAttributes {
	return apigatewayv2RouteAttributes{ref: terra.ReferenceResource(ar)}
}

func (ar *Apigatewayv2Route) ImportState(av io.Reader) error {
	ar.state = &apigatewayv2RouteState{}
	if err := json.NewDecoder(av).Decode(ar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ar.Type(), ar.LocalName(), err)
	}
	return nil
}

func (ar *Apigatewayv2Route) State() (*apigatewayv2RouteState, bool) {
	return ar.state, ar.state != nil
}

func (ar *Apigatewayv2Route) StateMust() *apigatewayv2RouteState {
	if ar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ar.Type(), ar.LocalName()))
	}
	return ar.state
}

func (ar *Apigatewayv2Route) DependOn() terra.Reference {
	return terra.ReferenceResource(ar)
}

type Apigatewayv2RouteArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// ApiKeyRequired: bool, optional
	ApiKeyRequired terra.BoolValue `hcl:"api_key_required,attr"`
	// AuthorizationScopes: set of string, optional
	AuthorizationScopes terra.SetValue[terra.StringValue] `hcl:"authorization_scopes,attr"`
	// AuthorizationType: string, optional
	AuthorizationType terra.StringValue `hcl:"authorization_type,attr"`
	// AuthorizerId: string, optional
	AuthorizerId terra.StringValue `hcl:"authorizer_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ModelSelectionExpression: string, optional
	ModelSelectionExpression terra.StringValue `hcl:"model_selection_expression,attr"`
	// OperationName: string, optional
	OperationName terra.StringValue `hcl:"operation_name,attr"`
	// RequestModels: map of string, optional
	RequestModels terra.MapValue[terra.StringValue] `hcl:"request_models,attr"`
	// RouteKey: string, required
	RouteKey terra.StringValue `hcl:"route_key,attr" validate:"required"`
	// RouteResponseSelectionExpression: string, optional
	RouteResponseSelectionExpression terra.StringValue `hcl:"route_response_selection_expression,attr"`
	// Target: string, optional
	Target terra.StringValue `hcl:"target,attr"`
	// RequestParameter: min=0
	RequestParameter []apigatewayv2route.RequestParameter `hcl:"request_parameter,block" validate:"min=0"`
	// DependsOn contains resources that Apigatewayv2Route depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigatewayv2RouteAttributes struct {
	ref terra.Reference
}

func (ar apigatewayv2RouteAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("api_id"))
}

func (ar apigatewayv2RouteAttributes) ApiKeyRequired() terra.BoolValue {
	return terra.ReferenceBool(ar.ref.Append("api_key_required"))
}

func (ar apigatewayv2RouteAttributes) AuthorizationScopes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ar.ref.Append("authorization_scopes"))
}

func (ar apigatewayv2RouteAttributes) AuthorizationType() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("authorization_type"))
}

func (ar apigatewayv2RouteAttributes) AuthorizerId() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("authorizer_id"))
}

func (ar apigatewayv2RouteAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("id"))
}

func (ar apigatewayv2RouteAttributes) ModelSelectionExpression() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("model_selection_expression"))
}

func (ar apigatewayv2RouteAttributes) OperationName() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("operation_name"))
}

func (ar apigatewayv2RouteAttributes) RequestModels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ar.ref.Append("request_models"))
}

func (ar apigatewayv2RouteAttributes) RouteKey() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("route_key"))
}

func (ar apigatewayv2RouteAttributes) RouteResponseSelectionExpression() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("route_response_selection_expression"))
}

func (ar apigatewayv2RouteAttributes) Target() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("target"))
}

func (ar apigatewayv2RouteAttributes) RequestParameter() terra.SetValue[apigatewayv2route.RequestParameterAttributes] {
	return terra.ReferenceSet[apigatewayv2route.RequestParameterAttributes](ar.ref.Append("request_parameter"))
}

type apigatewayv2RouteState struct {
	ApiId                            string                                    `json:"api_id"`
	ApiKeyRequired                   bool                                      `json:"api_key_required"`
	AuthorizationScopes              []string                                  `json:"authorization_scopes"`
	AuthorizationType                string                                    `json:"authorization_type"`
	AuthorizerId                     string                                    `json:"authorizer_id"`
	Id                               string                                    `json:"id"`
	ModelSelectionExpression         string                                    `json:"model_selection_expression"`
	OperationName                    string                                    `json:"operation_name"`
	RequestModels                    map[string]string                         `json:"request_models"`
	RouteKey                         string                                    `json:"route_key"`
	RouteResponseSelectionExpression string                                    `json:"route_response_selection_expression"`
	Target                           string                                    `json:"target"`
	RequestParameter                 []apigatewayv2route.RequestParameterState `json:"request_parameter"`
}
