// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ivschannel "github.com/golingon/terraproviders/aws/4.60.0/ivschannel"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIvsChannel(name string, args IvsChannelArgs) *IvsChannel {
	return &IvsChannel{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IvsChannel)(nil)

type IvsChannel struct {
	Name  string
	Args  IvsChannelArgs
	state *ivsChannelState
}

func (ic *IvsChannel) Type() string {
	return "aws_ivs_channel"
}

func (ic *IvsChannel) LocalName() string {
	return ic.Name
}

func (ic *IvsChannel) Configuration() interface{} {
	return ic.Args
}

func (ic *IvsChannel) Attributes() ivsChannelAttributes {
	return ivsChannelAttributes{ref: terra.ReferenceResource(ic)}
}

func (ic *IvsChannel) ImportState(av io.Reader) error {
	ic.state = &ivsChannelState{}
	if err := json.NewDecoder(av).Decode(ic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ic.Type(), ic.LocalName(), err)
	}
	return nil
}

func (ic *IvsChannel) State() (*ivsChannelState, bool) {
	return ic.state, ic.state != nil
}

func (ic *IvsChannel) StateMust() *ivsChannelState {
	if ic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ic.Type(), ic.LocalName()))
	}
	return ic.state
}

func (ic *IvsChannel) DependOn() terra.Reference {
	return terra.ReferenceResource(ic)
}

type IvsChannelArgs struct {
	// Authorized: bool, optional
	Authorized terra.BoolValue `hcl:"authorized,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LatencyMode: string, optional
	LatencyMode terra.StringValue `hcl:"latency_mode,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// RecordingConfigurationArn: string, optional
	RecordingConfigurationArn terra.StringValue `hcl:"recording_configuration_arn,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *ivschannel.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IvsChannel depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ivsChannelAttributes struct {
	ref terra.Reference
}

func (ic ivsChannelAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("arn"))
}

func (ic ivsChannelAttributes) Authorized() terra.BoolValue {
	return terra.ReferenceBool(ic.ref.Append("authorized"))
}

func (ic ivsChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("id"))
}

func (ic ivsChannelAttributes) IngestEndpoint() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("ingest_endpoint"))
}

func (ic ivsChannelAttributes) LatencyMode() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("latency_mode"))
}

func (ic ivsChannelAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("name"))
}

func (ic ivsChannelAttributes) PlaybackUrl() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("playback_url"))
}

func (ic ivsChannelAttributes) RecordingConfigurationArn() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("recording_configuration_arn"))
}

func (ic ivsChannelAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ic.ref.Append("tags"))
}

func (ic ivsChannelAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ic.ref.Append("tags_all"))
}

func (ic ivsChannelAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("type"))
}

func (ic ivsChannelAttributes) Timeouts() ivschannel.TimeoutsAttributes {
	return terra.ReferenceSingle[ivschannel.TimeoutsAttributes](ic.ref.Append("timeouts"))
}

type ivsChannelState struct {
	Arn                       string                    `json:"arn"`
	Authorized                bool                      `json:"authorized"`
	Id                        string                    `json:"id"`
	IngestEndpoint            string                    `json:"ingest_endpoint"`
	LatencyMode               string                    `json:"latency_mode"`
	Name                      string                    `json:"name"`
	PlaybackUrl               string                    `json:"playback_url"`
	RecordingConfigurationArn string                    `json:"recording_configuration_arn"`
	Tags                      map[string]string         `json:"tags"`
	TagsAll                   map[string]string         `json:"tags_all"`
	Type                      string                    `json:"type"`
	Timeouts                  *ivschannel.TimeoutsState `json:"timeouts"`
}
