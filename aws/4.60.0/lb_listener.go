// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lblistener "github.com/golingon/terraproviders/aws/4.60.0/lblistener"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLbListener(name string, args LbListenerArgs) *LbListener {
	return &LbListener{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LbListener)(nil)

type LbListener struct {
	Name  string
	Args  LbListenerArgs
	state *lbListenerState
}

func (ll *LbListener) Type() string {
	return "aws_lb_listener"
}

func (ll *LbListener) LocalName() string {
	return ll.Name
}

func (ll *LbListener) Configuration() interface{} {
	return ll.Args
}

func (ll *LbListener) Attributes() lbListenerAttributes {
	return lbListenerAttributes{ref: terra.ReferenceResource(ll)}
}

func (ll *LbListener) ImportState(av io.Reader) error {
	ll.state = &lbListenerState{}
	if err := json.NewDecoder(av).Decode(ll.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ll.Type(), ll.LocalName(), err)
	}
	return nil
}

func (ll *LbListener) State() (*lbListenerState, bool) {
	return ll.state, ll.state != nil
}

func (ll *LbListener) StateMust() *lbListenerState {
	if ll.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ll.Type(), ll.LocalName()))
	}
	return ll.state
}

func (ll *LbListener) DependOn() terra.Reference {
	return terra.ReferenceResource(ll)
}

type LbListenerArgs struct {
	// AlpnPolicy: string, optional
	AlpnPolicy terra.StringValue `hcl:"alpn_policy,attr"`
	// CertificateArn: string, optional
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoadBalancerArn: string, required
	LoadBalancerArn terra.StringValue `hcl:"load_balancer_arn,attr" validate:"required"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// SslPolicy: string, optional
	SslPolicy terra.StringValue `hcl:"ssl_policy,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DefaultAction: min=1
	DefaultAction []lblistener.DefaultAction `hcl:"default_action,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *lblistener.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LbListener depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lbListenerAttributes struct {
	ref terra.Reference
}

func (ll lbListenerAttributes) AlpnPolicy() terra.StringValue {
	return terra.ReferenceString(ll.ref.Append("alpn_policy"))
}

func (ll lbListenerAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ll.ref.Append("arn"))
}

func (ll lbListenerAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceString(ll.ref.Append("certificate_arn"))
}

func (ll lbListenerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ll.ref.Append("id"))
}

func (ll lbListenerAttributes) LoadBalancerArn() terra.StringValue {
	return terra.ReferenceString(ll.ref.Append("load_balancer_arn"))
}

func (ll lbListenerAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(ll.ref.Append("port"))
}

func (ll lbListenerAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(ll.ref.Append("protocol"))
}

func (ll lbListenerAttributes) SslPolicy() terra.StringValue {
	return terra.ReferenceString(ll.ref.Append("ssl_policy"))
}

func (ll lbListenerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ll.ref.Append("tags"))
}

func (ll lbListenerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ll.ref.Append("tags_all"))
}

func (ll lbListenerAttributes) DefaultAction() terra.ListValue[lblistener.DefaultActionAttributes] {
	return terra.ReferenceList[lblistener.DefaultActionAttributes](ll.ref.Append("default_action"))
}

func (ll lbListenerAttributes) Timeouts() lblistener.TimeoutsAttributes {
	return terra.ReferenceSingle[lblistener.TimeoutsAttributes](ll.ref.Append("timeouts"))
}

type lbListenerState struct {
	AlpnPolicy      string                          `json:"alpn_policy"`
	Arn             string                          `json:"arn"`
	CertificateArn  string                          `json:"certificate_arn"`
	Id              string                          `json:"id"`
	LoadBalancerArn string                          `json:"load_balancer_arn"`
	Port            float64                         `json:"port"`
	Protocol        string                          `json:"protocol"`
	SslPolicy       string                          `json:"ssl_policy"`
	Tags            map[string]string               `json:"tags"`
	TagsAll         map[string]string               `json:"tags_all"`
	DefaultAction   []lblistener.DefaultActionState `json:"default_action"`
	Timeouts        *lblistener.TimeoutsState       `json:"timeouts"`
}
