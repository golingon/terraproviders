// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package redshiftcluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ClusterNodes struct{}

type Logging struct {
	// BucketName: string, optional
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// Enable: bool, required
	Enable terra.BoolValue `hcl:"enable,attr" validate:"required"`
	// LogDestinationType: string, optional
	LogDestinationType terra.StringValue `hcl:"log_destination_type,attr"`
	// LogExports: set of string, optional
	LogExports terra.SetValue[terra.StringValue] `hcl:"log_exports,attr"`
	// S3KeyPrefix: string, optional
	S3KeyPrefix terra.StringValue `hcl:"s3_key_prefix,attr"`
}

type SnapshotCopy struct {
	// DestinationRegion: string, required
	DestinationRegion terra.StringValue `hcl:"destination_region,attr" validate:"required"`
	// GrantName: string, optional
	GrantName terra.StringValue `hcl:"grant_name,attr"`
	// RetentionPeriod: number, optional
	RetentionPeriod terra.NumberValue `hcl:"retention_period,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ClusterNodesAttributes struct {
	ref terra.Reference
}

func (cn ClusterNodesAttributes) InternalRef() terra.Reference {
	return cn.ref
}

func (cn ClusterNodesAttributes) InternalWithRef(ref terra.Reference) ClusterNodesAttributes {
	return ClusterNodesAttributes{ref: ref}
}

func (cn ClusterNodesAttributes) InternalTokens() hclwrite.Tokens {
	return cn.ref.InternalTokens()
}

func (cn ClusterNodesAttributes) NodeRole() terra.StringValue {
	return terra.ReferenceAsString(cn.ref.Append("node_role"))
}

func (cn ClusterNodesAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(cn.ref.Append("private_ip_address"))
}

func (cn ClusterNodesAttributes) PublicIpAddress() terra.StringValue {
	return terra.ReferenceAsString(cn.ref.Append("public_ip_address"))
}

type LoggingAttributes struct {
	ref terra.Reference
}

func (l LoggingAttributes) InternalRef() terra.Reference {
	return l.ref
}

func (l LoggingAttributes) InternalWithRef(ref terra.Reference) LoggingAttributes {
	return LoggingAttributes{ref: ref}
}

func (l LoggingAttributes) InternalTokens() hclwrite.Tokens {
	return l.ref.InternalTokens()
}

func (l LoggingAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("bucket_name"))
}

func (l LoggingAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("enable"))
}

func (l LoggingAttributes) LogDestinationType() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("log_destination_type"))
}

func (l LoggingAttributes) LogExports() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](l.ref.Append("log_exports"))
}

func (l LoggingAttributes) S3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("s3_key_prefix"))
}

type SnapshotCopyAttributes struct {
	ref terra.Reference
}

func (sc SnapshotCopyAttributes) InternalRef() terra.Reference {
	return sc.ref
}

func (sc SnapshotCopyAttributes) InternalWithRef(ref terra.Reference) SnapshotCopyAttributes {
	return SnapshotCopyAttributes{ref: ref}
}

func (sc SnapshotCopyAttributes) InternalTokens() hclwrite.Tokens {
	return sc.ref.InternalTokens()
}

func (sc SnapshotCopyAttributes) DestinationRegion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("destination_region"))
}

func (sc SnapshotCopyAttributes) GrantName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("grant_name"))
}

func (sc SnapshotCopyAttributes) RetentionPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("retention_period"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ClusterNodesState struct {
	NodeRole         string `json:"node_role"`
	PrivateIpAddress string `json:"private_ip_address"`
	PublicIpAddress  string `json:"public_ip_address"`
}

type LoggingState struct {
	BucketName         string   `json:"bucket_name"`
	Enable             bool     `json:"enable"`
	LogDestinationType string   `json:"log_destination_type"`
	LogExports         []string `json:"log_exports"`
	S3KeyPrefix        string   `json:"s3_key_prefix"`
}

type SnapshotCopyState struct {
	DestinationRegion string  `json:"destination_region"`
	GrantName         string  `json:"grant_name"`
	RetentionPeriod   float64 `json:"retention_period"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
