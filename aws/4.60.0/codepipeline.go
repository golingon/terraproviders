// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	codepipeline "github.com/golingon/terraproviders/aws/4.60.0/codepipeline"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCodepipeline(name string, args CodepipelineArgs) *Codepipeline {
	return &Codepipeline{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Codepipeline)(nil)

type Codepipeline struct {
	Name  string
	Args  CodepipelineArgs
	state *codepipelineState
}

func (c *Codepipeline) Type() string {
	return "aws_codepipeline"
}

func (c *Codepipeline) LocalName() string {
	return c.Name
}

func (c *Codepipeline) Configuration() interface{} {
	return c.Args
}

func (c *Codepipeline) Attributes() codepipelineAttributes {
	return codepipelineAttributes{ref: terra.ReferenceResource(c)}
}

func (c *Codepipeline) ImportState(av io.Reader) error {
	c.state = &codepipelineState{}
	if err := json.NewDecoder(av).Decode(c.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", c.Type(), c.LocalName(), err)
	}
	return nil
}

func (c *Codepipeline) State() (*codepipelineState, bool) {
	return c.state, c.state != nil
}

func (c *Codepipeline) StateMust() *codepipelineState {
	if c.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", c.Type(), c.LocalName()))
	}
	return c.state
}

func (c *Codepipeline) DependOn() terra.Reference {
	return terra.ReferenceResource(c)
}

type CodepipelineArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ArtifactStore: min=1
	ArtifactStore []codepipeline.ArtifactStore `hcl:"artifact_store,block" validate:"min=1"`
	// Stage: min=2
	Stage []codepipeline.Stage `hcl:"stage,block" validate:"min=2"`
	// DependsOn contains resources that Codepipeline depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type codepipelineAttributes struct {
	ref terra.Reference
}

func (c codepipelineAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("arn"))
}

func (c codepipelineAttributes) Id() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("id"))
}

func (c codepipelineAttributes) Name() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("name"))
}

func (c codepipelineAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("role_arn"))
}

func (c codepipelineAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](c.ref.Append("tags"))
}

func (c codepipelineAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](c.ref.Append("tags_all"))
}

func (c codepipelineAttributes) ArtifactStore() terra.SetValue[codepipeline.ArtifactStoreAttributes] {
	return terra.ReferenceSet[codepipeline.ArtifactStoreAttributes](c.ref.Append("artifact_store"))
}

func (c codepipelineAttributes) Stage() terra.ListValue[codepipeline.StageAttributes] {
	return terra.ReferenceList[codepipeline.StageAttributes](c.ref.Append("stage"))
}

type codepipelineState struct {
	Arn           string                            `json:"arn"`
	Id            string                            `json:"id"`
	Name          string                            `json:"name"`
	RoleArn       string                            `json:"role_arn"`
	Tags          map[string]string                 `json:"tags"`
	TagsAll       map[string]string                 `json:"tags_all"`
	ArtifactStore []codepipeline.ArtifactStoreState `json:"artifact_store"`
	Stage         []codepipeline.StageState         `json:"stage"`
}
