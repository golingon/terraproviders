// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAlbListenerCertificate(name string, args AlbListenerCertificateArgs) *AlbListenerCertificate {
	return &AlbListenerCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AlbListenerCertificate)(nil)

type AlbListenerCertificate struct {
	Name  string
	Args  AlbListenerCertificateArgs
	state *albListenerCertificateState
}

func (alc *AlbListenerCertificate) Type() string {
	return "aws_alb_listener_certificate"
}

func (alc *AlbListenerCertificate) LocalName() string {
	return alc.Name
}

func (alc *AlbListenerCertificate) Configuration() interface{} {
	return alc.Args
}

func (alc *AlbListenerCertificate) Attributes() albListenerCertificateAttributes {
	return albListenerCertificateAttributes{ref: terra.ReferenceResource(alc)}
}

func (alc *AlbListenerCertificate) ImportState(av io.Reader) error {
	alc.state = &albListenerCertificateState{}
	if err := json.NewDecoder(av).Decode(alc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alc.Type(), alc.LocalName(), err)
	}
	return nil
}

func (alc *AlbListenerCertificate) State() (*albListenerCertificateState, bool) {
	return alc.state, alc.state != nil
}

func (alc *AlbListenerCertificate) StateMust() *albListenerCertificateState {
	if alc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alc.Type(), alc.LocalName()))
	}
	return alc.state
}

func (alc *AlbListenerCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(alc)
}

type AlbListenerCertificateArgs struct {
	// CertificateArn: string, required
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListenerArn: string, required
	ListenerArn terra.StringValue `hcl:"listener_arn,attr" validate:"required"`
	// DependsOn contains resources that AlbListenerCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type albListenerCertificateAttributes struct {
	ref terra.Reference
}

func (alc albListenerCertificateAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceString(alc.ref.Append("certificate_arn"))
}

func (alc albListenerCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(alc.ref.Append("id"))
}

func (alc albListenerCertificateAttributes) ListenerArn() terra.StringValue {
	return terra.ReferenceString(alc.ref.Append("listener_arn"))
}

type albListenerCertificateState struct {
	CertificateArn string `json:"certificate_arn"`
	Id             string `json:"id"`
	ListenerArn    string `json:"listener_arn"`
}
