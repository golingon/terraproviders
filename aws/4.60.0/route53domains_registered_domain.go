// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	route53domainsregistereddomain "github.com/golingon/terraproviders/aws/4.60.0/route53domainsregistereddomain"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53DomainsRegisteredDomain(name string, args Route53DomainsRegisteredDomainArgs) *Route53DomainsRegisteredDomain {
	return &Route53DomainsRegisteredDomain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53DomainsRegisteredDomain)(nil)

type Route53DomainsRegisteredDomain struct {
	Name  string
	Args  Route53DomainsRegisteredDomainArgs
	state *route53DomainsRegisteredDomainState
}

func (rrd *Route53DomainsRegisteredDomain) Type() string {
	return "aws_route53domains_registered_domain"
}

func (rrd *Route53DomainsRegisteredDomain) LocalName() string {
	return rrd.Name
}

func (rrd *Route53DomainsRegisteredDomain) Configuration() interface{} {
	return rrd.Args
}

func (rrd *Route53DomainsRegisteredDomain) Attributes() route53DomainsRegisteredDomainAttributes {
	return route53DomainsRegisteredDomainAttributes{ref: terra.ReferenceResource(rrd)}
}

func (rrd *Route53DomainsRegisteredDomain) ImportState(av io.Reader) error {
	rrd.state = &route53DomainsRegisteredDomainState{}
	if err := json.NewDecoder(av).Decode(rrd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrd.Type(), rrd.LocalName(), err)
	}
	return nil
}

func (rrd *Route53DomainsRegisteredDomain) State() (*route53DomainsRegisteredDomainState, bool) {
	return rrd.state, rrd.state != nil
}

func (rrd *Route53DomainsRegisteredDomain) StateMust() *route53DomainsRegisteredDomainState {
	if rrd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrd.Type(), rrd.LocalName()))
	}
	return rrd.state
}

func (rrd *Route53DomainsRegisteredDomain) DependOn() terra.Reference {
	return terra.ReferenceResource(rrd)
}

type Route53DomainsRegisteredDomainArgs struct {
	// AdminPrivacy: bool, optional
	AdminPrivacy terra.BoolValue `hcl:"admin_privacy,attr"`
	// AutoRenew: bool, optional
	AutoRenew terra.BoolValue `hcl:"auto_renew,attr"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RegistrantPrivacy: bool, optional
	RegistrantPrivacy terra.BoolValue `hcl:"registrant_privacy,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TechPrivacy: bool, optional
	TechPrivacy terra.BoolValue `hcl:"tech_privacy,attr"`
	// TransferLock: bool, optional
	TransferLock terra.BoolValue `hcl:"transfer_lock,attr"`
	// AdminContact: optional
	AdminContact *route53domainsregistereddomain.AdminContact `hcl:"admin_contact,block"`
	// NameServer: min=0,max=6
	NameServer []route53domainsregistereddomain.NameServer `hcl:"name_server,block" validate:"min=0,max=6"`
	// RegistrantContact: optional
	RegistrantContact *route53domainsregistereddomain.RegistrantContact `hcl:"registrant_contact,block"`
	// TechContact: optional
	TechContact *route53domainsregistereddomain.TechContact `hcl:"tech_contact,block"`
	// Timeouts: optional
	Timeouts *route53domainsregistereddomain.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Route53DomainsRegisteredDomain depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53DomainsRegisteredDomainAttributes struct {
	ref terra.Reference
}

func (rrd route53DomainsRegisteredDomainAttributes) AbuseContactEmail() terra.StringValue {
	return terra.ReferenceString(rrd.ref.Append("abuse_contact_email"))
}

func (rrd route53DomainsRegisteredDomainAttributes) AbuseContactPhone() terra.StringValue {
	return terra.ReferenceString(rrd.ref.Append("abuse_contact_phone"))
}

func (rrd route53DomainsRegisteredDomainAttributes) AdminPrivacy() terra.BoolValue {
	return terra.ReferenceBool(rrd.ref.Append("admin_privacy"))
}

func (rrd route53DomainsRegisteredDomainAttributes) AutoRenew() terra.BoolValue {
	return terra.ReferenceBool(rrd.ref.Append("auto_renew"))
}

func (rrd route53DomainsRegisteredDomainAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceString(rrd.ref.Append("creation_date"))
}

func (rrd route53DomainsRegisteredDomainAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(rrd.ref.Append("domain_name"))
}

func (rrd route53DomainsRegisteredDomainAttributes) ExpirationDate() terra.StringValue {
	return terra.ReferenceString(rrd.ref.Append("expiration_date"))
}

func (rrd route53DomainsRegisteredDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rrd.ref.Append("id"))
}

func (rrd route53DomainsRegisteredDomainAttributes) RegistrantPrivacy() terra.BoolValue {
	return terra.ReferenceBool(rrd.ref.Append("registrant_privacy"))
}

func (rrd route53DomainsRegisteredDomainAttributes) RegistrarName() terra.StringValue {
	return terra.ReferenceString(rrd.ref.Append("registrar_name"))
}

func (rrd route53DomainsRegisteredDomainAttributes) RegistrarUrl() terra.StringValue {
	return terra.ReferenceString(rrd.ref.Append("registrar_url"))
}

func (rrd route53DomainsRegisteredDomainAttributes) Reseller() terra.StringValue {
	return terra.ReferenceString(rrd.ref.Append("reseller"))
}

func (rrd route53DomainsRegisteredDomainAttributes) StatusList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](rrd.ref.Append("status_list"))
}

func (rrd route53DomainsRegisteredDomainAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrd.ref.Append("tags"))
}

func (rrd route53DomainsRegisteredDomainAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrd.ref.Append("tags_all"))
}

func (rrd route53DomainsRegisteredDomainAttributes) TechPrivacy() terra.BoolValue {
	return terra.ReferenceBool(rrd.ref.Append("tech_privacy"))
}

func (rrd route53DomainsRegisteredDomainAttributes) TransferLock() terra.BoolValue {
	return terra.ReferenceBool(rrd.ref.Append("transfer_lock"))
}

func (rrd route53DomainsRegisteredDomainAttributes) UpdatedDate() terra.StringValue {
	return terra.ReferenceString(rrd.ref.Append("updated_date"))
}

func (rrd route53DomainsRegisteredDomainAttributes) WhoisServer() terra.StringValue {
	return terra.ReferenceString(rrd.ref.Append("whois_server"))
}

func (rrd route53DomainsRegisteredDomainAttributes) AdminContact() terra.ListValue[route53domainsregistereddomain.AdminContactAttributes] {
	return terra.ReferenceList[route53domainsregistereddomain.AdminContactAttributes](rrd.ref.Append("admin_contact"))
}

func (rrd route53DomainsRegisteredDomainAttributes) NameServer() terra.ListValue[route53domainsregistereddomain.NameServerAttributes] {
	return terra.ReferenceList[route53domainsregistereddomain.NameServerAttributes](rrd.ref.Append("name_server"))
}

func (rrd route53DomainsRegisteredDomainAttributes) RegistrantContact() terra.ListValue[route53domainsregistereddomain.RegistrantContactAttributes] {
	return terra.ReferenceList[route53domainsregistereddomain.RegistrantContactAttributes](rrd.ref.Append("registrant_contact"))
}

func (rrd route53DomainsRegisteredDomainAttributes) TechContact() terra.ListValue[route53domainsregistereddomain.TechContactAttributes] {
	return terra.ReferenceList[route53domainsregistereddomain.TechContactAttributes](rrd.ref.Append("tech_contact"))
}

func (rrd route53DomainsRegisteredDomainAttributes) Timeouts() route53domainsregistereddomain.TimeoutsAttributes {
	return terra.ReferenceSingle[route53domainsregistereddomain.TimeoutsAttributes](rrd.ref.Append("timeouts"))
}

type route53DomainsRegisteredDomainState struct {
	AbuseContactEmail string                                                  `json:"abuse_contact_email"`
	AbuseContactPhone string                                                  `json:"abuse_contact_phone"`
	AdminPrivacy      bool                                                    `json:"admin_privacy"`
	AutoRenew         bool                                                    `json:"auto_renew"`
	CreationDate      string                                                  `json:"creation_date"`
	DomainName        string                                                  `json:"domain_name"`
	ExpirationDate    string                                                  `json:"expiration_date"`
	Id                string                                                  `json:"id"`
	RegistrantPrivacy bool                                                    `json:"registrant_privacy"`
	RegistrarName     string                                                  `json:"registrar_name"`
	RegistrarUrl      string                                                  `json:"registrar_url"`
	Reseller          string                                                  `json:"reseller"`
	StatusList        []string                                                `json:"status_list"`
	Tags              map[string]string                                       `json:"tags"`
	TagsAll           map[string]string                                       `json:"tags_all"`
	TechPrivacy       bool                                                    `json:"tech_privacy"`
	TransferLock      bool                                                    `json:"transfer_lock"`
	UpdatedDate       string                                                  `json:"updated_date"`
	WhoisServer       string                                                  `json:"whois_server"`
	AdminContact      []route53domainsregistereddomain.AdminContactState      `json:"admin_contact"`
	NameServer        []route53domainsregistereddomain.NameServerState        `json:"name_server"`
	RegistrantContact []route53domainsregistereddomain.RegistrantContactState `json:"registrant_contact"`
	TechContact       []route53domainsregistereddomain.TechContactState       `json:"tech_contact"`
	Timeouts          *route53domainsregistereddomain.TimeoutsState           `json:"timeouts"`
}
