// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package ecrpublicrepository

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CatalogData struct {
	// AboutText: string, optional
	AboutText terra.StringValue `hcl:"about_text,attr"`
	// Architectures: set of string, optional
	Architectures terra.SetValue[terra.StringValue] `hcl:"architectures,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// LogoImageBlob: string, optional
	LogoImageBlob terra.StringValue `hcl:"logo_image_blob,attr"`
	// OperatingSystems: set of string, optional
	OperatingSystems terra.SetValue[terra.StringValue] `hcl:"operating_systems,attr"`
	// UsageText: string, optional
	UsageText terra.StringValue `hcl:"usage_text,attr"`
}

type Timeouts struct {
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type CatalogDataAttributes struct {
	ref terra.Reference
}

func (cd CatalogDataAttributes) InternalRef() terra.Reference {
	return cd.ref
}

func (cd CatalogDataAttributes) InternalWithRef(ref terra.Reference) CatalogDataAttributes {
	return CatalogDataAttributes{ref: ref}
}

func (cd CatalogDataAttributes) InternalTokens() hclwrite.Tokens {
	return cd.ref.InternalTokens()
}

func (cd CatalogDataAttributes) AboutText() terra.StringValue {
	return terra.ReferenceString(cd.ref.Append("about_text"))
}

func (cd CatalogDataAttributes) Architectures() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cd.ref.Append("architectures"))
}

func (cd CatalogDataAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cd.ref.Append("description"))
}

func (cd CatalogDataAttributes) LogoImageBlob() terra.StringValue {
	return terra.ReferenceString(cd.ref.Append("logo_image_blob"))
}

func (cd CatalogDataAttributes) OperatingSystems() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cd.ref.Append("operating_systems"))
}

func (cd CatalogDataAttributes) UsageText() terra.StringValue {
	return terra.ReferenceString(cd.ref.Append("usage_text"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

type CatalogDataState struct {
	AboutText        string   `json:"about_text"`
	Architectures    []string `json:"architectures"`
	Description      string   `json:"description"`
	LogoImageBlob    string   `json:"logo_image_blob"`
	OperatingSystems []string `json:"operating_systems"`
	UsageText        string   `json:"usage_text"`
}

type TimeoutsState struct {
	Delete string `json:"delete"`
}
