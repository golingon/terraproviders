// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKinesisStreamConsumer(name string, args KinesisStreamConsumerArgs) *KinesisStreamConsumer {
	return &KinesisStreamConsumer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KinesisStreamConsumer)(nil)

type KinesisStreamConsumer struct {
	Name  string
	Args  KinesisStreamConsumerArgs
	state *kinesisStreamConsumerState
}

func (ksc *KinesisStreamConsumer) Type() string {
	return "aws_kinesis_stream_consumer"
}

func (ksc *KinesisStreamConsumer) LocalName() string {
	return ksc.Name
}

func (ksc *KinesisStreamConsumer) Configuration() interface{} {
	return ksc.Args
}

func (ksc *KinesisStreamConsumer) Attributes() kinesisStreamConsumerAttributes {
	return kinesisStreamConsumerAttributes{ref: terra.ReferenceResource(ksc)}
}

func (ksc *KinesisStreamConsumer) ImportState(av io.Reader) error {
	ksc.state = &kinesisStreamConsumerState{}
	if err := json.NewDecoder(av).Decode(ksc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ksc.Type(), ksc.LocalName(), err)
	}
	return nil
}

func (ksc *KinesisStreamConsumer) State() (*kinesisStreamConsumerState, bool) {
	return ksc.state, ksc.state != nil
}

func (ksc *KinesisStreamConsumer) StateMust() *kinesisStreamConsumerState {
	if ksc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ksc.Type(), ksc.LocalName()))
	}
	return ksc.state
}

func (ksc *KinesisStreamConsumer) DependOn() terra.Reference {
	return terra.ReferenceResource(ksc)
}

type KinesisStreamConsumerArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StreamArn: string, required
	StreamArn terra.StringValue `hcl:"stream_arn,attr" validate:"required"`
	// DependsOn contains resources that KinesisStreamConsumer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kinesisStreamConsumerAttributes struct {
	ref terra.Reference
}

func (ksc kinesisStreamConsumerAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ksc.ref.Append("arn"))
}

func (ksc kinesisStreamConsumerAttributes) CreationTimestamp() terra.StringValue {
	return terra.ReferenceString(ksc.ref.Append("creation_timestamp"))
}

func (ksc kinesisStreamConsumerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ksc.ref.Append("id"))
}

func (ksc kinesisStreamConsumerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ksc.ref.Append("name"))
}

func (ksc kinesisStreamConsumerAttributes) StreamArn() terra.StringValue {
	return terra.ReferenceString(ksc.ref.Append("stream_arn"))
}

type kinesisStreamConsumerState struct {
	Arn               string `json:"arn"`
	CreationTimestamp string `json:"creation_timestamp"`
	Id                string `json:"id"`
	Name              string `json:"name"`
	StreamArn         string `json:"stream_arn"`
}
