// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53ResolverFirewallRuleGroup(name string, args Route53ResolverFirewallRuleGroupArgs) *Route53ResolverFirewallRuleGroup {
	return &Route53ResolverFirewallRuleGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53ResolverFirewallRuleGroup)(nil)

type Route53ResolverFirewallRuleGroup struct {
	Name  string
	Args  Route53ResolverFirewallRuleGroupArgs
	state *route53ResolverFirewallRuleGroupState
}

func (rrfrg *Route53ResolverFirewallRuleGroup) Type() string {
	return "aws_route53_resolver_firewall_rule_group"
}

func (rrfrg *Route53ResolverFirewallRuleGroup) LocalName() string {
	return rrfrg.Name
}

func (rrfrg *Route53ResolverFirewallRuleGroup) Configuration() interface{} {
	return rrfrg.Args
}

func (rrfrg *Route53ResolverFirewallRuleGroup) Attributes() route53ResolverFirewallRuleGroupAttributes {
	return route53ResolverFirewallRuleGroupAttributes{ref: terra.ReferenceResource(rrfrg)}
}

func (rrfrg *Route53ResolverFirewallRuleGroup) ImportState(av io.Reader) error {
	rrfrg.state = &route53ResolverFirewallRuleGroupState{}
	if err := json.NewDecoder(av).Decode(rrfrg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrfrg.Type(), rrfrg.LocalName(), err)
	}
	return nil
}

func (rrfrg *Route53ResolverFirewallRuleGroup) State() (*route53ResolverFirewallRuleGroupState, bool) {
	return rrfrg.state, rrfrg.state != nil
}

func (rrfrg *Route53ResolverFirewallRuleGroup) StateMust() *route53ResolverFirewallRuleGroupState {
	if rrfrg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrfrg.Type(), rrfrg.LocalName()))
	}
	return rrfrg.state
}

func (rrfrg *Route53ResolverFirewallRuleGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(rrfrg)
}

type Route53ResolverFirewallRuleGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that Route53ResolverFirewallRuleGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53ResolverFirewallRuleGroupAttributes struct {
	ref terra.Reference
}

func (rrfrg route53ResolverFirewallRuleGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rrfrg.ref.Append("arn"))
}

func (rrfrg route53ResolverFirewallRuleGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rrfrg.ref.Append("id"))
}

func (rrfrg route53ResolverFirewallRuleGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rrfrg.ref.Append("name"))
}

func (rrfrg route53ResolverFirewallRuleGroupAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(rrfrg.ref.Append("owner_id"))
}

func (rrfrg route53ResolverFirewallRuleGroupAttributes) ShareStatus() terra.StringValue {
	return terra.ReferenceString(rrfrg.ref.Append("share_status"))
}

func (rrfrg route53ResolverFirewallRuleGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrfrg.ref.Append("tags"))
}

func (rrfrg route53ResolverFirewallRuleGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrfrg.ref.Append("tags_all"))
}

type route53ResolverFirewallRuleGroupState struct {
	Arn         string            `json:"arn"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	OwnerId     string            `json:"owner_id"`
	ShareStatus string            `json:"share_status"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
