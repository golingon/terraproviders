// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppsyncDomainName(name string, args AppsyncDomainNameArgs) *AppsyncDomainName {
	return &AppsyncDomainName{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppsyncDomainName)(nil)

type AppsyncDomainName struct {
	Name  string
	Args  AppsyncDomainNameArgs
	state *appsyncDomainNameState
}

func (adn *AppsyncDomainName) Type() string {
	return "aws_appsync_domain_name"
}

func (adn *AppsyncDomainName) LocalName() string {
	return adn.Name
}

func (adn *AppsyncDomainName) Configuration() interface{} {
	return adn.Args
}

func (adn *AppsyncDomainName) Attributes() appsyncDomainNameAttributes {
	return appsyncDomainNameAttributes{ref: terra.ReferenceResource(adn)}
}

func (adn *AppsyncDomainName) ImportState(av io.Reader) error {
	adn.state = &appsyncDomainNameState{}
	if err := json.NewDecoder(av).Decode(adn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adn.Type(), adn.LocalName(), err)
	}
	return nil
}

func (adn *AppsyncDomainName) State() (*appsyncDomainNameState, bool) {
	return adn.state, adn.state != nil
}

func (adn *AppsyncDomainName) StateMust() *appsyncDomainNameState {
	if adn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adn.Type(), adn.LocalName()))
	}
	return adn.state
}

func (adn *AppsyncDomainName) DependOn() terra.Reference {
	return terra.ReferenceResource(adn)
}

type AppsyncDomainNameArgs struct {
	// CertificateArn: string, required
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DependsOn contains resources that AppsyncDomainName depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appsyncDomainNameAttributes struct {
	ref terra.Reference
}

func (adn appsyncDomainNameAttributes) AppsyncDomainName() terra.StringValue {
	return terra.ReferenceString(adn.ref.Append("appsync_domain_name"))
}

func (adn appsyncDomainNameAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceString(adn.ref.Append("certificate_arn"))
}

func (adn appsyncDomainNameAttributes) Description() terra.StringValue {
	return terra.ReferenceString(adn.ref.Append("description"))
}

func (adn appsyncDomainNameAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(adn.ref.Append("domain_name"))
}

func (adn appsyncDomainNameAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceString(adn.ref.Append("hosted_zone_id"))
}

func (adn appsyncDomainNameAttributes) Id() terra.StringValue {
	return terra.ReferenceString(adn.ref.Append("id"))
}

type appsyncDomainNameState struct {
	AppsyncDomainName string `json:"appsync_domain_name"`
	CertificateArn    string `json:"certificate_arn"`
	Description       string `json:"description"`
	DomainName        string `json:"domain_name"`
	HostedZoneId      string `json:"hosted_zone_id"`
	Id                string `json:"id"`
}
