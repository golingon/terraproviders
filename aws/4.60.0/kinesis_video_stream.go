// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	kinesisvideostream "github.com/golingon/terraproviders/aws/4.60.0/kinesisvideostream"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKinesisVideoStream(name string, args KinesisVideoStreamArgs) *KinesisVideoStream {
	return &KinesisVideoStream{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KinesisVideoStream)(nil)

type KinesisVideoStream struct {
	Name  string
	Args  KinesisVideoStreamArgs
	state *kinesisVideoStreamState
}

func (kvs *KinesisVideoStream) Type() string {
	return "aws_kinesis_video_stream"
}

func (kvs *KinesisVideoStream) LocalName() string {
	return kvs.Name
}

func (kvs *KinesisVideoStream) Configuration() interface{} {
	return kvs.Args
}

func (kvs *KinesisVideoStream) Attributes() kinesisVideoStreamAttributes {
	return kinesisVideoStreamAttributes{ref: terra.ReferenceResource(kvs)}
}

func (kvs *KinesisVideoStream) ImportState(av io.Reader) error {
	kvs.state = &kinesisVideoStreamState{}
	if err := json.NewDecoder(av).Decode(kvs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kvs.Type(), kvs.LocalName(), err)
	}
	return nil
}

func (kvs *KinesisVideoStream) State() (*kinesisVideoStreamState, bool) {
	return kvs.state, kvs.state != nil
}

func (kvs *KinesisVideoStream) StateMust() *kinesisVideoStreamState {
	if kvs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kvs.Type(), kvs.LocalName()))
	}
	return kvs.state
}

func (kvs *KinesisVideoStream) DependOn() terra.Reference {
	return terra.ReferenceResource(kvs)
}

type KinesisVideoStreamArgs struct {
	// DataRetentionInHours: number, optional
	DataRetentionInHours terra.NumberValue `hcl:"data_retention_in_hours,attr"`
	// DeviceName: string, optional
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// MediaType: string, optional
	MediaType terra.StringValue `hcl:"media_type,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *kinesisvideostream.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that KinesisVideoStream depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kinesisVideoStreamAttributes struct {
	ref terra.Reference
}

func (kvs kinesisVideoStreamAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(kvs.ref.Append("arn"))
}

func (kvs kinesisVideoStreamAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceString(kvs.ref.Append("creation_time"))
}

func (kvs kinesisVideoStreamAttributes) DataRetentionInHours() terra.NumberValue {
	return terra.ReferenceNumber(kvs.ref.Append("data_retention_in_hours"))
}

func (kvs kinesisVideoStreamAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceString(kvs.ref.Append("device_name"))
}

func (kvs kinesisVideoStreamAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kvs.ref.Append("id"))
}

func (kvs kinesisVideoStreamAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(kvs.ref.Append("kms_key_id"))
}

func (kvs kinesisVideoStreamAttributes) MediaType() terra.StringValue {
	return terra.ReferenceString(kvs.ref.Append("media_type"))
}

func (kvs kinesisVideoStreamAttributes) Name() terra.StringValue {
	return terra.ReferenceString(kvs.ref.Append("name"))
}

func (kvs kinesisVideoStreamAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](kvs.ref.Append("tags"))
}

func (kvs kinesisVideoStreamAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](kvs.ref.Append("tags_all"))
}

func (kvs kinesisVideoStreamAttributes) Version() terra.StringValue {
	return terra.ReferenceString(kvs.ref.Append("version"))
}

func (kvs kinesisVideoStreamAttributes) Timeouts() kinesisvideostream.TimeoutsAttributes {
	return terra.ReferenceSingle[kinesisvideostream.TimeoutsAttributes](kvs.ref.Append("timeouts"))
}

type kinesisVideoStreamState struct {
	Arn                  string                            `json:"arn"`
	CreationTime         string                            `json:"creation_time"`
	DataRetentionInHours float64                           `json:"data_retention_in_hours"`
	DeviceName           string                            `json:"device_name"`
	Id                   string                            `json:"id"`
	KmsKeyId             string                            `json:"kms_key_id"`
	MediaType            string                            `json:"media_type"`
	Name                 string                            `json:"name"`
	Tags                 map[string]string                 `json:"tags"`
	TagsAll              map[string]string                 `json:"tags_all"`
	Version              string                            `json:"version"`
	Timeouts             *kinesisvideostream.TimeoutsState `json:"timeouts"`
}
