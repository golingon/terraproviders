// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package ssmdocument

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Parameter struct{}

type AttachmentsSource struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Values: list of string, required
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ParameterAttributes struct {
	ref terra.Reference
}

func (p ParameterAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ParameterAttributes) InternalWithRef(ref terra.Reference) ParameterAttributes {
	return ParameterAttributes{ref: ref}
}

func (p ParameterAttributes) InternalTokens() hclwrite.Tokens {
	return p.ref.InternalTokens()
}

func (p ParameterAttributes) DefaultValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("default_value"))
}

func (p ParameterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("description"))
}

func (p ParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p ParameterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

type AttachmentsSourceAttributes struct {
	ref terra.Reference
}

func (as AttachmentsSourceAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AttachmentsSourceAttributes) InternalWithRef(ref terra.Reference) AttachmentsSourceAttributes {
	return AttachmentsSourceAttributes{ref: ref}
}

func (as AttachmentsSourceAttributes) InternalTokens() hclwrite.Tokens {
	return as.ref.InternalTokens()
}

func (as AttachmentsSourceAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("key"))
}

func (as AttachmentsSourceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("name"))
}

func (as AttachmentsSourceAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](as.ref.Append("values"))
}

type ParameterState struct {
	DefaultValue string `json:"default_value"`
	Description  string `json:"description"`
	Name         string `json:"name"`
	Type         string `json:"type"`
}

type AttachmentsSourceState struct {
	Key    string   `json:"key"`
	Name   string   `json:"name"`
	Values []string `json:"values"`
}
