// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBatchJobQueue(name string, args BatchJobQueueArgs) *BatchJobQueue {
	return &BatchJobQueue{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BatchJobQueue)(nil)

type BatchJobQueue struct {
	Name  string
	Args  BatchJobQueueArgs
	state *batchJobQueueState
}

func (bjq *BatchJobQueue) Type() string {
	return "aws_batch_job_queue"
}

func (bjq *BatchJobQueue) LocalName() string {
	return bjq.Name
}

func (bjq *BatchJobQueue) Configuration() interface{} {
	return bjq.Args
}

func (bjq *BatchJobQueue) Attributes() batchJobQueueAttributes {
	return batchJobQueueAttributes{ref: terra.ReferenceResource(bjq)}
}

func (bjq *BatchJobQueue) ImportState(av io.Reader) error {
	bjq.state = &batchJobQueueState{}
	if err := json.NewDecoder(av).Decode(bjq.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bjq.Type(), bjq.LocalName(), err)
	}
	return nil
}

func (bjq *BatchJobQueue) State() (*batchJobQueueState, bool) {
	return bjq.state, bjq.state != nil
}

func (bjq *BatchJobQueue) StateMust() *batchJobQueueState {
	if bjq.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bjq.Type(), bjq.LocalName()))
	}
	return bjq.state
}

func (bjq *BatchJobQueue) DependOn() terra.Reference {
	return terra.ReferenceResource(bjq)
}

type BatchJobQueueArgs struct {
	// ComputeEnvironments: list of string, required
	ComputeEnvironments terra.ListValue[terra.StringValue] `hcl:"compute_environments,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// SchedulingPolicyArn: string, optional
	SchedulingPolicyArn terra.StringValue `hcl:"scheduling_policy_arn,attr"`
	// State: string, required
	State terra.StringValue `hcl:"state,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that BatchJobQueue depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type batchJobQueueAttributes struct {
	ref terra.Reference
}

func (bjq batchJobQueueAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(bjq.ref.Append("arn"))
}

func (bjq batchJobQueueAttributes) ComputeEnvironments() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](bjq.ref.Append("compute_environments"))
}

func (bjq batchJobQueueAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bjq.ref.Append("id"))
}

func (bjq batchJobQueueAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bjq.ref.Append("name"))
}

func (bjq batchJobQueueAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(bjq.ref.Append("priority"))
}

func (bjq batchJobQueueAttributes) SchedulingPolicyArn() terra.StringValue {
	return terra.ReferenceString(bjq.ref.Append("scheduling_policy_arn"))
}

func (bjq batchJobQueueAttributes) State() terra.StringValue {
	return terra.ReferenceString(bjq.ref.Append("state"))
}

func (bjq batchJobQueueAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bjq.ref.Append("tags"))
}

func (bjq batchJobQueueAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bjq.ref.Append("tags_all"))
}

type batchJobQueueState struct {
	Arn                 string            `json:"arn"`
	ComputeEnvironments []string          `json:"compute_environments"`
	Id                  string            `json:"id"`
	Name                string            `json:"name"`
	Priority            float64           `json:"priority"`
	SchedulingPolicyArn string            `json:"scheduling_policy_arn"`
	State               string            `json:"state"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
}
