// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewImagebuilderComponent(name string, args ImagebuilderComponentArgs) *ImagebuilderComponent {
	return &ImagebuilderComponent{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ImagebuilderComponent)(nil)

type ImagebuilderComponent struct {
	Name  string
	Args  ImagebuilderComponentArgs
	state *imagebuilderComponentState
}

func (ic *ImagebuilderComponent) Type() string {
	return "aws_imagebuilder_component"
}

func (ic *ImagebuilderComponent) LocalName() string {
	return ic.Name
}

func (ic *ImagebuilderComponent) Configuration() interface{} {
	return ic.Args
}

func (ic *ImagebuilderComponent) Attributes() imagebuilderComponentAttributes {
	return imagebuilderComponentAttributes{ref: terra.ReferenceResource(ic)}
}

func (ic *ImagebuilderComponent) ImportState(av io.Reader) error {
	ic.state = &imagebuilderComponentState{}
	if err := json.NewDecoder(av).Decode(ic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ic.Type(), ic.LocalName(), err)
	}
	return nil
}

func (ic *ImagebuilderComponent) State() (*imagebuilderComponentState, bool) {
	return ic.state, ic.state != nil
}

func (ic *ImagebuilderComponent) StateMust() *imagebuilderComponentState {
	if ic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ic.Type(), ic.LocalName()))
	}
	return ic.state
}

func (ic *ImagebuilderComponent) DependOn() terra.Reference {
	return terra.ReferenceResource(ic)
}

type ImagebuilderComponentArgs struct {
	// ChangeDescription: string, optional
	ChangeDescription terra.StringValue `hcl:"change_description,attr"`
	// Data: string, optional
	Data terra.StringValue `hcl:"data,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Platform: string, required
	Platform terra.StringValue `hcl:"platform,attr" validate:"required"`
	// SkipDestroy: bool, optional
	SkipDestroy terra.BoolValue `hcl:"skip_destroy,attr"`
	// SupportedOsVersions: set of string, optional
	SupportedOsVersions terra.SetValue[terra.StringValue] `hcl:"supported_os_versions,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Uri: string, optional
	Uri terra.StringValue `hcl:"uri,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// DependsOn contains resources that ImagebuilderComponent depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type imagebuilderComponentAttributes struct {
	ref terra.Reference
}

func (ic imagebuilderComponentAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("arn"))
}

func (ic imagebuilderComponentAttributes) ChangeDescription() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("change_description"))
}

func (ic imagebuilderComponentAttributes) Data() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("data"))
}

func (ic imagebuilderComponentAttributes) DateCreated() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("date_created"))
}

func (ic imagebuilderComponentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("description"))
}

func (ic imagebuilderComponentAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceBool(ic.ref.Append("encrypted"))
}

func (ic imagebuilderComponentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("id"))
}

func (ic imagebuilderComponentAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("kms_key_id"))
}

func (ic imagebuilderComponentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("name"))
}

func (ic imagebuilderComponentAttributes) Owner() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("owner"))
}

func (ic imagebuilderComponentAttributes) Platform() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("platform"))
}

func (ic imagebuilderComponentAttributes) SkipDestroy() terra.BoolValue {
	return terra.ReferenceBool(ic.ref.Append("skip_destroy"))
}

func (ic imagebuilderComponentAttributes) SupportedOsVersions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ic.ref.Append("supported_os_versions"))
}

func (ic imagebuilderComponentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ic.ref.Append("tags"))
}

func (ic imagebuilderComponentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ic.ref.Append("tags_all"))
}

func (ic imagebuilderComponentAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("type"))
}

func (ic imagebuilderComponentAttributes) Uri() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("uri"))
}

func (ic imagebuilderComponentAttributes) Version() terra.StringValue {
	return terra.ReferenceString(ic.ref.Append("version"))
}

type imagebuilderComponentState struct {
	Arn                 string            `json:"arn"`
	ChangeDescription   string            `json:"change_description"`
	Data                string            `json:"data"`
	DateCreated         string            `json:"date_created"`
	Description         string            `json:"description"`
	Encrypted           bool              `json:"encrypted"`
	Id                  string            `json:"id"`
	KmsKeyId            string            `json:"kms_key_id"`
	Name                string            `json:"name"`
	Owner               string            `json:"owner"`
	Platform            string            `json:"platform"`
	SkipDestroy         bool              `json:"skip_destroy"`
	SupportedOsVersions []string          `json:"supported_os_versions"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
	Type                string            `json:"type"`
	Uri                 string            `json:"uri"`
	Version             string            `json:"version"`
}
