// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package mwaaenvironment

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type LastUpdated struct {
	// Error: min=0
	Error []Error `hcl:"error,block" validate:"min=0"`
}

type Error struct{}

type LoggingConfiguration struct {
	// DagProcessingLogs: optional
	DagProcessingLogs *DagProcessingLogs `hcl:"dag_processing_logs,block"`
	// SchedulerLogs: optional
	SchedulerLogs *SchedulerLogs `hcl:"scheduler_logs,block"`
	// TaskLogs: optional
	TaskLogs *TaskLogs `hcl:"task_logs,block"`
	// WebserverLogs: optional
	WebserverLogs *WebserverLogs `hcl:"webserver_logs,block"`
	// WorkerLogs: optional
	WorkerLogs *WorkerLogs `hcl:"worker_logs,block"`
}

type DagProcessingLogs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogLevel: string, optional
	LogLevel terra.StringValue `hcl:"log_level,attr"`
}

type SchedulerLogs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogLevel: string, optional
	LogLevel terra.StringValue `hcl:"log_level,attr"`
}

type TaskLogs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogLevel: string, optional
	LogLevel terra.StringValue `hcl:"log_level,attr"`
}

type WebserverLogs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogLevel: string, optional
	LogLevel terra.StringValue `hcl:"log_level,attr"`
}

type WorkerLogs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogLevel: string, optional
	LogLevel terra.StringValue `hcl:"log_level,attr"`
}

type NetworkConfiguration struct {
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LastUpdatedAttributes struct {
	ref terra.Reference
}

func (lu LastUpdatedAttributes) InternalRef() terra.Reference {
	return lu.ref
}

func (lu LastUpdatedAttributes) InternalWithRef(ref terra.Reference) LastUpdatedAttributes {
	return LastUpdatedAttributes{ref: ref}
}

func (lu LastUpdatedAttributes) InternalTokens() hclwrite.Tokens {
	return lu.ref.InternalTokens()
}

func (lu LastUpdatedAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceString(lu.ref.Append("created_at"))
}

func (lu LastUpdatedAttributes) Status() terra.StringValue {
	return terra.ReferenceString(lu.ref.Append("status"))
}

func (lu LastUpdatedAttributes) Error() terra.ListValue[ErrorAttributes] {
	return terra.ReferenceList[ErrorAttributes](lu.ref.Append("error"))
}

type ErrorAttributes struct {
	ref terra.Reference
}

func (e ErrorAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e ErrorAttributes) InternalWithRef(ref terra.Reference) ErrorAttributes {
	return ErrorAttributes{ref: ref}
}

func (e ErrorAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e ErrorAttributes) ErrorCode() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("error_code"))
}

func (e ErrorAttributes) ErrorMessage() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("error_message"))
}

type LoggingConfigurationAttributes struct {
	ref terra.Reference
}

func (lc LoggingConfigurationAttributes) InternalRef() terra.Reference {
	return lc.ref
}

func (lc LoggingConfigurationAttributes) InternalWithRef(ref terra.Reference) LoggingConfigurationAttributes {
	return LoggingConfigurationAttributes{ref: ref}
}

func (lc LoggingConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return lc.ref.InternalTokens()
}

func (lc LoggingConfigurationAttributes) DagProcessingLogs() terra.ListValue[DagProcessingLogsAttributes] {
	return terra.ReferenceList[DagProcessingLogsAttributes](lc.ref.Append("dag_processing_logs"))
}

func (lc LoggingConfigurationAttributes) SchedulerLogs() terra.ListValue[SchedulerLogsAttributes] {
	return terra.ReferenceList[SchedulerLogsAttributes](lc.ref.Append("scheduler_logs"))
}

func (lc LoggingConfigurationAttributes) TaskLogs() terra.ListValue[TaskLogsAttributes] {
	return terra.ReferenceList[TaskLogsAttributes](lc.ref.Append("task_logs"))
}

func (lc LoggingConfigurationAttributes) WebserverLogs() terra.ListValue[WebserverLogsAttributes] {
	return terra.ReferenceList[WebserverLogsAttributes](lc.ref.Append("webserver_logs"))
}

func (lc LoggingConfigurationAttributes) WorkerLogs() terra.ListValue[WorkerLogsAttributes] {
	return terra.ReferenceList[WorkerLogsAttributes](lc.ref.Append("worker_logs"))
}

type DagProcessingLogsAttributes struct {
	ref terra.Reference
}

func (dpl DagProcessingLogsAttributes) InternalRef() terra.Reference {
	return dpl.ref
}

func (dpl DagProcessingLogsAttributes) InternalWithRef(ref terra.Reference) DagProcessingLogsAttributes {
	return DagProcessingLogsAttributes{ref: ref}
}

func (dpl DagProcessingLogsAttributes) InternalTokens() hclwrite.Tokens {
	return dpl.ref.InternalTokens()
}

func (dpl DagProcessingLogsAttributes) CloudWatchLogGroupArn() terra.StringValue {
	return terra.ReferenceString(dpl.ref.Append("cloud_watch_log_group_arn"))
}

func (dpl DagProcessingLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(dpl.ref.Append("enabled"))
}

func (dpl DagProcessingLogsAttributes) LogLevel() terra.StringValue {
	return terra.ReferenceString(dpl.ref.Append("log_level"))
}

type SchedulerLogsAttributes struct {
	ref terra.Reference
}

func (sl SchedulerLogsAttributes) InternalRef() terra.Reference {
	return sl.ref
}

func (sl SchedulerLogsAttributes) InternalWithRef(ref terra.Reference) SchedulerLogsAttributes {
	return SchedulerLogsAttributes{ref: ref}
}

func (sl SchedulerLogsAttributes) InternalTokens() hclwrite.Tokens {
	return sl.ref.InternalTokens()
}

func (sl SchedulerLogsAttributes) CloudWatchLogGroupArn() terra.StringValue {
	return terra.ReferenceString(sl.ref.Append("cloud_watch_log_group_arn"))
}

func (sl SchedulerLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(sl.ref.Append("enabled"))
}

func (sl SchedulerLogsAttributes) LogLevel() terra.StringValue {
	return terra.ReferenceString(sl.ref.Append("log_level"))
}

type TaskLogsAttributes struct {
	ref terra.Reference
}

func (tl TaskLogsAttributes) InternalRef() terra.Reference {
	return tl.ref
}

func (tl TaskLogsAttributes) InternalWithRef(ref terra.Reference) TaskLogsAttributes {
	return TaskLogsAttributes{ref: ref}
}

func (tl TaskLogsAttributes) InternalTokens() hclwrite.Tokens {
	return tl.ref.InternalTokens()
}

func (tl TaskLogsAttributes) CloudWatchLogGroupArn() terra.StringValue {
	return terra.ReferenceString(tl.ref.Append("cloud_watch_log_group_arn"))
}

func (tl TaskLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(tl.ref.Append("enabled"))
}

func (tl TaskLogsAttributes) LogLevel() terra.StringValue {
	return terra.ReferenceString(tl.ref.Append("log_level"))
}

type WebserverLogsAttributes struct {
	ref terra.Reference
}

func (wl WebserverLogsAttributes) InternalRef() terra.Reference {
	return wl.ref
}

func (wl WebserverLogsAttributes) InternalWithRef(ref terra.Reference) WebserverLogsAttributes {
	return WebserverLogsAttributes{ref: ref}
}

func (wl WebserverLogsAttributes) InternalTokens() hclwrite.Tokens {
	return wl.ref.InternalTokens()
}

func (wl WebserverLogsAttributes) CloudWatchLogGroupArn() terra.StringValue {
	return terra.ReferenceString(wl.ref.Append("cloud_watch_log_group_arn"))
}

func (wl WebserverLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(wl.ref.Append("enabled"))
}

func (wl WebserverLogsAttributes) LogLevel() terra.StringValue {
	return terra.ReferenceString(wl.ref.Append("log_level"))
}

type WorkerLogsAttributes struct {
	ref terra.Reference
}

func (wl WorkerLogsAttributes) InternalRef() terra.Reference {
	return wl.ref
}

func (wl WorkerLogsAttributes) InternalWithRef(ref terra.Reference) WorkerLogsAttributes {
	return WorkerLogsAttributes{ref: ref}
}

func (wl WorkerLogsAttributes) InternalTokens() hclwrite.Tokens {
	return wl.ref.InternalTokens()
}

func (wl WorkerLogsAttributes) CloudWatchLogGroupArn() terra.StringValue {
	return terra.ReferenceString(wl.ref.Append("cloud_watch_log_group_arn"))
}

func (wl WorkerLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(wl.ref.Append("enabled"))
}

func (wl WorkerLogsAttributes) LogLevel() terra.StringValue {
	return terra.ReferenceString(wl.ref.Append("log_level"))
}

type NetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigurationAttributes) InternalRef() terra.Reference {
	return nc.ref
}

func (nc NetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) NetworkConfigurationAttributes {
	return NetworkConfigurationAttributes{ref: ref}
}

func (nc NetworkConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigurationAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nc.ref.Append("security_group_ids"))
}

func (nc NetworkConfigurationAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nc.ref.Append("subnet_ids"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type LastUpdatedState struct {
	CreatedAt string       `json:"created_at"`
	Status    string       `json:"status"`
	Error     []ErrorState `json:"error"`
}

type ErrorState struct {
	ErrorCode    string `json:"error_code"`
	ErrorMessage string `json:"error_message"`
}

type LoggingConfigurationState struct {
	DagProcessingLogs []DagProcessingLogsState `json:"dag_processing_logs"`
	SchedulerLogs     []SchedulerLogsState     `json:"scheduler_logs"`
	TaskLogs          []TaskLogsState          `json:"task_logs"`
	WebserverLogs     []WebserverLogsState     `json:"webserver_logs"`
	WorkerLogs        []WorkerLogsState        `json:"worker_logs"`
}

type DagProcessingLogsState struct {
	CloudWatchLogGroupArn string `json:"cloud_watch_log_group_arn"`
	Enabled               bool   `json:"enabled"`
	LogLevel              string `json:"log_level"`
}

type SchedulerLogsState struct {
	CloudWatchLogGroupArn string `json:"cloud_watch_log_group_arn"`
	Enabled               bool   `json:"enabled"`
	LogLevel              string `json:"log_level"`
}

type TaskLogsState struct {
	CloudWatchLogGroupArn string `json:"cloud_watch_log_group_arn"`
	Enabled               bool   `json:"enabled"`
	LogLevel              string `json:"log_level"`
}

type WebserverLogsState struct {
	CloudWatchLogGroupArn string `json:"cloud_watch_log_group_arn"`
	Enabled               bool   `json:"enabled"`
	LogLevel              string `json:"log_level"`
}

type WorkerLogsState struct {
	CloudWatchLogGroupArn string `json:"cloud_watch_log_group_arn"`
	Enabled               bool   `json:"enabled"`
	LogLevel              string `json:"log_level"`
}

type NetworkConfigurationState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
