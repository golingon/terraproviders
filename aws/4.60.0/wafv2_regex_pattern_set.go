// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	wafv2regexpatternset "github.com/golingon/terraproviders/aws/4.60.0/wafv2regexpatternset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWafv2RegexPatternSet(name string, args Wafv2RegexPatternSetArgs) *Wafv2RegexPatternSet {
	return &Wafv2RegexPatternSet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Wafv2RegexPatternSet)(nil)

type Wafv2RegexPatternSet struct {
	Name  string
	Args  Wafv2RegexPatternSetArgs
	state *wafv2RegexPatternSetState
}

func (wrps *Wafv2RegexPatternSet) Type() string {
	return "aws_wafv2_regex_pattern_set"
}

func (wrps *Wafv2RegexPatternSet) LocalName() string {
	return wrps.Name
}

func (wrps *Wafv2RegexPatternSet) Configuration() interface{} {
	return wrps.Args
}

func (wrps *Wafv2RegexPatternSet) Attributes() wafv2RegexPatternSetAttributes {
	return wafv2RegexPatternSetAttributes{ref: terra.ReferenceResource(wrps)}
}

func (wrps *Wafv2RegexPatternSet) ImportState(av io.Reader) error {
	wrps.state = &wafv2RegexPatternSetState{}
	if err := json.NewDecoder(av).Decode(wrps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wrps.Type(), wrps.LocalName(), err)
	}
	return nil
}

func (wrps *Wafv2RegexPatternSet) State() (*wafv2RegexPatternSetState, bool) {
	return wrps.state, wrps.state != nil
}

func (wrps *Wafv2RegexPatternSet) StateMust() *wafv2RegexPatternSetState {
	if wrps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wrps.Type(), wrps.LocalName()))
	}
	return wrps.state
}

func (wrps *Wafv2RegexPatternSet) DependOn() terra.Reference {
	return terra.ReferenceResource(wrps)
}

type Wafv2RegexPatternSetArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// RegularExpression: min=0,max=10
	RegularExpression []wafv2regexpatternset.RegularExpression `hcl:"regular_expression,block" validate:"min=0,max=10"`
	// DependsOn contains resources that Wafv2RegexPatternSet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type wafv2RegexPatternSetAttributes struct {
	ref terra.Reference
}

func (wrps wafv2RegexPatternSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(wrps.ref.Append("arn"))
}

func (wrps wafv2RegexPatternSetAttributes) Description() terra.StringValue {
	return terra.ReferenceString(wrps.ref.Append("description"))
}

func (wrps wafv2RegexPatternSetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wrps.ref.Append("id"))
}

func (wrps wafv2RegexPatternSetAttributes) LockToken() terra.StringValue {
	return terra.ReferenceString(wrps.ref.Append("lock_token"))
}

func (wrps wafv2RegexPatternSetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wrps.ref.Append("name"))
}

func (wrps wafv2RegexPatternSetAttributes) Scope() terra.StringValue {
	return terra.ReferenceString(wrps.ref.Append("scope"))
}

func (wrps wafv2RegexPatternSetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wrps.ref.Append("tags"))
}

func (wrps wafv2RegexPatternSetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wrps.ref.Append("tags_all"))
}

func (wrps wafv2RegexPatternSetAttributes) RegularExpression() terra.SetValue[wafv2regexpatternset.RegularExpressionAttributes] {
	return terra.ReferenceSet[wafv2regexpatternset.RegularExpressionAttributes](wrps.ref.Append("regular_expression"))
}

type wafv2RegexPatternSetState struct {
	Arn               string                                        `json:"arn"`
	Description       string                                        `json:"description"`
	Id                string                                        `json:"id"`
	LockToken         string                                        `json:"lock_token"`
	Name              string                                        `json:"name"`
	Scope             string                                        `json:"scope"`
	Tags              map[string]string                             `json:"tags"`
	TagsAll           map[string]string                             `json:"tags_all"`
	RegularExpression []wafv2regexpatternset.RegularExpressionState `json:"regular_expression"`
}
