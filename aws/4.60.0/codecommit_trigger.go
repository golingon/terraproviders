// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	codecommittrigger "github.com/golingon/terraproviders/aws/4.60.0/codecommittrigger"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCodecommitTrigger(name string, args CodecommitTriggerArgs) *CodecommitTrigger {
	return &CodecommitTrigger{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodecommitTrigger)(nil)

type CodecommitTrigger struct {
	Name  string
	Args  CodecommitTriggerArgs
	state *codecommitTriggerState
}

func (ct *CodecommitTrigger) Type() string {
	return "aws_codecommit_trigger"
}

func (ct *CodecommitTrigger) LocalName() string {
	return ct.Name
}

func (ct *CodecommitTrigger) Configuration() interface{} {
	return ct.Args
}

func (ct *CodecommitTrigger) Attributes() codecommitTriggerAttributes {
	return codecommitTriggerAttributes{ref: terra.ReferenceResource(ct)}
}

func (ct *CodecommitTrigger) ImportState(av io.Reader) error {
	ct.state = &codecommitTriggerState{}
	if err := json.NewDecoder(av).Decode(ct.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ct.Type(), ct.LocalName(), err)
	}
	return nil
}

func (ct *CodecommitTrigger) State() (*codecommitTriggerState, bool) {
	return ct.state, ct.state != nil
}

func (ct *CodecommitTrigger) StateMust() *codecommitTriggerState {
	if ct.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ct.Type(), ct.LocalName()))
	}
	return ct.state
}

func (ct *CodecommitTrigger) DependOn() terra.Reference {
	return terra.ReferenceResource(ct)
}

type CodecommitTriggerArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RepositoryName: string, required
	RepositoryName terra.StringValue `hcl:"repository_name,attr" validate:"required"`
	// Trigger: min=1,max=10
	Trigger []codecommittrigger.Trigger `hcl:"trigger,block" validate:"min=1,max=10"`
	// DependsOn contains resources that CodecommitTrigger depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type codecommitTriggerAttributes struct {
	ref terra.Reference
}

func (ct codecommitTriggerAttributes) ConfigurationId() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("configuration_id"))
}

func (ct codecommitTriggerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("id"))
}

func (ct codecommitTriggerAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceString(ct.ref.Append("repository_name"))
}

func (ct codecommitTriggerAttributes) Trigger() terra.SetValue[codecommittrigger.TriggerAttributes] {
	return terra.ReferenceSet[codecommittrigger.TriggerAttributes](ct.ref.Append("trigger"))
}

type codecommitTriggerState struct {
	ConfigurationId string                           `json:"configuration_id"`
	Id              string                           `json:"id"`
	RepositoryName  string                           `json:"repository_name"`
	Trigger         []codecommittrigger.TriggerState `json:"trigger"`
}
