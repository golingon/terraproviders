// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	worklinkfleet "github.com/golingon/terraproviders/aws/4.60.0/worklinkfleet"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWorklinkFleet(name string, args WorklinkFleetArgs) *WorklinkFleet {
	return &WorklinkFleet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WorklinkFleet)(nil)

type WorklinkFleet struct {
	Name  string
	Args  WorklinkFleetArgs
	state *worklinkFleetState
}

func (wf *WorklinkFleet) Type() string {
	return "aws_worklink_fleet"
}

func (wf *WorklinkFleet) LocalName() string {
	return wf.Name
}

func (wf *WorklinkFleet) Configuration() interface{} {
	return wf.Args
}

func (wf *WorklinkFleet) Attributes() worklinkFleetAttributes {
	return worklinkFleetAttributes{ref: terra.ReferenceResource(wf)}
}

func (wf *WorklinkFleet) ImportState(av io.Reader) error {
	wf.state = &worklinkFleetState{}
	if err := json.NewDecoder(av).Decode(wf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wf.Type(), wf.LocalName(), err)
	}
	return nil
}

func (wf *WorklinkFleet) State() (*worklinkFleetState, bool) {
	return wf.state, wf.state != nil
}

func (wf *WorklinkFleet) StateMust() *worklinkFleetState {
	if wf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wf.Type(), wf.LocalName()))
	}
	return wf.state
}

func (wf *WorklinkFleet) DependOn() terra.Reference {
	return terra.ReferenceResource(wf)
}

type WorklinkFleetArgs struct {
	// AuditStreamArn: string, optional
	AuditStreamArn terra.StringValue `hcl:"audit_stream_arn,attr"`
	// DeviceCaCertificate: string, optional
	DeviceCaCertificate terra.StringValue `hcl:"device_ca_certificate,attr"`
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OptimizeForEndUserLocation: bool, optional
	OptimizeForEndUserLocation terra.BoolValue `hcl:"optimize_for_end_user_location,attr"`
	// IdentityProvider: optional
	IdentityProvider *worklinkfleet.IdentityProvider `hcl:"identity_provider,block"`
	// Network: optional
	Network *worklinkfleet.Network `hcl:"network,block"`
	// DependsOn contains resources that WorklinkFleet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type worklinkFleetAttributes struct {
	ref terra.Reference
}

func (wf worklinkFleetAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(wf.ref.Append("arn"))
}

func (wf worklinkFleetAttributes) AuditStreamArn() terra.StringValue {
	return terra.ReferenceString(wf.ref.Append("audit_stream_arn"))
}

func (wf worklinkFleetAttributes) CompanyCode() terra.StringValue {
	return terra.ReferenceString(wf.ref.Append("company_code"))
}

func (wf worklinkFleetAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceString(wf.ref.Append("created_time"))
}

func (wf worklinkFleetAttributes) DeviceCaCertificate() terra.StringValue {
	return terra.ReferenceString(wf.ref.Append("device_ca_certificate"))
}

func (wf worklinkFleetAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(wf.ref.Append("display_name"))
}

func (wf worklinkFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wf.ref.Append("id"))
}

func (wf worklinkFleetAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceString(wf.ref.Append("last_updated_time"))
}

func (wf worklinkFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wf.ref.Append("name"))
}

func (wf worklinkFleetAttributes) OptimizeForEndUserLocation() terra.BoolValue {
	return terra.ReferenceBool(wf.ref.Append("optimize_for_end_user_location"))
}

func (wf worklinkFleetAttributes) IdentityProvider() terra.ListValue[worklinkfleet.IdentityProviderAttributes] {
	return terra.ReferenceList[worklinkfleet.IdentityProviderAttributes](wf.ref.Append("identity_provider"))
}

func (wf worklinkFleetAttributes) Network() terra.ListValue[worklinkfleet.NetworkAttributes] {
	return terra.ReferenceList[worklinkfleet.NetworkAttributes](wf.ref.Append("network"))
}

type worklinkFleetState struct {
	Arn                        string                                `json:"arn"`
	AuditStreamArn             string                                `json:"audit_stream_arn"`
	CompanyCode                string                                `json:"company_code"`
	CreatedTime                string                                `json:"created_time"`
	DeviceCaCertificate        string                                `json:"device_ca_certificate"`
	DisplayName                string                                `json:"display_name"`
	Id                         string                                `json:"id"`
	LastUpdatedTime            string                                `json:"last_updated_time"`
	Name                       string                                `json:"name"`
	OptimizeForEndUserLocation bool                                  `json:"optimize_for_end_user_location"`
	IdentityProvider           []worklinkfleet.IdentityProviderState `json:"identity_provider"`
	Network                    []worklinkfleet.NetworkState          `json:"network"`
}
