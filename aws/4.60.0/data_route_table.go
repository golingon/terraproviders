// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataroutetable "github.com/golingon/terraproviders/aws/4.60.0/dataroutetable"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataRouteTable(name string, args DataRouteTableArgs) *DataRouteTable {
	return &DataRouteTable{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataRouteTable)(nil)

type DataRouteTable struct {
	Name string
	Args DataRouteTableArgs
}

func (rt *DataRouteTable) DataSource() string {
	return "aws_route_table"
}

func (rt *DataRouteTable) LocalName() string {
	return rt.Name
}

func (rt *DataRouteTable) Configuration() interface{} {
	return rt.Args
}

func (rt *DataRouteTable) Attributes() dataRouteTableAttributes {
	return dataRouteTableAttributes{ref: terra.ReferenceDataResource(rt)}
}

type DataRouteTableArgs struct {
	// GatewayId: string, optional
	GatewayId terra.StringValue `hcl:"gateway_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RouteTableId: string, optional
	RouteTableId terra.StringValue `hcl:"route_table_id,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VpcId: string, optional
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// Associations: min=0
	Associations []dataroutetable.Associations `hcl:"associations,block" validate:"min=0"`
	// Routes: min=0
	Routes []dataroutetable.Routes `hcl:"routes,block" validate:"min=0"`
	// Filter: min=0
	Filter []dataroutetable.Filter `hcl:"filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dataroutetable.Timeouts `hcl:"timeouts,block"`
}
type dataRouteTableAttributes struct {
	ref terra.Reference
}

func (rt dataRouteTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("arn"))
}

func (rt dataRouteTableAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("gateway_id"))
}

func (rt dataRouteTableAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("id"))
}

func (rt dataRouteTableAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("owner_id"))
}

func (rt dataRouteTableAttributes) RouteTableId() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("route_table_id"))
}

func (rt dataRouteTableAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("subnet_id"))
}

func (rt dataRouteTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rt.ref.Append("tags"))
}

func (rt dataRouteTableAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(rt.ref.Append("vpc_id"))
}

func (rt dataRouteTableAttributes) Associations() terra.ListValue[dataroutetable.AssociationsAttributes] {
	return terra.ReferenceList[dataroutetable.AssociationsAttributes](rt.ref.Append("associations"))
}

func (rt dataRouteTableAttributes) Routes() terra.ListValue[dataroutetable.RoutesAttributes] {
	return terra.ReferenceList[dataroutetable.RoutesAttributes](rt.ref.Append("routes"))
}

func (rt dataRouteTableAttributes) Filter() terra.SetValue[dataroutetable.FilterAttributes] {
	return terra.ReferenceSet[dataroutetable.FilterAttributes](rt.ref.Append("filter"))
}

func (rt dataRouteTableAttributes) Timeouts() dataroutetable.TimeoutsAttributes {
	return terra.ReferenceSingle[dataroutetable.TimeoutsAttributes](rt.ref.Append("timeouts"))
}
