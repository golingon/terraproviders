// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAthenaDataCatalog(name string, args AthenaDataCatalogArgs) *AthenaDataCatalog {
	return &AthenaDataCatalog{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AthenaDataCatalog)(nil)

type AthenaDataCatalog struct {
	Name  string
	Args  AthenaDataCatalogArgs
	state *athenaDataCatalogState
}

func (adc *AthenaDataCatalog) Type() string {
	return "aws_athena_data_catalog"
}

func (adc *AthenaDataCatalog) LocalName() string {
	return adc.Name
}

func (adc *AthenaDataCatalog) Configuration() interface{} {
	return adc.Args
}

func (adc *AthenaDataCatalog) Attributes() athenaDataCatalogAttributes {
	return athenaDataCatalogAttributes{ref: terra.ReferenceResource(adc)}
}

func (adc *AthenaDataCatalog) ImportState(av io.Reader) error {
	adc.state = &athenaDataCatalogState{}
	if err := json.NewDecoder(av).Decode(adc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adc.Type(), adc.LocalName(), err)
	}
	return nil
}

func (adc *AthenaDataCatalog) State() (*athenaDataCatalogState, bool) {
	return adc.state, adc.state != nil
}

func (adc *AthenaDataCatalog) StateMust() *athenaDataCatalogState {
	if adc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adc.Type(), adc.LocalName()))
	}
	return adc.state
}

func (adc *AthenaDataCatalog) DependOn() terra.Reference {
	return terra.ReferenceResource(adc)
}

type AthenaDataCatalogArgs struct {
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, required
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// DependsOn contains resources that AthenaDataCatalog depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type athenaDataCatalogAttributes struct {
	ref terra.Reference
}

func (adc athenaDataCatalogAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("arn"))
}

func (adc athenaDataCatalogAttributes) Description() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("description"))
}

func (adc athenaDataCatalogAttributes) Id() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("id"))
}

func (adc athenaDataCatalogAttributes) Name() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("name"))
}

func (adc athenaDataCatalogAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](adc.ref.Append("parameters"))
}

func (adc athenaDataCatalogAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](adc.ref.Append("tags"))
}

func (adc athenaDataCatalogAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](adc.ref.Append("tags_all"))
}

func (adc athenaDataCatalogAttributes) Type() terra.StringValue {
	return terra.ReferenceString(adc.ref.Append("type"))
}

type athenaDataCatalogState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	Parameters  map[string]string `json:"parameters"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	Type        string            `json:"type"`
}
