// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	elasticachecluster "github.com/golingon/terraproviders/aws/4.60.0/elasticachecluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewElasticacheCluster(name string, args ElasticacheClusterArgs) *ElasticacheCluster {
	return &ElasticacheCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElasticacheCluster)(nil)

type ElasticacheCluster struct {
	Name  string
	Args  ElasticacheClusterArgs
	state *elasticacheClusterState
}

func (ec *ElasticacheCluster) Type() string {
	return "aws_elasticache_cluster"
}

func (ec *ElasticacheCluster) LocalName() string {
	return ec.Name
}

func (ec *ElasticacheCluster) Configuration() interface{} {
	return ec.Args
}

func (ec *ElasticacheCluster) Attributes() elasticacheClusterAttributes {
	return elasticacheClusterAttributes{ref: terra.ReferenceResource(ec)}
}

func (ec *ElasticacheCluster) ImportState(av io.Reader) error {
	ec.state = &elasticacheClusterState{}
	if err := json.NewDecoder(av).Decode(ec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ec.Type(), ec.LocalName(), err)
	}
	return nil
}

func (ec *ElasticacheCluster) State() (*elasticacheClusterState, bool) {
	return ec.state, ec.state != nil
}

func (ec *ElasticacheCluster) StateMust() *elasticacheClusterState {
	if ec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ec.Type(), ec.LocalName()))
	}
	return ec.state
}

func (ec *ElasticacheCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(ec)
}

type ElasticacheClusterArgs struct {
	// ApplyImmediately: bool, optional
	ApplyImmediately terra.BoolValue `hcl:"apply_immediately,attr"`
	// AutoMinorVersionUpgrade: string, optional
	AutoMinorVersionUpgrade terra.StringValue `hcl:"auto_minor_version_upgrade,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// AzMode: string, optional
	AzMode terra.StringValue `hcl:"az_mode,attr"`
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// Engine: string, optional
	Engine terra.StringValue `hcl:"engine,attr"`
	// EngineVersion: string, optional
	EngineVersion terra.StringValue `hcl:"engine_version,attr"`
	// FinalSnapshotIdentifier: string, optional
	FinalSnapshotIdentifier terra.StringValue `hcl:"final_snapshot_identifier,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpDiscovery: string, optional
	IpDiscovery terra.StringValue `hcl:"ip_discovery,attr"`
	// MaintenanceWindow: string, optional
	MaintenanceWindow terra.StringValue `hcl:"maintenance_window,attr"`
	// NetworkType: string, optional
	NetworkType terra.StringValue `hcl:"network_type,attr"`
	// NodeType: string, optional
	NodeType terra.StringValue `hcl:"node_type,attr"`
	// NotificationTopicArn: string, optional
	NotificationTopicArn terra.StringValue `hcl:"notification_topic_arn,attr"`
	// NumCacheNodes: number, optional
	NumCacheNodes terra.NumberValue `hcl:"num_cache_nodes,attr"`
	// OutpostMode: string, optional
	OutpostMode terra.StringValue `hcl:"outpost_mode,attr"`
	// ParameterGroupName: string, optional
	ParameterGroupName terra.StringValue `hcl:"parameter_group_name,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// PreferredAvailabilityZones: list of string, optional
	PreferredAvailabilityZones terra.ListValue[terra.StringValue] `hcl:"preferred_availability_zones,attr"`
	// PreferredOutpostArn: string, optional
	PreferredOutpostArn terra.StringValue `hcl:"preferred_outpost_arn,attr"`
	// ReplicationGroupId: string, optional
	ReplicationGroupId terra.StringValue `hcl:"replication_group_id,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SecurityGroupNames: set of string, optional
	SecurityGroupNames terra.SetValue[terra.StringValue] `hcl:"security_group_names,attr"`
	// SnapshotArns: list of string, optional
	SnapshotArns terra.ListValue[terra.StringValue] `hcl:"snapshot_arns,attr"`
	// SnapshotName: string, optional
	SnapshotName terra.StringValue `hcl:"snapshot_name,attr"`
	// SnapshotRetentionLimit: number, optional
	SnapshotRetentionLimit terra.NumberValue `hcl:"snapshot_retention_limit,attr"`
	// SnapshotWindow: string, optional
	SnapshotWindow terra.StringValue `hcl:"snapshot_window,attr"`
	// SubnetGroupName: string, optional
	SubnetGroupName terra.StringValue `hcl:"subnet_group_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CacheNodes: min=0
	CacheNodes []elasticachecluster.CacheNodes `hcl:"cache_nodes,block" validate:"min=0"`
	// LogDeliveryConfiguration: min=0,max=2
	LogDeliveryConfiguration []elasticachecluster.LogDeliveryConfiguration `hcl:"log_delivery_configuration,block" validate:"min=0,max=2"`
	// DependsOn contains resources that ElasticacheCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type elasticacheClusterAttributes struct {
	ref terra.Reference
}

func (ec elasticacheClusterAttributes) ApplyImmediately() terra.BoolValue {
	return terra.ReferenceBool(ec.ref.Append("apply_immediately"))
}

func (ec elasticacheClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("arn"))
}

func (ec elasticacheClusterAttributes) AutoMinorVersionUpgrade() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("auto_minor_version_upgrade"))
}

func (ec elasticacheClusterAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("availability_zone"))
}

func (ec elasticacheClusterAttributes) AzMode() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("az_mode"))
}

func (ec elasticacheClusterAttributes) ClusterAddress() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("cluster_address"))
}

func (ec elasticacheClusterAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("cluster_id"))
}

func (ec elasticacheClusterAttributes) ConfigurationEndpoint() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("configuration_endpoint"))
}

func (ec elasticacheClusterAttributes) Engine() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("engine"))
}

func (ec elasticacheClusterAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("engine_version"))
}

func (ec elasticacheClusterAttributes) EngineVersionActual() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("engine_version_actual"))
}

func (ec elasticacheClusterAttributes) FinalSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("final_snapshot_identifier"))
}

func (ec elasticacheClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("id"))
}

func (ec elasticacheClusterAttributes) IpDiscovery() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("ip_discovery"))
}

func (ec elasticacheClusterAttributes) MaintenanceWindow() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("maintenance_window"))
}

func (ec elasticacheClusterAttributes) NetworkType() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("network_type"))
}

func (ec elasticacheClusterAttributes) NodeType() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("node_type"))
}

func (ec elasticacheClusterAttributes) NotificationTopicArn() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("notification_topic_arn"))
}

func (ec elasticacheClusterAttributes) NumCacheNodes() terra.NumberValue {
	return terra.ReferenceNumber(ec.ref.Append("num_cache_nodes"))
}

func (ec elasticacheClusterAttributes) OutpostMode() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("outpost_mode"))
}

func (ec elasticacheClusterAttributes) ParameterGroupName() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("parameter_group_name"))
}

func (ec elasticacheClusterAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(ec.ref.Append("port"))
}

func (ec elasticacheClusterAttributes) PreferredAvailabilityZones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ec.ref.Append("preferred_availability_zones"))
}

func (ec elasticacheClusterAttributes) PreferredOutpostArn() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("preferred_outpost_arn"))
}

func (ec elasticacheClusterAttributes) ReplicationGroupId() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("replication_group_id"))
}

func (ec elasticacheClusterAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ec.ref.Append("security_group_ids"))
}

func (ec elasticacheClusterAttributes) SecurityGroupNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ec.ref.Append("security_group_names"))
}

func (ec elasticacheClusterAttributes) SnapshotArns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ec.ref.Append("snapshot_arns"))
}

func (ec elasticacheClusterAttributes) SnapshotName() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("snapshot_name"))
}

func (ec elasticacheClusterAttributes) SnapshotRetentionLimit() terra.NumberValue {
	return terra.ReferenceNumber(ec.ref.Append("snapshot_retention_limit"))
}

func (ec elasticacheClusterAttributes) SnapshotWindow() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("snapshot_window"))
}

func (ec elasticacheClusterAttributes) SubnetGroupName() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("subnet_group_name"))
}

func (ec elasticacheClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ec.ref.Append("tags"))
}

func (ec elasticacheClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ec.ref.Append("tags_all"))
}

func (ec elasticacheClusterAttributes) CacheNodes() terra.ListValue[elasticachecluster.CacheNodesAttributes] {
	return terra.ReferenceList[elasticachecluster.CacheNodesAttributes](ec.ref.Append("cache_nodes"))
}

func (ec elasticacheClusterAttributes) LogDeliveryConfiguration() terra.SetValue[elasticachecluster.LogDeliveryConfigurationAttributes] {
	return terra.ReferenceSet[elasticachecluster.LogDeliveryConfigurationAttributes](ec.ref.Append("log_delivery_configuration"))
}

type elasticacheClusterState struct {
	ApplyImmediately           bool                                               `json:"apply_immediately"`
	Arn                        string                                             `json:"arn"`
	AutoMinorVersionUpgrade    string                                             `json:"auto_minor_version_upgrade"`
	AvailabilityZone           string                                             `json:"availability_zone"`
	AzMode                     string                                             `json:"az_mode"`
	ClusterAddress             string                                             `json:"cluster_address"`
	ClusterId                  string                                             `json:"cluster_id"`
	ConfigurationEndpoint      string                                             `json:"configuration_endpoint"`
	Engine                     string                                             `json:"engine"`
	EngineVersion              string                                             `json:"engine_version"`
	EngineVersionActual        string                                             `json:"engine_version_actual"`
	FinalSnapshotIdentifier    string                                             `json:"final_snapshot_identifier"`
	Id                         string                                             `json:"id"`
	IpDiscovery                string                                             `json:"ip_discovery"`
	MaintenanceWindow          string                                             `json:"maintenance_window"`
	NetworkType                string                                             `json:"network_type"`
	NodeType                   string                                             `json:"node_type"`
	NotificationTopicArn       string                                             `json:"notification_topic_arn"`
	NumCacheNodes              float64                                            `json:"num_cache_nodes"`
	OutpostMode                string                                             `json:"outpost_mode"`
	ParameterGroupName         string                                             `json:"parameter_group_name"`
	Port                       float64                                            `json:"port"`
	PreferredAvailabilityZones []string                                           `json:"preferred_availability_zones"`
	PreferredOutpostArn        string                                             `json:"preferred_outpost_arn"`
	ReplicationGroupId         string                                             `json:"replication_group_id"`
	SecurityGroupIds           []string                                           `json:"security_group_ids"`
	SecurityGroupNames         []string                                           `json:"security_group_names"`
	SnapshotArns               []string                                           `json:"snapshot_arns"`
	SnapshotName               string                                             `json:"snapshot_name"`
	SnapshotRetentionLimit     float64                                            `json:"snapshot_retention_limit"`
	SnapshotWindow             string                                             `json:"snapshot_window"`
	SubnetGroupName            string                                             `json:"subnet_group_name"`
	Tags                       map[string]string                                  `json:"tags"`
	TagsAll                    map[string]string                                  `json:"tags_all"`
	CacheNodes                 []elasticachecluster.CacheNodesState               `json:"cache_nodes"`
	LogDeliveryConfiguration   []elasticachecluster.LogDeliveryConfigurationState `json:"log_delivery_configuration"`
}
