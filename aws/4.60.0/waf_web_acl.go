// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	wafwebacl "github.com/golingon/terraproviders/aws/4.60.0/wafwebacl"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWafWebAcl(name string, args WafWebAclArgs) *WafWebAcl {
	return &WafWebAcl{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WafWebAcl)(nil)

type WafWebAcl struct {
	Name  string
	Args  WafWebAclArgs
	state *wafWebAclState
}

func (wwa *WafWebAcl) Type() string {
	return "aws_waf_web_acl"
}

func (wwa *WafWebAcl) LocalName() string {
	return wwa.Name
}

func (wwa *WafWebAcl) Configuration() interface{} {
	return wwa.Args
}

func (wwa *WafWebAcl) Attributes() wafWebAclAttributes {
	return wafWebAclAttributes{ref: terra.ReferenceResource(wwa)}
}

func (wwa *WafWebAcl) ImportState(av io.Reader) error {
	wwa.state = &wafWebAclState{}
	if err := json.NewDecoder(av).Decode(wwa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wwa.Type(), wwa.LocalName(), err)
	}
	return nil
}

func (wwa *WafWebAcl) State() (*wafWebAclState, bool) {
	return wwa.state, wwa.state != nil
}

func (wwa *WafWebAcl) StateMust() *wafWebAclState {
	if wwa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wwa.Type(), wwa.LocalName()))
	}
	return wwa.state
}

func (wwa *WafWebAcl) DependOn() terra.Reference {
	return terra.ReferenceResource(wwa)
}

type WafWebAclArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MetricName: string, required
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DefaultAction: required
	DefaultAction *wafwebacl.DefaultAction `hcl:"default_action,block" validate:"required"`
	// LoggingConfiguration: optional
	LoggingConfiguration *wafwebacl.LoggingConfiguration `hcl:"logging_configuration,block"`
	// Rules: min=0
	Rules []wafwebacl.Rules `hcl:"rules,block" validate:"min=0"`
	// DependsOn contains resources that WafWebAcl depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type wafWebAclAttributes struct {
	ref terra.Reference
}

func (wwa wafWebAclAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("arn"))
}

func (wwa wafWebAclAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("id"))
}

func (wwa wafWebAclAttributes) MetricName() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("metric_name"))
}

func (wwa wafWebAclAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("name"))
}

func (wwa wafWebAclAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wwa.ref.Append("tags"))
}

func (wwa wafWebAclAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wwa.ref.Append("tags_all"))
}

func (wwa wafWebAclAttributes) DefaultAction() terra.ListValue[wafwebacl.DefaultActionAttributes] {
	return terra.ReferenceList[wafwebacl.DefaultActionAttributes](wwa.ref.Append("default_action"))
}

func (wwa wafWebAclAttributes) LoggingConfiguration() terra.ListValue[wafwebacl.LoggingConfigurationAttributes] {
	return terra.ReferenceList[wafwebacl.LoggingConfigurationAttributes](wwa.ref.Append("logging_configuration"))
}

func (wwa wafWebAclAttributes) Rules() terra.SetValue[wafwebacl.RulesAttributes] {
	return terra.ReferenceSet[wafwebacl.RulesAttributes](wwa.ref.Append("rules"))
}

type wafWebAclState struct {
	Arn                  string                                `json:"arn"`
	Id                   string                                `json:"id"`
	MetricName           string                                `json:"metric_name"`
	Name                 string                                `json:"name"`
	Tags                 map[string]string                     `json:"tags"`
	TagsAll              map[string]string                     `json:"tags_all"`
	DefaultAction        []wafwebacl.DefaultActionState        `json:"default_action"`
	LoggingConfiguration []wafwebacl.LoggingConfigurationState `json:"logging_configuration"`
	Rules                []wafwebacl.RulesState                `json:"rules"`
}
