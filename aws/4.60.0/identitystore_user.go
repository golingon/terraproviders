// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	identitystoreuser "github.com/golingon/terraproviders/aws/4.60.0/identitystoreuser"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIdentitystoreUser(name string, args IdentitystoreUserArgs) *IdentitystoreUser {
	return &IdentitystoreUser{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IdentitystoreUser)(nil)

type IdentitystoreUser struct {
	Name  string
	Args  IdentitystoreUserArgs
	state *identitystoreUserState
}

func (iu *IdentitystoreUser) Type() string {
	return "aws_identitystore_user"
}

func (iu *IdentitystoreUser) LocalName() string {
	return iu.Name
}

func (iu *IdentitystoreUser) Configuration() interface{} {
	return iu.Args
}

func (iu *IdentitystoreUser) Attributes() identitystoreUserAttributes {
	return identitystoreUserAttributes{ref: terra.ReferenceResource(iu)}
}

func (iu *IdentitystoreUser) ImportState(av io.Reader) error {
	iu.state = &identitystoreUserState{}
	if err := json.NewDecoder(av).Decode(iu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iu.Type(), iu.LocalName(), err)
	}
	return nil
}

func (iu *IdentitystoreUser) State() (*identitystoreUserState, bool) {
	return iu.state, iu.state != nil
}

func (iu *IdentitystoreUser) StateMust() *identitystoreUserState {
	if iu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iu.Type(), iu.LocalName()))
	}
	return iu.state
}

func (iu *IdentitystoreUser) DependOn() terra.Reference {
	return terra.ReferenceResource(iu)
}

type IdentitystoreUserArgs struct {
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityStoreId: string, required
	IdentityStoreId terra.StringValue `hcl:"identity_store_id,attr" validate:"required"`
	// Locale: string, optional
	Locale terra.StringValue `hcl:"locale,attr"`
	// Nickname: string, optional
	Nickname terra.StringValue `hcl:"nickname,attr"`
	// PreferredLanguage: string, optional
	PreferredLanguage terra.StringValue `hcl:"preferred_language,attr"`
	// ProfileUrl: string, optional
	ProfileUrl terra.StringValue `hcl:"profile_url,attr"`
	// Timezone: string, optional
	Timezone terra.StringValue `hcl:"timezone,attr"`
	// Title: string, optional
	Title terra.StringValue `hcl:"title,attr"`
	// UserName: string, required
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
	// UserType: string, optional
	UserType terra.StringValue `hcl:"user_type,attr"`
	// ExternalIds: min=0
	ExternalIds []identitystoreuser.ExternalIds `hcl:"external_ids,block" validate:"min=0"`
	// Addresses: optional
	Addresses *identitystoreuser.Addresses `hcl:"addresses,block"`
	// Emails: optional
	Emails *identitystoreuser.Emails `hcl:"emails,block"`
	// Name: required
	Name *identitystoreuser.Name `hcl:"name,block" validate:"required"`
	// PhoneNumbers: optional
	PhoneNumbers *identitystoreuser.PhoneNumbers `hcl:"phone_numbers,block"`
	// DependsOn contains resources that IdentitystoreUser depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type identitystoreUserAttributes struct {
	ref terra.Reference
}

func (iu identitystoreUserAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("display_name"))
}

func (iu identitystoreUserAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("id"))
}

func (iu identitystoreUserAttributes) IdentityStoreId() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("identity_store_id"))
}

func (iu identitystoreUserAttributes) Locale() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("locale"))
}

func (iu identitystoreUserAttributes) Nickname() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("nickname"))
}

func (iu identitystoreUserAttributes) PreferredLanguage() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("preferred_language"))
}

func (iu identitystoreUserAttributes) ProfileUrl() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("profile_url"))
}

func (iu identitystoreUserAttributes) Timezone() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("timezone"))
}

func (iu identitystoreUserAttributes) Title() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("title"))
}

func (iu identitystoreUserAttributes) UserId() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("user_id"))
}

func (iu identitystoreUserAttributes) UserName() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("user_name"))
}

func (iu identitystoreUserAttributes) UserType() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("user_type"))
}

func (iu identitystoreUserAttributes) ExternalIds() terra.ListValue[identitystoreuser.ExternalIdsAttributes] {
	return terra.ReferenceList[identitystoreuser.ExternalIdsAttributes](iu.ref.Append("external_ids"))
}

func (iu identitystoreUserAttributes) Addresses() terra.ListValue[identitystoreuser.AddressesAttributes] {
	return terra.ReferenceList[identitystoreuser.AddressesAttributes](iu.ref.Append("addresses"))
}

func (iu identitystoreUserAttributes) Emails() terra.ListValue[identitystoreuser.EmailsAttributes] {
	return terra.ReferenceList[identitystoreuser.EmailsAttributes](iu.ref.Append("emails"))
}

func (iu identitystoreUserAttributes) Name() terra.ListValue[identitystoreuser.NameAttributes] {
	return terra.ReferenceList[identitystoreuser.NameAttributes](iu.ref.Append("name"))
}

func (iu identitystoreUserAttributes) PhoneNumbers() terra.ListValue[identitystoreuser.PhoneNumbersAttributes] {
	return terra.ReferenceList[identitystoreuser.PhoneNumbersAttributes](iu.ref.Append("phone_numbers"))
}

type identitystoreUserState struct {
	DisplayName       string                                `json:"display_name"`
	Id                string                                `json:"id"`
	IdentityStoreId   string                                `json:"identity_store_id"`
	Locale            string                                `json:"locale"`
	Nickname          string                                `json:"nickname"`
	PreferredLanguage string                                `json:"preferred_language"`
	ProfileUrl        string                                `json:"profile_url"`
	Timezone          string                                `json:"timezone"`
	Title             string                                `json:"title"`
	UserId            string                                `json:"user_id"`
	UserName          string                                `json:"user_name"`
	UserType          string                                `json:"user_type"`
	ExternalIds       []identitystoreuser.ExternalIdsState  `json:"external_ids"`
	Addresses         []identitystoreuser.AddressesState    `json:"addresses"`
	Emails            []identitystoreuser.EmailsState       `json:"emails"`
	Name              []identitystoreuser.NameState         `json:"name"`
	PhoneNumbers      []identitystoreuser.PhoneNumbersState `json:"phone_numbers"`
}
