// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	imagebuilderimage "github.com/golingon/terraproviders/aws/4.60.0/imagebuilderimage"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewImagebuilderImage(name string, args ImagebuilderImageArgs) *ImagebuilderImage {
	return &ImagebuilderImage{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ImagebuilderImage)(nil)

type ImagebuilderImage struct {
	Name  string
	Args  ImagebuilderImageArgs
	state *imagebuilderImageState
}

func (ii *ImagebuilderImage) Type() string {
	return "aws_imagebuilder_image"
}

func (ii *ImagebuilderImage) LocalName() string {
	return ii.Name
}

func (ii *ImagebuilderImage) Configuration() interface{} {
	return ii.Args
}

func (ii *ImagebuilderImage) Attributes() imagebuilderImageAttributes {
	return imagebuilderImageAttributes{ref: terra.ReferenceResource(ii)}
}

func (ii *ImagebuilderImage) ImportState(av io.Reader) error {
	ii.state = &imagebuilderImageState{}
	if err := json.NewDecoder(av).Decode(ii.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ii.Type(), ii.LocalName(), err)
	}
	return nil
}

func (ii *ImagebuilderImage) State() (*imagebuilderImageState, bool) {
	return ii.state, ii.state != nil
}

func (ii *ImagebuilderImage) StateMust() *imagebuilderImageState {
	if ii.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ii.Type(), ii.LocalName()))
	}
	return ii.state
}

func (ii *ImagebuilderImage) DependOn() terra.Reference {
	return terra.ReferenceResource(ii)
}

type ImagebuilderImageArgs struct {
	// ContainerRecipeArn: string, optional
	ContainerRecipeArn terra.StringValue `hcl:"container_recipe_arn,attr"`
	// DistributionConfigurationArn: string, optional
	DistributionConfigurationArn terra.StringValue `hcl:"distribution_configuration_arn,attr"`
	// EnhancedImageMetadataEnabled: bool, optional
	EnhancedImageMetadataEnabled terra.BoolValue `hcl:"enhanced_image_metadata_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageRecipeArn: string, optional
	ImageRecipeArn terra.StringValue `hcl:"image_recipe_arn,attr"`
	// InfrastructureConfigurationArn: string, required
	InfrastructureConfigurationArn terra.StringValue `hcl:"infrastructure_configuration_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// OutputResources: min=0
	OutputResources []imagebuilderimage.OutputResources `hcl:"output_resources,block" validate:"min=0"`
	// ImageTestsConfiguration: optional
	ImageTestsConfiguration *imagebuilderimage.ImageTestsConfiguration `hcl:"image_tests_configuration,block"`
	// Timeouts: optional
	Timeouts *imagebuilderimage.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ImagebuilderImage depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type imagebuilderImageAttributes struct {
	ref terra.Reference
}

func (ii imagebuilderImageAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ii.ref.Append("arn"))
}

func (ii imagebuilderImageAttributes) ContainerRecipeArn() terra.StringValue {
	return terra.ReferenceString(ii.ref.Append("container_recipe_arn"))
}

func (ii imagebuilderImageAttributes) DateCreated() terra.StringValue {
	return terra.ReferenceString(ii.ref.Append("date_created"))
}

func (ii imagebuilderImageAttributes) DistributionConfigurationArn() terra.StringValue {
	return terra.ReferenceString(ii.ref.Append("distribution_configuration_arn"))
}

func (ii imagebuilderImageAttributes) EnhancedImageMetadataEnabled() terra.BoolValue {
	return terra.ReferenceBool(ii.ref.Append("enhanced_image_metadata_enabled"))
}

func (ii imagebuilderImageAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ii.ref.Append("id"))
}

func (ii imagebuilderImageAttributes) ImageRecipeArn() terra.StringValue {
	return terra.ReferenceString(ii.ref.Append("image_recipe_arn"))
}

func (ii imagebuilderImageAttributes) InfrastructureConfigurationArn() terra.StringValue {
	return terra.ReferenceString(ii.ref.Append("infrastructure_configuration_arn"))
}

func (ii imagebuilderImageAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ii.ref.Append("name"))
}

func (ii imagebuilderImageAttributes) OsVersion() terra.StringValue {
	return terra.ReferenceString(ii.ref.Append("os_version"))
}

func (ii imagebuilderImageAttributes) Platform() terra.StringValue {
	return terra.ReferenceString(ii.ref.Append("platform"))
}

func (ii imagebuilderImageAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ii.ref.Append("tags"))
}

func (ii imagebuilderImageAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ii.ref.Append("tags_all"))
}

func (ii imagebuilderImageAttributes) Version() terra.StringValue {
	return terra.ReferenceString(ii.ref.Append("version"))
}

func (ii imagebuilderImageAttributes) OutputResources() terra.ListValue[imagebuilderimage.OutputResourcesAttributes] {
	return terra.ReferenceList[imagebuilderimage.OutputResourcesAttributes](ii.ref.Append("output_resources"))
}

func (ii imagebuilderImageAttributes) ImageTestsConfiguration() terra.ListValue[imagebuilderimage.ImageTestsConfigurationAttributes] {
	return terra.ReferenceList[imagebuilderimage.ImageTestsConfigurationAttributes](ii.ref.Append("image_tests_configuration"))
}

func (ii imagebuilderImageAttributes) Timeouts() imagebuilderimage.TimeoutsAttributes {
	return terra.ReferenceSingle[imagebuilderimage.TimeoutsAttributes](ii.ref.Append("timeouts"))
}

type imagebuilderImageState struct {
	Arn                            string                                           `json:"arn"`
	ContainerRecipeArn             string                                           `json:"container_recipe_arn"`
	DateCreated                    string                                           `json:"date_created"`
	DistributionConfigurationArn   string                                           `json:"distribution_configuration_arn"`
	EnhancedImageMetadataEnabled   bool                                             `json:"enhanced_image_metadata_enabled"`
	Id                             string                                           `json:"id"`
	ImageRecipeArn                 string                                           `json:"image_recipe_arn"`
	InfrastructureConfigurationArn string                                           `json:"infrastructure_configuration_arn"`
	Name                           string                                           `json:"name"`
	OsVersion                      string                                           `json:"os_version"`
	Platform                       string                                           `json:"platform"`
	Tags                           map[string]string                                `json:"tags"`
	TagsAll                        map[string]string                                `json:"tags_all"`
	Version                        string                                           `json:"version"`
	OutputResources                []imagebuilderimage.OutputResourcesState         `json:"output_resources"`
	ImageTestsConfiguration        []imagebuilderimage.ImageTestsConfigurationState `json:"image_tests_configuration"`
	Timeouts                       *imagebuilderimage.TimeoutsState                 `json:"timeouts"`
}
