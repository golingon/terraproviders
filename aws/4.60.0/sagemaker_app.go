// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	sagemakerapp "github.com/golingon/terraproviders/aws/4.60.0/sagemakerapp"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSagemakerApp(name string, args SagemakerAppArgs) *SagemakerApp {
	return &SagemakerApp{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SagemakerApp)(nil)

type SagemakerApp struct {
	Name  string
	Args  SagemakerAppArgs
	state *sagemakerAppState
}

func (sa *SagemakerApp) Type() string {
	return "aws_sagemaker_app"
}

func (sa *SagemakerApp) LocalName() string {
	return sa.Name
}

func (sa *SagemakerApp) Configuration() interface{} {
	return sa.Args
}

func (sa *SagemakerApp) Attributes() sagemakerAppAttributes {
	return sagemakerAppAttributes{ref: terra.ReferenceResource(sa)}
}

func (sa *SagemakerApp) ImportState(av io.Reader) error {
	sa.state = &sagemakerAppState{}
	if err := json.NewDecoder(av).Decode(sa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sa.Type(), sa.LocalName(), err)
	}
	return nil
}

func (sa *SagemakerApp) State() (*sagemakerAppState, bool) {
	return sa.state, sa.state != nil
}

func (sa *SagemakerApp) StateMust() *sagemakerAppState {
	if sa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sa.Type(), sa.LocalName()))
	}
	return sa.state
}

func (sa *SagemakerApp) DependOn() terra.Reference {
	return terra.ReferenceResource(sa)
}

type SagemakerAppArgs struct {
	// AppName: string, required
	AppName terra.StringValue `hcl:"app_name,attr" validate:"required"`
	// AppType: string, required
	AppType terra.StringValue `hcl:"app_type,attr" validate:"required"`
	// DomainId: string, required
	DomainId terra.StringValue `hcl:"domain_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SpaceName: string, optional
	SpaceName terra.StringValue `hcl:"space_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserProfileName: string, optional
	UserProfileName terra.StringValue `hcl:"user_profile_name,attr"`
	// ResourceSpec: optional
	ResourceSpec *sagemakerapp.ResourceSpec `hcl:"resource_spec,block"`
	// DependsOn contains resources that SagemakerApp depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sagemakerAppAttributes struct {
	ref terra.Reference
}

func (sa sagemakerAppAttributes) AppName() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("app_name"))
}

func (sa sagemakerAppAttributes) AppType() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("app_type"))
}

func (sa sagemakerAppAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("arn"))
}

func (sa sagemakerAppAttributes) DomainId() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("domain_id"))
}

func (sa sagemakerAppAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("id"))
}

func (sa sagemakerAppAttributes) SpaceName() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("space_name"))
}

func (sa sagemakerAppAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sa.ref.Append("tags"))
}

func (sa sagemakerAppAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sa.ref.Append("tags_all"))
}

func (sa sagemakerAppAttributes) UserProfileName() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("user_profile_name"))
}

func (sa sagemakerAppAttributes) ResourceSpec() terra.ListValue[sagemakerapp.ResourceSpecAttributes] {
	return terra.ReferenceList[sagemakerapp.ResourceSpecAttributes](sa.ref.Append("resource_spec"))
}

type sagemakerAppState struct {
	AppName         string                           `json:"app_name"`
	AppType         string                           `json:"app_type"`
	Arn             string                           `json:"arn"`
	DomainId        string                           `json:"domain_id"`
	Id              string                           `json:"id"`
	SpaceName       string                           `json:"space_name"`
	Tags            map[string]string                `json:"tags"`
	TagsAll         map[string]string                `json:"tags_all"`
	UserProfileName string                           `json:"user_profile_name"`
	ResourceSpec    []sagemakerapp.ResourceSpecState `json:"resource_spec"`
}
