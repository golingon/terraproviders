// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	connectvocabulary "github.com/golingon/terraproviders/aws/4.60.0/connectvocabulary"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConnectVocabulary(name string, args ConnectVocabularyArgs) *ConnectVocabulary {
	return &ConnectVocabulary{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConnectVocabulary)(nil)

type ConnectVocabulary struct {
	Name  string
	Args  ConnectVocabularyArgs
	state *connectVocabularyState
}

func (cv *ConnectVocabulary) Type() string {
	return "aws_connect_vocabulary"
}

func (cv *ConnectVocabulary) LocalName() string {
	return cv.Name
}

func (cv *ConnectVocabulary) Configuration() interface{} {
	return cv.Args
}

func (cv *ConnectVocabulary) Attributes() connectVocabularyAttributes {
	return connectVocabularyAttributes{ref: terra.ReferenceResource(cv)}
}

func (cv *ConnectVocabulary) ImportState(av io.Reader) error {
	cv.state = &connectVocabularyState{}
	if err := json.NewDecoder(av).Decode(cv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cv.Type(), cv.LocalName(), err)
	}
	return nil
}

func (cv *ConnectVocabulary) State() (*connectVocabularyState, bool) {
	return cv.state, cv.state != nil
}

func (cv *ConnectVocabulary) StateMust() *connectVocabularyState {
	if cv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cv.Type(), cv.LocalName()))
	}
	return cv.state
}

func (cv *ConnectVocabulary) DependOn() terra.Reference {
	return terra.ReferenceResource(cv)
}

type ConnectVocabularyArgs struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *connectvocabulary.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ConnectVocabulary depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type connectVocabularyAttributes struct {
	ref terra.Reference
}

func (cv connectVocabularyAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cv.ref.Append("arn"))
}

func (cv connectVocabularyAttributes) Content() terra.StringValue {
	return terra.ReferenceString(cv.ref.Append("content"))
}

func (cv connectVocabularyAttributes) FailureReason() terra.StringValue {
	return terra.ReferenceString(cv.ref.Append("failure_reason"))
}

func (cv connectVocabularyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cv.ref.Append("id"))
}

func (cv connectVocabularyAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceString(cv.ref.Append("instance_id"))
}

func (cv connectVocabularyAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceString(cv.ref.Append("language_code"))
}

func (cv connectVocabularyAttributes) LastModifiedTime() terra.StringValue {
	return terra.ReferenceString(cv.ref.Append("last_modified_time"))
}

func (cv connectVocabularyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cv.ref.Append("name"))
}

func (cv connectVocabularyAttributes) State() terra.StringValue {
	return terra.ReferenceString(cv.ref.Append("state"))
}

func (cv connectVocabularyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cv.ref.Append("tags"))
}

func (cv connectVocabularyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cv.ref.Append("tags_all"))
}

func (cv connectVocabularyAttributes) VocabularyId() terra.StringValue {
	return terra.ReferenceString(cv.ref.Append("vocabulary_id"))
}

func (cv connectVocabularyAttributes) Timeouts() connectvocabulary.TimeoutsAttributes {
	return terra.ReferenceSingle[connectvocabulary.TimeoutsAttributes](cv.ref.Append("timeouts"))
}

type connectVocabularyState struct {
	Arn              string                           `json:"arn"`
	Content          string                           `json:"content"`
	FailureReason    string                           `json:"failure_reason"`
	Id               string                           `json:"id"`
	InstanceId       string                           `json:"instance_id"`
	LanguageCode     string                           `json:"language_code"`
	LastModifiedTime string                           `json:"last_modified_time"`
	Name             string                           `json:"name"`
	State            string                           `json:"state"`
	Tags             map[string]string                `json:"tags"`
	TagsAll          map[string]string                `json:"tags_all"`
	VocabularyId     string                           `json:"vocabulary_id"`
	Timeouts         *connectvocabulary.TimeoutsState `json:"timeouts"`
}
