// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEipAssociation(name string, args EipAssociationArgs) *EipAssociation {
	return &EipAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EipAssociation)(nil)

type EipAssociation struct {
	Name  string
	Args  EipAssociationArgs
	state *eipAssociationState
}

func (ea *EipAssociation) Type() string {
	return "aws_eip_association"
}

func (ea *EipAssociation) LocalName() string {
	return ea.Name
}

func (ea *EipAssociation) Configuration() interface{} {
	return ea.Args
}

func (ea *EipAssociation) Attributes() eipAssociationAttributes {
	return eipAssociationAttributes{ref: terra.ReferenceResource(ea)}
}

func (ea *EipAssociation) ImportState(av io.Reader) error {
	ea.state = &eipAssociationState{}
	if err := json.NewDecoder(av).Decode(ea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ea.Type(), ea.LocalName(), err)
	}
	return nil
}

func (ea *EipAssociation) State() (*eipAssociationState, bool) {
	return ea.state, ea.state != nil
}

func (ea *EipAssociation) StateMust() *eipAssociationState {
	if ea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ea.Type(), ea.LocalName()))
	}
	return ea.state
}

func (ea *EipAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(ea)
}

type EipAssociationArgs struct {
	// AllocationId: string, optional
	AllocationId terra.StringValue `hcl:"allocation_id,attr"`
	// AllowReassociation: bool, optional
	AllowReassociation terra.BoolValue `hcl:"allow_reassociation,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, optional
	InstanceId terra.StringValue `hcl:"instance_id,attr"`
	// NetworkInterfaceId: string, optional
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr"`
	// PrivateIpAddress: string, optional
	PrivateIpAddress terra.StringValue `hcl:"private_ip_address,attr"`
	// PublicIp: string, optional
	PublicIp terra.StringValue `hcl:"public_ip,attr"`
	// DependsOn contains resources that EipAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eipAssociationAttributes struct {
	ref terra.Reference
}

func (ea eipAssociationAttributes) AllocationId() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("allocation_id"))
}

func (ea eipAssociationAttributes) AllowReassociation() terra.BoolValue {
	return terra.ReferenceBool(ea.ref.Append("allow_reassociation"))
}

func (ea eipAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("id"))
}

func (ea eipAssociationAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("instance_id"))
}

func (ea eipAssociationAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("network_interface_id"))
}

func (ea eipAssociationAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("private_ip_address"))
}

func (ea eipAssociationAttributes) PublicIp() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("public_ip"))
}

type eipAssociationState struct {
	AllocationId       string `json:"allocation_id"`
	AllowReassociation bool   `json:"allow_reassociation"`
	Id                 string `json:"id"`
	InstanceId         string `json:"instance_id"`
	NetworkInterfaceId string `json:"network_interface_id"`
	PrivateIpAddress   string `json:"private_ip_address"`
	PublicIp           string `json:"public_ip"`
}
