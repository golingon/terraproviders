// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataec2instancetype

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Fpgas struct{}

type Gpus struct{}

type InferenceAccelerators struct{}

type InstanceDisks struct{}

type Timeouts struct {
	// Read: string, optional
	Read terra.StringValue `hcl:"read,attr"`
}

type FpgasAttributes struct {
	ref terra.Reference
}

func (f FpgasAttributes) InternalRef() terra.Reference {
	return f.ref
}

func (f FpgasAttributes) InternalWithRef(ref terra.Reference) FpgasAttributes {
	return FpgasAttributes{ref: ref}
}

func (f FpgasAttributes) InternalTokens() hclwrite.Tokens {
	return f.ref.InternalTokens()
}

func (f FpgasAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(f.ref.Append("count"))
}

func (f FpgasAttributes) Manufacturer() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("manufacturer"))
}

func (f FpgasAttributes) MemorySize() terra.NumberValue {
	return terra.ReferenceNumber(f.ref.Append("memory_size"))
}

func (f FpgasAttributes) Name() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("name"))
}

type GpusAttributes struct {
	ref terra.Reference
}

func (g GpusAttributes) InternalRef() terra.Reference {
	return g.ref
}

func (g GpusAttributes) InternalWithRef(ref terra.Reference) GpusAttributes {
	return GpusAttributes{ref: ref}
}

func (g GpusAttributes) InternalTokens() hclwrite.Tokens {
	return g.ref.InternalTokens()
}

func (g GpusAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(g.ref.Append("count"))
}

func (g GpusAttributes) Manufacturer() terra.StringValue {
	return terra.ReferenceString(g.ref.Append("manufacturer"))
}

func (g GpusAttributes) MemorySize() terra.NumberValue {
	return terra.ReferenceNumber(g.ref.Append("memory_size"))
}

func (g GpusAttributes) Name() terra.StringValue {
	return terra.ReferenceString(g.ref.Append("name"))
}

type InferenceAcceleratorsAttributes struct {
	ref terra.Reference
}

func (ia InferenceAcceleratorsAttributes) InternalRef() terra.Reference {
	return ia.ref
}

func (ia InferenceAcceleratorsAttributes) InternalWithRef(ref terra.Reference) InferenceAcceleratorsAttributes {
	return InferenceAcceleratorsAttributes{ref: ref}
}

func (ia InferenceAcceleratorsAttributes) InternalTokens() hclwrite.Tokens {
	return ia.ref.InternalTokens()
}

func (ia InferenceAcceleratorsAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(ia.ref.Append("count"))
}

func (ia InferenceAcceleratorsAttributes) Manufacturer() terra.StringValue {
	return terra.ReferenceString(ia.ref.Append("manufacturer"))
}

func (ia InferenceAcceleratorsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ia.ref.Append("name"))
}

type InstanceDisksAttributes struct {
	ref terra.Reference
}

func (id InstanceDisksAttributes) InternalRef() terra.Reference {
	return id.ref
}

func (id InstanceDisksAttributes) InternalWithRef(ref terra.Reference) InstanceDisksAttributes {
	return InstanceDisksAttributes{ref: ref}
}

func (id InstanceDisksAttributes) InternalTokens() hclwrite.Tokens {
	return id.ref.InternalTokens()
}

func (id InstanceDisksAttributes) Count() terra.NumberValue {
	return terra.ReferenceNumber(id.ref.Append("count"))
}

func (id InstanceDisksAttributes) Size() terra.NumberValue {
	return terra.ReferenceNumber(id.ref.Append("size"))
}

func (id InstanceDisksAttributes) Type() terra.StringValue {
	return terra.ReferenceString(id.ref.Append("type"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("read"))
}

type FpgasState struct {
	Count        float64 `json:"count"`
	Manufacturer string  `json:"manufacturer"`
	MemorySize   float64 `json:"memory_size"`
	Name         string  `json:"name"`
}

type GpusState struct {
	Count        float64 `json:"count"`
	Manufacturer string  `json:"manufacturer"`
	MemorySize   float64 `json:"memory_size"`
	Name         string  `json:"name"`
}

type InferenceAcceleratorsState struct {
	Count        float64 `json:"count"`
	Manufacturer string  `json:"manufacturer"`
	Name         string  `json:"name"`
}

type InstanceDisksState struct {
	Count float64 `json:"count"`
	Size  float64 `json:"size"`
	Type  string  `json:"type"`
}

type TimeoutsState struct {
	Read string `json:"read"`
}
