// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftSnapshotCopyGrant(name string, args RedshiftSnapshotCopyGrantArgs) *RedshiftSnapshotCopyGrant {
	return &RedshiftSnapshotCopyGrant{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftSnapshotCopyGrant)(nil)

type RedshiftSnapshotCopyGrant struct {
	Name  string
	Args  RedshiftSnapshotCopyGrantArgs
	state *redshiftSnapshotCopyGrantState
}

func (rscg *RedshiftSnapshotCopyGrant) Type() string {
	return "aws_redshift_snapshot_copy_grant"
}

func (rscg *RedshiftSnapshotCopyGrant) LocalName() string {
	return rscg.Name
}

func (rscg *RedshiftSnapshotCopyGrant) Configuration() interface{} {
	return rscg.Args
}

func (rscg *RedshiftSnapshotCopyGrant) Attributes() redshiftSnapshotCopyGrantAttributes {
	return redshiftSnapshotCopyGrantAttributes{ref: terra.ReferenceResource(rscg)}
}

func (rscg *RedshiftSnapshotCopyGrant) ImportState(av io.Reader) error {
	rscg.state = &redshiftSnapshotCopyGrantState{}
	if err := json.NewDecoder(av).Decode(rscg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rscg.Type(), rscg.LocalName(), err)
	}
	return nil
}

func (rscg *RedshiftSnapshotCopyGrant) State() (*redshiftSnapshotCopyGrantState, bool) {
	return rscg.state, rscg.state != nil
}

func (rscg *RedshiftSnapshotCopyGrant) StateMust() *redshiftSnapshotCopyGrantState {
	if rscg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rscg.Type(), rscg.LocalName()))
	}
	return rscg.state
}

func (rscg *RedshiftSnapshotCopyGrant) DependOn() terra.Reference {
	return terra.ReferenceResource(rscg)
}

type RedshiftSnapshotCopyGrantArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// SnapshotCopyGrantName: string, required
	SnapshotCopyGrantName terra.StringValue `hcl:"snapshot_copy_grant_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that RedshiftSnapshotCopyGrant depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftSnapshotCopyGrantAttributes struct {
	ref terra.Reference
}

func (rscg redshiftSnapshotCopyGrantAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rscg.ref.Append("arn"))
}

func (rscg redshiftSnapshotCopyGrantAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rscg.ref.Append("id"))
}

func (rscg redshiftSnapshotCopyGrantAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(rscg.ref.Append("kms_key_id"))
}

func (rscg redshiftSnapshotCopyGrantAttributes) SnapshotCopyGrantName() terra.StringValue {
	return terra.ReferenceString(rscg.ref.Append("snapshot_copy_grant_name"))
}

func (rscg redshiftSnapshotCopyGrantAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rscg.ref.Append("tags"))
}

func (rscg redshiftSnapshotCopyGrantAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rscg.ref.Append("tags_all"))
}

type redshiftSnapshotCopyGrantState struct {
	Arn                   string            `json:"arn"`
	Id                    string            `json:"id"`
	KmsKeyId              string            `json:"kms_key_id"`
	SnapshotCopyGrantName string            `json:"snapshot_copy_grant_name"`
	Tags                  map[string]string `json:"tags"`
	TagsAll               map[string]string `json:"tags_all"`
}
