// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVpcEndpointRouteTableAssociation(name string, args VpcEndpointRouteTableAssociationArgs) *VpcEndpointRouteTableAssociation {
	return &VpcEndpointRouteTableAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpcEndpointRouteTableAssociation)(nil)

type VpcEndpointRouteTableAssociation struct {
	Name  string
	Args  VpcEndpointRouteTableAssociationArgs
	state *vpcEndpointRouteTableAssociationState
}

func (verta *VpcEndpointRouteTableAssociation) Type() string {
	return "aws_vpc_endpoint_route_table_association"
}

func (verta *VpcEndpointRouteTableAssociation) LocalName() string {
	return verta.Name
}

func (verta *VpcEndpointRouteTableAssociation) Configuration() interface{} {
	return verta.Args
}

func (verta *VpcEndpointRouteTableAssociation) Attributes() vpcEndpointRouteTableAssociationAttributes {
	return vpcEndpointRouteTableAssociationAttributes{ref: terra.ReferenceResource(verta)}
}

func (verta *VpcEndpointRouteTableAssociation) ImportState(av io.Reader) error {
	verta.state = &vpcEndpointRouteTableAssociationState{}
	if err := json.NewDecoder(av).Decode(verta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", verta.Type(), verta.LocalName(), err)
	}
	return nil
}

func (verta *VpcEndpointRouteTableAssociation) State() (*vpcEndpointRouteTableAssociationState, bool) {
	return verta.state, verta.state != nil
}

func (verta *VpcEndpointRouteTableAssociation) StateMust() *vpcEndpointRouteTableAssociationState {
	if verta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", verta.Type(), verta.LocalName()))
	}
	return verta.state
}

func (verta *VpcEndpointRouteTableAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(verta)
}

type VpcEndpointRouteTableAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RouteTableId: string, required
	RouteTableId terra.StringValue `hcl:"route_table_id,attr" validate:"required"`
	// VpcEndpointId: string, required
	VpcEndpointId terra.StringValue `hcl:"vpc_endpoint_id,attr" validate:"required"`
	// DependsOn contains resources that VpcEndpointRouteTableAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vpcEndpointRouteTableAssociationAttributes struct {
	ref terra.Reference
}

func (verta vpcEndpointRouteTableAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(verta.ref.Append("id"))
}

func (verta vpcEndpointRouteTableAssociationAttributes) RouteTableId() terra.StringValue {
	return terra.ReferenceString(verta.ref.Append("route_table_id"))
}

func (verta vpcEndpointRouteTableAssociationAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceString(verta.ref.Append("vpc_endpoint_id"))
}

type vpcEndpointRouteTableAssociationState struct {
	Id            string `json:"id"`
	RouteTableId  string `json:"route_table_id"`
	VpcEndpointId string `json:"vpc_endpoint_id"`
}
