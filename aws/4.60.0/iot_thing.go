// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIotThing(name string, args IotThingArgs) *IotThing {
	return &IotThing{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IotThing)(nil)

type IotThing struct {
	Name  string
	Args  IotThingArgs
	state *iotThingState
}

func (it *IotThing) Type() string {
	return "aws_iot_thing"
}

func (it *IotThing) LocalName() string {
	return it.Name
}

func (it *IotThing) Configuration() interface{} {
	return it.Args
}

func (it *IotThing) Attributes() iotThingAttributes {
	return iotThingAttributes{ref: terra.ReferenceResource(it)}
}

func (it *IotThing) ImportState(av io.Reader) error {
	it.state = &iotThingState{}
	if err := json.NewDecoder(av).Decode(it.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", it.Type(), it.LocalName(), err)
	}
	return nil
}

func (it *IotThing) State() (*iotThingState, bool) {
	return it.state, it.state != nil
}

func (it *IotThing) StateMust() *iotThingState {
	if it.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", it.Type(), it.LocalName()))
	}
	return it.state
}

func (it *IotThing) DependOn() terra.Reference {
	return terra.ReferenceResource(it)
}

type IotThingArgs struct {
	// Attributes: map of string, optional
	Attributes terra.MapValue[terra.StringValue] `hcl:"attributes,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ThingTypeName: string, optional
	ThingTypeName terra.StringValue `hcl:"thing_type_name,attr"`
	// DependsOn contains resources that IotThing depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iotThingAttributes struct {
	ref terra.Reference
}

func (it iotThingAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(it.ref.Append("arn"))
}

func (it iotThingAttributes) Attributes() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](it.ref.Append("attributes"))
}

func (it iotThingAttributes) DefaultClientId() terra.StringValue {
	return terra.ReferenceString(it.ref.Append("default_client_id"))
}

func (it iotThingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(it.ref.Append("id"))
}

func (it iotThingAttributes) Name() terra.StringValue {
	return terra.ReferenceString(it.ref.Append("name"))
}

func (it iotThingAttributes) ThingTypeName() terra.StringValue {
	return terra.ReferenceString(it.ref.Append("thing_type_name"))
}

func (it iotThingAttributes) Version() terra.NumberValue {
	return terra.ReferenceNumber(it.ref.Append("version"))
}

type iotThingState struct {
	Arn             string            `json:"arn"`
	Attributes      map[string]string `json:"attributes"`
	DefaultClientId string            `json:"default_client_id"`
	Id              string            `json:"id"`
	Name            string            `json:"name"`
	ThingTypeName   string            `json:"thing_type_name"`
	Version         float64           `json:"version"`
}
