// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSsmMaintenanceWindow(name string, args SsmMaintenanceWindowArgs) *SsmMaintenanceWindow {
	return &SsmMaintenanceWindow{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SsmMaintenanceWindow)(nil)

type SsmMaintenanceWindow struct {
	Name  string
	Args  SsmMaintenanceWindowArgs
	state *ssmMaintenanceWindowState
}

func (smw *SsmMaintenanceWindow) Type() string {
	return "aws_ssm_maintenance_window"
}

func (smw *SsmMaintenanceWindow) LocalName() string {
	return smw.Name
}

func (smw *SsmMaintenanceWindow) Configuration() interface{} {
	return smw.Args
}

func (smw *SsmMaintenanceWindow) Attributes() ssmMaintenanceWindowAttributes {
	return ssmMaintenanceWindowAttributes{ref: terra.ReferenceResource(smw)}
}

func (smw *SsmMaintenanceWindow) ImportState(av io.Reader) error {
	smw.state = &ssmMaintenanceWindowState{}
	if err := json.NewDecoder(av).Decode(smw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", smw.Type(), smw.LocalName(), err)
	}
	return nil
}

func (smw *SsmMaintenanceWindow) State() (*ssmMaintenanceWindowState, bool) {
	return smw.state, smw.state != nil
}

func (smw *SsmMaintenanceWindow) StateMust() *ssmMaintenanceWindowState {
	if smw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", smw.Type(), smw.LocalName()))
	}
	return smw.state
}

func (smw *SsmMaintenanceWindow) DependOn() terra.Reference {
	return terra.ReferenceResource(smw)
}

type SsmMaintenanceWindowArgs struct {
	// AllowUnassociatedTargets: bool, optional
	AllowUnassociatedTargets terra.BoolValue `hcl:"allow_unassociated_targets,attr"`
	// Cutoff: number, required
	Cutoff terra.NumberValue `hcl:"cutoff,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Duration: number, required
	Duration terra.NumberValue `hcl:"duration,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// EndDate: string, optional
	EndDate terra.StringValue `hcl:"end_date,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Schedule: string, required
	Schedule terra.StringValue `hcl:"schedule,attr" validate:"required"`
	// ScheduleOffset: number, optional
	ScheduleOffset terra.NumberValue `hcl:"schedule_offset,attr"`
	// ScheduleTimezone: string, optional
	ScheduleTimezone terra.StringValue `hcl:"schedule_timezone,attr"`
	// StartDate: string, optional
	StartDate terra.StringValue `hcl:"start_date,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that SsmMaintenanceWindow depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ssmMaintenanceWindowAttributes struct {
	ref terra.Reference
}

func (smw ssmMaintenanceWindowAttributes) AllowUnassociatedTargets() terra.BoolValue {
	return terra.ReferenceBool(smw.ref.Append("allow_unassociated_targets"))
}

func (smw ssmMaintenanceWindowAttributes) Cutoff() terra.NumberValue {
	return terra.ReferenceNumber(smw.ref.Append("cutoff"))
}

func (smw ssmMaintenanceWindowAttributes) Description() terra.StringValue {
	return terra.ReferenceString(smw.ref.Append("description"))
}

func (smw ssmMaintenanceWindowAttributes) Duration() terra.NumberValue {
	return terra.ReferenceNumber(smw.ref.Append("duration"))
}

func (smw ssmMaintenanceWindowAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(smw.ref.Append("enabled"))
}

func (smw ssmMaintenanceWindowAttributes) EndDate() terra.StringValue {
	return terra.ReferenceString(smw.ref.Append("end_date"))
}

func (smw ssmMaintenanceWindowAttributes) Id() terra.StringValue {
	return terra.ReferenceString(smw.ref.Append("id"))
}

func (smw ssmMaintenanceWindowAttributes) Name() terra.StringValue {
	return terra.ReferenceString(smw.ref.Append("name"))
}

func (smw ssmMaintenanceWindowAttributes) Schedule() terra.StringValue {
	return terra.ReferenceString(smw.ref.Append("schedule"))
}

func (smw ssmMaintenanceWindowAttributes) ScheduleOffset() terra.NumberValue {
	return terra.ReferenceNumber(smw.ref.Append("schedule_offset"))
}

func (smw ssmMaintenanceWindowAttributes) ScheduleTimezone() terra.StringValue {
	return terra.ReferenceString(smw.ref.Append("schedule_timezone"))
}

func (smw ssmMaintenanceWindowAttributes) StartDate() terra.StringValue {
	return terra.ReferenceString(smw.ref.Append("start_date"))
}

func (smw ssmMaintenanceWindowAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](smw.ref.Append("tags"))
}

func (smw ssmMaintenanceWindowAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](smw.ref.Append("tags_all"))
}

type ssmMaintenanceWindowState struct {
	AllowUnassociatedTargets bool              `json:"allow_unassociated_targets"`
	Cutoff                   float64           `json:"cutoff"`
	Description              string            `json:"description"`
	Duration                 float64           `json:"duration"`
	Enabled                  bool              `json:"enabled"`
	EndDate                  string            `json:"end_date"`
	Id                       string            `json:"id"`
	Name                     string            `json:"name"`
	Schedule                 string            `json:"schedule"`
	ScheduleOffset           float64           `json:"schedule_offset"`
	ScheduleTimezone         string            `json:"schedule_timezone"`
	StartDate                string            `json:"start_date"`
	Tags                     map[string]string `json:"tags"`
	TagsAll                  map[string]string `json:"tags_all"`
}
