// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lakeformationresourcelftags "github.com/golingon/terraproviders/aws/4.60.0/lakeformationresourcelftags"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLakeformationResourceLfTags(name string, args LakeformationResourceLfTagsArgs) *LakeformationResourceLfTags {
	return &LakeformationResourceLfTags{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LakeformationResourceLfTags)(nil)

type LakeformationResourceLfTags struct {
	Name  string
	Args  LakeformationResourceLfTagsArgs
	state *lakeformationResourceLfTagsState
}

func (lrlt *LakeformationResourceLfTags) Type() string {
	return "aws_lakeformation_resource_lf_tags"
}

func (lrlt *LakeformationResourceLfTags) LocalName() string {
	return lrlt.Name
}

func (lrlt *LakeformationResourceLfTags) Configuration() interface{} {
	return lrlt.Args
}

func (lrlt *LakeformationResourceLfTags) Attributes() lakeformationResourceLfTagsAttributes {
	return lakeformationResourceLfTagsAttributes{ref: terra.ReferenceResource(lrlt)}
}

func (lrlt *LakeformationResourceLfTags) ImportState(av io.Reader) error {
	lrlt.state = &lakeformationResourceLfTagsState{}
	if err := json.NewDecoder(av).Decode(lrlt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lrlt.Type(), lrlt.LocalName(), err)
	}
	return nil
}

func (lrlt *LakeformationResourceLfTags) State() (*lakeformationResourceLfTagsState, bool) {
	return lrlt.state, lrlt.state != nil
}

func (lrlt *LakeformationResourceLfTags) StateMust() *lakeformationResourceLfTagsState {
	if lrlt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lrlt.Type(), lrlt.LocalName()))
	}
	return lrlt.state
}

func (lrlt *LakeformationResourceLfTags) DependOn() terra.Reference {
	return terra.ReferenceResource(lrlt)
}

type LakeformationResourceLfTagsArgs struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Database: optional
	Database *lakeformationresourcelftags.Database `hcl:"database,block"`
	// LfTag: min=1
	LfTag []lakeformationresourcelftags.LfTag `hcl:"lf_tag,block" validate:"min=1"`
	// Table: optional
	Table *lakeformationresourcelftags.Table `hcl:"table,block"`
	// TableWithColumns: optional
	TableWithColumns *lakeformationresourcelftags.TableWithColumns `hcl:"table_with_columns,block"`
	// Timeouts: optional
	Timeouts *lakeformationresourcelftags.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LakeformationResourceLfTags depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lakeformationResourceLfTagsAttributes struct {
	ref terra.Reference
}

func (lrlt lakeformationResourceLfTagsAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceString(lrlt.ref.Append("catalog_id"))
}

func (lrlt lakeformationResourceLfTagsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lrlt.ref.Append("id"))
}

func (lrlt lakeformationResourceLfTagsAttributes) Database() terra.ListValue[lakeformationresourcelftags.DatabaseAttributes] {
	return terra.ReferenceList[lakeformationresourcelftags.DatabaseAttributes](lrlt.ref.Append("database"))
}

func (lrlt lakeformationResourceLfTagsAttributes) LfTag() terra.SetValue[lakeformationresourcelftags.LfTagAttributes] {
	return terra.ReferenceSet[lakeformationresourcelftags.LfTagAttributes](lrlt.ref.Append("lf_tag"))
}

func (lrlt lakeformationResourceLfTagsAttributes) Table() terra.ListValue[lakeformationresourcelftags.TableAttributes] {
	return terra.ReferenceList[lakeformationresourcelftags.TableAttributes](lrlt.ref.Append("table"))
}

func (lrlt lakeformationResourceLfTagsAttributes) TableWithColumns() terra.ListValue[lakeformationresourcelftags.TableWithColumnsAttributes] {
	return terra.ReferenceList[lakeformationresourcelftags.TableWithColumnsAttributes](lrlt.ref.Append("table_with_columns"))
}

func (lrlt lakeformationResourceLfTagsAttributes) Timeouts() lakeformationresourcelftags.TimeoutsAttributes {
	return terra.ReferenceSingle[lakeformationresourcelftags.TimeoutsAttributes](lrlt.ref.Append("timeouts"))
}

type lakeformationResourceLfTagsState struct {
	CatalogId        string                                              `json:"catalog_id"`
	Id               string                                              `json:"id"`
	Database         []lakeformationresourcelftags.DatabaseState         `json:"database"`
	LfTag            []lakeformationresourcelftags.LfTagState            `json:"lf_tag"`
	Table            []lakeformationresourcelftags.TableState            `json:"table"`
	TableWithColumns []lakeformationresourcelftags.TableWithColumnsState `json:"table_with_columns"`
	Timeouts         *lakeformationresourcelftags.TimeoutsState          `json:"timeouts"`
}
