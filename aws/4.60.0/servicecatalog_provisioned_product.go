// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	servicecatalogprovisionedproduct "github.com/golingon/terraproviders/aws/4.60.0/servicecatalogprovisionedproduct"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicecatalogProvisionedProduct(name string, args ServicecatalogProvisionedProductArgs) *ServicecatalogProvisionedProduct {
	return &ServicecatalogProvisionedProduct{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicecatalogProvisionedProduct)(nil)

type ServicecatalogProvisionedProduct struct {
	Name  string
	Args  ServicecatalogProvisionedProductArgs
	state *servicecatalogProvisionedProductState
}

func (spp *ServicecatalogProvisionedProduct) Type() string {
	return "aws_servicecatalog_provisioned_product"
}

func (spp *ServicecatalogProvisionedProduct) LocalName() string {
	return spp.Name
}

func (spp *ServicecatalogProvisionedProduct) Configuration() interface{} {
	return spp.Args
}

func (spp *ServicecatalogProvisionedProduct) Attributes() servicecatalogProvisionedProductAttributes {
	return servicecatalogProvisionedProductAttributes{ref: terra.ReferenceResource(spp)}
}

func (spp *ServicecatalogProvisionedProduct) ImportState(av io.Reader) error {
	spp.state = &servicecatalogProvisionedProductState{}
	if err := json.NewDecoder(av).Decode(spp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", spp.Type(), spp.LocalName(), err)
	}
	return nil
}

func (spp *ServicecatalogProvisionedProduct) State() (*servicecatalogProvisionedProductState, bool) {
	return spp.state, spp.state != nil
}

func (spp *ServicecatalogProvisionedProduct) StateMust() *servicecatalogProvisionedProductState {
	if spp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", spp.Type(), spp.LocalName()))
	}
	return spp.state
}

func (spp *ServicecatalogProvisionedProduct) DependOn() terra.Reference {
	return terra.ReferenceResource(spp)
}

type ServicecatalogProvisionedProductArgs struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreErrors: bool, optional
	IgnoreErrors terra.BoolValue `hcl:"ignore_errors,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NotificationArns: list of string, optional
	NotificationArns terra.ListValue[terra.StringValue] `hcl:"notification_arns,attr"`
	// PathId: string, optional
	PathId terra.StringValue `hcl:"path_id,attr"`
	// PathName: string, optional
	PathName terra.StringValue `hcl:"path_name,attr"`
	// ProductId: string, optional
	ProductId terra.StringValue `hcl:"product_id,attr"`
	// ProductName: string, optional
	ProductName terra.StringValue `hcl:"product_name,attr"`
	// ProvisioningArtifactId: string, optional
	ProvisioningArtifactId terra.StringValue `hcl:"provisioning_artifact_id,attr"`
	// ProvisioningArtifactName: string, optional
	ProvisioningArtifactName terra.StringValue `hcl:"provisioning_artifact_name,attr"`
	// RetainPhysicalResources: bool, optional
	RetainPhysicalResources terra.BoolValue `hcl:"retain_physical_resources,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Outputs: min=0
	Outputs []servicecatalogprovisionedproduct.Outputs `hcl:"outputs,block" validate:"min=0"`
	// ProvisioningParameters: min=0
	ProvisioningParameters []servicecatalogprovisionedproduct.ProvisioningParameters `hcl:"provisioning_parameters,block" validate:"min=0"`
	// StackSetProvisioningPreferences: optional
	StackSetProvisioningPreferences *servicecatalogprovisionedproduct.StackSetProvisioningPreferences `hcl:"stack_set_provisioning_preferences,block"`
	// Timeouts: optional
	Timeouts *servicecatalogprovisionedproduct.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServicecatalogProvisionedProduct depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicecatalogProvisionedProductAttributes struct {
	ref terra.Reference
}

func (spp servicecatalogProvisionedProductAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("accept_language"))
}

func (spp servicecatalogProvisionedProductAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("arn"))
}

func (spp servicecatalogProvisionedProductAttributes) CloudwatchDashboardNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](spp.ref.Append("cloudwatch_dashboard_names"))
}

func (spp servicecatalogProvisionedProductAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("created_time"))
}

func (spp servicecatalogProvisionedProductAttributes) Id() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("id"))
}

func (spp servicecatalogProvisionedProductAttributes) IgnoreErrors() terra.BoolValue {
	return terra.ReferenceBool(spp.ref.Append("ignore_errors"))
}

func (spp servicecatalogProvisionedProductAttributes) LastProvisioningRecordId() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("last_provisioning_record_id"))
}

func (spp servicecatalogProvisionedProductAttributes) LastRecordId() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("last_record_id"))
}

func (spp servicecatalogProvisionedProductAttributes) LastSuccessfulProvisioningRecordId() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("last_successful_provisioning_record_id"))
}

func (spp servicecatalogProvisionedProductAttributes) LaunchRoleArn() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("launch_role_arn"))
}

func (spp servicecatalogProvisionedProductAttributes) Name() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("name"))
}

func (spp servicecatalogProvisionedProductAttributes) NotificationArns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](spp.ref.Append("notification_arns"))
}

func (spp servicecatalogProvisionedProductAttributes) PathId() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("path_id"))
}

func (spp servicecatalogProvisionedProductAttributes) PathName() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("path_name"))
}

func (spp servicecatalogProvisionedProductAttributes) ProductId() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("product_id"))
}

func (spp servicecatalogProvisionedProductAttributes) ProductName() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("product_name"))
}

func (spp servicecatalogProvisionedProductAttributes) ProvisioningArtifactId() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("provisioning_artifact_id"))
}

func (spp servicecatalogProvisionedProductAttributes) ProvisioningArtifactName() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("provisioning_artifact_name"))
}

func (spp servicecatalogProvisionedProductAttributes) RetainPhysicalResources() terra.BoolValue {
	return terra.ReferenceBool(spp.ref.Append("retain_physical_resources"))
}

func (spp servicecatalogProvisionedProductAttributes) Status() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("status"))
}

func (spp servicecatalogProvisionedProductAttributes) StatusMessage() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("status_message"))
}

func (spp servicecatalogProvisionedProductAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](spp.ref.Append("tags"))
}

func (spp servicecatalogProvisionedProductAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](spp.ref.Append("tags_all"))
}

func (spp servicecatalogProvisionedProductAttributes) Type() terra.StringValue {
	return terra.ReferenceString(spp.ref.Append("type"))
}

func (spp servicecatalogProvisionedProductAttributes) Outputs() terra.SetValue[servicecatalogprovisionedproduct.OutputsAttributes] {
	return terra.ReferenceSet[servicecatalogprovisionedproduct.OutputsAttributes](spp.ref.Append("outputs"))
}

func (spp servicecatalogProvisionedProductAttributes) ProvisioningParameters() terra.ListValue[servicecatalogprovisionedproduct.ProvisioningParametersAttributes] {
	return terra.ReferenceList[servicecatalogprovisionedproduct.ProvisioningParametersAttributes](spp.ref.Append("provisioning_parameters"))
}

func (spp servicecatalogProvisionedProductAttributes) StackSetProvisioningPreferences() terra.ListValue[servicecatalogprovisionedproduct.StackSetProvisioningPreferencesAttributes] {
	return terra.ReferenceList[servicecatalogprovisionedproduct.StackSetProvisioningPreferencesAttributes](spp.ref.Append("stack_set_provisioning_preferences"))
}

func (spp servicecatalogProvisionedProductAttributes) Timeouts() servicecatalogprovisionedproduct.TimeoutsAttributes {
	return terra.ReferenceSingle[servicecatalogprovisionedproduct.TimeoutsAttributes](spp.ref.Append("timeouts"))
}

type servicecatalogProvisionedProductState struct {
	AcceptLanguage                     string                                                                  `json:"accept_language"`
	Arn                                string                                                                  `json:"arn"`
	CloudwatchDashboardNames           []string                                                                `json:"cloudwatch_dashboard_names"`
	CreatedTime                        string                                                                  `json:"created_time"`
	Id                                 string                                                                  `json:"id"`
	IgnoreErrors                       bool                                                                    `json:"ignore_errors"`
	LastProvisioningRecordId           string                                                                  `json:"last_provisioning_record_id"`
	LastRecordId                       string                                                                  `json:"last_record_id"`
	LastSuccessfulProvisioningRecordId string                                                                  `json:"last_successful_provisioning_record_id"`
	LaunchRoleArn                      string                                                                  `json:"launch_role_arn"`
	Name                               string                                                                  `json:"name"`
	NotificationArns                   []string                                                                `json:"notification_arns"`
	PathId                             string                                                                  `json:"path_id"`
	PathName                           string                                                                  `json:"path_name"`
	ProductId                          string                                                                  `json:"product_id"`
	ProductName                        string                                                                  `json:"product_name"`
	ProvisioningArtifactId             string                                                                  `json:"provisioning_artifact_id"`
	ProvisioningArtifactName           string                                                                  `json:"provisioning_artifact_name"`
	RetainPhysicalResources            bool                                                                    `json:"retain_physical_resources"`
	Status                             string                                                                  `json:"status"`
	StatusMessage                      string                                                                  `json:"status_message"`
	Tags                               map[string]string                                                       `json:"tags"`
	TagsAll                            map[string]string                                                       `json:"tags_all"`
	Type                               string                                                                  `json:"type"`
	Outputs                            []servicecatalogprovisionedproduct.OutputsState                         `json:"outputs"`
	ProvisioningParameters             []servicecatalogprovisionedproduct.ProvisioningParametersState          `json:"provisioning_parameters"`
	StackSetProvisioningPreferences    []servicecatalogprovisionedproduct.StackSetProvisioningPreferencesState `json:"stack_set_provisioning_preferences"`
	Timeouts                           *servicecatalogprovisionedproduct.TimeoutsState                         `json:"timeouts"`
}
