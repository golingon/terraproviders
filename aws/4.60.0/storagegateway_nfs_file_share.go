// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	storagegatewaynfsfileshare "github.com/golingon/terraproviders/aws/4.60.0/storagegatewaynfsfileshare"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStoragegatewayNfsFileShare(name string, args StoragegatewayNfsFileShareArgs) *StoragegatewayNfsFileShare {
	return &StoragegatewayNfsFileShare{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StoragegatewayNfsFileShare)(nil)

type StoragegatewayNfsFileShare struct {
	Name  string
	Args  StoragegatewayNfsFileShareArgs
	state *storagegatewayNfsFileShareState
}

func (snfs *StoragegatewayNfsFileShare) Type() string {
	return "aws_storagegateway_nfs_file_share"
}

func (snfs *StoragegatewayNfsFileShare) LocalName() string {
	return snfs.Name
}

func (snfs *StoragegatewayNfsFileShare) Configuration() interface{} {
	return snfs.Args
}

func (snfs *StoragegatewayNfsFileShare) Attributes() storagegatewayNfsFileShareAttributes {
	return storagegatewayNfsFileShareAttributes{ref: terra.ReferenceResource(snfs)}
}

func (snfs *StoragegatewayNfsFileShare) ImportState(av io.Reader) error {
	snfs.state = &storagegatewayNfsFileShareState{}
	if err := json.NewDecoder(av).Decode(snfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", snfs.Type(), snfs.LocalName(), err)
	}
	return nil
}

func (snfs *StoragegatewayNfsFileShare) State() (*storagegatewayNfsFileShareState, bool) {
	return snfs.state, snfs.state != nil
}

func (snfs *StoragegatewayNfsFileShare) StateMust() *storagegatewayNfsFileShareState {
	if snfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", snfs.Type(), snfs.LocalName()))
	}
	return snfs.state
}

func (snfs *StoragegatewayNfsFileShare) DependOn() terra.Reference {
	return terra.ReferenceResource(snfs)
}

type StoragegatewayNfsFileShareArgs struct {
	// AuditDestinationArn: string, optional
	AuditDestinationArn terra.StringValue `hcl:"audit_destination_arn,attr"`
	// BucketRegion: string, optional
	BucketRegion terra.StringValue `hcl:"bucket_region,attr"`
	// ClientList: set of string, required
	ClientList terra.SetValue[terra.StringValue] `hcl:"client_list,attr" validate:"required"`
	// DefaultStorageClass: string, optional
	DefaultStorageClass terra.StringValue `hcl:"default_storage_class,attr"`
	// FileShareName: string, optional
	FileShareName terra.StringValue `hcl:"file_share_name,attr"`
	// GatewayArn: string, required
	GatewayArn terra.StringValue `hcl:"gateway_arn,attr" validate:"required"`
	// GuessMimeTypeEnabled: bool, optional
	GuessMimeTypeEnabled terra.BoolValue `hcl:"guess_mime_type_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsEncrypted: bool, optional
	KmsEncrypted terra.BoolValue `hcl:"kms_encrypted,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// LocationArn: string, required
	LocationArn terra.StringValue `hcl:"location_arn,attr" validate:"required"`
	// NotificationPolicy: string, optional
	NotificationPolicy terra.StringValue `hcl:"notification_policy,attr"`
	// ObjectAcl: string, optional
	ObjectAcl terra.StringValue `hcl:"object_acl,attr"`
	// ReadOnly: bool, optional
	ReadOnly terra.BoolValue `hcl:"read_only,attr"`
	// RequesterPays: bool, optional
	RequesterPays terra.BoolValue `hcl:"requester_pays,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Squash: string, optional
	Squash terra.StringValue `hcl:"squash,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcEndpointDnsName: string, optional
	VpcEndpointDnsName terra.StringValue `hcl:"vpc_endpoint_dns_name,attr"`
	// CacheAttributes: optional
	CacheAttributes *storagegatewaynfsfileshare.CacheAttributes `hcl:"cache_attributes,block"`
	// NfsFileShareDefaults: optional
	NfsFileShareDefaults *storagegatewaynfsfileshare.NfsFileShareDefaults `hcl:"nfs_file_share_defaults,block"`
	// Timeouts: optional
	Timeouts *storagegatewaynfsfileshare.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that StoragegatewayNfsFileShare depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storagegatewayNfsFileShareAttributes struct {
	ref terra.Reference
}

func (snfs storagegatewayNfsFileShareAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("arn"))
}

func (snfs storagegatewayNfsFileShareAttributes) AuditDestinationArn() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("audit_destination_arn"))
}

func (snfs storagegatewayNfsFileShareAttributes) BucketRegion() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("bucket_region"))
}

func (snfs storagegatewayNfsFileShareAttributes) ClientList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](snfs.ref.Append("client_list"))
}

func (snfs storagegatewayNfsFileShareAttributes) DefaultStorageClass() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("default_storage_class"))
}

func (snfs storagegatewayNfsFileShareAttributes) FileShareName() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("file_share_name"))
}

func (snfs storagegatewayNfsFileShareAttributes) FileshareId() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("fileshare_id"))
}

func (snfs storagegatewayNfsFileShareAttributes) GatewayArn() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("gateway_arn"))
}

func (snfs storagegatewayNfsFileShareAttributes) GuessMimeTypeEnabled() terra.BoolValue {
	return terra.ReferenceBool(snfs.ref.Append("guess_mime_type_enabled"))
}

func (snfs storagegatewayNfsFileShareAttributes) Id() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("id"))
}

func (snfs storagegatewayNfsFileShareAttributes) KmsEncrypted() terra.BoolValue {
	return terra.ReferenceBool(snfs.ref.Append("kms_encrypted"))
}

func (snfs storagegatewayNfsFileShareAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("kms_key_arn"))
}

func (snfs storagegatewayNfsFileShareAttributes) LocationArn() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("location_arn"))
}

func (snfs storagegatewayNfsFileShareAttributes) NotificationPolicy() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("notification_policy"))
}

func (snfs storagegatewayNfsFileShareAttributes) ObjectAcl() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("object_acl"))
}

func (snfs storagegatewayNfsFileShareAttributes) Path() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("path"))
}

func (snfs storagegatewayNfsFileShareAttributes) ReadOnly() terra.BoolValue {
	return terra.ReferenceBool(snfs.ref.Append("read_only"))
}

func (snfs storagegatewayNfsFileShareAttributes) RequesterPays() terra.BoolValue {
	return terra.ReferenceBool(snfs.ref.Append("requester_pays"))
}

func (snfs storagegatewayNfsFileShareAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("role_arn"))
}

func (snfs storagegatewayNfsFileShareAttributes) Squash() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("squash"))
}

func (snfs storagegatewayNfsFileShareAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](snfs.ref.Append("tags"))
}

func (snfs storagegatewayNfsFileShareAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](snfs.ref.Append("tags_all"))
}

func (snfs storagegatewayNfsFileShareAttributes) VpcEndpointDnsName() terra.StringValue {
	return terra.ReferenceString(snfs.ref.Append("vpc_endpoint_dns_name"))
}

func (snfs storagegatewayNfsFileShareAttributes) CacheAttributes() terra.ListValue[storagegatewaynfsfileshare.CacheAttributesAttributes] {
	return terra.ReferenceList[storagegatewaynfsfileshare.CacheAttributesAttributes](snfs.ref.Append("cache_attributes"))
}

func (snfs storagegatewayNfsFileShareAttributes) NfsFileShareDefaults() terra.ListValue[storagegatewaynfsfileshare.NfsFileShareDefaultsAttributes] {
	return terra.ReferenceList[storagegatewaynfsfileshare.NfsFileShareDefaultsAttributes](snfs.ref.Append("nfs_file_share_defaults"))
}

func (snfs storagegatewayNfsFileShareAttributes) Timeouts() storagegatewaynfsfileshare.TimeoutsAttributes {
	return terra.ReferenceSingle[storagegatewaynfsfileshare.TimeoutsAttributes](snfs.ref.Append("timeouts"))
}

type storagegatewayNfsFileShareState struct {
	Arn                  string                                                 `json:"arn"`
	AuditDestinationArn  string                                                 `json:"audit_destination_arn"`
	BucketRegion         string                                                 `json:"bucket_region"`
	ClientList           []string                                               `json:"client_list"`
	DefaultStorageClass  string                                                 `json:"default_storage_class"`
	FileShareName        string                                                 `json:"file_share_name"`
	FileshareId          string                                                 `json:"fileshare_id"`
	GatewayArn           string                                                 `json:"gateway_arn"`
	GuessMimeTypeEnabled bool                                                   `json:"guess_mime_type_enabled"`
	Id                   string                                                 `json:"id"`
	KmsEncrypted         bool                                                   `json:"kms_encrypted"`
	KmsKeyArn            string                                                 `json:"kms_key_arn"`
	LocationArn          string                                                 `json:"location_arn"`
	NotificationPolicy   string                                                 `json:"notification_policy"`
	ObjectAcl            string                                                 `json:"object_acl"`
	Path                 string                                                 `json:"path"`
	ReadOnly             bool                                                   `json:"read_only"`
	RequesterPays        bool                                                   `json:"requester_pays"`
	RoleArn              string                                                 `json:"role_arn"`
	Squash               string                                                 `json:"squash"`
	Tags                 map[string]string                                      `json:"tags"`
	TagsAll              map[string]string                                      `json:"tags_all"`
	VpcEndpointDnsName   string                                                 `json:"vpc_endpoint_dns_name"`
	CacheAttributes      []storagegatewaynfsfileshare.CacheAttributesState      `json:"cache_attributes"`
	NfsFileShareDefaults []storagegatewaynfsfileshare.NfsFileShareDefaultsState `json:"nfs_file_share_defaults"`
	Timeouts             *storagegatewaynfsfileshare.TimeoutsState              `json:"timeouts"`
}
