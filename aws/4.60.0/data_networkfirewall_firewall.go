// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	datanetworkfirewallfirewall "github.com/golingon/terraproviders/aws/4.60.0/datanetworkfirewallfirewall"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataNetworkfirewallFirewall(name string, args DataNetworkfirewallFirewallArgs) *DataNetworkfirewallFirewall {
	return &DataNetworkfirewallFirewall{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataNetworkfirewallFirewall)(nil)

type DataNetworkfirewallFirewall struct {
	Name string
	Args DataNetworkfirewallFirewallArgs
}

func (nf *DataNetworkfirewallFirewall) DataSource() string {
	return "aws_networkfirewall_firewall"
}

func (nf *DataNetworkfirewallFirewall) LocalName() string {
	return nf.Name
}

func (nf *DataNetworkfirewallFirewall) Configuration() interface{} {
	return nf.Args
}

func (nf *DataNetworkfirewallFirewall) Attributes() dataNetworkfirewallFirewallAttributes {
	return dataNetworkfirewallFirewallAttributes{ref: terra.ReferenceDataResource(nf)}
}

type DataNetworkfirewallFirewallArgs struct {
	// Arn: string, optional
	Arn terra.StringValue `hcl:"arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// EncryptionConfiguration: min=0
	EncryptionConfiguration []datanetworkfirewallfirewall.EncryptionConfiguration `hcl:"encryption_configuration,block" validate:"min=0"`
	// FirewallStatus: min=0
	FirewallStatus []datanetworkfirewallfirewall.FirewallStatus `hcl:"firewall_status,block" validate:"min=0"`
	// SubnetMapping: min=0
	SubnetMapping []datanetworkfirewallfirewall.SubnetMapping `hcl:"subnet_mapping,block" validate:"min=0"`
}
type dataNetworkfirewallFirewallAttributes struct {
	ref terra.Reference
}

func (nf dataNetworkfirewallFirewallAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(nf.ref.Append("arn"))
}

func (nf dataNetworkfirewallFirewallAttributes) DeleteProtection() terra.BoolValue {
	return terra.ReferenceBool(nf.ref.Append("delete_protection"))
}

func (nf dataNetworkfirewallFirewallAttributes) Description() terra.StringValue {
	return terra.ReferenceString(nf.ref.Append("description"))
}

func (nf dataNetworkfirewallFirewallAttributes) FirewallPolicyArn() terra.StringValue {
	return terra.ReferenceString(nf.ref.Append("firewall_policy_arn"))
}

func (nf dataNetworkfirewallFirewallAttributes) FirewallPolicyChangeProtection() terra.BoolValue {
	return terra.ReferenceBool(nf.ref.Append("firewall_policy_change_protection"))
}

func (nf dataNetworkfirewallFirewallAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nf.ref.Append("id"))
}

func (nf dataNetworkfirewallFirewallAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nf.ref.Append("name"))
}

func (nf dataNetworkfirewallFirewallAttributes) SubnetChangeProtection() terra.BoolValue {
	return terra.ReferenceBool(nf.ref.Append("subnet_change_protection"))
}

func (nf dataNetworkfirewallFirewallAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nf.ref.Append("tags"))
}

func (nf dataNetworkfirewallFirewallAttributes) UpdateToken() terra.StringValue {
	return terra.ReferenceString(nf.ref.Append("update_token"))
}

func (nf dataNetworkfirewallFirewallAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(nf.ref.Append("vpc_id"))
}

func (nf dataNetworkfirewallFirewallAttributes) EncryptionConfiguration() terra.SetValue[datanetworkfirewallfirewall.EncryptionConfigurationAttributes] {
	return terra.ReferenceSet[datanetworkfirewallfirewall.EncryptionConfigurationAttributes](nf.ref.Append("encryption_configuration"))
}

func (nf dataNetworkfirewallFirewallAttributes) FirewallStatus() terra.ListValue[datanetworkfirewallfirewall.FirewallStatusAttributes] {
	return terra.ReferenceList[datanetworkfirewallfirewall.FirewallStatusAttributes](nf.ref.Append("firewall_status"))
}

func (nf dataNetworkfirewallFirewallAttributes) SubnetMapping() terra.SetValue[datanetworkfirewallfirewall.SubnetMappingAttributes] {
	return terra.ReferenceSet[datanetworkfirewallfirewall.SubnetMappingAttributes](nf.ref.Append("subnet_mapping"))
}
