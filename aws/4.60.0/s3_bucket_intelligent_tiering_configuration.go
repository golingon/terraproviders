// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3bucketintelligenttieringconfiguration "github.com/golingon/terraproviders/aws/4.60.0/s3bucketintelligenttieringconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketIntelligentTieringConfiguration(name string, args S3BucketIntelligentTieringConfigurationArgs) *S3BucketIntelligentTieringConfiguration {
	return &S3BucketIntelligentTieringConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketIntelligentTieringConfiguration)(nil)

type S3BucketIntelligentTieringConfiguration struct {
	Name  string
	Args  S3BucketIntelligentTieringConfigurationArgs
	state *s3BucketIntelligentTieringConfigurationState
}

func (sbitc *S3BucketIntelligentTieringConfiguration) Type() string {
	return "aws_s3_bucket_intelligent_tiering_configuration"
}

func (sbitc *S3BucketIntelligentTieringConfiguration) LocalName() string {
	return sbitc.Name
}

func (sbitc *S3BucketIntelligentTieringConfiguration) Configuration() interface{} {
	return sbitc.Args
}

func (sbitc *S3BucketIntelligentTieringConfiguration) Attributes() s3BucketIntelligentTieringConfigurationAttributes {
	return s3BucketIntelligentTieringConfigurationAttributes{ref: terra.ReferenceResource(sbitc)}
}

func (sbitc *S3BucketIntelligentTieringConfiguration) ImportState(av io.Reader) error {
	sbitc.state = &s3BucketIntelligentTieringConfigurationState{}
	if err := json.NewDecoder(av).Decode(sbitc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbitc.Type(), sbitc.LocalName(), err)
	}
	return nil
}

func (sbitc *S3BucketIntelligentTieringConfiguration) State() (*s3BucketIntelligentTieringConfigurationState, bool) {
	return sbitc.state, sbitc.state != nil
}

func (sbitc *S3BucketIntelligentTieringConfiguration) StateMust() *s3BucketIntelligentTieringConfigurationState {
	if sbitc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbitc.Type(), sbitc.LocalName()))
	}
	return sbitc.state
}

func (sbitc *S3BucketIntelligentTieringConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(sbitc)
}

type S3BucketIntelligentTieringConfigurationArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Filter: optional
	Filter *s3bucketintelligenttieringconfiguration.Filter `hcl:"filter,block"`
	// Tiering: min=1
	Tiering []s3bucketintelligenttieringconfiguration.Tiering `hcl:"tiering,block" validate:"min=1"`
	// DependsOn contains resources that S3BucketIntelligentTieringConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketIntelligentTieringConfigurationAttributes struct {
	ref terra.Reference
}

func (sbitc s3BucketIntelligentTieringConfigurationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbitc.ref.Append("bucket"))
}

func (sbitc s3BucketIntelligentTieringConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbitc.ref.Append("id"))
}

func (sbitc s3BucketIntelligentTieringConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sbitc.ref.Append("name"))
}

func (sbitc s3BucketIntelligentTieringConfigurationAttributes) Status() terra.StringValue {
	return terra.ReferenceString(sbitc.ref.Append("status"))
}

func (sbitc s3BucketIntelligentTieringConfigurationAttributes) Filter() terra.ListValue[s3bucketintelligenttieringconfiguration.FilterAttributes] {
	return terra.ReferenceList[s3bucketintelligenttieringconfiguration.FilterAttributes](sbitc.ref.Append("filter"))
}

func (sbitc s3BucketIntelligentTieringConfigurationAttributes) Tiering() terra.SetValue[s3bucketintelligenttieringconfiguration.TieringAttributes] {
	return terra.ReferenceSet[s3bucketintelligenttieringconfiguration.TieringAttributes](sbitc.ref.Append("tiering"))
}

type s3BucketIntelligentTieringConfigurationState struct {
	Bucket  string                                                 `json:"bucket"`
	Id      string                                                 `json:"id"`
	Name    string                                                 `json:"name"`
	Status  string                                                 `json:"status"`
	Filter  []s3bucketintelligenttieringconfiguration.FilterState  `json:"filter"`
	Tiering []s3bucketintelligenttieringconfiguration.TieringState `json:"tiering"`
}
