// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package networkfirewallloggingconfiguration

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type LoggingConfiguration struct {
	// LogDestinationConfig: min=1,max=2
	LogDestinationConfig []LogDestinationConfig `hcl:"log_destination_config,block" validate:"min=1,max=2"`
}

type LogDestinationConfig struct {
	// LogDestination: map of string, required
	LogDestination terra.MapValue[terra.StringValue] `hcl:"log_destination,attr" validate:"required"`
	// LogDestinationType: string, required
	LogDestinationType terra.StringValue `hcl:"log_destination_type,attr" validate:"required"`
	// LogType: string, required
	LogType terra.StringValue `hcl:"log_type,attr" validate:"required"`
}

type LoggingConfigurationAttributes struct {
	ref terra.Reference
}

func (lc LoggingConfigurationAttributes) InternalRef() terra.Reference {
	return lc.ref
}

func (lc LoggingConfigurationAttributes) InternalWithRef(ref terra.Reference) LoggingConfigurationAttributes {
	return LoggingConfigurationAttributes{ref: ref}
}

func (lc LoggingConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return lc.ref.InternalTokens()
}

func (lc LoggingConfigurationAttributes) LogDestinationConfig() terra.SetValue[LogDestinationConfigAttributes] {
	return terra.ReferenceSet[LogDestinationConfigAttributes](lc.ref.Append("log_destination_config"))
}

type LogDestinationConfigAttributes struct {
	ref terra.Reference
}

func (ldc LogDestinationConfigAttributes) InternalRef() terra.Reference {
	return ldc.ref
}

func (ldc LogDestinationConfigAttributes) InternalWithRef(ref terra.Reference) LogDestinationConfigAttributes {
	return LogDestinationConfigAttributes{ref: ref}
}

func (ldc LogDestinationConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ldc.ref.InternalTokens()
}

func (ldc LogDestinationConfigAttributes) LogDestination() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ldc.ref.Append("log_destination"))
}

func (ldc LogDestinationConfigAttributes) LogDestinationType() terra.StringValue {
	return terra.ReferenceString(ldc.ref.Append("log_destination_type"))
}

func (ldc LogDestinationConfigAttributes) LogType() terra.StringValue {
	return terra.ReferenceString(ldc.ref.Append("log_type"))
}

type LoggingConfigurationState struct {
	LogDestinationConfig []LogDestinationConfigState `json:"log_destination_config"`
}

type LogDestinationConfigState struct {
	LogDestination     map[string]string `json:"log_destination"`
	LogDestinationType string            `json:"log_destination_type"`
	LogType            string            `json:"log_type"`
}
