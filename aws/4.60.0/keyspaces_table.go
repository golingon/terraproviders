// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	keyspacestable "github.com/golingon/terraproviders/aws/4.60.0/keyspacestable"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKeyspacesTable(name string, args KeyspacesTableArgs) *KeyspacesTable {
	return &KeyspacesTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KeyspacesTable)(nil)

type KeyspacesTable struct {
	Name  string
	Args  KeyspacesTableArgs
	state *keyspacesTableState
}

func (kt *KeyspacesTable) Type() string {
	return "aws_keyspaces_table"
}

func (kt *KeyspacesTable) LocalName() string {
	return kt.Name
}

func (kt *KeyspacesTable) Configuration() interface{} {
	return kt.Args
}

func (kt *KeyspacesTable) Attributes() keyspacesTableAttributes {
	return keyspacesTableAttributes{ref: terra.ReferenceResource(kt)}
}

func (kt *KeyspacesTable) ImportState(av io.Reader) error {
	kt.state = &keyspacesTableState{}
	if err := json.NewDecoder(av).Decode(kt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kt.Type(), kt.LocalName(), err)
	}
	return nil
}

func (kt *KeyspacesTable) State() (*keyspacesTableState, bool) {
	return kt.state, kt.state != nil
}

func (kt *KeyspacesTable) StateMust() *keyspacesTableState {
	if kt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kt.Type(), kt.LocalName()))
	}
	return kt.state
}

func (kt *KeyspacesTable) DependOn() terra.Reference {
	return terra.ReferenceResource(kt)
}

type KeyspacesTableArgs struct {
	// DefaultTimeToLive: number, optional
	DefaultTimeToLive terra.NumberValue `hcl:"default_time_to_live,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyspaceName: string, required
	KeyspaceName terra.StringValue `hcl:"keyspace_name,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CapacitySpecification: optional
	CapacitySpecification *keyspacestable.CapacitySpecification `hcl:"capacity_specification,block"`
	// Comment: optional
	Comment *keyspacestable.Comment `hcl:"comment,block"`
	// EncryptionSpecification: optional
	EncryptionSpecification *keyspacestable.EncryptionSpecification `hcl:"encryption_specification,block"`
	// PointInTimeRecovery: optional
	PointInTimeRecovery *keyspacestable.PointInTimeRecovery `hcl:"point_in_time_recovery,block"`
	// SchemaDefinition: required
	SchemaDefinition *keyspacestable.SchemaDefinition `hcl:"schema_definition,block" validate:"required"`
	// Timeouts: optional
	Timeouts *keyspacestable.Timeouts `hcl:"timeouts,block"`
	// Ttl: optional
	Ttl *keyspacestable.Ttl `hcl:"ttl,block"`
	// DependsOn contains resources that KeyspacesTable depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type keyspacesTableAttributes struct {
	ref terra.Reference
}

func (kt keyspacesTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(kt.ref.Append("arn"))
}

func (kt keyspacesTableAttributes) DefaultTimeToLive() terra.NumberValue {
	return terra.ReferenceNumber(kt.ref.Append("default_time_to_live"))
}

func (kt keyspacesTableAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kt.ref.Append("id"))
}

func (kt keyspacesTableAttributes) KeyspaceName() terra.StringValue {
	return terra.ReferenceString(kt.ref.Append("keyspace_name"))
}

func (kt keyspacesTableAttributes) TableName() terra.StringValue {
	return terra.ReferenceString(kt.ref.Append("table_name"))
}

func (kt keyspacesTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](kt.ref.Append("tags"))
}

func (kt keyspacesTableAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](kt.ref.Append("tags_all"))
}

func (kt keyspacesTableAttributes) CapacitySpecification() terra.ListValue[keyspacestable.CapacitySpecificationAttributes] {
	return terra.ReferenceList[keyspacestable.CapacitySpecificationAttributes](kt.ref.Append("capacity_specification"))
}

func (kt keyspacesTableAttributes) Comment() terra.ListValue[keyspacestable.CommentAttributes] {
	return terra.ReferenceList[keyspacestable.CommentAttributes](kt.ref.Append("comment"))
}

func (kt keyspacesTableAttributes) EncryptionSpecification() terra.ListValue[keyspacestable.EncryptionSpecificationAttributes] {
	return terra.ReferenceList[keyspacestable.EncryptionSpecificationAttributes](kt.ref.Append("encryption_specification"))
}

func (kt keyspacesTableAttributes) PointInTimeRecovery() terra.ListValue[keyspacestable.PointInTimeRecoveryAttributes] {
	return terra.ReferenceList[keyspacestable.PointInTimeRecoveryAttributes](kt.ref.Append("point_in_time_recovery"))
}

func (kt keyspacesTableAttributes) SchemaDefinition() terra.ListValue[keyspacestable.SchemaDefinitionAttributes] {
	return terra.ReferenceList[keyspacestable.SchemaDefinitionAttributes](kt.ref.Append("schema_definition"))
}

func (kt keyspacesTableAttributes) Timeouts() keyspacestable.TimeoutsAttributes {
	return terra.ReferenceSingle[keyspacestable.TimeoutsAttributes](kt.ref.Append("timeouts"))
}

func (kt keyspacesTableAttributes) Ttl() terra.ListValue[keyspacestable.TtlAttributes] {
	return terra.ReferenceList[keyspacestable.TtlAttributes](kt.ref.Append("ttl"))
}

type keyspacesTableState struct {
	Arn                     string                                        `json:"arn"`
	DefaultTimeToLive       float64                                       `json:"default_time_to_live"`
	Id                      string                                        `json:"id"`
	KeyspaceName            string                                        `json:"keyspace_name"`
	TableName               string                                        `json:"table_name"`
	Tags                    map[string]string                             `json:"tags"`
	TagsAll                 map[string]string                             `json:"tags_all"`
	CapacitySpecification   []keyspacestable.CapacitySpecificationState   `json:"capacity_specification"`
	Comment                 []keyspacestable.CommentState                 `json:"comment"`
	EncryptionSpecification []keyspacestable.EncryptionSpecificationState `json:"encryption_specification"`
	PointInTimeRecovery     []keyspacestable.PointInTimeRecoveryState     `json:"point_in_time_recovery"`
	SchemaDefinition        []keyspacestable.SchemaDefinitionState        `json:"schema_definition"`
	Timeouts                *keyspacestable.TimeoutsState                 `json:"timeouts"`
	Ttl                     []keyspacestable.TtlState                     `json:"ttl"`
}
