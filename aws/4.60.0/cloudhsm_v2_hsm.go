// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudhsmv2hsm "github.com/golingon/terraproviders/aws/4.60.0/cloudhsmv2hsm"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudhsmV2Hsm(name string, args CloudhsmV2HsmArgs) *CloudhsmV2Hsm {
	return &CloudhsmV2Hsm{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudhsmV2Hsm)(nil)

type CloudhsmV2Hsm struct {
	Name  string
	Args  CloudhsmV2HsmArgs
	state *cloudhsmV2HsmState
}

func (cvh *CloudhsmV2Hsm) Type() string {
	return "aws_cloudhsm_v2_hsm"
}

func (cvh *CloudhsmV2Hsm) LocalName() string {
	return cvh.Name
}

func (cvh *CloudhsmV2Hsm) Configuration() interface{} {
	return cvh.Args
}

func (cvh *CloudhsmV2Hsm) Attributes() cloudhsmV2HsmAttributes {
	return cloudhsmV2HsmAttributes{ref: terra.ReferenceResource(cvh)}
}

func (cvh *CloudhsmV2Hsm) ImportState(av io.Reader) error {
	cvh.state = &cloudhsmV2HsmState{}
	if err := json.NewDecoder(av).Decode(cvh.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cvh.Type(), cvh.LocalName(), err)
	}
	return nil
}

func (cvh *CloudhsmV2Hsm) State() (*cloudhsmV2HsmState, bool) {
	return cvh.state, cvh.state != nil
}

func (cvh *CloudhsmV2Hsm) StateMust() *cloudhsmV2HsmState {
	if cvh.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cvh.Type(), cvh.LocalName()))
	}
	return cvh.state
}

func (cvh *CloudhsmV2Hsm) DependOn() terra.Reference {
	return terra.ReferenceResource(cvh)
}

type CloudhsmV2HsmArgs struct {
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Timeouts: optional
	Timeouts *cloudhsmv2hsm.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudhsmV2Hsm depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudhsmV2HsmAttributes struct {
	ref terra.Reference
}

func (cvh cloudhsmV2HsmAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceString(cvh.ref.Append("availability_zone"))
}

func (cvh cloudhsmV2HsmAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceString(cvh.ref.Append("cluster_id"))
}

func (cvh cloudhsmV2HsmAttributes) HsmEniId() terra.StringValue {
	return terra.ReferenceString(cvh.ref.Append("hsm_eni_id"))
}

func (cvh cloudhsmV2HsmAttributes) HsmId() terra.StringValue {
	return terra.ReferenceString(cvh.ref.Append("hsm_id"))
}

func (cvh cloudhsmV2HsmAttributes) HsmState() terra.StringValue {
	return terra.ReferenceString(cvh.ref.Append("hsm_state"))
}

func (cvh cloudhsmV2HsmAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cvh.ref.Append("id"))
}

func (cvh cloudhsmV2HsmAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceString(cvh.ref.Append("ip_address"))
}

func (cvh cloudhsmV2HsmAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(cvh.ref.Append("subnet_id"))
}

func (cvh cloudhsmV2HsmAttributes) Timeouts() cloudhsmv2hsm.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudhsmv2hsm.TimeoutsAttributes](cvh.ref.Append("timeouts"))
}

type cloudhsmV2HsmState struct {
	AvailabilityZone string                       `json:"availability_zone"`
	ClusterId        string                       `json:"cluster_id"`
	HsmEniId         string                       `json:"hsm_eni_id"`
	HsmId            string                       `json:"hsm_id"`
	HsmState         string                       `json:"hsm_state"`
	Id               string                       `json:"id"`
	IpAddress        string                       `json:"ip_address"`
	SubnetId         string                       `json:"subnet_id"`
	Timeouts         *cloudhsmv2hsm.TimeoutsState `json:"timeouts"`
}
