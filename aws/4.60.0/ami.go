// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ami "github.com/golingon/terraproviders/aws/4.60.0/ami"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAmi(name string, args AmiArgs) *Ami {
	return &Ami{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ami)(nil)

type Ami struct {
	Name  string
	Args  AmiArgs
	state *amiState
}

func (a *Ami) Type() string {
	return "aws_ami"
}

func (a *Ami) LocalName() string {
	return a.Name
}

func (a *Ami) Configuration() interface{} {
	return a.Args
}

func (a *Ami) Attributes() amiAttributes {
	return amiAttributes{ref: terra.ReferenceResource(a)}
}

func (a *Ami) ImportState(av io.Reader) error {
	a.state = &amiState{}
	if err := json.NewDecoder(av).Decode(a.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", a.Type(), a.LocalName(), err)
	}
	return nil
}

func (a *Ami) State() (*amiState, bool) {
	return a.state, a.state != nil
}

func (a *Ami) StateMust() *amiState {
	if a.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", a.Type(), a.LocalName()))
	}
	return a.state
}

func (a *Ami) DependOn() terra.Reference {
	return terra.ReferenceResource(a)
}

type AmiArgs struct {
	// Architecture: string, optional
	Architecture terra.StringValue `hcl:"architecture,attr"`
	// BootMode: string, optional
	BootMode terra.StringValue `hcl:"boot_mode,attr"`
	// DeprecationTime: string, optional
	DeprecationTime terra.StringValue `hcl:"deprecation_time,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnaSupport: bool, optional
	EnaSupport terra.BoolValue `hcl:"ena_support,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageLocation: string, optional
	ImageLocation terra.StringValue `hcl:"image_location,attr"`
	// ImdsSupport: string, optional
	ImdsSupport terra.StringValue `hcl:"imds_support,attr"`
	// KernelId: string, optional
	KernelId terra.StringValue `hcl:"kernel_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RamdiskId: string, optional
	RamdiskId terra.StringValue `hcl:"ramdisk_id,attr"`
	// RootDeviceName: string, optional
	RootDeviceName terra.StringValue `hcl:"root_device_name,attr"`
	// SriovNetSupport: string, optional
	SriovNetSupport terra.StringValue `hcl:"sriov_net_support,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TpmSupport: string, optional
	TpmSupport terra.StringValue `hcl:"tpm_support,attr"`
	// VirtualizationType: string, optional
	VirtualizationType terra.StringValue `hcl:"virtualization_type,attr"`
	// EbsBlockDevice: min=0
	EbsBlockDevice []ami.EbsBlockDevice `hcl:"ebs_block_device,block" validate:"min=0"`
	// EphemeralBlockDevice: min=0
	EphemeralBlockDevice []ami.EphemeralBlockDevice `hcl:"ephemeral_block_device,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *ami.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Ami depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type amiAttributes struct {
	ref terra.Reference
}

func (a amiAttributes) Architecture() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("architecture"))
}

func (a amiAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("arn"))
}

func (a amiAttributes) BootMode() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("boot_mode"))
}

func (a amiAttributes) DeprecationTime() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("deprecation_time"))
}

func (a amiAttributes) Description() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("description"))
}

func (a amiAttributes) EnaSupport() terra.BoolValue {
	return terra.ReferenceBool(a.ref.Append("ena_support"))
}

func (a amiAttributes) Hypervisor() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("hypervisor"))
}

func (a amiAttributes) Id() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("id"))
}

func (a amiAttributes) ImageLocation() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("image_location"))
}

func (a amiAttributes) ImageOwnerAlias() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("image_owner_alias"))
}

func (a amiAttributes) ImageType() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("image_type"))
}

func (a amiAttributes) ImdsSupport() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("imds_support"))
}

func (a amiAttributes) KernelId() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("kernel_id"))
}

func (a amiAttributes) ManageEbsSnapshots() terra.BoolValue {
	return terra.ReferenceBool(a.ref.Append("manage_ebs_snapshots"))
}

func (a amiAttributes) Name() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("name"))
}

func (a amiAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("owner_id"))
}

func (a amiAttributes) Platform() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("platform"))
}

func (a amiAttributes) PlatformDetails() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("platform_details"))
}

func (a amiAttributes) Public() terra.BoolValue {
	return terra.ReferenceBool(a.ref.Append("public"))
}

func (a amiAttributes) RamdiskId() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("ramdisk_id"))
}

func (a amiAttributes) RootDeviceName() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("root_device_name"))
}

func (a amiAttributes) RootSnapshotId() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("root_snapshot_id"))
}

func (a amiAttributes) SriovNetSupport() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("sriov_net_support"))
}

func (a amiAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](a.ref.Append("tags"))
}

func (a amiAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](a.ref.Append("tags_all"))
}

func (a amiAttributes) TpmSupport() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("tpm_support"))
}

func (a amiAttributes) UsageOperation() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("usage_operation"))
}

func (a amiAttributes) VirtualizationType() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("virtualization_type"))
}

func (a amiAttributes) EbsBlockDevice() terra.SetValue[ami.EbsBlockDeviceAttributes] {
	return terra.ReferenceSet[ami.EbsBlockDeviceAttributes](a.ref.Append("ebs_block_device"))
}

func (a amiAttributes) EphemeralBlockDevice() terra.SetValue[ami.EphemeralBlockDeviceAttributes] {
	return terra.ReferenceSet[ami.EphemeralBlockDeviceAttributes](a.ref.Append("ephemeral_block_device"))
}

func (a amiAttributes) Timeouts() ami.TimeoutsAttributes {
	return terra.ReferenceSingle[ami.TimeoutsAttributes](a.ref.Append("timeouts"))
}

type amiState struct {
	Architecture         string                          `json:"architecture"`
	Arn                  string                          `json:"arn"`
	BootMode             string                          `json:"boot_mode"`
	DeprecationTime      string                          `json:"deprecation_time"`
	Description          string                          `json:"description"`
	EnaSupport           bool                            `json:"ena_support"`
	Hypervisor           string                          `json:"hypervisor"`
	Id                   string                          `json:"id"`
	ImageLocation        string                          `json:"image_location"`
	ImageOwnerAlias      string                          `json:"image_owner_alias"`
	ImageType            string                          `json:"image_type"`
	ImdsSupport          string                          `json:"imds_support"`
	KernelId             string                          `json:"kernel_id"`
	ManageEbsSnapshots   bool                            `json:"manage_ebs_snapshots"`
	Name                 string                          `json:"name"`
	OwnerId              string                          `json:"owner_id"`
	Platform             string                          `json:"platform"`
	PlatformDetails      string                          `json:"platform_details"`
	Public               bool                            `json:"public"`
	RamdiskId            string                          `json:"ramdisk_id"`
	RootDeviceName       string                          `json:"root_device_name"`
	RootSnapshotId       string                          `json:"root_snapshot_id"`
	SriovNetSupport      string                          `json:"sriov_net_support"`
	Tags                 map[string]string               `json:"tags"`
	TagsAll              map[string]string               `json:"tags_all"`
	TpmSupport           string                          `json:"tpm_support"`
	UsageOperation       string                          `json:"usage_operation"`
	VirtualizationType   string                          `json:"virtualization_type"`
	EbsBlockDevice       []ami.EbsBlockDeviceState       `json:"ebs_block_device"`
	EphemeralBlockDevice []ami.EphemeralBlockDeviceState `json:"ephemeral_block_device"`
	Timeouts             *ami.TimeoutsState              `json:"timeouts"`
}
