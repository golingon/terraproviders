// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketRequestPaymentConfiguration(name string, args S3BucketRequestPaymentConfigurationArgs) *S3BucketRequestPaymentConfiguration {
	return &S3BucketRequestPaymentConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketRequestPaymentConfiguration)(nil)

type S3BucketRequestPaymentConfiguration struct {
	Name  string
	Args  S3BucketRequestPaymentConfigurationArgs
	state *s3BucketRequestPaymentConfigurationState
}

func (sbrpc *S3BucketRequestPaymentConfiguration) Type() string {
	return "aws_s3_bucket_request_payment_configuration"
}

func (sbrpc *S3BucketRequestPaymentConfiguration) LocalName() string {
	return sbrpc.Name
}

func (sbrpc *S3BucketRequestPaymentConfiguration) Configuration() interface{} {
	return sbrpc.Args
}

func (sbrpc *S3BucketRequestPaymentConfiguration) Attributes() s3BucketRequestPaymentConfigurationAttributes {
	return s3BucketRequestPaymentConfigurationAttributes{ref: terra.ReferenceResource(sbrpc)}
}

func (sbrpc *S3BucketRequestPaymentConfiguration) ImportState(av io.Reader) error {
	sbrpc.state = &s3BucketRequestPaymentConfigurationState{}
	if err := json.NewDecoder(av).Decode(sbrpc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbrpc.Type(), sbrpc.LocalName(), err)
	}
	return nil
}

func (sbrpc *S3BucketRequestPaymentConfiguration) State() (*s3BucketRequestPaymentConfigurationState, bool) {
	return sbrpc.state, sbrpc.state != nil
}

func (sbrpc *S3BucketRequestPaymentConfiguration) StateMust() *s3BucketRequestPaymentConfigurationState {
	if sbrpc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbrpc.Type(), sbrpc.LocalName()))
	}
	return sbrpc.state
}

func (sbrpc *S3BucketRequestPaymentConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(sbrpc)
}

type S3BucketRequestPaymentConfigurationArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Payer: string, required
	Payer terra.StringValue `hcl:"payer,attr" validate:"required"`
	// DependsOn contains resources that S3BucketRequestPaymentConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketRequestPaymentConfigurationAttributes struct {
	ref terra.Reference
}

func (sbrpc s3BucketRequestPaymentConfigurationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbrpc.ref.Append("bucket"))
}

func (sbrpc s3BucketRequestPaymentConfigurationAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceString(sbrpc.ref.Append("expected_bucket_owner"))
}

func (sbrpc s3BucketRequestPaymentConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbrpc.ref.Append("id"))
}

func (sbrpc s3BucketRequestPaymentConfigurationAttributes) Payer() terra.StringValue {
	return terra.ReferenceString(sbrpc.ref.Append("payer"))
}

type s3BucketRequestPaymentConfigurationState struct {
	Bucket              string `json:"bucket"`
	ExpectedBucketOwner string `json:"expected_bucket_owner"`
	Id                  string `json:"id"`
	Payer               string `json:"payer"`
}
