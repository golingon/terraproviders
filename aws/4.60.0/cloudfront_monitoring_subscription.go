// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudfrontmonitoringsubscription "github.com/golingon/terraproviders/aws/4.60.0/cloudfrontmonitoringsubscription"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudfrontMonitoringSubscription(name string, args CloudfrontMonitoringSubscriptionArgs) *CloudfrontMonitoringSubscription {
	return &CloudfrontMonitoringSubscription{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudfrontMonitoringSubscription)(nil)

type CloudfrontMonitoringSubscription struct {
	Name  string
	Args  CloudfrontMonitoringSubscriptionArgs
	state *cloudfrontMonitoringSubscriptionState
}

func (cms *CloudfrontMonitoringSubscription) Type() string {
	return "aws_cloudfront_monitoring_subscription"
}

func (cms *CloudfrontMonitoringSubscription) LocalName() string {
	return cms.Name
}

func (cms *CloudfrontMonitoringSubscription) Configuration() interface{} {
	return cms.Args
}

func (cms *CloudfrontMonitoringSubscription) Attributes() cloudfrontMonitoringSubscriptionAttributes {
	return cloudfrontMonitoringSubscriptionAttributes{ref: terra.ReferenceResource(cms)}
}

func (cms *CloudfrontMonitoringSubscription) ImportState(av io.Reader) error {
	cms.state = &cloudfrontMonitoringSubscriptionState{}
	if err := json.NewDecoder(av).Decode(cms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cms.Type(), cms.LocalName(), err)
	}
	return nil
}

func (cms *CloudfrontMonitoringSubscription) State() (*cloudfrontMonitoringSubscriptionState, bool) {
	return cms.state, cms.state != nil
}

func (cms *CloudfrontMonitoringSubscription) StateMust() *cloudfrontMonitoringSubscriptionState {
	if cms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cms.Type(), cms.LocalName()))
	}
	return cms.state
}

func (cms *CloudfrontMonitoringSubscription) DependOn() terra.Reference {
	return terra.ReferenceResource(cms)
}

type CloudfrontMonitoringSubscriptionArgs struct {
	// DistributionId: string, required
	DistributionId terra.StringValue `hcl:"distribution_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MonitoringSubscription: required
	MonitoringSubscription *cloudfrontmonitoringsubscription.MonitoringSubscription `hcl:"monitoring_subscription,block" validate:"required"`
	// DependsOn contains resources that CloudfrontMonitoringSubscription depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudfrontMonitoringSubscriptionAttributes struct {
	ref terra.Reference
}

func (cms cloudfrontMonitoringSubscriptionAttributes) DistributionId() terra.StringValue {
	return terra.ReferenceString(cms.ref.Append("distribution_id"))
}

func (cms cloudfrontMonitoringSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cms.ref.Append("id"))
}

func (cms cloudfrontMonitoringSubscriptionAttributes) MonitoringSubscription() terra.ListValue[cloudfrontmonitoringsubscription.MonitoringSubscriptionAttributes] {
	return terra.ReferenceList[cloudfrontmonitoringsubscription.MonitoringSubscriptionAttributes](cms.ref.Append("monitoring_subscription"))
}

type cloudfrontMonitoringSubscriptionState struct {
	DistributionId         string                                                         `json:"distribution_id"`
	Id                     string                                                         `json:"id"`
	MonitoringSubscription []cloudfrontmonitoringsubscription.MonitoringSubscriptionState `json:"monitoring_subscription"`
}
