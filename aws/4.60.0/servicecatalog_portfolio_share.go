// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	servicecatalogportfolioshare "github.com/golingon/terraproviders/aws/4.60.0/servicecatalogportfolioshare"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicecatalogPortfolioShare(name string, args ServicecatalogPortfolioShareArgs) *ServicecatalogPortfolioShare {
	return &ServicecatalogPortfolioShare{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicecatalogPortfolioShare)(nil)

type ServicecatalogPortfolioShare struct {
	Name  string
	Args  ServicecatalogPortfolioShareArgs
	state *servicecatalogPortfolioShareState
}

func (sps *ServicecatalogPortfolioShare) Type() string {
	return "aws_servicecatalog_portfolio_share"
}

func (sps *ServicecatalogPortfolioShare) LocalName() string {
	return sps.Name
}

func (sps *ServicecatalogPortfolioShare) Configuration() interface{} {
	return sps.Args
}

func (sps *ServicecatalogPortfolioShare) Attributes() servicecatalogPortfolioShareAttributes {
	return servicecatalogPortfolioShareAttributes{ref: terra.ReferenceResource(sps)}
}

func (sps *ServicecatalogPortfolioShare) ImportState(av io.Reader) error {
	sps.state = &servicecatalogPortfolioShareState{}
	if err := json.NewDecoder(av).Decode(sps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sps.Type(), sps.LocalName(), err)
	}
	return nil
}

func (sps *ServicecatalogPortfolioShare) State() (*servicecatalogPortfolioShareState, bool) {
	return sps.state, sps.state != nil
}

func (sps *ServicecatalogPortfolioShare) StateMust() *servicecatalogPortfolioShareState {
	if sps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sps.Type(), sps.LocalName()))
	}
	return sps.state
}

func (sps *ServicecatalogPortfolioShare) DependOn() terra.Reference {
	return terra.ReferenceResource(sps)
}

type ServicecatalogPortfolioShareArgs struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PortfolioId: string, required
	PortfolioId terra.StringValue `hcl:"portfolio_id,attr" validate:"required"`
	// PrincipalId: string, required
	PrincipalId terra.StringValue `hcl:"principal_id,attr" validate:"required"`
	// SharePrincipals: bool, optional
	SharePrincipals terra.BoolValue `hcl:"share_principals,attr"`
	// ShareTagOptions: bool, optional
	ShareTagOptions terra.BoolValue `hcl:"share_tag_options,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// WaitForAcceptance: bool, optional
	WaitForAcceptance terra.BoolValue `hcl:"wait_for_acceptance,attr"`
	// Timeouts: optional
	Timeouts *servicecatalogportfolioshare.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServicecatalogPortfolioShare depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicecatalogPortfolioShareAttributes struct {
	ref terra.Reference
}

func (sps servicecatalogPortfolioShareAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceString(sps.ref.Append("accept_language"))
}

func (sps servicecatalogPortfolioShareAttributes) Accepted() terra.BoolValue {
	return terra.ReferenceBool(sps.ref.Append("accepted"))
}

func (sps servicecatalogPortfolioShareAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sps.ref.Append("id"))
}

func (sps servicecatalogPortfolioShareAttributes) PortfolioId() terra.StringValue {
	return terra.ReferenceString(sps.ref.Append("portfolio_id"))
}

func (sps servicecatalogPortfolioShareAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceString(sps.ref.Append("principal_id"))
}

func (sps servicecatalogPortfolioShareAttributes) SharePrincipals() terra.BoolValue {
	return terra.ReferenceBool(sps.ref.Append("share_principals"))
}

func (sps servicecatalogPortfolioShareAttributes) ShareTagOptions() terra.BoolValue {
	return terra.ReferenceBool(sps.ref.Append("share_tag_options"))
}

func (sps servicecatalogPortfolioShareAttributes) Type() terra.StringValue {
	return terra.ReferenceString(sps.ref.Append("type"))
}

func (sps servicecatalogPortfolioShareAttributes) WaitForAcceptance() terra.BoolValue {
	return terra.ReferenceBool(sps.ref.Append("wait_for_acceptance"))
}

func (sps servicecatalogPortfolioShareAttributes) Timeouts() servicecatalogportfolioshare.TimeoutsAttributes {
	return terra.ReferenceSingle[servicecatalogportfolioshare.TimeoutsAttributes](sps.ref.Append("timeouts"))
}

type servicecatalogPortfolioShareState struct {
	AcceptLanguage    string                                      `json:"accept_language"`
	Accepted          bool                                        `json:"accepted"`
	Id                string                                      `json:"id"`
	PortfolioId       string                                      `json:"portfolio_id"`
	PrincipalId       string                                      `json:"principal_id"`
	SharePrincipals   bool                                        `json:"share_principals"`
	ShareTagOptions   bool                                        `json:"share_tag_options"`
	Type              string                                      `json:"type"`
	WaitForAcceptance bool                                        `json:"wait_for_acceptance"`
	Timeouts          *servicecatalogportfolioshare.TimeoutsState `json:"timeouts"`
}
