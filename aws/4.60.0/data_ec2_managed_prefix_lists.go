// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataec2managedprefixlists "github.com/golingon/terraproviders/aws/4.60.0/dataec2managedprefixlists"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataEc2ManagedPrefixLists(name string, args DataEc2ManagedPrefixListsArgs) *DataEc2ManagedPrefixLists {
	return &DataEc2ManagedPrefixLists{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataEc2ManagedPrefixLists)(nil)

type DataEc2ManagedPrefixLists struct {
	Name string
	Args DataEc2ManagedPrefixListsArgs
}

func (empl *DataEc2ManagedPrefixLists) DataSource() string {
	return "aws_ec2_managed_prefix_lists"
}

func (empl *DataEc2ManagedPrefixLists) LocalName() string {
	return empl.Name
}

func (empl *DataEc2ManagedPrefixLists) Configuration() interface{} {
	return empl.Args
}

func (empl *DataEc2ManagedPrefixLists) Attributes() dataEc2ManagedPrefixListsAttributes {
	return dataEc2ManagedPrefixListsAttributes{ref: terra.ReferenceDataResource(empl)}
}

type DataEc2ManagedPrefixListsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filter: min=0
	Filter []dataec2managedprefixlists.Filter `hcl:"filter,block" validate:"min=0"`
}
type dataEc2ManagedPrefixListsAttributes struct {
	ref terra.Reference
}

func (empl dataEc2ManagedPrefixListsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(empl.ref.Append("id"))
}

func (empl dataEc2ManagedPrefixListsAttributes) Ids() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](empl.ref.Append("ids"))
}

func (empl dataEc2ManagedPrefixListsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](empl.ref.Append("tags"))
}

func (empl dataEc2ManagedPrefixListsAttributes) Filter() terra.SetValue[dataec2managedprefixlists.FilterAttributes] {
	return terra.ReferenceSet[dataec2managedprefixlists.FilterAttributes](empl.ref.Append("filter"))
}
