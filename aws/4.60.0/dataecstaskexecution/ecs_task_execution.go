// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataecstaskexecution

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CapacityProviderStrategy struct {
	// Base: number, optional
	Base terra.NumberValue `hcl:"base,attr"`
	// CapacityProvider: string, required
	CapacityProvider terra.StringValue `hcl:"capacity_provider,attr" validate:"required"`
	// Weight: number, optional
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type NetworkConfiguration struct {
	// AssignPublicIp: bool, optional
	AssignPublicIp terra.BoolValue `hcl:"assign_public_ip,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Subnets: set of string, required
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type Overrides struct {
	// Cpu: string, optional
	Cpu terra.StringValue `hcl:"cpu,attr"`
	// ExecutionRoleArn: string, optional
	ExecutionRoleArn terra.StringValue `hcl:"execution_role_arn,attr"`
	// Memory: string, optional
	Memory terra.StringValue `hcl:"memory,attr"`
	// TaskRoleArn: string, optional
	TaskRoleArn terra.StringValue `hcl:"task_role_arn,attr"`
	// ContainerOverrides: min=0
	ContainerOverrides []ContainerOverrides `hcl:"container_overrides,block" validate:"min=0"`
	// InferenceAcceleratorOverrides: min=0
	InferenceAcceleratorOverrides []InferenceAcceleratorOverrides `hcl:"inference_accelerator_overrides,block" validate:"min=0"`
}

type ContainerOverrides struct {
	// Command: list of string, optional
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// Cpu: number, optional
	Cpu terra.NumberValue `hcl:"cpu,attr"`
	// Memory: number, optional
	Memory terra.NumberValue `hcl:"memory,attr"`
	// MemoryReservation: number, optional
	MemoryReservation terra.NumberValue `hcl:"memory_reservation,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Environment: min=0
	Environment []Environment `hcl:"environment,block" validate:"min=0"`
	// ResourceRequirements: min=0
	ResourceRequirements []ResourceRequirements `hcl:"resource_requirements,block" validate:"min=0"`
}

type Environment struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ResourceRequirements struct {
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type InferenceAcceleratorOverrides struct {
	// DeviceName: string, optional
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// DeviceType: string, optional
	DeviceType terra.StringValue `hcl:"device_type,attr"`
}

type PlacementConstraints struct {
	// Expression: string, optional
	Expression terra.StringValue `hcl:"expression,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type PlacementStrategy struct {
	// Field: string, optional
	Field terra.StringValue `hcl:"field,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type CapacityProviderStrategyAttributes struct {
	ref terra.Reference
}

func (cps CapacityProviderStrategyAttributes) InternalRef() terra.Reference {
	return cps.ref
}

func (cps CapacityProviderStrategyAttributes) InternalWithRef(ref terra.Reference) CapacityProviderStrategyAttributes {
	return CapacityProviderStrategyAttributes{ref: ref}
}

func (cps CapacityProviderStrategyAttributes) InternalTokens() hclwrite.Tokens {
	return cps.ref.InternalTokens()
}

func (cps CapacityProviderStrategyAttributes) Base() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("base"))
}

func (cps CapacityProviderStrategyAttributes) CapacityProvider() terra.StringValue {
	return terra.ReferenceAsString(cps.ref.Append("capacity_provider"))
}

func (cps CapacityProviderStrategyAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("weight"))
}

type NetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigurationAttributes) InternalRef() terra.Reference {
	return nc.ref
}

func (nc NetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) NetworkConfigurationAttributes {
	return NetworkConfigurationAttributes{ref: ref}
}

func (nc NetworkConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigurationAttributes) AssignPublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("assign_public_ip"))
}

func (nc NetworkConfigurationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("security_groups"))
}

func (nc NetworkConfigurationAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("subnets"))
}

type OverridesAttributes struct {
	ref terra.Reference
}

func (o OverridesAttributes) InternalRef() terra.Reference {
	return o.ref
}

func (o OverridesAttributes) InternalWithRef(ref terra.Reference) OverridesAttributes {
	return OverridesAttributes{ref: ref}
}

func (o OverridesAttributes) InternalTokens() hclwrite.Tokens {
	return o.ref.InternalTokens()
}

func (o OverridesAttributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("cpu"))
}

func (o OverridesAttributes) ExecutionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("execution_role_arn"))
}

func (o OverridesAttributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("memory"))
}

func (o OverridesAttributes) TaskRoleArn() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("task_role_arn"))
}

func (o OverridesAttributes) ContainerOverrides() terra.ListValue[ContainerOverridesAttributes] {
	return terra.ReferenceAsList[ContainerOverridesAttributes](o.ref.Append("container_overrides"))
}

func (o OverridesAttributes) InferenceAcceleratorOverrides() terra.SetValue[InferenceAcceleratorOverridesAttributes] {
	return terra.ReferenceAsSet[InferenceAcceleratorOverridesAttributes](o.ref.Append("inference_accelerator_overrides"))
}

type ContainerOverridesAttributes struct {
	ref terra.Reference
}

func (co ContainerOverridesAttributes) InternalRef() terra.Reference {
	return co.ref
}

func (co ContainerOverridesAttributes) InternalWithRef(ref terra.Reference) ContainerOverridesAttributes {
	return ContainerOverridesAttributes{ref: ref}
}

func (co ContainerOverridesAttributes) InternalTokens() hclwrite.Tokens {
	return co.ref.InternalTokens()
}

func (co ContainerOverridesAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](co.ref.Append("command"))
}

func (co ContainerOverridesAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("cpu"))
}

func (co ContainerOverridesAttributes) Memory() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("memory"))
}

func (co ContainerOverridesAttributes) MemoryReservation() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("memory_reservation"))
}

func (co ContainerOverridesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("name"))
}

func (co ContainerOverridesAttributes) Environment() terra.SetValue[EnvironmentAttributes] {
	return terra.ReferenceAsSet[EnvironmentAttributes](co.ref.Append("environment"))
}

func (co ContainerOverridesAttributes) ResourceRequirements() terra.SetValue[ResourceRequirementsAttributes] {
	return terra.ReferenceAsSet[ResourceRequirementsAttributes](co.ref.Append("resource_requirements"))
}

type EnvironmentAttributes struct {
	ref terra.Reference
}

func (e EnvironmentAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e EnvironmentAttributes) InternalWithRef(ref terra.Reference) EnvironmentAttributes {
	return EnvironmentAttributes{ref: ref}
}

func (e EnvironmentAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e EnvironmentAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("key"))
}

func (e EnvironmentAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type ResourceRequirementsAttributes struct {
	ref terra.Reference
}

func (rr ResourceRequirementsAttributes) InternalRef() terra.Reference {
	return rr.ref
}

func (rr ResourceRequirementsAttributes) InternalWithRef(ref terra.Reference) ResourceRequirementsAttributes {
	return ResourceRequirementsAttributes{ref: ref}
}

func (rr ResourceRequirementsAttributes) InternalTokens() hclwrite.Tokens {
	return rr.ref.InternalTokens()
}

func (rr ResourceRequirementsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("type"))
}

func (rr ResourceRequirementsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("value"))
}

type InferenceAcceleratorOverridesAttributes struct {
	ref terra.Reference
}

func (iao InferenceAcceleratorOverridesAttributes) InternalRef() terra.Reference {
	return iao.ref
}

func (iao InferenceAcceleratorOverridesAttributes) InternalWithRef(ref terra.Reference) InferenceAcceleratorOverridesAttributes {
	return InferenceAcceleratorOverridesAttributes{ref: ref}
}

func (iao InferenceAcceleratorOverridesAttributes) InternalTokens() hclwrite.Tokens {
	return iao.ref.InternalTokens()
}

func (iao InferenceAcceleratorOverridesAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(iao.ref.Append("device_name"))
}

func (iao InferenceAcceleratorOverridesAttributes) DeviceType() terra.StringValue {
	return terra.ReferenceAsString(iao.ref.Append("device_type"))
}

type PlacementConstraintsAttributes struct {
	ref terra.Reference
}

func (pc PlacementConstraintsAttributes) InternalRef() terra.Reference {
	return pc.ref
}

func (pc PlacementConstraintsAttributes) InternalWithRef(ref terra.Reference) PlacementConstraintsAttributes {
	return PlacementConstraintsAttributes{ref: ref}
}

func (pc PlacementConstraintsAttributes) InternalTokens() hclwrite.Tokens {
	return pc.ref.InternalTokens()
}

func (pc PlacementConstraintsAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("expression"))
}

func (pc PlacementConstraintsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("type"))
}

type PlacementStrategyAttributes struct {
	ref terra.Reference
}

func (ps PlacementStrategyAttributes) InternalRef() terra.Reference {
	return ps.ref
}

func (ps PlacementStrategyAttributes) InternalWithRef(ref terra.Reference) PlacementStrategyAttributes {
	return PlacementStrategyAttributes{ref: ref}
}

func (ps PlacementStrategyAttributes) InternalTokens() hclwrite.Tokens {
	return ps.ref.InternalTokens()
}

func (ps PlacementStrategyAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("field"))
}

func (ps PlacementStrategyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("type"))
}

type CapacityProviderStrategyState struct {
	Base             float64 `json:"base"`
	CapacityProvider string  `json:"capacity_provider"`
	Weight           float64 `json:"weight"`
}

type NetworkConfigurationState struct {
	AssignPublicIp bool     `json:"assign_public_ip"`
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type OverridesState struct {
	Cpu                           string                               `json:"cpu"`
	ExecutionRoleArn              string                               `json:"execution_role_arn"`
	Memory                        string                               `json:"memory"`
	TaskRoleArn                   string                               `json:"task_role_arn"`
	ContainerOverrides            []ContainerOverridesState            `json:"container_overrides"`
	InferenceAcceleratorOverrides []InferenceAcceleratorOverridesState `json:"inference_accelerator_overrides"`
}

type ContainerOverridesState struct {
	Command              []string                    `json:"command"`
	Cpu                  float64                     `json:"cpu"`
	Memory               float64                     `json:"memory"`
	MemoryReservation    float64                     `json:"memory_reservation"`
	Name                 string                      `json:"name"`
	Environment          []EnvironmentState          `json:"environment"`
	ResourceRequirements []ResourceRequirementsState `json:"resource_requirements"`
}

type EnvironmentState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type ResourceRequirementsState struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type InferenceAcceleratorOverridesState struct {
	DeviceName string `json:"device_name"`
	DeviceType string `json:"device_type"`
}

type PlacementConstraintsState struct {
	Expression string `json:"expression"`
	Type       string `json:"type"`
}

type PlacementStrategyState struct {
	Field string `json:"field"`
	Type  string `json:"type"`
}
