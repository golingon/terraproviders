// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dxpublicvirtualinterface "github.com/golingon/terraproviders/aws/4.60.0/dxpublicvirtualinterface"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDxPublicVirtualInterface(name string, args DxPublicVirtualInterfaceArgs) *DxPublicVirtualInterface {
	return &DxPublicVirtualInterface{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DxPublicVirtualInterface)(nil)

type DxPublicVirtualInterface struct {
	Name  string
	Args  DxPublicVirtualInterfaceArgs
	state *dxPublicVirtualInterfaceState
}

func (dpvi *DxPublicVirtualInterface) Type() string {
	return "aws_dx_public_virtual_interface"
}

func (dpvi *DxPublicVirtualInterface) LocalName() string {
	return dpvi.Name
}

func (dpvi *DxPublicVirtualInterface) Configuration() interface{} {
	return dpvi.Args
}

func (dpvi *DxPublicVirtualInterface) Attributes() dxPublicVirtualInterfaceAttributes {
	return dxPublicVirtualInterfaceAttributes{ref: terra.ReferenceResource(dpvi)}
}

func (dpvi *DxPublicVirtualInterface) ImportState(av io.Reader) error {
	dpvi.state = &dxPublicVirtualInterfaceState{}
	if err := json.NewDecoder(av).Decode(dpvi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dpvi.Type(), dpvi.LocalName(), err)
	}
	return nil
}

func (dpvi *DxPublicVirtualInterface) State() (*dxPublicVirtualInterfaceState, bool) {
	return dpvi.state, dpvi.state != nil
}

func (dpvi *DxPublicVirtualInterface) StateMust() *dxPublicVirtualInterfaceState {
	if dpvi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dpvi.Type(), dpvi.LocalName()))
	}
	return dpvi.state
}

func (dpvi *DxPublicVirtualInterface) DependOn() terra.Reference {
	return terra.ReferenceResource(dpvi)
}

type DxPublicVirtualInterfaceArgs struct {
	// AddressFamily: string, required
	AddressFamily terra.StringValue `hcl:"address_family,attr" validate:"required"`
	// AmazonAddress: string, optional
	AmazonAddress terra.StringValue `hcl:"amazon_address,attr"`
	// BgpAsn: number, required
	BgpAsn terra.NumberValue `hcl:"bgp_asn,attr" validate:"required"`
	// BgpAuthKey: string, optional
	BgpAuthKey terra.StringValue `hcl:"bgp_auth_key,attr"`
	// ConnectionId: string, required
	ConnectionId terra.StringValue `hcl:"connection_id,attr" validate:"required"`
	// CustomerAddress: string, optional
	CustomerAddress terra.StringValue `hcl:"customer_address,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RouteFilterPrefixes: set of string, required
	RouteFilterPrefixes terra.SetValue[terra.StringValue] `hcl:"route_filter_prefixes,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Vlan: number, required
	Vlan terra.NumberValue `hcl:"vlan,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *dxpublicvirtualinterface.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DxPublicVirtualInterface depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dxPublicVirtualInterfaceAttributes struct {
	ref terra.Reference
}

func (dpvi dxPublicVirtualInterfaceAttributes) AddressFamily() terra.StringValue {
	return terra.ReferenceString(dpvi.ref.Append("address_family"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) AmazonAddress() terra.StringValue {
	return terra.ReferenceString(dpvi.ref.Append("amazon_address"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) AmazonSideAsn() terra.StringValue {
	return terra.ReferenceString(dpvi.ref.Append("amazon_side_asn"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dpvi.ref.Append("arn"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) AwsDevice() terra.StringValue {
	return terra.ReferenceString(dpvi.ref.Append("aws_device"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) BgpAsn() terra.NumberValue {
	return terra.ReferenceNumber(dpvi.ref.Append("bgp_asn"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) BgpAuthKey() terra.StringValue {
	return terra.ReferenceString(dpvi.ref.Append("bgp_auth_key"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceString(dpvi.ref.Append("connection_id"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) CustomerAddress() terra.StringValue {
	return terra.ReferenceString(dpvi.ref.Append("customer_address"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dpvi.ref.Append("id"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dpvi.ref.Append("name"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) RouteFilterPrefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dpvi.ref.Append("route_filter_prefixes"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dpvi.ref.Append("tags"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dpvi.ref.Append("tags_all"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) Vlan() terra.NumberValue {
	return terra.ReferenceNumber(dpvi.ref.Append("vlan"))
}

func (dpvi dxPublicVirtualInterfaceAttributes) Timeouts() dxpublicvirtualinterface.TimeoutsAttributes {
	return terra.ReferenceSingle[dxpublicvirtualinterface.TimeoutsAttributes](dpvi.ref.Append("timeouts"))
}

type dxPublicVirtualInterfaceState struct {
	AddressFamily       string                                  `json:"address_family"`
	AmazonAddress       string                                  `json:"amazon_address"`
	AmazonSideAsn       string                                  `json:"amazon_side_asn"`
	Arn                 string                                  `json:"arn"`
	AwsDevice           string                                  `json:"aws_device"`
	BgpAsn              float64                                 `json:"bgp_asn"`
	BgpAuthKey          string                                  `json:"bgp_auth_key"`
	ConnectionId        string                                  `json:"connection_id"`
	CustomerAddress     string                                  `json:"customer_address"`
	Id                  string                                  `json:"id"`
	Name                string                                  `json:"name"`
	RouteFilterPrefixes []string                                `json:"route_filter_prefixes"`
	Tags                map[string]string                       `json:"tags"`
	TagsAll             map[string]string                       `json:"tags_all"`
	Vlan                float64                                 `json:"vlan"`
	Timeouts            *dxpublicvirtualinterface.TimeoutsState `json:"timeouts"`
}
