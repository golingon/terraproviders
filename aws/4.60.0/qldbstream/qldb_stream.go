// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package qldbstream

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type KinesisConfiguration struct {
	// AggregationEnabled: bool, optional
	AggregationEnabled terra.BoolValue `hcl:"aggregation_enabled,attr"`
	// StreamArn: string, required
	StreamArn terra.StringValue `hcl:"stream_arn,attr" validate:"required"`
}

type KinesisConfigurationAttributes struct {
	ref terra.Reference
}

func (kc KinesisConfigurationAttributes) InternalRef() terra.Reference {
	return kc.ref
}

func (kc KinesisConfigurationAttributes) InternalWithRef(ref terra.Reference) KinesisConfigurationAttributes {
	return KinesisConfigurationAttributes{ref: ref}
}

func (kc KinesisConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return kc.ref.InternalTokens()
}

func (kc KinesisConfigurationAttributes) AggregationEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(kc.ref.Append("aggregation_enabled"))
}

func (kc KinesisConfigurationAttributes) StreamArn() terra.StringValue {
	return terra.ReferenceAsString(kc.ref.Append("stream_arn"))
}

type KinesisConfigurationState struct {
	AggregationEnabled bool   `json:"aggregation_enabled"`
	StreamArn          string `json:"stream_arn"`
}
