// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	vpcpeeringconnectionoptions "github.com/golingon/terraproviders/aws/4.60.0/vpcpeeringconnectionoptions"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVpcPeeringConnectionOptions(name string, args VpcPeeringConnectionOptionsArgs) *VpcPeeringConnectionOptions {
	return &VpcPeeringConnectionOptions{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpcPeeringConnectionOptions)(nil)

type VpcPeeringConnectionOptions struct {
	Name  string
	Args  VpcPeeringConnectionOptionsArgs
	state *vpcPeeringConnectionOptionsState
}

func (vpco *VpcPeeringConnectionOptions) Type() string {
	return "aws_vpc_peering_connection_options"
}

func (vpco *VpcPeeringConnectionOptions) LocalName() string {
	return vpco.Name
}

func (vpco *VpcPeeringConnectionOptions) Configuration() interface{} {
	return vpco.Args
}

func (vpco *VpcPeeringConnectionOptions) Attributes() vpcPeeringConnectionOptionsAttributes {
	return vpcPeeringConnectionOptionsAttributes{ref: terra.ReferenceResource(vpco)}
}

func (vpco *VpcPeeringConnectionOptions) ImportState(av io.Reader) error {
	vpco.state = &vpcPeeringConnectionOptionsState{}
	if err := json.NewDecoder(av).Decode(vpco.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vpco.Type(), vpco.LocalName(), err)
	}
	return nil
}

func (vpco *VpcPeeringConnectionOptions) State() (*vpcPeeringConnectionOptionsState, bool) {
	return vpco.state, vpco.state != nil
}

func (vpco *VpcPeeringConnectionOptions) StateMust() *vpcPeeringConnectionOptionsState {
	if vpco.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vpco.Type(), vpco.LocalName()))
	}
	return vpco.state
}

func (vpco *VpcPeeringConnectionOptions) DependOn() terra.Reference {
	return terra.ReferenceResource(vpco)
}

type VpcPeeringConnectionOptionsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VpcPeeringConnectionId: string, required
	VpcPeeringConnectionId terra.StringValue `hcl:"vpc_peering_connection_id,attr" validate:"required"`
	// Accepter: optional
	Accepter *vpcpeeringconnectionoptions.Accepter `hcl:"accepter,block"`
	// Requester: optional
	Requester *vpcpeeringconnectionoptions.Requester `hcl:"requester,block"`
	// DependsOn contains resources that VpcPeeringConnectionOptions depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vpcPeeringConnectionOptionsAttributes struct {
	ref terra.Reference
}

func (vpco vpcPeeringConnectionOptionsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vpco.ref.Append("id"))
}

func (vpco vpcPeeringConnectionOptionsAttributes) VpcPeeringConnectionId() terra.StringValue {
	return terra.ReferenceString(vpco.ref.Append("vpc_peering_connection_id"))
}

func (vpco vpcPeeringConnectionOptionsAttributes) Accepter() terra.ListValue[vpcpeeringconnectionoptions.AccepterAttributes] {
	return terra.ReferenceList[vpcpeeringconnectionoptions.AccepterAttributes](vpco.ref.Append("accepter"))
}

func (vpco vpcPeeringConnectionOptionsAttributes) Requester() terra.ListValue[vpcpeeringconnectionoptions.RequesterAttributes] {
	return terra.ReferenceList[vpcpeeringconnectionoptions.RequesterAttributes](vpco.ref.Append("requester"))
}

type vpcPeeringConnectionOptionsState struct {
	Id                     string                                       `json:"id"`
	VpcPeeringConnectionId string                                       `json:"vpc_peering_connection_id"`
	Accepter               []vpcpeeringconnectionoptions.AccepterState  `json:"accepter"`
	Requester              []vpcpeeringconnectionoptions.RequesterState `json:"requester"`
}
