// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLightsailDisk(name string, args LightsailDiskArgs) *LightsailDisk {
	return &LightsailDisk{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LightsailDisk)(nil)

type LightsailDisk struct {
	Name  string
	Args  LightsailDiskArgs
	state *lightsailDiskState
}

func (ld *LightsailDisk) Type() string {
	return "aws_lightsail_disk"
}

func (ld *LightsailDisk) LocalName() string {
	return ld.Name
}

func (ld *LightsailDisk) Configuration() interface{} {
	return ld.Args
}

func (ld *LightsailDisk) Attributes() lightsailDiskAttributes {
	return lightsailDiskAttributes{ref: terra.ReferenceResource(ld)}
}

func (ld *LightsailDisk) ImportState(av io.Reader) error {
	ld.state = &lightsailDiskState{}
	if err := json.NewDecoder(av).Decode(ld.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ld.Type(), ld.LocalName(), err)
	}
	return nil
}

func (ld *LightsailDisk) State() (*lightsailDiskState, bool) {
	return ld.state, ld.state != nil
}

func (ld *LightsailDisk) StateMust() *lightsailDiskState {
	if ld.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ld.Type(), ld.LocalName()))
	}
	return ld.state
}

func (ld *LightsailDisk) DependOn() terra.Reference {
	return terra.ReferenceResource(ld)
}

type LightsailDiskArgs struct {
	// AvailabilityZone: string, required
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SizeInGb: number, required
	SizeInGb terra.NumberValue `hcl:"size_in_gb,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that LightsailDisk depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lightsailDiskAttributes struct {
	ref terra.Reference
}

func (ld lightsailDiskAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("arn"))
}

func (ld lightsailDiskAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("availability_zone"))
}

func (ld lightsailDiskAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("created_at"))
}

func (ld lightsailDiskAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("id"))
}

func (ld lightsailDiskAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("name"))
}

func (ld lightsailDiskAttributes) SizeInGb() terra.NumberValue {
	return terra.ReferenceNumber(ld.ref.Append("size_in_gb"))
}

func (ld lightsailDiskAttributes) SupportCode() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("support_code"))
}

func (ld lightsailDiskAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ld.ref.Append("tags"))
}

func (ld lightsailDiskAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ld.ref.Append("tags_all"))
}

type lightsailDiskState struct {
	Arn              string            `json:"arn"`
	AvailabilityZone string            `json:"availability_zone"`
	CreatedAt        string            `json:"created_at"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	SizeInGb         float64           `json:"size_in_gb"`
	SupportCode      string            `json:"support_code"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
}
