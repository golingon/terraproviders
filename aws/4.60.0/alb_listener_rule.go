// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	alblistenerrule "github.com/golingon/terraproviders/aws/4.60.0/alblistenerrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAlbListenerRule(name string, args AlbListenerRuleArgs) *AlbListenerRule {
	return &AlbListenerRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AlbListenerRule)(nil)

type AlbListenerRule struct {
	Name  string
	Args  AlbListenerRuleArgs
	state *albListenerRuleState
}

func (alr *AlbListenerRule) Type() string {
	return "aws_alb_listener_rule"
}

func (alr *AlbListenerRule) LocalName() string {
	return alr.Name
}

func (alr *AlbListenerRule) Configuration() interface{} {
	return alr.Args
}

func (alr *AlbListenerRule) Attributes() albListenerRuleAttributes {
	return albListenerRuleAttributes{ref: terra.ReferenceResource(alr)}
}

func (alr *AlbListenerRule) ImportState(av io.Reader) error {
	alr.state = &albListenerRuleState{}
	if err := json.NewDecoder(av).Decode(alr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alr.Type(), alr.LocalName(), err)
	}
	return nil
}

func (alr *AlbListenerRule) State() (*albListenerRuleState, bool) {
	return alr.state, alr.state != nil
}

func (alr *AlbListenerRule) StateMust() *albListenerRuleState {
	if alr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alr.Type(), alr.LocalName()))
	}
	return alr.state
}

func (alr *AlbListenerRule) DependOn() terra.Reference {
	return terra.ReferenceResource(alr)
}

type AlbListenerRuleArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListenerArn: string, required
	ListenerArn terra.StringValue `hcl:"listener_arn,attr" validate:"required"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Action: min=1
	Action []alblistenerrule.Action `hcl:"action,block" validate:"min=1"`
	// Condition: min=1
	Condition []alblistenerrule.Condition `hcl:"condition,block" validate:"min=1"`
	// DependsOn contains resources that AlbListenerRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type albListenerRuleAttributes struct {
	ref terra.Reference
}

func (alr albListenerRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(alr.ref.Append("arn"))
}

func (alr albListenerRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(alr.ref.Append("id"))
}

func (alr albListenerRuleAttributes) ListenerArn() terra.StringValue {
	return terra.ReferenceString(alr.ref.Append("listener_arn"))
}

func (alr albListenerRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(alr.ref.Append("priority"))
}

func (alr albListenerRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](alr.ref.Append("tags"))
}

func (alr albListenerRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](alr.ref.Append("tags_all"))
}

func (alr albListenerRuleAttributes) Action() terra.ListValue[alblistenerrule.ActionAttributes] {
	return terra.ReferenceList[alblistenerrule.ActionAttributes](alr.ref.Append("action"))
}

func (alr albListenerRuleAttributes) Condition() terra.SetValue[alblistenerrule.ConditionAttributes] {
	return terra.ReferenceSet[alblistenerrule.ConditionAttributes](alr.ref.Append("condition"))
}

type albListenerRuleState struct {
	Arn         string                           `json:"arn"`
	Id          string                           `json:"id"`
	ListenerArn string                           `json:"listener_arn"`
	Priority    float64                          `json:"priority"`
	Tags        map[string]string                `json:"tags"`
	TagsAll     map[string]string                `json:"tags_all"`
	Action      []alblistenerrule.ActionState    `json:"action"`
	Condition   []alblistenerrule.ConditionState `json:"condition"`
}
