// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDocdbSubnetGroup(name string, args DocdbSubnetGroupArgs) *DocdbSubnetGroup {
	return &DocdbSubnetGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DocdbSubnetGroup)(nil)

type DocdbSubnetGroup struct {
	Name  string
	Args  DocdbSubnetGroupArgs
	state *docdbSubnetGroupState
}

func (dsg *DocdbSubnetGroup) Type() string {
	return "aws_docdb_subnet_group"
}

func (dsg *DocdbSubnetGroup) LocalName() string {
	return dsg.Name
}

func (dsg *DocdbSubnetGroup) Configuration() interface{} {
	return dsg.Args
}

func (dsg *DocdbSubnetGroup) Attributes() docdbSubnetGroupAttributes {
	return docdbSubnetGroupAttributes{ref: terra.ReferenceResource(dsg)}
}

func (dsg *DocdbSubnetGroup) ImportState(av io.Reader) error {
	dsg.state = &docdbSubnetGroupState{}
	if err := json.NewDecoder(av).Decode(dsg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dsg.Type(), dsg.LocalName(), err)
	}
	return nil
}

func (dsg *DocdbSubnetGroup) State() (*docdbSubnetGroupState, bool) {
	return dsg.state, dsg.state != nil
}

func (dsg *DocdbSubnetGroup) StateMust() *docdbSubnetGroupState {
	if dsg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dsg.Type(), dsg.LocalName()))
	}
	return dsg.state
}

func (dsg *DocdbSubnetGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(dsg)
}

type DocdbSubnetGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that DocdbSubnetGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type docdbSubnetGroupAttributes struct {
	ref terra.Reference
}

func (dsg docdbSubnetGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dsg.ref.Append("arn"))
}

func (dsg docdbSubnetGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dsg.ref.Append("description"))
}

func (dsg docdbSubnetGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dsg.ref.Append("id"))
}

func (dsg docdbSubnetGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dsg.ref.Append("name"))
}

func (dsg docdbSubnetGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(dsg.ref.Append("name_prefix"))
}

func (dsg docdbSubnetGroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dsg.ref.Append("subnet_ids"))
}

func (dsg docdbSubnetGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dsg.ref.Append("tags"))
}

func (dsg docdbSubnetGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dsg.ref.Append("tags_all"))
}

type docdbSubnetGroupState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	NamePrefix  string            `json:"name_prefix"`
	SubnetIds   []string          `json:"subnet_ids"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
