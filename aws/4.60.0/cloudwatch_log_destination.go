// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudwatchLogDestination(name string, args CloudwatchLogDestinationArgs) *CloudwatchLogDestination {
	return &CloudwatchLogDestination{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudwatchLogDestination)(nil)

type CloudwatchLogDestination struct {
	Name  string
	Args  CloudwatchLogDestinationArgs
	state *cloudwatchLogDestinationState
}

func (cld *CloudwatchLogDestination) Type() string {
	return "aws_cloudwatch_log_destination"
}

func (cld *CloudwatchLogDestination) LocalName() string {
	return cld.Name
}

func (cld *CloudwatchLogDestination) Configuration() interface{} {
	return cld.Args
}

func (cld *CloudwatchLogDestination) Attributes() cloudwatchLogDestinationAttributes {
	return cloudwatchLogDestinationAttributes{ref: terra.ReferenceResource(cld)}
}

func (cld *CloudwatchLogDestination) ImportState(av io.Reader) error {
	cld.state = &cloudwatchLogDestinationState{}
	if err := json.NewDecoder(av).Decode(cld.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cld.Type(), cld.LocalName(), err)
	}
	return nil
}

func (cld *CloudwatchLogDestination) State() (*cloudwatchLogDestinationState, bool) {
	return cld.state, cld.state != nil
}

func (cld *CloudwatchLogDestination) StateMust() *cloudwatchLogDestinationState {
	if cld.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cld.Type(), cld.LocalName()))
	}
	return cld.state
}

func (cld *CloudwatchLogDestination) DependOn() terra.Reference {
	return terra.ReferenceResource(cld)
}

type CloudwatchLogDestinationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetArn: string, required
	TargetArn terra.StringValue `hcl:"target_arn,attr" validate:"required"`
	// DependsOn contains resources that CloudwatchLogDestination depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudwatchLogDestinationAttributes struct {
	ref terra.Reference
}

func (cld cloudwatchLogDestinationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cld.ref.Append("arn"))
}

func (cld cloudwatchLogDestinationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cld.ref.Append("id"))
}

func (cld cloudwatchLogDestinationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cld.ref.Append("name"))
}

func (cld cloudwatchLogDestinationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(cld.ref.Append("role_arn"))
}

func (cld cloudwatchLogDestinationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cld.ref.Append("tags"))
}

func (cld cloudwatchLogDestinationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cld.ref.Append("tags_all"))
}

func (cld cloudwatchLogDestinationAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceString(cld.ref.Append("target_arn"))
}

type cloudwatchLogDestinationState struct {
	Arn       string            `json:"arn"`
	Id        string            `json:"id"`
	Name      string            `json:"name"`
	RoleArn   string            `json:"role_arn"`
	Tags      map[string]string `json:"tags"`
	TagsAll   map[string]string `json:"tags_all"`
	TargetArn string            `json:"target_arn"`
}
