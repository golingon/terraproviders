// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewCloudwatchLogDestination creates a new instance of [CloudwatchLogDestination].
func NewCloudwatchLogDestination(name string, args CloudwatchLogDestinationArgs) *CloudwatchLogDestination {
	return &CloudwatchLogDestination{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudwatchLogDestination)(nil)

// CloudwatchLogDestination represents the Terraform resource aws_cloudwatch_log_destination.
type CloudwatchLogDestination struct {
	Name      string
	Args      CloudwatchLogDestinationArgs
	state     *cloudwatchLogDestinationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [CloudwatchLogDestination].
func (cld *CloudwatchLogDestination) Type() string {
	return "aws_cloudwatch_log_destination"
}

// LocalName returns the local name for [CloudwatchLogDestination].
func (cld *CloudwatchLogDestination) LocalName() string {
	return cld.Name
}

// Configuration returns the configuration (args) for [CloudwatchLogDestination].
func (cld *CloudwatchLogDestination) Configuration() interface{} {
	return cld.Args
}

// DependOn is used for other resources to depend on [CloudwatchLogDestination].
func (cld *CloudwatchLogDestination) DependOn() terra.Reference {
	return terra.ReferenceResource(cld)
}

// Dependencies returns the list of resources [CloudwatchLogDestination] depends_on.
func (cld *CloudwatchLogDestination) Dependencies() terra.Dependencies {
	return cld.DependsOn
}

// LifecycleManagement returns the lifecycle block for [CloudwatchLogDestination].
func (cld *CloudwatchLogDestination) LifecycleManagement() *terra.Lifecycle {
	return cld.Lifecycle
}

// Attributes returns the attributes for [CloudwatchLogDestination].
func (cld *CloudwatchLogDestination) Attributes() cloudwatchLogDestinationAttributes {
	return cloudwatchLogDestinationAttributes{ref: terra.ReferenceResource(cld)}
}

// ImportState imports the given attribute values into [CloudwatchLogDestination]'s state.
func (cld *CloudwatchLogDestination) ImportState(av io.Reader) error {
	cld.state = &cloudwatchLogDestinationState{}
	if err := json.NewDecoder(av).Decode(cld.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cld.Type(), cld.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [CloudwatchLogDestination] has state.
func (cld *CloudwatchLogDestination) State() (*cloudwatchLogDestinationState, bool) {
	return cld.state, cld.state != nil
}

// StateMust returns the state for [CloudwatchLogDestination]. Panics if the state is nil.
func (cld *CloudwatchLogDestination) StateMust() *cloudwatchLogDestinationState {
	if cld.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cld.Type(), cld.LocalName()))
	}
	return cld.state
}

// CloudwatchLogDestinationArgs contains the configurations for aws_cloudwatch_log_destination.
type CloudwatchLogDestinationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetArn: string, required
	TargetArn terra.StringValue `hcl:"target_arn,attr" validate:"required"`
}
type cloudwatchLogDestinationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudwatch_log_destination.
func (cld cloudwatchLogDestinationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(cld.ref.Append("arn"))
}

// Id returns a reference to field id of aws_cloudwatch_log_destination.
func (cld cloudwatchLogDestinationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cld.ref.Append("id"))
}

// Name returns a reference to field name of aws_cloudwatch_log_destination.
func (cld cloudwatchLogDestinationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cld.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_cloudwatch_log_destination.
func (cld cloudwatchLogDestinationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(cld.ref.Append("role_arn"))
}

// Tags returns a reference to field tags of aws_cloudwatch_log_destination.
func (cld cloudwatchLogDestinationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cld.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cloudwatch_log_destination.
func (cld cloudwatchLogDestinationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cld.ref.Append("tags_all"))
}

// TargetArn returns a reference to field target_arn of aws_cloudwatch_log_destination.
func (cld cloudwatchLogDestinationAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceAsString(cld.ref.Append("target_arn"))
}

type cloudwatchLogDestinationState struct {
	Arn       string            `json:"arn"`
	Id        string            `json:"id"`
	Name      string            `json:"name"`
	RoleArn   string            `json:"role_arn"`
	Tags      map[string]string `json:"tags"`
	TagsAll   map[string]string `json:"tags_all"`
	TargetArn string            `json:"target_arn"`
}
