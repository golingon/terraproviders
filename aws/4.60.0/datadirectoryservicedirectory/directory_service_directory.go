// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datadirectoryservicedirectory

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ConnectSettings struct{}

type RadiusSettings struct{}

type VpcSettings struct{}

type ConnectSettingsAttributes struct {
	ref terra.Reference
}

func (cs ConnectSettingsAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs ConnectSettingsAttributes) InternalWithRef(ref terra.Reference) ConnectSettingsAttributes {
	return ConnectSettingsAttributes{ref: ref}
}

func (cs ConnectSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs ConnectSettingsAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("availability_zones"))
}

func (cs ConnectSettingsAttributes) ConnectIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("connect_ips"))
}

func (cs ConnectSettingsAttributes) CustomerDnsIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("customer_dns_ips"))
}

func (cs ConnectSettingsAttributes) CustomerUsername() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("customer_username"))
}

func (cs ConnectSettingsAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("subnet_ids"))
}

func (cs ConnectSettingsAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("vpc_id"))
}

type RadiusSettingsAttributes struct {
	ref terra.Reference
}

func (rs RadiusSettingsAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RadiusSettingsAttributes) InternalWithRef(ref terra.Reference) RadiusSettingsAttributes {
	return RadiusSettingsAttributes{ref: ref}
}

func (rs RadiusSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RadiusSettingsAttributes) AuthenticationProtocol() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("authentication_protocol"))
}

func (rs RadiusSettingsAttributes) DisplayLabel() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("display_label"))
}

func (rs RadiusSettingsAttributes) RadiusPort() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("radius_port"))
}

func (rs RadiusSettingsAttributes) RadiusRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("radius_retries"))
}

func (rs RadiusSettingsAttributes) RadiusServers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rs.ref.Append("radius_servers"))
}

func (rs RadiusSettingsAttributes) RadiusTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("radius_timeout"))
}

func (rs RadiusSettingsAttributes) UseSameUsername() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("use_same_username"))
}

type VpcSettingsAttributes struct {
	ref terra.Reference
}

func (vs VpcSettingsAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs VpcSettingsAttributes) InternalWithRef(ref terra.Reference) VpcSettingsAttributes {
	return VpcSettingsAttributes{ref: ref}
}

func (vs VpcSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs VpcSettingsAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vs.ref.Append("availability_zones"))
}

func (vs VpcSettingsAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vs.ref.Append("subnet_ids"))
}

func (vs VpcSettingsAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("vpc_id"))
}

type ConnectSettingsState struct {
	AvailabilityZones []string `json:"availability_zones"`
	ConnectIps        []string `json:"connect_ips"`
	CustomerDnsIps    []string `json:"customer_dns_ips"`
	CustomerUsername  string   `json:"customer_username"`
	SubnetIds         []string `json:"subnet_ids"`
	VpcId             string   `json:"vpc_id"`
}

type RadiusSettingsState struct {
	AuthenticationProtocol string   `json:"authentication_protocol"`
	DisplayLabel           string   `json:"display_label"`
	RadiusPort             float64  `json:"radius_port"`
	RadiusRetries          float64  `json:"radius_retries"`
	RadiusServers          []string `json:"radius_servers"`
	RadiusTimeout          float64  `json:"radius_timeout"`
	UseSameUsername        bool     `json:"use_same_username"`
}

type VpcSettingsState struct {
	AvailabilityZones []string `json:"availability_zones"`
	SubnetIds         []string `json:"subnet_ids"`
	VpcId             string   `json:"vpc_id"`
}
