// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamUser(name string, args IamUserArgs) *IamUser {
	return &IamUser{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamUser)(nil)

type IamUser struct {
	Name  string
	Args  IamUserArgs
	state *iamUserState
}

func (iu *IamUser) Type() string {
	return "aws_iam_user"
}

func (iu *IamUser) LocalName() string {
	return iu.Name
}

func (iu *IamUser) Configuration() interface{} {
	return iu.Args
}

func (iu *IamUser) Attributes() iamUserAttributes {
	return iamUserAttributes{ref: terra.ReferenceResource(iu)}
}

func (iu *IamUser) ImportState(av io.Reader) error {
	iu.state = &iamUserState{}
	if err := json.NewDecoder(av).Decode(iu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iu.Type(), iu.LocalName(), err)
	}
	return nil
}

func (iu *IamUser) State() (*iamUserState, bool) {
	return iu.state, iu.state != nil
}

func (iu *IamUser) StateMust() *iamUserState {
	if iu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iu.Type(), iu.LocalName()))
	}
	return iu.state
}

func (iu *IamUser) DependOn() terra.Reference {
	return terra.ReferenceResource(iu)
}

type IamUserArgs struct {
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// PermissionsBoundary: string, optional
	PermissionsBoundary terra.StringValue `hcl:"permissions_boundary,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that IamUser depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamUserAttributes struct {
	ref terra.Reference
}

func (iu iamUserAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("arn"))
}

func (iu iamUserAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceBool(iu.ref.Append("force_destroy"))
}

func (iu iamUserAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("id"))
}

func (iu iamUserAttributes) Name() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("name"))
}

func (iu iamUserAttributes) Path() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("path"))
}

func (iu iamUserAttributes) PermissionsBoundary() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("permissions_boundary"))
}

func (iu iamUserAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](iu.ref.Append("tags"))
}

func (iu iamUserAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](iu.ref.Append("tags_all"))
}

func (iu iamUserAttributes) UniqueId() terra.StringValue {
	return terra.ReferenceString(iu.ref.Append("unique_id"))
}

type iamUserState struct {
	Arn                 string            `json:"arn"`
	ForceDestroy        bool              `json:"force_destroy"`
	Id                  string            `json:"id"`
	Name                string            `json:"name"`
	Path                string            `json:"path"`
	PermissionsBoundary string            `json:"permissions_boundary"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
	UniqueId            string            `json:"unique_id"`
}
