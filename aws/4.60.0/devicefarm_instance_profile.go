// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDevicefarmInstanceProfile creates a new instance of [DevicefarmInstanceProfile].
func NewDevicefarmInstanceProfile(name string, args DevicefarmInstanceProfileArgs) *DevicefarmInstanceProfile {
	return &DevicefarmInstanceProfile{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DevicefarmInstanceProfile)(nil)

// DevicefarmInstanceProfile represents the Terraform resource aws_devicefarm_instance_profile.
type DevicefarmInstanceProfile struct {
	Name      string
	Args      DevicefarmInstanceProfileArgs
	state     *devicefarmInstanceProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DevicefarmInstanceProfile].
func (dip *DevicefarmInstanceProfile) Type() string {
	return "aws_devicefarm_instance_profile"
}

// LocalName returns the local name for [DevicefarmInstanceProfile].
func (dip *DevicefarmInstanceProfile) LocalName() string {
	return dip.Name
}

// Configuration returns the configuration (args) for [DevicefarmInstanceProfile].
func (dip *DevicefarmInstanceProfile) Configuration() interface{} {
	return dip.Args
}

// DependOn is used for other resources to depend on [DevicefarmInstanceProfile].
func (dip *DevicefarmInstanceProfile) DependOn() terra.Reference {
	return terra.ReferenceResource(dip)
}

// Dependencies returns the list of resources [DevicefarmInstanceProfile] depends_on.
func (dip *DevicefarmInstanceProfile) Dependencies() terra.Dependencies {
	return dip.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DevicefarmInstanceProfile].
func (dip *DevicefarmInstanceProfile) LifecycleManagement() *terra.Lifecycle {
	return dip.Lifecycle
}

// Attributes returns the attributes for [DevicefarmInstanceProfile].
func (dip *DevicefarmInstanceProfile) Attributes() devicefarmInstanceProfileAttributes {
	return devicefarmInstanceProfileAttributes{ref: terra.ReferenceResource(dip)}
}

// ImportState imports the given attribute values into [DevicefarmInstanceProfile]'s state.
func (dip *DevicefarmInstanceProfile) ImportState(av io.Reader) error {
	dip.state = &devicefarmInstanceProfileState{}
	if err := json.NewDecoder(av).Decode(dip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dip.Type(), dip.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DevicefarmInstanceProfile] has state.
func (dip *DevicefarmInstanceProfile) State() (*devicefarmInstanceProfileState, bool) {
	return dip.state, dip.state != nil
}

// StateMust returns the state for [DevicefarmInstanceProfile]. Panics if the state is nil.
func (dip *DevicefarmInstanceProfile) StateMust() *devicefarmInstanceProfileState {
	if dip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dip.Type(), dip.LocalName()))
	}
	return dip.state
}

// DevicefarmInstanceProfileArgs contains the configurations for aws_devicefarm_instance_profile.
type DevicefarmInstanceProfileArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExcludeAppPackagesFromCleanup: set of string, optional
	ExcludeAppPackagesFromCleanup terra.SetValue[terra.StringValue] `hcl:"exclude_app_packages_from_cleanup,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PackageCleanup: bool, optional
	PackageCleanup terra.BoolValue `hcl:"package_cleanup,attr"`
	// RebootAfterUse: bool, optional
	RebootAfterUse terra.BoolValue `hcl:"reboot_after_use,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type devicefarmInstanceProfileAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_devicefarm_instance_profile.
func (dip devicefarmInstanceProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dip.ref.Append("arn"))
}

// Description returns a reference to field description of aws_devicefarm_instance_profile.
func (dip devicefarmInstanceProfileAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(dip.ref.Append("description"))
}

// ExcludeAppPackagesFromCleanup returns a reference to field exclude_app_packages_from_cleanup of aws_devicefarm_instance_profile.
func (dip devicefarmInstanceProfileAttributes) ExcludeAppPackagesFromCleanup() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dip.ref.Append("exclude_app_packages_from_cleanup"))
}

// Id returns a reference to field id of aws_devicefarm_instance_profile.
func (dip devicefarmInstanceProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dip.ref.Append("id"))
}

// Name returns a reference to field name of aws_devicefarm_instance_profile.
func (dip devicefarmInstanceProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(dip.ref.Append("name"))
}

// PackageCleanup returns a reference to field package_cleanup of aws_devicefarm_instance_profile.
func (dip devicefarmInstanceProfileAttributes) PackageCleanup() terra.BoolValue {
	return terra.ReferenceAsBool(dip.ref.Append("package_cleanup"))
}

// RebootAfterUse returns a reference to field reboot_after_use of aws_devicefarm_instance_profile.
func (dip devicefarmInstanceProfileAttributes) RebootAfterUse() terra.BoolValue {
	return terra.ReferenceAsBool(dip.ref.Append("reboot_after_use"))
}

// Tags returns a reference to field tags of aws_devicefarm_instance_profile.
func (dip devicefarmInstanceProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dip.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_devicefarm_instance_profile.
func (dip devicefarmInstanceProfileAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dip.ref.Append("tags_all"))
}

type devicefarmInstanceProfileState struct {
	Arn                           string            `json:"arn"`
	Description                   string            `json:"description"`
	ExcludeAppPackagesFromCleanup []string          `json:"exclude_app_packages_from_cleanup"`
	Id                            string            `json:"id"`
	Name                          string            `json:"name"`
	PackageCleanup                bool              `json:"package_cleanup"`
	RebootAfterUse                bool              `json:"reboot_after_use"`
	Tags                          map[string]string `json:"tags"`
	TagsAll                       map[string]string `json:"tags_all"`
}
