// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	locationmap "github.com/golingon/terraproviders/aws/4.60.0/locationmap"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLocationMap(name string, args LocationMapArgs) *LocationMap {
	return &LocationMap{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LocationMap)(nil)

type LocationMap struct {
	Name  string
	Args  LocationMapArgs
	state *locationMapState
}

func (lm *LocationMap) Type() string {
	return "aws_location_map"
}

func (lm *LocationMap) LocalName() string {
	return lm.Name
}

func (lm *LocationMap) Configuration() interface{} {
	return lm.Args
}

func (lm *LocationMap) Attributes() locationMapAttributes {
	return locationMapAttributes{ref: terra.ReferenceResource(lm)}
}

func (lm *LocationMap) ImportState(av io.Reader) error {
	lm.state = &locationMapState{}
	if err := json.NewDecoder(av).Decode(lm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lm.Type(), lm.LocalName(), err)
	}
	return nil
}

func (lm *LocationMap) State() (*locationMapState, bool) {
	return lm.state, lm.state != nil
}

func (lm *LocationMap) StateMust() *locationMapState {
	if lm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lm.Type(), lm.LocalName()))
	}
	return lm.state
}

func (lm *LocationMap) DependOn() terra.Reference {
	return terra.ReferenceResource(lm)
}

type LocationMapArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MapName: string, required
	MapName terra.StringValue `hcl:"map_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Configuration: required
	Configuration *locationmap.Configuration `hcl:"configuration,block" validate:"required"`
	// DependsOn contains resources that LocationMap depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type locationMapAttributes struct {
	ref terra.Reference
}

func (lm locationMapAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("create_time"))
}

func (lm locationMapAttributes) Description() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("description"))
}

func (lm locationMapAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("id"))
}

func (lm locationMapAttributes) MapArn() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("map_arn"))
}

func (lm locationMapAttributes) MapName() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("map_name"))
}

func (lm locationMapAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lm.ref.Append("tags"))
}

func (lm locationMapAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lm.ref.Append("tags_all"))
}

func (lm locationMapAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(lm.ref.Append("update_time"))
}

func (lm locationMapAttributes) Configuration() terra.ListValue[locationmap.ConfigurationAttributes] {
	return terra.ReferenceList[locationmap.ConfigurationAttributes](lm.ref.Append("configuration"))
}

type locationMapState struct {
	CreateTime    string                           `json:"create_time"`
	Description   string                           `json:"description"`
	Id            string                           `json:"id"`
	MapArn        string                           `json:"map_arn"`
	MapName       string                           `json:"map_name"`
	Tags          map[string]string                `json:"tags"`
	TagsAll       map[string]string                `json:"tags_all"`
	UpdateTime    string                           `json:"update_time"`
	Configuration []locationmap.ConfigurationState `json:"configuration"`
}
