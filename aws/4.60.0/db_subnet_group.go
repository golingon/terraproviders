// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDbSubnetGroup(name string, args DbSubnetGroupArgs) *DbSubnetGroup {
	return &DbSubnetGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DbSubnetGroup)(nil)

type DbSubnetGroup struct {
	Name  string
	Args  DbSubnetGroupArgs
	state *dbSubnetGroupState
}

func (dsg *DbSubnetGroup) Type() string {
	return "aws_db_subnet_group"
}

func (dsg *DbSubnetGroup) LocalName() string {
	return dsg.Name
}

func (dsg *DbSubnetGroup) Configuration() interface{} {
	return dsg.Args
}

func (dsg *DbSubnetGroup) Attributes() dbSubnetGroupAttributes {
	return dbSubnetGroupAttributes{ref: terra.ReferenceResource(dsg)}
}

func (dsg *DbSubnetGroup) ImportState(av io.Reader) error {
	dsg.state = &dbSubnetGroupState{}
	if err := json.NewDecoder(av).Decode(dsg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dsg.Type(), dsg.LocalName(), err)
	}
	return nil
}

func (dsg *DbSubnetGroup) State() (*dbSubnetGroupState, bool) {
	return dsg.state, dsg.state != nil
}

func (dsg *DbSubnetGroup) StateMust() *dbSubnetGroupState {
	if dsg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dsg.Type(), dsg.LocalName()))
	}
	return dsg.state
}

func (dsg *DbSubnetGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(dsg)
}

type DbSubnetGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that DbSubnetGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dbSubnetGroupAttributes struct {
	ref terra.Reference
}

func (dsg dbSubnetGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dsg.ref.Append("arn"))
}

func (dsg dbSubnetGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dsg.ref.Append("description"))
}

func (dsg dbSubnetGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dsg.ref.Append("id"))
}

func (dsg dbSubnetGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dsg.ref.Append("name"))
}

func (dsg dbSubnetGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(dsg.ref.Append("name_prefix"))
}

func (dsg dbSubnetGroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dsg.ref.Append("subnet_ids"))
}

func (dsg dbSubnetGroupAttributes) SupportedNetworkTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dsg.ref.Append("supported_network_types"))
}

func (dsg dbSubnetGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dsg.ref.Append("tags"))
}

func (dsg dbSubnetGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dsg.ref.Append("tags_all"))
}

type dbSubnetGroupState struct {
	Arn                   string            `json:"arn"`
	Description           string            `json:"description"`
	Id                    string            `json:"id"`
	Name                  string            `json:"name"`
	NamePrefix            string            `json:"name_prefix"`
	SubnetIds             []string          `json:"subnet_ids"`
	SupportedNetworkTypes []string          `json:"supported_network_types"`
	Tags                  map[string]string `json:"tags"`
	TagsAll               map[string]string `json:"tags_all"`
}
