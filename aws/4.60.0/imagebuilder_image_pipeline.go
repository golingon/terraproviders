// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	imagebuilderimagepipeline "github.com/golingon/terraproviders/aws/4.60.0/imagebuilderimagepipeline"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewImagebuilderImagePipeline(name string, args ImagebuilderImagePipelineArgs) *ImagebuilderImagePipeline {
	return &ImagebuilderImagePipeline{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ImagebuilderImagePipeline)(nil)

type ImagebuilderImagePipeline struct {
	Name  string
	Args  ImagebuilderImagePipelineArgs
	state *imagebuilderImagePipelineState
}

func (iip *ImagebuilderImagePipeline) Type() string {
	return "aws_imagebuilder_image_pipeline"
}

func (iip *ImagebuilderImagePipeline) LocalName() string {
	return iip.Name
}

func (iip *ImagebuilderImagePipeline) Configuration() interface{} {
	return iip.Args
}

func (iip *ImagebuilderImagePipeline) Attributes() imagebuilderImagePipelineAttributes {
	return imagebuilderImagePipelineAttributes{ref: terra.ReferenceResource(iip)}
}

func (iip *ImagebuilderImagePipeline) ImportState(av io.Reader) error {
	iip.state = &imagebuilderImagePipelineState{}
	if err := json.NewDecoder(av).Decode(iip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iip.Type(), iip.LocalName(), err)
	}
	return nil
}

func (iip *ImagebuilderImagePipeline) State() (*imagebuilderImagePipelineState, bool) {
	return iip.state, iip.state != nil
}

func (iip *ImagebuilderImagePipeline) StateMust() *imagebuilderImagePipelineState {
	if iip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iip.Type(), iip.LocalName()))
	}
	return iip.state
}

func (iip *ImagebuilderImagePipeline) DependOn() terra.Reference {
	return terra.ReferenceResource(iip)
}

type ImagebuilderImagePipelineArgs struct {
	// ContainerRecipeArn: string, optional
	ContainerRecipeArn terra.StringValue `hcl:"container_recipe_arn,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DistributionConfigurationArn: string, optional
	DistributionConfigurationArn terra.StringValue `hcl:"distribution_configuration_arn,attr"`
	// EnhancedImageMetadataEnabled: bool, optional
	EnhancedImageMetadataEnabled terra.BoolValue `hcl:"enhanced_image_metadata_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageRecipeArn: string, optional
	ImageRecipeArn terra.StringValue `hcl:"image_recipe_arn,attr"`
	// InfrastructureConfigurationArn: string, required
	InfrastructureConfigurationArn terra.StringValue `hcl:"infrastructure_configuration_arn,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ImageTestsConfiguration: optional
	ImageTestsConfiguration *imagebuilderimagepipeline.ImageTestsConfiguration `hcl:"image_tests_configuration,block"`
	// Schedule: optional
	Schedule *imagebuilderimagepipeline.Schedule `hcl:"schedule,block"`
	// DependsOn contains resources that ImagebuilderImagePipeline depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type imagebuilderImagePipelineAttributes struct {
	ref terra.Reference
}

func (iip imagebuilderImagePipelineAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("arn"))
}

func (iip imagebuilderImagePipelineAttributes) ContainerRecipeArn() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("container_recipe_arn"))
}

func (iip imagebuilderImagePipelineAttributes) DateCreated() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("date_created"))
}

func (iip imagebuilderImagePipelineAttributes) DateLastRun() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("date_last_run"))
}

func (iip imagebuilderImagePipelineAttributes) DateNextRun() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("date_next_run"))
}

func (iip imagebuilderImagePipelineAttributes) DateUpdated() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("date_updated"))
}

func (iip imagebuilderImagePipelineAttributes) Description() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("description"))
}

func (iip imagebuilderImagePipelineAttributes) DistributionConfigurationArn() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("distribution_configuration_arn"))
}

func (iip imagebuilderImagePipelineAttributes) EnhancedImageMetadataEnabled() terra.BoolValue {
	return terra.ReferenceBool(iip.ref.Append("enhanced_image_metadata_enabled"))
}

func (iip imagebuilderImagePipelineAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("id"))
}

func (iip imagebuilderImagePipelineAttributes) ImageRecipeArn() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("image_recipe_arn"))
}

func (iip imagebuilderImagePipelineAttributes) InfrastructureConfigurationArn() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("infrastructure_configuration_arn"))
}

func (iip imagebuilderImagePipelineAttributes) Name() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("name"))
}

func (iip imagebuilderImagePipelineAttributes) Platform() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("platform"))
}

func (iip imagebuilderImagePipelineAttributes) Status() terra.StringValue {
	return terra.ReferenceString(iip.ref.Append("status"))
}

func (iip imagebuilderImagePipelineAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](iip.ref.Append("tags"))
}

func (iip imagebuilderImagePipelineAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](iip.ref.Append("tags_all"))
}

func (iip imagebuilderImagePipelineAttributes) ImageTestsConfiguration() terra.ListValue[imagebuilderimagepipeline.ImageTestsConfigurationAttributes] {
	return terra.ReferenceList[imagebuilderimagepipeline.ImageTestsConfigurationAttributes](iip.ref.Append("image_tests_configuration"))
}

func (iip imagebuilderImagePipelineAttributes) Schedule() terra.ListValue[imagebuilderimagepipeline.ScheduleAttributes] {
	return terra.ReferenceList[imagebuilderimagepipeline.ScheduleAttributes](iip.ref.Append("schedule"))
}

type imagebuilderImagePipelineState struct {
	Arn                            string                                                   `json:"arn"`
	ContainerRecipeArn             string                                                   `json:"container_recipe_arn"`
	DateCreated                    string                                                   `json:"date_created"`
	DateLastRun                    string                                                   `json:"date_last_run"`
	DateNextRun                    string                                                   `json:"date_next_run"`
	DateUpdated                    string                                                   `json:"date_updated"`
	Description                    string                                                   `json:"description"`
	DistributionConfigurationArn   string                                                   `json:"distribution_configuration_arn"`
	EnhancedImageMetadataEnabled   bool                                                     `json:"enhanced_image_metadata_enabled"`
	Id                             string                                                   `json:"id"`
	ImageRecipeArn                 string                                                   `json:"image_recipe_arn"`
	InfrastructureConfigurationArn string                                                   `json:"infrastructure_configuration_arn"`
	Name                           string                                                   `json:"name"`
	Platform                       string                                                   `json:"platform"`
	Status                         string                                                   `json:"status"`
	Tags                           map[string]string                                        `json:"tags"`
	TagsAll                        map[string]string                                        `json:"tags_all"`
	ImageTestsConfiguration        []imagebuilderimagepipeline.ImageTestsConfigurationState `json:"image_tests_configuration"`
	Schedule                       []imagebuilderimagepipeline.ScheduleState                `json:"schedule"`
}
