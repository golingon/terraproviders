// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3AccountPublicAccessBlock(name string, args S3AccountPublicAccessBlockArgs) *S3AccountPublicAccessBlock {
	return &S3AccountPublicAccessBlock{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3AccountPublicAccessBlock)(nil)

type S3AccountPublicAccessBlock struct {
	Name  string
	Args  S3AccountPublicAccessBlockArgs
	state *s3AccountPublicAccessBlockState
}

func (sapab *S3AccountPublicAccessBlock) Type() string {
	return "aws_s3_account_public_access_block"
}

func (sapab *S3AccountPublicAccessBlock) LocalName() string {
	return sapab.Name
}

func (sapab *S3AccountPublicAccessBlock) Configuration() interface{} {
	return sapab.Args
}

func (sapab *S3AccountPublicAccessBlock) Attributes() s3AccountPublicAccessBlockAttributes {
	return s3AccountPublicAccessBlockAttributes{ref: terra.ReferenceResource(sapab)}
}

func (sapab *S3AccountPublicAccessBlock) ImportState(av io.Reader) error {
	sapab.state = &s3AccountPublicAccessBlockState{}
	if err := json.NewDecoder(av).Decode(sapab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sapab.Type(), sapab.LocalName(), err)
	}
	return nil
}

func (sapab *S3AccountPublicAccessBlock) State() (*s3AccountPublicAccessBlockState, bool) {
	return sapab.state, sapab.state != nil
}

func (sapab *S3AccountPublicAccessBlock) StateMust() *s3AccountPublicAccessBlockState {
	if sapab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sapab.Type(), sapab.LocalName()))
	}
	return sapab.state
}

func (sapab *S3AccountPublicAccessBlock) DependOn() terra.Reference {
	return terra.ReferenceResource(sapab)
}

type S3AccountPublicAccessBlockArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// BlockPublicAcls: bool, optional
	BlockPublicAcls terra.BoolValue `hcl:"block_public_acls,attr"`
	// BlockPublicPolicy: bool, optional
	BlockPublicPolicy terra.BoolValue `hcl:"block_public_policy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnorePublicAcls: bool, optional
	IgnorePublicAcls terra.BoolValue `hcl:"ignore_public_acls,attr"`
	// RestrictPublicBuckets: bool, optional
	RestrictPublicBuckets terra.BoolValue `hcl:"restrict_public_buckets,attr"`
	// DependsOn contains resources that S3AccountPublicAccessBlock depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3AccountPublicAccessBlockAttributes struct {
	ref terra.Reference
}

func (sapab s3AccountPublicAccessBlockAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(sapab.ref.Append("account_id"))
}

func (sapab s3AccountPublicAccessBlockAttributes) BlockPublicAcls() terra.BoolValue {
	return terra.ReferenceBool(sapab.ref.Append("block_public_acls"))
}

func (sapab s3AccountPublicAccessBlockAttributes) BlockPublicPolicy() terra.BoolValue {
	return terra.ReferenceBool(sapab.ref.Append("block_public_policy"))
}

func (sapab s3AccountPublicAccessBlockAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sapab.ref.Append("id"))
}

func (sapab s3AccountPublicAccessBlockAttributes) IgnorePublicAcls() terra.BoolValue {
	return terra.ReferenceBool(sapab.ref.Append("ignore_public_acls"))
}

func (sapab s3AccountPublicAccessBlockAttributes) RestrictPublicBuckets() terra.BoolValue {
	return terra.ReferenceBool(sapab.ref.Append("restrict_public_buckets"))
}

type s3AccountPublicAccessBlockState struct {
	AccountId             string `json:"account_id"`
	BlockPublicAcls       bool   `json:"block_public_acls"`
	BlockPublicPolicy     bool   `json:"block_public_policy"`
	Id                    string `json:"id"`
	IgnorePublicAcls      bool   `json:"ignore_public_acls"`
	RestrictPublicBuckets bool   `json:"restrict_public_buckets"`
}
