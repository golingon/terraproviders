// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3bucketownershipcontrols "github.com/golingon/terraproviders/aws/4.60.0/s3bucketownershipcontrols"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketOwnershipControls(name string, args S3BucketOwnershipControlsArgs) *S3BucketOwnershipControls {
	return &S3BucketOwnershipControls{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketOwnershipControls)(nil)

type S3BucketOwnershipControls struct {
	Name  string
	Args  S3BucketOwnershipControlsArgs
	state *s3BucketOwnershipControlsState
}

func (sboc *S3BucketOwnershipControls) Type() string {
	return "aws_s3_bucket_ownership_controls"
}

func (sboc *S3BucketOwnershipControls) LocalName() string {
	return sboc.Name
}

func (sboc *S3BucketOwnershipControls) Configuration() interface{} {
	return sboc.Args
}

func (sboc *S3BucketOwnershipControls) Attributes() s3BucketOwnershipControlsAttributes {
	return s3BucketOwnershipControlsAttributes{ref: terra.ReferenceResource(sboc)}
}

func (sboc *S3BucketOwnershipControls) ImportState(av io.Reader) error {
	sboc.state = &s3BucketOwnershipControlsState{}
	if err := json.NewDecoder(av).Decode(sboc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sboc.Type(), sboc.LocalName(), err)
	}
	return nil
}

func (sboc *S3BucketOwnershipControls) State() (*s3BucketOwnershipControlsState, bool) {
	return sboc.state, sboc.state != nil
}

func (sboc *S3BucketOwnershipControls) StateMust() *s3BucketOwnershipControlsState {
	if sboc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sboc.Type(), sboc.LocalName()))
	}
	return sboc.state
}

func (sboc *S3BucketOwnershipControls) DependOn() terra.Reference {
	return terra.ReferenceResource(sboc)
}

type S3BucketOwnershipControlsArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Rule: required
	Rule *s3bucketownershipcontrols.Rule `hcl:"rule,block" validate:"required"`
	// DependsOn contains resources that S3BucketOwnershipControls depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketOwnershipControlsAttributes struct {
	ref terra.Reference
}

func (sboc s3BucketOwnershipControlsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sboc.ref.Append("bucket"))
}

func (sboc s3BucketOwnershipControlsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sboc.ref.Append("id"))
}

func (sboc s3BucketOwnershipControlsAttributes) Rule() terra.ListValue[s3bucketownershipcontrols.RuleAttributes] {
	return terra.ReferenceList[s3bucketownershipcontrols.RuleAttributes](sboc.ref.Append("rule"))
}

type s3BucketOwnershipControlsState struct {
	Bucket string                                `json:"bucket"`
	Id     string                                `json:"id"`
	Rule   []s3bucketownershipcontrols.RuleState `json:"rule"`
}
