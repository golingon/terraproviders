// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	seseventdestination "github.com/golingon/terraproviders/aws/4.60.0/seseventdestination"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSesEventDestination(name string, args SesEventDestinationArgs) *SesEventDestination {
	return &SesEventDestination{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SesEventDestination)(nil)

type SesEventDestination struct {
	Name  string
	Args  SesEventDestinationArgs
	state *sesEventDestinationState
}

func (sed *SesEventDestination) Type() string {
	return "aws_ses_event_destination"
}

func (sed *SesEventDestination) LocalName() string {
	return sed.Name
}

func (sed *SesEventDestination) Configuration() interface{} {
	return sed.Args
}

func (sed *SesEventDestination) Attributes() sesEventDestinationAttributes {
	return sesEventDestinationAttributes{ref: terra.ReferenceResource(sed)}
}

func (sed *SesEventDestination) ImportState(av io.Reader) error {
	sed.state = &sesEventDestinationState{}
	if err := json.NewDecoder(av).Decode(sed.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sed.Type(), sed.LocalName(), err)
	}
	return nil
}

func (sed *SesEventDestination) State() (*sesEventDestinationState, bool) {
	return sed.state, sed.state != nil
}

func (sed *SesEventDestination) StateMust() *sesEventDestinationState {
	if sed.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sed.Type(), sed.LocalName()))
	}
	return sed.state
}

func (sed *SesEventDestination) DependOn() terra.Reference {
	return terra.ReferenceResource(sed)
}

type SesEventDestinationArgs struct {
	// ConfigurationSetName: string, required
	ConfigurationSetName terra.StringValue `hcl:"configuration_set_name,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MatchingTypes: set of string, required
	MatchingTypes terra.SetValue[terra.StringValue] `hcl:"matching_types,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// CloudwatchDestination: min=0
	CloudwatchDestination []seseventdestination.CloudwatchDestination `hcl:"cloudwatch_destination,block" validate:"min=0"`
	// KinesisDestination: optional
	KinesisDestination *seseventdestination.KinesisDestination `hcl:"kinesis_destination,block"`
	// SnsDestination: optional
	SnsDestination *seseventdestination.SnsDestination `hcl:"sns_destination,block"`
	// DependsOn contains resources that SesEventDestination depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sesEventDestinationAttributes struct {
	ref terra.Reference
}

func (sed sesEventDestinationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sed.ref.Append("arn"))
}

func (sed sesEventDestinationAttributes) ConfigurationSetName() terra.StringValue {
	return terra.ReferenceString(sed.ref.Append("configuration_set_name"))
}

func (sed sesEventDestinationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(sed.ref.Append("enabled"))
}

func (sed sesEventDestinationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sed.ref.Append("id"))
}

func (sed sesEventDestinationAttributes) MatchingTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sed.ref.Append("matching_types"))
}

func (sed sesEventDestinationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sed.ref.Append("name"))
}

func (sed sesEventDestinationAttributes) CloudwatchDestination() terra.SetValue[seseventdestination.CloudwatchDestinationAttributes] {
	return terra.ReferenceSet[seseventdestination.CloudwatchDestinationAttributes](sed.ref.Append("cloudwatch_destination"))
}

func (sed sesEventDestinationAttributes) KinesisDestination() terra.ListValue[seseventdestination.KinesisDestinationAttributes] {
	return terra.ReferenceList[seseventdestination.KinesisDestinationAttributes](sed.ref.Append("kinesis_destination"))
}

func (sed sesEventDestinationAttributes) SnsDestination() terra.ListValue[seseventdestination.SnsDestinationAttributes] {
	return terra.ReferenceList[seseventdestination.SnsDestinationAttributes](sed.ref.Append("sns_destination"))
}

type sesEventDestinationState struct {
	Arn                   string                                           `json:"arn"`
	ConfigurationSetName  string                                           `json:"configuration_set_name"`
	Enabled               bool                                             `json:"enabled"`
	Id                    string                                           `json:"id"`
	MatchingTypes         []string                                         `json:"matching_types"`
	Name                  string                                           `json:"name"`
	CloudwatchDestination []seseventdestination.CloudwatchDestinationState `json:"cloudwatch_destination"`
	KinesisDestination    []seseventdestination.KinesisDestinationState    `json:"kinesis_destination"`
	SnsDestination        []seseventdestination.SnsDestinationState        `json:"sns_destination"`
}
