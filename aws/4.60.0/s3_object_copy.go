// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3objectcopy "github.com/golingon/terraproviders/aws/4.60.0/s3objectcopy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3ObjectCopy(name string, args S3ObjectCopyArgs) *S3ObjectCopy {
	return &S3ObjectCopy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3ObjectCopy)(nil)

type S3ObjectCopy struct {
	Name  string
	Args  S3ObjectCopyArgs
	state *s3ObjectCopyState
}

func (soc *S3ObjectCopy) Type() string {
	return "aws_s3_object_copy"
}

func (soc *S3ObjectCopy) LocalName() string {
	return soc.Name
}

func (soc *S3ObjectCopy) Configuration() interface{} {
	return soc.Args
}

func (soc *S3ObjectCopy) Attributes() s3ObjectCopyAttributes {
	return s3ObjectCopyAttributes{ref: terra.ReferenceResource(soc)}
}

func (soc *S3ObjectCopy) ImportState(av io.Reader) error {
	soc.state = &s3ObjectCopyState{}
	if err := json.NewDecoder(av).Decode(soc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", soc.Type(), soc.LocalName(), err)
	}
	return nil
}

func (soc *S3ObjectCopy) State() (*s3ObjectCopyState, bool) {
	return soc.state, soc.state != nil
}

func (soc *S3ObjectCopy) StateMust() *s3ObjectCopyState {
	if soc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", soc.Type(), soc.LocalName()))
	}
	return soc.state
}

func (soc *S3ObjectCopy) DependOn() terra.Reference {
	return terra.ReferenceResource(soc)
}

type S3ObjectCopyArgs struct {
	// Acl: string, optional
	Acl terra.StringValue `hcl:"acl,attr"`
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// BucketKeyEnabled: bool, optional
	BucketKeyEnabled terra.BoolValue `hcl:"bucket_key_enabled,attr"`
	// CacheControl: string, optional
	CacheControl terra.StringValue `hcl:"cache_control,attr"`
	// ContentDisposition: string, optional
	ContentDisposition terra.StringValue `hcl:"content_disposition,attr"`
	// ContentEncoding: string, optional
	ContentEncoding terra.StringValue `hcl:"content_encoding,attr"`
	// ContentLanguage: string, optional
	ContentLanguage terra.StringValue `hcl:"content_language,attr"`
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// CopyIfMatch: string, optional
	CopyIfMatch terra.StringValue `hcl:"copy_if_match,attr"`
	// CopyIfModifiedSince: string, optional
	CopyIfModifiedSince terra.StringValue `hcl:"copy_if_modified_since,attr"`
	// CopyIfNoneMatch: string, optional
	CopyIfNoneMatch terra.StringValue `hcl:"copy_if_none_match,attr"`
	// CopyIfUnmodifiedSince: string, optional
	CopyIfUnmodifiedSince terra.StringValue `hcl:"copy_if_unmodified_since,attr"`
	// CustomerAlgorithm: string, optional
	CustomerAlgorithm terra.StringValue `hcl:"customer_algorithm,attr"`
	// CustomerKey: string, optional
	CustomerKey terra.StringValue `hcl:"customer_key,attr"`
	// CustomerKeyMd5: string, optional
	CustomerKeyMd5 terra.StringValue `hcl:"customer_key_md5,attr"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// ExpectedSourceBucketOwner: string, optional
	ExpectedSourceBucketOwner terra.StringValue `hcl:"expected_source_bucket_owner,attr"`
	// Expires: string, optional
	Expires terra.StringValue `hcl:"expires,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// KmsEncryptionContext: string, optional
	KmsEncryptionContext terra.StringValue `hcl:"kms_encryption_context,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// MetadataDirective: string, optional
	MetadataDirective terra.StringValue `hcl:"metadata_directive,attr"`
	// ObjectLockLegalHoldStatus: string, optional
	ObjectLockLegalHoldStatus terra.StringValue `hcl:"object_lock_legal_hold_status,attr"`
	// ObjectLockMode: string, optional
	ObjectLockMode terra.StringValue `hcl:"object_lock_mode,attr"`
	// ObjectLockRetainUntilDate: string, optional
	ObjectLockRetainUntilDate terra.StringValue `hcl:"object_lock_retain_until_date,attr"`
	// RequestPayer: string, optional
	RequestPayer terra.StringValue `hcl:"request_payer,attr"`
	// ServerSideEncryption: string, optional
	ServerSideEncryption terra.StringValue `hcl:"server_side_encryption,attr"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// SourceCustomerAlgorithm: string, optional
	SourceCustomerAlgorithm terra.StringValue `hcl:"source_customer_algorithm,attr"`
	// SourceCustomerKey: string, optional
	SourceCustomerKey terra.StringValue `hcl:"source_customer_key,attr"`
	// SourceCustomerKeyMd5: string, optional
	SourceCustomerKeyMd5 terra.StringValue `hcl:"source_customer_key_md5,attr"`
	// StorageClass: string, optional
	StorageClass terra.StringValue `hcl:"storage_class,attr"`
	// TaggingDirective: string, optional
	TaggingDirective terra.StringValue `hcl:"tagging_directive,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// WebsiteRedirect: string, optional
	WebsiteRedirect terra.StringValue `hcl:"website_redirect,attr"`
	// Grant: min=0
	Grant []s3objectcopy.Grant `hcl:"grant,block" validate:"min=0"`
	// DependsOn contains resources that S3ObjectCopy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3ObjectCopyAttributes struct {
	ref terra.Reference
}

func (soc s3ObjectCopyAttributes) Acl() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("acl"))
}

func (soc s3ObjectCopyAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("bucket"))
}

func (soc s3ObjectCopyAttributes) BucketKeyEnabled() terra.BoolValue {
	return terra.ReferenceBool(soc.ref.Append("bucket_key_enabled"))
}

func (soc s3ObjectCopyAttributes) CacheControl() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("cache_control"))
}

func (soc s3ObjectCopyAttributes) ContentDisposition() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("content_disposition"))
}

func (soc s3ObjectCopyAttributes) ContentEncoding() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("content_encoding"))
}

func (soc s3ObjectCopyAttributes) ContentLanguage() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("content_language"))
}

func (soc s3ObjectCopyAttributes) ContentType() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("content_type"))
}

func (soc s3ObjectCopyAttributes) CopyIfMatch() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("copy_if_match"))
}

func (soc s3ObjectCopyAttributes) CopyIfModifiedSince() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("copy_if_modified_since"))
}

func (soc s3ObjectCopyAttributes) CopyIfNoneMatch() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("copy_if_none_match"))
}

func (soc s3ObjectCopyAttributes) CopyIfUnmodifiedSince() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("copy_if_unmodified_since"))
}

func (soc s3ObjectCopyAttributes) CustomerAlgorithm() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("customer_algorithm"))
}

func (soc s3ObjectCopyAttributes) CustomerKey() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("customer_key"))
}

func (soc s3ObjectCopyAttributes) CustomerKeyMd5() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("customer_key_md5"))
}

func (soc s3ObjectCopyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("etag"))
}

func (soc s3ObjectCopyAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("expected_bucket_owner"))
}

func (soc s3ObjectCopyAttributes) ExpectedSourceBucketOwner() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("expected_source_bucket_owner"))
}

func (soc s3ObjectCopyAttributes) Expiration() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("expiration"))
}

func (soc s3ObjectCopyAttributes) Expires() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("expires"))
}

func (soc s3ObjectCopyAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceBool(soc.ref.Append("force_destroy"))
}

func (soc s3ObjectCopyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("id"))
}

func (soc s3ObjectCopyAttributes) Key() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("key"))
}

func (soc s3ObjectCopyAttributes) KmsEncryptionContext() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("kms_encryption_context"))
}

func (soc s3ObjectCopyAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("kms_key_id"))
}

func (soc s3ObjectCopyAttributes) LastModified() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("last_modified"))
}

func (soc s3ObjectCopyAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](soc.ref.Append("metadata"))
}

func (soc s3ObjectCopyAttributes) MetadataDirective() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("metadata_directive"))
}

func (soc s3ObjectCopyAttributes) ObjectLockLegalHoldStatus() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("object_lock_legal_hold_status"))
}

func (soc s3ObjectCopyAttributes) ObjectLockMode() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("object_lock_mode"))
}

func (soc s3ObjectCopyAttributes) ObjectLockRetainUntilDate() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("object_lock_retain_until_date"))
}

func (soc s3ObjectCopyAttributes) RequestCharged() terra.BoolValue {
	return terra.ReferenceBool(soc.ref.Append("request_charged"))
}

func (soc s3ObjectCopyAttributes) RequestPayer() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("request_payer"))
}

func (soc s3ObjectCopyAttributes) ServerSideEncryption() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("server_side_encryption"))
}

func (soc s3ObjectCopyAttributes) Source() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("source"))
}

func (soc s3ObjectCopyAttributes) SourceCustomerAlgorithm() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("source_customer_algorithm"))
}

func (soc s3ObjectCopyAttributes) SourceCustomerKey() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("source_customer_key"))
}

func (soc s3ObjectCopyAttributes) SourceCustomerKeyMd5() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("source_customer_key_md5"))
}

func (soc s3ObjectCopyAttributes) SourceVersionId() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("source_version_id"))
}

func (soc s3ObjectCopyAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("storage_class"))
}

func (soc s3ObjectCopyAttributes) TaggingDirective() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("tagging_directive"))
}

func (soc s3ObjectCopyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](soc.ref.Append("tags"))
}

func (soc s3ObjectCopyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](soc.ref.Append("tags_all"))
}

func (soc s3ObjectCopyAttributes) VersionId() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("version_id"))
}

func (soc s3ObjectCopyAttributes) WebsiteRedirect() terra.StringValue {
	return terra.ReferenceString(soc.ref.Append("website_redirect"))
}

func (soc s3ObjectCopyAttributes) Grant() terra.SetValue[s3objectcopy.GrantAttributes] {
	return terra.ReferenceSet[s3objectcopy.GrantAttributes](soc.ref.Append("grant"))
}

type s3ObjectCopyState struct {
	Acl                       string                    `json:"acl"`
	Bucket                    string                    `json:"bucket"`
	BucketKeyEnabled          bool                      `json:"bucket_key_enabled"`
	CacheControl              string                    `json:"cache_control"`
	ContentDisposition        string                    `json:"content_disposition"`
	ContentEncoding           string                    `json:"content_encoding"`
	ContentLanguage           string                    `json:"content_language"`
	ContentType               string                    `json:"content_type"`
	CopyIfMatch               string                    `json:"copy_if_match"`
	CopyIfModifiedSince       string                    `json:"copy_if_modified_since"`
	CopyIfNoneMatch           string                    `json:"copy_if_none_match"`
	CopyIfUnmodifiedSince     string                    `json:"copy_if_unmodified_since"`
	CustomerAlgorithm         string                    `json:"customer_algorithm"`
	CustomerKey               string                    `json:"customer_key"`
	CustomerKeyMd5            string                    `json:"customer_key_md5"`
	Etag                      string                    `json:"etag"`
	ExpectedBucketOwner       string                    `json:"expected_bucket_owner"`
	ExpectedSourceBucketOwner string                    `json:"expected_source_bucket_owner"`
	Expiration                string                    `json:"expiration"`
	Expires                   string                    `json:"expires"`
	ForceDestroy              bool                      `json:"force_destroy"`
	Id                        string                    `json:"id"`
	Key                       string                    `json:"key"`
	KmsEncryptionContext      string                    `json:"kms_encryption_context"`
	KmsKeyId                  string                    `json:"kms_key_id"`
	LastModified              string                    `json:"last_modified"`
	Metadata                  map[string]string         `json:"metadata"`
	MetadataDirective         string                    `json:"metadata_directive"`
	ObjectLockLegalHoldStatus string                    `json:"object_lock_legal_hold_status"`
	ObjectLockMode            string                    `json:"object_lock_mode"`
	ObjectLockRetainUntilDate string                    `json:"object_lock_retain_until_date"`
	RequestCharged            bool                      `json:"request_charged"`
	RequestPayer              string                    `json:"request_payer"`
	ServerSideEncryption      string                    `json:"server_side_encryption"`
	Source                    string                    `json:"source"`
	SourceCustomerAlgorithm   string                    `json:"source_customer_algorithm"`
	SourceCustomerKey         string                    `json:"source_customer_key"`
	SourceCustomerKeyMd5      string                    `json:"source_customer_key_md5"`
	SourceVersionId           string                    `json:"source_version_id"`
	StorageClass              string                    `json:"storage_class"`
	TaggingDirective          string                    `json:"tagging_directive"`
	Tags                      map[string]string         `json:"tags"`
	TagsAll                   map[string]string         `json:"tags_all"`
	VersionId                 string                    `json:"version_id"`
	WebsiteRedirect           string                    `json:"website_redirect"`
	Grant                     []s3objectcopy.GrantState `json:"grant"`
}
