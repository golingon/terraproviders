// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package cloudfrontmonitoringsubscription

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type MonitoringSubscription struct {
	// RealtimeMetricsSubscriptionConfig: required
	RealtimeMetricsSubscriptionConfig *RealtimeMetricsSubscriptionConfig `hcl:"realtime_metrics_subscription_config,block" validate:"required"`
}

type RealtimeMetricsSubscriptionConfig struct {
	// RealtimeMetricsSubscriptionStatus: string, required
	RealtimeMetricsSubscriptionStatus terra.StringValue `hcl:"realtime_metrics_subscription_status,attr" validate:"required"`
}

type MonitoringSubscriptionAttributes struct {
	ref terra.Reference
}

func (ms MonitoringSubscriptionAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms MonitoringSubscriptionAttributes) InternalWithRef(ref terra.Reference) MonitoringSubscriptionAttributes {
	return MonitoringSubscriptionAttributes{ref: ref}
}

func (ms MonitoringSubscriptionAttributes) InternalTokens() hclwrite.Tokens {
	return ms.ref.InternalTokens()
}

func (ms MonitoringSubscriptionAttributes) RealtimeMetricsSubscriptionConfig() terra.ListValue[RealtimeMetricsSubscriptionConfigAttributes] {
	return terra.ReferenceAsList[RealtimeMetricsSubscriptionConfigAttributes](ms.ref.Append("realtime_metrics_subscription_config"))
}

type RealtimeMetricsSubscriptionConfigAttributes struct {
	ref terra.Reference
}

func (rmsc RealtimeMetricsSubscriptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return rmsc.ref, nil
}

func (rmsc RealtimeMetricsSubscriptionConfigAttributes) InternalWithRef(ref terra.Reference) RealtimeMetricsSubscriptionConfigAttributes {
	return RealtimeMetricsSubscriptionConfigAttributes{ref: ref}
}

func (rmsc RealtimeMetricsSubscriptionConfigAttributes) InternalTokens() hclwrite.Tokens {
	return rmsc.ref.InternalTokens()
}

func (rmsc RealtimeMetricsSubscriptionConfigAttributes) RealtimeMetricsSubscriptionStatus() terra.StringValue {
	return terra.ReferenceAsString(rmsc.ref.Append("realtime_metrics_subscription_status"))
}

type MonitoringSubscriptionState struct {
	RealtimeMetricsSubscriptionConfig []RealtimeMetricsSubscriptionConfigState `json:"realtime_metrics_subscription_config"`
}

type RealtimeMetricsSubscriptionConfigState struct {
	RealtimeMetricsSubscriptionStatus string `json:"realtime_metrics_subscription_status"`
}
