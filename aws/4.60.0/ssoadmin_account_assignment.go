// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSsoadminAccountAssignment(name string, args SsoadminAccountAssignmentArgs) *SsoadminAccountAssignment {
	return &SsoadminAccountAssignment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SsoadminAccountAssignment)(nil)

type SsoadminAccountAssignment struct {
	Name  string
	Args  SsoadminAccountAssignmentArgs
	state *ssoadminAccountAssignmentState
}

func (saa *SsoadminAccountAssignment) Type() string {
	return "aws_ssoadmin_account_assignment"
}

func (saa *SsoadminAccountAssignment) LocalName() string {
	return saa.Name
}

func (saa *SsoadminAccountAssignment) Configuration() interface{} {
	return saa.Args
}

func (saa *SsoadminAccountAssignment) Attributes() ssoadminAccountAssignmentAttributes {
	return ssoadminAccountAssignmentAttributes{ref: terra.ReferenceResource(saa)}
}

func (saa *SsoadminAccountAssignment) ImportState(av io.Reader) error {
	saa.state = &ssoadminAccountAssignmentState{}
	if err := json.NewDecoder(av).Decode(saa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", saa.Type(), saa.LocalName(), err)
	}
	return nil
}

func (saa *SsoadminAccountAssignment) State() (*ssoadminAccountAssignmentState, bool) {
	return saa.state, saa.state != nil
}

func (saa *SsoadminAccountAssignment) StateMust() *ssoadminAccountAssignmentState {
	if saa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", saa.Type(), saa.LocalName()))
	}
	return saa.state
}

func (saa *SsoadminAccountAssignment) DependOn() terra.Reference {
	return terra.ReferenceResource(saa)
}

type SsoadminAccountAssignmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceArn: string, required
	InstanceArn terra.StringValue `hcl:"instance_arn,attr" validate:"required"`
	// PermissionSetArn: string, required
	PermissionSetArn terra.StringValue `hcl:"permission_set_arn,attr" validate:"required"`
	// PrincipalId: string, required
	PrincipalId terra.StringValue `hcl:"principal_id,attr" validate:"required"`
	// PrincipalType: string, required
	PrincipalType terra.StringValue `hcl:"principal_type,attr" validate:"required"`
	// TargetId: string, required
	TargetId terra.StringValue `hcl:"target_id,attr" validate:"required"`
	// TargetType: string, optional
	TargetType terra.StringValue `hcl:"target_type,attr"`
	// DependsOn contains resources that SsoadminAccountAssignment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ssoadminAccountAssignmentAttributes struct {
	ref terra.Reference
}

func (saa ssoadminAccountAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(saa.ref.Append("id"))
}

func (saa ssoadminAccountAssignmentAttributes) InstanceArn() terra.StringValue {
	return terra.ReferenceString(saa.ref.Append("instance_arn"))
}

func (saa ssoadminAccountAssignmentAttributes) PermissionSetArn() terra.StringValue {
	return terra.ReferenceString(saa.ref.Append("permission_set_arn"))
}

func (saa ssoadminAccountAssignmentAttributes) PrincipalId() terra.StringValue {
	return terra.ReferenceString(saa.ref.Append("principal_id"))
}

func (saa ssoadminAccountAssignmentAttributes) PrincipalType() terra.StringValue {
	return terra.ReferenceString(saa.ref.Append("principal_type"))
}

func (saa ssoadminAccountAssignmentAttributes) TargetId() terra.StringValue {
	return terra.ReferenceString(saa.ref.Append("target_id"))
}

func (saa ssoadminAccountAssignmentAttributes) TargetType() terra.StringValue {
	return terra.ReferenceString(saa.ref.Append("target_type"))
}

type ssoadminAccountAssignmentState struct {
	Id               string `json:"id"`
	InstanceArn      string `json:"instance_arn"`
	PermissionSetArn string `json:"permission_set_arn"`
	PrincipalId      string `json:"principal_id"`
	PrincipalType    string `json:"principal_type"`
	TargetId         string `json:"target_id"`
	TargetType       string `json:"target_type"`
}
