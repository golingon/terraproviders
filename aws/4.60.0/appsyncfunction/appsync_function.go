// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package appsyncfunction

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Runtime struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RuntimeVersion: string, required
	RuntimeVersion terra.StringValue `hcl:"runtime_version,attr" validate:"required"`
}

type SyncConfig struct {
	// ConflictDetection: string, optional
	ConflictDetection terra.StringValue `hcl:"conflict_detection,attr"`
	// ConflictHandler: string, optional
	ConflictHandler terra.StringValue `hcl:"conflict_handler,attr"`
	// LambdaConflictHandlerConfig: optional
	LambdaConflictHandlerConfig *LambdaConflictHandlerConfig `hcl:"lambda_conflict_handler_config,block"`
}

type LambdaConflictHandlerConfig struct {
	// LambdaConflictHandlerArn: string, optional
	LambdaConflictHandlerArn terra.StringValue `hcl:"lambda_conflict_handler_arn,attr"`
}

type RuntimeAttributes struct {
	ref terra.Reference
}

func (r RuntimeAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RuntimeAttributes) InternalWithRef(ref terra.Reference) RuntimeAttributes {
	return RuntimeAttributes{ref: ref}
}

func (r RuntimeAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RuntimeAttributes) Name() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("name"))
}

func (r RuntimeAttributes) RuntimeVersion() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("runtime_version"))
}

type SyncConfigAttributes struct {
	ref terra.Reference
}

func (sc SyncConfigAttributes) InternalRef() terra.Reference {
	return sc.ref
}

func (sc SyncConfigAttributes) InternalWithRef(ref terra.Reference) SyncConfigAttributes {
	return SyncConfigAttributes{ref: ref}
}

func (sc SyncConfigAttributes) InternalTokens() hclwrite.Tokens {
	return sc.ref.InternalTokens()
}

func (sc SyncConfigAttributes) ConflictDetection() terra.StringValue {
	return terra.ReferenceString(sc.ref.Append("conflict_detection"))
}

func (sc SyncConfigAttributes) ConflictHandler() terra.StringValue {
	return terra.ReferenceString(sc.ref.Append("conflict_handler"))
}

func (sc SyncConfigAttributes) LambdaConflictHandlerConfig() terra.ListValue[LambdaConflictHandlerConfigAttributes] {
	return terra.ReferenceList[LambdaConflictHandlerConfigAttributes](sc.ref.Append("lambda_conflict_handler_config"))
}

type LambdaConflictHandlerConfigAttributes struct {
	ref terra.Reference
}

func (lchc LambdaConflictHandlerConfigAttributes) InternalRef() terra.Reference {
	return lchc.ref
}

func (lchc LambdaConflictHandlerConfigAttributes) InternalWithRef(ref terra.Reference) LambdaConflictHandlerConfigAttributes {
	return LambdaConflictHandlerConfigAttributes{ref: ref}
}

func (lchc LambdaConflictHandlerConfigAttributes) InternalTokens() hclwrite.Tokens {
	return lchc.ref.InternalTokens()
}

func (lchc LambdaConflictHandlerConfigAttributes) LambdaConflictHandlerArn() terra.StringValue {
	return terra.ReferenceString(lchc.ref.Append("lambda_conflict_handler_arn"))
}

type RuntimeState struct {
	Name           string `json:"name"`
	RuntimeVersion string `json:"runtime_version"`
}

type SyncConfigState struct {
	ConflictDetection           string                             `json:"conflict_detection"`
	ConflictHandler             string                             `json:"conflict_handler"`
	LambdaConflictHandlerConfig []LambdaConflictHandlerConfigState `json:"lambda_conflict_handler_config"`
}

type LambdaConflictHandlerConfigState struct {
	LambdaConflictHandlerArn string `json:"lambda_conflict_handler_arn"`
}
