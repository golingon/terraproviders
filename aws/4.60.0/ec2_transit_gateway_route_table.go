// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewEc2TransitGatewayRouteTable creates a new instance of [Ec2TransitGatewayRouteTable].
func NewEc2TransitGatewayRouteTable(name string, args Ec2TransitGatewayRouteTableArgs) *Ec2TransitGatewayRouteTable {
	return &Ec2TransitGatewayRouteTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TransitGatewayRouteTable)(nil)

// Ec2TransitGatewayRouteTable represents the Terraform resource aws_ec2_transit_gateway_route_table.
type Ec2TransitGatewayRouteTable struct {
	Name      string
	Args      Ec2TransitGatewayRouteTableArgs
	state     *ec2TransitGatewayRouteTableState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Ec2TransitGatewayRouteTable].
func (etgrt *Ec2TransitGatewayRouteTable) Type() string {
	return "aws_ec2_transit_gateway_route_table"
}

// LocalName returns the local name for [Ec2TransitGatewayRouteTable].
func (etgrt *Ec2TransitGatewayRouteTable) LocalName() string {
	return etgrt.Name
}

// Configuration returns the configuration (args) for [Ec2TransitGatewayRouteTable].
func (etgrt *Ec2TransitGatewayRouteTable) Configuration() interface{} {
	return etgrt.Args
}

// DependOn is used for other resources to depend on [Ec2TransitGatewayRouteTable].
func (etgrt *Ec2TransitGatewayRouteTable) DependOn() terra.Reference {
	return terra.ReferenceResource(etgrt)
}

// Dependencies returns the list of resources [Ec2TransitGatewayRouteTable] depends_on.
func (etgrt *Ec2TransitGatewayRouteTable) Dependencies() terra.Dependencies {
	return etgrt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Ec2TransitGatewayRouteTable].
func (etgrt *Ec2TransitGatewayRouteTable) LifecycleManagement() *terra.Lifecycle {
	return etgrt.Lifecycle
}

// Attributes returns the attributes for [Ec2TransitGatewayRouteTable].
func (etgrt *Ec2TransitGatewayRouteTable) Attributes() ec2TransitGatewayRouteTableAttributes {
	return ec2TransitGatewayRouteTableAttributes{ref: terra.ReferenceResource(etgrt)}
}

// ImportState imports the given attribute values into [Ec2TransitGatewayRouteTable]'s state.
func (etgrt *Ec2TransitGatewayRouteTable) ImportState(av io.Reader) error {
	etgrt.state = &ec2TransitGatewayRouteTableState{}
	if err := json.NewDecoder(av).Decode(etgrt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etgrt.Type(), etgrt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Ec2TransitGatewayRouteTable] has state.
func (etgrt *Ec2TransitGatewayRouteTable) State() (*ec2TransitGatewayRouteTableState, bool) {
	return etgrt.state, etgrt.state != nil
}

// StateMust returns the state for [Ec2TransitGatewayRouteTable]. Panics if the state is nil.
func (etgrt *Ec2TransitGatewayRouteTable) StateMust() *ec2TransitGatewayRouteTableState {
	if etgrt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etgrt.Type(), etgrt.LocalName()))
	}
	return etgrt.state
}

// Ec2TransitGatewayRouteTableArgs contains the configurations for aws_ec2_transit_gateway_route_table.
type Ec2TransitGatewayRouteTableArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitGatewayId: string, required
	TransitGatewayId terra.StringValue `hcl:"transit_gateway_id,attr" validate:"required"`
}
type ec2TransitGatewayRouteTableAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ec2_transit_gateway_route_table.
func (etgrt ec2TransitGatewayRouteTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(etgrt.ref.Append("arn"))
}

// DefaultAssociationRouteTable returns a reference to field default_association_route_table of aws_ec2_transit_gateway_route_table.
func (etgrt ec2TransitGatewayRouteTableAttributes) DefaultAssociationRouteTable() terra.BoolValue {
	return terra.ReferenceAsBool(etgrt.ref.Append("default_association_route_table"))
}

// DefaultPropagationRouteTable returns a reference to field default_propagation_route_table of aws_ec2_transit_gateway_route_table.
func (etgrt ec2TransitGatewayRouteTableAttributes) DefaultPropagationRouteTable() terra.BoolValue {
	return terra.ReferenceAsBool(etgrt.ref.Append("default_propagation_route_table"))
}

// Id returns a reference to field id of aws_ec2_transit_gateway_route_table.
func (etgrt ec2TransitGatewayRouteTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(etgrt.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_ec2_transit_gateway_route_table.
func (etgrt ec2TransitGatewayRouteTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](etgrt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_transit_gateway_route_table.
func (etgrt ec2TransitGatewayRouteTableAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](etgrt.ref.Append("tags_all"))
}

// TransitGatewayId returns a reference to field transit_gateway_id of aws_ec2_transit_gateway_route_table.
func (etgrt ec2TransitGatewayRouteTableAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceAsString(etgrt.ref.Append("transit_gateway_id"))
}

type ec2TransitGatewayRouteTableState struct {
	Arn                          string            `json:"arn"`
	DefaultAssociationRouteTable bool              `json:"default_association_route_table"`
	DefaultPropagationRouteTable bool              `json:"default_propagation_route_table"`
	Id                           string            `json:"id"`
	Tags                         map[string]string `json:"tags"`
	TagsAll                      map[string]string `json:"tags_all"`
	TransitGatewayId             string            `json:"transit_gateway_id"`
}
