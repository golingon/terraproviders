// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2TransitGatewayRouteTable(name string, args Ec2TransitGatewayRouteTableArgs) *Ec2TransitGatewayRouteTable {
	return &Ec2TransitGatewayRouteTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TransitGatewayRouteTable)(nil)

type Ec2TransitGatewayRouteTable struct {
	Name  string
	Args  Ec2TransitGatewayRouteTableArgs
	state *ec2TransitGatewayRouteTableState
}

func (etgrt *Ec2TransitGatewayRouteTable) Type() string {
	return "aws_ec2_transit_gateway_route_table"
}

func (etgrt *Ec2TransitGatewayRouteTable) LocalName() string {
	return etgrt.Name
}

func (etgrt *Ec2TransitGatewayRouteTable) Configuration() interface{} {
	return etgrt.Args
}

func (etgrt *Ec2TransitGatewayRouteTable) Attributes() ec2TransitGatewayRouteTableAttributes {
	return ec2TransitGatewayRouteTableAttributes{ref: terra.ReferenceResource(etgrt)}
}

func (etgrt *Ec2TransitGatewayRouteTable) ImportState(av io.Reader) error {
	etgrt.state = &ec2TransitGatewayRouteTableState{}
	if err := json.NewDecoder(av).Decode(etgrt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etgrt.Type(), etgrt.LocalName(), err)
	}
	return nil
}

func (etgrt *Ec2TransitGatewayRouteTable) State() (*ec2TransitGatewayRouteTableState, bool) {
	return etgrt.state, etgrt.state != nil
}

func (etgrt *Ec2TransitGatewayRouteTable) StateMust() *ec2TransitGatewayRouteTableState {
	if etgrt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etgrt.Type(), etgrt.LocalName()))
	}
	return etgrt.state
}

func (etgrt *Ec2TransitGatewayRouteTable) DependOn() terra.Reference {
	return terra.ReferenceResource(etgrt)
}

type Ec2TransitGatewayRouteTableArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitGatewayId: string, required
	TransitGatewayId terra.StringValue `hcl:"transit_gateway_id,attr" validate:"required"`
	// DependsOn contains resources that Ec2TransitGatewayRouteTable depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2TransitGatewayRouteTableAttributes struct {
	ref terra.Reference
}

func (etgrt ec2TransitGatewayRouteTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(etgrt.ref.Append("arn"))
}

func (etgrt ec2TransitGatewayRouteTableAttributes) DefaultAssociationRouteTable() terra.BoolValue {
	return terra.ReferenceBool(etgrt.ref.Append("default_association_route_table"))
}

func (etgrt ec2TransitGatewayRouteTableAttributes) DefaultPropagationRouteTable() terra.BoolValue {
	return terra.ReferenceBool(etgrt.ref.Append("default_propagation_route_table"))
}

func (etgrt ec2TransitGatewayRouteTableAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etgrt.ref.Append("id"))
}

func (etgrt ec2TransitGatewayRouteTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etgrt.ref.Append("tags"))
}

func (etgrt ec2TransitGatewayRouteTableAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etgrt.ref.Append("tags_all"))
}

func (etgrt ec2TransitGatewayRouteTableAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceString(etgrt.ref.Append("transit_gateway_id"))
}

type ec2TransitGatewayRouteTableState struct {
	Arn                          string            `json:"arn"`
	DefaultAssociationRouteTable bool              `json:"default_association_route_table"`
	DefaultPropagationRouteTable bool              `json:"default_propagation_route_table"`
	Id                           string            `json:"id"`
	Tags                         map[string]string `json:"tags"`
	TagsAll                      map[string]string `json:"tags_all"`
	TransitGatewayId             string            `json:"transit_gateway_id"`
}
