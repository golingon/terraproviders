// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewDynamodbTableItem creates a new instance of [DynamodbTableItem].
func NewDynamodbTableItem(name string, args DynamodbTableItemArgs) *DynamodbTableItem {
	return &DynamodbTableItem{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DynamodbTableItem)(nil)

// DynamodbTableItem represents the Terraform resource aws_dynamodb_table_item.
type DynamodbTableItem struct {
	Name      string
	Args      DynamodbTableItemArgs
	state     *dynamodbTableItemState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [DynamodbTableItem].
func (dti *DynamodbTableItem) Type() string {
	return "aws_dynamodb_table_item"
}

// LocalName returns the local name for [DynamodbTableItem].
func (dti *DynamodbTableItem) LocalName() string {
	return dti.Name
}

// Configuration returns the configuration (args) for [DynamodbTableItem].
func (dti *DynamodbTableItem) Configuration() interface{} {
	return dti.Args
}

// DependOn is used for other resources to depend on [DynamodbTableItem].
func (dti *DynamodbTableItem) DependOn() terra.Reference {
	return terra.ReferenceResource(dti)
}

// Dependencies returns the list of resources [DynamodbTableItem] depends_on.
func (dti *DynamodbTableItem) Dependencies() terra.Dependencies {
	return dti.DependsOn
}

// LifecycleManagement returns the lifecycle block for [DynamodbTableItem].
func (dti *DynamodbTableItem) LifecycleManagement() *terra.Lifecycle {
	return dti.Lifecycle
}

// Attributes returns the attributes for [DynamodbTableItem].
func (dti *DynamodbTableItem) Attributes() dynamodbTableItemAttributes {
	return dynamodbTableItemAttributes{ref: terra.ReferenceResource(dti)}
}

// ImportState imports the given attribute values into [DynamodbTableItem]'s state.
func (dti *DynamodbTableItem) ImportState(av io.Reader) error {
	dti.state = &dynamodbTableItemState{}
	if err := json.NewDecoder(av).Decode(dti.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dti.Type(), dti.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [DynamodbTableItem] has state.
func (dti *DynamodbTableItem) State() (*dynamodbTableItemState, bool) {
	return dti.state, dti.state != nil
}

// StateMust returns the state for [DynamodbTableItem]. Panics if the state is nil.
func (dti *DynamodbTableItem) StateMust() *dynamodbTableItemState {
	if dti.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dti.Type(), dti.LocalName()))
	}
	return dti.state
}

// DynamodbTableItemArgs contains the configurations for aws_dynamodb_table_item.
type DynamodbTableItemArgs struct {
	// HashKey: string, required
	HashKey terra.StringValue `hcl:"hash_key,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Item: string, required
	Item terra.StringValue `hcl:"item,attr" validate:"required"`
	// RangeKey: string, optional
	RangeKey terra.StringValue `hcl:"range_key,attr"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}
type dynamodbTableItemAttributes struct {
	ref terra.Reference
}

// HashKey returns a reference to field hash_key of aws_dynamodb_table_item.
func (dti dynamodbTableItemAttributes) HashKey() terra.StringValue {
	return terra.ReferenceAsString(dti.ref.Append("hash_key"))
}

// Id returns a reference to field id of aws_dynamodb_table_item.
func (dti dynamodbTableItemAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dti.ref.Append("id"))
}

// Item returns a reference to field item of aws_dynamodb_table_item.
func (dti dynamodbTableItemAttributes) Item() terra.StringValue {
	return terra.ReferenceAsString(dti.ref.Append("item"))
}

// RangeKey returns a reference to field range_key of aws_dynamodb_table_item.
func (dti dynamodbTableItemAttributes) RangeKey() terra.StringValue {
	return terra.ReferenceAsString(dti.ref.Append("range_key"))
}

// TableName returns a reference to field table_name of aws_dynamodb_table_item.
func (dti dynamodbTableItemAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(dti.ref.Append("table_name"))
}

type dynamodbTableItemState struct {
	HashKey   string `json:"hash_key"`
	Id        string `json:"id"`
	Item      string `json:"item"`
	RangeKey  string `json:"range_key"`
	TableName string `json:"table_name"`
}
