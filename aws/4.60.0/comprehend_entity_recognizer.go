// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	comprehendentityrecognizer "github.com/golingon/terraproviders/aws/4.60.0/comprehendentityrecognizer"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewComprehendEntityRecognizer(name string, args ComprehendEntityRecognizerArgs) *ComprehendEntityRecognizer {
	return &ComprehendEntityRecognizer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ComprehendEntityRecognizer)(nil)

type ComprehendEntityRecognizer struct {
	Name  string
	Args  ComprehendEntityRecognizerArgs
	state *comprehendEntityRecognizerState
}

func (cer *ComprehendEntityRecognizer) Type() string {
	return "aws_comprehend_entity_recognizer"
}

func (cer *ComprehendEntityRecognizer) LocalName() string {
	return cer.Name
}

func (cer *ComprehendEntityRecognizer) Configuration() interface{} {
	return cer.Args
}

func (cer *ComprehendEntityRecognizer) Attributes() comprehendEntityRecognizerAttributes {
	return comprehendEntityRecognizerAttributes{ref: terra.ReferenceResource(cer)}
}

func (cer *ComprehendEntityRecognizer) ImportState(av io.Reader) error {
	cer.state = &comprehendEntityRecognizerState{}
	if err := json.NewDecoder(av).Decode(cer.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cer.Type(), cer.LocalName(), err)
	}
	return nil
}

func (cer *ComprehendEntityRecognizer) State() (*comprehendEntityRecognizerState, bool) {
	return cer.state, cer.state != nil
}

func (cer *ComprehendEntityRecognizer) StateMust() *comprehendEntityRecognizerState {
	if cer.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cer.Type(), cer.LocalName()))
	}
	return cer.state
}

func (cer *ComprehendEntityRecognizer) DependOn() terra.Reference {
	return terra.ReferenceResource(cer)
}

type ComprehendEntityRecognizerArgs struct {
	// DataAccessRoleArn: string, required
	DataAccessRoleArn terra.StringValue `hcl:"data_access_role_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
	// ModelKmsKeyId: string, optional
	ModelKmsKeyId terra.StringValue `hcl:"model_kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VersionName: string, optional
	VersionName terra.StringValue `hcl:"version_name,attr"`
	// VersionNamePrefix: string, optional
	VersionNamePrefix terra.StringValue `hcl:"version_name_prefix,attr"`
	// VolumeKmsKeyId: string, optional
	VolumeKmsKeyId terra.StringValue `hcl:"volume_kms_key_id,attr"`
	// InputDataConfig: required
	InputDataConfig *comprehendentityrecognizer.InputDataConfig `hcl:"input_data_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *comprehendentityrecognizer.Timeouts `hcl:"timeouts,block"`
	// VpcConfig: optional
	VpcConfig *comprehendentityrecognizer.VpcConfig `hcl:"vpc_config,block"`
	// DependsOn contains resources that ComprehendEntityRecognizer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type comprehendEntityRecognizerAttributes struct {
	ref terra.Reference
}

func (cer comprehendEntityRecognizerAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cer.ref.Append("arn"))
}

func (cer comprehendEntityRecognizerAttributes) DataAccessRoleArn() terra.StringValue {
	return terra.ReferenceString(cer.ref.Append("data_access_role_arn"))
}

func (cer comprehendEntityRecognizerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cer.ref.Append("id"))
}

func (cer comprehendEntityRecognizerAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceString(cer.ref.Append("language_code"))
}

func (cer comprehendEntityRecognizerAttributes) ModelKmsKeyId() terra.StringValue {
	return terra.ReferenceString(cer.ref.Append("model_kms_key_id"))
}

func (cer comprehendEntityRecognizerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cer.ref.Append("name"))
}

func (cer comprehendEntityRecognizerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cer.ref.Append("tags"))
}

func (cer comprehendEntityRecognizerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cer.ref.Append("tags_all"))
}

func (cer comprehendEntityRecognizerAttributes) VersionName() terra.StringValue {
	return terra.ReferenceString(cer.ref.Append("version_name"))
}

func (cer comprehendEntityRecognizerAttributes) VersionNamePrefix() terra.StringValue {
	return terra.ReferenceString(cer.ref.Append("version_name_prefix"))
}

func (cer comprehendEntityRecognizerAttributes) VolumeKmsKeyId() terra.StringValue {
	return terra.ReferenceString(cer.ref.Append("volume_kms_key_id"))
}

func (cer comprehendEntityRecognizerAttributes) InputDataConfig() terra.ListValue[comprehendentityrecognizer.InputDataConfigAttributes] {
	return terra.ReferenceList[comprehendentityrecognizer.InputDataConfigAttributes](cer.ref.Append("input_data_config"))
}

func (cer comprehendEntityRecognizerAttributes) Timeouts() comprehendentityrecognizer.TimeoutsAttributes {
	return terra.ReferenceSingle[comprehendentityrecognizer.TimeoutsAttributes](cer.ref.Append("timeouts"))
}

func (cer comprehendEntityRecognizerAttributes) VpcConfig() terra.ListValue[comprehendentityrecognizer.VpcConfigAttributes] {
	return terra.ReferenceList[comprehendentityrecognizer.VpcConfigAttributes](cer.ref.Append("vpc_config"))
}

type comprehendEntityRecognizerState struct {
	Arn               string                                            `json:"arn"`
	DataAccessRoleArn string                                            `json:"data_access_role_arn"`
	Id                string                                            `json:"id"`
	LanguageCode      string                                            `json:"language_code"`
	ModelKmsKeyId     string                                            `json:"model_kms_key_id"`
	Name              string                                            `json:"name"`
	Tags              map[string]string                                 `json:"tags"`
	TagsAll           map[string]string                                 `json:"tags_all"`
	VersionName       string                                            `json:"version_name"`
	VersionNamePrefix string                                            `json:"version_name_prefix"`
	VolumeKmsKeyId    string                                            `json:"volume_kms_key_id"`
	InputDataConfig   []comprehendentityrecognizer.InputDataConfigState `json:"input_data_config"`
	Timeouts          *comprehendentityrecognizer.TimeoutsState         `json:"timeouts"`
	VpcConfig         []comprehendentityrecognizer.VpcConfigState       `json:"vpc_config"`
}
