// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package ec2fleet

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type FleetInstanceSet struct {
	// InstanceIds: list of string, optional
	InstanceIds terra.ListValue[terra.StringValue] `hcl:"instance_ids,attr"`
	// InstanceType: string, optional
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// Lifecycle: string, optional
	Lifecycle terra.StringValue `hcl:"lifecycle,attr"`
	// Platform: string, optional
	Platform terra.StringValue `hcl:"platform,attr"`
}

type LaunchTemplateConfig struct {
	// LaunchTemplateSpecification: optional
	LaunchTemplateSpecification *LaunchTemplateSpecification `hcl:"launch_template_specification,block"`
	// Override: min=0,max=300
	Override []Override `hcl:"override,block" validate:"min=0,max=300"`
}

type LaunchTemplateSpecification struct {
	// LaunchTemplateId: string, optional
	LaunchTemplateId terra.StringValue `hcl:"launch_template_id,attr"`
	// LaunchTemplateName: string, optional
	LaunchTemplateName terra.StringValue `hcl:"launch_template_name,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type Override struct {
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// InstanceType: string, optional
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// MaxPrice: string, optional
	MaxPrice terra.StringValue `hcl:"max_price,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// WeightedCapacity: number, optional
	WeightedCapacity terra.NumberValue `hcl:"weighted_capacity,attr"`
	// InstanceRequirements: optional
	InstanceRequirements *InstanceRequirements `hcl:"instance_requirements,block"`
}

type InstanceRequirements struct {
	// AcceleratorManufacturers: set of string, optional
	AcceleratorManufacturers terra.SetValue[terra.StringValue] `hcl:"accelerator_manufacturers,attr"`
	// AcceleratorNames: set of string, optional
	AcceleratorNames terra.SetValue[terra.StringValue] `hcl:"accelerator_names,attr"`
	// AcceleratorTypes: set of string, optional
	AcceleratorTypes terra.SetValue[terra.StringValue] `hcl:"accelerator_types,attr"`
	// AllowedInstanceTypes: set of string, optional
	AllowedInstanceTypes terra.SetValue[terra.StringValue] `hcl:"allowed_instance_types,attr"`
	// BareMetal: string, optional
	BareMetal terra.StringValue `hcl:"bare_metal,attr"`
	// BurstablePerformance: string, optional
	BurstablePerformance terra.StringValue `hcl:"burstable_performance,attr"`
	// CpuManufacturers: set of string, optional
	CpuManufacturers terra.SetValue[terra.StringValue] `hcl:"cpu_manufacturers,attr"`
	// ExcludedInstanceTypes: set of string, optional
	ExcludedInstanceTypes terra.SetValue[terra.StringValue] `hcl:"excluded_instance_types,attr"`
	// InstanceGenerations: set of string, optional
	InstanceGenerations terra.SetValue[terra.StringValue] `hcl:"instance_generations,attr"`
	// LocalStorage: string, optional
	LocalStorage terra.StringValue `hcl:"local_storage,attr"`
	// LocalStorageTypes: set of string, optional
	LocalStorageTypes terra.SetValue[terra.StringValue] `hcl:"local_storage_types,attr"`
	// OnDemandMaxPricePercentageOverLowestPrice: number, optional
	OnDemandMaxPricePercentageOverLowestPrice terra.NumberValue `hcl:"on_demand_max_price_percentage_over_lowest_price,attr"`
	// RequireHibernateSupport: bool, optional
	RequireHibernateSupport terra.BoolValue `hcl:"require_hibernate_support,attr"`
	// SpotMaxPricePercentageOverLowestPrice: number, optional
	SpotMaxPricePercentageOverLowestPrice terra.NumberValue `hcl:"spot_max_price_percentage_over_lowest_price,attr"`
	// AcceleratorCount: optional
	AcceleratorCount *AcceleratorCount `hcl:"accelerator_count,block"`
	// AcceleratorTotalMemoryMib: optional
	AcceleratorTotalMemoryMib *AcceleratorTotalMemoryMib `hcl:"accelerator_total_memory_mib,block"`
	// BaselineEbsBandwidthMbps: optional
	BaselineEbsBandwidthMbps *BaselineEbsBandwidthMbps `hcl:"baseline_ebs_bandwidth_mbps,block"`
	// MemoryGibPerVcpu: optional
	MemoryGibPerVcpu *MemoryGibPerVcpu `hcl:"memory_gib_per_vcpu,block"`
	// MemoryMib: required
	MemoryMib *MemoryMib `hcl:"memory_mib,block" validate:"required"`
	// NetworkBandwidthGbps: optional
	NetworkBandwidthGbps *NetworkBandwidthGbps `hcl:"network_bandwidth_gbps,block"`
	// NetworkInterfaceCount: optional
	NetworkInterfaceCount *NetworkInterfaceCount `hcl:"network_interface_count,block"`
	// TotalLocalStorageGb: optional
	TotalLocalStorageGb *TotalLocalStorageGb `hcl:"total_local_storage_gb,block"`
	// VcpuCount: required
	VcpuCount *VcpuCount `hcl:"vcpu_count,block" validate:"required"`
}

type AcceleratorCount struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type AcceleratorTotalMemoryMib struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type BaselineEbsBandwidthMbps struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type MemoryGibPerVcpu struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type MemoryMib struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, required
	Min terra.NumberValue `hcl:"min,attr" validate:"required"`
}

type NetworkBandwidthGbps struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type NetworkInterfaceCount struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type TotalLocalStorageGb struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type VcpuCount struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, required
	Min terra.NumberValue `hcl:"min,attr" validate:"required"`
}

type OnDemandOptions struct {
	// AllocationStrategy: string, optional
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr"`
	// MaxTotalPrice: string, optional
	MaxTotalPrice terra.StringValue `hcl:"max_total_price,attr"`
	// MinTargetCapacity: number, optional
	MinTargetCapacity terra.NumberValue `hcl:"min_target_capacity,attr"`
	// SingleAvailabilityZone: bool, optional
	SingleAvailabilityZone terra.BoolValue `hcl:"single_availability_zone,attr"`
	// SingleInstanceType: bool, optional
	SingleInstanceType terra.BoolValue `hcl:"single_instance_type,attr"`
}

type SpotOptions struct {
	// AllocationStrategy: string, optional
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr"`
	// InstanceInterruptionBehavior: string, optional
	InstanceInterruptionBehavior terra.StringValue `hcl:"instance_interruption_behavior,attr"`
	// InstancePoolsToUseCount: number, optional
	InstancePoolsToUseCount terra.NumberValue `hcl:"instance_pools_to_use_count,attr"`
	// MaintenanceStrategies: optional
	MaintenanceStrategies *MaintenanceStrategies `hcl:"maintenance_strategies,block"`
}

type MaintenanceStrategies struct {
	// CapacityRebalance: optional
	CapacityRebalance *CapacityRebalance `hcl:"capacity_rebalance,block"`
}

type CapacityRebalance struct {
	// ReplacementStrategy: string, optional
	ReplacementStrategy terra.StringValue `hcl:"replacement_strategy,attr"`
	// TerminationDelay: number, optional
	TerminationDelay terra.NumberValue `hcl:"termination_delay,attr"`
}

type TargetCapacitySpecification struct {
	// DefaultTargetCapacityType: string, required
	DefaultTargetCapacityType terra.StringValue `hcl:"default_target_capacity_type,attr" validate:"required"`
	// OnDemandTargetCapacity: number, optional
	OnDemandTargetCapacity terra.NumberValue `hcl:"on_demand_target_capacity,attr"`
	// SpotTargetCapacity: number, optional
	SpotTargetCapacity terra.NumberValue `hcl:"spot_target_capacity,attr"`
	// TargetCapacityUnitType: string, optional
	TargetCapacityUnitType terra.StringValue `hcl:"target_capacity_unit_type,attr"`
	// TotalTargetCapacity: number, required
	TotalTargetCapacity terra.NumberValue `hcl:"total_target_capacity,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type FleetInstanceSetAttributes struct {
	ref terra.Reference
}

func (fis FleetInstanceSetAttributes) InternalRef() (terra.Reference, error) {
	return fis.ref, nil
}

func (fis FleetInstanceSetAttributes) InternalWithRef(ref terra.Reference) FleetInstanceSetAttributes {
	return FleetInstanceSetAttributes{ref: ref}
}

func (fis FleetInstanceSetAttributes) InternalTokens() hclwrite.Tokens {
	return fis.ref.InternalTokens()
}

func (fis FleetInstanceSetAttributes) InstanceIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fis.ref.Append("instance_ids"))
}

func (fis FleetInstanceSetAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(fis.ref.Append("instance_type"))
}

func (fis FleetInstanceSetAttributes) Lifecycle() terra.StringValue {
	return terra.ReferenceAsString(fis.ref.Append("lifecycle"))
}

func (fis FleetInstanceSetAttributes) Platform() terra.StringValue {
	return terra.ReferenceAsString(fis.ref.Append("platform"))
}

type LaunchTemplateConfigAttributes struct {
	ref terra.Reference
}

func (ltc LaunchTemplateConfigAttributes) InternalRef() (terra.Reference, error) {
	return ltc.ref, nil
}

func (ltc LaunchTemplateConfigAttributes) InternalWithRef(ref terra.Reference) LaunchTemplateConfigAttributes {
	return LaunchTemplateConfigAttributes{ref: ref}
}

func (ltc LaunchTemplateConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ltc.ref.InternalTokens()
}

func (ltc LaunchTemplateConfigAttributes) LaunchTemplateSpecification() terra.ListValue[LaunchTemplateSpecificationAttributes] {
	return terra.ReferenceAsList[LaunchTemplateSpecificationAttributes](ltc.ref.Append("launch_template_specification"))
}

func (ltc LaunchTemplateConfigAttributes) Override() terra.ListValue[OverrideAttributes] {
	return terra.ReferenceAsList[OverrideAttributes](ltc.ref.Append("override"))
}

type LaunchTemplateSpecificationAttributes struct {
	ref terra.Reference
}

func (lts LaunchTemplateSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return lts.ref, nil
}

func (lts LaunchTemplateSpecificationAttributes) InternalWithRef(ref terra.Reference) LaunchTemplateSpecificationAttributes {
	return LaunchTemplateSpecificationAttributes{ref: ref}
}

func (lts LaunchTemplateSpecificationAttributes) InternalTokens() hclwrite.Tokens {
	return lts.ref.InternalTokens()
}

func (lts LaunchTemplateSpecificationAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("launch_template_id"))
}

func (lts LaunchTemplateSpecificationAttributes) LaunchTemplateName() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("launch_template_name"))
}

func (lts LaunchTemplateSpecificationAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(lts.ref.Append("version"))
}

type OverrideAttributes struct {
	ref terra.Reference
}

func (o OverrideAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OverrideAttributes) InternalWithRef(ref terra.Reference) OverrideAttributes {
	return OverrideAttributes{ref: ref}
}

func (o OverrideAttributes) InternalTokens() hclwrite.Tokens {
	return o.ref.InternalTokens()
}

func (o OverrideAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("availability_zone"))
}

func (o OverrideAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("instance_type"))
}

func (o OverrideAttributes) MaxPrice() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("max_price"))
}

func (o OverrideAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("priority"))
}

func (o OverrideAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("subnet_id"))
}

func (o OverrideAttributes) WeightedCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("weighted_capacity"))
}

func (o OverrideAttributes) InstanceRequirements() terra.ListValue[InstanceRequirementsAttributes] {
	return terra.ReferenceAsList[InstanceRequirementsAttributes](o.ref.Append("instance_requirements"))
}

type InstanceRequirementsAttributes struct {
	ref terra.Reference
}

func (ir InstanceRequirementsAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir InstanceRequirementsAttributes) InternalWithRef(ref terra.Reference) InstanceRequirementsAttributes {
	return InstanceRequirementsAttributes{ref: ref}
}

func (ir InstanceRequirementsAttributes) InternalTokens() hclwrite.Tokens {
	return ir.ref.InternalTokens()
}

func (ir InstanceRequirementsAttributes) AcceleratorManufacturers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_manufacturers"))
}

func (ir InstanceRequirementsAttributes) AcceleratorNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_names"))
}

func (ir InstanceRequirementsAttributes) AcceleratorTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_types"))
}

func (ir InstanceRequirementsAttributes) AllowedInstanceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("allowed_instance_types"))
}

func (ir InstanceRequirementsAttributes) BareMetal() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("bare_metal"))
}

func (ir InstanceRequirementsAttributes) BurstablePerformance() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("burstable_performance"))
}

func (ir InstanceRequirementsAttributes) CpuManufacturers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("cpu_manufacturers"))
}

func (ir InstanceRequirementsAttributes) ExcludedInstanceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("excluded_instance_types"))
}

func (ir InstanceRequirementsAttributes) InstanceGenerations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("instance_generations"))
}

func (ir InstanceRequirementsAttributes) LocalStorage() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("local_storage"))
}

func (ir InstanceRequirementsAttributes) LocalStorageTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("local_storage_types"))
}

func (ir InstanceRequirementsAttributes) OnDemandMaxPricePercentageOverLowestPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("on_demand_max_price_percentage_over_lowest_price"))
}

func (ir InstanceRequirementsAttributes) RequireHibernateSupport() terra.BoolValue {
	return terra.ReferenceAsBool(ir.ref.Append("require_hibernate_support"))
}

func (ir InstanceRequirementsAttributes) SpotMaxPricePercentageOverLowestPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("spot_max_price_percentage_over_lowest_price"))
}

func (ir InstanceRequirementsAttributes) AcceleratorCount() terra.ListValue[AcceleratorCountAttributes] {
	return terra.ReferenceAsList[AcceleratorCountAttributes](ir.ref.Append("accelerator_count"))
}

func (ir InstanceRequirementsAttributes) AcceleratorTotalMemoryMib() terra.ListValue[AcceleratorTotalMemoryMibAttributes] {
	return terra.ReferenceAsList[AcceleratorTotalMemoryMibAttributes](ir.ref.Append("accelerator_total_memory_mib"))
}

func (ir InstanceRequirementsAttributes) BaselineEbsBandwidthMbps() terra.ListValue[BaselineEbsBandwidthMbpsAttributes] {
	return terra.ReferenceAsList[BaselineEbsBandwidthMbpsAttributes](ir.ref.Append("baseline_ebs_bandwidth_mbps"))
}

func (ir InstanceRequirementsAttributes) MemoryGibPerVcpu() terra.ListValue[MemoryGibPerVcpuAttributes] {
	return terra.ReferenceAsList[MemoryGibPerVcpuAttributes](ir.ref.Append("memory_gib_per_vcpu"))
}

func (ir InstanceRequirementsAttributes) MemoryMib() terra.ListValue[MemoryMibAttributes] {
	return terra.ReferenceAsList[MemoryMibAttributes](ir.ref.Append("memory_mib"))
}

func (ir InstanceRequirementsAttributes) NetworkBandwidthGbps() terra.ListValue[NetworkBandwidthGbpsAttributes] {
	return terra.ReferenceAsList[NetworkBandwidthGbpsAttributes](ir.ref.Append("network_bandwidth_gbps"))
}

func (ir InstanceRequirementsAttributes) NetworkInterfaceCount() terra.ListValue[NetworkInterfaceCountAttributes] {
	return terra.ReferenceAsList[NetworkInterfaceCountAttributes](ir.ref.Append("network_interface_count"))
}

func (ir InstanceRequirementsAttributes) TotalLocalStorageGb() terra.ListValue[TotalLocalStorageGbAttributes] {
	return terra.ReferenceAsList[TotalLocalStorageGbAttributes](ir.ref.Append("total_local_storage_gb"))
}

func (ir InstanceRequirementsAttributes) VcpuCount() terra.ListValue[VcpuCountAttributes] {
	return terra.ReferenceAsList[VcpuCountAttributes](ir.ref.Append("vcpu_count"))
}

type AcceleratorCountAttributes struct {
	ref terra.Reference
}

func (ac AcceleratorCountAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac AcceleratorCountAttributes) InternalWithRef(ref terra.Reference) AcceleratorCountAttributes {
	return AcceleratorCountAttributes{ref: ref}
}

func (ac AcceleratorCountAttributes) InternalTokens() hclwrite.Tokens {
	return ac.ref.InternalTokens()
}

func (ac AcceleratorCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("max"))
}

func (ac AcceleratorCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("min"))
}

type AcceleratorTotalMemoryMibAttributes struct {
	ref terra.Reference
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalRef() (terra.Reference, error) {
	return atmm.ref, nil
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalWithRef(ref terra.Reference) AcceleratorTotalMemoryMibAttributes {
	return AcceleratorTotalMemoryMibAttributes{ref: ref}
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalTokens() hclwrite.Tokens {
	return atmm.ref.InternalTokens()
}

func (atmm AcceleratorTotalMemoryMibAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(atmm.ref.Append("max"))
}

func (atmm AcceleratorTotalMemoryMibAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(atmm.ref.Append("min"))
}

type BaselineEbsBandwidthMbpsAttributes struct {
	ref terra.Reference
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalRef() (terra.Reference, error) {
	return bebm.ref, nil
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalWithRef(ref terra.Reference) BaselineEbsBandwidthMbpsAttributes {
	return BaselineEbsBandwidthMbpsAttributes{ref: ref}
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalTokens() hclwrite.Tokens {
	return bebm.ref.InternalTokens()
}

func (bebm BaselineEbsBandwidthMbpsAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(bebm.ref.Append("max"))
}

func (bebm BaselineEbsBandwidthMbpsAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(bebm.ref.Append("min"))
}

type MemoryGibPerVcpuAttributes struct {
	ref terra.Reference
}

func (mgpv MemoryGibPerVcpuAttributes) InternalRef() (terra.Reference, error) {
	return mgpv.ref, nil
}

func (mgpv MemoryGibPerVcpuAttributes) InternalWithRef(ref terra.Reference) MemoryGibPerVcpuAttributes {
	return MemoryGibPerVcpuAttributes{ref: ref}
}

func (mgpv MemoryGibPerVcpuAttributes) InternalTokens() hclwrite.Tokens {
	return mgpv.ref.InternalTokens()
}

func (mgpv MemoryGibPerVcpuAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(mgpv.ref.Append("max"))
}

func (mgpv MemoryGibPerVcpuAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(mgpv.ref.Append("min"))
}

type MemoryMibAttributes struct {
	ref terra.Reference
}

func (mm MemoryMibAttributes) InternalRef() (terra.Reference, error) {
	return mm.ref, nil
}

func (mm MemoryMibAttributes) InternalWithRef(ref terra.Reference) MemoryMibAttributes {
	return MemoryMibAttributes{ref: ref}
}

func (mm MemoryMibAttributes) InternalTokens() hclwrite.Tokens {
	return mm.ref.InternalTokens()
}

func (mm MemoryMibAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(mm.ref.Append("max"))
}

func (mm MemoryMibAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(mm.ref.Append("min"))
}

type NetworkBandwidthGbpsAttributes struct {
	ref terra.Reference
}

func (nbg NetworkBandwidthGbpsAttributes) InternalRef() (terra.Reference, error) {
	return nbg.ref, nil
}

func (nbg NetworkBandwidthGbpsAttributes) InternalWithRef(ref terra.Reference) NetworkBandwidthGbpsAttributes {
	return NetworkBandwidthGbpsAttributes{ref: ref}
}

func (nbg NetworkBandwidthGbpsAttributes) InternalTokens() hclwrite.Tokens {
	return nbg.ref.InternalTokens()
}

func (nbg NetworkBandwidthGbpsAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(nbg.ref.Append("max"))
}

func (nbg NetworkBandwidthGbpsAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(nbg.ref.Append("min"))
}

type NetworkInterfaceCountAttributes struct {
	ref terra.Reference
}

func (nic NetworkInterfaceCountAttributes) InternalRef() (terra.Reference, error) {
	return nic.ref, nil
}

func (nic NetworkInterfaceCountAttributes) InternalWithRef(ref terra.Reference) NetworkInterfaceCountAttributes {
	return NetworkInterfaceCountAttributes{ref: ref}
}

func (nic NetworkInterfaceCountAttributes) InternalTokens() hclwrite.Tokens {
	return nic.ref.InternalTokens()
}

func (nic NetworkInterfaceCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(nic.ref.Append("max"))
}

func (nic NetworkInterfaceCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(nic.ref.Append("min"))
}

type TotalLocalStorageGbAttributes struct {
	ref terra.Reference
}

func (tlsg TotalLocalStorageGbAttributes) InternalRef() (terra.Reference, error) {
	return tlsg.ref, nil
}

func (tlsg TotalLocalStorageGbAttributes) InternalWithRef(ref terra.Reference) TotalLocalStorageGbAttributes {
	return TotalLocalStorageGbAttributes{ref: ref}
}

func (tlsg TotalLocalStorageGbAttributes) InternalTokens() hclwrite.Tokens {
	return tlsg.ref.InternalTokens()
}

func (tlsg TotalLocalStorageGbAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(tlsg.ref.Append("max"))
}

func (tlsg TotalLocalStorageGbAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(tlsg.ref.Append("min"))
}

type VcpuCountAttributes struct {
	ref terra.Reference
}

func (vc VcpuCountAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc VcpuCountAttributes) InternalWithRef(ref terra.Reference) VcpuCountAttributes {
	return VcpuCountAttributes{ref: ref}
}

func (vc VcpuCountAttributes) InternalTokens() hclwrite.Tokens {
	return vc.ref.InternalTokens()
}

func (vc VcpuCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(vc.ref.Append("max"))
}

func (vc VcpuCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(vc.ref.Append("min"))
}

type OnDemandOptionsAttributes struct {
	ref terra.Reference
}

func (odo OnDemandOptionsAttributes) InternalRef() (terra.Reference, error) {
	return odo.ref, nil
}

func (odo OnDemandOptionsAttributes) InternalWithRef(ref terra.Reference) OnDemandOptionsAttributes {
	return OnDemandOptionsAttributes{ref: ref}
}

func (odo OnDemandOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return odo.ref.InternalTokens()
}

func (odo OnDemandOptionsAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(odo.ref.Append("allocation_strategy"))
}

func (odo OnDemandOptionsAttributes) MaxTotalPrice() terra.StringValue {
	return terra.ReferenceAsString(odo.ref.Append("max_total_price"))
}

func (odo OnDemandOptionsAttributes) MinTargetCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(odo.ref.Append("min_target_capacity"))
}

func (odo OnDemandOptionsAttributes) SingleAvailabilityZone() terra.BoolValue {
	return terra.ReferenceAsBool(odo.ref.Append("single_availability_zone"))
}

func (odo OnDemandOptionsAttributes) SingleInstanceType() terra.BoolValue {
	return terra.ReferenceAsBool(odo.ref.Append("single_instance_type"))
}

type SpotOptionsAttributes struct {
	ref terra.Reference
}

func (so SpotOptionsAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so SpotOptionsAttributes) InternalWithRef(ref terra.Reference) SpotOptionsAttributes {
	return SpotOptionsAttributes{ref: ref}
}

func (so SpotOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return so.ref.InternalTokens()
}

func (so SpotOptionsAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("allocation_strategy"))
}

func (so SpotOptionsAttributes) InstanceInterruptionBehavior() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("instance_interruption_behavior"))
}

func (so SpotOptionsAttributes) InstancePoolsToUseCount() terra.NumberValue {
	return terra.ReferenceAsNumber(so.ref.Append("instance_pools_to_use_count"))
}

func (so SpotOptionsAttributes) MaintenanceStrategies() terra.ListValue[MaintenanceStrategiesAttributes] {
	return terra.ReferenceAsList[MaintenanceStrategiesAttributes](so.ref.Append("maintenance_strategies"))
}

type MaintenanceStrategiesAttributes struct {
	ref terra.Reference
}

func (ms MaintenanceStrategiesAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms MaintenanceStrategiesAttributes) InternalWithRef(ref terra.Reference) MaintenanceStrategiesAttributes {
	return MaintenanceStrategiesAttributes{ref: ref}
}

func (ms MaintenanceStrategiesAttributes) InternalTokens() hclwrite.Tokens {
	return ms.ref.InternalTokens()
}

func (ms MaintenanceStrategiesAttributes) CapacityRebalance() terra.ListValue[CapacityRebalanceAttributes] {
	return terra.ReferenceAsList[CapacityRebalanceAttributes](ms.ref.Append("capacity_rebalance"))
}

type CapacityRebalanceAttributes struct {
	ref terra.Reference
}

func (cr CapacityRebalanceAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr CapacityRebalanceAttributes) InternalWithRef(ref terra.Reference) CapacityRebalanceAttributes {
	return CapacityRebalanceAttributes{ref: ref}
}

func (cr CapacityRebalanceAttributes) InternalTokens() hclwrite.Tokens {
	return cr.ref.InternalTokens()
}

func (cr CapacityRebalanceAttributes) ReplacementStrategy() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("replacement_strategy"))
}

func (cr CapacityRebalanceAttributes) TerminationDelay() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("termination_delay"))
}

type TargetCapacitySpecificationAttributes struct {
	ref terra.Reference
}

func (tcs TargetCapacitySpecificationAttributes) InternalRef() (terra.Reference, error) {
	return tcs.ref, nil
}

func (tcs TargetCapacitySpecificationAttributes) InternalWithRef(ref terra.Reference) TargetCapacitySpecificationAttributes {
	return TargetCapacitySpecificationAttributes{ref: ref}
}

func (tcs TargetCapacitySpecificationAttributes) InternalTokens() hclwrite.Tokens {
	return tcs.ref.InternalTokens()
}

func (tcs TargetCapacitySpecificationAttributes) DefaultTargetCapacityType() terra.StringValue {
	return terra.ReferenceAsString(tcs.ref.Append("default_target_capacity_type"))
}

func (tcs TargetCapacitySpecificationAttributes) OnDemandTargetCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(tcs.ref.Append("on_demand_target_capacity"))
}

func (tcs TargetCapacitySpecificationAttributes) SpotTargetCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(tcs.ref.Append("spot_target_capacity"))
}

func (tcs TargetCapacitySpecificationAttributes) TargetCapacityUnitType() terra.StringValue {
	return terra.ReferenceAsString(tcs.ref.Append("target_capacity_unit_type"))
}

func (tcs TargetCapacitySpecificationAttributes) TotalTargetCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(tcs.ref.Append("total_target_capacity"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type FleetInstanceSetState struct {
	InstanceIds  []string `json:"instance_ids"`
	InstanceType string   `json:"instance_type"`
	Lifecycle    string   `json:"lifecycle"`
	Platform     string   `json:"platform"`
}

type LaunchTemplateConfigState struct {
	LaunchTemplateSpecification []LaunchTemplateSpecificationState `json:"launch_template_specification"`
	Override                    []OverrideState                    `json:"override"`
}

type LaunchTemplateSpecificationState struct {
	LaunchTemplateId   string `json:"launch_template_id"`
	LaunchTemplateName string `json:"launch_template_name"`
	Version            string `json:"version"`
}

type OverrideState struct {
	AvailabilityZone     string                      `json:"availability_zone"`
	InstanceType         string                      `json:"instance_type"`
	MaxPrice             string                      `json:"max_price"`
	Priority             float64                     `json:"priority"`
	SubnetId             string                      `json:"subnet_id"`
	WeightedCapacity     float64                     `json:"weighted_capacity"`
	InstanceRequirements []InstanceRequirementsState `json:"instance_requirements"`
}

type InstanceRequirementsState struct {
	AcceleratorManufacturers                  []string                         `json:"accelerator_manufacturers"`
	AcceleratorNames                          []string                         `json:"accelerator_names"`
	AcceleratorTypes                          []string                         `json:"accelerator_types"`
	AllowedInstanceTypes                      []string                         `json:"allowed_instance_types"`
	BareMetal                                 string                           `json:"bare_metal"`
	BurstablePerformance                      string                           `json:"burstable_performance"`
	CpuManufacturers                          []string                         `json:"cpu_manufacturers"`
	ExcludedInstanceTypes                     []string                         `json:"excluded_instance_types"`
	InstanceGenerations                       []string                         `json:"instance_generations"`
	LocalStorage                              string                           `json:"local_storage"`
	LocalStorageTypes                         []string                         `json:"local_storage_types"`
	OnDemandMaxPricePercentageOverLowestPrice float64                          `json:"on_demand_max_price_percentage_over_lowest_price"`
	RequireHibernateSupport                   bool                             `json:"require_hibernate_support"`
	SpotMaxPricePercentageOverLowestPrice     float64                          `json:"spot_max_price_percentage_over_lowest_price"`
	AcceleratorCount                          []AcceleratorCountState          `json:"accelerator_count"`
	AcceleratorTotalMemoryMib                 []AcceleratorTotalMemoryMibState `json:"accelerator_total_memory_mib"`
	BaselineEbsBandwidthMbps                  []BaselineEbsBandwidthMbpsState  `json:"baseline_ebs_bandwidth_mbps"`
	MemoryGibPerVcpu                          []MemoryGibPerVcpuState          `json:"memory_gib_per_vcpu"`
	MemoryMib                                 []MemoryMibState                 `json:"memory_mib"`
	NetworkBandwidthGbps                      []NetworkBandwidthGbpsState      `json:"network_bandwidth_gbps"`
	NetworkInterfaceCount                     []NetworkInterfaceCountState     `json:"network_interface_count"`
	TotalLocalStorageGb                       []TotalLocalStorageGbState       `json:"total_local_storage_gb"`
	VcpuCount                                 []VcpuCountState                 `json:"vcpu_count"`
}

type AcceleratorCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type AcceleratorTotalMemoryMibState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type BaselineEbsBandwidthMbpsState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type MemoryGibPerVcpuState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type MemoryMibState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type NetworkBandwidthGbpsState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type NetworkInterfaceCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type TotalLocalStorageGbState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type VcpuCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type OnDemandOptionsState struct {
	AllocationStrategy     string  `json:"allocation_strategy"`
	MaxTotalPrice          string  `json:"max_total_price"`
	MinTargetCapacity      float64 `json:"min_target_capacity"`
	SingleAvailabilityZone bool    `json:"single_availability_zone"`
	SingleInstanceType     bool    `json:"single_instance_type"`
}

type SpotOptionsState struct {
	AllocationStrategy           string                       `json:"allocation_strategy"`
	InstanceInterruptionBehavior string                       `json:"instance_interruption_behavior"`
	InstancePoolsToUseCount      float64                      `json:"instance_pools_to_use_count"`
	MaintenanceStrategies        []MaintenanceStrategiesState `json:"maintenance_strategies"`
}

type MaintenanceStrategiesState struct {
	CapacityRebalance []CapacityRebalanceState `json:"capacity_rebalance"`
}

type CapacityRebalanceState struct {
	ReplacementStrategy string  `json:"replacement_strategy"`
	TerminationDelay    float64 `json:"termination_delay"`
}

type TargetCapacitySpecificationState struct {
	DefaultTargetCapacityType string  `json:"default_target_capacity_type"`
	OnDemandTargetCapacity    float64 `json:"on_demand_target_capacity"`
	SpotTargetCapacity        float64 `json:"spot_target_capacity"`
	TargetCapacityUnitType    string  `json:"target_capacity_unit_type"`
	TotalTargetCapacity       float64 `json:"total_target_capacity"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
