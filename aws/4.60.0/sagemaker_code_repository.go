// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	sagemakercoderepository "github.com/golingon/terraproviders/aws/4.60.0/sagemakercoderepository"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSagemakerCodeRepository(name string, args SagemakerCodeRepositoryArgs) *SagemakerCodeRepository {
	return &SagemakerCodeRepository{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SagemakerCodeRepository)(nil)

type SagemakerCodeRepository struct {
	Name  string
	Args  SagemakerCodeRepositoryArgs
	state *sagemakerCodeRepositoryState
}

func (scr *SagemakerCodeRepository) Type() string {
	return "aws_sagemaker_code_repository"
}

func (scr *SagemakerCodeRepository) LocalName() string {
	return scr.Name
}

func (scr *SagemakerCodeRepository) Configuration() interface{} {
	return scr.Args
}

func (scr *SagemakerCodeRepository) Attributes() sagemakerCodeRepositoryAttributes {
	return sagemakerCodeRepositoryAttributes{ref: terra.ReferenceResource(scr)}
}

func (scr *SagemakerCodeRepository) ImportState(av io.Reader) error {
	scr.state = &sagemakerCodeRepositoryState{}
	if err := json.NewDecoder(av).Decode(scr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scr.Type(), scr.LocalName(), err)
	}
	return nil
}

func (scr *SagemakerCodeRepository) State() (*sagemakerCodeRepositoryState, bool) {
	return scr.state, scr.state != nil
}

func (scr *SagemakerCodeRepository) StateMust() *sagemakerCodeRepositoryState {
	if scr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scr.Type(), scr.LocalName()))
	}
	return scr.state
}

func (scr *SagemakerCodeRepository) DependOn() terra.Reference {
	return terra.ReferenceResource(scr)
}

type SagemakerCodeRepositoryArgs struct {
	// CodeRepositoryName: string, required
	CodeRepositoryName terra.StringValue `hcl:"code_repository_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// GitConfig: required
	GitConfig *sagemakercoderepository.GitConfig `hcl:"git_config,block" validate:"required"`
	// DependsOn contains resources that SagemakerCodeRepository depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sagemakerCodeRepositoryAttributes struct {
	ref terra.Reference
}

func (scr sagemakerCodeRepositoryAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(scr.ref.Append("arn"))
}

func (scr sagemakerCodeRepositoryAttributes) CodeRepositoryName() terra.StringValue {
	return terra.ReferenceString(scr.ref.Append("code_repository_name"))
}

func (scr sagemakerCodeRepositoryAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scr.ref.Append("id"))
}

func (scr sagemakerCodeRepositoryAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](scr.ref.Append("tags"))
}

func (scr sagemakerCodeRepositoryAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](scr.ref.Append("tags_all"))
}

func (scr sagemakerCodeRepositoryAttributes) GitConfig() terra.ListValue[sagemakercoderepository.GitConfigAttributes] {
	return terra.ReferenceList[sagemakercoderepository.GitConfigAttributes](scr.ref.Append("git_config"))
}

type sagemakerCodeRepositoryState struct {
	Arn                string                                   `json:"arn"`
	CodeRepositoryName string                                   `json:"code_repository_name"`
	Id                 string                                   `json:"id"`
	Tags               map[string]string                        `json:"tags"`
	TagsAll            map[string]string                        `json:"tags_all"`
	GitConfig          []sagemakercoderepository.GitConfigState `json:"git_config"`
}
