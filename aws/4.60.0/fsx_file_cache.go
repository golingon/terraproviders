// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	fsxfilecache "github.com/golingon/terraproviders/aws/4.60.0/fsxfilecache"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFsxFileCache(name string, args FsxFileCacheArgs) *FsxFileCache {
	return &FsxFileCache{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FsxFileCache)(nil)

type FsxFileCache struct {
	Name  string
	Args  FsxFileCacheArgs
	state *fsxFileCacheState
}

func (ffc *FsxFileCache) Type() string {
	return "aws_fsx_file_cache"
}

func (ffc *FsxFileCache) LocalName() string {
	return ffc.Name
}

func (ffc *FsxFileCache) Configuration() interface{} {
	return ffc.Args
}

func (ffc *FsxFileCache) Attributes() fsxFileCacheAttributes {
	return fsxFileCacheAttributes{ref: terra.ReferenceResource(ffc)}
}

func (ffc *FsxFileCache) ImportState(av io.Reader) error {
	ffc.state = &fsxFileCacheState{}
	if err := json.NewDecoder(av).Decode(ffc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ffc.Type(), ffc.LocalName(), err)
	}
	return nil
}

func (ffc *FsxFileCache) State() (*fsxFileCacheState, bool) {
	return ffc.state, ffc.state != nil
}

func (ffc *FsxFileCache) StateMust() *fsxFileCacheState {
	if ffc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ffc.Type(), ffc.LocalName()))
	}
	return ffc.state
}

func (ffc *FsxFileCache) DependOn() terra.Reference {
	return terra.ReferenceResource(ffc)
}

type FsxFileCacheArgs struct {
	// CopyTagsToDataRepositoryAssociations: bool, optional
	CopyTagsToDataRepositoryAssociations terra.BoolValue `hcl:"copy_tags_to_data_repository_associations,attr"`
	// FileCacheType: string, required
	FileCacheType terra.StringValue `hcl:"file_cache_type,attr" validate:"required"`
	// FileCacheTypeVersion: string, required
	FileCacheTypeVersion terra.StringValue `hcl:"file_cache_type_version,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// StorageCapacity: number, required
	StorageCapacity terra.NumberValue `hcl:"storage_capacity,attr" validate:"required"`
	// SubnetIds: list of string, required
	SubnetIds terra.ListValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DataRepositoryAssociation: min=0,max=8
	DataRepositoryAssociation []fsxfilecache.DataRepositoryAssociation `hcl:"data_repository_association,block" validate:"min=0,max=8"`
	// LustreConfiguration: min=0
	LustreConfiguration []fsxfilecache.LustreConfiguration `hcl:"lustre_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *fsxfilecache.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FsxFileCache depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type fsxFileCacheAttributes struct {
	ref terra.Reference
}

func (ffc fsxFileCacheAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ffc.ref.Append("arn"))
}

func (ffc fsxFileCacheAttributes) CopyTagsToDataRepositoryAssociations() terra.BoolValue {
	return terra.ReferenceBool(ffc.ref.Append("copy_tags_to_data_repository_associations"))
}

func (ffc fsxFileCacheAttributes) DataRepositoryAssociationIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ffc.ref.Append("data_repository_association_ids"))
}

func (ffc fsxFileCacheAttributes) DnsName() terra.StringValue {
	return terra.ReferenceString(ffc.ref.Append("dns_name"))
}

func (ffc fsxFileCacheAttributes) FileCacheId() terra.StringValue {
	return terra.ReferenceString(ffc.ref.Append("file_cache_id"))
}

func (ffc fsxFileCacheAttributes) FileCacheType() terra.StringValue {
	return terra.ReferenceString(ffc.ref.Append("file_cache_type"))
}

func (ffc fsxFileCacheAttributes) FileCacheTypeVersion() terra.StringValue {
	return terra.ReferenceString(ffc.ref.Append("file_cache_type_version"))
}

func (ffc fsxFileCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ffc.ref.Append("id"))
}

func (ffc fsxFileCacheAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(ffc.ref.Append("kms_key_id"))
}

func (ffc fsxFileCacheAttributes) NetworkInterfaceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ffc.ref.Append("network_interface_ids"))
}

func (ffc fsxFileCacheAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(ffc.ref.Append("owner_id"))
}

func (ffc fsxFileCacheAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ffc.ref.Append("security_group_ids"))
}

func (ffc fsxFileCacheAttributes) StorageCapacity() terra.NumberValue {
	return terra.ReferenceNumber(ffc.ref.Append("storage_capacity"))
}

func (ffc fsxFileCacheAttributes) SubnetIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ffc.ref.Append("subnet_ids"))
}

func (ffc fsxFileCacheAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ffc.ref.Append("tags"))
}

func (ffc fsxFileCacheAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ffc.ref.Append("tags_all"))
}

func (ffc fsxFileCacheAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(ffc.ref.Append("vpc_id"))
}

func (ffc fsxFileCacheAttributes) DataRepositoryAssociation() terra.SetValue[fsxfilecache.DataRepositoryAssociationAttributes] {
	return terra.ReferenceSet[fsxfilecache.DataRepositoryAssociationAttributes](ffc.ref.Append("data_repository_association"))
}

func (ffc fsxFileCacheAttributes) LustreConfiguration() terra.SetValue[fsxfilecache.LustreConfigurationAttributes] {
	return terra.ReferenceSet[fsxfilecache.LustreConfigurationAttributes](ffc.ref.Append("lustre_configuration"))
}

func (ffc fsxFileCacheAttributes) Timeouts() fsxfilecache.TimeoutsAttributes {
	return terra.ReferenceSingle[fsxfilecache.TimeoutsAttributes](ffc.ref.Append("timeouts"))
}

type fsxFileCacheState struct {
	Arn                                  string                                        `json:"arn"`
	CopyTagsToDataRepositoryAssociations bool                                          `json:"copy_tags_to_data_repository_associations"`
	DataRepositoryAssociationIds         []string                                      `json:"data_repository_association_ids"`
	DnsName                              string                                        `json:"dns_name"`
	FileCacheId                          string                                        `json:"file_cache_id"`
	FileCacheType                        string                                        `json:"file_cache_type"`
	FileCacheTypeVersion                 string                                        `json:"file_cache_type_version"`
	Id                                   string                                        `json:"id"`
	KmsKeyId                             string                                        `json:"kms_key_id"`
	NetworkInterfaceIds                  []string                                      `json:"network_interface_ids"`
	OwnerId                              string                                        `json:"owner_id"`
	SecurityGroupIds                     []string                                      `json:"security_group_ids"`
	StorageCapacity                      float64                                       `json:"storage_capacity"`
	SubnetIds                            []string                                      `json:"subnet_ids"`
	Tags                                 map[string]string                             `json:"tags"`
	TagsAll                              map[string]string                             `json:"tags_all"`
	VpcId                                string                                        `json:"vpc_id"`
	DataRepositoryAssociation            []fsxfilecache.DataRepositoryAssociationState `json:"data_repository_association"`
	LustreConfiguration                  []fsxfilecache.LustreConfigurationState       `json:"lustre_configuration"`
	Timeouts                             *fsxfilecache.TimeoutsState                   `json:"timeouts"`
}
