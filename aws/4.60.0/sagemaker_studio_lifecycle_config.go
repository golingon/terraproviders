// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewSagemakerStudioLifecycleConfig creates a new instance of [SagemakerStudioLifecycleConfig].
func NewSagemakerStudioLifecycleConfig(name string, args SagemakerStudioLifecycleConfigArgs) *SagemakerStudioLifecycleConfig {
	return &SagemakerStudioLifecycleConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SagemakerStudioLifecycleConfig)(nil)

// SagemakerStudioLifecycleConfig represents the Terraform resource aws_sagemaker_studio_lifecycle_config.
type SagemakerStudioLifecycleConfig struct {
	Name      string
	Args      SagemakerStudioLifecycleConfigArgs
	state     *sagemakerStudioLifecycleConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SagemakerStudioLifecycleConfig].
func (sslc *SagemakerStudioLifecycleConfig) Type() string {
	return "aws_sagemaker_studio_lifecycle_config"
}

// LocalName returns the local name for [SagemakerStudioLifecycleConfig].
func (sslc *SagemakerStudioLifecycleConfig) LocalName() string {
	return sslc.Name
}

// Configuration returns the configuration (args) for [SagemakerStudioLifecycleConfig].
func (sslc *SagemakerStudioLifecycleConfig) Configuration() interface{} {
	return sslc.Args
}

// DependOn is used for other resources to depend on [SagemakerStudioLifecycleConfig].
func (sslc *SagemakerStudioLifecycleConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(sslc)
}

// Dependencies returns the list of resources [SagemakerStudioLifecycleConfig] depends_on.
func (sslc *SagemakerStudioLifecycleConfig) Dependencies() terra.Dependencies {
	return sslc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SagemakerStudioLifecycleConfig].
func (sslc *SagemakerStudioLifecycleConfig) LifecycleManagement() *terra.Lifecycle {
	return sslc.Lifecycle
}

// Attributes returns the attributes for [SagemakerStudioLifecycleConfig].
func (sslc *SagemakerStudioLifecycleConfig) Attributes() sagemakerStudioLifecycleConfigAttributes {
	return sagemakerStudioLifecycleConfigAttributes{ref: terra.ReferenceResource(sslc)}
}

// ImportState imports the given attribute values into [SagemakerStudioLifecycleConfig]'s state.
func (sslc *SagemakerStudioLifecycleConfig) ImportState(av io.Reader) error {
	sslc.state = &sagemakerStudioLifecycleConfigState{}
	if err := json.NewDecoder(av).Decode(sslc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sslc.Type(), sslc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SagemakerStudioLifecycleConfig] has state.
func (sslc *SagemakerStudioLifecycleConfig) State() (*sagemakerStudioLifecycleConfigState, bool) {
	return sslc.state, sslc.state != nil
}

// StateMust returns the state for [SagemakerStudioLifecycleConfig]. Panics if the state is nil.
func (sslc *SagemakerStudioLifecycleConfig) StateMust() *sagemakerStudioLifecycleConfigState {
	if sslc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sslc.Type(), sslc.LocalName()))
	}
	return sslc.state
}

// SagemakerStudioLifecycleConfigArgs contains the configurations for aws_sagemaker_studio_lifecycle_config.
type SagemakerStudioLifecycleConfigArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// StudioLifecycleConfigAppType: string, required
	StudioLifecycleConfigAppType terra.StringValue `hcl:"studio_lifecycle_config_app_type,attr" validate:"required"`
	// StudioLifecycleConfigContent: string, required
	StudioLifecycleConfigContent terra.StringValue `hcl:"studio_lifecycle_config_content,attr" validate:"required"`
	// StudioLifecycleConfigName: string, required
	StudioLifecycleConfigName terra.StringValue `hcl:"studio_lifecycle_config_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type sagemakerStudioLifecycleConfigAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_sagemaker_studio_lifecycle_config.
func (sslc sagemakerStudioLifecycleConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(sslc.ref.Append("arn"))
}

// Id returns a reference to field id of aws_sagemaker_studio_lifecycle_config.
func (sslc sagemakerStudioLifecycleConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sslc.ref.Append("id"))
}

// StudioLifecycleConfigAppType returns a reference to field studio_lifecycle_config_app_type of aws_sagemaker_studio_lifecycle_config.
func (sslc sagemakerStudioLifecycleConfigAttributes) StudioLifecycleConfigAppType() terra.StringValue {
	return terra.ReferenceAsString(sslc.ref.Append("studio_lifecycle_config_app_type"))
}

// StudioLifecycleConfigContent returns a reference to field studio_lifecycle_config_content of aws_sagemaker_studio_lifecycle_config.
func (sslc sagemakerStudioLifecycleConfigAttributes) StudioLifecycleConfigContent() terra.StringValue {
	return terra.ReferenceAsString(sslc.ref.Append("studio_lifecycle_config_content"))
}

// StudioLifecycleConfigName returns a reference to field studio_lifecycle_config_name of aws_sagemaker_studio_lifecycle_config.
func (sslc sagemakerStudioLifecycleConfigAttributes) StudioLifecycleConfigName() terra.StringValue {
	return terra.ReferenceAsString(sslc.ref.Append("studio_lifecycle_config_name"))
}

// Tags returns a reference to field tags of aws_sagemaker_studio_lifecycle_config.
func (sslc sagemakerStudioLifecycleConfigAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sslc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_sagemaker_studio_lifecycle_config.
func (sslc sagemakerStudioLifecycleConfigAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sslc.ref.Append("tags_all"))
}

type sagemakerStudioLifecycleConfigState struct {
	Arn                          string            `json:"arn"`
	Id                           string            `json:"id"`
	StudioLifecycleConfigAppType string            `json:"studio_lifecycle_config_app_type"`
	StudioLifecycleConfigContent string            `json:"studio_lifecycle_config_content"`
	StudioLifecycleConfigName    string            `json:"studio_lifecycle_config_name"`
	Tags                         map[string]string `json:"tags"`
	TagsAll                      map[string]string `json:"tags_all"`
}
