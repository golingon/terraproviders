// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	datagluecatalogtable "github.com/golingon/terraproviders/aws/4.60.0/datagluecatalogtable"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataGlueCatalogTable(name string, args DataGlueCatalogTableArgs) *DataGlueCatalogTable {
	return &DataGlueCatalogTable{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataGlueCatalogTable)(nil)

type DataGlueCatalogTable struct {
	Name string
	Args DataGlueCatalogTableArgs
}

func (gct *DataGlueCatalogTable) DataSource() string {
	return "aws_glue_catalog_table"
}

func (gct *DataGlueCatalogTable) LocalName() string {
	return gct.Name
}

func (gct *DataGlueCatalogTable) Configuration() interface{} {
	return gct.Args
}

func (gct *DataGlueCatalogTable) Attributes() dataGlueCatalogTableAttributes {
	return dataGlueCatalogTableAttributes{ref: terra.ReferenceDataResource(gct)}
}

type DataGlueCatalogTableArgs struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// QueryAsOfTime: string, optional
	QueryAsOfTime terra.StringValue `hcl:"query_as_of_time,attr"`
	// TransactionId: number, optional
	TransactionId terra.NumberValue `hcl:"transaction_id,attr"`
	// PartitionIndex: min=0
	PartitionIndex []datagluecatalogtable.PartitionIndex `hcl:"partition_index,block" validate:"min=0"`
	// PartitionKeys: min=0
	PartitionKeys []datagluecatalogtable.PartitionKeys `hcl:"partition_keys,block" validate:"min=0"`
	// StorageDescriptor: min=0
	StorageDescriptor []datagluecatalogtable.StorageDescriptor `hcl:"storage_descriptor,block" validate:"min=0"`
	// TargetTable: min=0
	TargetTable []datagluecatalogtable.TargetTable `hcl:"target_table,block" validate:"min=0"`
}
type dataGlueCatalogTableAttributes struct {
	ref terra.Reference
}

func (gct dataGlueCatalogTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(gct.ref.Append("arn"))
}

func (gct dataGlueCatalogTableAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceString(gct.ref.Append("catalog_id"))
}

func (gct dataGlueCatalogTableAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceString(gct.ref.Append("database_name"))
}

func (gct dataGlueCatalogTableAttributes) Description() terra.StringValue {
	return terra.ReferenceString(gct.ref.Append("description"))
}

func (gct dataGlueCatalogTableAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gct.ref.Append("id"))
}

func (gct dataGlueCatalogTableAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gct.ref.Append("name"))
}

func (gct dataGlueCatalogTableAttributes) Owner() terra.StringValue {
	return terra.ReferenceString(gct.ref.Append("owner"))
}

func (gct dataGlueCatalogTableAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gct.ref.Append("parameters"))
}

func (gct dataGlueCatalogTableAttributes) QueryAsOfTime() terra.StringValue {
	return terra.ReferenceString(gct.ref.Append("query_as_of_time"))
}

func (gct dataGlueCatalogTableAttributes) Retention() terra.NumberValue {
	return terra.ReferenceNumber(gct.ref.Append("retention"))
}

func (gct dataGlueCatalogTableAttributes) TableType() terra.StringValue {
	return terra.ReferenceString(gct.ref.Append("table_type"))
}

func (gct dataGlueCatalogTableAttributes) TransactionId() terra.NumberValue {
	return terra.ReferenceNumber(gct.ref.Append("transaction_id"))
}

func (gct dataGlueCatalogTableAttributes) ViewExpandedText() terra.StringValue {
	return terra.ReferenceString(gct.ref.Append("view_expanded_text"))
}

func (gct dataGlueCatalogTableAttributes) ViewOriginalText() terra.StringValue {
	return terra.ReferenceString(gct.ref.Append("view_original_text"))
}

func (gct dataGlueCatalogTableAttributes) PartitionIndex() terra.ListValue[datagluecatalogtable.PartitionIndexAttributes] {
	return terra.ReferenceList[datagluecatalogtable.PartitionIndexAttributes](gct.ref.Append("partition_index"))
}

func (gct dataGlueCatalogTableAttributes) PartitionKeys() terra.ListValue[datagluecatalogtable.PartitionKeysAttributes] {
	return terra.ReferenceList[datagluecatalogtable.PartitionKeysAttributes](gct.ref.Append("partition_keys"))
}

func (gct dataGlueCatalogTableAttributes) StorageDescriptor() terra.ListValue[datagluecatalogtable.StorageDescriptorAttributes] {
	return terra.ReferenceList[datagluecatalogtable.StorageDescriptorAttributes](gct.ref.Append("storage_descriptor"))
}

func (gct dataGlueCatalogTableAttributes) TargetTable() terra.ListValue[datagluecatalogtable.TargetTableAttributes] {
	return terra.ReferenceList[datagluecatalogtable.TargetTableAttributes](gct.ref.Append("target_table"))
}
