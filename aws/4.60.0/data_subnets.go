// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	datasubnets "github.com/golingon/terraproviders/aws/4.60.0/datasubnets"
	"github.com/volvo-cars/lingon/pkg/terra"
)

// NewDataSubnets creates a new instance of [DataSubnets].
func NewDataSubnets(name string, args DataSubnetsArgs) *DataSubnets {
	return &DataSubnets{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataSubnets)(nil)

// DataSubnets represents the Terraform data resource aws_subnets.
type DataSubnets struct {
	Name string
	Args DataSubnetsArgs
}

// DataSource returns the Terraform object type for [DataSubnets].
func (s *DataSubnets) DataSource() string {
	return "aws_subnets"
}

// LocalName returns the local name for [DataSubnets].
func (s *DataSubnets) LocalName() string {
	return s.Name
}

// Configuration returns the configuration (args) for [DataSubnets].
func (s *DataSubnets) Configuration() interface{} {
	return s.Args
}

// Attributes returns the attributes for [DataSubnets].
func (s *DataSubnets) Attributes() dataSubnetsAttributes {
	return dataSubnetsAttributes{ref: terra.ReferenceDataResource(s)}
}

// DataSubnetsArgs contains the configurations for aws_subnets.
type DataSubnetsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filter: min=0
	Filter []datasubnets.Filter `hcl:"filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datasubnets.Timeouts `hcl:"timeouts,block"`
}
type dataSubnetsAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_subnets.
func (s dataSubnetsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("id"))
}

// Ids returns a reference to field ids of aws_subnets.
func (s dataSubnetsAttributes) Ids() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("ids"))
}

// Tags returns a reference to field tags of aws_subnets.
func (s dataSubnetsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("tags"))
}

func (s dataSubnetsAttributes) Filter() terra.SetValue[datasubnets.FilterAttributes] {
	return terra.ReferenceAsSet[datasubnets.FilterAttributes](s.ref.Append("filter"))
}

func (s dataSubnetsAttributes) Timeouts() datasubnets.TimeoutsAttributes {
	return terra.ReferenceAsSingle[datasubnets.TimeoutsAttributes](s.ref.Append("timeouts"))
}
