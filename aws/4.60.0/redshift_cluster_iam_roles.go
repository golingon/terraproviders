// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	redshiftclusteriamroles "github.com/golingon/terraproviders/aws/4.60.0/redshiftclusteriamroles"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftClusterIamRoles(name string, args RedshiftClusterIamRolesArgs) *RedshiftClusterIamRoles {
	return &RedshiftClusterIamRoles{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftClusterIamRoles)(nil)

type RedshiftClusterIamRoles struct {
	Name  string
	Args  RedshiftClusterIamRolesArgs
	state *redshiftClusterIamRolesState
}

func (rcir *RedshiftClusterIamRoles) Type() string {
	return "aws_redshift_cluster_iam_roles"
}

func (rcir *RedshiftClusterIamRoles) LocalName() string {
	return rcir.Name
}

func (rcir *RedshiftClusterIamRoles) Configuration() interface{} {
	return rcir.Args
}

func (rcir *RedshiftClusterIamRoles) Attributes() redshiftClusterIamRolesAttributes {
	return redshiftClusterIamRolesAttributes{ref: terra.ReferenceResource(rcir)}
}

func (rcir *RedshiftClusterIamRoles) ImportState(av io.Reader) error {
	rcir.state = &redshiftClusterIamRolesState{}
	if err := json.NewDecoder(av).Decode(rcir.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rcir.Type(), rcir.LocalName(), err)
	}
	return nil
}

func (rcir *RedshiftClusterIamRoles) State() (*redshiftClusterIamRolesState, bool) {
	return rcir.state, rcir.state != nil
}

func (rcir *RedshiftClusterIamRoles) StateMust() *redshiftClusterIamRolesState {
	if rcir.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rcir.Type(), rcir.LocalName()))
	}
	return rcir.state
}

func (rcir *RedshiftClusterIamRoles) DependOn() terra.Reference {
	return terra.ReferenceResource(rcir)
}

type RedshiftClusterIamRolesArgs struct {
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// DefaultIamRoleArn: string, optional
	DefaultIamRoleArn terra.StringValue `hcl:"default_iam_role_arn,attr"`
	// IamRoleArns: set of string, optional
	IamRoleArns terra.SetValue[terra.StringValue] `hcl:"iam_role_arns,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *redshiftclusteriamroles.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RedshiftClusterIamRoles depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftClusterIamRolesAttributes struct {
	ref terra.Reference
}

func (rcir redshiftClusterIamRolesAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(rcir.ref.Append("cluster_identifier"))
}

func (rcir redshiftClusterIamRolesAttributes) DefaultIamRoleArn() terra.StringValue {
	return terra.ReferenceString(rcir.ref.Append("default_iam_role_arn"))
}

func (rcir redshiftClusterIamRolesAttributes) IamRoleArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rcir.ref.Append("iam_role_arns"))
}

func (rcir redshiftClusterIamRolesAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rcir.ref.Append("id"))
}

func (rcir redshiftClusterIamRolesAttributes) Timeouts() redshiftclusteriamroles.TimeoutsAttributes {
	return terra.ReferenceSingle[redshiftclusteriamroles.TimeoutsAttributes](rcir.ref.Append("timeouts"))
}

type redshiftClusterIamRolesState struct {
	ClusterIdentifier string                                 `json:"cluster_identifier"`
	DefaultIamRoleArn string                                 `json:"default_iam_role_arn"`
	IamRoleArns       []string                               `json:"iam_role_arns"`
	Id                string                                 `json:"id"`
	Timeouts          *redshiftclusteriamroles.TimeoutsState `json:"timeouts"`
}
