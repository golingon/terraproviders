// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	timestreamwritetable "github.com/golingon/terraproviders/aws/4.60.0/timestreamwritetable"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewTimestreamwriteTable(name string, args TimestreamwriteTableArgs) *TimestreamwriteTable {
	return &TimestreamwriteTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TimestreamwriteTable)(nil)

type TimestreamwriteTable struct {
	Name  string
	Args  TimestreamwriteTableArgs
	state *timestreamwriteTableState
}

func (tt *TimestreamwriteTable) Type() string {
	return "aws_timestreamwrite_table"
}

func (tt *TimestreamwriteTable) LocalName() string {
	return tt.Name
}

func (tt *TimestreamwriteTable) Configuration() interface{} {
	return tt.Args
}

func (tt *TimestreamwriteTable) Attributes() timestreamwriteTableAttributes {
	return timestreamwriteTableAttributes{ref: terra.ReferenceResource(tt)}
}

func (tt *TimestreamwriteTable) ImportState(av io.Reader) error {
	tt.state = &timestreamwriteTableState{}
	if err := json.NewDecoder(av).Decode(tt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tt.Type(), tt.LocalName(), err)
	}
	return nil
}

func (tt *TimestreamwriteTable) State() (*timestreamwriteTableState, bool) {
	return tt.state, tt.state != nil
}

func (tt *TimestreamwriteTable) StateMust() *timestreamwriteTableState {
	if tt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tt.Type(), tt.LocalName()))
	}
	return tt.state
}

func (tt *TimestreamwriteTable) DependOn() terra.Reference {
	return terra.ReferenceResource(tt)
}

type TimestreamwriteTableArgs struct {
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// MagneticStoreWriteProperties: optional
	MagneticStoreWriteProperties *timestreamwritetable.MagneticStoreWriteProperties `hcl:"magnetic_store_write_properties,block"`
	// RetentionProperties: optional
	RetentionProperties *timestreamwritetable.RetentionProperties `hcl:"retention_properties,block"`
	// DependsOn contains resources that TimestreamwriteTable depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type timestreamwriteTableAttributes struct {
	ref terra.Reference
}

func (tt timestreamwriteTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(tt.ref.Append("arn"))
}

func (tt timestreamwriteTableAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceString(tt.ref.Append("database_name"))
}

func (tt timestreamwriteTableAttributes) Id() terra.StringValue {
	return terra.ReferenceString(tt.ref.Append("id"))
}

func (tt timestreamwriteTableAttributes) TableName() terra.StringValue {
	return terra.ReferenceString(tt.ref.Append("table_name"))
}

func (tt timestreamwriteTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](tt.ref.Append("tags"))
}

func (tt timestreamwriteTableAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](tt.ref.Append("tags_all"))
}

func (tt timestreamwriteTableAttributes) MagneticStoreWriteProperties() terra.ListValue[timestreamwritetable.MagneticStoreWritePropertiesAttributes] {
	return terra.ReferenceList[timestreamwritetable.MagneticStoreWritePropertiesAttributes](tt.ref.Append("magnetic_store_write_properties"))
}

func (tt timestreamwriteTableAttributes) RetentionProperties() terra.ListValue[timestreamwritetable.RetentionPropertiesAttributes] {
	return terra.ReferenceList[timestreamwritetable.RetentionPropertiesAttributes](tt.ref.Append("retention_properties"))
}

type timestreamwriteTableState struct {
	Arn                          string                                                   `json:"arn"`
	DatabaseName                 string                                                   `json:"database_name"`
	Id                           string                                                   `json:"id"`
	TableName                    string                                                   `json:"table_name"`
	Tags                         map[string]string                                        `json:"tags"`
	TagsAll                      map[string]string                                        `json:"tags_all"`
	MagneticStoreWriteProperties []timestreamwritetable.MagneticStoreWritePropertiesState `json:"magnetic_store_write_properties"`
	RetentionProperties          []timestreamwritetable.RetentionPropertiesState          `json:"retention_properties"`
}
