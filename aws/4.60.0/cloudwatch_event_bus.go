// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudwatchEventBus(name string, args CloudwatchEventBusArgs) *CloudwatchEventBus {
	return &CloudwatchEventBus{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudwatchEventBus)(nil)

type CloudwatchEventBus struct {
	Name  string
	Args  CloudwatchEventBusArgs
	state *cloudwatchEventBusState
}

func (ceb *CloudwatchEventBus) Type() string {
	return "aws_cloudwatch_event_bus"
}

func (ceb *CloudwatchEventBus) LocalName() string {
	return ceb.Name
}

func (ceb *CloudwatchEventBus) Configuration() interface{} {
	return ceb.Args
}

func (ceb *CloudwatchEventBus) Attributes() cloudwatchEventBusAttributes {
	return cloudwatchEventBusAttributes{ref: terra.ReferenceResource(ceb)}
}

func (ceb *CloudwatchEventBus) ImportState(av io.Reader) error {
	ceb.state = &cloudwatchEventBusState{}
	if err := json.NewDecoder(av).Decode(ceb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ceb.Type(), ceb.LocalName(), err)
	}
	return nil
}

func (ceb *CloudwatchEventBus) State() (*cloudwatchEventBusState, bool) {
	return ceb.state, ceb.state != nil
}

func (ceb *CloudwatchEventBus) StateMust() *cloudwatchEventBusState {
	if ceb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ceb.Type(), ceb.LocalName()))
	}
	return ceb.state
}

func (ceb *CloudwatchEventBus) DependOn() terra.Reference {
	return terra.ReferenceResource(ceb)
}

type CloudwatchEventBusArgs struct {
	// EventSourceName: string, optional
	EventSourceName terra.StringValue `hcl:"event_source_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that CloudwatchEventBus depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudwatchEventBusAttributes struct {
	ref terra.Reference
}

func (ceb cloudwatchEventBusAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ceb.ref.Append("arn"))
}

func (ceb cloudwatchEventBusAttributes) EventSourceName() terra.StringValue {
	return terra.ReferenceString(ceb.ref.Append("event_source_name"))
}

func (ceb cloudwatchEventBusAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ceb.ref.Append("id"))
}

func (ceb cloudwatchEventBusAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ceb.ref.Append("name"))
}

func (ceb cloudwatchEventBusAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ceb.ref.Append("tags"))
}

func (ceb cloudwatchEventBusAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ceb.ref.Append("tags_all"))
}

type cloudwatchEventBusState struct {
	Arn             string            `json:"arn"`
	EventSourceName string            `json:"event_source_name"`
	Id              string            `json:"id"`
	Name            string            `json:"name"`
	Tags            map[string]string `json:"tags"`
	TagsAll         map[string]string `json:"tags_all"`
}
