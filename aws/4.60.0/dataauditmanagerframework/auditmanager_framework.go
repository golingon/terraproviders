// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataauditmanagerframework

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ControlSets struct {
	// Controls: min=0
	Controls []Controls `hcl:"controls,block" validate:"min=0"`
}

type Controls struct{}

type ControlSetsAttributes struct {
	ref terra.Reference
}

func (cs ControlSetsAttributes) InternalRef() terra.Reference {
	return cs.ref
}

func (cs ControlSetsAttributes) InternalWithRef(ref terra.Reference) ControlSetsAttributes {
	return ControlSetsAttributes{ref: ref}
}

func (cs ControlSetsAttributes) InternalTokens() hclwrite.Tokens {
	return cs.ref.InternalTokens()
}

func (cs ControlSetsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cs.ref.Append("id"))
}

func (cs ControlSetsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cs.ref.Append("name"))
}

func (cs ControlSetsAttributes) Controls() terra.SetValue[ControlsAttributes] {
	return terra.ReferenceSet[ControlsAttributes](cs.ref.Append("controls"))
}

type ControlsAttributes struct {
	ref terra.Reference
}

func (c ControlsAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c ControlsAttributes) InternalWithRef(ref terra.Reference) ControlsAttributes {
	return ControlsAttributes{ref: ref}
}

func (c ControlsAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ControlsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("id"))
}

type ControlSetsState struct {
	Id       string          `json:"id"`
	Name     string          `json:"name"`
	Controls []ControlsState `json:"controls"`
}

type ControlsState struct {
	Id string `json:"id"`
}
