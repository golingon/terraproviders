// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3ControlBucket(name string, args S3ControlBucketArgs) *S3ControlBucket {
	return &S3ControlBucket{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3ControlBucket)(nil)

type S3ControlBucket struct {
	Name  string
	Args  S3ControlBucketArgs
	state *s3ControlBucketState
}

func (sb *S3ControlBucket) Type() string {
	return "aws_s3control_bucket"
}

func (sb *S3ControlBucket) LocalName() string {
	return sb.Name
}

func (sb *S3ControlBucket) Configuration() interface{} {
	return sb.Args
}

func (sb *S3ControlBucket) Attributes() s3ControlBucketAttributes {
	return s3ControlBucketAttributes{ref: terra.ReferenceResource(sb)}
}

func (sb *S3ControlBucket) ImportState(av io.Reader) error {
	sb.state = &s3ControlBucketState{}
	if err := json.NewDecoder(av).Decode(sb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sb.Type(), sb.LocalName(), err)
	}
	return nil
}

func (sb *S3ControlBucket) State() (*s3ControlBucketState, bool) {
	return sb.state, sb.state != nil
}

func (sb *S3ControlBucket) StateMust() *s3ControlBucketState {
	if sb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sb.Type(), sb.LocalName()))
	}
	return sb.state
}

func (sb *S3ControlBucket) DependOn() terra.Reference {
	return terra.ReferenceResource(sb)
}

type S3ControlBucketArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OutpostId: string, required
	OutpostId terra.StringValue `hcl:"outpost_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that S3ControlBucket depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3ControlBucketAttributes struct {
	ref terra.Reference
}

func (sb s3ControlBucketAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("arn"))
}

func (sb s3ControlBucketAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("bucket"))
}

func (sb s3ControlBucketAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("creation_date"))
}

func (sb s3ControlBucketAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("id"))
}

func (sb s3ControlBucketAttributes) OutpostId() terra.StringValue {
	return terra.ReferenceString(sb.ref.Append("outpost_id"))
}

func (sb s3ControlBucketAttributes) PublicAccessBlockEnabled() terra.BoolValue {
	return terra.ReferenceBool(sb.ref.Append("public_access_block_enabled"))
}

func (sb s3ControlBucketAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sb.ref.Append("tags"))
}

func (sb s3ControlBucketAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sb.ref.Append("tags_all"))
}

type s3ControlBucketState struct {
	Arn                      string            `json:"arn"`
	Bucket                   string            `json:"bucket"`
	CreationDate             string            `json:"creation_date"`
	Id                       string            `json:"id"`
	OutpostId                string            `json:"outpost_id"`
	PublicAccessBlockEnabled bool              `json:"public_access_block_enabled"`
	Tags                     map[string]string `json:"tags"`
	TagsAll                  map[string]string `json:"tags_all"`
}
