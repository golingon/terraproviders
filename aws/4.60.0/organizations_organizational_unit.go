// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	organizationsorganizationalunit "github.com/golingon/terraproviders/aws/4.60.0/organizationsorganizationalunit"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOrganizationsOrganizationalUnit(name string, args OrganizationsOrganizationalUnitArgs) *OrganizationsOrganizationalUnit {
	return &OrganizationsOrganizationalUnit{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OrganizationsOrganizationalUnit)(nil)

type OrganizationsOrganizationalUnit struct {
	Name  string
	Args  OrganizationsOrganizationalUnitArgs
	state *organizationsOrganizationalUnitState
}

func (oou *OrganizationsOrganizationalUnit) Type() string {
	return "aws_organizations_organizational_unit"
}

func (oou *OrganizationsOrganizationalUnit) LocalName() string {
	return oou.Name
}

func (oou *OrganizationsOrganizationalUnit) Configuration() interface{} {
	return oou.Args
}

func (oou *OrganizationsOrganizationalUnit) Attributes() organizationsOrganizationalUnitAttributes {
	return organizationsOrganizationalUnitAttributes{ref: terra.ReferenceResource(oou)}
}

func (oou *OrganizationsOrganizationalUnit) ImportState(av io.Reader) error {
	oou.state = &organizationsOrganizationalUnitState{}
	if err := json.NewDecoder(av).Decode(oou.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", oou.Type(), oou.LocalName(), err)
	}
	return nil
}

func (oou *OrganizationsOrganizationalUnit) State() (*organizationsOrganizationalUnitState, bool) {
	return oou.state, oou.state != nil
}

func (oou *OrganizationsOrganizationalUnit) StateMust() *organizationsOrganizationalUnitState {
	if oou.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", oou.Type(), oou.LocalName()))
	}
	return oou.state
}

func (oou *OrganizationsOrganizationalUnit) DependOn() terra.Reference {
	return terra.ReferenceResource(oou)
}

type OrganizationsOrganizationalUnitArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParentId: string, required
	ParentId terra.StringValue `hcl:"parent_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Accounts: min=0
	Accounts []organizationsorganizationalunit.Accounts `hcl:"accounts,block" validate:"min=0"`
	// DependsOn contains resources that OrganizationsOrganizationalUnit depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type organizationsOrganizationalUnitAttributes struct {
	ref terra.Reference
}

func (oou organizationsOrganizationalUnitAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(oou.ref.Append("arn"))
}

func (oou organizationsOrganizationalUnitAttributes) Id() terra.StringValue {
	return terra.ReferenceString(oou.ref.Append("id"))
}

func (oou organizationsOrganizationalUnitAttributes) Name() terra.StringValue {
	return terra.ReferenceString(oou.ref.Append("name"))
}

func (oou organizationsOrganizationalUnitAttributes) ParentId() terra.StringValue {
	return terra.ReferenceString(oou.ref.Append("parent_id"))
}

func (oou organizationsOrganizationalUnitAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](oou.ref.Append("tags"))
}

func (oou organizationsOrganizationalUnitAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](oou.ref.Append("tags_all"))
}

func (oou organizationsOrganizationalUnitAttributes) Accounts() terra.ListValue[organizationsorganizationalunit.AccountsAttributes] {
	return terra.ReferenceList[organizationsorganizationalunit.AccountsAttributes](oou.ref.Append("accounts"))
}

type organizationsOrganizationalUnitState struct {
	Arn      string                                          `json:"arn"`
	Id       string                                          `json:"id"`
	Name     string                                          `json:"name"`
	ParentId string                                          `json:"parent_id"`
	Tags     map[string]string                               `json:"tags"`
	TagsAll  map[string]string                               `json:"tags_all"`
	Accounts []organizationsorganizationalunit.AccountsState `json:"accounts"`
}
