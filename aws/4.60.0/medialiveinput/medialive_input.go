// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package medialiveinput

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Destinations struct {
	// StreamName: string, required
	StreamName terra.StringValue `hcl:"stream_name,attr" validate:"required"`
}

type InputDevices struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
}

type MediaConnectFlows struct {
	// FlowArn: string, required
	FlowArn terra.StringValue `hcl:"flow_arn,attr" validate:"required"`
}

type Sources struct {
	// PasswordParam: string, required
	PasswordParam terra.StringValue `hcl:"password_param,attr" validate:"required"`
	// Url: string, required
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Vpc struct {
	// SecurityGroupIds: list of string, optional
	SecurityGroupIds terra.ListValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds: list of string, required
	SubnetIds terra.ListValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type DestinationsAttributes struct {
	ref terra.Reference
}

func (d DestinationsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationsAttributes) InternalWithRef(ref terra.Reference) DestinationsAttributes {
	return DestinationsAttributes{ref: ref}
}

func (d DestinationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationsAttributes) StreamName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("stream_name"))
}

type InputDevicesAttributes struct {
	ref terra.Reference
}

func (id InputDevicesAttributes) InternalRef() (terra.Reference, error) {
	return id.ref, nil
}

func (id InputDevicesAttributes) InternalWithRef(ref terra.Reference) InputDevicesAttributes {
	return InputDevicesAttributes{ref: ref}
}

func (id InputDevicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return id.ref.InternalTokens()
}

func (id InputDevicesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(id.ref.Append("id"))
}

type MediaConnectFlowsAttributes struct {
	ref terra.Reference
}

func (mcf MediaConnectFlowsAttributes) InternalRef() (terra.Reference, error) {
	return mcf.ref, nil
}

func (mcf MediaConnectFlowsAttributes) InternalWithRef(ref terra.Reference) MediaConnectFlowsAttributes {
	return MediaConnectFlowsAttributes{ref: ref}
}

func (mcf MediaConnectFlowsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mcf.ref.InternalTokens()
}

func (mcf MediaConnectFlowsAttributes) FlowArn() terra.StringValue {
	return terra.ReferenceAsString(mcf.ref.Append("flow_arn"))
}

type SourcesAttributes struct {
	ref terra.Reference
}

func (s SourcesAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SourcesAttributes) InternalWithRef(ref terra.Reference) SourcesAttributes {
	return SourcesAttributes{ref: ref}
}

func (s SourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SourcesAttributes) PasswordParam() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("password_param"))
}

func (s SourcesAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("url"))
}

func (s SourcesAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("username"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VpcAttributes struct {
	ref terra.Reference
}

func (v VpcAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VpcAttributes) InternalWithRef(ref terra.Reference) VpcAttributes {
	return VpcAttributes{ref: ref}
}

func (v VpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VpcAttributes) SecurityGroupIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("security_group_ids"))
}

func (v VpcAttributes) SubnetIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("subnet_ids"))
}

type DestinationsState struct {
	StreamName string `json:"stream_name"`
}

type InputDevicesState struct {
	Id string `json:"id"`
}

type MediaConnectFlowsState struct {
	FlowArn string `json:"flow_arn"`
}

type SourcesState struct {
	PasswordParam string `json:"password_param"`
	Url           string `json:"url"`
	Username      string `json:"username"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
}
