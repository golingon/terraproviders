// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkmanagerdevice "github.com/golingon/terraproviders/aws/4.60.0/networkmanagerdevice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkmanagerDevice(name string, args NetworkmanagerDeviceArgs) *NetworkmanagerDevice {
	return &NetworkmanagerDevice{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkmanagerDevice)(nil)

type NetworkmanagerDevice struct {
	Name  string
	Args  NetworkmanagerDeviceArgs
	state *networkmanagerDeviceState
}

func (nd *NetworkmanagerDevice) Type() string {
	return "aws_networkmanager_device"
}

func (nd *NetworkmanagerDevice) LocalName() string {
	return nd.Name
}

func (nd *NetworkmanagerDevice) Configuration() interface{} {
	return nd.Args
}

func (nd *NetworkmanagerDevice) Attributes() networkmanagerDeviceAttributes {
	return networkmanagerDeviceAttributes{ref: terra.ReferenceResource(nd)}
}

func (nd *NetworkmanagerDevice) ImportState(av io.Reader) error {
	nd.state = &networkmanagerDeviceState{}
	if err := json.NewDecoder(av).Decode(nd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nd.Type(), nd.LocalName(), err)
	}
	return nil
}

func (nd *NetworkmanagerDevice) State() (*networkmanagerDeviceState, bool) {
	return nd.state, nd.state != nil
}

func (nd *NetworkmanagerDevice) StateMust() *networkmanagerDeviceState {
	if nd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nd.Type(), nd.LocalName()))
	}
	return nd.state
}

func (nd *NetworkmanagerDevice) DependOn() terra.Reference {
	return terra.ReferenceResource(nd)
}

type NetworkmanagerDeviceArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GlobalNetworkId: string, required
	GlobalNetworkId terra.StringValue `hcl:"global_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Model: string, optional
	Model terra.StringValue `hcl:"model,attr"`
	// SerialNumber: string, optional
	SerialNumber terra.StringValue `hcl:"serial_number,attr"`
	// SiteId: string, optional
	SiteId terra.StringValue `hcl:"site_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Vendor: string, optional
	Vendor terra.StringValue `hcl:"vendor,attr"`
	// AwsLocation: optional
	AwsLocation *networkmanagerdevice.AwsLocation `hcl:"aws_location,block"`
	// Location: optional
	Location *networkmanagerdevice.Location `hcl:"location,block"`
	// Timeouts: optional
	Timeouts *networkmanagerdevice.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkmanagerDevice depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkmanagerDeviceAttributes struct {
	ref terra.Reference
}

func (nd networkmanagerDeviceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("arn"))
}

func (nd networkmanagerDeviceAttributes) Description() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("description"))
}

func (nd networkmanagerDeviceAttributes) GlobalNetworkId() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("global_network_id"))
}

func (nd networkmanagerDeviceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("id"))
}

func (nd networkmanagerDeviceAttributes) Model() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("model"))
}

func (nd networkmanagerDeviceAttributes) SerialNumber() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("serial_number"))
}

func (nd networkmanagerDeviceAttributes) SiteId() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("site_id"))
}

func (nd networkmanagerDeviceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nd.ref.Append("tags"))
}

func (nd networkmanagerDeviceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nd.ref.Append("tags_all"))
}

func (nd networkmanagerDeviceAttributes) Type() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("type"))
}

func (nd networkmanagerDeviceAttributes) Vendor() terra.StringValue {
	return terra.ReferenceString(nd.ref.Append("vendor"))
}

func (nd networkmanagerDeviceAttributes) AwsLocation() terra.ListValue[networkmanagerdevice.AwsLocationAttributes] {
	return terra.ReferenceList[networkmanagerdevice.AwsLocationAttributes](nd.ref.Append("aws_location"))
}

func (nd networkmanagerDeviceAttributes) Location() terra.ListValue[networkmanagerdevice.LocationAttributes] {
	return terra.ReferenceList[networkmanagerdevice.LocationAttributes](nd.ref.Append("location"))
}

func (nd networkmanagerDeviceAttributes) Timeouts() networkmanagerdevice.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagerdevice.TimeoutsAttributes](nd.ref.Append("timeouts"))
}

type networkmanagerDeviceState struct {
	Arn             string                                  `json:"arn"`
	Description     string                                  `json:"description"`
	GlobalNetworkId string                                  `json:"global_network_id"`
	Id              string                                  `json:"id"`
	Model           string                                  `json:"model"`
	SerialNumber    string                                  `json:"serial_number"`
	SiteId          string                                  `json:"site_id"`
	Tags            map[string]string                       `json:"tags"`
	TagsAll         map[string]string                       `json:"tags_all"`
	Type            string                                  `json:"type"`
	Vendor          string                                  `json:"vendor"`
	AwsLocation     []networkmanagerdevice.AwsLocationState `json:"aws_location"`
	Location        []networkmanagerdevice.LocationState    `json:"location"`
	Timeouts        *networkmanagerdevice.TimeoutsState     `json:"timeouts"`
}
