// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNatGateway(name string, args NatGatewayArgs) *NatGateway {
	return &NatGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NatGateway)(nil)

type NatGateway struct {
	Name  string
	Args  NatGatewayArgs
	state *natGatewayState
}

func (ng *NatGateway) Type() string {
	return "aws_nat_gateway"
}

func (ng *NatGateway) LocalName() string {
	return ng.Name
}

func (ng *NatGateway) Configuration() interface{} {
	return ng.Args
}

func (ng *NatGateway) Attributes() natGatewayAttributes {
	return natGatewayAttributes{ref: terra.ReferenceResource(ng)}
}

func (ng *NatGateway) ImportState(av io.Reader) error {
	ng.state = &natGatewayState{}
	if err := json.NewDecoder(av).Decode(ng.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ng.Type(), ng.LocalName(), err)
	}
	return nil
}

func (ng *NatGateway) State() (*natGatewayState, bool) {
	return ng.state, ng.state != nil
}

func (ng *NatGateway) StateMust() *natGatewayState {
	if ng.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ng.Type(), ng.LocalName()))
	}
	return ng.state
}

func (ng *NatGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(ng)
}

type NatGatewayArgs struct {
	// AllocationId: string, optional
	AllocationId terra.StringValue `hcl:"allocation_id,attr"`
	// ConnectivityType: string, optional
	ConnectivityType terra.StringValue `hcl:"connectivity_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PrivateIp: string, optional
	PrivateIp terra.StringValue `hcl:"private_ip,attr"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that NatGateway depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type natGatewayAttributes struct {
	ref terra.Reference
}

func (ng natGatewayAttributes) AllocationId() terra.StringValue {
	return terra.ReferenceString(ng.ref.Append("allocation_id"))
}

func (ng natGatewayAttributes) ConnectivityType() terra.StringValue {
	return terra.ReferenceString(ng.ref.Append("connectivity_type"))
}

func (ng natGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ng.ref.Append("id"))
}

func (ng natGatewayAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceString(ng.ref.Append("network_interface_id"))
}

func (ng natGatewayAttributes) PrivateIp() terra.StringValue {
	return terra.ReferenceString(ng.ref.Append("private_ip"))
}

func (ng natGatewayAttributes) PublicIp() terra.StringValue {
	return terra.ReferenceString(ng.ref.Append("public_ip"))
}

func (ng natGatewayAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(ng.ref.Append("subnet_id"))
}

func (ng natGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ng.ref.Append("tags"))
}

func (ng natGatewayAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ng.ref.Append("tags_all"))
}

type natGatewayState struct {
	AllocationId       string            `json:"allocation_id"`
	ConnectivityType   string            `json:"connectivity_type"`
	Id                 string            `json:"id"`
	NetworkInterfaceId string            `json:"network_interface_id"`
	PrivateIp          string            `json:"private_ip"`
	PublicIp           string            `json:"public_ip"`
	SubnetId           string            `json:"subnet_id"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
}
