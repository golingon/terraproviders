// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApprunnerVpcConnector(name string, args ApprunnerVpcConnectorArgs) *ApprunnerVpcConnector {
	return &ApprunnerVpcConnector{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApprunnerVpcConnector)(nil)

type ApprunnerVpcConnector struct {
	Name  string
	Args  ApprunnerVpcConnectorArgs
	state *apprunnerVpcConnectorState
}

func (avc *ApprunnerVpcConnector) Type() string {
	return "aws_apprunner_vpc_connector"
}

func (avc *ApprunnerVpcConnector) LocalName() string {
	return avc.Name
}

func (avc *ApprunnerVpcConnector) Configuration() interface{} {
	return avc.Args
}

func (avc *ApprunnerVpcConnector) Attributes() apprunnerVpcConnectorAttributes {
	return apprunnerVpcConnectorAttributes{ref: terra.ReferenceResource(avc)}
}

func (avc *ApprunnerVpcConnector) ImportState(av io.Reader) error {
	avc.state = &apprunnerVpcConnectorState{}
	if err := json.NewDecoder(av).Decode(avc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avc.Type(), avc.LocalName(), err)
	}
	return nil
}

func (avc *ApprunnerVpcConnector) State() (*apprunnerVpcConnectorState, bool) {
	return avc.state, avc.state != nil
}

func (avc *ApprunnerVpcConnector) StateMust() *apprunnerVpcConnectorState {
	if avc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avc.Type(), avc.LocalName()))
	}
	return avc.state
}

func (avc *ApprunnerVpcConnector) DependOn() terra.Reference {
	return terra.ReferenceResource(avc)
}

type ApprunnerVpcConnectorArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SecurityGroups: set of string, required
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr" validate:"required"`
	// Subnets: set of string, required
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcConnectorName: string, required
	VpcConnectorName terra.StringValue `hcl:"vpc_connector_name,attr" validate:"required"`
	// DependsOn contains resources that ApprunnerVpcConnector depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apprunnerVpcConnectorAttributes struct {
	ref terra.Reference
}

func (avc apprunnerVpcConnectorAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(avc.ref.Append("arn"))
}

func (avc apprunnerVpcConnectorAttributes) Id() terra.StringValue {
	return terra.ReferenceString(avc.ref.Append("id"))
}

func (avc apprunnerVpcConnectorAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](avc.ref.Append("security_groups"))
}

func (avc apprunnerVpcConnectorAttributes) Status() terra.StringValue {
	return terra.ReferenceString(avc.ref.Append("status"))
}

func (avc apprunnerVpcConnectorAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](avc.ref.Append("subnets"))
}

func (avc apprunnerVpcConnectorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](avc.ref.Append("tags"))
}

func (avc apprunnerVpcConnectorAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](avc.ref.Append("tags_all"))
}

func (avc apprunnerVpcConnectorAttributes) VpcConnectorName() terra.StringValue {
	return terra.ReferenceString(avc.ref.Append("vpc_connector_name"))
}

func (avc apprunnerVpcConnectorAttributes) VpcConnectorRevision() terra.NumberValue {
	return terra.ReferenceNumber(avc.ref.Append("vpc_connector_revision"))
}

type apprunnerVpcConnectorState struct {
	Arn                  string            `json:"arn"`
	Id                   string            `json:"id"`
	SecurityGroups       []string          `json:"security_groups"`
	Status               string            `json:"status"`
	Subnets              []string          `json:"subnets"`
	Tags                 map[string]string `json:"tags"`
	TagsAll              map[string]string `json:"tags_all"`
	VpcConnectorName     string            `json:"vpc_connector_name"`
	VpcConnectorRevision float64           `json:"vpc_connector_revision"`
}
