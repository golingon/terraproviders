// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	configconfigrule "github.com/golingon/terraproviders/aws/4.60.0/configconfigrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConfigConfigRule(name string, args ConfigConfigRuleArgs) *ConfigConfigRule {
	return &ConfigConfigRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConfigConfigRule)(nil)

type ConfigConfigRule struct {
	Name  string
	Args  ConfigConfigRuleArgs
	state *configConfigRuleState
}

func (ccr *ConfigConfigRule) Type() string {
	return "aws_config_config_rule"
}

func (ccr *ConfigConfigRule) LocalName() string {
	return ccr.Name
}

func (ccr *ConfigConfigRule) Configuration() interface{} {
	return ccr.Args
}

func (ccr *ConfigConfigRule) Attributes() configConfigRuleAttributes {
	return configConfigRuleAttributes{ref: terra.ReferenceResource(ccr)}
}

func (ccr *ConfigConfigRule) ImportState(av io.Reader) error {
	ccr.state = &configConfigRuleState{}
	if err := json.NewDecoder(av).Decode(ccr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ccr.Type(), ccr.LocalName(), err)
	}
	return nil
}

func (ccr *ConfigConfigRule) State() (*configConfigRuleState, bool) {
	return ccr.state, ccr.state != nil
}

func (ccr *ConfigConfigRule) StateMust() *configConfigRuleState {
	if ccr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ccr.Type(), ccr.LocalName()))
	}
	return ccr.state
}

func (ccr *ConfigConfigRule) DependOn() terra.Reference {
	return terra.ReferenceResource(ccr)
}

type ConfigConfigRuleArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InputParameters: string, optional
	InputParameters terra.StringValue `hcl:"input_parameters,attr"`
	// MaximumExecutionFrequency: string, optional
	MaximumExecutionFrequency terra.StringValue `hcl:"maximum_execution_frequency,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Scope: optional
	Scope *configconfigrule.Scope `hcl:"scope,block"`
	// Source: required
	Source *configconfigrule.Source `hcl:"source,block" validate:"required"`
	// DependsOn contains resources that ConfigConfigRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type configConfigRuleAttributes struct {
	ref terra.Reference
}

func (ccr configConfigRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ccr.ref.Append("arn"))
}

func (ccr configConfigRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ccr.ref.Append("description"))
}

func (ccr configConfigRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ccr.ref.Append("id"))
}

func (ccr configConfigRuleAttributes) InputParameters() terra.StringValue {
	return terra.ReferenceString(ccr.ref.Append("input_parameters"))
}

func (ccr configConfigRuleAttributes) MaximumExecutionFrequency() terra.StringValue {
	return terra.ReferenceString(ccr.ref.Append("maximum_execution_frequency"))
}

func (ccr configConfigRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ccr.ref.Append("name"))
}

func (ccr configConfigRuleAttributes) RuleId() terra.StringValue {
	return terra.ReferenceString(ccr.ref.Append("rule_id"))
}

func (ccr configConfigRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ccr.ref.Append("tags"))
}

func (ccr configConfigRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ccr.ref.Append("tags_all"))
}

func (ccr configConfigRuleAttributes) Scope() terra.ListValue[configconfigrule.ScopeAttributes] {
	return terra.ReferenceList[configconfigrule.ScopeAttributes](ccr.ref.Append("scope"))
}

func (ccr configConfigRuleAttributes) Source() terra.ListValue[configconfigrule.SourceAttributes] {
	return terra.ReferenceList[configconfigrule.SourceAttributes](ccr.ref.Append("source"))
}

type configConfigRuleState struct {
	Arn                       string                         `json:"arn"`
	Description               string                         `json:"description"`
	Id                        string                         `json:"id"`
	InputParameters           string                         `json:"input_parameters"`
	MaximumExecutionFrequency string                         `json:"maximum_execution_frequency"`
	Name                      string                         `json:"name"`
	RuleId                    string                         `json:"rule_id"`
	Tags                      map[string]string              `json:"tags"`
	TagsAll                   map[string]string              `json:"tags_all"`
	Scope                     []configconfigrule.ScopeState  `json:"scope"`
	Source                    []configconfigrule.SourceState `json:"source"`
}
