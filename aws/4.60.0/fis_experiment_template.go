// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	fisexperimenttemplate "github.com/golingon/terraproviders/aws/4.60.0/fisexperimenttemplate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFisExperimentTemplate(name string, args FisExperimentTemplateArgs) *FisExperimentTemplate {
	return &FisExperimentTemplate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FisExperimentTemplate)(nil)

type FisExperimentTemplate struct {
	Name  string
	Args  FisExperimentTemplateArgs
	state *fisExperimentTemplateState
}

func (fet *FisExperimentTemplate) Type() string {
	return "aws_fis_experiment_template"
}

func (fet *FisExperimentTemplate) LocalName() string {
	return fet.Name
}

func (fet *FisExperimentTemplate) Configuration() interface{} {
	return fet.Args
}

func (fet *FisExperimentTemplate) Attributes() fisExperimentTemplateAttributes {
	return fisExperimentTemplateAttributes{ref: terra.ReferenceResource(fet)}
}

func (fet *FisExperimentTemplate) ImportState(av io.Reader) error {
	fet.state = &fisExperimentTemplateState{}
	if err := json.NewDecoder(av).Decode(fet.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fet.Type(), fet.LocalName(), err)
	}
	return nil
}

func (fet *FisExperimentTemplate) State() (*fisExperimentTemplateState, bool) {
	return fet.state, fet.state != nil
}

func (fet *FisExperimentTemplate) StateMust() *fisExperimentTemplateState {
	if fet.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fet.Type(), fet.LocalName()))
	}
	return fet.state
}

func (fet *FisExperimentTemplate) DependOn() terra.Reference {
	return terra.ReferenceResource(fet)
}

type FisExperimentTemplateArgs struct {
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Action: min=1
	Action []fisexperimenttemplate.Action `hcl:"action,block" validate:"min=1"`
	// StopCondition: min=1
	StopCondition []fisexperimenttemplate.StopCondition `hcl:"stop_condition,block" validate:"min=1"`
	// Target: min=0
	Target []fisexperimenttemplate.Target `hcl:"target,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *fisexperimenttemplate.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FisExperimentTemplate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type fisExperimentTemplateAttributes struct {
	ref terra.Reference
}

func (fet fisExperimentTemplateAttributes) Description() terra.StringValue {
	return terra.ReferenceString(fet.ref.Append("description"))
}

func (fet fisExperimentTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fet.ref.Append("id"))
}

func (fet fisExperimentTemplateAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(fet.ref.Append("role_arn"))
}

func (fet fisExperimentTemplateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fet.ref.Append("tags"))
}

func (fet fisExperimentTemplateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fet.ref.Append("tags_all"))
}

func (fet fisExperimentTemplateAttributes) Action() terra.SetValue[fisexperimenttemplate.ActionAttributes] {
	return terra.ReferenceSet[fisexperimenttemplate.ActionAttributes](fet.ref.Append("action"))
}

func (fet fisExperimentTemplateAttributes) StopCondition() terra.SetValue[fisexperimenttemplate.StopConditionAttributes] {
	return terra.ReferenceSet[fisexperimenttemplate.StopConditionAttributes](fet.ref.Append("stop_condition"))
}

func (fet fisExperimentTemplateAttributes) Target() terra.SetValue[fisexperimenttemplate.TargetAttributes] {
	return terra.ReferenceSet[fisexperimenttemplate.TargetAttributes](fet.ref.Append("target"))
}

func (fet fisExperimentTemplateAttributes) Timeouts() fisexperimenttemplate.TimeoutsAttributes {
	return terra.ReferenceSingle[fisexperimenttemplate.TimeoutsAttributes](fet.ref.Append("timeouts"))
}

type fisExperimentTemplateState struct {
	Description   string                                     `json:"description"`
	Id            string                                     `json:"id"`
	RoleArn       string                                     `json:"role_arn"`
	Tags          map[string]string                          `json:"tags"`
	TagsAll       map[string]string                          `json:"tags_all"`
	Action        []fisexperimenttemplate.ActionState        `json:"action"`
	StopCondition []fisexperimenttemplate.StopConditionState `json:"stop_condition"`
	Target        []fisexperimenttemplate.TargetState        `json:"target"`
	Timeouts      *fisexperimenttemplate.TimeoutsState       `json:"timeouts"`
}
