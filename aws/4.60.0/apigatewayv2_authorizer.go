// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	apigatewayv2authorizer "github.com/golingon/terraproviders/aws/4.60.0/apigatewayv2authorizer"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigatewayv2Authorizer(name string, args Apigatewayv2AuthorizerArgs) *Apigatewayv2Authorizer {
	return &Apigatewayv2Authorizer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Apigatewayv2Authorizer)(nil)

type Apigatewayv2Authorizer struct {
	Name  string
	Args  Apigatewayv2AuthorizerArgs
	state *apigatewayv2AuthorizerState
}

func (aa *Apigatewayv2Authorizer) Type() string {
	return "aws_apigatewayv2_authorizer"
}

func (aa *Apigatewayv2Authorizer) LocalName() string {
	return aa.Name
}

func (aa *Apigatewayv2Authorizer) Configuration() interface{} {
	return aa.Args
}

func (aa *Apigatewayv2Authorizer) Attributes() apigatewayv2AuthorizerAttributes {
	return apigatewayv2AuthorizerAttributes{ref: terra.ReferenceResource(aa)}
}

func (aa *Apigatewayv2Authorizer) ImportState(av io.Reader) error {
	aa.state = &apigatewayv2AuthorizerState{}
	if err := json.NewDecoder(av).Decode(aa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aa.Type(), aa.LocalName(), err)
	}
	return nil
}

func (aa *Apigatewayv2Authorizer) State() (*apigatewayv2AuthorizerState, bool) {
	return aa.state, aa.state != nil
}

func (aa *Apigatewayv2Authorizer) StateMust() *apigatewayv2AuthorizerState {
	if aa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aa.Type(), aa.LocalName()))
	}
	return aa.state
}

func (aa *Apigatewayv2Authorizer) DependOn() terra.Reference {
	return terra.ReferenceResource(aa)
}

type Apigatewayv2AuthorizerArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// AuthorizerCredentialsArn: string, optional
	AuthorizerCredentialsArn terra.StringValue `hcl:"authorizer_credentials_arn,attr"`
	// AuthorizerPayloadFormatVersion: string, optional
	AuthorizerPayloadFormatVersion terra.StringValue `hcl:"authorizer_payload_format_version,attr"`
	// AuthorizerResultTtlInSeconds: number, optional
	AuthorizerResultTtlInSeconds terra.NumberValue `hcl:"authorizer_result_ttl_in_seconds,attr"`
	// AuthorizerType: string, required
	AuthorizerType terra.StringValue `hcl:"authorizer_type,attr" validate:"required"`
	// AuthorizerUri: string, optional
	AuthorizerUri terra.StringValue `hcl:"authorizer_uri,attr"`
	// EnableSimpleResponses: bool, optional
	EnableSimpleResponses terra.BoolValue `hcl:"enable_simple_responses,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentitySources: set of string, optional
	IdentitySources terra.SetValue[terra.StringValue] `hcl:"identity_sources,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// JwtConfiguration: optional
	JwtConfiguration *apigatewayv2authorizer.JwtConfiguration `hcl:"jwt_configuration,block"`
	// DependsOn contains resources that Apigatewayv2Authorizer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigatewayv2AuthorizerAttributes struct {
	ref terra.Reference
}

func (aa apigatewayv2AuthorizerAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("api_id"))
}

func (aa apigatewayv2AuthorizerAttributes) AuthorizerCredentialsArn() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("authorizer_credentials_arn"))
}

func (aa apigatewayv2AuthorizerAttributes) AuthorizerPayloadFormatVersion() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("authorizer_payload_format_version"))
}

func (aa apigatewayv2AuthorizerAttributes) AuthorizerResultTtlInSeconds() terra.NumberValue {
	return terra.ReferenceNumber(aa.ref.Append("authorizer_result_ttl_in_seconds"))
}

func (aa apigatewayv2AuthorizerAttributes) AuthorizerType() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("authorizer_type"))
}

func (aa apigatewayv2AuthorizerAttributes) AuthorizerUri() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("authorizer_uri"))
}

func (aa apigatewayv2AuthorizerAttributes) EnableSimpleResponses() terra.BoolValue {
	return terra.ReferenceBool(aa.ref.Append("enable_simple_responses"))
}

func (aa apigatewayv2AuthorizerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("id"))
}

func (aa apigatewayv2AuthorizerAttributes) IdentitySources() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](aa.ref.Append("identity_sources"))
}

func (aa apigatewayv2AuthorizerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("name"))
}

func (aa apigatewayv2AuthorizerAttributes) JwtConfiguration() terra.ListValue[apigatewayv2authorizer.JwtConfigurationAttributes] {
	return terra.ReferenceList[apigatewayv2authorizer.JwtConfigurationAttributes](aa.ref.Append("jwt_configuration"))
}

type apigatewayv2AuthorizerState struct {
	ApiId                          string                                         `json:"api_id"`
	AuthorizerCredentialsArn       string                                         `json:"authorizer_credentials_arn"`
	AuthorizerPayloadFormatVersion string                                         `json:"authorizer_payload_format_version"`
	AuthorizerResultTtlInSeconds   float64                                        `json:"authorizer_result_ttl_in_seconds"`
	AuthorizerType                 string                                         `json:"authorizer_type"`
	AuthorizerUri                  string                                         `json:"authorizer_uri"`
	EnableSimpleResponses          bool                                           `json:"enable_simple_responses"`
	Id                             string                                         `json:"id"`
	IdentitySources                []string                                       `json:"identity_sources"`
	Name                           string                                         `json:"name"`
	JwtConfiguration               []apigatewayv2authorizer.JwtConfigurationState `json:"jwt_configuration"`
}
