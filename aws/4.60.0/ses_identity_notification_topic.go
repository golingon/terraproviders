// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSesIdentityNotificationTopic(name string, args SesIdentityNotificationTopicArgs) *SesIdentityNotificationTopic {
	return &SesIdentityNotificationTopic{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SesIdentityNotificationTopic)(nil)

type SesIdentityNotificationTopic struct {
	Name  string
	Args  SesIdentityNotificationTopicArgs
	state *sesIdentityNotificationTopicState
}

func (sint *SesIdentityNotificationTopic) Type() string {
	return "aws_ses_identity_notification_topic"
}

func (sint *SesIdentityNotificationTopic) LocalName() string {
	return sint.Name
}

func (sint *SesIdentityNotificationTopic) Configuration() interface{} {
	return sint.Args
}

func (sint *SesIdentityNotificationTopic) Attributes() sesIdentityNotificationTopicAttributes {
	return sesIdentityNotificationTopicAttributes{ref: terra.ReferenceResource(sint)}
}

func (sint *SesIdentityNotificationTopic) ImportState(av io.Reader) error {
	sint.state = &sesIdentityNotificationTopicState{}
	if err := json.NewDecoder(av).Decode(sint.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sint.Type(), sint.LocalName(), err)
	}
	return nil
}

func (sint *SesIdentityNotificationTopic) State() (*sesIdentityNotificationTopicState, bool) {
	return sint.state, sint.state != nil
}

func (sint *SesIdentityNotificationTopic) StateMust() *sesIdentityNotificationTopicState {
	if sint.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sint.Type(), sint.LocalName()))
	}
	return sint.state
}

func (sint *SesIdentityNotificationTopic) DependOn() terra.Reference {
	return terra.ReferenceResource(sint)
}

type SesIdentityNotificationTopicArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Identity: string, required
	Identity terra.StringValue `hcl:"identity,attr" validate:"required"`
	// IncludeOriginalHeaders: bool, optional
	IncludeOriginalHeaders terra.BoolValue `hcl:"include_original_headers,attr"`
	// NotificationType: string, required
	NotificationType terra.StringValue `hcl:"notification_type,attr" validate:"required"`
	// TopicArn: string, optional
	TopicArn terra.StringValue `hcl:"topic_arn,attr"`
	// DependsOn contains resources that SesIdentityNotificationTopic depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sesIdentityNotificationTopicAttributes struct {
	ref terra.Reference
}

func (sint sesIdentityNotificationTopicAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sint.ref.Append("id"))
}

func (sint sesIdentityNotificationTopicAttributes) Identity() terra.StringValue {
	return terra.ReferenceString(sint.ref.Append("identity"))
}

func (sint sesIdentityNotificationTopicAttributes) IncludeOriginalHeaders() terra.BoolValue {
	return terra.ReferenceBool(sint.ref.Append("include_original_headers"))
}

func (sint sesIdentityNotificationTopicAttributes) NotificationType() terra.StringValue {
	return terra.ReferenceString(sint.ref.Append("notification_type"))
}

func (sint sesIdentityNotificationTopicAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceString(sint.ref.Append("topic_arn"))
}

type sesIdentityNotificationTopicState struct {
	Id                     string `json:"id"`
	Identity               string `json:"identity"`
	IncludeOriginalHeaders bool   `json:"include_original_headers"`
	NotificationType       string `json:"notification_type"`
	TopicArn               string `json:"topic_arn"`
}
