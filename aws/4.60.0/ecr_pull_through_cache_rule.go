// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEcrPullThroughCacheRule(name string, args EcrPullThroughCacheRuleArgs) *EcrPullThroughCacheRule {
	return &EcrPullThroughCacheRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EcrPullThroughCacheRule)(nil)

type EcrPullThroughCacheRule struct {
	Name  string
	Args  EcrPullThroughCacheRuleArgs
	state *ecrPullThroughCacheRuleState
}

func (eptcr *EcrPullThroughCacheRule) Type() string {
	return "aws_ecr_pull_through_cache_rule"
}

func (eptcr *EcrPullThroughCacheRule) LocalName() string {
	return eptcr.Name
}

func (eptcr *EcrPullThroughCacheRule) Configuration() interface{} {
	return eptcr.Args
}

func (eptcr *EcrPullThroughCacheRule) Attributes() ecrPullThroughCacheRuleAttributes {
	return ecrPullThroughCacheRuleAttributes{ref: terra.ReferenceResource(eptcr)}
}

func (eptcr *EcrPullThroughCacheRule) ImportState(av io.Reader) error {
	eptcr.state = &ecrPullThroughCacheRuleState{}
	if err := json.NewDecoder(av).Decode(eptcr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", eptcr.Type(), eptcr.LocalName(), err)
	}
	return nil
}

func (eptcr *EcrPullThroughCacheRule) State() (*ecrPullThroughCacheRuleState, bool) {
	return eptcr.state, eptcr.state != nil
}

func (eptcr *EcrPullThroughCacheRule) StateMust() *ecrPullThroughCacheRuleState {
	if eptcr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", eptcr.Type(), eptcr.LocalName()))
	}
	return eptcr.state
}

func (eptcr *EcrPullThroughCacheRule) DependOn() terra.Reference {
	return terra.ReferenceResource(eptcr)
}

type EcrPullThroughCacheRuleArgs struct {
	// EcrRepositoryPrefix: string, required
	EcrRepositoryPrefix terra.StringValue `hcl:"ecr_repository_prefix,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// UpstreamRegistryUrl: string, required
	UpstreamRegistryUrl terra.StringValue `hcl:"upstream_registry_url,attr" validate:"required"`
	// DependsOn contains resources that EcrPullThroughCacheRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ecrPullThroughCacheRuleAttributes struct {
	ref terra.Reference
}

func (eptcr ecrPullThroughCacheRuleAttributes) EcrRepositoryPrefix() terra.StringValue {
	return terra.ReferenceString(eptcr.ref.Append("ecr_repository_prefix"))
}

func (eptcr ecrPullThroughCacheRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(eptcr.ref.Append("id"))
}

func (eptcr ecrPullThroughCacheRuleAttributes) RegistryId() terra.StringValue {
	return terra.ReferenceString(eptcr.ref.Append("registry_id"))
}

func (eptcr ecrPullThroughCacheRuleAttributes) UpstreamRegistryUrl() terra.StringValue {
	return terra.ReferenceString(eptcr.ref.Append("upstream_registry_url"))
}

type ecrPullThroughCacheRuleState struct {
	EcrRepositoryPrefix string `json:"ecr_repository_prefix"`
	Id                  string `json:"id"`
	RegistryId          string `json:"registry_id"`
	UpstreamRegistryUrl string `json:"upstream_registry_url"`
}
