// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	datasynclocationhdfs "github.com/golingon/terraproviders/aws/4.60.0/datasynclocationhdfs"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatasyncLocationHdfs(name string, args DatasyncLocationHdfsArgs) *DatasyncLocationHdfs {
	return &DatasyncLocationHdfs{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatasyncLocationHdfs)(nil)

type DatasyncLocationHdfs struct {
	Name  string
	Args  DatasyncLocationHdfsArgs
	state *datasyncLocationHdfsState
}

func (dlh *DatasyncLocationHdfs) Type() string {
	return "aws_datasync_location_hdfs"
}

func (dlh *DatasyncLocationHdfs) LocalName() string {
	return dlh.Name
}

func (dlh *DatasyncLocationHdfs) Configuration() interface{} {
	return dlh.Args
}

func (dlh *DatasyncLocationHdfs) Attributes() datasyncLocationHdfsAttributes {
	return datasyncLocationHdfsAttributes{ref: terra.ReferenceResource(dlh)}
}

func (dlh *DatasyncLocationHdfs) ImportState(av io.Reader) error {
	dlh.state = &datasyncLocationHdfsState{}
	if err := json.NewDecoder(av).Decode(dlh.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dlh.Type(), dlh.LocalName(), err)
	}
	return nil
}

func (dlh *DatasyncLocationHdfs) State() (*datasyncLocationHdfsState, bool) {
	return dlh.state, dlh.state != nil
}

func (dlh *DatasyncLocationHdfs) StateMust() *datasyncLocationHdfsState {
	if dlh.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dlh.Type(), dlh.LocalName()))
	}
	return dlh.state
}

func (dlh *DatasyncLocationHdfs) DependOn() terra.Reference {
	return terra.ReferenceResource(dlh)
}

type DatasyncLocationHdfsArgs struct {
	// AgentArns: set of string, required
	AgentArns terra.SetValue[terra.StringValue] `hcl:"agent_arns,attr" validate:"required"`
	// AuthenticationType: string, optional
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr"`
	// BlockSize: number, optional
	BlockSize terra.NumberValue `hcl:"block_size,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KerberosKeytab: string, optional
	KerberosKeytab terra.StringValue `hcl:"kerberos_keytab,attr"`
	// KerberosKrb5Conf: string, optional
	KerberosKrb5Conf terra.StringValue `hcl:"kerberos_krb5_conf,attr"`
	// KerberosPrincipal: string, optional
	KerberosPrincipal terra.StringValue `hcl:"kerberos_principal,attr"`
	// KmsKeyProviderUri: string, optional
	KmsKeyProviderUri terra.StringValue `hcl:"kms_key_provider_uri,attr"`
	// ReplicationFactor: number, optional
	ReplicationFactor terra.NumberValue `hcl:"replication_factor,attr"`
	// SimpleUser: string, optional
	SimpleUser terra.StringValue `hcl:"simple_user,attr"`
	// Subdirectory: string, optional
	Subdirectory terra.StringValue `hcl:"subdirectory,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// NameNode: min=1
	NameNode []datasynclocationhdfs.NameNode `hcl:"name_node,block" validate:"min=1"`
	// QopConfiguration: optional
	QopConfiguration *datasynclocationhdfs.QopConfiguration `hcl:"qop_configuration,block"`
	// DependsOn contains resources that DatasyncLocationHdfs depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type datasyncLocationHdfsAttributes struct {
	ref terra.Reference
}

func (dlh datasyncLocationHdfsAttributes) AgentArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dlh.ref.Append("agent_arns"))
}

func (dlh datasyncLocationHdfsAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dlh.ref.Append("arn"))
}

func (dlh datasyncLocationHdfsAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceString(dlh.ref.Append("authentication_type"))
}

func (dlh datasyncLocationHdfsAttributes) BlockSize() terra.NumberValue {
	return terra.ReferenceNumber(dlh.ref.Append("block_size"))
}

func (dlh datasyncLocationHdfsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dlh.ref.Append("id"))
}

func (dlh datasyncLocationHdfsAttributes) KerberosKeytab() terra.StringValue {
	return terra.ReferenceString(dlh.ref.Append("kerberos_keytab"))
}

func (dlh datasyncLocationHdfsAttributes) KerberosKrb5Conf() terra.StringValue {
	return terra.ReferenceString(dlh.ref.Append("kerberos_krb5_conf"))
}

func (dlh datasyncLocationHdfsAttributes) KerberosPrincipal() terra.StringValue {
	return terra.ReferenceString(dlh.ref.Append("kerberos_principal"))
}

func (dlh datasyncLocationHdfsAttributes) KmsKeyProviderUri() terra.StringValue {
	return terra.ReferenceString(dlh.ref.Append("kms_key_provider_uri"))
}

func (dlh datasyncLocationHdfsAttributes) ReplicationFactor() terra.NumberValue {
	return terra.ReferenceNumber(dlh.ref.Append("replication_factor"))
}

func (dlh datasyncLocationHdfsAttributes) SimpleUser() terra.StringValue {
	return terra.ReferenceString(dlh.ref.Append("simple_user"))
}

func (dlh datasyncLocationHdfsAttributes) Subdirectory() terra.StringValue {
	return terra.ReferenceString(dlh.ref.Append("subdirectory"))
}

func (dlh datasyncLocationHdfsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dlh.ref.Append("tags"))
}

func (dlh datasyncLocationHdfsAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dlh.ref.Append("tags_all"))
}

func (dlh datasyncLocationHdfsAttributes) Uri() terra.StringValue {
	return terra.ReferenceString(dlh.ref.Append("uri"))
}

func (dlh datasyncLocationHdfsAttributes) NameNode() terra.SetValue[datasynclocationhdfs.NameNodeAttributes] {
	return terra.ReferenceSet[datasynclocationhdfs.NameNodeAttributes](dlh.ref.Append("name_node"))
}

func (dlh datasyncLocationHdfsAttributes) QopConfiguration() terra.ListValue[datasynclocationhdfs.QopConfigurationAttributes] {
	return terra.ReferenceList[datasynclocationhdfs.QopConfigurationAttributes](dlh.ref.Append("qop_configuration"))
}

type datasyncLocationHdfsState struct {
	AgentArns          []string                                     `json:"agent_arns"`
	Arn                string                                       `json:"arn"`
	AuthenticationType string                                       `json:"authentication_type"`
	BlockSize          float64                                      `json:"block_size"`
	Id                 string                                       `json:"id"`
	KerberosKeytab     string                                       `json:"kerberos_keytab"`
	KerberosKrb5Conf   string                                       `json:"kerberos_krb5_conf"`
	KerberosPrincipal  string                                       `json:"kerberos_principal"`
	KmsKeyProviderUri  string                                       `json:"kms_key_provider_uri"`
	ReplicationFactor  float64                                      `json:"replication_factor"`
	SimpleUser         string                                       `json:"simple_user"`
	Subdirectory       string                                       `json:"subdirectory"`
	Tags               map[string]string                            `json:"tags"`
	TagsAll            map[string]string                            `json:"tags_all"`
	Uri                string                                       `json:"uri"`
	NameNode           []datasynclocationhdfs.NameNodeState         `json:"name_node"`
	QopConfiguration   []datasynclocationhdfs.QopConfigurationState `json:"qop_configuration"`
}
