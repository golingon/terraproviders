// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigatewayv2Model(name string, args Apigatewayv2ModelArgs) *Apigatewayv2Model {
	return &Apigatewayv2Model{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Apigatewayv2Model)(nil)

type Apigatewayv2Model struct {
	Name  string
	Args  Apigatewayv2ModelArgs
	state *apigatewayv2ModelState
}

func (am *Apigatewayv2Model) Type() string {
	return "aws_apigatewayv2_model"
}

func (am *Apigatewayv2Model) LocalName() string {
	return am.Name
}

func (am *Apigatewayv2Model) Configuration() interface{} {
	return am.Args
}

func (am *Apigatewayv2Model) Attributes() apigatewayv2ModelAttributes {
	return apigatewayv2ModelAttributes{ref: terra.ReferenceResource(am)}
}

func (am *Apigatewayv2Model) ImportState(av io.Reader) error {
	am.state = &apigatewayv2ModelState{}
	if err := json.NewDecoder(av).Decode(am.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", am.Type(), am.LocalName(), err)
	}
	return nil
}

func (am *Apigatewayv2Model) State() (*apigatewayv2ModelState, bool) {
	return am.state, am.state != nil
}

func (am *Apigatewayv2Model) StateMust() *apigatewayv2ModelState {
	if am.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", am.Type(), am.LocalName()))
	}
	return am.state
}

func (am *Apigatewayv2Model) DependOn() terra.Reference {
	return terra.ReferenceResource(am)
}

type Apigatewayv2ModelArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// ContentType: string, required
	ContentType terra.StringValue `hcl:"content_type,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Schema: string, required
	Schema terra.StringValue `hcl:"schema,attr" validate:"required"`
	// DependsOn contains resources that Apigatewayv2Model depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigatewayv2ModelAttributes struct {
	ref terra.Reference
}

func (am apigatewayv2ModelAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(am.ref.Append("api_id"))
}

func (am apigatewayv2ModelAttributes) ContentType() terra.StringValue {
	return terra.ReferenceString(am.ref.Append("content_type"))
}

func (am apigatewayv2ModelAttributes) Description() terra.StringValue {
	return terra.ReferenceString(am.ref.Append("description"))
}

func (am apigatewayv2ModelAttributes) Id() terra.StringValue {
	return terra.ReferenceString(am.ref.Append("id"))
}

func (am apigatewayv2ModelAttributes) Name() terra.StringValue {
	return terra.ReferenceString(am.ref.Append("name"))
}

func (am apigatewayv2ModelAttributes) Schema() terra.StringValue {
	return terra.ReferenceString(am.ref.Append("schema"))
}

type apigatewayv2ModelState struct {
	ApiId       string `json:"api_id"`
	ContentType string `json:"content_type"`
	Description string `json:"description"`
	Id          string `json:"id"`
	Name        string `json:"name"`
	Schema      string `json:"schema"`
}
