// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53ResolverQueryLogConfig(name string, args Route53ResolverQueryLogConfigArgs) *Route53ResolverQueryLogConfig {
	return &Route53ResolverQueryLogConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53ResolverQueryLogConfig)(nil)

type Route53ResolverQueryLogConfig struct {
	Name  string
	Args  Route53ResolverQueryLogConfigArgs
	state *route53ResolverQueryLogConfigState
}

func (rrqlc *Route53ResolverQueryLogConfig) Type() string {
	return "aws_route53_resolver_query_log_config"
}

func (rrqlc *Route53ResolverQueryLogConfig) LocalName() string {
	return rrqlc.Name
}

func (rrqlc *Route53ResolverQueryLogConfig) Configuration() interface{} {
	return rrqlc.Args
}

func (rrqlc *Route53ResolverQueryLogConfig) Attributes() route53ResolverQueryLogConfigAttributes {
	return route53ResolverQueryLogConfigAttributes{ref: terra.ReferenceResource(rrqlc)}
}

func (rrqlc *Route53ResolverQueryLogConfig) ImportState(av io.Reader) error {
	rrqlc.state = &route53ResolverQueryLogConfigState{}
	if err := json.NewDecoder(av).Decode(rrqlc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrqlc.Type(), rrqlc.LocalName(), err)
	}
	return nil
}

func (rrqlc *Route53ResolverQueryLogConfig) State() (*route53ResolverQueryLogConfigState, bool) {
	return rrqlc.state, rrqlc.state != nil
}

func (rrqlc *Route53ResolverQueryLogConfig) StateMust() *route53ResolverQueryLogConfigState {
	if rrqlc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrqlc.Type(), rrqlc.LocalName()))
	}
	return rrqlc.state
}

func (rrqlc *Route53ResolverQueryLogConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(rrqlc)
}

type Route53ResolverQueryLogConfigArgs struct {
	// DestinationArn: string, required
	DestinationArn terra.StringValue `hcl:"destination_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that Route53ResolverQueryLogConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53ResolverQueryLogConfigAttributes struct {
	ref terra.Reference
}

func (rrqlc route53ResolverQueryLogConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rrqlc.ref.Append("arn"))
}

func (rrqlc route53ResolverQueryLogConfigAttributes) DestinationArn() terra.StringValue {
	return terra.ReferenceString(rrqlc.ref.Append("destination_arn"))
}

func (rrqlc route53ResolverQueryLogConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rrqlc.ref.Append("id"))
}

func (rrqlc route53ResolverQueryLogConfigAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rrqlc.ref.Append("name"))
}

func (rrqlc route53ResolverQueryLogConfigAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(rrqlc.ref.Append("owner_id"))
}

func (rrqlc route53ResolverQueryLogConfigAttributes) ShareStatus() terra.StringValue {
	return terra.ReferenceString(rrqlc.ref.Append("share_status"))
}

func (rrqlc route53ResolverQueryLogConfigAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrqlc.ref.Append("tags"))
}

func (rrqlc route53ResolverQueryLogConfigAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrqlc.ref.Append("tags_all"))
}

type route53ResolverQueryLogConfigState struct {
	Arn            string            `json:"arn"`
	DestinationArn string            `json:"destination_arn"`
	Id             string            `json:"id"`
	Name           string            `json:"name"`
	OwnerId        string            `json:"owner_id"`
	ShareStatus    string            `json:"share_status"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
}
