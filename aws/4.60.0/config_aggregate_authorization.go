// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConfigAggregateAuthorization(name string, args ConfigAggregateAuthorizationArgs) *ConfigAggregateAuthorization {
	return &ConfigAggregateAuthorization{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConfigAggregateAuthorization)(nil)

type ConfigAggregateAuthorization struct {
	Name  string
	Args  ConfigAggregateAuthorizationArgs
	state *configAggregateAuthorizationState
}

func (caa *ConfigAggregateAuthorization) Type() string {
	return "aws_config_aggregate_authorization"
}

func (caa *ConfigAggregateAuthorization) LocalName() string {
	return caa.Name
}

func (caa *ConfigAggregateAuthorization) Configuration() interface{} {
	return caa.Args
}

func (caa *ConfigAggregateAuthorization) Attributes() configAggregateAuthorizationAttributes {
	return configAggregateAuthorizationAttributes{ref: terra.ReferenceResource(caa)}
}

func (caa *ConfigAggregateAuthorization) ImportState(av io.Reader) error {
	caa.state = &configAggregateAuthorizationState{}
	if err := json.NewDecoder(av).Decode(caa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", caa.Type(), caa.LocalName(), err)
	}
	return nil
}

func (caa *ConfigAggregateAuthorization) State() (*configAggregateAuthorizationState, bool) {
	return caa.state, caa.state != nil
}

func (caa *ConfigAggregateAuthorization) StateMust() *configAggregateAuthorizationState {
	if caa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", caa.Type(), caa.LocalName()))
	}
	return caa.state
}

func (caa *ConfigAggregateAuthorization) DependOn() terra.Reference {
	return terra.ReferenceResource(caa)
}

type ConfigAggregateAuthorizationArgs struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that ConfigAggregateAuthorization depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type configAggregateAuthorizationAttributes struct {
	ref terra.Reference
}

func (caa configAggregateAuthorizationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(caa.ref.Append("account_id"))
}

func (caa configAggregateAuthorizationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(caa.ref.Append("arn"))
}

func (caa configAggregateAuthorizationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(caa.ref.Append("id"))
}

func (caa configAggregateAuthorizationAttributes) Region() terra.StringValue {
	return terra.ReferenceString(caa.ref.Append("region"))
}

func (caa configAggregateAuthorizationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](caa.ref.Append("tags"))
}

func (caa configAggregateAuthorizationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](caa.ref.Append("tags_all"))
}

type configAggregateAuthorizationState struct {
	AccountId string            `json:"account_id"`
	Arn       string            `json:"arn"`
	Id        string            `json:"id"`
	Region    string            `json:"region"`
	Tags      map[string]string `json:"tags"`
	TagsAll   map[string]string `json:"tags_all"`
}
