// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewWafRegexPatternSet creates a new instance of [WafRegexPatternSet].
func NewWafRegexPatternSet(name string, args WafRegexPatternSetArgs) *WafRegexPatternSet {
	return &WafRegexPatternSet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WafRegexPatternSet)(nil)

// WafRegexPatternSet represents the Terraform resource aws_waf_regex_pattern_set.
type WafRegexPatternSet struct {
	Name      string
	Args      WafRegexPatternSetArgs
	state     *wafRegexPatternSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [WafRegexPatternSet].
func (wrps *WafRegexPatternSet) Type() string {
	return "aws_waf_regex_pattern_set"
}

// LocalName returns the local name for [WafRegexPatternSet].
func (wrps *WafRegexPatternSet) LocalName() string {
	return wrps.Name
}

// Configuration returns the configuration (args) for [WafRegexPatternSet].
func (wrps *WafRegexPatternSet) Configuration() interface{} {
	return wrps.Args
}

// DependOn is used for other resources to depend on [WafRegexPatternSet].
func (wrps *WafRegexPatternSet) DependOn() terra.Reference {
	return terra.ReferenceResource(wrps)
}

// Dependencies returns the list of resources [WafRegexPatternSet] depends_on.
func (wrps *WafRegexPatternSet) Dependencies() terra.Dependencies {
	return wrps.DependsOn
}

// LifecycleManagement returns the lifecycle block for [WafRegexPatternSet].
func (wrps *WafRegexPatternSet) LifecycleManagement() *terra.Lifecycle {
	return wrps.Lifecycle
}

// Attributes returns the attributes for [WafRegexPatternSet].
func (wrps *WafRegexPatternSet) Attributes() wafRegexPatternSetAttributes {
	return wafRegexPatternSetAttributes{ref: terra.ReferenceResource(wrps)}
}

// ImportState imports the given attribute values into [WafRegexPatternSet]'s state.
func (wrps *WafRegexPatternSet) ImportState(av io.Reader) error {
	wrps.state = &wafRegexPatternSetState{}
	if err := json.NewDecoder(av).Decode(wrps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wrps.Type(), wrps.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [WafRegexPatternSet] has state.
func (wrps *WafRegexPatternSet) State() (*wafRegexPatternSetState, bool) {
	return wrps.state, wrps.state != nil
}

// StateMust returns the state for [WafRegexPatternSet]. Panics if the state is nil.
func (wrps *WafRegexPatternSet) StateMust() *wafRegexPatternSetState {
	if wrps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wrps.Type(), wrps.LocalName()))
	}
	return wrps.state
}

// WafRegexPatternSetArgs contains the configurations for aws_waf_regex_pattern_set.
type WafRegexPatternSetArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RegexPatternStrings: set of string, optional
	RegexPatternStrings terra.SetValue[terra.StringValue] `hcl:"regex_pattern_strings,attr"`
}
type wafRegexPatternSetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_waf_regex_pattern_set.
func (wrps wafRegexPatternSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(wrps.ref.Append("arn"))
}

// Id returns a reference to field id of aws_waf_regex_pattern_set.
func (wrps wafRegexPatternSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(wrps.ref.Append("id"))
}

// Name returns a reference to field name of aws_waf_regex_pattern_set.
func (wrps wafRegexPatternSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(wrps.ref.Append("name"))
}

// RegexPatternStrings returns a reference to field regex_pattern_strings of aws_waf_regex_pattern_set.
func (wrps wafRegexPatternSetAttributes) RegexPatternStrings() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](wrps.ref.Append("regex_pattern_strings"))
}

type wafRegexPatternSetState struct {
	Arn                 string   `json:"arn"`
	Id                  string   `json:"id"`
	Name                string   `json:"name"`
	RegexPatternStrings []string `json:"regex_pattern_strings"`
}
