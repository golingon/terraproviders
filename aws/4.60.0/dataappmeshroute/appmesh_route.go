// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataappmeshroute

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Spec struct {
	// GrpcRoute: min=0
	GrpcRoute []GrpcRoute `hcl:"grpc_route,block" validate:"min=0"`
	// Http2Route: min=0
	Http2Route []Http2Route `hcl:"http2_route,block" validate:"min=0"`
	// HttpRoute: min=0
	HttpRoute []HttpRoute `hcl:"http_route,block" validate:"min=0"`
	// TcpRoute: min=0
	TcpRoute []TcpRoute `hcl:"tcp_route,block" validate:"min=0"`
}

type GrpcRoute struct {
	// GrpcRouteAction: min=0
	Action []GrpcRouteAction `hcl:"action,block" validate:"min=0"`
	// GrpcRouteMatch: min=0
	Match []GrpcRouteMatch `hcl:"match,block" validate:"min=0"`
	// GrpcRouteRetryPolicy: min=0
	RetryPolicy []GrpcRouteRetryPolicy `hcl:"retry_policy,block" validate:"min=0"`
	// GrpcRouteTimeout: min=0
	Timeout []GrpcRouteTimeout `hcl:"timeout,block" validate:"min=0"`
}

type GrpcRouteAction struct {
	// GrpcRouteActionWeightedTarget: min=0
	WeightedTarget []GrpcRouteActionWeightedTarget `hcl:"weighted_target,block" validate:"min=0"`
}

type GrpcRouteActionWeightedTarget struct{}

type GrpcRouteMatch struct {
	// Metadata: min=0
	Metadata []Metadata `hcl:"metadata,block" validate:"min=0"`
}

type Metadata struct {
	// MetadataMatch: min=0
	Match []MetadataMatch `hcl:"match,block" validate:"min=0"`
}

type MetadataMatch struct {
	// MetadataMatchRange: min=0
	Range []MetadataMatchRange `hcl:"range,block" validate:"min=0"`
}

type MetadataMatchRange struct{}

type GrpcRouteRetryPolicy struct {
	// GrpcRouteRetryPolicyPerRetryTimeout: min=0
	PerRetryTimeout []GrpcRouteRetryPolicyPerRetryTimeout `hcl:"per_retry_timeout,block" validate:"min=0"`
}

type GrpcRouteRetryPolicyPerRetryTimeout struct{}

type GrpcRouteTimeout struct {
	// GrpcRouteTimeoutIdle: min=0
	Idle []GrpcRouteTimeoutIdle `hcl:"idle,block" validate:"min=0"`
	// GrpcRouteTimeoutPerRequest: min=0
	PerRequest []GrpcRouteTimeoutPerRequest `hcl:"per_request,block" validate:"min=0"`
}

type GrpcRouteTimeoutIdle struct{}

type GrpcRouteTimeoutPerRequest struct{}

type Http2Route struct {
	// Http2RouteAction: min=0
	Action []Http2RouteAction `hcl:"action,block" validate:"min=0"`
	// Http2RouteMatch: min=0
	Match []Http2RouteMatch `hcl:"match,block" validate:"min=0"`
	// Http2RouteRetryPolicy: min=0
	RetryPolicy []Http2RouteRetryPolicy `hcl:"retry_policy,block" validate:"min=0"`
	// Http2RouteTimeout: min=0
	Timeout []Http2RouteTimeout `hcl:"timeout,block" validate:"min=0"`
}

type Http2RouteAction struct {
	// Http2RouteActionWeightedTarget: min=0
	WeightedTarget []Http2RouteActionWeightedTarget `hcl:"weighted_target,block" validate:"min=0"`
}

type Http2RouteActionWeightedTarget struct{}

type Http2RouteMatch struct {
	// Http2RouteMatchHeader: min=0
	Header []Http2RouteMatchHeader `hcl:"header,block" validate:"min=0"`
}

type Http2RouteMatchHeader struct {
	// Http2RouteMatchHeaderMatch: min=0
	Match []Http2RouteMatchHeaderMatch `hcl:"match,block" validate:"min=0"`
}

type Http2RouteMatchHeaderMatch struct {
	// Http2RouteMatchHeaderMatchRange: min=0
	Range []Http2RouteMatchHeaderMatchRange `hcl:"range,block" validate:"min=0"`
}

type Http2RouteMatchHeaderMatchRange struct{}

type Http2RouteRetryPolicy struct {
	// Http2RouteRetryPolicyPerRetryTimeout: min=0
	PerRetryTimeout []Http2RouteRetryPolicyPerRetryTimeout `hcl:"per_retry_timeout,block" validate:"min=0"`
}

type Http2RouteRetryPolicyPerRetryTimeout struct{}

type Http2RouteTimeout struct {
	// Http2RouteTimeoutIdle: min=0
	Idle []Http2RouteTimeoutIdle `hcl:"idle,block" validate:"min=0"`
	// Http2RouteTimeoutPerRequest: min=0
	PerRequest []Http2RouteTimeoutPerRequest `hcl:"per_request,block" validate:"min=0"`
}

type Http2RouteTimeoutIdle struct{}

type Http2RouteTimeoutPerRequest struct{}

type HttpRoute struct {
	// HttpRouteAction: min=0
	Action []HttpRouteAction `hcl:"action,block" validate:"min=0"`
	// HttpRouteMatch: min=0
	Match []HttpRouteMatch `hcl:"match,block" validate:"min=0"`
	// HttpRouteRetryPolicy: min=0
	RetryPolicy []HttpRouteRetryPolicy `hcl:"retry_policy,block" validate:"min=0"`
	// HttpRouteTimeout: min=0
	Timeout []HttpRouteTimeout `hcl:"timeout,block" validate:"min=0"`
}

type HttpRouteAction struct {
	// HttpRouteActionWeightedTarget: min=0
	WeightedTarget []HttpRouteActionWeightedTarget `hcl:"weighted_target,block" validate:"min=0"`
}

type HttpRouteActionWeightedTarget struct{}

type HttpRouteMatch struct {
	// HttpRouteMatchHeader: min=0
	Header []HttpRouteMatchHeader `hcl:"header,block" validate:"min=0"`
}

type HttpRouteMatchHeader struct {
	// HttpRouteMatchHeaderMatch: min=0
	Match []HttpRouteMatchHeaderMatch `hcl:"match,block" validate:"min=0"`
}

type HttpRouteMatchHeaderMatch struct {
	// HttpRouteMatchHeaderMatchRange: min=0
	Range []HttpRouteMatchHeaderMatchRange `hcl:"range,block" validate:"min=0"`
}

type HttpRouteMatchHeaderMatchRange struct{}

type HttpRouteRetryPolicy struct {
	// HttpRouteRetryPolicyPerRetryTimeout: min=0
	PerRetryTimeout []HttpRouteRetryPolicyPerRetryTimeout `hcl:"per_retry_timeout,block" validate:"min=0"`
}

type HttpRouteRetryPolicyPerRetryTimeout struct{}

type HttpRouteTimeout struct {
	// HttpRouteTimeoutIdle: min=0
	Idle []HttpRouteTimeoutIdle `hcl:"idle,block" validate:"min=0"`
	// HttpRouteTimeoutPerRequest: min=0
	PerRequest []HttpRouteTimeoutPerRequest `hcl:"per_request,block" validate:"min=0"`
}

type HttpRouteTimeoutIdle struct{}

type HttpRouteTimeoutPerRequest struct{}

type TcpRoute struct {
	// TcpRouteAction: min=0
	Action []TcpRouteAction `hcl:"action,block" validate:"min=0"`
	// TcpRouteMatch: min=0
	Match []TcpRouteMatch `hcl:"match,block" validate:"min=0"`
	// TcpRouteTimeout: min=0
	Timeout []TcpRouteTimeout `hcl:"timeout,block" validate:"min=0"`
}

type TcpRouteAction struct {
	// TcpRouteActionWeightedTarget: min=0
	WeightedTarget []TcpRouteActionWeightedTarget `hcl:"weighted_target,block" validate:"min=0"`
}

type TcpRouteActionWeightedTarget struct{}

type TcpRouteMatch struct{}

type TcpRouteTimeout struct {
	// TcpRouteTimeoutIdle: min=0
	Idle []TcpRouteTimeoutIdle `hcl:"idle,block" validate:"min=0"`
}

type TcpRouteTimeoutIdle struct{}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(s.ref.Append("priority"))
}

func (s SpecAttributes) GrpcRoute() terra.ListValue[GrpcRouteAttributes] {
	return terra.ReferenceList[GrpcRouteAttributes](s.ref.Append("grpc_route"))
}

func (s SpecAttributes) Http2Route() terra.ListValue[Http2RouteAttributes] {
	return terra.ReferenceList[Http2RouteAttributes](s.ref.Append("http2_route"))
}

func (s SpecAttributes) HttpRoute() terra.ListValue[HttpRouteAttributes] {
	return terra.ReferenceList[HttpRouteAttributes](s.ref.Append("http_route"))
}

func (s SpecAttributes) TcpRoute() terra.ListValue[TcpRouteAttributes] {
	return terra.ReferenceList[TcpRouteAttributes](s.ref.Append("tcp_route"))
}

type GrpcRouteAttributes struct {
	ref terra.Reference
}

func (gr GrpcRouteAttributes) InternalRef() terra.Reference {
	return gr.ref
}

func (gr GrpcRouteAttributes) InternalWithRef(ref terra.Reference) GrpcRouteAttributes {
	return GrpcRouteAttributes{ref: ref}
}

func (gr GrpcRouteAttributes) InternalTokens() hclwrite.Tokens {
	return gr.ref.InternalTokens()
}

func (gr GrpcRouteAttributes) Action() terra.ListValue[GrpcRouteActionAttributes] {
	return terra.ReferenceList[GrpcRouteActionAttributes](gr.ref.Append("action"))
}

func (gr GrpcRouteAttributes) Match() terra.ListValue[GrpcRouteMatchAttributes] {
	return terra.ReferenceList[GrpcRouteMatchAttributes](gr.ref.Append("match"))
}

func (gr GrpcRouteAttributes) RetryPolicy() terra.ListValue[GrpcRouteRetryPolicyAttributes] {
	return terra.ReferenceList[GrpcRouteRetryPolicyAttributes](gr.ref.Append("retry_policy"))
}

func (gr GrpcRouteAttributes) Timeout() terra.ListValue[GrpcRouteTimeoutAttributes] {
	return terra.ReferenceList[GrpcRouteTimeoutAttributes](gr.ref.Append("timeout"))
}

type GrpcRouteActionAttributes struct {
	ref terra.Reference
}

func (a GrpcRouteActionAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a GrpcRouteActionAttributes) InternalWithRef(ref terra.Reference) GrpcRouteActionAttributes {
	return GrpcRouteActionAttributes{ref: ref}
}

func (a GrpcRouteActionAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a GrpcRouteActionAttributes) WeightedTarget() terra.SetValue[GrpcRouteActionWeightedTargetAttributes] {
	return terra.ReferenceSet[GrpcRouteActionWeightedTargetAttributes](a.ref.Append("weighted_target"))
}

type GrpcRouteActionWeightedTargetAttributes struct {
	ref terra.Reference
}

func (wt GrpcRouteActionWeightedTargetAttributes) InternalRef() terra.Reference {
	return wt.ref
}

func (wt GrpcRouteActionWeightedTargetAttributes) InternalWithRef(ref terra.Reference) GrpcRouteActionWeightedTargetAttributes {
	return GrpcRouteActionWeightedTargetAttributes{ref: ref}
}

func (wt GrpcRouteActionWeightedTargetAttributes) InternalTokens() hclwrite.Tokens {
	return wt.ref.InternalTokens()
}

func (wt GrpcRouteActionWeightedTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(wt.ref.Append("port"))
}

func (wt GrpcRouteActionWeightedTargetAttributes) VirtualNode() terra.StringValue {
	return terra.ReferenceString(wt.ref.Append("virtual_node"))
}

func (wt GrpcRouteActionWeightedTargetAttributes) Weight() terra.NumberValue {
	return terra.ReferenceNumber(wt.ref.Append("weight"))
}

type GrpcRouteMatchAttributes struct {
	ref terra.Reference
}

func (m GrpcRouteMatchAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m GrpcRouteMatchAttributes) InternalWithRef(ref terra.Reference) GrpcRouteMatchAttributes {
	return GrpcRouteMatchAttributes{ref: ref}
}

func (m GrpcRouteMatchAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m GrpcRouteMatchAttributes) MethodName() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("method_name"))
}

func (m GrpcRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(m.ref.Append("port"))
}

func (m GrpcRouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("prefix"))
}

func (m GrpcRouteMatchAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("service_name"))
}

func (m GrpcRouteMatchAttributes) Metadata() terra.SetValue[MetadataAttributes] {
	return terra.ReferenceSet[MetadataAttributes](m.ref.Append("metadata"))
}

type MetadataAttributes struct {
	ref terra.Reference
}

func (m MetadataAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m MetadataAttributes) InternalWithRef(ref terra.Reference) MetadataAttributes {
	return MetadataAttributes{ref: ref}
}

func (m MetadataAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m MetadataAttributes) Invert() terra.BoolValue {
	return terra.ReferenceBool(m.ref.Append("invert"))
}

func (m MetadataAttributes) Name() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("name"))
}

func (m MetadataAttributes) Match() terra.ListValue[MetadataMatchAttributes] {
	return terra.ReferenceList[MetadataMatchAttributes](m.ref.Append("match"))
}

type MetadataMatchAttributes struct {
	ref terra.Reference
}

func (m MetadataMatchAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m MetadataMatchAttributes) InternalWithRef(ref terra.Reference) MetadataMatchAttributes {
	return MetadataMatchAttributes{ref: ref}
}

func (m MetadataMatchAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m MetadataMatchAttributes) Exact() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("exact"))
}

func (m MetadataMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("prefix"))
}

func (m MetadataMatchAttributes) Regex() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("regex"))
}

func (m MetadataMatchAttributes) Suffix() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("suffix"))
}

func (m MetadataMatchAttributes) Range() terra.ListValue[MetadataMatchRangeAttributes] {
	return terra.ReferenceList[MetadataMatchRangeAttributes](m.ref.Append("range"))
}

type MetadataMatchRangeAttributes struct {
	ref terra.Reference
}

func (r MetadataMatchRangeAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r MetadataMatchRangeAttributes) InternalWithRef(ref terra.Reference) MetadataMatchRangeAttributes {
	return MetadataMatchRangeAttributes{ref: ref}
}

func (r MetadataMatchRangeAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r MetadataMatchRangeAttributes) End() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("end"))
}

func (r MetadataMatchRangeAttributes) Start() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("start"))
}

type GrpcRouteRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp GrpcRouteRetryPolicyAttributes) InternalRef() terra.Reference {
	return rp.ref
}

func (rp GrpcRouteRetryPolicyAttributes) InternalWithRef(ref terra.Reference) GrpcRouteRetryPolicyAttributes {
	return GrpcRouteRetryPolicyAttributes{ref: ref}
}

func (rp GrpcRouteRetryPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return rp.ref.InternalTokens()
}

func (rp GrpcRouteRetryPolicyAttributes) GrpcRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rp.ref.Append("grpc_retry_events"))
}

func (rp GrpcRouteRetryPolicyAttributes) HttpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rp.ref.Append("http_retry_events"))
}

func (rp GrpcRouteRetryPolicyAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceNumber(rp.ref.Append("max_retries"))
}

func (rp GrpcRouteRetryPolicyAttributes) TcpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rp.ref.Append("tcp_retry_events"))
}

func (rp GrpcRouteRetryPolicyAttributes) PerRetryTimeout() terra.ListValue[GrpcRouteRetryPolicyPerRetryTimeoutAttributes] {
	return terra.ReferenceList[GrpcRouteRetryPolicyPerRetryTimeoutAttributes](rp.ref.Append("per_retry_timeout"))
}

type GrpcRouteRetryPolicyPerRetryTimeoutAttributes struct {
	ref terra.Reference
}

func (prt GrpcRouteRetryPolicyPerRetryTimeoutAttributes) InternalRef() terra.Reference {
	return prt.ref
}

func (prt GrpcRouteRetryPolicyPerRetryTimeoutAttributes) InternalWithRef(ref terra.Reference) GrpcRouteRetryPolicyPerRetryTimeoutAttributes {
	return GrpcRouteRetryPolicyPerRetryTimeoutAttributes{ref: ref}
}

func (prt GrpcRouteRetryPolicyPerRetryTimeoutAttributes) InternalTokens() hclwrite.Tokens {
	return prt.ref.InternalTokens()
}

func (prt GrpcRouteRetryPolicyPerRetryTimeoutAttributes) Unit() terra.StringValue {
	return terra.ReferenceString(prt.ref.Append("unit"))
}

func (prt GrpcRouteRetryPolicyPerRetryTimeoutAttributes) Value() terra.NumberValue {
	return terra.ReferenceNumber(prt.ref.Append("value"))
}

type GrpcRouteTimeoutAttributes struct {
	ref terra.Reference
}

func (t GrpcRouteTimeoutAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t GrpcRouteTimeoutAttributes) InternalWithRef(ref terra.Reference) GrpcRouteTimeoutAttributes {
	return GrpcRouteTimeoutAttributes{ref: ref}
}

func (t GrpcRouteTimeoutAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t GrpcRouteTimeoutAttributes) Idle() terra.ListValue[GrpcRouteTimeoutIdleAttributes] {
	return terra.ReferenceList[GrpcRouteTimeoutIdleAttributes](t.ref.Append("idle"))
}

func (t GrpcRouteTimeoutAttributes) PerRequest() terra.ListValue[GrpcRouteTimeoutPerRequestAttributes] {
	return terra.ReferenceList[GrpcRouteTimeoutPerRequestAttributes](t.ref.Append("per_request"))
}

type GrpcRouteTimeoutIdleAttributes struct {
	ref terra.Reference
}

func (i GrpcRouteTimeoutIdleAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i GrpcRouteTimeoutIdleAttributes) InternalWithRef(ref terra.Reference) GrpcRouteTimeoutIdleAttributes {
	return GrpcRouteTimeoutIdleAttributes{ref: ref}
}

func (i GrpcRouteTimeoutIdleAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i GrpcRouteTimeoutIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("unit"))
}

func (i GrpcRouteTimeoutIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceNumber(i.ref.Append("value"))
}

type GrpcRouteTimeoutPerRequestAttributes struct {
	ref terra.Reference
}

func (pr GrpcRouteTimeoutPerRequestAttributes) InternalRef() terra.Reference {
	return pr.ref
}

func (pr GrpcRouteTimeoutPerRequestAttributes) InternalWithRef(ref terra.Reference) GrpcRouteTimeoutPerRequestAttributes {
	return GrpcRouteTimeoutPerRequestAttributes{ref: ref}
}

func (pr GrpcRouteTimeoutPerRequestAttributes) InternalTokens() hclwrite.Tokens {
	return pr.ref.InternalTokens()
}

func (pr GrpcRouteTimeoutPerRequestAttributes) Unit() terra.StringValue {
	return terra.ReferenceString(pr.ref.Append("unit"))
}

func (pr GrpcRouteTimeoutPerRequestAttributes) Value() terra.NumberValue {
	return terra.ReferenceNumber(pr.ref.Append("value"))
}

type Http2RouteAttributes struct {
	ref terra.Reference
}

func (hr Http2RouteAttributes) InternalRef() terra.Reference {
	return hr.ref
}

func (hr Http2RouteAttributes) InternalWithRef(ref terra.Reference) Http2RouteAttributes {
	return Http2RouteAttributes{ref: ref}
}

func (hr Http2RouteAttributes) InternalTokens() hclwrite.Tokens {
	return hr.ref.InternalTokens()
}

func (hr Http2RouteAttributes) Action() terra.ListValue[Http2RouteActionAttributes] {
	return terra.ReferenceList[Http2RouteActionAttributes](hr.ref.Append("action"))
}

func (hr Http2RouteAttributes) Match() terra.ListValue[Http2RouteMatchAttributes] {
	return terra.ReferenceList[Http2RouteMatchAttributes](hr.ref.Append("match"))
}

func (hr Http2RouteAttributes) RetryPolicy() terra.ListValue[Http2RouteRetryPolicyAttributes] {
	return terra.ReferenceList[Http2RouteRetryPolicyAttributes](hr.ref.Append("retry_policy"))
}

func (hr Http2RouteAttributes) Timeout() terra.ListValue[Http2RouteTimeoutAttributes] {
	return terra.ReferenceList[Http2RouteTimeoutAttributes](hr.ref.Append("timeout"))
}

type Http2RouteActionAttributes struct {
	ref terra.Reference
}

func (a Http2RouteActionAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a Http2RouteActionAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionAttributes {
	return Http2RouteActionAttributes{ref: ref}
}

func (a Http2RouteActionAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a Http2RouteActionAttributes) WeightedTarget() terra.SetValue[Http2RouteActionWeightedTargetAttributes] {
	return terra.ReferenceSet[Http2RouteActionWeightedTargetAttributes](a.ref.Append("weighted_target"))
}

type Http2RouteActionWeightedTargetAttributes struct {
	ref terra.Reference
}

func (wt Http2RouteActionWeightedTargetAttributes) InternalRef() terra.Reference {
	return wt.ref
}

func (wt Http2RouteActionWeightedTargetAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionWeightedTargetAttributes {
	return Http2RouteActionWeightedTargetAttributes{ref: ref}
}

func (wt Http2RouteActionWeightedTargetAttributes) InternalTokens() hclwrite.Tokens {
	return wt.ref.InternalTokens()
}

func (wt Http2RouteActionWeightedTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(wt.ref.Append("port"))
}

func (wt Http2RouteActionWeightedTargetAttributes) VirtualNode() terra.StringValue {
	return terra.ReferenceString(wt.ref.Append("virtual_node"))
}

func (wt Http2RouteActionWeightedTargetAttributes) Weight() terra.NumberValue {
	return terra.ReferenceNumber(wt.ref.Append("weight"))
}

type Http2RouteMatchAttributes struct {
	ref terra.Reference
}

func (m Http2RouteMatchAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m Http2RouteMatchAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchAttributes {
	return Http2RouteMatchAttributes{ref: ref}
}

func (m Http2RouteMatchAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m Http2RouteMatchAttributes) Method() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("method"))
}

func (m Http2RouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(m.ref.Append("port"))
}

func (m Http2RouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("prefix"))
}

func (m Http2RouteMatchAttributes) Scheme() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("scheme"))
}

func (m Http2RouteMatchAttributes) Header() terra.SetValue[Http2RouteMatchHeaderAttributes] {
	return terra.ReferenceSet[Http2RouteMatchHeaderAttributes](m.ref.Append("header"))
}

type Http2RouteMatchHeaderAttributes struct {
	ref terra.Reference
}

func (h Http2RouteMatchHeaderAttributes) InternalRef() terra.Reference {
	return h.ref
}

func (h Http2RouteMatchHeaderAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchHeaderAttributes {
	return Http2RouteMatchHeaderAttributes{ref: ref}
}

func (h Http2RouteMatchHeaderAttributes) InternalTokens() hclwrite.Tokens {
	return h.ref.InternalTokens()
}

func (h Http2RouteMatchHeaderAttributes) Invert() terra.BoolValue {
	return terra.ReferenceBool(h.ref.Append("invert"))
}

func (h Http2RouteMatchHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceString(h.ref.Append("name"))
}

func (h Http2RouteMatchHeaderAttributes) Match() terra.ListValue[Http2RouteMatchHeaderMatchAttributes] {
	return terra.ReferenceList[Http2RouteMatchHeaderMatchAttributes](h.ref.Append("match"))
}

type Http2RouteMatchHeaderMatchAttributes struct {
	ref terra.Reference
}

func (m Http2RouteMatchHeaderMatchAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m Http2RouteMatchHeaderMatchAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchHeaderMatchAttributes {
	return Http2RouteMatchHeaderMatchAttributes{ref: ref}
}

func (m Http2RouteMatchHeaderMatchAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m Http2RouteMatchHeaderMatchAttributes) Exact() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("exact"))
}

func (m Http2RouteMatchHeaderMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("prefix"))
}

func (m Http2RouteMatchHeaderMatchAttributes) Regex() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("regex"))
}

func (m Http2RouteMatchHeaderMatchAttributes) Suffix() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("suffix"))
}

func (m Http2RouteMatchHeaderMatchAttributes) Range() terra.ListValue[Http2RouteMatchHeaderMatchRangeAttributes] {
	return terra.ReferenceList[Http2RouteMatchHeaderMatchRangeAttributes](m.ref.Append("range"))
}

type Http2RouteMatchHeaderMatchRangeAttributes struct {
	ref terra.Reference
}

func (r Http2RouteMatchHeaderMatchRangeAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r Http2RouteMatchHeaderMatchRangeAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchHeaderMatchRangeAttributes {
	return Http2RouteMatchHeaderMatchRangeAttributes{ref: ref}
}

func (r Http2RouteMatchHeaderMatchRangeAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r Http2RouteMatchHeaderMatchRangeAttributes) End() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("end"))
}

func (r Http2RouteMatchHeaderMatchRangeAttributes) Start() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("start"))
}

type Http2RouteRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp Http2RouteRetryPolicyAttributes) InternalRef() terra.Reference {
	return rp.ref
}

func (rp Http2RouteRetryPolicyAttributes) InternalWithRef(ref terra.Reference) Http2RouteRetryPolicyAttributes {
	return Http2RouteRetryPolicyAttributes{ref: ref}
}

func (rp Http2RouteRetryPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return rp.ref.InternalTokens()
}

func (rp Http2RouteRetryPolicyAttributes) HttpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rp.ref.Append("http_retry_events"))
}

func (rp Http2RouteRetryPolicyAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceNumber(rp.ref.Append("max_retries"))
}

func (rp Http2RouteRetryPolicyAttributes) TcpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rp.ref.Append("tcp_retry_events"))
}

func (rp Http2RouteRetryPolicyAttributes) PerRetryTimeout() terra.ListValue[Http2RouteRetryPolicyPerRetryTimeoutAttributes] {
	return terra.ReferenceList[Http2RouteRetryPolicyPerRetryTimeoutAttributes](rp.ref.Append("per_retry_timeout"))
}

type Http2RouteRetryPolicyPerRetryTimeoutAttributes struct {
	ref terra.Reference
}

func (prt Http2RouteRetryPolicyPerRetryTimeoutAttributes) InternalRef() terra.Reference {
	return prt.ref
}

func (prt Http2RouteRetryPolicyPerRetryTimeoutAttributes) InternalWithRef(ref terra.Reference) Http2RouteRetryPolicyPerRetryTimeoutAttributes {
	return Http2RouteRetryPolicyPerRetryTimeoutAttributes{ref: ref}
}

func (prt Http2RouteRetryPolicyPerRetryTimeoutAttributes) InternalTokens() hclwrite.Tokens {
	return prt.ref.InternalTokens()
}

func (prt Http2RouteRetryPolicyPerRetryTimeoutAttributes) Unit() terra.StringValue {
	return terra.ReferenceString(prt.ref.Append("unit"))
}

func (prt Http2RouteRetryPolicyPerRetryTimeoutAttributes) Value() terra.NumberValue {
	return terra.ReferenceNumber(prt.ref.Append("value"))
}

type Http2RouteTimeoutAttributes struct {
	ref terra.Reference
}

func (t Http2RouteTimeoutAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t Http2RouteTimeoutAttributes) InternalWithRef(ref terra.Reference) Http2RouteTimeoutAttributes {
	return Http2RouteTimeoutAttributes{ref: ref}
}

func (t Http2RouteTimeoutAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t Http2RouteTimeoutAttributes) Idle() terra.ListValue[Http2RouteTimeoutIdleAttributes] {
	return terra.ReferenceList[Http2RouteTimeoutIdleAttributes](t.ref.Append("idle"))
}

func (t Http2RouteTimeoutAttributes) PerRequest() terra.ListValue[Http2RouteTimeoutPerRequestAttributes] {
	return terra.ReferenceList[Http2RouteTimeoutPerRequestAttributes](t.ref.Append("per_request"))
}

type Http2RouteTimeoutIdleAttributes struct {
	ref terra.Reference
}

func (i Http2RouteTimeoutIdleAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i Http2RouteTimeoutIdleAttributes) InternalWithRef(ref terra.Reference) Http2RouteTimeoutIdleAttributes {
	return Http2RouteTimeoutIdleAttributes{ref: ref}
}

func (i Http2RouteTimeoutIdleAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i Http2RouteTimeoutIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("unit"))
}

func (i Http2RouteTimeoutIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceNumber(i.ref.Append("value"))
}

type Http2RouteTimeoutPerRequestAttributes struct {
	ref terra.Reference
}

func (pr Http2RouteTimeoutPerRequestAttributes) InternalRef() terra.Reference {
	return pr.ref
}

func (pr Http2RouteTimeoutPerRequestAttributes) InternalWithRef(ref terra.Reference) Http2RouteTimeoutPerRequestAttributes {
	return Http2RouteTimeoutPerRequestAttributes{ref: ref}
}

func (pr Http2RouteTimeoutPerRequestAttributes) InternalTokens() hclwrite.Tokens {
	return pr.ref.InternalTokens()
}

func (pr Http2RouteTimeoutPerRequestAttributes) Unit() terra.StringValue {
	return terra.ReferenceString(pr.ref.Append("unit"))
}

func (pr Http2RouteTimeoutPerRequestAttributes) Value() terra.NumberValue {
	return terra.ReferenceNumber(pr.ref.Append("value"))
}

type HttpRouteAttributes struct {
	ref terra.Reference
}

func (hr HttpRouteAttributes) InternalRef() terra.Reference {
	return hr.ref
}

func (hr HttpRouteAttributes) InternalWithRef(ref terra.Reference) HttpRouteAttributes {
	return HttpRouteAttributes{ref: ref}
}

func (hr HttpRouteAttributes) InternalTokens() hclwrite.Tokens {
	return hr.ref.InternalTokens()
}

func (hr HttpRouteAttributes) Action() terra.ListValue[HttpRouteActionAttributes] {
	return terra.ReferenceList[HttpRouteActionAttributes](hr.ref.Append("action"))
}

func (hr HttpRouteAttributes) Match() terra.ListValue[HttpRouteMatchAttributes] {
	return terra.ReferenceList[HttpRouteMatchAttributes](hr.ref.Append("match"))
}

func (hr HttpRouteAttributes) RetryPolicy() terra.ListValue[HttpRouteRetryPolicyAttributes] {
	return terra.ReferenceList[HttpRouteRetryPolicyAttributes](hr.ref.Append("retry_policy"))
}

func (hr HttpRouteAttributes) Timeout() terra.ListValue[HttpRouteTimeoutAttributes] {
	return terra.ReferenceList[HttpRouteTimeoutAttributes](hr.ref.Append("timeout"))
}

type HttpRouteActionAttributes struct {
	ref terra.Reference
}

func (a HttpRouteActionAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a HttpRouteActionAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionAttributes {
	return HttpRouteActionAttributes{ref: ref}
}

func (a HttpRouteActionAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a HttpRouteActionAttributes) WeightedTarget() terra.SetValue[HttpRouteActionWeightedTargetAttributes] {
	return terra.ReferenceSet[HttpRouteActionWeightedTargetAttributes](a.ref.Append("weighted_target"))
}

type HttpRouteActionWeightedTargetAttributes struct {
	ref terra.Reference
}

func (wt HttpRouteActionWeightedTargetAttributes) InternalRef() terra.Reference {
	return wt.ref
}

func (wt HttpRouteActionWeightedTargetAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionWeightedTargetAttributes {
	return HttpRouteActionWeightedTargetAttributes{ref: ref}
}

func (wt HttpRouteActionWeightedTargetAttributes) InternalTokens() hclwrite.Tokens {
	return wt.ref.InternalTokens()
}

func (wt HttpRouteActionWeightedTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(wt.ref.Append("port"))
}

func (wt HttpRouteActionWeightedTargetAttributes) VirtualNode() terra.StringValue {
	return terra.ReferenceString(wt.ref.Append("virtual_node"))
}

func (wt HttpRouteActionWeightedTargetAttributes) Weight() terra.NumberValue {
	return terra.ReferenceNumber(wt.ref.Append("weight"))
}

type HttpRouteMatchAttributes struct {
	ref terra.Reference
}

func (m HttpRouteMatchAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m HttpRouteMatchAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchAttributes {
	return HttpRouteMatchAttributes{ref: ref}
}

func (m HttpRouteMatchAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m HttpRouteMatchAttributes) Method() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("method"))
}

func (m HttpRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(m.ref.Append("port"))
}

func (m HttpRouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("prefix"))
}

func (m HttpRouteMatchAttributes) Scheme() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("scheme"))
}

func (m HttpRouteMatchAttributes) Header() terra.SetValue[HttpRouteMatchHeaderAttributes] {
	return terra.ReferenceSet[HttpRouteMatchHeaderAttributes](m.ref.Append("header"))
}

type HttpRouteMatchHeaderAttributes struct {
	ref terra.Reference
}

func (h HttpRouteMatchHeaderAttributes) InternalRef() terra.Reference {
	return h.ref
}

func (h HttpRouteMatchHeaderAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchHeaderAttributes {
	return HttpRouteMatchHeaderAttributes{ref: ref}
}

func (h HttpRouteMatchHeaderAttributes) InternalTokens() hclwrite.Tokens {
	return h.ref.InternalTokens()
}

func (h HttpRouteMatchHeaderAttributes) Invert() terra.BoolValue {
	return terra.ReferenceBool(h.ref.Append("invert"))
}

func (h HttpRouteMatchHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceString(h.ref.Append("name"))
}

func (h HttpRouteMatchHeaderAttributes) Match() terra.ListValue[HttpRouteMatchHeaderMatchAttributes] {
	return terra.ReferenceList[HttpRouteMatchHeaderMatchAttributes](h.ref.Append("match"))
}

type HttpRouteMatchHeaderMatchAttributes struct {
	ref terra.Reference
}

func (m HttpRouteMatchHeaderMatchAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m HttpRouteMatchHeaderMatchAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchHeaderMatchAttributes {
	return HttpRouteMatchHeaderMatchAttributes{ref: ref}
}

func (m HttpRouteMatchHeaderMatchAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m HttpRouteMatchHeaderMatchAttributes) Exact() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("exact"))
}

func (m HttpRouteMatchHeaderMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("prefix"))
}

func (m HttpRouteMatchHeaderMatchAttributes) Regex() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("regex"))
}

func (m HttpRouteMatchHeaderMatchAttributes) Suffix() terra.StringValue {
	return terra.ReferenceString(m.ref.Append("suffix"))
}

func (m HttpRouteMatchHeaderMatchAttributes) Range() terra.ListValue[HttpRouteMatchHeaderMatchRangeAttributes] {
	return terra.ReferenceList[HttpRouteMatchHeaderMatchRangeAttributes](m.ref.Append("range"))
}

type HttpRouteMatchHeaderMatchRangeAttributes struct {
	ref terra.Reference
}

func (r HttpRouteMatchHeaderMatchRangeAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r HttpRouteMatchHeaderMatchRangeAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchHeaderMatchRangeAttributes {
	return HttpRouteMatchHeaderMatchRangeAttributes{ref: ref}
}

func (r HttpRouteMatchHeaderMatchRangeAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r HttpRouteMatchHeaderMatchRangeAttributes) End() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("end"))
}

func (r HttpRouteMatchHeaderMatchRangeAttributes) Start() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("start"))
}

type HttpRouteRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp HttpRouteRetryPolicyAttributes) InternalRef() terra.Reference {
	return rp.ref
}

func (rp HttpRouteRetryPolicyAttributes) InternalWithRef(ref terra.Reference) HttpRouteRetryPolicyAttributes {
	return HttpRouteRetryPolicyAttributes{ref: ref}
}

func (rp HttpRouteRetryPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return rp.ref.InternalTokens()
}

func (rp HttpRouteRetryPolicyAttributes) HttpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rp.ref.Append("http_retry_events"))
}

func (rp HttpRouteRetryPolicyAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceNumber(rp.ref.Append("max_retries"))
}

func (rp HttpRouteRetryPolicyAttributes) TcpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rp.ref.Append("tcp_retry_events"))
}

func (rp HttpRouteRetryPolicyAttributes) PerRetryTimeout() terra.ListValue[HttpRouteRetryPolicyPerRetryTimeoutAttributes] {
	return terra.ReferenceList[HttpRouteRetryPolicyPerRetryTimeoutAttributes](rp.ref.Append("per_retry_timeout"))
}

type HttpRouteRetryPolicyPerRetryTimeoutAttributes struct {
	ref terra.Reference
}

func (prt HttpRouteRetryPolicyPerRetryTimeoutAttributes) InternalRef() terra.Reference {
	return prt.ref
}

func (prt HttpRouteRetryPolicyPerRetryTimeoutAttributes) InternalWithRef(ref terra.Reference) HttpRouteRetryPolicyPerRetryTimeoutAttributes {
	return HttpRouteRetryPolicyPerRetryTimeoutAttributes{ref: ref}
}

func (prt HttpRouteRetryPolicyPerRetryTimeoutAttributes) InternalTokens() hclwrite.Tokens {
	return prt.ref.InternalTokens()
}

func (prt HttpRouteRetryPolicyPerRetryTimeoutAttributes) Unit() terra.StringValue {
	return terra.ReferenceString(prt.ref.Append("unit"))
}

func (prt HttpRouteRetryPolicyPerRetryTimeoutAttributes) Value() terra.NumberValue {
	return terra.ReferenceNumber(prt.ref.Append("value"))
}

type HttpRouteTimeoutAttributes struct {
	ref terra.Reference
}

func (t HttpRouteTimeoutAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t HttpRouteTimeoutAttributes) InternalWithRef(ref terra.Reference) HttpRouteTimeoutAttributes {
	return HttpRouteTimeoutAttributes{ref: ref}
}

func (t HttpRouteTimeoutAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t HttpRouteTimeoutAttributes) Idle() terra.ListValue[HttpRouteTimeoutIdleAttributes] {
	return terra.ReferenceList[HttpRouteTimeoutIdleAttributes](t.ref.Append("idle"))
}

func (t HttpRouteTimeoutAttributes) PerRequest() terra.ListValue[HttpRouteTimeoutPerRequestAttributes] {
	return terra.ReferenceList[HttpRouteTimeoutPerRequestAttributes](t.ref.Append("per_request"))
}

type HttpRouteTimeoutIdleAttributes struct {
	ref terra.Reference
}

func (i HttpRouteTimeoutIdleAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i HttpRouteTimeoutIdleAttributes) InternalWithRef(ref terra.Reference) HttpRouteTimeoutIdleAttributes {
	return HttpRouteTimeoutIdleAttributes{ref: ref}
}

func (i HttpRouteTimeoutIdleAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i HttpRouteTimeoutIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("unit"))
}

func (i HttpRouteTimeoutIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceNumber(i.ref.Append("value"))
}

type HttpRouteTimeoutPerRequestAttributes struct {
	ref terra.Reference
}

func (pr HttpRouteTimeoutPerRequestAttributes) InternalRef() terra.Reference {
	return pr.ref
}

func (pr HttpRouteTimeoutPerRequestAttributes) InternalWithRef(ref terra.Reference) HttpRouteTimeoutPerRequestAttributes {
	return HttpRouteTimeoutPerRequestAttributes{ref: ref}
}

func (pr HttpRouteTimeoutPerRequestAttributes) InternalTokens() hclwrite.Tokens {
	return pr.ref.InternalTokens()
}

func (pr HttpRouteTimeoutPerRequestAttributes) Unit() terra.StringValue {
	return terra.ReferenceString(pr.ref.Append("unit"))
}

func (pr HttpRouteTimeoutPerRequestAttributes) Value() terra.NumberValue {
	return terra.ReferenceNumber(pr.ref.Append("value"))
}

type TcpRouteAttributes struct {
	ref terra.Reference
}

func (tr TcpRouteAttributes) InternalRef() terra.Reference {
	return tr.ref
}

func (tr TcpRouteAttributes) InternalWithRef(ref terra.Reference) TcpRouteAttributes {
	return TcpRouteAttributes{ref: ref}
}

func (tr TcpRouteAttributes) InternalTokens() hclwrite.Tokens {
	return tr.ref.InternalTokens()
}

func (tr TcpRouteAttributes) Action() terra.ListValue[TcpRouteActionAttributes] {
	return terra.ReferenceList[TcpRouteActionAttributes](tr.ref.Append("action"))
}

func (tr TcpRouteAttributes) Match() terra.ListValue[TcpRouteMatchAttributes] {
	return terra.ReferenceList[TcpRouteMatchAttributes](tr.ref.Append("match"))
}

func (tr TcpRouteAttributes) Timeout() terra.ListValue[TcpRouteTimeoutAttributes] {
	return terra.ReferenceList[TcpRouteTimeoutAttributes](tr.ref.Append("timeout"))
}

type TcpRouteActionAttributes struct {
	ref terra.Reference
}

func (a TcpRouteActionAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a TcpRouteActionAttributes) InternalWithRef(ref terra.Reference) TcpRouteActionAttributes {
	return TcpRouteActionAttributes{ref: ref}
}

func (a TcpRouteActionAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a TcpRouteActionAttributes) WeightedTarget() terra.SetValue[TcpRouteActionWeightedTargetAttributes] {
	return terra.ReferenceSet[TcpRouteActionWeightedTargetAttributes](a.ref.Append("weighted_target"))
}

type TcpRouteActionWeightedTargetAttributes struct {
	ref terra.Reference
}

func (wt TcpRouteActionWeightedTargetAttributes) InternalRef() terra.Reference {
	return wt.ref
}

func (wt TcpRouteActionWeightedTargetAttributes) InternalWithRef(ref terra.Reference) TcpRouteActionWeightedTargetAttributes {
	return TcpRouteActionWeightedTargetAttributes{ref: ref}
}

func (wt TcpRouteActionWeightedTargetAttributes) InternalTokens() hclwrite.Tokens {
	return wt.ref.InternalTokens()
}

func (wt TcpRouteActionWeightedTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(wt.ref.Append("port"))
}

func (wt TcpRouteActionWeightedTargetAttributes) VirtualNode() terra.StringValue {
	return terra.ReferenceString(wt.ref.Append("virtual_node"))
}

func (wt TcpRouteActionWeightedTargetAttributes) Weight() terra.NumberValue {
	return terra.ReferenceNumber(wt.ref.Append("weight"))
}

type TcpRouteMatchAttributes struct {
	ref terra.Reference
}

func (m TcpRouteMatchAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m TcpRouteMatchAttributes) InternalWithRef(ref terra.Reference) TcpRouteMatchAttributes {
	return TcpRouteMatchAttributes{ref: ref}
}

func (m TcpRouteMatchAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m TcpRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(m.ref.Append("port"))
}

type TcpRouteTimeoutAttributes struct {
	ref terra.Reference
}

func (t TcpRouteTimeoutAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TcpRouteTimeoutAttributes) InternalWithRef(ref terra.Reference) TcpRouteTimeoutAttributes {
	return TcpRouteTimeoutAttributes{ref: ref}
}

func (t TcpRouteTimeoutAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TcpRouteTimeoutAttributes) Idle() terra.ListValue[TcpRouteTimeoutIdleAttributes] {
	return terra.ReferenceList[TcpRouteTimeoutIdleAttributes](t.ref.Append("idle"))
}

type TcpRouteTimeoutIdleAttributes struct {
	ref terra.Reference
}

func (i TcpRouteTimeoutIdleAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i TcpRouteTimeoutIdleAttributes) InternalWithRef(ref terra.Reference) TcpRouteTimeoutIdleAttributes {
	return TcpRouteTimeoutIdleAttributes{ref: ref}
}

func (i TcpRouteTimeoutIdleAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i TcpRouteTimeoutIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("unit"))
}

func (i TcpRouteTimeoutIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceNumber(i.ref.Append("value"))
}

type SpecState struct {
	Priority   float64           `json:"priority"`
	GrpcRoute  []GrpcRouteState  `json:"grpc_route"`
	Http2Route []Http2RouteState `json:"http2_route"`
	HttpRoute  []HttpRouteState  `json:"http_route"`
	TcpRoute   []TcpRouteState   `json:"tcp_route"`
}

type GrpcRouteState struct {
	Action      []GrpcRouteActionState      `json:"action"`
	Match       []GrpcRouteMatchState       `json:"match"`
	RetryPolicy []GrpcRouteRetryPolicyState `json:"retry_policy"`
	Timeout     []GrpcRouteTimeoutState     `json:"timeout"`
}

type GrpcRouteActionState struct {
	WeightedTarget []GrpcRouteActionWeightedTargetState `json:"weighted_target"`
}

type GrpcRouteActionWeightedTargetState struct {
	Port        float64 `json:"port"`
	VirtualNode string  `json:"virtual_node"`
	Weight      float64 `json:"weight"`
}

type GrpcRouteMatchState struct {
	MethodName  string          `json:"method_name"`
	Port        float64         `json:"port"`
	Prefix      string          `json:"prefix"`
	ServiceName string          `json:"service_name"`
	Metadata    []MetadataState `json:"metadata"`
}

type MetadataState struct {
	Invert bool                 `json:"invert"`
	Name   string               `json:"name"`
	Match  []MetadataMatchState `json:"match"`
}

type MetadataMatchState struct {
	Exact  string                    `json:"exact"`
	Prefix string                    `json:"prefix"`
	Regex  string                    `json:"regex"`
	Suffix string                    `json:"suffix"`
	Range  []MetadataMatchRangeState `json:"range"`
}

type MetadataMatchRangeState struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type GrpcRouteRetryPolicyState struct {
	GrpcRetryEvents []string                                   `json:"grpc_retry_events"`
	HttpRetryEvents []string                                   `json:"http_retry_events"`
	MaxRetries      float64                                    `json:"max_retries"`
	TcpRetryEvents  []string                                   `json:"tcp_retry_events"`
	PerRetryTimeout []GrpcRouteRetryPolicyPerRetryTimeoutState `json:"per_retry_timeout"`
}

type GrpcRouteRetryPolicyPerRetryTimeoutState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type GrpcRouteTimeoutState struct {
	Idle       []GrpcRouteTimeoutIdleState       `json:"idle"`
	PerRequest []GrpcRouteTimeoutPerRequestState `json:"per_request"`
}

type GrpcRouteTimeoutIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type GrpcRouteTimeoutPerRequestState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type Http2RouteState struct {
	Action      []Http2RouteActionState      `json:"action"`
	Match       []Http2RouteMatchState       `json:"match"`
	RetryPolicy []Http2RouteRetryPolicyState `json:"retry_policy"`
	Timeout     []Http2RouteTimeoutState     `json:"timeout"`
}

type Http2RouteActionState struct {
	WeightedTarget []Http2RouteActionWeightedTargetState `json:"weighted_target"`
}

type Http2RouteActionWeightedTargetState struct {
	Port        float64 `json:"port"`
	VirtualNode string  `json:"virtual_node"`
	Weight      float64 `json:"weight"`
}

type Http2RouteMatchState struct {
	Method string                       `json:"method"`
	Port   float64                      `json:"port"`
	Prefix string                       `json:"prefix"`
	Scheme string                       `json:"scheme"`
	Header []Http2RouteMatchHeaderState `json:"header"`
}

type Http2RouteMatchHeaderState struct {
	Invert bool                              `json:"invert"`
	Name   string                            `json:"name"`
	Match  []Http2RouteMatchHeaderMatchState `json:"match"`
}

type Http2RouteMatchHeaderMatchState struct {
	Exact  string                                 `json:"exact"`
	Prefix string                                 `json:"prefix"`
	Regex  string                                 `json:"regex"`
	Suffix string                                 `json:"suffix"`
	Range  []Http2RouteMatchHeaderMatchRangeState `json:"range"`
}

type Http2RouteMatchHeaderMatchRangeState struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type Http2RouteRetryPolicyState struct {
	HttpRetryEvents []string                                    `json:"http_retry_events"`
	MaxRetries      float64                                     `json:"max_retries"`
	TcpRetryEvents  []string                                    `json:"tcp_retry_events"`
	PerRetryTimeout []Http2RouteRetryPolicyPerRetryTimeoutState `json:"per_retry_timeout"`
}

type Http2RouteRetryPolicyPerRetryTimeoutState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type Http2RouteTimeoutState struct {
	Idle       []Http2RouteTimeoutIdleState       `json:"idle"`
	PerRequest []Http2RouteTimeoutPerRequestState `json:"per_request"`
}

type Http2RouteTimeoutIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type Http2RouteTimeoutPerRequestState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type HttpRouteState struct {
	Action      []HttpRouteActionState      `json:"action"`
	Match       []HttpRouteMatchState       `json:"match"`
	RetryPolicy []HttpRouteRetryPolicyState `json:"retry_policy"`
	Timeout     []HttpRouteTimeoutState     `json:"timeout"`
}

type HttpRouteActionState struct {
	WeightedTarget []HttpRouteActionWeightedTargetState `json:"weighted_target"`
}

type HttpRouteActionWeightedTargetState struct {
	Port        float64 `json:"port"`
	VirtualNode string  `json:"virtual_node"`
	Weight      float64 `json:"weight"`
}

type HttpRouteMatchState struct {
	Method string                      `json:"method"`
	Port   float64                     `json:"port"`
	Prefix string                      `json:"prefix"`
	Scheme string                      `json:"scheme"`
	Header []HttpRouteMatchHeaderState `json:"header"`
}

type HttpRouteMatchHeaderState struct {
	Invert bool                             `json:"invert"`
	Name   string                           `json:"name"`
	Match  []HttpRouteMatchHeaderMatchState `json:"match"`
}

type HttpRouteMatchHeaderMatchState struct {
	Exact  string                                `json:"exact"`
	Prefix string                                `json:"prefix"`
	Regex  string                                `json:"regex"`
	Suffix string                                `json:"suffix"`
	Range  []HttpRouteMatchHeaderMatchRangeState `json:"range"`
}

type HttpRouteMatchHeaderMatchRangeState struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type HttpRouteRetryPolicyState struct {
	HttpRetryEvents []string                                   `json:"http_retry_events"`
	MaxRetries      float64                                    `json:"max_retries"`
	TcpRetryEvents  []string                                   `json:"tcp_retry_events"`
	PerRetryTimeout []HttpRouteRetryPolicyPerRetryTimeoutState `json:"per_retry_timeout"`
}

type HttpRouteRetryPolicyPerRetryTimeoutState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type HttpRouteTimeoutState struct {
	Idle       []HttpRouteTimeoutIdleState       `json:"idle"`
	PerRequest []HttpRouteTimeoutPerRequestState `json:"per_request"`
}

type HttpRouteTimeoutIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type HttpRouteTimeoutPerRequestState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type TcpRouteState struct {
	Action  []TcpRouteActionState  `json:"action"`
	Match   []TcpRouteMatchState   `json:"match"`
	Timeout []TcpRouteTimeoutState `json:"timeout"`
}

type TcpRouteActionState struct {
	WeightedTarget []TcpRouteActionWeightedTargetState `json:"weighted_target"`
}

type TcpRouteActionWeightedTargetState struct {
	Port        float64 `json:"port"`
	VirtualNode string  `json:"virtual_node"`
	Weight      float64 `json:"weight"`
}

type TcpRouteMatchState struct {
	Port float64 `json:"port"`
}

type TcpRouteTimeoutState struct {
	Idle []TcpRouteTimeoutIdleState `json:"idle"`
}

type TcpRouteTimeoutIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}
