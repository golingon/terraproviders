// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package codebuildwebhook

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type FilterGroup struct {
	// Filter: min=0
	Filter []Filter `hcl:"filter,block" validate:"min=0"`
}

type Filter struct {
	// ExcludeMatchedPattern: bool, optional
	ExcludeMatchedPattern terra.BoolValue `hcl:"exclude_matched_pattern,attr"`
	// Pattern: string, required
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type FilterGroupAttributes struct {
	ref terra.Reference
}

func (fg FilterGroupAttributes) InternalRef() terra.Reference {
	return fg.ref
}

func (fg FilterGroupAttributes) InternalWithRef(ref terra.Reference) FilterGroupAttributes {
	return FilterGroupAttributes{ref: ref}
}

func (fg FilterGroupAttributes) InternalTokens() hclwrite.Tokens {
	return fg.ref.InternalTokens()
}

func (fg FilterGroupAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](fg.ref.Append("filter"))
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() terra.Reference {
	return f.ref
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() hclwrite.Tokens {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) ExcludeMatchedPattern() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("exclude_matched_pattern"))
}

func (f FilterAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("pattern"))
}

func (f FilterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("type"))
}

type FilterGroupState struct {
	Filter []FilterState `json:"filter"`
}

type FilterState struct {
	ExcludeMatchedPattern bool   `json:"exclude_matched_pattern"`
	Pattern               string `json:"pattern"`
	Type                  string `json:"type"`
}
