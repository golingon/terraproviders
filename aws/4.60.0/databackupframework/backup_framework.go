// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package databackupframework

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Control struct {
	// InputParameter: min=0
	InputParameter []InputParameter `hcl:"input_parameter,block" validate:"min=0"`
	// Scope: min=0
	Scope []Scope `hcl:"scope,block" validate:"min=0"`
}

type InputParameter struct{}

type Scope struct{}

type ControlAttributes struct {
	ref terra.Reference
}

func (c ControlAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c ControlAttributes) InternalWithRef(ref terra.Reference) ControlAttributes {
	return ControlAttributes{ref: ref}
}

func (c ControlAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ControlAttributes) Name() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("name"))
}

func (c ControlAttributes) InputParameter() terra.SetValue[InputParameterAttributes] {
	return terra.ReferenceSet[InputParameterAttributes](c.ref.Append("input_parameter"))
}

func (c ControlAttributes) Scope() terra.ListValue[ScopeAttributes] {
	return terra.ReferenceList[ScopeAttributes](c.ref.Append("scope"))
}

type InputParameterAttributes struct {
	ref terra.Reference
}

func (ip InputParameterAttributes) InternalRef() terra.Reference {
	return ip.ref
}

func (ip InputParameterAttributes) InternalWithRef(ref terra.Reference) InputParameterAttributes {
	return InputParameterAttributes{ref: ref}
}

func (ip InputParameterAttributes) InternalTokens() hclwrite.Tokens {
	return ip.ref.InternalTokens()
}

func (ip InputParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ip.ref.Append("name"))
}

func (ip InputParameterAttributes) Value() terra.StringValue {
	return terra.ReferenceString(ip.ref.Append("value"))
}

type ScopeAttributes struct {
	ref terra.Reference
}

func (s ScopeAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s ScopeAttributes) InternalWithRef(ref terra.Reference) ScopeAttributes {
	return ScopeAttributes{ref: ref}
}

func (s ScopeAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s ScopeAttributes) ComplianceResourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](s.ref.Append("compliance_resource_ids"))
}

func (s ScopeAttributes) ComplianceResourceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](s.ref.Append("compliance_resource_types"))
}

func (s ScopeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](s.ref.Append("tags"))
}

type ControlState struct {
	Name           string                `json:"name"`
	InputParameter []InputParameterState `json:"input_parameter"`
	Scope          []ScopeState          `json:"scope"`
}

type InputParameterState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type ScopeState struct {
	ComplianceResourceIds   []string          `json:"compliance_resource_ids"`
	ComplianceResourceTypes []string          `json:"compliance_resource_types"`
	Tags                    map[string]string `json:"tags"`
}
