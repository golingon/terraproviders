// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewShieldProtection(name string, args ShieldProtectionArgs) *ShieldProtection {
	return &ShieldProtection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ShieldProtection)(nil)

type ShieldProtection struct {
	Name  string
	Args  ShieldProtectionArgs
	state *shieldProtectionState
}

func (sp *ShieldProtection) Type() string {
	return "aws_shield_protection"
}

func (sp *ShieldProtection) LocalName() string {
	return sp.Name
}

func (sp *ShieldProtection) Configuration() interface{} {
	return sp.Args
}

func (sp *ShieldProtection) Attributes() shieldProtectionAttributes {
	return shieldProtectionAttributes{ref: terra.ReferenceResource(sp)}
}

func (sp *ShieldProtection) ImportState(av io.Reader) error {
	sp.state = &shieldProtectionState{}
	if err := json.NewDecoder(av).Decode(sp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sp.Type(), sp.LocalName(), err)
	}
	return nil
}

func (sp *ShieldProtection) State() (*shieldProtectionState, bool) {
	return sp.state, sp.state != nil
}

func (sp *ShieldProtection) StateMust() *shieldProtectionState {
	if sp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sp.Type(), sp.LocalName()))
	}
	return sp.state
}

func (sp *ShieldProtection) DependOn() terra.Reference {
	return terra.ReferenceResource(sp)
}

type ShieldProtectionArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that ShieldProtection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type shieldProtectionAttributes struct {
	ref terra.Reference
}

func (sp shieldProtectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("arn"))
}

func (sp shieldProtectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("id"))
}

func (sp shieldProtectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("name"))
}

func (sp shieldProtectionAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("resource_arn"))
}

func (sp shieldProtectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sp.ref.Append("tags"))
}

func (sp shieldProtectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sp.ref.Append("tags_all"))
}

type shieldProtectionState struct {
	Arn         string            `json:"arn"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	ResourceArn string            `json:"resource_arn"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
