// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2TransitGatewayMulticastGroupSource(name string, args Ec2TransitGatewayMulticastGroupSourceArgs) *Ec2TransitGatewayMulticastGroupSource {
	return &Ec2TransitGatewayMulticastGroupSource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TransitGatewayMulticastGroupSource)(nil)

type Ec2TransitGatewayMulticastGroupSource struct {
	Name  string
	Args  Ec2TransitGatewayMulticastGroupSourceArgs
	state *ec2TransitGatewayMulticastGroupSourceState
}

func (etgmgs *Ec2TransitGatewayMulticastGroupSource) Type() string {
	return "aws_ec2_transit_gateway_multicast_group_source"
}

func (etgmgs *Ec2TransitGatewayMulticastGroupSource) LocalName() string {
	return etgmgs.Name
}

func (etgmgs *Ec2TransitGatewayMulticastGroupSource) Configuration() interface{} {
	return etgmgs.Args
}

func (etgmgs *Ec2TransitGatewayMulticastGroupSource) Attributes() ec2TransitGatewayMulticastGroupSourceAttributes {
	return ec2TransitGatewayMulticastGroupSourceAttributes{ref: terra.ReferenceResource(etgmgs)}
}

func (etgmgs *Ec2TransitGatewayMulticastGroupSource) ImportState(av io.Reader) error {
	etgmgs.state = &ec2TransitGatewayMulticastGroupSourceState{}
	if err := json.NewDecoder(av).Decode(etgmgs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etgmgs.Type(), etgmgs.LocalName(), err)
	}
	return nil
}

func (etgmgs *Ec2TransitGatewayMulticastGroupSource) State() (*ec2TransitGatewayMulticastGroupSourceState, bool) {
	return etgmgs.state, etgmgs.state != nil
}

func (etgmgs *Ec2TransitGatewayMulticastGroupSource) StateMust() *ec2TransitGatewayMulticastGroupSourceState {
	if etgmgs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etgmgs.Type(), etgmgs.LocalName()))
	}
	return etgmgs.state
}

func (etgmgs *Ec2TransitGatewayMulticastGroupSource) DependOn() terra.Reference {
	return terra.ReferenceResource(etgmgs)
}

type Ec2TransitGatewayMulticastGroupSourceArgs struct {
	// GroupIpAddress: string, required
	GroupIpAddress terra.StringValue `hcl:"group_ip_address,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetworkInterfaceId: string, required
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr" validate:"required"`
	// TransitGatewayMulticastDomainId: string, required
	TransitGatewayMulticastDomainId terra.StringValue `hcl:"transit_gateway_multicast_domain_id,attr" validate:"required"`
	// DependsOn contains resources that Ec2TransitGatewayMulticastGroupSource depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2TransitGatewayMulticastGroupSourceAttributes struct {
	ref terra.Reference
}

func (etgmgs ec2TransitGatewayMulticastGroupSourceAttributes) GroupIpAddress() terra.StringValue {
	return terra.ReferenceString(etgmgs.ref.Append("group_ip_address"))
}

func (etgmgs ec2TransitGatewayMulticastGroupSourceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etgmgs.ref.Append("id"))
}

func (etgmgs ec2TransitGatewayMulticastGroupSourceAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceString(etgmgs.ref.Append("network_interface_id"))
}

func (etgmgs ec2TransitGatewayMulticastGroupSourceAttributes) TransitGatewayMulticastDomainId() terra.StringValue {
	return terra.ReferenceString(etgmgs.ref.Append("transit_gateway_multicast_domain_id"))
}

type ec2TransitGatewayMulticastGroupSourceState struct {
	GroupIpAddress                  string `json:"group_ip_address"`
	Id                              string `json:"id"`
	NetworkInterfaceId              string `json:"network_interface_id"`
	TransitGatewayMulticastDomainId string `json:"transit_gateway_multicast_domain_id"`
}
