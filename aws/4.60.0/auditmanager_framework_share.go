// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAuditmanagerFrameworkShare(name string, args AuditmanagerFrameworkShareArgs) *AuditmanagerFrameworkShare {
	return &AuditmanagerFrameworkShare{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AuditmanagerFrameworkShare)(nil)

type AuditmanagerFrameworkShare struct {
	Name  string
	Args  AuditmanagerFrameworkShareArgs
	state *auditmanagerFrameworkShareState
}

func (afs *AuditmanagerFrameworkShare) Type() string {
	return "aws_auditmanager_framework_share"
}

func (afs *AuditmanagerFrameworkShare) LocalName() string {
	return afs.Name
}

func (afs *AuditmanagerFrameworkShare) Configuration() interface{} {
	return afs.Args
}

func (afs *AuditmanagerFrameworkShare) Attributes() auditmanagerFrameworkShareAttributes {
	return auditmanagerFrameworkShareAttributes{ref: terra.ReferenceResource(afs)}
}

func (afs *AuditmanagerFrameworkShare) ImportState(av io.Reader) error {
	afs.state = &auditmanagerFrameworkShareState{}
	if err := json.NewDecoder(av).Decode(afs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afs.Type(), afs.LocalName(), err)
	}
	return nil
}

func (afs *AuditmanagerFrameworkShare) State() (*auditmanagerFrameworkShareState, bool) {
	return afs.state, afs.state != nil
}

func (afs *AuditmanagerFrameworkShare) StateMust() *auditmanagerFrameworkShareState {
	if afs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afs.Type(), afs.LocalName()))
	}
	return afs.state
}

func (afs *AuditmanagerFrameworkShare) DependOn() terra.Reference {
	return terra.ReferenceResource(afs)
}

type AuditmanagerFrameworkShareArgs struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// DestinationAccount: string, required
	DestinationAccount terra.StringValue `hcl:"destination_account,attr" validate:"required"`
	// DestinationRegion: string, required
	DestinationRegion terra.StringValue `hcl:"destination_region,attr" validate:"required"`
	// FrameworkId: string, required
	FrameworkId terra.StringValue `hcl:"framework_id,attr" validate:"required"`
	// DependsOn contains resources that AuditmanagerFrameworkShare depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type auditmanagerFrameworkShareAttributes struct {
	ref terra.Reference
}

func (afs auditmanagerFrameworkShareAttributes) Comment() terra.StringValue {
	return terra.ReferenceString(afs.ref.Append("comment"))
}

func (afs auditmanagerFrameworkShareAttributes) DestinationAccount() terra.StringValue {
	return terra.ReferenceString(afs.ref.Append("destination_account"))
}

func (afs auditmanagerFrameworkShareAttributes) DestinationRegion() terra.StringValue {
	return terra.ReferenceString(afs.ref.Append("destination_region"))
}

func (afs auditmanagerFrameworkShareAttributes) FrameworkId() terra.StringValue {
	return terra.ReferenceString(afs.ref.Append("framework_id"))
}

func (afs auditmanagerFrameworkShareAttributes) Id() terra.StringValue {
	return terra.ReferenceString(afs.ref.Append("id"))
}

func (afs auditmanagerFrameworkShareAttributes) Status() terra.StringValue {
	return terra.ReferenceString(afs.ref.Append("status"))
}

type auditmanagerFrameworkShareState struct {
	Comment            string `json:"comment"`
	DestinationAccount string `json:"destination_account"`
	DestinationRegion  string `json:"destination_region"`
	FrameworkId        string `json:"framework_id"`
	Id                 string `json:"id"`
	Status             string `json:"status"`
}
