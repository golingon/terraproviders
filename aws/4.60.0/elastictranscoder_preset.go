// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	elastictranscoderpreset "github.com/golingon/terraproviders/aws/4.60.0/elastictranscoderpreset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewElastictranscoderPreset(name string, args ElastictranscoderPresetArgs) *ElastictranscoderPreset {
	return &ElastictranscoderPreset{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElastictranscoderPreset)(nil)

type ElastictranscoderPreset struct {
	Name  string
	Args  ElastictranscoderPresetArgs
	state *elastictranscoderPresetState
}

func (ep *ElastictranscoderPreset) Type() string {
	return "aws_elastictranscoder_preset"
}

func (ep *ElastictranscoderPreset) LocalName() string {
	return ep.Name
}

func (ep *ElastictranscoderPreset) Configuration() interface{} {
	return ep.Args
}

func (ep *ElastictranscoderPreset) Attributes() elastictranscoderPresetAttributes {
	return elastictranscoderPresetAttributes{ref: terra.ReferenceResource(ep)}
}

func (ep *ElastictranscoderPreset) ImportState(av io.Reader) error {
	ep.state = &elastictranscoderPresetState{}
	if err := json.NewDecoder(av).Decode(ep.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ep.Type(), ep.LocalName(), err)
	}
	return nil
}

func (ep *ElastictranscoderPreset) State() (*elastictranscoderPresetState, bool) {
	return ep.state, ep.state != nil
}

func (ep *ElastictranscoderPreset) StateMust() *elastictranscoderPresetState {
	if ep.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ep.Type(), ep.LocalName()))
	}
	return ep.state
}

func (ep *ElastictranscoderPreset) DependOn() terra.Reference {
	return terra.ReferenceResource(ep)
}

type ElastictranscoderPresetArgs struct {
	// Container: string, required
	Container terra.StringValue `hcl:"container,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// VideoCodecOptions: map of string, optional
	VideoCodecOptions terra.MapValue[terra.StringValue] `hcl:"video_codec_options,attr"`
	// Audio: optional
	Audio *elastictranscoderpreset.Audio `hcl:"audio,block"`
	// AudioCodecOptions: optional
	AudioCodecOptions *elastictranscoderpreset.AudioCodecOptions `hcl:"audio_codec_options,block"`
	// Thumbnails: optional
	Thumbnails *elastictranscoderpreset.Thumbnails `hcl:"thumbnails,block"`
	// Video: optional
	Video *elastictranscoderpreset.Video `hcl:"video,block"`
	// VideoWatermarks: min=0
	VideoWatermarks []elastictranscoderpreset.VideoWatermarks `hcl:"video_watermarks,block" validate:"min=0"`
	// DependsOn contains resources that ElastictranscoderPreset depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type elastictranscoderPresetAttributes struct {
	ref terra.Reference
}

func (ep elastictranscoderPresetAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ep.ref.Append("arn"))
}

func (ep elastictranscoderPresetAttributes) Container() terra.StringValue {
	return terra.ReferenceString(ep.ref.Append("container"))
}

func (ep elastictranscoderPresetAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ep.ref.Append("description"))
}

func (ep elastictranscoderPresetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ep.ref.Append("id"))
}

func (ep elastictranscoderPresetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ep.ref.Append("name"))
}

func (ep elastictranscoderPresetAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ep.ref.Append("type"))
}

func (ep elastictranscoderPresetAttributes) VideoCodecOptions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ep.ref.Append("video_codec_options"))
}

func (ep elastictranscoderPresetAttributes) Audio() terra.ListValue[elastictranscoderpreset.AudioAttributes] {
	return terra.ReferenceList[elastictranscoderpreset.AudioAttributes](ep.ref.Append("audio"))
}

func (ep elastictranscoderPresetAttributes) AudioCodecOptions() terra.ListValue[elastictranscoderpreset.AudioCodecOptionsAttributes] {
	return terra.ReferenceList[elastictranscoderpreset.AudioCodecOptionsAttributes](ep.ref.Append("audio_codec_options"))
}

func (ep elastictranscoderPresetAttributes) Thumbnails() terra.ListValue[elastictranscoderpreset.ThumbnailsAttributes] {
	return terra.ReferenceList[elastictranscoderpreset.ThumbnailsAttributes](ep.ref.Append("thumbnails"))
}

func (ep elastictranscoderPresetAttributes) Video() terra.ListValue[elastictranscoderpreset.VideoAttributes] {
	return terra.ReferenceList[elastictranscoderpreset.VideoAttributes](ep.ref.Append("video"))
}

func (ep elastictranscoderPresetAttributes) VideoWatermarks() terra.SetValue[elastictranscoderpreset.VideoWatermarksAttributes] {
	return terra.ReferenceSet[elastictranscoderpreset.VideoWatermarksAttributes](ep.ref.Append("video_watermarks"))
}

type elastictranscoderPresetState struct {
	Arn               string                                           `json:"arn"`
	Container         string                                           `json:"container"`
	Description       string                                           `json:"description"`
	Id                string                                           `json:"id"`
	Name              string                                           `json:"name"`
	Type              string                                           `json:"type"`
	VideoCodecOptions map[string]string                                `json:"video_codec_options"`
	Audio             []elastictranscoderpreset.AudioState             `json:"audio"`
	AudioCodecOptions []elastictranscoderpreset.AudioCodecOptionsState `json:"audio_codec_options"`
	Thumbnails        []elastictranscoderpreset.ThumbnailsState        `json:"thumbnails"`
	Video             []elastictranscoderpreset.VideoState             `json:"video"`
	VideoWatermarks   []elastictranscoderpreset.VideoWatermarksState   `json:"video_watermarks"`
}
