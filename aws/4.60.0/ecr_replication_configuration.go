// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ecrreplicationconfiguration "github.com/golingon/terraproviders/aws/4.60.0/ecrreplicationconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEcrReplicationConfiguration(name string, args EcrReplicationConfigurationArgs) *EcrReplicationConfiguration {
	return &EcrReplicationConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EcrReplicationConfiguration)(nil)

type EcrReplicationConfiguration struct {
	Name  string
	Args  EcrReplicationConfigurationArgs
	state *ecrReplicationConfigurationState
}

func (erc *EcrReplicationConfiguration) Type() string {
	return "aws_ecr_replication_configuration"
}

func (erc *EcrReplicationConfiguration) LocalName() string {
	return erc.Name
}

func (erc *EcrReplicationConfiguration) Configuration() interface{} {
	return erc.Args
}

func (erc *EcrReplicationConfiguration) Attributes() ecrReplicationConfigurationAttributes {
	return ecrReplicationConfigurationAttributes{ref: terra.ReferenceResource(erc)}
}

func (erc *EcrReplicationConfiguration) ImportState(av io.Reader) error {
	erc.state = &ecrReplicationConfigurationState{}
	if err := json.NewDecoder(av).Decode(erc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", erc.Type(), erc.LocalName(), err)
	}
	return nil
}

func (erc *EcrReplicationConfiguration) State() (*ecrReplicationConfigurationState, bool) {
	return erc.state, erc.state != nil
}

func (erc *EcrReplicationConfiguration) StateMust() *ecrReplicationConfigurationState {
	if erc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", erc.Type(), erc.LocalName()))
	}
	return erc.state
}

func (erc *EcrReplicationConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(erc)
}

type EcrReplicationConfigurationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ReplicationConfiguration: optional
	ReplicationConfiguration *ecrreplicationconfiguration.ReplicationConfiguration `hcl:"replication_configuration,block"`
	// DependsOn contains resources that EcrReplicationConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ecrReplicationConfigurationAttributes struct {
	ref terra.Reference
}

func (erc ecrReplicationConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(erc.ref.Append("id"))
}

func (erc ecrReplicationConfigurationAttributes) RegistryId() terra.StringValue {
	return terra.ReferenceString(erc.ref.Append("registry_id"))
}

func (erc ecrReplicationConfigurationAttributes) ReplicationConfiguration() terra.ListValue[ecrreplicationconfiguration.ReplicationConfigurationAttributes] {
	return terra.ReferenceList[ecrreplicationconfiguration.ReplicationConfigurationAttributes](erc.ref.Append("replication_configuration"))
}

type ecrReplicationConfigurationState struct {
	Id                       string                                                      `json:"id"`
	RegistryId               string                                                      `json:"registry_id"`
	ReplicationConfiguration []ecrreplicationconfiguration.ReplicationConfigurationState `json:"replication_configuration"`
}
