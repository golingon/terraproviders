// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	workspacesipgroup "github.com/golingon/terraproviders/aws/4.60.0/workspacesipgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWorkspacesIpGroup(name string, args WorkspacesIpGroupArgs) *WorkspacesIpGroup {
	return &WorkspacesIpGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WorkspacesIpGroup)(nil)

type WorkspacesIpGroup struct {
	Name  string
	Args  WorkspacesIpGroupArgs
	state *workspacesIpGroupState
}

func (wig *WorkspacesIpGroup) Type() string {
	return "aws_workspaces_ip_group"
}

func (wig *WorkspacesIpGroup) LocalName() string {
	return wig.Name
}

func (wig *WorkspacesIpGroup) Configuration() interface{} {
	return wig.Args
}

func (wig *WorkspacesIpGroup) Attributes() workspacesIpGroupAttributes {
	return workspacesIpGroupAttributes{ref: terra.ReferenceResource(wig)}
}

func (wig *WorkspacesIpGroup) ImportState(av io.Reader) error {
	wig.state = &workspacesIpGroupState{}
	if err := json.NewDecoder(av).Decode(wig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wig.Type(), wig.LocalName(), err)
	}
	return nil
}

func (wig *WorkspacesIpGroup) State() (*workspacesIpGroupState, bool) {
	return wig.state, wig.state != nil
}

func (wig *WorkspacesIpGroup) StateMust() *workspacesIpGroupState {
	if wig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wig.Type(), wig.LocalName()))
	}
	return wig.state
}

func (wig *WorkspacesIpGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(wig)
}

type WorkspacesIpGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Rules: min=0
	Rules []workspacesipgroup.Rules `hcl:"rules,block" validate:"min=0"`
	// DependsOn contains resources that WorkspacesIpGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type workspacesIpGroupAttributes struct {
	ref terra.Reference
}

func (wig workspacesIpGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(wig.ref.Append("description"))
}

func (wig workspacesIpGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wig.ref.Append("id"))
}

func (wig workspacesIpGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wig.ref.Append("name"))
}

func (wig workspacesIpGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wig.ref.Append("tags"))
}

func (wig workspacesIpGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wig.ref.Append("tags_all"))
}

func (wig workspacesIpGroupAttributes) Rules() terra.SetValue[workspacesipgroup.RulesAttributes] {
	return terra.ReferenceSet[workspacesipgroup.RulesAttributes](wig.ref.Append("rules"))
}

type workspacesIpGroupState struct {
	Description string                         `json:"description"`
	Id          string                         `json:"id"`
	Name        string                         `json:"name"`
	Tags        map[string]string              `json:"tags"`
	TagsAll     map[string]string              `json:"tags_all"`
	Rules       []workspacesipgroup.RulesState `json:"rules"`
}
