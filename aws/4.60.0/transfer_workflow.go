// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	transferworkflow "github.com/golingon/terraproviders/aws/4.60.0/transferworkflow"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewTransferWorkflow(name string, args TransferWorkflowArgs) *TransferWorkflow {
	return &TransferWorkflow{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TransferWorkflow)(nil)

type TransferWorkflow struct {
	Name  string
	Args  TransferWorkflowArgs
	state *transferWorkflowState
}

func (tw *TransferWorkflow) Type() string {
	return "aws_transfer_workflow"
}

func (tw *TransferWorkflow) LocalName() string {
	return tw.Name
}

func (tw *TransferWorkflow) Configuration() interface{} {
	return tw.Args
}

func (tw *TransferWorkflow) Attributes() transferWorkflowAttributes {
	return transferWorkflowAttributes{ref: terra.ReferenceResource(tw)}
}

func (tw *TransferWorkflow) ImportState(av io.Reader) error {
	tw.state = &transferWorkflowState{}
	if err := json.NewDecoder(av).Decode(tw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tw.Type(), tw.LocalName(), err)
	}
	return nil
}

func (tw *TransferWorkflow) State() (*transferWorkflowState, bool) {
	return tw.state, tw.state != nil
}

func (tw *TransferWorkflow) StateMust() *transferWorkflowState {
	if tw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tw.Type(), tw.LocalName()))
	}
	return tw.state
}

func (tw *TransferWorkflow) DependOn() terra.Reference {
	return terra.ReferenceResource(tw)
}

type TransferWorkflowArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// OnExceptionSteps: min=0,max=8
	OnExceptionSteps []transferworkflow.OnExceptionSteps `hcl:"on_exception_steps,block" validate:"min=0,max=8"`
	// Steps: min=1,max=8
	Steps []transferworkflow.Steps `hcl:"steps,block" validate:"min=1,max=8"`
	// DependsOn contains resources that TransferWorkflow depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type transferWorkflowAttributes struct {
	ref terra.Reference
}

func (tw transferWorkflowAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(tw.ref.Append("arn"))
}

func (tw transferWorkflowAttributes) Description() terra.StringValue {
	return terra.ReferenceString(tw.ref.Append("description"))
}

func (tw transferWorkflowAttributes) Id() terra.StringValue {
	return terra.ReferenceString(tw.ref.Append("id"))
}

func (tw transferWorkflowAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](tw.ref.Append("tags"))
}

func (tw transferWorkflowAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](tw.ref.Append("tags_all"))
}

func (tw transferWorkflowAttributes) OnExceptionSteps() terra.ListValue[transferworkflow.OnExceptionStepsAttributes] {
	return terra.ReferenceList[transferworkflow.OnExceptionStepsAttributes](tw.ref.Append("on_exception_steps"))
}

func (tw transferWorkflowAttributes) Steps() terra.ListValue[transferworkflow.StepsAttributes] {
	return terra.ReferenceList[transferworkflow.StepsAttributes](tw.ref.Append("steps"))
}

type transferWorkflowState struct {
	Arn              string                                   `json:"arn"`
	Description      string                                   `json:"description"`
	Id               string                                   `json:"id"`
	Tags             map[string]string                        `json:"tags"`
	TagsAll          map[string]string                        `json:"tags_all"`
	OnExceptionSteps []transferworkflow.OnExceptionStepsState `json:"on_exception_steps"`
	Steps            []transferworkflow.StepsState            `json:"steps"`
}
