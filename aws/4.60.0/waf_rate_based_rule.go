// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	wafratebasedrule "github.com/golingon/terraproviders/aws/4.60.0/wafratebasedrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWafRateBasedRule(name string, args WafRateBasedRuleArgs) *WafRateBasedRule {
	return &WafRateBasedRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WafRateBasedRule)(nil)

type WafRateBasedRule struct {
	Name  string
	Args  WafRateBasedRuleArgs
	state *wafRateBasedRuleState
}

func (wrbr *WafRateBasedRule) Type() string {
	return "aws_waf_rate_based_rule"
}

func (wrbr *WafRateBasedRule) LocalName() string {
	return wrbr.Name
}

func (wrbr *WafRateBasedRule) Configuration() interface{} {
	return wrbr.Args
}

func (wrbr *WafRateBasedRule) Attributes() wafRateBasedRuleAttributes {
	return wafRateBasedRuleAttributes{ref: terra.ReferenceResource(wrbr)}
}

func (wrbr *WafRateBasedRule) ImportState(av io.Reader) error {
	wrbr.state = &wafRateBasedRuleState{}
	if err := json.NewDecoder(av).Decode(wrbr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wrbr.Type(), wrbr.LocalName(), err)
	}
	return nil
}

func (wrbr *WafRateBasedRule) State() (*wafRateBasedRuleState, bool) {
	return wrbr.state, wrbr.state != nil
}

func (wrbr *WafRateBasedRule) StateMust() *wafRateBasedRuleState {
	if wrbr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wrbr.Type(), wrbr.LocalName()))
	}
	return wrbr.state
}

func (wrbr *WafRateBasedRule) DependOn() terra.Reference {
	return terra.ReferenceResource(wrbr)
}

type WafRateBasedRuleArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MetricName: string, required
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RateKey: string, required
	RateKey terra.StringValue `hcl:"rate_key,attr" validate:"required"`
	// RateLimit: number, required
	RateLimit terra.NumberValue `hcl:"rate_limit,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Predicates: min=0
	Predicates []wafratebasedrule.Predicates `hcl:"predicates,block" validate:"min=0"`
	// DependsOn contains resources that WafRateBasedRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type wafRateBasedRuleAttributes struct {
	ref terra.Reference
}

func (wrbr wafRateBasedRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(wrbr.ref.Append("arn"))
}

func (wrbr wafRateBasedRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wrbr.ref.Append("id"))
}

func (wrbr wafRateBasedRuleAttributes) MetricName() terra.StringValue {
	return terra.ReferenceString(wrbr.ref.Append("metric_name"))
}

func (wrbr wafRateBasedRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wrbr.ref.Append("name"))
}

func (wrbr wafRateBasedRuleAttributes) RateKey() terra.StringValue {
	return terra.ReferenceString(wrbr.ref.Append("rate_key"))
}

func (wrbr wafRateBasedRuleAttributes) RateLimit() terra.NumberValue {
	return terra.ReferenceNumber(wrbr.ref.Append("rate_limit"))
}

func (wrbr wafRateBasedRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wrbr.ref.Append("tags"))
}

func (wrbr wafRateBasedRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wrbr.ref.Append("tags_all"))
}

func (wrbr wafRateBasedRuleAttributes) Predicates() terra.SetValue[wafratebasedrule.PredicatesAttributes] {
	return terra.ReferenceSet[wafratebasedrule.PredicatesAttributes](wrbr.ref.Append("predicates"))
}

type wafRateBasedRuleState struct {
	Arn        string                             `json:"arn"`
	Id         string                             `json:"id"`
	MetricName string                             `json:"metric_name"`
	Name       string                             `json:"name"`
	RateKey    string                             `json:"rate_key"`
	RateLimit  float64                            `json:"rate_limit"`
	Tags       map[string]string                  `json:"tags"`
	TagsAll    map[string]string                  `json:"tags_all"`
	Predicates []wafratebasedrule.PredicatesState `json:"predicates"`
}
