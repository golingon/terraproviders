// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApprunnerAutoScalingConfigurationVersion(name string, args ApprunnerAutoScalingConfigurationVersionArgs) *ApprunnerAutoScalingConfigurationVersion {
	return &ApprunnerAutoScalingConfigurationVersion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApprunnerAutoScalingConfigurationVersion)(nil)

type ApprunnerAutoScalingConfigurationVersion struct {
	Name  string
	Args  ApprunnerAutoScalingConfigurationVersionArgs
	state *apprunnerAutoScalingConfigurationVersionState
}

func (aascv *ApprunnerAutoScalingConfigurationVersion) Type() string {
	return "aws_apprunner_auto_scaling_configuration_version"
}

func (aascv *ApprunnerAutoScalingConfigurationVersion) LocalName() string {
	return aascv.Name
}

func (aascv *ApprunnerAutoScalingConfigurationVersion) Configuration() interface{} {
	return aascv.Args
}

func (aascv *ApprunnerAutoScalingConfigurationVersion) Attributes() apprunnerAutoScalingConfigurationVersionAttributes {
	return apprunnerAutoScalingConfigurationVersionAttributes{ref: terra.ReferenceResource(aascv)}
}

func (aascv *ApprunnerAutoScalingConfigurationVersion) ImportState(av io.Reader) error {
	aascv.state = &apprunnerAutoScalingConfigurationVersionState{}
	if err := json.NewDecoder(av).Decode(aascv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aascv.Type(), aascv.LocalName(), err)
	}
	return nil
}

func (aascv *ApprunnerAutoScalingConfigurationVersion) State() (*apprunnerAutoScalingConfigurationVersionState, bool) {
	return aascv.state, aascv.state != nil
}

func (aascv *ApprunnerAutoScalingConfigurationVersion) StateMust() *apprunnerAutoScalingConfigurationVersionState {
	if aascv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aascv.Type(), aascv.LocalName()))
	}
	return aascv.state
}

func (aascv *ApprunnerAutoScalingConfigurationVersion) DependOn() terra.Reference {
	return terra.ReferenceResource(aascv)
}

type ApprunnerAutoScalingConfigurationVersionArgs struct {
	// AutoScalingConfigurationName: string, required
	AutoScalingConfigurationName terra.StringValue `hcl:"auto_scaling_configuration_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxConcurrency: number, optional
	MaxConcurrency terra.NumberValue `hcl:"max_concurrency,attr"`
	// MaxSize: number, optional
	MaxSize terra.NumberValue `hcl:"max_size,attr"`
	// MinSize: number, optional
	MinSize terra.NumberValue `hcl:"min_size,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that ApprunnerAutoScalingConfigurationVersion depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apprunnerAutoScalingConfigurationVersionAttributes struct {
	ref terra.Reference
}

func (aascv apprunnerAutoScalingConfigurationVersionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(aascv.ref.Append("arn"))
}

func (aascv apprunnerAutoScalingConfigurationVersionAttributes) AutoScalingConfigurationName() terra.StringValue {
	return terra.ReferenceString(aascv.ref.Append("auto_scaling_configuration_name"))
}

func (aascv apprunnerAutoScalingConfigurationVersionAttributes) AutoScalingConfigurationRevision() terra.NumberValue {
	return terra.ReferenceNumber(aascv.ref.Append("auto_scaling_configuration_revision"))
}

func (aascv apprunnerAutoScalingConfigurationVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aascv.ref.Append("id"))
}

func (aascv apprunnerAutoScalingConfigurationVersionAttributes) Latest() terra.BoolValue {
	return terra.ReferenceBool(aascv.ref.Append("latest"))
}

func (aascv apprunnerAutoScalingConfigurationVersionAttributes) MaxConcurrency() terra.NumberValue {
	return terra.ReferenceNumber(aascv.ref.Append("max_concurrency"))
}

func (aascv apprunnerAutoScalingConfigurationVersionAttributes) MaxSize() terra.NumberValue {
	return terra.ReferenceNumber(aascv.ref.Append("max_size"))
}

func (aascv apprunnerAutoScalingConfigurationVersionAttributes) MinSize() terra.NumberValue {
	return terra.ReferenceNumber(aascv.ref.Append("min_size"))
}

func (aascv apprunnerAutoScalingConfigurationVersionAttributes) Status() terra.StringValue {
	return terra.ReferenceString(aascv.ref.Append("status"))
}

func (aascv apprunnerAutoScalingConfigurationVersionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aascv.ref.Append("tags"))
}

func (aascv apprunnerAutoScalingConfigurationVersionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aascv.ref.Append("tags_all"))
}

type apprunnerAutoScalingConfigurationVersionState struct {
	Arn                              string            `json:"arn"`
	AutoScalingConfigurationName     string            `json:"auto_scaling_configuration_name"`
	AutoScalingConfigurationRevision float64           `json:"auto_scaling_configuration_revision"`
	Id                               string            `json:"id"`
	Latest                           bool              `json:"latest"`
	MaxConcurrency                   float64           `json:"max_concurrency"`
	MaxSize                          float64           `json:"max_size"`
	MinSize                          float64           `json:"min_size"`
	Status                           string            `json:"status"`
	Tags                             map[string]string `json:"tags"`
	TagsAll                          map[string]string `json:"tags_all"`
}
