// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	serverlessapplicationrepositorycloudformationstack "github.com/golingon/terraproviders/aws/4.60.0/serverlessapplicationrepositorycloudformationstack"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServerlessapplicationrepositoryCloudformationStack(name string, args ServerlessapplicationrepositoryCloudformationStackArgs) *ServerlessapplicationrepositoryCloudformationStack {
	return &ServerlessapplicationrepositoryCloudformationStack{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServerlessapplicationrepositoryCloudformationStack)(nil)

type ServerlessapplicationrepositoryCloudformationStack struct {
	Name  string
	Args  ServerlessapplicationrepositoryCloudformationStackArgs
	state *serverlessapplicationrepositoryCloudformationStackState
}

func (scs *ServerlessapplicationrepositoryCloudformationStack) Type() string {
	return "aws_serverlessapplicationrepository_cloudformation_stack"
}

func (scs *ServerlessapplicationrepositoryCloudformationStack) LocalName() string {
	return scs.Name
}

func (scs *ServerlessapplicationrepositoryCloudformationStack) Configuration() interface{} {
	return scs.Args
}

func (scs *ServerlessapplicationrepositoryCloudformationStack) Attributes() serverlessapplicationrepositoryCloudformationStackAttributes {
	return serverlessapplicationrepositoryCloudformationStackAttributes{ref: terra.ReferenceResource(scs)}
}

func (scs *ServerlessapplicationrepositoryCloudformationStack) ImportState(av io.Reader) error {
	scs.state = &serverlessapplicationrepositoryCloudformationStackState{}
	if err := json.NewDecoder(av).Decode(scs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", scs.Type(), scs.LocalName(), err)
	}
	return nil
}

func (scs *ServerlessapplicationrepositoryCloudformationStack) State() (*serverlessapplicationrepositoryCloudformationStackState, bool) {
	return scs.state, scs.state != nil
}

func (scs *ServerlessapplicationrepositoryCloudformationStack) StateMust() *serverlessapplicationrepositoryCloudformationStackState {
	if scs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", scs.Type(), scs.LocalName()))
	}
	return scs.state
}

func (scs *ServerlessapplicationrepositoryCloudformationStack) DependOn() terra.Reference {
	return terra.ReferenceResource(scs)
}

type ServerlessapplicationrepositoryCloudformationStackArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Capabilities: set of string, required
	Capabilities terra.SetValue[terra.StringValue] `hcl:"capabilities,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// SemanticVersion: string, optional
	SemanticVersion terra.StringValue `hcl:"semantic_version,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *serverlessapplicationrepositorycloudformationstack.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServerlessapplicationrepositoryCloudformationStack depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type serverlessapplicationrepositoryCloudformationStackAttributes struct {
	ref terra.Reference
}

func (scs serverlessapplicationrepositoryCloudformationStackAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceString(scs.ref.Append("application_id"))
}

func (scs serverlessapplicationrepositoryCloudformationStackAttributes) Capabilities() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](scs.ref.Append("capabilities"))
}

func (scs serverlessapplicationrepositoryCloudformationStackAttributes) Id() terra.StringValue {
	return terra.ReferenceString(scs.ref.Append("id"))
}

func (scs serverlessapplicationrepositoryCloudformationStackAttributes) Name() terra.StringValue {
	return terra.ReferenceString(scs.ref.Append("name"))
}

func (scs serverlessapplicationrepositoryCloudformationStackAttributes) Outputs() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](scs.ref.Append("outputs"))
}

func (scs serverlessapplicationrepositoryCloudformationStackAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](scs.ref.Append("parameters"))
}

func (scs serverlessapplicationrepositoryCloudformationStackAttributes) SemanticVersion() terra.StringValue {
	return terra.ReferenceString(scs.ref.Append("semantic_version"))
}

func (scs serverlessapplicationrepositoryCloudformationStackAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](scs.ref.Append("tags"))
}

func (scs serverlessapplicationrepositoryCloudformationStackAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](scs.ref.Append("tags_all"))
}

func (scs serverlessapplicationrepositoryCloudformationStackAttributes) Timeouts() serverlessapplicationrepositorycloudformationstack.TimeoutsAttributes {
	return terra.ReferenceSingle[serverlessapplicationrepositorycloudformationstack.TimeoutsAttributes](scs.ref.Append("timeouts"))
}

type serverlessapplicationrepositoryCloudformationStackState struct {
	ApplicationId   string                                                            `json:"application_id"`
	Capabilities    []string                                                          `json:"capabilities"`
	Id              string                                                            `json:"id"`
	Name            string                                                            `json:"name"`
	Outputs         map[string]string                                                 `json:"outputs"`
	Parameters      map[string]string                                                 `json:"parameters"`
	SemanticVersion string                                                            `json:"semantic_version"`
	Tags            map[string]string                                                 `json:"tags"`
	TagsAll         map[string]string                                                 `json:"tags_all"`
	Timeouts        *serverlessapplicationrepositorycloudformationstack.TimeoutsState `json:"timeouts"`
}
