// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCeCostAllocationTag(name string, args CeCostAllocationTagArgs) *CeCostAllocationTag {
	return &CeCostAllocationTag{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CeCostAllocationTag)(nil)

type CeCostAllocationTag struct {
	Name  string
	Args  CeCostAllocationTagArgs
	state *ceCostAllocationTagState
}

func (ccat *CeCostAllocationTag) Type() string {
	return "aws_ce_cost_allocation_tag"
}

func (ccat *CeCostAllocationTag) LocalName() string {
	return ccat.Name
}

func (ccat *CeCostAllocationTag) Configuration() interface{} {
	return ccat.Args
}

func (ccat *CeCostAllocationTag) Attributes() ceCostAllocationTagAttributes {
	return ceCostAllocationTagAttributes{ref: terra.ReferenceResource(ccat)}
}

func (ccat *CeCostAllocationTag) ImportState(av io.Reader) error {
	ccat.state = &ceCostAllocationTagState{}
	if err := json.NewDecoder(av).Decode(ccat.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ccat.Type(), ccat.LocalName(), err)
	}
	return nil
}

func (ccat *CeCostAllocationTag) State() (*ceCostAllocationTagState, bool) {
	return ccat.state, ccat.state != nil
}

func (ccat *CeCostAllocationTag) StateMust() *ceCostAllocationTagState {
	if ccat.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ccat.Type(), ccat.LocalName()))
	}
	return ccat.state
}

func (ccat *CeCostAllocationTag) DependOn() terra.Reference {
	return terra.ReferenceResource(ccat)
}

type CeCostAllocationTagArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// TagKey: string, required
	TagKey terra.StringValue `hcl:"tag_key,attr" validate:"required"`
	// DependsOn contains resources that CeCostAllocationTag depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ceCostAllocationTagAttributes struct {
	ref terra.Reference
}

func (ccat ceCostAllocationTagAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ccat.ref.Append("id"))
}

func (ccat ceCostAllocationTagAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ccat.ref.Append("status"))
}

func (ccat ceCostAllocationTagAttributes) TagKey() terra.StringValue {
	return terra.ReferenceString(ccat.ref.Append("tag_key"))
}

func (ccat ceCostAllocationTagAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ccat.ref.Append("type"))
}

type ceCostAllocationTagState struct {
	Id     string `json:"id"`
	Status string `json:"status"`
	TagKey string `json:"tag_key"`
	Type   string `json:"type"`
}
