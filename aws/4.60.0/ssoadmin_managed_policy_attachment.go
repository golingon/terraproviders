// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSsoadminManagedPolicyAttachment(name string, args SsoadminManagedPolicyAttachmentArgs) *SsoadminManagedPolicyAttachment {
	return &SsoadminManagedPolicyAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SsoadminManagedPolicyAttachment)(nil)

type SsoadminManagedPolicyAttachment struct {
	Name  string
	Args  SsoadminManagedPolicyAttachmentArgs
	state *ssoadminManagedPolicyAttachmentState
}

func (smpa *SsoadminManagedPolicyAttachment) Type() string {
	return "aws_ssoadmin_managed_policy_attachment"
}

func (smpa *SsoadminManagedPolicyAttachment) LocalName() string {
	return smpa.Name
}

func (smpa *SsoadminManagedPolicyAttachment) Configuration() interface{} {
	return smpa.Args
}

func (smpa *SsoadminManagedPolicyAttachment) Attributes() ssoadminManagedPolicyAttachmentAttributes {
	return ssoadminManagedPolicyAttachmentAttributes{ref: terra.ReferenceResource(smpa)}
}

func (smpa *SsoadminManagedPolicyAttachment) ImportState(av io.Reader) error {
	smpa.state = &ssoadminManagedPolicyAttachmentState{}
	if err := json.NewDecoder(av).Decode(smpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", smpa.Type(), smpa.LocalName(), err)
	}
	return nil
}

func (smpa *SsoadminManagedPolicyAttachment) State() (*ssoadminManagedPolicyAttachmentState, bool) {
	return smpa.state, smpa.state != nil
}

func (smpa *SsoadminManagedPolicyAttachment) StateMust() *ssoadminManagedPolicyAttachmentState {
	if smpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", smpa.Type(), smpa.LocalName()))
	}
	return smpa.state
}

func (smpa *SsoadminManagedPolicyAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(smpa)
}

type SsoadminManagedPolicyAttachmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceArn: string, required
	InstanceArn terra.StringValue `hcl:"instance_arn,attr" validate:"required"`
	// ManagedPolicyArn: string, required
	ManagedPolicyArn terra.StringValue `hcl:"managed_policy_arn,attr" validate:"required"`
	// PermissionSetArn: string, required
	PermissionSetArn terra.StringValue `hcl:"permission_set_arn,attr" validate:"required"`
	// DependsOn contains resources that SsoadminManagedPolicyAttachment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ssoadminManagedPolicyAttachmentAttributes struct {
	ref terra.Reference
}

func (smpa ssoadminManagedPolicyAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(smpa.ref.Append("id"))
}

func (smpa ssoadminManagedPolicyAttachmentAttributes) InstanceArn() terra.StringValue {
	return terra.ReferenceString(smpa.ref.Append("instance_arn"))
}

func (smpa ssoadminManagedPolicyAttachmentAttributes) ManagedPolicyArn() terra.StringValue {
	return terra.ReferenceString(smpa.ref.Append("managed_policy_arn"))
}

func (smpa ssoadminManagedPolicyAttachmentAttributes) ManagedPolicyName() terra.StringValue {
	return terra.ReferenceString(smpa.ref.Append("managed_policy_name"))
}

func (smpa ssoadminManagedPolicyAttachmentAttributes) PermissionSetArn() terra.StringValue {
	return terra.ReferenceString(smpa.ref.Append("permission_set_arn"))
}

type ssoadminManagedPolicyAttachmentState struct {
	Id                string `json:"id"`
	InstanceArn       string `json:"instance_arn"`
	ManagedPolicyArn  string `json:"managed_policy_arn"`
	ManagedPolicyName string `json:"managed_policy_name"`
	PermissionSetArn  string `json:"permission_set_arn"`
}
