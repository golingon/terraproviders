// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2TransitGatewayPolicyTableAssociation(name string, args Ec2TransitGatewayPolicyTableAssociationArgs) *Ec2TransitGatewayPolicyTableAssociation {
	return &Ec2TransitGatewayPolicyTableAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TransitGatewayPolicyTableAssociation)(nil)

type Ec2TransitGatewayPolicyTableAssociation struct {
	Name  string
	Args  Ec2TransitGatewayPolicyTableAssociationArgs
	state *ec2TransitGatewayPolicyTableAssociationState
}

func (etgpta *Ec2TransitGatewayPolicyTableAssociation) Type() string {
	return "aws_ec2_transit_gateway_policy_table_association"
}

func (etgpta *Ec2TransitGatewayPolicyTableAssociation) LocalName() string {
	return etgpta.Name
}

func (etgpta *Ec2TransitGatewayPolicyTableAssociation) Configuration() interface{} {
	return etgpta.Args
}

func (etgpta *Ec2TransitGatewayPolicyTableAssociation) Attributes() ec2TransitGatewayPolicyTableAssociationAttributes {
	return ec2TransitGatewayPolicyTableAssociationAttributes{ref: terra.ReferenceResource(etgpta)}
}

func (etgpta *Ec2TransitGatewayPolicyTableAssociation) ImportState(av io.Reader) error {
	etgpta.state = &ec2TransitGatewayPolicyTableAssociationState{}
	if err := json.NewDecoder(av).Decode(etgpta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etgpta.Type(), etgpta.LocalName(), err)
	}
	return nil
}

func (etgpta *Ec2TransitGatewayPolicyTableAssociation) State() (*ec2TransitGatewayPolicyTableAssociationState, bool) {
	return etgpta.state, etgpta.state != nil
}

func (etgpta *Ec2TransitGatewayPolicyTableAssociation) StateMust() *ec2TransitGatewayPolicyTableAssociationState {
	if etgpta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etgpta.Type(), etgpta.LocalName()))
	}
	return etgpta.state
}

func (etgpta *Ec2TransitGatewayPolicyTableAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(etgpta)
}

type Ec2TransitGatewayPolicyTableAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TransitGatewayAttachmentId: string, required
	TransitGatewayAttachmentId terra.StringValue `hcl:"transit_gateway_attachment_id,attr" validate:"required"`
	// TransitGatewayPolicyTableId: string, required
	TransitGatewayPolicyTableId terra.StringValue `hcl:"transit_gateway_policy_table_id,attr" validate:"required"`
	// DependsOn contains resources that Ec2TransitGatewayPolicyTableAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2TransitGatewayPolicyTableAssociationAttributes struct {
	ref terra.Reference
}

func (etgpta ec2TransitGatewayPolicyTableAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etgpta.ref.Append("id"))
}

func (etgpta ec2TransitGatewayPolicyTableAssociationAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(etgpta.ref.Append("resource_id"))
}

func (etgpta ec2TransitGatewayPolicyTableAssociationAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceString(etgpta.ref.Append("resource_type"))
}

func (etgpta ec2TransitGatewayPolicyTableAssociationAttributes) TransitGatewayAttachmentId() terra.StringValue {
	return terra.ReferenceString(etgpta.ref.Append("transit_gateway_attachment_id"))
}

func (etgpta ec2TransitGatewayPolicyTableAssociationAttributes) TransitGatewayPolicyTableId() terra.StringValue {
	return terra.ReferenceString(etgpta.ref.Append("transit_gateway_policy_table_id"))
}

type ec2TransitGatewayPolicyTableAssociationState struct {
	Id                          string `json:"id"`
	ResourceId                  string `json:"resource_id"`
	ResourceType                string `json:"resource_type"`
	TransitGatewayAttachmentId  string `json:"transit_gateway_attachment_id"`
	TransitGatewayPolicyTableId string `json:"transit_gateway_policy_table_id"`
}
