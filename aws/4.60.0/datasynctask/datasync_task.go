// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datasynctask

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Excludes struct {
	// FilterType: string, optional
	FilterType terra.StringValue `hcl:"filter_type,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Includes struct {
	// FilterType: string, optional
	FilterType terra.StringValue `hcl:"filter_type,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Options struct {
	// Atime: string, optional
	Atime terra.StringValue `hcl:"atime,attr"`
	// BytesPerSecond: number, optional
	BytesPerSecond terra.NumberValue `hcl:"bytes_per_second,attr"`
	// Gid: string, optional
	Gid terra.StringValue `hcl:"gid,attr"`
	// LogLevel: string, optional
	LogLevel terra.StringValue `hcl:"log_level,attr"`
	// Mtime: string, optional
	Mtime terra.StringValue `hcl:"mtime,attr"`
	// OverwriteMode: string, optional
	OverwriteMode terra.StringValue `hcl:"overwrite_mode,attr"`
	// PosixPermissions: string, optional
	PosixPermissions terra.StringValue `hcl:"posix_permissions,attr"`
	// PreserveDeletedFiles: string, optional
	PreserveDeletedFiles terra.StringValue `hcl:"preserve_deleted_files,attr"`
	// PreserveDevices: string, optional
	PreserveDevices terra.StringValue `hcl:"preserve_devices,attr"`
	// SecurityDescriptorCopyFlags: string, optional
	SecurityDescriptorCopyFlags terra.StringValue `hcl:"security_descriptor_copy_flags,attr"`
	// TaskQueueing: string, optional
	TaskQueueing terra.StringValue `hcl:"task_queueing,attr"`
	// TransferMode: string, optional
	TransferMode terra.StringValue `hcl:"transfer_mode,attr"`
	// Uid: string, optional
	Uid terra.StringValue `hcl:"uid,attr"`
	// VerifyMode: string, optional
	VerifyMode terra.StringValue `hcl:"verify_mode,attr"`
}

type Schedule struct {
	// ScheduleExpression: string, required
	ScheduleExpression terra.StringValue `hcl:"schedule_expression,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
}

type ExcludesAttributes struct {
	ref terra.Reference
}

func (e ExcludesAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e ExcludesAttributes) InternalWithRef(ref terra.Reference) ExcludesAttributes {
	return ExcludesAttributes{ref: ref}
}

func (e ExcludesAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e ExcludesAttributes) FilterType() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("filter_type"))
}

func (e ExcludesAttributes) Value() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("value"))
}

type IncludesAttributes struct {
	ref terra.Reference
}

func (i IncludesAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i IncludesAttributes) InternalWithRef(ref terra.Reference) IncludesAttributes {
	return IncludesAttributes{ref: ref}
}

func (i IncludesAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i IncludesAttributes) FilterType() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("filter_type"))
}

func (i IncludesAttributes) Value() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("value"))
}

type OptionsAttributes struct {
	ref terra.Reference
}

func (o OptionsAttributes) InternalRef() terra.Reference {
	return o.ref
}

func (o OptionsAttributes) InternalWithRef(ref terra.Reference) OptionsAttributes {
	return OptionsAttributes{ref: ref}
}

func (o OptionsAttributes) InternalTokens() hclwrite.Tokens {
	return o.ref.InternalTokens()
}

func (o OptionsAttributes) Atime() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("atime"))
}

func (o OptionsAttributes) BytesPerSecond() terra.NumberValue {
	return terra.ReferenceNumber(o.ref.Append("bytes_per_second"))
}

func (o OptionsAttributes) Gid() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("gid"))
}

func (o OptionsAttributes) LogLevel() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("log_level"))
}

func (o OptionsAttributes) Mtime() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("mtime"))
}

func (o OptionsAttributes) OverwriteMode() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("overwrite_mode"))
}

func (o OptionsAttributes) PosixPermissions() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("posix_permissions"))
}

func (o OptionsAttributes) PreserveDeletedFiles() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("preserve_deleted_files"))
}

func (o OptionsAttributes) PreserveDevices() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("preserve_devices"))
}

func (o OptionsAttributes) SecurityDescriptorCopyFlags() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("security_descriptor_copy_flags"))
}

func (o OptionsAttributes) TaskQueueing() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("task_queueing"))
}

func (o OptionsAttributes) TransferMode() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("transfer_mode"))
}

func (o OptionsAttributes) Uid() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("uid"))
}

func (o OptionsAttributes) VerifyMode() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("verify_mode"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) ScheduleExpression() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("schedule_expression"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

type ExcludesState struct {
	FilterType string `json:"filter_type"`
	Value      string `json:"value"`
}

type IncludesState struct {
	FilterType string `json:"filter_type"`
	Value      string `json:"value"`
}

type OptionsState struct {
	Atime                       string  `json:"atime"`
	BytesPerSecond              float64 `json:"bytes_per_second"`
	Gid                         string  `json:"gid"`
	LogLevel                    string  `json:"log_level"`
	Mtime                       string  `json:"mtime"`
	OverwriteMode               string  `json:"overwrite_mode"`
	PosixPermissions            string  `json:"posix_permissions"`
	PreserveDeletedFiles        string  `json:"preserve_deleted_files"`
	PreserveDevices             string  `json:"preserve_devices"`
	SecurityDescriptorCopyFlags string  `json:"security_descriptor_copy_flags"`
	TaskQueueing                string  `json:"task_queueing"`
	TransferMode                string  `json:"transfer_mode"`
	Uid                         string  `json:"uid"`
	VerifyMode                  string  `json:"verify_mode"`
}

type ScheduleState struct {
	ScheduleExpression string `json:"schedule_expression"`
}

type TimeoutsState struct {
	Create string `json:"create"`
}
