// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	identitystoregroup "github.com/golingon/terraproviders/aws/4.60.0/identitystoregroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIdentitystoreGroup(name string, args IdentitystoreGroupArgs) *IdentitystoreGroup {
	return &IdentitystoreGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IdentitystoreGroup)(nil)

type IdentitystoreGroup struct {
	Name  string
	Args  IdentitystoreGroupArgs
	state *identitystoreGroupState
}

func (ig *IdentitystoreGroup) Type() string {
	return "aws_identitystore_group"
}

func (ig *IdentitystoreGroup) LocalName() string {
	return ig.Name
}

func (ig *IdentitystoreGroup) Configuration() interface{} {
	return ig.Args
}

func (ig *IdentitystoreGroup) Attributes() identitystoreGroupAttributes {
	return identitystoreGroupAttributes{ref: terra.ReferenceResource(ig)}
}

func (ig *IdentitystoreGroup) ImportState(av io.Reader) error {
	ig.state = &identitystoreGroupState{}
	if err := json.NewDecoder(av).Decode(ig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ig.Type(), ig.LocalName(), err)
	}
	return nil
}

func (ig *IdentitystoreGroup) State() (*identitystoreGroupState, bool) {
	return ig.state, ig.state != nil
}

func (ig *IdentitystoreGroup) StateMust() *identitystoreGroupState {
	if ig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ig.Type(), ig.LocalName()))
	}
	return ig.state
}

func (ig *IdentitystoreGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(ig)
}

type IdentitystoreGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName: string, required
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityStoreId: string, required
	IdentityStoreId terra.StringValue `hcl:"identity_store_id,attr" validate:"required"`
	// ExternalIds: min=0
	ExternalIds []identitystoregroup.ExternalIds `hcl:"external_ids,block" validate:"min=0"`
	// DependsOn contains resources that IdentitystoreGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type identitystoreGroupAttributes struct {
	ref terra.Reference
}

func (ig identitystoreGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("description"))
}

func (ig identitystoreGroupAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("display_name"))
}

func (ig identitystoreGroupAttributes) GroupId() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("group_id"))
}

func (ig identitystoreGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("id"))
}

func (ig identitystoreGroupAttributes) IdentityStoreId() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("identity_store_id"))
}

func (ig identitystoreGroupAttributes) ExternalIds() terra.ListValue[identitystoregroup.ExternalIdsAttributes] {
	return terra.ReferenceList[identitystoregroup.ExternalIdsAttributes](ig.ref.Append("external_ids"))
}

type identitystoreGroupState struct {
	Description     string                                `json:"description"`
	DisplayName     string                                `json:"display_name"`
	GroupId         string                                `json:"group_id"`
	Id              string                                `json:"id"`
	IdentityStoreId string                                `json:"identity_store_id"`
	ExternalIds     []identitystoregroup.ExternalIdsState `json:"external_ids"`
}
