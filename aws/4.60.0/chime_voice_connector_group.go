// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	chimevoiceconnectorgroup "github.com/golingon/terraproviders/aws/4.60.0/chimevoiceconnectorgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewChimeVoiceConnectorGroup(name string, args ChimeVoiceConnectorGroupArgs) *ChimeVoiceConnectorGroup {
	return &ChimeVoiceConnectorGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ChimeVoiceConnectorGroup)(nil)

type ChimeVoiceConnectorGroup struct {
	Name  string
	Args  ChimeVoiceConnectorGroupArgs
	state *chimeVoiceConnectorGroupState
}

func (cvcg *ChimeVoiceConnectorGroup) Type() string {
	return "aws_chime_voice_connector_group"
}

func (cvcg *ChimeVoiceConnectorGroup) LocalName() string {
	return cvcg.Name
}

func (cvcg *ChimeVoiceConnectorGroup) Configuration() interface{} {
	return cvcg.Args
}

func (cvcg *ChimeVoiceConnectorGroup) Attributes() chimeVoiceConnectorGroupAttributes {
	return chimeVoiceConnectorGroupAttributes{ref: terra.ReferenceResource(cvcg)}
}

func (cvcg *ChimeVoiceConnectorGroup) ImportState(av io.Reader) error {
	cvcg.state = &chimeVoiceConnectorGroupState{}
	if err := json.NewDecoder(av).Decode(cvcg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cvcg.Type(), cvcg.LocalName(), err)
	}
	return nil
}

func (cvcg *ChimeVoiceConnectorGroup) State() (*chimeVoiceConnectorGroupState, bool) {
	return cvcg.state, cvcg.state != nil
}

func (cvcg *ChimeVoiceConnectorGroup) StateMust() *chimeVoiceConnectorGroupState {
	if cvcg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cvcg.Type(), cvcg.LocalName()))
	}
	return cvcg.state
}

func (cvcg *ChimeVoiceConnectorGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(cvcg)
}

type ChimeVoiceConnectorGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Connector: min=0,max=3
	Connector []chimevoiceconnectorgroup.Connector `hcl:"connector,block" validate:"min=0,max=3"`
	// DependsOn contains resources that ChimeVoiceConnectorGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type chimeVoiceConnectorGroupAttributes struct {
	ref terra.Reference
}

func (cvcg chimeVoiceConnectorGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cvcg.ref.Append("id"))
}

func (cvcg chimeVoiceConnectorGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cvcg.ref.Append("name"))
}

func (cvcg chimeVoiceConnectorGroupAttributes) Connector() terra.SetValue[chimevoiceconnectorgroup.ConnectorAttributes] {
	return terra.ReferenceSet[chimevoiceconnectorgroup.ConnectorAttributes](cvcg.ref.Append("connector"))
}

type chimeVoiceConnectorGroupState struct {
	Id        string                                    `json:"id"`
	Name      string                                    `json:"name"`
	Connector []chimevoiceconnectorgroup.ConnectorState `json:"connector"`
}
