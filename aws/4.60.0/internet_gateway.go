// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	internetgateway "github.com/golingon/terraproviders/aws/4.60.0/internetgateway"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewInternetGateway(name string, args InternetGatewayArgs) *InternetGateway {
	return &InternetGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*InternetGateway)(nil)

type InternetGateway struct {
	Name  string
	Args  InternetGatewayArgs
	state *internetGatewayState
}

func (ig *InternetGateway) Type() string {
	return "aws_internet_gateway"
}

func (ig *InternetGateway) LocalName() string {
	return ig.Name
}

func (ig *InternetGateway) Configuration() interface{} {
	return ig.Args
}

func (ig *InternetGateway) Attributes() internetGatewayAttributes {
	return internetGatewayAttributes{ref: terra.ReferenceResource(ig)}
}

func (ig *InternetGateway) ImportState(av io.Reader) error {
	ig.state = &internetGatewayState{}
	if err := json.NewDecoder(av).Decode(ig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ig.Type(), ig.LocalName(), err)
	}
	return nil
}

func (ig *InternetGateway) State() (*internetGatewayState, bool) {
	return ig.state, ig.state != nil
}

func (ig *InternetGateway) StateMust() *internetGatewayState {
	if ig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ig.Type(), ig.LocalName()))
	}
	return ig.state
}

func (ig *InternetGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(ig)
}

type InternetGatewayArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcId: string, optional
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// Timeouts: optional
	Timeouts *internetgateway.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that InternetGateway depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type internetGatewayAttributes struct {
	ref terra.Reference
}

func (ig internetGatewayAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("arn"))
}

func (ig internetGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("id"))
}

func (ig internetGatewayAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("owner_id"))
}

func (ig internetGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ig.ref.Append("tags"))
}

func (ig internetGatewayAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ig.ref.Append("tags_all"))
}

func (ig internetGatewayAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("vpc_id"))
}

func (ig internetGatewayAttributes) Timeouts() internetgateway.TimeoutsAttributes {
	return terra.ReferenceSingle[internetgateway.TimeoutsAttributes](ig.ref.Append("timeouts"))
}

type internetGatewayState struct {
	Arn      string                         `json:"arn"`
	Id       string                         `json:"id"`
	OwnerId  string                         `json:"owner_id"`
	Tags     map[string]string              `json:"tags"`
	TagsAll  map[string]string              `json:"tags_all"`
	VpcId    string                         `json:"vpc_id"`
	Timeouts *internetgateway.TimeoutsState `json:"timeouts"`
}
