// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOpsworksUserProfile(name string, args OpsworksUserProfileArgs) *OpsworksUserProfile {
	return &OpsworksUserProfile{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OpsworksUserProfile)(nil)

type OpsworksUserProfile struct {
	Name  string
	Args  OpsworksUserProfileArgs
	state *opsworksUserProfileState
}

func (oup *OpsworksUserProfile) Type() string {
	return "aws_opsworks_user_profile"
}

func (oup *OpsworksUserProfile) LocalName() string {
	return oup.Name
}

func (oup *OpsworksUserProfile) Configuration() interface{} {
	return oup.Args
}

func (oup *OpsworksUserProfile) Attributes() opsworksUserProfileAttributes {
	return opsworksUserProfileAttributes{ref: terra.ReferenceResource(oup)}
}

func (oup *OpsworksUserProfile) ImportState(av io.Reader) error {
	oup.state = &opsworksUserProfileState{}
	if err := json.NewDecoder(av).Decode(oup.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", oup.Type(), oup.LocalName(), err)
	}
	return nil
}

func (oup *OpsworksUserProfile) State() (*opsworksUserProfileState, bool) {
	return oup.state, oup.state != nil
}

func (oup *OpsworksUserProfile) StateMust() *opsworksUserProfileState {
	if oup.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", oup.Type(), oup.LocalName()))
	}
	return oup.state
}

func (oup *OpsworksUserProfile) DependOn() terra.Reference {
	return terra.ReferenceResource(oup)
}

type OpsworksUserProfileArgs struct {
	// AllowSelfManagement: bool, optional
	AllowSelfManagement terra.BoolValue `hcl:"allow_self_management,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SshPublicKey: string, optional
	SshPublicKey terra.StringValue `hcl:"ssh_public_key,attr"`
	// SshUsername: string, required
	SshUsername terra.StringValue `hcl:"ssh_username,attr" validate:"required"`
	// UserArn: string, required
	UserArn terra.StringValue `hcl:"user_arn,attr" validate:"required"`
	// DependsOn contains resources that OpsworksUserProfile depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type opsworksUserProfileAttributes struct {
	ref terra.Reference
}

func (oup opsworksUserProfileAttributes) AllowSelfManagement() terra.BoolValue {
	return terra.ReferenceBool(oup.ref.Append("allow_self_management"))
}

func (oup opsworksUserProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceString(oup.ref.Append("id"))
}

func (oup opsworksUserProfileAttributes) SshPublicKey() terra.StringValue {
	return terra.ReferenceString(oup.ref.Append("ssh_public_key"))
}

func (oup opsworksUserProfileAttributes) SshUsername() terra.StringValue {
	return terra.ReferenceString(oup.ref.Append("ssh_username"))
}

func (oup opsworksUserProfileAttributes) UserArn() terra.StringValue {
	return terra.ReferenceString(oup.ref.Append("user_arn"))
}

type opsworksUserProfileState struct {
	AllowSelfManagement bool   `json:"allow_self_management"`
	Id                  string `json:"id"`
	SshPublicKey        string `json:"ssh_public_key"`
	SshUsername         string `json:"ssh_username"`
	UserArn             string `json:"user_arn"`
}
