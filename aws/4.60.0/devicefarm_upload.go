// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDevicefarmUpload(name string, args DevicefarmUploadArgs) *DevicefarmUpload {
	return &DevicefarmUpload{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DevicefarmUpload)(nil)

type DevicefarmUpload struct {
	Name  string
	Args  DevicefarmUploadArgs
	state *devicefarmUploadState
}

func (du *DevicefarmUpload) Type() string {
	return "aws_devicefarm_upload"
}

func (du *DevicefarmUpload) LocalName() string {
	return du.Name
}

func (du *DevicefarmUpload) Configuration() interface{} {
	return du.Args
}

func (du *DevicefarmUpload) Attributes() devicefarmUploadAttributes {
	return devicefarmUploadAttributes{ref: terra.ReferenceResource(du)}
}

func (du *DevicefarmUpload) ImportState(av io.Reader) error {
	du.state = &devicefarmUploadState{}
	if err := json.NewDecoder(av).Decode(du.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", du.Type(), du.LocalName(), err)
	}
	return nil
}

func (du *DevicefarmUpload) State() (*devicefarmUploadState, bool) {
	return du.state, du.state != nil
}

func (du *DevicefarmUpload) StateMust() *devicefarmUploadState {
	if du.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", du.Type(), du.LocalName()))
	}
	return du.state
}

func (du *DevicefarmUpload) DependOn() terra.Reference {
	return terra.ReferenceResource(du)
}

type DevicefarmUploadArgs struct {
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProjectArn: string, required
	ProjectArn terra.StringValue `hcl:"project_arn,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// DependsOn contains resources that DevicefarmUpload depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type devicefarmUploadAttributes struct {
	ref terra.Reference
}

func (du devicefarmUploadAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(du.ref.Append("arn"))
}

func (du devicefarmUploadAttributes) Category() terra.StringValue {
	return terra.ReferenceString(du.ref.Append("category"))
}

func (du devicefarmUploadAttributes) ContentType() terra.StringValue {
	return terra.ReferenceString(du.ref.Append("content_type"))
}

func (du devicefarmUploadAttributes) Id() terra.StringValue {
	return terra.ReferenceString(du.ref.Append("id"))
}

func (du devicefarmUploadAttributes) Metadata() terra.StringValue {
	return terra.ReferenceString(du.ref.Append("metadata"))
}

func (du devicefarmUploadAttributes) Name() terra.StringValue {
	return terra.ReferenceString(du.ref.Append("name"))
}

func (du devicefarmUploadAttributes) ProjectArn() terra.StringValue {
	return terra.ReferenceString(du.ref.Append("project_arn"))
}

func (du devicefarmUploadAttributes) Type() terra.StringValue {
	return terra.ReferenceString(du.ref.Append("type"))
}

func (du devicefarmUploadAttributes) Url() terra.StringValue {
	return terra.ReferenceString(du.ref.Append("url"))
}

type devicefarmUploadState struct {
	Arn         string `json:"arn"`
	Category    string `json:"category"`
	ContentType string `json:"content_type"`
	Id          string `json:"id"`
	Metadata    string `json:"metadata"`
	Name        string `json:"name"`
	ProjectArn  string `json:"project_arn"`
	Type        string `json:"type"`
	Url         string `json:"url"`
}
