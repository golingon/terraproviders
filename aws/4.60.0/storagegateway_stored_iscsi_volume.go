// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStoragegatewayStoredIscsiVolume(name string, args StoragegatewayStoredIscsiVolumeArgs) *StoragegatewayStoredIscsiVolume {
	return &StoragegatewayStoredIscsiVolume{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StoragegatewayStoredIscsiVolume)(nil)

type StoragegatewayStoredIscsiVolume struct {
	Name  string
	Args  StoragegatewayStoredIscsiVolumeArgs
	state *storagegatewayStoredIscsiVolumeState
}

func (ssiv *StoragegatewayStoredIscsiVolume) Type() string {
	return "aws_storagegateway_stored_iscsi_volume"
}

func (ssiv *StoragegatewayStoredIscsiVolume) LocalName() string {
	return ssiv.Name
}

func (ssiv *StoragegatewayStoredIscsiVolume) Configuration() interface{} {
	return ssiv.Args
}

func (ssiv *StoragegatewayStoredIscsiVolume) Attributes() storagegatewayStoredIscsiVolumeAttributes {
	return storagegatewayStoredIscsiVolumeAttributes{ref: terra.ReferenceResource(ssiv)}
}

func (ssiv *StoragegatewayStoredIscsiVolume) ImportState(av io.Reader) error {
	ssiv.state = &storagegatewayStoredIscsiVolumeState{}
	if err := json.NewDecoder(av).Decode(ssiv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssiv.Type(), ssiv.LocalName(), err)
	}
	return nil
}

func (ssiv *StoragegatewayStoredIscsiVolume) State() (*storagegatewayStoredIscsiVolumeState, bool) {
	return ssiv.state, ssiv.state != nil
}

func (ssiv *StoragegatewayStoredIscsiVolume) StateMust() *storagegatewayStoredIscsiVolumeState {
	if ssiv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssiv.Type(), ssiv.LocalName()))
	}
	return ssiv.state
}

func (ssiv *StoragegatewayStoredIscsiVolume) DependOn() terra.Reference {
	return terra.ReferenceResource(ssiv)
}

type StoragegatewayStoredIscsiVolumeArgs struct {
	// DiskId: string, required
	DiskId terra.StringValue `hcl:"disk_id,attr" validate:"required"`
	// GatewayArn: string, required
	GatewayArn terra.StringValue `hcl:"gateway_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsEncrypted: bool, optional
	KmsEncrypted terra.BoolValue `hcl:"kms_encrypted,attr"`
	// KmsKey: string, optional
	KmsKey terra.StringValue `hcl:"kms_key,attr"`
	// NetworkInterfaceId: string, required
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr" validate:"required"`
	// PreserveExistingData: bool, required
	PreserveExistingData terra.BoolValue `hcl:"preserve_existing_data,attr" validate:"required"`
	// SnapshotId: string, optional
	SnapshotId terra.StringValue `hcl:"snapshot_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetName: string, required
	TargetName terra.StringValue `hcl:"target_name,attr" validate:"required"`
	// DependsOn contains resources that StoragegatewayStoredIscsiVolume depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storagegatewayStoredIscsiVolumeAttributes struct {
	ref terra.Reference
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ssiv.ref.Append("arn"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) ChapEnabled() terra.BoolValue {
	return terra.ReferenceBool(ssiv.ref.Append("chap_enabled"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) DiskId() terra.StringValue {
	return terra.ReferenceString(ssiv.ref.Append("disk_id"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) GatewayArn() terra.StringValue {
	return terra.ReferenceString(ssiv.ref.Append("gateway_arn"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssiv.ref.Append("id"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) KmsEncrypted() terra.BoolValue {
	return terra.ReferenceBool(ssiv.ref.Append("kms_encrypted"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceString(ssiv.ref.Append("kms_key"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) LunNumber() terra.NumberValue {
	return terra.ReferenceNumber(ssiv.ref.Append("lun_number"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceString(ssiv.ref.Append("network_interface_id"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) NetworkInterfacePort() terra.NumberValue {
	return terra.ReferenceNumber(ssiv.ref.Append("network_interface_port"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) PreserveExistingData() terra.BoolValue {
	return terra.ReferenceBool(ssiv.ref.Append("preserve_existing_data"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) SnapshotId() terra.StringValue {
	return terra.ReferenceString(ssiv.ref.Append("snapshot_id"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ssiv.ref.Append("tags"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ssiv.ref.Append("tags_all"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceString(ssiv.ref.Append("target_arn"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) TargetName() terra.StringValue {
	return terra.ReferenceString(ssiv.ref.Append("target_name"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) VolumeAttachmentStatus() terra.StringValue {
	return terra.ReferenceString(ssiv.ref.Append("volume_attachment_status"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) VolumeId() terra.StringValue {
	return terra.ReferenceString(ssiv.ref.Append("volume_id"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) VolumeSizeInBytes() terra.NumberValue {
	return terra.ReferenceNumber(ssiv.ref.Append("volume_size_in_bytes"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) VolumeStatus() terra.StringValue {
	return terra.ReferenceString(ssiv.ref.Append("volume_status"))
}

func (ssiv storagegatewayStoredIscsiVolumeAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceString(ssiv.ref.Append("volume_type"))
}

type storagegatewayStoredIscsiVolumeState struct {
	Arn                    string            `json:"arn"`
	ChapEnabled            bool              `json:"chap_enabled"`
	DiskId                 string            `json:"disk_id"`
	GatewayArn             string            `json:"gateway_arn"`
	Id                     string            `json:"id"`
	KmsEncrypted           bool              `json:"kms_encrypted"`
	KmsKey                 string            `json:"kms_key"`
	LunNumber              float64           `json:"lun_number"`
	NetworkInterfaceId     string            `json:"network_interface_id"`
	NetworkInterfacePort   float64           `json:"network_interface_port"`
	PreserveExistingData   bool              `json:"preserve_existing_data"`
	SnapshotId             string            `json:"snapshot_id"`
	Tags                   map[string]string `json:"tags"`
	TagsAll                map[string]string `json:"tags_all"`
	TargetArn              string            `json:"target_arn"`
	TargetName             string            `json:"target_name"`
	VolumeAttachmentStatus string            `json:"volume_attachment_status"`
	VolumeId               string            `json:"volume_id"`
	VolumeSizeInBytes      float64           `json:"volume_size_in_bytes"`
	VolumeStatus           string            `json:"volume_status"`
	VolumeType             string            `json:"volume_type"`
}
