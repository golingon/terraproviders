// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ecstaskset "github.com/golingon/terraproviders/aws/4.60.0/ecstaskset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEcsTaskSet(name string, args EcsTaskSetArgs) *EcsTaskSet {
	return &EcsTaskSet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EcsTaskSet)(nil)

type EcsTaskSet struct {
	Name  string
	Args  EcsTaskSetArgs
	state *ecsTaskSetState
}

func (ets *EcsTaskSet) Type() string {
	return "aws_ecs_task_set"
}

func (ets *EcsTaskSet) LocalName() string {
	return ets.Name
}

func (ets *EcsTaskSet) Configuration() interface{} {
	return ets.Args
}

func (ets *EcsTaskSet) Attributes() ecsTaskSetAttributes {
	return ecsTaskSetAttributes{ref: terra.ReferenceResource(ets)}
}

func (ets *EcsTaskSet) ImportState(av io.Reader) error {
	ets.state = &ecsTaskSetState{}
	if err := json.NewDecoder(av).Decode(ets.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ets.Type(), ets.LocalName(), err)
	}
	return nil
}

func (ets *EcsTaskSet) State() (*ecsTaskSetState, bool) {
	return ets.state, ets.state != nil
}

func (ets *EcsTaskSet) StateMust() *ecsTaskSetState {
	if ets.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ets.Type(), ets.LocalName()))
	}
	return ets.state
}

func (ets *EcsTaskSet) DependOn() terra.Reference {
	return terra.ReferenceResource(ets)
}

type EcsTaskSetArgs struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// ExternalId: string, optional
	ExternalId terra.StringValue `hcl:"external_id,attr"`
	// ForceDelete: bool, optional
	ForceDelete terra.BoolValue `hcl:"force_delete,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LaunchType: string, optional
	LaunchType terra.StringValue `hcl:"launch_type,attr"`
	// PlatformVersion: string, optional
	PlatformVersion terra.StringValue `hcl:"platform_version,attr"`
	// Service: string, required
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TaskDefinition: string, required
	TaskDefinition terra.StringValue `hcl:"task_definition,attr" validate:"required"`
	// WaitUntilStable: bool, optional
	WaitUntilStable terra.BoolValue `hcl:"wait_until_stable,attr"`
	// WaitUntilStableTimeout: string, optional
	WaitUntilStableTimeout terra.StringValue `hcl:"wait_until_stable_timeout,attr"`
	// CapacityProviderStrategy: min=0
	CapacityProviderStrategy []ecstaskset.CapacityProviderStrategy `hcl:"capacity_provider_strategy,block" validate:"min=0"`
	// LoadBalancer: min=0
	LoadBalancer []ecstaskset.LoadBalancer `hcl:"load_balancer,block" validate:"min=0"`
	// NetworkConfiguration: optional
	NetworkConfiguration *ecstaskset.NetworkConfiguration `hcl:"network_configuration,block"`
	// Scale: optional
	Scale *ecstaskset.Scale `hcl:"scale,block"`
	// ServiceRegistries: optional
	ServiceRegistries *ecstaskset.ServiceRegistries `hcl:"service_registries,block"`
	// DependsOn contains resources that EcsTaskSet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ecsTaskSetAttributes struct {
	ref terra.Reference
}

func (ets ecsTaskSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ets.ref.Append("arn"))
}

func (ets ecsTaskSetAttributes) Cluster() terra.StringValue {
	return terra.ReferenceString(ets.ref.Append("cluster"))
}

func (ets ecsTaskSetAttributes) ExternalId() terra.StringValue {
	return terra.ReferenceString(ets.ref.Append("external_id"))
}

func (ets ecsTaskSetAttributes) ForceDelete() terra.BoolValue {
	return terra.ReferenceBool(ets.ref.Append("force_delete"))
}

func (ets ecsTaskSetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ets.ref.Append("id"))
}

func (ets ecsTaskSetAttributes) LaunchType() terra.StringValue {
	return terra.ReferenceString(ets.ref.Append("launch_type"))
}

func (ets ecsTaskSetAttributes) PlatformVersion() terra.StringValue {
	return terra.ReferenceString(ets.ref.Append("platform_version"))
}

func (ets ecsTaskSetAttributes) Service() terra.StringValue {
	return terra.ReferenceString(ets.ref.Append("service"))
}

func (ets ecsTaskSetAttributes) StabilityStatus() terra.StringValue {
	return terra.ReferenceString(ets.ref.Append("stability_status"))
}

func (ets ecsTaskSetAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ets.ref.Append("status"))
}

func (ets ecsTaskSetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ets.ref.Append("tags"))
}

func (ets ecsTaskSetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ets.ref.Append("tags_all"))
}

func (ets ecsTaskSetAttributes) TaskDefinition() terra.StringValue {
	return terra.ReferenceString(ets.ref.Append("task_definition"))
}

func (ets ecsTaskSetAttributes) TaskSetId() terra.StringValue {
	return terra.ReferenceString(ets.ref.Append("task_set_id"))
}

func (ets ecsTaskSetAttributes) WaitUntilStable() terra.BoolValue {
	return terra.ReferenceBool(ets.ref.Append("wait_until_stable"))
}

func (ets ecsTaskSetAttributes) WaitUntilStableTimeout() terra.StringValue {
	return terra.ReferenceString(ets.ref.Append("wait_until_stable_timeout"))
}

func (ets ecsTaskSetAttributes) CapacityProviderStrategy() terra.SetValue[ecstaskset.CapacityProviderStrategyAttributes] {
	return terra.ReferenceSet[ecstaskset.CapacityProviderStrategyAttributes](ets.ref.Append("capacity_provider_strategy"))
}

func (ets ecsTaskSetAttributes) LoadBalancer() terra.SetValue[ecstaskset.LoadBalancerAttributes] {
	return terra.ReferenceSet[ecstaskset.LoadBalancerAttributes](ets.ref.Append("load_balancer"))
}

func (ets ecsTaskSetAttributes) NetworkConfiguration() terra.ListValue[ecstaskset.NetworkConfigurationAttributes] {
	return terra.ReferenceList[ecstaskset.NetworkConfigurationAttributes](ets.ref.Append("network_configuration"))
}

func (ets ecsTaskSetAttributes) Scale() terra.ListValue[ecstaskset.ScaleAttributes] {
	return terra.ReferenceList[ecstaskset.ScaleAttributes](ets.ref.Append("scale"))
}

func (ets ecsTaskSetAttributes) ServiceRegistries() terra.ListValue[ecstaskset.ServiceRegistriesAttributes] {
	return terra.ReferenceList[ecstaskset.ServiceRegistriesAttributes](ets.ref.Append("service_registries"))
}

type ecsTaskSetState struct {
	Arn                      string                                     `json:"arn"`
	Cluster                  string                                     `json:"cluster"`
	ExternalId               string                                     `json:"external_id"`
	ForceDelete              bool                                       `json:"force_delete"`
	Id                       string                                     `json:"id"`
	LaunchType               string                                     `json:"launch_type"`
	PlatformVersion          string                                     `json:"platform_version"`
	Service                  string                                     `json:"service"`
	StabilityStatus          string                                     `json:"stability_status"`
	Status                   string                                     `json:"status"`
	Tags                     map[string]string                          `json:"tags"`
	TagsAll                  map[string]string                          `json:"tags_all"`
	TaskDefinition           string                                     `json:"task_definition"`
	TaskSetId                string                                     `json:"task_set_id"`
	WaitUntilStable          bool                                       `json:"wait_until_stable"`
	WaitUntilStableTimeout   string                                     `json:"wait_until_stable_timeout"`
	CapacityProviderStrategy []ecstaskset.CapacityProviderStrategyState `json:"capacity_provider_strategy"`
	LoadBalancer             []ecstaskset.LoadBalancerState             `json:"load_balancer"`
	NetworkConfiguration     []ecstaskset.NetworkConfigurationState     `json:"network_configuration"`
	Scale                    []ecstaskset.ScaleState                    `json:"scale"`
	ServiceRegistries        []ecstaskset.ServiceRegistriesState        `json:"service_registries"`
}
