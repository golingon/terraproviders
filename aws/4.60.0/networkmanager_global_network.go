// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkmanagerglobalnetwork "github.com/golingon/terraproviders/aws/4.60.0/networkmanagerglobalnetwork"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkmanagerGlobalNetwork(name string, args NetworkmanagerGlobalNetworkArgs) *NetworkmanagerGlobalNetwork {
	return &NetworkmanagerGlobalNetwork{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkmanagerGlobalNetwork)(nil)

type NetworkmanagerGlobalNetwork struct {
	Name  string
	Args  NetworkmanagerGlobalNetworkArgs
	state *networkmanagerGlobalNetworkState
}

func (ngn *NetworkmanagerGlobalNetwork) Type() string {
	return "aws_networkmanager_global_network"
}

func (ngn *NetworkmanagerGlobalNetwork) LocalName() string {
	return ngn.Name
}

func (ngn *NetworkmanagerGlobalNetwork) Configuration() interface{} {
	return ngn.Args
}

func (ngn *NetworkmanagerGlobalNetwork) Attributes() networkmanagerGlobalNetworkAttributes {
	return networkmanagerGlobalNetworkAttributes{ref: terra.ReferenceResource(ngn)}
}

func (ngn *NetworkmanagerGlobalNetwork) ImportState(av io.Reader) error {
	ngn.state = &networkmanagerGlobalNetworkState{}
	if err := json.NewDecoder(av).Decode(ngn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ngn.Type(), ngn.LocalName(), err)
	}
	return nil
}

func (ngn *NetworkmanagerGlobalNetwork) State() (*networkmanagerGlobalNetworkState, bool) {
	return ngn.state, ngn.state != nil
}

func (ngn *NetworkmanagerGlobalNetwork) StateMust() *networkmanagerGlobalNetworkState {
	if ngn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ngn.Type(), ngn.LocalName()))
	}
	return ngn.state
}

func (ngn *NetworkmanagerGlobalNetwork) DependOn() terra.Reference {
	return terra.ReferenceResource(ngn)
}

type NetworkmanagerGlobalNetworkArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *networkmanagerglobalnetwork.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkmanagerGlobalNetwork depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkmanagerGlobalNetworkAttributes struct {
	ref terra.Reference
}

func (ngn networkmanagerGlobalNetworkAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ngn.ref.Append("arn"))
}

func (ngn networkmanagerGlobalNetworkAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ngn.ref.Append("description"))
}

func (ngn networkmanagerGlobalNetworkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ngn.ref.Append("id"))
}

func (ngn networkmanagerGlobalNetworkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ngn.ref.Append("tags"))
}

func (ngn networkmanagerGlobalNetworkAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ngn.ref.Append("tags_all"))
}

func (ngn networkmanagerGlobalNetworkAttributes) Timeouts() networkmanagerglobalnetwork.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagerglobalnetwork.TimeoutsAttributes](ngn.ref.Append("timeouts"))
}

type networkmanagerGlobalNetworkState struct {
	Arn         string                                     `json:"arn"`
	Description string                                     `json:"description"`
	Id          string                                     `json:"id"`
	Tags        map[string]string                          `json:"tags"`
	TagsAll     map[string]string                          `json:"tags_all"`
	Timeouts    *networkmanagerglobalnetwork.TimeoutsState `json:"timeouts"`
}
