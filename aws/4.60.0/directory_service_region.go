// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	directoryserviceregion "github.com/golingon/terraproviders/aws/4.60.0/directoryserviceregion"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDirectoryServiceRegion(name string, args DirectoryServiceRegionArgs) *DirectoryServiceRegion {
	return &DirectoryServiceRegion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DirectoryServiceRegion)(nil)

type DirectoryServiceRegion struct {
	Name  string
	Args  DirectoryServiceRegionArgs
	state *directoryServiceRegionState
}

func (dsr *DirectoryServiceRegion) Type() string {
	return "aws_directory_service_region"
}

func (dsr *DirectoryServiceRegion) LocalName() string {
	return dsr.Name
}

func (dsr *DirectoryServiceRegion) Configuration() interface{} {
	return dsr.Args
}

func (dsr *DirectoryServiceRegion) Attributes() directoryServiceRegionAttributes {
	return directoryServiceRegionAttributes{ref: terra.ReferenceResource(dsr)}
}

func (dsr *DirectoryServiceRegion) ImportState(av io.Reader) error {
	dsr.state = &directoryServiceRegionState{}
	if err := json.NewDecoder(av).Decode(dsr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dsr.Type(), dsr.LocalName(), err)
	}
	return nil
}

func (dsr *DirectoryServiceRegion) State() (*directoryServiceRegionState, bool) {
	return dsr.state, dsr.state != nil
}

func (dsr *DirectoryServiceRegion) StateMust() *directoryServiceRegionState {
	if dsr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dsr.Type(), dsr.LocalName()))
	}
	return dsr.state
}

func (dsr *DirectoryServiceRegion) DependOn() terra.Reference {
	return terra.ReferenceResource(dsr)
}

type DirectoryServiceRegionArgs struct {
	// DesiredNumberOfDomainControllers: number, optional
	DesiredNumberOfDomainControllers terra.NumberValue `hcl:"desired_number_of_domain_controllers,attr"`
	// DirectoryId: string, required
	DirectoryId terra.StringValue `hcl:"directory_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RegionName: string, required
	RegionName terra.StringValue `hcl:"region_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *directoryserviceregion.Timeouts `hcl:"timeouts,block"`
	// VpcSettings: required
	VpcSettings *directoryserviceregion.VpcSettings `hcl:"vpc_settings,block" validate:"required"`
	// DependsOn contains resources that DirectoryServiceRegion depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type directoryServiceRegionAttributes struct {
	ref terra.Reference
}

func (dsr directoryServiceRegionAttributes) DesiredNumberOfDomainControllers() terra.NumberValue {
	return terra.ReferenceNumber(dsr.ref.Append("desired_number_of_domain_controllers"))
}

func (dsr directoryServiceRegionAttributes) DirectoryId() terra.StringValue {
	return terra.ReferenceString(dsr.ref.Append("directory_id"))
}

func (dsr directoryServiceRegionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dsr.ref.Append("id"))
}

func (dsr directoryServiceRegionAttributes) RegionName() terra.StringValue {
	return terra.ReferenceString(dsr.ref.Append("region_name"))
}

func (dsr directoryServiceRegionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dsr.ref.Append("tags"))
}

func (dsr directoryServiceRegionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dsr.ref.Append("tags_all"))
}

func (dsr directoryServiceRegionAttributes) Timeouts() directoryserviceregion.TimeoutsAttributes {
	return terra.ReferenceSingle[directoryserviceregion.TimeoutsAttributes](dsr.ref.Append("timeouts"))
}

func (dsr directoryServiceRegionAttributes) VpcSettings() terra.ListValue[directoryserviceregion.VpcSettingsAttributes] {
	return terra.ReferenceList[directoryserviceregion.VpcSettingsAttributes](dsr.ref.Append("vpc_settings"))
}

type directoryServiceRegionState struct {
	DesiredNumberOfDomainControllers float64                                   `json:"desired_number_of_domain_controllers"`
	DirectoryId                      string                                    `json:"directory_id"`
	Id                               string                                    `json:"id"`
	RegionName                       string                                    `json:"region_name"`
	Tags                             map[string]string                         `json:"tags"`
	TagsAll                          map[string]string                         `json:"tags_all"`
	Timeouts                         *directoryserviceregion.TimeoutsState     `json:"timeouts"`
	VpcSettings                      []directoryserviceregion.VpcSettingsState `json:"vpc_settings"`
}
