// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package appmeshvirtualrouter

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Spec struct {
	// Listener: min=1
	Listener []Listener `hcl:"listener,block" validate:"min=1"`
}

type Listener struct {
	// PortMapping: required
	PortMapping *PortMapping `hcl:"port_mapping,block" validate:"required"`
}

type PortMapping struct {
	// Port: number, required
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) Listener() terra.ListValue[ListenerAttributes] {
	return terra.ReferenceAsList[ListenerAttributes](s.ref.Append("listener"))
}

type ListenerAttributes struct {
	ref terra.Reference
}

func (l ListenerAttributes) InternalRef() terra.Reference {
	return l.ref
}

func (l ListenerAttributes) InternalWithRef(ref terra.Reference) ListenerAttributes {
	return ListenerAttributes{ref: ref}
}

func (l ListenerAttributes) InternalTokens() hclwrite.Tokens {
	return l.ref.InternalTokens()
}

func (l ListenerAttributes) PortMapping() terra.ListValue[PortMappingAttributes] {
	return terra.ReferenceAsList[PortMappingAttributes](l.ref.Append("port_mapping"))
}

type PortMappingAttributes struct {
	ref terra.Reference
}

func (pm PortMappingAttributes) InternalRef() terra.Reference {
	return pm.ref
}

func (pm PortMappingAttributes) InternalWithRef(ref terra.Reference) PortMappingAttributes {
	return PortMappingAttributes{ref: ref}
}

func (pm PortMappingAttributes) InternalTokens() hclwrite.Tokens {
	return pm.ref.InternalTokens()
}

func (pm PortMappingAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(pm.ref.Append("port"))
}

func (pm PortMappingAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(pm.ref.Append("protocol"))
}

type SpecState struct {
	Listener []ListenerState `json:"listener"`
}

type ListenerState struct {
	PortMapping []PortMappingState `json:"port_mapping"`
}

type PortMappingState struct {
	Port     float64 `json:"port"`
	Protocol string  `json:"protocol"`
}
