// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLightsailDiskAttachment(name string, args LightsailDiskAttachmentArgs) *LightsailDiskAttachment {
	return &LightsailDiskAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LightsailDiskAttachment)(nil)

type LightsailDiskAttachment struct {
	Name  string
	Args  LightsailDiskAttachmentArgs
	state *lightsailDiskAttachmentState
}

func (lda *LightsailDiskAttachment) Type() string {
	return "aws_lightsail_disk_attachment"
}

func (lda *LightsailDiskAttachment) LocalName() string {
	return lda.Name
}

func (lda *LightsailDiskAttachment) Configuration() interface{} {
	return lda.Args
}

func (lda *LightsailDiskAttachment) Attributes() lightsailDiskAttachmentAttributes {
	return lightsailDiskAttachmentAttributes{ref: terra.ReferenceResource(lda)}
}

func (lda *LightsailDiskAttachment) ImportState(av io.Reader) error {
	lda.state = &lightsailDiskAttachmentState{}
	if err := json.NewDecoder(av).Decode(lda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lda.Type(), lda.LocalName(), err)
	}
	return nil
}

func (lda *LightsailDiskAttachment) State() (*lightsailDiskAttachmentState, bool) {
	return lda.state, lda.state != nil
}

func (lda *LightsailDiskAttachment) StateMust() *lightsailDiskAttachmentState {
	if lda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lda.Type(), lda.LocalName()))
	}
	return lda.state
}

func (lda *LightsailDiskAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(lda)
}

type LightsailDiskAttachmentArgs struct {
	// DiskName: string, required
	DiskName terra.StringValue `hcl:"disk_name,attr" validate:"required"`
	// DiskPath: string, required
	DiskPath terra.StringValue `hcl:"disk_path,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceName: string, required
	InstanceName terra.StringValue `hcl:"instance_name,attr" validate:"required"`
	// DependsOn contains resources that LightsailDiskAttachment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lightsailDiskAttachmentAttributes struct {
	ref terra.Reference
}

func (lda lightsailDiskAttachmentAttributes) DiskName() terra.StringValue {
	return terra.ReferenceString(lda.ref.Append("disk_name"))
}

func (lda lightsailDiskAttachmentAttributes) DiskPath() terra.StringValue {
	return terra.ReferenceString(lda.ref.Append("disk_path"))
}

func (lda lightsailDiskAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lda.ref.Append("id"))
}

func (lda lightsailDiskAttachmentAttributes) InstanceName() terra.StringValue {
	return terra.ReferenceString(lda.ref.Append("instance_name"))
}

type lightsailDiskAttachmentState struct {
	DiskName     string `json:"disk_name"`
	DiskPath     string `json:"disk_path"`
	Id           string `json:"id"`
	InstanceName string `json:"instance_name"`
}
