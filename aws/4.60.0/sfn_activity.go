// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSfnActivity(name string, args SfnActivityArgs) *SfnActivity {
	return &SfnActivity{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SfnActivity)(nil)

type SfnActivity struct {
	Name  string
	Args  SfnActivityArgs
	state *sfnActivityState
}

func (sa *SfnActivity) Type() string {
	return "aws_sfn_activity"
}

func (sa *SfnActivity) LocalName() string {
	return sa.Name
}

func (sa *SfnActivity) Configuration() interface{} {
	return sa.Args
}

func (sa *SfnActivity) Attributes() sfnActivityAttributes {
	return sfnActivityAttributes{ref: terra.ReferenceResource(sa)}
}

func (sa *SfnActivity) ImportState(av io.Reader) error {
	sa.state = &sfnActivityState{}
	if err := json.NewDecoder(av).Decode(sa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sa.Type(), sa.LocalName(), err)
	}
	return nil
}

func (sa *SfnActivity) State() (*sfnActivityState, bool) {
	return sa.state, sa.state != nil
}

func (sa *SfnActivity) StateMust() *sfnActivityState {
	if sa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sa.Type(), sa.LocalName()))
	}
	return sa.state
}

func (sa *SfnActivity) DependOn() terra.Reference {
	return terra.ReferenceResource(sa)
}

type SfnActivityArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that SfnActivity depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sfnActivityAttributes struct {
	ref terra.Reference
}

func (sa sfnActivityAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("creation_date"))
}

func (sa sfnActivityAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("id"))
}

func (sa sfnActivityAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("name"))
}

func (sa sfnActivityAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sa.ref.Append("tags"))
}

func (sa sfnActivityAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sa.ref.Append("tags_all"))
}

type sfnActivityState struct {
	CreationDate string            `json:"creation_date"`
	Id           string            `json:"id"`
	Name         string            `json:"name"`
	Tags         map[string]string `json:"tags"`
	TagsAll      map[string]string `json:"tags_all"`
}
