// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	elasticbeanstalkapplication "github.com/golingon/terraproviders/aws/4.60.0/elasticbeanstalkapplication"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewElasticBeanstalkApplication(name string, args ElasticBeanstalkApplicationArgs) *ElasticBeanstalkApplication {
	return &ElasticBeanstalkApplication{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElasticBeanstalkApplication)(nil)

type ElasticBeanstalkApplication struct {
	Name  string
	Args  ElasticBeanstalkApplicationArgs
	state *elasticBeanstalkApplicationState
}

func (eba *ElasticBeanstalkApplication) Type() string {
	return "aws_elastic_beanstalk_application"
}

func (eba *ElasticBeanstalkApplication) LocalName() string {
	return eba.Name
}

func (eba *ElasticBeanstalkApplication) Configuration() interface{} {
	return eba.Args
}

func (eba *ElasticBeanstalkApplication) Attributes() elasticBeanstalkApplicationAttributes {
	return elasticBeanstalkApplicationAttributes{ref: terra.ReferenceResource(eba)}
}

func (eba *ElasticBeanstalkApplication) ImportState(av io.Reader) error {
	eba.state = &elasticBeanstalkApplicationState{}
	if err := json.NewDecoder(av).Decode(eba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", eba.Type(), eba.LocalName(), err)
	}
	return nil
}

func (eba *ElasticBeanstalkApplication) State() (*elasticBeanstalkApplicationState, bool) {
	return eba.state, eba.state != nil
}

func (eba *ElasticBeanstalkApplication) StateMust() *elasticBeanstalkApplicationState {
	if eba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", eba.Type(), eba.LocalName()))
	}
	return eba.state
}

func (eba *ElasticBeanstalkApplication) DependOn() terra.Reference {
	return terra.ReferenceResource(eba)
}

type ElasticBeanstalkApplicationArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// AppversionLifecycle: optional
	AppversionLifecycle *elasticbeanstalkapplication.AppversionLifecycle `hcl:"appversion_lifecycle,block"`
	// DependsOn contains resources that ElasticBeanstalkApplication depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type elasticBeanstalkApplicationAttributes struct {
	ref terra.Reference
}

func (eba elasticBeanstalkApplicationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(eba.ref.Append("arn"))
}

func (eba elasticBeanstalkApplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(eba.ref.Append("description"))
}

func (eba elasticBeanstalkApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(eba.ref.Append("id"))
}

func (eba elasticBeanstalkApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(eba.ref.Append("name"))
}

func (eba elasticBeanstalkApplicationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](eba.ref.Append("tags"))
}

func (eba elasticBeanstalkApplicationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](eba.ref.Append("tags_all"))
}

func (eba elasticBeanstalkApplicationAttributes) AppversionLifecycle() terra.ListValue[elasticbeanstalkapplication.AppversionLifecycleAttributes] {
	return terra.ReferenceList[elasticbeanstalkapplication.AppversionLifecycleAttributes](eba.ref.Append("appversion_lifecycle"))
}

type elasticBeanstalkApplicationState struct {
	Arn                 string                                                 `json:"arn"`
	Description         string                                                 `json:"description"`
	Id                  string                                                 `json:"id"`
	Name                string                                                 `json:"name"`
	Tags                map[string]string                                      `json:"tags"`
	TagsAll             map[string]string                                      `json:"tags_all"`
	AppversionLifecycle []elasticbeanstalkapplication.AppversionLifecycleState `json:"appversion_lifecycle"`
}
