// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOrganizationsDelegatedAdministrator(name string, args OrganizationsDelegatedAdministratorArgs) *OrganizationsDelegatedAdministrator {
	return &OrganizationsDelegatedAdministrator{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OrganizationsDelegatedAdministrator)(nil)

type OrganizationsDelegatedAdministrator struct {
	Name  string
	Args  OrganizationsDelegatedAdministratorArgs
	state *organizationsDelegatedAdministratorState
}

func (oda *OrganizationsDelegatedAdministrator) Type() string {
	return "aws_organizations_delegated_administrator"
}

func (oda *OrganizationsDelegatedAdministrator) LocalName() string {
	return oda.Name
}

func (oda *OrganizationsDelegatedAdministrator) Configuration() interface{} {
	return oda.Args
}

func (oda *OrganizationsDelegatedAdministrator) Attributes() organizationsDelegatedAdministratorAttributes {
	return organizationsDelegatedAdministratorAttributes{ref: terra.ReferenceResource(oda)}
}

func (oda *OrganizationsDelegatedAdministrator) ImportState(av io.Reader) error {
	oda.state = &organizationsDelegatedAdministratorState{}
	if err := json.NewDecoder(av).Decode(oda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", oda.Type(), oda.LocalName(), err)
	}
	return nil
}

func (oda *OrganizationsDelegatedAdministrator) State() (*organizationsDelegatedAdministratorState, bool) {
	return oda.state, oda.state != nil
}

func (oda *OrganizationsDelegatedAdministrator) StateMust() *organizationsDelegatedAdministratorState {
	if oda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", oda.Type(), oda.LocalName()))
	}
	return oda.state
}

func (oda *OrganizationsDelegatedAdministrator) DependOn() terra.Reference {
	return terra.ReferenceResource(oda)
}

type OrganizationsDelegatedAdministratorArgs struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServicePrincipal: string, required
	ServicePrincipal terra.StringValue `hcl:"service_principal,attr" validate:"required"`
	// DependsOn contains resources that OrganizationsDelegatedAdministrator depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type organizationsDelegatedAdministratorAttributes struct {
	ref terra.Reference
}

func (oda organizationsDelegatedAdministratorAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(oda.ref.Append("account_id"))
}

func (oda organizationsDelegatedAdministratorAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(oda.ref.Append("arn"))
}

func (oda organizationsDelegatedAdministratorAttributes) DelegationEnabledDate() terra.StringValue {
	return terra.ReferenceString(oda.ref.Append("delegation_enabled_date"))
}

func (oda organizationsDelegatedAdministratorAttributes) Email() terra.StringValue {
	return terra.ReferenceString(oda.ref.Append("email"))
}

func (oda organizationsDelegatedAdministratorAttributes) Id() terra.StringValue {
	return terra.ReferenceString(oda.ref.Append("id"))
}

func (oda organizationsDelegatedAdministratorAttributes) JoinedMethod() terra.StringValue {
	return terra.ReferenceString(oda.ref.Append("joined_method"))
}

func (oda organizationsDelegatedAdministratorAttributes) JoinedTimestamp() terra.StringValue {
	return terra.ReferenceString(oda.ref.Append("joined_timestamp"))
}

func (oda organizationsDelegatedAdministratorAttributes) Name() terra.StringValue {
	return terra.ReferenceString(oda.ref.Append("name"))
}

func (oda organizationsDelegatedAdministratorAttributes) ServicePrincipal() terra.StringValue {
	return terra.ReferenceString(oda.ref.Append("service_principal"))
}

func (oda organizationsDelegatedAdministratorAttributes) Status() terra.StringValue {
	return terra.ReferenceString(oda.ref.Append("status"))
}

type organizationsDelegatedAdministratorState struct {
	AccountId             string `json:"account_id"`
	Arn                   string `json:"arn"`
	DelegationEnabledDate string `json:"delegation_enabled_date"`
	Email                 string `json:"email"`
	Id                    string `json:"id"`
	JoinedMethod          string `json:"joined_method"`
	JoinedTimestamp       string `json:"joined_timestamp"`
	Name                  string `json:"name"`
	ServicePrincipal      string `json:"service_principal"`
	Status                string `json:"status"`
}
