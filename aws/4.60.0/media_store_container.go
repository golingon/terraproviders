// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMediaStoreContainer(name string, args MediaStoreContainerArgs) *MediaStoreContainer {
	return &MediaStoreContainer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MediaStoreContainer)(nil)

type MediaStoreContainer struct {
	Name  string
	Args  MediaStoreContainerArgs
	state *mediaStoreContainerState
}

func (msc *MediaStoreContainer) Type() string {
	return "aws_media_store_container"
}

func (msc *MediaStoreContainer) LocalName() string {
	return msc.Name
}

func (msc *MediaStoreContainer) Configuration() interface{} {
	return msc.Args
}

func (msc *MediaStoreContainer) Attributes() mediaStoreContainerAttributes {
	return mediaStoreContainerAttributes{ref: terra.ReferenceResource(msc)}
}

func (msc *MediaStoreContainer) ImportState(av io.Reader) error {
	msc.state = &mediaStoreContainerState{}
	if err := json.NewDecoder(av).Decode(msc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", msc.Type(), msc.LocalName(), err)
	}
	return nil
}

func (msc *MediaStoreContainer) State() (*mediaStoreContainerState, bool) {
	return msc.state, msc.state != nil
}

func (msc *MediaStoreContainer) StateMust() *mediaStoreContainerState {
	if msc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", msc.Type(), msc.LocalName()))
	}
	return msc.state
}

func (msc *MediaStoreContainer) DependOn() terra.Reference {
	return terra.ReferenceResource(msc)
}

type MediaStoreContainerArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that MediaStoreContainer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mediaStoreContainerAttributes struct {
	ref terra.Reference
}

func (msc mediaStoreContainerAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(msc.ref.Append("arn"))
}

func (msc mediaStoreContainerAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(msc.ref.Append("endpoint"))
}

func (msc mediaStoreContainerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(msc.ref.Append("id"))
}

func (msc mediaStoreContainerAttributes) Name() terra.StringValue {
	return terra.ReferenceString(msc.ref.Append("name"))
}

func (msc mediaStoreContainerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](msc.ref.Append("tags"))
}

func (msc mediaStoreContainerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](msc.ref.Append("tags_all"))
}

type mediaStoreContainerState struct {
	Arn      string            `json:"arn"`
	Endpoint string            `json:"endpoint"`
	Id       string            `json:"id"`
	Name     string            `json:"name"`
	Tags     map[string]string `json:"tags"`
	TagsAll  map[string]string `json:"tags_all"`
}
