// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	apigatewaymethodsettings "github.com/golingon/terraproviders/aws/4.60.0/apigatewaymethodsettings"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiGatewayMethodSettings(name string, args ApiGatewayMethodSettingsArgs) *ApiGatewayMethodSettings {
	return &ApiGatewayMethodSettings{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayMethodSettings)(nil)

type ApiGatewayMethodSettings struct {
	Name  string
	Args  ApiGatewayMethodSettingsArgs
	state *apiGatewayMethodSettingsState
}

func (agms *ApiGatewayMethodSettings) Type() string {
	return "aws_api_gateway_method_settings"
}

func (agms *ApiGatewayMethodSettings) LocalName() string {
	return agms.Name
}

func (agms *ApiGatewayMethodSettings) Configuration() interface{} {
	return agms.Args
}

func (agms *ApiGatewayMethodSettings) Attributes() apiGatewayMethodSettingsAttributes {
	return apiGatewayMethodSettingsAttributes{ref: terra.ReferenceResource(agms)}
}

func (agms *ApiGatewayMethodSettings) ImportState(av io.Reader) error {
	agms.state = &apiGatewayMethodSettingsState{}
	if err := json.NewDecoder(av).Decode(agms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agms.Type(), agms.LocalName(), err)
	}
	return nil
}

func (agms *ApiGatewayMethodSettings) State() (*apiGatewayMethodSettingsState, bool) {
	return agms.state, agms.state != nil
}

func (agms *ApiGatewayMethodSettings) StateMust() *apiGatewayMethodSettingsState {
	if agms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agms.Type(), agms.LocalName()))
	}
	return agms.state
}

func (agms *ApiGatewayMethodSettings) DependOn() terra.Reference {
	return terra.ReferenceResource(agms)
}

type ApiGatewayMethodSettingsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MethodPath: string, required
	MethodPath terra.StringValue `hcl:"method_path,attr" validate:"required"`
	// RestApiId: string, required
	RestApiId terra.StringValue `hcl:"rest_api_id,attr" validate:"required"`
	// StageName: string, required
	StageName terra.StringValue `hcl:"stage_name,attr" validate:"required"`
	// Settings: required
	Settings *apigatewaymethodsettings.Settings `hcl:"settings,block" validate:"required"`
	// DependsOn contains resources that ApiGatewayMethodSettings depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiGatewayMethodSettingsAttributes struct {
	ref terra.Reference
}

func (agms apiGatewayMethodSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(agms.ref.Append("id"))
}

func (agms apiGatewayMethodSettingsAttributes) MethodPath() terra.StringValue {
	return terra.ReferenceString(agms.ref.Append("method_path"))
}

func (agms apiGatewayMethodSettingsAttributes) RestApiId() terra.StringValue {
	return terra.ReferenceString(agms.ref.Append("rest_api_id"))
}

func (agms apiGatewayMethodSettingsAttributes) StageName() terra.StringValue {
	return terra.ReferenceString(agms.ref.Append("stage_name"))
}

func (agms apiGatewayMethodSettingsAttributes) Settings() terra.ListValue[apigatewaymethodsettings.SettingsAttributes] {
	return terra.ReferenceList[apigatewaymethodsettings.SettingsAttributes](agms.ref.Append("settings"))
}

type apiGatewayMethodSettingsState struct {
	Id         string                                   `json:"id"`
	MethodPath string                                   `json:"method_path"`
	RestApiId  string                                   `json:"rest_api_id"`
	StageName  string                                   `json:"stage_name"`
	Settings   []apigatewaymethodsettings.SettingsState `json:"settings"`
}
