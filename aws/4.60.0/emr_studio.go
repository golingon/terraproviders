// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEmrStudio(name string, args EmrStudioArgs) *EmrStudio {
	return &EmrStudio{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EmrStudio)(nil)

type EmrStudio struct {
	Name  string
	Args  EmrStudioArgs
	state *emrStudioState
}

func (es *EmrStudio) Type() string {
	return "aws_emr_studio"
}

func (es *EmrStudio) LocalName() string {
	return es.Name
}

func (es *EmrStudio) Configuration() interface{} {
	return es.Args
}

func (es *EmrStudio) Attributes() emrStudioAttributes {
	return emrStudioAttributes{ref: terra.ReferenceResource(es)}
}

func (es *EmrStudio) ImportState(av io.Reader) error {
	es.state = &emrStudioState{}
	if err := json.NewDecoder(av).Decode(es.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", es.Type(), es.LocalName(), err)
	}
	return nil
}

func (es *EmrStudio) State() (*emrStudioState, bool) {
	return es.state, es.state != nil
}

func (es *EmrStudio) StateMust() *emrStudioState {
	if es.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", es.Type(), es.LocalName()))
	}
	return es.state
}

func (es *EmrStudio) DependOn() terra.Reference {
	return terra.ReferenceResource(es)
}

type EmrStudioArgs struct {
	// AuthMode: string, required
	AuthMode terra.StringValue `hcl:"auth_mode,attr" validate:"required"`
	// DefaultS3Location: string, required
	DefaultS3Location terra.StringValue `hcl:"default_s3_location,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EngineSecurityGroupId: string, required
	EngineSecurityGroupId terra.StringValue `hcl:"engine_security_group_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdpAuthUrl: string, optional
	IdpAuthUrl terra.StringValue `hcl:"idp_auth_url,attr"`
	// IdpRelayStateParameterName: string, optional
	IdpRelayStateParameterName terra.StringValue `hcl:"idp_relay_state_parameter_name,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServiceRole: string, required
	ServiceRole terra.StringValue `hcl:"service_role,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserRole: string, optional
	UserRole terra.StringValue `hcl:"user_role,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// WorkspaceSecurityGroupId: string, required
	WorkspaceSecurityGroupId terra.StringValue `hcl:"workspace_security_group_id,attr" validate:"required"`
	// DependsOn contains resources that EmrStudio depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type emrStudioAttributes struct {
	ref terra.Reference
}

func (es emrStudioAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("arn"))
}

func (es emrStudioAttributes) AuthMode() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("auth_mode"))
}

func (es emrStudioAttributes) DefaultS3Location() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("default_s3_location"))
}

func (es emrStudioAttributes) Description() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("description"))
}

func (es emrStudioAttributes) EngineSecurityGroupId() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("engine_security_group_id"))
}

func (es emrStudioAttributes) Id() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("id"))
}

func (es emrStudioAttributes) IdpAuthUrl() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("idp_auth_url"))
}

func (es emrStudioAttributes) IdpRelayStateParameterName() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("idp_relay_state_parameter_name"))
}

func (es emrStudioAttributes) Name() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("name"))
}

func (es emrStudioAttributes) ServiceRole() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("service_role"))
}

func (es emrStudioAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](es.ref.Append("subnet_ids"))
}

func (es emrStudioAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](es.ref.Append("tags"))
}

func (es emrStudioAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](es.ref.Append("tags_all"))
}

func (es emrStudioAttributes) Url() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("url"))
}

func (es emrStudioAttributes) UserRole() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("user_role"))
}

func (es emrStudioAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("vpc_id"))
}

func (es emrStudioAttributes) WorkspaceSecurityGroupId() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("workspace_security_group_id"))
}

type emrStudioState struct {
	Arn                        string            `json:"arn"`
	AuthMode                   string            `json:"auth_mode"`
	DefaultS3Location          string            `json:"default_s3_location"`
	Description                string            `json:"description"`
	EngineSecurityGroupId      string            `json:"engine_security_group_id"`
	Id                         string            `json:"id"`
	IdpAuthUrl                 string            `json:"idp_auth_url"`
	IdpRelayStateParameterName string            `json:"idp_relay_state_parameter_name"`
	Name                       string            `json:"name"`
	ServiceRole                string            `json:"service_role"`
	SubnetIds                  []string          `json:"subnet_ids"`
	Tags                       map[string]string `json:"tags"`
	TagsAll                    map[string]string `json:"tags_all"`
	Url                        string            `json:"url"`
	UserRole                   string            `json:"user_role"`
	VpcId                      string            `json:"vpc_id"`
	WorkspaceSecurityGroupId   string            `json:"workspace_security_group_id"`
}
