// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	configconformancepack "github.com/golingon/terraproviders/aws/4.60.0/configconformancepack"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConfigConformancePack(name string, args ConfigConformancePackArgs) *ConfigConformancePack {
	return &ConfigConformancePack{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConfigConformancePack)(nil)

type ConfigConformancePack struct {
	Name  string
	Args  ConfigConformancePackArgs
	state *configConformancePackState
}

func (ccp *ConfigConformancePack) Type() string {
	return "aws_config_conformance_pack"
}

func (ccp *ConfigConformancePack) LocalName() string {
	return ccp.Name
}

func (ccp *ConfigConformancePack) Configuration() interface{} {
	return ccp.Args
}

func (ccp *ConfigConformancePack) Attributes() configConformancePackAttributes {
	return configConformancePackAttributes{ref: terra.ReferenceResource(ccp)}
}

func (ccp *ConfigConformancePack) ImportState(av io.Reader) error {
	ccp.state = &configConformancePackState{}
	if err := json.NewDecoder(av).Decode(ccp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ccp.Type(), ccp.LocalName(), err)
	}
	return nil
}

func (ccp *ConfigConformancePack) State() (*configConformancePackState, bool) {
	return ccp.state, ccp.state != nil
}

func (ccp *ConfigConformancePack) StateMust() *configConformancePackState {
	if ccp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ccp.Type(), ccp.LocalName()))
	}
	return ccp.state
}

func (ccp *ConfigConformancePack) DependOn() terra.Reference {
	return terra.ReferenceResource(ccp)
}

type ConfigConformancePackArgs struct {
	// DeliveryS3Bucket: string, optional
	DeliveryS3Bucket terra.StringValue `hcl:"delivery_s3_bucket,attr"`
	// DeliveryS3KeyPrefix: string, optional
	DeliveryS3KeyPrefix terra.StringValue `hcl:"delivery_s3_key_prefix,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TemplateBody: string, optional
	TemplateBody terra.StringValue `hcl:"template_body,attr"`
	// TemplateS3Uri: string, optional
	TemplateS3Uri terra.StringValue `hcl:"template_s3_uri,attr"`
	// InputParameter: min=0,max=60
	InputParameter []configconformancepack.InputParameter `hcl:"input_parameter,block" validate:"min=0,max=60"`
	// DependsOn contains resources that ConfigConformancePack depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type configConformancePackAttributes struct {
	ref terra.Reference
}

func (ccp configConformancePackAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ccp.ref.Append("arn"))
}

func (ccp configConformancePackAttributes) DeliveryS3Bucket() terra.StringValue {
	return terra.ReferenceString(ccp.ref.Append("delivery_s3_bucket"))
}

func (ccp configConformancePackAttributes) DeliveryS3KeyPrefix() terra.StringValue {
	return terra.ReferenceString(ccp.ref.Append("delivery_s3_key_prefix"))
}

func (ccp configConformancePackAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ccp.ref.Append("id"))
}

func (ccp configConformancePackAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ccp.ref.Append("name"))
}

func (ccp configConformancePackAttributes) TemplateBody() terra.StringValue {
	return terra.ReferenceString(ccp.ref.Append("template_body"))
}

func (ccp configConformancePackAttributes) TemplateS3Uri() terra.StringValue {
	return terra.ReferenceString(ccp.ref.Append("template_s3_uri"))
}

func (ccp configConformancePackAttributes) InputParameter() terra.SetValue[configconformancepack.InputParameterAttributes] {
	return terra.ReferenceSet[configconformancepack.InputParameterAttributes](ccp.ref.Append("input_parameter"))
}

type configConformancePackState struct {
	Arn                 string                                      `json:"arn"`
	DeliveryS3Bucket    string                                      `json:"delivery_s3_bucket"`
	DeliveryS3KeyPrefix string                                      `json:"delivery_s3_key_prefix"`
	Id                  string                                      `json:"id"`
	Name                string                                      `json:"name"`
	TemplateBody        string                                      `json:"template_body"`
	TemplateS3Uri       string                                      `json:"template_s3_uri"`
	InputParameter      []configconformancepack.InputParameterState `json:"input_parameter"`
}
