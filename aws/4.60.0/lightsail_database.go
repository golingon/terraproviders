// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLightsailDatabase(name string, args LightsailDatabaseArgs) *LightsailDatabase {
	return &LightsailDatabase{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LightsailDatabase)(nil)

type LightsailDatabase struct {
	Name  string
	Args  LightsailDatabaseArgs
	state *lightsailDatabaseState
}

func (ld *LightsailDatabase) Type() string {
	return "aws_lightsail_database"
}

func (ld *LightsailDatabase) LocalName() string {
	return ld.Name
}

func (ld *LightsailDatabase) Configuration() interface{} {
	return ld.Args
}

func (ld *LightsailDatabase) Attributes() lightsailDatabaseAttributes {
	return lightsailDatabaseAttributes{ref: terra.ReferenceResource(ld)}
}

func (ld *LightsailDatabase) ImportState(av io.Reader) error {
	ld.state = &lightsailDatabaseState{}
	if err := json.NewDecoder(av).Decode(ld.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ld.Type(), ld.LocalName(), err)
	}
	return nil
}

func (ld *LightsailDatabase) State() (*lightsailDatabaseState, bool) {
	return ld.state, ld.state != nil
}

func (ld *LightsailDatabase) StateMust() *lightsailDatabaseState {
	if ld.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ld.Type(), ld.LocalName()))
	}
	return ld.state
}

func (ld *LightsailDatabase) DependOn() terra.Reference {
	return terra.ReferenceResource(ld)
}

type LightsailDatabaseArgs struct {
	// ApplyImmediately: bool, optional
	ApplyImmediately terra.BoolValue `hcl:"apply_immediately,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// BackupRetentionEnabled: bool, optional
	BackupRetentionEnabled terra.BoolValue `hcl:"backup_retention_enabled,attr"`
	// BlueprintId: string, required
	BlueprintId terra.StringValue `hcl:"blueprint_id,attr" validate:"required"`
	// BundleId: string, required
	BundleId terra.StringValue `hcl:"bundle_id,attr" validate:"required"`
	// FinalSnapshotName: string, optional
	FinalSnapshotName terra.StringValue `hcl:"final_snapshot_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MasterDatabaseName: string, required
	MasterDatabaseName terra.StringValue `hcl:"master_database_name,attr" validate:"required"`
	// MasterPassword: string, required
	MasterPassword terra.StringValue `hcl:"master_password,attr" validate:"required"`
	// MasterUsername: string, required
	MasterUsername terra.StringValue `hcl:"master_username,attr" validate:"required"`
	// PreferredBackupWindow: string, optional
	PreferredBackupWindow terra.StringValue `hcl:"preferred_backup_window,attr"`
	// PreferredMaintenanceWindow: string, optional
	PreferredMaintenanceWindow terra.StringValue `hcl:"preferred_maintenance_window,attr"`
	// PubliclyAccessible: bool, optional
	PubliclyAccessible terra.BoolValue `hcl:"publicly_accessible,attr"`
	// RelationalDatabaseName: string, required
	RelationalDatabaseName terra.StringValue `hcl:"relational_database_name,attr" validate:"required"`
	// SkipFinalSnapshot: bool, optional
	SkipFinalSnapshot terra.BoolValue `hcl:"skip_final_snapshot,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that LightsailDatabase depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lightsailDatabaseAttributes struct {
	ref terra.Reference
}

func (ld lightsailDatabaseAttributes) ApplyImmediately() terra.BoolValue {
	return terra.ReferenceBool(ld.ref.Append("apply_immediately"))
}

func (ld lightsailDatabaseAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("arn"))
}

func (ld lightsailDatabaseAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("availability_zone"))
}

func (ld lightsailDatabaseAttributes) BackupRetentionEnabled() terra.BoolValue {
	return terra.ReferenceBool(ld.ref.Append("backup_retention_enabled"))
}

func (ld lightsailDatabaseAttributes) BlueprintId() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("blueprint_id"))
}

func (ld lightsailDatabaseAttributes) BundleId() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("bundle_id"))
}

func (ld lightsailDatabaseAttributes) CaCertificateIdentifier() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("ca_certificate_identifier"))
}

func (ld lightsailDatabaseAttributes) CpuCount() terra.NumberValue {
	return terra.ReferenceNumber(ld.ref.Append("cpu_count"))
}

func (ld lightsailDatabaseAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("created_at"))
}

func (ld lightsailDatabaseAttributes) DiskSize() terra.NumberValue {
	return terra.ReferenceNumber(ld.ref.Append("disk_size"))
}

func (ld lightsailDatabaseAttributes) Engine() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("engine"))
}

func (ld lightsailDatabaseAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("engine_version"))
}

func (ld lightsailDatabaseAttributes) FinalSnapshotName() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("final_snapshot_name"))
}

func (ld lightsailDatabaseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("id"))
}

func (ld lightsailDatabaseAttributes) MasterDatabaseName() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("master_database_name"))
}

func (ld lightsailDatabaseAttributes) MasterEndpointAddress() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("master_endpoint_address"))
}

func (ld lightsailDatabaseAttributes) MasterEndpointPort() terra.NumberValue {
	return terra.ReferenceNumber(ld.ref.Append("master_endpoint_port"))
}

func (ld lightsailDatabaseAttributes) MasterPassword() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("master_password"))
}

func (ld lightsailDatabaseAttributes) MasterUsername() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("master_username"))
}

func (ld lightsailDatabaseAttributes) PreferredBackupWindow() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("preferred_backup_window"))
}

func (ld lightsailDatabaseAttributes) PreferredMaintenanceWindow() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("preferred_maintenance_window"))
}

func (ld lightsailDatabaseAttributes) PubliclyAccessible() terra.BoolValue {
	return terra.ReferenceBool(ld.ref.Append("publicly_accessible"))
}

func (ld lightsailDatabaseAttributes) RamSize() terra.NumberValue {
	return terra.ReferenceNumber(ld.ref.Append("ram_size"))
}

func (ld lightsailDatabaseAttributes) RelationalDatabaseName() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("relational_database_name"))
}

func (ld lightsailDatabaseAttributes) SecondaryAvailabilityZone() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("secondary_availability_zone"))
}

func (ld lightsailDatabaseAttributes) SkipFinalSnapshot() terra.BoolValue {
	return terra.ReferenceBool(ld.ref.Append("skip_final_snapshot"))
}

func (ld lightsailDatabaseAttributes) SupportCode() terra.StringValue {
	return terra.ReferenceString(ld.ref.Append("support_code"))
}

func (ld lightsailDatabaseAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ld.ref.Append("tags"))
}

func (ld lightsailDatabaseAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ld.ref.Append("tags_all"))
}

type lightsailDatabaseState struct {
	ApplyImmediately           bool              `json:"apply_immediately"`
	Arn                        string            `json:"arn"`
	AvailabilityZone           string            `json:"availability_zone"`
	BackupRetentionEnabled     bool              `json:"backup_retention_enabled"`
	BlueprintId                string            `json:"blueprint_id"`
	BundleId                   string            `json:"bundle_id"`
	CaCertificateIdentifier    string            `json:"ca_certificate_identifier"`
	CpuCount                   float64           `json:"cpu_count"`
	CreatedAt                  string            `json:"created_at"`
	DiskSize                   float64           `json:"disk_size"`
	Engine                     string            `json:"engine"`
	EngineVersion              string            `json:"engine_version"`
	FinalSnapshotName          string            `json:"final_snapshot_name"`
	Id                         string            `json:"id"`
	MasterDatabaseName         string            `json:"master_database_name"`
	MasterEndpointAddress      string            `json:"master_endpoint_address"`
	MasterEndpointPort         float64           `json:"master_endpoint_port"`
	MasterPassword             string            `json:"master_password"`
	MasterUsername             string            `json:"master_username"`
	PreferredBackupWindow      string            `json:"preferred_backup_window"`
	PreferredMaintenanceWindow string            `json:"preferred_maintenance_window"`
	PubliclyAccessible         bool              `json:"publicly_accessible"`
	RamSize                    float64           `json:"ram_size"`
	RelationalDatabaseName     string            `json:"relational_database_name"`
	SecondaryAvailabilityZone  string            `json:"secondary_availability_zone"`
	SkipFinalSnapshot          bool              `json:"skip_final_snapshot"`
	SupportCode                string            `json:"support_code"`
	Tags                       map[string]string `json:"tags"`
	TagsAll                    map[string]string `json:"tags_all"`
}
