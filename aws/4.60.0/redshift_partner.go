// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftPartner(name string, args RedshiftPartnerArgs) *RedshiftPartner {
	return &RedshiftPartner{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftPartner)(nil)

type RedshiftPartner struct {
	Name  string
	Args  RedshiftPartnerArgs
	state *redshiftPartnerState
}

func (rp *RedshiftPartner) Type() string {
	return "aws_redshift_partner"
}

func (rp *RedshiftPartner) LocalName() string {
	return rp.Name
}

func (rp *RedshiftPartner) Configuration() interface{} {
	return rp.Args
}

func (rp *RedshiftPartner) Attributes() redshiftPartnerAttributes {
	return redshiftPartnerAttributes{ref: terra.ReferenceResource(rp)}
}

func (rp *RedshiftPartner) ImportState(av io.Reader) error {
	rp.state = &redshiftPartnerState{}
	if err := json.NewDecoder(av).Decode(rp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rp.Type(), rp.LocalName(), err)
	}
	return nil
}

func (rp *RedshiftPartner) State() (*redshiftPartnerState, bool) {
	return rp.state, rp.state != nil
}

func (rp *RedshiftPartner) StateMust() *redshiftPartnerState {
	if rp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rp.Type(), rp.LocalName()))
	}
	return rp.state
}

func (rp *RedshiftPartner) DependOn() terra.Reference {
	return terra.ReferenceResource(rp)
}

type RedshiftPartnerArgs struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// DatabaseName: string, required
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PartnerName: string, required
	PartnerName terra.StringValue `hcl:"partner_name,attr" validate:"required"`
	// DependsOn contains resources that RedshiftPartner depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftPartnerAttributes struct {
	ref terra.Reference
}

func (rp redshiftPartnerAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(rp.ref.Append("account_id"))
}

func (rp redshiftPartnerAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(rp.ref.Append("cluster_identifier"))
}

func (rp redshiftPartnerAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceString(rp.ref.Append("database_name"))
}

func (rp redshiftPartnerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rp.ref.Append("id"))
}

func (rp redshiftPartnerAttributes) PartnerName() terra.StringValue {
	return terra.ReferenceString(rp.ref.Append("partner_name"))
}

func (rp redshiftPartnerAttributes) Status() terra.StringValue {
	return terra.ReferenceString(rp.ref.Append("status"))
}

func (rp redshiftPartnerAttributes) StatusMessage() terra.StringValue {
	return terra.ReferenceString(rp.ref.Append("status_message"))
}

type redshiftPartnerState struct {
	AccountId         string `json:"account_id"`
	ClusterIdentifier string `json:"cluster_identifier"`
	DatabaseName      string `json:"database_name"`
	Id                string `json:"id"`
	PartnerName       string `json:"partner_name"`
	Status            string `json:"status"`
	StatusMessage     string `json:"status_message"`
}
