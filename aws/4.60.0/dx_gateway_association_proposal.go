// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDxGatewayAssociationProposal(name string, args DxGatewayAssociationProposalArgs) *DxGatewayAssociationProposal {
	return &DxGatewayAssociationProposal{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DxGatewayAssociationProposal)(nil)

type DxGatewayAssociationProposal struct {
	Name  string
	Args  DxGatewayAssociationProposalArgs
	state *dxGatewayAssociationProposalState
}

func (dgap *DxGatewayAssociationProposal) Type() string {
	return "aws_dx_gateway_association_proposal"
}

func (dgap *DxGatewayAssociationProposal) LocalName() string {
	return dgap.Name
}

func (dgap *DxGatewayAssociationProposal) Configuration() interface{} {
	return dgap.Args
}

func (dgap *DxGatewayAssociationProposal) Attributes() dxGatewayAssociationProposalAttributes {
	return dxGatewayAssociationProposalAttributes{ref: terra.ReferenceResource(dgap)}
}

func (dgap *DxGatewayAssociationProposal) ImportState(av io.Reader) error {
	dgap.state = &dxGatewayAssociationProposalState{}
	if err := json.NewDecoder(av).Decode(dgap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dgap.Type(), dgap.LocalName(), err)
	}
	return nil
}

func (dgap *DxGatewayAssociationProposal) State() (*dxGatewayAssociationProposalState, bool) {
	return dgap.state, dgap.state != nil
}

func (dgap *DxGatewayAssociationProposal) StateMust() *dxGatewayAssociationProposalState {
	if dgap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dgap.Type(), dgap.LocalName()))
	}
	return dgap.state
}

func (dgap *DxGatewayAssociationProposal) DependOn() terra.Reference {
	return terra.ReferenceResource(dgap)
}

type DxGatewayAssociationProposalArgs struct {
	// AllowedPrefixes: set of string, optional
	AllowedPrefixes terra.SetValue[terra.StringValue] `hcl:"allowed_prefixes,attr"`
	// AssociatedGatewayId: string, required
	AssociatedGatewayId terra.StringValue `hcl:"associated_gateway_id,attr" validate:"required"`
	// DxGatewayId: string, required
	DxGatewayId terra.StringValue `hcl:"dx_gateway_id,attr" validate:"required"`
	// DxGatewayOwnerAccountId: string, required
	DxGatewayOwnerAccountId terra.StringValue `hcl:"dx_gateway_owner_account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DependsOn contains resources that DxGatewayAssociationProposal depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dxGatewayAssociationProposalAttributes struct {
	ref terra.Reference
}

func (dgap dxGatewayAssociationProposalAttributes) AllowedPrefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dgap.ref.Append("allowed_prefixes"))
}

func (dgap dxGatewayAssociationProposalAttributes) AssociatedGatewayId() terra.StringValue {
	return terra.ReferenceString(dgap.ref.Append("associated_gateway_id"))
}

func (dgap dxGatewayAssociationProposalAttributes) AssociatedGatewayOwnerAccountId() terra.StringValue {
	return terra.ReferenceString(dgap.ref.Append("associated_gateway_owner_account_id"))
}

func (dgap dxGatewayAssociationProposalAttributes) AssociatedGatewayType() terra.StringValue {
	return terra.ReferenceString(dgap.ref.Append("associated_gateway_type"))
}

func (dgap dxGatewayAssociationProposalAttributes) DxGatewayId() terra.StringValue {
	return terra.ReferenceString(dgap.ref.Append("dx_gateway_id"))
}

func (dgap dxGatewayAssociationProposalAttributes) DxGatewayOwnerAccountId() terra.StringValue {
	return terra.ReferenceString(dgap.ref.Append("dx_gateway_owner_account_id"))
}

func (dgap dxGatewayAssociationProposalAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dgap.ref.Append("id"))
}

type dxGatewayAssociationProposalState struct {
	AllowedPrefixes                 []string `json:"allowed_prefixes"`
	AssociatedGatewayId             string   `json:"associated_gateway_id"`
	AssociatedGatewayOwnerAccountId string   `json:"associated_gateway_owner_account_id"`
	AssociatedGatewayType           string   `json:"associated_gateway_type"`
	DxGatewayId                     string   `json:"dx_gateway_id"`
	DxGatewayOwnerAccountId         string   `json:"dx_gateway_owner_account_id"`
	Id                              string   `json:"id"`
}
