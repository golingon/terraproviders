// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	backupvault "github.com/golingon/terraproviders/aws/4.60.0/backupvault"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBackupVault(name string, args BackupVaultArgs) *BackupVault {
	return &BackupVault{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BackupVault)(nil)

type BackupVault struct {
	Name  string
	Args  BackupVaultArgs
	state *backupVaultState
}

func (bv *BackupVault) Type() string {
	return "aws_backup_vault"
}

func (bv *BackupVault) LocalName() string {
	return bv.Name
}

func (bv *BackupVault) Configuration() interface{} {
	return bv.Args
}

func (bv *BackupVault) Attributes() backupVaultAttributes {
	return backupVaultAttributes{ref: terra.ReferenceResource(bv)}
}

func (bv *BackupVault) ImportState(av io.Reader) error {
	bv.state = &backupVaultState{}
	if err := json.NewDecoder(av).Decode(bv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bv.Type(), bv.LocalName(), err)
	}
	return nil
}

func (bv *BackupVault) State() (*backupVaultState, bool) {
	return bv.state, bv.state != nil
}

func (bv *BackupVault) StateMust() *backupVaultState {
	if bv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bv.Type(), bv.LocalName()))
	}
	return bv.state
}

func (bv *BackupVault) DependOn() terra.Reference {
	return terra.ReferenceResource(bv)
}

type BackupVaultArgs struct {
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *backupvault.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BackupVault depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type backupVaultAttributes struct {
	ref terra.Reference
}

func (bv backupVaultAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(bv.ref.Append("arn"))
}

func (bv backupVaultAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceBool(bv.ref.Append("force_destroy"))
}

func (bv backupVaultAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bv.ref.Append("id"))
}

func (bv backupVaultAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceString(bv.ref.Append("kms_key_arn"))
}

func (bv backupVaultAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bv.ref.Append("name"))
}

func (bv backupVaultAttributes) RecoveryPoints() terra.NumberValue {
	return terra.ReferenceNumber(bv.ref.Append("recovery_points"))
}

func (bv backupVaultAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bv.ref.Append("tags"))
}

func (bv backupVaultAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bv.ref.Append("tags_all"))
}

func (bv backupVaultAttributes) Timeouts() backupvault.TimeoutsAttributes {
	return terra.ReferenceSingle[backupvault.TimeoutsAttributes](bv.ref.Append("timeouts"))
}

type backupVaultState struct {
	Arn            string                     `json:"arn"`
	ForceDestroy   bool                       `json:"force_destroy"`
	Id             string                     `json:"id"`
	KmsKeyArn      string                     `json:"kms_key_arn"`
	Name           string                     `json:"name"`
	RecoveryPoints float64                    `json:"recovery_points"`
	Tags           map[string]string          `json:"tags"`
	TagsAll        map[string]string          `json:"tags_all"`
	Timeouts       *backupvault.TimeoutsState `json:"timeouts"`
}
