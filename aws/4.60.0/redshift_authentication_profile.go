// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftAuthenticationProfile(name string, args RedshiftAuthenticationProfileArgs) *RedshiftAuthenticationProfile {
	return &RedshiftAuthenticationProfile{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftAuthenticationProfile)(nil)

type RedshiftAuthenticationProfile struct {
	Name  string
	Args  RedshiftAuthenticationProfileArgs
	state *redshiftAuthenticationProfileState
}

func (rap *RedshiftAuthenticationProfile) Type() string {
	return "aws_redshift_authentication_profile"
}

func (rap *RedshiftAuthenticationProfile) LocalName() string {
	return rap.Name
}

func (rap *RedshiftAuthenticationProfile) Configuration() interface{} {
	return rap.Args
}

func (rap *RedshiftAuthenticationProfile) Attributes() redshiftAuthenticationProfileAttributes {
	return redshiftAuthenticationProfileAttributes{ref: terra.ReferenceResource(rap)}
}

func (rap *RedshiftAuthenticationProfile) ImportState(av io.Reader) error {
	rap.state = &redshiftAuthenticationProfileState{}
	if err := json.NewDecoder(av).Decode(rap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rap.Type(), rap.LocalName(), err)
	}
	return nil
}

func (rap *RedshiftAuthenticationProfile) State() (*redshiftAuthenticationProfileState, bool) {
	return rap.state, rap.state != nil
}

func (rap *RedshiftAuthenticationProfile) StateMust() *redshiftAuthenticationProfileState {
	if rap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rap.Type(), rap.LocalName()))
	}
	return rap.state
}

func (rap *RedshiftAuthenticationProfile) DependOn() terra.Reference {
	return terra.ReferenceResource(rap)
}

type RedshiftAuthenticationProfileArgs struct {
	// AuthenticationProfileContent: string, required
	AuthenticationProfileContent terra.StringValue `hcl:"authentication_profile_content,attr" validate:"required"`
	// AuthenticationProfileName: string, required
	AuthenticationProfileName terra.StringValue `hcl:"authentication_profile_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DependsOn contains resources that RedshiftAuthenticationProfile depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftAuthenticationProfileAttributes struct {
	ref terra.Reference
}

func (rap redshiftAuthenticationProfileAttributes) AuthenticationProfileContent() terra.StringValue {
	return terra.ReferenceString(rap.ref.Append("authentication_profile_content"))
}

func (rap redshiftAuthenticationProfileAttributes) AuthenticationProfileName() terra.StringValue {
	return terra.ReferenceString(rap.ref.Append("authentication_profile_name"))
}

func (rap redshiftAuthenticationProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rap.ref.Append("id"))
}

type redshiftAuthenticationProfileState struct {
	AuthenticationProfileContent string `json:"authentication_profile_content"`
	AuthenticationProfileName    string `json:"authentication_profile_name"`
	Id                           string `json:"id"`
}
