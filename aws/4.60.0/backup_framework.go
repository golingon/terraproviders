// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	backupframework "github.com/golingon/terraproviders/aws/4.60.0/backupframework"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBackupFramework(name string, args BackupFrameworkArgs) *BackupFramework {
	return &BackupFramework{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BackupFramework)(nil)

type BackupFramework struct {
	Name  string
	Args  BackupFrameworkArgs
	state *backupFrameworkState
}

func (bf *BackupFramework) Type() string {
	return "aws_backup_framework"
}

func (bf *BackupFramework) LocalName() string {
	return bf.Name
}

func (bf *BackupFramework) Configuration() interface{} {
	return bf.Args
}

func (bf *BackupFramework) Attributes() backupFrameworkAttributes {
	return backupFrameworkAttributes{ref: terra.ReferenceResource(bf)}
}

func (bf *BackupFramework) ImportState(av io.Reader) error {
	bf.state = &backupFrameworkState{}
	if err := json.NewDecoder(av).Decode(bf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bf.Type(), bf.LocalName(), err)
	}
	return nil
}

func (bf *BackupFramework) State() (*backupFrameworkState, bool) {
	return bf.state, bf.state != nil
}

func (bf *BackupFramework) StateMust() *backupFrameworkState {
	if bf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bf.Type(), bf.LocalName()))
	}
	return bf.state
}

func (bf *BackupFramework) DependOn() terra.Reference {
	return terra.ReferenceResource(bf)
}

type BackupFrameworkArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Control: min=1
	Control []backupframework.Control `hcl:"control,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *backupframework.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that BackupFramework depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type backupFrameworkAttributes struct {
	ref terra.Reference
}

func (bf backupFrameworkAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(bf.ref.Append("arn"))
}

func (bf backupFrameworkAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceString(bf.ref.Append("creation_time"))
}

func (bf backupFrameworkAttributes) DeploymentStatus() terra.StringValue {
	return terra.ReferenceString(bf.ref.Append("deployment_status"))
}

func (bf backupFrameworkAttributes) Description() terra.StringValue {
	return terra.ReferenceString(bf.ref.Append("description"))
}

func (bf backupFrameworkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bf.ref.Append("id"))
}

func (bf backupFrameworkAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bf.ref.Append("name"))
}

func (bf backupFrameworkAttributes) Status() terra.StringValue {
	return terra.ReferenceString(bf.ref.Append("status"))
}

func (bf backupFrameworkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bf.ref.Append("tags"))
}

func (bf backupFrameworkAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bf.ref.Append("tags_all"))
}

func (bf backupFrameworkAttributes) Control() terra.SetValue[backupframework.ControlAttributes] {
	return terra.ReferenceSet[backupframework.ControlAttributes](bf.ref.Append("control"))
}

func (bf backupFrameworkAttributes) Timeouts() backupframework.TimeoutsAttributes {
	return terra.ReferenceSingle[backupframework.TimeoutsAttributes](bf.ref.Append("timeouts"))
}

type backupFrameworkState struct {
	Arn              string                         `json:"arn"`
	CreationTime     string                         `json:"creation_time"`
	DeploymentStatus string                         `json:"deployment_status"`
	Description      string                         `json:"description"`
	Id               string                         `json:"id"`
	Name             string                         `json:"name"`
	Status           string                         `json:"status"`
	Tags             map[string]string              `json:"tags"`
	TagsAll          map[string]string              `json:"tags_all"`
	Control          []backupframework.ControlState `json:"control"`
	Timeouts         *backupframework.TimeoutsState `json:"timeouts"`
}
