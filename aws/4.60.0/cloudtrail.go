// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudtrail "github.com/golingon/terraproviders/aws/4.60.0/cloudtrail"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudtrail(name string, args CloudtrailArgs) *Cloudtrail {
	return &Cloudtrail{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Cloudtrail)(nil)

type Cloudtrail struct {
	Name  string
	Args  CloudtrailArgs
	state *cloudtrailState
}

func (c *Cloudtrail) Type() string {
	return "aws_cloudtrail"
}

func (c *Cloudtrail) LocalName() string {
	return c.Name
}

func (c *Cloudtrail) Configuration() interface{} {
	return c.Args
}

func (c *Cloudtrail) Attributes() cloudtrailAttributes {
	return cloudtrailAttributes{ref: terra.ReferenceResource(c)}
}

func (c *Cloudtrail) ImportState(av io.Reader) error {
	c.state = &cloudtrailState{}
	if err := json.NewDecoder(av).Decode(c.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", c.Type(), c.LocalName(), err)
	}
	return nil
}

func (c *Cloudtrail) State() (*cloudtrailState, bool) {
	return c.state, c.state != nil
}

func (c *Cloudtrail) StateMust() *cloudtrailState {
	if c.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", c.Type(), c.LocalName()))
	}
	return c.state
}

func (c *Cloudtrail) DependOn() terra.Reference {
	return terra.ReferenceResource(c)
}

type CloudtrailArgs struct {
	// CloudWatchLogsGroupArn: string, optional
	CloudWatchLogsGroupArn terra.StringValue `hcl:"cloud_watch_logs_group_arn,attr"`
	// CloudWatchLogsRoleArn: string, optional
	CloudWatchLogsRoleArn terra.StringValue `hcl:"cloud_watch_logs_role_arn,attr"`
	// EnableLogFileValidation: bool, optional
	EnableLogFileValidation terra.BoolValue `hcl:"enable_log_file_validation,attr"`
	// EnableLogging: bool, optional
	EnableLogging terra.BoolValue `hcl:"enable_logging,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IncludeGlobalServiceEvents: bool, optional
	IncludeGlobalServiceEvents terra.BoolValue `hcl:"include_global_service_events,attr"`
	// IsMultiRegionTrail: bool, optional
	IsMultiRegionTrail terra.BoolValue `hcl:"is_multi_region_trail,attr"`
	// IsOrganizationTrail: bool, optional
	IsOrganizationTrail terra.BoolValue `hcl:"is_organization_trail,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// S3BucketName: string, required
	S3BucketName terra.StringValue `hcl:"s3_bucket_name,attr" validate:"required"`
	// S3KeyPrefix: string, optional
	S3KeyPrefix terra.StringValue `hcl:"s3_key_prefix,attr"`
	// SnsTopicName: string, optional
	SnsTopicName terra.StringValue `hcl:"sns_topic_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// AdvancedEventSelector: min=0
	AdvancedEventSelector []cloudtrail.AdvancedEventSelector `hcl:"advanced_event_selector,block" validate:"min=0"`
	// EventSelector: min=0,max=5
	EventSelector []cloudtrail.EventSelector `hcl:"event_selector,block" validate:"min=0,max=5"`
	// InsightSelector: min=0
	InsightSelector []cloudtrail.InsightSelector `hcl:"insight_selector,block" validate:"min=0"`
	// DependsOn contains resources that Cloudtrail depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudtrailAttributes struct {
	ref terra.Reference
}

func (c cloudtrailAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("arn"))
}

func (c cloudtrailAttributes) CloudWatchLogsGroupArn() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("cloud_watch_logs_group_arn"))
}

func (c cloudtrailAttributes) CloudWatchLogsRoleArn() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("cloud_watch_logs_role_arn"))
}

func (c cloudtrailAttributes) EnableLogFileValidation() terra.BoolValue {
	return terra.ReferenceBool(c.ref.Append("enable_log_file_validation"))
}

func (c cloudtrailAttributes) EnableLogging() terra.BoolValue {
	return terra.ReferenceBool(c.ref.Append("enable_logging"))
}

func (c cloudtrailAttributes) HomeRegion() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("home_region"))
}

func (c cloudtrailAttributes) Id() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("id"))
}

func (c cloudtrailAttributes) IncludeGlobalServiceEvents() terra.BoolValue {
	return terra.ReferenceBool(c.ref.Append("include_global_service_events"))
}

func (c cloudtrailAttributes) IsMultiRegionTrail() terra.BoolValue {
	return terra.ReferenceBool(c.ref.Append("is_multi_region_trail"))
}

func (c cloudtrailAttributes) IsOrganizationTrail() terra.BoolValue {
	return terra.ReferenceBool(c.ref.Append("is_organization_trail"))
}

func (c cloudtrailAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("kms_key_id"))
}

func (c cloudtrailAttributes) Name() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("name"))
}

func (c cloudtrailAttributes) S3BucketName() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("s3_bucket_name"))
}

func (c cloudtrailAttributes) S3KeyPrefix() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("s3_key_prefix"))
}

func (c cloudtrailAttributes) SnsTopicName() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("sns_topic_name"))
}

func (c cloudtrailAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](c.ref.Append("tags"))
}

func (c cloudtrailAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](c.ref.Append("tags_all"))
}

func (c cloudtrailAttributes) AdvancedEventSelector() terra.ListValue[cloudtrail.AdvancedEventSelectorAttributes] {
	return terra.ReferenceList[cloudtrail.AdvancedEventSelectorAttributes](c.ref.Append("advanced_event_selector"))
}

func (c cloudtrailAttributes) EventSelector() terra.ListValue[cloudtrail.EventSelectorAttributes] {
	return terra.ReferenceList[cloudtrail.EventSelectorAttributes](c.ref.Append("event_selector"))
}

func (c cloudtrailAttributes) InsightSelector() terra.ListValue[cloudtrail.InsightSelectorAttributes] {
	return terra.ReferenceList[cloudtrail.InsightSelectorAttributes](c.ref.Append("insight_selector"))
}

type cloudtrailState struct {
	Arn                        string                                  `json:"arn"`
	CloudWatchLogsGroupArn     string                                  `json:"cloud_watch_logs_group_arn"`
	CloudWatchLogsRoleArn      string                                  `json:"cloud_watch_logs_role_arn"`
	EnableLogFileValidation    bool                                    `json:"enable_log_file_validation"`
	EnableLogging              bool                                    `json:"enable_logging"`
	HomeRegion                 string                                  `json:"home_region"`
	Id                         string                                  `json:"id"`
	IncludeGlobalServiceEvents bool                                    `json:"include_global_service_events"`
	IsMultiRegionTrail         bool                                    `json:"is_multi_region_trail"`
	IsOrganizationTrail        bool                                    `json:"is_organization_trail"`
	KmsKeyId                   string                                  `json:"kms_key_id"`
	Name                       string                                  `json:"name"`
	S3BucketName               string                                  `json:"s3_bucket_name"`
	S3KeyPrefix                string                                  `json:"s3_key_prefix"`
	SnsTopicName               string                                  `json:"sns_topic_name"`
	Tags                       map[string]string                       `json:"tags"`
	TagsAll                    map[string]string                       `json:"tags_all"`
	AdvancedEventSelector      []cloudtrail.AdvancedEventSelectorState `json:"advanced_event_selector"`
	EventSelector              []cloudtrail.EventSelectorState         `json:"event_selector"`
	InsightSelector            []cloudtrail.InsightSelectorState       `json:"insight_selector"`
}
