// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lambdaalias "github.com/golingon/terraproviders/aws/4.60.0/lambdaalias"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLambdaAlias(name string, args LambdaAliasArgs) *LambdaAlias {
	return &LambdaAlias{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LambdaAlias)(nil)

type LambdaAlias struct {
	Name  string
	Args  LambdaAliasArgs
	state *lambdaAliasState
}

func (la *LambdaAlias) Type() string {
	return "aws_lambda_alias"
}

func (la *LambdaAlias) LocalName() string {
	return la.Name
}

func (la *LambdaAlias) Configuration() interface{} {
	return la.Args
}

func (la *LambdaAlias) Attributes() lambdaAliasAttributes {
	return lambdaAliasAttributes{ref: terra.ReferenceResource(la)}
}

func (la *LambdaAlias) ImportState(av io.Reader) error {
	la.state = &lambdaAliasState{}
	if err := json.NewDecoder(av).Decode(la.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", la.Type(), la.LocalName(), err)
	}
	return nil
}

func (la *LambdaAlias) State() (*lambdaAliasState, bool) {
	return la.state, la.state != nil
}

func (la *LambdaAlias) StateMust() *lambdaAliasState {
	if la.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", la.Type(), la.LocalName()))
	}
	return la.state
}

func (la *LambdaAlias) DependOn() terra.Reference {
	return terra.ReferenceResource(la)
}

type LambdaAliasArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FunctionName: string, required
	FunctionName terra.StringValue `hcl:"function_name,attr" validate:"required"`
	// FunctionVersion: string, required
	FunctionVersion terra.StringValue `hcl:"function_version,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoutingConfig: optional
	RoutingConfig *lambdaalias.RoutingConfig `hcl:"routing_config,block"`
	// DependsOn contains resources that LambdaAlias depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lambdaAliasAttributes struct {
	ref terra.Reference
}

func (la lambdaAliasAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("arn"))
}

func (la lambdaAliasAttributes) Description() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("description"))
}

func (la lambdaAliasAttributes) FunctionName() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("function_name"))
}

func (la lambdaAliasAttributes) FunctionVersion() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("function_version"))
}

func (la lambdaAliasAttributes) Id() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("id"))
}

func (la lambdaAliasAttributes) InvokeArn() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("invoke_arn"))
}

func (la lambdaAliasAttributes) Name() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("name"))
}

func (la lambdaAliasAttributes) RoutingConfig() terra.ListValue[lambdaalias.RoutingConfigAttributes] {
	return terra.ReferenceList[lambdaalias.RoutingConfigAttributes](la.ref.Append("routing_config"))
}

type lambdaAliasState struct {
	Arn             string                           `json:"arn"`
	Description     string                           `json:"description"`
	FunctionName    string                           `json:"function_name"`
	FunctionVersion string                           `json:"function_version"`
	Id              string                           `json:"id"`
	InvokeArn       string                           `json:"invoke_arn"`
	Name            string                           `json:"name"`
	RoutingConfig   []lambdaalias.RoutingConfigState `json:"routing_config"`
}
