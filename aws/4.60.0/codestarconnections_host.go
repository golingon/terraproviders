// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	codestarconnectionshost "github.com/golingon/terraproviders/aws/4.60.0/codestarconnectionshost"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCodestarconnectionsHost(name string, args CodestarconnectionsHostArgs) *CodestarconnectionsHost {
	return &CodestarconnectionsHost{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodestarconnectionsHost)(nil)

type CodestarconnectionsHost struct {
	Name  string
	Args  CodestarconnectionsHostArgs
	state *codestarconnectionsHostState
}

func (ch *CodestarconnectionsHost) Type() string {
	return "aws_codestarconnections_host"
}

func (ch *CodestarconnectionsHost) LocalName() string {
	return ch.Name
}

func (ch *CodestarconnectionsHost) Configuration() interface{} {
	return ch.Args
}

func (ch *CodestarconnectionsHost) Attributes() codestarconnectionsHostAttributes {
	return codestarconnectionsHostAttributes{ref: terra.ReferenceResource(ch)}
}

func (ch *CodestarconnectionsHost) ImportState(av io.Reader) error {
	ch.state = &codestarconnectionsHostState{}
	if err := json.NewDecoder(av).Decode(ch.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ch.Type(), ch.LocalName(), err)
	}
	return nil
}

func (ch *CodestarconnectionsHost) State() (*codestarconnectionsHostState, bool) {
	return ch.state, ch.state != nil
}

func (ch *CodestarconnectionsHost) StateMust() *codestarconnectionsHostState {
	if ch.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ch.Type(), ch.LocalName()))
	}
	return ch.state
}

func (ch *CodestarconnectionsHost) DependOn() terra.Reference {
	return terra.ReferenceResource(ch)
}

type CodestarconnectionsHostArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProviderEndpoint: string, required
	ProviderEndpoint terra.StringValue `hcl:"provider_endpoint,attr" validate:"required"`
	// ProviderType: string, required
	ProviderType terra.StringValue `hcl:"provider_type,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *codestarconnectionshost.Timeouts `hcl:"timeouts,block"`
	// VpcConfiguration: optional
	VpcConfiguration *codestarconnectionshost.VpcConfiguration `hcl:"vpc_configuration,block"`
	// DependsOn contains resources that CodestarconnectionsHost depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type codestarconnectionsHostAttributes struct {
	ref terra.Reference
}

func (ch codestarconnectionsHostAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ch.ref.Append("arn"))
}

func (ch codestarconnectionsHostAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ch.ref.Append("id"))
}

func (ch codestarconnectionsHostAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ch.ref.Append("name"))
}

func (ch codestarconnectionsHostAttributes) ProviderEndpoint() terra.StringValue {
	return terra.ReferenceString(ch.ref.Append("provider_endpoint"))
}

func (ch codestarconnectionsHostAttributes) ProviderType() terra.StringValue {
	return terra.ReferenceString(ch.ref.Append("provider_type"))
}

func (ch codestarconnectionsHostAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ch.ref.Append("status"))
}

func (ch codestarconnectionsHostAttributes) Timeouts() codestarconnectionshost.TimeoutsAttributes {
	return terra.ReferenceSingle[codestarconnectionshost.TimeoutsAttributes](ch.ref.Append("timeouts"))
}

func (ch codestarconnectionsHostAttributes) VpcConfiguration() terra.ListValue[codestarconnectionshost.VpcConfigurationAttributes] {
	return terra.ReferenceList[codestarconnectionshost.VpcConfigurationAttributes](ch.ref.Append("vpc_configuration"))
}

type codestarconnectionsHostState struct {
	Arn              string                                          `json:"arn"`
	Id               string                                          `json:"id"`
	Name             string                                          `json:"name"`
	ProviderEndpoint string                                          `json:"provider_endpoint"`
	ProviderType     string                                          `json:"provider_type"`
	Status           string                                          `json:"status"`
	Timeouts         *codestarconnectionshost.TimeoutsState          `json:"timeouts"`
	VpcConfiguration []codestarconnectionshost.VpcConfigurationState `json:"vpc_configuration"`
}
