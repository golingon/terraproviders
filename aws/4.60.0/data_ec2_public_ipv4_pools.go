// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataec2publicipv4pools "github.com/golingon/terraproviders/aws/4.60.0/dataec2publicipv4pools"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataEc2PublicIpv4Pools(name string, args DataEc2PublicIpv4PoolsArgs) *DataEc2PublicIpv4Pools {
	return &DataEc2PublicIpv4Pools{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataEc2PublicIpv4Pools)(nil)

type DataEc2PublicIpv4Pools struct {
	Name string
	Args DataEc2PublicIpv4PoolsArgs
}

func (epip *DataEc2PublicIpv4Pools) DataSource() string {
	return "aws_ec2_public_ipv4_pools"
}

func (epip *DataEc2PublicIpv4Pools) LocalName() string {
	return epip.Name
}

func (epip *DataEc2PublicIpv4Pools) Configuration() interface{} {
	return epip.Args
}

func (epip *DataEc2PublicIpv4Pools) Attributes() dataEc2PublicIpv4PoolsAttributes {
	return dataEc2PublicIpv4PoolsAttributes{ref: terra.ReferenceDataResource(epip)}
}

type DataEc2PublicIpv4PoolsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filter: min=0
	Filter []dataec2publicipv4pools.Filter `hcl:"filter,block" validate:"min=0"`
}
type dataEc2PublicIpv4PoolsAttributes struct {
	ref terra.Reference
}

func (epip dataEc2PublicIpv4PoolsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(epip.ref.Append("id"))
}

func (epip dataEc2PublicIpv4PoolsAttributes) PoolIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](epip.ref.Append("pool_ids"))
}

func (epip dataEc2PublicIpv4PoolsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](epip.ref.Append("tags"))
}

func (epip dataEc2PublicIpv4PoolsAttributes) Filter() terra.SetValue[dataec2publicipv4pools.FilterAttributes] {
	return terra.ReferenceSet[dataec2publicipv4pools.FilterAttributes](epip.ref.Append("filter"))
}
