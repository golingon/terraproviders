// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package emrserverlessapplication

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AutoStartConfiguration struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type AutoStopConfiguration struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// IdleTimeoutMinutes: number, optional
	IdleTimeoutMinutes terra.NumberValue `hcl:"idle_timeout_minutes,attr"`
}

type InitialCapacity struct {
	// InitialCapacityType: string, required
	InitialCapacityType terra.StringValue `hcl:"initial_capacity_type,attr" validate:"required"`
	// InitialCapacityConfig: optional
	InitialCapacityConfig *InitialCapacityConfig `hcl:"initial_capacity_config,block"`
}

type InitialCapacityConfig struct {
	// WorkerCount: number, required
	WorkerCount terra.NumberValue `hcl:"worker_count,attr" validate:"required"`
	// WorkerConfiguration: optional
	WorkerConfiguration *WorkerConfiguration `hcl:"worker_configuration,block"`
}

type WorkerConfiguration struct {
	// Cpu: string, required
	Cpu terra.StringValue `hcl:"cpu,attr" validate:"required"`
	// Disk: string, optional
	Disk terra.StringValue `hcl:"disk,attr"`
	// Memory: string, required
	Memory terra.StringValue `hcl:"memory,attr" validate:"required"`
}

type MaximumCapacity struct {
	// Cpu: string, required
	Cpu terra.StringValue `hcl:"cpu,attr" validate:"required"`
	// Disk: string, optional
	Disk terra.StringValue `hcl:"disk,attr"`
	// Memory: string, required
	Memory terra.StringValue `hcl:"memory,attr" validate:"required"`
}

type NetworkConfiguration struct {
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
}

type AutoStartConfigurationAttributes struct {
	ref terra.Reference
}

func (asc AutoStartConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return asc.ref, nil
}

func (asc AutoStartConfigurationAttributes) InternalWithRef(ref terra.Reference) AutoStartConfigurationAttributes {
	return AutoStartConfigurationAttributes{ref: ref}
}

func (asc AutoStartConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asc.ref.InternalTokens()
}

func (asc AutoStartConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(asc.ref.Append("enabled"))
}

type AutoStopConfigurationAttributes struct {
	ref terra.Reference
}

func (asc AutoStopConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return asc.ref, nil
}

func (asc AutoStopConfigurationAttributes) InternalWithRef(ref terra.Reference) AutoStopConfigurationAttributes {
	return AutoStopConfigurationAttributes{ref: ref}
}

func (asc AutoStopConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asc.ref.InternalTokens()
}

func (asc AutoStopConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(asc.ref.Append("enabled"))
}

func (asc AutoStopConfigurationAttributes) IdleTimeoutMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(asc.ref.Append("idle_timeout_minutes"))
}

type InitialCapacityAttributes struct {
	ref terra.Reference
}

func (ic InitialCapacityAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic InitialCapacityAttributes) InternalWithRef(ref terra.Reference) InitialCapacityAttributes {
	return InitialCapacityAttributes{ref: ref}
}

func (ic InitialCapacityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic InitialCapacityAttributes) InitialCapacityType() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("initial_capacity_type"))
}

func (ic InitialCapacityAttributes) InitialCapacityConfig() terra.ListValue[InitialCapacityConfigAttributes] {
	return terra.ReferenceAsList[InitialCapacityConfigAttributes](ic.ref.Append("initial_capacity_config"))
}

type InitialCapacityConfigAttributes struct {
	ref terra.Reference
}

func (icc InitialCapacityConfigAttributes) InternalRef() (terra.Reference, error) {
	return icc.ref, nil
}

func (icc InitialCapacityConfigAttributes) InternalWithRef(ref terra.Reference) InitialCapacityConfigAttributes {
	return InitialCapacityConfigAttributes{ref: ref}
}

func (icc InitialCapacityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return icc.ref.InternalTokens()
}

func (icc InitialCapacityConfigAttributes) WorkerCount() terra.NumberValue {
	return terra.ReferenceAsNumber(icc.ref.Append("worker_count"))
}

func (icc InitialCapacityConfigAttributes) WorkerConfiguration() terra.ListValue[WorkerConfigurationAttributes] {
	return terra.ReferenceAsList[WorkerConfigurationAttributes](icc.ref.Append("worker_configuration"))
}

type WorkerConfigurationAttributes struct {
	ref terra.Reference
}

func (wc WorkerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc WorkerConfigurationAttributes) InternalWithRef(ref terra.Reference) WorkerConfigurationAttributes {
	return WorkerConfigurationAttributes{ref: ref}
}

func (wc WorkerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc WorkerConfigurationAttributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("cpu"))
}

func (wc WorkerConfigurationAttributes) Disk() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("disk"))
}

func (wc WorkerConfigurationAttributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("memory"))
}

type MaximumCapacityAttributes struct {
	ref terra.Reference
}

func (mc MaximumCapacityAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc MaximumCapacityAttributes) InternalWithRef(ref terra.Reference) MaximumCapacityAttributes {
	return MaximumCapacityAttributes{ref: ref}
}

func (mc MaximumCapacityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc MaximumCapacityAttributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("cpu"))
}

func (mc MaximumCapacityAttributes) Disk() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("disk"))
}

func (mc MaximumCapacityAttributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("memory"))
}

type NetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc NetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc NetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) NetworkConfigurationAttributes {
	return NetworkConfigurationAttributes{ref: ref}
}

func (nc NetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc NetworkConfigurationAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("security_group_ids"))
}

func (nc NetworkConfigurationAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("subnet_ids"))
}

type AutoStartConfigurationState struct {
	Enabled bool `json:"enabled"`
}

type AutoStopConfigurationState struct {
	Enabled            bool    `json:"enabled"`
	IdleTimeoutMinutes float64 `json:"idle_timeout_minutes"`
}

type InitialCapacityState struct {
	InitialCapacityType   string                       `json:"initial_capacity_type"`
	InitialCapacityConfig []InitialCapacityConfigState `json:"initial_capacity_config"`
}

type InitialCapacityConfigState struct {
	WorkerCount         float64                    `json:"worker_count"`
	WorkerConfiguration []WorkerConfigurationState `json:"worker_configuration"`
}

type WorkerConfigurationState struct {
	Cpu    string `json:"cpu"`
	Disk   string `json:"disk"`
	Memory string `json:"memory"`
}

type MaximumCapacityState struct {
	Cpu    string `json:"cpu"`
	Disk   string `json:"disk"`
	Memory string `json:"memory"`
}

type NetworkConfigurationState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
}
