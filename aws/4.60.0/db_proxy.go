// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dbproxy "github.com/golingon/terraproviders/aws/4.60.0/dbproxy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDbProxy(name string, args DbProxyArgs) *DbProxy {
	return &DbProxy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DbProxy)(nil)

type DbProxy struct {
	Name  string
	Args  DbProxyArgs
	state *dbProxyState
}

func (dp *DbProxy) Type() string {
	return "aws_db_proxy"
}

func (dp *DbProxy) LocalName() string {
	return dp.Name
}

func (dp *DbProxy) Configuration() interface{} {
	return dp.Args
}

func (dp *DbProxy) Attributes() dbProxyAttributes {
	return dbProxyAttributes{ref: terra.ReferenceResource(dp)}
}

func (dp *DbProxy) ImportState(av io.Reader) error {
	dp.state = &dbProxyState{}
	if err := json.NewDecoder(av).Decode(dp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dp.Type(), dp.LocalName(), err)
	}
	return nil
}

func (dp *DbProxy) State() (*dbProxyState, bool) {
	return dp.state, dp.state != nil
}

func (dp *DbProxy) StateMust() *dbProxyState {
	if dp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dp.Type(), dp.LocalName()))
	}
	return dp.state
}

func (dp *DbProxy) DependOn() terra.Reference {
	return terra.ReferenceResource(dp)
}

type DbProxyArgs struct {
	// DebugLogging: bool, optional
	DebugLogging terra.BoolValue `hcl:"debug_logging,attr"`
	// EngineFamily: string, required
	EngineFamily terra.StringValue `hcl:"engine_family,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdleClientTimeout: number, optional
	IdleClientTimeout terra.NumberValue `hcl:"idle_client_timeout,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RequireTls: bool, optional
	RequireTls terra.BoolValue `hcl:"require_tls,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// VpcSubnetIds: set of string, required
	VpcSubnetIds terra.SetValue[terra.StringValue] `hcl:"vpc_subnet_ids,attr" validate:"required"`
	// Auth: min=1
	Auth []dbproxy.Auth `hcl:"auth,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *dbproxy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DbProxy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dbProxyAttributes struct {
	ref terra.Reference
}

func (dp dbProxyAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("arn"))
}

func (dp dbProxyAttributes) DebugLogging() terra.BoolValue {
	return terra.ReferenceBool(dp.ref.Append("debug_logging"))
}

func (dp dbProxyAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("endpoint"))
}

func (dp dbProxyAttributes) EngineFamily() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("engine_family"))
}

func (dp dbProxyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("id"))
}

func (dp dbProxyAttributes) IdleClientTimeout() terra.NumberValue {
	return terra.ReferenceNumber(dp.ref.Append("idle_client_timeout"))
}

func (dp dbProxyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("name"))
}

func (dp dbProxyAttributes) RequireTls() terra.BoolValue {
	return terra.ReferenceBool(dp.ref.Append("require_tls"))
}

func (dp dbProxyAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(dp.ref.Append("role_arn"))
}

func (dp dbProxyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dp.ref.Append("tags"))
}

func (dp dbProxyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dp.ref.Append("tags_all"))
}

func (dp dbProxyAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dp.ref.Append("vpc_security_group_ids"))
}

func (dp dbProxyAttributes) VpcSubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dp.ref.Append("vpc_subnet_ids"))
}

func (dp dbProxyAttributes) Auth() terra.ListValue[dbproxy.AuthAttributes] {
	return terra.ReferenceList[dbproxy.AuthAttributes](dp.ref.Append("auth"))
}

func (dp dbProxyAttributes) Timeouts() dbproxy.TimeoutsAttributes {
	return terra.ReferenceSingle[dbproxy.TimeoutsAttributes](dp.ref.Append("timeouts"))
}

type dbProxyState struct {
	Arn                 string                 `json:"arn"`
	DebugLogging        bool                   `json:"debug_logging"`
	Endpoint            string                 `json:"endpoint"`
	EngineFamily        string                 `json:"engine_family"`
	Id                  string                 `json:"id"`
	IdleClientTimeout   float64                `json:"idle_client_timeout"`
	Name                string                 `json:"name"`
	RequireTls          bool                   `json:"require_tls"`
	RoleArn             string                 `json:"role_arn"`
	Tags                map[string]string      `json:"tags"`
	TagsAll             map[string]string      `json:"tags_all"`
	VpcSecurityGroupIds []string               `json:"vpc_security_group_ids"`
	VpcSubnetIds        []string               `json:"vpc_subnet_ids"`
	Auth                []dbproxy.AuthState    `json:"auth"`
	Timeouts            *dbproxy.TimeoutsState `json:"timeouts"`
}
