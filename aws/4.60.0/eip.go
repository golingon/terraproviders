// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	eip "github.com/golingon/terraproviders/aws/4.60.0/eip"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEip(name string, args EipArgs) *Eip {
	return &Eip{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Eip)(nil)

type Eip struct {
	Name  string
	Args  EipArgs
	state *eipState
}

func (e *Eip) Type() string {
	return "aws_eip"
}

func (e *Eip) LocalName() string {
	return e.Name
}

func (e *Eip) Configuration() interface{} {
	return e.Args
}

func (e *Eip) Attributes() eipAttributes {
	return eipAttributes{ref: terra.ReferenceResource(e)}
}

func (e *Eip) ImportState(av io.Reader) error {
	e.state = &eipState{}
	if err := json.NewDecoder(av).Decode(e.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", e.Type(), e.LocalName(), err)
	}
	return nil
}

func (e *Eip) State() (*eipState, bool) {
	return e.state, e.state != nil
}

func (e *Eip) StateMust() *eipState {
	if e.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", e.Type(), e.LocalName()))
	}
	return e.state
}

func (e *Eip) DependOn() terra.Reference {
	return terra.ReferenceResource(e)
}

type EipArgs struct {
	// Address: string, optional
	Address terra.StringValue `hcl:"address,attr"`
	// AssociateWithPrivateIp: string, optional
	AssociateWithPrivateIp terra.StringValue `hcl:"associate_with_private_ip,attr"`
	// CustomerOwnedIpv4Pool: string, optional
	CustomerOwnedIpv4Pool terra.StringValue `hcl:"customer_owned_ipv4_pool,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, optional
	Instance terra.StringValue `hcl:"instance,attr"`
	// NetworkBorderGroup: string, optional
	NetworkBorderGroup terra.StringValue `hcl:"network_border_group,attr"`
	// NetworkInterface: string, optional
	NetworkInterface terra.StringValue `hcl:"network_interface,attr"`
	// PublicIpv4Pool: string, optional
	PublicIpv4Pool terra.StringValue `hcl:"public_ipv4_pool,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Vpc: bool, optional
	Vpc terra.BoolValue `hcl:"vpc,attr"`
	// Timeouts: optional
	Timeouts *eip.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Eip depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eipAttributes struct {
	ref terra.Reference
}

func (e eipAttributes) Address() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("address"))
}

func (e eipAttributes) AllocationId() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("allocation_id"))
}

func (e eipAttributes) AssociateWithPrivateIp() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("associate_with_private_ip"))
}

func (e eipAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("association_id"))
}

func (e eipAttributes) CarrierIp() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("carrier_ip"))
}

func (e eipAttributes) CustomerOwnedIp() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("customer_owned_ip"))
}

func (e eipAttributes) CustomerOwnedIpv4Pool() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("customer_owned_ipv4_pool"))
}

func (e eipAttributes) Domain() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("domain"))
}

func (e eipAttributes) Id() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("id"))
}

func (e eipAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("instance"))
}

func (e eipAttributes) NetworkBorderGroup() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("network_border_group"))
}

func (e eipAttributes) NetworkInterface() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("network_interface"))
}

func (e eipAttributes) PrivateDns() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("private_dns"))
}

func (e eipAttributes) PrivateIp() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("private_ip"))
}

func (e eipAttributes) PublicDns() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("public_dns"))
}

func (e eipAttributes) PublicIp() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("public_ip"))
}

func (e eipAttributes) PublicIpv4Pool() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("public_ipv4_pool"))
}

func (e eipAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](e.ref.Append("tags"))
}

func (e eipAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](e.ref.Append("tags_all"))
}

func (e eipAttributes) Vpc() terra.BoolValue {
	return terra.ReferenceBool(e.ref.Append("vpc"))
}

func (e eipAttributes) Timeouts() eip.TimeoutsAttributes {
	return terra.ReferenceSingle[eip.TimeoutsAttributes](e.ref.Append("timeouts"))
}

type eipState struct {
	Address                string             `json:"address"`
	AllocationId           string             `json:"allocation_id"`
	AssociateWithPrivateIp string             `json:"associate_with_private_ip"`
	AssociationId          string             `json:"association_id"`
	CarrierIp              string             `json:"carrier_ip"`
	CustomerOwnedIp        string             `json:"customer_owned_ip"`
	CustomerOwnedIpv4Pool  string             `json:"customer_owned_ipv4_pool"`
	Domain                 string             `json:"domain"`
	Id                     string             `json:"id"`
	Instance               string             `json:"instance"`
	NetworkBorderGroup     string             `json:"network_border_group"`
	NetworkInterface       string             `json:"network_interface"`
	PrivateDns             string             `json:"private_dns"`
	PrivateIp              string             `json:"private_ip"`
	PublicDns              string             `json:"public_dns"`
	PublicIp               string             `json:"public_ip"`
	PublicIpv4Pool         string             `json:"public_ipv4_pool"`
	Tags                   map[string]string  `json:"tags"`
	TagsAll                map[string]string  `json:"tags_all"`
	Vpc                    bool               `json:"vpc"`
	Timeouts               *eip.TimeoutsState `json:"timeouts"`
}
