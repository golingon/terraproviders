// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiGatewayGatewayResponse(name string, args ApiGatewayGatewayResponseArgs) *ApiGatewayGatewayResponse {
	return &ApiGatewayGatewayResponse{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayGatewayResponse)(nil)

type ApiGatewayGatewayResponse struct {
	Name  string
	Args  ApiGatewayGatewayResponseArgs
	state *apiGatewayGatewayResponseState
}

func (aggr *ApiGatewayGatewayResponse) Type() string {
	return "aws_api_gateway_gateway_response"
}

func (aggr *ApiGatewayGatewayResponse) LocalName() string {
	return aggr.Name
}

func (aggr *ApiGatewayGatewayResponse) Configuration() interface{} {
	return aggr.Args
}

func (aggr *ApiGatewayGatewayResponse) Attributes() apiGatewayGatewayResponseAttributes {
	return apiGatewayGatewayResponseAttributes{ref: terra.ReferenceResource(aggr)}
}

func (aggr *ApiGatewayGatewayResponse) ImportState(av io.Reader) error {
	aggr.state = &apiGatewayGatewayResponseState{}
	if err := json.NewDecoder(av).Decode(aggr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aggr.Type(), aggr.LocalName(), err)
	}
	return nil
}

func (aggr *ApiGatewayGatewayResponse) State() (*apiGatewayGatewayResponseState, bool) {
	return aggr.state, aggr.state != nil
}

func (aggr *ApiGatewayGatewayResponse) StateMust() *apiGatewayGatewayResponseState {
	if aggr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aggr.Type(), aggr.LocalName()))
	}
	return aggr.state
}

func (aggr *ApiGatewayGatewayResponse) DependOn() terra.Reference {
	return terra.ReferenceResource(aggr)
}

type ApiGatewayGatewayResponseArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResponseParameters: map of string, optional
	ResponseParameters terra.MapValue[terra.StringValue] `hcl:"response_parameters,attr"`
	// ResponseTemplates: map of string, optional
	ResponseTemplates terra.MapValue[terra.StringValue] `hcl:"response_templates,attr"`
	// ResponseType: string, required
	ResponseType terra.StringValue `hcl:"response_type,attr" validate:"required"`
	// RestApiId: string, required
	RestApiId terra.StringValue `hcl:"rest_api_id,attr" validate:"required"`
	// StatusCode: string, optional
	StatusCode terra.StringValue `hcl:"status_code,attr"`
	// DependsOn contains resources that ApiGatewayGatewayResponse depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiGatewayGatewayResponseAttributes struct {
	ref terra.Reference
}

func (aggr apiGatewayGatewayResponseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aggr.ref.Append("id"))
}

func (aggr apiGatewayGatewayResponseAttributes) ResponseParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aggr.ref.Append("response_parameters"))
}

func (aggr apiGatewayGatewayResponseAttributes) ResponseTemplates() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aggr.ref.Append("response_templates"))
}

func (aggr apiGatewayGatewayResponseAttributes) ResponseType() terra.StringValue {
	return terra.ReferenceString(aggr.ref.Append("response_type"))
}

func (aggr apiGatewayGatewayResponseAttributes) RestApiId() terra.StringValue {
	return terra.ReferenceString(aggr.ref.Append("rest_api_id"))
}

func (aggr apiGatewayGatewayResponseAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceString(aggr.ref.Append("status_code"))
}

type apiGatewayGatewayResponseState struct {
	Id                 string            `json:"id"`
	ResponseParameters map[string]string `json:"response_parameters"`
	ResponseTemplates  map[string]string `json:"response_templates"`
	ResponseType       string            `json:"response_type"`
	RestApiId          string            `json:"rest_api_id"`
	StatusCode         string            `json:"status_code"`
}
