// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLightsailKeyPair(name string, args LightsailKeyPairArgs) *LightsailKeyPair {
	return &LightsailKeyPair{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LightsailKeyPair)(nil)

type LightsailKeyPair struct {
	Name  string
	Args  LightsailKeyPairArgs
	state *lightsailKeyPairState
}

func (lkp *LightsailKeyPair) Type() string {
	return "aws_lightsail_key_pair"
}

func (lkp *LightsailKeyPair) LocalName() string {
	return lkp.Name
}

func (lkp *LightsailKeyPair) Configuration() interface{} {
	return lkp.Args
}

func (lkp *LightsailKeyPair) Attributes() lightsailKeyPairAttributes {
	return lightsailKeyPairAttributes{ref: terra.ReferenceResource(lkp)}
}

func (lkp *LightsailKeyPair) ImportState(av io.Reader) error {
	lkp.state = &lightsailKeyPairState{}
	if err := json.NewDecoder(av).Decode(lkp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lkp.Type(), lkp.LocalName(), err)
	}
	return nil
}

func (lkp *LightsailKeyPair) State() (*lightsailKeyPairState, bool) {
	return lkp.state, lkp.state != nil
}

func (lkp *LightsailKeyPair) StateMust() *lightsailKeyPairState {
	if lkp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lkp.Type(), lkp.LocalName()))
	}
	return lkp.state
}

func (lkp *LightsailKeyPair) DependOn() terra.Reference {
	return terra.ReferenceResource(lkp)
}

type LightsailKeyPairArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// PgpKey: string, optional
	PgpKey terra.StringValue `hcl:"pgp_key,attr"`
	// PublicKey: string, optional
	PublicKey terra.StringValue `hcl:"public_key,attr"`
	// DependsOn contains resources that LightsailKeyPair depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lightsailKeyPairAttributes struct {
	ref terra.Reference
}

func (lkp lightsailKeyPairAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(lkp.ref.Append("arn"))
}

func (lkp lightsailKeyPairAttributes) EncryptedFingerprint() terra.StringValue {
	return terra.ReferenceString(lkp.ref.Append("encrypted_fingerprint"))
}

func (lkp lightsailKeyPairAttributes) EncryptedPrivateKey() terra.StringValue {
	return terra.ReferenceString(lkp.ref.Append("encrypted_private_key"))
}

func (lkp lightsailKeyPairAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceString(lkp.ref.Append("fingerprint"))
}

func (lkp lightsailKeyPairAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lkp.ref.Append("id"))
}

func (lkp lightsailKeyPairAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lkp.ref.Append("name"))
}

func (lkp lightsailKeyPairAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(lkp.ref.Append("name_prefix"))
}

func (lkp lightsailKeyPairAttributes) PgpKey() terra.StringValue {
	return terra.ReferenceString(lkp.ref.Append("pgp_key"))
}

func (lkp lightsailKeyPairAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceString(lkp.ref.Append("private_key"))
}

func (lkp lightsailKeyPairAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceString(lkp.ref.Append("public_key"))
}

type lightsailKeyPairState struct {
	Arn                  string `json:"arn"`
	EncryptedFingerprint string `json:"encrypted_fingerprint"`
	EncryptedPrivateKey  string `json:"encrypted_private_key"`
	Fingerprint          string `json:"fingerprint"`
	Id                   string `json:"id"`
	Name                 string `json:"name"`
	NamePrefix           string `json:"name_prefix"`
	PgpKey               string `json:"pgp_key"`
	PrivateKey           string `json:"private_key"`
	PublicKey            string `json:"public_key"`
}
