// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiGatewayMethodResponse(name string, args ApiGatewayMethodResponseArgs) *ApiGatewayMethodResponse {
	return &ApiGatewayMethodResponse{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayMethodResponse)(nil)

type ApiGatewayMethodResponse struct {
	Name  string
	Args  ApiGatewayMethodResponseArgs
	state *apiGatewayMethodResponseState
}

func (agmr *ApiGatewayMethodResponse) Type() string {
	return "aws_api_gateway_method_response"
}

func (agmr *ApiGatewayMethodResponse) LocalName() string {
	return agmr.Name
}

func (agmr *ApiGatewayMethodResponse) Configuration() interface{} {
	return agmr.Args
}

func (agmr *ApiGatewayMethodResponse) Attributes() apiGatewayMethodResponseAttributes {
	return apiGatewayMethodResponseAttributes{ref: terra.ReferenceResource(agmr)}
}

func (agmr *ApiGatewayMethodResponse) ImportState(av io.Reader) error {
	agmr.state = &apiGatewayMethodResponseState{}
	if err := json.NewDecoder(av).Decode(agmr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agmr.Type(), agmr.LocalName(), err)
	}
	return nil
}

func (agmr *ApiGatewayMethodResponse) State() (*apiGatewayMethodResponseState, bool) {
	return agmr.state, agmr.state != nil
}

func (agmr *ApiGatewayMethodResponse) StateMust() *apiGatewayMethodResponseState {
	if agmr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agmr.Type(), agmr.LocalName()))
	}
	return agmr.state
}

func (agmr *ApiGatewayMethodResponse) DependOn() terra.Reference {
	return terra.ReferenceResource(agmr)
}

type ApiGatewayMethodResponseArgs struct {
	// HttpMethod: string, required
	HttpMethod terra.StringValue `hcl:"http_method,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
	// ResponseModels: map of string, optional
	ResponseModels terra.MapValue[terra.StringValue] `hcl:"response_models,attr"`
	// ResponseParameters: map of bool, optional
	ResponseParameters terra.MapValue[terra.BoolValue] `hcl:"response_parameters,attr"`
	// RestApiId: string, required
	RestApiId terra.StringValue `hcl:"rest_api_id,attr" validate:"required"`
	// StatusCode: string, required
	StatusCode terra.StringValue `hcl:"status_code,attr" validate:"required"`
	// DependsOn contains resources that ApiGatewayMethodResponse depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiGatewayMethodResponseAttributes struct {
	ref terra.Reference
}

func (agmr apiGatewayMethodResponseAttributes) HttpMethod() terra.StringValue {
	return terra.ReferenceString(agmr.ref.Append("http_method"))
}

func (agmr apiGatewayMethodResponseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(agmr.ref.Append("id"))
}

func (agmr apiGatewayMethodResponseAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(agmr.ref.Append("resource_id"))
}

func (agmr apiGatewayMethodResponseAttributes) ResponseModels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agmr.ref.Append("response_models"))
}

func (agmr apiGatewayMethodResponseAttributes) ResponseParameters() terra.MapValue[terra.BoolValue] {
	return terra.ReferenceMap[terra.BoolValue](agmr.ref.Append("response_parameters"))
}

func (agmr apiGatewayMethodResponseAttributes) RestApiId() terra.StringValue {
	return terra.ReferenceString(agmr.ref.Append("rest_api_id"))
}

func (agmr apiGatewayMethodResponseAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceString(agmr.ref.Append("status_code"))
}

type apiGatewayMethodResponseState struct {
	HttpMethod         string            `json:"http_method"`
	Id                 string            `json:"id"`
	ResourceId         string            `json:"resource_id"`
	ResponseModels     map[string]string `json:"response_models"`
	ResponseParameters map[string]bool   `json:"response_parameters"`
	RestApiId          string            `json:"rest_api_id"`
	StatusCode         string            `json:"status_code"`
}
