// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiGatewayVpcLink(name string, args ApiGatewayVpcLinkArgs) *ApiGatewayVpcLink {
	return &ApiGatewayVpcLink{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayVpcLink)(nil)

type ApiGatewayVpcLink struct {
	Name  string
	Args  ApiGatewayVpcLinkArgs
	state *apiGatewayVpcLinkState
}

func (agvl *ApiGatewayVpcLink) Type() string {
	return "aws_api_gateway_vpc_link"
}

func (agvl *ApiGatewayVpcLink) LocalName() string {
	return agvl.Name
}

func (agvl *ApiGatewayVpcLink) Configuration() interface{} {
	return agvl.Args
}

func (agvl *ApiGatewayVpcLink) Attributes() apiGatewayVpcLinkAttributes {
	return apiGatewayVpcLinkAttributes{ref: terra.ReferenceResource(agvl)}
}

func (agvl *ApiGatewayVpcLink) ImportState(av io.Reader) error {
	agvl.state = &apiGatewayVpcLinkState{}
	if err := json.NewDecoder(av).Decode(agvl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agvl.Type(), agvl.LocalName(), err)
	}
	return nil
}

func (agvl *ApiGatewayVpcLink) State() (*apiGatewayVpcLinkState, bool) {
	return agvl.state, agvl.state != nil
}

func (agvl *ApiGatewayVpcLink) StateMust() *apiGatewayVpcLinkState {
	if agvl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agvl.Type(), agvl.LocalName()))
	}
	return agvl.state
}

func (agvl *ApiGatewayVpcLink) DependOn() terra.Reference {
	return terra.ReferenceResource(agvl)
}

type ApiGatewayVpcLinkArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetArns: list of string, required
	TargetArns terra.ListValue[terra.StringValue] `hcl:"target_arns,attr" validate:"required"`
	// DependsOn contains resources that ApiGatewayVpcLink depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiGatewayVpcLinkAttributes struct {
	ref terra.Reference
}

func (agvl apiGatewayVpcLinkAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(agvl.ref.Append("arn"))
}

func (agvl apiGatewayVpcLinkAttributes) Description() terra.StringValue {
	return terra.ReferenceString(agvl.ref.Append("description"))
}

func (agvl apiGatewayVpcLinkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(agvl.ref.Append("id"))
}

func (agvl apiGatewayVpcLinkAttributes) Name() terra.StringValue {
	return terra.ReferenceString(agvl.ref.Append("name"))
}

func (agvl apiGatewayVpcLinkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agvl.ref.Append("tags"))
}

func (agvl apiGatewayVpcLinkAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agvl.ref.Append("tags_all"))
}

func (agvl apiGatewayVpcLinkAttributes) TargetArns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](agvl.ref.Append("target_arns"))
}

type apiGatewayVpcLinkState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	TargetArns  []string          `json:"target_arns"`
}
