// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ramresourceshareaccepter "github.com/golingon/terraproviders/aws/4.60.0/ramresourceshareaccepter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRamResourceShareAccepter(name string, args RamResourceShareAccepterArgs) *RamResourceShareAccepter {
	return &RamResourceShareAccepter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RamResourceShareAccepter)(nil)

type RamResourceShareAccepter struct {
	Name  string
	Args  RamResourceShareAccepterArgs
	state *ramResourceShareAccepterState
}

func (rrsa *RamResourceShareAccepter) Type() string {
	return "aws_ram_resource_share_accepter"
}

func (rrsa *RamResourceShareAccepter) LocalName() string {
	return rrsa.Name
}

func (rrsa *RamResourceShareAccepter) Configuration() interface{} {
	return rrsa.Args
}

func (rrsa *RamResourceShareAccepter) Attributes() ramResourceShareAccepterAttributes {
	return ramResourceShareAccepterAttributes{ref: terra.ReferenceResource(rrsa)}
}

func (rrsa *RamResourceShareAccepter) ImportState(av io.Reader) error {
	rrsa.state = &ramResourceShareAccepterState{}
	if err := json.NewDecoder(av).Decode(rrsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrsa.Type(), rrsa.LocalName(), err)
	}
	return nil
}

func (rrsa *RamResourceShareAccepter) State() (*ramResourceShareAccepterState, bool) {
	return rrsa.state, rrsa.state != nil
}

func (rrsa *RamResourceShareAccepter) StateMust() *ramResourceShareAccepterState {
	if rrsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrsa.Type(), rrsa.LocalName()))
	}
	return rrsa.state
}

func (rrsa *RamResourceShareAccepter) DependOn() terra.Reference {
	return terra.ReferenceResource(rrsa)
}

type RamResourceShareAccepterArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ShareArn: string, required
	ShareArn terra.StringValue `hcl:"share_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *ramresourceshareaccepter.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RamResourceShareAccepter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ramResourceShareAccepterAttributes struct {
	ref terra.Reference
}

func (rrsa ramResourceShareAccepterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rrsa.ref.Append("id"))
}

func (rrsa ramResourceShareAccepterAttributes) InvitationArn() terra.StringValue {
	return terra.ReferenceString(rrsa.ref.Append("invitation_arn"))
}

func (rrsa ramResourceShareAccepterAttributes) ReceiverAccountId() terra.StringValue {
	return terra.ReferenceString(rrsa.ref.Append("receiver_account_id"))
}

func (rrsa ramResourceShareAccepterAttributes) Resources() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](rrsa.ref.Append("resources"))
}

func (rrsa ramResourceShareAccepterAttributes) SenderAccountId() terra.StringValue {
	return terra.ReferenceString(rrsa.ref.Append("sender_account_id"))
}

func (rrsa ramResourceShareAccepterAttributes) ShareArn() terra.StringValue {
	return terra.ReferenceString(rrsa.ref.Append("share_arn"))
}

func (rrsa ramResourceShareAccepterAttributes) ShareId() terra.StringValue {
	return terra.ReferenceString(rrsa.ref.Append("share_id"))
}

func (rrsa ramResourceShareAccepterAttributes) ShareName() terra.StringValue {
	return terra.ReferenceString(rrsa.ref.Append("share_name"))
}

func (rrsa ramResourceShareAccepterAttributes) Status() terra.StringValue {
	return terra.ReferenceString(rrsa.ref.Append("status"))
}

func (rrsa ramResourceShareAccepterAttributes) Timeouts() ramresourceshareaccepter.TimeoutsAttributes {
	return terra.ReferenceSingle[ramresourceshareaccepter.TimeoutsAttributes](rrsa.ref.Append("timeouts"))
}

type ramResourceShareAccepterState struct {
	Id                string                                  `json:"id"`
	InvitationArn     string                                  `json:"invitation_arn"`
	ReceiverAccountId string                                  `json:"receiver_account_id"`
	Resources         []string                                `json:"resources"`
	SenderAccountId   string                                  `json:"sender_account_id"`
	ShareArn          string                                  `json:"share_arn"`
	ShareId           string                                  `json:"share_id"`
	ShareName         string                                  `json:"share_name"`
	Status            string                                  `json:"status"`
	Timeouts          *ramresourceshareaccepter.TimeoutsState `json:"timeouts"`
}
