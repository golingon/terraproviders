// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	autoscalingplansscalingplan "github.com/golingon/terraproviders/aws/4.60.0/autoscalingplansscalingplan"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAutoscalingplansScalingPlan(name string, args AutoscalingplansScalingPlanArgs) *AutoscalingplansScalingPlan {
	return &AutoscalingplansScalingPlan{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutoscalingplansScalingPlan)(nil)

type AutoscalingplansScalingPlan struct {
	Name  string
	Args  AutoscalingplansScalingPlanArgs
	state *autoscalingplansScalingPlanState
}

func (asp *AutoscalingplansScalingPlan) Type() string {
	return "aws_autoscalingplans_scaling_plan"
}

func (asp *AutoscalingplansScalingPlan) LocalName() string {
	return asp.Name
}

func (asp *AutoscalingplansScalingPlan) Configuration() interface{} {
	return asp.Args
}

func (asp *AutoscalingplansScalingPlan) Attributes() autoscalingplansScalingPlanAttributes {
	return autoscalingplansScalingPlanAttributes{ref: terra.ReferenceResource(asp)}
}

func (asp *AutoscalingplansScalingPlan) ImportState(av io.Reader) error {
	asp.state = &autoscalingplansScalingPlanState{}
	if err := json.NewDecoder(av).Decode(asp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asp.Type(), asp.LocalName(), err)
	}
	return nil
}

func (asp *AutoscalingplansScalingPlan) State() (*autoscalingplansScalingPlanState, bool) {
	return asp.state, asp.state != nil
}

func (asp *AutoscalingplansScalingPlan) StateMust() *autoscalingplansScalingPlanState {
	if asp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asp.Type(), asp.LocalName()))
	}
	return asp.state
}

func (asp *AutoscalingplansScalingPlan) DependOn() terra.Reference {
	return terra.ReferenceResource(asp)
}

type AutoscalingplansScalingPlanArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ApplicationSource: required
	ApplicationSource *autoscalingplansscalingplan.ApplicationSource `hcl:"application_source,block" validate:"required"`
	// ScalingInstruction: min=1
	ScalingInstruction []autoscalingplansscalingplan.ScalingInstruction `hcl:"scaling_instruction,block" validate:"min=1"`
	// DependsOn contains resources that AutoscalingplansScalingPlan depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type autoscalingplansScalingPlanAttributes struct {
	ref terra.Reference
}

func (asp autoscalingplansScalingPlanAttributes) Id() terra.StringValue {
	return terra.ReferenceString(asp.ref.Append("id"))
}

func (asp autoscalingplansScalingPlanAttributes) Name() terra.StringValue {
	return terra.ReferenceString(asp.ref.Append("name"))
}

func (asp autoscalingplansScalingPlanAttributes) ScalingPlanVersion() terra.NumberValue {
	return terra.ReferenceNumber(asp.ref.Append("scaling_plan_version"))
}

func (asp autoscalingplansScalingPlanAttributes) ApplicationSource() terra.ListValue[autoscalingplansscalingplan.ApplicationSourceAttributes] {
	return terra.ReferenceList[autoscalingplansscalingplan.ApplicationSourceAttributes](asp.ref.Append("application_source"))
}

func (asp autoscalingplansScalingPlanAttributes) ScalingInstruction() terra.SetValue[autoscalingplansscalingplan.ScalingInstructionAttributes] {
	return terra.ReferenceSet[autoscalingplansscalingplan.ScalingInstructionAttributes](asp.ref.Append("scaling_instruction"))
}

type autoscalingplansScalingPlanState struct {
	Id                 string                                                `json:"id"`
	Name               string                                                `json:"name"`
	ScalingPlanVersion float64                                               `json:"scaling_plan_version"`
	ApplicationSource  []autoscalingplansscalingplan.ApplicationSourceState  `json:"application_source"`
	ScalingInstruction []autoscalingplansscalingplan.ScalingInstructionState `json:"scaling_instruction"`
}
