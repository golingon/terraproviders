// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	connectqueue "github.com/golingon/terraproviders/aws/4.60.0/connectqueue"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConnectQueue(name string, args ConnectQueueArgs) *ConnectQueue {
	return &ConnectQueue{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConnectQueue)(nil)

type ConnectQueue struct {
	Name  string
	Args  ConnectQueueArgs
	state *connectQueueState
}

func (cq *ConnectQueue) Type() string {
	return "aws_connect_queue"
}

func (cq *ConnectQueue) LocalName() string {
	return cq.Name
}

func (cq *ConnectQueue) Configuration() interface{} {
	return cq.Args
}

func (cq *ConnectQueue) Attributes() connectQueueAttributes {
	return connectQueueAttributes{ref: terra.ReferenceResource(cq)}
}

func (cq *ConnectQueue) ImportState(av io.Reader) error {
	cq.state = &connectQueueState{}
	if err := json.NewDecoder(av).Decode(cq.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cq.Type(), cq.LocalName(), err)
	}
	return nil
}

func (cq *ConnectQueue) State() (*connectQueueState, bool) {
	return cq.state, cq.state != nil
}

func (cq *ConnectQueue) StateMust() *connectQueueState {
	if cq.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cq.Type(), cq.LocalName()))
	}
	return cq.state
}

func (cq *ConnectQueue) DependOn() terra.Reference {
	return terra.ReferenceResource(cq)
}

type ConnectQueueArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// HoursOfOperationId: string, required
	HoursOfOperationId terra.StringValue `hcl:"hours_of_operation_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// MaxContacts: number, optional
	MaxContacts terra.NumberValue `hcl:"max_contacts,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// QuickConnectIds: set of string, optional
	QuickConnectIds terra.SetValue[terra.StringValue] `hcl:"quick_connect_ids,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// OutboundCallerConfig: optional
	OutboundCallerConfig *connectqueue.OutboundCallerConfig `hcl:"outbound_caller_config,block"`
	// DependsOn contains resources that ConnectQueue depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type connectQueueAttributes struct {
	ref terra.Reference
}

func (cq connectQueueAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cq.ref.Append("arn"))
}

func (cq connectQueueAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cq.ref.Append("description"))
}

func (cq connectQueueAttributes) HoursOfOperationId() terra.StringValue {
	return terra.ReferenceString(cq.ref.Append("hours_of_operation_id"))
}

func (cq connectQueueAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cq.ref.Append("id"))
}

func (cq connectQueueAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceString(cq.ref.Append("instance_id"))
}

func (cq connectQueueAttributes) MaxContacts() terra.NumberValue {
	return terra.ReferenceNumber(cq.ref.Append("max_contacts"))
}

func (cq connectQueueAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cq.ref.Append("name"))
}

func (cq connectQueueAttributes) QueueId() terra.StringValue {
	return terra.ReferenceString(cq.ref.Append("queue_id"))
}

func (cq connectQueueAttributes) QuickConnectIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cq.ref.Append("quick_connect_ids"))
}

func (cq connectQueueAttributes) QuickConnectIdsAssociated() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cq.ref.Append("quick_connect_ids_associated"))
}

func (cq connectQueueAttributes) Status() terra.StringValue {
	return terra.ReferenceString(cq.ref.Append("status"))
}

func (cq connectQueueAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cq.ref.Append("tags"))
}

func (cq connectQueueAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cq.ref.Append("tags_all"))
}

func (cq connectQueueAttributes) OutboundCallerConfig() terra.ListValue[connectqueue.OutboundCallerConfigAttributes] {
	return terra.ReferenceList[connectqueue.OutboundCallerConfigAttributes](cq.ref.Append("outbound_caller_config"))
}

type connectQueueState struct {
	Arn                       string                                   `json:"arn"`
	Description               string                                   `json:"description"`
	HoursOfOperationId        string                                   `json:"hours_of_operation_id"`
	Id                        string                                   `json:"id"`
	InstanceId                string                                   `json:"instance_id"`
	MaxContacts               float64                                  `json:"max_contacts"`
	Name                      string                                   `json:"name"`
	QueueId                   string                                   `json:"queue_id"`
	QuickConnectIds           []string                                 `json:"quick_connect_ids"`
	QuickConnectIdsAssociated []string                                 `json:"quick_connect_ids_associated"`
	Status                    string                                   `json:"status"`
	Tags                      map[string]string                        `json:"tags"`
	TagsAll                   map[string]string                        `json:"tags_all"`
	OutboundCallerConfig      []connectqueue.OutboundCallerConfigState `json:"outbound_caller_config"`
}
