// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAuditmanagerAssessmentDelegation(name string, args AuditmanagerAssessmentDelegationArgs) *AuditmanagerAssessmentDelegation {
	return &AuditmanagerAssessmentDelegation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AuditmanagerAssessmentDelegation)(nil)

type AuditmanagerAssessmentDelegation struct {
	Name  string
	Args  AuditmanagerAssessmentDelegationArgs
	state *auditmanagerAssessmentDelegationState
}

func (aad *AuditmanagerAssessmentDelegation) Type() string {
	return "aws_auditmanager_assessment_delegation"
}

func (aad *AuditmanagerAssessmentDelegation) LocalName() string {
	return aad.Name
}

func (aad *AuditmanagerAssessmentDelegation) Configuration() interface{} {
	return aad.Args
}

func (aad *AuditmanagerAssessmentDelegation) Attributes() auditmanagerAssessmentDelegationAttributes {
	return auditmanagerAssessmentDelegationAttributes{ref: terra.ReferenceResource(aad)}
}

func (aad *AuditmanagerAssessmentDelegation) ImportState(av io.Reader) error {
	aad.state = &auditmanagerAssessmentDelegationState{}
	if err := json.NewDecoder(av).Decode(aad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aad.Type(), aad.LocalName(), err)
	}
	return nil
}

func (aad *AuditmanagerAssessmentDelegation) State() (*auditmanagerAssessmentDelegationState, bool) {
	return aad.state, aad.state != nil
}

func (aad *AuditmanagerAssessmentDelegation) StateMust() *auditmanagerAssessmentDelegationState {
	if aad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aad.Type(), aad.LocalName()))
	}
	return aad.state
}

func (aad *AuditmanagerAssessmentDelegation) DependOn() terra.Reference {
	return terra.ReferenceResource(aad)
}

type AuditmanagerAssessmentDelegationArgs struct {
	// AssessmentId: string, required
	AssessmentId terra.StringValue `hcl:"assessment_id,attr" validate:"required"`
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// ControlSetId: string, required
	ControlSetId terra.StringValue `hcl:"control_set_id,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// RoleType: string, required
	RoleType terra.StringValue `hcl:"role_type,attr" validate:"required"`
	// DependsOn contains resources that AuditmanagerAssessmentDelegation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type auditmanagerAssessmentDelegationAttributes struct {
	ref terra.Reference
}

func (aad auditmanagerAssessmentDelegationAttributes) AssessmentId() terra.StringValue {
	return terra.ReferenceString(aad.ref.Append("assessment_id"))
}

func (aad auditmanagerAssessmentDelegationAttributes) Comment() terra.StringValue {
	return terra.ReferenceString(aad.ref.Append("comment"))
}

func (aad auditmanagerAssessmentDelegationAttributes) ControlSetId() terra.StringValue {
	return terra.ReferenceString(aad.ref.Append("control_set_id"))
}

func (aad auditmanagerAssessmentDelegationAttributes) DelegationId() terra.StringValue {
	return terra.ReferenceString(aad.ref.Append("delegation_id"))
}

func (aad auditmanagerAssessmentDelegationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aad.ref.Append("id"))
}

func (aad auditmanagerAssessmentDelegationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(aad.ref.Append("role_arn"))
}

func (aad auditmanagerAssessmentDelegationAttributes) RoleType() terra.StringValue {
	return terra.ReferenceString(aad.ref.Append("role_type"))
}

func (aad auditmanagerAssessmentDelegationAttributes) Status() terra.StringValue {
	return terra.ReferenceString(aad.ref.Append("status"))
}

type auditmanagerAssessmentDelegationState struct {
	AssessmentId string `json:"assessment_id"`
	Comment      string `json:"comment"`
	ControlSetId string `json:"control_set_id"`
	DelegationId string `json:"delegation_id"`
	Id           string `json:"id"`
	RoleArn      string `json:"role_arn"`
	RoleType     string `json:"role_type"`
	Status       string `json:"status"`
}
