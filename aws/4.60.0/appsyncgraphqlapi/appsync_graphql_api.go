// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package appsyncgraphqlapi

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AdditionalAuthenticationProvider struct {
	// AuthenticationType: string, required
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr" validate:"required"`
	// AdditionalAuthenticationProviderLambdaAuthorizerConfig: optional
	LambdaAuthorizerConfig *AdditionalAuthenticationProviderLambdaAuthorizerConfig `hcl:"lambda_authorizer_config,block"`
	// AdditionalAuthenticationProviderOpenidConnectConfig: optional
	OpenidConnectConfig *AdditionalAuthenticationProviderOpenidConnectConfig `hcl:"openid_connect_config,block"`
	// AdditionalAuthenticationProviderUserPoolConfig: optional
	UserPoolConfig *AdditionalAuthenticationProviderUserPoolConfig `hcl:"user_pool_config,block"`
}

type AdditionalAuthenticationProviderLambdaAuthorizerConfig struct {
	// AuthorizerResultTtlInSeconds: number, optional
	AuthorizerResultTtlInSeconds terra.NumberValue `hcl:"authorizer_result_ttl_in_seconds,attr"`
	// AuthorizerUri: string, required
	AuthorizerUri terra.StringValue `hcl:"authorizer_uri,attr" validate:"required"`
	// IdentityValidationExpression: string, optional
	IdentityValidationExpression terra.StringValue `hcl:"identity_validation_expression,attr"`
}

type AdditionalAuthenticationProviderOpenidConnectConfig struct {
	// AuthTtl: number, optional
	AuthTtl terra.NumberValue `hcl:"auth_ttl,attr"`
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// IatTtl: number, optional
	IatTtl terra.NumberValue `hcl:"iat_ttl,attr"`
	// Issuer: string, required
	Issuer terra.StringValue `hcl:"issuer,attr" validate:"required"`
}

type AdditionalAuthenticationProviderUserPoolConfig struct {
	// AppIdClientRegex: string, optional
	AppIdClientRegex terra.StringValue `hcl:"app_id_client_regex,attr"`
	// AwsRegion: string, optional
	AwsRegion terra.StringValue `hcl:"aws_region,attr"`
	// UserPoolId: string, required
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
}

type LambdaAuthorizerConfig struct {
	// AuthorizerResultTtlInSeconds: number, optional
	AuthorizerResultTtlInSeconds terra.NumberValue `hcl:"authorizer_result_ttl_in_seconds,attr"`
	// AuthorizerUri: string, required
	AuthorizerUri terra.StringValue `hcl:"authorizer_uri,attr" validate:"required"`
	// IdentityValidationExpression: string, optional
	IdentityValidationExpression terra.StringValue `hcl:"identity_validation_expression,attr"`
}

type LogConfig struct {
	// CloudwatchLogsRoleArn: string, required
	CloudwatchLogsRoleArn terra.StringValue `hcl:"cloudwatch_logs_role_arn,attr" validate:"required"`
	// ExcludeVerboseContent: bool, optional
	ExcludeVerboseContent terra.BoolValue `hcl:"exclude_verbose_content,attr"`
	// FieldLogLevel: string, required
	FieldLogLevel terra.StringValue `hcl:"field_log_level,attr" validate:"required"`
}

type OpenidConnectConfig struct {
	// AuthTtl: number, optional
	AuthTtl terra.NumberValue `hcl:"auth_ttl,attr"`
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// IatTtl: number, optional
	IatTtl terra.NumberValue `hcl:"iat_ttl,attr"`
	// Issuer: string, required
	Issuer terra.StringValue `hcl:"issuer,attr" validate:"required"`
}

type UserPoolConfig struct {
	// AppIdClientRegex: string, optional
	AppIdClientRegex terra.StringValue `hcl:"app_id_client_regex,attr"`
	// AwsRegion: string, optional
	AwsRegion terra.StringValue `hcl:"aws_region,attr"`
	// DefaultAction: string, required
	DefaultAction terra.StringValue `hcl:"default_action,attr" validate:"required"`
	// UserPoolId: string, required
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
}

type AdditionalAuthenticationProviderAttributes struct {
	ref terra.Reference
}

func (aap AdditionalAuthenticationProviderAttributes) InternalRef() (terra.Reference, error) {
	return aap.ref, nil
}

func (aap AdditionalAuthenticationProviderAttributes) InternalWithRef(ref terra.Reference) AdditionalAuthenticationProviderAttributes {
	return AdditionalAuthenticationProviderAttributes{ref: ref}
}

func (aap AdditionalAuthenticationProviderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aap.ref.InternalTokens()
}

func (aap AdditionalAuthenticationProviderAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("authentication_type"))
}

func (aap AdditionalAuthenticationProviderAttributes) LambdaAuthorizerConfig() terra.ListValue[AdditionalAuthenticationProviderLambdaAuthorizerConfigAttributes] {
	return terra.ReferenceAsList[AdditionalAuthenticationProviderLambdaAuthorizerConfigAttributes](aap.ref.Append("lambda_authorizer_config"))
}

func (aap AdditionalAuthenticationProviderAttributes) OpenidConnectConfig() terra.ListValue[AdditionalAuthenticationProviderOpenidConnectConfigAttributes] {
	return terra.ReferenceAsList[AdditionalAuthenticationProviderOpenidConnectConfigAttributes](aap.ref.Append("openid_connect_config"))
}

func (aap AdditionalAuthenticationProviderAttributes) UserPoolConfig() terra.ListValue[AdditionalAuthenticationProviderUserPoolConfigAttributes] {
	return terra.ReferenceAsList[AdditionalAuthenticationProviderUserPoolConfigAttributes](aap.ref.Append("user_pool_config"))
}

type AdditionalAuthenticationProviderLambdaAuthorizerConfigAttributes struct {
	ref terra.Reference
}

func (lac AdditionalAuthenticationProviderLambdaAuthorizerConfigAttributes) InternalRef() (terra.Reference, error) {
	return lac.ref, nil
}

func (lac AdditionalAuthenticationProviderLambdaAuthorizerConfigAttributes) InternalWithRef(ref terra.Reference) AdditionalAuthenticationProviderLambdaAuthorizerConfigAttributes {
	return AdditionalAuthenticationProviderLambdaAuthorizerConfigAttributes{ref: ref}
}

func (lac AdditionalAuthenticationProviderLambdaAuthorizerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lac.ref.InternalTokens()
}

func (lac AdditionalAuthenticationProviderLambdaAuthorizerConfigAttributes) AuthorizerResultTtlInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lac.ref.Append("authorizer_result_ttl_in_seconds"))
}

func (lac AdditionalAuthenticationProviderLambdaAuthorizerConfigAttributes) AuthorizerUri() terra.StringValue {
	return terra.ReferenceAsString(lac.ref.Append("authorizer_uri"))
}

func (lac AdditionalAuthenticationProviderLambdaAuthorizerConfigAttributes) IdentityValidationExpression() terra.StringValue {
	return terra.ReferenceAsString(lac.ref.Append("identity_validation_expression"))
}

type AdditionalAuthenticationProviderOpenidConnectConfigAttributes struct {
	ref terra.Reference
}

func (occ AdditionalAuthenticationProviderOpenidConnectConfigAttributes) InternalRef() (terra.Reference, error) {
	return occ.ref, nil
}

func (occ AdditionalAuthenticationProviderOpenidConnectConfigAttributes) InternalWithRef(ref terra.Reference) AdditionalAuthenticationProviderOpenidConnectConfigAttributes {
	return AdditionalAuthenticationProviderOpenidConnectConfigAttributes{ref: ref}
}

func (occ AdditionalAuthenticationProviderOpenidConnectConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return occ.ref.InternalTokens()
}

func (occ AdditionalAuthenticationProviderOpenidConnectConfigAttributes) AuthTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(occ.ref.Append("auth_ttl"))
}

func (occ AdditionalAuthenticationProviderOpenidConnectConfigAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(occ.ref.Append("client_id"))
}

func (occ AdditionalAuthenticationProviderOpenidConnectConfigAttributes) IatTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(occ.ref.Append("iat_ttl"))
}

func (occ AdditionalAuthenticationProviderOpenidConnectConfigAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(occ.ref.Append("issuer"))
}

type AdditionalAuthenticationProviderUserPoolConfigAttributes struct {
	ref terra.Reference
}

func (upc AdditionalAuthenticationProviderUserPoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return upc.ref, nil
}

func (upc AdditionalAuthenticationProviderUserPoolConfigAttributes) InternalWithRef(ref terra.Reference) AdditionalAuthenticationProviderUserPoolConfigAttributes {
	return AdditionalAuthenticationProviderUserPoolConfigAttributes{ref: ref}
}

func (upc AdditionalAuthenticationProviderUserPoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return upc.ref.InternalTokens()
}

func (upc AdditionalAuthenticationProviderUserPoolConfigAttributes) AppIdClientRegex() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("app_id_client_regex"))
}

func (upc AdditionalAuthenticationProviderUserPoolConfigAttributes) AwsRegion() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("aws_region"))
}

func (upc AdditionalAuthenticationProviderUserPoolConfigAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("user_pool_id"))
}

type LambdaAuthorizerConfigAttributes struct {
	ref terra.Reference
}

func (lac LambdaAuthorizerConfigAttributes) InternalRef() (terra.Reference, error) {
	return lac.ref, nil
}

func (lac LambdaAuthorizerConfigAttributes) InternalWithRef(ref terra.Reference) LambdaAuthorizerConfigAttributes {
	return LambdaAuthorizerConfigAttributes{ref: ref}
}

func (lac LambdaAuthorizerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lac.ref.InternalTokens()
}

func (lac LambdaAuthorizerConfigAttributes) AuthorizerResultTtlInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lac.ref.Append("authorizer_result_ttl_in_seconds"))
}

func (lac LambdaAuthorizerConfigAttributes) AuthorizerUri() terra.StringValue {
	return terra.ReferenceAsString(lac.ref.Append("authorizer_uri"))
}

func (lac LambdaAuthorizerConfigAttributes) IdentityValidationExpression() terra.StringValue {
	return terra.ReferenceAsString(lac.ref.Append("identity_validation_expression"))
}

type LogConfigAttributes struct {
	ref terra.Reference
}

func (lc LogConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc LogConfigAttributes) InternalWithRef(ref terra.Reference) LogConfigAttributes {
	return LogConfigAttributes{ref: ref}
}

func (lc LogConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc LogConfigAttributes) CloudwatchLogsRoleArn() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("cloudwatch_logs_role_arn"))
}

func (lc LogConfigAttributes) ExcludeVerboseContent() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("exclude_verbose_content"))
}

func (lc LogConfigAttributes) FieldLogLevel() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("field_log_level"))
}

type OpenidConnectConfigAttributes struct {
	ref terra.Reference
}

func (occ OpenidConnectConfigAttributes) InternalRef() (terra.Reference, error) {
	return occ.ref, nil
}

func (occ OpenidConnectConfigAttributes) InternalWithRef(ref terra.Reference) OpenidConnectConfigAttributes {
	return OpenidConnectConfigAttributes{ref: ref}
}

func (occ OpenidConnectConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return occ.ref.InternalTokens()
}

func (occ OpenidConnectConfigAttributes) AuthTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(occ.ref.Append("auth_ttl"))
}

func (occ OpenidConnectConfigAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(occ.ref.Append("client_id"))
}

func (occ OpenidConnectConfigAttributes) IatTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(occ.ref.Append("iat_ttl"))
}

func (occ OpenidConnectConfigAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(occ.ref.Append("issuer"))
}

type UserPoolConfigAttributes struct {
	ref terra.Reference
}

func (upc UserPoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return upc.ref, nil
}

func (upc UserPoolConfigAttributes) InternalWithRef(ref terra.Reference) UserPoolConfigAttributes {
	return UserPoolConfigAttributes{ref: ref}
}

func (upc UserPoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return upc.ref.InternalTokens()
}

func (upc UserPoolConfigAttributes) AppIdClientRegex() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("app_id_client_regex"))
}

func (upc UserPoolConfigAttributes) AwsRegion() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("aws_region"))
}

func (upc UserPoolConfigAttributes) DefaultAction() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("default_action"))
}

func (upc UserPoolConfigAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("user_pool_id"))
}

type AdditionalAuthenticationProviderState struct {
	AuthenticationType     string                                                        `json:"authentication_type"`
	LambdaAuthorizerConfig []AdditionalAuthenticationProviderLambdaAuthorizerConfigState `json:"lambda_authorizer_config"`
	OpenidConnectConfig    []AdditionalAuthenticationProviderOpenidConnectConfigState    `json:"openid_connect_config"`
	UserPoolConfig         []AdditionalAuthenticationProviderUserPoolConfigState         `json:"user_pool_config"`
}

type AdditionalAuthenticationProviderLambdaAuthorizerConfigState struct {
	AuthorizerResultTtlInSeconds float64 `json:"authorizer_result_ttl_in_seconds"`
	AuthorizerUri                string  `json:"authorizer_uri"`
	IdentityValidationExpression string  `json:"identity_validation_expression"`
}

type AdditionalAuthenticationProviderOpenidConnectConfigState struct {
	AuthTtl  float64 `json:"auth_ttl"`
	ClientId string  `json:"client_id"`
	IatTtl   float64 `json:"iat_ttl"`
	Issuer   string  `json:"issuer"`
}

type AdditionalAuthenticationProviderUserPoolConfigState struct {
	AppIdClientRegex string `json:"app_id_client_regex"`
	AwsRegion        string `json:"aws_region"`
	UserPoolId       string `json:"user_pool_id"`
}

type LambdaAuthorizerConfigState struct {
	AuthorizerResultTtlInSeconds float64 `json:"authorizer_result_ttl_in_seconds"`
	AuthorizerUri                string  `json:"authorizer_uri"`
	IdentityValidationExpression string  `json:"identity_validation_expression"`
}

type LogConfigState struct {
	CloudwatchLogsRoleArn string `json:"cloudwatch_logs_role_arn"`
	ExcludeVerboseContent bool   `json:"exclude_verbose_content"`
	FieldLogLevel         string `json:"field_log_level"`
}

type OpenidConnectConfigState struct {
	AuthTtl  float64 `json:"auth_ttl"`
	ClientId string  `json:"client_id"`
	IatTtl   float64 `json:"iat_ttl"`
	Issuer   string  `json:"issuer"`
}

type UserPoolConfigState struct {
	AppIdClientRegex string `json:"app_id_client_regex"`
	AwsRegion        string `json:"aws_region"`
	DefaultAction    string `json:"default_action"`
	UserPoolId       string `json:"user_pool_id"`
}
