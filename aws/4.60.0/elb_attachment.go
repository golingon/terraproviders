// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewElbAttachment(name string, args ElbAttachmentArgs) *ElbAttachment {
	return &ElbAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElbAttachment)(nil)

type ElbAttachment struct {
	Name  string
	Args  ElbAttachmentArgs
	state *elbAttachmentState
}

func (ea *ElbAttachment) Type() string {
	return "aws_elb_attachment"
}

func (ea *ElbAttachment) LocalName() string {
	return ea.Name
}

func (ea *ElbAttachment) Configuration() interface{} {
	return ea.Args
}

func (ea *ElbAttachment) Attributes() elbAttachmentAttributes {
	return elbAttachmentAttributes{ref: terra.ReferenceResource(ea)}
}

func (ea *ElbAttachment) ImportState(av io.Reader) error {
	ea.state = &elbAttachmentState{}
	if err := json.NewDecoder(av).Decode(ea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ea.Type(), ea.LocalName(), err)
	}
	return nil
}

func (ea *ElbAttachment) State() (*elbAttachmentState, bool) {
	return ea.state, ea.state != nil
}

func (ea *ElbAttachment) StateMust() *elbAttachmentState {
	if ea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ea.Type(), ea.LocalName()))
	}
	return ea.state
}

func (ea *ElbAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(ea)
}

type ElbAttachmentArgs struct {
	// Elb: string, required
	Elb terra.StringValue `hcl:"elb,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Instance: string, required
	Instance terra.StringValue `hcl:"instance,attr" validate:"required"`
	// DependsOn contains resources that ElbAttachment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type elbAttachmentAttributes struct {
	ref terra.Reference
}

func (ea elbAttachmentAttributes) Elb() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("elb"))
}

func (ea elbAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("id"))
}

func (ea elbAttachmentAttributes) Instance() terra.StringValue {
	return terra.ReferenceString(ea.ref.Append("instance"))
}

type elbAttachmentState struct {
	Elb      string `json:"elb"`
	Id       string `json:"id"`
	Instance string `json:"instance"`
}
