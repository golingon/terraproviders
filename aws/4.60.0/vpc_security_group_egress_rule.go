// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVpcSecurityGroupEgressRule(name string, args VpcSecurityGroupEgressRuleArgs) *VpcSecurityGroupEgressRule {
	return &VpcSecurityGroupEgressRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpcSecurityGroupEgressRule)(nil)

type VpcSecurityGroupEgressRule struct {
	Name  string
	Args  VpcSecurityGroupEgressRuleArgs
	state *vpcSecurityGroupEgressRuleState
}

func (vsger *VpcSecurityGroupEgressRule) Type() string {
	return "aws_vpc_security_group_egress_rule"
}

func (vsger *VpcSecurityGroupEgressRule) LocalName() string {
	return vsger.Name
}

func (vsger *VpcSecurityGroupEgressRule) Configuration() interface{} {
	return vsger.Args
}

func (vsger *VpcSecurityGroupEgressRule) Attributes() vpcSecurityGroupEgressRuleAttributes {
	return vpcSecurityGroupEgressRuleAttributes{ref: terra.ReferenceResource(vsger)}
}

func (vsger *VpcSecurityGroupEgressRule) ImportState(av io.Reader) error {
	vsger.state = &vpcSecurityGroupEgressRuleState{}
	if err := json.NewDecoder(av).Decode(vsger.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vsger.Type(), vsger.LocalName(), err)
	}
	return nil
}

func (vsger *VpcSecurityGroupEgressRule) State() (*vpcSecurityGroupEgressRuleState, bool) {
	return vsger.state, vsger.state != nil
}

func (vsger *VpcSecurityGroupEgressRule) StateMust() *vpcSecurityGroupEgressRuleState {
	if vsger.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vsger.Type(), vsger.LocalName()))
	}
	return vsger.state
}

func (vsger *VpcSecurityGroupEgressRule) DependOn() terra.Reference {
	return terra.ReferenceResource(vsger)
}

type VpcSecurityGroupEgressRuleArgs struct {
	// CidrIpv4: string, optional
	CidrIpv4 terra.StringValue `hcl:"cidr_ipv4,attr"`
	// CidrIpv6: string, optional
	CidrIpv6 terra.StringValue `hcl:"cidr_ipv6,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FromPort: number, optional
	FromPort terra.NumberValue `hcl:"from_port,attr"`
	// IpProtocol: string, required
	IpProtocol terra.StringValue `hcl:"ip_protocol,attr" validate:"required"`
	// PrefixListId: string, optional
	PrefixListId terra.StringValue `hcl:"prefix_list_id,attr"`
	// ReferencedSecurityGroupId: string, optional
	ReferencedSecurityGroupId terra.StringValue `hcl:"referenced_security_group_id,attr"`
	// SecurityGroupId: string, optional
	SecurityGroupId terra.StringValue `hcl:"security_group_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ToPort: number, optional
	ToPort terra.NumberValue `hcl:"to_port,attr"`
	// DependsOn contains resources that VpcSecurityGroupEgressRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vpcSecurityGroupEgressRuleAttributes struct {
	ref terra.Reference
}

func (vsger vpcSecurityGroupEgressRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(vsger.ref.Append("arn"))
}

func (vsger vpcSecurityGroupEgressRuleAttributes) CidrIpv4() terra.StringValue {
	return terra.ReferenceString(vsger.ref.Append("cidr_ipv4"))
}

func (vsger vpcSecurityGroupEgressRuleAttributes) CidrIpv6() terra.StringValue {
	return terra.ReferenceString(vsger.ref.Append("cidr_ipv6"))
}

func (vsger vpcSecurityGroupEgressRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceString(vsger.ref.Append("description"))
}

func (vsger vpcSecurityGroupEgressRuleAttributes) FromPort() terra.NumberValue {
	return terra.ReferenceNumber(vsger.ref.Append("from_port"))
}

func (vsger vpcSecurityGroupEgressRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vsger.ref.Append("id"))
}

func (vsger vpcSecurityGroupEgressRuleAttributes) IpProtocol() terra.StringValue {
	return terra.ReferenceString(vsger.ref.Append("ip_protocol"))
}

func (vsger vpcSecurityGroupEgressRuleAttributes) PrefixListId() terra.StringValue {
	return terra.ReferenceString(vsger.ref.Append("prefix_list_id"))
}

func (vsger vpcSecurityGroupEgressRuleAttributes) ReferencedSecurityGroupId() terra.StringValue {
	return terra.ReferenceString(vsger.ref.Append("referenced_security_group_id"))
}

func (vsger vpcSecurityGroupEgressRuleAttributes) SecurityGroupId() terra.StringValue {
	return terra.ReferenceString(vsger.ref.Append("security_group_id"))
}

func (vsger vpcSecurityGroupEgressRuleAttributes) SecurityGroupRuleId() terra.StringValue {
	return terra.ReferenceString(vsger.ref.Append("security_group_rule_id"))
}

func (vsger vpcSecurityGroupEgressRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vsger.ref.Append("tags"))
}

func (vsger vpcSecurityGroupEgressRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vsger.ref.Append("tags_all"))
}

func (vsger vpcSecurityGroupEgressRuleAttributes) ToPort() terra.NumberValue {
	return terra.ReferenceNumber(vsger.ref.Append("to_port"))
}

type vpcSecurityGroupEgressRuleState struct {
	Arn                       string            `json:"arn"`
	CidrIpv4                  string            `json:"cidr_ipv4"`
	CidrIpv6                  string            `json:"cidr_ipv6"`
	Description               string            `json:"description"`
	FromPort                  float64           `json:"from_port"`
	Id                        string            `json:"id"`
	IpProtocol                string            `json:"ip_protocol"`
	PrefixListId              string            `json:"prefix_list_id"`
	ReferencedSecurityGroupId string            `json:"referenced_security_group_id"`
	SecurityGroupId           string            `json:"security_group_id"`
	SecurityGroupRuleId       string            `json:"security_group_rule_id"`
	Tags                      map[string]string `json:"tags"`
	TagsAll                   map[string]string `json:"tags_all"`
	ToPort                    float64           `json:"to_port"`
}
