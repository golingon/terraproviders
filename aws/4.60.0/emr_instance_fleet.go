// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	emrinstancefleet "github.com/golingon/terraproviders/aws/4.60.0/emrinstancefleet"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEmrInstanceFleet(name string, args EmrInstanceFleetArgs) *EmrInstanceFleet {
	return &EmrInstanceFleet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EmrInstanceFleet)(nil)

type EmrInstanceFleet struct {
	Name  string
	Args  EmrInstanceFleetArgs
	state *emrInstanceFleetState
}

func (eif *EmrInstanceFleet) Type() string {
	return "aws_emr_instance_fleet"
}

func (eif *EmrInstanceFleet) LocalName() string {
	return eif.Name
}

func (eif *EmrInstanceFleet) Configuration() interface{} {
	return eif.Args
}

func (eif *EmrInstanceFleet) Attributes() emrInstanceFleetAttributes {
	return emrInstanceFleetAttributes{ref: terra.ReferenceResource(eif)}
}

func (eif *EmrInstanceFleet) ImportState(av io.Reader) error {
	eif.state = &emrInstanceFleetState{}
	if err := json.NewDecoder(av).Decode(eif.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", eif.Type(), eif.LocalName(), err)
	}
	return nil
}

func (eif *EmrInstanceFleet) State() (*emrInstanceFleetState, bool) {
	return eif.state, eif.state != nil
}

func (eif *EmrInstanceFleet) StateMust() *emrInstanceFleetState {
	if eif.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", eif.Type(), eif.LocalName()))
	}
	return eif.state
}

func (eif *EmrInstanceFleet) DependOn() terra.Reference {
	return terra.ReferenceResource(eif)
}

type EmrInstanceFleetArgs struct {
	// ClusterId: string, required
	ClusterId terra.StringValue `hcl:"cluster_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// TargetOnDemandCapacity: number, optional
	TargetOnDemandCapacity terra.NumberValue `hcl:"target_on_demand_capacity,attr"`
	// TargetSpotCapacity: number, optional
	TargetSpotCapacity terra.NumberValue `hcl:"target_spot_capacity,attr"`
	// InstanceTypeConfigs: min=0
	InstanceTypeConfigs []emrinstancefleet.InstanceTypeConfigs `hcl:"instance_type_configs,block" validate:"min=0"`
	// LaunchSpecifications: optional
	LaunchSpecifications *emrinstancefleet.LaunchSpecifications `hcl:"launch_specifications,block"`
	// DependsOn contains resources that EmrInstanceFleet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type emrInstanceFleetAttributes struct {
	ref terra.Reference
}

func (eif emrInstanceFleetAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceString(eif.ref.Append("cluster_id"))
}

func (eif emrInstanceFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(eif.ref.Append("id"))
}

func (eif emrInstanceFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(eif.ref.Append("name"))
}

func (eif emrInstanceFleetAttributes) ProvisionedOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceNumber(eif.ref.Append("provisioned_on_demand_capacity"))
}

func (eif emrInstanceFleetAttributes) ProvisionedSpotCapacity() terra.NumberValue {
	return terra.ReferenceNumber(eif.ref.Append("provisioned_spot_capacity"))
}

func (eif emrInstanceFleetAttributes) TargetOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceNumber(eif.ref.Append("target_on_demand_capacity"))
}

func (eif emrInstanceFleetAttributes) TargetSpotCapacity() terra.NumberValue {
	return terra.ReferenceNumber(eif.ref.Append("target_spot_capacity"))
}

func (eif emrInstanceFleetAttributes) InstanceTypeConfigs() terra.SetValue[emrinstancefleet.InstanceTypeConfigsAttributes] {
	return terra.ReferenceSet[emrinstancefleet.InstanceTypeConfigsAttributes](eif.ref.Append("instance_type_configs"))
}

func (eif emrInstanceFleetAttributes) LaunchSpecifications() terra.ListValue[emrinstancefleet.LaunchSpecificationsAttributes] {
	return terra.ReferenceList[emrinstancefleet.LaunchSpecificationsAttributes](eif.ref.Append("launch_specifications"))
}

type emrInstanceFleetState struct {
	ClusterId                   string                                       `json:"cluster_id"`
	Id                          string                                       `json:"id"`
	Name                        string                                       `json:"name"`
	ProvisionedOnDemandCapacity float64                                      `json:"provisioned_on_demand_capacity"`
	ProvisionedSpotCapacity     float64                                      `json:"provisioned_spot_capacity"`
	TargetOnDemandCapacity      float64                                      `json:"target_on_demand_capacity"`
	TargetSpotCapacity          float64                                      `json:"target_spot_capacity"`
	InstanceTypeConfigs         []emrinstancefleet.InstanceTypeConfigsState  `json:"instance_type_configs"`
	LaunchSpecifications        []emrinstancefleet.LaunchSpecificationsState `json:"launch_specifications"`
}
