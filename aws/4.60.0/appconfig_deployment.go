// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppconfigDeployment(name string, args AppconfigDeploymentArgs) *AppconfigDeployment {
	return &AppconfigDeployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppconfigDeployment)(nil)

type AppconfigDeployment struct {
	Name  string
	Args  AppconfigDeploymentArgs
	state *appconfigDeploymentState
}

func (ad *AppconfigDeployment) Type() string {
	return "aws_appconfig_deployment"
}

func (ad *AppconfigDeployment) LocalName() string {
	return ad.Name
}

func (ad *AppconfigDeployment) Configuration() interface{} {
	return ad.Args
}

func (ad *AppconfigDeployment) Attributes() appconfigDeploymentAttributes {
	return appconfigDeploymentAttributes{ref: terra.ReferenceResource(ad)}
}

func (ad *AppconfigDeployment) ImportState(av io.Reader) error {
	ad.state = &appconfigDeploymentState{}
	if err := json.NewDecoder(av).Decode(ad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ad.Type(), ad.LocalName(), err)
	}
	return nil
}

func (ad *AppconfigDeployment) State() (*appconfigDeploymentState, bool) {
	return ad.state, ad.state != nil
}

func (ad *AppconfigDeployment) StateMust() *appconfigDeploymentState {
	if ad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ad.Type(), ad.LocalName()))
	}
	return ad.state
}

func (ad *AppconfigDeployment) DependOn() terra.Reference {
	return terra.ReferenceResource(ad)
}

type AppconfigDeploymentArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// ConfigurationProfileId: string, required
	ConfigurationProfileId terra.StringValue `hcl:"configuration_profile_id,attr" validate:"required"`
	// ConfigurationVersion: string, required
	ConfigurationVersion terra.StringValue `hcl:"configuration_version,attr" validate:"required"`
	// DeploymentStrategyId: string, required
	DeploymentStrategyId terra.StringValue `hcl:"deployment_strategy_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EnvironmentId: string, required
	EnvironmentId terra.StringValue `hcl:"environment_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that AppconfigDeployment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appconfigDeploymentAttributes struct {
	ref terra.Reference
}

func (ad appconfigDeploymentAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("application_id"))
}

func (ad appconfigDeploymentAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("arn"))
}

func (ad appconfigDeploymentAttributes) ConfigurationProfileId() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("configuration_profile_id"))
}

func (ad appconfigDeploymentAttributes) ConfigurationVersion() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("configuration_version"))
}

func (ad appconfigDeploymentAttributes) DeploymentNumber() terra.NumberValue {
	return terra.ReferenceNumber(ad.ref.Append("deployment_number"))
}

func (ad appconfigDeploymentAttributes) DeploymentStrategyId() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("deployment_strategy_id"))
}

func (ad appconfigDeploymentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("description"))
}

func (ad appconfigDeploymentAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("environment_id"))
}

func (ad appconfigDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("id"))
}

func (ad appconfigDeploymentAttributes) State() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("state"))
}

func (ad appconfigDeploymentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ad.ref.Append("tags"))
}

func (ad appconfigDeploymentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ad.ref.Append("tags_all"))
}

type appconfigDeploymentState struct {
	ApplicationId          string            `json:"application_id"`
	Arn                    string            `json:"arn"`
	ConfigurationProfileId string            `json:"configuration_profile_id"`
	ConfigurationVersion   string            `json:"configuration_version"`
	DeploymentNumber       float64           `json:"deployment_number"`
	DeploymentStrategyId   string            `json:"deployment_strategy_id"`
	Description            string            `json:"description"`
	EnvironmentId          string            `json:"environment_id"`
	Id                     string            `json:"id"`
	State                  string            `json:"state"`
	Tags                   map[string]string `json:"tags"`
	TagsAll                map[string]string `json:"tags_all"`
}
