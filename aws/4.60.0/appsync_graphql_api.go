// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	appsyncgraphqlapi "github.com/golingon/terraproviders/aws/4.60.0/appsyncgraphqlapi"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppsyncGraphqlApi(name string, args AppsyncGraphqlApiArgs) *AppsyncGraphqlApi {
	return &AppsyncGraphqlApi{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppsyncGraphqlApi)(nil)

type AppsyncGraphqlApi struct {
	Name  string
	Args  AppsyncGraphqlApiArgs
	state *appsyncGraphqlApiState
}

func (aga *AppsyncGraphqlApi) Type() string {
	return "aws_appsync_graphql_api"
}

func (aga *AppsyncGraphqlApi) LocalName() string {
	return aga.Name
}

func (aga *AppsyncGraphqlApi) Configuration() interface{} {
	return aga.Args
}

func (aga *AppsyncGraphqlApi) Attributes() appsyncGraphqlApiAttributes {
	return appsyncGraphqlApiAttributes{ref: terra.ReferenceResource(aga)}
}

func (aga *AppsyncGraphqlApi) ImportState(av io.Reader) error {
	aga.state = &appsyncGraphqlApiState{}
	if err := json.NewDecoder(av).Decode(aga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aga.Type(), aga.LocalName(), err)
	}
	return nil
}

func (aga *AppsyncGraphqlApi) State() (*appsyncGraphqlApiState, bool) {
	return aga.state, aga.state != nil
}

func (aga *AppsyncGraphqlApi) StateMust() *appsyncGraphqlApiState {
	if aga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aga.Type(), aga.LocalName()))
	}
	return aga.state
}

func (aga *AppsyncGraphqlApi) DependOn() terra.Reference {
	return terra.ReferenceResource(aga)
}

type AppsyncGraphqlApiArgs struct {
	// AuthenticationType: string, required
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// XrayEnabled: bool, optional
	XrayEnabled terra.BoolValue `hcl:"xray_enabled,attr"`
	// AdditionalAuthenticationProvider: min=0
	AdditionalAuthenticationProvider []appsyncgraphqlapi.AdditionalAuthenticationProvider `hcl:"additional_authentication_provider,block" validate:"min=0"`
	// LambdaAuthorizerConfig: optional
	LambdaAuthorizerConfig *appsyncgraphqlapi.LambdaAuthorizerConfig `hcl:"lambda_authorizer_config,block"`
	// LogConfig: optional
	LogConfig *appsyncgraphqlapi.LogConfig `hcl:"log_config,block"`
	// OpenidConnectConfig: optional
	OpenidConnectConfig *appsyncgraphqlapi.OpenidConnectConfig `hcl:"openid_connect_config,block"`
	// UserPoolConfig: optional
	UserPoolConfig *appsyncgraphqlapi.UserPoolConfig `hcl:"user_pool_config,block"`
	// DependsOn contains resources that AppsyncGraphqlApi depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appsyncGraphqlApiAttributes struct {
	ref terra.Reference
}

func (aga appsyncGraphqlApiAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(aga.ref.Append("arn"))
}

func (aga appsyncGraphqlApiAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceString(aga.ref.Append("authentication_type"))
}

func (aga appsyncGraphqlApiAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aga.ref.Append("id"))
}

func (aga appsyncGraphqlApiAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aga.ref.Append("name"))
}

func (aga appsyncGraphqlApiAttributes) Schema() terra.StringValue {
	return terra.ReferenceString(aga.ref.Append("schema"))
}

func (aga appsyncGraphqlApiAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aga.ref.Append("tags"))
}

func (aga appsyncGraphqlApiAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aga.ref.Append("tags_all"))
}

func (aga appsyncGraphqlApiAttributes) Uris() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aga.ref.Append("uris"))
}

func (aga appsyncGraphqlApiAttributes) XrayEnabled() terra.BoolValue {
	return terra.ReferenceBool(aga.ref.Append("xray_enabled"))
}

func (aga appsyncGraphqlApiAttributes) AdditionalAuthenticationProvider() terra.ListValue[appsyncgraphqlapi.AdditionalAuthenticationProviderAttributes] {
	return terra.ReferenceList[appsyncgraphqlapi.AdditionalAuthenticationProviderAttributes](aga.ref.Append("additional_authentication_provider"))
}

func (aga appsyncGraphqlApiAttributes) LambdaAuthorizerConfig() terra.ListValue[appsyncgraphqlapi.LambdaAuthorizerConfigAttributes] {
	return terra.ReferenceList[appsyncgraphqlapi.LambdaAuthorizerConfigAttributes](aga.ref.Append("lambda_authorizer_config"))
}

func (aga appsyncGraphqlApiAttributes) LogConfig() terra.ListValue[appsyncgraphqlapi.LogConfigAttributes] {
	return terra.ReferenceList[appsyncgraphqlapi.LogConfigAttributes](aga.ref.Append("log_config"))
}

func (aga appsyncGraphqlApiAttributes) OpenidConnectConfig() terra.ListValue[appsyncgraphqlapi.OpenidConnectConfigAttributes] {
	return terra.ReferenceList[appsyncgraphqlapi.OpenidConnectConfigAttributes](aga.ref.Append("openid_connect_config"))
}

func (aga appsyncGraphqlApiAttributes) UserPoolConfig() terra.ListValue[appsyncgraphqlapi.UserPoolConfigAttributes] {
	return terra.ReferenceList[appsyncgraphqlapi.UserPoolConfigAttributes](aga.ref.Append("user_pool_config"))
}

type appsyncGraphqlApiState struct {
	Arn                              string                                                    `json:"arn"`
	AuthenticationType               string                                                    `json:"authentication_type"`
	Id                               string                                                    `json:"id"`
	Name                             string                                                    `json:"name"`
	Schema                           string                                                    `json:"schema"`
	Tags                             map[string]string                                         `json:"tags"`
	TagsAll                          map[string]string                                         `json:"tags_all"`
	Uris                             map[string]string                                         `json:"uris"`
	XrayEnabled                      bool                                                      `json:"xray_enabled"`
	AdditionalAuthenticationProvider []appsyncgraphqlapi.AdditionalAuthenticationProviderState `json:"additional_authentication_provider"`
	LambdaAuthorizerConfig           []appsyncgraphqlapi.LambdaAuthorizerConfigState           `json:"lambda_authorizer_config"`
	LogConfig                        []appsyncgraphqlapi.LogConfigState                        `json:"log_config"`
	OpenidConnectConfig              []appsyncgraphqlapi.OpenidConnectConfigState              `json:"openid_connect_config"`
	UserPoolConfig                   []appsyncgraphqlapi.UserPoolConfigState                   `json:"user_pool_config"`
}
