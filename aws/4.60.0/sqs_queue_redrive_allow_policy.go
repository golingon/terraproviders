// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSqsQueueRedriveAllowPolicy(name string, args SqsQueueRedriveAllowPolicyArgs) *SqsQueueRedriveAllowPolicy {
	return &SqsQueueRedriveAllowPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SqsQueueRedriveAllowPolicy)(nil)

type SqsQueueRedriveAllowPolicy struct {
	Name  string
	Args  SqsQueueRedriveAllowPolicyArgs
	state *sqsQueueRedriveAllowPolicyState
}

func (sqrap *SqsQueueRedriveAllowPolicy) Type() string {
	return "aws_sqs_queue_redrive_allow_policy"
}

func (sqrap *SqsQueueRedriveAllowPolicy) LocalName() string {
	return sqrap.Name
}

func (sqrap *SqsQueueRedriveAllowPolicy) Configuration() interface{} {
	return sqrap.Args
}

func (sqrap *SqsQueueRedriveAllowPolicy) Attributes() sqsQueueRedriveAllowPolicyAttributes {
	return sqsQueueRedriveAllowPolicyAttributes{ref: terra.ReferenceResource(sqrap)}
}

func (sqrap *SqsQueueRedriveAllowPolicy) ImportState(av io.Reader) error {
	sqrap.state = &sqsQueueRedriveAllowPolicyState{}
	if err := json.NewDecoder(av).Decode(sqrap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sqrap.Type(), sqrap.LocalName(), err)
	}
	return nil
}

func (sqrap *SqsQueueRedriveAllowPolicy) State() (*sqsQueueRedriveAllowPolicyState, bool) {
	return sqrap.state, sqrap.state != nil
}

func (sqrap *SqsQueueRedriveAllowPolicy) StateMust() *sqsQueueRedriveAllowPolicyState {
	if sqrap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sqrap.Type(), sqrap.LocalName()))
	}
	return sqrap.state
}

func (sqrap *SqsQueueRedriveAllowPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(sqrap)
}

type SqsQueueRedriveAllowPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// QueueUrl: string, required
	QueueUrl terra.StringValue `hcl:"queue_url,attr" validate:"required"`
	// RedriveAllowPolicy: string, required
	RedriveAllowPolicy terra.StringValue `hcl:"redrive_allow_policy,attr" validate:"required"`
	// DependsOn contains resources that SqsQueueRedriveAllowPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sqsQueueRedriveAllowPolicyAttributes struct {
	ref terra.Reference
}

func (sqrap sqsQueueRedriveAllowPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sqrap.ref.Append("id"))
}

func (sqrap sqsQueueRedriveAllowPolicyAttributes) QueueUrl() terra.StringValue {
	return terra.ReferenceString(sqrap.ref.Append("queue_url"))
}

func (sqrap sqsQueueRedriveAllowPolicyAttributes) RedriveAllowPolicy() terra.StringValue {
	return terra.ReferenceString(sqrap.ref.Append("redrive_allow_policy"))
}

type sqsQueueRedriveAllowPolicyState struct {
	Id                 string `json:"id"`
	QueueUrl           string `json:"queue_url"`
	RedriveAllowPolicy string `json:"redrive_allow_policy"`
}
