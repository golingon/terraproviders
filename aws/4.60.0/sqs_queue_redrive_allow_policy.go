// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewSqsQueueRedriveAllowPolicy creates a new instance of [SqsQueueRedriveAllowPolicy].
func NewSqsQueueRedriveAllowPolicy(name string, args SqsQueueRedriveAllowPolicyArgs) *SqsQueueRedriveAllowPolicy {
	return &SqsQueueRedriveAllowPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SqsQueueRedriveAllowPolicy)(nil)

// SqsQueueRedriveAllowPolicy represents the Terraform resource aws_sqs_queue_redrive_allow_policy.
type SqsQueueRedriveAllowPolicy struct {
	Name      string
	Args      SqsQueueRedriveAllowPolicyArgs
	state     *sqsQueueRedriveAllowPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SqsQueueRedriveAllowPolicy].
func (sqrap *SqsQueueRedriveAllowPolicy) Type() string {
	return "aws_sqs_queue_redrive_allow_policy"
}

// LocalName returns the local name for [SqsQueueRedriveAllowPolicy].
func (sqrap *SqsQueueRedriveAllowPolicy) LocalName() string {
	return sqrap.Name
}

// Configuration returns the configuration (args) for [SqsQueueRedriveAllowPolicy].
func (sqrap *SqsQueueRedriveAllowPolicy) Configuration() interface{} {
	return sqrap.Args
}

// DependOn is used for other resources to depend on [SqsQueueRedriveAllowPolicy].
func (sqrap *SqsQueueRedriveAllowPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(sqrap)
}

// Dependencies returns the list of resources [SqsQueueRedriveAllowPolicy] depends_on.
func (sqrap *SqsQueueRedriveAllowPolicy) Dependencies() terra.Dependencies {
	return sqrap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SqsQueueRedriveAllowPolicy].
func (sqrap *SqsQueueRedriveAllowPolicy) LifecycleManagement() *terra.Lifecycle {
	return sqrap.Lifecycle
}

// Attributes returns the attributes for [SqsQueueRedriveAllowPolicy].
func (sqrap *SqsQueueRedriveAllowPolicy) Attributes() sqsQueueRedriveAllowPolicyAttributes {
	return sqsQueueRedriveAllowPolicyAttributes{ref: terra.ReferenceResource(sqrap)}
}

// ImportState imports the given attribute values into [SqsQueueRedriveAllowPolicy]'s state.
func (sqrap *SqsQueueRedriveAllowPolicy) ImportState(av io.Reader) error {
	sqrap.state = &sqsQueueRedriveAllowPolicyState{}
	if err := json.NewDecoder(av).Decode(sqrap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sqrap.Type(), sqrap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SqsQueueRedriveAllowPolicy] has state.
func (sqrap *SqsQueueRedriveAllowPolicy) State() (*sqsQueueRedriveAllowPolicyState, bool) {
	return sqrap.state, sqrap.state != nil
}

// StateMust returns the state for [SqsQueueRedriveAllowPolicy]. Panics if the state is nil.
func (sqrap *SqsQueueRedriveAllowPolicy) StateMust() *sqsQueueRedriveAllowPolicyState {
	if sqrap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sqrap.Type(), sqrap.LocalName()))
	}
	return sqrap.state
}

// SqsQueueRedriveAllowPolicyArgs contains the configurations for aws_sqs_queue_redrive_allow_policy.
type SqsQueueRedriveAllowPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// QueueUrl: string, required
	QueueUrl terra.StringValue `hcl:"queue_url,attr" validate:"required"`
	// RedriveAllowPolicy: string, required
	RedriveAllowPolicy terra.StringValue `hcl:"redrive_allow_policy,attr" validate:"required"`
}
type sqsQueueRedriveAllowPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_sqs_queue_redrive_allow_policy.
func (sqrap sqsQueueRedriveAllowPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sqrap.ref.Append("id"))
}

// QueueUrl returns a reference to field queue_url of aws_sqs_queue_redrive_allow_policy.
func (sqrap sqsQueueRedriveAllowPolicyAttributes) QueueUrl() terra.StringValue {
	return terra.ReferenceAsString(sqrap.ref.Append("queue_url"))
}

// RedriveAllowPolicy returns a reference to field redrive_allow_policy of aws_sqs_queue_redrive_allow_policy.
func (sqrap sqsQueueRedriveAllowPolicyAttributes) RedriveAllowPolicy() terra.StringValue {
	return terra.ReferenceAsString(sqrap.ref.Append("redrive_allow_policy"))
}

type sqsQueueRedriveAllowPolicyState struct {
	Id                 string `json:"id"`
	QueueUrl           string `json:"queue_url"`
	RedriveAllowPolicy string `json:"redrive_allow_policy"`
}
