// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dboptiongroup "github.com/golingon/terraproviders/aws/4.60.0/dboptiongroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDbOptionGroup(name string, args DbOptionGroupArgs) *DbOptionGroup {
	return &DbOptionGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DbOptionGroup)(nil)

type DbOptionGroup struct {
	Name  string
	Args  DbOptionGroupArgs
	state *dbOptionGroupState
}

func (dog *DbOptionGroup) Type() string {
	return "aws_db_option_group"
}

func (dog *DbOptionGroup) LocalName() string {
	return dog.Name
}

func (dog *DbOptionGroup) Configuration() interface{} {
	return dog.Args
}

func (dog *DbOptionGroup) Attributes() dbOptionGroupAttributes {
	return dbOptionGroupAttributes{ref: terra.ReferenceResource(dog)}
}

func (dog *DbOptionGroup) ImportState(av io.Reader) error {
	dog.state = &dbOptionGroupState{}
	if err := json.NewDecoder(av).Decode(dog.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dog.Type(), dog.LocalName(), err)
	}
	return nil
}

func (dog *DbOptionGroup) State() (*dbOptionGroupState, bool) {
	return dog.state, dog.state != nil
}

func (dog *DbOptionGroup) StateMust() *dbOptionGroupState {
	if dog.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dog.Type(), dog.LocalName()))
	}
	return dog.state
}

func (dog *DbOptionGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(dog)
}

type DbOptionGroupArgs struct {
	// EngineName: string, required
	EngineName terra.StringValue `hcl:"engine_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MajorEngineVersion: string, required
	MajorEngineVersion terra.StringValue `hcl:"major_engine_version,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// OptionGroupDescription: string, optional
	OptionGroupDescription terra.StringValue `hcl:"option_group_description,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Option: min=0
	Option []dboptiongroup.Option `hcl:"option,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dboptiongroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DbOptionGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dbOptionGroupAttributes struct {
	ref terra.Reference
}

func (dog dbOptionGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dog.ref.Append("arn"))
}

func (dog dbOptionGroupAttributes) EngineName() terra.StringValue {
	return terra.ReferenceString(dog.ref.Append("engine_name"))
}

func (dog dbOptionGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dog.ref.Append("id"))
}

func (dog dbOptionGroupAttributes) MajorEngineVersion() terra.StringValue {
	return terra.ReferenceString(dog.ref.Append("major_engine_version"))
}

func (dog dbOptionGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dog.ref.Append("name"))
}

func (dog dbOptionGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(dog.ref.Append("name_prefix"))
}

func (dog dbOptionGroupAttributes) OptionGroupDescription() terra.StringValue {
	return terra.ReferenceString(dog.ref.Append("option_group_description"))
}

func (dog dbOptionGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dog.ref.Append("tags"))
}

func (dog dbOptionGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dog.ref.Append("tags_all"))
}

func (dog dbOptionGroupAttributes) Option() terra.SetValue[dboptiongroup.OptionAttributes] {
	return terra.ReferenceSet[dboptiongroup.OptionAttributes](dog.ref.Append("option"))
}

func (dog dbOptionGroupAttributes) Timeouts() dboptiongroup.TimeoutsAttributes {
	return terra.ReferenceSingle[dboptiongroup.TimeoutsAttributes](dog.ref.Append("timeouts"))
}

type dbOptionGroupState struct {
	Arn                    string                       `json:"arn"`
	EngineName             string                       `json:"engine_name"`
	Id                     string                       `json:"id"`
	MajorEngineVersion     string                       `json:"major_engine_version"`
	Name                   string                       `json:"name"`
	NamePrefix             string                       `json:"name_prefix"`
	OptionGroupDescription string                       `json:"option_group_description"`
	Tags                   map[string]string            `json:"tags"`
	TagsAll                map[string]string            `json:"tags_all"`
	Option                 []dboptiongroup.OptionState  `json:"option"`
	Timeouts               *dboptiongroup.TimeoutsState `json:"timeouts"`
}
