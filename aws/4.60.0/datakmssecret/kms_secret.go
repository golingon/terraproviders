// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datakmssecret

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Secret struct {
	// Context: map of string, optional
	Context terra.MapValue[terra.StringValue] `hcl:"context,attr"`
	// GrantTokens: list of string, optional
	GrantTokens terra.ListValue[terra.StringValue] `hcl:"grant_tokens,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Payload: string, required
	Payload terra.StringValue `hcl:"payload,attr" validate:"required"`
}

type SecretAttributes struct {
	ref terra.Reference
}

func (s SecretAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SecretAttributes) InternalWithRef(ref terra.Reference) SecretAttributes {
	return SecretAttributes{ref: ref}
}

func (s SecretAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SecretAttributes) Context() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](s.ref.Append("context"))
}

func (s SecretAttributes) GrantTokens() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](s.ref.Append("grant_tokens"))
}

func (s SecretAttributes) Name() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("name"))
}

func (s SecretAttributes) Payload() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("payload"))
}

type SecretState struct {
	Context     map[string]string `json:"context"`
	GrantTokens []string          `json:"grant_tokens"`
	Name        string            `json:"name"`
	Payload     string            `json:"payload"`
}
