// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppstreamUserStackAssociation(name string, args AppstreamUserStackAssociationArgs) *AppstreamUserStackAssociation {
	return &AppstreamUserStackAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppstreamUserStackAssociation)(nil)

type AppstreamUserStackAssociation struct {
	Name  string
	Args  AppstreamUserStackAssociationArgs
	state *appstreamUserStackAssociationState
}

func (ausa *AppstreamUserStackAssociation) Type() string {
	return "aws_appstream_user_stack_association"
}

func (ausa *AppstreamUserStackAssociation) LocalName() string {
	return ausa.Name
}

func (ausa *AppstreamUserStackAssociation) Configuration() interface{} {
	return ausa.Args
}

func (ausa *AppstreamUserStackAssociation) Attributes() appstreamUserStackAssociationAttributes {
	return appstreamUserStackAssociationAttributes{ref: terra.ReferenceResource(ausa)}
}

func (ausa *AppstreamUserStackAssociation) ImportState(av io.Reader) error {
	ausa.state = &appstreamUserStackAssociationState{}
	if err := json.NewDecoder(av).Decode(ausa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ausa.Type(), ausa.LocalName(), err)
	}
	return nil
}

func (ausa *AppstreamUserStackAssociation) State() (*appstreamUserStackAssociationState, bool) {
	return ausa.state, ausa.state != nil
}

func (ausa *AppstreamUserStackAssociation) StateMust() *appstreamUserStackAssociationState {
	if ausa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ausa.Type(), ausa.LocalName()))
	}
	return ausa.state
}

func (ausa *AppstreamUserStackAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(ausa)
}

type AppstreamUserStackAssociationArgs struct {
	// AuthenticationType: string, required
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SendEmailNotification: bool, optional
	SendEmailNotification terra.BoolValue `hcl:"send_email_notification,attr"`
	// StackName: string, required
	StackName terra.StringValue `hcl:"stack_name,attr" validate:"required"`
	// UserName: string, required
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
	// DependsOn contains resources that AppstreamUserStackAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appstreamUserStackAssociationAttributes struct {
	ref terra.Reference
}

func (ausa appstreamUserStackAssociationAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceString(ausa.ref.Append("authentication_type"))
}

func (ausa appstreamUserStackAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ausa.ref.Append("id"))
}

func (ausa appstreamUserStackAssociationAttributes) SendEmailNotification() terra.BoolValue {
	return terra.ReferenceBool(ausa.ref.Append("send_email_notification"))
}

func (ausa appstreamUserStackAssociationAttributes) StackName() terra.StringValue {
	return terra.ReferenceString(ausa.ref.Append("stack_name"))
}

func (ausa appstreamUserStackAssociationAttributes) UserName() terra.StringValue {
	return terra.ReferenceString(ausa.ref.Append("user_name"))
}

type appstreamUserStackAssociationState struct {
	AuthenticationType    string `json:"authentication_type"`
	Id                    string `json:"id"`
	SendEmailNotification bool   `json:"send_email_notification"`
	StackName             string `json:"stack_name"`
	UserName              string `json:"user_name"`
}
