// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	sagemakerendpointconfiguration "github.com/golingon/terraproviders/aws/4.60.0/sagemakerendpointconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSagemakerEndpointConfiguration(name string, args SagemakerEndpointConfigurationArgs) *SagemakerEndpointConfiguration {
	return &SagemakerEndpointConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SagemakerEndpointConfiguration)(nil)

type SagemakerEndpointConfiguration struct {
	Name  string
	Args  SagemakerEndpointConfigurationArgs
	state *sagemakerEndpointConfigurationState
}

func (sec *SagemakerEndpointConfiguration) Type() string {
	return "aws_sagemaker_endpoint_configuration"
}

func (sec *SagemakerEndpointConfiguration) LocalName() string {
	return sec.Name
}

func (sec *SagemakerEndpointConfiguration) Configuration() interface{} {
	return sec.Args
}

func (sec *SagemakerEndpointConfiguration) Attributes() sagemakerEndpointConfigurationAttributes {
	return sagemakerEndpointConfigurationAttributes{ref: terra.ReferenceResource(sec)}
}

func (sec *SagemakerEndpointConfiguration) ImportState(av io.Reader) error {
	sec.state = &sagemakerEndpointConfigurationState{}
	if err := json.NewDecoder(av).Decode(sec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sec.Type(), sec.LocalName(), err)
	}
	return nil
}

func (sec *SagemakerEndpointConfiguration) State() (*sagemakerEndpointConfigurationState, bool) {
	return sec.state, sec.state != nil
}

func (sec *SagemakerEndpointConfiguration) StateMust() *sagemakerEndpointConfigurationState {
	if sec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sec.Type(), sec.LocalName()))
	}
	return sec.state
}

func (sec *SagemakerEndpointConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(sec)
}

type SagemakerEndpointConfigurationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// AsyncInferenceConfig: optional
	AsyncInferenceConfig *sagemakerendpointconfiguration.AsyncInferenceConfig `hcl:"async_inference_config,block"`
	// DataCaptureConfig: optional
	DataCaptureConfig *sagemakerendpointconfiguration.DataCaptureConfig `hcl:"data_capture_config,block"`
	// ProductionVariants: min=1,max=10
	ProductionVariants []sagemakerendpointconfiguration.ProductionVariants `hcl:"production_variants,block" validate:"min=1,max=10"`
	// ShadowProductionVariants: min=0,max=10
	ShadowProductionVariants []sagemakerendpointconfiguration.ShadowProductionVariants `hcl:"shadow_production_variants,block" validate:"min=0,max=10"`
	// DependsOn contains resources that SagemakerEndpointConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sagemakerEndpointConfigurationAttributes struct {
	ref terra.Reference
}

func (sec sagemakerEndpointConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sec.ref.Append("arn"))
}

func (sec sagemakerEndpointConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sec.ref.Append("id"))
}

func (sec sagemakerEndpointConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceString(sec.ref.Append("kms_key_arn"))
}

func (sec sagemakerEndpointConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sec.ref.Append("name"))
}

func (sec sagemakerEndpointConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sec.ref.Append("tags"))
}

func (sec sagemakerEndpointConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sec.ref.Append("tags_all"))
}

func (sec sagemakerEndpointConfigurationAttributes) AsyncInferenceConfig() terra.ListValue[sagemakerendpointconfiguration.AsyncInferenceConfigAttributes] {
	return terra.ReferenceList[sagemakerendpointconfiguration.AsyncInferenceConfigAttributes](sec.ref.Append("async_inference_config"))
}

func (sec sagemakerEndpointConfigurationAttributes) DataCaptureConfig() terra.ListValue[sagemakerendpointconfiguration.DataCaptureConfigAttributes] {
	return terra.ReferenceList[sagemakerendpointconfiguration.DataCaptureConfigAttributes](sec.ref.Append("data_capture_config"))
}

func (sec sagemakerEndpointConfigurationAttributes) ProductionVariants() terra.ListValue[sagemakerendpointconfiguration.ProductionVariantsAttributes] {
	return terra.ReferenceList[sagemakerendpointconfiguration.ProductionVariantsAttributes](sec.ref.Append("production_variants"))
}

func (sec sagemakerEndpointConfigurationAttributes) ShadowProductionVariants() terra.ListValue[sagemakerendpointconfiguration.ShadowProductionVariantsAttributes] {
	return terra.ReferenceList[sagemakerendpointconfiguration.ShadowProductionVariantsAttributes](sec.ref.Append("shadow_production_variants"))
}

type sagemakerEndpointConfigurationState struct {
	Arn                      string                                                         `json:"arn"`
	Id                       string                                                         `json:"id"`
	KmsKeyArn                string                                                         `json:"kms_key_arn"`
	Name                     string                                                         `json:"name"`
	Tags                     map[string]string                                              `json:"tags"`
	TagsAll                  map[string]string                                              `json:"tags_all"`
	AsyncInferenceConfig     []sagemakerendpointconfiguration.AsyncInferenceConfigState     `json:"async_inference_config"`
	DataCaptureConfig        []sagemakerendpointconfiguration.DataCaptureConfigState        `json:"data_capture_config"`
	ProductionVariants       []sagemakerendpointconfiguration.ProductionVariantsState       `json:"production_variants"`
	ShadowProductionVariants []sagemakerendpointconfiguration.ShadowProductionVariantsState `json:"shadow_production_variants"`
}
