// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewTranscribeVocabularyFilter(name string, args TranscribeVocabularyFilterArgs) *TranscribeVocabularyFilter {
	return &TranscribeVocabularyFilter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TranscribeVocabularyFilter)(nil)

type TranscribeVocabularyFilter struct {
	Name  string
	Args  TranscribeVocabularyFilterArgs
	state *transcribeVocabularyFilterState
}

func (tvf *TranscribeVocabularyFilter) Type() string {
	return "aws_transcribe_vocabulary_filter"
}

func (tvf *TranscribeVocabularyFilter) LocalName() string {
	return tvf.Name
}

func (tvf *TranscribeVocabularyFilter) Configuration() interface{} {
	return tvf.Args
}

func (tvf *TranscribeVocabularyFilter) Attributes() transcribeVocabularyFilterAttributes {
	return transcribeVocabularyFilterAttributes{ref: terra.ReferenceResource(tvf)}
}

func (tvf *TranscribeVocabularyFilter) ImportState(av io.Reader) error {
	tvf.state = &transcribeVocabularyFilterState{}
	if err := json.NewDecoder(av).Decode(tvf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tvf.Type(), tvf.LocalName(), err)
	}
	return nil
}

func (tvf *TranscribeVocabularyFilter) State() (*transcribeVocabularyFilterState, bool) {
	return tvf.state, tvf.state != nil
}

func (tvf *TranscribeVocabularyFilter) StateMust() *transcribeVocabularyFilterState {
	if tvf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tvf.Type(), tvf.LocalName()))
	}
	return tvf.state
}

func (tvf *TranscribeVocabularyFilter) DependOn() terra.Reference {
	return terra.ReferenceResource(tvf)
}

type TranscribeVocabularyFilterArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VocabularyFilterFileUri: string, optional
	VocabularyFilterFileUri terra.StringValue `hcl:"vocabulary_filter_file_uri,attr"`
	// VocabularyFilterName: string, required
	VocabularyFilterName terra.StringValue `hcl:"vocabulary_filter_name,attr" validate:"required"`
	// Words: list of string, optional
	Words terra.ListValue[terra.StringValue] `hcl:"words,attr"`
	// DependsOn contains resources that TranscribeVocabularyFilter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type transcribeVocabularyFilterAttributes struct {
	ref terra.Reference
}

func (tvf transcribeVocabularyFilterAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(tvf.ref.Append("arn"))
}

func (tvf transcribeVocabularyFilterAttributes) DownloadUri() terra.StringValue {
	return terra.ReferenceString(tvf.ref.Append("download_uri"))
}

func (tvf transcribeVocabularyFilterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(tvf.ref.Append("id"))
}

func (tvf transcribeVocabularyFilterAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceString(tvf.ref.Append("language_code"))
}

func (tvf transcribeVocabularyFilterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](tvf.ref.Append("tags"))
}

func (tvf transcribeVocabularyFilterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](tvf.ref.Append("tags_all"))
}

func (tvf transcribeVocabularyFilterAttributes) VocabularyFilterFileUri() terra.StringValue {
	return terra.ReferenceString(tvf.ref.Append("vocabulary_filter_file_uri"))
}

func (tvf transcribeVocabularyFilterAttributes) VocabularyFilterName() terra.StringValue {
	return terra.ReferenceString(tvf.ref.Append("vocabulary_filter_name"))
}

func (tvf transcribeVocabularyFilterAttributes) Words() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](tvf.ref.Append("words"))
}

type transcribeVocabularyFilterState struct {
	Arn                     string            `json:"arn"`
	DownloadUri             string            `json:"download_uri"`
	Id                      string            `json:"id"`
	LanguageCode            string            `json:"language_code"`
	Tags                    map[string]string `json:"tags"`
	TagsAll                 map[string]string `json:"tags_all"`
	VocabularyFilterFileUri string            `json:"vocabulary_filter_file_uri"`
	VocabularyFilterName    string            `json:"vocabulary_filter_name"`
	Words                   []string          `json:"words"`
}
