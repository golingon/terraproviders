// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftserverlessSnapshot(name string, args RedshiftserverlessSnapshotArgs) *RedshiftserverlessSnapshot {
	return &RedshiftserverlessSnapshot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftserverlessSnapshot)(nil)

type RedshiftserverlessSnapshot struct {
	Name  string
	Args  RedshiftserverlessSnapshotArgs
	state *redshiftserverlessSnapshotState
}

func (rs *RedshiftserverlessSnapshot) Type() string {
	return "aws_redshiftserverless_snapshot"
}

func (rs *RedshiftserverlessSnapshot) LocalName() string {
	return rs.Name
}

func (rs *RedshiftserverlessSnapshot) Configuration() interface{} {
	return rs.Args
}

func (rs *RedshiftserverlessSnapshot) Attributes() redshiftserverlessSnapshotAttributes {
	return redshiftserverlessSnapshotAttributes{ref: terra.ReferenceResource(rs)}
}

func (rs *RedshiftserverlessSnapshot) ImportState(av io.Reader) error {
	rs.state = &redshiftserverlessSnapshotState{}
	if err := json.NewDecoder(av).Decode(rs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rs.Type(), rs.LocalName(), err)
	}
	return nil
}

func (rs *RedshiftserverlessSnapshot) State() (*redshiftserverlessSnapshotState, bool) {
	return rs.state, rs.state != nil
}

func (rs *RedshiftserverlessSnapshot) StateMust() *redshiftserverlessSnapshotState {
	if rs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rs.Type(), rs.LocalName()))
	}
	return rs.state
}

func (rs *RedshiftserverlessSnapshot) DependOn() terra.Reference {
	return terra.ReferenceResource(rs)
}

type RedshiftserverlessSnapshotArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// RetentionPeriod: number, optional
	RetentionPeriod terra.NumberValue `hcl:"retention_period,attr"`
	// SnapshotName: string, required
	SnapshotName terra.StringValue `hcl:"snapshot_name,attr" validate:"required"`
	// DependsOn contains resources that RedshiftserverlessSnapshot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftserverlessSnapshotAttributes struct {
	ref terra.Reference
}

func (rs redshiftserverlessSnapshotAttributes) AccountsWithProvisionedRestoreAccess() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rs.ref.Append("accounts_with_provisioned_restore_access"))
}

func (rs redshiftserverlessSnapshotAttributes) AccountsWithRestoreAccess() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rs.ref.Append("accounts_with_restore_access"))
}

func (rs redshiftserverlessSnapshotAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("admin_username"))
}

func (rs redshiftserverlessSnapshotAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("arn"))
}

func (rs redshiftserverlessSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("id"))
}

func (rs redshiftserverlessSnapshotAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("kms_key_id"))
}

func (rs redshiftserverlessSnapshotAttributes) NamespaceArn() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("namespace_arn"))
}

func (rs redshiftserverlessSnapshotAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("namespace_name"))
}

func (rs redshiftserverlessSnapshotAttributes) OwnerAccount() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("owner_account"))
}

func (rs redshiftserverlessSnapshotAttributes) RetentionPeriod() terra.NumberValue {
	return terra.ReferenceNumber(rs.ref.Append("retention_period"))
}

func (rs redshiftserverlessSnapshotAttributes) SnapshotName() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("snapshot_name"))
}

type redshiftserverlessSnapshotState struct {
	AccountsWithProvisionedRestoreAccess []string `json:"accounts_with_provisioned_restore_access"`
	AccountsWithRestoreAccess            []string `json:"accounts_with_restore_access"`
	AdminUsername                        string   `json:"admin_username"`
	Arn                                  string   `json:"arn"`
	Id                                   string   `json:"id"`
	KmsKeyId                             string   `json:"kms_key_id"`
	NamespaceArn                         string   `json:"namespace_arn"`
	NamespaceName                        string   `json:"namespace_name"`
	OwnerAccount                         string   `json:"owner_account"`
	RetentionPeriod                      float64  `json:"retention_period"`
	SnapshotName                         string   `json:"snapshot_name"`
}
