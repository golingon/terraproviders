// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	neptunecluster "github.com/golingon/terraproviders/aws/4.60.0/neptunecluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNeptuneCluster(name string, args NeptuneClusterArgs) *NeptuneCluster {
	return &NeptuneCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NeptuneCluster)(nil)

type NeptuneCluster struct {
	Name  string
	Args  NeptuneClusterArgs
	state *neptuneClusterState
}

func (nc *NeptuneCluster) Type() string {
	return "aws_neptune_cluster"
}

func (nc *NeptuneCluster) LocalName() string {
	return nc.Name
}

func (nc *NeptuneCluster) Configuration() interface{} {
	return nc.Args
}

func (nc *NeptuneCluster) Attributes() neptuneClusterAttributes {
	return neptuneClusterAttributes{ref: terra.ReferenceResource(nc)}
}

func (nc *NeptuneCluster) ImportState(av io.Reader) error {
	nc.state = &neptuneClusterState{}
	if err := json.NewDecoder(av).Decode(nc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nc.Type(), nc.LocalName(), err)
	}
	return nil
}

func (nc *NeptuneCluster) State() (*neptuneClusterState, bool) {
	return nc.state, nc.state != nil
}

func (nc *NeptuneCluster) StateMust() *neptuneClusterState {
	if nc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nc.Type(), nc.LocalName()))
	}
	return nc.state
}

func (nc *NeptuneCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(nc)
}

type NeptuneClusterArgs struct {
	// AllowMajorVersionUpgrade: bool, optional
	AllowMajorVersionUpgrade terra.BoolValue `hcl:"allow_major_version_upgrade,attr"`
	// ApplyImmediately: bool, optional
	ApplyImmediately terra.BoolValue `hcl:"apply_immediately,attr"`
	// AvailabilityZones: set of string, optional
	AvailabilityZones terra.SetValue[terra.StringValue] `hcl:"availability_zones,attr"`
	// BackupRetentionPeriod: number, optional
	BackupRetentionPeriod terra.NumberValue `hcl:"backup_retention_period,attr"`
	// ClusterIdentifier: string, optional
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr"`
	// ClusterIdentifierPrefix: string, optional
	ClusterIdentifierPrefix terra.StringValue `hcl:"cluster_identifier_prefix,attr"`
	// CopyTagsToSnapshot: bool, optional
	CopyTagsToSnapshot terra.BoolValue `hcl:"copy_tags_to_snapshot,attr"`
	// DeletionProtection: bool, optional
	DeletionProtection terra.BoolValue `hcl:"deletion_protection,attr"`
	// EnableCloudwatchLogsExports: set of string, optional
	EnableCloudwatchLogsExports terra.SetValue[terra.StringValue] `hcl:"enable_cloudwatch_logs_exports,attr"`
	// Engine: string, optional
	Engine terra.StringValue `hcl:"engine,attr"`
	// EngineVersion: string, optional
	EngineVersion terra.StringValue `hcl:"engine_version,attr"`
	// FinalSnapshotIdentifier: string, optional
	FinalSnapshotIdentifier terra.StringValue `hcl:"final_snapshot_identifier,attr"`
	// GlobalClusterIdentifier: string, optional
	GlobalClusterIdentifier terra.StringValue `hcl:"global_cluster_identifier,attr"`
	// IamDatabaseAuthenticationEnabled: bool, optional
	IamDatabaseAuthenticationEnabled terra.BoolValue `hcl:"iam_database_authentication_enabled,attr"`
	// IamRoles: set of string, optional
	IamRoles terra.SetValue[terra.StringValue] `hcl:"iam_roles,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// NeptuneClusterParameterGroupName: string, optional
	NeptuneClusterParameterGroupName terra.StringValue `hcl:"neptune_cluster_parameter_group_name,attr"`
	// NeptuneInstanceParameterGroupName: string, optional
	NeptuneInstanceParameterGroupName terra.StringValue `hcl:"neptune_instance_parameter_group_name,attr"`
	// NeptuneSubnetGroupName: string, optional
	NeptuneSubnetGroupName terra.StringValue `hcl:"neptune_subnet_group_name,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// PreferredBackupWindow: string, optional
	PreferredBackupWindow terra.StringValue `hcl:"preferred_backup_window,attr"`
	// PreferredMaintenanceWindow: string, optional
	PreferredMaintenanceWindow terra.StringValue `hcl:"preferred_maintenance_window,attr"`
	// ReplicationSourceIdentifier: string, optional
	ReplicationSourceIdentifier terra.StringValue `hcl:"replication_source_identifier,attr"`
	// SkipFinalSnapshot: bool, optional
	SkipFinalSnapshot terra.BoolValue `hcl:"skip_final_snapshot,attr"`
	// SnapshotIdentifier: string, optional
	SnapshotIdentifier terra.StringValue `hcl:"snapshot_identifier,attr"`
	// StorageEncrypted: bool, optional
	StorageEncrypted terra.BoolValue `hcl:"storage_encrypted,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// ServerlessV2ScalingConfiguration: optional
	ServerlessV2ScalingConfiguration *neptunecluster.ServerlessV2ScalingConfiguration `hcl:"serverless_v2_scaling_configuration,block"`
	// Timeouts: optional
	Timeouts *neptunecluster.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NeptuneCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type neptuneClusterAttributes struct {
	ref terra.Reference
}

func (nc neptuneClusterAttributes) AllowMajorVersionUpgrade() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("allow_major_version_upgrade"))
}

func (nc neptuneClusterAttributes) ApplyImmediately() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("apply_immediately"))
}

func (nc neptuneClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("arn"))
}

func (nc neptuneClusterAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nc.ref.Append("availability_zones"))
}

func (nc neptuneClusterAttributes) BackupRetentionPeriod() terra.NumberValue {
	return terra.ReferenceNumber(nc.ref.Append("backup_retention_period"))
}

func (nc neptuneClusterAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("cluster_identifier"))
}

func (nc neptuneClusterAttributes) ClusterIdentifierPrefix() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("cluster_identifier_prefix"))
}

func (nc neptuneClusterAttributes) ClusterMembers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nc.ref.Append("cluster_members"))
}

func (nc neptuneClusterAttributes) ClusterResourceId() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("cluster_resource_id"))
}

func (nc neptuneClusterAttributes) CopyTagsToSnapshot() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("copy_tags_to_snapshot"))
}

func (nc neptuneClusterAttributes) DeletionProtection() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("deletion_protection"))
}

func (nc neptuneClusterAttributes) EnableCloudwatchLogsExports() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nc.ref.Append("enable_cloudwatch_logs_exports"))
}

func (nc neptuneClusterAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("endpoint"))
}

func (nc neptuneClusterAttributes) Engine() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("engine"))
}

func (nc neptuneClusterAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("engine_version"))
}

func (nc neptuneClusterAttributes) FinalSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("final_snapshot_identifier"))
}

func (nc neptuneClusterAttributes) GlobalClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("global_cluster_identifier"))
}

func (nc neptuneClusterAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("hosted_zone_id"))
}

func (nc neptuneClusterAttributes) IamDatabaseAuthenticationEnabled() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("iam_database_authentication_enabled"))
}

func (nc neptuneClusterAttributes) IamRoles() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nc.ref.Append("iam_roles"))
}

func (nc neptuneClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("id"))
}

func (nc neptuneClusterAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("kms_key_arn"))
}

func (nc neptuneClusterAttributes) NeptuneClusterParameterGroupName() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("neptune_cluster_parameter_group_name"))
}

func (nc neptuneClusterAttributes) NeptuneInstanceParameterGroupName() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("neptune_instance_parameter_group_name"))
}

func (nc neptuneClusterAttributes) NeptuneSubnetGroupName() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("neptune_subnet_group_name"))
}

func (nc neptuneClusterAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(nc.ref.Append("port"))
}

func (nc neptuneClusterAttributes) PreferredBackupWindow() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("preferred_backup_window"))
}

func (nc neptuneClusterAttributes) PreferredMaintenanceWindow() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("preferred_maintenance_window"))
}

func (nc neptuneClusterAttributes) ReaderEndpoint() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("reader_endpoint"))
}

func (nc neptuneClusterAttributes) ReplicationSourceIdentifier() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("replication_source_identifier"))
}

func (nc neptuneClusterAttributes) SkipFinalSnapshot() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("skip_final_snapshot"))
}

func (nc neptuneClusterAttributes) SnapshotIdentifier() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("snapshot_identifier"))
}

func (nc neptuneClusterAttributes) StorageEncrypted() terra.BoolValue {
	return terra.ReferenceBool(nc.ref.Append("storage_encrypted"))
}

func (nc neptuneClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nc.ref.Append("tags"))
}

func (nc neptuneClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nc.ref.Append("tags_all"))
}

func (nc neptuneClusterAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nc.ref.Append("vpc_security_group_ids"))
}

func (nc neptuneClusterAttributes) ServerlessV2ScalingConfiguration() terra.ListValue[neptunecluster.ServerlessV2ScalingConfigurationAttributes] {
	return terra.ReferenceList[neptunecluster.ServerlessV2ScalingConfigurationAttributes](nc.ref.Append("serverless_v2_scaling_configuration"))
}

func (nc neptuneClusterAttributes) Timeouts() neptunecluster.TimeoutsAttributes {
	return terra.ReferenceSingle[neptunecluster.TimeoutsAttributes](nc.ref.Append("timeouts"))
}

type neptuneClusterState struct {
	AllowMajorVersionUpgrade          bool                                                   `json:"allow_major_version_upgrade"`
	ApplyImmediately                  bool                                                   `json:"apply_immediately"`
	Arn                               string                                                 `json:"arn"`
	AvailabilityZones                 []string                                               `json:"availability_zones"`
	BackupRetentionPeriod             float64                                                `json:"backup_retention_period"`
	ClusterIdentifier                 string                                                 `json:"cluster_identifier"`
	ClusterIdentifierPrefix           string                                                 `json:"cluster_identifier_prefix"`
	ClusterMembers                    []string                                               `json:"cluster_members"`
	ClusterResourceId                 string                                                 `json:"cluster_resource_id"`
	CopyTagsToSnapshot                bool                                                   `json:"copy_tags_to_snapshot"`
	DeletionProtection                bool                                                   `json:"deletion_protection"`
	EnableCloudwatchLogsExports       []string                                               `json:"enable_cloudwatch_logs_exports"`
	Endpoint                          string                                                 `json:"endpoint"`
	Engine                            string                                                 `json:"engine"`
	EngineVersion                     string                                                 `json:"engine_version"`
	FinalSnapshotIdentifier           string                                                 `json:"final_snapshot_identifier"`
	GlobalClusterIdentifier           string                                                 `json:"global_cluster_identifier"`
	HostedZoneId                      string                                                 `json:"hosted_zone_id"`
	IamDatabaseAuthenticationEnabled  bool                                                   `json:"iam_database_authentication_enabled"`
	IamRoles                          []string                                               `json:"iam_roles"`
	Id                                string                                                 `json:"id"`
	KmsKeyArn                         string                                                 `json:"kms_key_arn"`
	NeptuneClusterParameterGroupName  string                                                 `json:"neptune_cluster_parameter_group_name"`
	NeptuneInstanceParameterGroupName string                                                 `json:"neptune_instance_parameter_group_name"`
	NeptuneSubnetGroupName            string                                                 `json:"neptune_subnet_group_name"`
	Port                              float64                                                `json:"port"`
	PreferredBackupWindow             string                                                 `json:"preferred_backup_window"`
	PreferredMaintenanceWindow        string                                                 `json:"preferred_maintenance_window"`
	ReaderEndpoint                    string                                                 `json:"reader_endpoint"`
	ReplicationSourceIdentifier       string                                                 `json:"replication_source_identifier"`
	SkipFinalSnapshot                 bool                                                   `json:"skip_final_snapshot"`
	SnapshotIdentifier                string                                                 `json:"snapshot_identifier"`
	StorageEncrypted                  bool                                                   `json:"storage_encrypted"`
	Tags                              map[string]string                                      `json:"tags"`
	TagsAll                           map[string]string                                      `json:"tags_all"`
	VpcSecurityGroupIds               []string                                               `json:"vpc_security_group_ids"`
	ServerlessV2ScalingConfiguration  []neptunecluster.ServerlessV2ScalingConfigurationState `json:"serverless_v2_scaling_configuration"`
	Timeouts                          *neptunecluster.TimeoutsState                          `json:"timeouts"`
}
