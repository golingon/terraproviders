// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAutoscalingAttachment(name string, args AutoscalingAttachmentArgs) *AutoscalingAttachment {
	return &AutoscalingAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutoscalingAttachment)(nil)

type AutoscalingAttachment struct {
	Name  string
	Args  AutoscalingAttachmentArgs
	state *autoscalingAttachmentState
}

func (aa *AutoscalingAttachment) Type() string {
	return "aws_autoscaling_attachment"
}

func (aa *AutoscalingAttachment) LocalName() string {
	return aa.Name
}

func (aa *AutoscalingAttachment) Configuration() interface{} {
	return aa.Args
}

func (aa *AutoscalingAttachment) Attributes() autoscalingAttachmentAttributes {
	return autoscalingAttachmentAttributes{ref: terra.ReferenceResource(aa)}
}

func (aa *AutoscalingAttachment) ImportState(av io.Reader) error {
	aa.state = &autoscalingAttachmentState{}
	if err := json.NewDecoder(av).Decode(aa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aa.Type(), aa.LocalName(), err)
	}
	return nil
}

func (aa *AutoscalingAttachment) State() (*autoscalingAttachmentState, bool) {
	return aa.state, aa.state != nil
}

func (aa *AutoscalingAttachment) StateMust() *autoscalingAttachmentState {
	if aa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aa.Type(), aa.LocalName()))
	}
	return aa.state
}

func (aa *AutoscalingAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(aa)
}

type AutoscalingAttachmentArgs struct {
	// AlbTargetGroupArn: string, optional
	AlbTargetGroupArn terra.StringValue `hcl:"alb_target_group_arn,attr"`
	// AutoscalingGroupName: string, required
	AutoscalingGroupName terra.StringValue `hcl:"autoscaling_group_name,attr" validate:"required"`
	// Elb: string, optional
	Elb terra.StringValue `hcl:"elb,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LbTargetGroupArn: string, optional
	LbTargetGroupArn terra.StringValue `hcl:"lb_target_group_arn,attr"`
	// DependsOn contains resources that AutoscalingAttachment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type autoscalingAttachmentAttributes struct {
	ref terra.Reference
}

func (aa autoscalingAttachmentAttributes) AlbTargetGroupArn() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("alb_target_group_arn"))
}

func (aa autoscalingAttachmentAttributes) AutoscalingGroupName() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("autoscaling_group_name"))
}

func (aa autoscalingAttachmentAttributes) Elb() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("elb"))
}

func (aa autoscalingAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("id"))
}

func (aa autoscalingAttachmentAttributes) LbTargetGroupArn() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("lb_target_group_arn"))
}

type autoscalingAttachmentState struct {
	AlbTargetGroupArn    string `json:"alb_target_group_arn"`
	AutoscalingGroupName string `json:"autoscaling_group_name"`
	Elb                  string `json:"elb"`
	Id                   string `json:"id"`
	LbTargetGroupArn     string `json:"lb_target_group_arn"`
}
