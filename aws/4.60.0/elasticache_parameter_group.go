// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	elasticacheparametergroup "github.com/golingon/terraproviders/aws/4.60.0/elasticacheparametergroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewElasticacheParameterGroup(name string, args ElasticacheParameterGroupArgs) *ElasticacheParameterGroup {
	return &ElasticacheParameterGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElasticacheParameterGroup)(nil)

type ElasticacheParameterGroup struct {
	Name  string
	Args  ElasticacheParameterGroupArgs
	state *elasticacheParameterGroupState
}

func (epg *ElasticacheParameterGroup) Type() string {
	return "aws_elasticache_parameter_group"
}

func (epg *ElasticacheParameterGroup) LocalName() string {
	return epg.Name
}

func (epg *ElasticacheParameterGroup) Configuration() interface{} {
	return epg.Args
}

func (epg *ElasticacheParameterGroup) Attributes() elasticacheParameterGroupAttributes {
	return elasticacheParameterGroupAttributes{ref: terra.ReferenceResource(epg)}
}

func (epg *ElasticacheParameterGroup) ImportState(av io.Reader) error {
	epg.state = &elasticacheParameterGroupState{}
	if err := json.NewDecoder(av).Decode(epg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", epg.Type(), epg.LocalName(), err)
	}
	return nil
}

func (epg *ElasticacheParameterGroup) State() (*elasticacheParameterGroupState, bool) {
	return epg.state, epg.state != nil
}

func (epg *ElasticacheParameterGroup) StateMust() *elasticacheParameterGroupState {
	if epg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", epg.Type(), epg.LocalName()))
	}
	return epg.state
}

func (epg *ElasticacheParameterGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(epg)
}

type ElasticacheParameterGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Family: string, required
	Family terra.StringValue `hcl:"family,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Parameter: min=0
	Parameter []elasticacheparametergroup.Parameter `hcl:"parameter,block" validate:"min=0"`
	// DependsOn contains resources that ElasticacheParameterGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type elasticacheParameterGroupAttributes struct {
	ref terra.Reference
}

func (epg elasticacheParameterGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(epg.ref.Append("arn"))
}

func (epg elasticacheParameterGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(epg.ref.Append("description"))
}

func (epg elasticacheParameterGroupAttributes) Family() terra.StringValue {
	return terra.ReferenceString(epg.ref.Append("family"))
}

func (epg elasticacheParameterGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(epg.ref.Append("id"))
}

func (epg elasticacheParameterGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(epg.ref.Append("name"))
}

func (epg elasticacheParameterGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](epg.ref.Append("tags"))
}

func (epg elasticacheParameterGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](epg.ref.Append("tags_all"))
}

func (epg elasticacheParameterGroupAttributes) Parameter() terra.SetValue[elasticacheparametergroup.ParameterAttributes] {
	return terra.ReferenceSet[elasticacheparametergroup.ParameterAttributes](epg.ref.Append("parameter"))
}

type elasticacheParameterGroupState struct {
	Arn         string                                     `json:"arn"`
	Description string                                     `json:"description"`
	Family      string                                     `json:"family"`
	Id          string                                     `json:"id"`
	Name        string                                     `json:"name"`
	Tags        map[string]string                          `json:"tags"`
	TagsAll     map[string]string                          `json:"tags_all"`
	Parameter   []elasticacheparametergroup.ParameterState `json:"parameter"`
}
