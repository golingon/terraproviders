// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkfirewallResourcePolicy(name string, args NetworkfirewallResourcePolicyArgs) *NetworkfirewallResourcePolicy {
	return &NetworkfirewallResourcePolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkfirewallResourcePolicy)(nil)

type NetworkfirewallResourcePolicy struct {
	Name  string
	Args  NetworkfirewallResourcePolicyArgs
	state *networkfirewallResourcePolicyState
}

func (nrp *NetworkfirewallResourcePolicy) Type() string {
	return "aws_networkfirewall_resource_policy"
}

func (nrp *NetworkfirewallResourcePolicy) LocalName() string {
	return nrp.Name
}

func (nrp *NetworkfirewallResourcePolicy) Configuration() interface{} {
	return nrp.Args
}

func (nrp *NetworkfirewallResourcePolicy) Attributes() networkfirewallResourcePolicyAttributes {
	return networkfirewallResourcePolicyAttributes{ref: terra.ReferenceResource(nrp)}
}

func (nrp *NetworkfirewallResourcePolicy) ImportState(av io.Reader) error {
	nrp.state = &networkfirewallResourcePolicyState{}
	if err := json.NewDecoder(av).Decode(nrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nrp.Type(), nrp.LocalName(), err)
	}
	return nil
}

func (nrp *NetworkfirewallResourcePolicy) State() (*networkfirewallResourcePolicyState, bool) {
	return nrp.state, nrp.state != nil
}

func (nrp *NetworkfirewallResourcePolicy) StateMust() *networkfirewallResourcePolicyState {
	if nrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nrp.Type(), nrp.LocalName()))
	}
	return nrp.state
}

func (nrp *NetworkfirewallResourcePolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(nrp)
}

type NetworkfirewallResourcePolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// DependsOn contains resources that NetworkfirewallResourcePolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkfirewallResourcePolicyAttributes struct {
	ref terra.Reference
}

func (nrp networkfirewallResourcePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nrp.ref.Append("id"))
}

func (nrp networkfirewallResourcePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(nrp.ref.Append("policy"))
}

func (nrp networkfirewallResourcePolicyAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceString(nrp.ref.Append("resource_arn"))
}

type networkfirewallResourcePolicyState struct {
	Id          string `json:"id"`
	Policy      string `json:"policy"`
	ResourceArn string `json:"resource_arn"`
}
