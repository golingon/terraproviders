// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVpnGateway(name string, args VpnGatewayArgs) *VpnGateway {
	return &VpnGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpnGateway)(nil)

type VpnGateway struct {
	Name  string
	Args  VpnGatewayArgs
	state *vpnGatewayState
}

func (vg *VpnGateway) Type() string {
	return "aws_vpn_gateway"
}

func (vg *VpnGateway) LocalName() string {
	return vg.Name
}

func (vg *VpnGateway) Configuration() interface{} {
	return vg.Args
}

func (vg *VpnGateway) Attributes() vpnGatewayAttributes {
	return vpnGatewayAttributes{ref: terra.ReferenceResource(vg)}
}

func (vg *VpnGateway) ImportState(av io.Reader) error {
	vg.state = &vpnGatewayState{}
	if err := json.NewDecoder(av).Decode(vg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vg.Type(), vg.LocalName(), err)
	}
	return nil
}

func (vg *VpnGateway) State() (*vpnGatewayState, bool) {
	return vg.state, vg.state != nil
}

func (vg *VpnGateway) StateMust() *vpnGatewayState {
	if vg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vg.Type(), vg.LocalName()))
	}
	return vg.state
}

func (vg *VpnGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(vg)
}

type VpnGatewayArgs struct {
	// AmazonSideAsn: string, optional
	AmazonSideAsn terra.StringValue `hcl:"amazon_side_asn,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcId: string, optional
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// DependsOn contains resources that VpnGateway depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vpnGatewayAttributes struct {
	ref terra.Reference
}

func (vg vpnGatewayAttributes) AmazonSideAsn() terra.StringValue {
	return terra.ReferenceString(vg.ref.Append("amazon_side_asn"))
}

func (vg vpnGatewayAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(vg.ref.Append("arn"))
}

func (vg vpnGatewayAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceString(vg.ref.Append("availability_zone"))
}

func (vg vpnGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vg.ref.Append("id"))
}

func (vg vpnGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vg.ref.Append("tags"))
}

func (vg vpnGatewayAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vg.ref.Append("tags_all"))
}

func (vg vpnGatewayAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(vg.ref.Append("vpc_id"))
}

type vpnGatewayState struct {
	AmazonSideAsn    string            `json:"amazon_side_asn"`
	Arn              string            `json:"arn"`
	AvailabilityZone string            `json:"availability_zone"`
	Id               string            `json:"id"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
	VpcId            string            `json:"vpc_id"`
}
