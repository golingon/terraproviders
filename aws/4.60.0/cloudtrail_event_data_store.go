// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudtraileventdatastore "github.com/golingon/terraproviders/aws/4.60.0/cloudtraileventdatastore"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudtrailEventDataStore(name string, args CloudtrailEventDataStoreArgs) *CloudtrailEventDataStore {
	return &CloudtrailEventDataStore{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudtrailEventDataStore)(nil)

type CloudtrailEventDataStore struct {
	Name  string
	Args  CloudtrailEventDataStoreArgs
	state *cloudtrailEventDataStoreState
}

func (ceds *CloudtrailEventDataStore) Type() string {
	return "aws_cloudtrail_event_data_store"
}

func (ceds *CloudtrailEventDataStore) LocalName() string {
	return ceds.Name
}

func (ceds *CloudtrailEventDataStore) Configuration() interface{} {
	return ceds.Args
}

func (ceds *CloudtrailEventDataStore) Attributes() cloudtrailEventDataStoreAttributes {
	return cloudtrailEventDataStoreAttributes{ref: terra.ReferenceResource(ceds)}
}

func (ceds *CloudtrailEventDataStore) ImportState(av io.Reader) error {
	ceds.state = &cloudtrailEventDataStoreState{}
	if err := json.NewDecoder(av).Decode(ceds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ceds.Type(), ceds.LocalName(), err)
	}
	return nil
}

func (ceds *CloudtrailEventDataStore) State() (*cloudtrailEventDataStoreState, bool) {
	return ceds.state, ceds.state != nil
}

func (ceds *CloudtrailEventDataStore) StateMust() *cloudtrailEventDataStoreState {
	if ceds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ceds.Type(), ceds.LocalName()))
	}
	return ceds.state
}

func (ceds *CloudtrailEventDataStore) DependOn() terra.Reference {
	return terra.ReferenceResource(ceds)
}

type CloudtrailEventDataStoreArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// MultiRegionEnabled: bool, optional
	MultiRegionEnabled terra.BoolValue `hcl:"multi_region_enabled,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OrganizationEnabled: bool, optional
	OrganizationEnabled terra.BoolValue `hcl:"organization_enabled,attr"`
	// RetentionPeriod: number, optional
	RetentionPeriod terra.NumberValue `hcl:"retention_period,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TerminationProtectionEnabled: bool, optional
	TerminationProtectionEnabled terra.BoolValue `hcl:"termination_protection_enabled,attr"`
	// AdvancedEventSelector: min=0
	AdvancedEventSelector []cloudtraileventdatastore.AdvancedEventSelector `hcl:"advanced_event_selector,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *cloudtraileventdatastore.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudtrailEventDataStore depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudtrailEventDataStoreAttributes struct {
	ref terra.Reference
}

func (ceds cloudtrailEventDataStoreAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ceds.ref.Append("arn"))
}

func (ceds cloudtrailEventDataStoreAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ceds.ref.Append("id"))
}

func (ceds cloudtrailEventDataStoreAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(ceds.ref.Append("kms_key_id"))
}

func (ceds cloudtrailEventDataStoreAttributes) MultiRegionEnabled() terra.BoolValue {
	return terra.ReferenceBool(ceds.ref.Append("multi_region_enabled"))
}

func (ceds cloudtrailEventDataStoreAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ceds.ref.Append("name"))
}

func (ceds cloudtrailEventDataStoreAttributes) OrganizationEnabled() terra.BoolValue {
	return terra.ReferenceBool(ceds.ref.Append("organization_enabled"))
}

func (ceds cloudtrailEventDataStoreAttributes) RetentionPeriod() terra.NumberValue {
	return terra.ReferenceNumber(ceds.ref.Append("retention_period"))
}

func (ceds cloudtrailEventDataStoreAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ceds.ref.Append("tags"))
}

func (ceds cloudtrailEventDataStoreAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ceds.ref.Append("tags_all"))
}

func (ceds cloudtrailEventDataStoreAttributes) TerminationProtectionEnabled() terra.BoolValue {
	return terra.ReferenceBool(ceds.ref.Append("termination_protection_enabled"))
}

func (ceds cloudtrailEventDataStoreAttributes) AdvancedEventSelector() terra.ListValue[cloudtraileventdatastore.AdvancedEventSelectorAttributes] {
	return terra.ReferenceList[cloudtraileventdatastore.AdvancedEventSelectorAttributes](ceds.ref.Append("advanced_event_selector"))
}

func (ceds cloudtrailEventDataStoreAttributes) Timeouts() cloudtraileventdatastore.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudtraileventdatastore.TimeoutsAttributes](ceds.ref.Append("timeouts"))
}

type cloudtrailEventDataStoreState struct {
	Arn                          string                                                `json:"arn"`
	Id                           string                                                `json:"id"`
	KmsKeyId                     string                                                `json:"kms_key_id"`
	MultiRegionEnabled           bool                                                  `json:"multi_region_enabled"`
	Name                         string                                                `json:"name"`
	OrganizationEnabled          bool                                                  `json:"organization_enabled"`
	RetentionPeriod              float64                                               `json:"retention_period"`
	Tags                         map[string]string                                     `json:"tags"`
	TagsAll                      map[string]string                                     `json:"tags_all"`
	TerminationProtectionEnabled bool                                                  `json:"termination_protection_enabled"`
	AdvancedEventSelector        []cloudtraileventdatastore.AdvancedEventSelectorState `json:"advanced_event_selector"`
	Timeouts                     *cloudtraileventdatastore.TimeoutsState               `json:"timeouts"`
}
