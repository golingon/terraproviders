// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	grafanaworkspace "github.com/golingon/terraproviders/aws/4.60.0/grafanaworkspace"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGrafanaWorkspace(name string, args GrafanaWorkspaceArgs) *GrafanaWorkspace {
	return &GrafanaWorkspace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GrafanaWorkspace)(nil)

type GrafanaWorkspace struct {
	Name  string
	Args  GrafanaWorkspaceArgs
	state *grafanaWorkspaceState
}

func (gw *GrafanaWorkspace) Type() string {
	return "aws_grafana_workspace"
}

func (gw *GrafanaWorkspace) LocalName() string {
	return gw.Name
}

func (gw *GrafanaWorkspace) Configuration() interface{} {
	return gw.Args
}

func (gw *GrafanaWorkspace) Attributes() grafanaWorkspaceAttributes {
	return grafanaWorkspaceAttributes{ref: terra.ReferenceResource(gw)}
}

func (gw *GrafanaWorkspace) ImportState(av io.Reader) error {
	gw.state = &grafanaWorkspaceState{}
	if err := json.NewDecoder(av).Decode(gw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gw.Type(), gw.LocalName(), err)
	}
	return nil
}

func (gw *GrafanaWorkspace) State() (*grafanaWorkspaceState, bool) {
	return gw.state, gw.state != nil
}

func (gw *GrafanaWorkspace) StateMust() *grafanaWorkspaceState {
	if gw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gw.Type(), gw.LocalName()))
	}
	return gw.state
}

func (gw *GrafanaWorkspace) DependOn() terra.Reference {
	return terra.ReferenceResource(gw)
}

type GrafanaWorkspaceArgs struct {
	// AccountAccessType: string, required
	AccountAccessType terra.StringValue `hcl:"account_access_type,attr" validate:"required"`
	// AuthenticationProviders: list of string, required
	AuthenticationProviders terra.ListValue[terra.StringValue] `hcl:"authentication_providers,attr" validate:"required"`
	// Configuration: string, optional
	Configuration terra.StringValue `hcl:"configuration,attr"`
	// DataSources: list of string, optional
	DataSources terra.ListValue[terra.StringValue] `hcl:"data_sources,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NotificationDestinations: list of string, optional
	NotificationDestinations terra.ListValue[terra.StringValue] `hcl:"notification_destinations,attr"`
	// OrganizationRoleName: string, optional
	OrganizationRoleName terra.StringValue `hcl:"organization_role_name,attr"`
	// OrganizationalUnits: list of string, optional
	OrganizationalUnits terra.ListValue[terra.StringValue] `hcl:"organizational_units,attr"`
	// PermissionType: string, required
	PermissionType terra.StringValue `hcl:"permission_type,attr" validate:"required"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// StackSetName: string, optional
	StackSetName terra.StringValue `hcl:"stack_set_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// NetworkAccessControl: optional
	NetworkAccessControl *grafanaworkspace.NetworkAccessControl `hcl:"network_access_control,block"`
	// Timeouts: optional
	Timeouts *grafanaworkspace.Timeouts `hcl:"timeouts,block"`
	// VpcConfiguration: optional
	VpcConfiguration *grafanaworkspace.VpcConfiguration `hcl:"vpc_configuration,block"`
	// DependsOn contains resources that GrafanaWorkspace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type grafanaWorkspaceAttributes struct {
	ref terra.Reference
}

func (gw grafanaWorkspaceAttributes) AccountAccessType() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("account_access_type"))
}

func (gw grafanaWorkspaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("arn"))
}

func (gw grafanaWorkspaceAttributes) AuthenticationProviders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](gw.ref.Append("authentication_providers"))
}

func (gw grafanaWorkspaceAttributes) Configuration() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("configuration"))
}

func (gw grafanaWorkspaceAttributes) DataSources() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](gw.ref.Append("data_sources"))
}

func (gw grafanaWorkspaceAttributes) Description() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("description"))
}

func (gw grafanaWorkspaceAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("endpoint"))
}

func (gw grafanaWorkspaceAttributes) GrafanaVersion() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("grafana_version"))
}

func (gw grafanaWorkspaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("id"))
}

func (gw grafanaWorkspaceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("name"))
}

func (gw grafanaWorkspaceAttributes) NotificationDestinations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](gw.ref.Append("notification_destinations"))
}

func (gw grafanaWorkspaceAttributes) OrganizationRoleName() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("organization_role_name"))
}

func (gw grafanaWorkspaceAttributes) OrganizationalUnits() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](gw.ref.Append("organizational_units"))
}

func (gw grafanaWorkspaceAttributes) PermissionType() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("permission_type"))
}

func (gw grafanaWorkspaceAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("role_arn"))
}

func (gw grafanaWorkspaceAttributes) SamlConfigurationStatus() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("saml_configuration_status"))
}

func (gw grafanaWorkspaceAttributes) StackSetName() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("stack_set_name"))
}

func (gw grafanaWorkspaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gw.ref.Append("tags"))
}

func (gw grafanaWorkspaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gw.ref.Append("tags_all"))
}

func (gw grafanaWorkspaceAttributes) NetworkAccessControl() terra.ListValue[grafanaworkspace.NetworkAccessControlAttributes] {
	return terra.ReferenceList[grafanaworkspace.NetworkAccessControlAttributes](gw.ref.Append("network_access_control"))
}

func (gw grafanaWorkspaceAttributes) Timeouts() grafanaworkspace.TimeoutsAttributes {
	return terra.ReferenceSingle[grafanaworkspace.TimeoutsAttributes](gw.ref.Append("timeouts"))
}

func (gw grafanaWorkspaceAttributes) VpcConfiguration() terra.ListValue[grafanaworkspace.VpcConfigurationAttributes] {
	return terra.ReferenceList[grafanaworkspace.VpcConfigurationAttributes](gw.ref.Append("vpc_configuration"))
}

type grafanaWorkspaceState struct {
	AccountAccessType        string                                       `json:"account_access_type"`
	Arn                      string                                       `json:"arn"`
	AuthenticationProviders  []string                                     `json:"authentication_providers"`
	Configuration            string                                       `json:"configuration"`
	DataSources              []string                                     `json:"data_sources"`
	Description              string                                       `json:"description"`
	Endpoint                 string                                       `json:"endpoint"`
	GrafanaVersion           string                                       `json:"grafana_version"`
	Id                       string                                       `json:"id"`
	Name                     string                                       `json:"name"`
	NotificationDestinations []string                                     `json:"notification_destinations"`
	OrganizationRoleName     string                                       `json:"organization_role_name"`
	OrganizationalUnits      []string                                     `json:"organizational_units"`
	PermissionType           string                                       `json:"permission_type"`
	RoleArn                  string                                       `json:"role_arn"`
	SamlConfigurationStatus  string                                       `json:"saml_configuration_status"`
	StackSetName             string                                       `json:"stack_set_name"`
	Tags                     map[string]string                            `json:"tags"`
	TagsAll                  map[string]string                            `json:"tags_all"`
	NetworkAccessControl     []grafanaworkspace.NetworkAccessControlState `json:"network_access_control"`
	Timeouts                 *grafanaworkspace.TimeoutsState              `json:"timeouts"`
	VpcConfiguration         []grafanaworkspace.VpcConfigurationState     `json:"vpc_configuration"`
}
