// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCognitoUserPoolDomain(name string, args CognitoUserPoolDomainArgs) *CognitoUserPoolDomain {
	return &CognitoUserPoolDomain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CognitoUserPoolDomain)(nil)

type CognitoUserPoolDomain struct {
	Name  string
	Args  CognitoUserPoolDomainArgs
	state *cognitoUserPoolDomainState
}

func (cupd *CognitoUserPoolDomain) Type() string {
	return "aws_cognito_user_pool_domain"
}

func (cupd *CognitoUserPoolDomain) LocalName() string {
	return cupd.Name
}

func (cupd *CognitoUserPoolDomain) Configuration() interface{} {
	return cupd.Args
}

func (cupd *CognitoUserPoolDomain) Attributes() cognitoUserPoolDomainAttributes {
	return cognitoUserPoolDomainAttributes{ref: terra.ReferenceResource(cupd)}
}

func (cupd *CognitoUserPoolDomain) ImportState(av io.Reader) error {
	cupd.state = &cognitoUserPoolDomainState{}
	if err := json.NewDecoder(av).Decode(cupd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cupd.Type(), cupd.LocalName(), err)
	}
	return nil
}

func (cupd *CognitoUserPoolDomain) State() (*cognitoUserPoolDomainState, bool) {
	return cupd.state, cupd.state != nil
}

func (cupd *CognitoUserPoolDomain) StateMust() *cognitoUserPoolDomainState {
	if cupd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cupd.Type(), cupd.LocalName()))
	}
	return cupd.state
}

func (cupd *CognitoUserPoolDomain) DependOn() terra.Reference {
	return terra.ReferenceResource(cupd)
}

type CognitoUserPoolDomainArgs struct {
	// CertificateArn: string, optional
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr"`
	// Domain: string, required
	Domain terra.StringValue `hcl:"domain,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// UserPoolId: string, required
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
	// DependsOn contains resources that CognitoUserPoolDomain depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cognitoUserPoolDomainAttributes struct {
	ref terra.Reference
}

func (cupd cognitoUserPoolDomainAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceString(cupd.ref.Append("aws_account_id"))
}

func (cupd cognitoUserPoolDomainAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceString(cupd.ref.Append("certificate_arn"))
}

func (cupd cognitoUserPoolDomainAttributes) CloudfrontDistribution() terra.StringValue {
	return terra.ReferenceString(cupd.ref.Append("cloudfront_distribution"))
}

func (cupd cognitoUserPoolDomainAttributes) CloudfrontDistributionArn() terra.StringValue {
	return terra.ReferenceString(cupd.ref.Append("cloudfront_distribution_arn"))
}

func (cupd cognitoUserPoolDomainAttributes) CloudfrontDistributionZoneId() terra.StringValue {
	return terra.ReferenceString(cupd.ref.Append("cloudfront_distribution_zone_id"))
}

func (cupd cognitoUserPoolDomainAttributes) Domain() terra.StringValue {
	return terra.ReferenceString(cupd.ref.Append("domain"))
}

func (cupd cognitoUserPoolDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cupd.ref.Append("id"))
}

func (cupd cognitoUserPoolDomainAttributes) S3Bucket() terra.StringValue {
	return terra.ReferenceString(cupd.ref.Append("s3_bucket"))
}

func (cupd cognitoUserPoolDomainAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceString(cupd.ref.Append("user_pool_id"))
}

func (cupd cognitoUserPoolDomainAttributes) Version() terra.StringValue {
	return terra.ReferenceString(cupd.ref.Append("version"))
}

type cognitoUserPoolDomainState struct {
	AwsAccountId                 string `json:"aws_account_id"`
	CertificateArn               string `json:"certificate_arn"`
	CloudfrontDistribution       string `json:"cloudfront_distribution"`
	CloudfrontDistributionArn    string `json:"cloudfront_distribution_arn"`
	CloudfrontDistributionZoneId string `json:"cloudfront_distribution_zone_id"`
	Domain                       string `json:"domain"`
	Id                           string `json:"id"`
	S3Bucket                     string `json:"s3_bucket"`
	UserPoolId                   string `json:"user_pool_id"`
	Version                      string `json:"version"`
}
