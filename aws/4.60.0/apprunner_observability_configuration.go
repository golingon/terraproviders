// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	apprunnerobservabilityconfiguration "github.com/golingon/terraproviders/aws/4.60.0/apprunnerobservabilityconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApprunnerObservabilityConfiguration(name string, args ApprunnerObservabilityConfigurationArgs) *ApprunnerObservabilityConfiguration {
	return &ApprunnerObservabilityConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApprunnerObservabilityConfiguration)(nil)

type ApprunnerObservabilityConfiguration struct {
	Name  string
	Args  ApprunnerObservabilityConfigurationArgs
	state *apprunnerObservabilityConfigurationState
}

func (aoc *ApprunnerObservabilityConfiguration) Type() string {
	return "aws_apprunner_observability_configuration"
}

func (aoc *ApprunnerObservabilityConfiguration) LocalName() string {
	return aoc.Name
}

func (aoc *ApprunnerObservabilityConfiguration) Configuration() interface{} {
	return aoc.Args
}

func (aoc *ApprunnerObservabilityConfiguration) Attributes() apprunnerObservabilityConfigurationAttributes {
	return apprunnerObservabilityConfigurationAttributes{ref: terra.ReferenceResource(aoc)}
}

func (aoc *ApprunnerObservabilityConfiguration) ImportState(av io.Reader) error {
	aoc.state = &apprunnerObservabilityConfigurationState{}
	if err := json.NewDecoder(av).Decode(aoc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aoc.Type(), aoc.LocalName(), err)
	}
	return nil
}

func (aoc *ApprunnerObservabilityConfiguration) State() (*apprunnerObservabilityConfigurationState, bool) {
	return aoc.state, aoc.state != nil
}

func (aoc *ApprunnerObservabilityConfiguration) StateMust() *apprunnerObservabilityConfigurationState {
	if aoc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aoc.Type(), aoc.LocalName()))
	}
	return aoc.state
}

func (aoc *ApprunnerObservabilityConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(aoc)
}

type ApprunnerObservabilityConfigurationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ObservabilityConfigurationName: string, required
	ObservabilityConfigurationName terra.StringValue `hcl:"observability_configuration_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TraceConfiguration: optional
	TraceConfiguration *apprunnerobservabilityconfiguration.TraceConfiguration `hcl:"trace_configuration,block"`
	// DependsOn contains resources that ApprunnerObservabilityConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apprunnerObservabilityConfigurationAttributes struct {
	ref terra.Reference
}

func (aoc apprunnerObservabilityConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(aoc.ref.Append("arn"))
}

func (aoc apprunnerObservabilityConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aoc.ref.Append("id"))
}

func (aoc apprunnerObservabilityConfigurationAttributes) Latest() terra.BoolValue {
	return terra.ReferenceBool(aoc.ref.Append("latest"))
}

func (aoc apprunnerObservabilityConfigurationAttributes) ObservabilityConfigurationName() terra.StringValue {
	return terra.ReferenceString(aoc.ref.Append("observability_configuration_name"))
}

func (aoc apprunnerObservabilityConfigurationAttributes) ObservabilityConfigurationRevision() terra.NumberValue {
	return terra.ReferenceNumber(aoc.ref.Append("observability_configuration_revision"))
}

func (aoc apprunnerObservabilityConfigurationAttributes) Status() terra.StringValue {
	return terra.ReferenceString(aoc.ref.Append("status"))
}

func (aoc apprunnerObservabilityConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aoc.ref.Append("tags"))
}

func (aoc apprunnerObservabilityConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aoc.ref.Append("tags_all"))
}

func (aoc apprunnerObservabilityConfigurationAttributes) TraceConfiguration() terra.ListValue[apprunnerobservabilityconfiguration.TraceConfigurationAttributes] {
	return terra.ReferenceList[apprunnerobservabilityconfiguration.TraceConfigurationAttributes](aoc.ref.Append("trace_configuration"))
}

type apprunnerObservabilityConfigurationState struct {
	Arn                                string                                                        `json:"arn"`
	Id                                 string                                                        `json:"id"`
	Latest                             bool                                                          `json:"latest"`
	ObservabilityConfigurationName     string                                                        `json:"observability_configuration_name"`
	ObservabilityConfigurationRevision float64                                                       `json:"observability_configuration_revision"`
	Status                             string                                                        `json:"status"`
	Tags                               map[string]string                                             `json:"tags"`
	TagsAll                            map[string]string                                             `json:"tags_all"`
	TraceConfiguration                 []apprunnerobservabilityconfiguration.TraceConfigurationState `json:"trace_configuration"`
}
