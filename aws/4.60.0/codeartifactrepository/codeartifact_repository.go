// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package codeartifactrepository

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ExternalConnections struct {
	// ExternalConnectionName: string, required
	ExternalConnectionName terra.StringValue `hcl:"external_connection_name,attr" validate:"required"`
}

type Upstream struct {
	// RepositoryName: string, required
	RepositoryName terra.StringValue `hcl:"repository_name,attr" validate:"required"`
}

type ExternalConnectionsAttributes struct {
	ref terra.Reference
}

func (ec ExternalConnectionsAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec ExternalConnectionsAttributes) InternalWithRef(ref terra.Reference) ExternalConnectionsAttributes {
	return ExternalConnectionsAttributes{ref: ref}
}

func (ec ExternalConnectionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec ExternalConnectionsAttributes) ExternalConnectionName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("external_connection_name"))
}

func (ec ExternalConnectionsAttributes) PackageFormat() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("package_format"))
}

func (ec ExternalConnectionsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("status"))
}

type UpstreamAttributes struct {
	ref terra.Reference
}

func (u UpstreamAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u UpstreamAttributes) InternalWithRef(ref terra.Reference) UpstreamAttributes {
	return UpstreamAttributes{ref: ref}
}

func (u UpstreamAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return u.ref.InternalTokens()
}

func (u UpstreamAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("repository_name"))
}

type ExternalConnectionsState struct {
	ExternalConnectionName string `json:"external_connection_name"`
	PackageFormat          string `json:"package_format"`
	Status                 string `json:"status"`
}

type UpstreamState struct {
	RepositoryName string `json:"repository_name"`
}
