// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	gluedatacatalogencryptionsettings "github.com/golingon/terraproviders/aws/4.60.0/gluedatacatalogencryptionsettings"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGlueDataCatalogEncryptionSettings(name string, args GlueDataCatalogEncryptionSettingsArgs) *GlueDataCatalogEncryptionSettings {
	return &GlueDataCatalogEncryptionSettings{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GlueDataCatalogEncryptionSettings)(nil)

type GlueDataCatalogEncryptionSettings struct {
	Name  string
	Args  GlueDataCatalogEncryptionSettingsArgs
	state *glueDataCatalogEncryptionSettingsState
}

func (gdces *GlueDataCatalogEncryptionSettings) Type() string {
	return "aws_glue_data_catalog_encryption_settings"
}

func (gdces *GlueDataCatalogEncryptionSettings) LocalName() string {
	return gdces.Name
}

func (gdces *GlueDataCatalogEncryptionSettings) Configuration() interface{} {
	return gdces.Args
}

func (gdces *GlueDataCatalogEncryptionSettings) Attributes() glueDataCatalogEncryptionSettingsAttributes {
	return glueDataCatalogEncryptionSettingsAttributes{ref: terra.ReferenceResource(gdces)}
}

func (gdces *GlueDataCatalogEncryptionSettings) ImportState(av io.Reader) error {
	gdces.state = &glueDataCatalogEncryptionSettingsState{}
	if err := json.NewDecoder(av).Decode(gdces.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gdces.Type(), gdces.LocalName(), err)
	}
	return nil
}

func (gdces *GlueDataCatalogEncryptionSettings) State() (*glueDataCatalogEncryptionSettingsState, bool) {
	return gdces.state, gdces.state != nil
}

func (gdces *GlueDataCatalogEncryptionSettings) StateMust() *glueDataCatalogEncryptionSettingsState {
	if gdces.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gdces.Type(), gdces.LocalName()))
	}
	return gdces.state
}

func (gdces *GlueDataCatalogEncryptionSettings) DependOn() terra.Reference {
	return terra.ReferenceResource(gdces)
}

type GlueDataCatalogEncryptionSettingsArgs struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DataCatalogEncryptionSettings: required
	DataCatalogEncryptionSettings *gluedatacatalogencryptionsettings.DataCatalogEncryptionSettings `hcl:"data_catalog_encryption_settings,block" validate:"required"`
	// DependsOn contains resources that GlueDataCatalogEncryptionSettings depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type glueDataCatalogEncryptionSettingsAttributes struct {
	ref terra.Reference
}

func (gdces glueDataCatalogEncryptionSettingsAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceString(gdces.ref.Append("catalog_id"))
}

func (gdces glueDataCatalogEncryptionSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gdces.ref.Append("id"))
}

func (gdces glueDataCatalogEncryptionSettingsAttributes) DataCatalogEncryptionSettings() terra.ListValue[gluedatacatalogencryptionsettings.DataCatalogEncryptionSettingsAttributes] {
	return terra.ReferenceList[gluedatacatalogencryptionsettings.DataCatalogEncryptionSettingsAttributes](gdces.ref.Append("data_catalog_encryption_settings"))
}

type glueDataCatalogEncryptionSettingsState struct {
	CatalogId                     string                                                                 `json:"catalog_id"`
	Id                            string                                                                 `json:"id"`
	DataCatalogEncryptionSettings []gluedatacatalogencryptionsettings.DataCatalogEncryptionSettingsState `json:"data_catalog_encryption_settings"`
}
