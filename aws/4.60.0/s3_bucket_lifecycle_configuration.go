// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3bucketlifecycleconfiguration "github.com/golingon/terraproviders/aws/4.60.0/s3bucketlifecycleconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketLifecycleConfiguration(name string, args S3BucketLifecycleConfigurationArgs) *S3BucketLifecycleConfiguration {
	return &S3BucketLifecycleConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketLifecycleConfiguration)(nil)

type S3BucketLifecycleConfiguration struct {
	Name  string
	Args  S3BucketLifecycleConfigurationArgs
	state *s3BucketLifecycleConfigurationState
}

func (sblc *S3BucketLifecycleConfiguration) Type() string {
	return "aws_s3_bucket_lifecycle_configuration"
}

func (sblc *S3BucketLifecycleConfiguration) LocalName() string {
	return sblc.Name
}

func (sblc *S3BucketLifecycleConfiguration) Configuration() interface{} {
	return sblc.Args
}

func (sblc *S3BucketLifecycleConfiguration) Attributes() s3BucketLifecycleConfigurationAttributes {
	return s3BucketLifecycleConfigurationAttributes{ref: terra.ReferenceResource(sblc)}
}

func (sblc *S3BucketLifecycleConfiguration) ImportState(av io.Reader) error {
	sblc.state = &s3BucketLifecycleConfigurationState{}
	if err := json.NewDecoder(av).Decode(sblc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sblc.Type(), sblc.LocalName(), err)
	}
	return nil
}

func (sblc *S3BucketLifecycleConfiguration) State() (*s3BucketLifecycleConfigurationState, bool) {
	return sblc.state, sblc.state != nil
}

func (sblc *S3BucketLifecycleConfiguration) StateMust() *s3BucketLifecycleConfigurationState {
	if sblc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sblc.Type(), sblc.LocalName()))
	}
	return sblc.state
}

func (sblc *S3BucketLifecycleConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(sblc)
}

type S3BucketLifecycleConfigurationArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Rule: min=1
	Rule []s3bucketlifecycleconfiguration.Rule `hcl:"rule,block" validate:"min=1"`
	// DependsOn contains resources that S3BucketLifecycleConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketLifecycleConfigurationAttributes struct {
	ref terra.Reference
}

func (sblc s3BucketLifecycleConfigurationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sblc.ref.Append("bucket"))
}

func (sblc s3BucketLifecycleConfigurationAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceString(sblc.ref.Append("expected_bucket_owner"))
}

func (sblc s3BucketLifecycleConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sblc.ref.Append("id"))
}

func (sblc s3BucketLifecycleConfigurationAttributes) Rule() terra.ListValue[s3bucketlifecycleconfiguration.RuleAttributes] {
	return terra.ReferenceList[s3bucketlifecycleconfiguration.RuleAttributes](sblc.ref.Append("rule"))
}

type s3BucketLifecycleConfigurationState struct {
	Bucket              string                                     `json:"bucket"`
	ExpectedBucketOwner string                                     `json:"expected_bucket_owner"`
	Id                  string                                     `json:"id"`
	Rule                []s3bucketlifecycleconfiguration.RuleState `json:"rule"`
}
