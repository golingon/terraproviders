// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	datas3controlmultiregionaccesspoint "github.com/golingon/terraproviders/aws/4.60.0/datas3controlmultiregionaccesspoint"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataS3ControlMultiRegionAccessPoint(name string, args DataS3ControlMultiRegionAccessPointArgs) *DataS3ControlMultiRegionAccessPoint {
	return &DataS3ControlMultiRegionAccessPoint{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataS3ControlMultiRegionAccessPoint)(nil)

type DataS3ControlMultiRegionAccessPoint struct {
	Name string
	Args DataS3ControlMultiRegionAccessPointArgs
}

func (smrap *DataS3ControlMultiRegionAccessPoint) DataSource() string {
	return "aws_s3control_multi_region_access_point"
}

func (smrap *DataS3ControlMultiRegionAccessPoint) LocalName() string {
	return smrap.Name
}

func (smrap *DataS3ControlMultiRegionAccessPoint) Configuration() interface{} {
	return smrap.Args
}

func (smrap *DataS3ControlMultiRegionAccessPoint) Attributes() dataS3ControlMultiRegionAccessPointAttributes {
	return dataS3ControlMultiRegionAccessPointAttributes{ref: terra.ReferenceDataResource(smrap)}
}

type DataS3ControlMultiRegionAccessPointArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PublicAccessBlock: min=0
	PublicAccessBlock []datas3controlmultiregionaccesspoint.PublicAccessBlock `hcl:"public_access_block,block" validate:"min=0"`
	// Regions: min=0
	Regions []datas3controlmultiregionaccesspoint.Regions `hcl:"regions,block" validate:"min=0"`
}
type dataS3ControlMultiRegionAccessPointAttributes struct {
	ref terra.Reference
}

func (smrap dataS3ControlMultiRegionAccessPointAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("account_id"))
}

func (smrap dataS3ControlMultiRegionAccessPointAttributes) Alias() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("alias"))
}

func (smrap dataS3ControlMultiRegionAccessPointAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("arn"))
}

func (smrap dataS3ControlMultiRegionAccessPointAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("created_at"))
}

func (smrap dataS3ControlMultiRegionAccessPointAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("domain_name"))
}

func (smrap dataS3ControlMultiRegionAccessPointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("id"))
}

func (smrap dataS3ControlMultiRegionAccessPointAttributes) Name() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("name"))
}

func (smrap dataS3ControlMultiRegionAccessPointAttributes) Status() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("status"))
}

func (smrap dataS3ControlMultiRegionAccessPointAttributes) PublicAccessBlock() terra.ListValue[datas3controlmultiregionaccesspoint.PublicAccessBlockAttributes] {
	return terra.ReferenceList[datas3controlmultiregionaccesspoint.PublicAccessBlockAttributes](smrap.ref.Append("public_access_block"))
}

func (smrap dataS3ControlMultiRegionAccessPointAttributes) Regions() terra.ListValue[datas3controlmultiregionaccesspoint.RegionsAttributes] {
	return terra.ReferenceList[datas3controlmultiregionaccesspoint.RegionsAttributes](smrap.ref.Append("regions"))
}
