// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	prometheusworkspace "github.com/golingon/terraproviders/aws/4.60.0/prometheusworkspace"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPrometheusWorkspace(name string, args PrometheusWorkspaceArgs) *PrometheusWorkspace {
	return &PrometheusWorkspace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PrometheusWorkspace)(nil)

type PrometheusWorkspace struct {
	Name  string
	Args  PrometheusWorkspaceArgs
	state *prometheusWorkspaceState
}

func (pw *PrometheusWorkspace) Type() string {
	return "aws_prometheus_workspace"
}

func (pw *PrometheusWorkspace) LocalName() string {
	return pw.Name
}

func (pw *PrometheusWorkspace) Configuration() interface{} {
	return pw.Args
}

func (pw *PrometheusWorkspace) Attributes() prometheusWorkspaceAttributes {
	return prometheusWorkspaceAttributes{ref: terra.ReferenceResource(pw)}
}

func (pw *PrometheusWorkspace) ImportState(av io.Reader) error {
	pw.state = &prometheusWorkspaceState{}
	if err := json.NewDecoder(av).Decode(pw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pw.Type(), pw.LocalName(), err)
	}
	return nil
}

func (pw *PrometheusWorkspace) State() (*prometheusWorkspaceState, bool) {
	return pw.state, pw.state != nil
}

func (pw *PrometheusWorkspace) StateMust() *prometheusWorkspaceState {
	if pw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pw.Type(), pw.LocalName()))
	}
	return pw.state
}

func (pw *PrometheusWorkspace) DependOn() terra.Reference {
	return terra.ReferenceResource(pw)
}

type PrometheusWorkspaceArgs struct {
	// Alias: string, optional
	Alias terra.StringValue `hcl:"alias,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// LoggingConfiguration: optional
	LoggingConfiguration *prometheusworkspace.LoggingConfiguration `hcl:"logging_configuration,block"`
	// DependsOn contains resources that PrometheusWorkspace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type prometheusWorkspaceAttributes struct {
	ref terra.Reference
}

func (pw prometheusWorkspaceAttributes) Alias() terra.StringValue {
	return terra.ReferenceString(pw.ref.Append("alias"))
}

func (pw prometheusWorkspaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(pw.ref.Append("arn"))
}

func (pw prometheusWorkspaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pw.ref.Append("id"))
}

func (pw prometheusWorkspaceAttributes) PrometheusEndpoint() terra.StringValue {
	return terra.ReferenceString(pw.ref.Append("prometheus_endpoint"))
}

func (pw prometheusWorkspaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pw.ref.Append("tags"))
}

func (pw prometheusWorkspaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pw.ref.Append("tags_all"))
}

func (pw prometheusWorkspaceAttributes) LoggingConfiguration() terra.ListValue[prometheusworkspace.LoggingConfigurationAttributes] {
	return terra.ReferenceList[prometheusworkspace.LoggingConfigurationAttributes](pw.ref.Append("logging_configuration"))
}

type prometheusWorkspaceState struct {
	Alias                string                                          `json:"alias"`
	Arn                  string                                          `json:"arn"`
	Id                   string                                          `json:"id"`
	PrometheusEndpoint   string                                          `json:"prometheus_endpoint"`
	Tags                 map[string]string                               `json:"tags"`
	TagsAll              map[string]string                               `json:"tags_all"`
	LoggingConfiguration []prometheusworkspace.LoggingConfigurationState `json:"logging_configuration"`
}
