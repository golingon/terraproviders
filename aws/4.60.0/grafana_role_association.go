// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	grafanaroleassociation "github.com/golingon/terraproviders/aws/4.60.0/grafanaroleassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGrafanaRoleAssociation(name string, args GrafanaRoleAssociationArgs) *GrafanaRoleAssociation {
	return &GrafanaRoleAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GrafanaRoleAssociation)(nil)

type GrafanaRoleAssociation struct {
	Name  string
	Args  GrafanaRoleAssociationArgs
	state *grafanaRoleAssociationState
}

func (gra *GrafanaRoleAssociation) Type() string {
	return "aws_grafana_role_association"
}

func (gra *GrafanaRoleAssociation) LocalName() string {
	return gra.Name
}

func (gra *GrafanaRoleAssociation) Configuration() interface{} {
	return gra.Args
}

func (gra *GrafanaRoleAssociation) Attributes() grafanaRoleAssociationAttributes {
	return grafanaRoleAssociationAttributes{ref: terra.ReferenceResource(gra)}
}

func (gra *GrafanaRoleAssociation) ImportState(av io.Reader) error {
	gra.state = &grafanaRoleAssociationState{}
	if err := json.NewDecoder(av).Decode(gra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gra.Type(), gra.LocalName(), err)
	}
	return nil
}

func (gra *GrafanaRoleAssociation) State() (*grafanaRoleAssociationState, bool) {
	return gra.state, gra.state != nil
}

func (gra *GrafanaRoleAssociation) StateMust() *grafanaRoleAssociationState {
	if gra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gra.Type(), gra.LocalName()))
	}
	return gra.state
}

func (gra *GrafanaRoleAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(gra)
}

type GrafanaRoleAssociationArgs struct {
	// GroupIds: set of string, optional
	GroupIds terra.SetValue[terra.StringValue] `hcl:"group_ids,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// UserIds: set of string, optional
	UserIds terra.SetValue[terra.StringValue] `hcl:"user_ids,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *grafanaroleassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that GrafanaRoleAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type grafanaRoleAssociationAttributes struct {
	ref terra.Reference
}

func (gra grafanaRoleAssociationAttributes) GroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](gra.ref.Append("group_ids"))
}

func (gra grafanaRoleAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gra.ref.Append("id"))
}

func (gra grafanaRoleAssociationAttributes) Role() terra.StringValue {
	return terra.ReferenceString(gra.ref.Append("role"))
}

func (gra grafanaRoleAssociationAttributes) UserIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](gra.ref.Append("user_ids"))
}

func (gra grafanaRoleAssociationAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceString(gra.ref.Append("workspace_id"))
}

func (gra grafanaRoleAssociationAttributes) Timeouts() grafanaroleassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[grafanaroleassociation.TimeoutsAttributes](gra.ref.Append("timeouts"))
}

type grafanaRoleAssociationState struct {
	GroupIds    []string                              `json:"group_ids"`
	Id          string                                `json:"id"`
	Role        string                                `json:"role"`
	UserIds     []string                              `json:"user_ids"`
	WorkspaceId string                                `json:"workspace_id"`
	Timeouts    *grafanaroleassociation.TimeoutsState `json:"timeouts"`
}
