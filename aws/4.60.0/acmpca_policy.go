// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAcmpcaPolicy(name string, args AcmpcaPolicyArgs) *AcmpcaPolicy {
	return &AcmpcaPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AcmpcaPolicy)(nil)

type AcmpcaPolicy struct {
	Name  string
	Args  AcmpcaPolicyArgs
	state *acmpcaPolicyState
}

func (ap *AcmpcaPolicy) Type() string {
	return "aws_acmpca_policy"
}

func (ap *AcmpcaPolicy) LocalName() string {
	return ap.Name
}

func (ap *AcmpcaPolicy) Configuration() interface{} {
	return ap.Args
}

func (ap *AcmpcaPolicy) Attributes() acmpcaPolicyAttributes {
	return acmpcaPolicyAttributes{ref: terra.ReferenceResource(ap)}
}

func (ap *AcmpcaPolicy) ImportState(av io.Reader) error {
	ap.state = &acmpcaPolicyState{}
	if err := json.NewDecoder(av).Decode(ap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ap.Type(), ap.LocalName(), err)
	}
	return nil
}

func (ap *AcmpcaPolicy) State() (*acmpcaPolicyState, bool) {
	return ap.state, ap.state != nil
}

func (ap *AcmpcaPolicy) StateMust() *acmpcaPolicyState {
	if ap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ap.Type(), ap.LocalName()))
	}
	return ap.state
}

func (ap *AcmpcaPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ap)
}

type AcmpcaPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// DependsOn contains resources that AcmpcaPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type acmpcaPolicyAttributes struct {
	ref terra.Reference
}

func (ap acmpcaPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("id"))
}

func (ap acmpcaPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("policy"))
}

func (ap acmpcaPolicyAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("resource_arn"))
}

type acmpcaPolicyState struct {
	Id          string `json:"id"`
	Policy      string `json:"policy"`
	ResourceArn string `json:"resource_arn"`
}
