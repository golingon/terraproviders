// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAuditmanagerAssessmentReport(name string, args AuditmanagerAssessmentReportArgs) *AuditmanagerAssessmentReport {
	return &AuditmanagerAssessmentReport{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AuditmanagerAssessmentReport)(nil)

type AuditmanagerAssessmentReport struct {
	Name  string
	Args  AuditmanagerAssessmentReportArgs
	state *auditmanagerAssessmentReportState
}

func (aar *AuditmanagerAssessmentReport) Type() string {
	return "aws_auditmanager_assessment_report"
}

func (aar *AuditmanagerAssessmentReport) LocalName() string {
	return aar.Name
}

func (aar *AuditmanagerAssessmentReport) Configuration() interface{} {
	return aar.Args
}

func (aar *AuditmanagerAssessmentReport) Attributes() auditmanagerAssessmentReportAttributes {
	return auditmanagerAssessmentReportAttributes{ref: terra.ReferenceResource(aar)}
}

func (aar *AuditmanagerAssessmentReport) ImportState(av io.Reader) error {
	aar.state = &auditmanagerAssessmentReportState{}
	if err := json.NewDecoder(av).Decode(aar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aar.Type(), aar.LocalName(), err)
	}
	return nil
}

func (aar *AuditmanagerAssessmentReport) State() (*auditmanagerAssessmentReportState, bool) {
	return aar.state, aar.state != nil
}

func (aar *AuditmanagerAssessmentReport) StateMust() *auditmanagerAssessmentReportState {
	if aar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aar.Type(), aar.LocalName()))
	}
	return aar.state
}

func (aar *AuditmanagerAssessmentReport) DependOn() terra.Reference {
	return terra.ReferenceResource(aar)
}

type AuditmanagerAssessmentReportArgs struct {
	// AssessmentId: string, required
	AssessmentId terra.StringValue `hcl:"assessment_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// DependsOn contains resources that AuditmanagerAssessmentReport depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type auditmanagerAssessmentReportAttributes struct {
	ref terra.Reference
}

func (aar auditmanagerAssessmentReportAttributes) AssessmentId() terra.StringValue {
	return terra.ReferenceString(aar.ref.Append("assessment_id"))
}

func (aar auditmanagerAssessmentReportAttributes) Author() terra.StringValue {
	return terra.ReferenceString(aar.ref.Append("author"))
}

func (aar auditmanagerAssessmentReportAttributes) Description() terra.StringValue {
	return terra.ReferenceString(aar.ref.Append("description"))
}

func (aar auditmanagerAssessmentReportAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aar.ref.Append("id"))
}

func (aar auditmanagerAssessmentReportAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aar.ref.Append("name"))
}

func (aar auditmanagerAssessmentReportAttributes) Status() terra.StringValue {
	return terra.ReferenceString(aar.ref.Append("status"))
}

type auditmanagerAssessmentReportState struct {
	AssessmentId string `json:"assessment_id"`
	Author       string `json:"author"`
	Description  string `json:"description"`
	Id           string `json:"id"`
	Name         string `json:"name"`
	Status       string `json:"status"`
}
