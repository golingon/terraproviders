// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	opsworksstack "github.com/golingon/terraproviders/aws/4.60.0/opsworksstack"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOpsworksStack(name string, args OpsworksStackArgs) *OpsworksStack {
	return &OpsworksStack{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OpsworksStack)(nil)

type OpsworksStack struct {
	Name  string
	Args  OpsworksStackArgs
	state *opsworksStackState
}

func (os *OpsworksStack) Type() string {
	return "aws_opsworks_stack"
}

func (os *OpsworksStack) LocalName() string {
	return os.Name
}

func (os *OpsworksStack) Configuration() interface{} {
	return os.Args
}

func (os *OpsworksStack) Attributes() opsworksStackAttributes {
	return opsworksStackAttributes{ref: terra.ReferenceResource(os)}
}

func (os *OpsworksStack) ImportState(av io.Reader) error {
	os.state = &opsworksStackState{}
	if err := json.NewDecoder(av).Decode(os.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", os.Type(), os.LocalName(), err)
	}
	return nil
}

func (os *OpsworksStack) State() (*opsworksStackState, bool) {
	return os.state, os.state != nil
}

func (os *OpsworksStack) StateMust() *opsworksStackState {
	if os.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", os.Type(), os.LocalName()))
	}
	return os.state
}

func (os *OpsworksStack) DependOn() terra.Reference {
	return terra.ReferenceResource(os)
}

type OpsworksStackArgs struct {
	// AgentVersion: string, optional
	AgentVersion terra.StringValue `hcl:"agent_version,attr"`
	// BerkshelfVersion: string, optional
	BerkshelfVersion terra.StringValue `hcl:"berkshelf_version,attr"`
	// Color: string, optional
	Color terra.StringValue `hcl:"color,attr"`
	// ConfigurationManagerName: string, optional
	ConfigurationManagerName terra.StringValue `hcl:"configuration_manager_name,attr"`
	// ConfigurationManagerVersion: string, optional
	ConfigurationManagerVersion terra.StringValue `hcl:"configuration_manager_version,attr"`
	// CustomJson: string, optional
	CustomJson terra.StringValue `hcl:"custom_json,attr"`
	// DefaultAvailabilityZone: string, optional
	DefaultAvailabilityZone terra.StringValue `hcl:"default_availability_zone,attr"`
	// DefaultInstanceProfileArn: string, required
	DefaultInstanceProfileArn terra.StringValue `hcl:"default_instance_profile_arn,attr" validate:"required"`
	// DefaultOs: string, optional
	DefaultOs terra.StringValue `hcl:"default_os,attr"`
	// DefaultRootDeviceType: string, optional
	DefaultRootDeviceType terra.StringValue `hcl:"default_root_device_type,attr"`
	// DefaultSshKeyName: string, optional
	DefaultSshKeyName terra.StringValue `hcl:"default_ssh_key_name,attr"`
	// DefaultSubnetId: string, optional
	DefaultSubnetId terra.StringValue `hcl:"default_subnet_id,attr"`
	// HostnameTheme: string, optional
	HostnameTheme terra.StringValue `hcl:"hostname_theme,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManageBerkshelf: bool, optional
	ManageBerkshelf terra.BoolValue `hcl:"manage_berkshelf,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Region: string, required
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
	// ServiceRoleArn: string, required
	ServiceRoleArn terra.StringValue `hcl:"service_role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UseCustomCookbooks: bool, optional
	UseCustomCookbooks terra.BoolValue `hcl:"use_custom_cookbooks,attr"`
	// UseOpsworksSecurityGroups: bool, optional
	UseOpsworksSecurityGroups terra.BoolValue `hcl:"use_opsworks_security_groups,attr"`
	// VpcId: string, optional
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// CustomCookbooksSource: optional
	CustomCookbooksSource *opsworksstack.CustomCookbooksSource `hcl:"custom_cookbooks_source,block"`
	// Timeouts: optional
	Timeouts *opsworksstack.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that OpsworksStack depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type opsworksStackAttributes struct {
	ref terra.Reference
}

func (os opsworksStackAttributes) AgentVersion() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("agent_version"))
}

func (os opsworksStackAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("arn"))
}

func (os opsworksStackAttributes) BerkshelfVersion() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("berkshelf_version"))
}

func (os opsworksStackAttributes) Color() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("color"))
}

func (os opsworksStackAttributes) ConfigurationManagerName() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("configuration_manager_name"))
}

func (os opsworksStackAttributes) ConfigurationManagerVersion() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("configuration_manager_version"))
}

func (os opsworksStackAttributes) CustomJson() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("custom_json"))
}

func (os opsworksStackAttributes) DefaultAvailabilityZone() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("default_availability_zone"))
}

func (os opsworksStackAttributes) DefaultInstanceProfileArn() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("default_instance_profile_arn"))
}

func (os opsworksStackAttributes) DefaultOs() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("default_os"))
}

func (os opsworksStackAttributes) DefaultRootDeviceType() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("default_root_device_type"))
}

func (os opsworksStackAttributes) DefaultSshKeyName() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("default_ssh_key_name"))
}

func (os opsworksStackAttributes) DefaultSubnetId() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("default_subnet_id"))
}

func (os opsworksStackAttributes) HostnameTheme() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("hostname_theme"))
}

func (os opsworksStackAttributes) Id() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("id"))
}

func (os opsworksStackAttributes) ManageBerkshelf() terra.BoolValue {
	return terra.ReferenceBool(os.ref.Append("manage_berkshelf"))
}

func (os opsworksStackAttributes) Name() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("name"))
}

func (os opsworksStackAttributes) Region() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("region"))
}

func (os opsworksStackAttributes) ServiceRoleArn() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("service_role_arn"))
}

func (os opsworksStackAttributes) StackEndpoint() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("stack_endpoint"))
}

func (os opsworksStackAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](os.ref.Append("tags"))
}

func (os opsworksStackAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](os.ref.Append("tags_all"))
}

func (os opsworksStackAttributes) UseCustomCookbooks() terra.BoolValue {
	return terra.ReferenceBool(os.ref.Append("use_custom_cookbooks"))
}

func (os opsworksStackAttributes) UseOpsworksSecurityGroups() terra.BoolValue {
	return terra.ReferenceBool(os.ref.Append("use_opsworks_security_groups"))
}

func (os opsworksStackAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("vpc_id"))
}

func (os opsworksStackAttributes) CustomCookbooksSource() terra.ListValue[opsworksstack.CustomCookbooksSourceAttributes] {
	return terra.ReferenceList[opsworksstack.CustomCookbooksSourceAttributes](os.ref.Append("custom_cookbooks_source"))
}

func (os opsworksStackAttributes) Timeouts() opsworksstack.TimeoutsAttributes {
	return terra.ReferenceSingle[opsworksstack.TimeoutsAttributes](os.ref.Append("timeouts"))
}

type opsworksStackState struct {
	AgentVersion                string                                     `json:"agent_version"`
	Arn                         string                                     `json:"arn"`
	BerkshelfVersion            string                                     `json:"berkshelf_version"`
	Color                       string                                     `json:"color"`
	ConfigurationManagerName    string                                     `json:"configuration_manager_name"`
	ConfigurationManagerVersion string                                     `json:"configuration_manager_version"`
	CustomJson                  string                                     `json:"custom_json"`
	DefaultAvailabilityZone     string                                     `json:"default_availability_zone"`
	DefaultInstanceProfileArn   string                                     `json:"default_instance_profile_arn"`
	DefaultOs                   string                                     `json:"default_os"`
	DefaultRootDeviceType       string                                     `json:"default_root_device_type"`
	DefaultSshKeyName           string                                     `json:"default_ssh_key_name"`
	DefaultSubnetId             string                                     `json:"default_subnet_id"`
	HostnameTheme               string                                     `json:"hostname_theme"`
	Id                          string                                     `json:"id"`
	ManageBerkshelf             bool                                       `json:"manage_berkshelf"`
	Name                        string                                     `json:"name"`
	Region                      string                                     `json:"region"`
	ServiceRoleArn              string                                     `json:"service_role_arn"`
	StackEndpoint               string                                     `json:"stack_endpoint"`
	Tags                        map[string]string                          `json:"tags"`
	TagsAll                     map[string]string                          `json:"tags_all"`
	UseCustomCookbooks          bool                                       `json:"use_custom_cookbooks"`
	UseOpsworksSecurityGroups   bool                                       `json:"use_opsworks_security_groups"`
	VpcId                       string                                     `json:"vpc_id"`
	CustomCookbooksSource       []opsworksstack.CustomCookbooksSourceState `json:"custom_cookbooks_source"`
	Timeouts                    *opsworksstack.TimeoutsState               `json:"timeouts"`
}
