// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package wafregionalsqlinjectionmatchset

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type SqlInjectionMatchTuple struct {
	// TextTransformation: string, required
	TextTransformation terra.StringValue `hcl:"text_transformation,attr" validate:"required"`
	// FieldToMatch: required
	FieldToMatch *FieldToMatch `hcl:"field_to_match,block" validate:"required"`
}

type FieldToMatch struct {
	// Data: string, optional
	Data terra.StringValue `hcl:"data,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type SqlInjectionMatchTupleAttributes struct {
	ref terra.Reference
}

func (simt SqlInjectionMatchTupleAttributes) InternalRef() terra.Reference {
	return simt.ref
}

func (simt SqlInjectionMatchTupleAttributes) InternalWithRef(ref terra.Reference) SqlInjectionMatchTupleAttributes {
	return SqlInjectionMatchTupleAttributes{ref: ref}
}

func (simt SqlInjectionMatchTupleAttributes) InternalTokens() hclwrite.Tokens {
	return simt.ref.InternalTokens()
}

func (simt SqlInjectionMatchTupleAttributes) TextTransformation() terra.StringValue {
	return terra.ReferenceString(simt.ref.Append("text_transformation"))
}

func (simt SqlInjectionMatchTupleAttributes) FieldToMatch() terra.ListValue[FieldToMatchAttributes] {
	return terra.ReferenceList[FieldToMatchAttributes](simt.ref.Append("field_to_match"))
}

type FieldToMatchAttributes struct {
	ref terra.Reference
}

func (ftm FieldToMatchAttributes) InternalRef() terra.Reference {
	return ftm.ref
}

func (ftm FieldToMatchAttributes) InternalWithRef(ref terra.Reference) FieldToMatchAttributes {
	return FieldToMatchAttributes{ref: ref}
}

func (ftm FieldToMatchAttributes) InternalTokens() hclwrite.Tokens {
	return ftm.ref.InternalTokens()
}

func (ftm FieldToMatchAttributes) Data() terra.StringValue {
	return terra.ReferenceString(ftm.ref.Append("data"))
}

func (ftm FieldToMatchAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ftm.ref.Append("type"))
}

type SqlInjectionMatchTupleState struct {
	TextTransformation string              `json:"text_transformation"`
	FieldToMatch       []FieldToMatchState `json:"field_to_match"`
}

type FieldToMatchState struct {
	Data string `json:"data"`
	Type string `json:"type"`
}
