// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	iottopicruledestination "github.com/golingon/terraproviders/aws/4.60.0/iottopicruledestination"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIotTopicRuleDestination(name string, args IotTopicRuleDestinationArgs) *IotTopicRuleDestination {
	return &IotTopicRuleDestination{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IotTopicRuleDestination)(nil)

type IotTopicRuleDestination struct {
	Name  string
	Args  IotTopicRuleDestinationArgs
	state *iotTopicRuleDestinationState
}

func (itrd *IotTopicRuleDestination) Type() string {
	return "aws_iot_topic_rule_destination"
}

func (itrd *IotTopicRuleDestination) LocalName() string {
	return itrd.Name
}

func (itrd *IotTopicRuleDestination) Configuration() interface{} {
	return itrd.Args
}

func (itrd *IotTopicRuleDestination) Attributes() iotTopicRuleDestinationAttributes {
	return iotTopicRuleDestinationAttributes{ref: terra.ReferenceResource(itrd)}
}

func (itrd *IotTopicRuleDestination) ImportState(av io.Reader) error {
	itrd.state = &iotTopicRuleDestinationState{}
	if err := json.NewDecoder(av).Decode(itrd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", itrd.Type(), itrd.LocalName(), err)
	}
	return nil
}

func (itrd *IotTopicRuleDestination) State() (*iotTopicRuleDestinationState, bool) {
	return itrd.state, itrd.state != nil
}

func (itrd *IotTopicRuleDestination) StateMust() *iotTopicRuleDestinationState {
	if itrd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", itrd.Type(), itrd.LocalName()))
	}
	return itrd.state
}

func (itrd *IotTopicRuleDestination) DependOn() terra.Reference {
	return terra.ReferenceResource(itrd)
}

type IotTopicRuleDestinationArgs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *iottopicruledestination.Timeouts `hcl:"timeouts,block"`
	// VpcConfiguration: required
	VpcConfiguration *iottopicruledestination.VpcConfiguration `hcl:"vpc_configuration,block" validate:"required"`
	// DependsOn contains resources that IotTopicRuleDestination depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iotTopicRuleDestinationAttributes struct {
	ref terra.Reference
}

func (itrd iotTopicRuleDestinationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(itrd.ref.Append("arn"))
}

func (itrd iotTopicRuleDestinationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(itrd.ref.Append("enabled"))
}

func (itrd iotTopicRuleDestinationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(itrd.ref.Append("id"))
}

func (itrd iotTopicRuleDestinationAttributes) Timeouts() iottopicruledestination.TimeoutsAttributes {
	return terra.ReferenceSingle[iottopicruledestination.TimeoutsAttributes](itrd.ref.Append("timeouts"))
}

func (itrd iotTopicRuleDestinationAttributes) VpcConfiguration() terra.ListValue[iottopicruledestination.VpcConfigurationAttributes] {
	return terra.ReferenceList[iottopicruledestination.VpcConfigurationAttributes](itrd.ref.Append("vpc_configuration"))
}

type iotTopicRuleDestinationState struct {
	Arn              string                                          `json:"arn"`
	Enabled          bool                                            `json:"enabled"`
	Id               string                                          `json:"id"`
	Timeouts         *iottopicruledestination.TimeoutsState          `json:"timeouts"`
	VpcConfiguration []iottopicruledestination.VpcConfigurationState `json:"vpc_configuration"`
}
