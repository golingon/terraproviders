// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkmanagertransitgatewayroutetableattachment "github.com/golingon/terraproviders/aws/4.60.0/networkmanagertransitgatewayroutetableattachment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkmanagerTransitGatewayRouteTableAttachment(name string, args NetworkmanagerTransitGatewayRouteTableAttachmentArgs) *NetworkmanagerTransitGatewayRouteTableAttachment {
	return &NetworkmanagerTransitGatewayRouteTableAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkmanagerTransitGatewayRouteTableAttachment)(nil)

type NetworkmanagerTransitGatewayRouteTableAttachment struct {
	Name  string
	Args  NetworkmanagerTransitGatewayRouteTableAttachmentArgs
	state *networkmanagerTransitGatewayRouteTableAttachmentState
}

func (ntgrta *NetworkmanagerTransitGatewayRouteTableAttachment) Type() string {
	return "aws_networkmanager_transit_gateway_route_table_attachment"
}

func (ntgrta *NetworkmanagerTransitGatewayRouteTableAttachment) LocalName() string {
	return ntgrta.Name
}

func (ntgrta *NetworkmanagerTransitGatewayRouteTableAttachment) Configuration() interface{} {
	return ntgrta.Args
}

func (ntgrta *NetworkmanagerTransitGatewayRouteTableAttachment) Attributes() networkmanagerTransitGatewayRouteTableAttachmentAttributes {
	return networkmanagerTransitGatewayRouteTableAttachmentAttributes{ref: terra.ReferenceResource(ntgrta)}
}

func (ntgrta *NetworkmanagerTransitGatewayRouteTableAttachment) ImportState(av io.Reader) error {
	ntgrta.state = &networkmanagerTransitGatewayRouteTableAttachmentState{}
	if err := json.NewDecoder(av).Decode(ntgrta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ntgrta.Type(), ntgrta.LocalName(), err)
	}
	return nil
}

func (ntgrta *NetworkmanagerTransitGatewayRouteTableAttachment) State() (*networkmanagerTransitGatewayRouteTableAttachmentState, bool) {
	return ntgrta.state, ntgrta.state != nil
}

func (ntgrta *NetworkmanagerTransitGatewayRouteTableAttachment) StateMust() *networkmanagerTransitGatewayRouteTableAttachmentState {
	if ntgrta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ntgrta.Type(), ntgrta.LocalName()))
	}
	return ntgrta.state
}

func (ntgrta *NetworkmanagerTransitGatewayRouteTableAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(ntgrta)
}

type NetworkmanagerTransitGatewayRouteTableAttachmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PeeringId: string, required
	PeeringId terra.StringValue `hcl:"peering_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitGatewayRouteTableArn: string, required
	TransitGatewayRouteTableArn terra.StringValue `hcl:"transit_gateway_route_table_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *networkmanagertransitgatewayroutetableattachment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkmanagerTransitGatewayRouteTableAttachment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkmanagerTransitGatewayRouteTableAttachmentAttributes struct {
	ref terra.Reference
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ntgrta.ref.Append("arn"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) AttachmentPolicyRuleNumber() terra.NumberValue {
	return terra.ReferenceNumber(ntgrta.ref.Append("attachment_policy_rule_number"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) AttachmentType() terra.StringValue {
	return terra.ReferenceString(ntgrta.ref.Append("attachment_type"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) CoreNetworkArn() terra.StringValue {
	return terra.ReferenceString(ntgrta.ref.Append("core_network_arn"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) CoreNetworkId() terra.StringValue {
	return terra.ReferenceString(ntgrta.ref.Append("core_network_id"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) EdgeLocation() terra.StringValue {
	return terra.ReferenceString(ntgrta.ref.Append("edge_location"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ntgrta.ref.Append("id"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) OwnerAccountId() terra.StringValue {
	return terra.ReferenceString(ntgrta.ref.Append("owner_account_id"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) PeeringId() terra.StringValue {
	return terra.ReferenceString(ntgrta.ref.Append("peering_id"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceString(ntgrta.ref.Append("resource_arn"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) SegmentName() terra.StringValue {
	return terra.ReferenceString(ntgrta.ref.Append("segment_name"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) State() terra.StringValue {
	return terra.ReferenceString(ntgrta.ref.Append("state"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ntgrta.ref.Append("tags"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ntgrta.ref.Append("tags_all"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) TransitGatewayRouteTableArn() terra.StringValue {
	return terra.ReferenceString(ntgrta.ref.Append("transit_gateway_route_table_arn"))
}

func (ntgrta networkmanagerTransitGatewayRouteTableAttachmentAttributes) Timeouts() networkmanagertransitgatewayroutetableattachment.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagertransitgatewayroutetableattachment.TimeoutsAttributes](ntgrta.ref.Append("timeouts"))
}

type networkmanagerTransitGatewayRouteTableAttachmentState struct {
	Arn                         string                                                          `json:"arn"`
	AttachmentPolicyRuleNumber  float64                                                         `json:"attachment_policy_rule_number"`
	AttachmentType              string                                                          `json:"attachment_type"`
	CoreNetworkArn              string                                                          `json:"core_network_arn"`
	CoreNetworkId               string                                                          `json:"core_network_id"`
	EdgeLocation                string                                                          `json:"edge_location"`
	Id                          string                                                          `json:"id"`
	OwnerAccountId              string                                                          `json:"owner_account_id"`
	PeeringId                   string                                                          `json:"peering_id"`
	ResourceArn                 string                                                          `json:"resource_arn"`
	SegmentName                 string                                                          `json:"segment_name"`
	State                       string                                                          `json:"state"`
	Tags                        map[string]string                                               `json:"tags"`
	TagsAll                     map[string]string                                               `json:"tags_all"`
	TransitGatewayRouteTableArn string                                                          `json:"transit_gateway_route_table_arn"`
	Timeouts                    *networkmanagertransitgatewayroutetableattachment.TimeoutsState `json:"timeouts"`
}
