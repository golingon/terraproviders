// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIotPolicy(name string, args IotPolicyArgs) *IotPolicy {
	return &IotPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IotPolicy)(nil)

type IotPolicy struct {
	Name  string
	Args  IotPolicyArgs
	state *iotPolicyState
}

func (ip *IotPolicy) Type() string {
	return "aws_iot_policy"
}

func (ip *IotPolicy) LocalName() string {
	return ip.Name
}

func (ip *IotPolicy) Configuration() interface{} {
	return ip.Args
}

func (ip *IotPolicy) Attributes() iotPolicyAttributes {
	return iotPolicyAttributes{ref: terra.ReferenceResource(ip)}
}

func (ip *IotPolicy) ImportState(av io.Reader) error {
	ip.state = &iotPolicyState{}
	if err := json.NewDecoder(av).Decode(ip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ip.Type(), ip.LocalName(), err)
	}
	return nil
}

func (ip *IotPolicy) State() (*iotPolicyState, bool) {
	return ip.state, ip.state != nil
}

func (ip *IotPolicy) StateMust() *iotPolicyState {
	if ip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ip.Type(), ip.LocalName()))
	}
	return ip.state
}

func (ip *IotPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ip)
}

type IotPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// DependsOn contains resources that IotPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iotPolicyAttributes struct {
	ref terra.Reference
}

func (ip iotPolicyAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ip.ref.Append("arn"))
}

func (ip iotPolicyAttributes) DefaultVersionId() terra.StringValue {
	return terra.ReferenceString(ip.ref.Append("default_version_id"))
}

func (ip iotPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ip.ref.Append("id"))
}

func (ip iotPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ip.ref.Append("name"))
}

func (ip iotPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(ip.ref.Append("policy"))
}

type iotPolicyState struct {
	Arn              string `json:"arn"`
	DefaultVersionId string `json:"default_version_id"`
	Id               string `json:"id"`
	Name             string `json:"name"`
	Policy           string `json:"policy"`
}
