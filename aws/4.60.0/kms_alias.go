// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKmsAlias(name string, args KmsAliasArgs) *KmsAlias {
	return &KmsAlias{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsAlias)(nil)

type KmsAlias struct {
	Name  string
	Args  KmsAliasArgs
	state *kmsAliasState
}

func (ka *KmsAlias) Type() string {
	return "aws_kms_alias"
}

func (ka *KmsAlias) LocalName() string {
	return ka.Name
}

func (ka *KmsAlias) Configuration() interface{} {
	return ka.Args
}

func (ka *KmsAlias) Attributes() kmsAliasAttributes {
	return kmsAliasAttributes{ref: terra.ReferenceResource(ka)}
}

func (ka *KmsAlias) ImportState(av io.Reader) error {
	ka.state = &kmsAliasState{}
	if err := json.NewDecoder(av).Decode(ka.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ka.Type(), ka.LocalName(), err)
	}
	return nil
}

func (ka *KmsAlias) State() (*kmsAliasState, bool) {
	return ka.state, ka.state != nil
}

func (ka *KmsAlias) StateMust() *kmsAliasState {
	if ka.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ka.Type(), ka.LocalName()))
	}
	return ka.state
}

func (ka *KmsAlias) DependOn() terra.Reference {
	return terra.ReferenceResource(ka)
}

type KmsAliasArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// TargetKeyId: string, required
	TargetKeyId terra.StringValue `hcl:"target_key_id,attr" validate:"required"`
	// DependsOn contains resources that KmsAlias depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kmsAliasAttributes struct {
	ref terra.Reference
}

func (ka kmsAliasAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ka.ref.Append("arn"))
}

func (ka kmsAliasAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ka.ref.Append("id"))
}

func (ka kmsAliasAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ka.ref.Append("name"))
}

func (ka kmsAliasAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(ka.ref.Append("name_prefix"))
}

func (ka kmsAliasAttributes) TargetKeyArn() terra.StringValue {
	return terra.ReferenceString(ka.ref.Append("target_key_arn"))
}

func (ka kmsAliasAttributes) TargetKeyId() terra.StringValue {
	return terra.ReferenceString(ka.ref.Append("target_key_id"))
}

type kmsAliasState struct {
	Arn          string `json:"arn"`
	Id           string `json:"id"`
	Name         string `json:"name"`
	NamePrefix   string `json:"name_prefix"`
	TargetKeyArn string `json:"target_key_arn"`
	TargetKeyId  string `json:"target_key_id"`
}
