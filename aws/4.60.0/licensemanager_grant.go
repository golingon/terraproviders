// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLicensemanagerGrant(name string, args LicensemanagerGrantArgs) *LicensemanagerGrant {
	return &LicensemanagerGrant{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LicensemanagerGrant)(nil)

type LicensemanagerGrant struct {
	Name  string
	Args  LicensemanagerGrantArgs
	state *licensemanagerGrantState
}

func (lg *LicensemanagerGrant) Type() string {
	return "aws_licensemanager_grant"
}

func (lg *LicensemanagerGrant) LocalName() string {
	return lg.Name
}

func (lg *LicensemanagerGrant) Configuration() interface{} {
	return lg.Args
}

func (lg *LicensemanagerGrant) Attributes() licensemanagerGrantAttributes {
	return licensemanagerGrantAttributes{ref: terra.ReferenceResource(lg)}
}

func (lg *LicensemanagerGrant) ImportState(av io.Reader) error {
	lg.state = &licensemanagerGrantState{}
	if err := json.NewDecoder(av).Decode(lg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lg.Type(), lg.LocalName(), err)
	}
	return nil
}

func (lg *LicensemanagerGrant) State() (*licensemanagerGrantState, bool) {
	return lg.state, lg.state != nil
}

func (lg *LicensemanagerGrant) StateMust() *licensemanagerGrantState {
	if lg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lg.Type(), lg.LocalName()))
	}
	return lg.state
}

func (lg *LicensemanagerGrant) DependOn() terra.Reference {
	return terra.ReferenceResource(lg)
}

type LicensemanagerGrantArgs struct {
	// AllowedOperations: set of string, required
	AllowedOperations terra.SetValue[terra.StringValue] `hcl:"allowed_operations,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseArn: string, required
	LicenseArn terra.StringValue `hcl:"license_arn,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
	// DependsOn contains resources that LicensemanagerGrant depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type licensemanagerGrantAttributes struct {
	ref terra.Reference
}

func (lg licensemanagerGrantAttributes) AllowedOperations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](lg.ref.Append("allowed_operations"))
}

func (lg licensemanagerGrantAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(lg.ref.Append("arn"))
}

func (lg licensemanagerGrantAttributes) HomeRegion() terra.StringValue {
	return terra.ReferenceString(lg.ref.Append("home_region"))
}

func (lg licensemanagerGrantAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lg.ref.Append("id"))
}

func (lg licensemanagerGrantAttributes) LicenseArn() terra.StringValue {
	return terra.ReferenceString(lg.ref.Append("license_arn"))
}

func (lg licensemanagerGrantAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lg.ref.Append("name"))
}

func (lg licensemanagerGrantAttributes) ParentArn() terra.StringValue {
	return terra.ReferenceString(lg.ref.Append("parent_arn"))
}

func (lg licensemanagerGrantAttributes) Principal() terra.StringValue {
	return terra.ReferenceString(lg.ref.Append("principal"))
}

func (lg licensemanagerGrantAttributes) Status() terra.StringValue {
	return terra.ReferenceString(lg.ref.Append("status"))
}

func (lg licensemanagerGrantAttributes) Version() terra.StringValue {
	return terra.ReferenceString(lg.ref.Append("version"))
}

type licensemanagerGrantState struct {
	AllowedOperations []string `json:"allowed_operations"`
	Arn               string   `json:"arn"`
	HomeRegion        string   `json:"home_region"`
	Id                string   `json:"id"`
	LicenseArn        string   `json:"license_arn"`
	Name              string   `json:"name"`
	ParentArn         string   `json:"parent_arn"`
	Principal         string   `json:"principal"`
	Status            string   `json:"status"`
	Version           string   `json:"version"`
}
