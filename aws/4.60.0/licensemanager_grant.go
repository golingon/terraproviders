// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewLicensemanagerGrant creates a new instance of [LicensemanagerGrant].
func NewLicensemanagerGrant(name string, args LicensemanagerGrantArgs) *LicensemanagerGrant {
	return &LicensemanagerGrant{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LicensemanagerGrant)(nil)

// LicensemanagerGrant represents the Terraform resource aws_licensemanager_grant.
type LicensemanagerGrant struct {
	Name      string
	Args      LicensemanagerGrantArgs
	state     *licensemanagerGrantState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LicensemanagerGrant].
func (lg *LicensemanagerGrant) Type() string {
	return "aws_licensemanager_grant"
}

// LocalName returns the local name for [LicensemanagerGrant].
func (lg *LicensemanagerGrant) LocalName() string {
	return lg.Name
}

// Configuration returns the configuration (args) for [LicensemanagerGrant].
func (lg *LicensemanagerGrant) Configuration() interface{} {
	return lg.Args
}

// DependOn is used for other resources to depend on [LicensemanagerGrant].
func (lg *LicensemanagerGrant) DependOn() terra.Reference {
	return terra.ReferenceResource(lg)
}

// Dependencies returns the list of resources [LicensemanagerGrant] depends_on.
func (lg *LicensemanagerGrant) Dependencies() terra.Dependencies {
	return lg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LicensemanagerGrant].
func (lg *LicensemanagerGrant) LifecycleManagement() *terra.Lifecycle {
	return lg.Lifecycle
}

// Attributes returns the attributes for [LicensemanagerGrant].
func (lg *LicensemanagerGrant) Attributes() licensemanagerGrantAttributes {
	return licensemanagerGrantAttributes{ref: terra.ReferenceResource(lg)}
}

// ImportState imports the given attribute values into [LicensemanagerGrant]'s state.
func (lg *LicensemanagerGrant) ImportState(av io.Reader) error {
	lg.state = &licensemanagerGrantState{}
	if err := json.NewDecoder(av).Decode(lg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lg.Type(), lg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LicensemanagerGrant] has state.
func (lg *LicensemanagerGrant) State() (*licensemanagerGrantState, bool) {
	return lg.state, lg.state != nil
}

// StateMust returns the state for [LicensemanagerGrant]. Panics if the state is nil.
func (lg *LicensemanagerGrant) StateMust() *licensemanagerGrantState {
	if lg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lg.Type(), lg.LocalName()))
	}
	return lg.state
}

// LicensemanagerGrantArgs contains the configurations for aws_licensemanager_grant.
type LicensemanagerGrantArgs struct {
	// AllowedOperations: set of string, required
	AllowedOperations terra.SetValue[terra.StringValue] `hcl:"allowed_operations,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseArn: string, required
	LicenseArn terra.StringValue `hcl:"license_arn,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
}
type licensemanagerGrantAttributes struct {
	ref terra.Reference
}

// AllowedOperations returns a reference to field allowed_operations of aws_licensemanager_grant.
func (lg licensemanagerGrantAttributes) AllowedOperations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lg.ref.Append("allowed_operations"))
}

// Arn returns a reference to field arn of aws_licensemanager_grant.
func (lg licensemanagerGrantAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lg.ref.Append("arn"))
}

// HomeRegion returns a reference to field home_region of aws_licensemanager_grant.
func (lg licensemanagerGrantAttributes) HomeRegion() terra.StringValue {
	return terra.ReferenceAsString(lg.ref.Append("home_region"))
}

// Id returns a reference to field id of aws_licensemanager_grant.
func (lg licensemanagerGrantAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lg.ref.Append("id"))
}

// LicenseArn returns a reference to field license_arn of aws_licensemanager_grant.
func (lg licensemanagerGrantAttributes) LicenseArn() terra.StringValue {
	return terra.ReferenceAsString(lg.ref.Append("license_arn"))
}

// Name returns a reference to field name of aws_licensemanager_grant.
func (lg licensemanagerGrantAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lg.ref.Append("name"))
}

// ParentArn returns a reference to field parent_arn of aws_licensemanager_grant.
func (lg licensemanagerGrantAttributes) ParentArn() terra.StringValue {
	return terra.ReferenceAsString(lg.ref.Append("parent_arn"))
}

// Principal returns a reference to field principal of aws_licensemanager_grant.
func (lg licensemanagerGrantAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(lg.ref.Append("principal"))
}

// Status returns a reference to field status of aws_licensemanager_grant.
func (lg licensemanagerGrantAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(lg.ref.Append("status"))
}

// Version returns a reference to field version of aws_licensemanager_grant.
func (lg licensemanagerGrantAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(lg.ref.Append("version"))
}

type licensemanagerGrantState struct {
	AllowedOperations []string `json:"allowed_operations"`
	Arn               string   `json:"arn"`
	HomeRegion        string   `json:"home_region"`
	Id                string   `json:"id"`
	LicenseArn        string   `json:"license_arn"`
	Name              string   `json:"name"`
	ParentArn         string   `json:"parent_arn"`
	Principal         string   `json:"principal"`
	Status            string   `json:"status"`
	Version           string   `json:"version"`
}
