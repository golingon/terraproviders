// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	evidentlyproject "github.com/golingon/terraproviders/aws/4.60.0/evidentlyproject"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEvidentlyProject(name string, args EvidentlyProjectArgs) *EvidentlyProject {
	return &EvidentlyProject{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EvidentlyProject)(nil)

type EvidentlyProject struct {
	Name  string
	Args  EvidentlyProjectArgs
	state *evidentlyProjectState
}

func (ep *EvidentlyProject) Type() string {
	return "aws_evidently_project"
}

func (ep *EvidentlyProject) LocalName() string {
	return ep.Name
}

func (ep *EvidentlyProject) Configuration() interface{} {
	return ep.Args
}

func (ep *EvidentlyProject) Attributes() evidentlyProjectAttributes {
	return evidentlyProjectAttributes{ref: terra.ReferenceResource(ep)}
}

func (ep *EvidentlyProject) ImportState(av io.Reader) error {
	ep.state = &evidentlyProjectState{}
	if err := json.NewDecoder(av).Decode(ep.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ep.Type(), ep.LocalName(), err)
	}
	return nil
}

func (ep *EvidentlyProject) State() (*evidentlyProjectState, bool) {
	return ep.state, ep.state != nil
}

func (ep *EvidentlyProject) StateMust() *evidentlyProjectState {
	if ep.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ep.Type(), ep.LocalName()))
	}
	return ep.state
}

func (ep *EvidentlyProject) DependOn() terra.Reference {
	return terra.ReferenceResource(ep)
}

type EvidentlyProjectArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DataDelivery: optional
	DataDelivery *evidentlyproject.DataDelivery `hcl:"data_delivery,block"`
	// Timeouts: optional
	Timeouts *evidentlyproject.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EvidentlyProject depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type evidentlyProjectAttributes struct {
	ref terra.Reference
}

func (ep evidentlyProjectAttributes) ActiveExperimentCount() terra.NumberValue {
	return terra.ReferenceNumber(ep.ref.Append("active_experiment_count"))
}

func (ep evidentlyProjectAttributes) ActiveLaunchCount() terra.NumberValue {
	return terra.ReferenceNumber(ep.ref.Append("active_launch_count"))
}

func (ep evidentlyProjectAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ep.ref.Append("arn"))
}

func (ep evidentlyProjectAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceString(ep.ref.Append("created_time"))
}

func (ep evidentlyProjectAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ep.ref.Append("description"))
}

func (ep evidentlyProjectAttributes) ExperimentCount() terra.NumberValue {
	return terra.ReferenceNumber(ep.ref.Append("experiment_count"))
}

func (ep evidentlyProjectAttributes) FeatureCount() terra.NumberValue {
	return terra.ReferenceNumber(ep.ref.Append("feature_count"))
}

func (ep evidentlyProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ep.ref.Append("id"))
}

func (ep evidentlyProjectAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceString(ep.ref.Append("last_updated_time"))
}

func (ep evidentlyProjectAttributes) LaunchCount() terra.NumberValue {
	return terra.ReferenceNumber(ep.ref.Append("launch_count"))
}

func (ep evidentlyProjectAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ep.ref.Append("name"))
}

func (ep evidentlyProjectAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ep.ref.Append("status"))
}

func (ep evidentlyProjectAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ep.ref.Append("tags"))
}

func (ep evidentlyProjectAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ep.ref.Append("tags_all"))
}

func (ep evidentlyProjectAttributes) DataDelivery() terra.ListValue[evidentlyproject.DataDeliveryAttributes] {
	return terra.ReferenceList[evidentlyproject.DataDeliveryAttributes](ep.ref.Append("data_delivery"))
}

func (ep evidentlyProjectAttributes) Timeouts() evidentlyproject.TimeoutsAttributes {
	return terra.ReferenceSingle[evidentlyproject.TimeoutsAttributes](ep.ref.Append("timeouts"))
}

type evidentlyProjectState struct {
	ActiveExperimentCount float64                              `json:"active_experiment_count"`
	ActiveLaunchCount     float64                              `json:"active_launch_count"`
	Arn                   string                               `json:"arn"`
	CreatedTime           string                               `json:"created_time"`
	Description           string                               `json:"description"`
	ExperimentCount       float64                              `json:"experiment_count"`
	FeatureCount          float64                              `json:"feature_count"`
	Id                    string                               `json:"id"`
	LastUpdatedTime       string                               `json:"last_updated_time"`
	LaunchCount           float64                              `json:"launch_count"`
	Name                  string                               `json:"name"`
	Status                string                               `json:"status"`
	Tags                  map[string]string                    `json:"tags"`
	TagsAll               map[string]string                    `json:"tags_all"`
	DataDelivery          []evidentlyproject.DataDeliveryState `json:"data_delivery"`
	Timeouts              *evidentlyproject.TimeoutsState      `json:"timeouts"`
}
