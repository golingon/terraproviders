// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	rolesanywheretrustanchor "github.com/golingon/terraproviders/aws/4.60.0/rolesanywheretrustanchor"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRolesanywhereTrustAnchor(name string, args RolesanywhereTrustAnchorArgs) *RolesanywhereTrustAnchor {
	return &RolesanywhereTrustAnchor{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RolesanywhereTrustAnchor)(nil)

type RolesanywhereTrustAnchor struct {
	Name  string
	Args  RolesanywhereTrustAnchorArgs
	state *rolesanywhereTrustAnchorState
}

func (rta *RolesanywhereTrustAnchor) Type() string {
	return "aws_rolesanywhere_trust_anchor"
}

func (rta *RolesanywhereTrustAnchor) LocalName() string {
	return rta.Name
}

func (rta *RolesanywhereTrustAnchor) Configuration() interface{} {
	return rta.Args
}

func (rta *RolesanywhereTrustAnchor) Attributes() rolesanywhereTrustAnchorAttributes {
	return rolesanywhereTrustAnchorAttributes{ref: terra.ReferenceResource(rta)}
}

func (rta *RolesanywhereTrustAnchor) ImportState(av io.Reader) error {
	rta.state = &rolesanywhereTrustAnchorState{}
	if err := json.NewDecoder(av).Decode(rta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rta.Type(), rta.LocalName(), err)
	}
	return nil
}

func (rta *RolesanywhereTrustAnchor) State() (*rolesanywhereTrustAnchorState, bool) {
	return rta.state, rta.state != nil
}

func (rta *RolesanywhereTrustAnchor) StateMust() *rolesanywhereTrustAnchorState {
	if rta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rta.Type(), rta.LocalName()))
	}
	return rta.state
}

func (rta *RolesanywhereTrustAnchor) DependOn() terra.Reference {
	return terra.ReferenceResource(rta)
}

type RolesanywhereTrustAnchorArgs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Source: required
	Source *rolesanywheretrustanchor.Source `hcl:"source,block" validate:"required"`
	// DependsOn contains resources that RolesanywhereTrustAnchor depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type rolesanywhereTrustAnchorAttributes struct {
	ref terra.Reference
}

func (rta rolesanywhereTrustAnchorAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rta.ref.Append("arn"))
}

func (rta rolesanywhereTrustAnchorAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(rta.ref.Append("enabled"))
}

func (rta rolesanywhereTrustAnchorAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rta.ref.Append("id"))
}

func (rta rolesanywhereTrustAnchorAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rta.ref.Append("name"))
}

func (rta rolesanywhereTrustAnchorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rta.ref.Append("tags"))
}

func (rta rolesanywhereTrustAnchorAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rta.ref.Append("tags_all"))
}

func (rta rolesanywhereTrustAnchorAttributes) Source() terra.ListValue[rolesanywheretrustanchor.SourceAttributes] {
	return terra.ReferenceList[rolesanywheretrustanchor.SourceAttributes](rta.ref.Append("source"))
}

type rolesanywhereTrustAnchorState struct {
	Arn     string                                 `json:"arn"`
	Enabled bool                                   `json:"enabled"`
	Id      string                                 `json:"id"`
	Name    string                                 `json:"name"`
	Tags    map[string]string                      `json:"tags"`
	TagsAll map[string]string                      `json:"tags_all"`
	Source  []rolesanywheretrustanchor.SourceState `json:"source"`
}
