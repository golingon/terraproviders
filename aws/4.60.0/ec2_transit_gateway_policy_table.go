// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2TransitGatewayPolicyTable(name string, args Ec2TransitGatewayPolicyTableArgs) *Ec2TransitGatewayPolicyTable {
	return &Ec2TransitGatewayPolicyTable{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TransitGatewayPolicyTable)(nil)

type Ec2TransitGatewayPolicyTable struct {
	Name  string
	Args  Ec2TransitGatewayPolicyTableArgs
	state *ec2TransitGatewayPolicyTableState
}

func (etgpt *Ec2TransitGatewayPolicyTable) Type() string {
	return "aws_ec2_transit_gateway_policy_table"
}

func (etgpt *Ec2TransitGatewayPolicyTable) LocalName() string {
	return etgpt.Name
}

func (etgpt *Ec2TransitGatewayPolicyTable) Configuration() interface{} {
	return etgpt.Args
}

func (etgpt *Ec2TransitGatewayPolicyTable) Attributes() ec2TransitGatewayPolicyTableAttributes {
	return ec2TransitGatewayPolicyTableAttributes{ref: terra.ReferenceResource(etgpt)}
}

func (etgpt *Ec2TransitGatewayPolicyTable) ImportState(av io.Reader) error {
	etgpt.state = &ec2TransitGatewayPolicyTableState{}
	if err := json.NewDecoder(av).Decode(etgpt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etgpt.Type(), etgpt.LocalName(), err)
	}
	return nil
}

func (etgpt *Ec2TransitGatewayPolicyTable) State() (*ec2TransitGatewayPolicyTableState, bool) {
	return etgpt.state, etgpt.state != nil
}

func (etgpt *Ec2TransitGatewayPolicyTable) StateMust() *ec2TransitGatewayPolicyTableState {
	if etgpt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etgpt.Type(), etgpt.LocalName()))
	}
	return etgpt.state
}

func (etgpt *Ec2TransitGatewayPolicyTable) DependOn() terra.Reference {
	return terra.ReferenceResource(etgpt)
}

type Ec2TransitGatewayPolicyTableArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitGatewayId: string, required
	TransitGatewayId terra.StringValue `hcl:"transit_gateway_id,attr" validate:"required"`
	// DependsOn contains resources that Ec2TransitGatewayPolicyTable depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2TransitGatewayPolicyTableAttributes struct {
	ref terra.Reference
}

func (etgpt ec2TransitGatewayPolicyTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(etgpt.ref.Append("arn"))
}

func (etgpt ec2TransitGatewayPolicyTableAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etgpt.ref.Append("id"))
}

func (etgpt ec2TransitGatewayPolicyTableAttributes) State() terra.StringValue {
	return terra.ReferenceString(etgpt.ref.Append("state"))
}

func (etgpt ec2TransitGatewayPolicyTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etgpt.ref.Append("tags"))
}

func (etgpt ec2TransitGatewayPolicyTableAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etgpt.ref.Append("tags_all"))
}

func (etgpt ec2TransitGatewayPolicyTableAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceString(etgpt.ref.Append("transit_gateway_id"))
}

type ec2TransitGatewayPolicyTableState struct {
	Arn              string            `json:"arn"`
	Id               string            `json:"id"`
	State            string            `json:"state"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
	TransitGatewayId string            `json:"transit_gateway_id"`
}
