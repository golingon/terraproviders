// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lambdaprovisionedconcurrencyconfig "github.com/golingon/terraproviders/aws/4.60.0/lambdaprovisionedconcurrencyconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLambdaProvisionedConcurrencyConfig(name string, args LambdaProvisionedConcurrencyConfigArgs) *LambdaProvisionedConcurrencyConfig {
	return &LambdaProvisionedConcurrencyConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LambdaProvisionedConcurrencyConfig)(nil)

type LambdaProvisionedConcurrencyConfig struct {
	Name  string
	Args  LambdaProvisionedConcurrencyConfigArgs
	state *lambdaProvisionedConcurrencyConfigState
}

func (lpcc *LambdaProvisionedConcurrencyConfig) Type() string {
	return "aws_lambda_provisioned_concurrency_config"
}

func (lpcc *LambdaProvisionedConcurrencyConfig) LocalName() string {
	return lpcc.Name
}

func (lpcc *LambdaProvisionedConcurrencyConfig) Configuration() interface{} {
	return lpcc.Args
}

func (lpcc *LambdaProvisionedConcurrencyConfig) Attributes() lambdaProvisionedConcurrencyConfigAttributes {
	return lambdaProvisionedConcurrencyConfigAttributes{ref: terra.ReferenceResource(lpcc)}
}

func (lpcc *LambdaProvisionedConcurrencyConfig) ImportState(av io.Reader) error {
	lpcc.state = &lambdaProvisionedConcurrencyConfigState{}
	if err := json.NewDecoder(av).Decode(lpcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lpcc.Type(), lpcc.LocalName(), err)
	}
	return nil
}

func (lpcc *LambdaProvisionedConcurrencyConfig) State() (*lambdaProvisionedConcurrencyConfigState, bool) {
	return lpcc.state, lpcc.state != nil
}

func (lpcc *LambdaProvisionedConcurrencyConfig) StateMust() *lambdaProvisionedConcurrencyConfigState {
	if lpcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lpcc.Type(), lpcc.LocalName()))
	}
	return lpcc.state
}

func (lpcc *LambdaProvisionedConcurrencyConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(lpcc)
}

type LambdaProvisionedConcurrencyConfigArgs struct {
	// FunctionName: string, required
	FunctionName terra.StringValue `hcl:"function_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProvisionedConcurrentExecutions: number, required
	ProvisionedConcurrentExecutions terra.NumberValue `hcl:"provisioned_concurrent_executions,attr" validate:"required"`
	// Qualifier: string, required
	Qualifier terra.StringValue `hcl:"qualifier,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *lambdaprovisionedconcurrencyconfig.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LambdaProvisionedConcurrencyConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lambdaProvisionedConcurrencyConfigAttributes struct {
	ref terra.Reference
}

func (lpcc lambdaProvisionedConcurrencyConfigAttributes) FunctionName() terra.StringValue {
	return terra.ReferenceString(lpcc.ref.Append("function_name"))
}

func (lpcc lambdaProvisionedConcurrencyConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lpcc.ref.Append("id"))
}

func (lpcc lambdaProvisionedConcurrencyConfigAttributes) ProvisionedConcurrentExecutions() terra.NumberValue {
	return terra.ReferenceNumber(lpcc.ref.Append("provisioned_concurrent_executions"))
}

func (lpcc lambdaProvisionedConcurrencyConfigAttributes) Qualifier() terra.StringValue {
	return terra.ReferenceString(lpcc.ref.Append("qualifier"))
}

func (lpcc lambdaProvisionedConcurrencyConfigAttributes) Timeouts() lambdaprovisionedconcurrencyconfig.TimeoutsAttributes {
	return terra.ReferenceSingle[lambdaprovisionedconcurrencyconfig.TimeoutsAttributes](lpcc.ref.Append("timeouts"))
}

type lambdaProvisionedConcurrencyConfigState struct {
	FunctionName                    string                                            `json:"function_name"`
	Id                              string                                            `json:"id"`
	ProvisionedConcurrentExecutions float64                                           `json:"provisioned_concurrent_executions"`
	Qualifier                       string                                            `json:"qualifier"`
	Timeouts                        *lambdaprovisionedconcurrencyconfig.TimeoutsState `json:"timeouts"`
}
