// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	macie2invitationaccepter "github.com/golingon/terraproviders/aws/4.60.0/macie2invitationaccepter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMacie2InvitationAccepter(name string, args Macie2InvitationAccepterArgs) *Macie2InvitationAccepter {
	return &Macie2InvitationAccepter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Macie2InvitationAccepter)(nil)

type Macie2InvitationAccepter struct {
	Name  string
	Args  Macie2InvitationAccepterArgs
	state *macie2InvitationAccepterState
}

func (mia *Macie2InvitationAccepter) Type() string {
	return "aws_macie2_invitation_accepter"
}

func (mia *Macie2InvitationAccepter) LocalName() string {
	return mia.Name
}

func (mia *Macie2InvitationAccepter) Configuration() interface{} {
	return mia.Args
}

func (mia *Macie2InvitationAccepter) Attributes() macie2InvitationAccepterAttributes {
	return macie2InvitationAccepterAttributes{ref: terra.ReferenceResource(mia)}
}

func (mia *Macie2InvitationAccepter) ImportState(av io.Reader) error {
	mia.state = &macie2InvitationAccepterState{}
	if err := json.NewDecoder(av).Decode(mia.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mia.Type(), mia.LocalName(), err)
	}
	return nil
}

func (mia *Macie2InvitationAccepter) State() (*macie2InvitationAccepterState, bool) {
	return mia.state, mia.state != nil
}

func (mia *Macie2InvitationAccepter) StateMust() *macie2InvitationAccepterState {
	if mia.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mia.Type(), mia.LocalName()))
	}
	return mia.state
}

func (mia *Macie2InvitationAccepter) DependOn() terra.Reference {
	return terra.ReferenceResource(mia)
}

type Macie2InvitationAccepterArgs struct {
	// AdministratorAccountId: string, required
	AdministratorAccountId terra.StringValue `hcl:"administrator_account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *macie2invitationaccepter.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Macie2InvitationAccepter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type macie2InvitationAccepterAttributes struct {
	ref terra.Reference
}

func (mia macie2InvitationAccepterAttributes) AdministratorAccountId() terra.StringValue {
	return terra.ReferenceString(mia.ref.Append("administrator_account_id"))
}

func (mia macie2InvitationAccepterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mia.ref.Append("id"))
}

func (mia macie2InvitationAccepterAttributes) InvitationId() terra.StringValue {
	return terra.ReferenceString(mia.ref.Append("invitation_id"))
}

func (mia macie2InvitationAccepterAttributes) Timeouts() macie2invitationaccepter.TimeoutsAttributes {
	return terra.ReferenceSingle[macie2invitationaccepter.TimeoutsAttributes](mia.ref.Append("timeouts"))
}

type macie2InvitationAccepterState struct {
	AdministratorAccountId string                                  `json:"administrator_account_id"`
	Id                     string                                  `json:"id"`
	InvitationId           string                                  `json:"invitation_id"`
	Timeouts               *macie2invitationaccepter.TimeoutsState `json:"timeouts"`
}
