// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	route53recoveryreadinessrecoverygroup "github.com/golingon/terraproviders/aws/4.60.0/route53recoveryreadinessrecoverygroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53RecoveryreadinessRecoveryGroup(name string, args Route53RecoveryreadinessRecoveryGroupArgs) *Route53RecoveryreadinessRecoveryGroup {
	return &Route53RecoveryreadinessRecoveryGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53RecoveryreadinessRecoveryGroup)(nil)

type Route53RecoveryreadinessRecoveryGroup struct {
	Name  string
	Args  Route53RecoveryreadinessRecoveryGroupArgs
	state *route53RecoveryreadinessRecoveryGroupState
}

func (rrg *Route53RecoveryreadinessRecoveryGroup) Type() string {
	return "aws_route53recoveryreadiness_recovery_group"
}

func (rrg *Route53RecoveryreadinessRecoveryGroup) LocalName() string {
	return rrg.Name
}

func (rrg *Route53RecoveryreadinessRecoveryGroup) Configuration() interface{} {
	return rrg.Args
}

func (rrg *Route53RecoveryreadinessRecoveryGroup) Attributes() route53RecoveryreadinessRecoveryGroupAttributes {
	return route53RecoveryreadinessRecoveryGroupAttributes{ref: terra.ReferenceResource(rrg)}
}

func (rrg *Route53RecoveryreadinessRecoveryGroup) ImportState(av io.Reader) error {
	rrg.state = &route53RecoveryreadinessRecoveryGroupState{}
	if err := json.NewDecoder(av).Decode(rrg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrg.Type(), rrg.LocalName(), err)
	}
	return nil
}

func (rrg *Route53RecoveryreadinessRecoveryGroup) State() (*route53RecoveryreadinessRecoveryGroupState, bool) {
	return rrg.state, rrg.state != nil
}

func (rrg *Route53RecoveryreadinessRecoveryGroup) StateMust() *route53RecoveryreadinessRecoveryGroupState {
	if rrg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrg.Type(), rrg.LocalName()))
	}
	return rrg.state
}

func (rrg *Route53RecoveryreadinessRecoveryGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(rrg)
}

type Route53RecoveryreadinessRecoveryGroupArgs struct {
	// Cells: list of string, optional
	Cells terra.ListValue[terra.StringValue] `hcl:"cells,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RecoveryGroupName: string, required
	RecoveryGroupName terra.StringValue `hcl:"recovery_group_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *route53recoveryreadinessrecoverygroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Route53RecoveryreadinessRecoveryGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53RecoveryreadinessRecoveryGroupAttributes struct {
	ref terra.Reference
}

func (rrg route53RecoveryreadinessRecoveryGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rrg.ref.Append("arn"))
}

func (rrg route53RecoveryreadinessRecoveryGroupAttributes) Cells() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](rrg.ref.Append("cells"))
}

func (rrg route53RecoveryreadinessRecoveryGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rrg.ref.Append("id"))
}

func (rrg route53RecoveryreadinessRecoveryGroupAttributes) RecoveryGroupName() terra.StringValue {
	return terra.ReferenceString(rrg.ref.Append("recovery_group_name"))
}

func (rrg route53RecoveryreadinessRecoveryGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrg.ref.Append("tags"))
}

func (rrg route53RecoveryreadinessRecoveryGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrg.ref.Append("tags_all"))
}

func (rrg route53RecoveryreadinessRecoveryGroupAttributes) Timeouts() route53recoveryreadinessrecoverygroup.TimeoutsAttributes {
	return terra.ReferenceSingle[route53recoveryreadinessrecoverygroup.TimeoutsAttributes](rrg.ref.Append("timeouts"))
}

type route53RecoveryreadinessRecoveryGroupState struct {
	Arn               string                                               `json:"arn"`
	Cells             []string                                             `json:"cells"`
	Id                string                                               `json:"id"`
	RecoveryGroupName string                                               `json:"recovery_group_name"`
	Tags              map[string]string                                    `json:"tags"`
	TagsAll           map[string]string                                    `json:"tags_all"`
	Timeouts          *route53recoveryreadinessrecoverygroup.TimeoutsState `json:"timeouts"`
}
