// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatasyncLocationFsxWindowsFileSystem(name string, args DatasyncLocationFsxWindowsFileSystemArgs) *DatasyncLocationFsxWindowsFileSystem {
	return &DatasyncLocationFsxWindowsFileSystem{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatasyncLocationFsxWindowsFileSystem)(nil)

type DatasyncLocationFsxWindowsFileSystem struct {
	Name  string
	Args  DatasyncLocationFsxWindowsFileSystemArgs
	state *datasyncLocationFsxWindowsFileSystemState
}

func (dlfwfs *DatasyncLocationFsxWindowsFileSystem) Type() string {
	return "aws_datasync_location_fsx_windows_file_system"
}

func (dlfwfs *DatasyncLocationFsxWindowsFileSystem) LocalName() string {
	return dlfwfs.Name
}

func (dlfwfs *DatasyncLocationFsxWindowsFileSystem) Configuration() interface{} {
	return dlfwfs.Args
}

func (dlfwfs *DatasyncLocationFsxWindowsFileSystem) Attributes() datasyncLocationFsxWindowsFileSystemAttributes {
	return datasyncLocationFsxWindowsFileSystemAttributes{ref: terra.ReferenceResource(dlfwfs)}
}

func (dlfwfs *DatasyncLocationFsxWindowsFileSystem) ImportState(av io.Reader) error {
	dlfwfs.state = &datasyncLocationFsxWindowsFileSystemState{}
	if err := json.NewDecoder(av).Decode(dlfwfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dlfwfs.Type(), dlfwfs.LocalName(), err)
	}
	return nil
}

func (dlfwfs *DatasyncLocationFsxWindowsFileSystem) State() (*datasyncLocationFsxWindowsFileSystemState, bool) {
	return dlfwfs.state, dlfwfs.state != nil
}

func (dlfwfs *DatasyncLocationFsxWindowsFileSystem) StateMust() *datasyncLocationFsxWindowsFileSystemState {
	if dlfwfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dlfwfs.Type(), dlfwfs.LocalName()))
	}
	return dlfwfs.state
}

func (dlfwfs *DatasyncLocationFsxWindowsFileSystem) DependOn() terra.Reference {
	return terra.ReferenceResource(dlfwfs)
}

type DatasyncLocationFsxWindowsFileSystemArgs struct {
	// Domain: string, optional
	Domain terra.StringValue `hcl:"domain,attr"`
	// FsxFilesystemArn: string, required
	FsxFilesystemArn terra.StringValue `hcl:"fsx_filesystem_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Password: string, required
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// SecurityGroupArns: set of string, required
	SecurityGroupArns terra.SetValue[terra.StringValue] `hcl:"security_group_arns,attr" validate:"required"`
	// Subdirectory: string, optional
	Subdirectory terra.StringValue `hcl:"subdirectory,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// User: string, required
	User terra.StringValue `hcl:"user,attr" validate:"required"`
	// DependsOn contains resources that DatasyncLocationFsxWindowsFileSystem depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type datasyncLocationFsxWindowsFileSystemAttributes struct {
	ref terra.Reference
}

func (dlfwfs datasyncLocationFsxWindowsFileSystemAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dlfwfs.ref.Append("arn"))
}

func (dlfwfs datasyncLocationFsxWindowsFileSystemAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceString(dlfwfs.ref.Append("creation_time"))
}

func (dlfwfs datasyncLocationFsxWindowsFileSystemAttributes) Domain() terra.StringValue {
	return terra.ReferenceString(dlfwfs.ref.Append("domain"))
}

func (dlfwfs datasyncLocationFsxWindowsFileSystemAttributes) FsxFilesystemArn() terra.StringValue {
	return terra.ReferenceString(dlfwfs.ref.Append("fsx_filesystem_arn"))
}

func (dlfwfs datasyncLocationFsxWindowsFileSystemAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dlfwfs.ref.Append("id"))
}

func (dlfwfs datasyncLocationFsxWindowsFileSystemAttributes) Password() terra.StringValue {
	return terra.ReferenceString(dlfwfs.ref.Append("password"))
}

func (dlfwfs datasyncLocationFsxWindowsFileSystemAttributes) SecurityGroupArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dlfwfs.ref.Append("security_group_arns"))
}

func (dlfwfs datasyncLocationFsxWindowsFileSystemAttributes) Subdirectory() terra.StringValue {
	return terra.ReferenceString(dlfwfs.ref.Append("subdirectory"))
}

func (dlfwfs datasyncLocationFsxWindowsFileSystemAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dlfwfs.ref.Append("tags"))
}

func (dlfwfs datasyncLocationFsxWindowsFileSystemAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dlfwfs.ref.Append("tags_all"))
}

func (dlfwfs datasyncLocationFsxWindowsFileSystemAttributes) Uri() terra.StringValue {
	return terra.ReferenceString(dlfwfs.ref.Append("uri"))
}

func (dlfwfs datasyncLocationFsxWindowsFileSystemAttributes) User() terra.StringValue {
	return terra.ReferenceString(dlfwfs.ref.Append("user"))
}

type datasyncLocationFsxWindowsFileSystemState struct {
	Arn               string            `json:"arn"`
	CreationTime      string            `json:"creation_time"`
	Domain            string            `json:"domain"`
	FsxFilesystemArn  string            `json:"fsx_filesystem_arn"`
	Id                string            `json:"id"`
	Password          string            `json:"password"`
	SecurityGroupArns []string          `json:"security_group_arns"`
	Subdirectory      string            `json:"subdirectory"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
	Uri               string            `json:"uri"`
	User              string            `json:"user"`
}
