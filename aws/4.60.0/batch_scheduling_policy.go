// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	batchschedulingpolicy "github.com/golingon/terraproviders/aws/4.60.0/batchschedulingpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBatchSchedulingPolicy(name string, args BatchSchedulingPolicyArgs) *BatchSchedulingPolicy {
	return &BatchSchedulingPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BatchSchedulingPolicy)(nil)

type BatchSchedulingPolicy struct {
	Name  string
	Args  BatchSchedulingPolicyArgs
	state *batchSchedulingPolicyState
}

func (bsp *BatchSchedulingPolicy) Type() string {
	return "aws_batch_scheduling_policy"
}

func (bsp *BatchSchedulingPolicy) LocalName() string {
	return bsp.Name
}

func (bsp *BatchSchedulingPolicy) Configuration() interface{} {
	return bsp.Args
}

func (bsp *BatchSchedulingPolicy) Attributes() batchSchedulingPolicyAttributes {
	return batchSchedulingPolicyAttributes{ref: terra.ReferenceResource(bsp)}
}

func (bsp *BatchSchedulingPolicy) ImportState(av io.Reader) error {
	bsp.state = &batchSchedulingPolicyState{}
	if err := json.NewDecoder(av).Decode(bsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bsp.Type(), bsp.LocalName(), err)
	}
	return nil
}

func (bsp *BatchSchedulingPolicy) State() (*batchSchedulingPolicyState, bool) {
	return bsp.state, bsp.state != nil
}

func (bsp *BatchSchedulingPolicy) StateMust() *batchSchedulingPolicyState {
	if bsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bsp.Type(), bsp.LocalName()))
	}
	return bsp.state
}

func (bsp *BatchSchedulingPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(bsp)
}

type BatchSchedulingPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// FairSharePolicy: optional
	FairSharePolicy *batchschedulingpolicy.FairSharePolicy `hcl:"fair_share_policy,block"`
	// DependsOn contains resources that BatchSchedulingPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type batchSchedulingPolicyAttributes struct {
	ref terra.Reference
}

func (bsp batchSchedulingPolicyAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(bsp.ref.Append("arn"))
}

func (bsp batchSchedulingPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bsp.ref.Append("id"))
}

func (bsp batchSchedulingPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(bsp.ref.Append("name"))
}

func (bsp batchSchedulingPolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bsp.ref.Append("tags"))
}

func (bsp batchSchedulingPolicyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](bsp.ref.Append("tags_all"))
}

func (bsp batchSchedulingPolicyAttributes) FairSharePolicy() terra.ListValue[batchschedulingpolicy.FairSharePolicyAttributes] {
	return terra.ReferenceList[batchschedulingpolicy.FairSharePolicyAttributes](bsp.ref.Append("fair_share_policy"))
}

type batchSchedulingPolicyState struct {
	Arn             string                                       `json:"arn"`
	Id              string                                       `json:"id"`
	Name            string                                       `json:"name"`
	Tags            map[string]string                            `json:"tags"`
	TagsAll         map[string]string                            `json:"tags_all"`
	FairSharePolicy []batchschedulingpolicy.FairSharePolicyState `json:"fair_share_policy"`
}
