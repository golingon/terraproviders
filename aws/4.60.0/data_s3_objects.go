// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import "github.com/volvo-cars/lingon/pkg/terra"

func NewDataS3Objects(name string, args DataS3ObjectsArgs) *DataS3Objects {
	return &DataS3Objects{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataS3Objects)(nil)

type DataS3Objects struct {
	Name string
	Args DataS3ObjectsArgs
}

func (so *DataS3Objects) DataSource() string {
	return "aws_s3_objects"
}

func (so *DataS3Objects) LocalName() string {
	return so.Name
}

func (so *DataS3Objects) Configuration() interface{} {
	return so.Args
}

func (so *DataS3Objects) Attributes() dataS3ObjectsAttributes {
	return dataS3ObjectsAttributes{ref: terra.ReferenceDataResource(so)}
}

type DataS3ObjectsArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Delimiter: string, optional
	Delimiter terra.StringValue `hcl:"delimiter,attr"`
	// EncodingType: string, optional
	EncodingType terra.StringValue `hcl:"encoding_type,attr"`
	// FetchOwner: bool, optional
	FetchOwner terra.BoolValue `hcl:"fetch_owner,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxKeys: number, optional
	MaxKeys terra.NumberValue `hcl:"max_keys,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// StartAfter: string, optional
	StartAfter terra.StringValue `hcl:"start_after,attr"`
}
type dataS3ObjectsAttributes struct {
	ref terra.Reference
}

func (so dataS3ObjectsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(so.ref.Append("bucket"))
}

func (so dataS3ObjectsAttributes) CommonPrefixes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](so.ref.Append("common_prefixes"))
}

func (so dataS3ObjectsAttributes) Delimiter() terra.StringValue {
	return terra.ReferenceString(so.ref.Append("delimiter"))
}

func (so dataS3ObjectsAttributes) EncodingType() terra.StringValue {
	return terra.ReferenceString(so.ref.Append("encoding_type"))
}

func (so dataS3ObjectsAttributes) FetchOwner() terra.BoolValue {
	return terra.ReferenceBool(so.ref.Append("fetch_owner"))
}

func (so dataS3ObjectsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(so.ref.Append("id"))
}

func (so dataS3ObjectsAttributes) Keys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](so.ref.Append("keys"))
}

func (so dataS3ObjectsAttributes) MaxKeys() terra.NumberValue {
	return terra.ReferenceNumber(so.ref.Append("max_keys"))
}

func (so dataS3ObjectsAttributes) Owners() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](so.ref.Append("owners"))
}

func (so dataS3ObjectsAttributes) Prefix() terra.StringValue {
	return terra.ReferenceString(so.ref.Append("prefix"))
}

func (so dataS3ObjectsAttributes) StartAfter() terra.StringValue {
	return terra.ReferenceString(so.ref.Append("start_after"))
}
