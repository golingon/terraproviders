// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudwatchmetricstream "github.com/golingon/terraproviders/aws/4.60.0/cloudwatchmetricstream"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudwatchMetricStream(name string, args CloudwatchMetricStreamArgs) *CloudwatchMetricStream {
	return &CloudwatchMetricStream{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudwatchMetricStream)(nil)

type CloudwatchMetricStream struct {
	Name  string
	Args  CloudwatchMetricStreamArgs
	state *cloudwatchMetricStreamState
}

func (cms *CloudwatchMetricStream) Type() string {
	return "aws_cloudwatch_metric_stream"
}

func (cms *CloudwatchMetricStream) LocalName() string {
	return cms.Name
}

func (cms *CloudwatchMetricStream) Configuration() interface{} {
	return cms.Args
}

func (cms *CloudwatchMetricStream) Attributes() cloudwatchMetricStreamAttributes {
	return cloudwatchMetricStreamAttributes{ref: terra.ReferenceResource(cms)}
}

func (cms *CloudwatchMetricStream) ImportState(av io.Reader) error {
	cms.state = &cloudwatchMetricStreamState{}
	if err := json.NewDecoder(av).Decode(cms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cms.Type(), cms.LocalName(), err)
	}
	return nil
}

func (cms *CloudwatchMetricStream) State() (*cloudwatchMetricStreamState, bool) {
	return cms.state, cms.state != nil
}

func (cms *CloudwatchMetricStream) StateMust() *cloudwatchMetricStreamState {
	if cms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cms.Type(), cms.LocalName()))
	}
	return cms.state
}

func (cms *CloudwatchMetricStream) DependOn() terra.Reference {
	return terra.ReferenceResource(cms)
}

type CloudwatchMetricStreamArgs struct {
	// FirehoseArn: string, required
	FirehoseArn terra.StringValue `hcl:"firehose_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// OutputFormat: string, required
	OutputFormat terra.StringValue `hcl:"output_format,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ExcludeFilter: min=0
	ExcludeFilter []cloudwatchmetricstream.ExcludeFilter `hcl:"exclude_filter,block" validate:"min=0"`
	// IncludeFilter: min=0
	IncludeFilter []cloudwatchmetricstream.IncludeFilter `hcl:"include_filter,block" validate:"min=0"`
	// StatisticsConfiguration: min=0
	StatisticsConfiguration []cloudwatchmetricstream.StatisticsConfiguration `hcl:"statistics_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *cloudwatchmetricstream.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudwatchMetricStream depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudwatchMetricStreamAttributes struct {
	ref terra.Reference
}

func (cms cloudwatchMetricStreamAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cms.ref.Append("arn"))
}

func (cms cloudwatchMetricStreamAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceString(cms.ref.Append("creation_date"))
}

func (cms cloudwatchMetricStreamAttributes) FirehoseArn() terra.StringValue {
	return terra.ReferenceString(cms.ref.Append("firehose_arn"))
}

func (cms cloudwatchMetricStreamAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cms.ref.Append("id"))
}

func (cms cloudwatchMetricStreamAttributes) LastUpdateDate() terra.StringValue {
	return terra.ReferenceString(cms.ref.Append("last_update_date"))
}

func (cms cloudwatchMetricStreamAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cms.ref.Append("name"))
}

func (cms cloudwatchMetricStreamAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(cms.ref.Append("name_prefix"))
}

func (cms cloudwatchMetricStreamAttributes) OutputFormat() terra.StringValue {
	return terra.ReferenceString(cms.ref.Append("output_format"))
}

func (cms cloudwatchMetricStreamAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(cms.ref.Append("role_arn"))
}

func (cms cloudwatchMetricStreamAttributes) State() terra.StringValue {
	return terra.ReferenceString(cms.ref.Append("state"))
}

func (cms cloudwatchMetricStreamAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cms.ref.Append("tags"))
}

func (cms cloudwatchMetricStreamAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cms.ref.Append("tags_all"))
}

func (cms cloudwatchMetricStreamAttributes) ExcludeFilter() terra.SetValue[cloudwatchmetricstream.ExcludeFilterAttributes] {
	return terra.ReferenceSet[cloudwatchmetricstream.ExcludeFilterAttributes](cms.ref.Append("exclude_filter"))
}

func (cms cloudwatchMetricStreamAttributes) IncludeFilter() terra.SetValue[cloudwatchmetricstream.IncludeFilterAttributes] {
	return terra.ReferenceSet[cloudwatchmetricstream.IncludeFilterAttributes](cms.ref.Append("include_filter"))
}

func (cms cloudwatchMetricStreamAttributes) StatisticsConfiguration() terra.SetValue[cloudwatchmetricstream.StatisticsConfigurationAttributes] {
	return terra.ReferenceSet[cloudwatchmetricstream.StatisticsConfigurationAttributes](cms.ref.Append("statistics_configuration"))
}

func (cms cloudwatchMetricStreamAttributes) Timeouts() cloudwatchmetricstream.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudwatchmetricstream.TimeoutsAttributes](cms.ref.Append("timeouts"))
}

type cloudwatchMetricStreamState struct {
	Arn                     string                                                `json:"arn"`
	CreationDate            string                                                `json:"creation_date"`
	FirehoseArn             string                                                `json:"firehose_arn"`
	Id                      string                                                `json:"id"`
	LastUpdateDate          string                                                `json:"last_update_date"`
	Name                    string                                                `json:"name"`
	NamePrefix              string                                                `json:"name_prefix"`
	OutputFormat            string                                                `json:"output_format"`
	RoleArn                 string                                                `json:"role_arn"`
	State                   string                                                `json:"state"`
	Tags                    map[string]string                                     `json:"tags"`
	TagsAll                 map[string]string                                     `json:"tags_all"`
	ExcludeFilter           []cloudwatchmetricstream.ExcludeFilterState           `json:"exclude_filter"`
	IncludeFilter           []cloudwatchmetricstream.IncludeFilterState           `json:"include_filter"`
	StatisticsConfiguration []cloudwatchmetricstream.StatisticsConfigurationState `json:"statistics_configuration"`
	Timeouts                *cloudwatchmetricstream.TimeoutsState                 `json:"timeouts"`
}
