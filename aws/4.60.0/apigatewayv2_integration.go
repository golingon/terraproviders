// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	apigatewayv2integration "github.com/golingon/terraproviders/aws/4.60.0/apigatewayv2integration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigatewayv2Integration(name string, args Apigatewayv2IntegrationArgs) *Apigatewayv2Integration {
	return &Apigatewayv2Integration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Apigatewayv2Integration)(nil)

type Apigatewayv2Integration struct {
	Name  string
	Args  Apigatewayv2IntegrationArgs
	state *apigatewayv2IntegrationState
}

func (ai *Apigatewayv2Integration) Type() string {
	return "aws_apigatewayv2_integration"
}

func (ai *Apigatewayv2Integration) LocalName() string {
	return ai.Name
}

func (ai *Apigatewayv2Integration) Configuration() interface{} {
	return ai.Args
}

func (ai *Apigatewayv2Integration) Attributes() apigatewayv2IntegrationAttributes {
	return apigatewayv2IntegrationAttributes{ref: terra.ReferenceResource(ai)}
}

func (ai *Apigatewayv2Integration) ImportState(av io.Reader) error {
	ai.state = &apigatewayv2IntegrationState{}
	if err := json.NewDecoder(av).Decode(ai.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ai.Type(), ai.LocalName(), err)
	}
	return nil
}

func (ai *Apigatewayv2Integration) State() (*apigatewayv2IntegrationState, bool) {
	return ai.state, ai.state != nil
}

func (ai *Apigatewayv2Integration) StateMust() *apigatewayv2IntegrationState {
	if ai.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ai.Type(), ai.LocalName()))
	}
	return ai.state
}

func (ai *Apigatewayv2Integration) DependOn() terra.Reference {
	return terra.ReferenceResource(ai)
}

type Apigatewayv2IntegrationArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// ConnectionId: string, optional
	ConnectionId terra.StringValue `hcl:"connection_id,attr"`
	// ConnectionType: string, optional
	ConnectionType terra.StringValue `hcl:"connection_type,attr"`
	// ContentHandlingStrategy: string, optional
	ContentHandlingStrategy terra.StringValue `hcl:"content_handling_strategy,attr"`
	// CredentialsArn: string, optional
	CredentialsArn terra.StringValue `hcl:"credentials_arn,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IntegrationMethod: string, optional
	IntegrationMethod terra.StringValue `hcl:"integration_method,attr"`
	// IntegrationSubtype: string, optional
	IntegrationSubtype terra.StringValue `hcl:"integration_subtype,attr"`
	// IntegrationType: string, required
	IntegrationType terra.StringValue `hcl:"integration_type,attr" validate:"required"`
	// IntegrationUri: string, optional
	IntegrationUri terra.StringValue `hcl:"integration_uri,attr"`
	// PassthroughBehavior: string, optional
	PassthroughBehavior terra.StringValue `hcl:"passthrough_behavior,attr"`
	// PayloadFormatVersion: string, optional
	PayloadFormatVersion terra.StringValue `hcl:"payload_format_version,attr"`
	// RequestParameters: map of string, optional
	RequestParameters terra.MapValue[terra.StringValue] `hcl:"request_parameters,attr"`
	// RequestTemplates: map of string, optional
	RequestTemplates terra.MapValue[terra.StringValue] `hcl:"request_templates,attr"`
	// TemplateSelectionExpression: string, optional
	TemplateSelectionExpression terra.StringValue `hcl:"template_selection_expression,attr"`
	// TimeoutMilliseconds: number, optional
	TimeoutMilliseconds terra.NumberValue `hcl:"timeout_milliseconds,attr"`
	// ResponseParameters: min=0
	ResponseParameters []apigatewayv2integration.ResponseParameters `hcl:"response_parameters,block" validate:"min=0"`
	// TlsConfig: optional
	TlsConfig *apigatewayv2integration.TlsConfig `hcl:"tls_config,block"`
	// DependsOn contains resources that Apigatewayv2Integration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigatewayv2IntegrationAttributes struct {
	ref terra.Reference
}

func (ai apigatewayv2IntegrationAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("api_id"))
}

func (ai apigatewayv2IntegrationAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("connection_id"))
}

func (ai apigatewayv2IntegrationAttributes) ConnectionType() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("connection_type"))
}

func (ai apigatewayv2IntegrationAttributes) ContentHandlingStrategy() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("content_handling_strategy"))
}

func (ai apigatewayv2IntegrationAttributes) CredentialsArn() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("credentials_arn"))
}

func (ai apigatewayv2IntegrationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("description"))
}

func (ai apigatewayv2IntegrationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("id"))
}

func (ai apigatewayv2IntegrationAttributes) IntegrationMethod() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("integration_method"))
}

func (ai apigatewayv2IntegrationAttributes) IntegrationResponseSelectionExpression() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("integration_response_selection_expression"))
}

func (ai apigatewayv2IntegrationAttributes) IntegrationSubtype() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("integration_subtype"))
}

func (ai apigatewayv2IntegrationAttributes) IntegrationType() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("integration_type"))
}

func (ai apigatewayv2IntegrationAttributes) IntegrationUri() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("integration_uri"))
}

func (ai apigatewayv2IntegrationAttributes) PassthroughBehavior() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("passthrough_behavior"))
}

func (ai apigatewayv2IntegrationAttributes) PayloadFormatVersion() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("payload_format_version"))
}

func (ai apigatewayv2IntegrationAttributes) RequestParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ai.ref.Append("request_parameters"))
}

func (ai apigatewayv2IntegrationAttributes) RequestTemplates() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ai.ref.Append("request_templates"))
}

func (ai apigatewayv2IntegrationAttributes) TemplateSelectionExpression() terra.StringValue {
	return terra.ReferenceString(ai.ref.Append("template_selection_expression"))
}

func (ai apigatewayv2IntegrationAttributes) TimeoutMilliseconds() terra.NumberValue {
	return terra.ReferenceNumber(ai.ref.Append("timeout_milliseconds"))
}

func (ai apigatewayv2IntegrationAttributes) ResponseParameters() terra.SetValue[apigatewayv2integration.ResponseParametersAttributes] {
	return terra.ReferenceSet[apigatewayv2integration.ResponseParametersAttributes](ai.ref.Append("response_parameters"))
}

func (ai apigatewayv2IntegrationAttributes) TlsConfig() terra.ListValue[apigatewayv2integration.TlsConfigAttributes] {
	return terra.ReferenceList[apigatewayv2integration.TlsConfigAttributes](ai.ref.Append("tls_config"))
}

type apigatewayv2IntegrationState struct {
	ApiId                                  string                                            `json:"api_id"`
	ConnectionId                           string                                            `json:"connection_id"`
	ConnectionType                         string                                            `json:"connection_type"`
	ContentHandlingStrategy                string                                            `json:"content_handling_strategy"`
	CredentialsArn                         string                                            `json:"credentials_arn"`
	Description                            string                                            `json:"description"`
	Id                                     string                                            `json:"id"`
	IntegrationMethod                      string                                            `json:"integration_method"`
	IntegrationResponseSelectionExpression string                                            `json:"integration_response_selection_expression"`
	IntegrationSubtype                     string                                            `json:"integration_subtype"`
	IntegrationType                        string                                            `json:"integration_type"`
	IntegrationUri                         string                                            `json:"integration_uri"`
	PassthroughBehavior                    string                                            `json:"passthrough_behavior"`
	PayloadFormatVersion                   string                                            `json:"payload_format_version"`
	RequestParameters                      map[string]string                                 `json:"request_parameters"`
	RequestTemplates                       map[string]string                                 `json:"request_templates"`
	TemplateSelectionExpression            string                                            `json:"template_selection_expression"`
	TimeoutMilliseconds                    float64                                           `json:"timeout_milliseconds"`
	ResponseParameters                     []apigatewayv2integration.ResponseParametersState `json:"response_parameters"`
	TlsConfig                              []apigatewayv2integration.TlsConfigState          `json:"tls_config"`
}
