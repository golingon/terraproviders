// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiGatewayIntegrationResponse(name string, args ApiGatewayIntegrationResponseArgs) *ApiGatewayIntegrationResponse {
	return &ApiGatewayIntegrationResponse{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayIntegrationResponse)(nil)

type ApiGatewayIntegrationResponse struct {
	Name  string
	Args  ApiGatewayIntegrationResponseArgs
	state *apiGatewayIntegrationResponseState
}

func (agir *ApiGatewayIntegrationResponse) Type() string {
	return "aws_api_gateway_integration_response"
}

func (agir *ApiGatewayIntegrationResponse) LocalName() string {
	return agir.Name
}

func (agir *ApiGatewayIntegrationResponse) Configuration() interface{} {
	return agir.Args
}

func (agir *ApiGatewayIntegrationResponse) Attributes() apiGatewayIntegrationResponseAttributes {
	return apiGatewayIntegrationResponseAttributes{ref: terra.ReferenceResource(agir)}
}

func (agir *ApiGatewayIntegrationResponse) ImportState(av io.Reader) error {
	agir.state = &apiGatewayIntegrationResponseState{}
	if err := json.NewDecoder(av).Decode(agir.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agir.Type(), agir.LocalName(), err)
	}
	return nil
}

func (agir *ApiGatewayIntegrationResponse) State() (*apiGatewayIntegrationResponseState, bool) {
	return agir.state, agir.state != nil
}

func (agir *ApiGatewayIntegrationResponse) StateMust() *apiGatewayIntegrationResponseState {
	if agir.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agir.Type(), agir.LocalName()))
	}
	return agir.state
}

func (agir *ApiGatewayIntegrationResponse) DependOn() terra.Reference {
	return terra.ReferenceResource(agir)
}

type ApiGatewayIntegrationResponseArgs struct {
	// ContentHandling: string, optional
	ContentHandling terra.StringValue `hcl:"content_handling,attr"`
	// HttpMethod: string, required
	HttpMethod terra.StringValue `hcl:"http_method,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
	// ResponseParameters: map of string, optional
	ResponseParameters terra.MapValue[terra.StringValue] `hcl:"response_parameters,attr"`
	// ResponseTemplates: map of string, optional
	ResponseTemplates terra.MapValue[terra.StringValue] `hcl:"response_templates,attr"`
	// RestApiId: string, required
	RestApiId terra.StringValue `hcl:"rest_api_id,attr" validate:"required"`
	// SelectionPattern: string, optional
	SelectionPattern terra.StringValue `hcl:"selection_pattern,attr"`
	// StatusCode: string, required
	StatusCode terra.StringValue `hcl:"status_code,attr" validate:"required"`
	// DependsOn contains resources that ApiGatewayIntegrationResponse depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiGatewayIntegrationResponseAttributes struct {
	ref terra.Reference
}

func (agir apiGatewayIntegrationResponseAttributes) ContentHandling() terra.StringValue {
	return terra.ReferenceString(agir.ref.Append("content_handling"))
}

func (agir apiGatewayIntegrationResponseAttributes) HttpMethod() terra.StringValue {
	return terra.ReferenceString(agir.ref.Append("http_method"))
}

func (agir apiGatewayIntegrationResponseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(agir.ref.Append("id"))
}

func (agir apiGatewayIntegrationResponseAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(agir.ref.Append("resource_id"))
}

func (agir apiGatewayIntegrationResponseAttributes) ResponseParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agir.ref.Append("response_parameters"))
}

func (agir apiGatewayIntegrationResponseAttributes) ResponseTemplates() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agir.ref.Append("response_templates"))
}

func (agir apiGatewayIntegrationResponseAttributes) RestApiId() terra.StringValue {
	return terra.ReferenceString(agir.ref.Append("rest_api_id"))
}

func (agir apiGatewayIntegrationResponseAttributes) SelectionPattern() terra.StringValue {
	return terra.ReferenceString(agir.ref.Append("selection_pattern"))
}

func (agir apiGatewayIntegrationResponseAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceString(agir.ref.Append("status_code"))
}

type apiGatewayIntegrationResponseState struct {
	ContentHandling    string            `json:"content_handling"`
	HttpMethod         string            `json:"http_method"`
	Id                 string            `json:"id"`
	ResourceId         string            `json:"resource_id"`
	ResponseParameters map[string]string `json:"response_parameters"`
	ResponseTemplates  map[string]string `json:"response_templates"`
	RestApiId          string            `json:"rest_api_id"`
	SelectionPattern   string            `json:"selection_pattern"`
	StatusCode         string            `json:"status_code"`
}
