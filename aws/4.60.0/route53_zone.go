// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	route53zone "github.com/golingon/terraproviders/aws/4.60.0/route53zone"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53Zone(name string, args Route53ZoneArgs) *Route53Zone {
	return &Route53Zone{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53Zone)(nil)

type Route53Zone struct {
	Name  string
	Args  Route53ZoneArgs
	state *route53ZoneState
}

func (rz *Route53Zone) Type() string {
	return "aws_route53_zone"
}

func (rz *Route53Zone) LocalName() string {
	return rz.Name
}

func (rz *Route53Zone) Configuration() interface{} {
	return rz.Args
}

func (rz *Route53Zone) Attributes() route53ZoneAttributes {
	return route53ZoneAttributes{ref: terra.ReferenceResource(rz)}
}

func (rz *Route53Zone) ImportState(av io.Reader) error {
	rz.state = &route53ZoneState{}
	if err := json.NewDecoder(av).Decode(rz.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rz.Type(), rz.LocalName(), err)
	}
	return nil
}

func (rz *Route53Zone) State() (*route53ZoneState, bool) {
	return rz.state, rz.state != nil
}

func (rz *Route53Zone) StateMust() *route53ZoneState {
	if rz.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rz.Type(), rz.LocalName()))
	}
	return rz.state
}

func (rz *Route53Zone) DependOn() terra.Reference {
	return terra.ReferenceResource(rz)
}

type Route53ZoneArgs struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// DelegationSetId: string, optional
	DelegationSetId terra.StringValue `hcl:"delegation_set_id,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Vpc: min=0
	Vpc []route53zone.Vpc `hcl:"vpc,block" validate:"min=0"`
	// DependsOn contains resources that Route53Zone depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53ZoneAttributes struct {
	ref terra.Reference
}

func (rz route53ZoneAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rz.ref.Append("arn"))
}

func (rz route53ZoneAttributes) Comment() terra.StringValue {
	return terra.ReferenceString(rz.ref.Append("comment"))
}

func (rz route53ZoneAttributes) DelegationSetId() terra.StringValue {
	return terra.ReferenceString(rz.ref.Append("delegation_set_id"))
}

func (rz route53ZoneAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceBool(rz.ref.Append("force_destroy"))
}

func (rz route53ZoneAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rz.ref.Append("id"))
}

func (rz route53ZoneAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rz.ref.Append("name"))
}

func (rz route53ZoneAttributes) NameServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](rz.ref.Append("name_servers"))
}

func (rz route53ZoneAttributes) PrimaryNameServer() terra.StringValue {
	return terra.ReferenceString(rz.ref.Append("primary_name_server"))
}

func (rz route53ZoneAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rz.ref.Append("tags"))
}

func (rz route53ZoneAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rz.ref.Append("tags_all"))
}

func (rz route53ZoneAttributes) ZoneId() terra.StringValue {
	return terra.ReferenceString(rz.ref.Append("zone_id"))
}

func (rz route53ZoneAttributes) Vpc() terra.SetValue[route53zone.VpcAttributes] {
	return terra.ReferenceSet[route53zone.VpcAttributes](rz.ref.Append("vpc"))
}

type route53ZoneState struct {
	Arn               string                 `json:"arn"`
	Comment           string                 `json:"comment"`
	DelegationSetId   string                 `json:"delegation_set_id"`
	ForceDestroy      bool                   `json:"force_destroy"`
	Id                string                 `json:"id"`
	Name              string                 `json:"name"`
	NameServers       []string               `json:"name_servers"`
	PrimaryNameServer string                 `json:"primary_name_server"`
	Tags              map[string]string      `json:"tags"`
	TagsAll           map[string]string      `json:"tags_all"`
	ZoneId            string                 `json:"zone_id"`
	Vpc               []route53zone.VpcState `json:"vpc"`
}
