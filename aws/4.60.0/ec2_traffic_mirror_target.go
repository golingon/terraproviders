// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2TrafficMirrorTarget(name string, args Ec2TrafficMirrorTargetArgs) *Ec2TrafficMirrorTarget {
	return &Ec2TrafficMirrorTarget{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TrafficMirrorTarget)(nil)

type Ec2TrafficMirrorTarget struct {
	Name  string
	Args  Ec2TrafficMirrorTargetArgs
	state *ec2TrafficMirrorTargetState
}

func (etmt *Ec2TrafficMirrorTarget) Type() string {
	return "aws_ec2_traffic_mirror_target"
}

func (etmt *Ec2TrafficMirrorTarget) LocalName() string {
	return etmt.Name
}

func (etmt *Ec2TrafficMirrorTarget) Configuration() interface{} {
	return etmt.Args
}

func (etmt *Ec2TrafficMirrorTarget) Attributes() ec2TrafficMirrorTargetAttributes {
	return ec2TrafficMirrorTargetAttributes{ref: terra.ReferenceResource(etmt)}
}

func (etmt *Ec2TrafficMirrorTarget) ImportState(av io.Reader) error {
	etmt.state = &ec2TrafficMirrorTargetState{}
	if err := json.NewDecoder(av).Decode(etmt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etmt.Type(), etmt.LocalName(), err)
	}
	return nil
}

func (etmt *Ec2TrafficMirrorTarget) State() (*ec2TrafficMirrorTargetState, bool) {
	return etmt.state, etmt.state != nil
}

func (etmt *Ec2TrafficMirrorTarget) StateMust() *ec2TrafficMirrorTargetState {
	if etmt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etmt.Type(), etmt.LocalName()))
	}
	return etmt.state
}

func (etmt *Ec2TrafficMirrorTarget) DependOn() terra.Reference {
	return terra.ReferenceResource(etmt)
}

type Ec2TrafficMirrorTargetArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GatewayLoadBalancerEndpointId: string, optional
	GatewayLoadBalancerEndpointId terra.StringValue `hcl:"gateway_load_balancer_endpoint_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetworkInterfaceId: string, optional
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr"`
	// NetworkLoadBalancerArn: string, optional
	NetworkLoadBalancerArn terra.StringValue `hcl:"network_load_balancer_arn,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that Ec2TrafficMirrorTarget depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2TrafficMirrorTargetAttributes struct {
	ref terra.Reference
}

func (etmt ec2TrafficMirrorTargetAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(etmt.ref.Append("arn"))
}

func (etmt ec2TrafficMirrorTargetAttributes) Description() terra.StringValue {
	return terra.ReferenceString(etmt.ref.Append("description"))
}

func (etmt ec2TrafficMirrorTargetAttributes) GatewayLoadBalancerEndpointId() terra.StringValue {
	return terra.ReferenceString(etmt.ref.Append("gateway_load_balancer_endpoint_id"))
}

func (etmt ec2TrafficMirrorTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etmt.ref.Append("id"))
}

func (etmt ec2TrafficMirrorTargetAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceString(etmt.ref.Append("network_interface_id"))
}

func (etmt ec2TrafficMirrorTargetAttributes) NetworkLoadBalancerArn() terra.StringValue {
	return terra.ReferenceString(etmt.ref.Append("network_load_balancer_arn"))
}

func (etmt ec2TrafficMirrorTargetAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(etmt.ref.Append("owner_id"))
}

func (etmt ec2TrafficMirrorTargetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etmt.ref.Append("tags"))
}

func (etmt ec2TrafficMirrorTargetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etmt.ref.Append("tags_all"))
}

type ec2TrafficMirrorTargetState struct {
	Arn                           string            `json:"arn"`
	Description                   string            `json:"description"`
	GatewayLoadBalancerEndpointId string            `json:"gateway_load_balancer_endpoint_id"`
	Id                            string            `json:"id"`
	NetworkInterfaceId            string            `json:"network_interface_id"`
	NetworkLoadBalancerArn        string            `json:"network_load_balancer_arn"`
	OwnerId                       string            `json:"owner_id"`
	Tags                          map[string]string `json:"tags"`
	TagsAll                       map[string]string `json:"tags_all"`
}
