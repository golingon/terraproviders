// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewElasticacheUserGroupAssociation(name string, args ElasticacheUserGroupAssociationArgs) *ElasticacheUserGroupAssociation {
	return &ElasticacheUserGroupAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElasticacheUserGroupAssociation)(nil)

type ElasticacheUserGroupAssociation struct {
	Name  string
	Args  ElasticacheUserGroupAssociationArgs
	state *elasticacheUserGroupAssociationState
}

func (euga *ElasticacheUserGroupAssociation) Type() string {
	return "aws_elasticache_user_group_association"
}

func (euga *ElasticacheUserGroupAssociation) LocalName() string {
	return euga.Name
}

func (euga *ElasticacheUserGroupAssociation) Configuration() interface{} {
	return euga.Args
}

func (euga *ElasticacheUserGroupAssociation) Attributes() elasticacheUserGroupAssociationAttributes {
	return elasticacheUserGroupAssociationAttributes{ref: terra.ReferenceResource(euga)}
}

func (euga *ElasticacheUserGroupAssociation) ImportState(av io.Reader) error {
	euga.state = &elasticacheUserGroupAssociationState{}
	if err := json.NewDecoder(av).Decode(euga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", euga.Type(), euga.LocalName(), err)
	}
	return nil
}

func (euga *ElasticacheUserGroupAssociation) State() (*elasticacheUserGroupAssociationState, bool) {
	return euga.state, euga.state != nil
}

func (euga *ElasticacheUserGroupAssociation) StateMust() *elasticacheUserGroupAssociationState {
	if euga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", euga.Type(), euga.LocalName()))
	}
	return euga.state
}

func (euga *ElasticacheUserGroupAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(euga)
}

type ElasticacheUserGroupAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// UserGroupId: string, required
	UserGroupId terra.StringValue `hcl:"user_group_id,attr" validate:"required"`
	// UserId: string, required
	UserId terra.StringValue `hcl:"user_id,attr" validate:"required"`
	// DependsOn contains resources that ElasticacheUserGroupAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type elasticacheUserGroupAssociationAttributes struct {
	ref terra.Reference
}

func (euga elasticacheUserGroupAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(euga.ref.Append("id"))
}

func (euga elasticacheUserGroupAssociationAttributes) UserGroupId() terra.StringValue {
	return terra.ReferenceString(euga.ref.Append("user_group_id"))
}

func (euga elasticacheUserGroupAssociationAttributes) UserId() terra.StringValue {
	return terra.ReferenceString(euga.ref.Append("user_id"))
}

type elasticacheUserGroupAssociationState struct {
	Id          string `json:"id"`
	UserGroupId string `json:"user_group_id"`
	UserId      string `json:"user_id"`
}
