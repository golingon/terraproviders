// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datasynclocationfsxopenzfsfilesystem

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Protocol struct {
	// Nfs: required
	Nfs *Nfs `hcl:"nfs,block" validate:"required"`
}

type Nfs struct {
	// MountOptions: required
	MountOptions *MountOptions `hcl:"mount_options,block" validate:"required"`
}

type MountOptions struct {
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type ProtocolAttributes struct {
	ref terra.Reference
}

func (p ProtocolAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ProtocolAttributes) InternalWithRef(ref terra.Reference) ProtocolAttributes {
	return ProtocolAttributes{ref: ref}
}

func (p ProtocolAttributes) InternalTokens() hclwrite.Tokens {
	return p.ref.InternalTokens()
}

func (p ProtocolAttributes) Nfs() terra.ListValue[NfsAttributes] {
	return terra.ReferenceAsList[NfsAttributes](p.ref.Append("nfs"))
}

type NfsAttributes struct {
	ref terra.Reference
}

func (n NfsAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n NfsAttributes) InternalWithRef(ref terra.Reference) NfsAttributes {
	return NfsAttributes{ref: ref}
}

func (n NfsAttributes) InternalTokens() hclwrite.Tokens {
	return n.ref.InternalTokens()
}

func (n NfsAttributes) MountOptions() terra.ListValue[MountOptionsAttributes] {
	return terra.ReferenceAsList[MountOptionsAttributes](n.ref.Append("mount_options"))
}

type MountOptionsAttributes struct {
	ref terra.Reference
}

func (mo MountOptionsAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo MountOptionsAttributes) InternalWithRef(ref terra.Reference) MountOptionsAttributes {
	return MountOptionsAttributes{ref: ref}
}

func (mo MountOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return mo.ref.InternalTokens()
}

func (mo MountOptionsAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("version"))
}

type ProtocolState struct {
	Nfs []NfsState `json:"nfs"`
}

type NfsState struct {
	MountOptions []MountOptionsState `json:"mount_options"`
}

type MountOptionsState struct {
	Version string `json:"version"`
}
