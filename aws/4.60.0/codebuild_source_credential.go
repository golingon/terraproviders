// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCodebuildSourceCredential(name string, args CodebuildSourceCredentialArgs) *CodebuildSourceCredential {
	return &CodebuildSourceCredential{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodebuildSourceCredential)(nil)

type CodebuildSourceCredential struct {
	Name  string
	Args  CodebuildSourceCredentialArgs
	state *codebuildSourceCredentialState
}

func (csc *CodebuildSourceCredential) Type() string {
	return "aws_codebuild_source_credential"
}

func (csc *CodebuildSourceCredential) LocalName() string {
	return csc.Name
}

func (csc *CodebuildSourceCredential) Configuration() interface{} {
	return csc.Args
}

func (csc *CodebuildSourceCredential) Attributes() codebuildSourceCredentialAttributes {
	return codebuildSourceCredentialAttributes{ref: terra.ReferenceResource(csc)}
}

func (csc *CodebuildSourceCredential) ImportState(av io.Reader) error {
	csc.state = &codebuildSourceCredentialState{}
	if err := json.NewDecoder(av).Decode(csc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", csc.Type(), csc.LocalName(), err)
	}
	return nil
}

func (csc *CodebuildSourceCredential) State() (*codebuildSourceCredentialState, bool) {
	return csc.state, csc.state != nil
}

func (csc *CodebuildSourceCredential) StateMust() *codebuildSourceCredentialState {
	if csc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", csc.Type(), csc.LocalName()))
	}
	return csc.state
}

func (csc *CodebuildSourceCredential) DependOn() terra.Reference {
	return terra.ReferenceResource(csc)
}

type CodebuildSourceCredentialArgs struct {
	// AuthType: string, required
	AuthType terra.StringValue `hcl:"auth_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServerType: string, required
	ServerType terra.StringValue `hcl:"server_type,attr" validate:"required"`
	// Token: string, required
	Token terra.StringValue `hcl:"token,attr" validate:"required"`
	// UserName: string, optional
	UserName terra.StringValue `hcl:"user_name,attr"`
	// DependsOn contains resources that CodebuildSourceCredential depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type codebuildSourceCredentialAttributes struct {
	ref terra.Reference
}

func (csc codebuildSourceCredentialAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("arn"))
}

func (csc codebuildSourceCredentialAttributes) AuthType() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("auth_type"))
}

func (csc codebuildSourceCredentialAttributes) Id() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("id"))
}

func (csc codebuildSourceCredentialAttributes) ServerType() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("server_type"))
}

func (csc codebuildSourceCredentialAttributes) Token() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("token"))
}

func (csc codebuildSourceCredentialAttributes) UserName() terra.StringValue {
	return terra.ReferenceString(csc.ref.Append("user_name"))
}

type codebuildSourceCredentialState struct {
	Arn        string `json:"arn"`
	AuthType   string `json:"auth_type"`
	Id         string `json:"id"`
	ServerType string `json:"server_type"`
	Token      string `json:"token"`
	UserName   string `json:"user_name"`
}
