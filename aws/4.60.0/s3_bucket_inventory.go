// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3bucketinventory "github.com/golingon/terraproviders/aws/4.60.0/s3bucketinventory"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketInventory(name string, args S3BucketInventoryArgs) *S3BucketInventory {
	return &S3BucketInventory{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketInventory)(nil)

type S3BucketInventory struct {
	Name  string
	Args  S3BucketInventoryArgs
	state *s3BucketInventoryState
}

func (sbi *S3BucketInventory) Type() string {
	return "aws_s3_bucket_inventory"
}

func (sbi *S3BucketInventory) LocalName() string {
	return sbi.Name
}

func (sbi *S3BucketInventory) Configuration() interface{} {
	return sbi.Args
}

func (sbi *S3BucketInventory) Attributes() s3BucketInventoryAttributes {
	return s3BucketInventoryAttributes{ref: terra.ReferenceResource(sbi)}
}

func (sbi *S3BucketInventory) ImportState(av io.Reader) error {
	sbi.state = &s3BucketInventoryState{}
	if err := json.NewDecoder(av).Decode(sbi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbi.Type(), sbi.LocalName(), err)
	}
	return nil
}

func (sbi *S3BucketInventory) State() (*s3BucketInventoryState, bool) {
	return sbi.state, sbi.state != nil
}

func (sbi *S3BucketInventory) StateMust() *s3BucketInventoryState {
	if sbi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbi.Type(), sbi.LocalName()))
	}
	return sbi.state
}

func (sbi *S3BucketInventory) DependOn() terra.Reference {
	return terra.ReferenceResource(sbi)
}

type S3BucketInventoryArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IncludedObjectVersions: string, required
	IncludedObjectVersions terra.StringValue `hcl:"included_object_versions,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OptionalFields: set of string, optional
	OptionalFields terra.SetValue[terra.StringValue] `hcl:"optional_fields,attr"`
	// Destination: required
	Destination *s3bucketinventory.Destination `hcl:"destination,block" validate:"required"`
	// Filter: optional
	Filter *s3bucketinventory.Filter `hcl:"filter,block"`
	// Schedule: required
	Schedule *s3bucketinventory.Schedule `hcl:"schedule,block" validate:"required"`
	// DependsOn contains resources that S3BucketInventory depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketInventoryAttributes struct {
	ref terra.Reference
}

func (sbi s3BucketInventoryAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbi.ref.Append("bucket"))
}

func (sbi s3BucketInventoryAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(sbi.ref.Append("enabled"))
}

func (sbi s3BucketInventoryAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbi.ref.Append("id"))
}

func (sbi s3BucketInventoryAttributes) IncludedObjectVersions() terra.StringValue {
	return terra.ReferenceString(sbi.ref.Append("included_object_versions"))
}

func (sbi s3BucketInventoryAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sbi.ref.Append("name"))
}

func (sbi s3BucketInventoryAttributes) OptionalFields() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sbi.ref.Append("optional_fields"))
}

func (sbi s3BucketInventoryAttributes) Destination() terra.ListValue[s3bucketinventory.DestinationAttributes] {
	return terra.ReferenceList[s3bucketinventory.DestinationAttributes](sbi.ref.Append("destination"))
}

func (sbi s3BucketInventoryAttributes) Filter() terra.ListValue[s3bucketinventory.FilterAttributes] {
	return terra.ReferenceList[s3bucketinventory.FilterAttributes](sbi.ref.Append("filter"))
}

func (sbi s3BucketInventoryAttributes) Schedule() terra.ListValue[s3bucketinventory.ScheduleAttributes] {
	return terra.ReferenceList[s3bucketinventory.ScheduleAttributes](sbi.ref.Append("schedule"))
}

type s3BucketInventoryState struct {
	Bucket                 string                               `json:"bucket"`
	Enabled                bool                                 `json:"enabled"`
	Id                     string                               `json:"id"`
	IncludedObjectVersions string                               `json:"included_object_versions"`
	Name                   string                               `json:"name"`
	OptionalFields         []string                             `json:"optional_fields"`
	Destination            []s3bucketinventory.DestinationState `json:"destination"`
	Filter                 []s3bucketinventory.FilterState      `json:"filter"`
	Schedule               []s3bucketinventory.ScheduleState    `json:"schedule"`
}
