// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	appmeshvirtualservice "github.com/golingon/terraproviders/aws/4.60.0/appmeshvirtualservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppmeshVirtualService(name string, args AppmeshVirtualServiceArgs) *AppmeshVirtualService {
	return &AppmeshVirtualService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppmeshVirtualService)(nil)

type AppmeshVirtualService struct {
	Name  string
	Args  AppmeshVirtualServiceArgs
	state *appmeshVirtualServiceState
}

func (avs *AppmeshVirtualService) Type() string {
	return "aws_appmesh_virtual_service"
}

func (avs *AppmeshVirtualService) LocalName() string {
	return avs.Name
}

func (avs *AppmeshVirtualService) Configuration() interface{} {
	return avs.Args
}

func (avs *AppmeshVirtualService) Attributes() appmeshVirtualServiceAttributes {
	return appmeshVirtualServiceAttributes{ref: terra.ReferenceResource(avs)}
}

func (avs *AppmeshVirtualService) ImportState(av io.Reader) error {
	avs.state = &appmeshVirtualServiceState{}
	if err := json.NewDecoder(av).Decode(avs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avs.Type(), avs.LocalName(), err)
	}
	return nil
}

func (avs *AppmeshVirtualService) State() (*appmeshVirtualServiceState, bool) {
	return avs.state, avs.state != nil
}

func (avs *AppmeshVirtualService) StateMust() *appmeshVirtualServiceState {
	if avs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avs.Type(), avs.LocalName()))
	}
	return avs.state
}

func (avs *AppmeshVirtualService) DependOn() terra.Reference {
	return terra.ReferenceResource(avs)
}

type AppmeshVirtualServiceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MeshName: string, required
	MeshName terra.StringValue `hcl:"mesh_name,attr" validate:"required"`
	// MeshOwner: string, optional
	MeshOwner terra.StringValue `hcl:"mesh_owner,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Spec: required
	Spec *appmeshvirtualservice.Spec `hcl:"spec,block" validate:"required"`
	// DependsOn contains resources that AppmeshVirtualService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appmeshVirtualServiceAttributes struct {
	ref terra.Reference
}

func (avs appmeshVirtualServiceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(avs.ref.Append("arn"))
}

func (avs appmeshVirtualServiceAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceString(avs.ref.Append("created_date"))
}

func (avs appmeshVirtualServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(avs.ref.Append("id"))
}

func (avs appmeshVirtualServiceAttributes) LastUpdatedDate() terra.StringValue {
	return terra.ReferenceString(avs.ref.Append("last_updated_date"))
}

func (avs appmeshVirtualServiceAttributes) MeshName() terra.StringValue {
	return terra.ReferenceString(avs.ref.Append("mesh_name"))
}

func (avs appmeshVirtualServiceAttributes) MeshOwner() terra.StringValue {
	return terra.ReferenceString(avs.ref.Append("mesh_owner"))
}

func (avs appmeshVirtualServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(avs.ref.Append("name"))
}

func (avs appmeshVirtualServiceAttributes) ResourceOwner() terra.StringValue {
	return terra.ReferenceString(avs.ref.Append("resource_owner"))
}

func (avs appmeshVirtualServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](avs.ref.Append("tags"))
}

func (avs appmeshVirtualServiceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](avs.ref.Append("tags_all"))
}

func (avs appmeshVirtualServiceAttributes) Spec() terra.ListValue[appmeshvirtualservice.SpecAttributes] {
	return terra.ReferenceList[appmeshvirtualservice.SpecAttributes](avs.ref.Append("spec"))
}

type appmeshVirtualServiceState struct {
	Arn             string                            `json:"arn"`
	CreatedDate     string                            `json:"created_date"`
	Id              string                            `json:"id"`
	LastUpdatedDate string                            `json:"last_updated_date"`
	MeshName        string                            `json:"mesh_name"`
	MeshOwner       string                            `json:"mesh_owner"`
	Name            string                            `json:"name"`
	ResourceOwner   string                            `json:"resource_owner"`
	Tags            map[string]string                 `json:"tags"`
	TagsAll         map[string]string                 `json:"tags_all"`
	Spec            []appmeshvirtualservice.SpecState `json:"spec"`
}
