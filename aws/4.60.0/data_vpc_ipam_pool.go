// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	datavpcipampool "github.com/golingon/terraproviders/aws/4.60.0/datavpcipampool"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataVpcIpamPool(name string, args DataVpcIpamPoolArgs) *DataVpcIpamPool {
	return &DataVpcIpamPool{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataVpcIpamPool)(nil)

type DataVpcIpamPool struct {
	Name string
	Args DataVpcIpamPoolArgs
}

func (vip *DataVpcIpamPool) DataSource() string {
	return "aws_vpc_ipam_pool"
}

func (vip *DataVpcIpamPool) LocalName() string {
	return vip.Name
}

func (vip *DataVpcIpamPool) Configuration() interface{} {
	return vip.Args
}

func (vip *DataVpcIpamPool) Attributes() dataVpcIpamPoolAttributes {
	return dataVpcIpamPoolAttributes{ref: terra.ReferenceDataResource(vip)}
}

type DataVpcIpamPoolArgs struct {
	// AllocationResourceTags: map of string, optional
	AllocationResourceTags terra.MapValue[terra.StringValue] `hcl:"allocation_resource_tags,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpamPoolId: string, optional
	IpamPoolId terra.StringValue `hcl:"ipam_pool_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filter: min=0
	Filter []datavpcipampool.Filter `hcl:"filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datavpcipampool.Timeouts `hcl:"timeouts,block"`
}
type dataVpcIpamPoolAttributes struct {
	ref terra.Reference
}

func (vip dataVpcIpamPoolAttributes) AddressFamily() terra.StringValue {
	return terra.ReferenceString(vip.ref.Append("address_family"))
}

func (vip dataVpcIpamPoolAttributes) AllocationDefaultNetmaskLength() terra.NumberValue {
	return terra.ReferenceNumber(vip.ref.Append("allocation_default_netmask_length"))
}

func (vip dataVpcIpamPoolAttributes) AllocationMaxNetmaskLength() terra.NumberValue {
	return terra.ReferenceNumber(vip.ref.Append("allocation_max_netmask_length"))
}

func (vip dataVpcIpamPoolAttributes) AllocationMinNetmaskLength() terra.NumberValue {
	return terra.ReferenceNumber(vip.ref.Append("allocation_min_netmask_length"))
}

func (vip dataVpcIpamPoolAttributes) AllocationResourceTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vip.ref.Append("allocation_resource_tags"))
}

func (vip dataVpcIpamPoolAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(vip.ref.Append("arn"))
}

func (vip dataVpcIpamPoolAttributes) AutoImport() terra.BoolValue {
	return terra.ReferenceBool(vip.ref.Append("auto_import"))
}

func (vip dataVpcIpamPoolAttributes) AwsService() terra.StringValue {
	return terra.ReferenceString(vip.ref.Append("aws_service"))
}

func (vip dataVpcIpamPoolAttributes) Description() terra.StringValue {
	return terra.ReferenceString(vip.ref.Append("description"))
}

func (vip dataVpcIpamPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vip.ref.Append("id"))
}

func (vip dataVpcIpamPoolAttributes) IpamPoolId() terra.StringValue {
	return terra.ReferenceString(vip.ref.Append("ipam_pool_id"))
}

func (vip dataVpcIpamPoolAttributes) IpamScopeId() terra.StringValue {
	return terra.ReferenceString(vip.ref.Append("ipam_scope_id"))
}

func (vip dataVpcIpamPoolAttributes) IpamScopeType() terra.StringValue {
	return terra.ReferenceString(vip.ref.Append("ipam_scope_type"))
}

func (vip dataVpcIpamPoolAttributes) Locale() terra.StringValue {
	return terra.ReferenceString(vip.ref.Append("locale"))
}

func (vip dataVpcIpamPoolAttributes) PoolDepth() terra.NumberValue {
	return terra.ReferenceNumber(vip.ref.Append("pool_depth"))
}

func (vip dataVpcIpamPoolAttributes) PubliclyAdvertisable() terra.BoolValue {
	return terra.ReferenceBool(vip.ref.Append("publicly_advertisable"))
}

func (vip dataVpcIpamPoolAttributes) SourceIpamPoolId() terra.StringValue {
	return terra.ReferenceString(vip.ref.Append("source_ipam_pool_id"))
}

func (vip dataVpcIpamPoolAttributes) State() terra.StringValue {
	return terra.ReferenceString(vip.ref.Append("state"))
}

func (vip dataVpcIpamPoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vip.ref.Append("tags"))
}

func (vip dataVpcIpamPoolAttributes) Filter() terra.SetValue[datavpcipampool.FilterAttributes] {
	return terra.ReferenceSet[datavpcipampool.FilterAttributes](vip.ref.Append("filter"))
}

func (vip dataVpcIpamPoolAttributes) Timeouts() datavpcipampool.TimeoutsAttributes {
	return terra.ReferenceSingle[datavpcipampool.TimeoutsAttributes](vip.ref.Append("timeouts"))
}
