// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	memorydbsnapshot "github.com/golingon/terraproviders/aws/4.60.0/memorydbsnapshot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMemorydbSnapshot(name string, args MemorydbSnapshotArgs) *MemorydbSnapshot {
	return &MemorydbSnapshot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MemorydbSnapshot)(nil)

type MemorydbSnapshot struct {
	Name  string
	Args  MemorydbSnapshotArgs
	state *memorydbSnapshotState
}

func (ms *MemorydbSnapshot) Type() string {
	return "aws_memorydb_snapshot"
}

func (ms *MemorydbSnapshot) LocalName() string {
	return ms.Name
}

func (ms *MemorydbSnapshot) Configuration() interface{} {
	return ms.Args
}

func (ms *MemorydbSnapshot) Attributes() memorydbSnapshotAttributes {
	return memorydbSnapshotAttributes{ref: terra.ReferenceResource(ms)}
}

func (ms *MemorydbSnapshot) ImportState(av io.Reader) error {
	ms.state = &memorydbSnapshotState{}
	if err := json.NewDecoder(av).Decode(ms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ms.Type(), ms.LocalName(), err)
	}
	return nil
}

func (ms *MemorydbSnapshot) State() (*memorydbSnapshotState, bool) {
	return ms.state, ms.state != nil
}

func (ms *MemorydbSnapshot) StateMust() *memorydbSnapshotState {
	if ms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ms.Type(), ms.LocalName()))
	}
	return ms.state
}

func (ms *MemorydbSnapshot) DependOn() terra.Reference {
	return terra.ReferenceResource(ms)
}

type MemorydbSnapshotArgs struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ClusterConfiguration: min=0
	ClusterConfiguration []memorydbsnapshot.ClusterConfiguration `hcl:"cluster_configuration,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *memorydbsnapshot.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that MemorydbSnapshot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type memorydbSnapshotAttributes struct {
	ref terra.Reference
}

func (ms memorydbSnapshotAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("arn"))
}

func (ms memorydbSnapshotAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("cluster_name"))
}

func (ms memorydbSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("id"))
}

func (ms memorydbSnapshotAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("kms_key_arn"))
}

func (ms memorydbSnapshotAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("name"))
}

func (ms memorydbSnapshotAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("name_prefix"))
}

func (ms memorydbSnapshotAttributes) Source() terra.StringValue {
	return terra.ReferenceString(ms.ref.Append("source"))
}

func (ms memorydbSnapshotAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ms.ref.Append("tags"))
}

func (ms memorydbSnapshotAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ms.ref.Append("tags_all"))
}

func (ms memorydbSnapshotAttributes) ClusterConfiguration() terra.ListValue[memorydbsnapshot.ClusterConfigurationAttributes] {
	return terra.ReferenceList[memorydbsnapshot.ClusterConfigurationAttributes](ms.ref.Append("cluster_configuration"))
}

func (ms memorydbSnapshotAttributes) Timeouts() memorydbsnapshot.TimeoutsAttributes {
	return terra.ReferenceSingle[memorydbsnapshot.TimeoutsAttributes](ms.ref.Append("timeouts"))
}

type memorydbSnapshotState struct {
	Arn                  string                                       `json:"arn"`
	ClusterName          string                                       `json:"cluster_name"`
	Id                   string                                       `json:"id"`
	KmsKeyArn            string                                       `json:"kms_key_arn"`
	Name                 string                                       `json:"name"`
	NamePrefix           string                                       `json:"name_prefix"`
	Source               string                                       `json:"source"`
	Tags                 map[string]string                            `json:"tags"`
	TagsAll              map[string]string                            `json:"tags_all"`
	ClusterConfiguration []memorydbsnapshot.ClusterConfigurationState `json:"cluster_configuration"`
	Timeouts             *memorydbsnapshot.TimeoutsState              `json:"timeouts"`
}
