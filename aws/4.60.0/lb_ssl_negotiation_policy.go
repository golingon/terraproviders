// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lbsslnegotiationpolicy "github.com/golingon/terraproviders/aws/4.60.0/lbsslnegotiationpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLbSslNegotiationPolicy(name string, args LbSslNegotiationPolicyArgs) *LbSslNegotiationPolicy {
	return &LbSslNegotiationPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LbSslNegotiationPolicy)(nil)

type LbSslNegotiationPolicy struct {
	Name  string
	Args  LbSslNegotiationPolicyArgs
	state *lbSslNegotiationPolicyState
}

func (lsnp *LbSslNegotiationPolicy) Type() string {
	return "aws_lb_ssl_negotiation_policy"
}

func (lsnp *LbSslNegotiationPolicy) LocalName() string {
	return lsnp.Name
}

func (lsnp *LbSslNegotiationPolicy) Configuration() interface{} {
	return lsnp.Args
}

func (lsnp *LbSslNegotiationPolicy) Attributes() lbSslNegotiationPolicyAttributes {
	return lbSslNegotiationPolicyAttributes{ref: terra.ReferenceResource(lsnp)}
}

func (lsnp *LbSslNegotiationPolicy) ImportState(av io.Reader) error {
	lsnp.state = &lbSslNegotiationPolicyState{}
	if err := json.NewDecoder(av).Decode(lsnp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lsnp.Type(), lsnp.LocalName(), err)
	}
	return nil
}

func (lsnp *LbSslNegotiationPolicy) State() (*lbSslNegotiationPolicyState, bool) {
	return lsnp.state, lsnp.state != nil
}

func (lsnp *LbSslNegotiationPolicy) StateMust() *lbSslNegotiationPolicyState {
	if lsnp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lsnp.Type(), lsnp.LocalName()))
	}
	return lsnp.state
}

func (lsnp *LbSslNegotiationPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(lsnp)
}

type LbSslNegotiationPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LbPort: number, required
	LbPort terra.NumberValue `hcl:"lb_port,attr" validate:"required"`
	// LoadBalancer: string, required
	LoadBalancer terra.StringValue `hcl:"load_balancer,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
	// Attribute: min=0
	Attribute []lbsslnegotiationpolicy.Attribute `hcl:"attribute,block" validate:"min=0"`
	// DependsOn contains resources that LbSslNegotiationPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lbSslNegotiationPolicyAttributes struct {
	ref terra.Reference
}

func (lsnp lbSslNegotiationPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lsnp.ref.Append("id"))
}

func (lsnp lbSslNegotiationPolicyAttributes) LbPort() terra.NumberValue {
	return terra.ReferenceNumber(lsnp.ref.Append("lb_port"))
}

func (lsnp lbSslNegotiationPolicyAttributes) LoadBalancer() terra.StringValue {
	return terra.ReferenceString(lsnp.ref.Append("load_balancer"))
}

func (lsnp lbSslNegotiationPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lsnp.ref.Append("name"))
}

func (lsnp lbSslNegotiationPolicyAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lsnp.ref.Append("triggers"))
}

func (lsnp lbSslNegotiationPolicyAttributes) Attribute() terra.SetValue[lbsslnegotiationpolicy.AttributeAttributes] {
	return terra.ReferenceSet[lbsslnegotiationpolicy.AttributeAttributes](lsnp.ref.Append("attribute"))
}

type lbSslNegotiationPolicyState struct {
	Id           string                                  `json:"id"`
	LbPort       float64                                 `json:"lb_port"`
	LoadBalancer string                                  `json:"load_balancer"`
	Name         string                                  `json:"name"`
	Triggers     map[string]string                       `json:"triggers"`
	Attribute    []lbsslnegotiationpolicy.AttributeState `json:"attribute"`
}
