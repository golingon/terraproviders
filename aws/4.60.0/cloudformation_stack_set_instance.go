// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudformationstacksetinstance "github.com/golingon/terraproviders/aws/4.60.0/cloudformationstacksetinstance"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudformationStackSetInstance(name string, args CloudformationStackSetInstanceArgs) *CloudformationStackSetInstance {
	return &CloudformationStackSetInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudformationStackSetInstance)(nil)

type CloudformationStackSetInstance struct {
	Name  string
	Args  CloudformationStackSetInstanceArgs
	state *cloudformationStackSetInstanceState
}

func (cssi *CloudformationStackSetInstance) Type() string {
	return "aws_cloudformation_stack_set_instance"
}

func (cssi *CloudformationStackSetInstance) LocalName() string {
	return cssi.Name
}

func (cssi *CloudformationStackSetInstance) Configuration() interface{} {
	return cssi.Args
}

func (cssi *CloudformationStackSetInstance) Attributes() cloudformationStackSetInstanceAttributes {
	return cloudformationStackSetInstanceAttributes{ref: terra.ReferenceResource(cssi)}
}

func (cssi *CloudformationStackSetInstance) ImportState(av io.Reader) error {
	cssi.state = &cloudformationStackSetInstanceState{}
	if err := json.NewDecoder(av).Decode(cssi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cssi.Type(), cssi.LocalName(), err)
	}
	return nil
}

func (cssi *CloudformationStackSetInstance) State() (*cloudformationStackSetInstanceState, bool) {
	return cssi.state, cssi.state != nil
}

func (cssi *CloudformationStackSetInstance) StateMust() *cloudformationStackSetInstanceState {
	if cssi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cssi.Type(), cssi.LocalName()))
	}
	return cssi.state
}

func (cssi *CloudformationStackSetInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(cssi)
}

type CloudformationStackSetInstanceArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// CallAs: string, optional
	CallAs terra.StringValue `hcl:"call_as,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ParameterOverrides: map of string, optional
	ParameterOverrides terra.MapValue[terra.StringValue] `hcl:"parameter_overrides,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// RetainStack: bool, optional
	RetainStack terra.BoolValue `hcl:"retain_stack,attr"`
	// StackSetName: string, required
	StackSetName terra.StringValue `hcl:"stack_set_name,attr" validate:"required"`
	// DeploymentTargets: optional
	DeploymentTargets *cloudformationstacksetinstance.DeploymentTargets `hcl:"deployment_targets,block"`
	// OperationPreferences: optional
	OperationPreferences *cloudformationstacksetinstance.OperationPreferences `hcl:"operation_preferences,block"`
	// Timeouts: optional
	Timeouts *cloudformationstacksetinstance.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudformationStackSetInstance depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudformationStackSetInstanceAttributes struct {
	ref terra.Reference
}

func (cssi cloudformationStackSetInstanceAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(cssi.ref.Append("account_id"))
}

func (cssi cloudformationStackSetInstanceAttributes) CallAs() terra.StringValue {
	return terra.ReferenceString(cssi.ref.Append("call_as"))
}

func (cssi cloudformationStackSetInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cssi.ref.Append("id"))
}

func (cssi cloudformationStackSetInstanceAttributes) OrganizationalUnitId() terra.StringValue {
	return terra.ReferenceString(cssi.ref.Append("organizational_unit_id"))
}

func (cssi cloudformationStackSetInstanceAttributes) ParameterOverrides() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cssi.ref.Append("parameter_overrides"))
}

func (cssi cloudformationStackSetInstanceAttributes) Region() terra.StringValue {
	return terra.ReferenceString(cssi.ref.Append("region"))
}

func (cssi cloudformationStackSetInstanceAttributes) RetainStack() terra.BoolValue {
	return terra.ReferenceBool(cssi.ref.Append("retain_stack"))
}

func (cssi cloudformationStackSetInstanceAttributes) StackId() terra.StringValue {
	return terra.ReferenceString(cssi.ref.Append("stack_id"))
}

func (cssi cloudformationStackSetInstanceAttributes) StackSetName() terra.StringValue {
	return terra.ReferenceString(cssi.ref.Append("stack_set_name"))
}

func (cssi cloudformationStackSetInstanceAttributes) DeploymentTargets() terra.ListValue[cloudformationstacksetinstance.DeploymentTargetsAttributes] {
	return terra.ReferenceList[cloudformationstacksetinstance.DeploymentTargetsAttributes](cssi.ref.Append("deployment_targets"))
}

func (cssi cloudformationStackSetInstanceAttributes) OperationPreferences() terra.ListValue[cloudformationstacksetinstance.OperationPreferencesAttributes] {
	return terra.ReferenceList[cloudformationstacksetinstance.OperationPreferencesAttributes](cssi.ref.Append("operation_preferences"))
}

func (cssi cloudformationStackSetInstanceAttributes) Timeouts() cloudformationstacksetinstance.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudformationstacksetinstance.TimeoutsAttributes](cssi.ref.Append("timeouts"))
}

type cloudformationStackSetInstanceState struct {
	AccountId            string                                                     `json:"account_id"`
	CallAs               string                                                     `json:"call_as"`
	Id                   string                                                     `json:"id"`
	OrganizationalUnitId string                                                     `json:"organizational_unit_id"`
	ParameterOverrides   map[string]string                                          `json:"parameter_overrides"`
	Region               string                                                     `json:"region"`
	RetainStack          bool                                                       `json:"retain_stack"`
	StackId              string                                                     `json:"stack_id"`
	StackSetName         string                                                     `json:"stack_set_name"`
	DeploymentTargets    []cloudformationstacksetinstance.DeploymentTargetsState    `json:"deployment_targets"`
	OperationPreferences []cloudformationstacksetinstance.OperationPreferencesState `json:"operation_preferences"`
	Timeouts             *cloudformationstacksetinstance.TimeoutsState              `json:"timeouts"`
}
