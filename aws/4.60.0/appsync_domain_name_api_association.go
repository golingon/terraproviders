// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppsyncDomainNameApiAssociation(name string, args AppsyncDomainNameApiAssociationArgs) *AppsyncDomainNameApiAssociation {
	return &AppsyncDomainNameApiAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppsyncDomainNameApiAssociation)(nil)

type AppsyncDomainNameApiAssociation struct {
	Name  string
	Args  AppsyncDomainNameApiAssociationArgs
	state *appsyncDomainNameApiAssociationState
}

func (adnaa *AppsyncDomainNameApiAssociation) Type() string {
	return "aws_appsync_domain_name_api_association"
}

func (adnaa *AppsyncDomainNameApiAssociation) LocalName() string {
	return adnaa.Name
}

func (adnaa *AppsyncDomainNameApiAssociation) Configuration() interface{} {
	return adnaa.Args
}

func (adnaa *AppsyncDomainNameApiAssociation) Attributes() appsyncDomainNameApiAssociationAttributes {
	return appsyncDomainNameApiAssociationAttributes{ref: terra.ReferenceResource(adnaa)}
}

func (adnaa *AppsyncDomainNameApiAssociation) ImportState(av io.Reader) error {
	adnaa.state = &appsyncDomainNameApiAssociationState{}
	if err := json.NewDecoder(av).Decode(adnaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adnaa.Type(), adnaa.LocalName(), err)
	}
	return nil
}

func (adnaa *AppsyncDomainNameApiAssociation) State() (*appsyncDomainNameApiAssociationState, bool) {
	return adnaa.state, adnaa.state != nil
}

func (adnaa *AppsyncDomainNameApiAssociation) StateMust() *appsyncDomainNameApiAssociationState {
	if adnaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adnaa.Type(), adnaa.LocalName()))
	}
	return adnaa.state
}

func (adnaa *AppsyncDomainNameApiAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(adnaa)
}

type AppsyncDomainNameApiAssociationArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DependsOn contains resources that AppsyncDomainNameApiAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appsyncDomainNameApiAssociationAttributes struct {
	ref terra.Reference
}

func (adnaa appsyncDomainNameApiAssociationAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(adnaa.ref.Append("api_id"))
}

func (adnaa appsyncDomainNameApiAssociationAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(adnaa.ref.Append("domain_name"))
}

func (adnaa appsyncDomainNameApiAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(adnaa.ref.Append("id"))
}

type appsyncDomainNameApiAssociationState struct {
	ApiId      string `json:"api_id"`
	DomainName string `json:"domain_name"`
	Id         string `json:"id"`
}
