// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNeptuneSubnetGroup(name string, args NeptuneSubnetGroupArgs) *NeptuneSubnetGroup {
	return &NeptuneSubnetGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NeptuneSubnetGroup)(nil)

type NeptuneSubnetGroup struct {
	Name  string
	Args  NeptuneSubnetGroupArgs
	state *neptuneSubnetGroupState
}

func (nsg *NeptuneSubnetGroup) Type() string {
	return "aws_neptune_subnet_group"
}

func (nsg *NeptuneSubnetGroup) LocalName() string {
	return nsg.Name
}

func (nsg *NeptuneSubnetGroup) Configuration() interface{} {
	return nsg.Args
}

func (nsg *NeptuneSubnetGroup) Attributes() neptuneSubnetGroupAttributes {
	return neptuneSubnetGroupAttributes{ref: terra.ReferenceResource(nsg)}
}

func (nsg *NeptuneSubnetGroup) ImportState(av io.Reader) error {
	nsg.state = &neptuneSubnetGroupState{}
	if err := json.NewDecoder(av).Decode(nsg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nsg.Type(), nsg.LocalName(), err)
	}
	return nil
}

func (nsg *NeptuneSubnetGroup) State() (*neptuneSubnetGroupState, bool) {
	return nsg.state, nsg.state != nil
}

func (nsg *NeptuneSubnetGroup) StateMust() *neptuneSubnetGroupState {
	if nsg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nsg.Type(), nsg.LocalName()))
	}
	return nsg.state
}

func (nsg *NeptuneSubnetGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(nsg)
}

type NeptuneSubnetGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that NeptuneSubnetGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type neptuneSubnetGroupAttributes struct {
	ref terra.Reference
}

func (nsg neptuneSubnetGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(nsg.ref.Append("arn"))
}

func (nsg neptuneSubnetGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(nsg.ref.Append("description"))
}

func (nsg neptuneSubnetGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nsg.ref.Append("id"))
}

func (nsg neptuneSubnetGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(nsg.ref.Append("name"))
}

func (nsg neptuneSubnetGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(nsg.ref.Append("name_prefix"))
}

func (nsg neptuneSubnetGroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nsg.ref.Append("subnet_ids"))
}

func (nsg neptuneSubnetGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nsg.ref.Append("tags"))
}

func (nsg neptuneSubnetGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nsg.ref.Append("tags_all"))
}

type neptuneSubnetGroupState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	NamePrefix  string            `json:"name_prefix"`
	SubnetIds   []string          `json:"subnet_ids"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
