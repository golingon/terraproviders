// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	spotfleetrequest "github.com/golingon/terraproviders/aws/4.60.0/spotfleetrequest"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSpotFleetRequest(name string, args SpotFleetRequestArgs) *SpotFleetRequest {
	return &SpotFleetRequest{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SpotFleetRequest)(nil)

type SpotFleetRequest struct {
	Name  string
	Args  SpotFleetRequestArgs
	state *spotFleetRequestState
}

func (sfr *SpotFleetRequest) Type() string {
	return "aws_spot_fleet_request"
}

func (sfr *SpotFleetRequest) LocalName() string {
	return sfr.Name
}

func (sfr *SpotFleetRequest) Configuration() interface{} {
	return sfr.Args
}

func (sfr *SpotFleetRequest) Attributes() spotFleetRequestAttributes {
	return spotFleetRequestAttributes{ref: terra.ReferenceResource(sfr)}
}

func (sfr *SpotFleetRequest) ImportState(av io.Reader) error {
	sfr.state = &spotFleetRequestState{}
	if err := json.NewDecoder(av).Decode(sfr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sfr.Type(), sfr.LocalName(), err)
	}
	return nil
}

func (sfr *SpotFleetRequest) State() (*spotFleetRequestState, bool) {
	return sfr.state, sfr.state != nil
}

func (sfr *SpotFleetRequest) StateMust() *spotFleetRequestState {
	if sfr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sfr.Type(), sfr.LocalName()))
	}
	return sfr.state
}

func (sfr *SpotFleetRequest) DependOn() terra.Reference {
	return terra.ReferenceResource(sfr)
}

type SpotFleetRequestArgs struct {
	// AllocationStrategy: string, optional
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr"`
	// ExcessCapacityTerminationPolicy: string, optional
	ExcessCapacityTerminationPolicy terra.StringValue `hcl:"excess_capacity_termination_policy,attr"`
	// FleetType: string, optional
	FleetType terra.StringValue `hcl:"fleet_type,attr"`
	// IamFleetRole: string, required
	IamFleetRole terra.StringValue `hcl:"iam_fleet_role,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceInterruptionBehaviour: string, optional
	InstanceInterruptionBehaviour terra.StringValue `hcl:"instance_interruption_behaviour,attr"`
	// InstancePoolsToUseCount: number, optional
	InstancePoolsToUseCount terra.NumberValue `hcl:"instance_pools_to_use_count,attr"`
	// LoadBalancers: set of string, optional
	LoadBalancers terra.SetValue[terra.StringValue] `hcl:"load_balancers,attr"`
	// OnDemandAllocationStrategy: string, optional
	OnDemandAllocationStrategy terra.StringValue `hcl:"on_demand_allocation_strategy,attr"`
	// OnDemandMaxTotalPrice: string, optional
	OnDemandMaxTotalPrice terra.StringValue `hcl:"on_demand_max_total_price,attr"`
	// OnDemandTargetCapacity: number, optional
	OnDemandTargetCapacity terra.NumberValue `hcl:"on_demand_target_capacity,attr"`
	// ReplaceUnhealthyInstances: bool, optional
	ReplaceUnhealthyInstances terra.BoolValue `hcl:"replace_unhealthy_instances,attr"`
	// SpotPrice: string, optional
	SpotPrice terra.StringValue `hcl:"spot_price,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetCapacity: number, required
	TargetCapacity terra.NumberValue `hcl:"target_capacity,attr" validate:"required"`
	// TargetCapacityUnitType: string, optional
	TargetCapacityUnitType terra.StringValue `hcl:"target_capacity_unit_type,attr"`
	// TargetGroupArns: set of string, optional
	TargetGroupArns terra.SetValue[terra.StringValue] `hcl:"target_group_arns,attr"`
	// TerminateInstancesOnDelete: string, optional
	TerminateInstancesOnDelete terra.StringValue `hcl:"terminate_instances_on_delete,attr"`
	// TerminateInstancesWithExpiration: bool, optional
	TerminateInstancesWithExpiration terra.BoolValue `hcl:"terminate_instances_with_expiration,attr"`
	// ValidFrom: string, optional
	ValidFrom terra.StringValue `hcl:"valid_from,attr"`
	// ValidUntil: string, optional
	ValidUntil terra.StringValue `hcl:"valid_until,attr"`
	// WaitForFulfillment: bool, optional
	WaitForFulfillment terra.BoolValue `hcl:"wait_for_fulfillment,attr"`
	// LaunchSpecification: min=0
	LaunchSpecification []spotfleetrequest.LaunchSpecification `hcl:"launch_specification,block" validate:"min=0"`
	// LaunchTemplateConfig: min=0
	LaunchTemplateConfig []spotfleetrequest.LaunchTemplateConfig `hcl:"launch_template_config,block" validate:"min=0"`
	// SpotMaintenanceStrategies: optional
	SpotMaintenanceStrategies *spotfleetrequest.SpotMaintenanceStrategies `hcl:"spot_maintenance_strategies,block"`
	// Timeouts: optional
	Timeouts *spotfleetrequest.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SpotFleetRequest depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type spotFleetRequestAttributes struct {
	ref terra.Reference
}

func (sfr spotFleetRequestAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("allocation_strategy"))
}

func (sfr spotFleetRequestAttributes) ClientToken() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("client_token"))
}

func (sfr spotFleetRequestAttributes) ExcessCapacityTerminationPolicy() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("excess_capacity_termination_policy"))
}

func (sfr spotFleetRequestAttributes) FleetType() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("fleet_type"))
}

func (sfr spotFleetRequestAttributes) IamFleetRole() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("iam_fleet_role"))
}

func (sfr spotFleetRequestAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("id"))
}

func (sfr spotFleetRequestAttributes) InstanceInterruptionBehaviour() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("instance_interruption_behaviour"))
}

func (sfr spotFleetRequestAttributes) InstancePoolsToUseCount() terra.NumberValue {
	return terra.ReferenceNumber(sfr.ref.Append("instance_pools_to_use_count"))
}

func (sfr spotFleetRequestAttributes) LoadBalancers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sfr.ref.Append("load_balancers"))
}

func (sfr spotFleetRequestAttributes) OnDemandAllocationStrategy() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("on_demand_allocation_strategy"))
}

func (sfr spotFleetRequestAttributes) OnDemandMaxTotalPrice() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("on_demand_max_total_price"))
}

func (sfr spotFleetRequestAttributes) OnDemandTargetCapacity() terra.NumberValue {
	return terra.ReferenceNumber(sfr.ref.Append("on_demand_target_capacity"))
}

func (sfr spotFleetRequestAttributes) ReplaceUnhealthyInstances() terra.BoolValue {
	return terra.ReferenceBool(sfr.ref.Append("replace_unhealthy_instances"))
}

func (sfr spotFleetRequestAttributes) SpotPrice() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("spot_price"))
}

func (sfr spotFleetRequestAttributes) SpotRequestState() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("spot_request_state"))
}

func (sfr spotFleetRequestAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sfr.ref.Append("tags"))
}

func (sfr spotFleetRequestAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sfr.ref.Append("tags_all"))
}

func (sfr spotFleetRequestAttributes) TargetCapacity() terra.NumberValue {
	return terra.ReferenceNumber(sfr.ref.Append("target_capacity"))
}

func (sfr spotFleetRequestAttributes) TargetCapacityUnitType() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("target_capacity_unit_type"))
}

func (sfr spotFleetRequestAttributes) TargetGroupArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](sfr.ref.Append("target_group_arns"))
}

func (sfr spotFleetRequestAttributes) TerminateInstancesOnDelete() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("terminate_instances_on_delete"))
}

func (sfr spotFleetRequestAttributes) TerminateInstancesWithExpiration() terra.BoolValue {
	return terra.ReferenceBool(sfr.ref.Append("terminate_instances_with_expiration"))
}

func (sfr spotFleetRequestAttributes) ValidFrom() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("valid_from"))
}

func (sfr spotFleetRequestAttributes) ValidUntil() terra.StringValue {
	return terra.ReferenceString(sfr.ref.Append("valid_until"))
}

func (sfr spotFleetRequestAttributes) WaitForFulfillment() terra.BoolValue {
	return terra.ReferenceBool(sfr.ref.Append("wait_for_fulfillment"))
}

func (sfr spotFleetRequestAttributes) LaunchSpecification() terra.SetValue[spotfleetrequest.LaunchSpecificationAttributes] {
	return terra.ReferenceSet[spotfleetrequest.LaunchSpecificationAttributes](sfr.ref.Append("launch_specification"))
}

func (sfr spotFleetRequestAttributes) LaunchTemplateConfig() terra.SetValue[spotfleetrequest.LaunchTemplateConfigAttributes] {
	return terra.ReferenceSet[spotfleetrequest.LaunchTemplateConfigAttributes](sfr.ref.Append("launch_template_config"))
}

func (sfr spotFleetRequestAttributes) SpotMaintenanceStrategies() terra.ListValue[spotfleetrequest.SpotMaintenanceStrategiesAttributes] {
	return terra.ReferenceList[spotfleetrequest.SpotMaintenanceStrategiesAttributes](sfr.ref.Append("spot_maintenance_strategies"))
}

func (sfr spotFleetRequestAttributes) Timeouts() spotfleetrequest.TimeoutsAttributes {
	return terra.ReferenceSingle[spotfleetrequest.TimeoutsAttributes](sfr.ref.Append("timeouts"))
}

type spotFleetRequestState struct {
	AllocationStrategy               string                                            `json:"allocation_strategy"`
	ClientToken                      string                                            `json:"client_token"`
	ExcessCapacityTerminationPolicy  string                                            `json:"excess_capacity_termination_policy"`
	FleetType                        string                                            `json:"fleet_type"`
	IamFleetRole                     string                                            `json:"iam_fleet_role"`
	Id                               string                                            `json:"id"`
	InstanceInterruptionBehaviour    string                                            `json:"instance_interruption_behaviour"`
	InstancePoolsToUseCount          float64                                           `json:"instance_pools_to_use_count"`
	LoadBalancers                    []string                                          `json:"load_balancers"`
	OnDemandAllocationStrategy       string                                            `json:"on_demand_allocation_strategy"`
	OnDemandMaxTotalPrice            string                                            `json:"on_demand_max_total_price"`
	OnDemandTargetCapacity           float64                                           `json:"on_demand_target_capacity"`
	ReplaceUnhealthyInstances        bool                                              `json:"replace_unhealthy_instances"`
	SpotPrice                        string                                            `json:"spot_price"`
	SpotRequestState                 string                                            `json:"spot_request_state"`
	Tags                             map[string]string                                 `json:"tags"`
	TagsAll                          map[string]string                                 `json:"tags_all"`
	TargetCapacity                   float64                                           `json:"target_capacity"`
	TargetCapacityUnitType           string                                            `json:"target_capacity_unit_type"`
	TargetGroupArns                  []string                                          `json:"target_group_arns"`
	TerminateInstancesOnDelete       string                                            `json:"terminate_instances_on_delete"`
	TerminateInstancesWithExpiration bool                                              `json:"terminate_instances_with_expiration"`
	ValidFrom                        string                                            `json:"valid_from"`
	ValidUntil                       string                                            `json:"valid_until"`
	WaitForFulfillment               bool                                              `json:"wait_for_fulfillment"`
	LaunchSpecification              []spotfleetrequest.LaunchSpecificationState       `json:"launch_specification"`
	LaunchTemplateConfig             []spotfleetrequest.LaunchTemplateConfigState      `json:"launch_template_config"`
	SpotMaintenanceStrategies        []spotfleetrequest.SpotMaintenanceStrategiesState `json:"spot_maintenance_strategies"`
	Timeouts                         *spotfleetrequest.TimeoutsState                   `json:"timeouts"`
}
