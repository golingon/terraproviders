// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3bucketserversideencryptionconfiguration "github.com/golingon/terraproviders/aws/4.60.0/s3bucketserversideencryptionconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketServerSideEncryptionConfiguration(name string, args S3BucketServerSideEncryptionConfigurationArgs) *S3BucketServerSideEncryptionConfiguration {
	return &S3BucketServerSideEncryptionConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketServerSideEncryptionConfiguration)(nil)

type S3BucketServerSideEncryptionConfiguration struct {
	Name  string
	Args  S3BucketServerSideEncryptionConfigurationArgs
	state *s3BucketServerSideEncryptionConfigurationState
}

func (sbssec *S3BucketServerSideEncryptionConfiguration) Type() string {
	return "aws_s3_bucket_server_side_encryption_configuration"
}

func (sbssec *S3BucketServerSideEncryptionConfiguration) LocalName() string {
	return sbssec.Name
}

func (sbssec *S3BucketServerSideEncryptionConfiguration) Configuration() interface{} {
	return sbssec.Args
}

func (sbssec *S3BucketServerSideEncryptionConfiguration) Attributes() s3BucketServerSideEncryptionConfigurationAttributes {
	return s3BucketServerSideEncryptionConfigurationAttributes{ref: terra.ReferenceResource(sbssec)}
}

func (sbssec *S3BucketServerSideEncryptionConfiguration) ImportState(av io.Reader) error {
	sbssec.state = &s3BucketServerSideEncryptionConfigurationState{}
	if err := json.NewDecoder(av).Decode(sbssec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbssec.Type(), sbssec.LocalName(), err)
	}
	return nil
}

func (sbssec *S3BucketServerSideEncryptionConfiguration) State() (*s3BucketServerSideEncryptionConfigurationState, bool) {
	return sbssec.state, sbssec.state != nil
}

func (sbssec *S3BucketServerSideEncryptionConfiguration) StateMust() *s3BucketServerSideEncryptionConfigurationState {
	if sbssec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbssec.Type(), sbssec.LocalName()))
	}
	return sbssec.state
}

func (sbssec *S3BucketServerSideEncryptionConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(sbssec)
}

type S3BucketServerSideEncryptionConfigurationArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Rule: min=1
	Rule []s3bucketserversideencryptionconfiguration.Rule `hcl:"rule,block" validate:"min=1"`
	// DependsOn contains resources that S3BucketServerSideEncryptionConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketServerSideEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (sbssec s3BucketServerSideEncryptionConfigurationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbssec.ref.Append("bucket"))
}

func (sbssec s3BucketServerSideEncryptionConfigurationAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceString(sbssec.ref.Append("expected_bucket_owner"))
}

func (sbssec s3BucketServerSideEncryptionConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbssec.ref.Append("id"))
}

func (sbssec s3BucketServerSideEncryptionConfigurationAttributes) Rule() terra.SetValue[s3bucketserversideencryptionconfiguration.RuleAttributes] {
	return terra.ReferenceSet[s3bucketserversideencryptionconfiguration.RuleAttributes](sbssec.ref.Append("rule"))
}

type s3BucketServerSideEncryptionConfigurationState struct {
	Bucket              string                                                `json:"bucket"`
	ExpectedBucketOwner string                                                `json:"expected_bucket_owner"`
	Id                  string                                                `json:"id"`
	Rule                []s3bucketserversideencryptionconfiguration.RuleState `json:"rule"`
}
