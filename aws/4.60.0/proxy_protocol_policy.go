// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewProxyProtocolPolicy(name string, args ProxyProtocolPolicyArgs) *ProxyProtocolPolicy {
	return &ProxyProtocolPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ProxyProtocolPolicy)(nil)

type ProxyProtocolPolicy struct {
	Name  string
	Args  ProxyProtocolPolicyArgs
	state *proxyProtocolPolicyState
}

func (ppp *ProxyProtocolPolicy) Type() string {
	return "aws_proxy_protocol_policy"
}

func (ppp *ProxyProtocolPolicy) LocalName() string {
	return ppp.Name
}

func (ppp *ProxyProtocolPolicy) Configuration() interface{} {
	return ppp.Args
}

func (ppp *ProxyProtocolPolicy) Attributes() proxyProtocolPolicyAttributes {
	return proxyProtocolPolicyAttributes{ref: terra.ReferenceResource(ppp)}
}

func (ppp *ProxyProtocolPolicy) ImportState(av io.Reader) error {
	ppp.state = &proxyProtocolPolicyState{}
	if err := json.NewDecoder(av).Decode(ppp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ppp.Type(), ppp.LocalName(), err)
	}
	return nil
}

func (ppp *ProxyProtocolPolicy) State() (*proxyProtocolPolicyState, bool) {
	return ppp.state, ppp.state != nil
}

func (ppp *ProxyProtocolPolicy) StateMust() *proxyProtocolPolicyState {
	if ppp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ppp.Type(), ppp.LocalName()))
	}
	return ppp.state
}

func (ppp *ProxyProtocolPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ppp)
}

type ProxyProtocolPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstancePorts: set of string, required
	InstancePorts terra.SetValue[terra.StringValue] `hcl:"instance_ports,attr" validate:"required"`
	// LoadBalancer: string, required
	LoadBalancer terra.StringValue `hcl:"load_balancer,attr" validate:"required"`
	// DependsOn contains resources that ProxyProtocolPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type proxyProtocolPolicyAttributes struct {
	ref terra.Reference
}

func (ppp proxyProtocolPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ppp.ref.Append("id"))
}

func (ppp proxyProtocolPolicyAttributes) InstancePorts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ppp.ref.Append("instance_ports"))
}

func (ppp proxyProtocolPolicyAttributes) LoadBalancer() terra.StringValue {
	return terra.ReferenceString(ppp.ref.Append("load_balancer"))
}

type proxyProtocolPolicyState struct {
	Id            string   `json:"id"`
	InstancePorts []string `json:"instance_ports"`
	LoadBalancer  string   `json:"load_balancer"`
}
