// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPinpointEventStream(name string, args PinpointEventStreamArgs) *PinpointEventStream {
	return &PinpointEventStream{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PinpointEventStream)(nil)

type PinpointEventStream struct {
	Name  string
	Args  PinpointEventStreamArgs
	state *pinpointEventStreamState
}

func (pes *PinpointEventStream) Type() string {
	return "aws_pinpoint_event_stream"
}

func (pes *PinpointEventStream) LocalName() string {
	return pes.Name
}

func (pes *PinpointEventStream) Configuration() interface{} {
	return pes.Args
}

func (pes *PinpointEventStream) Attributes() pinpointEventStreamAttributes {
	return pinpointEventStreamAttributes{ref: terra.ReferenceResource(pes)}
}

func (pes *PinpointEventStream) ImportState(av io.Reader) error {
	pes.state = &pinpointEventStreamState{}
	if err := json.NewDecoder(av).Decode(pes.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pes.Type(), pes.LocalName(), err)
	}
	return nil
}

func (pes *PinpointEventStream) State() (*pinpointEventStreamState, bool) {
	return pes.state, pes.state != nil
}

func (pes *PinpointEventStream) StateMust() *pinpointEventStreamState {
	if pes.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pes.Type(), pes.LocalName()))
	}
	return pes.state
}

func (pes *PinpointEventStream) DependOn() terra.Reference {
	return terra.ReferenceResource(pes)
}

type PinpointEventStreamArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// DestinationStreamArn: string, required
	DestinationStreamArn terra.StringValue `hcl:"destination_stream_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// DependsOn contains resources that PinpointEventStream depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type pinpointEventStreamAttributes struct {
	ref terra.Reference
}

func (pes pinpointEventStreamAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceString(pes.ref.Append("application_id"))
}

func (pes pinpointEventStreamAttributes) DestinationStreamArn() terra.StringValue {
	return terra.ReferenceString(pes.ref.Append("destination_stream_arn"))
}

func (pes pinpointEventStreamAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pes.ref.Append("id"))
}

func (pes pinpointEventStreamAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(pes.ref.Append("role_arn"))
}

type pinpointEventStreamState struct {
	ApplicationId        string `json:"application_id"`
	DestinationStreamArn string `json:"destination_stream_arn"`
	Id                   string `json:"id"`
	RoleArn              string `json:"role_arn"`
}
