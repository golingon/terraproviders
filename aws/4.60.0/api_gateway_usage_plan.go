// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	apigatewayusageplan "github.com/golingon/terraproviders/aws/4.60.0/apigatewayusageplan"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiGatewayUsagePlan(name string, args ApiGatewayUsagePlanArgs) *ApiGatewayUsagePlan {
	return &ApiGatewayUsagePlan{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayUsagePlan)(nil)

type ApiGatewayUsagePlan struct {
	Name  string
	Args  ApiGatewayUsagePlanArgs
	state *apiGatewayUsagePlanState
}

func (agup *ApiGatewayUsagePlan) Type() string {
	return "aws_api_gateway_usage_plan"
}

func (agup *ApiGatewayUsagePlan) LocalName() string {
	return agup.Name
}

func (agup *ApiGatewayUsagePlan) Configuration() interface{} {
	return agup.Args
}

func (agup *ApiGatewayUsagePlan) Attributes() apiGatewayUsagePlanAttributes {
	return apiGatewayUsagePlanAttributes{ref: terra.ReferenceResource(agup)}
}

func (agup *ApiGatewayUsagePlan) ImportState(av io.Reader) error {
	agup.state = &apiGatewayUsagePlanState{}
	if err := json.NewDecoder(av).Decode(agup.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agup.Type(), agup.LocalName(), err)
	}
	return nil
}

func (agup *ApiGatewayUsagePlan) State() (*apiGatewayUsagePlanState, bool) {
	return agup.state, agup.state != nil
}

func (agup *ApiGatewayUsagePlan) StateMust() *apiGatewayUsagePlanState {
	if agup.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agup.Type(), agup.LocalName()))
	}
	return agup.state
}

func (agup *ApiGatewayUsagePlan) DependOn() terra.Reference {
	return terra.ReferenceResource(agup)
}

type ApiGatewayUsagePlanArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProductCode: string, optional
	ProductCode terra.StringValue `hcl:"product_code,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ApiStages: min=0
	ApiStages []apigatewayusageplan.ApiStages `hcl:"api_stages,block" validate:"min=0"`
	// QuotaSettings: optional
	QuotaSettings *apigatewayusageplan.QuotaSettings `hcl:"quota_settings,block"`
	// ThrottleSettings: optional
	ThrottleSettings *apigatewayusageplan.ThrottleSettings `hcl:"throttle_settings,block"`
	// DependsOn contains resources that ApiGatewayUsagePlan depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiGatewayUsagePlanAttributes struct {
	ref terra.Reference
}

func (agup apiGatewayUsagePlanAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(agup.ref.Append("arn"))
}

func (agup apiGatewayUsagePlanAttributes) Description() terra.StringValue {
	return terra.ReferenceString(agup.ref.Append("description"))
}

func (agup apiGatewayUsagePlanAttributes) Id() terra.StringValue {
	return terra.ReferenceString(agup.ref.Append("id"))
}

func (agup apiGatewayUsagePlanAttributes) Name() terra.StringValue {
	return terra.ReferenceString(agup.ref.Append("name"))
}

func (agup apiGatewayUsagePlanAttributes) ProductCode() terra.StringValue {
	return terra.ReferenceString(agup.ref.Append("product_code"))
}

func (agup apiGatewayUsagePlanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agup.ref.Append("tags"))
}

func (agup apiGatewayUsagePlanAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agup.ref.Append("tags_all"))
}

func (agup apiGatewayUsagePlanAttributes) ApiStages() terra.SetValue[apigatewayusageplan.ApiStagesAttributes] {
	return terra.ReferenceSet[apigatewayusageplan.ApiStagesAttributes](agup.ref.Append("api_stages"))
}

func (agup apiGatewayUsagePlanAttributes) QuotaSettings() terra.ListValue[apigatewayusageplan.QuotaSettingsAttributes] {
	return terra.ReferenceList[apigatewayusageplan.QuotaSettingsAttributes](agup.ref.Append("quota_settings"))
}

func (agup apiGatewayUsagePlanAttributes) ThrottleSettings() terra.ListValue[apigatewayusageplan.ThrottleSettingsAttributes] {
	return terra.ReferenceList[apigatewayusageplan.ThrottleSettingsAttributes](agup.ref.Append("throttle_settings"))
}

type apiGatewayUsagePlanState struct {
	Arn              string                                      `json:"arn"`
	Description      string                                      `json:"description"`
	Id               string                                      `json:"id"`
	Name             string                                      `json:"name"`
	ProductCode      string                                      `json:"product_code"`
	Tags             map[string]string                           `json:"tags"`
	TagsAll          map[string]string                           `json:"tags_all"`
	ApiStages        []apigatewayusageplan.ApiStagesState        `json:"api_stages"`
	QuotaSettings    []apigatewayusageplan.QuotaSettingsState    `json:"quota_settings"`
	ThrottleSettings []apigatewayusageplan.ThrottleSettingsState `json:"throttle_settings"`
}
