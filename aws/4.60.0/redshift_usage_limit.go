// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftUsageLimit(name string, args RedshiftUsageLimitArgs) *RedshiftUsageLimit {
	return &RedshiftUsageLimit{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftUsageLimit)(nil)

type RedshiftUsageLimit struct {
	Name  string
	Args  RedshiftUsageLimitArgs
	state *redshiftUsageLimitState
}

func (rul *RedshiftUsageLimit) Type() string {
	return "aws_redshift_usage_limit"
}

func (rul *RedshiftUsageLimit) LocalName() string {
	return rul.Name
}

func (rul *RedshiftUsageLimit) Configuration() interface{} {
	return rul.Args
}

func (rul *RedshiftUsageLimit) Attributes() redshiftUsageLimitAttributes {
	return redshiftUsageLimitAttributes{ref: terra.ReferenceResource(rul)}
}

func (rul *RedshiftUsageLimit) ImportState(av io.Reader) error {
	rul.state = &redshiftUsageLimitState{}
	if err := json.NewDecoder(av).Decode(rul.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rul.Type(), rul.LocalName(), err)
	}
	return nil
}

func (rul *RedshiftUsageLimit) State() (*redshiftUsageLimitState, bool) {
	return rul.state, rul.state != nil
}

func (rul *RedshiftUsageLimit) StateMust() *redshiftUsageLimitState {
	if rul.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rul.Type(), rul.LocalName()))
	}
	return rul.state
}

func (rul *RedshiftUsageLimit) DependOn() terra.Reference {
	return terra.ReferenceResource(rul)
}

type RedshiftUsageLimitArgs struct {
	// Amount: number, required
	Amount terra.NumberValue `hcl:"amount,attr" validate:"required"`
	// BreachAction: string, optional
	BreachAction terra.StringValue `hcl:"breach_action,attr"`
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// FeatureType: string, required
	FeatureType terra.StringValue `hcl:"feature_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LimitType: string, required
	LimitType terra.StringValue `hcl:"limit_type,attr" validate:"required"`
	// Period: string, optional
	Period terra.StringValue `hcl:"period,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that RedshiftUsageLimit depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftUsageLimitAttributes struct {
	ref terra.Reference
}

func (rul redshiftUsageLimitAttributes) Amount() terra.NumberValue {
	return terra.ReferenceNumber(rul.ref.Append("amount"))
}

func (rul redshiftUsageLimitAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rul.ref.Append("arn"))
}

func (rul redshiftUsageLimitAttributes) BreachAction() terra.StringValue {
	return terra.ReferenceString(rul.ref.Append("breach_action"))
}

func (rul redshiftUsageLimitAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(rul.ref.Append("cluster_identifier"))
}

func (rul redshiftUsageLimitAttributes) FeatureType() terra.StringValue {
	return terra.ReferenceString(rul.ref.Append("feature_type"))
}

func (rul redshiftUsageLimitAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rul.ref.Append("id"))
}

func (rul redshiftUsageLimitAttributes) LimitType() terra.StringValue {
	return terra.ReferenceString(rul.ref.Append("limit_type"))
}

func (rul redshiftUsageLimitAttributes) Period() terra.StringValue {
	return terra.ReferenceString(rul.ref.Append("period"))
}

func (rul redshiftUsageLimitAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rul.ref.Append("tags"))
}

func (rul redshiftUsageLimitAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rul.ref.Append("tags_all"))
}

type redshiftUsageLimitState struct {
	Amount            float64           `json:"amount"`
	Arn               string            `json:"arn"`
	BreachAction      string            `json:"breach_action"`
	ClusterIdentifier string            `json:"cluster_identifier"`
	FeatureType       string            `json:"feature_type"`
	Id                string            `json:"id"`
	LimitType         string            `json:"limit_type"`
	Period            string            `json:"period"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
}
