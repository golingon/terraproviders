// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2TrafficMirrorFilter(name string, args Ec2TrafficMirrorFilterArgs) *Ec2TrafficMirrorFilter {
	return &Ec2TrafficMirrorFilter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TrafficMirrorFilter)(nil)

type Ec2TrafficMirrorFilter struct {
	Name  string
	Args  Ec2TrafficMirrorFilterArgs
	state *ec2TrafficMirrorFilterState
}

func (etmf *Ec2TrafficMirrorFilter) Type() string {
	return "aws_ec2_traffic_mirror_filter"
}

func (etmf *Ec2TrafficMirrorFilter) LocalName() string {
	return etmf.Name
}

func (etmf *Ec2TrafficMirrorFilter) Configuration() interface{} {
	return etmf.Args
}

func (etmf *Ec2TrafficMirrorFilter) Attributes() ec2TrafficMirrorFilterAttributes {
	return ec2TrafficMirrorFilterAttributes{ref: terra.ReferenceResource(etmf)}
}

func (etmf *Ec2TrafficMirrorFilter) ImportState(av io.Reader) error {
	etmf.state = &ec2TrafficMirrorFilterState{}
	if err := json.NewDecoder(av).Decode(etmf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etmf.Type(), etmf.LocalName(), err)
	}
	return nil
}

func (etmf *Ec2TrafficMirrorFilter) State() (*ec2TrafficMirrorFilterState, bool) {
	return etmf.state, etmf.state != nil
}

func (etmf *Ec2TrafficMirrorFilter) StateMust() *ec2TrafficMirrorFilterState {
	if etmf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etmf.Type(), etmf.LocalName()))
	}
	return etmf.state
}

func (etmf *Ec2TrafficMirrorFilter) DependOn() terra.Reference {
	return terra.ReferenceResource(etmf)
}

type Ec2TrafficMirrorFilterArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetworkServices: set of string, optional
	NetworkServices terra.SetValue[terra.StringValue] `hcl:"network_services,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that Ec2TrafficMirrorFilter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2TrafficMirrorFilterAttributes struct {
	ref terra.Reference
}

func (etmf ec2TrafficMirrorFilterAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(etmf.ref.Append("arn"))
}

func (etmf ec2TrafficMirrorFilterAttributes) Description() terra.StringValue {
	return terra.ReferenceString(etmf.ref.Append("description"))
}

func (etmf ec2TrafficMirrorFilterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etmf.ref.Append("id"))
}

func (etmf ec2TrafficMirrorFilterAttributes) NetworkServices() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](etmf.ref.Append("network_services"))
}

func (etmf ec2TrafficMirrorFilterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etmf.ref.Append("tags"))
}

func (etmf ec2TrafficMirrorFilterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etmf.ref.Append("tags_all"))
}

type ec2TrafficMirrorFilterState struct {
	Arn             string            `json:"arn"`
	Description     string            `json:"description"`
	Id              string            `json:"id"`
	NetworkServices []string          `json:"network_services"`
	Tags            map[string]string `json:"tags"`
	TagsAll         map[string]string `json:"tags_all"`
}
