// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	auditmanagercontrol "github.com/golingon/terraproviders/aws/4.60.0/auditmanagercontrol"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAuditmanagerControl(name string, args AuditmanagerControlArgs) *AuditmanagerControl {
	return &AuditmanagerControl{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AuditmanagerControl)(nil)

type AuditmanagerControl struct {
	Name  string
	Args  AuditmanagerControlArgs
	state *auditmanagerControlState
}

func (ac *AuditmanagerControl) Type() string {
	return "aws_auditmanager_control"
}

func (ac *AuditmanagerControl) LocalName() string {
	return ac.Name
}

func (ac *AuditmanagerControl) Configuration() interface{} {
	return ac.Args
}

func (ac *AuditmanagerControl) Attributes() auditmanagerControlAttributes {
	return auditmanagerControlAttributes{ref: terra.ReferenceResource(ac)}
}

func (ac *AuditmanagerControl) ImportState(av io.Reader) error {
	ac.state = &auditmanagerControlState{}
	if err := json.NewDecoder(av).Decode(ac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ac.Type(), ac.LocalName(), err)
	}
	return nil
}

func (ac *AuditmanagerControl) State() (*auditmanagerControlState, bool) {
	return ac.state, ac.state != nil
}

func (ac *AuditmanagerControl) StateMust() *auditmanagerControlState {
	if ac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ac.Type(), ac.LocalName()))
	}
	return ac.state
}

func (ac *AuditmanagerControl) DependOn() terra.Reference {
	return terra.ReferenceResource(ac)
}

type AuditmanagerControlArgs struct {
	// ActionPlanInstructions: string, optional
	ActionPlanInstructions terra.StringValue `hcl:"action_plan_instructions,attr"`
	// ActionPlanTitle: string, optional
	ActionPlanTitle terra.StringValue `hcl:"action_plan_title,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TestingInformation: string, optional
	TestingInformation terra.StringValue `hcl:"testing_information,attr"`
	// ControlMappingSources: min=0
	ControlMappingSources []auditmanagercontrol.ControlMappingSources `hcl:"control_mapping_sources,block" validate:"min=0"`
	// DependsOn contains resources that AuditmanagerControl depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type auditmanagerControlAttributes struct {
	ref terra.Reference
}

func (ac auditmanagerControlAttributes) ActionPlanInstructions() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("action_plan_instructions"))
}

func (ac auditmanagerControlAttributes) ActionPlanTitle() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("action_plan_title"))
}

func (ac auditmanagerControlAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("arn"))
}

func (ac auditmanagerControlAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("description"))
}

func (ac auditmanagerControlAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("id"))
}

func (ac auditmanagerControlAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("name"))
}

func (ac auditmanagerControlAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ac.ref.Append("tags"))
}

func (ac auditmanagerControlAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ac.ref.Append("tags_all"))
}

func (ac auditmanagerControlAttributes) TestingInformation() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("testing_information"))
}

func (ac auditmanagerControlAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("type"))
}

func (ac auditmanagerControlAttributes) ControlMappingSources() terra.SetValue[auditmanagercontrol.ControlMappingSourcesAttributes] {
	return terra.ReferenceSet[auditmanagercontrol.ControlMappingSourcesAttributes](ac.ref.Append("control_mapping_sources"))
}

type auditmanagerControlState struct {
	ActionPlanInstructions string                                           `json:"action_plan_instructions"`
	ActionPlanTitle        string                                           `json:"action_plan_title"`
	Arn                    string                                           `json:"arn"`
	Description            string                                           `json:"description"`
	Id                     string                                           `json:"id"`
	Name                   string                                           `json:"name"`
	Tags                   map[string]string                                `json:"tags"`
	TagsAll                map[string]string                                `json:"tags_all"`
	TestingInformation     string                                           `json:"testing_information"`
	Type                   string                                           `json:"type"`
	ControlMappingSources  []auditmanagercontrol.ControlMappingSourcesState `json:"control_mapping_sources"`
}
