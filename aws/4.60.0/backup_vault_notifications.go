// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewBackupVaultNotifications creates a new instance of [BackupVaultNotifications].
func NewBackupVaultNotifications(name string, args BackupVaultNotificationsArgs) *BackupVaultNotifications {
	return &BackupVaultNotifications{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BackupVaultNotifications)(nil)

// BackupVaultNotifications represents the Terraform resource aws_backup_vault_notifications.
type BackupVaultNotifications struct {
	Name      string
	Args      BackupVaultNotificationsArgs
	state     *backupVaultNotificationsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [BackupVaultNotifications].
func (bvn *BackupVaultNotifications) Type() string {
	return "aws_backup_vault_notifications"
}

// LocalName returns the local name for [BackupVaultNotifications].
func (bvn *BackupVaultNotifications) LocalName() string {
	return bvn.Name
}

// Configuration returns the configuration (args) for [BackupVaultNotifications].
func (bvn *BackupVaultNotifications) Configuration() interface{} {
	return bvn.Args
}

// DependOn is used for other resources to depend on [BackupVaultNotifications].
func (bvn *BackupVaultNotifications) DependOn() terra.Reference {
	return terra.ReferenceResource(bvn)
}

// Dependencies returns the list of resources [BackupVaultNotifications] depends_on.
func (bvn *BackupVaultNotifications) Dependencies() terra.Dependencies {
	return bvn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [BackupVaultNotifications].
func (bvn *BackupVaultNotifications) LifecycleManagement() *terra.Lifecycle {
	return bvn.Lifecycle
}

// Attributes returns the attributes for [BackupVaultNotifications].
func (bvn *BackupVaultNotifications) Attributes() backupVaultNotificationsAttributes {
	return backupVaultNotificationsAttributes{ref: terra.ReferenceResource(bvn)}
}

// ImportState imports the given attribute values into [BackupVaultNotifications]'s state.
func (bvn *BackupVaultNotifications) ImportState(av io.Reader) error {
	bvn.state = &backupVaultNotificationsState{}
	if err := json.NewDecoder(av).Decode(bvn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bvn.Type(), bvn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [BackupVaultNotifications] has state.
func (bvn *BackupVaultNotifications) State() (*backupVaultNotificationsState, bool) {
	return bvn.state, bvn.state != nil
}

// StateMust returns the state for [BackupVaultNotifications]. Panics if the state is nil.
func (bvn *BackupVaultNotifications) StateMust() *backupVaultNotificationsState {
	if bvn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bvn.Type(), bvn.LocalName()))
	}
	return bvn.state
}

// BackupVaultNotificationsArgs contains the configurations for aws_backup_vault_notifications.
type BackupVaultNotificationsArgs struct {
	// BackupVaultEvents: set of string, required
	BackupVaultEvents terra.SetValue[terra.StringValue] `hcl:"backup_vault_events,attr" validate:"required"`
	// BackupVaultName: string, required
	BackupVaultName terra.StringValue `hcl:"backup_vault_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SnsTopicArn: string, required
	SnsTopicArn terra.StringValue `hcl:"sns_topic_arn,attr" validate:"required"`
}
type backupVaultNotificationsAttributes struct {
	ref terra.Reference
}

// BackupVaultArn returns a reference to field backup_vault_arn of aws_backup_vault_notifications.
func (bvn backupVaultNotificationsAttributes) BackupVaultArn() terra.StringValue {
	return terra.ReferenceAsString(bvn.ref.Append("backup_vault_arn"))
}

// BackupVaultEvents returns a reference to field backup_vault_events of aws_backup_vault_notifications.
func (bvn backupVaultNotificationsAttributes) BackupVaultEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](bvn.ref.Append("backup_vault_events"))
}

// BackupVaultName returns a reference to field backup_vault_name of aws_backup_vault_notifications.
func (bvn backupVaultNotificationsAttributes) BackupVaultName() terra.StringValue {
	return terra.ReferenceAsString(bvn.ref.Append("backup_vault_name"))
}

// Id returns a reference to field id of aws_backup_vault_notifications.
func (bvn backupVaultNotificationsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(bvn.ref.Append("id"))
}

// SnsTopicArn returns a reference to field sns_topic_arn of aws_backup_vault_notifications.
func (bvn backupVaultNotificationsAttributes) SnsTopicArn() terra.StringValue {
	return terra.ReferenceAsString(bvn.ref.Append("sns_topic_arn"))
}

type backupVaultNotificationsState struct {
	BackupVaultArn    string   `json:"backup_vault_arn"`
	BackupVaultEvents []string `json:"backup_vault_events"`
	BackupVaultName   string   `json:"backup_vault_name"`
	Id                string   `json:"id"`
	SnsTopicArn       string   `json:"sns_topic_arn"`
}
