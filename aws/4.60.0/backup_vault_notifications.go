// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBackupVaultNotifications(name string, args BackupVaultNotificationsArgs) *BackupVaultNotifications {
	return &BackupVaultNotifications{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BackupVaultNotifications)(nil)

type BackupVaultNotifications struct {
	Name  string
	Args  BackupVaultNotificationsArgs
	state *backupVaultNotificationsState
}

func (bvn *BackupVaultNotifications) Type() string {
	return "aws_backup_vault_notifications"
}

func (bvn *BackupVaultNotifications) LocalName() string {
	return bvn.Name
}

func (bvn *BackupVaultNotifications) Configuration() interface{} {
	return bvn.Args
}

func (bvn *BackupVaultNotifications) Attributes() backupVaultNotificationsAttributes {
	return backupVaultNotificationsAttributes{ref: terra.ReferenceResource(bvn)}
}

func (bvn *BackupVaultNotifications) ImportState(av io.Reader) error {
	bvn.state = &backupVaultNotificationsState{}
	if err := json.NewDecoder(av).Decode(bvn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bvn.Type(), bvn.LocalName(), err)
	}
	return nil
}

func (bvn *BackupVaultNotifications) State() (*backupVaultNotificationsState, bool) {
	return bvn.state, bvn.state != nil
}

func (bvn *BackupVaultNotifications) StateMust() *backupVaultNotificationsState {
	if bvn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bvn.Type(), bvn.LocalName()))
	}
	return bvn.state
}

func (bvn *BackupVaultNotifications) DependOn() terra.Reference {
	return terra.ReferenceResource(bvn)
}

type BackupVaultNotificationsArgs struct {
	// BackupVaultEvents: set of string, required
	BackupVaultEvents terra.SetValue[terra.StringValue] `hcl:"backup_vault_events,attr" validate:"required"`
	// BackupVaultName: string, required
	BackupVaultName terra.StringValue `hcl:"backup_vault_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SnsTopicArn: string, required
	SnsTopicArn terra.StringValue `hcl:"sns_topic_arn,attr" validate:"required"`
	// DependsOn contains resources that BackupVaultNotifications depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type backupVaultNotificationsAttributes struct {
	ref terra.Reference
}

func (bvn backupVaultNotificationsAttributes) BackupVaultArn() terra.StringValue {
	return terra.ReferenceString(bvn.ref.Append("backup_vault_arn"))
}

func (bvn backupVaultNotificationsAttributes) BackupVaultEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](bvn.ref.Append("backup_vault_events"))
}

func (bvn backupVaultNotificationsAttributes) BackupVaultName() terra.StringValue {
	return terra.ReferenceString(bvn.ref.Append("backup_vault_name"))
}

func (bvn backupVaultNotificationsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bvn.ref.Append("id"))
}

func (bvn backupVaultNotificationsAttributes) SnsTopicArn() terra.StringValue {
	return terra.ReferenceString(bvn.ref.Append("sns_topic_arn"))
}

type backupVaultNotificationsState struct {
	BackupVaultArn    string   `json:"backup_vault_arn"`
	BackupVaultEvents []string `json:"backup_vault_events"`
	BackupVaultName   string   `json:"backup_vault_name"`
	Id                string   `json:"id"`
	SnsTopicArn       string   `json:"sns_topic_arn"`
}
