// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	inspector2enabler "github.com/golingon/terraproviders/aws/4.60.0/inspector2enabler"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewInspector2Enabler(name string, args Inspector2EnablerArgs) *Inspector2Enabler {
	return &Inspector2Enabler{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Inspector2Enabler)(nil)

type Inspector2Enabler struct {
	Name  string
	Args  Inspector2EnablerArgs
	state *inspector2EnablerState
}

func (ie *Inspector2Enabler) Type() string {
	return "aws_inspector2_enabler"
}

func (ie *Inspector2Enabler) LocalName() string {
	return ie.Name
}

func (ie *Inspector2Enabler) Configuration() interface{} {
	return ie.Args
}

func (ie *Inspector2Enabler) Attributes() inspector2EnablerAttributes {
	return inspector2EnablerAttributes{ref: terra.ReferenceResource(ie)}
}

func (ie *Inspector2Enabler) ImportState(av io.Reader) error {
	ie.state = &inspector2EnablerState{}
	if err := json.NewDecoder(av).Decode(ie.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ie.Type(), ie.LocalName(), err)
	}
	return nil
}

func (ie *Inspector2Enabler) State() (*inspector2EnablerState, bool) {
	return ie.state, ie.state != nil
}

func (ie *Inspector2Enabler) StateMust() *inspector2EnablerState {
	if ie.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ie.Type(), ie.LocalName()))
	}
	return ie.state
}

func (ie *Inspector2Enabler) DependOn() terra.Reference {
	return terra.ReferenceResource(ie)
}

type Inspector2EnablerArgs struct {
	// AccountIds: set of string, required
	AccountIds terra.SetValue[terra.StringValue] `hcl:"account_ids,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceTypes: set of string, required
	ResourceTypes terra.SetValue[terra.StringValue] `hcl:"resource_types,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *inspector2enabler.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Inspector2Enabler depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type inspector2EnablerAttributes struct {
	ref terra.Reference
}

func (ie inspector2EnablerAttributes) AccountIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ie.ref.Append("account_ids"))
}

func (ie inspector2EnablerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ie.ref.Append("id"))
}

func (ie inspector2EnablerAttributes) ResourceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ie.ref.Append("resource_types"))
}

func (ie inspector2EnablerAttributes) Timeouts() inspector2enabler.TimeoutsAttributes {
	return terra.ReferenceSingle[inspector2enabler.TimeoutsAttributes](ie.ref.Append("timeouts"))
}

type inspector2EnablerState struct {
	AccountIds    []string                         `json:"account_ids"`
	Id            string                           `json:"id"`
	ResourceTypes []string                         `json:"resource_types"`
	Timeouts      *inspector2enabler.TimeoutsState `json:"timeouts"`
}
