// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	apigatewayv2api "github.com/golingon/terraproviders/aws/4.60.0/apigatewayv2api"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigatewayv2Api(name string, args Apigatewayv2ApiArgs) *Apigatewayv2Api {
	return &Apigatewayv2Api{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Apigatewayv2Api)(nil)

type Apigatewayv2Api struct {
	Name  string
	Args  Apigatewayv2ApiArgs
	state *apigatewayv2ApiState
}

func (aa *Apigatewayv2Api) Type() string {
	return "aws_apigatewayv2_api"
}

func (aa *Apigatewayv2Api) LocalName() string {
	return aa.Name
}

func (aa *Apigatewayv2Api) Configuration() interface{} {
	return aa.Args
}

func (aa *Apigatewayv2Api) Attributes() apigatewayv2ApiAttributes {
	return apigatewayv2ApiAttributes{ref: terra.ReferenceResource(aa)}
}

func (aa *Apigatewayv2Api) ImportState(av io.Reader) error {
	aa.state = &apigatewayv2ApiState{}
	if err := json.NewDecoder(av).Decode(aa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aa.Type(), aa.LocalName(), err)
	}
	return nil
}

func (aa *Apigatewayv2Api) State() (*apigatewayv2ApiState, bool) {
	return aa.state, aa.state != nil
}

func (aa *Apigatewayv2Api) StateMust() *apigatewayv2ApiState {
	if aa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aa.Type(), aa.LocalName()))
	}
	return aa.state
}

func (aa *Apigatewayv2Api) DependOn() terra.Reference {
	return terra.ReferenceResource(aa)
}

type Apigatewayv2ApiArgs struct {
	// ApiKeySelectionExpression: string, optional
	ApiKeySelectionExpression terra.StringValue `hcl:"api_key_selection_expression,attr"`
	// Body: string, optional
	Body terra.StringValue `hcl:"body,attr"`
	// CredentialsArn: string, optional
	CredentialsArn terra.StringValue `hcl:"credentials_arn,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableExecuteApiEndpoint: bool, optional
	DisableExecuteApiEndpoint terra.BoolValue `hcl:"disable_execute_api_endpoint,attr"`
	// FailOnWarnings: bool, optional
	FailOnWarnings terra.BoolValue `hcl:"fail_on_warnings,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProtocolType: string, required
	ProtocolType terra.StringValue `hcl:"protocol_type,attr" validate:"required"`
	// RouteKey: string, optional
	RouteKey terra.StringValue `hcl:"route_key,attr"`
	// RouteSelectionExpression: string, optional
	RouteSelectionExpression terra.StringValue `hcl:"route_selection_expression,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Target: string, optional
	Target terra.StringValue `hcl:"target,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// CorsConfiguration: optional
	CorsConfiguration *apigatewayv2api.CorsConfiguration `hcl:"cors_configuration,block"`
	// DependsOn contains resources that Apigatewayv2Api depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigatewayv2ApiAttributes struct {
	ref terra.Reference
}

func (aa apigatewayv2ApiAttributes) ApiEndpoint() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("api_endpoint"))
}

func (aa apigatewayv2ApiAttributes) ApiKeySelectionExpression() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("api_key_selection_expression"))
}

func (aa apigatewayv2ApiAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("arn"))
}

func (aa apigatewayv2ApiAttributes) Body() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("body"))
}

func (aa apigatewayv2ApiAttributes) CredentialsArn() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("credentials_arn"))
}

func (aa apigatewayv2ApiAttributes) Description() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("description"))
}

func (aa apigatewayv2ApiAttributes) DisableExecuteApiEndpoint() terra.BoolValue {
	return terra.ReferenceBool(aa.ref.Append("disable_execute_api_endpoint"))
}

func (aa apigatewayv2ApiAttributes) ExecutionArn() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("execution_arn"))
}

func (aa apigatewayv2ApiAttributes) FailOnWarnings() terra.BoolValue {
	return terra.ReferenceBool(aa.ref.Append("fail_on_warnings"))
}

func (aa apigatewayv2ApiAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("id"))
}

func (aa apigatewayv2ApiAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("name"))
}

func (aa apigatewayv2ApiAttributes) ProtocolType() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("protocol_type"))
}

func (aa apigatewayv2ApiAttributes) RouteKey() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("route_key"))
}

func (aa apigatewayv2ApiAttributes) RouteSelectionExpression() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("route_selection_expression"))
}

func (aa apigatewayv2ApiAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aa.ref.Append("tags"))
}

func (aa apigatewayv2ApiAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aa.ref.Append("tags_all"))
}

func (aa apigatewayv2ApiAttributes) Target() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("target"))
}

func (aa apigatewayv2ApiAttributes) Version() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("version"))
}

func (aa apigatewayv2ApiAttributes) CorsConfiguration() terra.ListValue[apigatewayv2api.CorsConfigurationAttributes] {
	return terra.ReferenceList[apigatewayv2api.CorsConfigurationAttributes](aa.ref.Append("cors_configuration"))
}

type apigatewayv2ApiState struct {
	ApiEndpoint               string                                   `json:"api_endpoint"`
	ApiKeySelectionExpression string                                   `json:"api_key_selection_expression"`
	Arn                       string                                   `json:"arn"`
	Body                      string                                   `json:"body"`
	CredentialsArn            string                                   `json:"credentials_arn"`
	Description               string                                   `json:"description"`
	DisableExecuteApiEndpoint bool                                     `json:"disable_execute_api_endpoint"`
	ExecutionArn              string                                   `json:"execution_arn"`
	FailOnWarnings            bool                                     `json:"fail_on_warnings"`
	Id                        string                                   `json:"id"`
	Name                      string                                   `json:"name"`
	ProtocolType              string                                   `json:"protocol_type"`
	RouteKey                  string                                   `json:"route_key"`
	RouteSelectionExpression  string                                   `json:"route_selection_expression"`
	Tags                      map[string]string                        `json:"tags"`
	TagsAll                   map[string]string                        `json:"tags_all"`
	Target                    string                                   `json:"target"`
	Version                   string                                   `json:"version"`
	CorsConfiguration         []apigatewayv2api.CorsConfigurationState `json:"cors_configuration"`
}
