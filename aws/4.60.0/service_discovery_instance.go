// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServiceDiscoveryInstance(name string, args ServiceDiscoveryInstanceArgs) *ServiceDiscoveryInstance {
	return &ServiceDiscoveryInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServiceDiscoveryInstance)(nil)

type ServiceDiscoveryInstance struct {
	Name  string
	Args  ServiceDiscoveryInstanceArgs
	state *serviceDiscoveryInstanceState
}

func (sdi *ServiceDiscoveryInstance) Type() string {
	return "aws_service_discovery_instance"
}

func (sdi *ServiceDiscoveryInstance) LocalName() string {
	return sdi.Name
}

func (sdi *ServiceDiscoveryInstance) Configuration() interface{} {
	return sdi.Args
}

func (sdi *ServiceDiscoveryInstance) Attributes() serviceDiscoveryInstanceAttributes {
	return serviceDiscoveryInstanceAttributes{ref: terra.ReferenceResource(sdi)}
}

func (sdi *ServiceDiscoveryInstance) ImportState(av io.Reader) error {
	sdi.state = &serviceDiscoveryInstanceState{}
	if err := json.NewDecoder(av).Decode(sdi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdi.Type(), sdi.LocalName(), err)
	}
	return nil
}

func (sdi *ServiceDiscoveryInstance) State() (*serviceDiscoveryInstanceState, bool) {
	return sdi.state, sdi.state != nil
}

func (sdi *ServiceDiscoveryInstance) StateMust() *serviceDiscoveryInstanceState {
	if sdi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdi.Type(), sdi.LocalName()))
	}
	return sdi.state
}

func (sdi *ServiceDiscoveryInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(sdi)
}

type ServiceDiscoveryInstanceArgs struct {
	// Attributes: map of string, required
	Attributes terra.MapValue[terra.StringValue] `hcl:"attributes,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// ServiceId: string, required
	ServiceId terra.StringValue `hcl:"service_id,attr" validate:"required"`
	// DependsOn contains resources that ServiceDiscoveryInstance depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type serviceDiscoveryInstanceAttributes struct {
	ref terra.Reference
}

func (sdi serviceDiscoveryInstanceAttributes) Attributes() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sdi.ref.Append("attributes"))
}

func (sdi serviceDiscoveryInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("id"))
}

func (sdi serviceDiscoveryInstanceAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("instance_id"))
}

func (sdi serviceDiscoveryInstanceAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceString(sdi.ref.Append("service_id"))
}

type serviceDiscoveryInstanceState struct {
	Attributes map[string]string `json:"attributes"`
	Id         string            `json:"id"`
	InstanceId string            `json:"instance_id"`
	ServiceId  string            `json:"service_id"`
}
