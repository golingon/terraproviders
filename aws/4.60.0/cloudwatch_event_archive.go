// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudwatchEventArchive(name string, args CloudwatchEventArchiveArgs) *CloudwatchEventArchive {
	return &CloudwatchEventArchive{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudwatchEventArchive)(nil)

type CloudwatchEventArchive struct {
	Name  string
	Args  CloudwatchEventArchiveArgs
	state *cloudwatchEventArchiveState
}

func (cea *CloudwatchEventArchive) Type() string {
	return "aws_cloudwatch_event_archive"
}

func (cea *CloudwatchEventArchive) LocalName() string {
	return cea.Name
}

func (cea *CloudwatchEventArchive) Configuration() interface{} {
	return cea.Args
}

func (cea *CloudwatchEventArchive) Attributes() cloudwatchEventArchiveAttributes {
	return cloudwatchEventArchiveAttributes{ref: terra.ReferenceResource(cea)}
}

func (cea *CloudwatchEventArchive) ImportState(av io.Reader) error {
	cea.state = &cloudwatchEventArchiveState{}
	if err := json.NewDecoder(av).Decode(cea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cea.Type(), cea.LocalName(), err)
	}
	return nil
}

func (cea *CloudwatchEventArchive) State() (*cloudwatchEventArchiveState, bool) {
	return cea.state, cea.state != nil
}

func (cea *CloudwatchEventArchive) StateMust() *cloudwatchEventArchiveState {
	if cea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cea.Type(), cea.LocalName()))
	}
	return cea.state
}

func (cea *CloudwatchEventArchive) DependOn() terra.Reference {
	return terra.ReferenceResource(cea)
}

type CloudwatchEventArchiveArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EventPattern: string, optional
	EventPattern terra.StringValue `hcl:"event_pattern,attr"`
	// EventSourceArn: string, required
	EventSourceArn terra.StringValue `hcl:"event_source_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RetentionDays: number, optional
	RetentionDays terra.NumberValue `hcl:"retention_days,attr"`
	// DependsOn contains resources that CloudwatchEventArchive depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudwatchEventArchiveAttributes struct {
	ref terra.Reference
}

func (cea cloudwatchEventArchiveAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cea.ref.Append("arn"))
}

func (cea cloudwatchEventArchiveAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cea.ref.Append("description"))
}

func (cea cloudwatchEventArchiveAttributes) EventPattern() terra.StringValue {
	return terra.ReferenceString(cea.ref.Append("event_pattern"))
}

func (cea cloudwatchEventArchiveAttributes) EventSourceArn() terra.StringValue {
	return terra.ReferenceString(cea.ref.Append("event_source_arn"))
}

func (cea cloudwatchEventArchiveAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cea.ref.Append("id"))
}

func (cea cloudwatchEventArchiveAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cea.ref.Append("name"))
}

func (cea cloudwatchEventArchiveAttributes) RetentionDays() terra.NumberValue {
	return terra.ReferenceNumber(cea.ref.Append("retention_days"))
}

type cloudwatchEventArchiveState struct {
	Arn            string  `json:"arn"`
	Description    string  `json:"description"`
	EventPattern   string  `json:"event_pattern"`
	EventSourceArn string  `json:"event_source_arn"`
	Id             string  `json:"id"`
	Name           string  `json:"name"`
	RetentionDays  float64 `json:"retention_days"`
}
