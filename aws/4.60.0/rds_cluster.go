// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	rdscluster "github.com/golingon/terraproviders/aws/4.60.0/rdscluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRdsCluster(name string, args RdsClusterArgs) *RdsCluster {
	return &RdsCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RdsCluster)(nil)

type RdsCluster struct {
	Name  string
	Args  RdsClusterArgs
	state *rdsClusterState
}

func (rc *RdsCluster) Type() string {
	return "aws_rds_cluster"
}

func (rc *RdsCluster) LocalName() string {
	return rc.Name
}

func (rc *RdsCluster) Configuration() interface{} {
	return rc.Args
}

func (rc *RdsCluster) Attributes() rdsClusterAttributes {
	return rdsClusterAttributes{ref: terra.ReferenceResource(rc)}
}

func (rc *RdsCluster) ImportState(av io.Reader) error {
	rc.state = &rdsClusterState{}
	if err := json.NewDecoder(av).Decode(rc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rc.Type(), rc.LocalName(), err)
	}
	return nil
}

func (rc *RdsCluster) State() (*rdsClusterState, bool) {
	return rc.state, rc.state != nil
}

func (rc *RdsCluster) StateMust() *rdsClusterState {
	if rc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rc.Type(), rc.LocalName()))
	}
	return rc.state
}

func (rc *RdsCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(rc)
}

type RdsClusterArgs struct {
	// AllocatedStorage: number, optional
	AllocatedStorage terra.NumberValue `hcl:"allocated_storage,attr"`
	// AllowMajorVersionUpgrade: bool, optional
	AllowMajorVersionUpgrade terra.BoolValue `hcl:"allow_major_version_upgrade,attr"`
	// ApplyImmediately: bool, optional
	ApplyImmediately terra.BoolValue `hcl:"apply_immediately,attr"`
	// AvailabilityZones: set of string, optional
	AvailabilityZones terra.SetValue[terra.StringValue] `hcl:"availability_zones,attr"`
	// BacktrackWindow: number, optional
	BacktrackWindow terra.NumberValue `hcl:"backtrack_window,attr"`
	// BackupRetentionPeriod: number, optional
	BackupRetentionPeriod terra.NumberValue `hcl:"backup_retention_period,attr"`
	// ClusterIdentifier: string, optional
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr"`
	// ClusterIdentifierPrefix: string, optional
	ClusterIdentifierPrefix terra.StringValue `hcl:"cluster_identifier_prefix,attr"`
	// ClusterMembers: set of string, optional
	ClusterMembers terra.SetValue[terra.StringValue] `hcl:"cluster_members,attr"`
	// CopyTagsToSnapshot: bool, optional
	CopyTagsToSnapshot terra.BoolValue `hcl:"copy_tags_to_snapshot,attr"`
	// DatabaseName: string, optional
	DatabaseName terra.StringValue `hcl:"database_name,attr"`
	// DbClusterInstanceClass: string, optional
	DbClusterInstanceClass terra.StringValue `hcl:"db_cluster_instance_class,attr"`
	// DbClusterParameterGroupName: string, optional
	DbClusterParameterGroupName terra.StringValue `hcl:"db_cluster_parameter_group_name,attr"`
	// DbInstanceParameterGroupName: string, optional
	DbInstanceParameterGroupName terra.StringValue `hcl:"db_instance_parameter_group_name,attr"`
	// DbSubnetGroupName: string, optional
	DbSubnetGroupName terra.StringValue `hcl:"db_subnet_group_name,attr"`
	// DeletionProtection: bool, optional
	DeletionProtection terra.BoolValue `hcl:"deletion_protection,attr"`
	// EnableGlobalWriteForwarding: bool, optional
	EnableGlobalWriteForwarding terra.BoolValue `hcl:"enable_global_write_forwarding,attr"`
	// EnableHttpEndpoint: bool, optional
	EnableHttpEndpoint terra.BoolValue `hcl:"enable_http_endpoint,attr"`
	// EnabledCloudwatchLogsExports: set of string, optional
	EnabledCloudwatchLogsExports terra.SetValue[terra.StringValue] `hcl:"enabled_cloudwatch_logs_exports,attr"`
	// Engine: string, optional
	Engine terra.StringValue `hcl:"engine,attr"`
	// EngineMode: string, optional
	EngineMode terra.StringValue `hcl:"engine_mode,attr"`
	// EngineVersion: string, optional
	EngineVersion terra.StringValue `hcl:"engine_version,attr"`
	// FinalSnapshotIdentifier: string, optional
	FinalSnapshotIdentifier terra.StringValue `hcl:"final_snapshot_identifier,attr"`
	// GlobalClusterIdentifier: string, optional
	GlobalClusterIdentifier terra.StringValue `hcl:"global_cluster_identifier,attr"`
	// IamDatabaseAuthenticationEnabled: bool, optional
	IamDatabaseAuthenticationEnabled terra.BoolValue `hcl:"iam_database_authentication_enabled,attr"`
	// IamRoles: set of string, optional
	IamRoles terra.SetValue[terra.StringValue] `hcl:"iam_roles,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// MasterPassword: string, optional
	MasterPassword terra.StringValue `hcl:"master_password,attr"`
	// MasterUsername: string, optional
	MasterUsername terra.StringValue `hcl:"master_username,attr"`
	// NetworkType: string, optional
	NetworkType terra.StringValue `hcl:"network_type,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// PreferredBackupWindow: string, optional
	PreferredBackupWindow terra.StringValue `hcl:"preferred_backup_window,attr"`
	// PreferredMaintenanceWindow: string, optional
	PreferredMaintenanceWindow terra.StringValue `hcl:"preferred_maintenance_window,attr"`
	// ReplicationSourceIdentifier: string, optional
	ReplicationSourceIdentifier terra.StringValue `hcl:"replication_source_identifier,attr"`
	// SkipFinalSnapshot: bool, optional
	SkipFinalSnapshot terra.BoolValue `hcl:"skip_final_snapshot,attr"`
	// SnapshotIdentifier: string, optional
	SnapshotIdentifier terra.StringValue `hcl:"snapshot_identifier,attr"`
	// SourceRegion: string, optional
	SourceRegion terra.StringValue `hcl:"source_region,attr"`
	// StorageEncrypted: bool, optional
	StorageEncrypted terra.BoolValue `hcl:"storage_encrypted,attr"`
	// StorageType: string, optional
	StorageType terra.StringValue `hcl:"storage_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// RestoreToPointInTime: optional
	RestoreToPointInTime *rdscluster.RestoreToPointInTime `hcl:"restore_to_point_in_time,block"`
	// S3Import: optional
	S3Import *rdscluster.S3Import `hcl:"s3_import,block"`
	// ScalingConfiguration: optional
	ScalingConfiguration *rdscluster.ScalingConfiguration `hcl:"scaling_configuration,block"`
	// Serverlessv2ScalingConfiguration: optional
	Serverlessv2ScalingConfiguration *rdscluster.Serverlessv2ScalingConfiguration `hcl:"serverlessv2_scaling_configuration,block"`
	// Timeouts: optional
	Timeouts *rdscluster.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RdsCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type rdsClusterAttributes struct {
	ref terra.Reference
}

func (rc rdsClusterAttributes) AllocatedStorage() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("allocated_storage"))
}

func (rc rdsClusterAttributes) AllowMajorVersionUpgrade() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("allow_major_version_upgrade"))
}

func (rc rdsClusterAttributes) ApplyImmediately() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("apply_immediately"))
}

func (rc rdsClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("arn"))
}

func (rc rdsClusterAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rc.ref.Append("availability_zones"))
}

func (rc rdsClusterAttributes) BacktrackWindow() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("backtrack_window"))
}

func (rc rdsClusterAttributes) BackupRetentionPeriod() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("backup_retention_period"))
}

func (rc rdsClusterAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("cluster_identifier"))
}

func (rc rdsClusterAttributes) ClusterIdentifierPrefix() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("cluster_identifier_prefix"))
}

func (rc rdsClusterAttributes) ClusterMembers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rc.ref.Append("cluster_members"))
}

func (rc rdsClusterAttributes) ClusterResourceId() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("cluster_resource_id"))
}

func (rc rdsClusterAttributes) CopyTagsToSnapshot() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("copy_tags_to_snapshot"))
}

func (rc rdsClusterAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("database_name"))
}

func (rc rdsClusterAttributes) DbClusterInstanceClass() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("db_cluster_instance_class"))
}

func (rc rdsClusterAttributes) DbClusterParameterGroupName() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("db_cluster_parameter_group_name"))
}

func (rc rdsClusterAttributes) DbInstanceParameterGroupName() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("db_instance_parameter_group_name"))
}

func (rc rdsClusterAttributes) DbSubnetGroupName() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("db_subnet_group_name"))
}

func (rc rdsClusterAttributes) DeletionProtection() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("deletion_protection"))
}

func (rc rdsClusterAttributes) EnableGlobalWriteForwarding() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("enable_global_write_forwarding"))
}

func (rc rdsClusterAttributes) EnableHttpEndpoint() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("enable_http_endpoint"))
}

func (rc rdsClusterAttributes) EnabledCloudwatchLogsExports() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rc.ref.Append("enabled_cloudwatch_logs_exports"))
}

func (rc rdsClusterAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("endpoint"))
}

func (rc rdsClusterAttributes) Engine() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("engine"))
}

func (rc rdsClusterAttributes) EngineMode() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("engine_mode"))
}

func (rc rdsClusterAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("engine_version"))
}

func (rc rdsClusterAttributes) EngineVersionActual() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("engine_version_actual"))
}

func (rc rdsClusterAttributes) FinalSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("final_snapshot_identifier"))
}

func (rc rdsClusterAttributes) GlobalClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("global_cluster_identifier"))
}

func (rc rdsClusterAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("hosted_zone_id"))
}

func (rc rdsClusterAttributes) IamDatabaseAuthenticationEnabled() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("iam_database_authentication_enabled"))
}

func (rc rdsClusterAttributes) IamRoles() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rc.ref.Append("iam_roles"))
}

func (rc rdsClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("id"))
}

func (rc rdsClusterAttributes) Iops() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("iops"))
}

func (rc rdsClusterAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("kms_key_id"))
}

func (rc rdsClusterAttributes) MasterPassword() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("master_password"))
}

func (rc rdsClusterAttributes) MasterUsername() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("master_username"))
}

func (rc rdsClusterAttributes) NetworkType() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("network_type"))
}

func (rc rdsClusterAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(rc.ref.Append("port"))
}

func (rc rdsClusterAttributes) PreferredBackupWindow() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("preferred_backup_window"))
}

func (rc rdsClusterAttributes) PreferredMaintenanceWindow() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("preferred_maintenance_window"))
}

func (rc rdsClusterAttributes) ReaderEndpoint() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("reader_endpoint"))
}

func (rc rdsClusterAttributes) ReplicationSourceIdentifier() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("replication_source_identifier"))
}

func (rc rdsClusterAttributes) SkipFinalSnapshot() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("skip_final_snapshot"))
}

func (rc rdsClusterAttributes) SnapshotIdentifier() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("snapshot_identifier"))
}

func (rc rdsClusterAttributes) SourceRegion() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("source_region"))
}

func (rc rdsClusterAttributes) StorageEncrypted() terra.BoolValue {
	return terra.ReferenceBool(rc.ref.Append("storage_encrypted"))
}

func (rc rdsClusterAttributes) StorageType() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("storage_type"))
}

func (rc rdsClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rc.ref.Append("tags"))
}

func (rc rdsClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rc.ref.Append("tags_all"))
}

func (rc rdsClusterAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rc.ref.Append("vpc_security_group_ids"))
}

func (rc rdsClusterAttributes) RestoreToPointInTime() terra.ListValue[rdscluster.RestoreToPointInTimeAttributes] {
	return terra.ReferenceList[rdscluster.RestoreToPointInTimeAttributes](rc.ref.Append("restore_to_point_in_time"))
}

func (rc rdsClusterAttributes) S3Import() terra.ListValue[rdscluster.S3ImportAttributes] {
	return terra.ReferenceList[rdscluster.S3ImportAttributes](rc.ref.Append("s3_import"))
}

func (rc rdsClusterAttributes) ScalingConfiguration() terra.ListValue[rdscluster.ScalingConfigurationAttributes] {
	return terra.ReferenceList[rdscluster.ScalingConfigurationAttributes](rc.ref.Append("scaling_configuration"))
}

func (rc rdsClusterAttributes) Serverlessv2ScalingConfiguration() terra.ListValue[rdscluster.Serverlessv2ScalingConfigurationAttributes] {
	return terra.ReferenceList[rdscluster.Serverlessv2ScalingConfigurationAttributes](rc.ref.Append("serverlessv2_scaling_configuration"))
}

func (rc rdsClusterAttributes) Timeouts() rdscluster.TimeoutsAttributes {
	return terra.ReferenceSingle[rdscluster.TimeoutsAttributes](rc.ref.Append("timeouts"))
}

type rdsClusterState struct {
	AllocatedStorage                 float64                                            `json:"allocated_storage"`
	AllowMajorVersionUpgrade         bool                                               `json:"allow_major_version_upgrade"`
	ApplyImmediately                 bool                                               `json:"apply_immediately"`
	Arn                              string                                             `json:"arn"`
	AvailabilityZones                []string                                           `json:"availability_zones"`
	BacktrackWindow                  float64                                            `json:"backtrack_window"`
	BackupRetentionPeriod            float64                                            `json:"backup_retention_period"`
	ClusterIdentifier                string                                             `json:"cluster_identifier"`
	ClusterIdentifierPrefix          string                                             `json:"cluster_identifier_prefix"`
	ClusterMembers                   []string                                           `json:"cluster_members"`
	ClusterResourceId                string                                             `json:"cluster_resource_id"`
	CopyTagsToSnapshot               bool                                               `json:"copy_tags_to_snapshot"`
	DatabaseName                     string                                             `json:"database_name"`
	DbClusterInstanceClass           string                                             `json:"db_cluster_instance_class"`
	DbClusterParameterGroupName      string                                             `json:"db_cluster_parameter_group_name"`
	DbInstanceParameterGroupName     string                                             `json:"db_instance_parameter_group_name"`
	DbSubnetGroupName                string                                             `json:"db_subnet_group_name"`
	DeletionProtection               bool                                               `json:"deletion_protection"`
	EnableGlobalWriteForwarding      bool                                               `json:"enable_global_write_forwarding"`
	EnableHttpEndpoint               bool                                               `json:"enable_http_endpoint"`
	EnabledCloudwatchLogsExports     []string                                           `json:"enabled_cloudwatch_logs_exports"`
	Endpoint                         string                                             `json:"endpoint"`
	Engine                           string                                             `json:"engine"`
	EngineMode                       string                                             `json:"engine_mode"`
	EngineVersion                    string                                             `json:"engine_version"`
	EngineVersionActual              string                                             `json:"engine_version_actual"`
	FinalSnapshotIdentifier          string                                             `json:"final_snapshot_identifier"`
	GlobalClusterIdentifier          string                                             `json:"global_cluster_identifier"`
	HostedZoneId                     string                                             `json:"hosted_zone_id"`
	IamDatabaseAuthenticationEnabled bool                                               `json:"iam_database_authentication_enabled"`
	IamRoles                         []string                                           `json:"iam_roles"`
	Id                               string                                             `json:"id"`
	Iops                             float64                                            `json:"iops"`
	KmsKeyId                         string                                             `json:"kms_key_id"`
	MasterPassword                   string                                             `json:"master_password"`
	MasterUsername                   string                                             `json:"master_username"`
	NetworkType                      string                                             `json:"network_type"`
	Port                             float64                                            `json:"port"`
	PreferredBackupWindow            string                                             `json:"preferred_backup_window"`
	PreferredMaintenanceWindow       string                                             `json:"preferred_maintenance_window"`
	ReaderEndpoint                   string                                             `json:"reader_endpoint"`
	ReplicationSourceIdentifier      string                                             `json:"replication_source_identifier"`
	SkipFinalSnapshot                bool                                               `json:"skip_final_snapshot"`
	SnapshotIdentifier               string                                             `json:"snapshot_identifier"`
	SourceRegion                     string                                             `json:"source_region"`
	StorageEncrypted                 bool                                               `json:"storage_encrypted"`
	StorageType                      string                                             `json:"storage_type"`
	Tags                             map[string]string                                  `json:"tags"`
	TagsAll                          map[string]string                                  `json:"tags_all"`
	VpcSecurityGroupIds              []string                                           `json:"vpc_security_group_ids"`
	RestoreToPointInTime             []rdscluster.RestoreToPointInTimeState             `json:"restore_to_point_in_time"`
	S3Import                         []rdscluster.S3ImportState                         `json:"s3_import"`
	ScalingConfiguration             []rdscluster.ScalingConfigurationState             `json:"scaling_configuration"`
	Serverlessv2ScalingConfiguration []rdscluster.Serverlessv2ScalingConfigurationState `json:"serverlessv2_scaling_configuration"`
	Timeouts                         *rdscluster.TimeoutsState                          `json:"timeouts"`
}
