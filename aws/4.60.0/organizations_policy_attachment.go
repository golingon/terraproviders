// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOrganizationsPolicyAttachment(name string, args OrganizationsPolicyAttachmentArgs) *OrganizationsPolicyAttachment {
	return &OrganizationsPolicyAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OrganizationsPolicyAttachment)(nil)

type OrganizationsPolicyAttachment struct {
	Name  string
	Args  OrganizationsPolicyAttachmentArgs
	state *organizationsPolicyAttachmentState
}

func (opa *OrganizationsPolicyAttachment) Type() string {
	return "aws_organizations_policy_attachment"
}

func (opa *OrganizationsPolicyAttachment) LocalName() string {
	return opa.Name
}

func (opa *OrganizationsPolicyAttachment) Configuration() interface{} {
	return opa.Args
}

func (opa *OrganizationsPolicyAttachment) Attributes() organizationsPolicyAttachmentAttributes {
	return organizationsPolicyAttachmentAttributes{ref: terra.ReferenceResource(opa)}
}

func (opa *OrganizationsPolicyAttachment) ImportState(av io.Reader) error {
	opa.state = &organizationsPolicyAttachmentState{}
	if err := json.NewDecoder(av).Decode(opa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", opa.Type(), opa.LocalName(), err)
	}
	return nil
}

func (opa *OrganizationsPolicyAttachment) State() (*organizationsPolicyAttachmentState, bool) {
	return opa.state, opa.state != nil
}

func (opa *OrganizationsPolicyAttachment) StateMust() *organizationsPolicyAttachmentState {
	if opa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", opa.Type(), opa.LocalName()))
	}
	return opa.state
}

func (opa *OrganizationsPolicyAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(opa)
}

type OrganizationsPolicyAttachmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyId: string, required
	PolicyId terra.StringValue `hcl:"policy_id,attr" validate:"required"`
	// SkipDestroy: bool, optional
	SkipDestroy terra.BoolValue `hcl:"skip_destroy,attr"`
	// TargetId: string, required
	TargetId terra.StringValue `hcl:"target_id,attr" validate:"required"`
	// DependsOn contains resources that OrganizationsPolicyAttachment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type organizationsPolicyAttachmentAttributes struct {
	ref terra.Reference
}

func (opa organizationsPolicyAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(opa.ref.Append("id"))
}

func (opa organizationsPolicyAttachmentAttributes) PolicyId() terra.StringValue {
	return terra.ReferenceString(opa.ref.Append("policy_id"))
}

func (opa organizationsPolicyAttachmentAttributes) SkipDestroy() terra.BoolValue {
	return terra.ReferenceBool(opa.ref.Append("skip_destroy"))
}

func (opa organizationsPolicyAttachmentAttributes) TargetId() terra.StringValue {
	return terra.ReferenceString(opa.ref.Append("target_id"))
}

type organizationsPolicyAttachmentState struct {
	Id          string `json:"id"`
	PolicyId    string `json:"policy_id"`
	SkipDestroy bool   `json:"skip_destroy"`
	TargetId    string `json:"target_id"`
}
