// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	appintegrationseventintegration "github.com/golingon/terraproviders/aws/4.60.0/appintegrationseventintegration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppintegrationsEventIntegration(name string, args AppintegrationsEventIntegrationArgs) *AppintegrationsEventIntegration {
	return &AppintegrationsEventIntegration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppintegrationsEventIntegration)(nil)

type AppintegrationsEventIntegration struct {
	Name  string
	Args  AppintegrationsEventIntegrationArgs
	state *appintegrationsEventIntegrationState
}

func (aei *AppintegrationsEventIntegration) Type() string {
	return "aws_appintegrations_event_integration"
}

func (aei *AppintegrationsEventIntegration) LocalName() string {
	return aei.Name
}

func (aei *AppintegrationsEventIntegration) Configuration() interface{} {
	return aei.Args
}

func (aei *AppintegrationsEventIntegration) Attributes() appintegrationsEventIntegrationAttributes {
	return appintegrationsEventIntegrationAttributes{ref: terra.ReferenceResource(aei)}
}

func (aei *AppintegrationsEventIntegration) ImportState(av io.Reader) error {
	aei.state = &appintegrationsEventIntegrationState{}
	if err := json.NewDecoder(av).Decode(aei.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aei.Type(), aei.LocalName(), err)
	}
	return nil
}

func (aei *AppintegrationsEventIntegration) State() (*appintegrationsEventIntegrationState, bool) {
	return aei.state, aei.state != nil
}

func (aei *AppintegrationsEventIntegration) StateMust() *appintegrationsEventIntegrationState {
	if aei.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aei.Type(), aei.LocalName()))
	}
	return aei.state
}

func (aei *AppintegrationsEventIntegration) DependOn() terra.Reference {
	return terra.ReferenceResource(aei)
}

type AppintegrationsEventIntegrationArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EventbridgeBus: string, required
	EventbridgeBus terra.StringValue `hcl:"eventbridge_bus,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// EventFilter: required
	EventFilter *appintegrationseventintegration.EventFilter `hcl:"event_filter,block" validate:"required"`
	// DependsOn contains resources that AppintegrationsEventIntegration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appintegrationsEventIntegrationAttributes struct {
	ref terra.Reference
}

func (aei appintegrationsEventIntegrationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(aei.ref.Append("arn"))
}

func (aei appintegrationsEventIntegrationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(aei.ref.Append("description"))
}

func (aei appintegrationsEventIntegrationAttributes) EventbridgeBus() terra.StringValue {
	return terra.ReferenceString(aei.ref.Append("eventbridge_bus"))
}

func (aei appintegrationsEventIntegrationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aei.ref.Append("id"))
}

func (aei appintegrationsEventIntegrationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aei.ref.Append("name"))
}

func (aei appintegrationsEventIntegrationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aei.ref.Append("tags"))
}

func (aei appintegrationsEventIntegrationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aei.ref.Append("tags_all"))
}

func (aei appintegrationsEventIntegrationAttributes) EventFilter() terra.ListValue[appintegrationseventintegration.EventFilterAttributes] {
	return terra.ReferenceList[appintegrationseventintegration.EventFilterAttributes](aei.ref.Append("event_filter"))
}

type appintegrationsEventIntegrationState struct {
	Arn            string                                             `json:"arn"`
	Description    string                                             `json:"description"`
	EventbridgeBus string                                             `json:"eventbridge_bus"`
	Id             string                                             `json:"id"`
	Name           string                                             `json:"name"`
	Tags           map[string]string                                  `json:"tags"`
	TagsAll        map[string]string                                  `json:"tags_all"`
	EventFilter    []appintegrationseventintegration.EventFilterState `json:"event_filter"`
}
