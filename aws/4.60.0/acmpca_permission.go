// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAcmpcaPermission(name string, args AcmpcaPermissionArgs) *AcmpcaPermission {
	return &AcmpcaPermission{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AcmpcaPermission)(nil)

type AcmpcaPermission struct {
	Name  string
	Args  AcmpcaPermissionArgs
	state *acmpcaPermissionState
}

func (ap *AcmpcaPermission) Type() string {
	return "aws_acmpca_permission"
}

func (ap *AcmpcaPermission) LocalName() string {
	return ap.Name
}

func (ap *AcmpcaPermission) Configuration() interface{} {
	return ap.Args
}

func (ap *AcmpcaPermission) Attributes() acmpcaPermissionAttributes {
	return acmpcaPermissionAttributes{ref: terra.ReferenceResource(ap)}
}

func (ap *AcmpcaPermission) ImportState(av io.Reader) error {
	ap.state = &acmpcaPermissionState{}
	if err := json.NewDecoder(av).Decode(ap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ap.Type(), ap.LocalName(), err)
	}
	return nil
}

func (ap *AcmpcaPermission) State() (*acmpcaPermissionState, bool) {
	return ap.state, ap.state != nil
}

func (ap *AcmpcaPermission) StateMust() *acmpcaPermissionState {
	if ap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ap.Type(), ap.LocalName()))
	}
	return ap.state
}

func (ap *AcmpcaPermission) DependOn() terra.Reference {
	return terra.ReferenceResource(ap)
}

type AcmpcaPermissionArgs struct {
	// Actions: set of string, required
	Actions terra.SetValue[terra.StringValue] `hcl:"actions,attr" validate:"required"`
	// CertificateAuthorityArn: string, required
	CertificateAuthorityArn terra.StringValue `hcl:"certificate_authority_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
	// SourceAccount: string, optional
	SourceAccount terra.StringValue `hcl:"source_account,attr"`
	// DependsOn contains resources that AcmpcaPermission depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type acmpcaPermissionAttributes struct {
	ref terra.Reference
}

func (ap acmpcaPermissionAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ap.ref.Append("actions"))
}

func (ap acmpcaPermissionAttributes) CertificateAuthorityArn() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("certificate_authority_arn"))
}

func (ap acmpcaPermissionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("id"))
}

func (ap acmpcaPermissionAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("policy"))
}

func (ap acmpcaPermissionAttributes) Principal() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("principal"))
}

func (ap acmpcaPermissionAttributes) SourceAccount() terra.StringValue {
	return terra.ReferenceString(ap.ref.Append("source_account"))
}

type acmpcaPermissionState struct {
	Actions                 []string `json:"actions"`
	CertificateAuthorityArn string   `json:"certificate_authority_arn"`
	Id                      string   `json:"id"`
	Policy                  string   `json:"policy"`
	Principal               string   `json:"principal"`
	SourceAccount           string   `json:"source_account"`
}
