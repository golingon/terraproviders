// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMqConfiguration(name string, args MqConfigurationArgs) *MqConfiguration {
	return &MqConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MqConfiguration)(nil)

type MqConfiguration struct {
	Name  string
	Args  MqConfigurationArgs
	state *mqConfigurationState
}

func (mc *MqConfiguration) Type() string {
	return "aws_mq_configuration"
}

func (mc *MqConfiguration) LocalName() string {
	return mc.Name
}

func (mc *MqConfiguration) Configuration() interface{} {
	return mc.Args
}

func (mc *MqConfiguration) Attributes() mqConfigurationAttributes {
	return mqConfigurationAttributes{ref: terra.ReferenceResource(mc)}
}

func (mc *MqConfiguration) ImportState(av io.Reader) error {
	mc.state = &mqConfigurationState{}
	if err := json.NewDecoder(av).Decode(mc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mc.Type(), mc.LocalName(), err)
	}
	return nil
}

func (mc *MqConfiguration) State() (*mqConfigurationState, bool) {
	return mc.state, mc.state != nil
}

func (mc *MqConfiguration) StateMust() *mqConfigurationState {
	if mc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mc.Type(), mc.LocalName()))
	}
	return mc.state
}

func (mc *MqConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(mc)
}

type MqConfigurationArgs struct {
	// AuthenticationStrategy: string, optional
	AuthenticationStrategy terra.StringValue `hcl:"authentication_strategy,attr"`
	// Data: string, required
	Data terra.StringValue `hcl:"data,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EngineType: string, required
	EngineType terra.StringValue `hcl:"engine_type,attr" validate:"required"`
	// EngineVersion: string, required
	EngineVersion terra.StringValue `hcl:"engine_version,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that MqConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mqConfigurationAttributes struct {
	ref terra.Reference
}

func (mc mqConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("arn"))
}

func (mc mqConfigurationAttributes) AuthenticationStrategy() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("authentication_strategy"))
}

func (mc mqConfigurationAttributes) Data() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("data"))
}

func (mc mqConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("description"))
}

func (mc mqConfigurationAttributes) EngineType() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("engine_type"))
}

func (mc mqConfigurationAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("engine_version"))
}

func (mc mqConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("id"))
}

func (mc mqConfigurationAttributes) LatestRevision() terra.NumberValue {
	return terra.ReferenceNumber(mc.ref.Append("latest_revision"))
}

func (mc mqConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("name"))
}

func (mc mqConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mc.ref.Append("tags"))
}

func (mc mqConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mc.ref.Append("tags_all"))
}

type mqConfigurationState struct {
	Arn                    string            `json:"arn"`
	AuthenticationStrategy string            `json:"authentication_strategy"`
	Data                   string            `json:"data"`
	Description            string            `json:"description"`
	EngineType             string            `json:"engine_type"`
	EngineVersion          string            `json:"engine_version"`
	Id                     string            `json:"id"`
	LatestRevision         float64           `json:"latest_revision"`
	Name                   string            `json:"name"`
	Tags                   map[string]string `json:"tags"`
	TagsAll                map[string]string `json:"tags_all"`
}
