// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	secretsmanagersecret "github.com/golingon/terraproviders/aws/4.60.0/secretsmanagersecret"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecretsmanagerSecret(name string, args SecretsmanagerSecretArgs) *SecretsmanagerSecret {
	return &SecretsmanagerSecret{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecretsmanagerSecret)(nil)

type SecretsmanagerSecret struct {
	Name  string
	Args  SecretsmanagerSecretArgs
	state *secretsmanagerSecretState
}

func (ss *SecretsmanagerSecret) Type() string {
	return "aws_secretsmanager_secret"
}

func (ss *SecretsmanagerSecret) LocalName() string {
	return ss.Name
}

func (ss *SecretsmanagerSecret) Configuration() interface{} {
	return ss.Args
}

func (ss *SecretsmanagerSecret) Attributes() secretsmanagerSecretAttributes {
	return secretsmanagerSecretAttributes{ref: terra.ReferenceResource(ss)}
}

func (ss *SecretsmanagerSecret) ImportState(av io.Reader) error {
	ss.state = &secretsmanagerSecretState{}
	if err := json.NewDecoder(av).Decode(ss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ss.Type(), ss.LocalName(), err)
	}
	return nil
}

func (ss *SecretsmanagerSecret) State() (*secretsmanagerSecretState, bool) {
	return ss.state, ss.state != nil
}

func (ss *SecretsmanagerSecret) StateMust() *secretsmanagerSecretState {
	if ss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ss.Type(), ss.LocalName()))
	}
	return ss.state
}

func (ss *SecretsmanagerSecret) DependOn() terra.Reference {
	return terra.ReferenceResource(ss)
}

type SecretsmanagerSecretArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ForceOverwriteReplicaSecret: bool, optional
	ForceOverwriteReplicaSecret terra.BoolValue `hcl:"force_overwrite_replica_secret,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
	// RecoveryWindowInDays: number, optional
	RecoveryWindowInDays terra.NumberValue `hcl:"recovery_window_in_days,attr"`
	// RotationLambdaArn: string, optional
	RotationLambdaArn terra.StringValue `hcl:"rotation_lambda_arn,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Replica: min=0
	Replica []secretsmanagersecret.Replica `hcl:"replica,block" validate:"min=0"`
	// RotationRules: optional
	RotationRules *secretsmanagersecret.RotationRules `hcl:"rotation_rules,block"`
	// DependsOn contains resources that SecretsmanagerSecret depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type secretsmanagerSecretAttributes struct {
	ref terra.Reference
}

func (ss secretsmanagerSecretAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("arn"))
}

func (ss secretsmanagerSecretAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("description"))
}

func (ss secretsmanagerSecretAttributes) ForceOverwriteReplicaSecret() terra.BoolValue {
	return terra.ReferenceBool(ss.ref.Append("force_overwrite_replica_secret"))
}

func (ss secretsmanagerSecretAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("id"))
}

func (ss secretsmanagerSecretAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("kms_key_id"))
}

func (ss secretsmanagerSecretAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("name"))
}

func (ss secretsmanagerSecretAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("name_prefix"))
}

func (ss secretsmanagerSecretAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("policy"))
}

func (ss secretsmanagerSecretAttributes) RecoveryWindowInDays() terra.NumberValue {
	return terra.ReferenceNumber(ss.ref.Append("recovery_window_in_days"))
}

func (ss secretsmanagerSecretAttributes) RotationEnabled() terra.BoolValue {
	return terra.ReferenceBool(ss.ref.Append("rotation_enabled"))
}

func (ss secretsmanagerSecretAttributes) RotationLambdaArn() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("rotation_lambda_arn"))
}

func (ss secretsmanagerSecretAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ss.ref.Append("tags"))
}

func (ss secretsmanagerSecretAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ss.ref.Append("tags_all"))
}

func (ss secretsmanagerSecretAttributes) Replica() terra.SetValue[secretsmanagersecret.ReplicaAttributes] {
	return terra.ReferenceSet[secretsmanagersecret.ReplicaAttributes](ss.ref.Append("replica"))
}

func (ss secretsmanagerSecretAttributes) RotationRules() terra.ListValue[secretsmanagersecret.RotationRulesAttributes] {
	return terra.ReferenceList[secretsmanagersecret.RotationRulesAttributes](ss.ref.Append("rotation_rules"))
}

type secretsmanagerSecretState struct {
	Arn                         string                                    `json:"arn"`
	Description                 string                                    `json:"description"`
	ForceOverwriteReplicaSecret bool                                      `json:"force_overwrite_replica_secret"`
	Id                          string                                    `json:"id"`
	KmsKeyId                    string                                    `json:"kms_key_id"`
	Name                        string                                    `json:"name"`
	NamePrefix                  string                                    `json:"name_prefix"`
	Policy                      string                                    `json:"policy"`
	RecoveryWindowInDays        float64                                   `json:"recovery_window_in_days"`
	RotationEnabled             bool                                      `json:"rotation_enabled"`
	RotationLambdaArn           string                                    `json:"rotation_lambda_arn"`
	Tags                        map[string]string                         `json:"tags"`
	TagsAll                     map[string]string                         `json:"tags_all"`
	Replica                     []secretsmanagersecret.ReplicaState       `json:"replica"`
	RotationRules               []secretsmanagersecret.RotationRulesState `json:"rotation_rules"`
}
