// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCodedeployApp(name string, args CodedeployAppArgs) *CodedeployApp {
	return &CodedeployApp{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodedeployApp)(nil)

type CodedeployApp struct {
	Name  string
	Args  CodedeployAppArgs
	state *codedeployAppState
}

func (ca *CodedeployApp) Type() string {
	return "aws_codedeploy_app"
}

func (ca *CodedeployApp) LocalName() string {
	return ca.Name
}

func (ca *CodedeployApp) Configuration() interface{} {
	return ca.Args
}

func (ca *CodedeployApp) Attributes() codedeployAppAttributes {
	return codedeployAppAttributes{ref: terra.ReferenceResource(ca)}
}

func (ca *CodedeployApp) ImportState(av io.Reader) error {
	ca.state = &codedeployAppState{}
	if err := json.NewDecoder(av).Decode(ca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ca.Type(), ca.LocalName(), err)
	}
	return nil
}

func (ca *CodedeployApp) State() (*codedeployAppState, bool) {
	return ca.state, ca.state != nil
}

func (ca *CodedeployApp) StateMust() *codedeployAppState {
	if ca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ca.Type(), ca.LocalName()))
	}
	return ca.state
}

func (ca *CodedeployApp) DependOn() terra.Reference {
	return terra.ReferenceResource(ca)
}

type CodedeployAppArgs struct {
	// ComputePlatform: string, optional
	ComputePlatform terra.StringValue `hcl:"compute_platform,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that CodedeployApp depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type codedeployAppAttributes struct {
	ref terra.Reference
}

func (ca codedeployAppAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("application_id"))
}

func (ca codedeployAppAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("arn"))
}

func (ca codedeployAppAttributes) ComputePlatform() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("compute_platform"))
}

func (ca codedeployAppAttributes) GithubAccountName() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("github_account_name"))
}

func (ca codedeployAppAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("id"))
}

func (ca codedeployAppAttributes) LinkedToGithub() terra.BoolValue {
	return terra.ReferenceBool(ca.ref.Append("linked_to_github"))
}

func (ca codedeployAppAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ca.ref.Append("name"))
}

func (ca codedeployAppAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ca.ref.Append("tags"))
}

func (ca codedeployAppAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ca.ref.Append("tags_all"))
}

type codedeployAppState struct {
	ApplicationId     string            `json:"application_id"`
	Arn               string            `json:"arn"`
	ComputePlatform   string            `json:"compute_platform"`
	GithubAccountName string            `json:"github_account_name"`
	Id                string            `json:"id"`
	LinkedToGithub    bool              `json:"linked_to_github"`
	Name              string            `json:"name"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
}
