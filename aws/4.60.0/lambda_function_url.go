// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lambdafunctionurl "github.com/golingon/terraproviders/aws/4.60.0/lambdafunctionurl"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLambdaFunctionUrl(name string, args LambdaFunctionUrlArgs) *LambdaFunctionUrl {
	return &LambdaFunctionUrl{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LambdaFunctionUrl)(nil)

type LambdaFunctionUrl struct {
	Name  string
	Args  LambdaFunctionUrlArgs
	state *lambdaFunctionUrlState
}

func (lfu *LambdaFunctionUrl) Type() string {
	return "aws_lambda_function_url"
}

func (lfu *LambdaFunctionUrl) LocalName() string {
	return lfu.Name
}

func (lfu *LambdaFunctionUrl) Configuration() interface{} {
	return lfu.Args
}

func (lfu *LambdaFunctionUrl) Attributes() lambdaFunctionUrlAttributes {
	return lambdaFunctionUrlAttributes{ref: terra.ReferenceResource(lfu)}
}

func (lfu *LambdaFunctionUrl) ImportState(av io.Reader) error {
	lfu.state = &lambdaFunctionUrlState{}
	if err := json.NewDecoder(av).Decode(lfu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lfu.Type(), lfu.LocalName(), err)
	}
	return nil
}

func (lfu *LambdaFunctionUrl) State() (*lambdaFunctionUrlState, bool) {
	return lfu.state, lfu.state != nil
}

func (lfu *LambdaFunctionUrl) StateMust() *lambdaFunctionUrlState {
	if lfu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lfu.Type(), lfu.LocalName()))
	}
	return lfu.state
}

func (lfu *LambdaFunctionUrl) DependOn() terra.Reference {
	return terra.ReferenceResource(lfu)
}

type LambdaFunctionUrlArgs struct {
	// AuthorizationType: string, required
	AuthorizationType terra.StringValue `hcl:"authorization_type,attr" validate:"required"`
	// FunctionName: string, required
	FunctionName terra.StringValue `hcl:"function_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Qualifier: string, optional
	Qualifier terra.StringValue `hcl:"qualifier,attr"`
	// Cors: optional
	Cors *lambdafunctionurl.Cors `hcl:"cors,block"`
	// Timeouts: optional
	Timeouts *lambdafunctionurl.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LambdaFunctionUrl depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lambdaFunctionUrlAttributes struct {
	ref terra.Reference
}

func (lfu lambdaFunctionUrlAttributes) AuthorizationType() terra.StringValue {
	return terra.ReferenceString(lfu.ref.Append("authorization_type"))
}

func (lfu lambdaFunctionUrlAttributes) FunctionArn() terra.StringValue {
	return terra.ReferenceString(lfu.ref.Append("function_arn"))
}

func (lfu lambdaFunctionUrlAttributes) FunctionName() terra.StringValue {
	return terra.ReferenceString(lfu.ref.Append("function_name"))
}

func (lfu lambdaFunctionUrlAttributes) FunctionUrl() terra.StringValue {
	return terra.ReferenceString(lfu.ref.Append("function_url"))
}

func (lfu lambdaFunctionUrlAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lfu.ref.Append("id"))
}

func (lfu lambdaFunctionUrlAttributes) Qualifier() terra.StringValue {
	return terra.ReferenceString(lfu.ref.Append("qualifier"))
}

func (lfu lambdaFunctionUrlAttributes) UrlId() terra.StringValue {
	return terra.ReferenceString(lfu.ref.Append("url_id"))
}

func (lfu lambdaFunctionUrlAttributes) Cors() terra.ListValue[lambdafunctionurl.CorsAttributes] {
	return terra.ReferenceList[lambdafunctionurl.CorsAttributes](lfu.ref.Append("cors"))
}

func (lfu lambdaFunctionUrlAttributes) Timeouts() lambdafunctionurl.TimeoutsAttributes {
	return terra.ReferenceSingle[lambdafunctionurl.TimeoutsAttributes](lfu.ref.Append("timeouts"))
}

type lambdaFunctionUrlState struct {
	AuthorizationType string                           `json:"authorization_type"`
	FunctionArn       string                           `json:"function_arn"`
	FunctionName      string                           `json:"function_name"`
	FunctionUrl       string                           `json:"function_url"`
	Id                string                           `json:"id"`
	Qualifier         string                           `json:"qualifier"`
	UrlId             string                           `json:"url_id"`
	Cors              []lambdafunctionurl.CorsState    `json:"cors"`
	Timeouts          *lambdafunctionurl.TimeoutsState `json:"timeouts"`
}
