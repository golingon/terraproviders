// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	alblistener "github.com/golingon/terraproviders/aws/4.60.0/alblistener"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAlbListener(name string, args AlbListenerArgs) *AlbListener {
	return &AlbListener{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AlbListener)(nil)

type AlbListener struct {
	Name  string
	Args  AlbListenerArgs
	state *albListenerState
}

func (al *AlbListener) Type() string {
	return "aws_alb_listener"
}

func (al *AlbListener) LocalName() string {
	return al.Name
}

func (al *AlbListener) Configuration() interface{} {
	return al.Args
}

func (al *AlbListener) Attributes() albListenerAttributes {
	return albListenerAttributes{ref: terra.ReferenceResource(al)}
}

func (al *AlbListener) ImportState(av io.Reader) error {
	al.state = &albListenerState{}
	if err := json.NewDecoder(av).Decode(al.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", al.Type(), al.LocalName(), err)
	}
	return nil
}

func (al *AlbListener) State() (*albListenerState, bool) {
	return al.state, al.state != nil
}

func (al *AlbListener) StateMust() *albListenerState {
	if al.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", al.Type(), al.LocalName()))
	}
	return al.state
}

func (al *AlbListener) DependOn() terra.Reference {
	return terra.ReferenceResource(al)
}

type AlbListenerArgs struct {
	// AlpnPolicy: string, optional
	AlpnPolicy terra.StringValue `hcl:"alpn_policy,attr"`
	// CertificateArn: string, optional
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoadBalancerArn: string, required
	LoadBalancerArn terra.StringValue `hcl:"load_balancer_arn,attr" validate:"required"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// SslPolicy: string, optional
	SslPolicy terra.StringValue `hcl:"ssl_policy,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DefaultAction: min=1
	DefaultAction []alblistener.DefaultAction `hcl:"default_action,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *alblistener.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AlbListener depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type albListenerAttributes struct {
	ref terra.Reference
}

func (al albListenerAttributes) AlpnPolicy() terra.StringValue {
	return terra.ReferenceString(al.ref.Append("alpn_policy"))
}

func (al albListenerAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(al.ref.Append("arn"))
}

func (al albListenerAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceString(al.ref.Append("certificate_arn"))
}

func (al albListenerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(al.ref.Append("id"))
}

func (al albListenerAttributes) LoadBalancerArn() terra.StringValue {
	return terra.ReferenceString(al.ref.Append("load_balancer_arn"))
}

func (al albListenerAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(al.ref.Append("port"))
}

func (al albListenerAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(al.ref.Append("protocol"))
}

func (al albListenerAttributes) SslPolicy() terra.StringValue {
	return terra.ReferenceString(al.ref.Append("ssl_policy"))
}

func (al albListenerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](al.ref.Append("tags"))
}

func (al albListenerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](al.ref.Append("tags_all"))
}

func (al albListenerAttributes) DefaultAction() terra.ListValue[alblistener.DefaultActionAttributes] {
	return terra.ReferenceList[alblistener.DefaultActionAttributes](al.ref.Append("default_action"))
}

func (al albListenerAttributes) Timeouts() alblistener.TimeoutsAttributes {
	return terra.ReferenceSingle[alblistener.TimeoutsAttributes](al.ref.Append("timeouts"))
}

type albListenerState struct {
	AlpnPolicy      string                           `json:"alpn_policy"`
	Arn             string                           `json:"arn"`
	CertificateArn  string                           `json:"certificate_arn"`
	Id              string                           `json:"id"`
	LoadBalancerArn string                           `json:"load_balancer_arn"`
	Port            float64                          `json:"port"`
	Protocol        string                           `json:"protocol"`
	SslPolicy       string                           `json:"ssl_policy"`
	Tags            map[string]string                `json:"tags"`
	TagsAll         map[string]string                `json:"tags_all"`
	DefaultAction   []alblistener.DefaultActionState `json:"default_action"`
	Timeouts        *alblistener.TimeoutsState       `json:"timeouts"`
}
