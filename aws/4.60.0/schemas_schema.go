// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSchemasSchema(name string, args SchemasSchemaArgs) *SchemasSchema {
	return &SchemasSchema{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SchemasSchema)(nil)

type SchemasSchema struct {
	Name  string
	Args  SchemasSchemaArgs
	state *schemasSchemaState
}

func (ss *SchemasSchema) Type() string {
	return "aws_schemas_schema"
}

func (ss *SchemasSchema) LocalName() string {
	return ss.Name
}

func (ss *SchemasSchema) Configuration() interface{} {
	return ss.Args
}

func (ss *SchemasSchema) Attributes() schemasSchemaAttributes {
	return schemasSchemaAttributes{ref: terra.ReferenceResource(ss)}
}

func (ss *SchemasSchema) ImportState(av io.Reader) error {
	ss.state = &schemasSchemaState{}
	if err := json.NewDecoder(av).Decode(ss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ss.Type(), ss.LocalName(), err)
	}
	return nil
}

func (ss *SchemasSchema) State() (*schemasSchemaState, bool) {
	return ss.state, ss.state != nil
}

func (ss *SchemasSchema) StateMust() *schemasSchemaState {
	if ss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ss.Type(), ss.LocalName()))
	}
	return ss.state
}

func (ss *SchemasSchema) DependOn() terra.Reference {
	return terra.ReferenceResource(ss)
}

type SchemasSchemaArgs struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RegistryName: string, required
	RegistryName terra.StringValue `hcl:"registry_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// DependsOn contains resources that SchemasSchema depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type schemasSchemaAttributes struct {
	ref terra.Reference
}

func (ss schemasSchemaAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("arn"))
}

func (ss schemasSchemaAttributes) Content() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("content"))
}

func (ss schemasSchemaAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("description"))
}

func (ss schemasSchemaAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("id"))
}

func (ss schemasSchemaAttributes) LastModified() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("last_modified"))
}

func (ss schemasSchemaAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("name"))
}

func (ss schemasSchemaAttributes) RegistryName() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("registry_name"))
}

func (ss schemasSchemaAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ss.ref.Append("tags"))
}

func (ss schemasSchemaAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ss.ref.Append("tags_all"))
}

func (ss schemasSchemaAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("type"))
}

func (ss schemasSchemaAttributes) Version() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("version"))
}

func (ss schemasSchemaAttributes) VersionCreatedDate() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("version_created_date"))
}

type schemasSchemaState struct {
	Arn                string            `json:"arn"`
	Content            string            `json:"content"`
	Description        string            `json:"description"`
	Id                 string            `json:"id"`
	LastModified       string            `json:"last_modified"`
	Name               string            `json:"name"`
	RegistryName       string            `json:"registry_name"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
	Type               string            `json:"type"`
	Version            string            `json:"version"`
	VersionCreatedDate string            `json:"version_created_date"`
}
