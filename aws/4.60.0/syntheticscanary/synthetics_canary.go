// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package syntheticscanary

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Timeline struct{}

type ArtifactConfig struct {
	// S3Encryption: optional
	S3Encryption *S3Encryption `hcl:"s3_encryption,block"`
}

type S3Encryption struct {
	// EncryptionMode: string, optional
	EncryptionMode terra.StringValue `hcl:"encryption_mode,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
}

type RunConfig struct {
	// ActiveTracing: bool, optional
	ActiveTracing terra.BoolValue `hcl:"active_tracing,attr"`
	// EnvironmentVariables: map of string, optional
	EnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"environment_variables,attr"`
	// MemoryInMb: number, optional
	MemoryInMb terra.NumberValue `hcl:"memory_in_mb,attr"`
	// TimeoutInSeconds: number, optional
	TimeoutInSeconds terra.NumberValue `hcl:"timeout_in_seconds,attr"`
}

type Schedule struct {
	// DurationInSeconds: number, optional
	DurationInSeconds terra.NumberValue `hcl:"duration_in_seconds,attr"`
	// Expression: string, required
	Expression terra.StringValue `hcl:"expression,attr" validate:"required"`
}

type VpcConfig struct {
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
}

type TimelineAttributes struct {
	ref terra.Reference
}

func (t TimelineAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimelineAttributes) InternalWithRef(ref terra.Reference) TimelineAttributes {
	return TimelineAttributes{ref: ref}
}

func (t TimelineAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimelineAttributes) Created() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("created"))
}

func (t TimelineAttributes) LastModified() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("last_modified"))
}

func (t TimelineAttributes) LastStarted() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("last_started"))
}

func (t TimelineAttributes) LastStopped() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("last_stopped"))
}

type ArtifactConfigAttributes struct {
	ref terra.Reference
}

func (ac ArtifactConfigAttributes) InternalRef() terra.Reference {
	return ac.ref
}

func (ac ArtifactConfigAttributes) InternalWithRef(ref terra.Reference) ArtifactConfigAttributes {
	return ArtifactConfigAttributes{ref: ref}
}

func (ac ArtifactConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ac.ref.InternalTokens()
}

func (ac ArtifactConfigAttributes) S3Encryption() terra.ListValue[S3EncryptionAttributes] {
	return terra.ReferenceAsList[S3EncryptionAttributes](ac.ref.Append("s3_encryption"))
}

type S3EncryptionAttributes struct {
	ref terra.Reference
}

func (se S3EncryptionAttributes) InternalRef() terra.Reference {
	return se.ref
}

func (se S3EncryptionAttributes) InternalWithRef(ref terra.Reference) S3EncryptionAttributes {
	return S3EncryptionAttributes{ref: ref}
}

func (se S3EncryptionAttributes) InternalTokens() hclwrite.Tokens {
	return se.ref.InternalTokens()
}

func (se S3EncryptionAttributes) EncryptionMode() terra.StringValue {
	return terra.ReferenceAsString(se.ref.Append("encryption_mode"))
}

func (se S3EncryptionAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(se.ref.Append("kms_key_arn"))
}

type RunConfigAttributes struct {
	ref terra.Reference
}

func (rc RunConfigAttributes) InternalRef() terra.Reference {
	return rc.ref
}

func (rc RunConfigAttributes) InternalWithRef(ref terra.Reference) RunConfigAttributes {
	return RunConfigAttributes{ref: ref}
}

func (rc RunConfigAttributes) InternalTokens() hclwrite.Tokens {
	return rc.ref.InternalTokens()
}

func (rc RunConfigAttributes) ActiveTracing() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("active_tracing"))
}

func (rc RunConfigAttributes) EnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rc.ref.Append("environment_variables"))
}

func (rc RunConfigAttributes) MemoryInMb() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("memory_in_mb"))
}

func (rc RunConfigAttributes) TimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("timeout_in_seconds"))
}

type ScheduleAttributes struct {
	ref terra.Reference
}

func (s ScheduleAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s ScheduleAttributes) InternalWithRef(ref terra.Reference) ScheduleAttributes {
	return ScheduleAttributes{ref: ref}
}

func (s ScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s ScheduleAttributes) DurationInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("duration_in_seconds"))
}

func (s ScheduleAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("expression"))
}

type VpcConfigAttributes struct {
	ref terra.Reference
}

func (vc VpcConfigAttributes) InternalRef() terra.Reference {
	return vc.ref
}

func (vc VpcConfigAttributes) InternalWithRef(ref terra.Reference) VpcConfigAttributes {
	return VpcConfigAttributes{ref: ref}
}

func (vc VpcConfigAttributes) InternalTokens() hclwrite.Tokens {
	return vc.ref.InternalTokens()
}

func (vc VpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc VpcConfigAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

func (vc VpcConfigAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_id"))
}

type TimelineState struct {
	Created      string `json:"created"`
	LastModified string `json:"last_modified"`
	LastStarted  string `json:"last_started"`
	LastStopped  string `json:"last_stopped"`
}

type ArtifactConfigState struct {
	S3Encryption []S3EncryptionState `json:"s3_encryption"`
}

type S3EncryptionState struct {
	EncryptionMode string `json:"encryption_mode"`
	KmsKeyArn      string `json:"kms_key_arn"`
}

type RunConfigState struct {
	ActiveTracing        bool              `json:"active_tracing"`
	EnvironmentVariables map[string]string `json:"environment_variables"`
	MemoryInMb           float64           `json:"memory_in_mb"`
	TimeoutInSeconds     float64           `json:"timeout_in_seconds"`
}

type ScheduleState struct {
	DurationInSeconds float64 `json:"duration_in_seconds"`
	Expression        string  `json:"expression"`
}

type VpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
	VpcId            string   `json:"vpc_id"`
}
