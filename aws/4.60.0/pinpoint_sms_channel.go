// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPinpointSmsChannel(name string, args PinpointSmsChannelArgs) *PinpointSmsChannel {
	return &PinpointSmsChannel{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PinpointSmsChannel)(nil)

type PinpointSmsChannel struct {
	Name  string
	Args  PinpointSmsChannelArgs
	state *pinpointSmsChannelState
}

func (psc *PinpointSmsChannel) Type() string {
	return "aws_pinpoint_sms_channel"
}

func (psc *PinpointSmsChannel) LocalName() string {
	return psc.Name
}

func (psc *PinpointSmsChannel) Configuration() interface{} {
	return psc.Args
}

func (psc *PinpointSmsChannel) Attributes() pinpointSmsChannelAttributes {
	return pinpointSmsChannelAttributes{ref: terra.ReferenceResource(psc)}
}

func (psc *PinpointSmsChannel) ImportState(av io.Reader) error {
	psc.state = &pinpointSmsChannelState{}
	if err := json.NewDecoder(av).Decode(psc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", psc.Type(), psc.LocalName(), err)
	}
	return nil
}

func (psc *PinpointSmsChannel) State() (*pinpointSmsChannelState, bool) {
	return psc.state, psc.state != nil
}

func (psc *PinpointSmsChannel) StateMust() *pinpointSmsChannelState {
	if psc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", psc.Type(), psc.LocalName()))
	}
	return psc.state
}

func (psc *PinpointSmsChannel) DependOn() terra.Reference {
	return terra.ReferenceResource(psc)
}

type PinpointSmsChannelArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SenderId: string, optional
	SenderId terra.StringValue `hcl:"sender_id,attr"`
	// ShortCode: string, optional
	ShortCode terra.StringValue `hcl:"short_code,attr"`
	// DependsOn contains resources that PinpointSmsChannel depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type pinpointSmsChannelAttributes struct {
	ref terra.Reference
}

func (psc pinpointSmsChannelAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceString(psc.ref.Append("application_id"))
}

func (psc pinpointSmsChannelAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(psc.ref.Append("enabled"))
}

func (psc pinpointSmsChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceString(psc.ref.Append("id"))
}

func (psc pinpointSmsChannelAttributes) PromotionalMessagesPerSecond() terra.NumberValue {
	return terra.ReferenceNumber(psc.ref.Append("promotional_messages_per_second"))
}

func (psc pinpointSmsChannelAttributes) SenderId() terra.StringValue {
	return terra.ReferenceString(psc.ref.Append("sender_id"))
}

func (psc pinpointSmsChannelAttributes) ShortCode() terra.StringValue {
	return terra.ReferenceString(psc.ref.Append("short_code"))
}

func (psc pinpointSmsChannelAttributes) TransactionalMessagesPerSecond() terra.NumberValue {
	return terra.ReferenceNumber(psc.ref.Append("transactional_messages_per_second"))
}

type pinpointSmsChannelState struct {
	ApplicationId                  string  `json:"application_id"`
	Enabled                        bool    `json:"enabled"`
	Id                             string  `json:"id"`
	PromotionalMessagesPerSecond   float64 `json:"promotional_messages_per_second"`
	SenderId                       string  `json:"sender_id"`
	ShortCode                      string  `json:"short_code"`
	TransactionalMessagesPerSecond float64 `json:"transactional_messages_per_second"`
}
