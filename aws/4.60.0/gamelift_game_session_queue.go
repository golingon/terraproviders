// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	gameliftgamesessionqueue "github.com/golingon/terraproviders/aws/4.60.0/gameliftgamesessionqueue"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGameliftGameSessionQueue(name string, args GameliftGameSessionQueueArgs) *GameliftGameSessionQueue {
	return &GameliftGameSessionQueue{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GameliftGameSessionQueue)(nil)

type GameliftGameSessionQueue struct {
	Name  string
	Args  GameliftGameSessionQueueArgs
	state *gameliftGameSessionQueueState
}

func (ggsq *GameliftGameSessionQueue) Type() string {
	return "aws_gamelift_game_session_queue"
}

func (ggsq *GameliftGameSessionQueue) LocalName() string {
	return ggsq.Name
}

func (ggsq *GameliftGameSessionQueue) Configuration() interface{} {
	return ggsq.Args
}

func (ggsq *GameliftGameSessionQueue) Attributes() gameliftGameSessionQueueAttributes {
	return gameliftGameSessionQueueAttributes{ref: terra.ReferenceResource(ggsq)}
}

func (ggsq *GameliftGameSessionQueue) ImportState(av io.Reader) error {
	ggsq.state = &gameliftGameSessionQueueState{}
	if err := json.NewDecoder(av).Decode(ggsq.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ggsq.Type(), ggsq.LocalName(), err)
	}
	return nil
}

func (ggsq *GameliftGameSessionQueue) State() (*gameliftGameSessionQueueState, bool) {
	return ggsq.state, ggsq.state != nil
}

func (ggsq *GameliftGameSessionQueue) StateMust() *gameliftGameSessionQueueState {
	if ggsq.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ggsq.Type(), ggsq.LocalName()))
	}
	return ggsq.state
}

func (ggsq *GameliftGameSessionQueue) DependOn() terra.Reference {
	return terra.ReferenceResource(ggsq)
}

type GameliftGameSessionQueueArgs struct {
	// Destinations: list of string, optional
	Destinations terra.ListValue[terra.StringValue] `hcl:"destinations,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NotificationTarget: string, optional
	NotificationTarget terra.StringValue `hcl:"notification_target,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TimeoutInSeconds: number, optional
	TimeoutInSeconds terra.NumberValue `hcl:"timeout_in_seconds,attr"`
	// PlayerLatencyPolicy: min=0
	PlayerLatencyPolicy []gameliftgamesessionqueue.PlayerLatencyPolicy `hcl:"player_latency_policy,block" validate:"min=0"`
	// DependsOn contains resources that GameliftGameSessionQueue depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type gameliftGameSessionQueueAttributes struct {
	ref terra.Reference
}

func (ggsq gameliftGameSessionQueueAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ggsq.ref.Append("arn"))
}

func (ggsq gameliftGameSessionQueueAttributes) Destinations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ggsq.ref.Append("destinations"))
}

func (ggsq gameliftGameSessionQueueAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ggsq.ref.Append("id"))
}

func (ggsq gameliftGameSessionQueueAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ggsq.ref.Append("name"))
}

func (ggsq gameliftGameSessionQueueAttributes) NotificationTarget() terra.StringValue {
	return terra.ReferenceString(ggsq.ref.Append("notification_target"))
}

func (ggsq gameliftGameSessionQueueAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ggsq.ref.Append("tags"))
}

func (ggsq gameliftGameSessionQueueAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ggsq.ref.Append("tags_all"))
}

func (ggsq gameliftGameSessionQueueAttributes) TimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceNumber(ggsq.ref.Append("timeout_in_seconds"))
}

func (ggsq gameliftGameSessionQueueAttributes) PlayerLatencyPolicy() terra.ListValue[gameliftgamesessionqueue.PlayerLatencyPolicyAttributes] {
	return terra.ReferenceList[gameliftgamesessionqueue.PlayerLatencyPolicyAttributes](ggsq.ref.Append("player_latency_policy"))
}

type gameliftGameSessionQueueState struct {
	Arn                 string                                              `json:"arn"`
	Destinations        []string                                            `json:"destinations"`
	Id                  string                                              `json:"id"`
	Name                string                                              `json:"name"`
	NotificationTarget  string                                              `json:"notification_target"`
	Tags                map[string]string                                   `json:"tags"`
	TagsAll             map[string]string                                   `json:"tags_all"`
	TimeoutInSeconds    float64                                             `json:"timeout_in_seconds"`
	PlayerLatencyPolicy []gameliftgamesessionqueue.PlayerLatencyPolicyState `json:"player_latency_policy"`
}
