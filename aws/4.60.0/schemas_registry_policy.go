// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSchemasRegistryPolicy(name string, args SchemasRegistryPolicyArgs) *SchemasRegistryPolicy {
	return &SchemasRegistryPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SchemasRegistryPolicy)(nil)

type SchemasRegistryPolicy struct {
	Name  string
	Args  SchemasRegistryPolicyArgs
	state *schemasRegistryPolicyState
}

func (srp *SchemasRegistryPolicy) Type() string {
	return "aws_schemas_registry_policy"
}

func (srp *SchemasRegistryPolicy) LocalName() string {
	return srp.Name
}

func (srp *SchemasRegistryPolicy) Configuration() interface{} {
	return srp.Args
}

func (srp *SchemasRegistryPolicy) Attributes() schemasRegistryPolicyAttributes {
	return schemasRegistryPolicyAttributes{ref: terra.ReferenceResource(srp)}
}

func (srp *SchemasRegistryPolicy) ImportState(av io.Reader) error {
	srp.state = &schemasRegistryPolicyState{}
	if err := json.NewDecoder(av).Decode(srp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", srp.Type(), srp.LocalName(), err)
	}
	return nil
}

func (srp *SchemasRegistryPolicy) State() (*schemasRegistryPolicyState, bool) {
	return srp.state, srp.state != nil
}

func (srp *SchemasRegistryPolicy) StateMust() *schemasRegistryPolicyState {
	if srp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", srp.Type(), srp.LocalName()))
	}
	return srp.state
}

func (srp *SchemasRegistryPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(srp)
}

type SchemasRegistryPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// RegistryName: string, required
	RegistryName terra.StringValue `hcl:"registry_name,attr" validate:"required"`
	// DependsOn contains resources that SchemasRegistryPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type schemasRegistryPolicyAttributes struct {
	ref terra.Reference
}

func (srp schemasRegistryPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(srp.ref.Append("id"))
}

func (srp schemasRegistryPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(srp.ref.Append("policy"))
}

func (srp schemasRegistryPolicyAttributes) RegistryName() terra.StringValue {
	return terra.ReferenceString(srp.ref.Append("registry_name"))
}

type schemasRegistryPolicyState struct {
	Id           string `json:"id"`
	Policy       string `json:"policy"`
	RegistryName string `json:"registry_name"`
}
