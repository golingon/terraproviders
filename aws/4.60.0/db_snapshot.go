// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dbsnapshot "github.com/golingon/terraproviders/aws/4.60.0/dbsnapshot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDbSnapshot(name string, args DbSnapshotArgs) *DbSnapshot {
	return &DbSnapshot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DbSnapshot)(nil)

type DbSnapshot struct {
	Name  string
	Args  DbSnapshotArgs
	state *dbSnapshotState
}

func (ds *DbSnapshot) Type() string {
	return "aws_db_snapshot"
}

func (ds *DbSnapshot) LocalName() string {
	return ds.Name
}

func (ds *DbSnapshot) Configuration() interface{} {
	return ds.Args
}

func (ds *DbSnapshot) Attributes() dbSnapshotAttributes {
	return dbSnapshotAttributes{ref: terra.ReferenceResource(ds)}
}

func (ds *DbSnapshot) ImportState(av io.Reader) error {
	ds.state = &dbSnapshotState{}
	if err := json.NewDecoder(av).Decode(ds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ds.Type(), ds.LocalName(), err)
	}
	return nil
}

func (ds *DbSnapshot) State() (*dbSnapshotState, bool) {
	return ds.state, ds.state != nil
}

func (ds *DbSnapshot) StateMust() *dbSnapshotState {
	if ds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ds.Type(), ds.LocalName()))
	}
	return ds.state
}

func (ds *DbSnapshot) DependOn() terra.Reference {
	return terra.ReferenceResource(ds)
}

type DbSnapshotArgs struct {
	// DbInstanceIdentifier: string, required
	DbInstanceIdentifier terra.StringValue `hcl:"db_instance_identifier,attr" validate:"required"`
	// DbSnapshotIdentifier: string, required
	DbSnapshotIdentifier terra.StringValue `hcl:"db_snapshot_identifier,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SharedAccounts: set of string, optional
	SharedAccounts terra.SetValue[terra.StringValue] `hcl:"shared_accounts,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *dbsnapshot.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DbSnapshot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dbSnapshotAttributes struct {
	ref terra.Reference
}

func (ds dbSnapshotAttributes) AllocatedStorage() terra.NumberValue {
	return terra.ReferenceNumber(ds.ref.Append("allocated_storage"))
}

func (ds dbSnapshotAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("availability_zone"))
}

func (ds dbSnapshotAttributes) DbInstanceIdentifier() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("db_instance_identifier"))
}

func (ds dbSnapshotAttributes) DbSnapshotArn() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("db_snapshot_arn"))
}

func (ds dbSnapshotAttributes) DbSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("db_snapshot_identifier"))
}

func (ds dbSnapshotAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceBool(ds.ref.Append("encrypted"))
}

func (ds dbSnapshotAttributes) Engine() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("engine"))
}

func (ds dbSnapshotAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("engine_version"))
}

func (ds dbSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("id"))
}

func (ds dbSnapshotAttributes) Iops() terra.NumberValue {
	return terra.ReferenceNumber(ds.ref.Append("iops"))
}

func (ds dbSnapshotAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("kms_key_id"))
}

func (ds dbSnapshotAttributes) LicenseModel() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("license_model"))
}

func (ds dbSnapshotAttributes) OptionGroupName() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("option_group_name"))
}

func (ds dbSnapshotAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(ds.ref.Append("port"))
}

func (ds dbSnapshotAttributes) SharedAccounts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ds.ref.Append("shared_accounts"))
}

func (ds dbSnapshotAttributes) SnapshotType() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("snapshot_type"))
}

func (ds dbSnapshotAttributes) SourceDbSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("source_db_snapshot_identifier"))
}

func (ds dbSnapshotAttributes) SourceRegion() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("source_region"))
}

func (ds dbSnapshotAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("status"))
}

func (ds dbSnapshotAttributes) StorageType() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("storage_type"))
}

func (ds dbSnapshotAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ds.ref.Append("tags"))
}

func (ds dbSnapshotAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ds.ref.Append("tags_all"))
}

func (ds dbSnapshotAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(ds.ref.Append("vpc_id"))
}

func (ds dbSnapshotAttributes) Timeouts() dbsnapshot.TimeoutsAttributes {
	return terra.ReferenceSingle[dbsnapshot.TimeoutsAttributes](ds.ref.Append("timeouts"))
}

type dbSnapshotState struct {
	AllocatedStorage           float64                   `json:"allocated_storage"`
	AvailabilityZone           string                    `json:"availability_zone"`
	DbInstanceIdentifier       string                    `json:"db_instance_identifier"`
	DbSnapshotArn              string                    `json:"db_snapshot_arn"`
	DbSnapshotIdentifier       string                    `json:"db_snapshot_identifier"`
	Encrypted                  bool                      `json:"encrypted"`
	Engine                     string                    `json:"engine"`
	EngineVersion              string                    `json:"engine_version"`
	Id                         string                    `json:"id"`
	Iops                       float64                   `json:"iops"`
	KmsKeyId                   string                    `json:"kms_key_id"`
	LicenseModel               string                    `json:"license_model"`
	OptionGroupName            string                    `json:"option_group_name"`
	Port                       float64                   `json:"port"`
	SharedAccounts             []string                  `json:"shared_accounts"`
	SnapshotType               string                    `json:"snapshot_type"`
	SourceDbSnapshotIdentifier string                    `json:"source_db_snapshot_identifier"`
	SourceRegion               string                    `json:"source_region"`
	Status                     string                    `json:"status"`
	StorageType                string                    `json:"storage_type"`
	Tags                       map[string]string         `json:"tags"`
	TagsAll                    map[string]string         `json:"tags_all"`
	VpcId                      string                    `json:"vpc_id"`
	Timeouts                   *dbsnapshot.TimeoutsState `json:"timeouts"`
}
