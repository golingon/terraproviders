// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package lexbotalias

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ConversationLogs struct {
	// IamRoleArn: string, required
	IamRoleArn terra.StringValue `hcl:"iam_role_arn,attr" validate:"required"`
	// LogSettings: min=0
	LogSettings []LogSettings `hcl:"log_settings,block" validate:"min=0"`
}

type LogSettings struct {
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// LogType: string, required
	LogType terra.StringValue `hcl:"log_type,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type ConversationLogsAttributes struct {
	ref terra.Reference
}

func (cl ConversationLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl ConversationLogsAttributes) InternalWithRef(ref terra.Reference) ConversationLogsAttributes {
	return ConversationLogsAttributes{ref: ref}
}

func (cl ConversationLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl ConversationLogsAttributes) IamRoleArn() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("iam_role_arn"))
}

func (cl ConversationLogsAttributes) LogSettings() terra.SetValue[LogSettingsAttributes] {
	return terra.ReferenceAsSet[LogSettingsAttributes](cl.ref.Append("log_settings"))
}

type LogSettingsAttributes struct {
	ref terra.Reference
}

func (ls LogSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ls.ref, nil
}

func (ls LogSettingsAttributes) InternalWithRef(ref terra.Reference) LogSettingsAttributes {
	return LogSettingsAttributes{ref: ref}
}

func (ls LogSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ls.ref.InternalTokens()
}

func (ls LogSettingsAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("destination"))
}

func (ls LogSettingsAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("kms_key_arn"))
}

func (ls LogSettingsAttributes) LogType() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("log_type"))
}

func (ls LogSettingsAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("resource_arn"))
}

func (ls LogSettingsAttributes) ResourcePrefix() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("resource_prefix"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConversationLogsState struct {
	IamRoleArn  string             `json:"iam_role_arn"`
	LogSettings []LogSettingsState `json:"log_settings"`
}

type LogSettingsState struct {
	Destination    string `json:"destination"`
	KmsKeyArn      string `json:"kms_key_arn"`
	LogType        string `json:"log_type"`
	ResourceArn    string `json:"resource_arn"`
	ResourcePrefix string `json:"resource_prefix"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
