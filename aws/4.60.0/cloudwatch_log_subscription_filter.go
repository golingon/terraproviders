// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudwatchLogSubscriptionFilter(name string, args CloudwatchLogSubscriptionFilterArgs) *CloudwatchLogSubscriptionFilter {
	return &CloudwatchLogSubscriptionFilter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudwatchLogSubscriptionFilter)(nil)

type CloudwatchLogSubscriptionFilter struct {
	Name  string
	Args  CloudwatchLogSubscriptionFilterArgs
	state *cloudwatchLogSubscriptionFilterState
}

func (clsf *CloudwatchLogSubscriptionFilter) Type() string {
	return "aws_cloudwatch_log_subscription_filter"
}

func (clsf *CloudwatchLogSubscriptionFilter) LocalName() string {
	return clsf.Name
}

func (clsf *CloudwatchLogSubscriptionFilter) Configuration() interface{} {
	return clsf.Args
}

func (clsf *CloudwatchLogSubscriptionFilter) Attributes() cloudwatchLogSubscriptionFilterAttributes {
	return cloudwatchLogSubscriptionFilterAttributes{ref: terra.ReferenceResource(clsf)}
}

func (clsf *CloudwatchLogSubscriptionFilter) ImportState(av io.Reader) error {
	clsf.state = &cloudwatchLogSubscriptionFilterState{}
	if err := json.NewDecoder(av).Decode(clsf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", clsf.Type(), clsf.LocalName(), err)
	}
	return nil
}

func (clsf *CloudwatchLogSubscriptionFilter) State() (*cloudwatchLogSubscriptionFilterState, bool) {
	return clsf.state, clsf.state != nil
}

func (clsf *CloudwatchLogSubscriptionFilter) StateMust() *cloudwatchLogSubscriptionFilterState {
	if clsf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", clsf.Type(), clsf.LocalName()))
	}
	return clsf.state
}

func (clsf *CloudwatchLogSubscriptionFilter) DependOn() terra.Reference {
	return terra.ReferenceResource(clsf)
}

type CloudwatchLogSubscriptionFilterArgs struct {
	// DestinationArn: string, required
	DestinationArn terra.StringValue `hcl:"destination_arn,attr" validate:"required"`
	// Distribution: string, optional
	Distribution terra.StringValue `hcl:"distribution,attr"`
	// FilterPattern: string, required
	FilterPattern terra.StringValue `hcl:"filter_pattern,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogGroupName: string, required
	LogGroupName terra.StringValue `hcl:"log_group_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// DependsOn contains resources that CloudwatchLogSubscriptionFilter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudwatchLogSubscriptionFilterAttributes struct {
	ref terra.Reference
}

func (clsf cloudwatchLogSubscriptionFilterAttributes) DestinationArn() terra.StringValue {
	return terra.ReferenceString(clsf.ref.Append("destination_arn"))
}

func (clsf cloudwatchLogSubscriptionFilterAttributes) Distribution() terra.StringValue {
	return terra.ReferenceString(clsf.ref.Append("distribution"))
}

func (clsf cloudwatchLogSubscriptionFilterAttributes) FilterPattern() terra.StringValue {
	return terra.ReferenceString(clsf.ref.Append("filter_pattern"))
}

func (clsf cloudwatchLogSubscriptionFilterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(clsf.ref.Append("id"))
}

func (clsf cloudwatchLogSubscriptionFilterAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceString(clsf.ref.Append("log_group_name"))
}

func (clsf cloudwatchLogSubscriptionFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(clsf.ref.Append("name"))
}

func (clsf cloudwatchLogSubscriptionFilterAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(clsf.ref.Append("role_arn"))
}

type cloudwatchLogSubscriptionFilterState struct {
	DestinationArn string `json:"destination_arn"`
	Distribution   string `json:"distribution"`
	FilterPattern  string `json:"filter_pattern"`
	Id             string `json:"id"`
	LogGroupName   string `json:"log_group_name"`
	Name           string `json:"name"`
	RoleArn        string `json:"role_arn"`
}
