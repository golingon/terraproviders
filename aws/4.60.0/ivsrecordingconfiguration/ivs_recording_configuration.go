// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package ivsrecordingconfiguration

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type DestinationConfiguration struct {
	// S3: required
	S3 *S3 `hcl:"s3,block" validate:"required"`
}

type S3 struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
}

type ThumbnailConfiguration struct {
	// RecordingMode: string, optional
	RecordingMode terra.StringValue `hcl:"recording_mode,attr"`
	// TargetIntervalSeconds: number, optional
	TargetIntervalSeconds terra.NumberValue `hcl:"target_interval_seconds,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type DestinationConfigurationAttributes struct {
	ref terra.Reference
}

func (dc DestinationConfigurationAttributes) InternalRef() terra.Reference {
	return dc.ref
}

func (dc DestinationConfigurationAttributes) InternalWithRef(ref terra.Reference) DestinationConfigurationAttributes {
	return DestinationConfigurationAttributes{ref: ref}
}

func (dc DestinationConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return dc.ref.InternalTokens()
}

func (dc DestinationConfigurationAttributes) S3() terra.ListValue[S3Attributes] {
	return terra.ReferenceAsList[S3Attributes](dc.ref.Append("s3"))
}

type S3Attributes struct {
	ref terra.Reference
}

func (s S3Attributes) InternalRef() terra.Reference {
	return s.ref
}

func (s S3Attributes) InternalWithRef(ref terra.Reference) S3Attributes {
	return S3Attributes{ref: ref}
}

func (s S3Attributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s S3Attributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_name"))
}

type ThumbnailConfigurationAttributes struct {
	ref terra.Reference
}

func (tc ThumbnailConfigurationAttributes) InternalRef() terra.Reference {
	return tc.ref
}

func (tc ThumbnailConfigurationAttributes) InternalWithRef(ref terra.Reference) ThumbnailConfigurationAttributes {
	return ThumbnailConfigurationAttributes{ref: ref}
}

func (tc ThumbnailConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return tc.ref.InternalTokens()
}

func (tc ThumbnailConfigurationAttributes) RecordingMode() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("recording_mode"))
}

func (tc ThumbnailConfigurationAttributes) TargetIntervalSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(tc.ref.Append("target_interval_seconds"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type DestinationConfigurationState struct {
	S3 []S3State `json:"s3"`
}

type S3State struct {
	BucketName string `json:"bucket_name"`
}

type ThumbnailConfigurationState struct {
	RecordingMode         string  `json:"recording_mode"`
	TargetIntervalSeconds float64 `json:"target_interval_seconds"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
