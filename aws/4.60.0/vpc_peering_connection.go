// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	vpcpeeringconnection "github.com/golingon/terraproviders/aws/4.60.0/vpcpeeringconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVpcPeeringConnection(name string, args VpcPeeringConnectionArgs) *VpcPeeringConnection {
	return &VpcPeeringConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpcPeeringConnection)(nil)

type VpcPeeringConnection struct {
	Name  string
	Args  VpcPeeringConnectionArgs
	state *vpcPeeringConnectionState
}

func (vpc *VpcPeeringConnection) Type() string {
	return "aws_vpc_peering_connection"
}

func (vpc *VpcPeeringConnection) LocalName() string {
	return vpc.Name
}

func (vpc *VpcPeeringConnection) Configuration() interface{} {
	return vpc.Args
}

func (vpc *VpcPeeringConnection) Attributes() vpcPeeringConnectionAttributes {
	return vpcPeeringConnectionAttributes{ref: terra.ReferenceResource(vpc)}
}

func (vpc *VpcPeeringConnection) ImportState(av io.Reader) error {
	vpc.state = &vpcPeeringConnectionState{}
	if err := json.NewDecoder(av).Decode(vpc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vpc.Type(), vpc.LocalName(), err)
	}
	return nil
}

func (vpc *VpcPeeringConnection) State() (*vpcPeeringConnectionState, bool) {
	return vpc.state, vpc.state != nil
}

func (vpc *VpcPeeringConnection) StateMust() *vpcPeeringConnectionState {
	if vpc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vpc.Type(), vpc.LocalName()))
	}
	return vpc.state
}

func (vpc *VpcPeeringConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(vpc)
}

type VpcPeeringConnectionArgs struct {
	// AutoAccept: bool, optional
	AutoAccept terra.BoolValue `hcl:"auto_accept,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PeerOwnerId: string, optional
	PeerOwnerId terra.StringValue `hcl:"peer_owner_id,attr"`
	// PeerRegion: string, optional
	PeerRegion terra.StringValue `hcl:"peer_region,attr"`
	// PeerVpcId: string, required
	PeerVpcId terra.StringValue `hcl:"peer_vpc_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// Accepter: optional
	Accepter *vpcpeeringconnection.Accepter `hcl:"accepter,block"`
	// Requester: optional
	Requester *vpcpeeringconnection.Requester `hcl:"requester,block"`
	// Timeouts: optional
	Timeouts *vpcpeeringconnection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VpcPeeringConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vpcPeeringConnectionAttributes struct {
	ref terra.Reference
}

func (vpc vpcPeeringConnectionAttributes) AcceptStatus() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("accept_status"))
}

func (vpc vpcPeeringConnectionAttributes) AutoAccept() terra.BoolValue {
	return terra.ReferenceBool(vpc.ref.Append("auto_accept"))
}

func (vpc vpcPeeringConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("id"))
}

func (vpc vpcPeeringConnectionAttributes) PeerOwnerId() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("peer_owner_id"))
}

func (vpc vpcPeeringConnectionAttributes) PeerRegion() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("peer_region"))
}

func (vpc vpcPeeringConnectionAttributes) PeerVpcId() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("peer_vpc_id"))
}

func (vpc vpcPeeringConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vpc.ref.Append("tags"))
}

func (vpc vpcPeeringConnectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vpc.ref.Append("tags_all"))
}

func (vpc vpcPeeringConnectionAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("vpc_id"))
}

func (vpc vpcPeeringConnectionAttributes) Accepter() terra.ListValue[vpcpeeringconnection.AccepterAttributes] {
	return terra.ReferenceList[vpcpeeringconnection.AccepterAttributes](vpc.ref.Append("accepter"))
}

func (vpc vpcPeeringConnectionAttributes) Requester() terra.ListValue[vpcpeeringconnection.RequesterAttributes] {
	return terra.ReferenceList[vpcpeeringconnection.RequesterAttributes](vpc.ref.Append("requester"))
}

func (vpc vpcPeeringConnectionAttributes) Timeouts() vpcpeeringconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[vpcpeeringconnection.TimeoutsAttributes](vpc.ref.Append("timeouts"))
}

type vpcPeeringConnectionState struct {
	AcceptStatus string                                `json:"accept_status"`
	AutoAccept   bool                                  `json:"auto_accept"`
	Id           string                                `json:"id"`
	PeerOwnerId  string                                `json:"peer_owner_id"`
	PeerRegion   string                                `json:"peer_region"`
	PeerVpcId    string                                `json:"peer_vpc_id"`
	Tags         map[string]string                     `json:"tags"`
	TagsAll      map[string]string                     `json:"tags_all"`
	VpcId        string                                `json:"vpc_id"`
	Accepter     []vpcpeeringconnection.AccepterState  `json:"accepter"`
	Requester    []vpcpeeringconnection.RequesterState `json:"requester"`
	Timeouts     *vpcpeeringconnection.TimeoutsState   `json:"timeouts"`
}
