// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3bucketnotification "github.com/golingon/terraproviders/aws/4.60.0/s3bucketnotification"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketNotification(name string, args S3BucketNotificationArgs) *S3BucketNotification {
	return &S3BucketNotification{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketNotification)(nil)

type S3BucketNotification struct {
	Name  string
	Args  S3BucketNotificationArgs
	state *s3BucketNotificationState
}

func (sbn *S3BucketNotification) Type() string {
	return "aws_s3_bucket_notification"
}

func (sbn *S3BucketNotification) LocalName() string {
	return sbn.Name
}

func (sbn *S3BucketNotification) Configuration() interface{} {
	return sbn.Args
}

func (sbn *S3BucketNotification) Attributes() s3BucketNotificationAttributes {
	return s3BucketNotificationAttributes{ref: terra.ReferenceResource(sbn)}
}

func (sbn *S3BucketNotification) ImportState(av io.Reader) error {
	sbn.state = &s3BucketNotificationState{}
	if err := json.NewDecoder(av).Decode(sbn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbn.Type(), sbn.LocalName(), err)
	}
	return nil
}

func (sbn *S3BucketNotification) State() (*s3BucketNotificationState, bool) {
	return sbn.state, sbn.state != nil
}

func (sbn *S3BucketNotification) StateMust() *s3BucketNotificationState {
	if sbn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbn.Type(), sbn.LocalName()))
	}
	return sbn.state
}

func (sbn *S3BucketNotification) DependOn() terra.Reference {
	return terra.ReferenceResource(sbn)
}

type S3BucketNotificationArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Eventbridge: bool, optional
	Eventbridge terra.BoolValue `hcl:"eventbridge,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LambdaFunction: min=0
	LambdaFunction []s3bucketnotification.LambdaFunction `hcl:"lambda_function,block" validate:"min=0"`
	// Queue: min=0
	Queue []s3bucketnotification.Queue `hcl:"queue,block" validate:"min=0"`
	// Topic: min=0
	Topic []s3bucketnotification.Topic `hcl:"topic,block" validate:"min=0"`
	// DependsOn contains resources that S3BucketNotification depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketNotificationAttributes struct {
	ref terra.Reference
}

func (sbn s3BucketNotificationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbn.ref.Append("bucket"))
}

func (sbn s3BucketNotificationAttributes) Eventbridge() terra.BoolValue {
	return terra.ReferenceBool(sbn.ref.Append("eventbridge"))
}

func (sbn s3BucketNotificationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbn.ref.Append("id"))
}

func (sbn s3BucketNotificationAttributes) LambdaFunction() terra.ListValue[s3bucketnotification.LambdaFunctionAttributes] {
	return terra.ReferenceList[s3bucketnotification.LambdaFunctionAttributes](sbn.ref.Append("lambda_function"))
}

func (sbn s3BucketNotificationAttributes) Queue() terra.ListValue[s3bucketnotification.QueueAttributes] {
	return terra.ReferenceList[s3bucketnotification.QueueAttributes](sbn.ref.Append("queue"))
}

func (sbn s3BucketNotificationAttributes) Topic() terra.ListValue[s3bucketnotification.TopicAttributes] {
	return terra.ReferenceList[s3bucketnotification.TopicAttributes](sbn.ref.Append("topic"))
}

type s3BucketNotificationState struct {
	Bucket         string                                     `json:"bucket"`
	Eventbridge    bool                                       `json:"eventbridge"`
	Id             string                                     `json:"id"`
	LambdaFunction []s3bucketnotification.LambdaFunctionState `json:"lambda_function"`
	Queue          []s3bucketnotification.QueueState          `json:"queue"`
	Topic          []s3bucketnotification.TopicState          `json:"topic"`
}
