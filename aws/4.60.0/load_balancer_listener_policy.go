// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLoadBalancerListenerPolicy(name string, args LoadBalancerListenerPolicyArgs) *LoadBalancerListenerPolicy {
	return &LoadBalancerListenerPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LoadBalancerListenerPolicy)(nil)

type LoadBalancerListenerPolicy struct {
	Name  string
	Args  LoadBalancerListenerPolicyArgs
	state *loadBalancerListenerPolicyState
}

func (lblp *LoadBalancerListenerPolicy) Type() string {
	return "aws_load_balancer_listener_policy"
}

func (lblp *LoadBalancerListenerPolicy) LocalName() string {
	return lblp.Name
}

func (lblp *LoadBalancerListenerPolicy) Configuration() interface{} {
	return lblp.Args
}

func (lblp *LoadBalancerListenerPolicy) Attributes() loadBalancerListenerPolicyAttributes {
	return loadBalancerListenerPolicyAttributes{ref: terra.ReferenceResource(lblp)}
}

func (lblp *LoadBalancerListenerPolicy) ImportState(av io.Reader) error {
	lblp.state = &loadBalancerListenerPolicyState{}
	if err := json.NewDecoder(av).Decode(lblp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lblp.Type(), lblp.LocalName(), err)
	}
	return nil
}

func (lblp *LoadBalancerListenerPolicy) State() (*loadBalancerListenerPolicyState, bool) {
	return lblp.state, lblp.state != nil
}

func (lblp *LoadBalancerListenerPolicy) StateMust() *loadBalancerListenerPolicyState {
	if lblp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lblp.Type(), lblp.LocalName()))
	}
	return lblp.state
}

func (lblp *LoadBalancerListenerPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(lblp)
}

type LoadBalancerListenerPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoadBalancerName: string, required
	LoadBalancerName terra.StringValue `hcl:"load_balancer_name,attr" validate:"required"`
	// LoadBalancerPort: number, required
	LoadBalancerPort terra.NumberValue `hcl:"load_balancer_port,attr" validate:"required"`
	// PolicyNames: set of string, optional
	PolicyNames terra.SetValue[terra.StringValue] `hcl:"policy_names,attr"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
	// DependsOn contains resources that LoadBalancerListenerPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type loadBalancerListenerPolicyAttributes struct {
	ref terra.Reference
}

func (lblp loadBalancerListenerPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lblp.ref.Append("id"))
}

func (lblp loadBalancerListenerPolicyAttributes) LoadBalancerName() terra.StringValue {
	return terra.ReferenceString(lblp.ref.Append("load_balancer_name"))
}

func (lblp loadBalancerListenerPolicyAttributes) LoadBalancerPort() terra.NumberValue {
	return terra.ReferenceNumber(lblp.ref.Append("load_balancer_port"))
}

func (lblp loadBalancerListenerPolicyAttributes) PolicyNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](lblp.ref.Append("policy_names"))
}

func (lblp loadBalancerListenerPolicyAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lblp.ref.Append("triggers"))
}

type loadBalancerListenerPolicyState struct {
	Id               string            `json:"id"`
	LoadBalancerName string            `json:"load_balancer_name"`
	LoadBalancerPort float64           `json:"load_balancer_port"`
	PolicyNames      []string          `json:"policy_names"`
	Triggers         map[string]string `json:"triggers"`
}
