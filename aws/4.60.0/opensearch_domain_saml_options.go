// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	opensearchdomainsamloptions "github.com/golingon/terraproviders/aws/4.60.0/opensearchdomainsamloptions"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOpensearchDomainSamlOptions(name string, args OpensearchDomainSamlOptionsArgs) *OpensearchDomainSamlOptions {
	return &OpensearchDomainSamlOptions{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OpensearchDomainSamlOptions)(nil)

type OpensearchDomainSamlOptions struct {
	Name  string
	Args  OpensearchDomainSamlOptionsArgs
	state *opensearchDomainSamlOptionsState
}

func (odso *OpensearchDomainSamlOptions) Type() string {
	return "aws_opensearch_domain_saml_options"
}

func (odso *OpensearchDomainSamlOptions) LocalName() string {
	return odso.Name
}

func (odso *OpensearchDomainSamlOptions) Configuration() interface{} {
	return odso.Args
}

func (odso *OpensearchDomainSamlOptions) Attributes() opensearchDomainSamlOptionsAttributes {
	return opensearchDomainSamlOptionsAttributes{ref: terra.ReferenceResource(odso)}
}

func (odso *OpensearchDomainSamlOptions) ImportState(av io.Reader) error {
	odso.state = &opensearchDomainSamlOptionsState{}
	if err := json.NewDecoder(av).Decode(odso.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", odso.Type(), odso.LocalName(), err)
	}
	return nil
}

func (odso *OpensearchDomainSamlOptions) State() (*opensearchDomainSamlOptionsState, bool) {
	return odso.state, odso.state != nil
}

func (odso *OpensearchDomainSamlOptions) StateMust() *opensearchDomainSamlOptionsState {
	if odso.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", odso.Type(), odso.LocalName()))
	}
	return odso.state
}

func (odso *OpensearchDomainSamlOptions) DependOn() terra.Reference {
	return terra.ReferenceResource(odso)
}

type OpensearchDomainSamlOptionsArgs struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SamlOptions: optional
	SamlOptions *opensearchdomainsamloptions.SamlOptions `hcl:"saml_options,block"`
	// Timeouts: optional
	Timeouts *opensearchdomainsamloptions.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that OpensearchDomainSamlOptions depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type opensearchDomainSamlOptionsAttributes struct {
	ref terra.Reference
}

func (odso opensearchDomainSamlOptionsAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(odso.ref.Append("domain_name"))
}

func (odso opensearchDomainSamlOptionsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(odso.ref.Append("id"))
}

func (odso opensearchDomainSamlOptionsAttributes) SamlOptions() terra.ListValue[opensearchdomainsamloptions.SamlOptionsAttributes] {
	return terra.ReferenceList[opensearchdomainsamloptions.SamlOptionsAttributes](odso.ref.Append("saml_options"))
}

func (odso opensearchDomainSamlOptionsAttributes) Timeouts() opensearchdomainsamloptions.TimeoutsAttributes {
	return terra.ReferenceSingle[opensearchdomainsamloptions.TimeoutsAttributes](odso.ref.Append("timeouts"))
}

type opensearchDomainSamlOptionsState struct {
	DomainName  string                                         `json:"domain_name"`
	Id          string                                         `json:"id"`
	SamlOptions []opensearchdomainsamloptions.SamlOptionsState `json:"saml_options"`
	Timeouts    *opensearchdomainsamloptions.TimeoutsState     `json:"timeouts"`
}
