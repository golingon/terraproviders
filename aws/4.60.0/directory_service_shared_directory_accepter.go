// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	directoryserviceshareddirectoryaccepter "github.com/golingon/terraproviders/aws/4.60.0/directoryserviceshareddirectoryaccepter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDirectoryServiceSharedDirectoryAccepter(name string, args DirectoryServiceSharedDirectoryAccepterArgs) *DirectoryServiceSharedDirectoryAccepter {
	return &DirectoryServiceSharedDirectoryAccepter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DirectoryServiceSharedDirectoryAccepter)(nil)

type DirectoryServiceSharedDirectoryAccepter struct {
	Name  string
	Args  DirectoryServiceSharedDirectoryAccepterArgs
	state *directoryServiceSharedDirectoryAccepterState
}

func (dssda *DirectoryServiceSharedDirectoryAccepter) Type() string {
	return "aws_directory_service_shared_directory_accepter"
}

func (dssda *DirectoryServiceSharedDirectoryAccepter) LocalName() string {
	return dssda.Name
}

func (dssda *DirectoryServiceSharedDirectoryAccepter) Configuration() interface{} {
	return dssda.Args
}

func (dssda *DirectoryServiceSharedDirectoryAccepter) Attributes() directoryServiceSharedDirectoryAccepterAttributes {
	return directoryServiceSharedDirectoryAccepterAttributes{ref: terra.ReferenceResource(dssda)}
}

func (dssda *DirectoryServiceSharedDirectoryAccepter) ImportState(av io.Reader) error {
	dssda.state = &directoryServiceSharedDirectoryAccepterState{}
	if err := json.NewDecoder(av).Decode(dssda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dssda.Type(), dssda.LocalName(), err)
	}
	return nil
}

func (dssda *DirectoryServiceSharedDirectoryAccepter) State() (*directoryServiceSharedDirectoryAccepterState, bool) {
	return dssda.state, dssda.state != nil
}

func (dssda *DirectoryServiceSharedDirectoryAccepter) StateMust() *directoryServiceSharedDirectoryAccepterState {
	if dssda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dssda.Type(), dssda.LocalName()))
	}
	return dssda.state
}

func (dssda *DirectoryServiceSharedDirectoryAccepter) DependOn() terra.Reference {
	return terra.ReferenceResource(dssda)
}

type DirectoryServiceSharedDirectoryAccepterArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SharedDirectoryId: string, required
	SharedDirectoryId terra.StringValue `hcl:"shared_directory_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *directoryserviceshareddirectoryaccepter.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DirectoryServiceSharedDirectoryAccepter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type directoryServiceSharedDirectoryAccepterAttributes struct {
	ref terra.Reference
}

func (dssda directoryServiceSharedDirectoryAccepterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dssda.ref.Append("id"))
}

func (dssda directoryServiceSharedDirectoryAccepterAttributes) Method() terra.StringValue {
	return terra.ReferenceString(dssda.ref.Append("method"))
}

func (dssda directoryServiceSharedDirectoryAccepterAttributes) Notes() terra.StringValue {
	return terra.ReferenceString(dssda.ref.Append("notes"))
}

func (dssda directoryServiceSharedDirectoryAccepterAttributes) OwnerAccountId() terra.StringValue {
	return terra.ReferenceString(dssda.ref.Append("owner_account_id"))
}

func (dssda directoryServiceSharedDirectoryAccepterAttributes) OwnerDirectoryId() terra.StringValue {
	return terra.ReferenceString(dssda.ref.Append("owner_directory_id"))
}

func (dssda directoryServiceSharedDirectoryAccepterAttributes) SharedDirectoryId() terra.StringValue {
	return terra.ReferenceString(dssda.ref.Append("shared_directory_id"))
}

func (dssda directoryServiceSharedDirectoryAccepterAttributes) Timeouts() directoryserviceshareddirectoryaccepter.TimeoutsAttributes {
	return terra.ReferenceSingle[directoryserviceshareddirectoryaccepter.TimeoutsAttributes](dssda.ref.Append("timeouts"))
}

type directoryServiceSharedDirectoryAccepterState struct {
	Id                string                                                 `json:"id"`
	Method            string                                                 `json:"method"`
	Notes             string                                                 `json:"notes"`
	OwnerAccountId    string                                                 `json:"owner_account_id"`
	OwnerDirectoryId  string                                                 `json:"owner_directory_id"`
	SharedDirectoryId string                                                 `json:"shared_directory_id"`
	Timeouts          *directoryserviceshareddirectoryaccepter.TimeoutsState `json:"timeouts"`
}
