// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudwatchQueryDefinition(name string, args CloudwatchQueryDefinitionArgs) *CloudwatchQueryDefinition {
	return &CloudwatchQueryDefinition{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudwatchQueryDefinition)(nil)

type CloudwatchQueryDefinition struct {
	Name  string
	Args  CloudwatchQueryDefinitionArgs
	state *cloudwatchQueryDefinitionState
}

func (cqd *CloudwatchQueryDefinition) Type() string {
	return "aws_cloudwatch_query_definition"
}

func (cqd *CloudwatchQueryDefinition) LocalName() string {
	return cqd.Name
}

func (cqd *CloudwatchQueryDefinition) Configuration() interface{} {
	return cqd.Args
}

func (cqd *CloudwatchQueryDefinition) Attributes() cloudwatchQueryDefinitionAttributes {
	return cloudwatchQueryDefinitionAttributes{ref: terra.ReferenceResource(cqd)}
}

func (cqd *CloudwatchQueryDefinition) ImportState(av io.Reader) error {
	cqd.state = &cloudwatchQueryDefinitionState{}
	if err := json.NewDecoder(av).Decode(cqd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cqd.Type(), cqd.LocalName(), err)
	}
	return nil
}

func (cqd *CloudwatchQueryDefinition) State() (*cloudwatchQueryDefinitionState, bool) {
	return cqd.state, cqd.state != nil
}

func (cqd *CloudwatchQueryDefinition) StateMust() *cloudwatchQueryDefinitionState {
	if cqd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cqd.Type(), cqd.LocalName()))
	}
	return cqd.state
}

func (cqd *CloudwatchQueryDefinition) DependOn() terra.Reference {
	return terra.ReferenceResource(cqd)
}

type CloudwatchQueryDefinitionArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LogGroupNames: list of string, optional
	LogGroupNames terra.ListValue[terra.StringValue] `hcl:"log_group_names,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// QueryString: string, required
	QueryString terra.StringValue `hcl:"query_string,attr" validate:"required"`
	// DependsOn contains resources that CloudwatchQueryDefinition depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudwatchQueryDefinitionAttributes struct {
	ref terra.Reference
}

func (cqd cloudwatchQueryDefinitionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cqd.ref.Append("id"))
}

func (cqd cloudwatchQueryDefinitionAttributes) LogGroupNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cqd.ref.Append("log_group_names"))
}

func (cqd cloudwatchQueryDefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cqd.ref.Append("name"))
}

func (cqd cloudwatchQueryDefinitionAttributes) QueryDefinitionId() terra.StringValue {
	return terra.ReferenceString(cqd.ref.Append("query_definition_id"))
}

func (cqd cloudwatchQueryDefinitionAttributes) QueryString() terra.StringValue {
	return terra.ReferenceString(cqd.ref.Append("query_string"))
}

type cloudwatchQueryDefinitionState struct {
	Id                string   `json:"id"`
	LogGroupNames     []string `json:"log_group_names"`
	Name              string   `json:"name"`
	QueryDefinitionId string   `json:"query_definition_id"`
	QueryString       string   `json:"query_string"`
}
