// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	datasyncagent "github.com/golingon/terraproviders/aws/4.60.0/datasyncagent"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatasyncAgent(name string, args DatasyncAgentArgs) *DatasyncAgent {
	return &DatasyncAgent{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatasyncAgent)(nil)

type DatasyncAgent struct {
	Name  string
	Args  DatasyncAgentArgs
	state *datasyncAgentState
}

func (da *DatasyncAgent) Type() string {
	return "aws_datasync_agent"
}

func (da *DatasyncAgent) LocalName() string {
	return da.Name
}

func (da *DatasyncAgent) Configuration() interface{} {
	return da.Args
}

func (da *DatasyncAgent) Attributes() datasyncAgentAttributes {
	return datasyncAgentAttributes{ref: terra.ReferenceResource(da)}
}

func (da *DatasyncAgent) ImportState(av io.Reader) error {
	da.state = &datasyncAgentState{}
	if err := json.NewDecoder(av).Decode(da.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", da.Type(), da.LocalName(), err)
	}
	return nil
}

func (da *DatasyncAgent) State() (*datasyncAgentState, bool) {
	return da.state, da.state != nil
}

func (da *DatasyncAgent) StateMust() *datasyncAgentState {
	if da.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", da.Type(), da.LocalName()))
	}
	return da.state
}

func (da *DatasyncAgent) DependOn() terra.Reference {
	return terra.ReferenceResource(da)
}

type DatasyncAgentArgs struct {
	// ActivationKey: string, optional
	ActivationKey terra.StringValue `hcl:"activation_key,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// PrivateLinkEndpoint: string, optional
	PrivateLinkEndpoint terra.StringValue `hcl:"private_link_endpoint,attr"`
	// SecurityGroupArns: set of string, optional
	SecurityGroupArns terra.SetValue[terra.StringValue] `hcl:"security_group_arns,attr"`
	// SubnetArns: set of string, optional
	SubnetArns terra.SetValue[terra.StringValue] `hcl:"subnet_arns,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcEndpointId: string, optional
	VpcEndpointId terra.StringValue `hcl:"vpc_endpoint_id,attr"`
	// Timeouts: optional
	Timeouts *datasyncagent.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DatasyncAgent depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type datasyncAgentAttributes struct {
	ref terra.Reference
}

func (da datasyncAgentAttributes) ActivationKey() terra.StringValue {
	return terra.ReferenceString(da.ref.Append("activation_key"))
}

func (da datasyncAgentAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(da.ref.Append("arn"))
}

func (da datasyncAgentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(da.ref.Append("id"))
}

func (da datasyncAgentAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceString(da.ref.Append("ip_address"))
}

func (da datasyncAgentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(da.ref.Append("name"))
}

func (da datasyncAgentAttributes) PrivateLinkEndpoint() terra.StringValue {
	return terra.ReferenceString(da.ref.Append("private_link_endpoint"))
}

func (da datasyncAgentAttributes) SecurityGroupArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](da.ref.Append("security_group_arns"))
}

func (da datasyncAgentAttributes) SubnetArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](da.ref.Append("subnet_arns"))
}

func (da datasyncAgentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](da.ref.Append("tags"))
}

func (da datasyncAgentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](da.ref.Append("tags_all"))
}

func (da datasyncAgentAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceString(da.ref.Append("vpc_endpoint_id"))
}

func (da datasyncAgentAttributes) Timeouts() datasyncagent.TimeoutsAttributes {
	return terra.ReferenceSingle[datasyncagent.TimeoutsAttributes](da.ref.Append("timeouts"))
}

type datasyncAgentState struct {
	ActivationKey       string                       `json:"activation_key"`
	Arn                 string                       `json:"arn"`
	Id                  string                       `json:"id"`
	IpAddress           string                       `json:"ip_address"`
	Name                string                       `json:"name"`
	PrivateLinkEndpoint string                       `json:"private_link_endpoint"`
	SecurityGroupArns   []string                     `json:"security_group_arns"`
	SubnetArns          []string                     `json:"subnet_arns"`
	Tags                map[string]string            `json:"tags"`
	TagsAll             map[string]string            `json:"tags_all"`
	VpcEndpointId       string                       `json:"vpc_endpoint_id"`
	Timeouts            *datasyncagent.TimeoutsState `json:"timeouts"`
}
