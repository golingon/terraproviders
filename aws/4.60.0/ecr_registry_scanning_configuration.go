// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ecrregistryscanningconfiguration "github.com/golingon/terraproviders/aws/4.60.0/ecrregistryscanningconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEcrRegistryScanningConfiguration(name string, args EcrRegistryScanningConfigurationArgs) *EcrRegistryScanningConfiguration {
	return &EcrRegistryScanningConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EcrRegistryScanningConfiguration)(nil)

type EcrRegistryScanningConfiguration struct {
	Name  string
	Args  EcrRegistryScanningConfigurationArgs
	state *ecrRegistryScanningConfigurationState
}

func (ersc *EcrRegistryScanningConfiguration) Type() string {
	return "aws_ecr_registry_scanning_configuration"
}

func (ersc *EcrRegistryScanningConfiguration) LocalName() string {
	return ersc.Name
}

func (ersc *EcrRegistryScanningConfiguration) Configuration() interface{} {
	return ersc.Args
}

func (ersc *EcrRegistryScanningConfiguration) Attributes() ecrRegistryScanningConfigurationAttributes {
	return ecrRegistryScanningConfigurationAttributes{ref: terra.ReferenceResource(ersc)}
}

func (ersc *EcrRegistryScanningConfiguration) ImportState(av io.Reader) error {
	ersc.state = &ecrRegistryScanningConfigurationState{}
	if err := json.NewDecoder(av).Decode(ersc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ersc.Type(), ersc.LocalName(), err)
	}
	return nil
}

func (ersc *EcrRegistryScanningConfiguration) State() (*ecrRegistryScanningConfigurationState, bool) {
	return ersc.state, ersc.state != nil
}

func (ersc *EcrRegistryScanningConfiguration) StateMust() *ecrRegistryScanningConfigurationState {
	if ersc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ersc.Type(), ersc.LocalName()))
	}
	return ersc.state
}

func (ersc *EcrRegistryScanningConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(ersc)
}

type EcrRegistryScanningConfigurationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ScanType: string, required
	ScanType terra.StringValue `hcl:"scan_type,attr" validate:"required"`
	// Rule: min=0,max=100
	Rule []ecrregistryscanningconfiguration.Rule `hcl:"rule,block" validate:"min=0,max=100"`
	// DependsOn contains resources that EcrRegistryScanningConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ecrRegistryScanningConfigurationAttributes struct {
	ref terra.Reference
}

func (ersc ecrRegistryScanningConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ersc.ref.Append("id"))
}

func (ersc ecrRegistryScanningConfigurationAttributes) RegistryId() terra.StringValue {
	return terra.ReferenceString(ersc.ref.Append("registry_id"))
}

func (ersc ecrRegistryScanningConfigurationAttributes) ScanType() terra.StringValue {
	return terra.ReferenceString(ersc.ref.Append("scan_type"))
}

func (ersc ecrRegistryScanningConfigurationAttributes) Rule() terra.SetValue[ecrregistryscanningconfiguration.RuleAttributes] {
	return terra.ReferenceSet[ecrregistryscanningconfiguration.RuleAttributes](ersc.ref.Append("rule"))
}

type ecrRegistryScanningConfigurationState struct {
	Id         string                                       `json:"id"`
	RegistryId string                                       `json:"registry_id"`
	ScanType   string                                       `json:"scan_type"`
	Rule       []ecrregistryscanningconfiguration.RuleState `json:"rule"`
}
