// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	gluemltransform "github.com/golingon/terraproviders/aws/4.60.0/gluemltransform"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGlueMlTransform(name string, args GlueMlTransformArgs) *GlueMlTransform {
	return &GlueMlTransform{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GlueMlTransform)(nil)

type GlueMlTransform struct {
	Name  string
	Args  GlueMlTransformArgs
	state *glueMlTransformState
}

func (gmt *GlueMlTransform) Type() string {
	return "aws_glue_ml_transform"
}

func (gmt *GlueMlTransform) LocalName() string {
	return gmt.Name
}

func (gmt *GlueMlTransform) Configuration() interface{} {
	return gmt.Args
}

func (gmt *GlueMlTransform) Attributes() glueMlTransformAttributes {
	return glueMlTransformAttributes{ref: terra.ReferenceResource(gmt)}
}

func (gmt *GlueMlTransform) ImportState(av io.Reader) error {
	gmt.state = &glueMlTransformState{}
	if err := json.NewDecoder(av).Decode(gmt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gmt.Type(), gmt.LocalName(), err)
	}
	return nil
}

func (gmt *GlueMlTransform) State() (*glueMlTransformState, bool) {
	return gmt.state, gmt.state != nil
}

func (gmt *GlueMlTransform) StateMust() *glueMlTransformState {
	if gmt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gmt.Type(), gmt.LocalName()))
	}
	return gmt.state
}

func (gmt *GlueMlTransform) DependOn() terra.Reference {
	return terra.ReferenceResource(gmt)
}

type GlueMlTransformArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GlueVersion: string, optional
	GlueVersion terra.StringValue `hcl:"glue_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxCapacity: number, optional
	MaxCapacity terra.NumberValue `hcl:"max_capacity,attr"`
	// MaxRetries: number, optional
	MaxRetries terra.NumberValue `hcl:"max_retries,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// NumberOfWorkers: number, optional
	NumberOfWorkers terra.NumberValue `hcl:"number_of_workers,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeout: number, optional
	Timeout terra.NumberValue `hcl:"timeout,attr"`
	// WorkerType: string, optional
	WorkerType terra.StringValue `hcl:"worker_type,attr"`
	// Schema: min=0
	Schema []gluemltransform.Schema `hcl:"schema,block" validate:"min=0"`
	// InputRecordTables: min=1
	InputRecordTables []gluemltransform.InputRecordTables `hcl:"input_record_tables,block" validate:"min=1"`
	// Parameters: required
	Parameters *gluemltransform.Parameters `hcl:"parameters,block" validate:"required"`
	// DependsOn contains resources that GlueMlTransform depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type glueMlTransformAttributes struct {
	ref terra.Reference
}

func (gmt glueMlTransformAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(gmt.ref.Append("arn"))
}

func (gmt glueMlTransformAttributes) Description() terra.StringValue {
	return terra.ReferenceString(gmt.ref.Append("description"))
}

func (gmt glueMlTransformAttributes) GlueVersion() terra.StringValue {
	return terra.ReferenceString(gmt.ref.Append("glue_version"))
}

func (gmt glueMlTransformAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gmt.ref.Append("id"))
}

func (gmt glueMlTransformAttributes) LabelCount() terra.NumberValue {
	return terra.ReferenceNumber(gmt.ref.Append("label_count"))
}

func (gmt glueMlTransformAttributes) MaxCapacity() terra.NumberValue {
	return terra.ReferenceNumber(gmt.ref.Append("max_capacity"))
}

func (gmt glueMlTransformAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceNumber(gmt.ref.Append("max_retries"))
}

func (gmt glueMlTransformAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gmt.ref.Append("name"))
}

func (gmt glueMlTransformAttributes) NumberOfWorkers() terra.NumberValue {
	return terra.ReferenceNumber(gmt.ref.Append("number_of_workers"))
}

func (gmt glueMlTransformAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(gmt.ref.Append("role_arn"))
}

func (gmt glueMlTransformAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gmt.ref.Append("tags"))
}

func (gmt glueMlTransformAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gmt.ref.Append("tags_all"))
}

func (gmt glueMlTransformAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceNumber(gmt.ref.Append("timeout"))
}

func (gmt glueMlTransformAttributes) WorkerType() terra.StringValue {
	return terra.ReferenceString(gmt.ref.Append("worker_type"))
}

func (gmt glueMlTransformAttributes) Schema() terra.ListValue[gluemltransform.SchemaAttributes] {
	return terra.ReferenceList[gluemltransform.SchemaAttributes](gmt.ref.Append("schema"))
}

func (gmt glueMlTransformAttributes) InputRecordTables() terra.ListValue[gluemltransform.InputRecordTablesAttributes] {
	return terra.ReferenceList[gluemltransform.InputRecordTablesAttributes](gmt.ref.Append("input_record_tables"))
}

func (gmt glueMlTransformAttributes) Parameters() terra.ListValue[gluemltransform.ParametersAttributes] {
	return terra.ReferenceList[gluemltransform.ParametersAttributes](gmt.ref.Append("parameters"))
}

type glueMlTransformState struct {
	Arn               string                                   `json:"arn"`
	Description       string                                   `json:"description"`
	GlueVersion       string                                   `json:"glue_version"`
	Id                string                                   `json:"id"`
	LabelCount        float64                                  `json:"label_count"`
	MaxCapacity       float64                                  `json:"max_capacity"`
	MaxRetries        float64                                  `json:"max_retries"`
	Name              string                                   `json:"name"`
	NumberOfWorkers   float64                                  `json:"number_of_workers"`
	RoleArn           string                                   `json:"role_arn"`
	Tags              map[string]string                        `json:"tags"`
	TagsAll           map[string]string                        `json:"tags_all"`
	Timeout           float64                                  `json:"timeout"`
	WorkerType        string                                   `json:"worker_type"`
	Schema            []gluemltransform.SchemaState            `json:"schema"`
	InputRecordTables []gluemltransform.InputRecordTablesState `json:"input_record_tables"`
	Parameters        []gluemltransform.ParametersState        `json:"parameters"`
}
