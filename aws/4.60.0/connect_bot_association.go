// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	connectbotassociation "github.com/golingon/terraproviders/aws/4.60.0/connectbotassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConnectBotAssociation(name string, args ConnectBotAssociationArgs) *ConnectBotAssociation {
	return &ConnectBotAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConnectBotAssociation)(nil)

type ConnectBotAssociation struct {
	Name  string
	Args  ConnectBotAssociationArgs
	state *connectBotAssociationState
}

func (cba *ConnectBotAssociation) Type() string {
	return "aws_connect_bot_association"
}

func (cba *ConnectBotAssociation) LocalName() string {
	return cba.Name
}

func (cba *ConnectBotAssociation) Configuration() interface{} {
	return cba.Args
}

func (cba *ConnectBotAssociation) Attributes() connectBotAssociationAttributes {
	return connectBotAssociationAttributes{ref: terra.ReferenceResource(cba)}
}

func (cba *ConnectBotAssociation) ImportState(av io.Reader) error {
	cba.state = &connectBotAssociationState{}
	if err := json.NewDecoder(av).Decode(cba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cba.Type(), cba.LocalName(), err)
	}
	return nil
}

func (cba *ConnectBotAssociation) State() (*connectBotAssociationState, bool) {
	return cba.state, cba.state != nil
}

func (cba *ConnectBotAssociation) StateMust() *connectBotAssociationState {
	if cba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cba.Type(), cba.LocalName()))
	}
	return cba.state
}

func (cba *ConnectBotAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(cba)
}

type ConnectBotAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// LexBot: required
	LexBot *connectbotassociation.LexBot `hcl:"lex_bot,block" validate:"required"`
	// DependsOn contains resources that ConnectBotAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type connectBotAssociationAttributes struct {
	ref terra.Reference
}

func (cba connectBotAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cba.ref.Append("id"))
}

func (cba connectBotAssociationAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceString(cba.ref.Append("instance_id"))
}

func (cba connectBotAssociationAttributes) LexBot() terra.ListValue[connectbotassociation.LexBotAttributes] {
	return terra.ReferenceList[connectbotassociation.LexBotAttributes](cba.ref.Append("lex_bot"))
}

type connectBotAssociationState struct {
	Id         string                              `json:"id"`
	InstanceId string                              `json:"instance_id"`
	LexBot     []connectbotassociation.LexBotState `json:"lex_bot"`
}
