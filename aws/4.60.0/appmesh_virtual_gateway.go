// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	appmeshvirtualgateway "github.com/golingon/terraproviders/aws/4.60.0/appmeshvirtualgateway"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppmeshVirtualGateway(name string, args AppmeshVirtualGatewayArgs) *AppmeshVirtualGateway {
	return &AppmeshVirtualGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppmeshVirtualGateway)(nil)

type AppmeshVirtualGateway struct {
	Name  string
	Args  AppmeshVirtualGatewayArgs
	state *appmeshVirtualGatewayState
}

func (avg *AppmeshVirtualGateway) Type() string {
	return "aws_appmesh_virtual_gateway"
}

func (avg *AppmeshVirtualGateway) LocalName() string {
	return avg.Name
}

func (avg *AppmeshVirtualGateway) Configuration() interface{} {
	return avg.Args
}

func (avg *AppmeshVirtualGateway) Attributes() appmeshVirtualGatewayAttributes {
	return appmeshVirtualGatewayAttributes{ref: terra.ReferenceResource(avg)}
}

func (avg *AppmeshVirtualGateway) ImportState(av io.Reader) error {
	avg.state = &appmeshVirtualGatewayState{}
	if err := json.NewDecoder(av).Decode(avg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avg.Type(), avg.LocalName(), err)
	}
	return nil
}

func (avg *AppmeshVirtualGateway) State() (*appmeshVirtualGatewayState, bool) {
	return avg.state, avg.state != nil
}

func (avg *AppmeshVirtualGateway) StateMust() *appmeshVirtualGatewayState {
	if avg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avg.Type(), avg.LocalName()))
	}
	return avg.state
}

func (avg *AppmeshVirtualGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(avg)
}

type AppmeshVirtualGatewayArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MeshName: string, required
	MeshName terra.StringValue `hcl:"mesh_name,attr" validate:"required"`
	// MeshOwner: string, optional
	MeshOwner terra.StringValue `hcl:"mesh_owner,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Spec: required
	Spec *appmeshvirtualgateway.Spec `hcl:"spec,block" validate:"required"`
	// DependsOn contains resources that AppmeshVirtualGateway depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appmeshVirtualGatewayAttributes struct {
	ref terra.Reference
}

func (avg appmeshVirtualGatewayAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(avg.ref.Append("arn"))
}

func (avg appmeshVirtualGatewayAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceString(avg.ref.Append("created_date"))
}

func (avg appmeshVirtualGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceString(avg.ref.Append("id"))
}

func (avg appmeshVirtualGatewayAttributes) LastUpdatedDate() terra.StringValue {
	return terra.ReferenceString(avg.ref.Append("last_updated_date"))
}

func (avg appmeshVirtualGatewayAttributes) MeshName() terra.StringValue {
	return terra.ReferenceString(avg.ref.Append("mesh_name"))
}

func (avg appmeshVirtualGatewayAttributes) MeshOwner() terra.StringValue {
	return terra.ReferenceString(avg.ref.Append("mesh_owner"))
}

func (avg appmeshVirtualGatewayAttributes) Name() terra.StringValue {
	return terra.ReferenceString(avg.ref.Append("name"))
}

func (avg appmeshVirtualGatewayAttributes) ResourceOwner() terra.StringValue {
	return terra.ReferenceString(avg.ref.Append("resource_owner"))
}

func (avg appmeshVirtualGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](avg.ref.Append("tags"))
}

func (avg appmeshVirtualGatewayAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](avg.ref.Append("tags_all"))
}

func (avg appmeshVirtualGatewayAttributes) Spec() terra.ListValue[appmeshvirtualgateway.SpecAttributes] {
	return terra.ReferenceList[appmeshvirtualgateway.SpecAttributes](avg.ref.Append("spec"))
}

type appmeshVirtualGatewayState struct {
	Arn             string                            `json:"arn"`
	CreatedDate     string                            `json:"created_date"`
	Id              string                            `json:"id"`
	LastUpdatedDate string                            `json:"last_updated_date"`
	MeshName        string                            `json:"mesh_name"`
	MeshOwner       string                            `json:"mesh_owner"`
	Name            string                            `json:"name"`
	ResourceOwner   string                            `json:"resource_owner"`
	Tags            map[string]string                 `json:"tags"`
	TagsAll         map[string]string                 `json:"tags_all"`
	Spec            []appmeshvirtualgateway.SpecState `json:"spec"`
}
