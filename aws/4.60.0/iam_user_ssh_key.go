// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamUserSshKey(name string, args IamUserSshKeyArgs) *IamUserSshKey {
	return &IamUserSshKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamUserSshKey)(nil)

type IamUserSshKey struct {
	Name  string
	Args  IamUserSshKeyArgs
	state *iamUserSshKeyState
}

func (iusk *IamUserSshKey) Type() string {
	return "aws_iam_user_ssh_key"
}

func (iusk *IamUserSshKey) LocalName() string {
	return iusk.Name
}

func (iusk *IamUserSshKey) Configuration() interface{} {
	return iusk.Args
}

func (iusk *IamUserSshKey) Attributes() iamUserSshKeyAttributes {
	return iamUserSshKeyAttributes{ref: terra.ReferenceResource(iusk)}
}

func (iusk *IamUserSshKey) ImportState(av io.Reader) error {
	iusk.state = &iamUserSshKeyState{}
	if err := json.NewDecoder(av).Decode(iusk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iusk.Type(), iusk.LocalName(), err)
	}
	return nil
}

func (iusk *IamUserSshKey) State() (*iamUserSshKeyState, bool) {
	return iusk.state, iusk.state != nil
}

func (iusk *IamUserSshKey) StateMust() *iamUserSshKeyState {
	if iusk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iusk.Type(), iusk.LocalName()))
	}
	return iusk.state
}

func (iusk *IamUserSshKey) DependOn() terra.Reference {
	return terra.ReferenceResource(iusk)
}

type IamUserSshKeyArgs struct {
	// Encoding: string, required
	Encoding terra.StringValue `hcl:"encoding,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PublicKey: string, required
	PublicKey terra.StringValue `hcl:"public_key,attr" validate:"required"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// DependsOn contains resources that IamUserSshKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamUserSshKeyAttributes struct {
	ref terra.Reference
}

func (iusk iamUserSshKeyAttributes) Encoding() terra.StringValue {
	return terra.ReferenceString(iusk.ref.Append("encoding"))
}

func (iusk iamUserSshKeyAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceString(iusk.ref.Append("fingerprint"))
}

func (iusk iamUserSshKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iusk.ref.Append("id"))
}

func (iusk iamUserSshKeyAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceString(iusk.ref.Append("public_key"))
}

func (iusk iamUserSshKeyAttributes) SshPublicKeyId() terra.StringValue {
	return terra.ReferenceString(iusk.ref.Append("ssh_public_key_id"))
}

func (iusk iamUserSshKeyAttributes) Status() terra.StringValue {
	return terra.ReferenceString(iusk.ref.Append("status"))
}

func (iusk iamUserSshKeyAttributes) Username() terra.StringValue {
	return terra.ReferenceString(iusk.ref.Append("username"))
}

type iamUserSshKeyState struct {
	Encoding       string `json:"encoding"`
	Fingerprint    string `json:"fingerprint"`
	Id             string `json:"id"`
	PublicKey      string `json:"public_key"`
	SshPublicKeyId string `json:"ssh_public_key_id"`
	Status         string `json:"status"`
	Username       string `json:"username"`
}
