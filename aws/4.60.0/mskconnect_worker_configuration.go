// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMskconnectWorkerConfiguration(name string, args MskconnectWorkerConfigurationArgs) *MskconnectWorkerConfiguration {
	return &MskconnectWorkerConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MskconnectWorkerConfiguration)(nil)

type MskconnectWorkerConfiguration struct {
	Name  string
	Args  MskconnectWorkerConfigurationArgs
	state *mskconnectWorkerConfigurationState
}

func (mwc *MskconnectWorkerConfiguration) Type() string {
	return "aws_mskconnect_worker_configuration"
}

func (mwc *MskconnectWorkerConfiguration) LocalName() string {
	return mwc.Name
}

func (mwc *MskconnectWorkerConfiguration) Configuration() interface{} {
	return mwc.Args
}

func (mwc *MskconnectWorkerConfiguration) Attributes() mskconnectWorkerConfigurationAttributes {
	return mskconnectWorkerConfigurationAttributes{ref: terra.ReferenceResource(mwc)}
}

func (mwc *MskconnectWorkerConfiguration) ImportState(av io.Reader) error {
	mwc.state = &mskconnectWorkerConfigurationState{}
	if err := json.NewDecoder(av).Decode(mwc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mwc.Type(), mwc.LocalName(), err)
	}
	return nil
}

func (mwc *MskconnectWorkerConfiguration) State() (*mskconnectWorkerConfigurationState, bool) {
	return mwc.state, mwc.state != nil
}

func (mwc *MskconnectWorkerConfiguration) StateMust() *mskconnectWorkerConfigurationState {
	if mwc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mwc.Type(), mwc.LocalName()))
	}
	return mwc.state
}

func (mwc *MskconnectWorkerConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(mwc)
}

type MskconnectWorkerConfigurationArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PropertiesFileContent: string, required
	PropertiesFileContent terra.StringValue `hcl:"properties_file_content,attr" validate:"required"`
	// DependsOn contains resources that MskconnectWorkerConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mskconnectWorkerConfigurationAttributes struct {
	ref terra.Reference
}

func (mwc mskconnectWorkerConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(mwc.ref.Append("arn"))
}

func (mwc mskconnectWorkerConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mwc.ref.Append("description"))
}

func (mwc mskconnectWorkerConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mwc.ref.Append("id"))
}

func (mwc mskconnectWorkerConfigurationAttributes) LatestRevision() terra.NumberValue {
	return terra.ReferenceNumber(mwc.ref.Append("latest_revision"))
}

func (mwc mskconnectWorkerConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mwc.ref.Append("name"))
}

func (mwc mskconnectWorkerConfigurationAttributes) PropertiesFileContent() terra.StringValue {
	return terra.ReferenceString(mwc.ref.Append("properties_file_content"))
}

type mskconnectWorkerConfigurationState struct {
	Arn                   string  `json:"arn"`
	Description           string  `json:"description"`
	Id                    string  `json:"id"`
	LatestRevision        float64 `json:"latest_revision"`
	Name                  string  `json:"name"`
	PropertiesFileContent string  `json:"properties_file_content"`
}
