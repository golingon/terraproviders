// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	devicefarmdevicepool "github.com/golingon/terraproviders/aws/4.60.0/devicefarmdevicepool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDevicefarmDevicePool(name string, args DevicefarmDevicePoolArgs) *DevicefarmDevicePool {
	return &DevicefarmDevicePool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DevicefarmDevicePool)(nil)

type DevicefarmDevicePool struct {
	Name  string
	Args  DevicefarmDevicePoolArgs
	state *devicefarmDevicePoolState
}

func (ddp *DevicefarmDevicePool) Type() string {
	return "aws_devicefarm_device_pool"
}

func (ddp *DevicefarmDevicePool) LocalName() string {
	return ddp.Name
}

func (ddp *DevicefarmDevicePool) Configuration() interface{} {
	return ddp.Args
}

func (ddp *DevicefarmDevicePool) Attributes() devicefarmDevicePoolAttributes {
	return devicefarmDevicePoolAttributes{ref: terra.ReferenceResource(ddp)}
}

func (ddp *DevicefarmDevicePool) ImportState(av io.Reader) error {
	ddp.state = &devicefarmDevicePoolState{}
	if err := json.NewDecoder(av).Decode(ddp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ddp.Type(), ddp.LocalName(), err)
	}
	return nil
}

func (ddp *DevicefarmDevicePool) State() (*devicefarmDevicePoolState, bool) {
	return ddp.state, ddp.state != nil
}

func (ddp *DevicefarmDevicePool) StateMust() *devicefarmDevicePoolState {
	if ddp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ddp.Type(), ddp.LocalName()))
	}
	return ddp.state
}

func (ddp *DevicefarmDevicePool) DependOn() terra.Reference {
	return terra.ReferenceResource(ddp)
}

type DevicefarmDevicePoolArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxDevices: number, optional
	MaxDevices terra.NumberValue `hcl:"max_devices,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProjectArn: string, required
	ProjectArn terra.StringValue `hcl:"project_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Rule: min=1
	Rule []devicefarmdevicepool.Rule `hcl:"rule,block" validate:"min=1"`
	// DependsOn contains resources that DevicefarmDevicePool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type devicefarmDevicePoolAttributes struct {
	ref terra.Reference
}

func (ddp devicefarmDevicePoolAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ddp.ref.Append("arn"))
}

func (ddp devicefarmDevicePoolAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ddp.ref.Append("description"))
}

func (ddp devicefarmDevicePoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ddp.ref.Append("id"))
}

func (ddp devicefarmDevicePoolAttributes) MaxDevices() terra.NumberValue {
	return terra.ReferenceNumber(ddp.ref.Append("max_devices"))
}

func (ddp devicefarmDevicePoolAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ddp.ref.Append("name"))
}

func (ddp devicefarmDevicePoolAttributes) ProjectArn() terra.StringValue {
	return terra.ReferenceString(ddp.ref.Append("project_arn"))
}

func (ddp devicefarmDevicePoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ddp.ref.Append("tags"))
}

func (ddp devicefarmDevicePoolAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ddp.ref.Append("tags_all"))
}

func (ddp devicefarmDevicePoolAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ddp.ref.Append("type"))
}

func (ddp devicefarmDevicePoolAttributes) Rule() terra.SetValue[devicefarmdevicepool.RuleAttributes] {
	return terra.ReferenceSet[devicefarmdevicepool.RuleAttributes](ddp.ref.Append("rule"))
}

type devicefarmDevicePoolState struct {
	Arn         string                           `json:"arn"`
	Description string                           `json:"description"`
	Id          string                           `json:"id"`
	MaxDevices  float64                          `json:"max_devices"`
	Name        string                           `json:"name"`
	ProjectArn  string                           `json:"project_arn"`
	Tags        map[string]string                `json:"tags"`
	TagsAll     map[string]string                `json:"tags_all"`
	Type        string                           `json:"type"`
	Rule        []devicefarmdevicepool.RuleState `json:"rule"`
}
