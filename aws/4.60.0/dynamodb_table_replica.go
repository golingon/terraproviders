// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dynamodbtablereplica "github.com/golingon/terraproviders/aws/4.60.0/dynamodbtablereplica"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDynamodbTableReplica(name string, args DynamodbTableReplicaArgs) *DynamodbTableReplica {
	return &DynamodbTableReplica{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DynamodbTableReplica)(nil)

type DynamodbTableReplica struct {
	Name  string
	Args  DynamodbTableReplicaArgs
	state *dynamodbTableReplicaState
}

func (dtr *DynamodbTableReplica) Type() string {
	return "aws_dynamodb_table_replica"
}

func (dtr *DynamodbTableReplica) LocalName() string {
	return dtr.Name
}

func (dtr *DynamodbTableReplica) Configuration() interface{} {
	return dtr.Args
}

func (dtr *DynamodbTableReplica) Attributes() dynamodbTableReplicaAttributes {
	return dynamodbTableReplicaAttributes{ref: terra.ReferenceResource(dtr)}
}

func (dtr *DynamodbTableReplica) ImportState(av io.Reader) error {
	dtr.state = &dynamodbTableReplicaState{}
	if err := json.NewDecoder(av).Decode(dtr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dtr.Type(), dtr.LocalName(), err)
	}
	return nil
}

func (dtr *DynamodbTableReplica) State() (*dynamodbTableReplicaState, bool) {
	return dtr.state, dtr.state != nil
}

func (dtr *DynamodbTableReplica) StateMust() *dynamodbTableReplicaState {
	if dtr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dtr.Type(), dtr.LocalName()))
	}
	return dtr.state
}

func (dtr *DynamodbTableReplica) DependOn() terra.Reference {
	return terra.ReferenceResource(dtr)
}

type DynamodbTableReplicaArgs struct {
	// GlobalTableArn: string, required
	GlobalTableArn terra.StringValue `hcl:"global_table_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// PointInTimeRecovery: bool, optional
	PointInTimeRecovery terra.BoolValue `hcl:"point_in_time_recovery,attr"`
	// TableClassOverride: string, optional
	TableClassOverride terra.StringValue `hcl:"table_class_override,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *dynamodbtablereplica.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DynamodbTableReplica depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dynamodbTableReplicaAttributes struct {
	ref terra.Reference
}

func (dtr dynamodbTableReplicaAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dtr.ref.Append("arn"))
}

func (dtr dynamodbTableReplicaAttributes) GlobalTableArn() terra.StringValue {
	return terra.ReferenceString(dtr.ref.Append("global_table_arn"))
}

func (dtr dynamodbTableReplicaAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dtr.ref.Append("id"))
}

func (dtr dynamodbTableReplicaAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceString(dtr.ref.Append("kms_key_arn"))
}

func (dtr dynamodbTableReplicaAttributes) PointInTimeRecovery() terra.BoolValue {
	return terra.ReferenceBool(dtr.ref.Append("point_in_time_recovery"))
}

func (dtr dynamodbTableReplicaAttributes) TableClassOverride() terra.StringValue {
	return terra.ReferenceString(dtr.ref.Append("table_class_override"))
}

func (dtr dynamodbTableReplicaAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dtr.ref.Append("tags"))
}

func (dtr dynamodbTableReplicaAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dtr.ref.Append("tags_all"))
}

func (dtr dynamodbTableReplicaAttributes) Timeouts() dynamodbtablereplica.TimeoutsAttributes {
	return terra.ReferenceSingle[dynamodbtablereplica.TimeoutsAttributes](dtr.ref.Append("timeouts"))
}

type dynamodbTableReplicaState struct {
	Arn                 string                              `json:"arn"`
	GlobalTableArn      string                              `json:"global_table_arn"`
	Id                  string                              `json:"id"`
	KmsKeyArn           string                              `json:"kms_key_arn"`
	PointInTimeRecovery bool                                `json:"point_in_time_recovery"`
	TableClassOverride  string                              `json:"table_class_override"`
	Tags                map[string]string                   `json:"tags"`
	TagsAll             map[string]string                   `json:"tags_all"`
	Timeouts            *dynamodbtablereplica.TimeoutsState `json:"timeouts"`
}
