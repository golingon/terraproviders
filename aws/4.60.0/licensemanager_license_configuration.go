// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLicensemanagerLicenseConfiguration(name string, args LicensemanagerLicenseConfigurationArgs) *LicensemanagerLicenseConfiguration {
	return &LicensemanagerLicenseConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LicensemanagerLicenseConfiguration)(nil)

type LicensemanagerLicenseConfiguration struct {
	Name  string
	Args  LicensemanagerLicenseConfigurationArgs
	state *licensemanagerLicenseConfigurationState
}

func (llc *LicensemanagerLicenseConfiguration) Type() string {
	return "aws_licensemanager_license_configuration"
}

func (llc *LicensemanagerLicenseConfiguration) LocalName() string {
	return llc.Name
}

func (llc *LicensemanagerLicenseConfiguration) Configuration() interface{} {
	return llc.Args
}

func (llc *LicensemanagerLicenseConfiguration) Attributes() licensemanagerLicenseConfigurationAttributes {
	return licensemanagerLicenseConfigurationAttributes{ref: terra.ReferenceResource(llc)}
}

func (llc *LicensemanagerLicenseConfiguration) ImportState(av io.Reader) error {
	llc.state = &licensemanagerLicenseConfigurationState{}
	if err := json.NewDecoder(av).Decode(llc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", llc.Type(), llc.LocalName(), err)
	}
	return nil
}

func (llc *LicensemanagerLicenseConfiguration) State() (*licensemanagerLicenseConfigurationState, bool) {
	return llc.state, llc.state != nil
}

func (llc *LicensemanagerLicenseConfiguration) StateMust() *licensemanagerLicenseConfigurationState {
	if llc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", llc.Type(), llc.LocalName()))
	}
	return llc.state
}

func (llc *LicensemanagerLicenseConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(llc)
}

type LicensemanagerLicenseConfigurationArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LicenseCount: number, optional
	LicenseCount terra.NumberValue `hcl:"license_count,attr"`
	// LicenseCountHardLimit: bool, optional
	LicenseCountHardLimit terra.BoolValue `hcl:"license_count_hard_limit,attr"`
	// LicenseCountingType: string, required
	LicenseCountingType terra.StringValue `hcl:"license_counting_type,attr" validate:"required"`
	// LicenseRules: list of string, optional
	LicenseRules terra.ListValue[terra.StringValue] `hcl:"license_rules,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that LicensemanagerLicenseConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type licensemanagerLicenseConfigurationAttributes struct {
	ref terra.Reference
}

func (llc licensemanagerLicenseConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("arn"))
}

func (llc licensemanagerLicenseConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("description"))
}

func (llc licensemanagerLicenseConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("id"))
}

func (llc licensemanagerLicenseConfigurationAttributes) LicenseCount() terra.NumberValue {
	return terra.ReferenceNumber(llc.ref.Append("license_count"))
}

func (llc licensemanagerLicenseConfigurationAttributes) LicenseCountHardLimit() terra.BoolValue {
	return terra.ReferenceBool(llc.ref.Append("license_count_hard_limit"))
}

func (llc licensemanagerLicenseConfigurationAttributes) LicenseCountingType() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("license_counting_type"))
}

func (llc licensemanagerLicenseConfigurationAttributes) LicenseRules() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](llc.ref.Append("license_rules"))
}

func (llc licensemanagerLicenseConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("name"))
}

func (llc licensemanagerLicenseConfigurationAttributes) OwnerAccountId() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("owner_account_id"))
}

func (llc licensemanagerLicenseConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](llc.ref.Append("tags"))
}

func (llc licensemanagerLicenseConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](llc.ref.Append("tags_all"))
}

type licensemanagerLicenseConfigurationState struct {
	Arn                   string            `json:"arn"`
	Description           string            `json:"description"`
	Id                    string            `json:"id"`
	LicenseCount          float64           `json:"license_count"`
	LicenseCountHardLimit bool              `json:"license_count_hard_limit"`
	LicenseCountingType   string            `json:"license_counting_type"`
	LicenseRules          []string          `json:"license_rules"`
	Name                  string            `json:"name"`
	OwnerAccountId        string            `json:"owner_account_id"`
	Tags                  map[string]string `json:"tags"`
	TagsAll               map[string]string `json:"tags_all"`
}
