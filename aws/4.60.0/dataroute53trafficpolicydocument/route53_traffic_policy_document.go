// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataroute53trafficpolicydocument

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Endpoint struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Rule struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// GeoProximityLocation: min=0
	GeoProximityLocation []GeoProximityLocation `hcl:"geo_proximity_location,block" validate:"min=0"`
	// Items: min=0
	Items []Items `hcl:"items,block" validate:"min=0"`
	// Location: min=0
	Location []Location `hcl:"location,block" validate:"min=0"`
	// Primary: optional
	Primary *Primary `hcl:"primary,block"`
	// Region: min=0
	Region []Region `hcl:"region,block" validate:"min=0"`
	// Secondary: optional
	Secondary *Secondary `hcl:"secondary,block"`
}

type GeoProximityLocation struct {
	// Bias: string, optional
	Bias terra.StringValue `hcl:"bias,attr"`
	// EndpointReference: string, optional
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth: bool, optional
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck: string, optional
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// Latitude: string, optional
	Latitude terra.StringValue `hcl:"latitude,attr"`
	// Longitude: string, optional
	Longitude terra.StringValue `hcl:"longitude,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// RuleReference: string, optional
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
}

type Items struct {
	// EndpointReference: string, optional
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// HealthCheck: string, optional
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
}

type Location struct {
	// Continent: string, optional
	Continent terra.StringValue `hcl:"continent,attr"`
	// Country: string, optional
	Country terra.StringValue `hcl:"country,attr"`
	// EndpointReference: string, optional
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth: bool, optional
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck: string, optional
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// IsDefault: bool, optional
	IsDefault terra.BoolValue `hcl:"is_default,attr"`
	// RuleReference: string, optional
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
	// Subdivision: string, optional
	Subdivision terra.StringValue `hcl:"subdivision,attr"`
}

type Primary struct {
	// EndpointReference: string, optional
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth: bool, optional
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck: string, optional
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// RuleReference: string, optional
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
}

type Region struct {
	// EndpointReference: string, optional
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth: bool, optional
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck: string, optional
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// RuleReference: string, optional
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
}

type Secondary struct {
	// EndpointReference: string, optional
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth: bool, optional
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck: string, optional
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// RuleReference: string, optional
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
}

type EndpointAttributes struct {
	ref terra.Reference
}

func (e EndpointAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e EndpointAttributes) InternalWithRef(ref terra.Reference) EndpointAttributes {
	return EndpointAttributes{ref: ref}
}

func (e EndpointAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e EndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("id"))
}

func (e EndpointAttributes) Region() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("region"))
}

func (e EndpointAttributes) Type() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("type"))
}

func (e EndpointAttributes) Value() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("value"))
}

type RuleAttributes struct {
	ref terra.Reference
}

func (r RuleAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RuleAttributes) InternalWithRef(ref terra.Reference) RuleAttributes {
	return RuleAttributes{ref: ref}
}

func (r RuleAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("id"))
}

func (r RuleAttributes) Type() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("type"))
}

func (r RuleAttributes) GeoProximityLocation() terra.SetValue[GeoProximityLocationAttributes] {
	return terra.ReferenceSet[GeoProximityLocationAttributes](r.ref.Append("geo_proximity_location"))
}

func (r RuleAttributes) Items() terra.SetValue[ItemsAttributes] {
	return terra.ReferenceSet[ItemsAttributes](r.ref.Append("items"))
}

func (r RuleAttributes) Location() terra.SetValue[LocationAttributes] {
	return terra.ReferenceSet[LocationAttributes](r.ref.Append("location"))
}

func (r RuleAttributes) Primary() terra.ListValue[PrimaryAttributes] {
	return terra.ReferenceList[PrimaryAttributes](r.ref.Append("primary"))
}

func (r RuleAttributes) Region() terra.SetValue[RegionAttributes] {
	return terra.ReferenceSet[RegionAttributes](r.ref.Append("region"))
}

func (r RuleAttributes) Secondary() terra.ListValue[SecondaryAttributes] {
	return terra.ReferenceList[SecondaryAttributes](r.ref.Append("secondary"))
}

type GeoProximityLocationAttributes struct {
	ref terra.Reference
}

func (gpl GeoProximityLocationAttributes) InternalRef() terra.Reference {
	return gpl.ref
}

func (gpl GeoProximityLocationAttributes) InternalWithRef(ref terra.Reference) GeoProximityLocationAttributes {
	return GeoProximityLocationAttributes{ref: ref}
}

func (gpl GeoProximityLocationAttributes) InternalTokens() hclwrite.Tokens {
	return gpl.ref.InternalTokens()
}

func (gpl GeoProximityLocationAttributes) Bias() terra.StringValue {
	return terra.ReferenceString(gpl.ref.Append("bias"))
}

func (gpl GeoProximityLocationAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceString(gpl.ref.Append("endpoint_reference"))
}

func (gpl GeoProximityLocationAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceBool(gpl.ref.Append("evaluate_target_health"))
}

func (gpl GeoProximityLocationAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceString(gpl.ref.Append("health_check"))
}

func (gpl GeoProximityLocationAttributes) Latitude() terra.StringValue {
	return terra.ReferenceString(gpl.ref.Append("latitude"))
}

func (gpl GeoProximityLocationAttributes) Longitude() terra.StringValue {
	return terra.ReferenceString(gpl.ref.Append("longitude"))
}

func (gpl GeoProximityLocationAttributes) Region() terra.StringValue {
	return terra.ReferenceString(gpl.ref.Append("region"))
}

func (gpl GeoProximityLocationAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceString(gpl.ref.Append("rule_reference"))
}

type ItemsAttributes struct {
	ref terra.Reference
}

func (i ItemsAttributes) InternalRef() terra.Reference {
	return i.ref
}

func (i ItemsAttributes) InternalWithRef(ref terra.Reference) ItemsAttributes {
	return ItemsAttributes{ref: ref}
}

func (i ItemsAttributes) InternalTokens() hclwrite.Tokens {
	return i.ref.InternalTokens()
}

func (i ItemsAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("endpoint_reference"))
}

func (i ItemsAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceString(i.ref.Append("health_check"))
}

type LocationAttributes struct {
	ref terra.Reference
}

func (l LocationAttributes) InternalRef() terra.Reference {
	return l.ref
}

func (l LocationAttributes) InternalWithRef(ref terra.Reference) LocationAttributes {
	return LocationAttributes{ref: ref}
}

func (l LocationAttributes) InternalTokens() hclwrite.Tokens {
	return l.ref.InternalTokens()
}

func (l LocationAttributes) Continent() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("continent"))
}

func (l LocationAttributes) Country() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("country"))
}

func (l LocationAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("endpoint_reference"))
}

func (l LocationAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceBool(l.ref.Append("evaluate_target_health"))
}

func (l LocationAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("health_check"))
}

func (l LocationAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceBool(l.ref.Append("is_default"))
}

func (l LocationAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("rule_reference"))
}

func (l LocationAttributes) Subdivision() terra.StringValue {
	return terra.ReferenceString(l.ref.Append("subdivision"))
}

type PrimaryAttributes struct {
	ref terra.Reference
}

func (p PrimaryAttributes) InternalRef() terra.Reference {
	return p.ref
}

func (p PrimaryAttributes) InternalWithRef(ref terra.Reference) PrimaryAttributes {
	return PrimaryAttributes{ref: ref}
}

func (p PrimaryAttributes) InternalTokens() hclwrite.Tokens {
	return p.ref.InternalTokens()
}

func (p PrimaryAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("endpoint_reference"))
}

func (p PrimaryAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceBool(p.ref.Append("evaluate_target_health"))
}

func (p PrimaryAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("health_check"))
}

func (p PrimaryAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceString(p.ref.Append("rule_reference"))
}

type RegionAttributes struct {
	ref terra.Reference
}

func (r RegionAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RegionAttributes) InternalWithRef(ref terra.Reference) RegionAttributes {
	return RegionAttributes{ref: ref}
}

func (r RegionAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RegionAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("endpoint_reference"))
}

func (r RegionAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceBool(r.ref.Append("evaluate_target_health"))
}

func (r RegionAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("health_check"))
}

func (r RegionAttributes) Region() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("region"))
}

func (r RegionAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceString(r.ref.Append("rule_reference"))
}

type SecondaryAttributes struct {
	ref terra.Reference
}

func (s SecondaryAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SecondaryAttributes) InternalWithRef(ref terra.Reference) SecondaryAttributes {
	return SecondaryAttributes{ref: ref}
}

func (s SecondaryAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SecondaryAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("endpoint_reference"))
}

func (s SecondaryAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("evaluate_target_health"))
}

func (s SecondaryAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("health_check"))
}

func (s SecondaryAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("rule_reference"))
}

type EndpointState struct {
	Id     string `json:"id"`
	Region string `json:"region"`
	Type   string `json:"type"`
	Value  string `json:"value"`
}

type RuleState struct {
	Id                   string                      `json:"id"`
	Type                 string                      `json:"type"`
	GeoProximityLocation []GeoProximityLocationState `json:"geo_proximity_location"`
	Items                []ItemsState                `json:"items"`
	Location             []LocationState             `json:"location"`
	Primary              []PrimaryState              `json:"primary"`
	Region               []RegionState               `json:"region"`
	Secondary            []SecondaryState            `json:"secondary"`
}

type GeoProximityLocationState struct {
	Bias                 string `json:"bias"`
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	Latitude             string `json:"latitude"`
	Longitude            string `json:"longitude"`
	Region               string `json:"region"`
	RuleReference        string `json:"rule_reference"`
}

type ItemsState struct {
	EndpointReference string `json:"endpoint_reference"`
	HealthCheck       string `json:"health_check"`
}

type LocationState struct {
	Continent            string `json:"continent"`
	Country              string `json:"country"`
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	IsDefault            bool   `json:"is_default"`
	RuleReference        string `json:"rule_reference"`
	Subdivision          string `json:"subdivision"`
}

type PrimaryState struct {
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	RuleReference        string `json:"rule_reference"`
}

type RegionState struct {
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	Region               string `json:"region"`
	RuleReference        string `json:"rule_reference"`
}

type SecondaryState struct {
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	RuleReference        string `json:"rule_reference"`
}
