// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	route53recoverycontrolconfigcluster "github.com/golingon/terraproviders/aws/4.60.0/route53recoverycontrolconfigcluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53RecoverycontrolconfigCluster(name string, args Route53RecoverycontrolconfigClusterArgs) *Route53RecoverycontrolconfigCluster {
	return &Route53RecoverycontrolconfigCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53RecoverycontrolconfigCluster)(nil)

type Route53RecoverycontrolconfigCluster struct {
	Name  string
	Args  Route53RecoverycontrolconfigClusterArgs
	state *route53RecoverycontrolconfigClusterState
}

func (rc *Route53RecoverycontrolconfigCluster) Type() string {
	return "aws_route53recoverycontrolconfig_cluster"
}

func (rc *Route53RecoverycontrolconfigCluster) LocalName() string {
	return rc.Name
}

func (rc *Route53RecoverycontrolconfigCluster) Configuration() interface{} {
	return rc.Args
}

func (rc *Route53RecoverycontrolconfigCluster) Attributes() route53RecoverycontrolconfigClusterAttributes {
	return route53RecoverycontrolconfigClusterAttributes{ref: terra.ReferenceResource(rc)}
}

func (rc *Route53RecoverycontrolconfigCluster) ImportState(av io.Reader) error {
	rc.state = &route53RecoverycontrolconfigClusterState{}
	if err := json.NewDecoder(av).Decode(rc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rc.Type(), rc.LocalName(), err)
	}
	return nil
}

func (rc *Route53RecoverycontrolconfigCluster) State() (*route53RecoverycontrolconfigClusterState, bool) {
	return rc.state, rc.state != nil
}

func (rc *Route53RecoverycontrolconfigCluster) StateMust() *route53RecoverycontrolconfigClusterState {
	if rc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rc.Type(), rc.LocalName()))
	}
	return rc.state
}

func (rc *Route53RecoverycontrolconfigCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(rc)
}

type Route53RecoverycontrolconfigClusterArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ClusterEndpoints: min=0
	ClusterEndpoints []route53recoverycontrolconfigcluster.ClusterEndpoints `hcl:"cluster_endpoints,block" validate:"min=0"`
	// DependsOn contains resources that Route53RecoverycontrolconfigCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53RecoverycontrolconfigClusterAttributes struct {
	ref terra.Reference
}

func (rc route53RecoverycontrolconfigClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("arn"))
}

func (rc route53RecoverycontrolconfigClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("id"))
}

func (rc route53RecoverycontrolconfigClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("name"))
}

func (rc route53RecoverycontrolconfigClusterAttributes) Status() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("status"))
}

func (rc route53RecoverycontrolconfigClusterAttributes) ClusterEndpoints() terra.ListValue[route53recoverycontrolconfigcluster.ClusterEndpointsAttributes] {
	return terra.ReferenceList[route53recoverycontrolconfigcluster.ClusterEndpointsAttributes](rc.ref.Append("cluster_endpoints"))
}

type route53RecoverycontrolconfigClusterState struct {
	Arn              string                                                      `json:"arn"`
	Id               string                                                      `json:"id"`
	Name             string                                                      `json:"name"`
	Status           string                                                      `json:"status"`
	ClusterEndpoints []route53recoverycontrolconfigcluster.ClusterEndpointsState `json:"cluster_endpoints"`
}
