// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cognitoidentitypool "github.com/golingon/terraproviders/aws/4.60.0/cognitoidentitypool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCognitoIdentityPool(name string, args CognitoIdentityPoolArgs) *CognitoIdentityPool {
	return &CognitoIdentityPool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CognitoIdentityPool)(nil)

type CognitoIdentityPool struct {
	Name  string
	Args  CognitoIdentityPoolArgs
	state *cognitoIdentityPoolState
}

func (cip *CognitoIdentityPool) Type() string {
	return "aws_cognito_identity_pool"
}

func (cip *CognitoIdentityPool) LocalName() string {
	return cip.Name
}

func (cip *CognitoIdentityPool) Configuration() interface{} {
	return cip.Args
}

func (cip *CognitoIdentityPool) Attributes() cognitoIdentityPoolAttributes {
	return cognitoIdentityPoolAttributes{ref: terra.ReferenceResource(cip)}
}

func (cip *CognitoIdentityPool) ImportState(av io.Reader) error {
	cip.state = &cognitoIdentityPoolState{}
	if err := json.NewDecoder(av).Decode(cip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cip.Type(), cip.LocalName(), err)
	}
	return nil
}

func (cip *CognitoIdentityPool) State() (*cognitoIdentityPoolState, bool) {
	return cip.state, cip.state != nil
}

func (cip *CognitoIdentityPool) StateMust() *cognitoIdentityPoolState {
	if cip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cip.Type(), cip.LocalName()))
	}
	return cip.state
}

func (cip *CognitoIdentityPool) DependOn() terra.Reference {
	return terra.ReferenceResource(cip)
}

type CognitoIdentityPoolArgs struct {
	// AllowClassicFlow: bool, optional
	AllowClassicFlow terra.BoolValue `hcl:"allow_classic_flow,attr"`
	// AllowUnauthenticatedIdentities: bool, optional
	AllowUnauthenticatedIdentities terra.BoolValue `hcl:"allow_unauthenticated_identities,attr"`
	// DeveloperProviderName: string, optional
	DeveloperProviderName terra.StringValue `hcl:"developer_provider_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityPoolName: string, required
	IdentityPoolName terra.StringValue `hcl:"identity_pool_name,attr" validate:"required"`
	// OpenidConnectProviderArns: set of string, optional
	OpenidConnectProviderArns terra.SetValue[terra.StringValue] `hcl:"openid_connect_provider_arns,attr"`
	// SamlProviderArns: list of string, optional
	SamlProviderArns terra.ListValue[terra.StringValue] `hcl:"saml_provider_arns,attr"`
	// SupportedLoginProviders: map of string, optional
	SupportedLoginProviders terra.MapValue[terra.StringValue] `hcl:"supported_login_providers,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CognitoIdentityProviders: min=0
	CognitoIdentityProviders []cognitoidentitypool.CognitoIdentityProviders `hcl:"cognito_identity_providers,block" validate:"min=0"`
	// DependsOn contains resources that CognitoIdentityPool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cognitoIdentityPoolAttributes struct {
	ref terra.Reference
}

func (cip cognitoIdentityPoolAttributes) AllowClassicFlow() terra.BoolValue {
	return terra.ReferenceBool(cip.ref.Append("allow_classic_flow"))
}

func (cip cognitoIdentityPoolAttributes) AllowUnauthenticatedIdentities() terra.BoolValue {
	return terra.ReferenceBool(cip.ref.Append("allow_unauthenticated_identities"))
}

func (cip cognitoIdentityPoolAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cip.ref.Append("arn"))
}

func (cip cognitoIdentityPoolAttributes) DeveloperProviderName() terra.StringValue {
	return terra.ReferenceString(cip.ref.Append("developer_provider_name"))
}

func (cip cognitoIdentityPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cip.ref.Append("id"))
}

func (cip cognitoIdentityPoolAttributes) IdentityPoolName() terra.StringValue {
	return terra.ReferenceString(cip.ref.Append("identity_pool_name"))
}

func (cip cognitoIdentityPoolAttributes) OpenidConnectProviderArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cip.ref.Append("openid_connect_provider_arns"))
}

func (cip cognitoIdentityPoolAttributes) SamlProviderArns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cip.ref.Append("saml_provider_arns"))
}

func (cip cognitoIdentityPoolAttributes) SupportedLoginProviders() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cip.ref.Append("supported_login_providers"))
}

func (cip cognitoIdentityPoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cip.ref.Append("tags"))
}

func (cip cognitoIdentityPoolAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cip.ref.Append("tags_all"))
}

func (cip cognitoIdentityPoolAttributes) CognitoIdentityProviders() terra.SetValue[cognitoidentitypool.CognitoIdentityProvidersAttributes] {
	return terra.ReferenceSet[cognitoidentitypool.CognitoIdentityProvidersAttributes](cip.ref.Append("cognito_identity_providers"))
}

type cognitoIdentityPoolState struct {
	AllowClassicFlow               bool                                                `json:"allow_classic_flow"`
	AllowUnauthenticatedIdentities bool                                                `json:"allow_unauthenticated_identities"`
	Arn                            string                                              `json:"arn"`
	DeveloperProviderName          string                                              `json:"developer_provider_name"`
	Id                             string                                              `json:"id"`
	IdentityPoolName               string                                              `json:"identity_pool_name"`
	OpenidConnectProviderArns      []string                                            `json:"openid_connect_provider_arns"`
	SamlProviderArns               []string                                            `json:"saml_provider_arns"`
	SupportedLoginProviders        map[string]string                                   `json:"supported_login_providers"`
	Tags                           map[string]string                                   `json:"tags"`
	TagsAll                        map[string]string                                   `json:"tags_all"`
	CognitoIdentityProviders       []cognitoidentitypool.CognitoIdentityProvidersState `json:"cognito_identity_providers"`
}
