// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	inspector2delegatedadminaccount "github.com/golingon/terraproviders/aws/4.60.0/inspector2delegatedadminaccount"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewInspector2DelegatedAdminAccount(name string, args Inspector2DelegatedAdminAccountArgs) *Inspector2DelegatedAdminAccount {
	return &Inspector2DelegatedAdminAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Inspector2DelegatedAdminAccount)(nil)

type Inspector2DelegatedAdminAccount struct {
	Name  string
	Args  Inspector2DelegatedAdminAccountArgs
	state *inspector2DelegatedAdminAccountState
}

func (idaa *Inspector2DelegatedAdminAccount) Type() string {
	return "aws_inspector2_delegated_admin_account"
}

func (idaa *Inspector2DelegatedAdminAccount) LocalName() string {
	return idaa.Name
}

func (idaa *Inspector2DelegatedAdminAccount) Configuration() interface{} {
	return idaa.Args
}

func (idaa *Inspector2DelegatedAdminAccount) Attributes() inspector2DelegatedAdminAccountAttributes {
	return inspector2DelegatedAdminAccountAttributes{ref: terra.ReferenceResource(idaa)}
}

func (idaa *Inspector2DelegatedAdminAccount) ImportState(av io.Reader) error {
	idaa.state = &inspector2DelegatedAdminAccountState{}
	if err := json.NewDecoder(av).Decode(idaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", idaa.Type(), idaa.LocalName(), err)
	}
	return nil
}

func (idaa *Inspector2DelegatedAdminAccount) State() (*inspector2DelegatedAdminAccountState, bool) {
	return idaa.state, idaa.state != nil
}

func (idaa *Inspector2DelegatedAdminAccount) StateMust() *inspector2DelegatedAdminAccountState {
	if idaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", idaa.Type(), idaa.LocalName()))
	}
	return idaa.state
}

func (idaa *Inspector2DelegatedAdminAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(idaa)
}

type Inspector2DelegatedAdminAccountArgs struct {
	// AccountId: string, required
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *inspector2delegatedadminaccount.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Inspector2DelegatedAdminAccount depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type inspector2DelegatedAdminAccountAttributes struct {
	ref terra.Reference
}

func (idaa inspector2DelegatedAdminAccountAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(idaa.ref.Append("account_id"))
}

func (idaa inspector2DelegatedAdminAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(idaa.ref.Append("id"))
}

func (idaa inspector2DelegatedAdminAccountAttributes) RelationshipStatus() terra.StringValue {
	return terra.ReferenceString(idaa.ref.Append("relationship_status"))
}

func (idaa inspector2DelegatedAdminAccountAttributes) Timeouts() inspector2delegatedadminaccount.TimeoutsAttributes {
	return terra.ReferenceSingle[inspector2delegatedadminaccount.TimeoutsAttributes](idaa.ref.Append("timeouts"))
}

type inspector2DelegatedAdminAccountState struct {
	AccountId          string                                         `json:"account_id"`
	Id                 string                                         `json:"id"`
	RelationshipStatus string                                         `json:"relationship_status"`
	Timeouts           *inspector2delegatedadminaccount.TimeoutsState `json:"timeouts"`
}
