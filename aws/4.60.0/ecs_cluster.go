// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ecscluster "github.com/golingon/terraproviders/aws/4.60.0/ecscluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEcsCluster(name string, args EcsClusterArgs) *EcsCluster {
	return &EcsCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EcsCluster)(nil)

type EcsCluster struct {
	Name  string
	Args  EcsClusterArgs
	state *ecsClusterState
}

func (ec *EcsCluster) Type() string {
	return "aws_ecs_cluster"
}

func (ec *EcsCluster) LocalName() string {
	return ec.Name
}

func (ec *EcsCluster) Configuration() interface{} {
	return ec.Args
}

func (ec *EcsCluster) Attributes() ecsClusterAttributes {
	return ecsClusterAttributes{ref: terra.ReferenceResource(ec)}
}

func (ec *EcsCluster) ImportState(av io.Reader) error {
	ec.state = &ecsClusterState{}
	if err := json.NewDecoder(av).Decode(ec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ec.Type(), ec.LocalName(), err)
	}
	return nil
}

func (ec *EcsCluster) State() (*ecsClusterState, bool) {
	return ec.state, ec.state != nil
}

func (ec *EcsCluster) StateMust() *ecsClusterState {
	if ec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ec.Type(), ec.LocalName()))
	}
	return ec.state
}

func (ec *EcsCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(ec)
}

type EcsClusterArgs struct {
	// CapacityProviders: set of string, optional
	CapacityProviders terra.SetValue[terra.StringValue] `hcl:"capacity_providers,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Configuration: optional
	Configuration *ecscluster.Configuration `hcl:"configuration,block"`
	// DefaultCapacityProviderStrategy: min=0
	DefaultCapacityProviderStrategy []ecscluster.DefaultCapacityProviderStrategy `hcl:"default_capacity_provider_strategy,block" validate:"min=0"`
	// ServiceConnectDefaults: optional
	ServiceConnectDefaults *ecscluster.ServiceConnectDefaults `hcl:"service_connect_defaults,block"`
	// Setting: min=0
	Setting []ecscluster.Setting `hcl:"setting,block" validate:"min=0"`
	// DependsOn contains resources that EcsCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ecsClusterAttributes struct {
	ref terra.Reference
}

func (ec ecsClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("arn"))
}

func (ec ecsClusterAttributes) CapacityProviders() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ec.ref.Append("capacity_providers"))
}

func (ec ecsClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("id"))
}

func (ec ecsClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("name"))
}

func (ec ecsClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ec.ref.Append("tags"))
}

func (ec ecsClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ec.ref.Append("tags_all"))
}

func (ec ecsClusterAttributes) Configuration() terra.ListValue[ecscluster.ConfigurationAttributes] {
	return terra.ReferenceList[ecscluster.ConfigurationAttributes](ec.ref.Append("configuration"))
}

func (ec ecsClusterAttributes) DefaultCapacityProviderStrategy() terra.SetValue[ecscluster.DefaultCapacityProviderStrategyAttributes] {
	return terra.ReferenceSet[ecscluster.DefaultCapacityProviderStrategyAttributes](ec.ref.Append("default_capacity_provider_strategy"))
}

func (ec ecsClusterAttributes) ServiceConnectDefaults() terra.ListValue[ecscluster.ServiceConnectDefaultsAttributes] {
	return terra.ReferenceList[ecscluster.ServiceConnectDefaultsAttributes](ec.ref.Append("service_connect_defaults"))
}

func (ec ecsClusterAttributes) Setting() terra.SetValue[ecscluster.SettingAttributes] {
	return terra.ReferenceSet[ecscluster.SettingAttributes](ec.ref.Append("setting"))
}

type ecsClusterState struct {
	Arn                             string                                            `json:"arn"`
	CapacityProviders               []string                                          `json:"capacity_providers"`
	Id                              string                                            `json:"id"`
	Name                            string                                            `json:"name"`
	Tags                            map[string]string                                 `json:"tags"`
	TagsAll                         map[string]string                                 `json:"tags_all"`
	Configuration                   []ecscluster.ConfigurationState                   `json:"configuration"`
	DefaultCapacityProviderStrategy []ecscluster.DefaultCapacityProviderStrategyState `json:"default_capacity_provider_strategy"`
	ServiceConnectDefaults          []ecscluster.ServiceConnectDefaultsState          `json:"service_connect_defaults"`
	Setting                         []ecscluster.SettingState                         `json:"setting"`
}
