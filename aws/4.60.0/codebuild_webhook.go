// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	codebuildwebhook "github.com/golingon/terraproviders/aws/4.60.0/codebuildwebhook"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCodebuildWebhook(name string, args CodebuildWebhookArgs) *CodebuildWebhook {
	return &CodebuildWebhook{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodebuildWebhook)(nil)

type CodebuildWebhook struct {
	Name  string
	Args  CodebuildWebhookArgs
	state *codebuildWebhookState
}

func (cw *CodebuildWebhook) Type() string {
	return "aws_codebuild_webhook"
}

func (cw *CodebuildWebhook) LocalName() string {
	return cw.Name
}

func (cw *CodebuildWebhook) Configuration() interface{} {
	return cw.Args
}

func (cw *CodebuildWebhook) Attributes() codebuildWebhookAttributes {
	return codebuildWebhookAttributes{ref: terra.ReferenceResource(cw)}
}

func (cw *CodebuildWebhook) ImportState(av io.Reader) error {
	cw.state = &codebuildWebhookState{}
	if err := json.NewDecoder(av).Decode(cw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cw.Type(), cw.LocalName(), err)
	}
	return nil
}

func (cw *CodebuildWebhook) State() (*codebuildWebhookState, bool) {
	return cw.state, cw.state != nil
}

func (cw *CodebuildWebhook) StateMust() *codebuildWebhookState {
	if cw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cw.Type(), cw.LocalName()))
	}
	return cw.state
}

func (cw *CodebuildWebhook) DependOn() terra.Reference {
	return terra.ReferenceResource(cw)
}

type CodebuildWebhookArgs struct {
	// BranchFilter: string, optional
	BranchFilter terra.StringValue `hcl:"branch_filter,attr"`
	// BuildType: string, optional
	BuildType terra.StringValue `hcl:"build_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProjectName: string, required
	ProjectName terra.StringValue `hcl:"project_name,attr" validate:"required"`
	// FilterGroup: min=0
	FilterGroup []codebuildwebhook.FilterGroup `hcl:"filter_group,block" validate:"min=0"`
	// DependsOn contains resources that CodebuildWebhook depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type codebuildWebhookAttributes struct {
	ref terra.Reference
}

func (cw codebuildWebhookAttributes) BranchFilter() terra.StringValue {
	return terra.ReferenceString(cw.ref.Append("branch_filter"))
}

func (cw codebuildWebhookAttributes) BuildType() terra.StringValue {
	return terra.ReferenceString(cw.ref.Append("build_type"))
}

func (cw codebuildWebhookAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cw.ref.Append("id"))
}

func (cw codebuildWebhookAttributes) PayloadUrl() terra.StringValue {
	return terra.ReferenceString(cw.ref.Append("payload_url"))
}

func (cw codebuildWebhookAttributes) ProjectName() terra.StringValue {
	return terra.ReferenceString(cw.ref.Append("project_name"))
}

func (cw codebuildWebhookAttributes) Secret() terra.StringValue {
	return terra.ReferenceString(cw.ref.Append("secret"))
}

func (cw codebuildWebhookAttributes) Url() terra.StringValue {
	return terra.ReferenceString(cw.ref.Append("url"))
}

func (cw codebuildWebhookAttributes) FilterGroup() terra.SetValue[codebuildwebhook.FilterGroupAttributes] {
	return terra.ReferenceSet[codebuildwebhook.FilterGroupAttributes](cw.ref.Append("filter_group"))
}

type codebuildWebhookState struct {
	BranchFilter string                              `json:"branch_filter"`
	BuildType    string                              `json:"build_type"`
	Id           string                              `json:"id"`
	PayloadUrl   string                              `json:"payload_url"`
	ProjectName  string                              `json:"project_name"`
	Secret       string                              `json:"secret"`
	Url          string                              `json:"url"`
	FilterGroup  []codebuildwebhook.FilterGroupState `json:"filter_group"`
}
