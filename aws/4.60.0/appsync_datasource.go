// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	appsyncdatasource "github.com/golingon/terraproviders/aws/4.60.0/appsyncdatasource"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppsyncDatasource(name string, args AppsyncDatasourceArgs) *AppsyncDatasource {
	return &AppsyncDatasource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppsyncDatasource)(nil)

type AppsyncDatasource struct {
	Name  string
	Args  AppsyncDatasourceArgs
	state *appsyncDatasourceState
}

func (ad *AppsyncDatasource) Type() string {
	return "aws_appsync_datasource"
}

func (ad *AppsyncDatasource) LocalName() string {
	return ad.Name
}

func (ad *AppsyncDatasource) Configuration() interface{} {
	return ad.Args
}

func (ad *AppsyncDatasource) Attributes() appsyncDatasourceAttributes {
	return appsyncDatasourceAttributes{ref: terra.ReferenceResource(ad)}
}

func (ad *AppsyncDatasource) ImportState(av io.Reader) error {
	ad.state = &appsyncDatasourceState{}
	if err := json.NewDecoder(av).Decode(ad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ad.Type(), ad.LocalName(), err)
	}
	return nil
}

func (ad *AppsyncDatasource) State() (*appsyncDatasourceState, bool) {
	return ad.state, ad.state != nil
}

func (ad *AppsyncDatasource) StateMust() *appsyncDatasourceState {
	if ad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ad.Type(), ad.LocalName()))
	}
	return ad.state
}

func (ad *AppsyncDatasource) DependOn() terra.Reference {
	return terra.ReferenceResource(ad)
}

type AppsyncDatasourceArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServiceRoleArn: string, optional
	ServiceRoleArn terra.StringValue `hcl:"service_role_arn,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// DynamodbConfig: optional
	DynamodbConfig *appsyncdatasource.DynamodbConfig `hcl:"dynamodb_config,block"`
	// ElasticsearchConfig: optional
	ElasticsearchConfig *appsyncdatasource.ElasticsearchConfig `hcl:"elasticsearch_config,block"`
	// EventBridgeConfig: optional
	EventBridgeConfig *appsyncdatasource.EventBridgeConfig `hcl:"event_bridge_config,block"`
	// HttpConfig: optional
	HttpConfig *appsyncdatasource.HttpConfig `hcl:"http_config,block"`
	// LambdaConfig: optional
	LambdaConfig *appsyncdatasource.LambdaConfig `hcl:"lambda_config,block"`
	// RelationalDatabaseConfig: optional
	RelationalDatabaseConfig *appsyncdatasource.RelationalDatabaseConfig `hcl:"relational_database_config,block"`
	// DependsOn contains resources that AppsyncDatasource depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appsyncDatasourceAttributes struct {
	ref terra.Reference
}

func (ad appsyncDatasourceAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("api_id"))
}

func (ad appsyncDatasourceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("arn"))
}

func (ad appsyncDatasourceAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("description"))
}

func (ad appsyncDatasourceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("id"))
}

func (ad appsyncDatasourceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("name"))
}

func (ad appsyncDatasourceAttributes) ServiceRoleArn() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("service_role_arn"))
}

func (ad appsyncDatasourceAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("type"))
}

func (ad appsyncDatasourceAttributes) DynamodbConfig() terra.ListValue[appsyncdatasource.DynamodbConfigAttributes] {
	return terra.ReferenceList[appsyncdatasource.DynamodbConfigAttributes](ad.ref.Append("dynamodb_config"))
}

func (ad appsyncDatasourceAttributes) ElasticsearchConfig() terra.ListValue[appsyncdatasource.ElasticsearchConfigAttributes] {
	return terra.ReferenceList[appsyncdatasource.ElasticsearchConfigAttributes](ad.ref.Append("elasticsearch_config"))
}

func (ad appsyncDatasourceAttributes) EventBridgeConfig() terra.ListValue[appsyncdatasource.EventBridgeConfigAttributes] {
	return terra.ReferenceList[appsyncdatasource.EventBridgeConfigAttributes](ad.ref.Append("event_bridge_config"))
}

func (ad appsyncDatasourceAttributes) HttpConfig() terra.ListValue[appsyncdatasource.HttpConfigAttributes] {
	return terra.ReferenceList[appsyncdatasource.HttpConfigAttributes](ad.ref.Append("http_config"))
}

func (ad appsyncDatasourceAttributes) LambdaConfig() terra.ListValue[appsyncdatasource.LambdaConfigAttributes] {
	return terra.ReferenceList[appsyncdatasource.LambdaConfigAttributes](ad.ref.Append("lambda_config"))
}

func (ad appsyncDatasourceAttributes) RelationalDatabaseConfig() terra.ListValue[appsyncdatasource.RelationalDatabaseConfigAttributes] {
	return terra.ReferenceList[appsyncdatasource.RelationalDatabaseConfigAttributes](ad.ref.Append("relational_database_config"))
}

type appsyncDatasourceState struct {
	ApiId                    string                                            `json:"api_id"`
	Arn                      string                                            `json:"arn"`
	Description              string                                            `json:"description"`
	Id                       string                                            `json:"id"`
	Name                     string                                            `json:"name"`
	ServiceRoleArn           string                                            `json:"service_role_arn"`
	Type                     string                                            `json:"type"`
	DynamodbConfig           []appsyncdatasource.DynamodbConfigState           `json:"dynamodb_config"`
	ElasticsearchConfig      []appsyncdatasource.ElasticsearchConfigState      `json:"elasticsearch_config"`
	EventBridgeConfig        []appsyncdatasource.EventBridgeConfigState        `json:"event_bridge_config"`
	HttpConfig               []appsyncdatasource.HttpConfigState               `json:"http_config"`
	LambdaConfig             []appsyncdatasource.LambdaConfigState             `json:"lambda_config"`
	RelationalDatabaseConfig []appsyncdatasource.RelationalDatabaseConfigState `json:"relational_database_config"`
}
