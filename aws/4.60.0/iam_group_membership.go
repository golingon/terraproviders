// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamGroupMembership(name string, args IamGroupMembershipArgs) *IamGroupMembership {
	return &IamGroupMembership{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamGroupMembership)(nil)

type IamGroupMembership struct {
	Name  string
	Args  IamGroupMembershipArgs
	state *iamGroupMembershipState
}

func (igm *IamGroupMembership) Type() string {
	return "aws_iam_group_membership"
}

func (igm *IamGroupMembership) LocalName() string {
	return igm.Name
}

func (igm *IamGroupMembership) Configuration() interface{} {
	return igm.Args
}

func (igm *IamGroupMembership) Attributes() iamGroupMembershipAttributes {
	return iamGroupMembershipAttributes{ref: terra.ReferenceResource(igm)}
}

func (igm *IamGroupMembership) ImportState(av io.Reader) error {
	igm.state = &iamGroupMembershipState{}
	if err := json.NewDecoder(av).Decode(igm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", igm.Type(), igm.LocalName(), err)
	}
	return nil
}

func (igm *IamGroupMembership) State() (*iamGroupMembershipState, bool) {
	return igm.state, igm.state != nil
}

func (igm *IamGroupMembership) StateMust() *iamGroupMembershipState {
	if igm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", igm.Type(), igm.LocalName()))
	}
	return igm.state
}

func (igm *IamGroupMembership) DependOn() terra.Reference {
	return terra.ReferenceResource(igm)
}

type IamGroupMembershipArgs struct {
	// Group: string, required
	Group terra.StringValue `hcl:"group,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Users: set of string, required
	Users terra.SetValue[terra.StringValue] `hcl:"users,attr" validate:"required"`
	// DependsOn contains resources that IamGroupMembership depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamGroupMembershipAttributes struct {
	ref terra.Reference
}

func (igm iamGroupMembershipAttributes) Group() terra.StringValue {
	return terra.ReferenceString(igm.ref.Append("group"))
}

func (igm iamGroupMembershipAttributes) Id() terra.StringValue {
	return terra.ReferenceString(igm.ref.Append("id"))
}

func (igm iamGroupMembershipAttributes) Name() terra.StringValue {
	return terra.ReferenceString(igm.ref.Append("name"))
}

func (igm iamGroupMembershipAttributes) Users() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](igm.ref.Append("users"))
}

type iamGroupMembershipState struct {
	Group string   `json:"group"`
	Id    string   `json:"id"`
	Name  string   `json:"name"`
	Users []string `json:"users"`
}
