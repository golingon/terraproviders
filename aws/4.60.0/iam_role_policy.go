// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamRolePolicy(name string, args IamRolePolicyArgs) *IamRolePolicy {
	return &IamRolePolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamRolePolicy)(nil)

type IamRolePolicy struct {
	Name  string
	Args  IamRolePolicyArgs
	state *iamRolePolicyState
}

func (irp *IamRolePolicy) Type() string {
	return "aws_iam_role_policy"
}

func (irp *IamRolePolicy) LocalName() string {
	return irp.Name
}

func (irp *IamRolePolicy) Configuration() interface{} {
	return irp.Args
}

func (irp *IamRolePolicy) Attributes() iamRolePolicyAttributes {
	return iamRolePolicyAttributes{ref: terra.ReferenceResource(irp)}
}

func (irp *IamRolePolicy) ImportState(av io.Reader) error {
	irp.state = &iamRolePolicyState{}
	if err := json.NewDecoder(av).Decode(irp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", irp.Type(), irp.LocalName(), err)
	}
	return nil
}

func (irp *IamRolePolicy) State() (*iamRolePolicyState, bool) {
	return irp.state, irp.state != nil
}

func (irp *IamRolePolicy) StateMust() *iamRolePolicyState {
	if irp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", irp.Type(), irp.LocalName()))
	}
	return irp.state
}

func (irp *IamRolePolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(irp)
}

type IamRolePolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// DependsOn contains resources that IamRolePolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamRolePolicyAttributes struct {
	ref terra.Reference
}

func (irp iamRolePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(irp.ref.Append("id"))
}

func (irp iamRolePolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(irp.ref.Append("name"))
}

func (irp iamRolePolicyAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(irp.ref.Append("name_prefix"))
}

func (irp iamRolePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(irp.ref.Append("policy"))
}

func (irp iamRolePolicyAttributes) Role() terra.StringValue {
	return terra.ReferenceString(irp.ref.Append("role"))
}

type iamRolePolicyState struct {
	Id         string `json:"id"`
	Name       string `json:"name"`
	NamePrefix string `json:"name_prefix"`
	Policy     string `json:"policy"`
	Role       string `json:"role"`
}
