// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	servicecatalogprovisioningartifact "github.com/golingon/terraproviders/aws/4.60.0/servicecatalogprovisioningartifact"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicecatalogProvisioningArtifact(name string, args ServicecatalogProvisioningArtifactArgs) *ServicecatalogProvisioningArtifact {
	return &ServicecatalogProvisioningArtifact{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicecatalogProvisioningArtifact)(nil)

type ServicecatalogProvisioningArtifact struct {
	Name  string
	Args  ServicecatalogProvisioningArtifactArgs
	state *servicecatalogProvisioningArtifactState
}

func (spa *ServicecatalogProvisioningArtifact) Type() string {
	return "aws_servicecatalog_provisioning_artifact"
}

func (spa *ServicecatalogProvisioningArtifact) LocalName() string {
	return spa.Name
}

func (spa *ServicecatalogProvisioningArtifact) Configuration() interface{} {
	return spa.Args
}

func (spa *ServicecatalogProvisioningArtifact) Attributes() servicecatalogProvisioningArtifactAttributes {
	return servicecatalogProvisioningArtifactAttributes{ref: terra.ReferenceResource(spa)}
}

func (spa *ServicecatalogProvisioningArtifact) ImportState(av io.Reader) error {
	spa.state = &servicecatalogProvisioningArtifactState{}
	if err := json.NewDecoder(av).Decode(spa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", spa.Type(), spa.LocalName(), err)
	}
	return nil
}

func (spa *ServicecatalogProvisioningArtifact) State() (*servicecatalogProvisioningArtifactState, bool) {
	return spa.state, spa.state != nil
}

func (spa *ServicecatalogProvisioningArtifact) StateMust() *servicecatalogProvisioningArtifactState {
	if spa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", spa.Type(), spa.LocalName()))
	}
	return spa.state
}

func (spa *ServicecatalogProvisioningArtifact) DependOn() terra.Reference {
	return terra.ReferenceResource(spa)
}

type ServicecatalogProvisioningArtifactArgs struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Active: bool, optional
	Active terra.BoolValue `hcl:"active,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableTemplateValidation: bool, optional
	DisableTemplateValidation terra.BoolValue `hcl:"disable_template_validation,attr"`
	// Guidance: string, optional
	Guidance terra.StringValue `hcl:"guidance,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ProductId: string, required
	ProductId terra.StringValue `hcl:"product_id,attr" validate:"required"`
	// TemplatePhysicalId: string, optional
	TemplatePhysicalId terra.StringValue `hcl:"template_physical_id,attr"`
	// TemplateUrl: string, optional
	TemplateUrl terra.StringValue `hcl:"template_url,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Timeouts: optional
	Timeouts *servicecatalogprovisioningartifact.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServicecatalogProvisioningArtifact depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicecatalogProvisioningArtifactAttributes struct {
	ref terra.Reference
}

func (spa servicecatalogProvisioningArtifactAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("accept_language"))
}

func (spa servicecatalogProvisioningArtifactAttributes) Active() terra.BoolValue {
	return terra.ReferenceBool(spa.ref.Append("active"))
}

func (spa servicecatalogProvisioningArtifactAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("created_time"))
}

func (spa servicecatalogProvisioningArtifactAttributes) Description() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("description"))
}

func (spa servicecatalogProvisioningArtifactAttributes) DisableTemplateValidation() terra.BoolValue {
	return terra.ReferenceBool(spa.ref.Append("disable_template_validation"))
}

func (spa servicecatalogProvisioningArtifactAttributes) Guidance() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("guidance"))
}

func (spa servicecatalogProvisioningArtifactAttributes) Id() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("id"))
}

func (spa servicecatalogProvisioningArtifactAttributes) Name() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("name"))
}

func (spa servicecatalogProvisioningArtifactAttributes) ProductId() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("product_id"))
}

func (spa servicecatalogProvisioningArtifactAttributes) TemplatePhysicalId() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("template_physical_id"))
}

func (spa servicecatalogProvisioningArtifactAttributes) TemplateUrl() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("template_url"))
}

func (spa servicecatalogProvisioningArtifactAttributes) Type() terra.StringValue {
	return terra.ReferenceString(spa.ref.Append("type"))
}

func (spa servicecatalogProvisioningArtifactAttributes) Timeouts() servicecatalogprovisioningartifact.TimeoutsAttributes {
	return terra.ReferenceSingle[servicecatalogprovisioningartifact.TimeoutsAttributes](spa.ref.Append("timeouts"))
}

type servicecatalogProvisioningArtifactState struct {
	AcceptLanguage            string                                            `json:"accept_language"`
	Active                    bool                                              `json:"active"`
	CreatedTime               string                                            `json:"created_time"`
	Description               string                                            `json:"description"`
	DisableTemplateValidation bool                                              `json:"disable_template_validation"`
	Guidance                  string                                            `json:"guidance"`
	Id                        string                                            `json:"id"`
	Name                      string                                            `json:"name"`
	ProductId                 string                                            `json:"product_id"`
	TemplatePhysicalId        string                                            `json:"template_physical_id"`
	TemplateUrl               string                                            `json:"template_url"`
	Type                      string                                            `json:"type"`
	Timeouts                  *servicecatalogprovisioningartifact.TimeoutsState `json:"timeouts"`
}
