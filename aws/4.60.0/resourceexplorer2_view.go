// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	resourceexplorer2view "github.com/golingon/terraproviders/aws/4.60.0/resourceexplorer2view"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewResourceexplorer2View(name string, args Resourceexplorer2ViewArgs) *Resourceexplorer2View {
	return &Resourceexplorer2View{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resourceexplorer2View)(nil)

type Resourceexplorer2View struct {
	Name  string
	Args  Resourceexplorer2ViewArgs
	state *resourceexplorer2ViewState
}

func (rv *Resourceexplorer2View) Type() string {
	return "aws_resourceexplorer2_view"
}

func (rv *Resourceexplorer2View) LocalName() string {
	return rv.Name
}

func (rv *Resourceexplorer2View) Configuration() interface{} {
	return rv.Args
}

func (rv *Resourceexplorer2View) Attributes() resourceexplorer2ViewAttributes {
	return resourceexplorer2ViewAttributes{ref: terra.ReferenceResource(rv)}
}

func (rv *Resourceexplorer2View) ImportState(av io.Reader) error {
	rv.state = &resourceexplorer2ViewState{}
	if err := json.NewDecoder(av).Decode(rv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rv.Type(), rv.LocalName(), err)
	}
	return nil
}

func (rv *Resourceexplorer2View) State() (*resourceexplorer2ViewState, bool) {
	return rv.state, rv.state != nil
}

func (rv *Resourceexplorer2View) StateMust() *resourceexplorer2ViewState {
	if rv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rv.Type(), rv.LocalName()))
	}
	return rv.state
}

func (rv *Resourceexplorer2View) DependOn() terra.Reference {
	return terra.ReferenceResource(rv)
}

type Resourceexplorer2ViewArgs struct {
	// DefaultView: bool, optional
	DefaultView terra.BoolValue `hcl:"default_view,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filters: min=0
	Filters []resourceexplorer2view.Filters `hcl:"filters,block" validate:"min=0"`
	// IncludedProperty: min=0
	IncludedProperty []resourceexplorer2view.IncludedProperty `hcl:"included_property,block" validate:"min=0"`
	// DependsOn contains resources that Resourceexplorer2View depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type resourceexplorer2ViewAttributes struct {
	ref terra.Reference
}

func (rv resourceexplorer2ViewAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rv.ref.Append("arn"))
}

func (rv resourceexplorer2ViewAttributes) DefaultView() terra.BoolValue {
	return terra.ReferenceBool(rv.ref.Append("default_view"))
}

func (rv resourceexplorer2ViewAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rv.ref.Append("id"))
}

func (rv resourceexplorer2ViewAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rv.ref.Append("name"))
}

func (rv resourceexplorer2ViewAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rv.ref.Append("tags"))
}

func (rv resourceexplorer2ViewAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rv.ref.Append("tags_all"))
}

func (rv resourceexplorer2ViewAttributes) Filters() terra.ListValue[resourceexplorer2view.FiltersAttributes] {
	return terra.ReferenceList[resourceexplorer2view.FiltersAttributes](rv.ref.Append("filters"))
}

func (rv resourceexplorer2ViewAttributes) IncludedProperty() terra.ListValue[resourceexplorer2view.IncludedPropertyAttributes] {
	return terra.ReferenceList[resourceexplorer2view.IncludedPropertyAttributes](rv.ref.Append("included_property"))
}

type resourceexplorer2ViewState struct {
	Arn              string                                        `json:"arn"`
	DefaultView      bool                                          `json:"default_view"`
	Id               string                                        `json:"id"`
	Name             string                                        `json:"name"`
	Tags             map[string]string                             `json:"tags"`
	TagsAll          map[string]string                             `json:"tags_all"`
	Filters          []resourceexplorer2view.FiltersState          `json:"filters"`
	IncludedProperty []resourceexplorer2view.IncludedPropertyState `json:"included_property"`
}
