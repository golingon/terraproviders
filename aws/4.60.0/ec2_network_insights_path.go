// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2NetworkInsightsPath(name string, args Ec2NetworkInsightsPathArgs) *Ec2NetworkInsightsPath {
	return &Ec2NetworkInsightsPath{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2NetworkInsightsPath)(nil)

type Ec2NetworkInsightsPath struct {
	Name  string
	Args  Ec2NetworkInsightsPathArgs
	state *ec2NetworkInsightsPathState
}

func (enip *Ec2NetworkInsightsPath) Type() string {
	return "aws_ec2_network_insights_path"
}

func (enip *Ec2NetworkInsightsPath) LocalName() string {
	return enip.Name
}

func (enip *Ec2NetworkInsightsPath) Configuration() interface{} {
	return enip.Args
}

func (enip *Ec2NetworkInsightsPath) Attributes() ec2NetworkInsightsPathAttributes {
	return ec2NetworkInsightsPathAttributes{ref: terra.ReferenceResource(enip)}
}

func (enip *Ec2NetworkInsightsPath) ImportState(av io.Reader) error {
	enip.state = &ec2NetworkInsightsPathState{}
	if err := json.NewDecoder(av).Decode(enip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", enip.Type(), enip.LocalName(), err)
	}
	return nil
}

func (enip *Ec2NetworkInsightsPath) State() (*ec2NetworkInsightsPathState, bool) {
	return enip.state, enip.state != nil
}

func (enip *Ec2NetworkInsightsPath) StateMust() *ec2NetworkInsightsPathState {
	if enip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", enip.Type(), enip.LocalName()))
	}
	return enip.state
}

func (enip *Ec2NetworkInsightsPath) DependOn() terra.Reference {
	return terra.ReferenceResource(enip)
}

type Ec2NetworkInsightsPathArgs struct {
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// DestinationIp: string, optional
	DestinationIp terra.StringValue `hcl:"destination_ip,attr"`
	// DestinationPort: number, optional
	DestinationPort terra.NumberValue `hcl:"destination_port,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// SourceIp: string, optional
	SourceIp terra.StringValue `hcl:"source_ip,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that Ec2NetworkInsightsPath depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2NetworkInsightsPathAttributes struct {
	ref terra.Reference
}

func (enip ec2NetworkInsightsPathAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(enip.ref.Append("arn"))
}

func (enip ec2NetworkInsightsPathAttributes) Destination() terra.StringValue {
	return terra.ReferenceString(enip.ref.Append("destination"))
}

func (enip ec2NetworkInsightsPathAttributes) DestinationIp() terra.StringValue {
	return terra.ReferenceString(enip.ref.Append("destination_ip"))
}

func (enip ec2NetworkInsightsPathAttributes) DestinationPort() terra.NumberValue {
	return terra.ReferenceNumber(enip.ref.Append("destination_port"))
}

func (enip ec2NetworkInsightsPathAttributes) Id() terra.StringValue {
	return terra.ReferenceString(enip.ref.Append("id"))
}

func (enip ec2NetworkInsightsPathAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(enip.ref.Append("protocol"))
}

func (enip ec2NetworkInsightsPathAttributes) Source() terra.StringValue {
	return terra.ReferenceString(enip.ref.Append("source"))
}

func (enip ec2NetworkInsightsPathAttributes) SourceIp() terra.StringValue {
	return terra.ReferenceString(enip.ref.Append("source_ip"))
}

func (enip ec2NetworkInsightsPathAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](enip.ref.Append("tags"))
}

func (enip ec2NetworkInsightsPathAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](enip.ref.Append("tags_all"))
}

type ec2NetworkInsightsPathState struct {
	Arn             string            `json:"arn"`
	Destination     string            `json:"destination"`
	DestinationIp   string            `json:"destination_ip"`
	DestinationPort float64           `json:"destination_port"`
	Id              string            `json:"id"`
	Protocol        string            `json:"protocol"`
	Source          string            `json:"source"`
	SourceIp        string            `json:"source_ip"`
	Tags            map[string]string `json:"tags"`
	TagsAll         map[string]string `json:"tags_all"`
}
