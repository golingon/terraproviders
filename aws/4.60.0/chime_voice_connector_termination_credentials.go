// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	chimevoiceconnectorterminationcredentials "github.com/golingon/terraproviders/aws/4.60.0/chimevoiceconnectorterminationcredentials"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewChimeVoiceConnectorTerminationCredentials(name string, args ChimeVoiceConnectorTerminationCredentialsArgs) *ChimeVoiceConnectorTerminationCredentials {
	return &ChimeVoiceConnectorTerminationCredentials{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ChimeVoiceConnectorTerminationCredentials)(nil)

type ChimeVoiceConnectorTerminationCredentials struct {
	Name  string
	Args  ChimeVoiceConnectorTerminationCredentialsArgs
	state *chimeVoiceConnectorTerminationCredentialsState
}

func (cvctc *ChimeVoiceConnectorTerminationCredentials) Type() string {
	return "aws_chime_voice_connector_termination_credentials"
}

func (cvctc *ChimeVoiceConnectorTerminationCredentials) LocalName() string {
	return cvctc.Name
}

func (cvctc *ChimeVoiceConnectorTerminationCredentials) Configuration() interface{} {
	return cvctc.Args
}

func (cvctc *ChimeVoiceConnectorTerminationCredentials) Attributes() chimeVoiceConnectorTerminationCredentialsAttributes {
	return chimeVoiceConnectorTerminationCredentialsAttributes{ref: terra.ReferenceResource(cvctc)}
}

func (cvctc *ChimeVoiceConnectorTerminationCredentials) ImportState(av io.Reader) error {
	cvctc.state = &chimeVoiceConnectorTerminationCredentialsState{}
	if err := json.NewDecoder(av).Decode(cvctc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cvctc.Type(), cvctc.LocalName(), err)
	}
	return nil
}

func (cvctc *ChimeVoiceConnectorTerminationCredentials) State() (*chimeVoiceConnectorTerminationCredentialsState, bool) {
	return cvctc.state, cvctc.state != nil
}

func (cvctc *ChimeVoiceConnectorTerminationCredentials) StateMust() *chimeVoiceConnectorTerminationCredentialsState {
	if cvctc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cvctc.Type(), cvctc.LocalName()))
	}
	return cvctc.state
}

func (cvctc *ChimeVoiceConnectorTerminationCredentials) DependOn() terra.Reference {
	return terra.ReferenceResource(cvctc)
}

type ChimeVoiceConnectorTerminationCredentialsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VoiceConnectorId: string, required
	VoiceConnectorId terra.StringValue `hcl:"voice_connector_id,attr" validate:"required"`
	// Credentials: min=1,max=10
	Credentials []chimevoiceconnectorterminationcredentials.Credentials `hcl:"credentials,block" validate:"min=1,max=10"`
	// DependsOn contains resources that ChimeVoiceConnectorTerminationCredentials depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type chimeVoiceConnectorTerminationCredentialsAttributes struct {
	ref terra.Reference
}

func (cvctc chimeVoiceConnectorTerminationCredentialsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cvctc.ref.Append("id"))
}

func (cvctc chimeVoiceConnectorTerminationCredentialsAttributes) VoiceConnectorId() terra.StringValue {
	return terra.ReferenceString(cvctc.ref.Append("voice_connector_id"))
}

func (cvctc chimeVoiceConnectorTerminationCredentialsAttributes) Credentials() terra.SetValue[chimevoiceconnectorterminationcredentials.CredentialsAttributes] {
	return terra.ReferenceSet[chimevoiceconnectorterminationcredentials.CredentialsAttributes](cvctc.ref.Append("credentials"))
}

type chimeVoiceConnectorTerminationCredentialsState struct {
	Id               string                                                       `json:"id"`
	VoiceConnectorId string                                                       `json:"voice_connector_id"`
	Credentials      []chimevoiceconnectorterminationcredentials.CredentialsState `json:"credentials"`
}
