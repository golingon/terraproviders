// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2ManagedPrefixListEntry(name string, args Ec2ManagedPrefixListEntryArgs) *Ec2ManagedPrefixListEntry {
	return &Ec2ManagedPrefixListEntry{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2ManagedPrefixListEntry)(nil)

type Ec2ManagedPrefixListEntry struct {
	Name  string
	Args  Ec2ManagedPrefixListEntryArgs
	state *ec2ManagedPrefixListEntryState
}

func (emple *Ec2ManagedPrefixListEntry) Type() string {
	return "aws_ec2_managed_prefix_list_entry"
}

func (emple *Ec2ManagedPrefixListEntry) LocalName() string {
	return emple.Name
}

func (emple *Ec2ManagedPrefixListEntry) Configuration() interface{} {
	return emple.Args
}

func (emple *Ec2ManagedPrefixListEntry) Attributes() ec2ManagedPrefixListEntryAttributes {
	return ec2ManagedPrefixListEntryAttributes{ref: terra.ReferenceResource(emple)}
}

func (emple *Ec2ManagedPrefixListEntry) ImportState(av io.Reader) error {
	emple.state = &ec2ManagedPrefixListEntryState{}
	if err := json.NewDecoder(av).Decode(emple.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", emple.Type(), emple.LocalName(), err)
	}
	return nil
}

func (emple *Ec2ManagedPrefixListEntry) State() (*ec2ManagedPrefixListEntryState, bool) {
	return emple.state, emple.state != nil
}

func (emple *Ec2ManagedPrefixListEntry) StateMust() *ec2ManagedPrefixListEntryState {
	if emple.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", emple.Type(), emple.LocalName()))
	}
	return emple.state
}

func (emple *Ec2ManagedPrefixListEntry) DependOn() terra.Reference {
	return terra.ReferenceResource(emple)
}

type Ec2ManagedPrefixListEntryArgs struct {
	// Cidr: string, required
	Cidr terra.StringValue `hcl:"cidr,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PrefixListId: string, required
	PrefixListId terra.StringValue `hcl:"prefix_list_id,attr" validate:"required"`
	// DependsOn contains resources that Ec2ManagedPrefixListEntry depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2ManagedPrefixListEntryAttributes struct {
	ref terra.Reference
}

func (emple ec2ManagedPrefixListEntryAttributes) Cidr() terra.StringValue {
	return terra.ReferenceString(emple.ref.Append("cidr"))
}

func (emple ec2ManagedPrefixListEntryAttributes) Description() terra.StringValue {
	return terra.ReferenceString(emple.ref.Append("description"))
}

func (emple ec2ManagedPrefixListEntryAttributes) Id() terra.StringValue {
	return terra.ReferenceString(emple.ref.Append("id"))
}

func (emple ec2ManagedPrefixListEntryAttributes) PrefixListId() terra.StringValue {
	return terra.ReferenceString(emple.ref.Append("prefix_list_id"))
}

type ec2ManagedPrefixListEntryState struct {
	Cidr         string `json:"cidr"`
	Description  string `json:"description"`
	Id           string `json:"id"`
	PrefixListId string `json:"prefix_list_id"`
}
