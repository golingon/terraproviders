// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamServerCertificate(name string, args IamServerCertificateArgs) *IamServerCertificate {
	return &IamServerCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamServerCertificate)(nil)

type IamServerCertificate struct {
	Name  string
	Args  IamServerCertificateArgs
	state *iamServerCertificateState
}

func (isc *IamServerCertificate) Type() string {
	return "aws_iam_server_certificate"
}

func (isc *IamServerCertificate) LocalName() string {
	return isc.Name
}

func (isc *IamServerCertificate) Configuration() interface{} {
	return isc.Args
}

func (isc *IamServerCertificate) Attributes() iamServerCertificateAttributes {
	return iamServerCertificateAttributes{ref: terra.ReferenceResource(isc)}
}

func (isc *IamServerCertificate) ImportState(av io.Reader) error {
	isc.state = &iamServerCertificateState{}
	if err := json.NewDecoder(av).Decode(isc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", isc.Type(), isc.LocalName(), err)
	}
	return nil
}

func (isc *IamServerCertificate) State() (*iamServerCertificateState, bool) {
	return isc.state, isc.state != nil
}

func (isc *IamServerCertificate) StateMust() *iamServerCertificateState {
	if isc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", isc.Type(), isc.LocalName()))
	}
	return isc.state
}

func (isc *IamServerCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(isc)
}

type IamServerCertificateArgs struct {
	// CertificateBody: string, required
	CertificateBody terra.StringValue `hcl:"certificate_body,attr" validate:"required"`
	// CertificateChain: string, optional
	CertificateChain terra.StringValue `hcl:"certificate_chain,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// PrivateKey: string, required
	PrivateKey terra.StringValue `hcl:"private_key,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that IamServerCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamServerCertificateAttributes struct {
	ref terra.Reference
}

func (isc iamServerCertificateAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("arn"))
}

func (isc iamServerCertificateAttributes) CertificateBody() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("certificate_body"))
}

func (isc iamServerCertificateAttributes) CertificateChain() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("certificate_chain"))
}

func (isc iamServerCertificateAttributes) Expiration() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("expiration"))
}

func (isc iamServerCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("id"))
}

func (isc iamServerCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("name"))
}

func (isc iamServerCertificateAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("name_prefix"))
}

func (isc iamServerCertificateAttributes) Path() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("path"))
}

func (isc iamServerCertificateAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("private_key"))
}

func (isc iamServerCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](isc.ref.Append("tags"))
}

func (isc iamServerCertificateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](isc.ref.Append("tags_all"))
}

func (isc iamServerCertificateAttributes) UploadDate() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("upload_date"))
}

type iamServerCertificateState struct {
	Arn              string            `json:"arn"`
	CertificateBody  string            `json:"certificate_body"`
	CertificateChain string            `json:"certificate_chain"`
	Expiration       string            `json:"expiration"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	NamePrefix       string            `json:"name_prefix"`
	Path             string            `json:"path"`
	PrivateKey       string            `json:"private_key"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
	UploadDate       string            `json:"upload_date"`
}
