// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGuarddutyIpset(name string, args GuarddutyIpsetArgs) *GuarddutyIpset {
	return &GuarddutyIpset{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GuarddutyIpset)(nil)

type GuarddutyIpset struct {
	Name  string
	Args  GuarddutyIpsetArgs
	state *guarddutyIpsetState
}

func (gi *GuarddutyIpset) Type() string {
	return "aws_guardduty_ipset"
}

func (gi *GuarddutyIpset) LocalName() string {
	return gi.Name
}

func (gi *GuarddutyIpset) Configuration() interface{} {
	return gi.Args
}

func (gi *GuarddutyIpset) Attributes() guarddutyIpsetAttributes {
	return guarddutyIpsetAttributes{ref: terra.ReferenceResource(gi)}
}

func (gi *GuarddutyIpset) ImportState(av io.Reader) error {
	gi.state = &guarddutyIpsetState{}
	if err := json.NewDecoder(av).Decode(gi.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gi.Type(), gi.LocalName(), err)
	}
	return nil
}

func (gi *GuarddutyIpset) State() (*guarddutyIpsetState, bool) {
	return gi.state, gi.state != nil
}

func (gi *GuarddutyIpset) StateMust() *guarddutyIpsetState {
	if gi.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gi.Type(), gi.LocalName()))
	}
	return gi.state
}

func (gi *GuarddutyIpset) DependOn() terra.Reference {
	return terra.ReferenceResource(gi)
}

type GuarddutyIpsetArgs struct {
	// Activate: bool, required
	Activate terra.BoolValue `hcl:"activate,attr" validate:"required"`
	// DetectorId: string, required
	DetectorId terra.StringValue `hcl:"detector_id,attr" validate:"required"`
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Location: string, required
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that GuarddutyIpset depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type guarddutyIpsetAttributes struct {
	ref terra.Reference
}

func (gi guarddutyIpsetAttributes) Activate() terra.BoolValue {
	return terra.ReferenceBool(gi.ref.Append("activate"))
}

func (gi guarddutyIpsetAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(gi.ref.Append("arn"))
}

func (gi guarddutyIpsetAttributes) DetectorId() terra.StringValue {
	return terra.ReferenceString(gi.ref.Append("detector_id"))
}

func (gi guarddutyIpsetAttributes) Format() terra.StringValue {
	return terra.ReferenceString(gi.ref.Append("format"))
}

func (gi guarddutyIpsetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gi.ref.Append("id"))
}

func (gi guarddutyIpsetAttributes) Location() terra.StringValue {
	return terra.ReferenceString(gi.ref.Append("location"))
}

func (gi guarddutyIpsetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gi.ref.Append("name"))
}

func (gi guarddutyIpsetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gi.ref.Append("tags"))
}

func (gi guarddutyIpsetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gi.ref.Append("tags_all"))
}

type guarddutyIpsetState struct {
	Activate   bool              `json:"activate"`
	Arn        string            `json:"arn"`
	DetectorId string            `json:"detector_id"`
	Format     string            `json:"format"`
	Id         string            `json:"id"`
	Location   string            `json:"location"`
	Name       string            `json:"name"`
	Tags       map[string]string `json:"tags"`
	TagsAll    map[string]string `json:"tags_all"`
}
