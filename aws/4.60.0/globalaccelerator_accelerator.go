// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	globalacceleratoraccelerator "github.com/golingon/terraproviders/aws/4.60.0/globalacceleratoraccelerator"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGlobalacceleratorAccelerator(name string, args GlobalacceleratorAcceleratorArgs) *GlobalacceleratorAccelerator {
	return &GlobalacceleratorAccelerator{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GlobalacceleratorAccelerator)(nil)

type GlobalacceleratorAccelerator struct {
	Name  string
	Args  GlobalacceleratorAcceleratorArgs
	state *globalacceleratorAcceleratorState
}

func (ga *GlobalacceleratorAccelerator) Type() string {
	return "aws_globalaccelerator_accelerator"
}

func (ga *GlobalacceleratorAccelerator) LocalName() string {
	return ga.Name
}

func (ga *GlobalacceleratorAccelerator) Configuration() interface{} {
	return ga.Args
}

func (ga *GlobalacceleratorAccelerator) Attributes() globalacceleratorAcceleratorAttributes {
	return globalacceleratorAcceleratorAttributes{ref: terra.ReferenceResource(ga)}
}

func (ga *GlobalacceleratorAccelerator) ImportState(av io.Reader) error {
	ga.state = &globalacceleratorAcceleratorState{}
	if err := json.NewDecoder(av).Decode(ga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ga.Type(), ga.LocalName(), err)
	}
	return nil
}

func (ga *GlobalacceleratorAccelerator) State() (*globalacceleratorAcceleratorState, bool) {
	return ga.state, ga.state != nil
}

func (ga *GlobalacceleratorAccelerator) StateMust() *globalacceleratorAcceleratorState {
	if ga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ga.Type(), ga.LocalName()))
	}
	return ga.state
}

func (ga *GlobalacceleratorAccelerator) DependOn() terra.Reference {
	return terra.ReferenceResource(ga)
}

type GlobalacceleratorAcceleratorArgs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddressType: string, optional
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr"`
	// IpAddresses: list of string, optional
	IpAddresses terra.ListValue[terra.StringValue] `hcl:"ip_addresses,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// IpSets: min=0
	IpSets []globalacceleratoraccelerator.IpSets `hcl:"ip_sets,block" validate:"min=0"`
	// Attributes: optional
	Attributes *globalacceleratoraccelerator.Attributes `hcl:"attributes,block"`
	// Timeouts: optional
	Timeouts *globalacceleratoraccelerator.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that GlobalacceleratorAccelerator depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type globalacceleratorAcceleratorAttributes struct {
	ref terra.Reference
}

func (ga globalacceleratorAcceleratorAttributes) DnsName() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("dns_name"))
}

func (ga globalacceleratorAcceleratorAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(ga.ref.Append("enabled"))
}

func (ga globalacceleratorAcceleratorAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("hosted_zone_id"))
}

func (ga globalacceleratorAcceleratorAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("id"))
}

func (ga globalacceleratorAcceleratorAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("ip_address_type"))
}

func (ga globalacceleratorAcceleratorAttributes) IpAddresses() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ga.ref.Append("ip_addresses"))
}

func (ga globalacceleratorAcceleratorAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("name"))
}

func (ga globalacceleratorAcceleratorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ga.ref.Append("tags"))
}

func (ga globalacceleratorAcceleratorAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ga.ref.Append("tags_all"))
}

func (ga globalacceleratorAcceleratorAttributes) IpSets() terra.ListValue[globalacceleratoraccelerator.IpSetsAttributes] {
	return terra.ReferenceList[globalacceleratoraccelerator.IpSetsAttributes](ga.ref.Append("ip_sets"))
}

func (ga globalacceleratorAcceleratorAttributes) Attributes() terra.ListValue[globalacceleratoraccelerator.AttributesAttributes] {
	return terra.ReferenceList[globalacceleratoraccelerator.AttributesAttributes](ga.ref.Append("attributes"))
}

func (ga globalacceleratorAcceleratorAttributes) Timeouts() globalacceleratoraccelerator.TimeoutsAttributes {
	return terra.ReferenceSingle[globalacceleratoraccelerator.TimeoutsAttributes](ga.ref.Append("timeouts"))
}

type globalacceleratorAcceleratorState struct {
	DnsName       string                                         `json:"dns_name"`
	Enabled       bool                                           `json:"enabled"`
	HostedZoneId  string                                         `json:"hosted_zone_id"`
	Id            string                                         `json:"id"`
	IpAddressType string                                         `json:"ip_address_type"`
	IpAddresses   []string                                       `json:"ip_addresses"`
	Name          string                                         `json:"name"`
	Tags          map[string]string                              `json:"tags"`
	TagsAll       map[string]string                              `json:"tags_all"`
	IpSets        []globalacceleratoraccelerator.IpSetsState     `json:"ip_sets"`
	Attributes    []globalacceleratoraccelerator.AttributesState `json:"attributes"`
	Timeouts      *globalacceleratoraccelerator.TimeoutsState    `json:"timeouts"`
}
