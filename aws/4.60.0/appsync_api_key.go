// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewAppsyncApiKey creates a new instance of [AppsyncApiKey].
func NewAppsyncApiKey(name string, args AppsyncApiKeyArgs) *AppsyncApiKey {
	return &AppsyncApiKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppsyncApiKey)(nil)

// AppsyncApiKey represents the Terraform resource aws_appsync_api_key.
type AppsyncApiKey struct {
	Name      string
	Args      AppsyncApiKeyArgs
	state     *appsyncApiKeyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [AppsyncApiKey].
func (aak *AppsyncApiKey) Type() string {
	return "aws_appsync_api_key"
}

// LocalName returns the local name for [AppsyncApiKey].
func (aak *AppsyncApiKey) LocalName() string {
	return aak.Name
}

// Configuration returns the configuration (args) for [AppsyncApiKey].
func (aak *AppsyncApiKey) Configuration() interface{} {
	return aak.Args
}

// DependOn is used for other resources to depend on [AppsyncApiKey].
func (aak *AppsyncApiKey) DependOn() terra.Reference {
	return terra.ReferenceResource(aak)
}

// Dependencies returns the list of resources [AppsyncApiKey] depends_on.
func (aak *AppsyncApiKey) Dependencies() terra.Dependencies {
	return aak.DependsOn
}

// LifecycleManagement returns the lifecycle block for [AppsyncApiKey].
func (aak *AppsyncApiKey) LifecycleManagement() *terra.Lifecycle {
	return aak.Lifecycle
}

// Attributes returns the attributes for [AppsyncApiKey].
func (aak *AppsyncApiKey) Attributes() appsyncApiKeyAttributes {
	return appsyncApiKeyAttributes{ref: terra.ReferenceResource(aak)}
}

// ImportState imports the given attribute values into [AppsyncApiKey]'s state.
func (aak *AppsyncApiKey) ImportState(av io.Reader) error {
	aak.state = &appsyncApiKeyState{}
	if err := json.NewDecoder(av).Decode(aak.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aak.Type(), aak.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [AppsyncApiKey] has state.
func (aak *AppsyncApiKey) State() (*appsyncApiKeyState, bool) {
	return aak.state, aak.state != nil
}

// StateMust returns the state for [AppsyncApiKey]. Panics if the state is nil.
func (aak *AppsyncApiKey) StateMust() *appsyncApiKeyState {
	if aak.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aak.Type(), aak.LocalName()))
	}
	return aak.state
}

// AppsyncApiKeyArgs contains the configurations for aws_appsync_api_key.
type AppsyncApiKeyArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Expires: string, optional
	Expires terra.StringValue `hcl:"expires,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
}
type appsyncApiKeyAttributes struct {
	ref terra.Reference
}

// ApiId returns a reference to field api_id of aws_appsync_api_key.
func (aak appsyncApiKeyAttributes) ApiId() terra.StringValue {
	return terra.ReferenceAsString(aak.ref.Append("api_id"))
}

// Description returns a reference to field description of aws_appsync_api_key.
func (aak appsyncApiKeyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aak.ref.Append("description"))
}

// Expires returns a reference to field expires of aws_appsync_api_key.
func (aak appsyncApiKeyAttributes) Expires() terra.StringValue {
	return terra.ReferenceAsString(aak.ref.Append("expires"))
}

// Id returns a reference to field id of aws_appsync_api_key.
func (aak appsyncApiKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aak.ref.Append("id"))
}

// Key returns a reference to field key of aws_appsync_api_key.
func (aak appsyncApiKeyAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(aak.ref.Append("key"))
}

type appsyncApiKeyState struct {
	ApiId       string `json:"api_id"`
	Description string `json:"description"`
	Expires     string `json:"expires"`
	Id          string `json:"id"`
	Key         string `json:"key"`
}
