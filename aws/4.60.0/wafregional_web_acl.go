// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	wafregionalwebacl "github.com/golingon/terraproviders/aws/4.60.0/wafregionalwebacl"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWafregionalWebAcl(name string, args WafregionalWebAclArgs) *WafregionalWebAcl {
	return &WafregionalWebAcl{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WafregionalWebAcl)(nil)

type WafregionalWebAcl struct {
	Name  string
	Args  WafregionalWebAclArgs
	state *wafregionalWebAclState
}

func (wwa *WafregionalWebAcl) Type() string {
	return "aws_wafregional_web_acl"
}

func (wwa *WafregionalWebAcl) LocalName() string {
	return wwa.Name
}

func (wwa *WafregionalWebAcl) Configuration() interface{} {
	return wwa.Args
}

func (wwa *WafregionalWebAcl) Attributes() wafregionalWebAclAttributes {
	return wafregionalWebAclAttributes{ref: terra.ReferenceResource(wwa)}
}

func (wwa *WafregionalWebAcl) ImportState(av io.Reader) error {
	wwa.state = &wafregionalWebAclState{}
	if err := json.NewDecoder(av).Decode(wwa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wwa.Type(), wwa.LocalName(), err)
	}
	return nil
}

func (wwa *WafregionalWebAcl) State() (*wafregionalWebAclState, bool) {
	return wwa.state, wwa.state != nil
}

func (wwa *WafregionalWebAcl) StateMust() *wafregionalWebAclState {
	if wwa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wwa.Type(), wwa.LocalName()))
	}
	return wwa.state
}

func (wwa *WafregionalWebAcl) DependOn() terra.Reference {
	return terra.ReferenceResource(wwa)
}

type WafregionalWebAclArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MetricName: string, required
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DefaultAction: required
	DefaultAction *wafregionalwebacl.DefaultAction `hcl:"default_action,block" validate:"required"`
	// LoggingConfiguration: optional
	LoggingConfiguration *wafregionalwebacl.LoggingConfiguration `hcl:"logging_configuration,block"`
	// Rule: min=0
	Rule []wafregionalwebacl.Rule `hcl:"rule,block" validate:"min=0"`
	// DependsOn contains resources that WafregionalWebAcl depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type wafregionalWebAclAttributes struct {
	ref terra.Reference
}

func (wwa wafregionalWebAclAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("arn"))
}

func (wwa wafregionalWebAclAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("id"))
}

func (wwa wafregionalWebAclAttributes) MetricName() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("metric_name"))
}

func (wwa wafregionalWebAclAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("name"))
}

func (wwa wafregionalWebAclAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wwa.ref.Append("tags"))
}

func (wwa wafregionalWebAclAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wwa.ref.Append("tags_all"))
}

func (wwa wafregionalWebAclAttributes) DefaultAction() terra.ListValue[wafregionalwebacl.DefaultActionAttributes] {
	return terra.ReferenceList[wafregionalwebacl.DefaultActionAttributes](wwa.ref.Append("default_action"))
}

func (wwa wafregionalWebAclAttributes) LoggingConfiguration() terra.ListValue[wafregionalwebacl.LoggingConfigurationAttributes] {
	return terra.ReferenceList[wafregionalwebacl.LoggingConfigurationAttributes](wwa.ref.Append("logging_configuration"))
}

func (wwa wafregionalWebAclAttributes) Rule() terra.SetValue[wafregionalwebacl.RuleAttributes] {
	return terra.ReferenceSet[wafregionalwebacl.RuleAttributes](wwa.ref.Append("rule"))
}

type wafregionalWebAclState struct {
	Arn                  string                                        `json:"arn"`
	Id                   string                                        `json:"id"`
	MetricName           string                                        `json:"metric_name"`
	Name                 string                                        `json:"name"`
	Tags                 map[string]string                             `json:"tags"`
	TagsAll              map[string]string                             `json:"tags_all"`
	DefaultAction        []wafregionalwebacl.DefaultActionState        `json:"default_action"`
	LoggingConfiguration []wafregionalwebacl.LoggingConfigurationState `json:"logging_configuration"`
	Rule                 []wafregionalwebacl.RuleState                 `json:"rule"`
}
