// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkmanagerlink "github.com/golingon/terraproviders/aws/4.60.0/networkmanagerlink"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkmanagerLink(name string, args NetworkmanagerLinkArgs) *NetworkmanagerLink {
	return &NetworkmanagerLink{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkmanagerLink)(nil)

type NetworkmanagerLink struct {
	Name  string
	Args  NetworkmanagerLinkArgs
	state *networkmanagerLinkState
}

func (nl *NetworkmanagerLink) Type() string {
	return "aws_networkmanager_link"
}

func (nl *NetworkmanagerLink) LocalName() string {
	return nl.Name
}

func (nl *NetworkmanagerLink) Configuration() interface{} {
	return nl.Args
}

func (nl *NetworkmanagerLink) Attributes() networkmanagerLinkAttributes {
	return networkmanagerLinkAttributes{ref: terra.ReferenceResource(nl)}
}

func (nl *NetworkmanagerLink) ImportState(av io.Reader) error {
	nl.state = &networkmanagerLinkState{}
	if err := json.NewDecoder(av).Decode(nl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nl.Type(), nl.LocalName(), err)
	}
	return nil
}

func (nl *NetworkmanagerLink) State() (*networkmanagerLinkState, bool) {
	return nl.state, nl.state != nil
}

func (nl *NetworkmanagerLink) StateMust() *networkmanagerLinkState {
	if nl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nl.Type(), nl.LocalName()))
	}
	return nl.state
}

func (nl *NetworkmanagerLink) DependOn() terra.Reference {
	return terra.ReferenceResource(nl)
}

type NetworkmanagerLinkArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GlobalNetworkId: string, required
	GlobalNetworkId terra.StringValue `hcl:"global_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProviderName: string, optional
	ProviderName terra.StringValue `hcl:"provider_name,attr"`
	// SiteId: string, required
	SiteId terra.StringValue `hcl:"site_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Bandwidth: required
	Bandwidth *networkmanagerlink.Bandwidth `hcl:"bandwidth,block" validate:"required"`
	// Timeouts: optional
	Timeouts *networkmanagerlink.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkmanagerLink depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkmanagerLinkAttributes struct {
	ref terra.Reference
}

func (nl networkmanagerLinkAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(nl.ref.Append("arn"))
}

func (nl networkmanagerLinkAttributes) Description() terra.StringValue {
	return terra.ReferenceString(nl.ref.Append("description"))
}

func (nl networkmanagerLinkAttributes) GlobalNetworkId() terra.StringValue {
	return terra.ReferenceString(nl.ref.Append("global_network_id"))
}

func (nl networkmanagerLinkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nl.ref.Append("id"))
}

func (nl networkmanagerLinkAttributes) ProviderName() terra.StringValue {
	return terra.ReferenceString(nl.ref.Append("provider_name"))
}

func (nl networkmanagerLinkAttributes) SiteId() terra.StringValue {
	return terra.ReferenceString(nl.ref.Append("site_id"))
}

func (nl networkmanagerLinkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nl.ref.Append("tags"))
}

func (nl networkmanagerLinkAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nl.ref.Append("tags_all"))
}

func (nl networkmanagerLinkAttributes) Type() terra.StringValue {
	return terra.ReferenceString(nl.ref.Append("type"))
}

func (nl networkmanagerLinkAttributes) Bandwidth() terra.ListValue[networkmanagerlink.BandwidthAttributes] {
	return terra.ReferenceList[networkmanagerlink.BandwidthAttributes](nl.ref.Append("bandwidth"))
}

func (nl networkmanagerLinkAttributes) Timeouts() networkmanagerlink.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagerlink.TimeoutsAttributes](nl.ref.Append("timeouts"))
}

type networkmanagerLinkState struct {
	Arn             string                              `json:"arn"`
	Description     string                              `json:"description"`
	GlobalNetworkId string                              `json:"global_network_id"`
	Id              string                              `json:"id"`
	ProviderName    string                              `json:"provider_name"`
	SiteId          string                              `json:"site_id"`
	Tags            map[string]string                   `json:"tags"`
	TagsAll         map[string]string                   `json:"tags_all"`
	Type            string                              `json:"type"`
	Bandwidth       []networkmanagerlink.BandwidthState `json:"bandwidth"`
	Timeouts        *networkmanagerlink.TimeoutsState   `json:"timeouts"`
}
