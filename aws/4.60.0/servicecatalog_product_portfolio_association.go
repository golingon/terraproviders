// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	servicecatalogproductportfolioassociation "github.com/golingon/terraproviders/aws/4.60.0/servicecatalogproductportfolioassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicecatalogProductPortfolioAssociation(name string, args ServicecatalogProductPortfolioAssociationArgs) *ServicecatalogProductPortfolioAssociation {
	return &ServicecatalogProductPortfolioAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicecatalogProductPortfolioAssociation)(nil)

type ServicecatalogProductPortfolioAssociation struct {
	Name  string
	Args  ServicecatalogProductPortfolioAssociationArgs
	state *servicecatalogProductPortfolioAssociationState
}

func (sppa *ServicecatalogProductPortfolioAssociation) Type() string {
	return "aws_servicecatalog_product_portfolio_association"
}

func (sppa *ServicecatalogProductPortfolioAssociation) LocalName() string {
	return sppa.Name
}

func (sppa *ServicecatalogProductPortfolioAssociation) Configuration() interface{} {
	return sppa.Args
}

func (sppa *ServicecatalogProductPortfolioAssociation) Attributes() servicecatalogProductPortfolioAssociationAttributes {
	return servicecatalogProductPortfolioAssociationAttributes{ref: terra.ReferenceResource(sppa)}
}

func (sppa *ServicecatalogProductPortfolioAssociation) ImportState(av io.Reader) error {
	sppa.state = &servicecatalogProductPortfolioAssociationState{}
	if err := json.NewDecoder(av).Decode(sppa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sppa.Type(), sppa.LocalName(), err)
	}
	return nil
}

func (sppa *ServicecatalogProductPortfolioAssociation) State() (*servicecatalogProductPortfolioAssociationState, bool) {
	return sppa.state, sppa.state != nil
}

func (sppa *ServicecatalogProductPortfolioAssociation) StateMust() *servicecatalogProductPortfolioAssociationState {
	if sppa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sppa.Type(), sppa.LocalName()))
	}
	return sppa.state
}

func (sppa *ServicecatalogProductPortfolioAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(sppa)
}

type ServicecatalogProductPortfolioAssociationArgs struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PortfolioId: string, required
	PortfolioId terra.StringValue `hcl:"portfolio_id,attr" validate:"required"`
	// ProductId: string, required
	ProductId terra.StringValue `hcl:"product_id,attr" validate:"required"`
	// SourcePortfolioId: string, optional
	SourcePortfolioId terra.StringValue `hcl:"source_portfolio_id,attr"`
	// Timeouts: optional
	Timeouts *servicecatalogproductportfolioassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServicecatalogProductPortfolioAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicecatalogProductPortfolioAssociationAttributes struct {
	ref terra.Reference
}

func (sppa servicecatalogProductPortfolioAssociationAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceString(sppa.ref.Append("accept_language"))
}

func (sppa servicecatalogProductPortfolioAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sppa.ref.Append("id"))
}

func (sppa servicecatalogProductPortfolioAssociationAttributes) PortfolioId() terra.StringValue {
	return terra.ReferenceString(sppa.ref.Append("portfolio_id"))
}

func (sppa servicecatalogProductPortfolioAssociationAttributes) ProductId() terra.StringValue {
	return terra.ReferenceString(sppa.ref.Append("product_id"))
}

func (sppa servicecatalogProductPortfolioAssociationAttributes) SourcePortfolioId() terra.StringValue {
	return terra.ReferenceString(sppa.ref.Append("source_portfolio_id"))
}

func (sppa servicecatalogProductPortfolioAssociationAttributes) Timeouts() servicecatalogproductportfolioassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[servicecatalogproductportfolioassociation.TimeoutsAttributes](sppa.ref.Append("timeouts"))
}

type servicecatalogProductPortfolioAssociationState struct {
	AcceptLanguage    string                                                   `json:"accept_language"`
	Id                string                                                   `json:"id"`
	PortfolioId       string                                                   `json:"portfolio_id"`
	ProductId         string                                                   `json:"product_id"`
	SourcePortfolioId string                                                   `json:"source_portfolio_id"`
	Timeouts          *servicecatalogproductportfolioassociation.TimeoutsState `json:"timeouts"`
}
