// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	mediapackagechannel "github.com/golingon/terraproviders/aws/4.60.0/mediapackagechannel"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMediaPackageChannel(name string, args MediaPackageChannelArgs) *MediaPackageChannel {
	return &MediaPackageChannel{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MediaPackageChannel)(nil)

type MediaPackageChannel struct {
	Name  string
	Args  MediaPackageChannelArgs
	state *mediaPackageChannelState
}

func (mpc *MediaPackageChannel) Type() string {
	return "aws_media_package_channel"
}

func (mpc *MediaPackageChannel) LocalName() string {
	return mpc.Name
}

func (mpc *MediaPackageChannel) Configuration() interface{} {
	return mpc.Args
}

func (mpc *MediaPackageChannel) Attributes() mediaPackageChannelAttributes {
	return mediaPackageChannelAttributes{ref: terra.ReferenceResource(mpc)}
}

func (mpc *MediaPackageChannel) ImportState(av io.Reader) error {
	mpc.state = &mediaPackageChannelState{}
	if err := json.NewDecoder(av).Decode(mpc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mpc.Type(), mpc.LocalName(), err)
	}
	return nil
}

func (mpc *MediaPackageChannel) State() (*mediaPackageChannelState, bool) {
	return mpc.state, mpc.state != nil
}

func (mpc *MediaPackageChannel) StateMust() *mediaPackageChannelState {
	if mpc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mpc.Type(), mpc.LocalName()))
	}
	return mpc.state
}

func (mpc *MediaPackageChannel) DependOn() terra.Reference {
	return terra.ReferenceResource(mpc)
}

type MediaPackageChannelArgs struct {
	// ChannelId: string, required
	ChannelId terra.StringValue `hcl:"channel_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// HlsIngest: min=0
	HlsIngest []mediapackagechannel.HlsIngest `hcl:"hls_ingest,block" validate:"min=0"`
	// DependsOn contains resources that MediaPackageChannel depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mediaPackageChannelAttributes struct {
	ref terra.Reference
}

func (mpc mediaPackageChannelAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(mpc.ref.Append("arn"))
}

func (mpc mediaPackageChannelAttributes) ChannelId() terra.StringValue {
	return terra.ReferenceString(mpc.ref.Append("channel_id"))
}

func (mpc mediaPackageChannelAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mpc.ref.Append("description"))
}

func (mpc mediaPackageChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mpc.ref.Append("id"))
}

func (mpc mediaPackageChannelAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mpc.ref.Append("tags"))
}

func (mpc mediaPackageChannelAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mpc.ref.Append("tags_all"))
}

func (mpc mediaPackageChannelAttributes) HlsIngest() terra.ListValue[mediapackagechannel.HlsIngestAttributes] {
	return terra.ReferenceList[mediapackagechannel.HlsIngestAttributes](mpc.ref.Append("hls_ingest"))
}

type mediaPackageChannelState struct {
	Arn         string                               `json:"arn"`
	ChannelId   string                               `json:"channel_id"`
	Description string                               `json:"description"`
	Id          string                               `json:"id"`
	Tags        map[string]string                    `json:"tags"`
	TagsAll     map[string]string                    `json:"tags_all"`
	HlsIngest   []mediapackagechannel.HlsIngestState `json:"hls_ingest"`
}
