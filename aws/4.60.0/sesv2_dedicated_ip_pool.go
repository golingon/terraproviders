// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	sesv2dedicatedippool "github.com/golingon/terraproviders/aws/4.60.0/sesv2dedicatedippool"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSesv2DedicatedIpPool(name string, args Sesv2DedicatedIpPoolArgs) *Sesv2DedicatedIpPool {
	return &Sesv2DedicatedIpPool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Sesv2DedicatedIpPool)(nil)

type Sesv2DedicatedIpPool struct {
	Name  string
	Args  Sesv2DedicatedIpPoolArgs
	state *sesv2DedicatedIpPoolState
}

func (sdip *Sesv2DedicatedIpPool) Type() string {
	return "aws_sesv2_dedicated_ip_pool"
}

func (sdip *Sesv2DedicatedIpPool) LocalName() string {
	return sdip.Name
}

func (sdip *Sesv2DedicatedIpPool) Configuration() interface{} {
	return sdip.Args
}

func (sdip *Sesv2DedicatedIpPool) Attributes() sesv2DedicatedIpPoolAttributes {
	return sesv2DedicatedIpPoolAttributes{ref: terra.ReferenceResource(sdip)}
}

func (sdip *Sesv2DedicatedIpPool) ImportState(av io.Reader) error {
	sdip.state = &sesv2DedicatedIpPoolState{}
	if err := json.NewDecoder(av).Decode(sdip.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdip.Type(), sdip.LocalName(), err)
	}
	return nil
}

func (sdip *Sesv2DedicatedIpPool) State() (*sesv2DedicatedIpPoolState, bool) {
	return sdip.state, sdip.state != nil
}

func (sdip *Sesv2DedicatedIpPool) StateMust() *sesv2DedicatedIpPoolState {
	if sdip.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdip.Type(), sdip.LocalName()))
	}
	return sdip.state
}

func (sdip *Sesv2DedicatedIpPool) DependOn() terra.Reference {
	return terra.ReferenceResource(sdip)
}

type Sesv2DedicatedIpPoolArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PoolName: string, required
	PoolName terra.StringValue `hcl:"pool_name,attr" validate:"required"`
	// ScalingMode: string, optional
	ScalingMode terra.StringValue `hcl:"scaling_mode,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *sesv2dedicatedippool.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Sesv2DedicatedIpPool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sesv2DedicatedIpPoolAttributes struct {
	ref terra.Reference
}

func (sdip sesv2DedicatedIpPoolAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sdip.ref.Append("arn"))
}

func (sdip sesv2DedicatedIpPoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sdip.ref.Append("id"))
}

func (sdip sesv2DedicatedIpPoolAttributes) PoolName() terra.StringValue {
	return terra.ReferenceString(sdip.ref.Append("pool_name"))
}

func (sdip sesv2DedicatedIpPoolAttributes) ScalingMode() terra.StringValue {
	return terra.ReferenceString(sdip.ref.Append("scaling_mode"))
}

func (sdip sesv2DedicatedIpPoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sdip.ref.Append("tags"))
}

func (sdip sesv2DedicatedIpPoolAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sdip.ref.Append("tags_all"))
}

func (sdip sesv2DedicatedIpPoolAttributes) Timeouts() sesv2dedicatedippool.TimeoutsAttributes {
	return terra.ReferenceSingle[sesv2dedicatedippool.TimeoutsAttributes](sdip.ref.Append("timeouts"))
}

type sesv2DedicatedIpPoolState struct {
	Arn         string                              `json:"arn"`
	Id          string                              `json:"id"`
	PoolName    string                              `json:"pool_name"`
	ScalingMode string                              `json:"scaling_mode"`
	Tags        map[string]string                   `json:"tags"`
	TagsAll     map[string]string                   `json:"tags_all"`
	Timeouts    *sesv2dedicatedippool.TimeoutsState `json:"timeouts"`
}
