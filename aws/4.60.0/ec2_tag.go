// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2Tag(name string, args Ec2TagArgs) *Ec2Tag {
	return &Ec2Tag{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2Tag)(nil)

type Ec2Tag struct {
	Name  string
	Args  Ec2TagArgs
	state *ec2TagState
}

func (et *Ec2Tag) Type() string {
	return "aws_ec2_tag"
}

func (et *Ec2Tag) LocalName() string {
	return et.Name
}

func (et *Ec2Tag) Configuration() interface{} {
	return et.Args
}

func (et *Ec2Tag) Attributes() ec2TagAttributes {
	return ec2TagAttributes{ref: terra.ReferenceResource(et)}
}

func (et *Ec2Tag) ImportState(av io.Reader) error {
	et.state = &ec2TagState{}
	if err := json.NewDecoder(av).Decode(et.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", et.Type(), et.LocalName(), err)
	}
	return nil
}

func (et *Ec2Tag) State() (*ec2TagState, bool) {
	return et.state, et.state != nil
}

func (et *Ec2Tag) StateMust() *ec2TagState {
	if et.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", et.Type(), et.LocalName()))
	}
	return et.state
}

func (et *Ec2Tag) DependOn() terra.Reference {
	return terra.ReferenceResource(et)
}

type Ec2TagArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// DependsOn contains resources that Ec2Tag depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2TagAttributes struct {
	ref terra.Reference
}

func (et ec2TagAttributes) Id() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("id"))
}

func (et ec2TagAttributes) Key() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("key"))
}

func (et ec2TagAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("resource_id"))
}

func (et ec2TagAttributes) Value() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("value"))
}

type ec2TagState struct {
	Id         string `json:"id"`
	Key        string `json:"key"`
	ResourceId string `json:"resource_id"`
	Value      string `json:"value"`
}
