// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53QueryLog(name string, args Route53QueryLogArgs) *Route53QueryLog {
	return &Route53QueryLog{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53QueryLog)(nil)

type Route53QueryLog struct {
	Name  string
	Args  Route53QueryLogArgs
	state *route53QueryLogState
}

func (rql *Route53QueryLog) Type() string {
	return "aws_route53_query_log"
}

func (rql *Route53QueryLog) LocalName() string {
	return rql.Name
}

func (rql *Route53QueryLog) Configuration() interface{} {
	return rql.Args
}

func (rql *Route53QueryLog) Attributes() route53QueryLogAttributes {
	return route53QueryLogAttributes{ref: terra.ReferenceResource(rql)}
}

func (rql *Route53QueryLog) ImportState(av io.Reader) error {
	rql.state = &route53QueryLogState{}
	if err := json.NewDecoder(av).Decode(rql.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rql.Type(), rql.LocalName(), err)
	}
	return nil
}

func (rql *Route53QueryLog) State() (*route53QueryLogState, bool) {
	return rql.state, rql.state != nil
}

func (rql *Route53QueryLog) StateMust() *route53QueryLogState {
	if rql.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rql.Type(), rql.LocalName()))
	}
	return rql.state
}

func (rql *Route53QueryLog) DependOn() terra.Reference {
	return terra.ReferenceResource(rql)
}

type Route53QueryLogArgs struct {
	// CloudwatchLogGroupArn: string, required
	CloudwatchLogGroupArn terra.StringValue `hcl:"cloudwatch_log_group_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ZoneId: string, required
	ZoneId terra.StringValue `hcl:"zone_id,attr" validate:"required"`
	// DependsOn contains resources that Route53QueryLog depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53QueryLogAttributes struct {
	ref terra.Reference
}

func (rql route53QueryLogAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rql.ref.Append("arn"))
}

func (rql route53QueryLogAttributes) CloudwatchLogGroupArn() terra.StringValue {
	return terra.ReferenceString(rql.ref.Append("cloudwatch_log_group_arn"))
}

func (rql route53QueryLogAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rql.ref.Append("id"))
}

func (rql route53QueryLogAttributes) ZoneId() terra.StringValue {
	return terra.ReferenceString(rql.ref.Append("zone_id"))
}

type route53QueryLogState struct {
	Arn                   string `json:"arn"`
	CloudwatchLogGroupArn string `json:"cloudwatch_log_group_arn"`
	Id                    string `json:"id"`
	ZoneId                string `json:"zone_id"`
}
