// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDynamodbKinesisStreamingDestination(name string, args DynamodbKinesisStreamingDestinationArgs) *DynamodbKinesisStreamingDestination {
	return &DynamodbKinesisStreamingDestination{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DynamodbKinesisStreamingDestination)(nil)

type DynamodbKinesisStreamingDestination struct {
	Name  string
	Args  DynamodbKinesisStreamingDestinationArgs
	state *dynamodbKinesisStreamingDestinationState
}

func (dksd *DynamodbKinesisStreamingDestination) Type() string {
	return "aws_dynamodb_kinesis_streaming_destination"
}

func (dksd *DynamodbKinesisStreamingDestination) LocalName() string {
	return dksd.Name
}

func (dksd *DynamodbKinesisStreamingDestination) Configuration() interface{} {
	return dksd.Args
}

func (dksd *DynamodbKinesisStreamingDestination) Attributes() dynamodbKinesisStreamingDestinationAttributes {
	return dynamodbKinesisStreamingDestinationAttributes{ref: terra.ReferenceResource(dksd)}
}

func (dksd *DynamodbKinesisStreamingDestination) ImportState(av io.Reader) error {
	dksd.state = &dynamodbKinesisStreamingDestinationState{}
	if err := json.NewDecoder(av).Decode(dksd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dksd.Type(), dksd.LocalName(), err)
	}
	return nil
}

func (dksd *DynamodbKinesisStreamingDestination) State() (*dynamodbKinesisStreamingDestinationState, bool) {
	return dksd.state, dksd.state != nil
}

func (dksd *DynamodbKinesisStreamingDestination) StateMust() *dynamodbKinesisStreamingDestinationState {
	if dksd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dksd.Type(), dksd.LocalName()))
	}
	return dksd.state
}

func (dksd *DynamodbKinesisStreamingDestination) DependOn() terra.Reference {
	return terra.ReferenceResource(dksd)
}

type DynamodbKinesisStreamingDestinationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// StreamArn: string, required
	StreamArn terra.StringValue `hcl:"stream_arn,attr" validate:"required"`
	// TableName: string, required
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// DependsOn contains resources that DynamodbKinesisStreamingDestination depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dynamodbKinesisStreamingDestinationAttributes struct {
	ref terra.Reference
}

func (dksd dynamodbKinesisStreamingDestinationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dksd.ref.Append("id"))
}

func (dksd dynamodbKinesisStreamingDestinationAttributes) StreamArn() terra.StringValue {
	return terra.ReferenceString(dksd.ref.Append("stream_arn"))
}

func (dksd dynamodbKinesisStreamingDestinationAttributes) TableName() terra.StringValue {
	return terra.ReferenceString(dksd.ref.Append("table_name"))
}

type dynamodbKinesisStreamingDestinationState struct {
	Id        string `json:"id"`
	StreamArn string `json:"stream_arn"`
	TableName string `json:"table_name"`
}
