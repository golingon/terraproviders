// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	sfnstatemachine "github.com/golingon/terraproviders/aws/4.60.0/sfnstatemachine"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSfnStateMachine(name string, args SfnStateMachineArgs) *SfnStateMachine {
	return &SfnStateMachine{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SfnStateMachine)(nil)

type SfnStateMachine struct {
	Name  string
	Args  SfnStateMachineArgs
	state *sfnStateMachineState
}

func (ssm *SfnStateMachine) Type() string {
	return "aws_sfn_state_machine"
}

func (ssm *SfnStateMachine) LocalName() string {
	return ssm.Name
}

func (ssm *SfnStateMachine) Configuration() interface{} {
	return ssm.Args
}

func (ssm *SfnStateMachine) Attributes() sfnStateMachineAttributes {
	return sfnStateMachineAttributes{ref: terra.ReferenceResource(ssm)}
}

func (ssm *SfnStateMachine) ImportState(av io.Reader) error {
	ssm.state = &sfnStateMachineState{}
	if err := json.NewDecoder(av).Decode(ssm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssm.Type(), ssm.LocalName(), err)
	}
	return nil
}

func (ssm *SfnStateMachine) State() (*sfnStateMachineState, bool) {
	return ssm.state, ssm.state != nil
}

func (ssm *SfnStateMachine) StateMust() *sfnStateMachineState {
	if ssm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssm.Type(), ssm.LocalName()))
	}
	return ssm.state
}

func (ssm *SfnStateMachine) DependOn() terra.Reference {
	return terra.ReferenceResource(ssm)
}

type SfnStateMachineArgs struct {
	// Definition: string, required
	Definition terra.StringValue `hcl:"definition,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// LoggingConfiguration: optional
	LoggingConfiguration *sfnstatemachine.LoggingConfiguration `hcl:"logging_configuration,block"`
	// TracingConfiguration: optional
	TracingConfiguration *sfnstatemachine.TracingConfiguration `hcl:"tracing_configuration,block"`
	// DependsOn contains resources that SfnStateMachine depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sfnStateMachineAttributes struct {
	ref terra.Reference
}

func (ssm sfnStateMachineAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ssm.ref.Append("arn"))
}

func (ssm sfnStateMachineAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceString(ssm.ref.Append("creation_date"))
}

func (ssm sfnStateMachineAttributes) Definition() terra.StringValue {
	return terra.ReferenceString(ssm.ref.Append("definition"))
}

func (ssm sfnStateMachineAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssm.ref.Append("id"))
}

func (ssm sfnStateMachineAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ssm.ref.Append("name"))
}

func (ssm sfnStateMachineAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(ssm.ref.Append("name_prefix"))
}

func (ssm sfnStateMachineAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(ssm.ref.Append("role_arn"))
}

func (ssm sfnStateMachineAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ssm.ref.Append("status"))
}

func (ssm sfnStateMachineAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ssm.ref.Append("tags"))
}

func (ssm sfnStateMachineAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ssm.ref.Append("tags_all"))
}

func (ssm sfnStateMachineAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ssm.ref.Append("type"))
}

func (ssm sfnStateMachineAttributes) LoggingConfiguration() terra.ListValue[sfnstatemachine.LoggingConfigurationAttributes] {
	return terra.ReferenceList[sfnstatemachine.LoggingConfigurationAttributes](ssm.ref.Append("logging_configuration"))
}

func (ssm sfnStateMachineAttributes) TracingConfiguration() terra.ListValue[sfnstatemachine.TracingConfigurationAttributes] {
	return terra.ReferenceList[sfnstatemachine.TracingConfigurationAttributes](ssm.ref.Append("tracing_configuration"))
}

type sfnStateMachineState struct {
	Arn                  string                                      `json:"arn"`
	CreationDate         string                                      `json:"creation_date"`
	Definition           string                                      `json:"definition"`
	Id                   string                                      `json:"id"`
	Name                 string                                      `json:"name"`
	NamePrefix           string                                      `json:"name_prefix"`
	RoleArn              string                                      `json:"role_arn"`
	Status               string                                      `json:"status"`
	Tags                 map[string]string                           `json:"tags"`
	TagsAll              map[string]string                           `json:"tags_all"`
	Type                 string                                      `json:"type"`
	LoggingConfiguration []sfnstatemachine.LoggingConfigurationState `json:"logging_configuration"`
	TracingConfiguration []sfnstatemachine.TracingConfigurationState `json:"tracing_configuration"`
}
