// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigatewayv2Deployment(name string, args Apigatewayv2DeploymentArgs) *Apigatewayv2Deployment {
	return &Apigatewayv2Deployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Apigatewayv2Deployment)(nil)

type Apigatewayv2Deployment struct {
	Name  string
	Args  Apigatewayv2DeploymentArgs
	state *apigatewayv2DeploymentState
}

func (ad *Apigatewayv2Deployment) Type() string {
	return "aws_apigatewayv2_deployment"
}

func (ad *Apigatewayv2Deployment) LocalName() string {
	return ad.Name
}

func (ad *Apigatewayv2Deployment) Configuration() interface{} {
	return ad.Args
}

func (ad *Apigatewayv2Deployment) Attributes() apigatewayv2DeploymentAttributes {
	return apigatewayv2DeploymentAttributes{ref: terra.ReferenceResource(ad)}
}

func (ad *Apigatewayv2Deployment) ImportState(av io.Reader) error {
	ad.state = &apigatewayv2DeploymentState{}
	if err := json.NewDecoder(av).Decode(ad.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ad.Type(), ad.LocalName(), err)
	}
	return nil
}

func (ad *Apigatewayv2Deployment) State() (*apigatewayv2DeploymentState, bool) {
	return ad.state, ad.state != nil
}

func (ad *Apigatewayv2Deployment) StateMust() *apigatewayv2DeploymentState {
	if ad.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ad.Type(), ad.LocalName()))
	}
	return ad.state
}

func (ad *Apigatewayv2Deployment) DependOn() terra.Reference {
	return terra.ReferenceResource(ad)
}

type Apigatewayv2DeploymentArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
	// DependsOn contains resources that Apigatewayv2Deployment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigatewayv2DeploymentAttributes struct {
	ref terra.Reference
}

func (ad apigatewayv2DeploymentAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("api_id"))
}

func (ad apigatewayv2DeploymentAttributes) AutoDeployed() terra.BoolValue {
	return terra.ReferenceBool(ad.ref.Append("auto_deployed"))
}

func (ad apigatewayv2DeploymentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("description"))
}

func (ad apigatewayv2DeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ad.ref.Append("id"))
}

func (ad apigatewayv2DeploymentAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ad.ref.Append("triggers"))
}

type apigatewayv2DeploymentState struct {
	ApiId        string            `json:"api_id"`
	AutoDeployed bool              `json:"auto_deployed"`
	Description  string            `json:"description"`
	Id           string            `json:"id"`
	Triggers     map[string]string `json:"triggers"`
}
