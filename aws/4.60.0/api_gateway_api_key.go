// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiGatewayApiKey(name string, args ApiGatewayApiKeyArgs) *ApiGatewayApiKey {
	return &ApiGatewayApiKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayApiKey)(nil)

type ApiGatewayApiKey struct {
	Name  string
	Args  ApiGatewayApiKeyArgs
	state *apiGatewayApiKeyState
}

func (agak *ApiGatewayApiKey) Type() string {
	return "aws_api_gateway_api_key"
}

func (agak *ApiGatewayApiKey) LocalName() string {
	return agak.Name
}

func (agak *ApiGatewayApiKey) Configuration() interface{} {
	return agak.Args
}

func (agak *ApiGatewayApiKey) Attributes() apiGatewayApiKeyAttributes {
	return apiGatewayApiKeyAttributes{ref: terra.ReferenceResource(agak)}
}

func (agak *ApiGatewayApiKey) ImportState(av io.Reader) error {
	agak.state = &apiGatewayApiKeyState{}
	if err := json.NewDecoder(av).Decode(agak.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agak.Type(), agak.LocalName(), err)
	}
	return nil
}

func (agak *ApiGatewayApiKey) State() (*apiGatewayApiKeyState, bool) {
	return agak.state, agak.state != nil
}

func (agak *ApiGatewayApiKey) StateMust() *apiGatewayApiKeyState {
	if agak.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agak.Type(), agak.LocalName()))
	}
	return agak.state
}

func (agak *ApiGatewayApiKey) DependOn() terra.Reference {
	return terra.ReferenceResource(agak)
}

type ApiGatewayApiKeyArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
	// DependsOn contains resources that ApiGatewayApiKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiGatewayApiKeyAttributes struct {
	ref terra.Reference
}

func (agak apiGatewayApiKeyAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(agak.ref.Append("arn"))
}

func (agak apiGatewayApiKeyAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceString(agak.ref.Append("created_date"))
}

func (agak apiGatewayApiKeyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(agak.ref.Append("description"))
}

func (agak apiGatewayApiKeyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(agak.ref.Append("enabled"))
}

func (agak apiGatewayApiKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(agak.ref.Append("id"))
}

func (agak apiGatewayApiKeyAttributes) LastUpdatedDate() terra.StringValue {
	return terra.ReferenceString(agak.ref.Append("last_updated_date"))
}

func (agak apiGatewayApiKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(agak.ref.Append("name"))
}

func (agak apiGatewayApiKeyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agak.ref.Append("tags"))
}

func (agak apiGatewayApiKeyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agak.ref.Append("tags_all"))
}

func (agak apiGatewayApiKeyAttributes) Value() terra.StringValue {
	return terra.ReferenceString(agak.ref.Append("value"))
}

type apiGatewayApiKeyState struct {
	Arn             string            `json:"arn"`
	CreatedDate     string            `json:"created_date"`
	Description     string            `json:"description"`
	Enabled         bool              `json:"enabled"`
	Id              string            `json:"id"`
	LastUpdatedDate string            `json:"last_updated_date"`
	Name            string            `json:"name"`
	Tags            map[string]string `json:"tags"`
	TagsAll         map[string]string `json:"tags_all"`
	Value           string            `json:"value"`
}
