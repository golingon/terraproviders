// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStoragegatewayTapePool(name string, args StoragegatewayTapePoolArgs) *StoragegatewayTapePool {
	return &StoragegatewayTapePool{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StoragegatewayTapePool)(nil)

type StoragegatewayTapePool struct {
	Name  string
	Args  StoragegatewayTapePoolArgs
	state *storagegatewayTapePoolState
}

func (stp *StoragegatewayTapePool) Type() string {
	return "aws_storagegateway_tape_pool"
}

func (stp *StoragegatewayTapePool) LocalName() string {
	return stp.Name
}

func (stp *StoragegatewayTapePool) Configuration() interface{} {
	return stp.Args
}

func (stp *StoragegatewayTapePool) Attributes() storagegatewayTapePoolAttributes {
	return storagegatewayTapePoolAttributes{ref: terra.ReferenceResource(stp)}
}

func (stp *StoragegatewayTapePool) ImportState(av io.Reader) error {
	stp.state = &storagegatewayTapePoolState{}
	if err := json.NewDecoder(av).Decode(stp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", stp.Type(), stp.LocalName(), err)
	}
	return nil
}

func (stp *StoragegatewayTapePool) State() (*storagegatewayTapePoolState, bool) {
	return stp.state, stp.state != nil
}

func (stp *StoragegatewayTapePool) StateMust() *storagegatewayTapePoolState {
	if stp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", stp.Type(), stp.LocalName()))
	}
	return stp.state
}

func (stp *StoragegatewayTapePool) DependOn() terra.Reference {
	return terra.ReferenceResource(stp)
}

type StoragegatewayTapePoolArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PoolName: string, required
	PoolName terra.StringValue `hcl:"pool_name,attr" validate:"required"`
	// RetentionLockTimeInDays: number, optional
	RetentionLockTimeInDays terra.NumberValue `hcl:"retention_lock_time_in_days,attr"`
	// RetentionLockType: string, optional
	RetentionLockType terra.StringValue `hcl:"retention_lock_type,attr"`
	// StorageClass: string, required
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that StoragegatewayTapePool depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storagegatewayTapePoolAttributes struct {
	ref terra.Reference
}

func (stp storagegatewayTapePoolAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(stp.ref.Append("arn"))
}

func (stp storagegatewayTapePoolAttributes) Id() terra.StringValue {
	return terra.ReferenceString(stp.ref.Append("id"))
}

func (stp storagegatewayTapePoolAttributes) PoolName() terra.StringValue {
	return terra.ReferenceString(stp.ref.Append("pool_name"))
}

func (stp storagegatewayTapePoolAttributes) RetentionLockTimeInDays() terra.NumberValue {
	return terra.ReferenceNumber(stp.ref.Append("retention_lock_time_in_days"))
}

func (stp storagegatewayTapePoolAttributes) RetentionLockType() terra.StringValue {
	return terra.ReferenceString(stp.ref.Append("retention_lock_type"))
}

func (stp storagegatewayTapePoolAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceString(stp.ref.Append("storage_class"))
}

func (stp storagegatewayTapePoolAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](stp.ref.Append("tags"))
}

func (stp storagegatewayTapePoolAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](stp.ref.Append("tags_all"))
}

type storagegatewayTapePoolState struct {
	Arn                     string            `json:"arn"`
	Id                      string            `json:"id"`
	PoolName                string            `json:"pool_name"`
	RetentionLockTimeInDays float64           `json:"retention_lock_time_in_days"`
	RetentionLockType       string            `json:"retention_lock_type"`
	StorageClass            string            `json:"storage_class"`
	Tags                    map[string]string `json:"tags"`
	TagsAll                 map[string]string `json:"tags_all"`
}
