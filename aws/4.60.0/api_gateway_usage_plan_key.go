// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiGatewayUsagePlanKey(name string, args ApiGatewayUsagePlanKeyArgs) *ApiGatewayUsagePlanKey {
	return &ApiGatewayUsagePlanKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayUsagePlanKey)(nil)

type ApiGatewayUsagePlanKey struct {
	Name  string
	Args  ApiGatewayUsagePlanKeyArgs
	state *apiGatewayUsagePlanKeyState
}

func (agupk *ApiGatewayUsagePlanKey) Type() string {
	return "aws_api_gateway_usage_plan_key"
}

func (agupk *ApiGatewayUsagePlanKey) LocalName() string {
	return agupk.Name
}

func (agupk *ApiGatewayUsagePlanKey) Configuration() interface{} {
	return agupk.Args
}

func (agupk *ApiGatewayUsagePlanKey) Attributes() apiGatewayUsagePlanKeyAttributes {
	return apiGatewayUsagePlanKeyAttributes{ref: terra.ReferenceResource(agupk)}
}

func (agupk *ApiGatewayUsagePlanKey) ImportState(av io.Reader) error {
	agupk.state = &apiGatewayUsagePlanKeyState{}
	if err := json.NewDecoder(av).Decode(agupk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agupk.Type(), agupk.LocalName(), err)
	}
	return nil
}

func (agupk *ApiGatewayUsagePlanKey) State() (*apiGatewayUsagePlanKeyState, bool) {
	return agupk.state, agupk.state != nil
}

func (agupk *ApiGatewayUsagePlanKey) StateMust() *apiGatewayUsagePlanKeyState {
	if agupk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agupk.Type(), agupk.LocalName()))
	}
	return agupk.state
}

func (agupk *ApiGatewayUsagePlanKey) DependOn() terra.Reference {
	return terra.ReferenceResource(agupk)
}

type ApiGatewayUsagePlanKeyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyId: string, required
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
	// KeyType: string, required
	KeyType terra.StringValue `hcl:"key_type,attr" validate:"required"`
	// UsagePlanId: string, required
	UsagePlanId terra.StringValue `hcl:"usage_plan_id,attr" validate:"required"`
	// DependsOn contains resources that ApiGatewayUsagePlanKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiGatewayUsagePlanKeyAttributes struct {
	ref terra.Reference
}

func (agupk apiGatewayUsagePlanKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(agupk.ref.Append("id"))
}

func (agupk apiGatewayUsagePlanKeyAttributes) KeyId() terra.StringValue {
	return terra.ReferenceString(agupk.ref.Append("key_id"))
}

func (agupk apiGatewayUsagePlanKeyAttributes) KeyType() terra.StringValue {
	return terra.ReferenceString(agupk.ref.Append("key_type"))
}

func (agupk apiGatewayUsagePlanKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(agupk.ref.Append("name"))
}

func (agupk apiGatewayUsagePlanKeyAttributes) UsagePlanId() terra.StringValue {
	return terra.ReferenceString(agupk.ref.Append("usage_plan_id"))
}

func (agupk apiGatewayUsagePlanKeyAttributes) Value() terra.StringValue {
	return terra.ReferenceString(agupk.ref.Append("value"))
}

type apiGatewayUsagePlanKeyState struct {
	Id          string `json:"id"`
	KeyId       string `json:"key_id"`
	KeyType     string `json:"key_type"`
	Name        string `json:"name"`
	UsagePlanId string `json:"usage_plan_id"`
	Value       string `json:"value"`
}
