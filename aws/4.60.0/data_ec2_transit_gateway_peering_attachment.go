// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataec2transitgatewaypeeringattachment "github.com/golingon/terraproviders/aws/4.60.0/dataec2transitgatewaypeeringattachment"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataEc2TransitGatewayPeeringAttachment(name string, args DataEc2TransitGatewayPeeringAttachmentArgs) *DataEc2TransitGatewayPeeringAttachment {
	return &DataEc2TransitGatewayPeeringAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataEc2TransitGatewayPeeringAttachment)(nil)

type DataEc2TransitGatewayPeeringAttachment struct {
	Name string
	Args DataEc2TransitGatewayPeeringAttachmentArgs
}

func (etgpa *DataEc2TransitGatewayPeeringAttachment) DataSource() string {
	return "aws_ec2_transit_gateway_peering_attachment"
}

func (etgpa *DataEc2TransitGatewayPeeringAttachment) LocalName() string {
	return etgpa.Name
}

func (etgpa *DataEc2TransitGatewayPeeringAttachment) Configuration() interface{} {
	return etgpa.Args
}

func (etgpa *DataEc2TransitGatewayPeeringAttachment) Attributes() dataEc2TransitGatewayPeeringAttachmentAttributes {
	return dataEc2TransitGatewayPeeringAttachmentAttributes{ref: terra.ReferenceDataResource(etgpa)}
}

type DataEc2TransitGatewayPeeringAttachmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filter: min=0
	Filter []dataec2transitgatewaypeeringattachment.Filter `hcl:"filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dataec2transitgatewaypeeringattachment.Timeouts `hcl:"timeouts,block"`
}
type dataEc2TransitGatewayPeeringAttachmentAttributes struct {
	ref terra.Reference
}

func (etgpa dataEc2TransitGatewayPeeringAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etgpa.ref.Append("id"))
}

func (etgpa dataEc2TransitGatewayPeeringAttachmentAttributes) PeerAccountId() terra.StringValue {
	return terra.ReferenceString(etgpa.ref.Append("peer_account_id"))
}

func (etgpa dataEc2TransitGatewayPeeringAttachmentAttributes) PeerRegion() terra.StringValue {
	return terra.ReferenceString(etgpa.ref.Append("peer_region"))
}

func (etgpa dataEc2TransitGatewayPeeringAttachmentAttributes) PeerTransitGatewayId() terra.StringValue {
	return terra.ReferenceString(etgpa.ref.Append("peer_transit_gateway_id"))
}

func (etgpa dataEc2TransitGatewayPeeringAttachmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etgpa.ref.Append("tags"))
}

func (etgpa dataEc2TransitGatewayPeeringAttachmentAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceString(etgpa.ref.Append("transit_gateway_id"))
}

func (etgpa dataEc2TransitGatewayPeeringAttachmentAttributes) Filter() terra.SetValue[dataec2transitgatewaypeeringattachment.FilterAttributes] {
	return terra.ReferenceSet[dataec2transitgatewaypeeringattachment.FilterAttributes](etgpa.ref.Append("filter"))
}

func (etgpa dataEc2TransitGatewayPeeringAttachmentAttributes) Timeouts() dataec2transitgatewaypeeringattachment.TimeoutsAttributes {
	return terra.ReferenceSingle[dataec2transitgatewaypeeringattachment.TimeoutsAttributes](etgpa.ref.Append("timeouts"))
}
