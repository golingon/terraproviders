// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53ResolverQueryLogConfigAssociation(name string, args Route53ResolverQueryLogConfigAssociationArgs) *Route53ResolverQueryLogConfigAssociation {
	return &Route53ResolverQueryLogConfigAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53ResolverQueryLogConfigAssociation)(nil)

type Route53ResolverQueryLogConfigAssociation struct {
	Name  string
	Args  Route53ResolverQueryLogConfigAssociationArgs
	state *route53ResolverQueryLogConfigAssociationState
}

func (rrqlca *Route53ResolverQueryLogConfigAssociation) Type() string {
	return "aws_route53_resolver_query_log_config_association"
}

func (rrqlca *Route53ResolverQueryLogConfigAssociation) LocalName() string {
	return rrqlca.Name
}

func (rrqlca *Route53ResolverQueryLogConfigAssociation) Configuration() interface{} {
	return rrqlca.Args
}

func (rrqlca *Route53ResolverQueryLogConfigAssociation) Attributes() route53ResolverQueryLogConfigAssociationAttributes {
	return route53ResolverQueryLogConfigAssociationAttributes{ref: terra.ReferenceResource(rrqlca)}
}

func (rrqlca *Route53ResolverQueryLogConfigAssociation) ImportState(av io.Reader) error {
	rrqlca.state = &route53ResolverQueryLogConfigAssociationState{}
	if err := json.NewDecoder(av).Decode(rrqlca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrqlca.Type(), rrqlca.LocalName(), err)
	}
	return nil
}

func (rrqlca *Route53ResolverQueryLogConfigAssociation) State() (*route53ResolverQueryLogConfigAssociationState, bool) {
	return rrqlca.state, rrqlca.state != nil
}

func (rrqlca *Route53ResolverQueryLogConfigAssociation) StateMust() *route53ResolverQueryLogConfigAssociationState {
	if rrqlca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrqlca.Type(), rrqlca.LocalName()))
	}
	return rrqlca.state
}

func (rrqlca *Route53ResolverQueryLogConfigAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(rrqlca)
}

type Route53ResolverQueryLogConfigAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResolverQueryLogConfigId: string, required
	ResolverQueryLogConfigId terra.StringValue `hcl:"resolver_query_log_config_id,attr" validate:"required"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
	// DependsOn contains resources that Route53ResolverQueryLogConfigAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53ResolverQueryLogConfigAssociationAttributes struct {
	ref terra.Reference
}

func (rrqlca route53ResolverQueryLogConfigAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rrqlca.ref.Append("id"))
}

func (rrqlca route53ResolverQueryLogConfigAssociationAttributes) ResolverQueryLogConfigId() terra.StringValue {
	return terra.ReferenceString(rrqlca.ref.Append("resolver_query_log_config_id"))
}

func (rrqlca route53ResolverQueryLogConfigAssociationAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(rrqlca.ref.Append("resource_id"))
}

type route53ResolverQueryLogConfigAssociationState struct {
	Id                       string `json:"id"`
	ResolverQueryLogConfigId string `json:"resolver_query_log_config_id"`
	ResourceId               string `json:"resource_id"`
}
