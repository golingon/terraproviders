// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	route53recoveryreadinessreadinesscheck "github.com/golingon/terraproviders/aws/4.60.0/route53recoveryreadinessreadinesscheck"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53RecoveryreadinessReadinessCheck(name string, args Route53RecoveryreadinessReadinessCheckArgs) *Route53RecoveryreadinessReadinessCheck {
	return &Route53RecoveryreadinessReadinessCheck{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53RecoveryreadinessReadinessCheck)(nil)

type Route53RecoveryreadinessReadinessCheck struct {
	Name  string
	Args  Route53RecoveryreadinessReadinessCheckArgs
	state *route53RecoveryreadinessReadinessCheckState
}

func (rrc *Route53RecoveryreadinessReadinessCheck) Type() string {
	return "aws_route53recoveryreadiness_readiness_check"
}

func (rrc *Route53RecoveryreadinessReadinessCheck) LocalName() string {
	return rrc.Name
}

func (rrc *Route53RecoveryreadinessReadinessCheck) Configuration() interface{} {
	return rrc.Args
}

func (rrc *Route53RecoveryreadinessReadinessCheck) Attributes() route53RecoveryreadinessReadinessCheckAttributes {
	return route53RecoveryreadinessReadinessCheckAttributes{ref: terra.ReferenceResource(rrc)}
}

func (rrc *Route53RecoveryreadinessReadinessCheck) ImportState(av io.Reader) error {
	rrc.state = &route53RecoveryreadinessReadinessCheckState{}
	if err := json.NewDecoder(av).Decode(rrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrc.Type(), rrc.LocalName(), err)
	}
	return nil
}

func (rrc *Route53RecoveryreadinessReadinessCheck) State() (*route53RecoveryreadinessReadinessCheckState, bool) {
	return rrc.state, rrc.state != nil
}

func (rrc *Route53RecoveryreadinessReadinessCheck) StateMust() *route53RecoveryreadinessReadinessCheckState {
	if rrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrc.Type(), rrc.LocalName()))
	}
	return rrc.state
}

func (rrc *Route53RecoveryreadinessReadinessCheck) DependOn() terra.Reference {
	return terra.ReferenceResource(rrc)
}

type Route53RecoveryreadinessReadinessCheckArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ReadinessCheckName: string, required
	ReadinessCheckName terra.StringValue `hcl:"readiness_check_name,attr" validate:"required"`
	// ResourceSetName: string, required
	ResourceSetName terra.StringValue `hcl:"resource_set_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *route53recoveryreadinessreadinesscheck.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Route53RecoveryreadinessReadinessCheck depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53RecoveryreadinessReadinessCheckAttributes struct {
	ref terra.Reference
}

func (rrc route53RecoveryreadinessReadinessCheckAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rrc.ref.Append("arn"))
}

func (rrc route53RecoveryreadinessReadinessCheckAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rrc.ref.Append("id"))
}

func (rrc route53RecoveryreadinessReadinessCheckAttributes) ReadinessCheckName() terra.StringValue {
	return terra.ReferenceString(rrc.ref.Append("readiness_check_name"))
}

func (rrc route53RecoveryreadinessReadinessCheckAttributes) ResourceSetName() terra.StringValue {
	return terra.ReferenceString(rrc.ref.Append("resource_set_name"))
}

func (rrc route53RecoveryreadinessReadinessCheckAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrc.ref.Append("tags"))
}

func (rrc route53RecoveryreadinessReadinessCheckAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrc.ref.Append("tags_all"))
}

func (rrc route53RecoveryreadinessReadinessCheckAttributes) Timeouts() route53recoveryreadinessreadinesscheck.TimeoutsAttributes {
	return terra.ReferenceSingle[route53recoveryreadinessreadinesscheck.TimeoutsAttributes](rrc.ref.Append("timeouts"))
}

type route53RecoveryreadinessReadinessCheckState struct {
	Arn                string                                                `json:"arn"`
	Id                 string                                                `json:"id"`
	ReadinessCheckName string                                                `json:"readiness_check_name"`
	ResourceSetName    string                                                `json:"resource_set_name"`
	Tags               map[string]string                                     `json:"tags"`
	TagsAll            map[string]string                                     `json:"tags_all"`
	Timeouts           *route53recoveryreadinessreadinesscheck.TimeoutsState `json:"timeouts"`
}
