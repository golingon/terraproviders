// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	accountalternatecontact "github.com/golingon/terraproviders/aws/4.60.0/accountalternatecontact"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAccountAlternateContact(name string, args AccountAlternateContactArgs) *AccountAlternateContact {
	return &AccountAlternateContact{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccountAlternateContact)(nil)

type AccountAlternateContact struct {
	Name  string
	Args  AccountAlternateContactArgs
	state *accountAlternateContactState
}

func (aac *AccountAlternateContact) Type() string {
	return "aws_account_alternate_contact"
}

func (aac *AccountAlternateContact) LocalName() string {
	return aac.Name
}

func (aac *AccountAlternateContact) Configuration() interface{} {
	return aac.Args
}

func (aac *AccountAlternateContact) Attributes() accountAlternateContactAttributes {
	return accountAlternateContactAttributes{ref: terra.ReferenceResource(aac)}
}

func (aac *AccountAlternateContact) ImportState(av io.Reader) error {
	aac.state = &accountAlternateContactState{}
	if err := json.NewDecoder(av).Decode(aac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aac.Type(), aac.LocalName(), err)
	}
	return nil
}

func (aac *AccountAlternateContact) State() (*accountAlternateContactState, bool) {
	return aac.state, aac.state != nil
}

func (aac *AccountAlternateContact) StateMust() *accountAlternateContactState {
	if aac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aac.Type(), aac.LocalName()))
	}
	return aac.state
}

func (aac *AccountAlternateContact) DependOn() terra.Reference {
	return terra.ReferenceResource(aac)
}

type AccountAlternateContactArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// AlternateContactType: string, required
	AlternateContactType terra.StringValue `hcl:"alternate_contact_type,attr" validate:"required"`
	// EmailAddress: string, required
	EmailAddress terra.StringValue `hcl:"email_address,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PhoneNumber: string, required
	PhoneNumber terra.StringValue `hcl:"phone_number,attr" validate:"required"`
	// Title: string, required
	Title terra.StringValue `hcl:"title,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *accountalternatecontact.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AccountAlternateContact depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type accountAlternateContactAttributes struct {
	ref terra.Reference
}

func (aac accountAlternateContactAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(aac.ref.Append("account_id"))
}

func (aac accountAlternateContactAttributes) AlternateContactType() terra.StringValue {
	return terra.ReferenceString(aac.ref.Append("alternate_contact_type"))
}

func (aac accountAlternateContactAttributes) EmailAddress() terra.StringValue {
	return terra.ReferenceString(aac.ref.Append("email_address"))
}

func (aac accountAlternateContactAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aac.ref.Append("id"))
}

func (aac accountAlternateContactAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aac.ref.Append("name"))
}

func (aac accountAlternateContactAttributes) PhoneNumber() terra.StringValue {
	return terra.ReferenceString(aac.ref.Append("phone_number"))
}

func (aac accountAlternateContactAttributes) Title() terra.StringValue {
	return terra.ReferenceString(aac.ref.Append("title"))
}

func (aac accountAlternateContactAttributes) Timeouts() accountalternatecontact.TimeoutsAttributes {
	return terra.ReferenceSingle[accountalternatecontact.TimeoutsAttributes](aac.ref.Append("timeouts"))
}

type accountAlternateContactState struct {
	AccountId            string                                 `json:"account_id"`
	AlternateContactType string                                 `json:"alternate_contact_type"`
	EmailAddress         string                                 `json:"email_address"`
	Id                   string                                 `json:"id"`
	Name                 string                                 `json:"name"`
	PhoneNumber          string                                 `json:"phone_number"`
	Title                string                                 `json:"title"`
	Timeouts             *accountalternatecontact.TimeoutsState `json:"timeouts"`
}
