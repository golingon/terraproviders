// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	configdeliverychannel "github.com/golingon/terraproviders/aws/4.60.0/configdeliverychannel"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConfigDeliveryChannel(name string, args ConfigDeliveryChannelArgs) *ConfigDeliveryChannel {
	return &ConfigDeliveryChannel{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConfigDeliveryChannel)(nil)

type ConfigDeliveryChannel struct {
	Name  string
	Args  ConfigDeliveryChannelArgs
	state *configDeliveryChannelState
}

func (cdc *ConfigDeliveryChannel) Type() string {
	return "aws_config_delivery_channel"
}

func (cdc *ConfigDeliveryChannel) LocalName() string {
	return cdc.Name
}

func (cdc *ConfigDeliveryChannel) Configuration() interface{} {
	return cdc.Args
}

func (cdc *ConfigDeliveryChannel) Attributes() configDeliveryChannelAttributes {
	return configDeliveryChannelAttributes{ref: terra.ReferenceResource(cdc)}
}

func (cdc *ConfigDeliveryChannel) ImportState(av io.Reader) error {
	cdc.state = &configDeliveryChannelState{}
	if err := json.NewDecoder(av).Decode(cdc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cdc.Type(), cdc.LocalName(), err)
	}
	return nil
}

func (cdc *ConfigDeliveryChannel) State() (*configDeliveryChannelState, bool) {
	return cdc.state, cdc.state != nil
}

func (cdc *ConfigDeliveryChannel) StateMust() *configDeliveryChannelState {
	if cdc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cdc.Type(), cdc.LocalName()))
	}
	return cdc.state
}

func (cdc *ConfigDeliveryChannel) DependOn() terra.Reference {
	return terra.ReferenceResource(cdc)
}

type ConfigDeliveryChannelArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// S3BucketName: string, required
	S3BucketName terra.StringValue `hcl:"s3_bucket_name,attr" validate:"required"`
	// S3KeyPrefix: string, optional
	S3KeyPrefix terra.StringValue `hcl:"s3_key_prefix,attr"`
	// S3KmsKeyArn: string, optional
	S3KmsKeyArn terra.StringValue `hcl:"s3_kms_key_arn,attr"`
	// SnsTopicArn: string, optional
	SnsTopicArn terra.StringValue `hcl:"sns_topic_arn,attr"`
	// SnapshotDeliveryProperties: optional
	SnapshotDeliveryProperties *configdeliverychannel.SnapshotDeliveryProperties `hcl:"snapshot_delivery_properties,block"`
	// DependsOn contains resources that ConfigDeliveryChannel depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type configDeliveryChannelAttributes struct {
	ref terra.Reference
}

func (cdc configDeliveryChannelAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cdc.ref.Append("id"))
}

func (cdc configDeliveryChannelAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cdc.ref.Append("name"))
}

func (cdc configDeliveryChannelAttributes) S3BucketName() terra.StringValue {
	return terra.ReferenceString(cdc.ref.Append("s3_bucket_name"))
}

func (cdc configDeliveryChannelAttributes) S3KeyPrefix() terra.StringValue {
	return terra.ReferenceString(cdc.ref.Append("s3_key_prefix"))
}

func (cdc configDeliveryChannelAttributes) S3KmsKeyArn() terra.StringValue {
	return terra.ReferenceString(cdc.ref.Append("s3_kms_key_arn"))
}

func (cdc configDeliveryChannelAttributes) SnsTopicArn() terra.StringValue {
	return terra.ReferenceString(cdc.ref.Append("sns_topic_arn"))
}

func (cdc configDeliveryChannelAttributes) SnapshotDeliveryProperties() terra.ListValue[configdeliverychannel.SnapshotDeliveryPropertiesAttributes] {
	return terra.ReferenceList[configdeliverychannel.SnapshotDeliveryPropertiesAttributes](cdc.ref.Append("snapshot_delivery_properties"))
}

type configDeliveryChannelState struct {
	Id                         string                                                  `json:"id"`
	Name                       string                                                  `json:"name"`
	S3BucketName               string                                                  `json:"s3_bucket_name"`
	S3KeyPrefix                string                                                  `json:"s3_key_prefix"`
	S3KmsKeyArn                string                                                  `json:"s3_kms_key_arn"`
	SnsTopicArn                string                                                  `json:"sns_topic_arn"`
	SnapshotDeliveryProperties []configdeliverychannel.SnapshotDeliveryPropertiesState `json:"snapshot_delivery_properties"`
}
