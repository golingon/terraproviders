// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	eksnodegroup "github.com/golingon/terraproviders/aws/4.60.0/eksnodegroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEksNodeGroup(name string, args EksNodeGroupArgs) *EksNodeGroup {
	return &EksNodeGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EksNodeGroup)(nil)

type EksNodeGroup struct {
	Name  string
	Args  EksNodeGroupArgs
	state *eksNodeGroupState
}

func (eng *EksNodeGroup) Type() string {
	return "aws_eks_node_group"
}

func (eng *EksNodeGroup) LocalName() string {
	return eng.Name
}

func (eng *EksNodeGroup) Configuration() interface{} {
	return eng.Args
}

func (eng *EksNodeGroup) Attributes() eksNodeGroupAttributes {
	return eksNodeGroupAttributes{ref: terra.ReferenceResource(eng)}
}

func (eng *EksNodeGroup) ImportState(av io.Reader) error {
	eng.state = &eksNodeGroupState{}
	if err := json.NewDecoder(av).Decode(eng.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", eng.Type(), eng.LocalName(), err)
	}
	return nil
}

func (eng *EksNodeGroup) State() (*eksNodeGroupState, bool) {
	return eng.state, eng.state != nil
}

func (eng *EksNodeGroup) StateMust() *eksNodeGroupState {
	if eng.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", eng.Type(), eng.LocalName()))
	}
	return eng.state
}

func (eng *EksNodeGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(eng)
}

type EksNodeGroupArgs struct {
	// AmiType: string, optional
	AmiType terra.StringValue `hcl:"ami_type,attr"`
	// CapacityType: string, optional
	CapacityType terra.StringValue `hcl:"capacity_type,attr"`
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// DiskSize: number, optional
	DiskSize terra.NumberValue `hcl:"disk_size,attr"`
	// ForceUpdateVersion: bool, optional
	ForceUpdateVersion terra.BoolValue `hcl:"force_update_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceTypes: list of string, optional
	InstanceTypes terra.ListValue[terra.StringValue] `hcl:"instance_types,attr"`
	// Labels: map of string, optional
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// NodeGroupName: string, optional
	NodeGroupName terra.StringValue `hcl:"node_group_name,attr"`
	// NodeGroupNamePrefix: string, optional
	NodeGroupNamePrefix terra.StringValue `hcl:"node_group_name_prefix,attr"`
	// NodeRoleArn: string, required
	NodeRoleArn terra.StringValue `hcl:"node_role_arn,attr" validate:"required"`
	// ReleaseVersion: string, optional
	ReleaseVersion terra.StringValue `hcl:"release_version,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Resources: min=0
	Resources []eksnodegroup.Resources `hcl:"resources,block" validate:"min=0"`
	// LaunchTemplate: optional
	LaunchTemplate *eksnodegroup.LaunchTemplate `hcl:"launch_template,block"`
	// RemoteAccess: optional
	RemoteAccess *eksnodegroup.RemoteAccess `hcl:"remote_access,block"`
	// ScalingConfig: required
	ScalingConfig *eksnodegroup.ScalingConfig `hcl:"scaling_config,block" validate:"required"`
	// Taint: min=0,max=50
	Taint []eksnodegroup.Taint `hcl:"taint,block" validate:"min=0,max=50"`
	// Timeouts: optional
	Timeouts *eksnodegroup.Timeouts `hcl:"timeouts,block"`
	// UpdateConfig: optional
	UpdateConfig *eksnodegroup.UpdateConfig `hcl:"update_config,block"`
	// DependsOn contains resources that EksNodeGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eksNodeGroupAttributes struct {
	ref terra.Reference
}

func (eng eksNodeGroupAttributes) AmiType() terra.StringValue {
	return terra.ReferenceString(eng.ref.Append("ami_type"))
}

func (eng eksNodeGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(eng.ref.Append("arn"))
}

func (eng eksNodeGroupAttributes) CapacityType() terra.StringValue {
	return terra.ReferenceString(eng.ref.Append("capacity_type"))
}

func (eng eksNodeGroupAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceString(eng.ref.Append("cluster_name"))
}

func (eng eksNodeGroupAttributes) DiskSize() terra.NumberValue {
	return terra.ReferenceNumber(eng.ref.Append("disk_size"))
}

func (eng eksNodeGroupAttributes) ForceUpdateVersion() terra.BoolValue {
	return terra.ReferenceBool(eng.ref.Append("force_update_version"))
}

func (eng eksNodeGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(eng.ref.Append("id"))
}

func (eng eksNodeGroupAttributes) InstanceTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](eng.ref.Append("instance_types"))
}

func (eng eksNodeGroupAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](eng.ref.Append("labels"))
}

func (eng eksNodeGroupAttributes) NodeGroupName() terra.StringValue {
	return terra.ReferenceString(eng.ref.Append("node_group_name"))
}

func (eng eksNodeGroupAttributes) NodeGroupNamePrefix() terra.StringValue {
	return terra.ReferenceString(eng.ref.Append("node_group_name_prefix"))
}

func (eng eksNodeGroupAttributes) NodeRoleArn() terra.StringValue {
	return terra.ReferenceString(eng.ref.Append("node_role_arn"))
}

func (eng eksNodeGroupAttributes) ReleaseVersion() terra.StringValue {
	return terra.ReferenceString(eng.ref.Append("release_version"))
}

func (eng eksNodeGroupAttributes) Status() terra.StringValue {
	return terra.ReferenceString(eng.ref.Append("status"))
}

func (eng eksNodeGroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](eng.ref.Append("subnet_ids"))
}

func (eng eksNodeGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](eng.ref.Append("tags"))
}

func (eng eksNodeGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](eng.ref.Append("tags_all"))
}

func (eng eksNodeGroupAttributes) Version() terra.StringValue {
	return terra.ReferenceString(eng.ref.Append("version"))
}

func (eng eksNodeGroupAttributes) Resources() terra.ListValue[eksnodegroup.ResourcesAttributes] {
	return terra.ReferenceList[eksnodegroup.ResourcesAttributes](eng.ref.Append("resources"))
}

func (eng eksNodeGroupAttributes) LaunchTemplate() terra.ListValue[eksnodegroup.LaunchTemplateAttributes] {
	return terra.ReferenceList[eksnodegroup.LaunchTemplateAttributes](eng.ref.Append("launch_template"))
}

func (eng eksNodeGroupAttributes) RemoteAccess() terra.ListValue[eksnodegroup.RemoteAccessAttributes] {
	return terra.ReferenceList[eksnodegroup.RemoteAccessAttributes](eng.ref.Append("remote_access"))
}

func (eng eksNodeGroupAttributes) ScalingConfig() terra.ListValue[eksnodegroup.ScalingConfigAttributes] {
	return terra.ReferenceList[eksnodegroup.ScalingConfigAttributes](eng.ref.Append("scaling_config"))
}

func (eng eksNodeGroupAttributes) Taint() terra.SetValue[eksnodegroup.TaintAttributes] {
	return terra.ReferenceSet[eksnodegroup.TaintAttributes](eng.ref.Append("taint"))
}

func (eng eksNodeGroupAttributes) Timeouts() eksnodegroup.TimeoutsAttributes {
	return terra.ReferenceSingle[eksnodegroup.TimeoutsAttributes](eng.ref.Append("timeouts"))
}

func (eng eksNodeGroupAttributes) UpdateConfig() terra.ListValue[eksnodegroup.UpdateConfigAttributes] {
	return terra.ReferenceList[eksnodegroup.UpdateConfigAttributes](eng.ref.Append("update_config"))
}

type eksNodeGroupState struct {
	AmiType             string                             `json:"ami_type"`
	Arn                 string                             `json:"arn"`
	CapacityType        string                             `json:"capacity_type"`
	ClusterName         string                             `json:"cluster_name"`
	DiskSize            float64                            `json:"disk_size"`
	ForceUpdateVersion  bool                               `json:"force_update_version"`
	Id                  string                             `json:"id"`
	InstanceTypes       []string                           `json:"instance_types"`
	Labels              map[string]string                  `json:"labels"`
	NodeGroupName       string                             `json:"node_group_name"`
	NodeGroupNamePrefix string                             `json:"node_group_name_prefix"`
	NodeRoleArn         string                             `json:"node_role_arn"`
	ReleaseVersion      string                             `json:"release_version"`
	Status              string                             `json:"status"`
	SubnetIds           []string                           `json:"subnet_ids"`
	Tags                map[string]string                  `json:"tags"`
	TagsAll             map[string]string                  `json:"tags_all"`
	Version             string                             `json:"version"`
	Resources           []eksnodegroup.ResourcesState      `json:"resources"`
	LaunchTemplate      []eksnodegroup.LaunchTemplateState `json:"launch_template"`
	RemoteAccess        []eksnodegroup.RemoteAccessState   `json:"remote_access"`
	ScalingConfig       []eksnodegroup.ScalingConfigState  `json:"scaling_config"`
	Taint               []eksnodegroup.TaintState          `json:"taint"`
	Timeouts            *eksnodegroup.TimeoutsState        `json:"timeouts"`
	UpdateConfig        []eksnodegroup.UpdateConfigState   `json:"update_config"`
}
