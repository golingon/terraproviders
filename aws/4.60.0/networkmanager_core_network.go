// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkmanagercorenetwork "github.com/golingon/terraproviders/aws/4.60.0/networkmanagercorenetwork"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkmanagerCoreNetwork(name string, args NetworkmanagerCoreNetworkArgs) *NetworkmanagerCoreNetwork {
	return &NetworkmanagerCoreNetwork{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkmanagerCoreNetwork)(nil)

type NetworkmanagerCoreNetwork struct {
	Name  string
	Args  NetworkmanagerCoreNetworkArgs
	state *networkmanagerCoreNetworkState
}

func (ncn *NetworkmanagerCoreNetwork) Type() string {
	return "aws_networkmanager_core_network"
}

func (ncn *NetworkmanagerCoreNetwork) LocalName() string {
	return ncn.Name
}

func (ncn *NetworkmanagerCoreNetwork) Configuration() interface{} {
	return ncn.Args
}

func (ncn *NetworkmanagerCoreNetwork) Attributes() networkmanagerCoreNetworkAttributes {
	return networkmanagerCoreNetworkAttributes{ref: terra.ReferenceResource(ncn)}
}

func (ncn *NetworkmanagerCoreNetwork) ImportState(av io.Reader) error {
	ncn.state = &networkmanagerCoreNetworkState{}
	if err := json.NewDecoder(av).Decode(ncn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ncn.Type(), ncn.LocalName(), err)
	}
	return nil
}

func (ncn *NetworkmanagerCoreNetwork) State() (*networkmanagerCoreNetworkState, bool) {
	return ncn.state, ncn.state != nil
}

func (ncn *NetworkmanagerCoreNetwork) StateMust() *networkmanagerCoreNetworkState {
	if ncn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ncn.Type(), ncn.LocalName()))
	}
	return ncn.state
}

func (ncn *NetworkmanagerCoreNetwork) DependOn() terra.Reference {
	return terra.ReferenceResource(ncn)
}

type NetworkmanagerCoreNetworkArgs struct {
	// BasePolicyRegion: string, optional
	BasePolicyRegion terra.StringValue `hcl:"base_policy_region,attr"`
	// BasePolicyRegions: set of string, optional
	BasePolicyRegions terra.SetValue[terra.StringValue] `hcl:"base_policy_regions,attr"`
	// CreateBasePolicy: bool, optional
	CreateBasePolicy terra.BoolValue `hcl:"create_base_policy,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GlobalNetworkId: string, required
	GlobalNetworkId terra.StringValue `hcl:"global_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyDocument: string, optional
	PolicyDocument terra.StringValue `hcl:"policy_document,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Edges: min=0
	Edges []networkmanagercorenetwork.Edges `hcl:"edges,block" validate:"min=0"`
	// Segments: min=0
	Segments []networkmanagercorenetwork.Segments `hcl:"segments,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *networkmanagercorenetwork.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkmanagerCoreNetwork depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkmanagerCoreNetworkAttributes struct {
	ref terra.Reference
}

func (ncn networkmanagerCoreNetworkAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ncn.ref.Append("arn"))
}

func (ncn networkmanagerCoreNetworkAttributes) BasePolicyRegion() terra.StringValue {
	return terra.ReferenceString(ncn.ref.Append("base_policy_region"))
}

func (ncn networkmanagerCoreNetworkAttributes) BasePolicyRegions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ncn.ref.Append("base_policy_regions"))
}

func (ncn networkmanagerCoreNetworkAttributes) CreateBasePolicy() terra.BoolValue {
	return terra.ReferenceBool(ncn.ref.Append("create_base_policy"))
}

func (ncn networkmanagerCoreNetworkAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceString(ncn.ref.Append("created_at"))
}

func (ncn networkmanagerCoreNetworkAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ncn.ref.Append("description"))
}

func (ncn networkmanagerCoreNetworkAttributes) GlobalNetworkId() terra.StringValue {
	return terra.ReferenceString(ncn.ref.Append("global_network_id"))
}

func (ncn networkmanagerCoreNetworkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ncn.ref.Append("id"))
}

func (ncn networkmanagerCoreNetworkAttributes) PolicyDocument() terra.StringValue {
	return terra.ReferenceString(ncn.ref.Append("policy_document"))
}

func (ncn networkmanagerCoreNetworkAttributes) State() terra.StringValue {
	return terra.ReferenceString(ncn.ref.Append("state"))
}

func (ncn networkmanagerCoreNetworkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ncn.ref.Append("tags"))
}

func (ncn networkmanagerCoreNetworkAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ncn.ref.Append("tags_all"))
}

func (ncn networkmanagerCoreNetworkAttributes) Edges() terra.ListValue[networkmanagercorenetwork.EdgesAttributes] {
	return terra.ReferenceList[networkmanagercorenetwork.EdgesAttributes](ncn.ref.Append("edges"))
}

func (ncn networkmanagerCoreNetworkAttributes) Segments() terra.ListValue[networkmanagercorenetwork.SegmentsAttributes] {
	return terra.ReferenceList[networkmanagercorenetwork.SegmentsAttributes](ncn.ref.Append("segments"))
}

func (ncn networkmanagerCoreNetworkAttributes) Timeouts() networkmanagercorenetwork.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagercorenetwork.TimeoutsAttributes](ncn.ref.Append("timeouts"))
}

type networkmanagerCoreNetworkState struct {
	Arn               string                                    `json:"arn"`
	BasePolicyRegion  string                                    `json:"base_policy_region"`
	BasePolicyRegions []string                                  `json:"base_policy_regions"`
	CreateBasePolicy  bool                                      `json:"create_base_policy"`
	CreatedAt         string                                    `json:"created_at"`
	Description       string                                    `json:"description"`
	GlobalNetworkId   string                                    `json:"global_network_id"`
	Id                string                                    `json:"id"`
	PolicyDocument    string                                    `json:"policy_document"`
	State             string                                    `json:"state"`
	Tags              map[string]string                         `json:"tags"`
	TagsAll           map[string]string                         `json:"tags_all"`
	Edges             []networkmanagercorenetwork.EdgesState    `json:"edges"`
	Segments          []networkmanagercorenetwork.SegmentsState `json:"segments"`
	Timeouts          *networkmanagercorenetwork.TimeoutsState  `json:"timeouts"`
}
