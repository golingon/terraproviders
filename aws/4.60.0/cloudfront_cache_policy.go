// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudfrontcachepolicy "github.com/golingon/terraproviders/aws/4.60.0/cloudfrontcachepolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudfrontCachePolicy(name string, args CloudfrontCachePolicyArgs) *CloudfrontCachePolicy {
	return &CloudfrontCachePolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudfrontCachePolicy)(nil)

type CloudfrontCachePolicy struct {
	Name  string
	Args  CloudfrontCachePolicyArgs
	state *cloudfrontCachePolicyState
}

func (ccp *CloudfrontCachePolicy) Type() string {
	return "aws_cloudfront_cache_policy"
}

func (ccp *CloudfrontCachePolicy) LocalName() string {
	return ccp.Name
}

func (ccp *CloudfrontCachePolicy) Configuration() interface{} {
	return ccp.Args
}

func (ccp *CloudfrontCachePolicy) Attributes() cloudfrontCachePolicyAttributes {
	return cloudfrontCachePolicyAttributes{ref: terra.ReferenceResource(ccp)}
}

func (ccp *CloudfrontCachePolicy) ImportState(av io.Reader) error {
	ccp.state = &cloudfrontCachePolicyState{}
	if err := json.NewDecoder(av).Decode(ccp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ccp.Type(), ccp.LocalName(), err)
	}
	return nil
}

func (ccp *CloudfrontCachePolicy) State() (*cloudfrontCachePolicyState, bool) {
	return ccp.state, ccp.state != nil
}

func (ccp *CloudfrontCachePolicy) StateMust() *cloudfrontCachePolicyState {
	if ccp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ccp.Type(), ccp.LocalName()))
	}
	return ccp.state
}

func (ccp *CloudfrontCachePolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(ccp)
}

type CloudfrontCachePolicyArgs struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// DefaultTtl: number, optional
	DefaultTtl terra.NumberValue `hcl:"default_ttl,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxTtl: number, optional
	MaxTtl terra.NumberValue `hcl:"max_ttl,attr"`
	// MinTtl: number, optional
	MinTtl terra.NumberValue `hcl:"min_ttl,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParametersInCacheKeyAndForwardedToOrigin: required
	ParametersInCacheKeyAndForwardedToOrigin *cloudfrontcachepolicy.ParametersInCacheKeyAndForwardedToOrigin `hcl:"parameters_in_cache_key_and_forwarded_to_origin,block" validate:"required"`
	// DependsOn contains resources that CloudfrontCachePolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudfrontCachePolicyAttributes struct {
	ref terra.Reference
}

func (ccp cloudfrontCachePolicyAttributes) Comment() terra.StringValue {
	return terra.ReferenceString(ccp.ref.Append("comment"))
}

func (ccp cloudfrontCachePolicyAttributes) DefaultTtl() terra.NumberValue {
	return terra.ReferenceNumber(ccp.ref.Append("default_ttl"))
}

func (ccp cloudfrontCachePolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(ccp.ref.Append("etag"))
}

func (ccp cloudfrontCachePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ccp.ref.Append("id"))
}

func (ccp cloudfrontCachePolicyAttributes) MaxTtl() terra.NumberValue {
	return terra.ReferenceNumber(ccp.ref.Append("max_ttl"))
}

func (ccp cloudfrontCachePolicyAttributes) MinTtl() terra.NumberValue {
	return terra.ReferenceNumber(ccp.ref.Append("min_ttl"))
}

func (ccp cloudfrontCachePolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ccp.ref.Append("name"))
}

func (ccp cloudfrontCachePolicyAttributes) ParametersInCacheKeyAndForwardedToOrigin() terra.ListValue[cloudfrontcachepolicy.ParametersInCacheKeyAndForwardedToOriginAttributes] {
	return terra.ReferenceList[cloudfrontcachepolicy.ParametersInCacheKeyAndForwardedToOriginAttributes](ccp.ref.Append("parameters_in_cache_key_and_forwarded_to_origin"))
}

type cloudfrontCachePolicyState struct {
	Comment                                  string                                                                `json:"comment"`
	DefaultTtl                               float64                                                               `json:"default_ttl"`
	Etag                                     string                                                                `json:"etag"`
	Id                                       string                                                                `json:"id"`
	MaxTtl                                   float64                                                               `json:"max_ttl"`
	MinTtl                                   float64                                                               `json:"min_ttl"`
	Name                                     string                                                                `json:"name"`
	ParametersInCacheKeyAndForwardedToOrigin []cloudfrontcachepolicy.ParametersInCacheKeyAndForwardedToOriginState `json:"parameters_in_cache_key_and_forwarded_to_origin"`
}
