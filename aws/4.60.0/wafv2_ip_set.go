// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWafv2IpSet(name string, args Wafv2IpSetArgs) *Wafv2IpSet {
	return &Wafv2IpSet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Wafv2IpSet)(nil)

type Wafv2IpSet struct {
	Name  string
	Args  Wafv2IpSetArgs
	state *wafv2IpSetState
}

func (wis *Wafv2IpSet) Type() string {
	return "aws_wafv2_ip_set"
}

func (wis *Wafv2IpSet) LocalName() string {
	return wis.Name
}

func (wis *Wafv2IpSet) Configuration() interface{} {
	return wis.Args
}

func (wis *Wafv2IpSet) Attributes() wafv2IpSetAttributes {
	return wafv2IpSetAttributes{ref: terra.ReferenceResource(wis)}
}

func (wis *Wafv2IpSet) ImportState(av io.Reader) error {
	wis.state = &wafv2IpSetState{}
	if err := json.NewDecoder(av).Decode(wis.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wis.Type(), wis.LocalName(), err)
	}
	return nil
}

func (wis *Wafv2IpSet) State() (*wafv2IpSetState, bool) {
	return wis.state, wis.state != nil
}

func (wis *Wafv2IpSet) StateMust() *wafv2IpSetState {
	if wis.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wis.Type(), wis.LocalName()))
	}
	return wis.state
}

func (wis *Wafv2IpSet) DependOn() terra.Reference {
	return terra.ReferenceResource(wis)
}

type Wafv2IpSetArgs struct {
	// Addresses: set of string, optional
	Addresses terra.SetValue[terra.StringValue] `hcl:"addresses,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddressVersion: string, required
	IpAddressVersion terra.StringValue `hcl:"ip_address_version,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that Wafv2IpSet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type wafv2IpSetAttributes struct {
	ref terra.Reference
}

func (wis wafv2IpSetAttributes) Addresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](wis.ref.Append("addresses"))
}

func (wis wafv2IpSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(wis.ref.Append("arn"))
}

func (wis wafv2IpSetAttributes) Description() terra.StringValue {
	return terra.ReferenceString(wis.ref.Append("description"))
}

func (wis wafv2IpSetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wis.ref.Append("id"))
}

func (wis wafv2IpSetAttributes) IpAddressVersion() terra.StringValue {
	return terra.ReferenceString(wis.ref.Append("ip_address_version"))
}

func (wis wafv2IpSetAttributes) LockToken() terra.StringValue {
	return terra.ReferenceString(wis.ref.Append("lock_token"))
}

func (wis wafv2IpSetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wis.ref.Append("name"))
}

func (wis wafv2IpSetAttributes) Scope() terra.StringValue {
	return terra.ReferenceString(wis.ref.Append("scope"))
}

func (wis wafv2IpSetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wis.ref.Append("tags"))
}

func (wis wafv2IpSetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wis.ref.Append("tags_all"))
}

type wafv2IpSetState struct {
	Addresses        []string          `json:"addresses"`
	Arn              string            `json:"arn"`
	Description      string            `json:"description"`
	Id               string            `json:"id"`
	IpAddressVersion string            `json:"ip_address_version"`
	LockToken        string            `json:"lock_token"`
	Name             string            `json:"name"`
	Scope            string            `json:"scope"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
}
