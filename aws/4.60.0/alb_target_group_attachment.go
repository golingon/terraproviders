// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAlbTargetGroupAttachment(name string, args AlbTargetGroupAttachmentArgs) *AlbTargetGroupAttachment {
	return &AlbTargetGroupAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AlbTargetGroupAttachment)(nil)

type AlbTargetGroupAttachment struct {
	Name  string
	Args  AlbTargetGroupAttachmentArgs
	state *albTargetGroupAttachmentState
}

func (atga *AlbTargetGroupAttachment) Type() string {
	return "aws_alb_target_group_attachment"
}

func (atga *AlbTargetGroupAttachment) LocalName() string {
	return atga.Name
}

func (atga *AlbTargetGroupAttachment) Configuration() interface{} {
	return atga.Args
}

func (atga *AlbTargetGroupAttachment) Attributes() albTargetGroupAttachmentAttributes {
	return albTargetGroupAttachmentAttributes{ref: terra.ReferenceResource(atga)}
}

func (atga *AlbTargetGroupAttachment) ImportState(av io.Reader) error {
	atga.state = &albTargetGroupAttachmentState{}
	if err := json.NewDecoder(av).Decode(atga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", atga.Type(), atga.LocalName(), err)
	}
	return nil
}

func (atga *AlbTargetGroupAttachment) State() (*albTargetGroupAttachmentState, bool) {
	return atga.state, atga.state != nil
}

func (atga *AlbTargetGroupAttachment) StateMust() *albTargetGroupAttachmentState {
	if atga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", atga.Type(), atga.LocalName()))
	}
	return atga.state
}

func (atga *AlbTargetGroupAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(atga)
}

type AlbTargetGroupAttachmentArgs struct {
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// TargetGroupArn: string, required
	TargetGroupArn terra.StringValue `hcl:"target_group_arn,attr" validate:"required"`
	// TargetId: string, required
	TargetId terra.StringValue `hcl:"target_id,attr" validate:"required"`
	// DependsOn contains resources that AlbTargetGroupAttachment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type albTargetGroupAttachmentAttributes struct {
	ref terra.Reference
}

func (atga albTargetGroupAttachmentAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceString(atga.ref.Append("availability_zone"))
}

func (atga albTargetGroupAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(atga.ref.Append("id"))
}

func (atga albTargetGroupAttachmentAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(atga.ref.Append("port"))
}

func (atga albTargetGroupAttachmentAttributes) TargetGroupArn() terra.StringValue {
	return terra.ReferenceString(atga.ref.Append("target_group_arn"))
}

func (atga albTargetGroupAttachmentAttributes) TargetId() terra.StringValue {
	return terra.ReferenceString(atga.ref.Append("target_id"))
}

type albTargetGroupAttachmentState struct {
	AvailabilityZone string  `json:"availability_zone"`
	Id               string  `json:"id"`
	Port             float64 `json:"port"`
	TargetGroupArn   string  `json:"target_group_arn"`
	TargetId         string  `json:"target_id"`
}
