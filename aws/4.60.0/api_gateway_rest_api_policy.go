// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiGatewayRestApiPolicy(name string, args ApiGatewayRestApiPolicyArgs) *ApiGatewayRestApiPolicy {
	return &ApiGatewayRestApiPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayRestApiPolicy)(nil)

type ApiGatewayRestApiPolicy struct {
	Name  string
	Args  ApiGatewayRestApiPolicyArgs
	state *apiGatewayRestApiPolicyState
}

func (agrap *ApiGatewayRestApiPolicy) Type() string {
	return "aws_api_gateway_rest_api_policy"
}

func (agrap *ApiGatewayRestApiPolicy) LocalName() string {
	return agrap.Name
}

func (agrap *ApiGatewayRestApiPolicy) Configuration() interface{} {
	return agrap.Args
}

func (agrap *ApiGatewayRestApiPolicy) Attributes() apiGatewayRestApiPolicyAttributes {
	return apiGatewayRestApiPolicyAttributes{ref: terra.ReferenceResource(agrap)}
}

func (agrap *ApiGatewayRestApiPolicy) ImportState(av io.Reader) error {
	agrap.state = &apiGatewayRestApiPolicyState{}
	if err := json.NewDecoder(av).Decode(agrap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agrap.Type(), agrap.LocalName(), err)
	}
	return nil
}

func (agrap *ApiGatewayRestApiPolicy) State() (*apiGatewayRestApiPolicyState, bool) {
	return agrap.state, agrap.state != nil
}

func (agrap *ApiGatewayRestApiPolicy) StateMust() *apiGatewayRestApiPolicyState {
	if agrap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agrap.Type(), agrap.LocalName()))
	}
	return agrap.state
}

func (agrap *ApiGatewayRestApiPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(agrap)
}

type ApiGatewayRestApiPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// RestApiId: string, required
	RestApiId terra.StringValue `hcl:"rest_api_id,attr" validate:"required"`
	// DependsOn contains resources that ApiGatewayRestApiPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiGatewayRestApiPolicyAttributes struct {
	ref terra.Reference
}

func (agrap apiGatewayRestApiPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(agrap.ref.Append("id"))
}

func (agrap apiGatewayRestApiPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(agrap.ref.Append("policy"))
}

func (agrap apiGatewayRestApiPolicyAttributes) RestApiId() terra.StringValue {
	return terra.ReferenceString(agrap.ref.Append("rest_api_id"))
}

type apiGatewayRestApiPolicyState struct {
	Id        string `json:"id"`
	Policy    string `json:"policy"`
	RestApiId string `json:"rest_api_id"`
}
