// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	imagebuilderimagerecipe "github.com/golingon/terraproviders/aws/4.60.0/imagebuilderimagerecipe"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewImagebuilderImageRecipe(name string, args ImagebuilderImageRecipeArgs) *ImagebuilderImageRecipe {
	return &ImagebuilderImageRecipe{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ImagebuilderImageRecipe)(nil)

type ImagebuilderImageRecipe struct {
	Name  string
	Args  ImagebuilderImageRecipeArgs
	state *imagebuilderImageRecipeState
}

func (iir *ImagebuilderImageRecipe) Type() string {
	return "aws_imagebuilder_image_recipe"
}

func (iir *ImagebuilderImageRecipe) LocalName() string {
	return iir.Name
}

func (iir *ImagebuilderImageRecipe) Configuration() interface{} {
	return iir.Args
}

func (iir *ImagebuilderImageRecipe) Attributes() imagebuilderImageRecipeAttributes {
	return imagebuilderImageRecipeAttributes{ref: terra.ReferenceResource(iir)}
}

func (iir *ImagebuilderImageRecipe) ImportState(av io.Reader) error {
	iir.state = &imagebuilderImageRecipeState{}
	if err := json.NewDecoder(av).Decode(iir.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iir.Type(), iir.LocalName(), err)
	}
	return nil
}

func (iir *ImagebuilderImageRecipe) State() (*imagebuilderImageRecipeState, bool) {
	return iir.state, iir.state != nil
}

func (iir *ImagebuilderImageRecipe) StateMust() *imagebuilderImageRecipeState {
	if iir.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iir.Type(), iir.LocalName()))
	}
	return iir.state
}

func (iir *ImagebuilderImageRecipe) DependOn() terra.Reference {
	return terra.ReferenceResource(iir)
}

type ImagebuilderImageRecipeArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ParentImage: string, required
	ParentImage terra.StringValue `hcl:"parent_image,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserDataBase64: string, optional
	UserDataBase64 terra.StringValue `hcl:"user_data_base64,attr"`
	// Version: string, required
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
	// WorkingDirectory: string, optional
	WorkingDirectory terra.StringValue `hcl:"working_directory,attr"`
	// BlockDeviceMapping: min=0
	BlockDeviceMapping []imagebuilderimagerecipe.BlockDeviceMapping `hcl:"block_device_mapping,block" validate:"min=0"`
	// Component: min=1
	Component []imagebuilderimagerecipe.Component `hcl:"component,block" validate:"min=1"`
	// SystemsManagerAgent: optional
	SystemsManagerAgent *imagebuilderimagerecipe.SystemsManagerAgent `hcl:"systems_manager_agent,block"`
	// DependsOn contains resources that ImagebuilderImageRecipe depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type imagebuilderImageRecipeAttributes struct {
	ref terra.Reference
}

func (iir imagebuilderImageRecipeAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(iir.ref.Append("arn"))
}

func (iir imagebuilderImageRecipeAttributes) DateCreated() terra.StringValue {
	return terra.ReferenceString(iir.ref.Append("date_created"))
}

func (iir imagebuilderImageRecipeAttributes) Description() terra.StringValue {
	return terra.ReferenceString(iir.ref.Append("description"))
}

func (iir imagebuilderImageRecipeAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iir.ref.Append("id"))
}

func (iir imagebuilderImageRecipeAttributes) Name() terra.StringValue {
	return terra.ReferenceString(iir.ref.Append("name"))
}

func (iir imagebuilderImageRecipeAttributes) Owner() terra.StringValue {
	return terra.ReferenceString(iir.ref.Append("owner"))
}

func (iir imagebuilderImageRecipeAttributes) ParentImage() terra.StringValue {
	return terra.ReferenceString(iir.ref.Append("parent_image"))
}

func (iir imagebuilderImageRecipeAttributes) Platform() terra.StringValue {
	return terra.ReferenceString(iir.ref.Append("platform"))
}

func (iir imagebuilderImageRecipeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](iir.ref.Append("tags"))
}

func (iir imagebuilderImageRecipeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](iir.ref.Append("tags_all"))
}

func (iir imagebuilderImageRecipeAttributes) UserDataBase64() terra.StringValue {
	return terra.ReferenceString(iir.ref.Append("user_data_base64"))
}

func (iir imagebuilderImageRecipeAttributes) Version() terra.StringValue {
	return terra.ReferenceString(iir.ref.Append("version"))
}

func (iir imagebuilderImageRecipeAttributes) WorkingDirectory() terra.StringValue {
	return terra.ReferenceString(iir.ref.Append("working_directory"))
}

func (iir imagebuilderImageRecipeAttributes) BlockDeviceMapping() terra.SetValue[imagebuilderimagerecipe.BlockDeviceMappingAttributes] {
	return terra.ReferenceSet[imagebuilderimagerecipe.BlockDeviceMappingAttributes](iir.ref.Append("block_device_mapping"))
}

func (iir imagebuilderImageRecipeAttributes) Component() terra.ListValue[imagebuilderimagerecipe.ComponentAttributes] {
	return terra.ReferenceList[imagebuilderimagerecipe.ComponentAttributes](iir.ref.Append("component"))
}

func (iir imagebuilderImageRecipeAttributes) SystemsManagerAgent() terra.ListValue[imagebuilderimagerecipe.SystemsManagerAgentAttributes] {
	return terra.ReferenceList[imagebuilderimagerecipe.SystemsManagerAgentAttributes](iir.ref.Append("systems_manager_agent"))
}

type imagebuilderImageRecipeState struct {
	Arn                 string                                             `json:"arn"`
	DateCreated         string                                             `json:"date_created"`
	Description         string                                             `json:"description"`
	Id                  string                                             `json:"id"`
	Name                string                                             `json:"name"`
	Owner               string                                             `json:"owner"`
	ParentImage         string                                             `json:"parent_image"`
	Platform            string                                             `json:"platform"`
	Tags                map[string]string                                  `json:"tags"`
	TagsAll             map[string]string                                  `json:"tags_all"`
	UserDataBase64      string                                             `json:"user_data_base64"`
	Version             string                                             `json:"version"`
	WorkingDirectory    string                                             `json:"working_directory"`
	BlockDeviceMapping  []imagebuilderimagerecipe.BlockDeviceMappingState  `json:"block_device_mapping"`
	Component           []imagebuilderimagerecipe.ComponentState           `json:"component"`
	SystemsManagerAgent []imagebuilderimagerecipe.SystemsManagerAgentState `json:"systems_manager_agent"`
}
