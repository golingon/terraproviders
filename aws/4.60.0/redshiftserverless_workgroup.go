// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	redshiftserverlessworkgroup "github.com/golingon/terraproviders/aws/4.60.0/redshiftserverlessworkgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftserverlessWorkgroup(name string, args RedshiftserverlessWorkgroupArgs) *RedshiftserverlessWorkgroup {
	return &RedshiftserverlessWorkgroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftserverlessWorkgroup)(nil)

type RedshiftserverlessWorkgroup struct {
	Name  string
	Args  RedshiftserverlessWorkgroupArgs
	state *redshiftserverlessWorkgroupState
}

func (rw *RedshiftserverlessWorkgroup) Type() string {
	return "aws_redshiftserverless_workgroup"
}

func (rw *RedshiftserverlessWorkgroup) LocalName() string {
	return rw.Name
}

func (rw *RedshiftserverlessWorkgroup) Configuration() interface{} {
	return rw.Args
}

func (rw *RedshiftserverlessWorkgroup) Attributes() redshiftserverlessWorkgroupAttributes {
	return redshiftserverlessWorkgroupAttributes{ref: terra.ReferenceResource(rw)}
}

func (rw *RedshiftserverlessWorkgroup) ImportState(av io.Reader) error {
	rw.state = &redshiftserverlessWorkgroupState{}
	if err := json.NewDecoder(av).Decode(rw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rw.Type(), rw.LocalName(), err)
	}
	return nil
}

func (rw *RedshiftserverlessWorkgroup) State() (*redshiftserverlessWorkgroupState, bool) {
	return rw.state, rw.state != nil
}

func (rw *RedshiftserverlessWorkgroup) StateMust() *redshiftserverlessWorkgroupState {
	if rw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rw.Type(), rw.LocalName()))
	}
	return rw.state
}

func (rw *RedshiftserverlessWorkgroup) DependOn() terra.Reference {
	return terra.ReferenceResource(rw)
}

type RedshiftserverlessWorkgroupArgs struct {
	// BaseCapacity: number, optional
	BaseCapacity terra.NumberValue `hcl:"base_capacity,attr"`
	// EnhancedVpcRouting: bool, optional
	EnhancedVpcRouting terra.BoolValue `hcl:"enhanced_vpc_routing,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// PubliclyAccessible: bool, optional
	PubliclyAccessible terra.BoolValue `hcl:"publicly_accessible,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// WorkgroupName: string, required
	WorkgroupName terra.StringValue `hcl:"workgroup_name,attr" validate:"required"`
	// Endpoint: min=0
	Endpoint []redshiftserverlessworkgroup.Endpoint `hcl:"endpoint,block" validate:"min=0"`
	// ConfigParameter: min=0
	ConfigParameter []redshiftserverlessworkgroup.ConfigParameter `hcl:"config_parameter,block" validate:"min=0"`
	// DependsOn contains resources that RedshiftserverlessWorkgroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftserverlessWorkgroupAttributes struct {
	ref terra.Reference
}

func (rw redshiftserverlessWorkgroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rw.ref.Append("arn"))
}

func (rw redshiftserverlessWorkgroupAttributes) BaseCapacity() terra.NumberValue {
	return terra.ReferenceNumber(rw.ref.Append("base_capacity"))
}

func (rw redshiftserverlessWorkgroupAttributes) EnhancedVpcRouting() terra.BoolValue {
	return terra.ReferenceBool(rw.ref.Append("enhanced_vpc_routing"))
}

func (rw redshiftserverlessWorkgroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rw.ref.Append("id"))
}

func (rw redshiftserverlessWorkgroupAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceString(rw.ref.Append("namespace_name"))
}

func (rw redshiftserverlessWorkgroupAttributes) PubliclyAccessible() terra.BoolValue {
	return terra.ReferenceBool(rw.ref.Append("publicly_accessible"))
}

func (rw redshiftserverlessWorkgroupAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rw.ref.Append("security_group_ids"))
}

func (rw redshiftserverlessWorkgroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rw.ref.Append("subnet_ids"))
}

func (rw redshiftserverlessWorkgroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rw.ref.Append("tags"))
}

func (rw redshiftserverlessWorkgroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rw.ref.Append("tags_all"))
}

func (rw redshiftserverlessWorkgroupAttributes) WorkgroupId() terra.StringValue {
	return terra.ReferenceString(rw.ref.Append("workgroup_id"))
}

func (rw redshiftserverlessWorkgroupAttributes) WorkgroupName() terra.StringValue {
	return terra.ReferenceString(rw.ref.Append("workgroup_name"))
}

func (rw redshiftserverlessWorkgroupAttributes) Endpoint() terra.ListValue[redshiftserverlessworkgroup.EndpointAttributes] {
	return terra.ReferenceList[redshiftserverlessworkgroup.EndpointAttributes](rw.ref.Append("endpoint"))
}

func (rw redshiftserverlessWorkgroupAttributes) ConfigParameter() terra.ListValue[redshiftserverlessworkgroup.ConfigParameterAttributes] {
	return terra.ReferenceList[redshiftserverlessworkgroup.ConfigParameterAttributes](rw.ref.Append("config_parameter"))
}

type redshiftserverlessWorkgroupState struct {
	Arn                string                                             `json:"arn"`
	BaseCapacity       float64                                            `json:"base_capacity"`
	EnhancedVpcRouting bool                                               `json:"enhanced_vpc_routing"`
	Id                 string                                             `json:"id"`
	NamespaceName      string                                             `json:"namespace_name"`
	PubliclyAccessible bool                                               `json:"publicly_accessible"`
	SecurityGroupIds   []string                                           `json:"security_group_ids"`
	SubnetIds          []string                                           `json:"subnet_ids"`
	Tags               map[string]string                                  `json:"tags"`
	TagsAll            map[string]string                                  `json:"tags_all"`
	WorkgroupId        string                                             `json:"workgroup_id"`
	WorkgroupName      string                                             `json:"workgroup_name"`
	Endpoint           []redshiftserverlessworkgroup.EndpointState        `json:"endpoint"`
	ConfigParameter    []redshiftserverlessworkgroup.ConfigParameterState `json:"config_parameter"`
}
