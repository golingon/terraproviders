// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewSsmActivation creates a new instance of [SsmActivation].
func NewSsmActivation(name string, args SsmActivationArgs) *SsmActivation {
	return &SsmActivation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SsmActivation)(nil)

// SsmActivation represents the Terraform resource aws_ssm_activation.
type SsmActivation struct {
	Name      string
	Args      SsmActivationArgs
	state     *ssmActivationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SsmActivation].
func (sa *SsmActivation) Type() string {
	return "aws_ssm_activation"
}

// LocalName returns the local name for [SsmActivation].
func (sa *SsmActivation) LocalName() string {
	return sa.Name
}

// Configuration returns the configuration (args) for [SsmActivation].
func (sa *SsmActivation) Configuration() interface{} {
	return sa.Args
}

// DependOn is used for other resources to depend on [SsmActivation].
func (sa *SsmActivation) DependOn() terra.Reference {
	return terra.ReferenceResource(sa)
}

// Dependencies returns the list of resources [SsmActivation] depends_on.
func (sa *SsmActivation) Dependencies() terra.Dependencies {
	return sa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SsmActivation].
func (sa *SsmActivation) LifecycleManagement() *terra.Lifecycle {
	return sa.Lifecycle
}

// Attributes returns the attributes for [SsmActivation].
func (sa *SsmActivation) Attributes() ssmActivationAttributes {
	return ssmActivationAttributes{ref: terra.ReferenceResource(sa)}
}

// ImportState imports the given attribute values into [SsmActivation]'s state.
func (sa *SsmActivation) ImportState(av io.Reader) error {
	sa.state = &ssmActivationState{}
	if err := json.NewDecoder(av).Decode(sa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sa.Type(), sa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SsmActivation] has state.
func (sa *SsmActivation) State() (*ssmActivationState, bool) {
	return sa.state, sa.state != nil
}

// StateMust returns the state for [SsmActivation]. Panics if the state is nil.
func (sa *SsmActivation) StateMust() *ssmActivationState {
	if sa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sa.Type(), sa.LocalName()))
	}
	return sa.state
}

// SsmActivationArgs contains the configurations for aws_ssm_activation.
type SsmActivationArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExpirationDate: string, optional
	ExpirationDate terra.StringValue `hcl:"expiration_date,attr"`
	// IamRole: string, required
	IamRole terra.StringValue `hcl:"iam_role,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// RegistrationLimit: number, optional
	RegistrationLimit terra.NumberValue `hcl:"registration_limit,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type ssmActivationAttributes struct {
	ref terra.Reference
}

// ActivationCode returns a reference to field activation_code of aws_ssm_activation.
func (sa ssmActivationAttributes) ActivationCode() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("activation_code"))
}

// Description returns a reference to field description of aws_ssm_activation.
func (sa ssmActivationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("description"))
}

// ExpirationDate returns a reference to field expiration_date of aws_ssm_activation.
func (sa ssmActivationAttributes) ExpirationDate() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("expiration_date"))
}

// Expired returns a reference to field expired of aws_ssm_activation.
func (sa ssmActivationAttributes) Expired() terra.BoolValue {
	return terra.ReferenceAsBool(sa.ref.Append("expired"))
}

// IamRole returns a reference to field iam_role of aws_ssm_activation.
func (sa ssmActivationAttributes) IamRole() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("iam_role"))
}

// Id returns a reference to field id of aws_ssm_activation.
func (sa ssmActivationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("id"))
}

// Name returns a reference to field name of aws_ssm_activation.
func (sa ssmActivationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("name"))
}

// RegistrationCount returns a reference to field registration_count of aws_ssm_activation.
func (sa ssmActivationAttributes) RegistrationCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sa.ref.Append("registration_count"))
}

// RegistrationLimit returns a reference to field registration_limit of aws_ssm_activation.
func (sa ssmActivationAttributes) RegistrationLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(sa.ref.Append("registration_limit"))
}

// Tags returns a reference to field tags of aws_ssm_activation.
func (sa ssmActivationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sa.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ssm_activation.
func (sa ssmActivationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sa.ref.Append("tags_all"))
}

type ssmActivationState struct {
	ActivationCode    string            `json:"activation_code"`
	Description       string            `json:"description"`
	ExpirationDate    string            `json:"expiration_date"`
	Expired           bool              `json:"expired"`
	IamRole           string            `json:"iam_role"`
	Id                string            `json:"id"`
	Name              string            `json:"name"`
	RegistrationCount float64           `json:"registration_count"`
	RegistrationLimit float64           `json:"registration_limit"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
}
