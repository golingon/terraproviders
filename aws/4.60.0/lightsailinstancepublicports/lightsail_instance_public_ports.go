// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package lightsailinstancepublicports

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type PortInfo struct {
	// CidrListAliases: set of string, optional
	CidrListAliases terra.SetValue[terra.StringValue] `hcl:"cidr_list_aliases,attr"`
	// Cidrs: set of string, optional
	Cidrs terra.SetValue[terra.StringValue] `hcl:"cidrs,attr"`
	// FromPort: number, required
	FromPort terra.NumberValue `hcl:"from_port,attr" validate:"required"`
	// Ipv6Cidrs: set of string, optional
	Ipv6Cidrs terra.SetValue[terra.StringValue] `hcl:"ipv6_cidrs,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// ToPort: number, required
	ToPort terra.NumberValue `hcl:"to_port,attr" validate:"required"`
}

type PortInfoAttributes struct {
	ref terra.Reference
}

func (pi PortInfoAttributes) InternalRef() (terra.Reference, error) {
	return pi.ref, nil
}

func (pi PortInfoAttributes) InternalWithRef(ref terra.Reference) PortInfoAttributes {
	return PortInfoAttributes{ref: ref}
}

func (pi PortInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pi.ref.InternalTokens()
}

func (pi PortInfoAttributes) CidrListAliases() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pi.ref.Append("cidr_list_aliases"))
}

func (pi PortInfoAttributes) Cidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pi.ref.Append("cidrs"))
}

func (pi PortInfoAttributes) FromPort() terra.NumberValue {
	return terra.ReferenceAsNumber(pi.ref.Append("from_port"))
}

func (pi PortInfoAttributes) Ipv6Cidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pi.ref.Append("ipv6_cidrs"))
}

func (pi PortInfoAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(pi.ref.Append("protocol"))
}

func (pi PortInfoAttributes) ToPort() terra.NumberValue {
	return terra.ReferenceAsNumber(pi.ref.Append("to_port"))
}

type PortInfoState struct {
	CidrListAliases []string `json:"cidr_list_aliases"`
	Cidrs           []string `json:"cidrs"`
	FromPort        float64  `json:"from_port"`
	Ipv6Cidrs       []string `json:"ipv6_cidrs"`
	Protocol        string   `json:"protocol"`
	ToPort          float64  `json:"to_port"`
}
