// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudwatcheventconnection "github.com/golingon/terraproviders/aws/4.60.0/cloudwatcheventconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudwatchEventConnection(name string, args CloudwatchEventConnectionArgs) *CloudwatchEventConnection {
	return &CloudwatchEventConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudwatchEventConnection)(nil)

type CloudwatchEventConnection struct {
	Name  string
	Args  CloudwatchEventConnectionArgs
	state *cloudwatchEventConnectionState
}

func (cec *CloudwatchEventConnection) Type() string {
	return "aws_cloudwatch_event_connection"
}

func (cec *CloudwatchEventConnection) LocalName() string {
	return cec.Name
}

func (cec *CloudwatchEventConnection) Configuration() interface{} {
	return cec.Args
}

func (cec *CloudwatchEventConnection) Attributes() cloudwatchEventConnectionAttributes {
	return cloudwatchEventConnectionAttributes{ref: terra.ReferenceResource(cec)}
}

func (cec *CloudwatchEventConnection) ImportState(av io.Reader) error {
	cec.state = &cloudwatchEventConnectionState{}
	if err := json.NewDecoder(av).Decode(cec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cec.Type(), cec.LocalName(), err)
	}
	return nil
}

func (cec *CloudwatchEventConnection) State() (*cloudwatchEventConnectionState, bool) {
	return cec.state, cec.state != nil
}

func (cec *CloudwatchEventConnection) StateMust() *cloudwatchEventConnectionState {
	if cec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cec.Type(), cec.LocalName()))
	}
	return cec.state
}

func (cec *CloudwatchEventConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(cec)
}

type CloudwatchEventConnectionArgs struct {
	// AuthorizationType: string, required
	AuthorizationType terra.StringValue `hcl:"authorization_type,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// AuthParameters: required
	AuthParameters *cloudwatcheventconnection.AuthParameters `hcl:"auth_parameters,block" validate:"required"`
	// DependsOn contains resources that CloudwatchEventConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudwatchEventConnectionAttributes struct {
	ref terra.Reference
}

func (cec cloudwatchEventConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cec.ref.Append("arn"))
}

func (cec cloudwatchEventConnectionAttributes) AuthorizationType() terra.StringValue {
	return terra.ReferenceString(cec.ref.Append("authorization_type"))
}

func (cec cloudwatchEventConnectionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cec.ref.Append("description"))
}

func (cec cloudwatchEventConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cec.ref.Append("id"))
}

func (cec cloudwatchEventConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cec.ref.Append("name"))
}

func (cec cloudwatchEventConnectionAttributes) SecretArn() terra.StringValue {
	return terra.ReferenceString(cec.ref.Append("secret_arn"))
}

func (cec cloudwatchEventConnectionAttributes) AuthParameters() terra.ListValue[cloudwatcheventconnection.AuthParametersAttributes] {
	return terra.ReferenceList[cloudwatcheventconnection.AuthParametersAttributes](cec.ref.Append("auth_parameters"))
}

type cloudwatchEventConnectionState struct {
	Arn               string                                          `json:"arn"`
	AuthorizationType string                                          `json:"authorization_type"`
	Description       string                                          `json:"description"`
	Id                string                                          `json:"id"`
	Name              string                                          `json:"name"`
	SecretArn         string                                          `json:"secret_arn"`
	AuthParameters    []cloudwatcheventconnection.AuthParametersState `json:"auth_parameters"`
}
