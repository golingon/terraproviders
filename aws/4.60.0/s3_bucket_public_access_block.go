// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketPublicAccessBlock(name string, args S3BucketPublicAccessBlockArgs) *S3BucketPublicAccessBlock {
	return &S3BucketPublicAccessBlock{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketPublicAccessBlock)(nil)

type S3BucketPublicAccessBlock struct {
	Name  string
	Args  S3BucketPublicAccessBlockArgs
	state *s3BucketPublicAccessBlockState
}

func (sbpab *S3BucketPublicAccessBlock) Type() string {
	return "aws_s3_bucket_public_access_block"
}

func (sbpab *S3BucketPublicAccessBlock) LocalName() string {
	return sbpab.Name
}

func (sbpab *S3BucketPublicAccessBlock) Configuration() interface{} {
	return sbpab.Args
}

func (sbpab *S3BucketPublicAccessBlock) Attributes() s3BucketPublicAccessBlockAttributes {
	return s3BucketPublicAccessBlockAttributes{ref: terra.ReferenceResource(sbpab)}
}

func (sbpab *S3BucketPublicAccessBlock) ImportState(av io.Reader) error {
	sbpab.state = &s3BucketPublicAccessBlockState{}
	if err := json.NewDecoder(av).Decode(sbpab.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbpab.Type(), sbpab.LocalName(), err)
	}
	return nil
}

func (sbpab *S3BucketPublicAccessBlock) State() (*s3BucketPublicAccessBlockState, bool) {
	return sbpab.state, sbpab.state != nil
}

func (sbpab *S3BucketPublicAccessBlock) StateMust() *s3BucketPublicAccessBlockState {
	if sbpab.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbpab.Type(), sbpab.LocalName()))
	}
	return sbpab.state
}

func (sbpab *S3BucketPublicAccessBlock) DependOn() terra.Reference {
	return terra.ReferenceResource(sbpab)
}

type S3BucketPublicAccessBlockArgs struct {
	// BlockPublicAcls: bool, optional
	BlockPublicAcls terra.BoolValue `hcl:"block_public_acls,attr"`
	// BlockPublicPolicy: bool, optional
	BlockPublicPolicy terra.BoolValue `hcl:"block_public_policy,attr"`
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnorePublicAcls: bool, optional
	IgnorePublicAcls terra.BoolValue `hcl:"ignore_public_acls,attr"`
	// RestrictPublicBuckets: bool, optional
	RestrictPublicBuckets terra.BoolValue `hcl:"restrict_public_buckets,attr"`
	// DependsOn contains resources that S3BucketPublicAccessBlock depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketPublicAccessBlockAttributes struct {
	ref terra.Reference
}

func (sbpab s3BucketPublicAccessBlockAttributes) BlockPublicAcls() terra.BoolValue {
	return terra.ReferenceBool(sbpab.ref.Append("block_public_acls"))
}

func (sbpab s3BucketPublicAccessBlockAttributes) BlockPublicPolicy() terra.BoolValue {
	return terra.ReferenceBool(sbpab.ref.Append("block_public_policy"))
}

func (sbpab s3BucketPublicAccessBlockAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbpab.ref.Append("bucket"))
}

func (sbpab s3BucketPublicAccessBlockAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbpab.ref.Append("id"))
}

func (sbpab s3BucketPublicAccessBlockAttributes) IgnorePublicAcls() terra.BoolValue {
	return terra.ReferenceBool(sbpab.ref.Append("ignore_public_acls"))
}

func (sbpab s3BucketPublicAccessBlockAttributes) RestrictPublicBuckets() terra.BoolValue {
	return terra.ReferenceBool(sbpab.ref.Append("restrict_public_buckets"))
}

type s3BucketPublicAccessBlockState struct {
	BlockPublicAcls       bool   `json:"block_public_acls"`
	BlockPublicPolicy     bool   `json:"block_public_policy"`
	Bucket                string `json:"bucket"`
	Id                    string `json:"id"`
	IgnorePublicAcls      bool   `json:"ignore_public_acls"`
	RestrictPublicBuckets bool   `json:"restrict_public_buckets"`
}
