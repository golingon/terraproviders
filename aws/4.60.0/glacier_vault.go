// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	glaciervault "github.com/golingon/terraproviders/aws/4.60.0/glaciervault"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGlacierVault(name string, args GlacierVaultArgs) *GlacierVault {
	return &GlacierVault{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GlacierVault)(nil)

type GlacierVault struct {
	Name  string
	Args  GlacierVaultArgs
	state *glacierVaultState
}

func (gv *GlacierVault) Type() string {
	return "aws_glacier_vault"
}

func (gv *GlacierVault) LocalName() string {
	return gv.Name
}

func (gv *GlacierVault) Configuration() interface{} {
	return gv.Args
}

func (gv *GlacierVault) Attributes() glacierVaultAttributes {
	return glacierVaultAttributes{ref: terra.ReferenceResource(gv)}
}

func (gv *GlacierVault) ImportState(av io.Reader) error {
	gv.state = &glacierVaultState{}
	if err := json.NewDecoder(av).Decode(gv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gv.Type(), gv.LocalName(), err)
	}
	return nil
}

func (gv *GlacierVault) State() (*glacierVaultState, bool) {
	return gv.state, gv.state != nil
}

func (gv *GlacierVault) StateMust() *glacierVaultState {
	if gv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gv.Type(), gv.LocalName()))
	}
	return gv.state
}

func (gv *GlacierVault) DependOn() terra.Reference {
	return terra.ReferenceResource(gv)
}

type GlacierVaultArgs struct {
	// AccessPolicy: string, optional
	AccessPolicy terra.StringValue `hcl:"access_policy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Notification: optional
	Notification *glaciervault.Notification `hcl:"notification,block"`
	// DependsOn contains resources that GlacierVault depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type glacierVaultAttributes struct {
	ref terra.Reference
}

func (gv glacierVaultAttributes) AccessPolicy() terra.StringValue {
	return terra.ReferenceString(gv.ref.Append("access_policy"))
}

func (gv glacierVaultAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(gv.ref.Append("arn"))
}

func (gv glacierVaultAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gv.ref.Append("id"))
}

func (gv glacierVaultAttributes) Location() terra.StringValue {
	return terra.ReferenceString(gv.ref.Append("location"))
}

func (gv glacierVaultAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gv.ref.Append("name"))
}

func (gv glacierVaultAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gv.ref.Append("tags"))
}

func (gv glacierVaultAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gv.ref.Append("tags_all"))
}

func (gv glacierVaultAttributes) Notification() terra.ListValue[glaciervault.NotificationAttributes] {
	return terra.ReferenceList[glaciervault.NotificationAttributes](gv.ref.Append("notification"))
}

type glacierVaultState struct {
	AccessPolicy string                           `json:"access_policy"`
	Arn          string                           `json:"arn"`
	Id           string                           `json:"id"`
	Location     string                           `json:"location"`
	Name         string                           `json:"name"`
	Tags         map[string]string                `json:"tags"`
	TagsAll      map[string]string                `json:"tags_all"`
	Notification []glaciervault.NotificationState `json:"notification"`
}
