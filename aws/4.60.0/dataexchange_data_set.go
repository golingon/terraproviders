// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataexchangeDataSet(name string, args DataexchangeDataSetArgs) *DataexchangeDataSet {
	return &DataexchangeDataSet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataexchangeDataSet)(nil)

type DataexchangeDataSet struct {
	Name  string
	Args  DataexchangeDataSetArgs
	state *dataexchangeDataSetState
}

func (dds *DataexchangeDataSet) Type() string {
	return "aws_dataexchange_data_set"
}

func (dds *DataexchangeDataSet) LocalName() string {
	return dds.Name
}

func (dds *DataexchangeDataSet) Configuration() interface{} {
	return dds.Args
}

func (dds *DataexchangeDataSet) Attributes() dataexchangeDataSetAttributes {
	return dataexchangeDataSetAttributes{ref: terra.ReferenceResource(dds)}
}

func (dds *DataexchangeDataSet) ImportState(av io.Reader) error {
	dds.state = &dataexchangeDataSetState{}
	if err := json.NewDecoder(av).Decode(dds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dds.Type(), dds.LocalName(), err)
	}
	return nil
}

func (dds *DataexchangeDataSet) State() (*dataexchangeDataSetState, bool) {
	return dds.state, dds.state != nil
}

func (dds *DataexchangeDataSet) StateMust() *dataexchangeDataSetState {
	if dds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dds.Type(), dds.LocalName()))
	}
	return dds.state
}

func (dds *DataexchangeDataSet) DependOn() terra.Reference {
	return terra.ReferenceResource(dds)
}

type DataexchangeDataSetArgs struct {
	// AssetType: string, required
	AssetType terra.StringValue `hcl:"asset_type,attr" validate:"required"`
	// Description: string, required
	Description terra.StringValue `hcl:"description,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that DataexchangeDataSet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataexchangeDataSetAttributes struct {
	ref terra.Reference
}

func (dds dataexchangeDataSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dds.ref.Append("arn"))
}

func (dds dataexchangeDataSetAttributes) AssetType() terra.StringValue {
	return terra.ReferenceString(dds.ref.Append("asset_type"))
}

func (dds dataexchangeDataSetAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dds.ref.Append("description"))
}

func (dds dataexchangeDataSetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dds.ref.Append("id"))
}

func (dds dataexchangeDataSetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dds.ref.Append("name"))
}

func (dds dataexchangeDataSetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dds.ref.Append("tags"))
}

func (dds dataexchangeDataSetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dds.ref.Append("tags_all"))
}

type dataexchangeDataSetState struct {
	Arn         string            `json:"arn"`
	AssetType   string            `json:"asset_type"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
