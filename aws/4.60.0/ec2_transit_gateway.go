// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ec2transitgateway "github.com/golingon/terraproviders/aws/4.60.0/ec2transitgateway"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2TransitGateway(name string, args Ec2TransitGatewayArgs) *Ec2TransitGateway {
	return &Ec2TransitGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TransitGateway)(nil)

type Ec2TransitGateway struct {
	Name  string
	Args  Ec2TransitGatewayArgs
	state *ec2TransitGatewayState
}

func (etg *Ec2TransitGateway) Type() string {
	return "aws_ec2_transit_gateway"
}

func (etg *Ec2TransitGateway) LocalName() string {
	return etg.Name
}

func (etg *Ec2TransitGateway) Configuration() interface{} {
	return etg.Args
}

func (etg *Ec2TransitGateway) Attributes() ec2TransitGatewayAttributes {
	return ec2TransitGatewayAttributes{ref: terra.ReferenceResource(etg)}
}

func (etg *Ec2TransitGateway) ImportState(av io.Reader) error {
	etg.state = &ec2TransitGatewayState{}
	if err := json.NewDecoder(av).Decode(etg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etg.Type(), etg.LocalName(), err)
	}
	return nil
}

func (etg *Ec2TransitGateway) State() (*ec2TransitGatewayState, bool) {
	return etg.state, etg.state != nil
}

func (etg *Ec2TransitGateway) StateMust() *ec2TransitGatewayState {
	if etg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etg.Type(), etg.LocalName()))
	}
	return etg.state
}

func (etg *Ec2TransitGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(etg)
}

type Ec2TransitGatewayArgs struct {
	// AmazonSideAsn: number, optional
	AmazonSideAsn terra.NumberValue `hcl:"amazon_side_asn,attr"`
	// AutoAcceptSharedAttachments: string, optional
	AutoAcceptSharedAttachments terra.StringValue `hcl:"auto_accept_shared_attachments,attr"`
	// DefaultRouteTableAssociation: string, optional
	DefaultRouteTableAssociation terra.StringValue `hcl:"default_route_table_association,attr"`
	// DefaultRouteTablePropagation: string, optional
	DefaultRouteTablePropagation terra.StringValue `hcl:"default_route_table_propagation,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DnsSupport: string, optional
	DnsSupport terra.StringValue `hcl:"dns_support,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MulticastSupport: string, optional
	MulticastSupport terra.StringValue `hcl:"multicast_support,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitGatewayCidrBlocks: set of string, optional
	TransitGatewayCidrBlocks terra.SetValue[terra.StringValue] `hcl:"transit_gateway_cidr_blocks,attr"`
	// VpnEcmpSupport: string, optional
	VpnEcmpSupport terra.StringValue `hcl:"vpn_ecmp_support,attr"`
	// Timeouts: optional
	Timeouts *ec2transitgateway.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Ec2TransitGateway depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2TransitGatewayAttributes struct {
	ref terra.Reference
}

func (etg ec2TransitGatewayAttributes) AmazonSideAsn() terra.NumberValue {
	return terra.ReferenceNumber(etg.ref.Append("amazon_side_asn"))
}

func (etg ec2TransitGatewayAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(etg.ref.Append("arn"))
}

func (etg ec2TransitGatewayAttributes) AssociationDefaultRouteTableId() terra.StringValue {
	return terra.ReferenceString(etg.ref.Append("association_default_route_table_id"))
}

func (etg ec2TransitGatewayAttributes) AutoAcceptSharedAttachments() terra.StringValue {
	return terra.ReferenceString(etg.ref.Append("auto_accept_shared_attachments"))
}

func (etg ec2TransitGatewayAttributes) DefaultRouteTableAssociation() terra.StringValue {
	return terra.ReferenceString(etg.ref.Append("default_route_table_association"))
}

func (etg ec2TransitGatewayAttributes) DefaultRouteTablePropagation() terra.StringValue {
	return terra.ReferenceString(etg.ref.Append("default_route_table_propagation"))
}

func (etg ec2TransitGatewayAttributes) Description() terra.StringValue {
	return terra.ReferenceString(etg.ref.Append("description"))
}

func (etg ec2TransitGatewayAttributes) DnsSupport() terra.StringValue {
	return terra.ReferenceString(etg.ref.Append("dns_support"))
}

func (etg ec2TransitGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etg.ref.Append("id"))
}

func (etg ec2TransitGatewayAttributes) MulticastSupport() terra.StringValue {
	return terra.ReferenceString(etg.ref.Append("multicast_support"))
}

func (etg ec2TransitGatewayAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(etg.ref.Append("owner_id"))
}

func (etg ec2TransitGatewayAttributes) PropagationDefaultRouteTableId() terra.StringValue {
	return terra.ReferenceString(etg.ref.Append("propagation_default_route_table_id"))
}

func (etg ec2TransitGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etg.ref.Append("tags"))
}

func (etg ec2TransitGatewayAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etg.ref.Append("tags_all"))
}

func (etg ec2TransitGatewayAttributes) TransitGatewayCidrBlocks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](etg.ref.Append("transit_gateway_cidr_blocks"))
}

func (etg ec2TransitGatewayAttributes) VpnEcmpSupport() terra.StringValue {
	return terra.ReferenceString(etg.ref.Append("vpn_ecmp_support"))
}

func (etg ec2TransitGatewayAttributes) Timeouts() ec2transitgateway.TimeoutsAttributes {
	return terra.ReferenceSingle[ec2transitgateway.TimeoutsAttributes](etg.ref.Append("timeouts"))
}

type ec2TransitGatewayState struct {
	AmazonSideAsn                  float64                          `json:"amazon_side_asn"`
	Arn                            string                           `json:"arn"`
	AssociationDefaultRouteTableId string                           `json:"association_default_route_table_id"`
	AutoAcceptSharedAttachments    string                           `json:"auto_accept_shared_attachments"`
	DefaultRouteTableAssociation   string                           `json:"default_route_table_association"`
	DefaultRouteTablePropagation   string                           `json:"default_route_table_propagation"`
	Description                    string                           `json:"description"`
	DnsSupport                     string                           `json:"dns_support"`
	Id                             string                           `json:"id"`
	MulticastSupport               string                           `json:"multicast_support"`
	OwnerId                        string                           `json:"owner_id"`
	PropagationDefaultRouteTableId string                           `json:"propagation_default_route_table_id"`
	Tags                           map[string]string                `json:"tags"`
	TagsAll                        map[string]string                `json:"tags_all"`
	TransitGatewayCidrBlocks       []string                         `json:"transit_gateway_cidr_blocks"`
	VpnEcmpSupport                 string                           `json:"vpn_ecmp_support"`
	Timeouts                       *ec2transitgateway.TimeoutsState `json:"timeouts"`
}
