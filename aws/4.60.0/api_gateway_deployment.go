// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiGatewayDeployment(name string, args ApiGatewayDeploymentArgs) *ApiGatewayDeployment {
	return &ApiGatewayDeployment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayDeployment)(nil)

type ApiGatewayDeployment struct {
	Name  string
	Args  ApiGatewayDeploymentArgs
	state *apiGatewayDeploymentState
}

func (agd *ApiGatewayDeployment) Type() string {
	return "aws_api_gateway_deployment"
}

func (agd *ApiGatewayDeployment) LocalName() string {
	return agd.Name
}

func (agd *ApiGatewayDeployment) Configuration() interface{} {
	return agd.Args
}

func (agd *ApiGatewayDeployment) Attributes() apiGatewayDeploymentAttributes {
	return apiGatewayDeploymentAttributes{ref: terra.ReferenceResource(agd)}
}

func (agd *ApiGatewayDeployment) ImportState(av io.Reader) error {
	agd.state = &apiGatewayDeploymentState{}
	if err := json.NewDecoder(av).Decode(agd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agd.Type(), agd.LocalName(), err)
	}
	return nil
}

func (agd *ApiGatewayDeployment) State() (*apiGatewayDeploymentState, bool) {
	return agd.state, agd.state != nil
}

func (agd *ApiGatewayDeployment) StateMust() *apiGatewayDeploymentState {
	if agd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agd.Type(), agd.LocalName()))
	}
	return agd.state
}

func (agd *ApiGatewayDeployment) DependOn() terra.Reference {
	return terra.ReferenceResource(agd)
}

type ApiGatewayDeploymentArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RestApiId: string, required
	RestApiId terra.StringValue `hcl:"rest_api_id,attr" validate:"required"`
	// StageDescription: string, optional
	StageDescription terra.StringValue `hcl:"stage_description,attr"`
	// StageName: string, optional
	StageName terra.StringValue `hcl:"stage_name,attr"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
	// Variables: map of string, optional
	Variables terra.MapValue[terra.StringValue] `hcl:"variables,attr"`
	// DependsOn contains resources that ApiGatewayDeployment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiGatewayDeploymentAttributes struct {
	ref terra.Reference
}

func (agd apiGatewayDeploymentAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceString(agd.ref.Append("created_date"))
}

func (agd apiGatewayDeploymentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(agd.ref.Append("description"))
}

func (agd apiGatewayDeploymentAttributes) ExecutionArn() terra.StringValue {
	return terra.ReferenceString(agd.ref.Append("execution_arn"))
}

func (agd apiGatewayDeploymentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(agd.ref.Append("id"))
}

func (agd apiGatewayDeploymentAttributes) InvokeUrl() terra.StringValue {
	return terra.ReferenceString(agd.ref.Append("invoke_url"))
}

func (agd apiGatewayDeploymentAttributes) RestApiId() terra.StringValue {
	return terra.ReferenceString(agd.ref.Append("rest_api_id"))
}

func (agd apiGatewayDeploymentAttributes) StageDescription() terra.StringValue {
	return terra.ReferenceString(agd.ref.Append("stage_description"))
}

func (agd apiGatewayDeploymentAttributes) StageName() terra.StringValue {
	return terra.ReferenceString(agd.ref.Append("stage_name"))
}

func (agd apiGatewayDeploymentAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agd.ref.Append("triggers"))
}

func (agd apiGatewayDeploymentAttributes) Variables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agd.ref.Append("variables"))
}

type apiGatewayDeploymentState struct {
	CreatedDate      string            `json:"created_date"`
	Description      string            `json:"description"`
	ExecutionArn     string            `json:"execution_arn"`
	Id               string            `json:"id"`
	InvokeUrl        string            `json:"invoke_url"`
	RestApiId        string            `json:"rest_api_id"`
	StageDescription string            `json:"stage_description"`
	StageName        string            `json:"stage_name"`
	Triggers         map[string]string `json:"triggers"`
	Variables        map[string]string `json:"variables"`
}
