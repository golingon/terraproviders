// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecurityhubProductSubscription(name string, args SecurityhubProductSubscriptionArgs) *SecurityhubProductSubscription {
	return &SecurityhubProductSubscription{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityhubProductSubscription)(nil)

type SecurityhubProductSubscription struct {
	Name  string
	Args  SecurityhubProductSubscriptionArgs
	state *securityhubProductSubscriptionState
}

func (sps *SecurityhubProductSubscription) Type() string {
	return "aws_securityhub_product_subscription"
}

func (sps *SecurityhubProductSubscription) LocalName() string {
	return sps.Name
}

func (sps *SecurityhubProductSubscription) Configuration() interface{} {
	return sps.Args
}

func (sps *SecurityhubProductSubscription) Attributes() securityhubProductSubscriptionAttributes {
	return securityhubProductSubscriptionAttributes{ref: terra.ReferenceResource(sps)}
}

func (sps *SecurityhubProductSubscription) ImportState(av io.Reader) error {
	sps.state = &securityhubProductSubscriptionState{}
	if err := json.NewDecoder(av).Decode(sps.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sps.Type(), sps.LocalName(), err)
	}
	return nil
}

func (sps *SecurityhubProductSubscription) State() (*securityhubProductSubscriptionState, bool) {
	return sps.state, sps.state != nil
}

func (sps *SecurityhubProductSubscription) StateMust() *securityhubProductSubscriptionState {
	if sps.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sps.Type(), sps.LocalName()))
	}
	return sps.state
}

func (sps *SecurityhubProductSubscription) DependOn() terra.Reference {
	return terra.ReferenceResource(sps)
}

type SecurityhubProductSubscriptionArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProductArn: string, required
	ProductArn terra.StringValue `hcl:"product_arn,attr" validate:"required"`
	// DependsOn contains resources that SecurityhubProductSubscription depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type securityhubProductSubscriptionAttributes struct {
	ref terra.Reference
}

func (sps securityhubProductSubscriptionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sps.ref.Append("arn"))
}

func (sps securityhubProductSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sps.ref.Append("id"))
}

func (sps securityhubProductSubscriptionAttributes) ProductArn() terra.StringValue {
	return terra.ReferenceString(sps.ref.Append("product_arn"))
}

type securityhubProductSubscriptionState struct {
	Arn        string `json:"arn"`
	Id         string `json:"id"`
	ProductArn string `json:"product_arn"`
}
