// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ssmmaintenancewindowtarget "github.com/golingon/terraproviders/aws/4.60.0/ssmmaintenancewindowtarget"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSsmMaintenanceWindowTarget(name string, args SsmMaintenanceWindowTargetArgs) *SsmMaintenanceWindowTarget {
	return &SsmMaintenanceWindowTarget{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SsmMaintenanceWindowTarget)(nil)

type SsmMaintenanceWindowTarget struct {
	Name  string
	Args  SsmMaintenanceWindowTargetArgs
	state *ssmMaintenanceWindowTargetState
}

func (smwt *SsmMaintenanceWindowTarget) Type() string {
	return "aws_ssm_maintenance_window_target"
}

func (smwt *SsmMaintenanceWindowTarget) LocalName() string {
	return smwt.Name
}

func (smwt *SsmMaintenanceWindowTarget) Configuration() interface{} {
	return smwt.Args
}

func (smwt *SsmMaintenanceWindowTarget) Attributes() ssmMaintenanceWindowTargetAttributes {
	return ssmMaintenanceWindowTargetAttributes{ref: terra.ReferenceResource(smwt)}
}

func (smwt *SsmMaintenanceWindowTarget) ImportState(av io.Reader) error {
	smwt.state = &ssmMaintenanceWindowTargetState{}
	if err := json.NewDecoder(av).Decode(smwt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", smwt.Type(), smwt.LocalName(), err)
	}
	return nil
}

func (smwt *SsmMaintenanceWindowTarget) State() (*ssmMaintenanceWindowTargetState, bool) {
	return smwt.state, smwt.state != nil
}

func (smwt *SsmMaintenanceWindowTarget) StateMust() *ssmMaintenanceWindowTargetState {
	if smwt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", smwt.Type(), smwt.LocalName()))
	}
	return smwt.state
}

func (smwt *SsmMaintenanceWindowTarget) DependOn() terra.Reference {
	return terra.ReferenceResource(smwt)
}

type SsmMaintenanceWindowTargetArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// OwnerInformation: string, optional
	OwnerInformation terra.StringValue `hcl:"owner_information,attr"`
	// ResourceType: string, required
	ResourceType terra.StringValue `hcl:"resource_type,attr" validate:"required"`
	// WindowId: string, required
	WindowId terra.StringValue `hcl:"window_id,attr" validate:"required"`
	// Targets: min=1,max=5
	Targets []ssmmaintenancewindowtarget.Targets `hcl:"targets,block" validate:"min=1,max=5"`
	// DependsOn contains resources that SsmMaintenanceWindowTarget depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ssmMaintenanceWindowTargetAttributes struct {
	ref terra.Reference
}

func (smwt ssmMaintenanceWindowTargetAttributes) Description() terra.StringValue {
	return terra.ReferenceString(smwt.ref.Append("description"))
}

func (smwt ssmMaintenanceWindowTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(smwt.ref.Append("id"))
}

func (smwt ssmMaintenanceWindowTargetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(smwt.ref.Append("name"))
}

func (smwt ssmMaintenanceWindowTargetAttributes) OwnerInformation() terra.StringValue {
	return terra.ReferenceString(smwt.ref.Append("owner_information"))
}

func (smwt ssmMaintenanceWindowTargetAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceString(smwt.ref.Append("resource_type"))
}

func (smwt ssmMaintenanceWindowTargetAttributes) WindowId() terra.StringValue {
	return terra.ReferenceString(smwt.ref.Append("window_id"))
}

func (smwt ssmMaintenanceWindowTargetAttributes) Targets() terra.ListValue[ssmmaintenancewindowtarget.TargetsAttributes] {
	return terra.ReferenceList[ssmmaintenancewindowtarget.TargetsAttributes](smwt.ref.Append("targets"))
}

type ssmMaintenanceWindowTargetState struct {
	Description      string                                    `json:"description"`
	Id               string                                    `json:"id"`
	Name             string                                    `json:"name"`
	OwnerInformation string                                    `json:"owner_information"`
	ResourceType     string                                    `json:"resource_type"`
	WindowId         string                                    `json:"window_id"`
	Targets          []ssmmaintenancewindowtarget.TargetsState `json:"targets"`
}
