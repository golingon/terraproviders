// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecurityhubStandardsSubscription(name string, args SecurityhubStandardsSubscriptionArgs) *SecurityhubStandardsSubscription {
	return &SecurityhubStandardsSubscription{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecurityhubStandardsSubscription)(nil)

type SecurityhubStandardsSubscription struct {
	Name  string
	Args  SecurityhubStandardsSubscriptionArgs
	state *securityhubStandardsSubscriptionState
}

func (sss *SecurityhubStandardsSubscription) Type() string {
	return "aws_securityhub_standards_subscription"
}

func (sss *SecurityhubStandardsSubscription) LocalName() string {
	return sss.Name
}

func (sss *SecurityhubStandardsSubscription) Configuration() interface{} {
	return sss.Args
}

func (sss *SecurityhubStandardsSubscription) Attributes() securityhubStandardsSubscriptionAttributes {
	return securityhubStandardsSubscriptionAttributes{ref: terra.ReferenceResource(sss)}
}

func (sss *SecurityhubStandardsSubscription) ImportState(av io.Reader) error {
	sss.state = &securityhubStandardsSubscriptionState{}
	if err := json.NewDecoder(av).Decode(sss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sss.Type(), sss.LocalName(), err)
	}
	return nil
}

func (sss *SecurityhubStandardsSubscription) State() (*securityhubStandardsSubscriptionState, bool) {
	return sss.state, sss.state != nil
}

func (sss *SecurityhubStandardsSubscription) StateMust() *securityhubStandardsSubscriptionState {
	if sss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sss.Type(), sss.LocalName()))
	}
	return sss.state
}

func (sss *SecurityhubStandardsSubscription) DependOn() terra.Reference {
	return terra.ReferenceResource(sss)
}

type SecurityhubStandardsSubscriptionArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// StandardsArn: string, required
	StandardsArn terra.StringValue `hcl:"standards_arn,attr" validate:"required"`
	// DependsOn contains resources that SecurityhubStandardsSubscription depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type securityhubStandardsSubscriptionAttributes struct {
	ref terra.Reference
}

func (sss securityhubStandardsSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sss.ref.Append("id"))
}

func (sss securityhubStandardsSubscriptionAttributes) StandardsArn() terra.StringValue {
	return terra.ReferenceString(sss.ref.Append("standards_arn"))
}

type securityhubStandardsSubscriptionState struct {
	Id           string `json:"id"`
	StandardsArn string `json:"standards_arn"`
}
