// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	configconfigurationrecorder "github.com/golingon/terraproviders/aws/4.60.0/configconfigurationrecorder"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConfigConfigurationRecorder(name string, args ConfigConfigurationRecorderArgs) *ConfigConfigurationRecorder {
	return &ConfigConfigurationRecorder{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConfigConfigurationRecorder)(nil)

type ConfigConfigurationRecorder struct {
	Name  string
	Args  ConfigConfigurationRecorderArgs
	state *configConfigurationRecorderState
}

func (ccr *ConfigConfigurationRecorder) Type() string {
	return "aws_config_configuration_recorder"
}

func (ccr *ConfigConfigurationRecorder) LocalName() string {
	return ccr.Name
}

func (ccr *ConfigConfigurationRecorder) Configuration() interface{} {
	return ccr.Args
}

func (ccr *ConfigConfigurationRecorder) Attributes() configConfigurationRecorderAttributes {
	return configConfigurationRecorderAttributes{ref: terra.ReferenceResource(ccr)}
}

func (ccr *ConfigConfigurationRecorder) ImportState(av io.Reader) error {
	ccr.state = &configConfigurationRecorderState{}
	if err := json.NewDecoder(av).Decode(ccr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ccr.Type(), ccr.LocalName(), err)
	}
	return nil
}

func (ccr *ConfigConfigurationRecorder) State() (*configConfigurationRecorderState, bool) {
	return ccr.state, ccr.state != nil
}

func (ccr *ConfigConfigurationRecorder) StateMust() *configConfigurationRecorderState {
	if ccr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ccr.Type(), ccr.LocalName()))
	}
	return ccr.state
}

func (ccr *ConfigConfigurationRecorder) DependOn() terra.Reference {
	return terra.ReferenceResource(ccr)
}

type ConfigConfigurationRecorderArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// RecordingGroup: optional
	RecordingGroup *configconfigurationrecorder.RecordingGroup `hcl:"recording_group,block"`
	// DependsOn contains resources that ConfigConfigurationRecorder depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type configConfigurationRecorderAttributes struct {
	ref terra.Reference
}

func (ccr configConfigurationRecorderAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ccr.ref.Append("id"))
}

func (ccr configConfigurationRecorderAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ccr.ref.Append("name"))
}

func (ccr configConfigurationRecorderAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(ccr.ref.Append("role_arn"))
}

func (ccr configConfigurationRecorderAttributes) RecordingGroup() terra.ListValue[configconfigurationrecorder.RecordingGroupAttributes] {
	return terra.ReferenceList[configconfigurationrecorder.RecordingGroupAttributes](ccr.ref.Append("recording_group"))
}

type configConfigurationRecorderState struct {
	Id             string                                            `json:"id"`
	Name           string                                            `json:"name"`
	RoleArn        string                                            `json:"role_arn"`
	RecordingGroup []configconfigurationrecorder.RecordingGroupState `json:"recording_group"`
}
