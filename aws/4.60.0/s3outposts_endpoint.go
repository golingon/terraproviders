// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3outpostsendpoint "github.com/golingon/terraproviders/aws/4.60.0/s3outpostsendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3OutpostsEndpoint(name string, args S3OutpostsEndpointArgs) *S3OutpostsEndpoint {
	return &S3OutpostsEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3OutpostsEndpoint)(nil)

type S3OutpostsEndpoint struct {
	Name  string
	Args  S3OutpostsEndpointArgs
	state *s3OutpostsEndpointState
}

func (se *S3OutpostsEndpoint) Type() string {
	return "aws_s3outposts_endpoint"
}

func (se *S3OutpostsEndpoint) LocalName() string {
	return se.Name
}

func (se *S3OutpostsEndpoint) Configuration() interface{} {
	return se.Args
}

func (se *S3OutpostsEndpoint) Attributes() s3OutpostsEndpointAttributes {
	return s3OutpostsEndpointAttributes{ref: terra.ReferenceResource(se)}
}

func (se *S3OutpostsEndpoint) ImportState(av io.Reader) error {
	se.state = &s3OutpostsEndpointState{}
	if err := json.NewDecoder(av).Decode(se.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", se.Type(), se.LocalName(), err)
	}
	return nil
}

func (se *S3OutpostsEndpoint) State() (*s3OutpostsEndpointState, bool) {
	return se.state, se.state != nil
}

func (se *S3OutpostsEndpoint) StateMust() *s3OutpostsEndpointState {
	if se.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", se.Type(), se.LocalName()))
	}
	return se.state
}

func (se *S3OutpostsEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(se)
}

type S3OutpostsEndpointArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OutpostId: string, required
	OutpostId terra.StringValue `hcl:"outpost_id,attr" validate:"required"`
	// SecurityGroupId: string, required
	SecurityGroupId terra.StringValue `hcl:"security_group_id,attr" validate:"required"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// NetworkInterfaces: min=0
	NetworkInterfaces []s3outpostsendpoint.NetworkInterfaces `hcl:"network_interfaces,block" validate:"min=0"`
	// DependsOn contains resources that S3OutpostsEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3OutpostsEndpointAttributes struct {
	ref terra.Reference
}

func (se s3OutpostsEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("arn"))
}

func (se s3OutpostsEndpointAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("cidr_block"))
}

func (se s3OutpostsEndpointAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("creation_time"))
}

func (se s3OutpostsEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("id"))
}

func (se s3OutpostsEndpointAttributes) OutpostId() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("outpost_id"))
}

func (se s3OutpostsEndpointAttributes) SecurityGroupId() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("security_group_id"))
}

func (se s3OutpostsEndpointAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("subnet_id"))
}

func (se s3OutpostsEndpointAttributes) NetworkInterfaces() terra.SetValue[s3outpostsendpoint.NetworkInterfacesAttributes] {
	return terra.ReferenceSet[s3outpostsendpoint.NetworkInterfacesAttributes](se.ref.Append("network_interfaces"))
}

type s3OutpostsEndpointState struct {
	Arn               string                                      `json:"arn"`
	CidrBlock         string                                      `json:"cidr_block"`
	CreationTime      string                                      `json:"creation_time"`
	Id                string                                      `json:"id"`
	OutpostId         string                                      `json:"outpost_id"`
	SecurityGroupId   string                                      `json:"security_group_id"`
	SubnetId          string                                      `json:"subnet_id"`
	NetworkInterfaces []s3outpostsendpoint.NetworkInterfacesState `json:"network_interfaces"`
}
