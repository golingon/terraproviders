// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	vpcendpointpolicy "github.com/golingon/terraproviders/aws/4.60.0/vpcendpointpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVpcEndpointPolicy(name string, args VpcEndpointPolicyArgs) *VpcEndpointPolicy {
	return &VpcEndpointPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpcEndpointPolicy)(nil)

type VpcEndpointPolicy struct {
	Name  string
	Args  VpcEndpointPolicyArgs
	state *vpcEndpointPolicyState
}

func (vep *VpcEndpointPolicy) Type() string {
	return "aws_vpc_endpoint_policy"
}

func (vep *VpcEndpointPolicy) LocalName() string {
	return vep.Name
}

func (vep *VpcEndpointPolicy) Configuration() interface{} {
	return vep.Args
}

func (vep *VpcEndpointPolicy) Attributes() vpcEndpointPolicyAttributes {
	return vpcEndpointPolicyAttributes{ref: terra.ReferenceResource(vep)}
}

func (vep *VpcEndpointPolicy) ImportState(av io.Reader) error {
	vep.state = &vpcEndpointPolicyState{}
	if err := json.NewDecoder(av).Decode(vep.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vep.Type(), vep.LocalName(), err)
	}
	return nil
}

func (vep *VpcEndpointPolicy) State() (*vpcEndpointPolicyState, bool) {
	return vep.state, vep.state != nil
}

func (vep *VpcEndpointPolicy) StateMust() *vpcEndpointPolicyState {
	if vep.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vep.Type(), vep.LocalName()))
	}
	return vep.state
}

func (vep *VpcEndpointPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(vep)
}

type VpcEndpointPolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
	// VpcEndpointId: string, required
	VpcEndpointId terra.StringValue `hcl:"vpc_endpoint_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *vpcendpointpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VpcEndpointPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vpcEndpointPolicyAttributes struct {
	ref terra.Reference
}

func (vep vpcEndpointPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vep.ref.Append("id"))
}

func (vep vpcEndpointPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(vep.ref.Append("policy"))
}

func (vep vpcEndpointPolicyAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceString(vep.ref.Append("vpc_endpoint_id"))
}

func (vep vpcEndpointPolicyAttributes) Timeouts() vpcendpointpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[vpcendpointpolicy.TimeoutsAttributes](vep.ref.Append("timeouts"))
}

type vpcEndpointPolicyState struct {
	Id            string                           `json:"id"`
	Policy        string                           `json:"policy"`
	VpcEndpointId string                           `json:"vpc_endpoint_id"`
	Timeouts      *vpcendpointpolicy.TimeoutsState `json:"timeouts"`
}
