// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	redshiftserverlessendpointaccess "github.com/golingon/terraproviders/aws/4.60.0/redshiftserverlessendpointaccess"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftserverlessEndpointAccess(name string, args RedshiftserverlessEndpointAccessArgs) *RedshiftserverlessEndpointAccess {
	return &RedshiftserverlessEndpointAccess{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftserverlessEndpointAccess)(nil)

type RedshiftserverlessEndpointAccess struct {
	Name  string
	Args  RedshiftserverlessEndpointAccessArgs
	state *redshiftserverlessEndpointAccessState
}

func (rea *RedshiftserverlessEndpointAccess) Type() string {
	return "aws_redshiftserverless_endpoint_access"
}

func (rea *RedshiftserverlessEndpointAccess) LocalName() string {
	return rea.Name
}

func (rea *RedshiftserverlessEndpointAccess) Configuration() interface{} {
	return rea.Args
}

func (rea *RedshiftserverlessEndpointAccess) Attributes() redshiftserverlessEndpointAccessAttributes {
	return redshiftserverlessEndpointAccessAttributes{ref: terra.ReferenceResource(rea)}
}

func (rea *RedshiftserverlessEndpointAccess) ImportState(av io.Reader) error {
	rea.state = &redshiftserverlessEndpointAccessState{}
	if err := json.NewDecoder(av).Decode(rea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rea.Type(), rea.LocalName(), err)
	}
	return nil
}

func (rea *RedshiftserverlessEndpointAccess) State() (*redshiftserverlessEndpointAccessState, bool) {
	return rea.state, rea.state != nil
}

func (rea *RedshiftserverlessEndpointAccess) StateMust() *redshiftserverlessEndpointAccessState {
	if rea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rea.Type(), rea.LocalName()))
	}
	return rea.state
}

func (rea *RedshiftserverlessEndpointAccess) DependOn() terra.Reference {
	return terra.ReferenceResource(rea)
}

type RedshiftserverlessEndpointAccessArgs struct {
	// EndpointName: string, required
	EndpointName terra.StringValue `hcl:"endpoint_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// WorkgroupName: string, required
	WorkgroupName terra.StringValue `hcl:"workgroup_name,attr" validate:"required"`
	// VpcEndpoint: min=0
	VpcEndpoint []redshiftserverlessendpointaccess.VpcEndpoint `hcl:"vpc_endpoint,block" validate:"min=0"`
	// DependsOn contains resources that RedshiftserverlessEndpointAccess depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftserverlessEndpointAccessAttributes struct {
	ref terra.Reference
}

func (rea redshiftserverlessEndpointAccessAttributes) Address() terra.StringValue {
	return terra.ReferenceString(rea.ref.Append("address"))
}

func (rea redshiftserverlessEndpointAccessAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rea.ref.Append("arn"))
}

func (rea redshiftserverlessEndpointAccessAttributes) EndpointName() terra.StringValue {
	return terra.ReferenceString(rea.ref.Append("endpoint_name"))
}

func (rea redshiftserverlessEndpointAccessAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rea.ref.Append("id"))
}

func (rea redshiftserverlessEndpointAccessAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(rea.ref.Append("port"))
}

func (rea redshiftserverlessEndpointAccessAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rea.ref.Append("subnet_ids"))
}

func (rea redshiftserverlessEndpointAccessAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rea.ref.Append("vpc_security_group_ids"))
}

func (rea redshiftserverlessEndpointAccessAttributes) WorkgroupName() terra.StringValue {
	return terra.ReferenceString(rea.ref.Append("workgroup_name"))
}

func (rea redshiftserverlessEndpointAccessAttributes) VpcEndpoint() terra.ListValue[redshiftserverlessendpointaccess.VpcEndpointAttributes] {
	return terra.ReferenceList[redshiftserverlessendpointaccess.VpcEndpointAttributes](rea.ref.Append("vpc_endpoint"))
}

type redshiftserverlessEndpointAccessState struct {
	Address             string                                              `json:"address"`
	Arn                 string                                              `json:"arn"`
	EndpointName        string                                              `json:"endpoint_name"`
	Id                  string                                              `json:"id"`
	Port                float64                                             `json:"port"`
	SubnetIds           []string                                            `json:"subnet_ids"`
	VpcSecurityGroupIds []string                                            `json:"vpc_security_group_ids"`
	WorkgroupName       string                                              `json:"workgroup_name"`
	VpcEndpoint         []redshiftserverlessendpointaccess.VpcEndpointState `json:"vpc_endpoint"`
}
