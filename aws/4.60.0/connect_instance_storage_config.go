// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	connectinstancestorageconfig "github.com/golingon/terraproviders/aws/4.60.0/connectinstancestorageconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConnectInstanceStorageConfig(name string, args ConnectInstanceStorageConfigArgs) *ConnectInstanceStorageConfig {
	return &ConnectInstanceStorageConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConnectInstanceStorageConfig)(nil)

type ConnectInstanceStorageConfig struct {
	Name  string
	Args  ConnectInstanceStorageConfigArgs
	state *connectInstanceStorageConfigState
}

func (cisc *ConnectInstanceStorageConfig) Type() string {
	return "aws_connect_instance_storage_config"
}

func (cisc *ConnectInstanceStorageConfig) LocalName() string {
	return cisc.Name
}

func (cisc *ConnectInstanceStorageConfig) Configuration() interface{} {
	return cisc.Args
}

func (cisc *ConnectInstanceStorageConfig) Attributes() connectInstanceStorageConfigAttributes {
	return connectInstanceStorageConfigAttributes{ref: terra.ReferenceResource(cisc)}
}

func (cisc *ConnectInstanceStorageConfig) ImportState(av io.Reader) error {
	cisc.state = &connectInstanceStorageConfigState{}
	if err := json.NewDecoder(av).Decode(cisc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cisc.Type(), cisc.LocalName(), err)
	}
	return nil
}

func (cisc *ConnectInstanceStorageConfig) State() (*connectInstanceStorageConfigState, bool) {
	return cisc.state, cisc.state != nil
}

func (cisc *ConnectInstanceStorageConfig) StateMust() *connectInstanceStorageConfigState {
	if cisc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cisc.Type(), cisc.LocalName()))
	}
	return cisc.state
}

func (cisc *ConnectInstanceStorageConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(cisc)
}

type ConnectInstanceStorageConfigArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// ResourceType: string, required
	ResourceType terra.StringValue `hcl:"resource_type,attr" validate:"required"`
	// StorageConfig: required
	StorageConfig *connectinstancestorageconfig.StorageConfig `hcl:"storage_config,block" validate:"required"`
	// DependsOn contains resources that ConnectInstanceStorageConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type connectInstanceStorageConfigAttributes struct {
	ref terra.Reference
}

func (cisc connectInstanceStorageConfigAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceString(cisc.ref.Append("association_id"))
}

func (cisc connectInstanceStorageConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cisc.ref.Append("id"))
}

func (cisc connectInstanceStorageConfigAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceString(cisc.ref.Append("instance_id"))
}

func (cisc connectInstanceStorageConfigAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceString(cisc.ref.Append("resource_type"))
}

func (cisc connectInstanceStorageConfigAttributes) StorageConfig() terra.ListValue[connectinstancestorageconfig.StorageConfigAttributes] {
	return terra.ReferenceList[connectinstancestorageconfig.StorageConfigAttributes](cisc.ref.Append("storage_config"))
}

type connectInstanceStorageConfigState struct {
	AssociationId string                                            `json:"association_id"`
	Id            string                                            `json:"id"`
	InstanceId    string                                            `json:"instance_id"`
	ResourceType  string                                            `json:"resource_type"`
	StorageConfig []connectinstancestorageconfig.StorageConfigState `json:"storage_config"`
}
