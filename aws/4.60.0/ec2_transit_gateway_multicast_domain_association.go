// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ec2transitgatewaymulticastdomainassociation "github.com/golingon/terraproviders/aws/4.60.0/ec2transitgatewaymulticastdomainassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2TransitGatewayMulticastDomainAssociation(name string, args Ec2TransitGatewayMulticastDomainAssociationArgs) *Ec2TransitGatewayMulticastDomainAssociation {
	return &Ec2TransitGatewayMulticastDomainAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TransitGatewayMulticastDomainAssociation)(nil)

type Ec2TransitGatewayMulticastDomainAssociation struct {
	Name  string
	Args  Ec2TransitGatewayMulticastDomainAssociationArgs
	state *ec2TransitGatewayMulticastDomainAssociationState
}

func (etgmda *Ec2TransitGatewayMulticastDomainAssociation) Type() string {
	return "aws_ec2_transit_gateway_multicast_domain_association"
}

func (etgmda *Ec2TransitGatewayMulticastDomainAssociation) LocalName() string {
	return etgmda.Name
}

func (etgmda *Ec2TransitGatewayMulticastDomainAssociation) Configuration() interface{} {
	return etgmda.Args
}

func (etgmda *Ec2TransitGatewayMulticastDomainAssociation) Attributes() ec2TransitGatewayMulticastDomainAssociationAttributes {
	return ec2TransitGatewayMulticastDomainAssociationAttributes{ref: terra.ReferenceResource(etgmda)}
}

func (etgmda *Ec2TransitGatewayMulticastDomainAssociation) ImportState(av io.Reader) error {
	etgmda.state = &ec2TransitGatewayMulticastDomainAssociationState{}
	if err := json.NewDecoder(av).Decode(etgmda.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etgmda.Type(), etgmda.LocalName(), err)
	}
	return nil
}

func (etgmda *Ec2TransitGatewayMulticastDomainAssociation) State() (*ec2TransitGatewayMulticastDomainAssociationState, bool) {
	return etgmda.state, etgmda.state != nil
}

func (etgmda *Ec2TransitGatewayMulticastDomainAssociation) StateMust() *ec2TransitGatewayMulticastDomainAssociationState {
	if etgmda.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etgmda.Type(), etgmda.LocalName()))
	}
	return etgmda.state
}

func (etgmda *Ec2TransitGatewayMulticastDomainAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(etgmda)
}

type Ec2TransitGatewayMulticastDomainAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// TransitGatewayAttachmentId: string, required
	TransitGatewayAttachmentId terra.StringValue `hcl:"transit_gateway_attachment_id,attr" validate:"required"`
	// TransitGatewayMulticastDomainId: string, required
	TransitGatewayMulticastDomainId terra.StringValue `hcl:"transit_gateway_multicast_domain_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *ec2transitgatewaymulticastdomainassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Ec2TransitGatewayMulticastDomainAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2TransitGatewayMulticastDomainAssociationAttributes struct {
	ref terra.Reference
}

func (etgmda ec2TransitGatewayMulticastDomainAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etgmda.ref.Append("id"))
}

func (etgmda ec2TransitGatewayMulticastDomainAssociationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(etgmda.ref.Append("subnet_id"))
}

func (etgmda ec2TransitGatewayMulticastDomainAssociationAttributes) TransitGatewayAttachmentId() terra.StringValue {
	return terra.ReferenceString(etgmda.ref.Append("transit_gateway_attachment_id"))
}

func (etgmda ec2TransitGatewayMulticastDomainAssociationAttributes) TransitGatewayMulticastDomainId() terra.StringValue {
	return terra.ReferenceString(etgmda.ref.Append("transit_gateway_multicast_domain_id"))
}

func (etgmda ec2TransitGatewayMulticastDomainAssociationAttributes) Timeouts() ec2transitgatewaymulticastdomainassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[ec2transitgatewaymulticastdomainassociation.TimeoutsAttributes](etgmda.ref.Append("timeouts"))
}

type ec2TransitGatewayMulticastDomainAssociationState struct {
	Id                              string                                                     `json:"id"`
	SubnetId                        string                                                     `json:"subnet_id"`
	TransitGatewayAttachmentId      string                                                     `json:"transit_gateway_attachment_id"`
	TransitGatewayMulticastDomainId string                                                     `json:"transit_gateway_multicast_domain_id"`
	Timeouts                        *ec2transitgatewaymulticastdomainassociation.TimeoutsState `json:"timeouts"`
}
