// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3controlmultiregionaccesspoint "github.com/golingon/terraproviders/aws/4.60.0/s3controlmultiregionaccesspoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3ControlMultiRegionAccessPoint(name string, args S3ControlMultiRegionAccessPointArgs) *S3ControlMultiRegionAccessPoint {
	return &S3ControlMultiRegionAccessPoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3ControlMultiRegionAccessPoint)(nil)

type S3ControlMultiRegionAccessPoint struct {
	Name  string
	Args  S3ControlMultiRegionAccessPointArgs
	state *s3ControlMultiRegionAccessPointState
}

func (smrap *S3ControlMultiRegionAccessPoint) Type() string {
	return "aws_s3control_multi_region_access_point"
}

func (smrap *S3ControlMultiRegionAccessPoint) LocalName() string {
	return smrap.Name
}

func (smrap *S3ControlMultiRegionAccessPoint) Configuration() interface{} {
	return smrap.Args
}

func (smrap *S3ControlMultiRegionAccessPoint) Attributes() s3ControlMultiRegionAccessPointAttributes {
	return s3ControlMultiRegionAccessPointAttributes{ref: terra.ReferenceResource(smrap)}
}

func (smrap *S3ControlMultiRegionAccessPoint) ImportState(av io.Reader) error {
	smrap.state = &s3ControlMultiRegionAccessPointState{}
	if err := json.NewDecoder(av).Decode(smrap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", smrap.Type(), smrap.LocalName(), err)
	}
	return nil
}

func (smrap *S3ControlMultiRegionAccessPoint) State() (*s3ControlMultiRegionAccessPointState, bool) {
	return smrap.state, smrap.state != nil
}

func (smrap *S3ControlMultiRegionAccessPoint) StateMust() *s3ControlMultiRegionAccessPointState {
	if smrap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", smrap.Type(), smrap.LocalName()))
	}
	return smrap.state
}

func (smrap *S3ControlMultiRegionAccessPoint) DependOn() terra.Reference {
	return terra.ReferenceResource(smrap)
}

type S3ControlMultiRegionAccessPointArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Details: required
	Details *s3controlmultiregionaccesspoint.Details `hcl:"details,block" validate:"required"`
	// Timeouts: optional
	Timeouts *s3controlmultiregionaccesspoint.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that S3ControlMultiRegionAccessPoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3ControlMultiRegionAccessPointAttributes struct {
	ref terra.Reference
}

func (smrap s3ControlMultiRegionAccessPointAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("account_id"))
}

func (smrap s3ControlMultiRegionAccessPointAttributes) Alias() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("alias"))
}

func (smrap s3ControlMultiRegionAccessPointAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("arn"))
}

func (smrap s3ControlMultiRegionAccessPointAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("domain_name"))
}

func (smrap s3ControlMultiRegionAccessPointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("id"))
}

func (smrap s3ControlMultiRegionAccessPointAttributes) Status() terra.StringValue {
	return terra.ReferenceString(smrap.ref.Append("status"))
}

func (smrap s3ControlMultiRegionAccessPointAttributes) Details() terra.ListValue[s3controlmultiregionaccesspoint.DetailsAttributes] {
	return terra.ReferenceList[s3controlmultiregionaccesspoint.DetailsAttributes](smrap.ref.Append("details"))
}

func (smrap s3ControlMultiRegionAccessPointAttributes) Timeouts() s3controlmultiregionaccesspoint.TimeoutsAttributes {
	return terra.ReferenceSingle[s3controlmultiregionaccesspoint.TimeoutsAttributes](smrap.ref.Append("timeouts"))
}

type s3ControlMultiRegionAccessPointState struct {
	AccountId  string                                         `json:"account_id"`
	Alias      string                                         `json:"alias"`
	Arn        string                                         `json:"arn"`
	DomainName string                                         `json:"domain_name"`
	Id         string                                         `json:"id"`
	Status     string                                         `json:"status"`
	Details    []s3controlmultiregionaccesspoint.DetailsState `json:"details"`
	Timeouts   *s3controlmultiregionaccesspoint.TimeoutsState `json:"timeouts"`
}
