// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3controlstoragelensconfiguration "github.com/golingon/terraproviders/aws/4.60.0/s3controlstoragelensconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3ControlStorageLensConfiguration(name string, args S3ControlStorageLensConfigurationArgs) *S3ControlStorageLensConfiguration {
	return &S3ControlStorageLensConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3ControlStorageLensConfiguration)(nil)

type S3ControlStorageLensConfiguration struct {
	Name  string
	Args  S3ControlStorageLensConfigurationArgs
	state *s3ControlStorageLensConfigurationState
}

func (sslc *S3ControlStorageLensConfiguration) Type() string {
	return "aws_s3control_storage_lens_configuration"
}

func (sslc *S3ControlStorageLensConfiguration) LocalName() string {
	return sslc.Name
}

func (sslc *S3ControlStorageLensConfiguration) Configuration() interface{} {
	return sslc.Args
}

func (sslc *S3ControlStorageLensConfiguration) Attributes() s3ControlStorageLensConfigurationAttributes {
	return s3ControlStorageLensConfigurationAttributes{ref: terra.ReferenceResource(sslc)}
}

func (sslc *S3ControlStorageLensConfiguration) ImportState(av io.Reader) error {
	sslc.state = &s3ControlStorageLensConfigurationState{}
	if err := json.NewDecoder(av).Decode(sslc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sslc.Type(), sslc.LocalName(), err)
	}
	return nil
}

func (sslc *S3ControlStorageLensConfiguration) State() (*s3ControlStorageLensConfigurationState, bool) {
	return sslc.state, sslc.state != nil
}

func (sslc *S3ControlStorageLensConfiguration) StateMust() *s3ControlStorageLensConfigurationState {
	if sslc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sslc.Type(), sslc.LocalName()))
	}
	return sslc.state
}

func (sslc *S3ControlStorageLensConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(sslc)
}

type S3ControlStorageLensConfigurationArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// ConfigId: string, required
	ConfigId terra.StringValue `hcl:"config_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// StorageLensConfiguration: required
	StorageLensConfiguration *s3controlstoragelensconfiguration.StorageLensConfiguration `hcl:"storage_lens_configuration,block" validate:"required"`
	// DependsOn contains resources that S3ControlStorageLensConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3ControlStorageLensConfigurationAttributes struct {
	ref terra.Reference
}

func (sslc s3ControlStorageLensConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(sslc.ref.Append("account_id"))
}

func (sslc s3ControlStorageLensConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sslc.ref.Append("arn"))
}

func (sslc s3ControlStorageLensConfigurationAttributes) ConfigId() terra.StringValue {
	return terra.ReferenceString(sslc.ref.Append("config_id"))
}

func (sslc s3ControlStorageLensConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sslc.ref.Append("id"))
}

func (sslc s3ControlStorageLensConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sslc.ref.Append("tags"))
}

func (sslc s3ControlStorageLensConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sslc.ref.Append("tags_all"))
}

func (sslc s3ControlStorageLensConfigurationAttributes) StorageLensConfiguration() terra.ListValue[s3controlstoragelensconfiguration.StorageLensConfigurationAttributes] {
	return terra.ReferenceList[s3controlstoragelensconfiguration.StorageLensConfigurationAttributes](sslc.ref.Append("storage_lens_configuration"))
}

type s3ControlStorageLensConfigurationState struct {
	AccountId                string                                                            `json:"account_id"`
	Arn                      string                                                            `json:"arn"`
	ConfigId                 string                                                            `json:"config_id"`
	Id                       string                                                            `json:"id"`
	Tags                     map[string]string                                                 `json:"tags"`
	TagsAll                  map[string]string                                                 `json:"tags_all"`
	StorageLensConfiguration []s3controlstoragelensconfiguration.StorageLensConfigurationState `json:"storage_lens_configuration"`
}
