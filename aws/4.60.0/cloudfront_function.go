// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudfrontFunction(name string, args CloudfrontFunctionArgs) *CloudfrontFunction {
	return &CloudfrontFunction{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudfrontFunction)(nil)

type CloudfrontFunction struct {
	Name  string
	Args  CloudfrontFunctionArgs
	state *cloudfrontFunctionState
}

func (cf *CloudfrontFunction) Type() string {
	return "aws_cloudfront_function"
}

func (cf *CloudfrontFunction) LocalName() string {
	return cf.Name
}

func (cf *CloudfrontFunction) Configuration() interface{} {
	return cf.Args
}

func (cf *CloudfrontFunction) Attributes() cloudfrontFunctionAttributes {
	return cloudfrontFunctionAttributes{ref: terra.ReferenceResource(cf)}
}

func (cf *CloudfrontFunction) ImportState(av io.Reader) error {
	cf.state = &cloudfrontFunctionState{}
	if err := json.NewDecoder(av).Decode(cf.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cf.Type(), cf.LocalName(), err)
	}
	return nil
}

func (cf *CloudfrontFunction) State() (*cloudfrontFunctionState, bool) {
	return cf.state, cf.state != nil
}

func (cf *CloudfrontFunction) StateMust() *cloudfrontFunctionState {
	if cf.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cf.Type(), cf.LocalName()))
	}
	return cf.state
}

func (cf *CloudfrontFunction) DependOn() terra.Reference {
	return terra.ReferenceResource(cf)
}

type CloudfrontFunctionArgs struct {
	// Code: string, required
	Code terra.StringValue `hcl:"code,attr" validate:"required"`
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Publish: bool, optional
	Publish terra.BoolValue `hcl:"publish,attr"`
	// Runtime: string, required
	Runtime terra.StringValue `hcl:"runtime,attr" validate:"required"`
	// DependsOn contains resources that CloudfrontFunction depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudfrontFunctionAttributes struct {
	ref terra.Reference
}

func (cf cloudfrontFunctionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cf.ref.Append("arn"))
}

func (cf cloudfrontFunctionAttributes) Code() terra.StringValue {
	return terra.ReferenceString(cf.ref.Append("code"))
}

func (cf cloudfrontFunctionAttributes) Comment() terra.StringValue {
	return terra.ReferenceString(cf.ref.Append("comment"))
}

func (cf cloudfrontFunctionAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(cf.ref.Append("etag"))
}

func (cf cloudfrontFunctionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cf.ref.Append("id"))
}

func (cf cloudfrontFunctionAttributes) LiveStageEtag() terra.StringValue {
	return terra.ReferenceString(cf.ref.Append("live_stage_etag"))
}

func (cf cloudfrontFunctionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cf.ref.Append("name"))
}

func (cf cloudfrontFunctionAttributes) Publish() terra.BoolValue {
	return terra.ReferenceBool(cf.ref.Append("publish"))
}

func (cf cloudfrontFunctionAttributes) Runtime() terra.StringValue {
	return terra.ReferenceString(cf.ref.Append("runtime"))
}

func (cf cloudfrontFunctionAttributes) Status() terra.StringValue {
	return terra.ReferenceString(cf.ref.Append("status"))
}

type cloudfrontFunctionState struct {
	Arn           string `json:"arn"`
	Code          string `json:"code"`
	Comment       string `json:"comment"`
	Etag          string `json:"etag"`
	Id            string `json:"id"`
	LiveStageEtag string `json:"live_stage_etag"`
	Name          string `json:"name"`
	Publish       bool   `json:"publish"`
	Runtime       string `json:"runtime"`
	Status        string `json:"status"`
}
