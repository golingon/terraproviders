// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53TrafficPolicy(name string, args Route53TrafficPolicyArgs) *Route53TrafficPolicy {
	return &Route53TrafficPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53TrafficPolicy)(nil)

type Route53TrafficPolicy struct {
	Name  string
	Args  Route53TrafficPolicyArgs
	state *route53TrafficPolicyState
}

func (rtp *Route53TrafficPolicy) Type() string {
	return "aws_route53_traffic_policy"
}

func (rtp *Route53TrafficPolicy) LocalName() string {
	return rtp.Name
}

func (rtp *Route53TrafficPolicy) Configuration() interface{} {
	return rtp.Args
}

func (rtp *Route53TrafficPolicy) Attributes() route53TrafficPolicyAttributes {
	return route53TrafficPolicyAttributes{ref: terra.ReferenceResource(rtp)}
}

func (rtp *Route53TrafficPolicy) ImportState(av io.Reader) error {
	rtp.state = &route53TrafficPolicyState{}
	if err := json.NewDecoder(av).Decode(rtp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rtp.Type(), rtp.LocalName(), err)
	}
	return nil
}

func (rtp *Route53TrafficPolicy) State() (*route53TrafficPolicyState, bool) {
	return rtp.state, rtp.state != nil
}

func (rtp *Route53TrafficPolicy) StateMust() *route53TrafficPolicyState {
	if rtp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rtp.Type(), rtp.LocalName()))
	}
	return rtp.state
}

func (rtp *Route53TrafficPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(rtp)
}

type Route53TrafficPolicyArgs struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// Document: string, required
	Document terra.StringValue `hcl:"document,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// DependsOn contains resources that Route53TrafficPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53TrafficPolicyAttributes struct {
	ref terra.Reference
}

func (rtp route53TrafficPolicyAttributes) Comment() terra.StringValue {
	return terra.ReferenceString(rtp.ref.Append("comment"))
}

func (rtp route53TrafficPolicyAttributes) Document() terra.StringValue {
	return terra.ReferenceString(rtp.ref.Append("document"))
}

func (rtp route53TrafficPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rtp.ref.Append("id"))
}

func (rtp route53TrafficPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rtp.ref.Append("name"))
}

func (rtp route53TrafficPolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceString(rtp.ref.Append("type"))
}

func (rtp route53TrafficPolicyAttributes) Version() terra.NumberValue {
	return terra.ReferenceNumber(rtp.ref.Append("version"))
}

type route53TrafficPolicyState struct {
	Comment  string  `json:"comment"`
	Document string  `json:"document"`
	Id       string  `json:"id"`
	Name     string  `json:"name"`
	Type     string  `json:"type"`
	Version  float64 `json:"version"`
}
