// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	autoscalinggroup "github.com/golingon/terraproviders/aws/4.60.0/autoscalinggroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAutoscalingGroup(name string, args AutoscalingGroupArgs) *AutoscalingGroup {
	return &AutoscalingGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AutoscalingGroup)(nil)

type AutoscalingGroup struct {
	Name  string
	Args  AutoscalingGroupArgs
	state *autoscalingGroupState
}

func (ag *AutoscalingGroup) Type() string {
	return "aws_autoscaling_group"
}

func (ag *AutoscalingGroup) LocalName() string {
	return ag.Name
}

func (ag *AutoscalingGroup) Configuration() interface{} {
	return ag.Args
}

func (ag *AutoscalingGroup) Attributes() autoscalingGroupAttributes {
	return autoscalingGroupAttributes{ref: terra.ReferenceResource(ag)}
}

func (ag *AutoscalingGroup) ImportState(av io.Reader) error {
	ag.state = &autoscalingGroupState{}
	if err := json.NewDecoder(av).Decode(ag.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ag.Type(), ag.LocalName(), err)
	}
	return nil
}

func (ag *AutoscalingGroup) State() (*autoscalingGroupState, bool) {
	return ag.state, ag.state != nil
}

func (ag *AutoscalingGroup) StateMust() *autoscalingGroupState {
	if ag.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ag.Type(), ag.LocalName()))
	}
	return ag.state
}

func (ag *AutoscalingGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(ag)
}

type AutoscalingGroupArgs struct {
	// AvailabilityZones: set of string, optional
	AvailabilityZones terra.SetValue[terra.StringValue] `hcl:"availability_zones,attr"`
	// CapacityRebalance: bool, optional
	CapacityRebalance terra.BoolValue `hcl:"capacity_rebalance,attr"`
	// Context: string, optional
	Context terra.StringValue `hcl:"context,attr"`
	// DefaultCooldown: number, optional
	DefaultCooldown terra.NumberValue `hcl:"default_cooldown,attr"`
	// DefaultInstanceWarmup: number, optional
	DefaultInstanceWarmup terra.NumberValue `hcl:"default_instance_warmup,attr"`
	// DesiredCapacity: number, optional
	DesiredCapacity terra.NumberValue `hcl:"desired_capacity,attr"`
	// DesiredCapacityType: string, optional
	DesiredCapacityType terra.StringValue `hcl:"desired_capacity_type,attr"`
	// EnabledMetrics: set of string, optional
	EnabledMetrics terra.SetValue[terra.StringValue] `hcl:"enabled_metrics,attr"`
	// ForceDelete: bool, optional
	ForceDelete terra.BoolValue `hcl:"force_delete,attr"`
	// ForceDeleteWarmPool: bool, optional
	ForceDeleteWarmPool terra.BoolValue `hcl:"force_delete_warm_pool,attr"`
	// HealthCheckGracePeriod: number, optional
	HealthCheckGracePeriod terra.NumberValue `hcl:"health_check_grace_period,attr"`
	// HealthCheckType: string, optional
	HealthCheckType terra.StringValue `hcl:"health_check_type,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LaunchConfiguration: string, optional
	LaunchConfiguration terra.StringValue `hcl:"launch_configuration,attr"`
	// LoadBalancers: set of string, optional
	LoadBalancers terra.SetValue[terra.StringValue] `hcl:"load_balancers,attr"`
	// MaxInstanceLifetime: number, optional
	MaxInstanceLifetime terra.NumberValue `hcl:"max_instance_lifetime,attr"`
	// MaxSize: number, required
	MaxSize terra.NumberValue `hcl:"max_size,attr" validate:"required"`
	// MetricsGranularity: string, optional
	MetricsGranularity terra.StringValue `hcl:"metrics_granularity,attr"`
	// MinElbCapacity: number, optional
	MinElbCapacity terra.NumberValue `hcl:"min_elb_capacity,attr"`
	// MinSize: number, required
	MinSize terra.NumberValue `hcl:"min_size,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// PlacementGroup: string, optional
	PlacementGroup terra.StringValue `hcl:"placement_group,attr"`
	// ProtectFromScaleIn: bool, optional
	ProtectFromScaleIn terra.BoolValue `hcl:"protect_from_scale_in,attr"`
	// ServiceLinkedRoleArn: string, optional
	ServiceLinkedRoleArn terra.StringValue `hcl:"service_linked_role_arn,attr"`
	// SuspendedProcesses: set of string, optional
	SuspendedProcesses terra.SetValue[terra.StringValue] `hcl:"suspended_processes,attr"`
	// Tags: set of map of string, optional
	Tags terra.SetValue[terra.MapValue[terra.StringValue]] `hcl:"tags,attr"`
	// TargetGroupArns: set of string, optional
	TargetGroupArns terra.SetValue[terra.StringValue] `hcl:"target_group_arns,attr"`
	// TerminationPolicies: list of string, optional
	TerminationPolicies terra.ListValue[terra.StringValue] `hcl:"termination_policies,attr"`
	// VpcZoneIdentifier: set of string, optional
	VpcZoneIdentifier terra.SetValue[terra.StringValue] `hcl:"vpc_zone_identifier,attr"`
	// WaitForCapacityTimeout: string, optional
	WaitForCapacityTimeout terra.StringValue `hcl:"wait_for_capacity_timeout,attr"`
	// WaitForElbCapacity: number, optional
	WaitForElbCapacity terra.NumberValue `hcl:"wait_for_elb_capacity,attr"`
	// InitialLifecycleHook: min=0
	InitialLifecycleHook []autoscalinggroup.InitialLifecycleHook `hcl:"initial_lifecycle_hook,block" validate:"min=0"`
	// InstanceRefresh: optional
	InstanceRefresh *autoscalinggroup.InstanceRefresh `hcl:"instance_refresh,block"`
	// LaunchTemplate: optional
	LaunchTemplate *autoscalinggroup.LaunchTemplate `hcl:"launch_template,block"`
	// MixedInstancesPolicy: optional
	MixedInstancesPolicy *autoscalinggroup.MixedInstancesPolicy `hcl:"mixed_instances_policy,block"`
	// Tag: min=0
	Tag []autoscalinggroup.Tag `hcl:"tag,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *autoscalinggroup.Timeouts `hcl:"timeouts,block"`
	// WarmPool: optional
	WarmPool *autoscalinggroup.WarmPool `hcl:"warm_pool,block"`
	// DependsOn contains resources that AutoscalingGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type autoscalingGroupAttributes struct {
	ref terra.Reference
}

func (ag autoscalingGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ag.ref.Append("arn"))
}

func (ag autoscalingGroupAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ag.ref.Append("availability_zones"))
}

func (ag autoscalingGroupAttributes) CapacityRebalance() terra.BoolValue {
	return terra.ReferenceBool(ag.ref.Append("capacity_rebalance"))
}

func (ag autoscalingGroupAttributes) Context() terra.StringValue {
	return terra.ReferenceString(ag.ref.Append("context"))
}

func (ag autoscalingGroupAttributes) DefaultCooldown() terra.NumberValue {
	return terra.ReferenceNumber(ag.ref.Append("default_cooldown"))
}

func (ag autoscalingGroupAttributes) DefaultInstanceWarmup() terra.NumberValue {
	return terra.ReferenceNumber(ag.ref.Append("default_instance_warmup"))
}

func (ag autoscalingGroupAttributes) DesiredCapacity() terra.NumberValue {
	return terra.ReferenceNumber(ag.ref.Append("desired_capacity"))
}

func (ag autoscalingGroupAttributes) DesiredCapacityType() terra.StringValue {
	return terra.ReferenceString(ag.ref.Append("desired_capacity_type"))
}

func (ag autoscalingGroupAttributes) EnabledMetrics() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ag.ref.Append("enabled_metrics"))
}

func (ag autoscalingGroupAttributes) ForceDelete() terra.BoolValue {
	return terra.ReferenceBool(ag.ref.Append("force_delete"))
}

func (ag autoscalingGroupAttributes) ForceDeleteWarmPool() terra.BoolValue {
	return terra.ReferenceBool(ag.ref.Append("force_delete_warm_pool"))
}

func (ag autoscalingGroupAttributes) HealthCheckGracePeriod() terra.NumberValue {
	return terra.ReferenceNumber(ag.ref.Append("health_check_grace_period"))
}

func (ag autoscalingGroupAttributes) HealthCheckType() terra.StringValue {
	return terra.ReferenceString(ag.ref.Append("health_check_type"))
}

func (ag autoscalingGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ag.ref.Append("id"))
}

func (ag autoscalingGroupAttributes) LaunchConfiguration() terra.StringValue {
	return terra.ReferenceString(ag.ref.Append("launch_configuration"))
}

func (ag autoscalingGroupAttributes) LoadBalancers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ag.ref.Append("load_balancers"))
}

func (ag autoscalingGroupAttributes) MaxInstanceLifetime() terra.NumberValue {
	return terra.ReferenceNumber(ag.ref.Append("max_instance_lifetime"))
}

func (ag autoscalingGroupAttributes) MaxSize() terra.NumberValue {
	return terra.ReferenceNumber(ag.ref.Append("max_size"))
}

func (ag autoscalingGroupAttributes) MetricsGranularity() terra.StringValue {
	return terra.ReferenceString(ag.ref.Append("metrics_granularity"))
}

func (ag autoscalingGroupAttributes) MinElbCapacity() terra.NumberValue {
	return terra.ReferenceNumber(ag.ref.Append("min_elb_capacity"))
}

func (ag autoscalingGroupAttributes) MinSize() terra.NumberValue {
	return terra.ReferenceNumber(ag.ref.Append("min_size"))
}

func (ag autoscalingGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ag.ref.Append("name"))
}

func (ag autoscalingGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(ag.ref.Append("name_prefix"))
}

func (ag autoscalingGroupAttributes) PlacementGroup() terra.StringValue {
	return terra.ReferenceString(ag.ref.Append("placement_group"))
}

func (ag autoscalingGroupAttributes) ProtectFromScaleIn() terra.BoolValue {
	return terra.ReferenceBool(ag.ref.Append("protect_from_scale_in"))
}

func (ag autoscalingGroupAttributes) ServiceLinkedRoleArn() terra.StringValue {
	return terra.ReferenceString(ag.ref.Append("service_linked_role_arn"))
}

func (ag autoscalingGroupAttributes) SuspendedProcesses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ag.ref.Append("suspended_processes"))
}

func (ag autoscalingGroupAttributes) Tags() terra.SetValue[terra.MapValue[terra.StringValue]] {
	return terra.ReferenceSet[terra.MapValue[terra.StringValue]](ag.ref.Append("tags"))
}

func (ag autoscalingGroupAttributes) TargetGroupArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ag.ref.Append("target_group_arns"))
}

func (ag autoscalingGroupAttributes) TerminationPolicies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ag.ref.Append("termination_policies"))
}

func (ag autoscalingGroupAttributes) VpcZoneIdentifier() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ag.ref.Append("vpc_zone_identifier"))
}

func (ag autoscalingGroupAttributes) WaitForCapacityTimeout() terra.StringValue {
	return terra.ReferenceString(ag.ref.Append("wait_for_capacity_timeout"))
}

func (ag autoscalingGroupAttributes) WaitForElbCapacity() terra.NumberValue {
	return terra.ReferenceNumber(ag.ref.Append("wait_for_elb_capacity"))
}

func (ag autoscalingGroupAttributes) InitialLifecycleHook() terra.SetValue[autoscalinggroup.InitialLifecycleHookAttributes] {
	return terra.ReferenceSet[autoscalinggroup.InitialLifecycleHookAttributes](ag.ref.Append("initial_lifecycle_hook"))
}

func (ag autoscalingGroupAttributes) InstanceRefresh() terra.ListValue[autoscalinggroup.InstanceRefreshAttributes] {
	return terra.ReferenceList[autoscalinggroup.InstanceRefreshAttributes](ag.ref.Append("instance_refresh"))
}

func (ag autoscalingGroupAttributes) LaunchTemplate() terra.ListValue[autoscalinggroup.LaunchTemplateAttributes] {
	return terra.ReferenceList[autoscalinggroup.LaunchTemplateAttributes](ag.ref.Append("launch_template"))
}

func (ag autoscalingGroupAttributes) MixedInstancesPolicy() terra.ListValue[autoscalinggroup.MixedInstancesPolicyAttributes] {
	return terra.ReferenceList[autoscalinggroup.MixedInstancesPolicyAttributes](ag.ref.Append("mixed_instances_policy"))
}

func (ag autoscalingGroupAttributes) Tag() terra.SetValue[autoscalinggroup.TagAttributes] {
	return terra.ReferenceSet[autoscalinggroup.TagAttributes](ag.ref.Append("tag"))
}

func (ag autoscalingGroupAttributes) Timeouts() autoscalinggroup.TimeoutsAttributes {
	return terra.ReferenceSingle[autoscalinggroup.TimeoutsAttributes](ag.ref.Append("timeouts"))
}

func (ag autoscalingGroupAttributes) WarmPool() terra.ListValue[autoscalinggroup.WarmPoolAttributes] {
	return terra.ReferenceList[autoscalinggroup.WarmPoolAttributes](ag.ref.Append("warm_pool"))
}

type autoscalingGroupState struct {
	Arn                    string                                       `json:"arn"`
	AvailabilityZones      []string                                     `json:"availability_zones"`
	CapacityRebalance      bool                                         `json:"capacity_rebalance"`
	Context                string                                       `json:"context"`
	DefaultCooldown        float64                                      `json:"default_cooldown"`
	DefaultInstanceWarmup  float64                                      `json:"default_instance_warmup"`
	DesiredCapacity        float64                                      `json:"desired_capacity"`
	DesiredCapacityType    string                                       `json:"desired_capacity_type"`
	EnabledMetrics         []string                                     `json:"enabled_metrics"`
	ForceDelete            bool                                         `json:"force_delete"`
	ForceDeleteWarmPool    bool                                         `json:"force_delete_warm_pool"`
	HealthCheckGracePeriod float64                                      `json:"health_check_grace_period"`
	HealthCheckType        string                                       `json:"health_check_type"`
	Id                     string                                       `json:"id"`
	LaunchConfiguration    string                                       `json:"launch_configuration"`
	LoadBalancers          []string                                     `json:"load_balancers"`
	MaxInstanceLifetime    float64                                      `json:"max_instance_lifetime"`
	MaxSize                float64                                      `json:"max_size"`
	MetricsGranularity     string                                       `json:"metrics_granularity"`
	MinElbCapacity         float64                                      `json:"min_elb_capacity"`
	MinSize                float64                                      `json:"min_size"`
	Name                   string                                       `json:"name"`
	NamePrefix             string                                       `json:"name_prefix"`
	PlacementGroup         string                                       `json:"placement_group"`
	ProtectFromScaleIn     bool                                         `json:"protect_from_scale_in"`
	ServiceLinkedRoleArn   string                                       `json:"service_linked_role_arn"`
	SuspendedProcesses     []string                                     `json:"suspended_processes"`
	Tags                   []map[string]string                          `json:"tags"`
	TargetGroupArns        []string                                     `json:"target_group_arns"`
	TerminationPolicies    []string                                     `json:"termination_policies"`
	VpcZoneIdentifier      []string                                     `json:"vpc_zone_identifier"`
	WaitForCapacityTimeout string                                       `json:"wait_for_capacity_timeout"`
	WaitForElbCapacity     float64                                      `json:"wait_for_elb_capacity"`
	InitialLifecycleHook   []autoscalinggroup.InitialLifecycleHookState `json:"initial_lifecycle_hook"`
	InstanceRefresh        []autoscalinggroup.InstanceRefreshState      `json:"instance_refresh"`
	LaunchTemplate         []autoscalinggroup.LaunchTemplateState       `json:"launch_template"`
	MixedInstancesPolicy   []autoscalinggroup.MixedInstancesPolicyState `json:"mixed_instances_policy"`
	Tag                    []autoscalinggroup.TagState                  `json:"tag"`
	Timeouts               *autoscalinggroup.TimeoutsState              `json:"timeouts"`
	WarmPool               []autoscalinggroup.WarmPoolState             `json:"warm_pool"`
}
