// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	apprunnervpcingressconnection "github.com/golingon/terraproviders/aws/4.60.0/apprunnervpcingressconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApprunnerVpcIngressConnection(name string, args ApprunnerVpcIngressConnectionArgs) *ApprunnerVpcIngressConnection {
	return &ApprunnerVpcIngressConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApprunnerVpcIngressConnection)(nil)

type ApprunnerVpcIngressConnection struct {
	Name  string
	Args  ApprunnerVpcIngressConnectionArgs
	state *apprunnerVpcIngressConnectionState
}

func (avic *ApprunnerVpcIngressConnection) Type() string {
	return "aws_apprunner_vpc_ingress_connection"
}

func (avic *ApprunnerVpcIngressConnection) LocalName() string {
	return avic.Name
}

func (avic *ApprunnerVpcIngressConnection) Configuration() interface{} {
	return avic.Args
}

func (avic *ApprunnerVpcIngressConnection) Attributes() apprunnerVpcIngressConnectionAttributes {
	return apprunnerVpcIngressConnectionAttributes{ref: terra.ReferenceResource(avic)}
}

func (avic *ApprunnerVpcIngressConnection) ImportState(av io.Reader) error {
	avic.state = &apprunnerVpcIngressConnectionState{}
	if err := json.NewDecoder(av).Decode(avic.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avic.Type(), avic.LocalName(), err)
	}
	return nil
}

func (avic *ApprunnerVpcIngressConnection) State() (*apprunnerVpcIngressConnectionState, bool) {
	return avic.state, avic.state != nil
}

func (avic *ApprunnerVpcIngressConnection) StateMust() *apprunnerVpcIngressConnectionState {
	if avic.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avic.Type(), avic.LocalName()))
	}
	return avic.state
}

func (avic *ApprunnerVpcIngressConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(avic)
}

type ApprunnerVpcIngressConnectionArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServiceArn: string, required
	ServiceArn terra.StringValue `hcl:"service_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// IngressVpcConfiguration: required
	IngressVpcConfiguration *apprunnervpcingressconnection.IngressVpcConfiguration `hcl:"ingress_vpc_configuration,block" validate:"required"`
	// DependsOn contains resources that ApprunnerVpcIngressConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apprunnerVpcIngressConnectionAttributes struct {
	ref terra.Reference
}

func (avic apprunnerVpcIngressConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(avic.ref.Append("arn"))
}

func (avic apprunnerVpcIngressConnectionAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(avic.ref.Append("domain_name"))
}

func (avic apprunnerVpcIngressConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(avic.ref.Append("id"))
}

func (avic apprunnerVpcIngressConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(avic.ref.Append("name"))
}

func (avic apprunnerVpcIngressConnectionAttributes) ServiceArn() terra.StringValue {
	return terra.ReferenceString(avic.ref.Append("service_arn"))
}

func (avic apprunnerVpcIngressConnectionAttributes) Status() terra.StringValue {
	return terra.ReferenceString(avic.ref.Append("status"))
}

func (avic apprunnerVpcIngressConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](avic.ref.Append("tags"))
}

func (avic apprunnerVpcIngressConnectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](avic.ref.Append("tags_all"))
}

func (avic apprunnerVpcIngressConnectionAttributes) IngressVpcConfiguration() terra.ListValue[apprunnervpcingressconnection.IngressVpcConfigurationAttributes] {
	return terra.ReferenceList[apprunnervpcingressconnection.IngressVpcConfigurationAttributes](avic.ref.Append("ingress_vpc_configuration"))
}

type apprunnerVpcIngressConnectionState struct {
	Arn                     string                                                       `json:"arn"`
	DomainName              string                                                       `json:"domain_name"`
	Id                      string                                                       `json:"id"`
	Name                    string                                                       `json:"name"`
	ServiceArn              string                                                       `json:"service_arn"`
	Status                  string                                                       `json:"status"`
	Tags                    map[string]string                                            `json:"tags"`
	TagsAll                 map[string]string                                            `json:"tags_all"`
	IngressVpcConfiguration []apprunnervpcingressconnection.IngressVpcConfigurationState `json:"ingress_vpc_configuration"`
}
