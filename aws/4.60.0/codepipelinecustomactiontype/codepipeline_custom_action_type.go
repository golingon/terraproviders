// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package codepipelinecustomactiontype

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ConfigurationProperty struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Key: bool, required
	Key terra.BoolValue `hcl:"key,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Queryable: bool, optional
	Queryable terra.BoolValue `hcl:"queryable,attr"`
	// Required: bool, required
	Required terra.BoolValue `hcl:"required,attr" validate:"required"`
	// Secret: bool, required
	Secret terra.BoolValue `hcl:"secret,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type InputArtifactDetails struct {
	// MaximumCount: number, required
	MaximumCount terra.NumberValue `hcl:"maximum_count,attr" validate:"required"`
	// MinimumCount: number, required
	MinimumCount terra.NumberValue `hcl:"minimum_count,attr" validate:"required"`
}

type OutputArtifactDetails struct {
	// MaximumCount: number, required
	MaximumCount terra.NumberValue `hcl:"maximum_count,attr" validate:"required"`
	// MinimumCount: number, required
	MinimumCount terra.NumberValue `hcl:"minimum_count,attr" validate:"required"`
}

type Settings struct {
	// EntityUrlTemplate: string, optional
	EntityUrlTemplate terra.StringValue `hcl:"entity_url_template,attr"`
	// ExecutionUrlTemplate: string, optional
	ExecutionUrlTemplate terra.StringValue `hcl:"execution_url_template,attr"`
	// RevisionUrlTemplate: string, optional
	RevisionUrlTemplate terra.StringValue `hcl:"revision_url_template,attr"`
	// ThirdPartyConfigurationUrl: string, optional
	ThirdPartyConfigurationUrl terra.StringValue `hcl:"third_party_configuration_url,attr"`
}

type ConfigurationPropertyAttributes struct {
	ref terra.Reference
}

func (cp ConfigurationPropertyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp ConfigurationPropertyAttributes) InternalWithRef(ref terra.Reference) ConfigurationPropertyAttributes {
	return ConfigurationPropertyAttributes{ref: ref}
}

func (cp ConfigurationPropertyAttributes) InternalTokens() hclwrite.Tokens {
	return cp.ref.InternalTokens()
}

func (cp ConfigurationPropertyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("description"))
}

func (cp ConfigurationPropertyAttributes) Key() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("key"))
}

func (cp ConfigurationPropertyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("name"))
}

func (cp ConfigurationPropertyAttributes) Queryable() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("queryable"))
}

func (cp ConfigurationPropertyAttributes) Required() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("required"))
}

func (cp ConfigurationPropertyAttributes) Secret() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("secret"))
}

func (cp ConfigurationPropertyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("type"))
}

type InputArtifactDetailsAttributes struct {
	ref terra.Reference
}

func (iad InputArtifactDetailsAttributes) InternalRef() (terra.Reference, error) {
	return iad.ref, nil
}

func (iad InputArtifactDetailsAttributes) InternalWithRef(ref terra.Reference) InputArtifactDetailsAttributes {
	return InputArtifactDetailsAttributes{ref: ref}
}

func (iad InputArtifactDetailsAttributes) InternalTokens() hclwrite.Tokens {
	return iad.ref.InternalTokens()
}

func (iad InputArtifactDetailsAttributes) MaximumCount() terra.NumberValue {
	return terra.ReferenceAsNumber(iad.ref.Append("maximum_count"))
}

func (iad InputArtifactDetailsAttributes) MinimumCount() terra.NumberValue {
	return terra.ReferenceAsNumber(iad.ref.Append("minimum_count"))
}

type OutputArtifactDetailsAttributes struct {
	ref terra.Reference
}

func (oad OutputArtifactDetailsAttributes) InternalRef() (terra.Reference, error) {
	return oad.ref, nil
}

func (oad OutputArtifactDetailsAttributes) InternalWithRef(ref terra.Reference) OutputArtifactDetailsAttributes {
	return OutputArtifactDetailsAttributes{ref: ref}
}

func (oad OutputArtifactDetailsAttributes) InternalTokens() hclwrite.Tokens {
	return oad.ref.InternalTokens()
}

func (oad OutputArtifactDetailsAttributes) MaximumCount() terra.NumberValue {
	return terra.ReferenceAsNumber(oad.ref.Append("maximum_count"))
}

func (oad OutputArtifactDetailsAttributes) MinimumCount() terra.NumberValue {
	return terra.ReferenceAsNumber(oad.ref.Append("minimum_count"))
}

type SettingsAttributes struct {
	ref terra.Reference
}

func (s SettingsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SettingsAttributes) InternalWithRef(ref terra.Reference) SettingsAttributes {
	return SettingsAttributes{ref: ref}
}

func (s SettingsAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SettingsAttributes) EntityUrlTemplate() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("entity_url_template"))
}

func (s SettingsAttributes) ExecutionUrlTemplate() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("execution_url_template"))
}

func (s SettingsAttributes) RevisionUrlTemplate() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("revision_url_template"))
}

func (s SettingsAttributes) ThirdPartyConfigurationUrl() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("third_party_configuration_url"))
}

type ConfigurationPropertyState struct {
	Description string `json:"description"`
	Key         bool   `json:"key"`
	Name        string `json:"name"`
	Queryable   bool   `json:"queryable"`
	Required    bool   `json:"required"`
	Secret      bool   `json:"secret"`
	Type        string `json:"type"`
}

type InputArtifactDetailsState struct {
	MaximumCount float64 `json:"maximum_count"`
	MinimumCount float64 `json:"minimum_count"`
}

type OutputArtifactDetailsState struct {
	MaximumCount float64 `json:"maximum_count"`
	MinimumCount float64 `json:"minimum_count"`
}

type SettingsState struct {
	EntityUrlTemplate          string `json:"entity_url_template"`
	ExecutionUrlTemplate       string `json:"execution_url_template"`
	RevisionUrlTemplate        string `json:"revision_url_template"`
	ThirdPartyConfigurationUrl string `json:"third_party_configuration_url"`
}
