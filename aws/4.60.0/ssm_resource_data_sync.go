// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ssmresourcedatasync "github.com/golingon/terraproviders/aws/4.60.0/ssmresourcedatasync"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSsmResourceDataSync(name string, args SsmResourceDataSyncArgs) *SsmResourceDataSync {
	return &SsmResourceDataSync{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SsmResourceDataSync)(nil)

type SsmResourceDataSync struct {
	Name  string
	Args  SsmResourceDataSyncArgs
	state *ssmResourceDataSyncState
}

func (srds *SsmResourceDataSync) Type() string {
	return "aws_ssm_resource_data_sync"
}

func (srds *SsmResourceDataSync) LocalName() string {
	return srds.Name
}

func (srds *SsmResourceDataSync) Configuration() interface{} {
	return srds.Args
}

func (srds *SsmResourceDataSync) Attributes() ssmResourceDataSyncAttributes {
	return ssmResourceDataSyncAttributes{ref: terra.ReferenceResource(srds)}
}

func (srds *SsmResourceDataSync) ImportState(av io.Reader) error {
	srds.state = &ssmResourceDataSyncState{}
	if err := json.NewDecoder(av).Decode(srds.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", srds.Type(), srds.LocalName(), err)
	}
	return nil
}

func (srds *SsmResourceDataSync) State() (*ssmResourceDataSyncState, bool) {
	return srds.state, srds.state != nil
}

func (srds *SsmResourceDataSync) StateMust() *ssmResourceDataSyncState {
	if srds.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", srds.Type(), srds.LocalName()))
	}
	return srds.state
}

func (srds *SsmResourceDataSync) DependOn() terra.Reference {
	return terra.ReferenceResource(srds)
}

type SsmResourceDataSyncArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// S3Destination: required
	S3Destination *ssmresourcedatasync.S3Destination `hcl:"s3_destination,block" validate:"required"`
	// DependsOn contains resources that SsmResourceDataSync depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ssmResourceDataSyncAttributes struct {
	ref terra.Reference
}

func (srds ssmResourceDataSyncAttributes) Id() terra.StringValue {
	return terra.ReferenceString(srds.ref.Append("id"))
}

func (srds ssmResourceDataSyncAttributes) Name() terra.StringValue {
	return terra.ReferenceString(srds.ref.Append("name"))
}

func (srds ssmResourceDataSyncAttributes) S3Destination() terra.ListValue[ssmresourcedatasync.S3DestinationAttributes] {
	return terra.ReferenceList[ssmresourcedatasync.S3DestinationAttributes](srds.ref.Append("s3_destination"))
}

type ssmResourceDataSyncState struct {
	Id            string                                   `json:"id"`
	Name          string                                   `json:"name"`
	S3Destination []ssmresourcedatasync.S3DestinationState `json:"s3_destination"`
}
