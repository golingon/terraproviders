// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamGroupPolicy(name string, args IamGroupPolicyArgs) *IamGroupPolicy {
	return &IamGroupPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamGroupPolicy)(nil)

type IamGroupPolicy struct {
	Name  string
	Args  IamGroupPolicyArgs
	state *iamGroupPolicyState
}

func (igp *IamGroupPolicy) Type() string {
	return "aws_iam_group_policy"
}

func (igp *IamGroupPolicy) LocalName() string {
	return igp.Name
}

func (igp *IamGroupPolicy) Configuration() interface{} {
	return igp.Args
}

func (igp *IamGroupPolicy) Attributes() iamGroupPolicyAttributes {
	return iamGroupPolicyAttributes{ref: terra.ReferenceResource(igp)}
}

func (igp *IamGroupPolicy) ImportState(av io.Reader) error {
	igp.state = &iamGroupPolicyState{}
	if err := json.NewDecoder(av).Decode(igp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", igp.Type(), igp.LocalName(), err)
	}
	return nil
}

func (igp *IamGroupPolicy) State() (*iamGroupPolicyState, bool) {
	return igp.state, igp.state != nil
}

func (igp *IamGroupPolicy) StateMust() *iamGroupPolicyState {
	if igp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", igp.Type(), igp.LocalName()))
	}
	return igp.state
}

func (igp *IamGroupPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(igp)
}

type IamGroupPolicyArgs struct {
	// Group: string, required
	Group terra.StringValue `hcl:"group,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// DependsOn contains resources that IamGroupPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamGroupPolicyAttributes struct {
	ref terra.Reference
}

func (igp iamGroupPolicyAttributes) Group() terra.StringValue {
	return terra.ReferenceString(igp.ref.Append("group"))
}

func (igp iamGroupPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(igp.ref.Append("id"))
}

func (igp iamGroupPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(igp.ref.Append("name"))
}

func (igp iamGroupPolicyAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(igp.ref.Append("name_prefix"))
}

func (igp iamGroupPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(igp.ref.Append("policy"))
}

type iamGroupPolicyState struct {
	Group      string `json:"group"`
	Id         string `json:"id"`
	Name       string `json:"name"`
	NamePrefix string `json:"name_prefix"`
	Policy     string `json:"policy"`
}
