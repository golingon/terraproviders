// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2TransitGatewayRouteTablePropagation(name string, args Ec2TransitGatewayRouteTablePropagationArgs) *Ec2TransitGatewayRouteTablePropagation {
	return &Ec2TransitGatewayRouteTablePropagation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TransitGatewayRouteTablePropagation)(nil)

type Ec2TransitGatewayRouteTablePropagation struct {
	Name  string
	Args  Ec2TransitGatewayRouteTablePropagationArgs
	state *ec2TransitGatewayRouteTablePropagationState
}

func (etgrtp *Ec2TransitGatewayRouteTablePropagation) Type() string {
	return "aws_ec2_transit_gateway_route_table_propagation"
}

func (etgrtp *Ec2TransitGatewayRouteTablePropagation) LocalName() string {
	return etgrtp.Name
}

func (etgrtp *Ec2TransitGatewayRouteTablePropagation) Configuration() interface{} {
	return etgrtp.Args
}

func (etgrtp *Ec2TransitGatewayRouteTablePropagation) Attributes() ec2TransitGatewayRouteTablePropagationAttributes {
	return ec2TransitGatewayRouteTablePropagationAttributes{ref: terra.ReferenceResource(etgrtp)}
}

func (etgrtp *Ec2TransitGatewayRouteTablePropagation) ImportState(av io.Reader) error {
	etgrtp.state = &ec2TransitGatewayRouteTablePropagationState{}
	if err := json.NewDecoder(av).Decode(etgrtp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etgrtp.Type(), etgrtp.LocalName(), err)
	}
	return nil
}

func (etgrtp *Ec2TransitGatewayRouteTablePropagation) State() (*ec2TransitGatewayRouteTablePropagationState, bool) {
	return etgrtp.state, etgrtp.state != nil
}

func (etgrtp *Ec2TransitGatewayRouteTablePropagation) StateMust() *ec2TransitGatewayRouteTablePropagationState {
	if etgrtp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etgrtp.Type(), etgrtp.LocalName()))
	}
	return etgrtp.state
}

func (etgrtp *Ec2TransitGatewayRouteTablePropagation) DependOn() terra.Reference {
	return terra.ReferenceResource(etgrtp)
}

type Ec2TransitGatewayRouteTablePropagationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TransitGatewayAttachmentId: string, required
	TransitGatewayAttachmentId terra.StringValue `hcl:"transit_gateway_attachment_id,attr" validate:"required"`
	// TransitGatewayRouteTableId: string, required
	TransitGatewayRouteTableId terra.StringValue `hcl:"transit_gateway_route_table_id,attr" validate:"required"`
	// DependsOn contains resources that Ec2TransitGatewayRouteTablePropagation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2TransitGatewayRouteTablePropagationAttributes struct {
	ref terra.Reference
}

func (etgrtp ec2TransitGatewayRouteTablePropagationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etgrtp.ref.Append("id"))
}

func (etgrtp ec2TransitGatewayRouteTablePropagationAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(etgrtp.ref.Append("resource_id"))
}

func (etgrtp ec2TransitGatewayRouteTablePropagationAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceString(etgrtp.ref.Append("resource_type"))
}

func (etgrtp ec2TransitGatewayRouteTablePropagationAttributes) TransitGatewayAttachmentId() terra.StringValue {
	return terra.ReferenceString(etgrtp.ref.Append("transit_gateway_attachment_id"))
}

func (etgrtp ec2TransitGatewayRouteTablePropagationAttributes) TransitGatewayRouteTableId() terra.StringValue {
	return terra.ReferenceString(etgrtp.ref.Append("transit_gateway_route_table_id"))
}

type ec2TransitGatewayRouteTablePropagationState struct {
	Id                         string `json:"id"`
	ResourceId                 string `json:"resource_id"`
	ResourceType               string `json:"resource_type"`
	TransitGatewayAttachmentId string `json:"transit_gateway_attachment_id"`
	TransitGatewayRouteTableId string `json:"transit_gateway_route_table_id"`
}
