// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSsmParameter(name string, args SsmParameterArgs) *SsmParameter {
	return &SsmParameter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SsmParameter)(nil)

type SsmParameter struct {
	Name  string
	Args  SsmParameterArgs
	state *ssmParameterState
}

func (sp *SsmParameter) Type() string {
	return "aws_ssm_parameter"
}

func (sp *SsmParameter) LocalName() string {
	return sp.Name
}

func (sp *SsmParameter) Configuration() interface{} {
	return sp.Args
}

func (sp *SsmParameter) Attributes() ssmParameterAttributes {
	return ssmParameterAttributes{ref: terra.ReferenceResource(sp)}
}

func (sp *SsmParameter) ImportState(av io.Reader) error {
	sp.state = &ssmParameterState{}
	if err := json.NewDecoder(av).Decode(sp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sp.Type(), sp.LocalName(), err)
	}
	return nil
}

func (sp *SsmParameter) State() (*ssmParameterState, bool) {
	return sp.state, sp.state != nil
}

func (sp *SsmParameter) StateMust() *ssmParameterState {
	if sp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sp.Type(), sp.LocalName()))
	}
	return sp.state
}

func (sp *SsmParameter) DependOn() terra.Reference {
	return terra.ReferenceResource(sp)
}

type SsmParameterArgs struct {
	// AllowedPattern: string, optional
	AllowedPattern terra.StringValue `hcl:"allowed_pattern,attr"`
	// Arn: string, optional
	Arn terra.StringValue `hcl:"arn,attr"`
	// DataType: string, optional
	DataType terra.StringValue `hcl:"data_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InsecureValue: string, optional
	InsecureValue terra.StringValue `hcl:"insecure_value,attr"`
	// KeyId: string, optional
	KeyId terra.StringValue `hcl:"key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Overwrite: bool, optional
	Overwrite terra.BoolValue `hcl:"overwrite,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
	// DependsOn contains resources that SsmParameter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ssmParameterAttributes struct {
	ref terra.Reference
}

func (sp ssmParameterAttributes) AllowedPattern() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("allowed_pattern"))
}

func (sp ssmParameterAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("arn"))
}

func (sp ssmParameterAttributes) DataType() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("data_type"))
}

func (sp ssmParameterAttributes) Description() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("description"))
}

func (sp ssmParameterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("id"))
}

func (sp ssmParameterAttributes) InsecureValue() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("insecure_value"))
}

func (sp ssmParameterAttributes) KeyId() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("key_id"))
}

func (sp ssmParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("name"))
}

func (sp ssmParameterAttributes) Overwrite() terra.BoolValue {
	return terra.ReferenceBool(sp.ref.Append("overwrite"))
}

func (sp ssmParameterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sp.ref.Append("tags"))
}

func (sp ssmParameterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sp.ref.Append("tags_all"))
}

func (sp ssmParameterAttributes) Tier() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("tier"))
}

func (sp ssmParameterAttributes) Type() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("type"))
}

func (sp ssmParameterAttributes) Value() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("value"))
}

func (sp ssmParameterAttributes) Version() terra.NumberValue {
	return terra.ReferenceNumber(sp.ref.Append("version"))
}

type ssmParameterState struct {
	AllowedPattern string            `json:"allowed_pattern"`
	Arn            string            `json:"arn"`
	DataType       string            `json:"data_type"`
	Description    string            `json:"description"`
	Id             string            `json:"id"`
	InsecureValue  string            `json:"insecure_value"`
	KeyId          string            `json:"key_id"`
	Name           string            `json:"name"`
	Overwrite      bool              `json:"overwrite"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
	Tier           string            `json:"tier"`
	Type           string            `json:"type"`
	Value          string            `json:"value"`
	Version        float64           `json:"version"`
}
