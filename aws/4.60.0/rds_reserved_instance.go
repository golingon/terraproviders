// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	rdsreservedinstance "github.com/golingon/terraproviders/aws/4.60.0/rdsreservedinstance"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRdsReservedInstance(name string, args RdsReservedInstanceArgs) *RdsReservedInstance {
	return &RdsReservedInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RdsReservedInstance)(nil)

type RdsReservedInstance struct {
	Name  string
	Args  RdsReservedInstanceArgs
	state *rdsReservedInstanceState
}

func (rri *RdsReservedInstance) Type() string {
	return "aws_rds_reserved_instance"
}

func (rri *RdsReservedInstance) LocalName() string {
	return rri.Name
}

func (rri *RdsReservedInstance) Configuration() interface{} {
	return rri.Args
}

func (rri *RdsReservedInstance) Attributes() rdsReservedInstanceAttributes {
	return rdsReservedInstanceAttributes{ref: terra.ReferenceResource(rri)}
}

func (rri *RdsReservedInstance) ImportState(av io.Reader) error {
	rri.state = &rdsReservedInstanceState{}
	if err := json.NewDecoder(av).Decode(rri.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rri.Type(), rri.LocalName(), err)
	}
	return nil
}

func (rri *RdsReservedInstance) State() (*rdsReservedInstanceState, bool) {
	return rri.state, rri.state != nil
}

func (rri *RdsReservedInstance) StateMust() *rdsReservedInstanceState {
	if rri.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rri.Type(), rri.LocalName()))
	}
	return rri.state
}

func (rri *RdsReservedInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(rri)
}

type RdsReservedInstanceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceCount: number, optional
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// OfferingId: string, required
	OfferingId terra.StringValue `hcl:"offering_id,attr" validate:"required"`
	// ReservationId: string, optional
	ReservationId terra.StringValue `hcl:"reservation_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// RecurringCharges: min=0
	RecurringCharges []rdsreservedinstance.RecurringCharges `hcl:"recurring_charges,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *rdsreservedinstance.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RdsReservedInstance depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type rdsReservedInstanceAttributes struct {
	ref terra.Reference
}

func (rri rdsReservedInstanceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rri.ref.Append("arn"))
}

func (rri rdsReservedInstanceAttributes) CurrencyCode() terra.StringValue {
	return terra.ReferenceString(rri.ref.Append("currency_code"))
}

func (rri rdsReservedInstanceAttributes) DbInstanceClass() terra.StringValue {
	return terra.ReferenceString(rri.ref.Append("db_instance_class"))
}

func (rri rdsReservedInstanceAttributes) Duration() terra.NumberValue {
	return terra.ReferenceNumber(rri.ref.Append("duration"))
}

func (rri rdsReservedInstanceAttributes) FixedPrice() terra.NumberValue {
	return terra.ReferenceNumber(rri.ref.Append("fixed_price"))
}

func (rri rdsReservedInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rri.ref.Append("id"))
}

func (rri rdsReservedInstanceAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceNumber(rri.ref.Append("instance_count"))
}

func (rri rdsReservedInstanceAttributes) LeaseId() terra.StringValue {
	return terra.ReferenceString(rri.ref.Append("lease_id"))
}

func (rri rdsReservedInstanceAttributes) MultiAz() terra.BoolValue {
	return terra.ReferenceBool(rri.ref.Append("multi_az"))
}

func (rri rdsReservedInstanceAttributes) OfferingId() terra.StringValue {
	return terra.ReferenceString(rri.ref.Append("offering_id"))
}

func (rri rdsReservedInstanceAttributes) OfferingType() terra.StringValue {
	return terra.ReferenceString(rri.ref.Append("offering_type"))
}

func (rri rdsReservedInstanceAttributes) ProductDescription() terra.StringValue {
	return terra.ReferenceString(rri.ref.Append("product_description"))
}

func (rri rdsReservedInstanceAttributes) ReservationId() terra.StringValue {
	return terra.ReferenceString(rri.ref.Append("reservation_id"))
}

func (rri rdsReservedInstanceAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(rri.ref.Append("start_time"))
}

func (rri rdsReservedInstanceAttributes) State() terra.StringValue {
	return terra.ReferenceString(rri.ref.Append("state"))
}

func (rri rdsReservedInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rri.ref.Append("tags"))
}

func (rri rdsReservedInstanceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rri.ref.Append("tags_all"))
}

func (rri rdsReservedInstanceAttributes) UsagePrice() terra.NumberValue {
	return terra.ReferenceNumber(rri.ref.Append("usage_price"))
}

func (rri rdsReservedInstanceAttributes) RecurringCharges() terra.ListValue[rdsreservedinstance.RecurringChargesAttributes] {
	return terra.ReferenceList[rdsreservedinstance.RecurringChargesAttributes](rri.ref.Append("recurring_charges"))
}

func (rri rdsReservedInstanceAttributes) Timeouts() rdsreservedinstance.TimeoutsAttributes {
	return terra.ReferenceSingle[rdsreservedinstance.TimeoutsAttributes](rri.ref.Append("timeouts"))
}

type rdsReservedInstanceState struct {
	Arn                string                                      `json:"arn"`
	CurrencyCode       string                                      `json:"currency_code"`
	DbInstanceClass    string                                      `json:"db_instance_class"`
	Duration           float64                                     `json:"duration"`
	FixedPrice         float64                                     `json:"fixed_price"`
	Id                 string                                      `json:"id"`
	InstanceCount      float64                                     `json:"instance_count"`
	LeaseId            string                                      `json:"lease_id"`
	MultiAz            bool                                        `json:"multi_az"`
	OfferingId         string                                      `json:"offering_id"`
	OfferingType       string                                      `json:"offering_type"`
	ProductDescription string                                      `json:"product_description"`
	ReservationId      string                                      `json:"reservation_id"`
	StartTime          string                                      `json:"start_time"`
	State              string                                      `json:"state"`
	Tags               map[string]string                           `json:"tags"`
	TagsAll            map[string]string                           `json:"tags_all"`
	UsagePrice         float64                                     `json:"usage_price"`
	RecurringCharges   []rdsreservedinstance.RecurringChargesState `json:"recurring_charges"`
	Timeouts           *rdsreservedinstance.TimeoutsState          `json:"timeouts"`
}
