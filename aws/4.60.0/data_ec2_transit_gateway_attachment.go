// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataec2transitgatewayattachment "github.com/golingon/terraproviders/aws/4.60.0/dataec2transitgatewayattachment"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataEc2TransitGatewayAttachment(name string, args DataEc2TransitGatewayAttachmentArgs) *DataEc2TransitGatewayAttachment {
	return &DataEc2TransitGatewayAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataEc2TransitGatewayAttachment)(nil)

type DataEc2TransitGatewayAttachment struct {
	Name string
	Args DataEc2TransitGatewayAttachmentArgs
}

func (etga *DataEc2TransitGatewayAttachment) DataSource() string {
	return "aws_ec2_transit_gateway_attachment"
}

func (etga *DataEc2TransitGatewayAttachment) LocalName() string {
	return etga.Name
}

func (etga *DataEc2TransitGatewayAttachment) Configuration() interface{} {
	return etga.Args
}

func (etga *DataEc2TransitGatewayAttachment) Attributes() dataEc2TransitGatewayAttachmentAttributes {
	return dataEc2TransitGatewayAttachmentAttributes{ref: terra.ReferenceDataResource(etga)}
}

type DataEc2TransitGatewayAttachmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TransitGatewayAttachmentId: string, optional
	TransitGatewayAttachmentId terra.StringValue `hcl:"transit_gateway_attachment_id,attr"`
	// Filter: min=0
	Filter []dataec2transitgatewayattachment.Filter `hcl:"filter,block" validate:"min=0"`
}
type dataEc2TransitGatewayAttachmentAttributes struct {
	ref terra.Reference
}

func (etga dataEc2TransitGatewayAttachmentAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(etga.ref.Append("arn"))
}

func (etga dataEc2TransitGatewayAttachmentAttributes) AssociationState() terra.StringValue {
	return terra.ReferenceString(etga.ref.Append("association_state"))
}

func (etga dataEc2TransitGatewayAttachmentAttributes) AssociationTransitGatewayRouteTableId() terra.StringValue {
	return terra.ReferenceString(etga.ref.Append("association_transit_gateway_route_table_id"))
}

func (etga dataEc2TransitGatewayAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etga.ref.Append("id"))
}

func (etga dataEc2TransitGatewayAttachmentAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(etga.ref.Append("resource_id"))
}

func (etga dataEc2TransitGatewayAttachmentAttributes) ResourceOwnerId() terra.StringValue {
	return terra.ReferenceString(etga.ref.Append("resource_owner_id"))
}

func (etga dataEc2TransitGatewayAttachmentAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceString(etga.ref.Append("resource_type"))
}

func (etga dataEc2TransitGatewayAttachmentAttributes) State() terra.StringValue {
	return terra.ReferenceString(etga.ref.Append("state"))
}

func (etga dataEc2TransitGatewayAttachmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etga.ref.Append("tags"))
}

func (etga dataEc2TransitGatewayAttachmentAttributes) TransitGatewayAttachmentId() terra.StringValue {
	return terra.ReferenceString(etga.ref.Append("transit_gateway_attachment_id"))
}

func (etga dataEc2TransitGatewayAttachmentAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceString(etga.ref.Append("transit_gateway_id"))
}

func (etga dataEc2TransitGatewayAttachmentAttributes) TransitGatewayOwnerId() terra.StringValue {
	return terra.ReferenceString(etga.ref.Append("transit_gateway_owner_id"))
}

func (etga dataEc2TransitGatewayAttachmentAttributes) Filter() terra.SetValue[dataec2transitgatewayattachment.FilterAttributes] {
	return terra.ReferenceSet[dataec2transitgatewayattachment.FilterAttributes](etga.ref.Append("filter"))
}
