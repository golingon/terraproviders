// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewChimeVoiceConnectorStreaming(name string, args ChimeVoiceConnectorStreamingArgs) *ChimeVoiceConnectorStreaming {
	return &ChimeVoiceConnectorStreaming{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ChimeVoiceConnectorStreaming)(nil)

type ChimeVoiceConnectorStreaming struct {
	Name  string
	Args  ChimeVoiceConnectorStreamingArgs
	state *chimeVoiceConnectorStreamingState
}

func (cvcs *ChimeVoiceConnectorStreaming) Type() string {
	return "aws_chime_voice_connector_streaming"
}

func (cvcs *ChimeVoiceConnectorStreaming) LocalName() string {
	return cvcs.Name
}

func (cvcs *ChimeVoiceConnectorStreaming) Configuration() interface{} {
	return cvcs.Args
}

func (cvcs *ChimeVoiceConnectorStreaming) Attributes() chimeVoiceConnectorStreamingAttributes {
	return chimeVoiceConnectorStreamingAttributes{ref: terra.ReferenceResource(cvcs)}
}

func (cvcs *ChimeVoiceConnectorStreaming) ImportState(av io.Reader) error {
	cvcs.state = &chimeVoiceConnectorStreamingState{}
	if err := json.NewDecoder(av).Decode(cvcs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cvcs.Type(), cvcs.LocalName(), err)
	}
	return nil
}

func (cvcs *ChimeVoiceConnectorStreaming) State() (*chimeVoiceConnectorStreamingState, bool) {
	return cvcs.state, cvcs.state != nil
}

func (cvcs *ChimeVoiceConnectorStreaming) StateMust() *chimeVoiceConnectorStreamingState {
	if cvcs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cvcs.Type(), cvcs.LocalName()))
	}
	return cvcs.state
}

func (cvcs *ChimeVoiceConnectorStreaming) DependOn() terra.Reference {
	return terra.ReferenceResource(cvcs)
}

type ChimeVoiceConnectorStreamingArgs struct {
	// DataRetention: number, required
	DataRetention terra.NumberValue `hcl:"data_retention,attr" validate:"required"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// StreamingNotificationTargets: set of string, optional
	StreamingNotificationTargets terra.SetValue[terra.StringValue] `hcl:"streaming_notification_targets,attr"`
	// VoiceConnectorId: string, required
	VoiceConnectorId terra.StringValue `hcl:"voice_connector_id,attr" validate:"required"`
	// DependsOn contains resources that ChimeVoiceConnectorStreaming depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type chimeVoiceConnectorStreamingAttributes struct {
	ref terra.Reference
}

func (cvcs chimeVoiceConnectorStreamingAttributes) DataRetention() terra.NumberValue {
	return terra.ReferenceNumber(cvcs.ref.Append("data_retention"))
}

func (cvcs chimeVoiceConnectorStreamingAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(cvcs.ref.Append("disabled"))
}

func (cvcs chimeVoiceConnectorStreamingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cvcs.ref.Append("id"))
}

func (cvcs chimeVoiceConnectorStreamingAttributes) StreamingNotificationTargets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cvcs.ref.Append("streaming_notification_targets"))
}

func (cvcs chimeVoiceConnectorStreamingAttributes) VoiceConnectorId() terra.StringValue {
	return terra.ReferenceString(cvcs.ref.Append("voice_connector_id"))
}

type chimeVoiceConnectorStreamingState struct {
	DataRetention                float64  `json:"data_retention"`
	Disabled                     bool     `json:"disabled"`
	Id                           string   `json:"id"`
	StreamingNotificationTargets []string `json:"streaming_notification_targets"`
	VoiceConnectorId             string   `json:"voice_connector_id"`
}
