// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKmsReplicaExternalKey(name string, args KmsReplicaExternalKeyArgs) *KmsReplicaExternalKey {
	return &KmsReplicaExternalKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsReplicaExternalKey)(nil)

type KmsReplicaExternalKey struct {
	Name  string
	Args  KmsReplicaExternalKeyArgs
	state *kmsReplicaExternalKeyState
}

func (krek *KmsReplicaExternalKey) Type() string {
	return "aws_kms_replica_external_key"
}

func (krek *KmsReplicaExternalKey) LocalName() string {
	return krek.Name
}

func (krek *KmsReplicaExternalKey) Configuration() interface{} {
	return krek.Args
}

func (krek *KmsReplicaExternalKey) Attributes() kmsReplicaExternalKeyAttributes {
	return kmsReplicaExternalKeyAttributes{ref: terra.ReferenceResource(krek)}
}

func (krek *KmsReplicaExternalKey) ImportState(av io.Reader) error {
	krek.state = &kmsReplicaExternalKeyState{}
	if err := json.NewDecoder(av).Decode(krek.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", krek.Type(), krek.LocalName(), err)
	}
	return nil
}

func (krek *KmsReplicaExternalKey) State() (*kmsReplicaExternalKeyState, bool) {
	return krek.state, krek.state != nil
}

func (krek *KmsReplicaExternalKey) StateMust() *kmsReplicaExternalKeyState {
	if krek.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", krek.Type(), krek.LocalName()))
	}
	return krek.state
}

func (krek *KmsReplicaExternalKey) DependOn() terra.Reference {
	return terra.ReferenceResource(krek)
}

type KmsReplicaExternalKeyArgs struct {
	// BypassPolicyLockoutSafetyCheck: bool, optional
	BypassPolicyLockoutSafetyCheck terra.BoolValue `hcl:"bypass_policy_lockout_safety_check,attr"`
	// DeletionWindowInDays: number, optional
	DeletionWindowInDays terra.NumberValue `hcl:"deletion_window_in_days,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyMaterialBase64: string, optional
	KeyMaterialBase64 terra.StringValue `hcl:"key_material_base64,attr"`
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
	// PrimaryKeyArn: string, required
	PrimaryKeyArn terra.StringValue `hcl:"primary_key_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ValidTo: string, optional
	ValidTo terra.StringValue `hcl:"valid_to,attr"`
	// DependsOn contains resources that KmsReplicaExternalKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kmsReplicaExternalKeyAttributes struct {
	ref terra.Reference
}

func (krek kmsReplicaExternalKeyAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(krek.ref.Append("arn"))
}

func (krek kmsReplicaExternalKeyAttributes) BypassPolicyLockoutSafetyCheck() terra.BoolValue {
	return terra.ReferenceBool(krek.ref.Append("bypass_policy_lockout_safety_check"))
}

func (krek kmsReplicaExternalKeyAttributes) DeletionWindowInDays() terra.NumberValue {
	return terra.ReferenceNumber(krek.ref.Append("deletion_window_in_days"))
}

func (krek kmsReplicaExternalKeyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(krek.ref.Append("description"))
}

func (krek kmsReplicaExternalKeyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(krek.ref.Append("enabled"))
}

func (krek kmsReplicaExternalKeyAttributes) ExpirationModel() terra.StringValue {
	return terra.ReferenceString(krek.ref.Append("expiration_model"))
}

func (krek kmsReplicaExternalKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(krek.ref.Append("id"))
}

func (krek kmsReplicaExternalKeyAttributes) KeyId() terra.StringValue {
	return terra.ReferenceString(krek.ref.Append("key_id"))
}

func (krek kmsReplicaExternalKeyAttributes) KeyMaterialBase64() terra.StringValue {
	return terra.ReferenceString(krek.ref.Append("key_material_base64"))
}

func (krek kmsReplicaExternalKeyAttributes) KeyState() terra.StringValue {
	return terra.ReferenceString(krek.ref.Append("key_state"))
}

func (krek kmsReplicaExternalKeyAttributes) KeyUsage() terra.StringValue {
	return terra.ReferenceString(krek.ref.Append("key_usage"))
}

func (krek kmsReplicaExternalKeyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(krek.ref.Append("policy"))
}

func (krek kmsReplicaExternalKeyAttributes) PrimaryKeyArn() terra.StringValue {
	return terra.ReferenceString(krek.ref.Append("primary_key_arn"))
}

func (krek kmsReplicaExternalKeyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](krek.ref.Append("tags"))
}

func (krek kmsReplicaExternalKeyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](krek.ref.Append("tags_all"))
}

func (krek kmsReplicaExternalKeyAttributes) ValidTo() terra.StringValue {
	return terra.ReferenceString(krek.ref.Append("valid_to"))
}

type kmsReplicaExternalKeyState struct {
	Arn                            string            `json:"arn"`
	BypassPolicyLockoutSafetyCheck bool              `json:"bypass_policy_lockout_safety_check"`
	DeletionWindowInDays           float64           `json:"deletion_window_in_days"`
	Description                    string            `json:"description"`
	Enabled                        bool              `json:"enabled"`
	ExpirationModel                string            `json:"expiration_model"`
	Id                             string            `json:"id"`
	KeyId                          string            `json:"key_id"`
	KeyMaterialBase64              string            `json:"key_material_base64"`
	KeyState                       string            `json:"key_state"`
	KeyUsage                       string            `json:"key_usage"`
	Policy                         string            `json:"policy"`
	PrimaryKeyArn                  string            `json:"primary_key_arn"`
	Tags                           map[string]string `json:"tags"`
	TagsAll                        map[string]string `json:"tags_all"`
	ValidTo                        string            `json:"valid_to"`
}
