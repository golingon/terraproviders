// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketObject(name string, args S3BucketObjectArgs) *S3BucketObject {
	return &S3BucketObject{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketObject)(nil)

type S3BucketObject struct {
	Name  string
	Args  S3BucketObjectArgs
	state *s3BucketObjectState
}

func (sbo *S3BucketObject) Type() string {
	return "aws_s3_bucket_object"
}

func (sbo *S3BucketObject) LocalName() string {
	return sbo.Name
}

func (sbo *S3BucketObject) Configuration() interface{} {
	return sbo.Args
}

func (sbo *S3BucketObject) Attributes() s3BucketObjectAttributes {
	return s3BucketObjectAttributes{ref: terra.ReferenceResource(sbo)}
}

func (sbo *S3BucketObject) ImportState(av io.Reader) error {
	sbo.state = &s3BucketObjectState{}
	if err := json.NewDecoder(av).Decode(sbo.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbo.Type(), sbo.LocalName(), err)
	}
	return nil
}

func (sbo *S3BucketObject) State() (*s3BucketObjectState, bool) {
	return sbo.state, sbo.state != nil
}

func (sbo *S3BucketObject) StateMust() *s3BucketObjectState {
	if sbo.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbo.Type(), sbo.LocalName()))
	}
	return sbo.state
}

func (sbo *S3BucketObject) DependOn() terra.Reference {
	return terra.ReferenceResource(sbo)
}

type S3BucketObjectArgs struct {
	// Acl: string, optional
	Acl terra.StringValue `hcl:"acl,attr"`
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// BucketKeyEnabled: bool, optional
	BucketKeyEnabled terra.BoolValue `hcl:"bucket_key_enabled,attr"`
	// CacheControl: string, optional
	CacheControl terra.StringValue `hcl:"cache_control,attr"`
	// Content: string, optional
	Content terra.StringValue `hcl:"content,attr"`
	// ContentBase64: string, optional
	ContentBase64 terra.StringValue `hcl:"content_base64,attr"`
	// ContentDisposition: string, optional
	ContentDisposition terra.StringValue `hcl:"content_disposition,attr"`
	// ContentEncoding: string, optional
	ContentEncoding terra.StringValue `hcl:"content_encoding,attr"`
	// ContentLanguage: string, optional
	ContentLanguage terra.StringValue `hcl:"content_language,attr"`
	// ContentType: string, optional
	ContentType terra.StringValue `hcl:"content_type,attr"`
	// Etag: string, optional
	Etag terra.StringValue `hcl:"etag,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// ObjectLockLegalHoldStatus: string, optional
	ObjectLockLegalHoldStatus terra.StringValue `hcl:"object_lock_legal_hold_status,attr"`
	// ObjectLockMode: string, optional
	ObjectLockMode terra.StringValue `hcl:"object_lock_mode,attr"`
	// ObjectLockRetainUntilDate: string, optional
	ObjectLockRetainUntilDate terra.StringValue `hcl:"object_lock_retain_until_date,attr"`
	// ServerSideEncryption: string, optional
	ServerSideEncryption terra.StringValue `hcl:"server_side_encryption,attr"`
	// Source: string, optional
	Source terra.StringValue `hcl:"source,attr"`
	// SourceHash: string, optional
	SourceHash terra.StringValue `hcl:"source_hash,attr"`
	// StorageClass: string, optional
	StorageClass terra.StringValue `hcl:"storage_class,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// WebsiteRedirect: string, optional
	WebsiteRedirect terra.StringValue `hcl:"website_redirect,attr"`
	// DependsOn contains resources that S3BucketObject depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketObjectAttributes struct {
	ref terra.Reference
}

func (sbo s3BucketObjectAttributes) Acl() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("acl"))
}

func (sbo s3BucketObjectAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("bucket"))
}

func (sbo s3BucketObjectAttributes) BucketKeyEnabled() terra.BoolValue {
	return terra.ReferenceBool(sbo.ref.Append("bucket_key_enabled"))
}

func (sbo s3BucketObjectAttributes) CacheControl() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("cache_control"))
}

func (sbo s3BucketObjectAttributes) Content() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("content"))
}

func (sbo s3BucketObjectAttributes) ContentBase64() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("content_base64"))
}

func (sbo s3BucketObjectAttributes) ContentDisposition() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("content_disposition"))
}

func (sbo s3BucketObjectAttributes) ContentEncoding() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("content_encoding"))
}

func (sbo s3BucketObjectAttributes) ContentLanguage() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("content_language"))
}

func (sbo s3BucketObjectAttributes) ContentType() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("content_type"))
}

func (sbo s3BucketObjectAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("etag"))
}

func (sbo s3BucketObjectAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceBool(sbo.ref.Append("force_destroy"))
}

func (sbo s3BucketObjectAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("id"))
}

func (sbo s3BucketObjectAttributes) Key() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("key"))
}

func (sbo s3BucketObjectAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("kms_key_id"))
}

func (sbo s3BucketObjectAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sbo.ref.Append("metadata"))
}

func (sbo s3BucketObjectAttributes) ObjectLockLegalHoldStatus() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("object_lock_legal_hold_status"))
}

func (sbo s3BucketObjectAttributes) ObjectLockMode() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("object_lock_mode"))
}

func (sbo s3BucketObjectAttributes) ObjectLockRetainUntilDate() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("object_lock_retain_until_date"))
}

func (sbo s3BucketObjectAttributes) ServerSideEncryption() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("server_side_encryption"))
}

func (sbo s3BucketObjectAttributes) Source() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("source"))
}

func (sbo s3BucketObjectAttributes) SourceHash() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("source_hash"))
}

func (sbo s3BucketObjectAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("storage_class"))
}

func (sbo s3BucketObjectAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sbo.ref.Append("tags"))
}

func (sbo s3BucketObjectAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sbo.ref.Append("tags_all"))
}

func (sbo s3BucketObjectAttributes) VersionId() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("version_id"))
}

func (sbo s3BucketObjectAttributes) WebsiteRedirect() terra.StringValue {
	return terra.ReferenceString(sbo.ref.Append("website_redirect"))
}

type s3BucketObjectState struct {
	Acl                       string            `json:"acl"`
	Bucket                    string            `json:"bucket"`
	BucketKeyEnabled          bool              `json:"bucket_key_enabled"`
	CacheControl              string            `json:"cache_control"`
	Content                   string            `json:"content"`
	ContentBase64             string            `json:"content_base64"`
	ContentDisposition        string            `json:"content_disposition"`
	ContentEncoding           string            `json:"content_encoding"`
	ContentLanguage           string            `json:"content_language"`
	ContentType               string            `json:"content_type"`
	Etag                      string            `json:"etag"`
	ForceDestroy              bool              `json:"force_destroy"`
	Id                        string            `json:"id"`
	Key                       string            `json:"key"`
	KmsKeyId                  string            `json:"kms_key_id"`
	Metadata                  map[string]string `json:"metadata"`
	ObjectLockLegalHoldStatus string            `json:"object_lock_legal_hold_status"`
	ObjectLockMode            string            `json:"object_lock_mode"`
	ObjectLockRetainUntilDate string            `json:"object_lock_retain_until_date"`
	ServerSideEncryption      string            `json:"server_side_encryption"`
	Source                    string            `json:"source"`
	SourceHash                string            `json:"source_hash"`
	StorageClass              string            `json:"storage_class"`
	Tags                      map[string]string `json:"tags"`
	TagsAll                   map[string]string `json:"tags_all"`
	VersionId                 string            `json:"version_id"`
	WebsiteRedirect           string            `json:"website_redirect"`
}
