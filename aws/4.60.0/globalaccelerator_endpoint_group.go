// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	globalacceleratorendpointgroup "github.com/golingon/terraproviders/aws/4.60.0/globalacceleratorendpointgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGlobalacceleratorEndpointGroup(name string, args GlobalacceleratorEndpointGroupArgs) *GlobalacceleratorEndpointGroup {
	return &GlobalacceleratorEndpointGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GlobalacceleratorEndpointGroup)(nil)

type GlobalacceleratorEndpointGroup struct {
	Name  string
	Args  GlobalacceleratorEndpointGroupArgs
	state *globalacceleratorEndpointGroupState
}

func (geg *GlobalacceleratorEndpointGroup) Type() string {
	return "aws_globalaccelerator_endpoint_group"
}

func (geg *GlobalacceleratorEndpointGroup) LocalName() string {
	return geg.Name
}

func (geg *GlobalacceleratorEndpointGroup) Configuration() interface{} {
	return geg.Args
}

func (geg *GlobalacceleratorEndpointGroup) Attributes() globalacceleratorEndpointGroupAttributes {
	return globalacceleratorEndpointGroupAttributes{ref: terra.ReferenceResource(geg)}
}

func (geg *GlobalacceleratorEndpointGroup) ImportState(av io.Reader) error {
	geg.state = &globalacceleratorEndpointGroupState{}
	if err := json.NewDecoder(av).Decode(geg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", geg.Type(), geg.LocalName(), err)
	}
	return nil
}

func (geg *GlobalacceleratorEndpointGroup) State() (*globalacceleratorEndpointGroupState, bool) {
	return geg.state, geg.state != nil
}

func (geg *GlobalacceleratorEndpointGroup) StateMust() *globalacceleratorEndpointGroupState {
	if geg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", geg.Type(), geg.LocalName()))
	}
	return geg.state
}

func (geg *GlobalacceleratorEndpointGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(geg)
}

type GlobalacceleratorEndpointGroupArgs struct {
	// EndpointGroupRegion: string, optional
	EndpointGroupRegion terra.StringValue `hcl:"endpoint_group_region,attr"`
	// HealthCheckIntervalSeconds: number, optional
	HealthCheckIntervalSeconds terra.NumberValue `hcl:"health_check_interval_seconds,attr"`
	// HealthCheckPath: string, optional
	HealthCheckPath terra.StringValue `hcl:"health_check_path,attr"`
	// HealthCheckPort: number, optional
	HealthCheckPort terra.NumberValue `hcl:"health_check_port,attr"`
	// HealthCheckProtocol: string, optional
	HealthCheckProtocol terra.StringValue `hcl:"health_check_protocol,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListenerArn: string, required
	ListenerArn terra.StringValue `hcl:"listener_arn,attr" validate:"required"`
	// ThresholdCount: number, optional
	ThresholdCount terra.NumberValue `hcl:"threshold_count,attr"`
	// TrafficDialPercentage: number, optional
	TrafficDialPercentage terra.NumberValue `hcl:"traffic_dial_percentage,attr"`
	// EndpointConfiguration: min=0
	EndpointConfiguration []globalacceleratorendpointgroup.EndpointConfiguration `hcl:"endpoint_configuration,block" validate:"min=0"`
	// PortOverride: min=0,max=10
	PortOverride []globalacceleratorendpointgroup.PortOverride `hcl:"port_override,block" validate:"min=0,max=10"`
	// Timeouts: optional
	Timeouts *globalacceleratorendpointgroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that GlobalacceleratorEndpointGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type globalacceleratorEndpointGroupAttributes struct {
	ref terra.Reference
}

func (geg globalacceleratorEndpointGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(geg.ref.Append("arn"))
}

func (geg globalacceleratorEndpointGroupAttributes) EndpointGroupRegion() terra.StringValue {
	return terra.ReferenceString(geg.ref.Append("endpoint_group_region"))
}

func (geg globalacceleratorEndpointGroupAttributes) HealthCheckIntervalSeconds() terra.NumberValue {
	return terra.ReferenceNumber(geg.ref.Append("health_check_interval_seconds"))
}

func (geg globalacceleratorEndpointGroupAttributes) HealthCheckPath() terra.StringValue {
	return terra.ReferenceString(geg.ref.Append("health_check_path"))
}

func (geg globalacceleratorEndpointGroupAttributes) HealthCheckPort() terra.NumberValue {
	return terra.ReferenceNumber(geg.ref.Append("health_check_port"))
}

func (geg globalacceleratorEndpointGroupAttributes) HealthCheckProtocol() terra.StringValue {
	return terra.ReferenceString(geg.ref.Append("health_check_protocol"))
}

func (geg globalacceleratorEndpointGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(geg.ref.Append("id"))
}

func (geg globalacceleratorEndpointGroupAttributes) ListenerArn() terra.StringValue {
	return terra.ReferenceString(geg.ref.Append("listener_arn"))
}

func (geg globalacceleratorEndpointGroupAttributes) ThresholdCount() terra.NumberValue {
	return terra.ReferenceNumber(geg.ref.Append("threshold_count"))
}

func (geg globalacceleratorEndpointGroupAttributes) TrafficDialPercentage() terra.NumberValue {
	return terra.ReferenceNumber(geg.ref.Append("traffic_dial_percentage"))
}

func (geg globalacceleratorEndpointGroupAttributes) EndpointConfiguration() terra.SetValue[globalacceleratorendpointgroup.EndpointConfigurationAttributes] {
	return terra.ReferenceSet[globalacceleratorendpointgroup.EndpointConfigurationAttributes](geg.ref.Append("endpoint_configuration"))
}

func (geg globalacceleratorEndpointGroupAttributes) PortOverride() terra.SetValue[globalacceleratorendpointgroup.PortOverrideAttributes] {
	return terra.ReferenceSet[globalacceleratorendpointgroup.PortOverrideAttributes](geg.ref.Append("port_override"))
}

func (geg globalacceleratorEndpointGroupAttributes) Timeouts() globalacceleratorendpointgroup.TimeoutsAttributes {
	return terra.ReferenceSingle[globalacceleratorendpointgroup.TimeoutsAttributes](geg.ref.Append("timeouts"))
}

type globalacceleratorEndpointGroupState struct {
	Arn                        string                                                      `json:"arn"`
	EndpointGroupRegion        string                                                      `json:"endpoint_group_region"`
	HealthCheckIntervalSeconds float64                                                     `json:"health_check_interval_seconds"`
	HealthCheckPath            string                                                      `json:"health_check_path"`
	HealthCheckPort            float64                                                     `json:"health_check_port"`
	HealthCheckProtocol        string                                                      `json:"health_check_protocol"`
	Id                         string                                                      `json:"id"`
	ListenerArn                string                                                      `json:"listener_arn"`
	ThresholdCount             float64                                                     `json:"threshold_count"`
	TrafficDialPercentage      float64                                                     `json:"traffic_dial_percentage"`
	EndpointConfiguration      []globalacceleratorendpointgroup.EndpointConfigurationState `json:"endpoint_configuration"`
	PortOverride               []globalacceleratorendpointgroup.PortOverrideState          `json:"port_override"`
	Timeouts                   *globalacceleratorendpointgroup.TimeoutsState               `json:"timeouts"`
}
