// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewXrayEncryptionConfig(name string, args XrayEncryptionConfigArgs) *XrayEncryptionConfig {
	return &XrayEncryptionConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*XrayEncryptionConfig)(nil)

type XrayEncryptionConfig struct {
	Name  string
	Args  XrayEncryptionConfigArgs
	state *xrayEncryptionConfigState
}

func (xec *XrayEncryptionConfig) Type() string {
	return "aws_xray_encryption_config"
}

func (xec *XrayEncryptionConfig) LocalName() string {
	return xec.Name
}

func (xec *XrayEncryptionConfig) Configuration() interface{} {
	return xec.Args
}

func (xec *XrayEncryptionConfig) Attributes() xrayEncryptionConfigAttributes {
	return xrayEncryptionConfigAttributes{ref: terra.ReferenceResource(xec)}
}

func (xec *XrayEncryptionConfig) ImportState(av io.Reader) error {
	xec.state = &xrayEncryptionConfigState{}
	if err := json.NewDecoder(av).Decode(xec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", xec.Type(), xec.LocalName(), err)
	}
	return nil
}

func (xec *XrayEncryptionConfig) State() (*xrayEncryptionConfigState, bool) {
	return xec.state, xec.state != nil
}

func (xec *XrayEncryptionConfig) StateMust() *xrayEncryptionConfigState {
	if xec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", xec.Type(), xec.LocalName()))
	}
	return xec.state
}

func (xec *XrayEncryptionConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(xec)
}

type XrayEncryptionConfigArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyId: string, optional
	KeyId terra.StringValue `hcl:"key_id,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// DependsOn contains resources that XrayEncryptionConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type xrayEncryptionConfigAttributes struct {
	ref terra.Reference
}

func (xec xrayEncryptionConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(xec.ref.Append("id"))
}

func (xec xrayEncryptionConfigAttributes) KeyId() terra.StringValue {
	return terra.ReferenceString(xec.ref.Append("key_id"))
}

func (xec xrayEncryptionConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceString(xec.ref.Append("type"))
}

type xrayEncryptionConfigState struct {
	Id    string `json:"id"`
	KeyId string `json:"key_id"`
	Type  string `json:"type"`
}
