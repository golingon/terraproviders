// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	configorganizationmanagedrule "github.com/golingon/terraproviders/aws/4.60.0/configorganizationmanagedrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConfigOrganizationManagedRule(name string, args ConfigOrganizationManagedRuleArgs) *ConfigOrganizationManagedRule {
	return &ConfigOrganizationManagedRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConfigOrganizationManagedRule)(nil)

type ConfigOrganizationManagedRule struct {
	Name  string
	Args  ConfigOrganizationManagedRuleArgs
	state *configOrganizationManagedRuleState
}

func (comr *ConfigOrganizationManagedRule) Type() string {
	return "aws_config_organization_managed_rule"
}

func (comr *ConfigOrganizationManagedRule) LocalName() string {
	return comr.Name
}

func (comr *ConfigOrganizationManagedRule) Configuration() interface{} {
	return comr.Args
}

func (comr *ConfigOrganizationManagedRule) Attributes() configOrganizationManagedRuleAttributes {
	return configOrganizationManagedRuleAttributes{ref: terra.ReferenceResource(comr)}
}

func (comr *ConfigOrganizationManagedRule) ImportState(av io.Reader) error {
	comr.state = &configOrganizationManagedRuleState{}
	if err := json.NewDecoder(av).Decode(comr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", comr.Type(), comr.LocalName(), err)
	}
	return nil
}

func (comr *ConfigOrganizationManagedRule) State() (*configOrganizationManagedRuleState, bool) {
	return comr.state, comr.state != nil
}

func (comr *ConfigOrganizationManagedRule) StateMust() *configOrganizationManagedRuleState {
	if comr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", comr.Type(), comr.LocalName()))
	}
	return comr.state
}

func (comr *ConfigOrganizationManagedRule) DependOn() terra.Reference {
	return terra.ReferenceResource(comr)
}

type ConfigOrganizationManagedRuleArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ExcludedAccounts: set of string, optional
	ExcludedAccounts terra.SetValue[terra.StringValue] `hcl:"excluded_accounts,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InputParameters: string, optional
	InputParameters terra.StringValue `hcl:"input_parameters,attr"`
	// MaximumExecutionFrequency: string, optional
	MaximumExecutionFrequency terra.StringValue `hcl:"maximum_execution_frequency,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceIdScope: string, optional
	ResourceIdScope terra.StringValue `hcl:"resource_id_scope,attr"`
	// ResourceTypesScope: set of string, optional
	ResourceTypesScope terra.SetValue[terra.StringValue] `hcl:"resource_types_scope,attr"`
	// RuleIdentifier: string, required
	RuleIdentifier terra.StringValue `hcl:"rule_identifier,attr" validate:"required"`
	// TagKeyScope: string, optional
	TagKeyScope terra.StringValue `hcl:"tag_key_scope,attr"`
	// TagValueScope: string, optional
	TagValueScope terra.StringValue `hcl:"tag_value_scope,attr"`
	// Timeouts: optional
	Timeouts *configorganizationmanagedrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ConfigOrganizationManagedRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type configOrganizationManagedRuleAttributes struct {
	ref terra.Reference
}

func (comr configOrganizationManagedRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(comr.ref.Append("arn"))
}

func (comr configOrganizationManagedRuleAttributes) Description() terra.StringValue {
	return terra.ReferenceString(comr.ref.Append("description"))
}

func (comr configOrganizationManagedRuleAttributes) ExcludedAccounts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](comr.ref.Append("excluded_accounts"))
}

func (comr configOrganizationManagedRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(comr.ref.Append("id"))
}

func (comr configOrganizationManagedRuleAttributes) InputParameters() terra.StringValue {
	return terra.ReferenceString(comr.ref.Append("input_parameters"))
}

func (comr configOrganizationManagedRuleAttributes) MaximumExecutionFrequency() terra.StringValue {
	return terra.ReferenceString(comr.ref.Append("maximum_execution_frequency"))
}

func (comr configOrganizationManagedRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(comr.ref.Append("name"))
}

func (comr configOrganizationManagedRuleAttributes) ResourceIdScope() terra.StringValue {
	return terra.ReferenceString(comr.ref.Append("resource_id_scope"))
}

func (comr configOrganizationManagedRuleAttributes) ResourceTypesScope() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](comr.ref.Append("resource_types_scope"))
}

func (comr configOrganizationManagedRuleAttributes) RuleIdentifier() terra.StringValue {
	return terra.ReferenceString(comr.ref.Append("rule_identifier"))
}

func (comr configOrganizationManagedRuleAttributes) TagKeyScope() terra.StringValue {
	return terra.ReferenceString(comr.ref.Append("tag_key_scope"))
}

func (comr configOrganizationManagedRuleAttributes) TagValueScope() terra.StringValue {
	return terra.ReferenceString(comr.ref.Append("tag_value_scope"))
}

func (comr configOrganizationManagedRuleAttributes) Timeouts() configorganizationmanagedrule.TimeoutsAttributes {
	return terra.ReferenceSingle[configorganizationmanagedrule.TimeoutsAttributes](comr.ref.Append("timeouts"))
}

type configOrganizationManagedRuleState struct {
	Arn                       string                                       `json:"arn"`
	Description               string                                       `json:"description"`
	ExcludedAccounts          []string                                     `json:"excluded_accounts"`
	Id                        string                                       `json:"id"`
	InputParameters           string                                       `json:"input_parameters"`
	MaximumExecutionFrequency string                                       `json:"maximum_execution_frequency"`
	Name                      string                                       `json:"name"`
	ResourceIdScope           string                                       `json:"resource_id_scope"`
	ResourceTypesScope        []string                                     `json:"resource_types_scope"`
	RuleIdentifier            string                                       `json:"rule_identifier"`
	TagKeyScope               string                                       `json:"tag_key_scope"`
	TagValueScope             string                                       `json:"tag_value_scope"`
	Timeouts                  *configorganizationmanagedrule.TimeoutsState `json:"timeouts"`
}
