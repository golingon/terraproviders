// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3controlmultiregionaccesspointpolicy "github.com/golingon/terraproviders/aws/4.60.0/s3controlmultiregionaccesspointpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3ControlMultiRegionAccessPointPolicy(name string, args S3ControlMultiRegionAccessPointPolicyArgs) *S3ControlMultiRegionAccessPointPolicy {
	return &S3ControlMultiRegionAccessPointPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3ControlMultiRegionAccessPointPolicy)(nil)

type S3ControlMultiRegionAccessPointPolicy struct {
	Name  string
	Args  S3ControlMultiRegionAccessPointPolicyArgs
	state *s3ControlMultiRegionAccessPointPolicyState
}

func (smrapp *S3ControlMultiRegionAccessPointPolicy) Type() string {
	return "aws_s3control_multi_region_access_point_policy"
}

func (smrapp *S3ControlMultiRegionAccessPointPolicy) LocalName() string {
	return smrapp.Name
}

func (smrapp *S3ControlMultiRegionAccessPointPolicy) Configuration() interface{} {
	return smrapp.Args
}

func (smrapp *S3ControlMultiRegionAccessPointPolicy) Attributes() s3ControlMultiRegionAccessPointPolicyAttributes {
	return s3ControlMultiRegionAccessPointPolicyAttributes{ref: terra.ReferenceResource(smrapp)}
}

func (smrapp *S3ControlMultiRegionAccessPointPolicy) ImportState(av io.Reader) error {
	smrapp.state = &s3ControlMultiRegionAccessPointPolicyState{}
	if err := json.NewDecoder(av).Decode(smrapp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", smrapp.Type(), smrapp.LocalName(), err)
	}
	return nil
}

func (smrapp *S3ControlMultiRegionAccessPointPolicy) State() (*s3ControlMultiRegionAccessPointPolicyState, bool) {
	return smrapp.state, smrapp.state != nil
}

func (smrapp *S3ControlMultiRegionAccessPointPolicy) StateMust() *s3ControlMultiRegionAccessPointPolicyState {
	if smrapp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", smrapp.Type(), smrapp.LocalName()))
	}
	return smrapp.state
}

func (smrapp *S3ControlMultiRegionAccessPointPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(smrapp)
}

type S3ControlMultiRegionAccessPointPolicyArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Details: required
	Details *s3controlmultiregionaccesspointpolicy.Details `hcl:"details,block" validate:"required"`
	// Timeouts: optional
	Timeouts *s3controlmultiregionaccesspointpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that S3ControlMultiRegionAccessPointPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3ControlMultiRegionAccessPointPolicyAttributes struct {
	ref terra.Reference
}

func (smrapp s3ControlMultiRegionAccessPointPolicyAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(smrapp.ref.Append("account_id"))
}

func (smrapp s3ControlMultiRegionAccessPointPolicyAttributes) Established() terra.StringValue {
	return terra.ReferenceString(smrapp.ref.Append("established"))
}

func (smrapp s3ControlMultiRegionAccessPointPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(smrapp.ref.Append("id"))
}

func (smrapp s3ControlMultiRegionAccessPointPolicyAttributes) Proposed() terra.StringValue {
	return terra.ReferenceString(smrapp.ref.Append("proposed"))
}

func (smrapp s3ControlMultiRegionAccessPointPolicyAttributes) Details() terra.ListValue[s3controlmultiregionaccesspointpolicy.DetailsAttributes] {
	return terra.ReferenceList[s3controlmultiregionaccesspointpolicy.DetailsAttributes](smrapp.ref.Append("details"))
}

func (smrapp s3ControlMultiRegionAccessPointPolicyAttributes) Timeouts() s3controlmultiregionaccesspointpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[s3controlmultiregionaccesspointpolicy.TimeoutsAttributes](smrapp.ref.Append("timeouts"))
}

type s3ControlMultiRegionAccessPointPolicyState struct {
	AccountId   string                                               `json:"account_id"`
	Established string                                               `json:"established"`
	Id          string                                               `json:"id"`
	Proposed    string                                               `json:"proposed"`
	Details     []s3controlmultiregionaccesspointpolicy.DetailsState `json:"details"`
	Timeouts    *s3controlmultiregionaccesspointpolicy.TimeoutsState `json:"timeouts"`
}
