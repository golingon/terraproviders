// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewIamUserPolicyAttachment creates a new instance of [IamUserPolicyAttachment].
func NewIamUserPolicyAttachment(name string, args IamUserPolicyAttachmentArgs) *IamUserPolicyAttachment {
	return &IamUserPolicyAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamUserPolicyAttachment)(nil)

// IamUserPolicyAttachment represents the Terraform resource aws_iam_user_policy_attachment.
type IamUserPolicyAttachment struct {
	Name      string
	Args      IamUserPolicyAttachmentArgs
	state     *iamUserPolicyAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [IamUserPolicyAttachment].
func (iupa *IamUserPolicyAttachment) Type() string {
	return "aws_iam_user_policy_attachment"
}

// LocalName returns the local name for [IamUserPolicyAttachment].
func (iupa *IamUserPolicyAttachment) LocalName() string {
	return iupa.Name
}

// Configuration returns the configuration (args) for [IamUserPolicyAttachment].
func (iupa *IamUserPolicyAttachment) Configuration() interface{} {
	return iupa.Args
}

// DependOn is used for other resources to depend on [IamUserPolicyAttachment].
func (iupa *IamUserPolicyAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(iupa)
}

// Dependencies returns the list of resources [IamUserPolicyAttachment] depends_on.
func (iupa *IamUserPolicyAttachment) Dependencies() terra.Dependencies {
	return iupa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [IamUserPolicyAttachment].
func (iupa *IamUserPolicyAttachment) LifecycleManagement() *terra.Lifecycle {
	return iupa.Lifecycle
}

// Attributes returns the attributes for [IamUserPolicyAttachment].
func (iupa *IamUserPolicyAttachment) Attributes() iamUserPolicyAttachmentAttributes {
	return iamUserPolicyAttachmentAttributes{ref: terra.ReferenceResource(iupa)}
}

// ImportState imports the given attribute values into [IamUserPolicyAttachment]'s state.
func (iupa *IamUserPolicyAttachment) ImportState(av io.Reader) error {
	iupa.state = &iamUserPolicyAttachmentState{}
	if err := json.NewDecoder(av).Decode(iupa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iupa.Type(), iupa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [IamUserPolicyAttachment] has state.
func (iupa *IamUserPolicyAttachment) State() (*iamUserPolicyAttachmentState, bool) {
	return iupa.state, iupa.state != nil
}

// StateMust returns the state for [IamUserPolicyAttachment]. Panics if the state is nil.
func (iupa *IamUserPolicyAttachment) StateMust() *iamUserPolicyAttachmentState {
	if iupa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iupa.Type(), iupa.LocalName()))
	}
	return iupa.state
}

// IamUserPolicyAttachmentArgs contains the configurations for aws_iam_user_policy_attachment.
type IamUserPolicyAttachmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyArn: string, required
	PolicyArn terra.StringValue `hcl:"policy_arn,attr" validate:"required"`
	// User: string, required
	User terra.StringValue `hcl:"user,attr" validate:"required"`
}
type iamUserPolicyAttachmentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_iam_user_policy_attachment.
func (iupa iamUserPolicyAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(iupa.ref.Append("id"))
}

// PolicyArn returns a reference to field policy_arn of aws_iam_user_policy_attachment.
func (iupa iamUserPolicyAttachmentAttributes) PolicyArn() terra.StringValue {
	return terra.ReferenceAsString(iupa.ref.Append("policy_arn"))
}

// User returns a reference to field user of aws_iam_user_policy_attachment.
func (iupa iamUserPolicyAttachmentAttributes) User() terra.StringValue {
	return terra.ReferenceAsString(iupa.ref.Append("user"))
}

type iamUserPolicyAttachmentState struct {
	Id        string `json:"id"`
	PolicyArn string `json:"policy_arn"`
	User      string `json:"user"`
}
