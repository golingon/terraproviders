// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	servicecatalogproduct "github.com/golingon/terraproviders/aws/4.60.0/servicecatalogproduct"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicecatalogProduct(name string, args ServicecatalogProductArgs) *ServicecatalogProduct {
	return &ServicecatalogProduct{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicecatalogProduct)(nil)

type ServicecatalogProduct struct {
	Name  string
	Args  ServicecatalogProductArgs
	state *servicecatalogProductState
}

func (sp *ServicecatalogProduct) Type() string {
	return "aws_servicecatalog_product"
}

func (sp *ServicecatalogProduct) LocalName() string {
	return sp.Name
}

func (sp *ServicecatalogProduct) Configuration() interface{} {
	return sp.Args
}

func (sp *ServicecatalogProduct) Attributes() servicecatalogProductAttributes {
	return servicecatalogProductAttributes{ref: terra.ReferenceResource(sp)}
}

func (sp *ServicecatalogProduct) ImportState(av io.Reader) error {
	sp.state = &servicecatalogProductState{}
	if err := json.NewDecoder(av).Decode(sp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sp.Type(), sp.LocalName(), err)
	}
	return nil
}

func (sp *ServicecatalogProduct) State() (*servicecatalogProductState, bool) {
	return sp.state, sp.state != nil
}

func (sp *ServicecatalogProduct) StateMust() *servicecatalogProductState {
	if sp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sp.Type(), sp.LocalName()))
	}
	return sp.state
}

func (sp *ServicecatalogProduct) DependOn() terra.Reference {
	return terra.ReferenceResource(sp)
}

type ServicecatalogProductArgs struct {
	// AcceptLanguage: string, optional
	AcceptLanguage terra.StringValue `hcl:"accept_language,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Distributor: string, optional
	Distributor terra.StringValue `hcl:"distributor,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Owner: string, required
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
	// SupportDescription: string, optional
	SupportDescription terra.StringValue `hcl:"support_description,attr"`
	// SupportEmail: string, optional
	SupportEmail terra.StringValue `hcl:"support_email,attr"`
	// SupportUrl: string, optional
	SupportUrl terra.StringValue `hcl:"support_url,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ProvisioningArtifactParameters: required
	ProvisioningArtifactParameters *servicecatalogproduct.ProvisioningArtifactParameters `hcl:"provisioning_artifact_parameters,block" validate:"required"`
	// Timeouts: optional
	Timeouts *servicecatalogproduct.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServicecatalogProduct depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicecatalogProductAttributes struct {
	ref terra.Reference
}

func (sp servicecatalogProductAttributes) AcceptLanguage() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("accept_language"))
}

func (sp servicecatalogProductAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("arn"))
}

func (sp servicecatalogProductAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("created_time"))
}

func (sp servicecatalogProductAttributes) Description() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("description"))
}

func (sp servicecatalogProductAttributes) Distributor() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("distributor"))
}

func (sp servicecatalogProductAttributes) HasDefaultPath() terra.BoolValue {
	return terra.ReferenceBool(sp.ref.Append("has_default_path"))
}

func (sp servicecatalogProductAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("id"))
}

func (sp servicecatalogProductAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("name"))
}

func (sp servicecatalogProductAttributes) Owner() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("owner"))
}

func (sp servicecatalogProductAttributes) Status() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("status"))
}

func (sp servicecatalogProductAttributes) SupportDescription() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("support_description"))
}

func (sp servicecatalogProductAttributes) SupportEmail() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("support_email"))
}

func (sp servicecatalogProductAttributes) SupportUrl() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("support_url"))
}

func (sp servicecatalogProductAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sp.ref.Append("tags"))
}

func (sp servicecatalogProductAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sp.ref.Append("tags_all"))
}

func (sp servicecatalogProductAttributes) Type() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("type"))
}

func (sp servicecatalogProductAttributes) ProvisioningArtifactParameters() terra.ListValue[servicecatalogproduct.ProvisioningArtifactParametersAttributes] {
	return terra.ReferenceList[servicecatalogproduct.ProvisioningArtifactParametersAttributes](sp.ref.Append("provisioning_artifact_parameters"))
}

func (sp servicecatalogProductAttributes) Timeouts() servicecatalogproduct.TimeoutsAttributes {
	return terra.ReferenceSingle[servicecatalogproduct.TimeoutsAttributes](sp.ref.Append("timeouts"))
}

type servicecatalogProductState struct {
	AcceptLanguage                 string                                                      `json:"accept_language"`
	Arn                            string                                                      `json:"arn"`
	CreatedTime                    string                                                      `json:"created_time"`
	Description                    string                                                      `json:"description"`
	Distributor                    string                                                      `json:"distributor"`
	HasDefaultPath                 bool                                                        `json:"has_default_path"`
	Id                             string                                                      `json:"id"`
	Name                           string                                                      `json:"name"`
	Owner                          string                                                      `json:"owner"`
	Status                         string                                                      `json:"status"`
	SupportDescription             string                                                      `json:"support_description"`
	SupportEmail                   string                                                      `json:"support_email"`
	SupportUrl                     string                                                      `json:"support_url"`
	Tags                           map[string]string                                           `json:"tags"`
	TagsAll                        map[string]string                                           `json:"tags_all"`
	Type                           string                                                      `json:"type"`
	ProvisioningArtifactParameters []servicecatalogproduct.ProvisioningArtifactParametersState `json:"provisioning_artifact_parameters"`
	Timeouts                       *servicecatalogproduct.TimeoutsState                        `json:"timeouts"`
}
