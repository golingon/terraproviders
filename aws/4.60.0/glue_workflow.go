// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGlueWorkflow(name string, args GlueWorkflowArgs) *GlueWorkflow {
	return &GlueWorkflow{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GlueWorkflow)(nil)

type GlueWorkflow struct {
	Name  string
	Args  GlueWorkflowArgs
	state *glueWorkflowState
}

func (gw *GlueWorkflow) Type() string {
	return "aws_glue_workflow"
}

func (gw *GlueWorkflow) LocalName() string {
	return gw.Name
}

func (gw *GlueWorkflow) Configuration() interface{} {
	return gw.Args
}

func (gw *GlueWorkflow) Attributes() glueWorkflowAttributes {
	return glueWorkflowAttributes{ref: terra.ReferenceResource(gw)}
}

func (gw *GlueWorkflow) ImportState(av io.Reader) error {
	gw.state = &glueWorkflowState{}
	if err := json.NewDecoder(av).Decode(gw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gw.Type(), gw.LocalName(), err)
	}
	return nil
}

func (gw *GlueWorkflow) State() (*glueWorkflowState, bool) {
	return gw.state, gw.state != nil
}

func (gw *GlueWorkflow) StateMust() *glueWorkflowState {
	if gw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gw.Type(), gw.LocalName()))
	}
	return gw.state
}

func (gw *GlueWorkflow) DependOn() terra.Reference {
	return terra.ReferenceResource(gw)
}

type GlueWorkflowArgs struct {
	// DefaultRunProperties: map of string, optional
	DefaultRunProperties terra.MapValue[terra.StringValue] `hcl:"default_run_properties,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxConcurrentRuns: number, optional
	MaxConcurrentRuns terra.NumberValue `hcl:"max_concurrent_runs,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that GlueWorkflow depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type glueWorkflowAttributes struct {
	ref terra.Reference
}

func (gw glueWorkflowAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("arn"))
}

func (gw glueWorkflowAttributes) DefaultRunProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gw.ref.Append("default_run_properties"))
}

func (gw glueWorkflowAttributes) Description() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("description"))
}

func (gw glueWorkflowAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("id"))
}

func (gw glueWorkflowAttributes) MaxConcurrentRuns() terra.NumberValue {
	return terra.ReferenceNumber(gw.ref.Append("max_concurrent_runs"))
}

func (gw glueWorkflowAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gw.ref.Append("name"))
}

func (gw glueWorkflowAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gw.ref.Append("tags"))
}

func (gw glueWorkflowAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gw.ref.Append("tags_all"))
}

type glueWorkflowState struct {
	Arn                  string            `json:"arn"`
	DefaultRunProperties map[string]string `json:"default_run_properties"`
	Description          string            `json:"description"`
	Id                   string            `json:"id"`
	MaxConcurrentRuns    float64           `json:"max_concurrent_runs"`
	Name                 string            `json:"name"`
	Tags                 map[string]string `json:"tags"`
	TagsAll              map[string]string `json:"tags_all"`
}
