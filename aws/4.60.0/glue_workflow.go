// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewGlueWorkflow creates a new instance of [GlueWorkflow].
func NewGlueWorkflow(name string, args GlueWorkflowArgs) *GlueWorkflow {
	return &GlueWorkflow{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GlueWorkflow)(nil)

// GlueWorkflow represents the Terraform resource aws_glue_workflow.
type GlueWorkflow struct {
	Name      string
	Args      GlueWorkflowArgs
	state     *glueWorkflowState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [GlueWorkflow].
func (gw *GlueWorkflow) Type() string {
	return "aws_glue_workflow"
}

// LocalName returns the local name for [GlueWorkflow].
func (gw *GlueWorkflow) LocalName() string {
	return gw.Name
}

// Configuration returns the configuration (args) for [GlueWorkflow].
func (gw *GlueWorkflow) Configuration() interface{} {
	return gw.Args
}

// DependOn is used for other resources to depend on [GlueWorkflow].
func (gw *GlueWorkflow) DependOn() terra.Reference {
	return terra.ReferenceResource(gw)
}

// Dependencies returns the list of resources [GlueWorkflow] depends_on.
func (gw *GlueWorkflow) Dependencies() terra.Dependencies {
	return gw.DependsOn
}

// LifecycleManagement returns the lifecycle block for [GlueWorkflow].
func (gw *GlueWorkflow) LifecycleManagement() *terra.Lifecycle {
	return gw.Lifecycle
}

// Attributes returns the attributes for [GlueWorkflow].
func (gw *GlueWorkflow) Attributes() glueWorkflowAttributes {
	return glueWorkflowAttributes{ref: terra.ReferenceResource(gw)}
}

// ImportState imports the given attribute values into [GlueWorkflow]'s state.
func (gw *GlueWorkflow) ImportState(av io.Reader) error {
	gw.state = &glueWorkflowState{}
	if err := json.NewDecoder(av).Decode(gw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gw.Type(), gw.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [GlueWorkflow] has state.
func (gw *GlueWorkflow) State() (*glueWorkflowState, bool) {
	return gw.state, gw.state != nil
}

// StateMust returns the state for [GlueWorkflow]. Panics if the state is nil.
func (gw *GlueWorkflow) StateMust() *glueWorkflowState {
	if gw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gw.Type(), gw.LocalName()))
	}
	return gw.state
}

// GlueWorkflowArgs contains the configurations for aws_glue_workflow.
type GlueWorkflowArgs struct {
	// DefaultRunProperties: map of string, optional
	DefaultRunProperties terra.MapValue[terra.StringValue] `hcl:"default_run_properties,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxConcurrentRuns: number, optional
	MaxConcurrentRuns terra.NumberValue `hcl:"max_concurrent_runs,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type glueWorkflowAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_glue_workflow.
func (gw glueWorkflowAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(gw.ref.Append("arn"))
}

// DefaultRunProperties returns a reference to field default_run_properties of aws_glue_workflow.
func (gw glueWorkflowAttributes) DefaultRunProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gw.ref.Append("default_run_properties"))
}

// Description returns a reference to field description of aws_glue_workflow.
func (gw glueWorkflowAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(gw.ref.Append("description"))
}

// Id returns a reference to field id of aws_glue_workflow.
func (gw glueWorkflowAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(gw.ref.Append("id"))
}

// MaxConcurrentRuns returns a reference to field max_concurrent_runs of aws_glue_workflow.
func (gw glueWorkflowAttributes) MaxConcurrentRuns() terra.NumberValue {
	return terra.ReferenceAsNumber(gw.ref.Append("max_concurrent_runs"))
}

// Name returns a reference to field name of aws_glue_workflow.
func (gw glueWorkflowAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gw.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_glue_workflow.
func (gw glueWorkflowAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gw.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_glue_workflow.
func (gw glueWorkflowAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](gw.ref.Append("tags_all"))
}

type glueWorkflowState struct {
	Arn                  string            `json:"arn"`
	DefaultRunProperties map[string]string `json:"default_run_properties"`
	Description          string            `json:"description"`
	Id                   string            `json:"id"`
	MaxConcurrentRuns    float64           `json:"max_concurrent_runs"`
	Name                 string            `json:"name"`
	Tags                 map[string]string `json:"tags"`
	TagsAll              map[string]string `json:"tags_all"`
}
