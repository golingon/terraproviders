// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLambdaInvocation(name string, args LambdaInvocationArgs) *LambdaInvocation {
	return &LambdaInvocation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LambdaInvocation)(nil)

type LambdaInvocation struct {
	Name  string
	Args  LambdaInvocationArgs
	state *lambdaInvocationState
}

func (li *LambdaInvocation) Type() string {
	return "aws_lambda_invocation"
}

func (li *LambdaInvocation) LocalName() string {
	return li.Name
}

func (li *LambdaInvocation) Configuration() interface{} {
	return li.Args
}

func (li *LambdaInvocation) Attributes() lambdaInvocationAttributes {
	return lambdaInvocationAttributes{ref: terra.ReferenceResource(li)}
}

func (li *LambdaInvocation) ImportState(av io.Reader) error {
	li.state = &lambdaInvocationState{}
	if err := json.NewDecoder(av).Decode(li.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", li.Type(), li.LocalName(), err)
	}
	return nil
}

func (li *LambdaInvocation) State() (*lambdaInvocationState, bool) {
	return li.state, li.state != nil
}

func (li *LambdaInvocation) StateMust() *lambdaInvocationState {
	if li.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", li.Type(), li.LocalName()))
	}
	return li.state
}

func (li *LambdaInvocation) DependOn() terra.Reference {
	return terra.ReferenceResource(li)
}

type LambdaInvocationArgs struct {
	// FunctionName: string, required
	FunctionName terra.StringValue `hcl:"function_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Input: string, required
	Input terra.StringValue `hcl:"input,attr" validate:"required"`
	// Qualifier: string, optional
	Qualifier terra.StringValue `hcl:"qualifier,attr"`
	// Triggers: map of string, optional
	Triggers terra.MapValue[terra.StringValue] `hcl:"triggers,attr"`
	// DependsOn contains resources that LambdaInvocation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lambdaInvocationAttributes struct {
	ref terra.Reference
}

func (li lambdaInvocationAttributes) FunctionName() terra.StringValue {
	return terra.ReferenceString(li.ref.Append("function_name"))
}

func (li lambdaInvocationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(li.ref.Append("id"))
}

func (li lambdaInvocationAttributes) Input() terra.StringValue {
	return terra.ReferenceString(li.ref.Append("input"))
}

func (li lambdaInvocationAttributes) Qualifier() terra.StringValue {
	return terra.ReferenceString(li.ref.Append("qualifier"))
}

func (li lambdaInvocationAttributes) Result() terra.StringValue {
	return terra.ReferenceString(li.ref.Append("result"))
}

func (li lambdaInvocationAttributes) Triggers() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](li.ref.Append("triggers"))
}

type lambdaInvocationState struct {
	FunctionName string            `json:"function_name"`
	Id           string            `json:"id"`
	Input        string            `json:"input"`
	Qualifier    string            `json:"qualifier"`
	Result       string            `json:"result"`
	Triggers     map[string]string `json:"triggers"`
}
