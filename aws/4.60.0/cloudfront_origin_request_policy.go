// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudfrontoriginrequestpolicy "github.com/golingon/terraproviders/aws/4.60.0/cloudfrontoriginrequestpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudfrontOriginRequestPolicy(name string, args CloudfrontOriginRequestPolicyArgs) *CloudfrontOriginRequestPolicy {
	return &CloudfrontOriginRequestPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudfrontOriginRequestPolicy)(nil)

type CloudfrontOriginRequestPolicy struct {
	Name  string
	Args  CloudfrontOriginRequestPolicyArgs
	state *cloudfrontOriginRequestPolicyState
}

func (corp *CloudfrontOriginRequestPolicy) Type() string {
	return "aws_cloudfront_origin_request_policy"
}

func (corp *CloudfrontOriginRequestPolicy) LocalName() string {
	return corp.Name
}

func (corp *CloudfrontOriginRequestPolicy) Configuration() interface{} {
	return corp.Args
}

func (corp *CloudfrontOriginRequestPolicy) Attributes() cloudfrontOriginRequestPolicyAttributes {
	return cloudfrontOriginRequestPolicyAttributes{ref: terra.ReferenceResource(corp)}
}

func (corp *CloudfrontOriginRequestPolicy) ImportState(av io.Reader) error {
	corp.state = &cloudfrontOriginRequestPolicyState{}
	if err := json.NewDecoder(av).Decode(corp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", corp.Type(), corp.LocalName(), err)
	}
	return nil
}

func (corp *CloudfrontOriginRequestPolicy) State() (*cloudfrontOriginRequestPolicyState, bool) {
	return corp.state, corp.state != nil
}

func (corp *CloudfrontOriginRequestPolicy) StateMust() *cloudfrontOriginRequestPolicyState {
	if corp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", corp.Type(), corp.LocalName()))
	}
	return corp.state
}

func (corp *CloudfrontOriginRequestPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(corp)
}

type CloudfrontOriginRequestPolicyArgs struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// CookiesConfig: required
	CookiesConfig *cloudfrontoriginrequestpolicy.CookiesConfig `hcl:"cookies_config,block" validate:"required"`
	// HeadersConfig: required
	HeadersConfig *cloudfrontoriginrequestpolicy.HeadersConfig `hcl:"headers_config,block" validate:"required"`
	// QueryStringsConfig: required
	QueryStringsConfig *cloudfrontoriginrequestpolicy.QueryStringsConfig `hcl:"query_strings_config,block" validate:"required"`
	// DependsOn contains resources that CloudfrontOriginRequestPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudfrontOriginRequestPolicyAttributes struct {
	ref terra.Reference
}

func (corp cloudfrontOriginRequestPolicyAttributes) Comment() terra.StringValue {
	return terra.ReferenceString(corp.ref.Append("comment"))
}

func (corp cloudfrontOriginRequestPolicyAttributes) Etag() terra.StringValue {
	return terra.ReferenceString(corp.ref.Append("etag"))
}

func (corp cloudfrontOriginRequestPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(corp.ref.Append("id"))
}

func (corp cloudfrontOriginRequestPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(corp.ref.Append("name"))
}

func (corp cloudfrontOriginRequestPolicyAttributes) CookiesConfig() terra.ListValue[cloudfrontoriginrequestpolicy.CookiesConfigAttributes] {
	return terra.ReferenceList[cloudfrontoriginrequestpolicy.CookiesConfigAttributes](corp.ref.Append("cookies_config"))
}

func (corp cloudfrontOriginRequestPolicyAttributes) HeadersConfig() terra.ListValue[cloudfrontoriginrequestpolicy.HeadersConfigAttributes] {
	return terra.ReferenceList[cloudfrontoriginrequestpolicy.HeadersConfigAttributes](corp.ref.Append("headers_config"))
}

func (corp cloudfrontOriginRequestPolicyAttributes) QueryStringsConfig() terra.ListValue[cloudfrontoriginrequestpolicy.QueryStringsConfigAttributes] {
	return terra.ReferenceList[cloudfrontoriginrequestpolicy.QueryStringsConfigAttributes](corp.ref.Append("query_strings_config"))
}

type cloudfrontOriginRequestPolicyState struct {
	Comment            string                                                  `json:"comment"`
	Etag               string                                                  `json:"etag"`
	Id                 string                                                  `json:"id"`
	Name               string                                                  `json:"name"`
	CookiesConfig      []cloudfrontoriginrequestpolicy.CookiesConfigState      `json:"cookies_config"`
	HeadersConfig      []cloudfrontoriginrequestpolicy.HeadersConfigState      `json:"headers_config"`
	QueryStringsConfig []cloudfrontoriginrequestpolicy.QueryStringsConfigState `json:"query_strings_config"`
}
