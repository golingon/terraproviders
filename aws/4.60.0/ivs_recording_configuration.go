// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ivsrecordingconfiguration "github.com/golingon/terraproviders/aws/4.60.0/ivsrecordingconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIvsRecordingConfiguration(name string, args IvsRecordingConfigurationArgs) *IvsRecordingConfiguration {
	return &IvsRecordingConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IvsRecordingConfiguration)(nil)

type IvsRecordingConfiguration struct {
	Name  string
	Args  IvsRecordingConfigurationArgs
	state *ivsRecordingConfigurationState
}

func (irc *IvsRecordingConfiguration) Type() string {
	return "aws_ivs_recording_configuration"
}

func (irc *IvsRecordingConfiguration) LocalName() string {
	return irc.Name
}

func (irc *IvsRecordingConfiguration) Configuration() interface{} {
	return irc.Args
}

func (irc *IvsRecordingConfiguration) Attributes() ivsRecordingConfigurationAttributes {
	return ivsRecordingConfigurationAttributes{ref: terra.ReferenceResource(irc)}
}

func (irc *IvsRecordingConfiguration) ImportState(av io.Reader) error {
	irc.state = &ivsRecordingConfigurationState{}
	if err := json.NewDecoder(av).Decode(irc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", irc.Type(), irc.LocalName(), err)
	}
	return nil
}

func (irc *IvsRecordingConfiguration) State() (*ivsRecordingConfigurationState, bool) {
	return irc.state, irc.state != nil
}

func (irc *IvsRecordingConfiguration) StateMust() *ivsRecordingConfigurationState {
	if irc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", irc.Type(), irc.LocalName()))
	}
	return irc.state
}

func (irc *IvsRecordingConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(irc)
}

type IvsRecordingConfigurationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// RecordingReconnectWindowSeconds: number, optional
	RecordingReconnectWindowSeconds terra.NumberValue `hcl:"recording_reconnect_window_seconds,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DestinationConfiguration: required
	DestinationConfiguration *ivsrecordingconfiguration.DestinationConfiguration `hcl:"destination_configuration,block" validate:"required"`
	// ThumbnailConfiguration: optional
	ThumbnailConfiguration *ivsrecordingconfiguration.ThumbnailConfiguration `hcl:"thumbnail_configuration,block"`
	// Timeouts: optional
	Timeouts *ivsrecordingconfiguration.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IvsRecordingConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ivsRecordingConfigurationAttributes struct {
	ref terra.Reference
}

func (irc ivsRecordingConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(irc.ref.Append("arn"))
}

func (irc ivsRecordingConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(irc.ref.Append("id"))
}

func (irc ivsRecordingConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(irc.ref.Append("name"))
}

func (irc ivsRecordingConfigurationAttributes) RecordingReconnectWindowSeconds() terra.NumberValue {
	return terra.ReferenceNumber(irc.ref.Append("recording_reconnect_window_seconds"))
}

func (irc ivsRecordingConfigurationAttributes) State() terra.StringValue {
	return terra.ReferenceString(irc.ref.Append("state"))
}

func (irc ivsRecordingConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](irc.ref.Append("tags"))
}

func (irc ivsRecordingConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](irc.ref.Append("tags_all"))
}

func (irc ivsRecordingConfigurationAttributes) DestinationConfiguration() terra.ListValue[ivsrecordingconfiguration.DestinationConfigurationAttributes] {
	return terra.ReferenceList[ivsrecordingconfiguration.DestinationConfigurationAttributes](irc.ref.Append("destination_configuration"))
}

func (irc ivsRecordingConfigurationAttributes) ThumbnailConfiguration() terra.ListValue[ivsrecordingconfiguration.ThumbnailConfigurationAttributes] {
	return terra.ReferenceList[ivsrecordingconfiguration.ThumbnailConfigurationAttributes](irc.ref.Append("thumbnail_configuration"))
}

func (irc ivsRecordingConfigurationAttributes) Timeouts() ivsrecordingconfiguration.TimeoutsAttributes {
	return terra.ReferenceSingle[ivsrecordingconfiguration.TimeoutsAttributes](irc.ref.Append("timeouts"))
}

type ivsRecordingConfigurationState struct {
	Arn                             string                                                    `json:"arn"`
	Id                              string                                                    `json:"id"`
	Name                            string                                                    `json:"name"`
	RecordingReconnectWindowSeconds float64                                                   `json:"recording_reconnect_window_seconds"`
	State                           string                                                    `json:"state"`
	Tags                            map[string]string                                         `json:"tags"`
	TagsAll                         map[string]string                                         `json:"tags_all"`
	DestinationConfiguration        []ivsrecordingconfiguration.DestinationConfigurationState `json:"destination_configuration"`
	ThumbnailConfiguration          []ivsrecordingconfiguration.ThumbnailConfigurationState   `json:"thumbnail_configuration"`
	Timeouts                        *ivsrecordingconfiguration.TimeoutsState                  `json:"timeouts"`
}
