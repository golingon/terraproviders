// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudwatchCompositeAlarm(name string, args CloudwatchCompositeAlarmArgs) *CloudwatchCompositeAlarm {
	return &CloudwatchCompositeAlarm{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudwatchCompositeAlarm)(nil)

type CloudwatchCompositeAlarm struct {
	Name  string
	Args  CloudwatchCompositeAlarmArgs
	state *cloudwatchCompositeAlarmState
}

func (cca *CloudwatchCompositeAlarm) Type() string {
	return "aws_cloudwatch_composite_alarm"
}

func (cca *CloudwatchCompositeAlarm) LocalName() string {
	return cca.Name
}

func (cca *CloudwatchCompositeAlarm) Configuration() interface{} {
	return cca.Args
}

func (cca *CloudwatchCompositeAlarm) Attributes() cloudwatchCompositeAlarmAttributes {
	return cloudwatchCompositeAlarmAttributes{ref: terra.ReferenceResource(cca)}
}

func (cca *CloudwatchCompositeAlarm) ImportState(av io.Reader) error {
	cca.state = &cloudwatchCompositeAlarmState{}
	if err := json.NewDecoder(av).Decode(cca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cca.Type(), cca.LocalName(), err)
	}
	return nil
}

func (cca *CloudwatchCompositeAlarm) State() (*cloudwatchCompositeAlarmState, bool) {
	return cca.state, cca.state != nil
}

func (cca *CloudwatchCompositeAlarm) StateMust() *cloudwatchCompositeAlarmState {
	if cca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cca.Type(), cca.LocalName()))
	}
	return cca.state
}

func (cca *CloudwatchCompositeAlarm) DependOn() terra.Reference {
	return terra.ReferenceResource(cca)
}

type CloudwatchCompositeAlarmArgs struct {
	// ActionsEnabled: bool, optional
	ActionsEnabled terra.BoolValue `hcl:"actions_enabled,attr"`
	// AlarmActions: set of string, optional
	AlarmActions terra.SetValue[terra.StringValue] `hcl:"alarm_actions,attr"`
	// AlarmDescription: string, optional
	AlarmDescription terra.StringValue `hcl:"alarm_description,attr"`
	// AlarmName: string, required
	AlarmName terra.StringValue `hcl:"alarm_name,attr" validate:"required"`
	// AlarmRule: string, required
	AlarmRule terra.StringValue `hcl:"alarm_rule,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InsufficientDataActions: set of string, optional
	InsufficientDataActions terra.SetValue[terra.StringValue] `hcl:"insufficient_data_actions,attr"`
	// OkActions: set of string, optional
	OkActions terra.SetValue[terra.StringValue] `hcl:"ok_actions,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that CloudwatchCompositeAlarm depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudwatchCompositeAlarmAttributes struct {
	ref terra.Reference
}

func (cca cloudwatchCompositeAlarmAttributes) ActionsEnabled() terra.BoolValue {
	return terra.ReferenceBool(cca.ref.Append("actions_enabled"))
}

func (cca cloudwatchCompositeAlarmAttributes) AlarmActions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cca.ref.Append("alarm_actions"))
}

func (cca cloudwatchCompositeAlarmAttributes) AlarmDescription() terra.StringValue {
	return terra.ReferenceString(cca.ref.Append("alarm_description"))
}

func (cca cloudwatchCompositeAlarmAttributes) AlarmName() terra.StringValue {
	return terra.ReferenceString(cca.ref.Append("alarm_name"))
}

func (cca cloudwatchCompositeAlarmAttributes) AlarmRule() terra.StringValue {
	return terra.ReferenceString(cca.ref.Append("alarm_rule"))
}

func (cca cloudwatchCompositeAlarmAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cca.ref.Append("arn"))
}

func (cca cloudwatchCompositeAlarmAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cca.ref.Append("id"))
}

func (cca cloudwatchCompositeAlarmAttributes) InsufficientDataActions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cca.ref.Append("insufficient_data_actions"))
}

func (cca cloudwatchCompositeAlarmAttributes) OkActions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cca.ref.Append("ok_actions"))
}

func (cca cloudwatchCompositeAlarmAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cca.ref.Append("tags"))
}

func (cca cloudwatchCompositeAlarmAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cca.ref.Append("tags_all"))
}

type cloudwatchCompositeAlarmState struct {
	ActionsEnabled          bool              `json:"actions_enabled"`
	AlarmActions            []string          `json:"alarm_actions"`
	AlarmDescription        string            `json:"alarm_description"`
	AlarmName               string            `json:"alarm_name"`
	AlarmRule               string            `json:"alarm_rule"`
	Arn                     string            `json:"arn"`
	Id                      string            `json:"id"`
	InsufficientDataActions []string          `json:"insufficient_data_actions"`
	OkActions               []string          `json:"ok_actions"`
	Tags                    map[string]string `json:"tags"`
	TagsAll                 map[string]string `json:"tags_all"`
}
