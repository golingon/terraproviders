// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3controlobjectlambdaaccesspoint "github.com/golingon/terraproviders/aws/4.60.0/s3controlobjectlambdaaccesspoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3ControlObjectLambdaAccessPoint(name string, args S3ControlObjectLambdaAccessPointArgs) *S3ControlObjectLambdaAccessPoint {
	return &S3ControlObjectLambdaAccessPoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3ControlObjectLambdaAccessPoint)(nil)

type S3ControlObjectLambdaAccessPoint struct {
	Name  string
	Args  S3ControlObjectLambdaAccessPointArgs
	state *s3ControlObjectLambdaAccessPointState
}

func (solap *S3ControlObjectLambdaAccessPoint) Type() string {
	return "aws_s3control_object_lambda_access_point"
}

func (solap *S3ControlObjectLambdaAccessPoint) LocalName() string {
	return solap.Name
}

func (solap *S3ControlObjectLambdaAccessPoint) Configuration() interface{} {
	return solap.Args
}

func (solap *S3ControlObjectLambdaAccessPoint) Attributes() s3ControlObjectLambdaAccessPointAttributes {
	return s3ControlObjectLambdaAccessPointAttributes{ref: terra.ReferenceResource(solap)}
}

func (solap *S3ControlObjectLambdaAccessPoint) ImportState(av io.Reader) error {
	solap.state = &s3ControlObjectLambdaAccessPointState{}
	if err := json.NewDecoder(av).Decode(solap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", solap.Type(), solap.LocalName(), err)
	}
	return nil
}

func (solap *S3ControlObjectLambdaAccessPoint) State() (*s3ControlObjectLambdaAccessPointState, bool) {
	return solap.state, solap.state != nil
}

func (solap *S3ControlObjectLambdaAccessPoint) StateMust() *s3ControlObjectLambdaAccessPointState {
	if solap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", solap.Type(), solap.LocalName()))
	}
	return solap.state
}

func (solap *S3ControlObjectLambdaAccessPoint) DependOn() terra.Reference {
	return terra.ReferenceResource(solap)
}

type S3ControlObjectLambdaAccessPointArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Configuration: required
	Configuration *s3controlobjectlambdaaccesspoint.Configuration `hcl:"configuration,block" validate:"required"`
	// DependsOn contains resources that S3ControlObjectLambdaAccessPoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3ControlObjectLambdaAccessPointAttributes struct {
	ref terra.Reference
}

func (solap s3ControlObjectLambdaAccessPointAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(solap.ref.Append("account_id"))
}

func (solap s3ControlObjectLambdaAccessPointAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(solap.ref.Append("arn"))
}

func (solap s3ControlObjectLambdaAccessPointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(solap.ref.Append("id"))
}

func (solap s3ControlObjectLambdaAccessPointAttributes) Name() terra.StringValue {
	return terra.ReferenceString(solap.ref.Append("name"))
}

func (solap s3ControlObjectLambdaAccessPointAttributes) Configuration() terra.ListValue[s3controlobjectlambdaaccesspoint.ConfigurationAttributes] {
	return terra.ReferenceList[s3controlobjectlambdaaccesspoint.ConfigurationAttributes](solap.ref.Append("configuration"))
}

type s3ControlObjectLambdaAccessPointState struct {
	AccountId     string                                                `json:"account_id"`
	Arn           string                                                `json:"arn"`
	Id            string                                                `json:"id"`
	Name          string                                                `json:"name"`
	Configuration []s3controlobjectlambdaaccesspoint.ConfigurationState `json:"configuration"`
}
