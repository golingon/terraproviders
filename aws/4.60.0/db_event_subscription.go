// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dbeventsubscription "github.com/golingon/terraproviders/aws/4.60.0/dbeventsubscription"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDbEventSubscription(name string, args DbEventSubscriptionArgs) *DbEventSubscription {
	return &DbEventSubscription{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DbEventSubscription)(nil)

type DbEventSubscription struct {
	Name  string
	Args  DbEventSubscriptionArgs
	state *dbEventSubscriptionState
}

func (des *DbEventSubscription) Type() string {
	return "aws_db_event_subscription"
}

func (des *DbEventSubscription) LocalName() string {
	return des.Name
}

func (des *DbEventSubscription) Configuration() interface{} {
	return des.Args
}

func (des *DbEventSubscription) Attributes() dbEventSubscriptionAttributes {
	return dbEventSubscriptionAttributes{ref: terra.ReferenceResource(des)}
}

func (des *DbEventSubscription) ImportState(av io.Reader) error {
	des.state = &dbEventSubscriptionState{}
	if err := json.NewDecoder(av).Decode(des.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", des.Type(), des.LocalName(), err)
	}
	return nil
}

func (des *DbEventSubscription) State() (*dbEventSubscriptionState, bool) {
	return des.state, des.state != nil
}

func (des *DbEventSubscription) StateMust() *dbEventSubscriptionState {
	if des.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", des.Type(), des.LocalName()))
	}
	return des.state
}

func (des *DbEventSubscription) DependOn() terra.Reference {
	return terra.ReferenceResource(des)
}

type DbEventSubscriptionArgs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// EventCategories: set of string, optional
	EventCategories terra.SetValue[terra.StringValue] `hcl:"event_categories,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// SnsTopic: string, required
	SnsTopic terra.StringValue `hcl:"sns_topic,attr" validate:"required"`
	// SourceIds: set of string, optional
	SourceIds terra.SetValue[terra.StringValue] `hcl:"source_ids,attr"`
	// SourceType: string, optional
	SourceType terra.StringValue `hcl:"source_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *dbeventsubscription.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DbEventSubscription depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dbEventSubscriptionAttributes struct {
	ref terra.Reference
}

func (des dbEventSubscriptionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(des.ref.Append("arn"))
}

func (des dbEventSubscriptionAttributes) CustomerAwsId() terra.StringValue {
	return terra.ReferenceString(des.ref.Append("customer_aws_id"))
}

func (des dbEventSubscriptionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(des.ref.Append("enabled"))
}

func (des dbEventSubscriptionAttributes) EventCategories() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](des.ref.Append("event_categories"))
}

func (des dbEventSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(des.ref.Append("id"))
}

func (des dbEventSubscriptionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(des.ref.Append("name"))
}

func (des dbEventSubscriptionAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(des.ref.Append("name_prefix"))
}

func (des dbEventSubscriptionAttributes) SnsTopic() terra.StringValue {
	return terra.ReferenceString(des.ref.Append("sns_topic"))
}

func (des dbEventSubscriptionAttributes) SourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](des.ref.Append("source_ids"))
}

func (des dbEventSubscriptionAttributes) SourceType() terra.StringValue {
	return terra.ReferenceString(des.ref.Append("source_type"))
}

func (des dbEventSubscriptionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](des.ref.Append("tags"))
}

func (des dbEventSubscriptionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](des.ref.Append("tags_all"))
}

func (des dbEventSubscriptionAttributes) Timeouts() dbeventsubscription.TimeoutsAttributes {
	return terra.ReferenceSingle[dbeventsubscription.TimeoutsAttributes](des.ref.Append("timeouts"))
}

type dbEventSubscriptionState struct {
	Arn             string                             `json:"arn"`
	CustomerAwsId   string                             `json:"customer_aws_id"`
	Enabled         bool                               `json:"enabled"`
	EventCategories []string                           `json:"event_categories"`
	Id              string                             `json:"id"`
	Name            string                             `json:"name"`
	NamePrefix      string                             `json:"name_prefix"`
	SnsTopic        string                             `json:"sns_topic"`
	SourceIds       []string                           `json:"source_ids"`
	SourceType      string                             `json:"source_type"`
	Tags            map[string]string                  `json:"tags"`
	TagsAll         map[string]string                  `json:"tags_all"`
	Timeouts        *dbeventsubscription.TimeoutsState `json:"timeouts"`
}
