// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	appmeshvirtualrouter "github.com/golingon/terraproviders/aws/4.60.0/appmeshvirtualrouter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppmeshVirtualRouter(name string, args AppmeshVirtualRouterArgs) *AppmeshVirtualRouter {
	return &AppmeshVirtualRouter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppmeshVirtualRouter)(nil)

type AppmeshVirtualRouter struct {
	Name  string
	Args  AppmeshVirtualRouterArgs
	state *appmeshVirtualRouterState
}

func (avr *AppmeshVirtualRouter) Type() string {
	return "aws_appmesh_virtual_router"
}

func (avr *AppmeshVirtualRouter) LocalName() string {
	return avr.Name
}

func (avr *AppmeshVirtualRouter) Configuration() interface{} {
	return avr.Args
}

func (avr *AppmeshVirtualRouter) Attributes() appmeshVirtualRouterAttributes {
	return appmeshVirtualRouterAttributes{ref: terra.ReferenceResource(avr)}
}

func (avr *AppmeshVirtualRouter) ImportState(av io.Reader) error {
	avr.state = &appmeshVirtualRouterState{}
	if err := json.NewDecoder(av).Decode(avr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avr.Type(), avr.LocalName(), err)
	}
	return nil
}

func (avr *AppmeshVirtualRouter) State() (*appmeshVirtualRouterState, bool) {
	return avr.state, avr.state != nil
}

func (avr *AppmeshVirtualRouter) StateMust() *appmeshVirtualRouterState {
	if avr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avr.Type(), avr.LocalName()))
	}
	return avr.state
}

func (avr *AppmeshVirtualRouter) DependOn() terra.Reference {
	return terra.ReferenceResource(avr)
}

type AppmeshVirtualRouterArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MeshName: string, required
	MeshName terra.StringValue `hcl:"mesh_name,attr" validate:"required"`
	// MeshOwner: string, optional
	MeshOwner terra.StringValue `hcl:"mesh_owner,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Spec: required
	Spec *appmeshvirtualrouter.Spec `hcl:"spec,block" validate:"required"`
	// DependsOn contains resources that AppmeshVirtualRouter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appmeshVirtualRouterAttributes struct {
	ref terra.Reference
}

func (avr appmeshVirtualRouterAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(avr.ref.Append("arn"))
}

func (avr appmeshVirtualRouterAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceString(avr.ref.Append("created_date"))
}

func (avr appmeshVirtualRouterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(avr.ref.Append("id"))
}

func (avr appmeshVirtualRouterAttributes) LastUpdatedDate() terra.StringValue {
	return terra.ReferenceString(avr.ref.Append("last_updated_date"))
}

func (avr appmeshVirtualRouterAttributes) MeshName() terra.StringValue {
	return terra.ReferenceString(avr.ref.Append("mesh_name"))
}

func (avr appmeshVirtualRouterAttributes) MeshOwner() terra.StringValue {
	return terra.ReferenceString(avr.ref.Append("mesh_owner"))
}

func (avr appmeshVirtualRouterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(avr.ref.Append("name"))
}

func (avr appmeshVirtualRouterAttributes) ResourceOwner() terra.StringValue {
	return terra.ReferenceString(avr.ref.Append("resource_owner"))
}

func (avr appmeshVirtualRouterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](avr.ref.Append("tags"))
}

func (avr appmeshVirtualRouterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](avr.ref.Append("tags_all"))
}

func (avr appmeshVirtualRouterAttributes) Spec() terra.ListValue[appmeshvirtualrouter.SpecAttributes] {
	return terra.ReferenceList[appmeshvirtualrouter.SpecAttributes](avr.ref.Append("spec"))
}

type appmeshVirtualRouterState struct {
	Arn             string                           `json:"arn"`
	CreatedDate     string                           `json:"created_date"`
	Id              string                           `json:"id"`
	LastUpdatedDate string                           `json:"last_updated_date"`
	MeshName        string                           `json:"mesh_name"`
	MeshOwner       string                           `json:"mesh_owner"`
	Name            string                           `json:"name"`
	ResourceOwner   string                           `json:"resource_owner"`
	Tags            map[string]string                `json:"tags"`
	TagsAll         map[string]string                `json:"tags_all"`
	Spec            []appmeshvirtualrouter.SpecState `json:"spec"`
}
