// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lambdacodesigningconfig "github.com/golingon/terraproviders/aws/4.60.0/lambdacodesigningconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLambdaCodeSigningConfig(name string, args LambdaCodeSigningConfigArgs) *LambdaCodeSigningConfig {
	return &LambdaCodeSigningConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LambdaCodeSigningConfig)(nil)

type LambdaCodeSigningConfig struct {
	Name  string
	Args  LambdaCodeSigningConfigArgs
	state *lambdaCodeSigningConfigState
}

func (lcsc *LambdaCodeSigningConfig) Type() string {
	return "aws_lambda_code_signing_config"
}

func (lcsc *LambdaCodeSigningConfig) LocalName() string {
	return lcsc.Name
}

func (lcsc *LambdaCodeSigningConfig) Configuration() interface{} {
	return lcsc.Args
}

func (lcsc *LambdaCodeSigningConfig) Attributes() lambdaCodeSigningConfigAttributes {
	return lambdaCodeSigningConfigAttributes{ref: terra.ReferenceResource(lcsc)}
}

func (lcsc *LambdaCodeSigningConfig) ImportState(av io.Reader) error {
	lcsc.state = &lambdaCodeSigningConfigState{}
	if err := json.NewDecoder(av).Decode(lcsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lcsc.Type(), lcsc.LocalName(), err)
	}
	return nil
}

func (lcsc *LambdaCodeSigningConfig) State() (*lambdaCodeSigningConfigState, bool) {
	return lcsc.state, lcsc.state != nil
}

func (lcsc *LambdaCodeSigningConfig) StateMust() *lambdaCodeSigningConfigState {
	if lcsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lcsc.Type(), lcsc.LocalName()))
	}
	return lcsc.state
}

func (lcsc *LambdaCodeSigningConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(lcsc)
}

type LambdaCodeSigningConfigArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// AllowedPublishers: required
	AllowedPublishers *lambdacodesigningconfig.AllowedPublishers `hcl:"allowed_publishers,block" validate:"required"`
	// Policies: optional
	Policies *lambdacodesigningconfig.Policies `hcl:"policies,block"`
	// DependsOn contains resources that LambdaCodeSigningConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lambdaCodeSigningConfigAttributes struct {
	ref terra.Reference
}

func (lcsc lambdaCodeSigningConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(lcsc.ref.Append("arn"))
}

func (lcsc lambdaCodeSigningConfigAttributes) ConfigId() terra.StringValue {
	return terra.ReferenceString(lcsc.ref.Append("config_id"))
}

func (lcsc lambdaCodeSigningConfigAttributes) Description() terra.StringValue {
	return terra.ReferenceString(lcsc.ref.Append("description"))
}

func (lcsc lambdaCodeSigningConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lcsc.ref.Append("id"))
}

func (lcsc lambdaCodeSigningConfigAttributes) LastModified() terra.StringValue {
	return terra.ReferenceString(lcsc.ref.Append("last_modified"))
}

func (lcsc lambdaCodeSigningConfigAttributes) AllowedPublishers() terra.ListValue[lambdacodesigningconfig.AllowedPublishersAttributes] {
	return terra.ReferenceList[lambdacodesigningconfig.AllowedPublishersAttributes](lcsc.ref.Append("allowed_publishers"))
}

func (lcsc lambdaCodeSigningConfigAttributes) Policies() terra.ListValue[lambdacodesigningconfig.PoliciesAttributes] {
	return terra.ReferenceList[lambdacodesigningconfig.PoliciesAttributes](lcsc.ref.Append("policies"))
}

type lambdaCodeSigningConfigState struct {
	Arn               string                                           `json:"arn"`
	ConfigId          string                                           `json:"config_id"`
	Description       string                                           `json:"description"`
	Id                string                                           `json:"id"`
	LastModified      string                                           `json:"last_modified"`
	AllowedPublishers []lambdacodesigningconfig.AllowedPublishersState `json:"allowed_publishers"`
	Policies          []lambdacodesigningconfig.PoliciesState          `json:"policies"`
}
