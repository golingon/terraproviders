// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataglobalacceleratoraccelerator "github.com/golingon/terraproviders/aws/4.60.0/dataglobalacceleratoraccelerator"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataGlobalacceleratorAccelerator(name string, args DataGlobalacceleratorAcceleratorArgs) *DataGlobalacceleratorAccelerator {
	return &DataGlobalacceleratorAccelerator{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataGlobalacceleratorAccelerator)(nil)

type DataGlobalacceleratorAccelerator struct {
	Name string
	Args DataGlobalacceleratorAcceleratorArgs
}

func (ga *DataGlobalacceleratorAccelerator) DataSource() string {
	return "aws_globalaccelerator_accelerator"
}

func (ga *DataGlobalacceleratorAccelerator) LocalName() string {
	return ga.Name
}

func (ga *DataGlobalacceleratorAccelerator) Configuration() interface{} {
	return ga.Args
}

func (ga *DataGlobalacceleratorAccelerator) Attributes() dataGlobalacceleratorAcceleratorAttributes {
	return dataGlobalacceleratorAcceleratorAttributes{ref: terra.ReferenceDataResource(ga)}
}

type DataGlobalacceleratorAcceleratorArgs struct {
	// Arn: string, optional
	Arn terra.StringValue `hcl:"arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Attributes: min=0
	Attributes []dataglobalacceleratoraccelerator.Attributes `hcl:"attributes,block" validate:"min=0"`
	// IpSets: min=0
	IpSets []dataglobalacceleratoraccelerator.IpSets `hcl:"ip_sets,block" validate:"min=0"`
}
type dataGlobalacceleratorAcceleratorAttributes struct {
	ref terra.Reference
}

func (ga dataGlobalacceleratorAcceleratorAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("arn"))
}

func (ga dataGlobalacceleratorAcceleratorAttributes) DnsName() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("dns_name"))
}

func (ga dataGlobalacceleratorAcceleratorAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(ga.ref.Append("enabled"))
}

func (ga dataGlobalacceleratorAcceleratorAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("hosted_zone_id"))
}

func (ga dataGlobalacceleratorAcceleratorAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("id"))
}

func (ga dataGlobalacceleratorAcceleratorAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("ip_address_type"))
}

func (ga dataGlobalacceleratorAcceleratorAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ga.ref.Append("name"))
}

func (ga dataGlobalacceleratorAcceleratorAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ga.ref.Append("tags"))
}

func (ga dataGlobalacceleratorAcceleratorAttributes) Attributes() terra.ListValue[dataglobalacceleratoraccelerator.AttributesAttributes] {
	return terra.ReferenceList[dataglobalacceleratoraccelerator.AttributesAttributes](ga.ref.Append("attributes"))
}

func (ga dataGlobalacceleratorAcceleratorAttributes) IpSets() terra.ListValue[dataglobalacceleratoraccelerator.IpSetsAttributes] {
	return terra.ReferenceList[dataglobalacceleratoraccelerator.IpSetsAttributes](ga.ref.Append("ip_sets"))
}
