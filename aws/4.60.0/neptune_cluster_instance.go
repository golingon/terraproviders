// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	neptuneclusterinstance "github.com/golingon/terraproviders/aws/4.60.0/neptuneclusterinstance"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNeptuneClusterInstance(name string, args NeptuneClusterInstanceArgs) *NeptuneClusterInstance {
	return &NeptuneClusterInstance{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NeptuneClusterInstance)(nil)

type NeptuneClusterInstance struct {
	Name  string
	Args  NeptuneClusterInstanceArgs
	state *neptuneClusterInstanceState
}

func (nci *NeptuneClusterInstance) Type() string {
	return "aws_neptune_cluster_instance"
}

func (nci *NeptuneClusterInstance) LocalName() string {
	return nci.Name
}

func (nci *NeptuneClusterInstance) Configuration() interface{} {
	return nci.Args
}

func (nci *NeptuneClusterInstance) Attributes() neptuneClusterInstanceAttributes {
	return neptuneClusterInstanceAttributes{ref: terra.ReferenceResource(nci)}
}

func (nci *NeptuneClusterInstance) ImportState(av io.Reader) error {
	nci.state = &neptuneClusterInstanceState{}
	if err := json.NewDecoder(av).Decode(nci.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nci.Type(), nci.LocalName(), err)
	}
	return nil
}

func (nci *NeptuneClusterInstance) State() (*neptuneClusterInstanceState, bool) {
	return nci.state, nci.state != nil
}

func (nci *NeptuneClusterInstance) StateMust() *neptuneClusterInstanceState {
	if nci.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nci.Type(), nci.LocalName()))
	}
	return nci.state
}

func (nci *NeptuneClusterInstance) DependOn() terra.Reference {
	return terra.ReferenceResource(nci)
}

type NeptuneClusterInstanceArgs struct {
	// ApplyImmediately: bool, optional
	ApplyImmediately terra.BoolValue `hcl:"apply_immediately,attr"`
	// AutoMinorVersionUpgrade: bool, optional
	AutoMinorVersionUpgrade terra.BoolValue `hcl:"auto_minor_version_upgrade,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// Engine: string, optional
	Engine terra.StringValue `hcl:"engine,attr"`
	// EngineVersion: string, optional
	EngineVersion terra.StringValue `hcl:"engine_version,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Identifier: string, optional
	Identifier terra.StringValue `hcl:"identifier,attr"`
	// IdentifierPrefix: string, optional
	IdentifierPrefix terra.StringValue `hcl:"identifier_prefix,attr"`
	// InstanceClass: string, required
	InstanceClass terra.StringValue `hcl:"instance_class,attr" validate:"required"`
	// NeptuneParameterGroupName: string, optional
	NeptuneParameterGroupName terra.StringValue `hcl:"neptune_parameter_group_name,attr"`
	// NeptuneSubnetGroupName: string, optional
	NeptuneSubnetGroupName terra.StringValue `hcl:"neptune_subnet_group_name,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// PreferredBackupWindow: string, optional
	PreferredBackupWindow terra.StringValue `hcl:"preferred_backup_window,attr"`
	// PreferredMaintenanceWindow: string, optional
	PreferredMaintenanceWindow terra.StringValue `hcl:"preferred_maintenance_window,attr"`
	// PromotionTier: number, optional
	PromotionTier terra.NumberValue `hcl:"promotion_tier,attr"`
	// PubliclyAccessible: bool, optional
	PubliclyAccessible terra.BoolValue `hcl:"publicly_accessible,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *neptuneclusterinstance.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NeptuneClusterInstance depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type neptuneClusterInstanceAttributes struct {
	ref terra.Reference
}

func (nci neptuneClusterInstanceAttributes) Address() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("address"))
}

func (nci neptuneClusterInstanceAttributes) ApplyImmediately() terra.BoolValue {
	return terra.ReferenceBool(nci.ref.Append("apply_immediately"))
}

func (nci neptuneClusterInstanceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("arn"))
}

func (nci neptuneClusterInstanceAttributes) AutoMinorVersionUpgrade() terra.BoolValue {
	return terra.ReferenceBool(nci.ref.Append("auto_minor_version_upgrade"))
}

func (nci neptuneClusterInstanceAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("availability_zone"))
}

func (nci neptuneClusterInstanceAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("cluster_identifier"))
}

func (nci neptuneClusterInstanceAttributes) DbiResourceId() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("dbi_resource_id"))
}

func (nci neptuneClusterInstanceAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("endpoint"))
}

func (nci neptuneClusterInstanceAttributes) Engine() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("engine"))
}

func (nci neptuneClusterInstanceAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("engine_version"))
}

func (nci neptuneClusterInstanceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("id"))
}

func (nci neptuneClusterInstanceAttributes) Identifier() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("identifier"))
}

func (nci neptuneClusterInstanceAttributes) IdentifierPrefix() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("identifier_prefix"))
}

func (nci neptuneClusterInstanceAttributes) InstanceClass() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("instance_class"))
}

func (nci neptuneClusterInstanceAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("kms_key_arn"))
}

func (nci neptuneClusterInstanceAttributes) NeptuneParameterGroupName() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("neptune_parameter_group_name"))
}

func (nci neptuneClusterInstanceAttributes) NeptuneSubnetGroupName() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("neptune_subnet_group_name"))
}

func (nci neptuneClusterInstanceAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(nci.ref.Append("port"))
}

func (nci neptuneClusterInstanceAttributes) PreferredBackupWindow() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("preferred_backup_window"))
}

func (nci neptuneClusterInstanceAttributes) PreferredMaintenanceWindow() terra.StringValue {
	return terra.ReferenceString(nci.ref.Append("preferred_maintenance_window"))
}

func (nci neptuneClusterInstanceAttributes) PromotionTier() terra.NumberValue {
	return terra.ReferenceNumber(nci.ref.Append("promotion_tier"))
}

func (nci neptuneClusterInstanceAttributes) PubliclyAccessible() terra.BoolValue {
	return terra.ReferenceBool(nci.ref.Append("publicly_accessible"))
}

func (nci neptuneClusterInstanceAttributes) StorageEncrypted() terra.BoolValue {
	return terra.ReferenceBool(nci.ref.Append("storage_encrypted"))
}

func (nci neptuneClusterInstanceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nci.ref.Append("tags"))
}

func (nci neptuneClusterInstanceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nci.ref.Append("tags_all"))
}

func (nci neptuneClusterInstanceAttributes) Writer() terra.BoolValue {
	return terra.ReferenceBool(nci.ref.Append("writer"))
}

func (nci neptuneClusterInstanceAttributes) Timeouts() neptuneclusterinstance.TimeoutsAttributes {
	return terra.ReferenceSingle[neptuneclusterinstance.TimeoutsAttributes](nci.ref.Append("timeouts"))
}

type neptuneClusterInstanceState struct {
	Address                    string                                `json:"address"`
	ApplyImmediately           bool                                  `json:"apply_immediately"`
	Arn                        string                                `json:"arn"`
	AutoMinorVersionUpgrade    bool                                  `json:"auto_minor_version_upgrade"`
	AvailabilityZone           string                                `json:"availability_zone"`
	ClusterIdentifier          string                                `json:"cluster_identifier"`
	DbiResourceId              string                                `json:"dbi_resource_id"`
	Endpoint                   string                                `json:"endpoint"`
	Engine                     string                                `json:"engine"`
	EngineVersion              string                                `json:"engine_version"`
	Id                         string                                `json:"id"`
	Identifier                 string                                `json:"identifier"`
	IdentifierPrefix           string                                `json:"identifier_prefix"`
	InstanceClass              string                                `json:"instance_class"`
	KmsKeyArn                  string                                `json:"kms_key_arn"`
	NeptuneParameterGroupName  string                                `json:"neptune_parameter_group_name"`
	NeptuneSubnetGroupName     string                                `json:"neptune_subnet_group_name"`
	Port                       float64                               `json:"port"`
	PreferredBackupWindow      string                                `json:"preferred_backup_window"`
	PreferredMaintenanceWindow string                                `json:"preferred_maintenance_window"`
	PromotionTier              float64                               `json:"promotion_tier"`
	PubliclyAccessible         bool                                  `json:"publicly_accessible"`
	StorageEncrypted           bool                                  `json:"storage_encrypted"`
	Tags                       map[string]string                     `json:"tags"`
	TagsAll                    map[string]string                     `json:"tags_all"`
	Writer                     bool                                  `json:"writer"`
	Timeouts                   *neptuneclusterinstance.TimeoutsState `json:"timeouts"`
}
