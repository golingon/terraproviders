// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package amplifyapp

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ProductionBranch struct{}

type AutoBranchCreationConfig struct {
	// BasicAuthCredentials: string, optional
	BasicAuthCredentials terra.StringValue `hcl:"basic_auth_credentials,attr"`
	// BuildSpec: string, optional
	BuildSpec terra.StringValue `hcl:"build_spec,attr"`
	// EnableAutoBuild: bool, optional
	EnableAutoBuild terra.BoolValue `hcl:"enable_auto_build,attr"`
	// EnableBasicAuth: bool, optional
	EnableBasicAuth terra.BoolValue `hcl:"enable_basic_auth,attr"`
	// EnablePerformanceMode: bool, optional
	EnablePerformanceMode terra.BoolValue `hcl:"enable_performance_mode,attr"`
	// EnablePullRequestPreview: bool, optional
	EnablePullRequestPreview terra.BoolValue `hcl:"enable_pull_request_preview,attr"`
	// EnvironmentVariables: map of string, optional
	EnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"environment_variables,attr"`
	// Framework: string, optional
	Framework terra.StringValue `hcl:"framework,attr"`
	// PullRequestEnvironmentName: string, optional
	PullRequestEnvironmentName terra.StringValue `hcl:"pull_request_environment_name,attr"`
	// Stage: string, optional
	Stage terra.StringValue `hcl:"stage,attr"`
}

type CustomRule struct {
	// Condition: string, optional
	Condition terra.StringValue `hcl:"condition,attr"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Target: string, required
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
}

type ProductionBranchAttributes struct {
	ref terra.Reference
}

func (pb ProductionBranchAttributes) InternalRef() terra.Reference {
	return pb.ref
}

func (pb ProductionBranchAttributes) InternalWithRef(ref terra.Reference) ProductionBranchAttributes {
	return ProductionBranchAttributes{ref: ref}
}

func (pb ProductionBranchAttributes) InternalTokens() hclwrite.Tokens {
	return pb.ref.InternalTokens()
}

func (pb ProductionBranchAttributes) BranchName() terra.StringValue {
	return terra.ReferenceString(pb.ref.Append("branch_name"))
}

func (pb ProductionBranchAttributes) LastDeployTime() terra.StringValue {
	return terra.ReferenceString(pb.ref.Append("last_deploy_time"))
}

func (pb ProductionBranchAttributes) Status() terra.StringValue {
	return terra.ReferenceString(pb.ref.Append("status"))
}

func (pb ProductionBranchAttributes) ThumbnailUrl() terra.StringValue {
	return terra.ReferenceString(pb.ref.Append("thumbnail_url"))
}

type AutoBranchCreationConfigAttributes struct {
	ref terra.Reference
}

func (abcc AutoBranchCreationConfigAttributes) InternalRef() terra.Reference {
	return abcc.ref
}

func (abcc AutoBranchCreationConfigAttributes) InternalWithRef(ref terra.Reference) AutoBranchCreationConfigAttributes {
	return AutoBranchCreationConfigAttributes{ref: ref}
}

func (abcc AutoBranchCreationConfigAttributes) InternalTokens() hclwrite.Tokens {
	return abcc.ref.InternalTokens()
}

func (abcc AutoBranchCreationConfigAttributes) BasicAuthCredentials() terra.StringValue {
	return terra.ReferenceString(abcc.ref.Append("basic_auth_credentials"))
}

func (abcc AutoBranchCreationConfigAttributes) BuildSpec() terra.StringValue {
	return terra.ReferenceString(abcc.ref.Append("build_spec"))
}

func (abcc AutoBranchCreationConfigAttributes) EnableAutoBuild() terra.BoolValue {
	return terra.ReferenceBool(abcc.ref.Append("enable_auto_build"))
}

func (abcc AutoBranchCreationConfigAttributes) EnableBasicAuth() terra.BoolValue {
	return terra.ReferenceBool(abcc.ref.Append("enable_basic_auth"))
}

func (abcc AutoBranchCreationConfigAttributes) EnablePerformanceMode() terra.BoolValue {
	return terra.ReferenceBool(abcc.ref.Append("enable_performance_mode"))
}

func (abcc AutoBranchCreationConfigAttributes) EnablePullRequestPreview() terra.BoolValue {
	return terra.ReferenceBool(abcc.ref.Append("enable_pull_request_preview"))
}

func (abcc AutoBranchCreationConfigAttributes) EnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](abcc.ref.Append("environment_variables"))
}

func (abcc AutoBranchCreationConfigAttributes) Framework() terra.StringValue {
	return terra.ReferenceString(abcc.ref.Append("framework"))
}

func (abcc AutoBranchCreationConfigAttributes) PullRequestEnvironmentName() terra.StringValue {
	return terra.ReferenceString(abcc.ref.Append("pull_request_environment_name"))
}

func (abcc AutoBranchCreationConfigAttributes) Stage() terra.StringValue {
	return terra.ReferenceString(abcc.ref.Append("stage"))
}

type CustomRuleAttributes struct {
	ref terra.Reference
}

func (cr CustomRuleAttributes) InternalRef() terra.Reference {
	return cr.ref
}

func (cr CustomRuleAttributes) InternalWithRef(ref terra.Reference) CustomRuleAttributes {
	return CustomRuleAttributes{ref: ref}
}

func (cr CustomRuleAttributes) InternalTokens() hclwrite.Tokens {
	return cr.ref.InternalTokens()
}

func (cr CustomRuleAttributes) Condition() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("condition"))
}

func (cr CustomRuleAttributes) Source() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("source"))
}

func (cr CustomRuleAttributes) Status() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("status"))
}

func (cr CustomRuleAttributes) Target() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("target"))
}

type ProductionBranchState struct {
	BranchName     string `json:"branch_name"`
	LastDeployTime string `json:"last_deploy_time"`
	Status         string `json:"status"`
	ThumbnailUrl   string `json:"thumbnail_url"`
}

type AutoBranchCreationConfigState struct {
	BasicAuthCredentials       string            `json:"basic_auth_credentials"`
	BuildSpec                  string            `json:"build_spec"`
	EnableAutoBuild            bool              `json:"enable_auto_build"`
	EnableBasicAuth            bool              `json:"enable_basic_auth"`
	EnablePerformanceMode      bool              `json:"enable_performance_mode"`
	EnablePullRequestPreview   bool              `json:"enable_pull_request_preview"`
	EnvironmentVariables       map[string]string `json:"environment_variables"`
	Framework                  string            `json:"framework"`
	PullRequestEnvironmentName string            `json:"pull_request_environment_name"`
	Stage                      string            `json:"stage"`
}

type CustomRuleState struct {
	Condition string `json:"condition"`
	Source    string `json:"source"`
	Status    string `json:"status"`
	Target    string `json:"target"`
}
