// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataecscluster "github.com/golingon/terraproviders/aws/4.60.0/dataecscluster"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataEcsCluster(name string, args DataEcsClusterArgs) *DataEcsCluster {
	return &DataEcsCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataEcsCluster)(nil)

type DataEcsCluster struct {
	Name string
	Args DataEcsClusterArgs
}

func (ec *DataEcsCluster) DataSource() string {
	return "aws_ecs_cluster"
}

func (ec *DataEcsCluster) LocalName() string {
	return ec.Name
}

func (ec *DataEcsCluster) Configuration() interface{} {
	return ec.Args
}

func (ec *DataEcsCluster) Attributes() dataEcsClusterAttributes {
	return dataEcsClusterAttributes{ref: terra.ReferenceDataResource(ec)}
}

type DataEcsClusterArgs struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ServiceConnectDefaults: min=0
	ServiceConnectDefaults []dataecscluster.ServiceConnectDefaults `hcl:"service_connect_defaults,block" validate:"min=0"`
	// Setting: min=0
	Setting []dataecscluster.Setting `hcl:"setting,block" validate:"min=0"`
}
type dataEcsClusterAttributes struct {
	ref terra.Reference
}

func (ec dataEcsClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("arn"))
}

func (ec dataEcsClusterAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("cluster_name"))
}

func (ec dataEcsClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("id"))
}

func (ec dataEcsClusterAttributes) PendingTasksCount() terra.NumberValue {
	return terra.ReferenceNumber(ec.ref.Append("pending_tasks_count"))
}

func (ec dataEcsClusterAttributes) RegisteredContainerInstancesCount() terra.NumberValue {
	return terra.ReferenceNumber(ec.ref.Append("registered_container_instances_count"))
}

func (ec dataEcsClusterAttributes) RunningTasksCount() terra.NumberValue {
	return terra.ReferenceNumber(ec.ref.Append("running_tasks_count"))
}

func (ec dataEcsClusterAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ec.ref.Append("status"))
}

func (ec dataEcsClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ec.ref.Append("tags"))
}

func (ec dataEcsClusterAttributes) ServiceConnectDefaults() terra.ListValue[dataecscluster.ServiceConnectDefaultsAttributes] {
	return terra.ReferenceList[dataecscluster.ServiceConnectDefaultsAttributes](ec.ref.Append("service_connect_defaults"))
}

func (ec dataEcsClusterAttributes) Setting() terra.SetValue[dataecscluster.SettingAttributes] {
	return terra.ReferenceSet[dataecscluster.SettingAttributes](ec.ref.Append("setting"))
}
