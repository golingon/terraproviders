// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDxHostedConnection(name string, args DxHostedConnectionArgs) *DxHostedConnection {
	return &DxHostedConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DxHostedConnection)(nil)

type DxHostedConnection struct {
	Name  string
	Args  DxHostedConnectionArgs
	state *dxHostedConnectionState
}

func (dhc *DxHostedConnection) Type() string {
	return "aws_dx_hosted_connection"
}

func (dhc *DxHostedConnection) LocalName() string {
	return dhc.Name
}

func (dhc *DxHostedConnection) Configuration() interface{} {
	return dhc.Args
}

func (dhc *DxHostedConnection) Attributes() dxHostedConnectionAttributes {
	return dxHostedConnectionAttributes{ref: terra.ReferenceResource(dhc)}
}

func (dhc *DxHostedConnection) ImportState(av io.Reader) error {
	dhc.state = &dxHostedConnectionState{}
	if err := json.NewDecoder(av).Decode(dhc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dhc.Type(), dhc.LocalName(), err)
	}
	return nil
}

func (dhc *DxHostedConnection) State() (*dxHostedConnectionState, bool) {
	return dhc.state, dhc.state != nil
}

func (dhc *DxHostedConnection) StateMust() *dxHostedConnectionState {
	if dhc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dhc.Type(), dhc.LocalName()))
	}
	return dhc.state
}

func (dhc *DxHostedConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(dhc)
}

type DxHostedConnectionArgs struct {
	// Bandwidth: string, required
	Bandwidth terra.StringValue `hcl:"bandwidth,attr" validate:"required"`
	// ConnectionId: string, required
	ConnectionId terra.StringValue `hcl:"connection_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OwnerAccountId: string, required
	OwnerAccountId terra.StringValue `hcl:"owner_account_id,attr" validate:"required"`
	// Vlan: number, required
	Vlan terra.NumberValue `hcl:"vlan,attr" validate:"required"`
	// DependsOn contains resources that DxHostedConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dxHostedConnectionAttributes struct {
	ref terra.Reference
}

func (dhc dxHostedConnectionAttributes) AwsDevice() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("aws_device"))
}

func (dhc dxHostedConnectionAttributes) Bandwidth() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("bandwidth"))
}

func (dhc dxHostedConnectionAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("connection_id"))
}

func (dhc dxHostedConnectionAttributes) HasLogicalRedundancy() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("has_logical_redundancy"))
}

func (dhc dxHostedConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("id"))
}

func (dhc dxHostedConnectionAttributes) JumboFrameCapable() terra.BoolValue {
	return terra.ReferenceBool(dhc.ref.Append("jumbo_frame_capable"))
}

func (dhc dxHostedConnectionAttributes) LagId() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("lag_id"))
}

func (dhc dxHostedConnectionAttributes) LoaIssueTime() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("loa_issue_time"))
}

func (dhc dxHostedConnectionAttributes) Location() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("location"))
}

func (dhc dxHostedConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("name"))
}

func (dhc dxHostedConnectionAttributes) OwnerAccountId() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("owner_account_id"))
}

func (dhc dxHostedConnectionAttributes) PartnerName() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("partner_name"))
}

func (dhc dxHostedConnectionAttributes) ProviderName() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("provider_name"))
}

func (dhc dxHostedConnectionAttributes) Region() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("region"))
}

func (dhc dxHostedConnectionAttributes) State() terra.StringValue {
	return terra.ReferenceString(dhc.ref.Append("state"))
}

func (dhc dxHostedConnectionAttributes) Vlan() terra.NumberValue {
	return terra.ReferenceNumber(dhc.ref.Append("vlan"))
}

type dxHostedConnectionState struct {
	AwsDevice            string  `json:"aws_device"`
	Bandwidth            string  `json:"bandwidth"`
	ConnectionId         string  `json:"connection_id"`
	HasLogicalRedundancy string  `json:"has_logical_redundancy"`
	Id                   string  `json:"id"`
	JumboFrameCapable    bool    `json:"jumbo_frame_capable"`
	LagId                string  `json:"lag_id"`
	LoaIssueTime         string  `json:"loa_issue_time"`
	Location             string  `json:"location"`
	Name                 string  `json:"name"`
	OwnerAccountId       string  `json:"owner_account_id"`
	PartnerName          string  `json:"partner_name"`
	ProviderName         string  `json:"provider_name"`
	Region               string  `json:"region"`
	State                string  `json:"state"`
	Vlan                 float64 `json:"vlan"`
}
