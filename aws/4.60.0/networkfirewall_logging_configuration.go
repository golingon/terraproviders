// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkfirewallloggingconfiguration "github.com/golingon/terraproviders/aws/4.60.0/networkfirewallloggingconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkfirewallLoggingConfiguration(name string, args NetworkfirewallLoggingConfigurationArgs) *NetworkfirewallLoggingConfiguration {
	return &NetworkfirewallLoggingConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkfirewallLoggingConfiguration)(nil)

type NetworkfirewallLoggingConfiguration struct {
	Name  string
	Args  NetworkfirewallLoggingConfigurationArgs
	state *networkfirewallLoggingConfigurationState
}

func (nlc *NetworkfirewallLoggingConfiguration) Type() string {
	return "aws_networkfirewall_logging_configuration"
}

func (nlc *NetworkfirewallLoggingConfiguration) LocalName() string {
	return nlc.Name
}

func (nlc *NetworkfirewallLoggingConfiguration) Configuration() interface{} {
	return nlc.Args
}

func (nlc *NetworkfirewallLoggingConfiguration) Attributes() networkfirewallLoggingConfigurationAttributes {
	return networkfirewallLoggingConfigurationAttributes{ref: terra.ReferenceResource(nlc)}
}

func (nlc *NetworkfirewallLoggingConfiguration) ImportState(av io.Reader) error {
	nlc.state = &networkfirewallLoggingConfigurationState{}
	if err := json.NewDecoder(av).Decode(nlc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nlc.Type(), nlc.LocalName(), err)
	}
	return nil
}

func (nlc *NetworkfirewallLoggingConfiguration) State() (*networkfirewallLoggingConfigurationState, bool) {
	return nlc.state, nlc.state != nil
}

func (nlc *NetworkfirewallLoggingConfiguration) StateMust() *networkfirewallLoggingConfigurationState {
	if nlc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nlc.Type(), nlc.LocalName()))
	}
	return nlc.state
}

func (nlc *NetworkfirewallLoggingConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(nlc)
}

type NetworkfirewallLoggingConfigurationArgs struct {
	// FirewallArn: string, required
	FirewallArn terra.StringValue `hcl:"firewall_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LoggingConfiguration: required
	LoggingConfiguration *networkfirewallloggingconfiguration.LoggingConfiguration `hcl:"logging_configuration,block" validate:"required"`
	// DependsOn contains resources that NetworkfirewallLoggingConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkfirewallLoggingConfigurationAttributes struct {
	ref terra.Reference
}

func (nlc networkfirewallLoggingConfigurationAttributes) FirewallArn() terra.StringValue {
	return terra.ReferenceString(nlc.ref.Append("firewall_arn"))
}

func (nlc networkfirewallLoggingConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nlc.ref.Append("id"))
}

func (nlc networkfirewallLoggingConfigurationAttributes) LoggingConfiguration() terra.ListValue[networkfirewallloggingconfiguration.LoggingConfigurationAttributes] {
	return terra.ReferenceList[networkfirewallloggingconfiguration.LoggingConfigurationAttributes](nlc.ref.Append("logging_configuration"))
}

type networkfirewallLoggingConfigurationState struct {
	FirewallArn          string                                                          `json:"firewall_arn"`
	Id                   string                                                          `json:"id"`
	LoggingConfiguration []networkfirewallloggingconfiguration.LoggingConfigurationState `json:"logging_configuration"`
}
