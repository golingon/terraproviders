// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCognitoUserGroup(name string, args CognitoUserGroupArgs) *CognitoUserGroup {
	return &CognitoUserGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CognitoUserGroup)(nil)

type CognitoUserGroup struct {
	Name  string
	Args  CognitoUserGroupArgs
	state *cognitoUserGroupState
}

func (cug *CognitoUserGroup) Type() string {
	return "aws_cognito_user_group"
}

func (cug *CognitoUserGroup) LocalName() string {
	return cug.Name
}

func (cug *CognitoUserGroup) Configuration() interface{} {
	return cug.Args
}

func (cug *CognitoUserGroup) Attributes() cognitoUserGroupAttributes {
	return cognitoUserGroupAttributes{ref: terra.ReferenceResource(cug)}
}

func (cug *CognitoUserGroup) ImportState(av io.Reader) error {
	cug.state = &cognitoUserGroupState{}
	if err := json.NewDecoder(av).Decode(cug.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cug.Type(), cug.LocalName(), err)
	}
	return nil
}

func (cug *CognitoUserGroup) State() (*cognitoUserGroupState, bool) {
	return cug.state, cug.state != nil
}

func (cug *CognitoUserGroup) StateMust() *cognitoUserGroupState {
	if cug.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cug.Type(), cug.LocalName()))
	}
	return cug.state
}

func (cug *CognitoUserGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(cug)
}

type CognitoUserGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Precedence: number, optional
	Precedence terra.NumberValue `hcl:"precedence,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// UserPoolId: string, required
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
	// DependsOn contains resources that CognitoUserGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cognitoUserGroupAttributes struct {
	ref terra.Reference
}

func (cug cognitoUserGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cug.ref.Append("description"))
}

func (cug cognitoUserGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cug.ref.Append("id"))
}

func (cug cognitoUserGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cug.ref.Append("name"))
}

func (cug cognitoUserGroupAttributes) Precedence() terra.NumberValue {
	return terra.ReferenceNumber(cug.ref.Append("precedence"))
}

func (cug cognitoUserGroupAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(cug.ref.Append("role_arn"))
}

func (cug cognitoUserGroupAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceString(cug.ref.Append("user_pool_id"))
}

type cognitoUserGroupState struct {
	Description string  `json:"description"`
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	Precedence  float64 `json:"precedence"`
	RoleArn     string  `json:"role_arn"`
	UserPoolId  string  `json:"user_pool_id"`
}
