// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	redshiftsecuritygroup "github.com/golingon/terraproviders/aws/4.60.0/redshiftsecuritygroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftSecurityGroup(name string, args RedshiftSecurityGroupArgs) *RedshiftSecurityGroup {
	return &RedshiftSecurityGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftSecurityGroup)(nil)

type RedshiftSecurityGroup struct {
	Name  string
	Args  RedshiftSecurityGroupArgs
	state *redshiftSecurityGroupState
}

func (rsg *RedshiftSecurityGroup) Type() string {
	return "aws_redshift_security_group"
}

func (rsg *RedshiftSecurityGroup) LocalName() string {
	return rsg.Name
}

func (rsg *RedshiftSecurityGroup) Configuration() interface{} {
	return rsg.Args
}

func (rsg *RedshiftSecurityGroup) Attributes() redshiftSecurityGroupAttributes {
	return redshiftSecurityGroupAttributes{ref: terra.ReferenceResource(rsg)}
}

func (rsg *RedshiftSecurityGroup) ImportState(av io.Reader) error {
	rsg.state = &redshiftSecurityGroupState{}
	if err := json.NewDecoder(av).Decode(rsg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rsg.Type(), rsg.LocalName(), err)
	}
	return nil
}

func (rsg *RedshiftSecurityGroup) State() (*redshiftSecurityGroupState, bool) {
	return rsg.state, rsg.state != nil
}

func (rsg *RedshiftSecurityGroup) StateMust() *redshiftSecurityGroupState {
	if rsg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rsg.Type(), rsg.LocalName()))
	}
	return rsg.state
}

func (rsg *RedshiftSecurityGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(rsg)
}

type RedshiftSecurityGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Ingress: min=1
	Ingress []redshiftsecuritygroup.Ingress `hcl:"ingress,block" validate:"min=1"`
	// DependsOn contains resources that RedshiftSecurityGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftSecurityGroupAttributes struct {
	ref terra.Reference
}

func (rsg redshiftSecurityGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(rsg.ref.Append("description"))
}

func (rsg redshiftSecurityGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rsg.ref.Append("id"))
}

func (rsg redshiftSecurityGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rsg.ref.Append("name"))
}

func (rsg redshiftSecurityGroupAttributes) Ingress() terra.SetValue[redshiftsecuritygroup.IngressAttributes] {
	return terra.ReferenceSet[redshiftsecuritygroup.IngressAttributes](rsg.ref.Append("ingress"))
}

type redshiftSecurityGroupState struct {
	Description string                               `json:"description"`
	Id          string                               `json:"id"`
	Name        string                               `json:"name"`
	Ingress     []redshiftsecuritygroup.IngressState `json:"ingress"`
}
