// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	imagebuilderdistributionconfiguration "github.com/golingon/terraproviders/aws/4.60.0/imagebuilderdistributionconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewImagebuilderDistributionConfiguration(name string, args ImagebuilderDistributionConfigurationArgs) *ImagebuilderDistributionConfiguration {
	return &ImagebuilderDistributionConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ImagebuilderDistributionConfiguration)(nil)

type ImagebuilderDistributionConfiguration struct {
	Name  string
	Args  ImagebuilderDistributionConfigurationArgs
	state *imagebuilderDistributionConfigurationState
}

func (idc *ImagebuilderDistributionConfiguration) Type() string {
	return "aws_imagebuilder_distribution_configuration"
}

func (idc *ImagebuilderDistributionConfiguration) LocalName() string {
	return idc.Name
}

func (idc *ImagebuilderDistributionConfiguration) Configuration() interface{} {
	return idc.Args
}

func (idc *ImagebuilderDistributionConfiguration) Attributes() imagebuilderDistributionConfigurationAttributes {
	return imagebuilderDistributionConfigurationAttributes{ref: terra.ReferenceResource(idc)}
}

func (idc *ImagebuilderDistributionConfiguration) ImportState(av io.Reader) error {
	idc.state = &imagebuilderDistributionConfigurationState{}
	if err := json.NewDecoder(av).Decode(idc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", idc.Type(), idc.LocalName(), err)
	}
	return nil
}

func (idc *ImagebuilderDistributionConfiguration) State() (*imagebuilderDistributionConfigurationState, bool) {
	return idc.state, idc.state != nil
}

func (idc *ImagebuilderDistributionConfiguration) StateMust() *imagebuilderDistributionConfigurationState {
	if idc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", idc.Type(), idc.LocalName()))
	}
	return idc.state
}

func (idc *ImagebuilderDistributionConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(idc)
}

type ImagebuilderDistributionConfigurationArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Distribution: min=1
	Distribution []imagebuilderdistributionconfiguration.Distribution `hcl:"distribution,block" validate:"min=1"`
	// DependsOn contains resources that ImagebuilderDistributionConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type imagebuilderDistributionConfigurationAttributes struct {
	ref terra.Reference
}

func (idc imagebuilderDistributionConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(idc.ref.Append("arn"))
}

func (idc imagebuilderDistributionConfigurationAttributes) DateCreated() terra.StringValue {
	return terra.ReferenceString(idc.ref.Append("date_created"))
}

func (idc imagebuilderDistributionConfigurationAttributes) DateUpdated() terra.StringValue {
	return terra.ReferenceString(idc.ref.Append("date_updated"))
}

func (idc imagebuilderDistributionConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(idc.ref.Append("description"))
}

func (idc imagebuilderDistributionConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(idc.ref.Append("id"))
}

func (idc imagebuilderDistributionConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(idc.ref.Append("name"))
}

func (idc imagebuilderDistributionConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](idc.ref.Append("tags"))
}

func (idc imagebuilderDistributionConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](idc.ref.Append("tags_all"))
}

func (idc imagebuilderDistributionConfigurationAttributes) Distribution() terra.SetValue[imagebuilderdistributionconfiguration.DistributionAttributes] {
	return terra.ReferenceSet[imagebuilderdistributionconfiguration.DistributionAttributes](idc.ref.Append("distribution"))
}

type imagebuilderDistributionConfigurationState struct {
	Arn          string                                                    `json:"arn"`
	DateCreated  string                                                    `json:"date_created"`
	DateUpdated  string                                                    `json:"date_updated"`
	Description  string                                                    `json:"description"`
	Id           string                                                    `json:"id"`
	Name         string                                                    `json:"name"`
	Tags         map[string]string                                         `json:"tags"`
	TagsAll      map[string]string                                         `json:"tags_all"`
	Distribution []imagebuilderdistributionconfiguration.DistributionState `json:"distribution"`
}
