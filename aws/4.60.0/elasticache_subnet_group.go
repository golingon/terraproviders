// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewElasticacheSubnetGroup(name string, args ElasticacheSubnetGroupArgs) *ElasticacheSubnetGroup {
	return &ElasticacheSubnetGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElasticacheSubnetGroup)(nil)

type ElasticacheSubnetGroup struct {
	Name  string
	Args  ElasticacheSubnetGroupArgs
	state *elasticacheSubnetGroupState
}

func (esg *ElasticacheSubnetGroup) Type() string {
	return "aws_elasticache_subnet_group"
}

func (esg *ElasticacheSubnetGroup) LocalName() string {
	return esg.Name
}

func (esg *ElasticacheSubnetGroup) Configuration() interface{} {
	return esg.Args
}

func (esg *ElasticacheSubnetGroup) Attributes() elasticacheSubnetGroupAttributes {
	return elasticacheSubnetGroupAttributes{ref: terra.ReferenceResource(esg)}
}

func (esg *ElasticacheSubnetGroup) ImportState(av io.Reader) error {
	esg.state = &elasticacheSubnetGroupState{}
	if err := json.NewDecoder(av).Decode(esg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", esg.Type(), esg.LocalName(), err)
	}
	return nil
}

func (esg *ElasticacheSubnetGroup) State() (*elasticacheSubnetGroupState, bool) {
	return esg.state, esg.state != nil
}

func (esg *ElasticacheSubnetGroup) StateMust() *elasticacheSubnetGroupState {
	if esg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", esg.Type(), esg.LocalName()))
	}
	return esg.state
}

func (esg *ElasticacheSubnetGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(esg)
}

type ElasticacheSubnetGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that ElasticacheSubnetGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type elasticacheSubnetGroupAttributes struct {
	ref terra.Reference
}

func (esg elasticacheSubnetGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(esg.ref.Append("arn"))
}

func (esg elasticacheSubnetGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(esg.ref.Append("description"))
}

func (esg elasticacheSubnetGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(esg.ref.Append("id"))
}

func (esg elasticacheSubnetGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(esg.ref.Append("name"))
}

func (esg elasticacheSubnetGroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](esg.ref.Append("subnet_ids"))
}

func (esg elasticacheSubnetGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](esg.ref.Append("tags"))
}

func (esg elasticacheSubnetGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](esg.ref.Append("tags_all"))
}

type elasticacheSubnetGroupState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	SubnetIds   []string          `json:"subnet_ids"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
