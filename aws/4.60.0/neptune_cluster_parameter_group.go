// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	neptuneclusterparametergroup "github.com/golingon/terraproviders/aws/4.60.0/neptuneclusterparametergroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNeptuneClusterParameterGroup(name string, args NeptuneClusterParameterGroupArgs) *NeptuneClusterParameterGroup {
	return &NeptuneClusterParameterGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NeptuneClusterParameterGroup)(nil)

type NeptuneClusterParameterGroup struct {
	Name  string
	Args  NeptuneClusterParameterGroupArgs
	state *neptuneClusterParameterGroupState
}

func (ncpg *NeptuneClusterParameterGroup) Type() string {
	return "aws_neptune_cluster_parameter_group"
}

func (ncpg *NeptuneClusterParameterGroup) LocalName() string {
	return ncpg.Name
}

func (ncpg *NeptuneClusterParameterGroup) Configuration() interface{} {
	return ncpg.Args
}

func (ncpg *NeptuneClusterParameterGroup) Attributes() neptuneClusterParameterGroupAttributes {
	return neptuneClusterParameterGroupAttributes{ref: terra.ReferenceResource(ncpg)}
}

func (ncpg *NeptuneClusterParameterGroup) ImportState(av io.Reader) error {
	ncpg.state = &neptuneClusterParameterGroupState{}
	if err := json.NewDecoder(av).Decode(ncpg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ncpg.Type(), ncpg.LocalName(), err)
	}
	return nil
}

func (ncpg *NeptuneClusterParameterGroup) State() (*neptuneClusterParameterGroupState, bool) {
	return ncpg.state, ncpg.state != nil
}

func (ncpg *NeptuneClusterParameterGroup) StateMust() *neptuneClusterParameterGroupState {
	if ncpg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ncpg.Type(), ncpg.LocalName()))
	}
	return ncpg.state
}

func (ncpg *NeptuneClusterParameterGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(ncpg)
}

type NeptuneClusterParameterGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Family: string, required
	Family terra.StringValue `hcl:"family,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Parameter: min=0
	Parameter []neptuneclusterparametergroup.Parameter `hcl:"parameter,block" validate:"min=0"`
	// DependsOn contains resources that NeptuneClusterParameterGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type neptuneClusterParameterGroupAttributes struct {
	ref terra.Reference
}

func (ncpg neptuneClusterParameterGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ncpg.ref.Append("arn"))
}

func (ncpg neptuneClusterParameterGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ncpg.ref.Append("description"))
}

func (ncpg neptuneClusterParameterGroupAttributes) Family() terra.StringValue {
	return terra.ReferenceString(ncpg.ref.Append("family"))
}

func (ncpg neptuneClusterParameterGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ncpg.ref.Append("id"))
}

func (ncpg neptuneClusterParameterGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ncpg.ref.Append("name"))
}

func (ncpg neptuneClusterParameterGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(ncpg.ref.Append("name_prefix"))
}

func (ncpg neptuneClusterParameterGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ncpg.ref.Append("tags"))
}

func (ncpg neptuneClusterParameterGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ncpg.ref.Append("tags_all"))
}

func (ncpg neptuneClusterParameterGroupAttributes) Parameter() terra.SetValue[neptuneclusterparametergroup.ParameterAttributes] {
	return terra.ReferenceSet[neptuneclusterparametergroup.ParameterAttributes](ncpg.ref.Append("parameter"))
}

type neptuneClusterParameterGroupState struct {
	Arn         string                                        `json:"arn"`
	Description string                                        `json:"description"`
	Family      string                                        `json:"family"`
	Id          string                                        `json:"id"`
	Name        string                                        `json:"name"`
	NamePrefix  string                                        `json:"name_prefix"`
	Tags        map[string]string                             `json:"tags"`
	TagsAll     map[string]string                             `json:"tags_all"`
	Parameter   []neptuneclusterparametergroup.ParameterState `json:"parameter"`
}
