// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamGroup(name string, args IamGroupArgs) *IamGroup {
	return &IamGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamGroup)(nil)

type IamGroup struct {
	Name  string
	Args  IamGroupArgs
	state *iamGroupState
}

func (ig *IamGroup) Type() string {
	return "aws_iam_group"
}

func (ig *IamGroup) LocalName() string {
	return ig.Name
}

func (ig *IamGroup) Configuration() interface{} {
	return ig.Args
}

func (ig *IamGroup) Attributes() iamGroupAttributes {
	return iamGroupAttributes{ref: terra.ReferenceResource(ig)}
}

func (ig *IamGroup) ImportState(av io.Reader) error {
	ig.state = &iamGroupState{}
	if err := json.NewDecoder(av).Decode(ig.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ig.Type(), ig.LocalName(), err)
	}
	return nil
}

func (ig *IamGroup) State() (*iamGroupState, bool) {
	return ig.state, ig.state != nil
}

func (ig *IamGroup) StateMust() *iamGroupState {
	if ig.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ig.Type(), ig.LocalName()))
	}
	return ig.state
}

func (ig *IamGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(ig)
}

type IamGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// DependsOn contains resources that IamGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamGroupAttributes struct {
	ref terra.Reference
}

func (ig iamGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("arn"))
}

func (ig iamGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("id"))
}

func (ig iamGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("name"))
}

func (ig iamGroupAttributes) Path() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("path"))
}

func (ig iamGroupAttributes) UniqueId() terra.StringValue {
	return terra.ReferenceString(ig.ref.Append("unique_id"))
}

type iamGroupState struct {
	Arn      string `json:"arn"`
	Id       string `json:"id"`
	Name     string `json:"name"`
	Path     string `json:"path"`
	UniqueId string `json:"unique_id"`
}
