// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDxConnectionAssociation(name string, args DxConnectionAssociationArgs) *DxConnectionAssociation {
	return &DxConnectionAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DxConnectionAssociation)(nil)

type DxConnectionAssociation struct {
	Name  string
	Args  DxConnectionAssociationArgs
	state *dxConnectionAssociationState
}

func (dca *DxConnectionAssociation) Type() string {
	return "aws_dx_connection_association"
}

func (dca *DxConnectionAssociation) LocalName() string {
	return dca.Name
}

func (dca *DxConnectionAssociation) Configuration() interface{} {
	return dca.Args
}

func (dca *DxConnectionAssociation) Attributes() dxConnectionAssociationAttributes {
	return dxConnectionAssociationAttributes{ref: terra.ReferenceResource(dca)}
}

func (dca *DxConnectionAssociation) ImportState(av io.Reader) error {
	dca.state = &dxConnectionAssociationState{}
	if err := json.NewDecoder(av).Decode(dca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dca.Type(), dca.LocalName(), err)
	}
	return nil
}

func (dca *DxConnectionAssociation) State() (*dxConnectionAssociationState, bool) {
	return dca.state, dca.state != nil
}

func (dca *DxConnectionAssociation) StateMust() *dxConnectionAssociationState {
	if dca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dca.Type(), dca.LocalName()))
	}
	return dca.state
}

func (dca *DxConnectionAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(dca)
}

type DxConnectionAssociationArgs struct {
	// ConnectionId: string, required
	ConnectionId terra.StringValue `hcl:"connection_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LagId: string, required
	LagId terra.StringValue `hcl:"lag_id,attr" validate:"required"`
	// DependsOn contains resources that DxConnectionAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dxConnectionAssociationAttributes struct {
	ref terra.Reference
}

func (dca dxConnectionAssociationAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceString(dca.ref.Append("connection_id"))
}

func (dca dxConnectionAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dca.ref.Append("id"))
}

func (dca dxConnectionAssociationAttributes) LagId() terra.StringValue {
	return terra.ReferenceString(dca.ref.Append("lag_id"))
}

type dxConnectionAssociationState struct {
	ConnectionId string `json:"connection_id"`
	Id           string `json:"id"`
	LagId        string `json:"lag_id"`
}
