// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	evidentlylaunch "github.com/golingon/terraproviders/aws/4.60.0/evidentlylaunch"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEvidentlyLaunch(name string, args EvidentlyLaunchArgs) *EvidentlyLaunch {
	return &EvidentlyLaunch{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EvidentlyLaunch)(nil)

type EvidentlyLaunch struct {
	Name  string
	Args  EvidentlyLaunchArgs
	state *evidentlyLaunchState
}

func (el *EvidentlyLaunch) Type() string {
	return "aws_evidently_launch"
}

func (el *EvidentlyLaunch) LocalName() string {
	return el.Name
}

func (el *EvidentlyLaunch) Configuration() interface{} {
	return el.Args
}

func (el *EvidentlyLaunch) Attributes() evidentlyLaunchAttributes {
	return evidentlyLaunchAttributes{ref: terra.ReferenceResource(el)}
}

func (el *EvidentlyLaunch) ImportState(av io.Reader) error {
	el.state = &evidentlyLaunchState{}
	if err := json.NewDecoder(av).Decode(el.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", el.Type(), el.LocalName(), err)
	}
	return nil
}

func (el *EvidentlyLaunch) State() (*evidentlyLaunchState, bool) {
	return el.state, el.state != nil
}

func (el *EvidentlyLaunch) StateMust() *evidentlyLaunchState {
	if el.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", el.Type(), el.LocalName()))
	}
	return el.state
}

func (el *EvidentlyLaunch) DependOn() terra.Reference {
	return terra.ReferenceResource(el)
}

type EvidentlyLaunchArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Project: string, required
	Project terra.StringValue `hcl:"project,attr" validate:"required"`
	// RandomizationSalt: string, optional
	RandomizationSalt terra.StringValue `hcl:"randomization_salt,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Execution: min=0
	Execution []evidentlylaunch.Execution `hcl:"execution,block" validate:"min=0"`
	// Groups: min=1,max=5
	Groups []evidentlylaunch.Groups `hcl:"groups,block" validate:"min=1,max=5"`
	// MetricMonitors: min=0,max=3
	MetricMonitors []evidentlylaunch.MetricMonitors `hcl:"metric_monitors,block" validate:"min=0,max=3"`
	// ScheduledSplitsConfig: optional
	ScheduledSplitsConfig *evidentlylaunch.ScheduledSplitsConfig `hcl:"scheduled_splits_config,block"`
	// Timeouts: optional
	Timeouts *evidentlylaunch.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EvidentlyLaunch depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type evidentlyLaunchAttributes struct {
	ref terra.Reference
}

func (el evidentlyLaunchAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(el.ref.Append("arn"))
}

func (el evidentlyLaunchAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceString(el.ref.Append("created_time"))
}

func (el evidentlyLaunchAttributes) Description() terra.StringValue {
	return terra.ReferenceString(el.ref.Append("description"))
}

func (el evidentlyLaunchAttributes) Id() terra.StringValue {
	return terra.ReferenceString(el.ref.Append("id"))
}

func (el evidentlyLaunchAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceString(el.ref.Append("last_updated_time"))
}

func (el evidentlyLaunchAttributes) Name() terra.StringValue {
	return terra.ReferenceString(el.ref.Append("name"))
}

func (el evidentlyLaunchAttributes) Project() terra.StringValue {
	return terra.ReferenceString(el.ref.Append("project"))
}

func (el evidentlyLaunchAttributes) RandomizationSalt() terra.StringValue {
	return terra.ReferenceString(el.ref.Append("randomization_salt"))
}

func (el evidentlyLaunchAttributes) Status() terra.StringValue {
	return terra.ReferenceString(el.ref.Append("status"))
}

func (el evidentlyLaunchAttributes) StatusReason() terra.StringValue {
	return terra.ReferenceString(el.ref.Append("status_reason"))
}

func (el evidentlyLaunchAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](el.ref.Append("tags"))
}

func (el evidentlyLaunchAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](el.ref.Append("tags_all"))
}

func (el evidentlyLaunchAttributes) Type() terra.StringValue {
	return terra.ReferenceString(el.ref.Append("type"))
}

func (el evidentlyLaunchAttributes) Execution() terra.ListValue[evidentlylaunch.ExecutionAttributes] {
	return terra.ReferenceList[evidentlylaunch.ExecutionAttributes](el.ref.Append("execution"))
}

func (el evidentlyLaunchAttributes) Groups() terra.ListValue[evidentlylaunch.GroupsAttributes] {
	return terra.ReferenceList[evidentlylaunch.GroupsAttributes](el.ref.Append("groups"))
}

func (el evidentlyLaunchAttributes) MetricMonitors() terra.ListValue[evidentlylaunch.MetricMonitorsAttributes] {
	return terra.ReferenceList[evidentlylaunch.MetricMonitorsAttributes](el.ref.Append("metric_monitors"))
}

func (el evidentlyLaunchAttributes) ScheduledSplitsConfig() terra.ListValue[evidentlylaunch.ScheduledSplitsConfigAttributes] {
	return terra.ReferenceList[evidentlylaunch.ScheduledSplitsConfigAttributes](el.ref.Append("scheduled_splits_config"))
}

func (el evidentlyLaunchAttributes) Timeouts() evidentlylaunch.TimeoutsAttributes {
	return terra.ReferenceSingle[evidentlylaunch.TimeoutsAttributes](el.ref.Append("timeouts"))
}

type evidentlyLaunchState struct {
	Arn                   string                                       `json:"arn"`
	CreatedTime           string                                       `json:"created_time"`
	Description           string                                       `json:"description"`
	Id                    string                                       `json:"id"`
	LastUpdatedTime       string                                       `json:"last_updated_time"`
	Name                  string                                       `json:"name"`
	Project               string                                       `json:"project"`
	RandomizationSalt     string                                       `json:"randomization_salt"`
	Status                string                                       `json:"status"`
	StatusReason          string                                       `json:"status_reason"`
	Tags                  map[string]string                            `json:"tags"`
	TagsAll               map[string]string                            `json:"tags_all"`
	Type                  string                                       `json:"type"`
	Execution             []evidentlylaunch.ExecutionState             `json:"execution"`
	Groups                []evidentlylaunch.GroupsState                `json:"groups"`
	MetricMonitors        []evidentlylaunch.MetricMonitorsState        `json:"metric_monitors"`
	ScheduledSplitsConfig []evidentlylaunch.ScheduledSplitsConfigState `json:"scheduled_splits_config"`
	Timeouts              *evidentlylaunch.TimeoutsState               `json:"timeouts"`
}
