// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	appmeshroute "github.com/golingon/terraproviders/aws/4.60.0/appmeshroute"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppmeshRoute(name string, args AppmeshRouteArgs) *AppmeshRoute {
	return &AppmeshRoute{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppmeshRoute)(nil)

type AppmeshRoute struct {
	Name  string
	Args  AppmeshRouteArgs
	state *appmeshRouteState
}

func (ar *AppmeshRoute) Type() string {
	return "aws_appmesh_route"
}

func (ar *AppmeshRoute) LocalName() string {
	return ar.Name
}

func (ar *AppmeshRoute) Configuration() interface{} {
	return ar.Args
}

func (ar *AppmeshRoute) Attributes() appmeshRouteAttributes {
	return appmeshRouteAttributes{ref: terra.ReferenceResource(ar)}
}

func (ar *AppmeshRoute) ImportState(av io.Reader) error {
	ar.state = &appmeshRouteState{}
	if err := json.NewDecoder(av).Decode(ar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ar.Type(), ar.LocalName(), err)
	}
	return nil
}

func (ar *AppmeshRoute) State() (*appmeshRouteState, bool) {
	return ar.state, ar.state != nil
}

func (ar *AppmeshRoute) StateMust() *appmeshRouteState {
	if ar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ar.Type(), ar.LocalName()))
	}
	return ar.state
}

func (ar *AppmeshRoute) DependOn() terra.Reference {
	return terra.ReferenceResource(ar)
}

type AppmeshRouteArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MeshName: string, required
	MeshName terra.StringValue `hcl:"mesh_name,attr" validate:"required"`
	// MeshOwner: string, optional
	MeshOwner terra.StringValue `hcl:"mesh_owner,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VirtualRouterName: string, required
	VirtualRouterName terra.StringValue `hcl:"virtual_router_name,attr" validate:"required"`
	// Spec: required
	Spec *appmeshroute.Spec `hcl:"spec,block" validate:"required"`
	// DependsOn contains resources that AppmeshRoute depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appmeshRouteAttributes struct {
	ref terra.Reference
}

func (ar appmeshRouteAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("arn"))
}

func (ar appmeshRouteAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("created_date"))
}

func (ar appmeshRouteAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("id"))
}

func (ar appmeshRouteAttributes) LastUpdatedDate() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("last_updated_date"))
}

func (ar appmeshRouteAttributes) MeshName() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("mesh_name"))
}

func (ar appmeshRouteAttributes) MeshOwner() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("mesh_owner"))
}

func (ar appmeshRouteAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("name"))
}

func (ar appmeshRouteAttributes) ResourceOwner() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("resource_owner"))
}

func (ar appmeshRouteAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ar.ref.Append("tags"))
}

func (ar appmeshRouteAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ar.ref.Append("tags_all"))
}

func (ar appmeshRouteAttributes) VirtualRouterName() terra.StringValue {
	return terra.ReferenceString(ar.ref.Append("virtual_router_name"))
}

func (ar appmeshRouteAttributes) Spec() terra.ListValue[appmeshroute.SpecAttributes] {
	return terra.ReferenceList[appmeshroute.SpecAttributes](ar.ref.Append("spec"))
}

type appmeshRouteState struct {
	Arn               string                   `json:"arn"`
	CreatedDate       string                   `json:"created_date"`
	Id                string                   `json:"id"`
	LastUpdatedDate   string                   `json:"last_updated_date"`
	MeshName          string                   `json:"mesh_name"`
	MeshOwner         string                   `json:"mesh_owner"`
	Name              string                   `json:"name"`
	ResourceOwner     string                   `json:"resource_owner"`
	Tags              map[string]string        `json:"tags"`
	TagsAll           map[string]string        `json:"tags_all"`
	VirtualRouterName string                   `json:"virtual_router_name"`
	Spec              []appmeshroute.SpecState `json:"spec"`
}
