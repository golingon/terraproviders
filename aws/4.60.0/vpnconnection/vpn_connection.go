// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package vpnconnection

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Routes struct{}

type VgwTelemetry struct{}

type Tunnel1LogOptions struct {
	// Tunnel1LogOptionsCloudwatchLogOptions: optional
	CloudwatchLogOptions *Tunnel1LogOptionsCloudwatchLogOptions `hcl:"cloudwatch_log_options,block"`
}

type Tunnel1LogOptionsCloudwatchLogOptions struct {
	// LogEnabled: bool, optional
	LogEnabled terra.BoolValue `hcl:"log_enabled,attr"`
	// LogGroupArn: string, optional
	LogGroupArn terra.StringValue `hcl:"log_group_arn,attr"`
	// LogOutputFormat: string, optional
	LogOutputFormat terra.StringValue `hcl:"log_output_format,attr"`
}

type Tunnel2LogOptions struct {
	// Tunnel2LogOptionsCloudwatchLogOptions: optional
	CloudwatchLogOptions *Tunnel2LogOptionsCloudwatchLogOptions `hcl:"cloudwatch_log_options,block"`
}

type Tunnel2LogOptionsCloudwatchLogOptions struct {
	// LogEnabled: bool, optional
	LogEnabled terra.BoolValue `hcl:"log_enabled,attr"`
	// LogGroupArn: string, optional
	LogGroupArn terra.StringValue `hcl:"log_group_arn,attr"`
	// LogOutputFormat: string, optional
	LogOutputFormat terra.StringValue `hcl:"log_output_format,attr"`
}

type RoutesAttributes struct {
	ref terra.Reference
}

func (r RoutesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RoutesAttributes) InternalWithRef(ref terra.Reference) RoutesAttributes {
	return RoutesAttributes{ref: ref}
}

func (r RoutesAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RoutesAttributes) DestinationCidrBlock() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("destination_cidr_block"))
}

func (r RoutesAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("source"))
}

func (r RoutesAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("state"))
}

type VgwTelemetryAttributes struct {
	ref terra.Reference
}

func (vt VgwTelemetryAttributes) InternalRef() (terra.Reference, error) {
	return vt.ref, nil
}

func (vt VgwTelemetryAttributes) InternalWithRef(ref terra.Reference) VgwTelemetryAttributes {
	return VgwTelemetryAttributes{ref: ref}
}

func (vt VgwTelemetryAttributes) InternalTokens() hclwrite.Tokens {
	return vt.ref.InternalTokens()
}

func (vt VgwTelemetryAttributes) AcceptedRouteCount() terra.NumberValue {
	return terra.ReferenceAsNumber(vt.ref.Append("accepted_route_count"))
}

func (vt VgwTelemetryAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("certificate_arn"))
}

func (vt VgwTelemetryAttributes) LastStatusChange() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("last_status_change"))
}

func (vt VgwTelemetryAttributes) OutsideIpAddress() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("outside_ip_address"))
}

func (vt VgwTelemetryAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("status"))
}

func (vt VgwTelemetryAttributes) StatusMessage() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("status_message"))
}

type Tunnel1LogOptionsAttributes struct {
	ref terra.Reference
}

func (tlo Tunnel1LogOptionsAttributes) InternalRef() (terra.Reference, error) {
	return tlo.ref, nil
}

func (tlo Tunnel1LogOptionsAttributes) InternalWithRef(ref terra.Reference) Tunnel1LogOptionsAttributes {
	return Tunnel1LogOptionsAttributes{ref: ref}
}

func (tlo Tunnel1LogOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return tlo.ref.InternalTokens()
}

func (tlo Tunnel1LogOptionsAttributes) CloudwatchLogOptions() terra.ListValue[Tunnel1LogOptionsCloudwatchLogOptionsAttributes] {
	return terra.ReferenceAsList[Tunnel1LogOptionsCloudwatchLogOptionsAttributes](tlo.ref.Append("cloudwatch_log_options"))
}

type Tunnel1LogOptionsCloudwatchLogOptionsAttributes struct {
	ref terra.Reference
}

func (clo Tunnel1LogOptionsCloudwatchLogOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo Tunnel1LogOptionsCloudwatchLogOptionsAttributes) InternalWithRef(ref terra.Reference) Tunnel1LogOptionsCloudwatchLogOptionsAttributes {
	return Tunnel1LogOptionsCloudwatchLogOptionsAttributes{ref: ref}
}

func (clo Tunnel1LogOptionsCloudwatchLogOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return clo.ref.InternalTokens()
}

func (clo Tunnel1LogOptionsCloudwatchLogOptionsAttributes) LogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("log_enabled"))
}

func (clo Tunnel1LogOptionsCloudwatchLogOptionsAttributes) LogGroupArn() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_arn"))
}

func (clo Tunnel1LogOptionsCloudwatchLogOptionsAttributes) LogOutputFormat() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_output_format"))
}

type Tunnel2LogOptionsAttributes struct {
	ref terra.Reference
}

func (tlo Tunnel2LogOptionsAttributes) InternalRef() (terra.Reference, error) {
	return tlo.ref, nil
}

func (tlo Tunnel2LogOptionsAttributes) InternalWithRef(ref terra.Reference) Tunnel2LogOptionsAttributes {
	return Tunnel2LogOptionsAttributes{ref: ref}
}

func (tlo Tunnel2LogOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return tlo.ref.InternalTokens()
}

func (tlo Tunnel2LogOptionsAttributes) CloudwatchLogOptions() terra.ListValue[Tunnel2LogOptionsCloudwatchLogOptionsAttributes] {
	return terra.ReferenceAsList[Tunnel2LogOptionsCloudwatchLogOptionsAttributes](tlo.ref.Append("cloudwatch_log_options"))
}

type Tunnel2LogOptionsCloudwatchLogOptionsAttributes struct {
	ref terra.Reference
}

func (clo Tunnel2LogOptionsCloudwatchLogOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo Tunnel2LogOptionsCloudwatchLogOptionsAttributes) InternalWithRef(ref terra.Reference) Tunnel2LogOptionsCloudwatchLogOptionsAttributes {
	return Tunnel2LogOptionsCloudwatchLogOptionsAttributes{ref: ref}
}

func (clo Tunnel2LogOptionsCloudwatchLogOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return clo.ref.InternalTokens()
}

func (clo Tunnel2LogOptionsCloudwatchLogOptionsAttributes) LogEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("log_enabled"))
}

func (clo Tunnel2LogOptionsCloudwatchLogOptionsAttributes) LogGroupArn() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_arn"))
}

func (clo Tunnel2LogOptionsCloudwatchLogOptionsAttributes) LogOutputFormat() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_output_format"))
}

type RoutesState struct {
	DestinationCidrBlock string `json:"destination_cidr_block"`
	Source               string `json:"source"`
	State                string `json:"state"`
}

type VgwTelemetryState struct {
	AcceptedRouteCount float64 `json:"accepted_route_count"`
	CertificateArn     string  `json:"certificate_arn"`
	LastStatusChange   string  `json:"last_status_change"`
	OutsideIpAddress   string  `json:"outside_ip_address"`
	Status             string  `json:"status"`
	StatusMessage      string  `json:"status_message"`
}

type Tunnel1LogOptionsState struct {
	CloudwatchLogOptions []Tunnel1LogOptionsCloudwatchLogOptionsState `json:"cloudwatch_log_options"`
}

type Tunnel1LogOptionsCloudwatchLogOptionsState struct {
	LogEnabled      bool   `json:"log_enabled"`
	LogGroupArn     string `json:"log_group_arn"`
	LogOutputFormat string `json:"log_output_format"`
}

type Tunnel2LogOptionsState struct {
	CloudwatchLogOptions []Tunnel2LogOptionsCloudwatchLogOptionsState `json:"cloudwatch_log_options"`
}

type Tunnel2LogOptionsCloudwatchLogOptionsState struct {
	LogEnabled      bool   `json:"log_enabled"`
	LogGroupArn     string `json:"log_group_arn"`
	LogOutputFormat string `json:"log_output_format"`
}
