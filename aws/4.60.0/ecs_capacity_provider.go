// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ecscapacityprovider "github.com/golingon/terraproviders/aws/4.60.0/ecscapacityprovider"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEcsCapacityProvider(name string, args EcsCapacityProviderArgs) *EcsCapacityProvider {
	return &EcsCapacityProvider{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EcsCapacityProvider)(nil)

type EcsCapacityProvider struct {
	Name  string
	Args  EcsCapacityProviderArgs
	state *ecsCapacityProviderState
}

func (ecp *EcsCapacityProvider) Type() string {
	return "aws_ecs_capacity_provider"
}

func (ecp *EcsCapacityProvider) LocalName() string {
	return ecp.Name
}

func (ecp *EcsCapacityProvider) Configuration() interface{} {
	return ecp.Args
}

func (ecp *EcsCapacityProvider) Attributes() ecsCapacityProviderAttributes {
	return ecsCapacityProviderAttributes{ref: terra.ReferenceResource(ecp)}
}

func (ecp *EcsCapacityProvider) ImportState(av io.Reader) error {
	ecp.state = &ecsCapacityProviderState{}
	if err := json.NewDecoder(av).Decode(ecp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ecp.Type(), ecp.LocalName(), err)
	}
	return nil
}

func (ecp *EcsCapacityProvider) State() (*ecsCapacityProviderState, bool) {
	return ecp.state, ecp.state != nil
}

func (ecp *EcsCapacityProvider) StateMust() *ecsCapacityProviderState {
	if ecp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ecp.Type(), ecp.LocalName()))
	}
	return ecp.state
}

func (ecp *EcsCapacityProvider) DependOn() terra.Reference {
	return terra.ReferenceResource(ecp)
}

type EcsCapacityProviderArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// AutoScalingGroupProvider: required
	AutoScalingGroupProvider *ecscapacityprovider.AutoScalingGroupProvider `hcl:"auto_scaling_group_provider,block" validate:"required"`
	// DependsOn contains resources that EcsCapacityProvider depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ecsCapacityProviderAttributes struct {
	ref terra.Reference
}

func (ecp ecsCapacityProviderAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ecp.ref.Append("arn"))
}

func (ecp ecsCapacityProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ecp.ref.Append("id"))
}

func (ecp ecsCapacityProviderAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ecp.ref.Append("name"))
}

func (ecp ecsCapacityProviderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ecp.ref.Append("tags"))
}

func (ecp ecsCapacityProviderAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ecp.ref.Append("tags_all"))
}

func (ecp ecsCapacityProviderAttributes) AutoScalingGroupProvider() terra.ListValue[ecscapacityprovider.AutoScalingGroupProviderAttributes] {
	return terra.ReferenceList[ecscapacityprovider.AutoScalingGroupProviderAttributes](ecp.ref.Append("auto_scaling_group_provider"))
}

type ecsCapacityProviderState struct {
	Arn                      string                                              `json:"arn"`
	Id                       string                                              `json:"id"`
	Name                     string                                              `json:"name"`
	Tags                     map[string]string                                   `json:"tags"`
	TagsAll                  map[string]string                                   `json:"tags_all"`
	AutoScalingGroupProvider []ecscapacityprovider.AutoScalingGroupProviderState `json:"auto_scaling_group_provider"`
}
