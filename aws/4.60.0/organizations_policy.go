// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOrganizationsPolicy(name string, args OrganizationsPolicyArgs) *OrganizationsPolicy {
	return &OrganizationsPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OrganizationsPolicy)(nil)

type OrganizationsPolicy struct {
	Name  string
	Args  OrganizationsPolicyArgs
	state *organizationsPolicyState
}

func (op *OrganizationsPolicy) Type() string {
	return "aws_organizations_policy"
}

func (op *OrganizationsPolicy) LocalName() string {
	return op.Name
}

func (op *OrganizationsPolicy) Configuration() interface{} {
	return op.Args
}

func (op *OrganizationsPolicy) Attributes() organizationsPolicyAttributes {
	return organizationsPolicyAttributes{ref: terra.ReferenceResource(op)}
}

func (op *OrganizationsPolicy) ImportState(av io.Reader) error {
	op.state = &organizationsPolicyState{}
	if err := json.NewDecoder(av).Decode(op.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", op.Type(), op.LocalName(), err)
	}
	return nil
}

func (op *OrganizationsPolicy) State() (*organizationsPolicyState, bool) {
	return op.state, op.state != nil
}

func (op *OrganizationsPolicy) StateMust() *organizationsPolicyState {
	if op.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", op.Type(), op.LocalName()))
	}
	return op.state
}

func (op *OrganizationsPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(op)
}

type OrganizationsPolicyArgs struct {
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SkipDestroy: bool, optional
	SkipDestroy terra.BoolValue `hcl:"skip_destroy,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// DependsOn contains resources that OrganizationsPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type organizationsPolicyAttributes struct {
	ref terra.Reference
}

func (op organizationsPolicyAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("arn"))
}

func (op organizationsPolicyAttributes) Content() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("content"))
}

func (op organizationsPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("description"))
}

func (op organizationsPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("id"))
}

func (op organizationsPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("name"))
}

func (op organizationsPolicyAttributes) SkipDestroy() terra.BoolValue {
	return terra.ReferenceBool(op.ref.Append("skip_destroy"))
}

func (op organizationsPolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](op.ref.Append("tags"))
}

func (op organizationsPolicyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](op.ref.Append("tags_all"))
}

func (op organizationsPolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceString(op.ref.Append("type"))
}

type organizationsPolicyState struct {
	Arn         string            `json:"arn"`
	Content     string            `json:"content"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	SkipDestroy bool              `json:"skip_destroy"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	Type        string            `json:"type"`
}
