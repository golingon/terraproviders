// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewChimeVoiceConnectorLogging(name string, args ChimeVoiceConnectorLoggingArgs) *ChimeVoiceConnectorLogging {
	return &ChimeVoiceConnectorLogging{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ChimeVoiceConnectorLogging)(nil)

type ChimeVoiceConnectorLogging struct {
	Name  string
	Args  ChimeVoiceConnectorLoggingArgs
	state *chimeVoiceConnectorLoggingState
}

func (cvcl *ChimeVoiceConnectorLogging) Type() string {
	return "aws_chime_voice_connector_logging"
}

func (cvcl *ChimeVoiceConnectorLogging) LocalName() string {
	return cvcl.Name
}

func (cvcl *ChimeVoiceConnectorLogging) Configuration() interface{} {
	return cvcl.Args
}

func (cvcl *ChimeVoiceConnectorLogging) Attributes() chimeVoiceConnectorLoggingAttributes {
	return chimeVoiceConnectorLoggingAttributes{ref: terra.ReferenceResource(cvcl)}
}

func (cvcl *ChimeVoiceConnectorLogging) ImportState(av io.Reader) error {
	cvcl.state = &chimeVoiceConnectorLoggingState{}
	if err := json.NewDecoder(av).Decode(cvcl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cvcl.Type(), cvcl.LocalName(), err)
	}
	return nil
}

func (cvcl *ChimeVoiceConnectorLogging) State() (*chimeVoiceConnectorLoggingState, bool) {
	return cvcl.state, cvcl.state != nil
}

func (cvcl *ChimeVoiceConnectorLogging) StateMust() *chimeVoiceConnectorLoggingState {
	if cvcl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cvcl.Type(), cvcl.LocalName()))
	}
	return cvcl.state
}

func (cvcl *ChimeVoiceConnectorLogging) DependOn() terra.Reference {
	return terra.ReferenceResource(cvcl)
}

type ChimeVoiceConnectorLoggingArgs struct {
	// EnableMediaMetricLogs: bool, optional
	EnableMediaMetricLogs terra.BoolValue `hcl:"enable_media_metric_logs,attr"`
	// EnableSipLogs: bool, optional
	EnableSipLogs terra.BoolValue `hcl:"enable_sip_logs,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VoiceConnectorId: string, required
	VoiceConnectorId terra.StringValue `hcl:"voice_connector_id,attr" validate:"required"`
	// DependsOn contains resources that ChimeVoiceConnectorLogging depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type chimeVoiceConnectorLoggingAttributes struct {
	ref terra.Reference
}

func (cvcl chimeVoiceConnectorLoggingAttributes) EnableMediaMetricLogs() terra.BoolValue {
	return terra.ReferenceBool(cvcl.ref.Append("enable_media_metric_logs"))
}

func (cvcl chimeVoiceConnectorLoggingAttributes) EnableSipLogs() terra.BoolValue {
	return terra.ReferenceBool(cvcl.ref.Append("enable_sip_logs"))
}

func (cvcl chimeVoiceConnectorLoggingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cvcl.ref.Append("id"))
}

func (cvcl chimeVoiceConnectorLoggingAttributes) VoiceConnectorId() terra.StringValue {
	return terra.ReferenceString(cvcl.ref.Append("voice_connector_id"))
}

type chimeVoiceConnectorLoggingState struct {
	EnableMediaMetricLogs bool   `json:"enable_media_metric_logs"`
	EnableSipLogs         bool   `json:"enable_sip_logs"`
	Id                    string `json:"id"`
	VoiceConnectorId      string `json:"voice_connector_id"`
}
