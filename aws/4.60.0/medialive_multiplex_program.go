// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	medialivemultiplexprogram "github.com/golingon/terraproviders/aws/4.60.0/medialivemultiplexprogram"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMedialiveMultiplexProgram(name string, args MedialiveMultiplexProgramArgs) *MedialiveMultiplexProgram {
	return &MedialiveMultiplexProgram{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MedialiveMultiplexProgram)(nil)

type MedialiveMultiplexProgram struct {
	Name  string
	Args  MedialiveMultiplexProgramArgs
	state *medialiveMultiplexProgramState
}

func (mmp *MedialiveMultiplexProgram) Type() string {
	return "aws_medialive_multiplex_program"
}

func (mmp *MedialiveMultiplexProgram) LocalName() string {
	return mmp.Name
}

func (mmp *MedialiveMultiplexProgram) Configuration() interface{} {
	return mmp.Args
}

func (mmp *MedialiveMultiplexProgram) Attributes() medialiveMultiplexProgramAttributes {
	return medialiveMultiplexProgramAttributes{ref: terra.ReferenceResource(mmp)}
}

func (mmp *MedialiveMultiplexProgram) ImportState(av io.Reader) error {
	mmp.state = &medialiveMultiplexProgramState{}
	if err := json.NewDecoder(av).Decode(mmp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mmp.Type(), mmp.LocalName(), err)
	}
	return nil
}

func (mmp *MedialiveMultiplexProgram) State() (*medialiveMultiplexProgramState, bool) {
	return mmp.state, mmp.state != nil
}

func (mmp *MedialiveMultiplexProgram) StateMust() *medialiveMultiplexProgramState {
	if mmp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mmp.Type(), mmp.LocalName()))
	}
	return mmp.state
}

func (mmp *MedialiveMultiplexProgram) DependOn() terra.Reference {
	return terra.ReferenceResource(mmp)
}

type MedialiveMultiplexProgramArgs struct {
	// MultiplexId: string, required
	MultiplexId terra.StringValue `hcl:"multiplex_id,attr" validate:"required"`
	// ProgramName: string, required
	ProgramName terra.StringValue `hcl:"program_name,attr" validate:"required"`
	// MultiplexProgramSettings: min=0
	MultiplexProgramSettings []medialivemultiplexprogram.MultiplexProgramSettings `hcl:"multiplex_program_settings,block" validate:"min=0"`
	// DependsOn contains resources that MedialiveMultiplexProgram depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type medialiveMultiplexProgramAttributes struct {
	ref terra.Reference
}

func (mmp medialiveMultiplexProgramAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mmp.ref.Append("id"))
}

func (mmp medialiveMultiplexProgramAttributes) MultiplexId() terra.StringValue {
	return terra.ReferenceString(mmp.ref.Append("multiplex_id"))
}

func (mmp medialiveMultiplexProgramAttributes) ProgramName() terra.StringValue {
	return terra.ReferenceString(mmp.ref.Append("program_name"))
}

func (mmp medialiveMultiplexProgramAttributes) MultiplexProgramSettings() terra.ListValue[medialivemultiplexprogram.MultiplexProgramSettingsAttributes] {
	return terra.ReferenceList[medialivemultiplexprogram.MultiplexProgramSettingsAttributes](mmp.ref.Append("multiplex_program_settings"))
}

type medialiveMultiplexProgramState struct {
	Id                       string                                                    `json:"id"`
	MultiplexId              string                                                    `json:"multiplex_id"`
	ProgramName              string                                                    `json:"program_name"`
	MultiplexProgramSettings []medialivemultiplexprogram.MultiplexProgramSettingsState `json:"multiplex_program_settings"`
}
