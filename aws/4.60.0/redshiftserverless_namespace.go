// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftserverlessNamespace(name string, args RedshiftserverlessNamespaceArgs) *RedshiftserverlessNamespace {
	return &RedshiftserverlessNamespace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftserverlessNamespace)(nil)

type RedshiftserverlessNamespace struct {
	Name  string
	Args  RedshiftserverlessNamespaceArgs
	state *redshiftserverlessNamespaceState
}

func (rn *RedshiftserverlessNamespace) Type() string {
	return "aws_redshiftserverless_namespace"
}

func (rn *RedshiftserverlessNamespace) LocalName() string {
	return rn.Name
}

func (rn *RedshiftserverlessNamespace) Configuration() interface{} {
	return rn.Args
}

func (rn *RedshiftserverlessNamespace) Attributes() redshiftserverlessNamespaceAttributes {
	return redshiftserverlessNamespaceAttributes{ref: terra.ReferenceResource(rn)}
}

func (rn *RedshiftserverlessNamespace) ImportState(av io.Reader) error {
	rn.state = &redshiftserverlessNamespaceState{}
	if err := json.NewDecoder(av).Decode(rn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rn.Type(), rn.LocalName(), err)
	}
	return nil
}

func (rn *RedshiftserverlessNamespace) State() (*redshiftserverlessNamespaceState, bool) {
	return rn.state, rn.state != nil
}

func (rn *RedshiftserverlessNamespace) StateMust() *redshiftserverlessNamespaceState {
	if rn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rn.Type(), rn.LocalName()))
	}
	return rn.state
}

func (rn *RedshiftserverlessNamespace) DependOn() terra.Reference {
	return terra.ReferenceResource(rn)
}

type RedshiftserverlessNamespaceArgs struct {
	// AdminUserPassword: string, optional
	AdminUserPassword terra.StringValue `hcl:"admin_user_password,attr"`
	// AdminUsername: string, optional
	AdminUsername terra.StringValue `hcl:"admin_username,attr"`
	// DbName: string, optional
	DbName terra.StringValue `hcl:"db_name,attr"`
	// DefaultIamRoleArn: string, optional
	DefaultIamRoleArn terra.StringValue `hcl:"default_iam_role_arn,attr"`
	// IamRoles: set of string, optional
	IamRoles terra.SetValue[terra.StringValue] `hcl:"iam_roles,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// LogExports: set of string, optional
	LogExports terra.SetValue[terra.StringValue] `hcl:"log_exports,attr"`
	// NamespaceName: string, required
	NamespaceName terra.StringValue `hcl:"namespace_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that RedshiftserverlessNamespace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftserverlessNamespaceAttributes struct {
	ref terra.Reference
}

func (rn redshiftserverlessNamespaceAttributes) AdminUserPassword() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("admin_user_password"))
}

func (rn redshiftserverlessNamespaceAttributes) AdminUsername() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("admin_username"))
}

func (rn redshiftserverlessNamespaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("arn"))
}

func (rn redshiftserverlessNamespaceAttributes) DbName() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("db_name"))
}

func (rn redshiftserverlessNamespaceAttributes) DefaultIamRoleArn() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("default_iam_role_arn"))
}

func (rn redshiftserverlessNamespaceAttributes) IamRoles() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rn.ref.Append("iam_roles"))
}

func (rn redshiftserverlessNamespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("id"))
}

func (rn redshiftserverlessNamespaceAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("kms_key_id"))
}

func (rn redshiftserverlessNamespaceAttributes) LogExports() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rn.ref.Append("log_exports"))
}

func (rn redshiftserverlessNamespaceAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("namespace_id"))
}

func (rn redshiftserverlessNamespaceAttributes) NamespaceName() terra.StringValue {
	return terra.ReferenceString(rn.ref.Append("namespace_name"))
}

func (rn redshiftserverlessNamespaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rn.ref.Append("tags"))
}

func (rn redshiftserverlessNamespaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rn.ref.Append("tags_all"))
}

type redshiftserverlessNamespaceState struct {
	AdminUserPassword string            `json:"admin_user_password"`
	AdminUsername     string            `json:"admin_username"`
	Arn               string            `json:"arn"`
	DbName            string            `json:"db_name"`
	DefaultIamRoleArn string            `json:"default_iam_role_arn"`
	IamRoles          []string          `json:"iam_roles"`
	Id                string            `json:"id"`
	KmsKeyId          string            `json:"kms_key_id"`
	LogExports        []string          `json:"log_exports"`
	NamespaceId       string            `json:"namespace_id"`
	NamespaceName     string            `json:"namespace_name"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
}
