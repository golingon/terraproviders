// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	transcribelanguagemodel "github.com/golingon/terraproviders/aws/4.60.0/transcribelanguagemodel"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewTranscribeLanguageModel(name string, args TranscribeLanguageModelArgs) *TranscribeLanguageModel {
	return &TranscribeLanguageModel{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TranscribeLanguageModel)(nil)

type TranscribeLanguageModel struct {
	Name  string
	Args  TranscribeLanguageModelArgs
	state *transcribeLanguageModelState
}

func (tlm *TranscribeLanguageModel) Type() string {
	return "aws_transcribe_language_model"
}

func (tlm *TranscribeLanguageModel) LocalName() string {
	return tlm.Name
}

func (tlm *TranscribeLanguageModel) Configuration() interface{} {
	return tlm.Args
}

func (tlm *TranscribeLanguageModel) Attributes() transcribeLanguageModelAttributes {
	return transcribeLanguageModelAttributes{ref: terra.ReferenceResource(tlm)}
}

func (tlm *TranscribeLanguageModel) ImportState(av io.Reader) error {
	tlm.state = &transcribeLanguageModelState{}
	if err := json.NewDecoder(av).Decode(tlm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", tlm.Type(), tlm.LocalName(), err)
	}
	return nil
}

func (tlm *TranscribeLanguageModel) State() (*transcribeLanguageModelState, bool) {
	return tlm.state, tlm.state != nil
}

func (tlm *TranscribeLanguageModel) StateMust() *transcribeLanguageModelState {
	if tlm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", tlm.Type(), tlm.LocalName()))
	}
	return tlm.state
}

func (tlm *TranscribeLanguageModel) DependOn() terra.Reference {
	return terra.ReferenceResource(tlm)
}

type TranscribeLanguageModelArgs struct {
	// BaseModelName: string, required
	BaseModelName terra.StringValue `hcl:"base_model_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
	// ModelName: string, required
	ModelName terra.StringValue `hcl:"model_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// InputDataConfig: required
	InputDataConfig *transcribelanguagemodel.InputDataConfig `hcl:"input_data_config,block" validate:"required"`
	// Timeouts: optional
	Timeouts *transcribelanguagemodel.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that TranscribeLanguageModel depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type transcribeLanguageModelAttributes struct {
	ref terra.Reference
}

func (tlm transcribeLanguageModelAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(tlm.ref.Append("arn"))
}

func (tlm transcribeLanguageModelAttributes) BaseModelName() terra.StringValue {
	return terra.ReferenceString(tlm.ref.Append("base_model_name"))
}

func (tlm transcribeLanguageModelAttributes) Id() terra.StringValue {
	return terra.ReferenceString(tlm.ref.Append("id"))
}

func (tlm transcribeLanguageModelAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceString(tlm.ref.Append("language_code"))
}

func (tlm transcribeLanguageModelAttributes) ModelName() terra.StringValue {
	return terra.ReferenceString(tlm.ref.Append("model_name"))
}

func (tlm transcribeLanguageModelAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](tlm.ref.Append("tags"))
}

func (tlm transcribeLanguageModelAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](tlm.ref.Append("tags_all"))
}

func (tlm transcribeLanguageModelAttributes) InputDataConfig() terra.ListValue[transcribelanguagemodel.InputDataConfigAttributes] {
	return terra.ReferenceList[transcribelanguagemodel.InputDataConfigAttributes](tlm.ref.Append("input_data_config"))
}

func (tlm transcribeLanguageModelAttributes) Timeouts() transcribelanguagemodel.TimeoutsAttributes {
	return terra.ReferenceSingle[transcribelanguagemodel.TimeoutsAttributes](tlm.ref.Append("timeouts"))
}

type transcribeLanguageModelState struct {
	Arn             string                                         `json:"arn"`
	BaseModelName   string                                         `json:"base_model_name"`
	Id              string                                         `json:"id"`
	LanguageCode    string                                         `json:"language_code"`
	ModelName       string                                         `json:"model_name"`
	Tags            map[string]string                              `json:"tags"`
	TagsAll         map[string]string                              `json:"tags_all"`
	InputDataConfig []transcribelanguagemodel.InputDataConfigState `json:"input_data_config"`
	Timeouts        *transcribelanguagemodel.TimeoutsState         `json:"timeouts"`
}
