// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	fsxbackup "github.com/golingon/terraproviders/aws/4.60.0/fsxbackup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFsxBackup(name string, args FsxBackupArgs) *FsxBackup {
	return &FsxBackup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FsxBackup)(nil)

type FsxBackup struct {
	Name  string
	Args  FsxBackupArgs
	state *fsxBackupState
}

func (fb *FsxBackup) Type() string {
	return "aws_fsx_backup"
}

func (fb *FsxBackup) LocalName() string {
	return fb.Name
}

func (fb *FsxBackup) Configuration() interface{} {
	return fb.Args
}

func (fb *FsxBackup) Attributes() fsxBackupAttributes {
	return fsxBackupAttributes{ref: terra.ReferenceResource(fb)}
}

func (fb *FsxBackup) ImportState(av io.Reader) error {
	fb.state = &fsxBackupState{}
	if err := json.NewDecoder(av).Decode(fb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fb.Type(), fb.LocalName(), err)
	}
	return nil
}

func (fb *FsxBackup) State() (*fsxBackupState, bool) {
	return fb.state, fb.state != nil
}

func (fb *FsxBackup) StateMust() *fsxBackupState {
	if fb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fb.Type(), fb.LocalName()))
	}
	return fb.state
}

func (fb *FsxBackup) DependOn() terra.Reference {
	return terra.ReferenceResource(fb)
}

type FsxBackupArgs struct {
	// FileSystemId: string, optional
	FileSystemId terra.StringValue `hcl:"file_system_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VolumeId: string, optional
	VolumeId terra.StringValue `hcl:"volume_id,attr"`
	// Timeouts: optional
	Timeouts *fsxbackup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FsxBackup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type fsxBackupAttributes struct {
	ref terra.Reference
}

func (fb fsxBackupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(fb.ref.Append("arn"))
}

func (fb fsxBackupAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceString(fb.ref.Append("file_system_id"))
}

func (fb fsxBackupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fb.ref.Append("id"))
}

func (fb fsxBackupAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(fb.ref.Append("kms_key_id"))
}

func (fb fsxBackupAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(fb.ref.Append("owner_id"))
}

func (fb fsxBackupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fb.ref.Append("tags"))
}

func (fb fsxBackupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fb.ref.Append("tags_all"))
}

func (fb fsxBackupAttributes) Type() terra.StringValue {
	return terra.ReferenceString(fb.ref.Append("type"))
}

func (fb fsxBackupAttributes) VolumeId() terra.StringValue {
	return terra.ReferenceString(fb.ref.Append("volume_id"))
}

func (fb fsxBackupAttributes) Timeouts() fsxbackup.TimeoutsAttributes {
	return terra.ReferenceSingle[fsxbackup.TimeoutsAttributes](fb.ref.Append("timeouts"))
}

type fsxBackupState struct {
	Arn          string                   `json:"arn"`
	FileSystemId string                   `json:"file_system_id"`
	Id           string                   `json:"id"`
	KmsKeyId     string                   `json:"kms_key_id"`
	OwnerId      string                   `json:"owner_id"`
	Tags         map[string]string        `json:"tags"`
	TagsAll      map[string]string        `json:"tags_all"`
	Type         string                   `json:"type"`
	VolumeId     string                   `json:"volume_id"`
	Timeouts     *fsxbackup.TimeoutsState `json:"timeouts"`
}
