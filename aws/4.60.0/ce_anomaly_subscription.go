// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ceanomalysubscription "github.com/golingon/terraproviders/aws/4.60.0/ceanomalysubscription"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCeAnomalySubscription(name string, args CeAnomalySubscriptionArgs) *CeAnomalySubscription {
	return &CeAnomalySubscription{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CeAnomalySubscription)(nil)

type CeAnomalySubscription struct {
	Name  string
	Args  CeAnomalySubscriptionArgs
	state *ceAnomalySubscriptionState
}

func (cas *CeAnomalySubscription) Type() string {
	return "aws_ce_anomaly_subscription"
}

func (cas *CeAnomalySubscription) LocalName() string {
	return cas.Name
}

func (cas *CeAnomalySubscription) Configuration() interface{} {
	return cas.Args
}

func (cas *CeAnomalySubscription) Attributes() ceAnomalySubscriptionAttributes {
	return ceAnomalySubscriptionAttributes{ref: terra.ReferenceResource(cas)}
}

func (cas *CeAnomalySubscription) ImportState(av io.Reader) error {
	cas.state = &ceAnomalySubscriptionState{}
	if err := json.NewDecoder(av).Decode(cas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cas.Type(), cas.LocalName(), err)
	}
	return nil
}

func (cas *CeAnomalySubscription) State() (*ceAnomalySubscriptionState, bool) {
	return cas.state, cas.state != nil
}

func (cas *CeAnomalySubscription) StateMust() *ceAnomalySubscriptionState {
	if cas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cas.Type(), cas.LocalName()))
	}
	return cas.state
}

func (cas *CeAnomalySubscription) DependOn() terra.Reference {
	return terra.ReferenceResource(cas)
}

type CeAnomalySubscriptionArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Frequency: string, required
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MonitorArnList: list of string, required
	MonitorArnList terra.ListValue[terra.StringValue] `hcl:"monitor_arn_list,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Threshold: number, optional
	Threshold terra.NumberValue `hcl:"threshold,attr"`
	// Subscriber: min=1
	Subscriber []ceanomalysubscription.Subscriber `hcl:"subscriber,block" validate:"min=1"`
	// ThresholdExpression: optional
	ThresholdExpression *ceanomalysubscription.ThresholdExpression `hcl:"threshold_expression,block"`
	// DependsOn contains resources that CeAnomalySubscription depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ceAnomalySubscriptionAttributes struct {
	ref terra.Reference
}

func (cas ceAnomalySubscriptionAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(cas.ref.Append("account_id"))
}

func (cas ceAnomalySubscriptionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cas.ref.Append("arn"))
}

func (cas ceAnomalySubscriptionAttributes) Frequency() terra.StringValue {
	return terra.ReferenceString(cas.ref.Append("frequency"))
}

func (cas ceAnomalySubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cas.ref.Append("id"))
}

func (cas ceAnomalySubscriptionAttributes) MonitorArnList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](cas.ref.Append("monitor_arn_list"))
}

func (cas ceAnomalySubscriptionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cas.ref.Append("name"))
}

func (cas ceAnomalySubscriptionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cas.ref.Append("tags"))
}

func (cas ceAnomalySubscriptionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cas.ref.Append("tags_all"))
}

func (cas ceAnomalySubscriptionAttributes) Threshold() terra.NumberValue {
	return terra.ReferenceNumber(cas.ref.Append("threshold"))
}

func (cas ceAnomalySubscriptionAttributes) Subscriber() terra.SetValue[ceanomalysubscription.SubscriberAttributes] {
	return terra.ReferenceSet[ceanomalysubscription.SubscriberAttributes](cas.ref.Append("subscriber"))
}

func (cas ceAnomalySubscriptionAttributes) ThresholdExpression() terra.ListValue[ceanomalysubscription.ThresholdExpressionAttributes] {
	return terra.ReferenceList[ceanomalysubscription.ThresholdExpressionAttributes](cas.ref.Append("threshold_expression"))
}

type ceAnomalySubscriptionState struct {
	AccountId           string                                           `json:"account_id"`
	Arn                 string                                           `json:"arn"`
	Frequency           string                                           `json:"frequency"`
	Id                  string                                           `json:"id"`
	MonitorArnList      []string                                         `json:"monitor_arn_list"`
	Name                string                                           `json:"name"`
	Tags                map[string]string                                `json:"tags"`
	TagsAll             map[string]string                                `json:"tags_all"`
	Threshold           float64                                          `json:"threshold"`
	Subscriber          []ceanomalysubscription.SubscriberState          `json:"subscriber"`
	ThresholdExpression []ceanomalysubscription.ThresholdExpressionState `json:"threshold_expression"`
}
