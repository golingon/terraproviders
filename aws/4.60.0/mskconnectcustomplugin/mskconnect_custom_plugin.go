// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package mskconnectcustomplugin

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Location struct {
	// S3: required
	S3 *S3 `hcl:"s3,block" validate:"required"`
}

type S3 struct {
	// BucketArn: string, required
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// FileKey: string, required
	FileKey terra.StringValue `hcl:"file_key,attr" validate:"required"`
	// ObjectVersion: string, optional
	ObjectVersion terra.StringValue `hcl:"object_version,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type LocationAttributes struct {
	ref terra.Reference
}

func (l LocationAttributes) InternalRef() terra.Reference {
	return l.ref
}

func (l LocationAttributes) InternalWithRef(ref terra.Reference) LocationAttributes {
	return LocationAttributes{ref: ref}
}

func (l LocationAttributes) InternalTokens() hclwrite.Tokens {
	return l.ref.InternalTokens()
}

func (l LocationAttributes) S3() terra.ListValue[S3Attributes] {
	return terra.ReferenceAsList[S3Attributes](l.ref.Append("s3"))
}

type S3Attributes struct {
	ref terra.Reference
}

func (s S3Attributes) InternalRef() terra.Reference {
	return s.ref
}

func (s S3Attributes) InternalWithRef(ref terra.Reference) S3Attributes {
	return S3Attributes{ref: ref}
}

func (s S3Attributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s S3Attributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_arn"))
}

func (s S3Attributes) FileKey() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("file_key"))
}

func (s S3Attributes) ObjectVersion() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("object_version"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type LocationState struct {
	S3 []S3State `json:"s3"`
}

type S3State struct {
	BucketArn     string `json:"bucket_arn"`
	FileKey       string `json:"file_key"`
	ObjectVersion string `json:"object_version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
