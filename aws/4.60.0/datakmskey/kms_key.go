// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datakmskey

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type MultiRegionConfiguration struct {
	// PrimaryKey: min=0
	PrimaryKey []PrimaryKey `hcl:"primary_key,block" validate:"min=0"`
	// ReplicaKeys: min=0
	ReplicaKeys []ReplicaKeys `hcl:"replica_keys,block" validate:"min=0"`
}

type PrimaryKey struct{}

type ReplicaKeys struct{}

type MultiRegionConfigurationAttributes struct {
	ref terra.Reference
}

func (mrc MultiRegionConfigurationAttributes) InternalRef() terra.Reference {
	return mrc.ref
}

func (mrc MultiRegionConfigurationAttributes) InternalWithRef(ref terra.Reference) MultiRegionConfigurationAttributes {
	return MultiRegionConfigurationAttributes{ref: ref}
}

func (mrc MultiRegionConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return mrc.ref.InternalTokens()
}

func (mrc MultiRegionConfigurationAttributes) MultiRegionKeyType() terra.StringValue {
	return terra.ReferenceString(mrc.ref.Append("multi_region_key_type"))
}

func (mrc MultiRegionConfigurationAttributes) PrimaryKey() terra.ListValue[PrimaryKeyAttributes] {
	return terra.ReferenceList[PrimaryKeyAttributes](mrc.ref.Append("primary_key"))
}

func (mrc MultiRegionConfigurationAttributes) ReplicaKeys() terra.ListValue[ReplicaKeysAttributes] {
	return terra.ReferenceList[ReplicaKeysAttributes](mrc.ref.Append("replica_keys"))
}

type PrimaryKeyAttributes struct {
	ref terra.Reference
}

func (pk PrimaryKeyAttributes) InternalRef() terra.Reference {
	return pk.ref
}

func (pk PrimaryKeyAttributes) InternalWithRef(ref terra.Reference) PrimaryKeyAttributes {
	return PrimaryKeyAttributes{ref: ref}
}

func (pk PrimaryKeyAttributes) InternalTokens() hclwrite.Tokens {
	return pk.ref.InternalTokens()
}

func (pk PrimaryKeyAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(pk.ref.Append("arn"))
}

func (pk PrimaryKeyAttributes) Region() terra.StringValue {
	return terra.ReferenceString(pk.ref.Append("region"))
}

type ReplicaKeysAttributes struct {
	ref terra.Reference
}

func (rk ReplicaKeysAttributes) InternalRef() terra.Reference {
	return rk.ref
}

func (rk ReplicaKeysAttributes) InternalWithRef(ref terra.Reference) ReplicaKeysAttributes {
	return ReplicaKeysAttributes{ref: ref}
}

func (rk ReplicaKeysAttributes) InternalTokens() hclwrite.Tokens {
	return rk.ref.InternalTokens()
}

func (rk ReplicaKeysAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rk.ref.Append("arn"))
}

func (rk ReplicaKeysAttributes) Region() terra.StringValue {
	return terra.ReferenceString(rk.ref.Append("region"))
}

type MultiRegionConfigurationState struct {
	MultiRegionKeyType string             `json:"multi_region_key_type"`
	PrimaryKey         []PrimaryKeyState  `json:"primary_key"`
	ReplicaKeys        []ReplicaKeysState `json:"replica_keys"`
}

type PrimaryKeyState struct {
	Arn    string `json:"arn"`
	Region string `json:"region"`
}

type ReplicaKeysState struct {
	Arn    string `json:"arn"`
	Region string `json:"region"`
}
