// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package s3controlobjectlambdaaccesspoint

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Configuration struct {
	// AllowedFeatures: set of string, optional
	AllowedFeatures terra.SetValue[terra.StringValue] `hcl:"allowed_features,attr"`
	// CloudWatchMetricsEnabled: bool, optional
	CloudWatchMetricsEnabled terra.BoolValue `hcl:"cloud_watch_metrics_enabled,attr"`
	// SupportingAccessPoint: string, required
	SupportingAccessPoint terra.StringValue `hcl:"supporting_access_point,attr" validate:"required"`
	// TransformationConfiguration: min=1
	TransformationConfiguration []TransformationConfiguration `hcl:"transformation_configuration,block" validate:"min=1"`
}

type TransformationConfiguration struct {
	// Actions: set of string, required
	Actions terra.SetValue[terra.StringValue] `hcl:"actions,attr" validate:"required"`
	// ContentTransformation: required
	ContentTransformation *ContentTransformation `hcl:"content_transformation,block" validate:"required"`
}

type ContentTransformation struct {
	// AwsLambda: required
	AwsLambda *AwsLambda `hcl:"aws_lambda,block" validate:"required"`
}

type AwsLambda struct {
	// FunctionArn: string, required
	FunctionArn terra.StringValue `hcl:"function_arn,attr" validate:"required"`
	// FunctionPayload: string, optional
	FunctionPayload terra.StringValue `hcl:"function_payload,attr"`
}

type ConfigurationAttributes struct {
	ref terra.Reference
}

func (c ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c ConfigurationAttributes) InternalWithRef(ref terra.Reference) ConfigurationAttributes {
	return ConfigurationAttributes{ref: ref}
}

func (c ConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c ConfigurationAttributes) AllowedFeatures() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](c.ref.Append("allowed_features"))
}

func (c ConfigurationAttributes) CloudWatchMetricsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("cloud_watch_metrics_enabled"))
}

func (c ConfigurationAttributes) SupportingAccessPoint() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("supporting_access_point"))
}

func (c ConfigurationAttributes) TransformationConfiguration() terra.SetValue[TransformationConfigurationAttributes] {
	return terra.ReferenceAsSet[TransformationConfigurationAttributes](c.ref.Append("transformation_configuration"))
}

type TransformationConfigurationAttributes struct {
	ref terra.Reference
}

func (tc TransformationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TransformationConfigurationAttributes) InternalWithRef(ref terra.Reference) TransformationConfigurationAttributes {
	return TransformationConfigurationAttributes{ref: ref}
}

func (tc TransformationConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return tc.ref.InternalTokens()
}

func (tc TransformationConfigurationAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tc.ref.Append("actions"))
}

func (tc TransformationConfigurationAttributes) ContentTransformation() terra.ListValue[ContentTransformationAttributes] {
	return terra.ReferenceAsList[ContentTransformationAttributes](tc.ref.Append("content_transformation"))
}

type ContentTransformationAttributes struct {
	ref terra.Reference
}

func (ct ContentTransformationAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct ContentTransformationAttributes) InternalWithRef(ref terra.Reference) ContentTransformationAttributes {
	return ContentTransformationAttributes{ref: ref}
}

func (ct ContentTransformationAttributes) InternalTokens() hclwrite.Tokens {
	return ct.ref.InternalTokens()
}

func (ct ContentTransformationAttributes) AwsLambda() terra.ListValue[AwsLambdaAttributes] {
	return terra.ReferenceAsList[AwsLambdaAttributes](ct.ref.Append("aws_lambda"))
}

type AwsLambdaAttributes struct {
	ref terra.Reference
}

func (al AwsLambdaAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al AwsLambdaAttributes) InternalWithRef(ref terra.Reference) AwsLambdaAttributes {
	return AwsLambdaAttributes{ref: ref}
}

func (al AwsLambdaAttributes) InternalTokens() hclwrite.Tokens {
	return al.ref.InternalTokens()
}

func (al AwsLambdaAttributes) FunctionArn() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("function_arn"))
}

func (al AwsLambdaAttributes) FunctionPayload() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("function_payload"))
}

type ConfigurationState struct {
	AllowedFeatures             []string                           `json:"allowed_features"`
	CloudWatchMetricsEnabled    bool                               `json:"cloud_watch_metrics_enabled"`
	SupportingAccessPoint       string                             `json:"supporting_access_point"`
	TransformationConfiguration []TransformationConfigurationState `json:"transformation_configuration"`
}

type TransformationConfigurationState struct {
	Actions               []string                     `json:"actions"`
	ContentTransformation []ContentTransformationState `json:"content_transformation"`
}

type ContentTransformationState struct {
	AwsLambda []AwsLambdaState `json:"aws_lambda"`
}

type AwsLambdaState struct {
	FunctionArn     string `json:"function_arn"`
	FunctionPayload string `json:"function_payload"`
}
