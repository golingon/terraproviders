// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewPlacementGroup(name string, args PlacementGroupArgs) *PlacementGroup {
	return &PlacementGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*PlacementGroup)(nil)

type PlacementGroup struct {
	Name  string
	Args  PlacementGroupArgs
	state *placementGroupState
}

func (pg *PlacementGroup) Type() string {
	return "aws_placement_group"
}

func (pg *PlacementGroup) LocalName() string {
	return pg.Name
}

func (pg *PlacementGroup) Configuration() interface{} {
	return pg.Args
}

func (pg *PlacementGroup) Attributes() placementGroupAttributes {
	return placementGroupAttributes{ref: terra.ReferenceResource(pg)}
}

func (pg *PlacementGroup) ImportState(av io.Reader) error {
	pg.state = &placementGroupState{}
	if err := json.NewDecoder(av).Decode(pg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", pg.Type(), pg.LocalName(), err)
	}
	return nil
}

func (pg *PlacementGroup) State() (*placementGroupState, bool) {
	return pg.state, pg.state != nil
}

func (pg *PlacementGroup) StateMust() *placementGroupState {
	if pg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", pg.Type(), pg.LocalName()))
	}
	return pg.state
}

func (pg *PlacementGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(pg)
}

type PlacementGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PartitionCount: number, optional
	PartitionCount terra.NumberValue `hcl:"partition_count,attr"`
	// SpreadLevel: string, optional
	SpreadLevel terra.StringValue `hcl:"spread_level,attr"`
	// Strategy: string, required
	Strategy terra.StringValue `hcl:"strategy,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that PlacementGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type placementGroupAttributes struct {
	ref terra.Reference
}

func (pg placementGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(pg.ref.Append("arn"))
}

func (pg placementGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pg.ref.Append("id"))
}

func (pg placementGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(pg.ref.Append("name"))
}

func (pg placementGroupAttributes) PartitionCount() terra.NumberValue {
	return terra.ReferenceNumber(pg.ref.Append("partition_count"))
}

func (pg placementGroupAttributes) PlacementGroupId() terra.StringValue {
	return terra.ReferenceString(pg.ref.Append("placement_group_id"))
}

func (pg placementGroupAttributes) SpreadLevel() terra.StringValue {
	return terra.ReferenceString(pg.ref.Append("spread_level"))
}

func (pg placementGroupAttributes) Strategy() terra.StringValue {
	return terra.ReferenceString(pg.ref.Append("strategy"))
}

func (pg placementGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pg.ref.Append("tags"))
}

func (pg placementGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](pg.ref.Append("tags_all"))
}

type placementGroupState struct {
	Arn              string            `json:"arn"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	PartitionCount   float64           `json:"partition_count"`
	PlacementGroupId string            `json:"placement_group_id"`
	SpreadLevel      string            `json:"spread_level"`
	Strategy         string            `json:"strategy"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
}
