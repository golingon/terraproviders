// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGlacierVaultLock(name string, args GlacierVaultLockArgs) *GlacierVaultLock {
	return &GlacierVaultLock{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GlacierVaultLock)(nil)

type GlacierVaultLock struct {
	Name  string
	Args  GlacierVaultLockArgs
	state *glacierVaultLockState
}

func (gvl *GlacierVaultLock) Type() string {
	return "aws_glacier_vault_lock"
}

func (gvl *GlacierVaultLock) LocalName() string {
	return gvl.Name
}

func (gvl *GlacierVaultLock) Configuration() interface{} {
	return gvl.Args
}

func (gvl *GlacierVaultLock) Attributes() glacierVaultLockAttributes {
	return glacierVaultLockAttributes{ref: terra.ReferenceResource(gvl)}
}

func (gvl *GlacierVaultLock) ImportState(av io.Reader) error {
	gvl.state = &glacierVaultLockState{}
	if err := json.NewDecoder(av).Decode(gvl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gvl.Type(), gvl.LocalName(), err)
	}
	return nil
}

func (gvl *GlacierVaultLock) State() (*glacierVaultLockState, bool) {
	return gvl.state, gvl.state != nil
}

func (gvl *GlacierVaultLock) StateMust() *glacierVaultLockState {
	if gvl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gvl.Type(), gvl.LocalName()))
	}
	return gvl.state
}

func (gvl *GlacierVaultLock) DependOn() terra.Reference {
	return terra.ReferenceResource(gvl)
}

type GlacierVaultLockArgs struct {
	// CompleteLock: bool, required
	CompleteLock terra.BoolValue `hcl:"complete_lock,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IgnoreDeletionError: bool, optional
	IgnoreDeletionError terra.BoolValue `hcl:"ignore_deletion_error,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// VaultName: string, required
	VaultName terra.StringValue `hcl:"vault_name,attr" validate:"required"`
	// DependsOn contains resources that GlacierVaultLock depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type glacierVaultLockAttributes struct {
	ref terra.Reference
}

func (gvl glacierVaultLockAttributes) CompleteLock() terra.BoolValue {
	return terra.ReferenceBool(gvl.ref.Append("complete_lock"))
}

func (gvl glacierVaultLockAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gvl.ref.Append("id"))
}

func (gvl glacierVaultLockAttributes) IgnoreDeletionError() terra.BoolValue {
	return terra.ReferenceBool(gvl.ref.Append("ignore_deletion_error"))
}

func (gvl glacierVaultLockAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(gvl.ref.Append("policy"))
}

func (gvl glacierVaultLockAttributes) VaultName() terra.StringValue {
	return terra.ReferenceString(gvl.ref.Append("vault_name"))
}

type glacierVaultLockState struct {
	CompleteLock        bool   `json:"complete_lock"`
	Id                  string `json:"id"`
	IgnoreDeletionError bool   `json:"ignore_deletion_error"`
	Policy              string `json:"policy"`
	VaultName           string `json:"vault_name"`
}
