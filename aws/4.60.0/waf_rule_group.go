// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	wafrulegroup "github.com/golingon/terraproviders/aws/4.60.0/wafrulegroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWafRuleGroup(name string, args WafRuleGroupArgs) *WafRuleGroup {
	return &WafRuleGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WafRuleGroup)(nil)

type WafRuleGroup struct {
	Name  string
	Args  WafRuleGroupArgs
	state *wafRuleGroupState
}

func (wrg *WafRuleGroup) Type() string {
	return "aws_waf_rule_group"
}

func (wrg *WafRuleGroup) LocalName() string {
	return wrg.Name
}

func (wrg *WafRuleGroup) Configuration() interface{} {
	return wrg.Args
}

func (wrg *WafRuleGroup) Attributes() wafRuleGroupAttributes {
	return wafRuleGroupAttributes{ref: terra.ReferenceResource(wrg)}
}

func (wrg *WafRuleGroup) ImportState(av io.Reader) error {
	wrg.state = &wafRuleGroupState{}
	if err := json.NewDecoder(av).Decode(wrg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wrg.Type(), wrg.LocalName(), err)
	}
	return nil
}

func (wrg *WafRuleGroup) State() (*wafRuleGroupState, bool) {
	return wrg.state, wrg.state != nil
}

func (wrg *WafRuleGroup) StateMust() *wafRuleGroupState {
	if wrg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wrg.Type(), wrg.LocalName()))
	}
	return wrg.state
}

func (wrg *WafRuleGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(wrg)
}

type WafRuleGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MetricName: string, required
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ActivatedRule: min=0
	ActivatedRule []wafrulegroup.ActivatedRule `hcl:"activated_rule,block" validate:"min=0"`
	// DependsOn contains resources that WafRuleGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type wafRuleGroupAttributes struct {
	ref terra.Reference
}

func (wrg wafRuleGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("arn"))
}

func (wrg wafRuleGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("id"))
}

func (wrg wafRuleGroupAttributes) MetricName() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("metric_name"))
}

func (wrg wafRuleGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wrg.ref.Append("name"))
}

func (wrg wafRuleGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wrg.ref.Append("tags"))
}

func (wrg wafRuleGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wrg.ref.Append("tags_all"))
}

func (wrg wafRuleGroupAttributes) ActivatedRule() terra.SetValue[wafrulegroup.ActivatedRuleAttributes] {
	return terra.ReferenceSet[wafrulegroup.ActivatedRuleAttributes](wrg.ref.Append("activated_rule"))
}

type wafRuleGroupState struct {
	Arn           string                            `json:"arn"`
	Id            string                            `json:"id"`
	MetricName    string                            `json:"metric_name"`
	Name          string                            `json:"name"`
	Tags          map[string]string                 `json:"tags"`
	TagsAll       map[string]string                 `json:"tags_all"`
	ActivatedRule []wafrulegroup.ActivatedRuleState `json:"activated_rule"`
}
