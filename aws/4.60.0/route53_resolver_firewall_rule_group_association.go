// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53ResolverFirewallRuleGroupAssociation(name string, args Route53ResolverFirewallRuleGroupAssociationArgs) *Route53ResolverFirewallRuleGroupAssociation {
	return &Route53ResolverFirewallRuleGroupAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53ResolverFirewallRuleGroupAssociation)(nil)

type Route53ResolverFirewallRuleGroupAssociation struct {
	Name  string
	Args  Route53ResolverFirewallRuleGroupAssociationArgs
	state *route53ResolverFirewallRuleGroupAssociationState
}

func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) Type() string {
	return "aws_route53_resolver_firewall_rule_group_association"
}

func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) LocalName() string {
	return rrfrga.Name
}

func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) Configuration() interface{} {
	return rrfrga.Args
}

func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) Attributes() route53ResolverFirewallRuleGroupAssociationAttributes {
	return route53ResolverFirewallRuleGroupAssociationAttributes{ref: terra.ReferenceResource(rrfrga)}
}

func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) ImportState(av io.Reader) error {
	rrfrga.state = &route53ResolverFirewallRuleGroupAssociationState{}
	if err := json.NewDecoder(av).Decode(rrfrga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrfrga.Type(), rrfrga.LocalName(), err)
	}
	return nil
}

func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) State() (*route53ResolverFirewallRuleGroupAssociationState, bool) {
	return rrfrga.state, rrfrga.state != nil
}

func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) StateMust() *route53ResolverFirewallRuleGroupAssociationState {
	if rrfrga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrfrga.Type(), rrfrga.LocalName()))
	}
	return rrfrga.state
}

func (rrfrga *Route53ResolverFirewallRuleGroupAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(rrfrga)
}

type Route53ResolverFirewallRuleGroupAssociationArgs struct {
	// FirewallRuleGroupId: string, required
	FirewallRuleGroupId terra.StringValue `hcl:"firewall_rule_group_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MutationProtection: string, optional
	MutationProtection terra.StringValue `hcl:"mutation_protection,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Priority: number, required
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// DependsOn contains resources that Route53ResolverFirewallRuleGroupAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53ResolverFirewallRuleGroupAssociationAttributes struct {
	ref terra.Reference
}

func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rrfrga.ref.Append("arn"))
}

func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) FirewallRuleGroupId() terra.StringValue {
	return terra.ReferenceString(rrfrga.ref.Append("firewall_rule_group_id"))
}

func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rrfrga.ref.Append("id"))
}

func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) MutationProtection() terra.StringValue {
	return terra.ReferenceString(rrfrga.ref.Append("mutation_protection"))
}

func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rrfrga.ref.Append("name"))
}

func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(rrfrga.ref.Append("priority"))
}

func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrfrga.ref.Append("tags"))
}

func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrfrga.ref.Append("tags_all"))
}

func (rrfrga route53ResolverFirewallRuleGroupAssociationAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(rrfrga.ref.Append("vpc_id"))
}

type route53ResolverFirewallRuleGroupAssociationState struct {
	Arn                 string            `json:"arn"`
	FirewallRuleGroupId string            `json:"firewall_rule_group_id"`
	Id                  string            `json:"id"`
	MutationProtection  string            `json:"mutation_protection"`
	Name                string            `json:"name"`
	Priority            float64           `json:"priority"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
	VpcId               string            `json:"vpc_id"`
}
