// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamVirtualMfaDevice(name string, args IamVirtualMfaDeviceArgs) *IamVirtualMfaDevice {
	return &IamVirtualMfaDevice{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamVirtualMfaDevice)(nil)

type IamVirtualMfaDevice struct {
	Name  string
	Args  IamVirtualMfaDeviceArgs
	state *iamVirtualMfaDeviceState
}

func (ivmd *IamVirtualMfaDevice) Type() string {
	return "aws_iam_virtual_mfa_device"
}

func (ivmd *IamVirtualMfaDevice) LocalName() string {
	return ivmd.Name
}

func (ivmd *IamVirtualMfaDevice) Configuration() interface{} {
	return ivmd.Args
}

func (ivmd *IamVirtualMfaDevice) Attributes() iamVirtualMfaDeviceAttributes {
	return iamVirtualMfaDeviceAttributes{ref: terra.ReferenceResource(ivmd)}
}

func (ivmd *IamVirtualMfaDevice) ImportState(av io.Reader) error {
	ivmd.state = &iamVirtualMfaDeviceState{}
	if err := json.NewDecoder(av).Decode(ivmd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ivmd.Type(), ivmd.LocalName(), err)
	}
	return nil
}

func (ivmd *IamVirtualMfaDevice) State() (*iamVirtualMfaDeviceState, bool) {
	return ivmd.state, ivmd.state != nil
}

func (ivmd *IamVirtualMfaDevice) StateMust() *iamVirtualMfaDeviceState {
	if ivmd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ivmd.Type(), ivmd.LocalName()))
	}
	return ivmd.state
}

func (ivmd *IamVirtualMfaDevice) DependOn() terra.Reference {
	return terra.ReferenceResource(ivmd)
}

type IamVirtualMfaDeviceArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VirtualMfaDeviceName: string, required
	VirtualMfaDeviceName terra.StringValue `hcl:"virtual_mfa_device_name,attr" validate:"required"`
	// DependsOn contains resources that IamVirtualMfaDevice depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamVirtualMfaDeviceAttributes struct {
	ref terra.Reference
}

func (ivmd iamVirtualMfaDeviceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ivmd.ref.Append("arn"))
}

func (ivmd iamVirtualMfaDeviceAttributes) Base32StringSeed() terra.StringValue {
	return terra.ReferenceString(ivmd.ref.Append("base_32_string_seed"))
}

func (ivmd iamVirtualMfaDeviceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ivmd.ref.Append("id"))
}

func (ivmd iamVirtualMfaDeviceAttributes) Path() terra.StringValue {
	return terra.ReferenceString(ivmd.ref.Append("path"))
}

func (ivmd iamVirtualMfaDeviceAttributes) QrCodePng() terra.StringValue {
	return terra.ReferenceString(ivmd.ref.Append("qr_code_png"))
}

func (ivmd iamVirtualMfaDeviceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ivmd.ref.Append("tags"))
}

func (ivmd iamVirtualMfaDeviceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ivmd.ref.Append("tags_all"))
}

func (ivmd iamVirtualMfaDeviceAttributes) VirtualMfaDeviceName() terra.StringValue {
	return terra.ReferenceString(ivmd.ref.Append("virtual_mfa_device_name"))
}

type iamVirtualMfaDeviceState struct {
	Arn                  string            `json:"arn"`
	Base32StringSeed     string            `json:"base_32_string_seed"`
	Id                   string            `json:"id"`
	Path                 string            `json:"path"`
	QrCodePng            string            `json:"qr_code_png"`
	Tags                 map[string]string `json:"tags"`
	TagsAll              map[string]string `json:"tags_all"`
	VirtualMfaDeviceName string            `json:"virtual_mfa_device_name"`
}
