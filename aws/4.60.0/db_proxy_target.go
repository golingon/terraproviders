// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDbProxyTarget(name string, args DbProxyTargetArgs) *DbProxyTarget {
	return &DbProxyTarget{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DbProxyTarget)(nil)

type DbProxyTarget struct {
	Name  string
	Args  DbProxyTargetArgs
	state *dbProxyTargetState
}

func (dpt *DbProxyTarget) Type() string {
	return "aws_db_proxy_target"
}

func (dpt *DbProxyTarget) LocalName() string {
	return dpt.Name
}

func (dpt *DbProxyTarget) Configuration() interface{} {
	return dpt.Args
}

func (dpt *DbProxyTarget) Attributes() dbProxyTargetAttributes {
	return dbProxyTargetAttributes{ref: terra.ReferenceResource(dpt)}
}

func (dpt *DbProxyTarget) ImportState(av io.Reader) error {
	dpt.state = &dbProxyTargetState{}
	if err := json.NewDecoder(av).Decode(dpt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dpt.Type(), dpt.LocalName(), err)
	}
	return nil
}

func (dpt *DbProxyTarget) State() (*dbProxyTargetState, bool) {
	return dpt.state, dpt.state != nil
}

func (dpt *DbProxyTarget) StateMust() *dbProxyTargetState {
	if dpt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dpt.Type(), dpt.LocalName()))
	}
	return dpt.state
}

func (dpt *DbProxyTarget) DependOn() terra.Reference {
	return terra.ReferenceResource(dpt)
}

type DbProxyTargetArgs struct {
	// DbClusterIdentifier: string, optional
	DbClusterIdentifier terra.StringValue `hcl:"db_cluster_identifier,attr"`
	// DbInstanceIdentifier: string, optional
	DbInstanceIdentifier terra.StringValue `hcl:"db_instance_identifier,attr"`
	// DbProxyName: string, required
	DbProxyName terra.StringValue `hcl:"db_proxy_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TargetGroupName: string, required
	TargetGroupName terra.StringValue `hcl:"target_group_name,attr" validate:"required"`
	// DependsOn contains resources that DbProxyTarget depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dbProxyTargetAttributes struct {
	ref terra.Reference
}

func (dpt dbProxyTargetAttributes) DbClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(dpt.ref.Append("db_cluster_identifier"))
}

func (dpt dbProxyTargetAttributes) DbInstanceIdentifier() terra.StringValue {
	return terra.ReferenceString(dpt.ref.Append("db_instance_identifier"))
}

func (dpt dbProxyTargetAttributes) DbProxyName() terra.StringValue {
	return terra.ReferenceString(dpt.ref.Append("db_proxy_name"))
}

func (dpt dbProxyTargetAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(dpt.ref.Append("endpoint"))
}

func (dpt dbProxyTargetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dpt.ref.Append("id"))
}

func (dpt dbProxyTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(dpt.ref.Append("port"))
}

func (dpt dbProxyTargetAttributes) RdsResourceId() terra.StringValue {
	return terra.ReferenceString(dpt.ref.Append("rds_resource_id"))
}

func (dpt dbProxyTargetAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceString(dpt.ref.Append("target_arn"))
}

func (dpt dbProxyTargetAttributes) TargetGroupName() terra.StringValue {
	return terra.ReferenceString(dpt.ref.Append("target_group_name"))
}

func (dpt dbProxyTargetAttributes) TrackedClusterId() terra.StringValue {
	return terra.ReferenceString(dpt.ref.Append("tracked_cluster_id"))
}

func (dpt dbProxyTargetAttributes) Type() terra.StringValue {
	return terra.ReferenceString(dpt.ref.Append("type"))
}

type dbProxyTargetState struct {
	DbClusterIdentifier  string  `json:"db_cluster_identifier"`
	DbInstanceIdentifier string  `json:"db_instance_identifier"`
	DbProxyName          string  `json:"db_proxy_name"`
	Endpoint             string  `json:"endpoint"`
	Id                   string  `json:"id"`
	Port                 float64 `json:"port"`
	RdsResourceId        string  `json:"rds_resource_id"`
	TargetArn            string  `json:"target_arn"`
	TargetGroupName      string  `json:"target_group_name"`
	TrackedClusterId     string  `json:"tracked_cluster_id"`
	Type                 string  `json:"type"`
}
