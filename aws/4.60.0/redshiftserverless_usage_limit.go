// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftserverlessUsageLimit(name string, args RedshiftserverlessUsageLimitArgs) *RedshiftserverlessUsageLimit {
	return &RedshiftserverlessUsageLimit{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftserverlessUsageLimit)(nil)

type RedshiftserverlessUsageLimit struct {
	Name  string
	Args  RedshiftserverlessUsageLimitArgs
	state *redshiftserverlessUsageLimitState
}

func (rul *RedshiftserverlessUsageLimit) Type() string {
	return "aws_redshiftserverless_usage_limit"
}

func (rul *RedshiftserverlessUsageLimit) LocalName() string {
	return rul.Name
}

func (rul *RedshiftserverlessUsageLimit) Configuration() interface{} {
	return rul.Args
}

func (rul *RedshiftserverlessUsageLimit) Attributes() redshiftserverlessUsageLimitAttributes {
	return redshiftserverlessUsageLimitAttributes{ref: terra.ReferenceResource(rul)}
}

func (rul *RedshiftserverlessUsageLimit) ImportState(av io.Reader) error {
	rul.state = &redshiftserverlessUsageLimitState{}
	if err := json.NewDecoder(av).Decode(rul.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rul.Type(), rul.LocalName(), err)
	}
	return nil
}

func (rul *RedshiftserverlessUsageLimit) State() (*redshiftserverlessUsageLimitState, bool) {
	return rul.state, rul.state != nil
}

func (rul *RedshiftserverlessUsageLimit) StateMust() *redshiftserverlessUsageLimitState {
	if rul.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rul.Type(), rul.LocalName()))
	}
	return rul.state
}

func (rul *RedshiftserverlessUsageLimit) DependOn() terra.Reference {
	return terra.ReferenceResource(rul)
}

type RedshiftserverlessUsageLimitArgs struct {
	// Amount: number, required
	Amount terra.NumberValue `hcl:"amount,attr" validate:"required"`
	// BreachAction: string, optional
	BreachAction terra.StringValue `hcl:"breach_action,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Period: string, optional
	Period terra.StringValue `hcl:"period,attr"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// UsageType: string, required
	UsageType terra.StringValue `hcl:"usage_type,attr" validate:"required"`
	// DependsOn contains resources that RedshiftserverlessUsageLimit depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftserverlessUsageLimitAttributes struct {
	ref terra.Reference
}

func (rul redshiftserverlessUsageLimitAttributes) Amount() terra.NumberValue {
	return terra.ReferenceNumber(rul.ref.Append("amount"))
}

func (rul redshiftserverlessUsageLimitAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rul.ref.Append("arn"))
}

func (rul redshiftserverlessUsageLimitAttributes) BreachAction() terra.StringValue {
	return terra.ReferenceString(rul.ref.Append("breach_action"))
}

func (rul redshiftserverlessUsageLimitAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rul.ref.Append("id"))
}

func (rul redshiftserverlessUsageLimitAttributes) Period() terra.StringValue {
	return terra.ReferenceString(rul.ref.Append("period"))
}

func (rul redshiftserverlessUsageLimitAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceString(rul.ref.Append("resource_arn"))
}

func (rul redshiftserverlessUsageLimitAttributes) UsageType() terra.StringValue {
	return terra.ReferenceString(rul.ref.Append("usage_type"))
}

type redshiftserverlessUsageLimitState struct {
	Amount       float64 `json:"amount"`
	Arn          string  `json:"arn"`
	BreachAction string  `json:"breach_action"`
	Id           string  `json:"id"`
	Period       string  `json:"period"`
	ResourceArn  string  `json:"resource_arn"`
	UsageType    string  `json:"usage_type"`
}
