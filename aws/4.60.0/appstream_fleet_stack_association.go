// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppstreamFleetStackAssociation(name string, args AppstreamFleetStackAssociationArgs) *AppstreamFleetStackAssociation {
	return &AppstreamFleetStackAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppstreamFleetStackAssociation)(nil)

type AppstreamFleetStackAssociation struct {
	Name  string
	Args  AppstreamFleetStackAssociationArgs
	state *appstreamFleetStackAssociationState
}

func (afsa *AppstreamFleetStackAssociation) Type() string {
	return "aws_appstream_fleet_stack_association"
}

func (afsa *AppstreamFleetStackAssociation) LocalName() string {
	return afsa.Name
}

func (afsa *AppstreamFleetStackAssociation) Configuration() interface{} {
	return afsa.Args
}

func (afsa *AppstreamFleetStackAssociation) Attributes() appstreamFleetStackAssociationAttributes {
	return appstreamFleetStackAssociationAttributes{ref: terra.ReferenceResource(afsa)}
}

func (afsa *AppstreamFleetStackAssociation) ImportState(av io.Reader) error {
	afsa.state = &appstreamFleetStackAssociationState{}
	if err := json.NewDecoder(av).Decode(afsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", afsa.Type(), afsa.LocalName(), err)
	}
	return nil
}

func (afsa *AppstreamFleetStackAssociation) State() (*appstreamFleetStackAssociationState, bool) {
	return afsa.state, afsa.state != nil
}

func (afsa *AppstreamFleetStackAssociation) StateMust() *appstreamFleetStackAssociationState {
	if afsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", afsa.Type(), afsa.LocalName()))
	}
	return afsa.state
}

func (afsa *AppstreamFleetStackAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(afsa)
}

type AppstreamFleetStackAssociationArgs struct {
	// FleetName: string, required
	FleetName terra.StringValue `hcl:"fleet_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// StackName: string, required
	StackName terra.StringValue `hcl:"stack_name,attr" validate:"required"`
	// DependsOn contains resources that AppstreamFleetStackAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appstreamFleetStackAssociationAttributes struct {
	ref terra.Reference
}

func (afsa appstreamFleetStackAssociationAttributes) FleetName() terra.StringValue {
	return terra.ReferenceString(afsa.ref.Append("fleet_name"))
}

func (afsa appstreamFleetStackAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(afsa.ref.Append("id"))
}

func (afsa appstreamFleetStackAssociationAttributes) StackName() terra.StringValue {
	return terra.ReferenceString(afsa.ref.Append("stack_name"))
}

type appstreamFleetStackAssociationState struct {
	FleetName string `json:"fleet_name"`
	Id        string `json:"id"`
	StackName string `json:"stack_name"`
}
