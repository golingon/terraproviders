// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	memorydbuser "github.com/golingon/terraproviders/aws/4.60.0/memorydbuser"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMemorydbUser(name string, args MemorydbUserArgs) *MemorydbUser {
	return &MemorydbUser{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MemorydbUser)(nil)

type MemorydbUser struct {
	Name  string
	Args  MemorydbUserArgs
	state *memorydbUserState
}

func (mu *MemorydbUser) Type() string {
	return "aws_memorydb_user"
}

func (mu *MemorydbUser) LocalName() string {
	return mu.Name
}

func (mu *MemorydbUser) Configuration() interface{} {
	return mu.Args
}

func (mu *MemorydbUser) Attributes() memorydbUserAttributes {
	return memorydbUserAttributes{ref: terra.ReferenceResource(mu)}
}

func (mu *MemorydbUser) ImportState(av io.Reader) error {
	mu.state = &memorydbUserState{}
	if err := json.NewDecoder(av).Decode(mu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mu.Type(), mu.LocalName(), err)
	}
	return nil
}

func (mu *MemorydbUser) State() (*memorydbUserState, bool) {
	return mu.state, mu.state != nil
}

func (mu *MemorydbUser) StateMust() *memorydbUserState {
	if mu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mu.Type(), mu.LocalName()))
	}
	return mu.state
}

func (mu *MemorydbUser) DependOn() terra.Reference {
	return terra.ReferenceResource(mu)
}

type MemorydbUserArgs struct {
	// AccessString: string, required
	AccessString terra.StringValue `hcl:"access_string,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserName: string, required
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
	// AuthenticationMode: required
	AuthenticationMode *memorydbuser.AuthenticationMode `hcl:"authentication_mode,block" validate:"required"`
	// DependsOn contains resources that MemorydbUser depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type memorydbUserAttributes struct {
	ref terra.Reference
}

func (mu memorydbUserAttributes) AccessString() terra.StringValue {
	return terra.ReferenceString(mu.ref.Append("access_string"))
}

func (mu memorydbUserAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(mu.ref.Append("arn"))
}

func (mu memorydbUserAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mu.ref.Append("id"))
}

func (mu memorydbUserAttributes) MinimumEngineVersion() terra.StringValue {
	return terra.ReferenceString(mu.ref.Append("minimum_engine_version"))
}

func (mu memorydbUserAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mu.ref.Append("tags"))
}

func (mu memorydbUserAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mu.ref.Append("tags_all"))
}

func (mu memorydbUserAttributes) UserName() terra.StringValue {
	return terra.ReferenceString(mu.ref.Append("user_name"))
}

func (mu memorydbUserAttributes) AuthenticationMode() terra.ListValue[memorydbuser.AuthenticationModeAttributes] {
	return terra.ReferenceList[memorydbuser.AuthenticationModeAttributes](mu.ref.Append("authentication_mode"))
}

type memorydbUserState struct {
	AccessString         string                                 `json:"access_string"`
	Arn                  string                                 `json:"arn"`
	Id                   string                                 `json:"id"`
	MinimumEngineVersion string                                 `json:"minimum_engine_version"`
	Tags                 map[string]string                      `json:"tags"`
	TagsAll              map[string]string                      `json:"tags_all"`
	UserName             string                                 `json:"user_name"`
	AuthenticationMode   []memorydbuser.AuthenticationModeState `json:"authentication_mode"`
}
