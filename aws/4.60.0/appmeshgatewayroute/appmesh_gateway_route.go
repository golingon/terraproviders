// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package appmeshgatewayroute

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Spec struct {
	// GrpcRoute: optional
	GrpcRoute *GrpcRoute `hcl:"grpc_route,block"`
	// Http2Route: optional
	Http2Route *Http2Route `hcl:"http2_route,block"`
	// HttpRoute: optional
	HttpRoute *HttpRoute `hcl:"http_route,block"`
}

type GrpcRoute struct {
	// GrpcRouteAction: required
	Action *GrpcRouteAction `hcl:"action,block" validate:"required"`
	// GrpcRouteMatch: required
	Match *GrpcRouteMatch `hcl:"match,block" validate:"required"`
}

type GrpcRouteAction struct {
	// GrpcRouteActionTarget: required
	Target *GrpcRouteActionTarget `hcl:"target,block" validate:"required"`
}

type GrpcRouteActionTarget struct {
	// GrpcRouteActionTargetVirtualService: required
	VirtualService *GrpcRouteActionTargetVirtualService `hcl:"virtual_service,block" validate:"required"`
}

type GrpcRouteActionTargetVirtualService struct {
	// VirtualServiceName: string, required
	VirtualServiceName terra.StringValue `hcl:"virtual_service_name,attr" validate:"required"`
}

type GrpcRouteMatch struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
}

type Http2Route struct {
	// Http2RouteAction: required
	Action *Http2RouteAction `hcl:"action,block" validate:"required"`
	// Http2RouteMatch: required
	Match *Http2RouteMatch `hcl:"match,block" validate:"required"`
}

type Http2RouteAction struct {
	// Http2RouteActionRewrite: optional
	Rewrite *Http2RouteActionRewrite `hcl:"rewrite,block"`
	// Http2RouteActionTarget: required
	Target *Http2RouteActionTarget `hcl:"target,block" validate:"required"`
}

type Http2RouteActionRewrite struct {
	// Http2RouteActionRewriteHostname: optional
	Hostname *Http2RouteActionRewriteHostname `hcl:"hostname,block"`
	// Http2RouteActionRewritePrefix: optional
	Prefix *Http2RouteActionRewritePrefix `hcl:"prefix,block"`
}

type Http2RouteActionRewriteHostname struct {
	// DefaultTargetHostname: string, required
	DefaultTargetHostname terra.StringValue `hcl:"default_target_hostname,attr" validate:"required"`
}

type Http2RouteActionRewritePrefix struct {
	// DefaultPrefix: string, optional
	DefaultPrefix terra.StringValue `hcl:"default_prefix,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type Http2RouteActionTarget struct {
	// Http2RouteActionTargetVirtualService: required
	VirtualService *Http2RouteActionTargetVirtualService `hcl:"virtual_service,block" validate:"required"`
}

type Http2RouteActionTargetVirtualService struct {
	// VirtualServiceName: string, required
	VirtualServiceName terra.StringValue `hcl:"virtual_service_name,attr" validate:"required"`
}

type Http2RouteMatch struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Http2RouteMatchHostname: optional
	Hostname *Http2RouteMatchHostname `hcl:"hostname,block"`
}

type Http2RouteMatchHostname struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
	// Suffix: string, optional
	Suffix terra.StringValue `hcl:"suffix,attr"`
}

type HttpRoute struct {
	// HttpRouteAction: required
	Action *HttpRouteAction `hcl:"action,block" validate:"required"`
	// HttpRouteMatch: required
	Match *HttpRouteMatch `hcl:"match,block" validate:"required"`
}

type HttpRouteAction struct {
	// HttpRouteActionRewrite: optional
	Rewrite *HttpRouteActionRewrite `hcl:"rewrite,block"`
	// HttpRouteActionTarget: required
	Target *HttpRouteActionTarget `hcl:"target,block" validate:"required"`
}

type HttpRouteActionRewrite struct {
	// HttpRouteActionRewriteHostname: optional
	Hostname *HttpRouteActionRewriteHostname `hcl:"hostname,block"`
	// HttpRouteActionRewritePrefix: optional
	Prefix *HttpRouteActionRewritePrefix `hcl:"prefix,block"`
}

type HttpRouteActionRewriteHostname struct {
	// DefaultTargetHostname: string, required
	DefaultTargetHostname terra.StringValue `hcl:"default_target_hostname,attr" validate:"required"`
}

type HttpRouteActionRewritePrefix struct {
	// DefaultPrefix: string, optional
	DefaultPrefix terra.StringValue `hcl:"default_prefix,attr"`
	// Value: string, optional
	Value terra.StringValue `hcl:"value,attr"`
}

type HttpRouteActionTarget struct {
	// HttpRouteActionTargetVirtualService: required
	VirtualService *HttpRouteActionTargetVirtualService `hcl:"virtual_service,block" validate:"required"`
}

type HttpRouteActionTargetVirtualService struct {
	// VirtualServiceName: string, required
	VirtualServiceName terra.StringValue `hcl:"virtual_service_name,attr" validate:"required"`
}

type HttpRouteMatch struct {
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// HttpRouteMatchHostname: optional
	Hostname *HttpRouteMatchHostname `hcl:"hostname,block"`
}

type HttpRouteMatchHostname struct {
	// Exact: string, optional
	Exact terra.StringValue `hcl:"exact,attr"`
	// Suffix: string, optional
	Suffix terra.StringValue `hcl:"suffix,attr"`
}

type SpecAttributes struct {
	ref terra.Reference
}

func (s SpecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SpecAttributes) InternalWithRef(ref terra.Reference) SpecAttributes {
	return SpecAttributes{ref: ref}
}

func (s SpecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SpecAttributes) GrpcRoute() terra.ListValue[GrpcRouteAttributes] {
	return terra.ReferenceAsList[GrpcRouteAttributes](s.ref.Append("grpc_route"))
}

func (s SpecAttributes) Http2Route() terra.ListValue[Http2RouteAttributes] {
	return terra.ReferenceAsList[Http2RouteAttributes](s.ref.Append("http2_route"))
}

func (s SpecAttributes) HttpRoute() terra.ListValue[HttpRouteAttributes] {
	return terra.ReferenceAsList[HttpRouteAttributes](s.ref.Append("http_route"))
}

type GrpcRouteAttributes struct {
	ref terra.Reference
}

func (gr GrpcRouteAttributes) InternalRef() (terra.Reference, error) {
	return gr.ref, nil
}

func (gr GrpcRouteAttributes) InternalWithRef(ref terra.Reference) GrpcRouteAttributes {
	return GrpcRouteAttributes{ref: ref}
}

func (gr GrpcRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gr.ref.InternalTokens()
}

func (gr GrpcRouteAttributes) Action() terra.ListValue[GrpcRouteActionAttributes] {
	return terra.ReferenceAsList[GrpcRouteActionAttributes](gr.ref.Append("action"))
}

func (gr GrpcRouteAttributes) Match() terra.ListValue[GrpcRouteMatchAttributes] {
	return terra.ReferenceAsList[GrpcRouteMatchAttributes](gr.ref.Append("match"))
}

type GrpcRouteActionAttributes struct {
	ref terra.Reference
}

func (a GrpcRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a GrpcRouteActionAttributes) InternalWithRef(ref terra.Reference) GrpcRouteActionAttributes {
	return GrpcRouteActionAttributes{ref: ref}
}

func (a GrpcRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a GrpcRouteActionAttributes) Target() terra.ListValue[GrpcRouteActionTargetAttributes] {
	return terra.ReferenceAsList[GrpcRouteActionTargetAttributes](a.ref.Append("target"))
}

type GrpcRouteActionTargetAttributes struct {
	ref terra.Reference
}

func (t GrpcRouteActionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t GrpcRouteActionTargetAttributes) InternalWithRef(ref terra.Reference) GrpcRouteActionTargetAttributes {
	return GrpcRouteActionTargetAttributes{ref: ref}
}

func (t GrpcRouteActionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t GrpcRouteActionTargetAttributes) VirtualService() terra.ListValue[GrpcRouteActionTargetVirtualServiceAttributes] {
	return terra.ReferenceAsList[GrpcRouteActionTargetVirtualServiceAttributes](t.ref.Append("virtual_service"))
}

type GrpcRouteActionTargetVirtualServiceAttributes struct {
	ref terra.Reference
}

func (vs GrpcRouteActionTargetVirtualServiceAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs GrpcRouteActionTargetVirtualServiceAttributes) InternalWithRef(ref terra.Reference) GrpcRouteActionTargetVirtualServiceAttributes {
	return GrpcRouteActionTargetVirtualServiceAttributes{ref: ref}
}

func (vs GrpcRouteActionTargetVirtualServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs GrpcRouteActionTargetVirtualServiceAttributes) VirtualServiceName() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("virtual_service_name"))
}

type GrpcRouteMatchAttributes struct {
	ref terra.Reference
}

func (m GrpcRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m GrpcRouteMatchAttributes) InternalWithRef(ref terra.Reference) GrpcRouteMatchAttributes {
	return GrpcRouteMatchAttributes{ref: ref}
}

func (m GrpcRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m GrpcRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m GrpcRouteMatchAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("service_name"))
}

type Http2RouteAttributes struct {
	ref terra.Reference
}

func (hr Http2RouteAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr Http2RouteAttributes) InternalWithRef(ref terra.Reference) Http2RouteAttributes {
	return Http2RouteAttributes{ref: ref}
}

func (hr Http2RouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr Http2RouteAttributes) Action() terra.ListValue[Http2RouteActionAttributes] {
	return terra.ReferenceAsList[Http2RouteActionAttributes](hr.ref.Append("action"))
}

func (hr Http2RouteAttributes) Match() terra.ListValue[Http2RouteMatchAttributes] {
	return terra.ReferenceAsList[Http2RouteMatchAttributes](hr.ref.Append("match"))
}

type Http2RouteActionAttributes struct {
	ref terra.Reference
}

func (a Http2RouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a Http2RouteActionAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionAttributes {
	return Http2RouteActionAttributes{ref: ref}
}

func (a Http2RouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a Http2RouteActionAttributes) Rewrite() terra.ListValue[Http2RouteActionRewriteAttributes] {
	return terra.ReferenceAsList[Http2RouteActionRewriteAttributes](a.ref.Append("rewrite"))
}

func (a Http2RouteActionAttributes) Target() terra.ListValue[Http2RouteActionTargetAttributes] {
	return terra.ReferenceAsList[Http2RouteActionTargetAttributes](a.ref.Append("target"))
}

type Http2RouteActionRewriteAttributes struct {
	ref terra.Reference
}

func (r Http2RouteActionRewriteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r Http2RouteActionRewriteAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionRewriteAttributes {
	return Http2RouteActionRewriteAttributes{ref: ref}
}

func (r Http2RouteActionRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r Http2RouteActionRewriteAttributes) Hostname() terra.ListValue[Http2RouteActionRewriteHostnameAttributes] {
	return terra.ReferenceAsList[Http2RouteActionRewriteHostnameAttributes](r.ref.Append("hostname"))
}

func (r Http2RouteActionRewriteAttributes) Prefix() terra.ListValue[Http2RouteActionRewritePrefixAttributes] {
	return terra.ReferenceAsList[Http2RouteActionRewritePrefixAttributes](r.ref.Append("prefix"))
}

type Http2RouteActionRewriteHostnameAttributes struct {
	ref terra.Reference
}

func (h Http2RouteActionRewriteHostnameAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h Http2RouteActionRewriteHostnameAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionRewriteHostnameAttributes {
	return Http2RouteActionRewriteHostnameAttributes{ref: ref}
}

func (h Http2RouteActionRewriteHostnameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h Http2RouteActionRewriteHostnameAttributes) DefaultTargetHostname() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("default_target_hostname"))
}

type Http2RouteActionRewritePrefixAttributes struct {
	ref terra.Reference
}

func (p Http2RouteActionRewritePrefixAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p Http2RouteActionRewritePrefixAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionRewritePrefixAttributes {
	return Http2RouteActionRewritePrefixAttributes{ref: ref}
}

func (p Http2RouteActionRewritePrefixAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p Http2RouteActionRewritePrefixAttributes) DefaultPrefix() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("default_prefix"))
}

func (p Http2RouteActionRewritePrefixAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value"))
}

type Http2RouteActionTargetAttributes struct {
	ref terra.Reference
}

func (t Http2RouteActionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t Http2RouteActionTargetAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionTargetAttributes {
	return Http2RouteActionTargetAttributes{ref: ref}
}

func (t Http2RouteActionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t Http2RouteActionTargetAttributes) VirtualService() terra.ListValue[Http2RouteActionTargetVirtualServiceAttributes] {
	return terra.ReferenceAsList[Http2RouteActionTargetVirtualServiceAttributes](t.ref.Append("virtual_service"))
}

type Http2RouteActionTargetVirtualServiceAttributes struct {
	ref terra.Reference
}

func (vs Http2RouteActionTargetVirtualServiceAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs Http2RouteActionTargetVirtualServiceAttributes) InternalWithRef(ref terra.Reference) Http2RouteActionTargetVirtualServiceAttributes {
	return Http2RouteActionTargetVirtualServiceAttributes{ref: ref}
}

func (vs Http2RouteActionTargetVirtualServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs Http2RouteActionTargetVirtualServiceAttributes) VirtualServiceName() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("virtual_service_name"))
}

type Http2RouteMatchAttributes struct {
	ref terra.Reference
}

func (m Http2RouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m Http2RouteMatchAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchAttributes {
	return Http2RouteMatchAttributes{ref: ref}
}

func (m Http2RouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m Http2RouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m Http2RouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m Http2RouteMatchAttributes) Hostname() terra.ListValue[Http2RouteMatchHostnameAttributes] {
	return terra.ReferenceAsList[Http2RouteMatchHostnameAttributes](m.ref.Append("hostname"))
}

type Http2RouteMatchHostnameAttributes struct {
	ref terra.Reference
}

func (h Http2RouteMatchHostnameAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h Http2RouteMatchHostnameAttributes) InternalWithRef(ref terra.Reference) Http2RouteMatchHostnameAttributes {
	return Http2RouteMatchHostnameAttributes{ref: ref}
}

func (h Http2RouteMatchHostnameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h Http2RouteMatchHostnameAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("exact"))
}

func (h Http2RouteMatchHostnameAttributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("suffix"))
}

type HttpRouteAttributes struct {
	ref terra.Reference
}

func (hr HttpRouteAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr HttpRouteAttributes) InternalWithRef(ref terra.Reference) HttpRouteAttributes {
	return HttpRouteAttributes{ref: ref}
}

func (hr HttpRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr HttpRouteAttributes) Action() terra.ListValue[HttpRouteActionAttributes] {
	return terra.ReferenceAsList[HttpRouteActionAttributes](hr.ref.Append("action"))
}

func (hr HttpRouteAttributes) Match() terra.ListValue[HttpRouteMatchAttributes] {
	return terra.ReferenceAsList[HttpRouteMatchAttributes](hr.ref.Append("match"))
}

type HttpRouteActionAttributes struct {
	ref terra.Reference
}

func (a HttpRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a HttpRouteActionAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionAttributes {
	return HttpRouteActionAttributes{ref: ref}
}

func (a HttpRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a HttpRouteActionAttributes) Rewrite() terra.ListValue[HttpRouteActionRewriteAttributes] {
	return terra.ReferenceAsList[HttpRouteActionRewriteAttributes](a.ref.Append("rewrite"))
}

func (a HttpRouteActionAttributes) Target() terra.ListValue[HttpRouteActionTargetAttributes] {
	return terra.ReferenceAsList[HttpRouteActionTargetAttributes](a.ref.Append("target"))
}

type HttpRouteActionRewriteAttributes struct {
	ref terra.Reference
}

func (r HttpRouteActionRewriteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r HttpRouteActionRewriteAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionRewriteAttributes {
	return HttpRouteActionRewriteAttributes{ref: ref}
}

func (r HttpRouteActionRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r HttpRouteActionRewriteAttributes) Hostname() terra.ListValue[HttpRouteActionRewriteHostnameAttributes] {
	return terra.ReferenceAsList[HttpRouteActionRewriteHostnameAttributes](r.ref.Append("hostname"))
}

func (r HttpRouteActionRewriteAttributes) Prefix() terra.ListValue[HttpRouteActionRewritePrefixAttributes] {
	return terra.ReferenceAsList[HttpRouteActionRewritePrefixAttributes](r.ref.Append("prefix"))
}

type HttpRouteActionRewriteHostnameAttributes struct {
	ref terra.Reference
}

func (h HttpRouteActionRewriteHostnameAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HttpRouteActionRewriteHostnameAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionRewriteHostnameAttributes {
	return HttpRouteActionRewriteHostnameAttributes{ref: ref}
}

func (h HttpRouteActionRewriteHostnameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HttpRouteActionRewriteHostnameAttributes) DefaultTargetHostname() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("default_target_hostname"))
}

type HttpRouteActionRewritePrefixAttributes struct {
	ref terra.Reference
}

func (p HttpRouteActionRewritePrefixAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p HttpRouteActionRewritePrefixAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionRewritePrefixAttributes {
	return HttpRouteActionRewritePrefixAttributes{ref: ref}
}

func (p HttpRouteActionRewritePrefixAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p HttpRouteActionRewritePrefixAttributes) DefaultPrefix() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("default_prefix"))
}

func (p HttpRouteActionRewritePrefixAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value"))
}

type HttpRouteActionTargetAttributes struct {
	ref terra.Reference
}

func (t HttpRouteActionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t HttpRouteActionTargetAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionTargetAttributes {
	return HttpRouteActionTargetAttributes{ref: ref}
}

func (t HttpRouteActionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t HttpRouteActionTargetAttributes) VirtualService() terra.ListValue[HttpRouteActionTargetVirtualServiceAttributes] {
	return terra.ReferenceAsList[HttpRouteActionTargetVirtualServiceAttributes](t.ref.Append("virtual_service"))
}

type HttpRouteActionTargetVirtualServiceAttributes struct {
	ref terra.Reference
}

func (vs HttpRouteActionTargetVirtualServiceAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs HttpRouteActionTargetVirtualServiceAttributes) InternalWithRef(ref terra.Reference) HttpRouteActionTargetVirtualServiceAttributes {
	return HttpRouteActionTargetVirtualServiceAttributes{ref: ref}
}

func (vs HttpRouteActionTargetVirtualServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs HttpRouteActionTargetVirtualServiceAttributes) VirtualServiceName() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("virtual_service_name"))
}

type HttpRouteMatchAttributes struct {
	ref terra.Reference
}

func (m HttpRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m HttpRouteMatchAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchAttributes {
	return HttpRouteMatchAttributes{ref: ref}
}

func (m HttpRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m HttpRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m HttpRouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m HttpRouteMatchAttributes) Hostname() terra.ListValue[HttpRouteMatchHostnameAttributes] {
	return terra.ReferenceAsList[HttpRouteMatchHostnameAttributes](m.ref.Append("hostname"))
}

type HttpRouteMatchHostnameAttributes struct {
	ref terra.Reference
}

func (h HttpRouteMatchHostnameAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h HttpRouteMatchHostnameAttributes) InternalWithRef(ref terra.Reference) HttpRouteMatchHostnameAttributes {
	return HttpRouteMatchHostnameAttributes{ref: ref}
}

func (h HttpRouteMatchHostnameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h HttpRouteMatchHostnameAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("exact"))
}

func (h HttpRouteMatchHostnameAttributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("suffix"))
}

type SpecState struct {
	GrpcRoute  []GrpcRouteState  `json:"grpc_route"`
	Http2Route []Http2RouteState `json:"http2_route"`
	HttpRoute  []HttpRouteState  `json:"http_route"`
}

type GrpcRouteState struct {
	Action []GrpcRouteActionState `json:"action"`
	Match  []GrpcRouteMatchState  `json:"match"`
}

type GrpcRouteActionState struct {
	Target []GrpcRouteActionTargetState `json:"target"`
}

type GrpcRouteActionTargetState struct {
	VirtualService []GrpcRouteActionTargetVirtualServiceState `json:"virtual_service"`
}

type GrpcRouteActionTargetVirtualServiceState struct {
	VirtualServiceName string `json:"virtual_service_name"`
}

type GrpcRouteMatchState struct {
	Port        float64 `json:"port"`
	ServiceName string  `json:"service_name"`
}

type Http2RouteState struct {
	Action []Http2RouteActionState `json:"action"`
	Match  []Http2RouteMatchState  `json:"match"`
}

type Http2RouteActionState struct {
	Rewrite []Http2RouteActionRewriteState `json:"rewrite"`
	Target  []Http2RouteActionTargetState  `json:"target"`
}

type Http2RouteActionRewriteState struct {
	Hostname []Http2RouteActionRewriteHostnameState `json:"hostname"`
	Prefix   []Http2RouteActionRewritePrefixState   `json:"prefix"`
}

type Http2RouteActionRewriteHostnameState struct {
	DefaultTargetHostname string `json:"default_target_hostname"`
}

type Http2RouteActionRewritePrefixState struct {
	DefaultPrefix string `json:"default_prefix"`
	Value         string `json:"value"`
}

type Http2RouteActionTargetState struct {
	VirtualService []Http2RouteActionTargetVirtualServiceState `json:"virtual_service"`
}

type Http2RouteActionTargetVirtualServiceState struct {
	VirtualServiceName string `json:"virtual_service_name"`
}

type Http2RouteMatchState struct {
	Port     float64                        `json:"port"`
	Prefix   string                         `json:"prefix"`
	Hostname []Http2RouteMatchHostnameState `json:"hostname"`
}

type Http2RouteMatchHostnameState struct {
	Exact  string `json:"exact"`
	Suffix string `json:"suffix"`
}

type HttpRouteState struct {
	Action []HttpRouteActionState `json:"action"`
	Match  []HttpRouteMatchState  `json:"match"`
}

type HttpRouteActionState struct {
	Rewrite []HttpRouteActionRewriteState `json:"rewrite"`
	Target  []HttpRouteActionTargetState  `json:"target"`
}

type HttpRouteActionRewriteState struct {
	Hostname []HttpRouteActionRewriteHostnameState `json:"hostname"`
	Prefix   []HttpRouteActionRewritePrefixState   `json:"prefix"`
}

type HttpRouteActionRewriteHostnameState struct {
	DefaultTargetHostname string `json:"default_target_hostname"`
}

type HttpRouteActionRewritePrefixState struct {
	DefaultPrefix string `json:"default_prefix"`
	Value         string `json:"value"`
}

type HttpRouteActionTargetState struct {
	VirtualService []HttpRouteActionTargetVirtualServiceState `json:"virtual_service"`
}

type HttpRouteActionTargetVirtualServiceState struct {
	VirtualServiceName string `json:"virtual_service_name"`
}

type HttpRouteMatchState struct {
	Port     float64                       `json:"port"`
	Prefix   string                        `json:"prefix"`
	Hostname []HttpRouteMatchHostnameState `json:"hostname"`
}

type HttpRouteMatchHostnameState struct {
	Exact  string `json:"exact"`
	Suffix string `json:"suffix"`
}
