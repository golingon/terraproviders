// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	eksidentityproviderconfig "github.com/golingon/terraproviders/aws/4.60.0/eksidentityproviderconfig"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEksIdentityProviderConfig(name string, args EksIdentityProviderConfigArgs) *EksIdentityProviderConfig {
	return &EksIdentityProviderConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EksIdentityProviderConfig)(nil)

type EksIdentityProviderConfig struct {
	Name  string
	Args  EksIdentityProviderConfigArgs
	state *eksIdentityProviderConfigState
}

func (eipc *EksIdentityProviderConfig) Type() string {
	return "aws_eks_identity_provider_config"
}

func (eipc *EksIdentityProviderConfig) LocalName() string {
	return eipc.Name
}

func (eipc *EksIdentityProviderConfig) Configuration() interface{} {
	return eipc.Args
}

func (eipc *EksIdentityProviderConfig) Attributes() eksIdentityProviderConfigAttributes {
	return eksIdentityProviderConfigAttributes{ref: terra.ReferenceResource(eipc)}
}

func (eipc *EksIdentityProviderConfig) ImportState(av io.Reader) error {
	eipc.state = &eksIdentityProviderConfigState{}
	if err := json.NewDecoder(av).Decode(eipc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", eipc.Type(), eipc.LocalName(), err)
	}
	return nil
}

func (eipc *EksIdentityProviderConfig) State() (*eksIdentityProviderConfigState, bool) {
	return eipc.state, eipc.state != nil
}

func (eipc *EksIdentityProviderConfig) StateMust() *eksIdentityProviderConfigState {
	if eipc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", eipc.Type(), eipc.LocalName()))
	}
	return eipc.state
}

func (eipc *EksIdentityProviderConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(eipc)
}

type EksIdentityProviderConfigArgs struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Oidc: required
	Oidc *eksidentityproviderconfig.Oidc `hcl:"oidc,block" validate:"required"`
	// Timeouts: optional
	Timeouts *eksidentityproviderconfig.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EksIdentityProviderConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type eksIdentityProviderConfigAttributes struct {
	ref terra.Reference
}

func (eipc eksIdentityProviderConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(eipc.ref.Append("arn"))
}

func (eipc eksIdentityProviderConfigAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceString(eipc.ref.Append("cluster_name"))
}

func (eipc eksIdentityProviderConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(eipc.ref.Append("id"))
}

func (eipc eksIdentityProviderConfigAttributes) Status() terra.StringValue {
	return terra.ReferenceString(eipc.ref.Append("status"))
}

func (eipc eksIdentityProviderConfigAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](eipc.ref.Append("tags"))
}

func (eipc eksIdentityProviderConfigAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](eipc.ref.Append("tags_all"))
}

func (eipc eksIdentityProviderConfigAttributes) Oidc() terra.ListValue[eksidentityproviderconfig.OidcAttributes] {
	return terra.ReferenceList[eksidentityproviderconfig.OidcAttributes](eipc.ref.Append("oidc"))
}

func (eipc eksIdentityProviderConfigAttributes) Timeouts() eksidentityproviderconfig.TimeoutsAttributes {
	return terra.ReferenceSingle[eksidentityproviderconfig.TimeoutsAttributes](eipc.ref.Append("timeouts"))
}

type eksIdentityProviderConfigState struct {
	Arn         string                                   `json:"arn"`
	ClusterName string                                   `json:"cluster_name"`
	Id          string                                   `json:"id"`
	Status      string                                   `json:"status"`
	Tags        map[string]string                        `json:"tags"`
	TagsAll     map[string]string                        `json:"tags_all"`
	Oidc        []eksidentityproviderconfig.OidcState    `json:"oidc"`
	Timeouts    *eksidentityproviderconfig.TimeoutsState `json:"timeouts"`
}
