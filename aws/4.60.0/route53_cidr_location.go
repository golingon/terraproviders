// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53CidrLocation(name string, args Route53CidrLocationArgs) *Route53CidrLocation {
	return &Route53CidrLocation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53CidrLocation)(nil)

type Route53CidrLocation struct {
	Name  string
	Args  Route53CidrLocationArgs
	state *route53CidrLocationState
}

func (rcl *Route53CidrLocation) Type() string {
	return "aws_route53_cidr_location"
}

func (rcl *Route53CidrLocation) LocalName() string {
	return rcl.Name
}

func (rcl *Route53CidrLocation) Configuration() interface{} {
	return rcl.Args
}

func (rcl *Route53CidrLocation) Attributes() route53CidrLocationAttributes {
	return route53CidrLocationAttributes{ref: terra.ReferenceResource(rcl)}
}

func (rcl *Route53CidrLocation) ImportState(av io.Reader) error {
	rcl.state = &route53CidrLocationState{}
	if err := json.NewDecoder(av).Decode(rcl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rcl.Type(), rcl.LocalName(), err)
	}
	return nil
}

func (rcl *Route53CidrLocation) State() (*route53CidrLocationState, bool) {
	return rcl.state, rcl.state != nil
}

func (rcl *Route53CidrLocation) StateMust() *route53CidrLocationState {
	if rcl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rcl.Type(), rcl.LocalName()))
	}
	return rcl.state
}

func (rcl *Route53CidrLocation) DependOn() terra.Reference {
	return terra.ReferenceResource(rcl)
}

type Route53CidrLocationArgs struct {
	// CidrBlocks: set of string, required
	CidrBlocks terra.SetValue[terra.StringValue] `hcl:"cidr_blocks,attr" validate:"required"`
	// CidrCollectionId: string, required
	CidrCollectionId terra.StringValue `hcl:"cidr_collection_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// DependsOn contains resources that Route53CidrLocation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53CidrLocationAttributes struct {
	ref terra.Reference
}

func (rcl route53CidrLocationAttributes) CidrBlocks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rcl.ref.Append("cidr_blocks"))
}

func (rcl route53CidrLocationAttributes) CidrCollectionId() terra.StringValue {
	return terra.ReferenceString(rcl.ref.Append("cidr_collection_id"))
}

func (rcl route53CidrLocationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rcl.ref.Append("id"))
}

func (rcl route53CidrLocationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rcl.ref.Append("name"))
}

type route53CidrLocationState struct {
	CidrBlocks       []string `json:"cidr_blocks"`
	CidrCollectionId string   `json:"cidr_collection_id"`
	Id               string   `json:"id"`
	Name             string   `json:"name"`
}
