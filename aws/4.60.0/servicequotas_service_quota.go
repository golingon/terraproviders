// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicequotasServiceQuota(name string, args ServicequotasServiceQuotaArgs) *ServicequotasServiceQuota {
	return &ServicequotasServiceQuota{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicequotasServiceQuota)(nil)

type ServicequotasServiceQuota struct {
	Name  string
	Args  ServicequotasServiceQuotaArgs
	state *servicequotasServiceQuotaState
}

func (ssq *ServicequotasServiceQuota) Type() string {
	return "aws_servicequotas_service_quota"
}

func (ssq *ServicequotasServiceQuota) LocalName() string {
	return ssq.Name
}

func (ssq *ServicequotasServiceQuota) Configuration() interface{} {
	return ssq.Args
}

func (ssq *ServicequotasServiceQuota) Attributes() servicequotasServiceQuotaAttributes {
	return servicequotasServiceQuotaAttributes{ref: terra.ReferenceResource(ssq)}
}

func (ssq *ServicequotasServiceQuota) ImportState(av io.Reader) error {
	ssq.state = &servicequotasServiceQuotaState{}
	if err := json.NewDecoder(av).Decode(ssq.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssq.Type(), ssq.LocalName(), err)
	}
	return nil
}

func (ssq *ServicequotasServiceQuota) State() (*servicequotasServiceQuotaState, bool) {
	return ssq.state, ssq.state != nil
}

func (ssq *ServicequotasServiceQuota) StateMust() *servicequotasServiceQuotaState {
	if ssq.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssq.Type(), ssq.LocalName()))
	}
	return ssq.state
}

func (ssq *ServicequotasServiceQuota) DependOn() terra.Reference {
	return terra.ReferenceResource(ssq)
}

type ServicequotasServiceQuotaArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// QuotaCode: string, required
	QuotaCode terra.StringValue `hcl:"quota_code,attr" validate:"required"`
	// ServiceCode: string, required
	ServiceCode terra.StringValue `hcl:"service_code,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
	// DependsOn contains resources that ServicequotasServiceQuota depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicequotasServiceQuotaAttributes struct {
	ref terra.Reference
}

func (ssq servicequotasServiceQuotaAttributes) Adjustable() terra.BoolValue {
	return terra.ReferenceBool(ssq.ref.Append("adjustable"))
}

func (ssq servicequotasServiceQuotaAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ssq.ref.Append("arn"))
}

func (ssq servicequotasServiceQuotaAttributes) DefaultValue() terra.NumberValue {
	return terra.ReferenceNumber(ssq.ref.Append("default_value"))
}

func (ssq servicequotasServiceQuotaAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssq.ref.Append("id"))
}

func (ssq servicequotasServiceQuotaAttributes) QuotaCode() terra.StringValue {
	return terra.ReferenceString(ssq.ref.Append("quota_code"))
}

func (ssq servicequotasServiceQuotaAttributes) QuotaName() terra.StringValue {
	return terra.ReferenceString(ssq.ref.Append("quota_name"))
}

func (ssq servicequotasServiceQuotaAttributes) RequestId() terra.StringValue {
	return terra.ReferenceString(ssq.ref.Append("request_id"))
}

func (ssq servicequotasServiceQuotaAttributes) RequestStatus() terra.StringValue {
	return terra.ReferenceString(ssq.ref.Append("request_status"))
}

func (ssq servicequotasServiceQuotaAttributes) ServiceCode() terra.StringValue {
	return terra.ReferenceString(ssq.ref.Append("service_code"))
}

func (ssq servicequotasServiceQuotaAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceString(ssq.ref.Append("service_name"))
}

func (ssq servicequotasServiceQuotaAttributes) Value() terra.NumberValue {
	return terra.ReferenceNumber(ssq.ref.Append("value"))
}

type servicequotasServiceQuotaState struct {
	Adjustable    bool    `json:"adjustable"`
	Arn           string  `json:"arn"`
	DefaultValue  float64 `json:"default_value"`
	Id            string  `json:"id"`
	QuotaCode     string  `json:"quota_code"`
	QuotaName     string  `json:"quota_name"`
	RequestId     string  `json:"request_id"`
	RequestStatus string  `json:"request_status"`
	ServiceCode   string  `json:"service_code"`
	ServiceName   string  `json:"service_name"`
	Value         float64 `json:"value"`
}
