// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	sagemakerfeaturegroup "github.com/golingon/terraproviders/aws/4.60.0/sagemakerfeaturegroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSagemakerFeatureGroup(name string, args SagemakerFeatureGroupArgs) *SagemakerFeatureGroup {
	return &SagemakerFeatureGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SagemakerFeatureGroup)(nil)

type SagemakerFeatureGroup struct {
	Name  string
	Args  SagemakerFeatureGroupArgs
	state *sagemakerFeatureGroupState
}

func (sfg *SagemakerFeatureGroup) Type() string {
	return "aws_sagemaker_feature_group"
}

func (sfg *SagemakerFeatureGroup) LocalName() string {
	return sfg.Name
}

func (sfg *SagemakerFeatureGroup) Configuration() interface{} {
	return sfg.Args
}

func (sfg *SagemakerFeatureGroup) Attributes() sagemakerFeatureGroupAttributes {
	return sagemakerFeatureGroupAttributes{ref: terra.ReferenceResource(sfg)}
}

func (sfg *SagemakerFeatureGroup) ImportState(av io.Reader) error {
	sfg.state = &sagemakerFeatureGroupState{}
	if err := json.NewDecoder(av).Decode(sfg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sfg.Type(), sfg.LocalName(), err)
	}
	return nil
}

func (sfg *SagemakerFeatureGroup) State() (*sagemakerFeatureGroupState, bool) {
	return sfg.state, sfg.state != nil
}

func (sfg *SagemakerFeatureGroup) StateMust() *sagemakerFeatureGroupState {
	if sfg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sfg.Type(), sfg.LocalName()))
	}
	return sfg.state
}

func (sfg *SagemakerFeatureGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(sfg)
}

type SagemakerFeatureGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EventTimeFeatureName: string, required
	EventTimeFeatureName terra.StringValue `hcl:"event_time_feature_name,attr" validate:"required"`
	// FeatureGroupName: string, required
	FeatureGroupName terra.StringValue `hcl:"feature_group_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RecordIdentifierFeatureName: string, required
	RecordIdentifierFeatureName terra.StringValue `hcl:"record_identifier_feature_name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// FeatureDefinition: min=1,max=2500
	FeatureDefinition []sagemakerfeaturegroup.FeatureDefinition `hcl:"feature_definition,block" validate:"min=1,max=2500"`
	// OfflineStoreConfig: optional
	OfflineStoreConfig *sagemakerfeaturegroup.OfflineStoreConfig `hcl:"offline_store_config,block"`
	// OnlineStoreConfig: optional
	OnlineStoreConfig *sagemakerfeaturegroup.OnlineStoreConfig `hcl:"online_store_config,block"`
	// DependsOn contains resources that SagemakerFeatureGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sagemakerFeatureGroupAttributes struct {
	ref terra.Reference
}

func (sfg sagemakerFeatureGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sfg.ref.Append("arn"))
}

func (sfg sagemakerFeatureGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(sfg.ref.Append("description"))
}

func (sfg sagemakerFeatureGroupAttributes) EventTimeFeatureName() terra.StringValue {
	return terra.ReferenceString(sfg.ref.Append("event_time_feature_name"))
}

func (sfg sagemakerFeatureGroupAttributes) FeatureGroupName() terra.StringValue {
	return terra.ReferenceString(sfg.ref.Append("feature_group_name"))
}

func (sfg sagemakerFeatureGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sfg.ref.Append("id"))
}

func (sfg sagemakerFeatureGroupAttributes) RecordIdentifierFeatureName() terra.StringValue {
	return terra.ReferenceString(sfg.ref.Append("record_identifier_feature_name"))
}

func (sfg sagemakerFeatureGroupAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(sfg.ref.Append("role_arn"))
}

func (sfg sagemakerFeatureGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sfg.ref.Append("tags"))
}

func (sfg sagemakerFeatureGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sfg.ref.Append("tags_all"))
}

func (sfg sagemakerFeatureGroupAttributes) FeatureDefinition() terra.ListValue[sagemakerfeaturegroup.FeatureDefinitionAttributes] {
	return terra.ReferenceList[sagemakerfeaturegroup.FeatureDefinitionAttributes](sfg.ref.Append("feature_definition"))
}

func (sfg sagemakerFeatureGroupAttributes) OfflineStoreConfig() terra.ListValue[sagemakerfeaturegroup.OfflineStoreConfigAttributes] {
	return terra.ReferenceList[sagemakerfeaturegroup.OfflineStoreConfigAttributes](sfg.ref.Append("offline_store_config"))
}

func (sfg sagemakerFeatureGroupAttributes) OnlineStoreConfig() terra.ListValue[sagemakerfeaturegroup.OnlineStoreConfigAttributes] {
	return terra.ReferenceList[sagemakerfeaturegroup.OnlineStoreConfigAttributes](sfg.ref.Append("online_store_config"))
}

type sagemakerFeatureGroupState struct {
	Arn                         string                                          `json:"arn"`
	Description                 string                                          `json:"description"`
	EventTimeFeatureName        string                                          `json:"event_time_feature_name"`
	FeatureGroupName            string                                          `json:"feature_group_name"`
	Id                          string                                          `json:"id"`
	RecordIdentifierFeatureName string                                          `json:"record_identifier_feature_name"`
	RoleArn                     string                                          `json:"role_arn"`
	Tags                        map[string]string                               `json:"tags"`
	TagsAll                     map[string]string                               `json:"tags_all"`
	FeatureDefinition           []sagemakerfeaturegroup.FeatureDefinitionState  `json:"feature_definition"`
	OfflineStoreConfig          []sagemakerfeaturegroup.OfflineStoreConfigState `json:"offline_store_config"`
	OnlineStoreConfig           []sagemakerfeaturegroup.OnlineStoreConfigState  `json:"online_store_config"`
}
