// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	macie2classificationjob "github.com/golingon/terraproviders/aws/4.60.0/macie2classificationjob"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMacie2ClassificationJob(name string, args Macie2ClassificationJobArgs) *Macie2ClassificationJob {
	return &Macie2ClassificationJob{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Macie2ClassificationJob)(nil)

type Macie2ClassificationJob struct {
	Name  string
	Args  Macie2ClassificationJobArgs
	state *macie2ClassificationJobState
}

func (mcj *Macie2ClassificationJob) Type() string {
	return "aws_macie2_classification_job"
}

func (mcj *Macie2ClassificationJob) LocalName() string {
	return mcj.Name
}

func (mcj *Macie2ClassificationJob) Configuration() interface{} {
	return mcj.Args
}

func (mcj *Macie2ClassificationJob) Attributes() macie2ClassificationJobAttributes {
	return macie2ClassificationJobAttributes{ref: terra.ReferenceResource(mcj)}
}

func (mcj *Macie2ClassificationJob) ImportState(av io.Reader) error {
	mcj.state = &macie2ClassificationJobState{}
	if err := json.NewDecoder(av).Decode(mcj.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mcj.Type(), mcj.LocalName(), err)
	}
	return nil
}

func (mcj *Macie2ClassificationJob) State() (*macie2ClassificationJobState, bool) {
	return mcj.state, mcj.state != nil
}

func (mcj *Macie2ClassificationJob) StateMust() *macie2ClassificationJobState {
	if mcj.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mcj.Type(), mcj.LocalName()))
	}
	return mcj.state
}

func (mcj *Macie2ClassificationJob) DependOn() terra.Reference {
	return terra.ReferenceResource(mcj)
}

type Macie2ClassificationJobArgs struct {
	// CustomDataIdentifierIds: list of string, optional
	CustomDataIdentifierIds terra.ListValue[terra.StringValue] `hcl:"custom_data_identifier_ids,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InitialRun: bool, optional
	InitialRun terra.BoolValue `hcl:"initial_run,attr"`
	// JobStatus: string, optional
	JobStatus terra.StringValue `hcl:"job_status,attr"`
	// JobType: string, required
	JobType terra.StringValue `hcl:"job_type,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// SamplingPercentage: number, optional
	SamplingPercentage terra.NumberValue `hcl:"sampling_percentage,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserPausedDetails: min=0
	UserPausedDetails []macie2classificationjob.UserPausedDetails `hcl:"user_paused_details,block" validate:"min=0"`
	// S3JobDefinition: required
	S3JobDefinition *macie2classificationjob.S3JobDefinition `hcl:"s3_job_definition,block" validate:"required"`
	// ScheduleFrequency: optional
	ScheduleFrequency *macie2classificationjob.ScheduleFrequency `hcl:"schedule_frequency,block"`
	// DependsOn contains resources that Macie2ClassificationJob depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type macie2ClassificationJobAttributes struct {
	ref terra.Reference
}

func (mcj macie2ClassificationJobAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceString(mcj.ref.Append("created_at"))
}

func (mcj macie2ClassificationJobAttributes) CustomDataIdentifierIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](mcj.ref.Append("custom_data_identifier_ids"))
}

func (mcj macie2ClassificationJobAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mcj.ref.Append("description"))
}

func (mcj macie2ClassificationJobAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mcj.ref.Append("id"))
}

func (mcj macie2ClassificationJobAttributes) InitialRun() terra.BoolValue {
	return terra.ReferenceBool(mcj.ref.Append("initial_run"))
}

func (mcj macie2ClassificationJobAttributes) JobArn() terra.StringValue {
	return terra.ReferenceString(mcj.ref.Append("job_arn"))
}

func (mcj macie2ClassificationJobAttributes) JobId() terra.StringValue {
	return terra.ReferenceString(mcj.ref.Append("job_id"))
}

func (mcj macie2ClassificationJobAttributes) JobStatus() terra.StringValue {
	return terra.ReferenceString(mcj.ref.Append("job_status"))
}

func (mcj macie2ClassificationJobAttributes) JobType() terra.StringValue {
	return terra.ReferenceString(mcj.ref.Append("job_type"))
}

func (mcj macie2ClassificationJobAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mcj.ref.Append("name"))
}

func (mcj macie2ClassificationJobAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(mcj.ref.Append("name_prefix"))
}

func (mcj macie2ClassificationJobAttributes) SamplingPercentage() terra.NumberValue {
	return terra.ReferenceNumber(mcj.ref.Append("sampling_percentage"))
}

func (mcj macie2ClassificationJobAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mcj.ref.Append("tags"))
}

func (mcj macie2ClassificationJobAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mcj.ref.Append("tags_all"))
}

func (mcj macie2ClassificationJobAttributes) UserPausedDetails() terra.ListValue[macie2classificationjob.UserPausedDetailsAttributes] {
	return terra.ReferenceList[macie2classificationjob.UserPausedDetailsAttributes](mcj.ref.Append("user_paused_details"))
}

func (mcj macie2ClassificationJobAttributes) S3JobDefinition() terra.ListValue[macie2classificationjob.S3JobDefinitionAttributes] {
	return terra.ReferenceList[macie2classificationjob.S3JobDefinitionAttributes](mcj.ref.Append("s3_job_definition"))
}

func (mcj macie2ClassificationJobAttributes) ScheduleFrequency() terra.ListValue[macie2classificationjob.ScheduleFrequencyAttributes] {
	return terra.ReferenceList[macie2classificationjob.ScheduleFrequencyAttributes](mcj.ref.Append("schedule_frequency"))
}

type macie2ClassificationJobState struct {
	CreatedAt               string                                           `json:"created_at"`
	CustomDataIdentifierIds []string                                         `json:"custom_data_identifier_ids"`
	Description             string                                           `json:"description"`
	Id                      string                                           `json:"id"`
	InitialRun              bool                                             `json:"initial_run"`
	JobArn                  string                                           `json:"job_arn"`
	JobId                   string                                           `json:"job_id"`
	JobStatus               string                                           `json:"job_status"`
	JobType                 string                                           `json:"job_type"`
	Name                    string                                           `json:"name"`
	NamePrefix              string                                           `json:"name_prefix"`
	SamplingPercentage      float64                                          `json:"sampling_percentage"`
	Tags                    map[string]string                                `json:"tags"`
	TagsAll                 map[string]string                                `json:"tags_all"`
	UserPausedDetails       []macie2classificationjob.UserPausedDetailsState `json:"user_paused_details"`
	S3JobDefinition         []macie2classificationjob.S3JobDefinitionState   `json:"s3_job_definition"`
	ScheduleFrequency       []macie2classificationjob.ScheduleFrequencyState `json:"schedule_frequency"`
}
