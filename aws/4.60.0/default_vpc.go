// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDefaultVpc(name string, args DefaultVpcArgs) *DefaultVpc {
	return &DefaultVpc{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DefaultVpc)(nil)

type DefaultVpc struct {
	Name  string
	Args  DefaultVpcArgs
	state *defaultVpcState
}

func (dv *DefaultVpc) Type() string {
	return "aws_default_vpc"
}

func (dv *DefaultVpc) LocalName() string {
	return dv.Name
}

func (dv *DefaultVpc) Configuration() interface{} {
	return dv.Args
}

func (dv *DefaultVpc) Attributes() defaultVpcAttributes {
	return defaultVpcAttributes{ref: terra.ReferenceResource(dv)}
}

func (dv *DefaultVpc) ImportState(av io.Reader) error {
	dv.state = &defaultVpcState{}
	if err := json.NewDecoder(av).Decode(dv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dv.Type(), dv.LocalName(), err)
	}
	return nil
}

func (dv *DefaultVpc) State() (*defaultVpcState, bool) {
	return dv.state, dv.state != nil
}

func (dv *DefaultVpc) StateMust() *defaultVpcState {
	if dv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dv.Type(), dv.LocalName()))
	}
	return dv.state
}

func (dv *DefaultVpc) DependOn() terra.Reference {
	return terra.ReferenceResource(dv)
}

type DefaultVpcArgs struct {
	// AssignGeneratedIpv6CidrBlock: bool, optional
	AssignGeneratedIpv6CidrBlock terra.BoolValue `hcl:"assign_generated_ipv6_cidr_block,attr"`
	// EnableClassiclink: bool, optional
	EnableClassiclink terra.BoolValue `hcl:"enable_classiclink,attr"`
	// EnableClassiclinkDnsSupport: bool, optional
	EnableClassiclinkDnsSupport terra.BoolValue `hcl:"enable_classiclink_dns_support,attr"`
	// EnableDnsHostnames: bool, optional
	EnableDnsHostnames terra.BoolValue `hcl:"enable_dns_hostnames,attr"`
	// EnableDnsSupport: bool, optional
	EnableDnsSupport terra.BoolValue `hcl:"enable_dns_support,attr"`
	// EnableNetworkAddressUsageMetrics: bool, optional
	EnableNetworkAddressUsageMetrics terra.BoolValue `hcl:"enable_network_address_usage_metrics,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Ipv6CidrBlock: string, optional
	Ipv6CidrBlock terra.StringValue `hcl:"ipv6_cidr_block,attr"`
	// Ipv6CidrBlockNetworkBorderGroup: string, optional
	Ipv6CidrBlockNetworkBorderGroup terra.StringValue `hcl:"ipv6_cidr_block_network_border_group,attr"`
	// Ipv6IpamPoolId: string, optional
	Ipv6IpamPoolId terra.StringValue `hcl:"ipv6_ipam_pool_id,attr"`
	// Ipv6NetmaskLength: number, optional
	Ipv6NetmaskLength terra.NumberValue `hcl:"ipv6_netmask_length,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that DefaultVpc depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type defaultVpcAttributes struct {
	ref terra.Reference
}

func (dv defaultVpcAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("arn"))
}

func (dv defaultVpcAttributes) AssignGeneratedIpv6CidrBlock() terra.BoolValue {
	return terra.ReferenceBool(dv.ref.Append("assign_generated_ipv6_cidr_block"))
}

func (dv defaultVpcAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("cidr_block"))
}

func (dv defaultVpcAttributes) DefaultNetworkAclId() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("default_network_acl_id"))
}

func (dv defaultVpcAttributes) DefaultRouteTableId() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("default_route_table_id"))
}

func (dv defaultVpcAttributes) DefaultSecurityGroupId() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("default_security_group_id"))
}

func (dv defaultVpcAttributes) DhcpOptionsId() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("dhcp_options_id"))
}

func (dv defaultVpcAttributes) EnableClassiclink() terra.BoolValue {
	return terra.ReferenceBool(dv.ref.Append("enable_classiclink"))
}

func (dv defaultVpcAttributes) EnableClassiclinkDnsSupport() terra.BoolValue {
	return terra.ReferenceBool(dv.ref.Append("enable_classiclink_dns_support"))
}

func (dv defaultVpcAttributes) EnableDnsHostnames() terra.BoolValue {
	return terra.ReferenceBool(dv.ref.Append("enable_dns_hostnames"))
}

func (dv defaultVpcAttributes) EnableDnsSupport() terra.BoolValue {
	return terra.ReferenceBool(dv.ref.Append("enable_dns_support"))
}

func (dv defaultVpcAttributes) EnableNetworkAddressUsageMetrics() terra.BoolValue {
	return terra.ReferenceBool(dv.ref.Append("enable_network_address_usage_metrics"))
}

func (dv defaultVpcAttributes) ExistingDefaultVpc() terra.BoolValue {
	return terra.ReferenceBool(dv.ref.Append("existing_default_vpc"))
}

func (dv defaultVpcAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceBool(dv.ref.Append("force_destroy"))
}

func (dv defaultVpcAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("id"))
}

func (dv defaultVpcAttributes) InstanceTenancy() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("instance_tenancy"))
}

func (dv defaultVpcAttributes) Ipv6AssociationId() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("ipv6_association_id"))
}

func (dv defaultVpcAttributes) Ipv6CidrBlock() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("ipv6_cidr_block"))
}

func (dv defaultVpcAttributes) Ipv6CidrBlockNetworkBorderGroup() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("ipv6_cidr_block_network_border_group"))
}

func (dv defaultVpcAttributes) Ipv6IpamPoolId() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("ipv6_ipam_pool_id"))
}

func (dv defaultVpcAttributes) Ipv6NetmaskLength() terra.NumberValue {
	return terra.ReferenceNumber(dv.ref.Append("ipv6_netmask_length"))
}

func (dv defaultVpcAttributes) MainRouteTableId() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("main_route_table_id"))
}

func (dv defaultVpcAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(dv.ref.Append("owner_id"))
}

func (dv defaultVpcAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dv.ref.Append("tags"))
}

func (dv defaultVpcAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dv.ref.Append("tags_all"))
}

type defaultVpcState struct {
	Arn                              string            `json:"arn"`
	AssignGeneratedIpv6CidrBlock     bool              `json:"assign_generated_ipv6_cidr_block"`
	CidrBlock                        string            `json:"cidr_block"`
	DefaultNetworkAclId              string            `json:"default_network_acl_id"`
	DefaultRouteTableId              string            `json:"default_route_table_id"`
	DefaultSecurityGroupId           string            `json:"default_security_group_id"`
	DhcpOptionsId                    string            `json:"dhcp_options_id"`
	EnableClassiclink                bool              `json:"enable_classiclink"`
	EnableClassiclinkDnsSupport      bool              `json:"enable_classiclink_dns_support"`
	EnableDnsHostnames               bool              `json:"enable_dns_hostnames"`
	EnableDnsSupport                 bool              `json:"enable_dns_support"`
	EnableNetworkAddressUsageMetrics bool              `json:"enable_network_address_usage_metrics"`
	ExistingDefaultVpc               bool              `json:"existing_default_vpc"`
	ForceDestroy                     bool              `json:"force_destroy"`
	Id                               string            `json:"id"`
	InstanceTenancy                  string            `json:"instance_tenancy"`
	Ipv6AssociationId                string            `json:"ipv6_association_id"`
	Ipv6CidrBlock                    string            `json:"ipv6_cidr_block"`
	Ipv6CidrBlockNetworkBorderGroup  string            `json:"ipv6_cidr_block_network_border_group"`
	Ipv6IpamPoolId                   string            `json:"ipv6_ipam_pool_id"`
	Ipv6NetmaskLength                float64           `json:"ipv6_netmask_length"`
	MainRouteTableId                 string            `json:"main_route_table_id"`
	OwnerId                          string            `json:"owner_id"`
	Tags                             map[string]string `json:"tags"`
	TagsAll                          map[string]string `json:"tags_all"`
}
