// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package s3bucketlifecycleconfiguration

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Rule struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// AbortIncompleteMultipartUpload: optional
	AbortIncompleteMultipartUpload *AbortIncompleteMultipartUpload `hcl:"abort_incomplete_multipart_upload,block"`
	// Expiration: optional
	Expiration *Expiration `hcl:"expiration,block"`
	// Filter: optional
	Filter *Filter `hcl:"filter,block"`
	// NoncurrentVersionExpiration: optional
	NoncurrentVersionExpiration *NoncurrentVersionExpiration `hcl:"noncurrent_version_expiration,block"`
	// NoncurrentVersionTransition: min=0
	NoncurrentVersionTransition []NoncurrentVersionTransition `hcl:"noncurrent_version_transition,block" validate:"min=0"`
	// Transition: min=0
	Transition []Transition `hcl:"transition,block" validate:"min=0"`
}

type AbortIncompleteMultipartUpload struct {
	// DaysAfterInitiation: number, optional
	DaysAfterInitiation terra.NumberValue `hcl:"days_after_initiation,attr"`
}

type Expiration struct {
	// Date: string, optional
	Date terra.StringValue `hcl:"date,attr"`
	// Days: number, optional
	Days terra.NumberValue `hcl:"days,attr"`
	// ExpiredObjectDeleteMarker: bool, optional
	ExpiredObjectDeleteMarker terra.BoolValue `hcl:"expired_object_delete_marker,attr"`
}

type Filter struct {
	// ObjectSizeGreaterThan: string, optional
	ObjectSizeGreaterThan terra.StringValue `hcl:"object_size_greater_than,attr"`
	// ObjectSizeLessThan: string, optional
	ObjectSizeLessThan terra.StringValue `hcl:"object_size_less_than,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// And: optional
	And *And `hcl:"and,block"`
	// Tag: optional
	Tag *Tag `hcl:"tag,block"`
}

type And struct {
	// ObjectSizeGreaterThan: number, optional
	ObjectSizeGreaterThan terra.NumberValue `hcl:"object_size_greater_than,attr"`
	// ObjectSizeLessThan: number, optional
	ObjectSizeLessThan terra.NumberValue `hcl:"object_size_less_than,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type Tag struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type NoncurrentVersionExpiration struct {
	// NewerNoncurrentVersions: string, optional
	NewerNoncurrentVersions terra.StringValue `hcl:"newer_noncurrent_versions,attr"`
	// NoncurrentDays: number, optional
	NoncurrentDays terra.NumberValue `hcl:"noncurrent_days,attr"`
}

type NoncurrentVersionTransition struct {
	// NewerNoncurrentVersions: string, optional
	NewerNoncurrentVersions terra.StringValue `hcl:"newer_noncurrent_versions,attr"`
	// NoncurrentDays: number, optional
	NoncurrentDays terra.NumberValue `hcl:"noncurrent_days,attr"`
	// StorageClass: string, required
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type Transition struct {
	// Date: string, optional
	Date terra.StringValue `hcl:"date,attr"`
	// Days: number, optional
	Days terra.NumberValue `hcl:"days,attr"`
	// StorageClass: string, required
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type RuleAttributes struct {
	ref terra.Reference
}

func (r RuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r RuleAttributes) InternalWithRef(ref terra.Reference) RuleAttributes {
	return RuleAttributes{ref: ref}
}

func (r RuleAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r RuleAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("prefix"))
}

func (r RuleAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("status"))
}

func (r RuleAttributes) AbortIncompleteMultipartUpload() terra.ListValue[AbortIncompleteMultipartUploadAttributes] {
	return terra.ReferenceAsList[AbortIncompleteMultipartUploadAttributes](r.ref.Append("abort_incomplete_multipart_upload"))
}

func (r RuleAttributes) Expiration() terra.ListValue[ExpirationAttributes] {
	return terra.ReferenceAsList[ExpirationAttributes](r.ref.Append("expiration"))
}

func (r RuleAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](r.ref.Append("filter"))
}

func (r RuleAttributes) NoncurrentVersionExpiration() terra.ListValue[NoncurrentVersionExpirationAttributes] {
	return terra.ReferenceAsList[NoncurrentVersionExpirationAttributes](r.ref.Append("noncurrent_version_expiration"))
}

func (r RuleAttributes) NoncurrentVersionTransition() terra.SetValue[NoncurrentVersionTransitionAttributes] {
	return terra.ReferenceAsSet[NoncurrentVersionTransitionAttributes](r.ref.Append("noncurrent_version_transition"))
}

func (r RuleAttributes) Transition() terra.SetValue[TransitionAttributes] {
	return terra.ReferenceAsSet[TransitionAttributes](r.ref.Append("transition"))
}

type AbortIncompleteMultipartUploadAttributes struct {
	ref terra.Reference
}

func (aimu AbortIncompleteMultipartUploadAttributes) InternalRef() (terra.Reference, error) {
	return aimu.ref, nil
}

func (aimu AbortIncompleteMultipartUploadAttributes) InternalWithRef(ref terra.Reference) AbortIncompleteMultipartUploadAttributes {
	return AbortIncompleteMultipartUploadAttributes{ref: ref}
}

func (aimu AbortIncompleteMultipartUploadAttributes) InternalTokens() hclwrite.Tokens {
	return aimu.ref.InternalTokens()
}

func (aimu AbortIncompleteMultipartUploadAttributes) DaysAfterInitiation() terra.NumberValue {
	return terra.ReferenceAsNumber(aimu.ref.Append("days_after_initiation"))
}

type ExpirationAttributes struct {
	ref terra.Reference
}

func (e ExpirationAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ExpirationAttributes) InternalWithRef(ref terra.Reference) ExpirationAttributes {
	return ExpirationAttributes{ref: ref}
}

func (e ExpirationAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e ExpirationAttributes) Date() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("date"))
}

func (e ExpirationAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("days"))
}

func (e ExpirationAttributes) ExpiredObjectDeleteMarker() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("expired_object_delete_marker"))
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() hclwrite.Tokens {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) ObjectSizeGreaterThan() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("object_size_greater_than"))
}

func (f FilterAttributes) ObjectSizeLessThan() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("object_size_less_than"))
}

func (f FilterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

func (f FilterAttributes) And() terra.ListValue[AndAttributes] {
	return terra.ReferenceAsList[AndAttributes](f.ref.Append("and"))
}

func (f FilterAttributes) Tag() terra.ListValue[TagAttributes] {
	return terra.ReferenceAsList[TagAttributes](f.ref.Append("tag"))
}

type AndAttributes struct {
	ref terra.Reference
}

func (a AndAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a AndAttributes) InternalWithRef(ref terra.Reference) AndAttributes {
	return AndAttributes{ref: ref}
}

func (a AndAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a AndAttributes) ObjectSizeGreaterThan() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("object_size_greater_than"))
}

func (a AndAttributes) ObjectSizeLessThan() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("object_size_less_than"))
}

func (a AndAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("prefix"))
}

func (a AndAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("tags"))
}

type TagAttributes struct {
	ref terra.Reference
}

func (t TagAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TagAttributes) InternalWithRef(ref terra.Reference) TagAttributes {
	return TagAttributes{ref: ref}
}

func (t TagAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t TagAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type NoncurrentVersionExpirationAttributes struct {
	ref terra.Reference
}

func (nve NoncurrentVersionExpirationAttributes) InternalRef() (terra.Reference, error) {
	return nve.ref, nil
}

func (nve NoncurrentVersionExpirationAttributes) InternalWithRef(ref terra.Reference) NoncurrentVersionExpirationAttributes {
	return NoncurrentVersionExpirationAttributes{ref: ref}
}

func (nve NoncurrentVersionExpirationAttributes) InternalTokens() hclwrite.Tokens {
	return nve.ref.InternalTokens()
}

func (nve NoncurrentVersionExpirationAttributes) NewerNoncurrentVersions() terra.StringValue {
	return terra.ReferenceAsString(nve.ref.Append("newer_noncurrent_versions"))
}

func (nve NoncurrentVersionExpirationAttributes) NoncurrentDays() terra.NumberValue {
	return terra.ReferenceAsNumber(nve.ref.Append("noncurrent_days"))
}

type NoncurrentVersionTransitionAttributes struct {
	ref terra.Reference
}

func (nvt NoncurrentVersionTransitionAttributes) InternalRef() (terra.Reference, error) {
	return nvt.ref, nil
}

func (nvt NoncurrentVersionTransitionAttributes) InternalWithRef(ref terra.Reference) NoncurrentVersionTransitionAttributes {
	return NoncurrentVersionTransitionAttributes{ref: ref}
}

func (nvt NoncurrentVersionTransitionAttributes) InternalTokens() hclwrite.Tokens {
	return nvt.ref.InternalTokens()
}

func (nvt NoncurrentVersionTransitionAttributes) NewerNoncurrentVersions() terra.StringValue {
	return terra.ReferenceAsString(nvt.ref.Append("newer_noncurrent_versions"))
}

func (nvt NoncurrentVersionTransitionAttributes) NoncurrentDays() terra.NumberValue {
	return terra.ReferenceAsNumber(nvt.ref.Append("noncurrent_days"))
}

func (nvt NoncurrentVersionTransitionAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(nvt.ref.Append("storage_class"))
}

type TransitionAttributes struct {
	ref terra.Reference
}

func (t TransitionAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TransitionAttributes) InternalWithRef(ref terra.Reference) TransitionAttributes {
	return TransitionAttributes{ref: ref}
}

func (t TransitionAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TransitionAttributes) Date() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("date"))
}

func (t TransitionAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("days"))
}

func (t TransitionAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("storage_class"))
}

type RuleState struct {
	Id                             string                                `json:"id"`
	Prefix                         string                                `json:"prefix"`
	Status                         string                                `json:"status"`
	AbortIncompleteMultipartUpload []AbortIncompleteMultipartUploadState `json:"abort_incomplete_multipart_upload"`
	Expiration                     []ExpirationState                     `json:"expiration"`
	Filter                         []FilterState                         `json:"filter"`
	NoncurrentVersionExpiration    []NoncurrentVersionExpirationState    `json:"noncurrent_version_expiration"`
	NoncurrentVersionTransition    []NoncurrentVersionTransitionState    `json:"noncurrent_version_transition"`
	Transition                     []TransitionState                     `json:"transition"`
}

type AbortIncompleteMultipartUploadState struct {
	DaysAfterInitiation float64 `json:"days_after_initiation"`
}

type ExpirationState struct {
	Date                      string  `json:"date"`
	Days                      float64 `json:"days"`
	ExpiredObjectDeleteMarker bool    `json:"expired_object_delete_marker"`
}

type FilterState struct {
	ObjectSizeGreaterThan string     `json:"object_size_greater_than"`
	ObjectSizeLessThan    string     `json:"object_size_less_than"`
	Prefix                string     `json:"prefix"`
	And                   []AndState `json:"and"`
	Tag                   []TagState `json:"tag"`
}

type AndState struct {
	ObjectSizeGreaterThan float64           `json:"object_size_greater_than"`
	ObjectSizeLessThan    float64           `json:"object_size_less_than"`
	Prefix                string            `json:"prefix"`
	Tags                  map[string]string `json:"tags"`
}

type TagState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type NoncurrentVersionExpirationState struct {
	NewerNoncurrentVersions string  `json:"newer_noncurrent_versions"`
	NoncurrentDays          float64 `json:"noncurrent_days"`
}

type NoncurrentVersionTransitionState struct {
	NewerNoncurrentVersions string  `json:"newer_noncurrent_versions"`
	NoncurrentDays          float64 `json:"noncurrent_days"`
	StorageClass            string  `json:"storage_class"`
}

type TransitionState struct {
	Date         string  `json:"date"`
	Days         float64 `json:"days"`
	StorageClass string  `json:"storage_class"`
}
