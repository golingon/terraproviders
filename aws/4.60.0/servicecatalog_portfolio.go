// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	servicecatalogportfolio "github.com/golingon/terraproviders/aws/4.60.0/servicecatalogportfolio"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicecatalogPortfolio(name string, args ServicecatalogPortfolioArgs) *ServicecatalogPortfolio {
	return &ServicecatalogPortfolio{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicecatalogPortfolio)(nil)

type ServicecatalogPortfolio struct {
	Name  string
	Args  ServicecatalogPortfolioArgs
	state *servicecatalogPortfolioState
}

func (sp *ServicecatalogPortfolio) Type() string {
	return "aws_servicecatalog_portfolio"
}

func (sp *ServicecatalogPortfolio) LocalName() string {
	return sp.Name
}

func (sp *ServicecatalogPortfolio) Configuration() interface{} {
	return sp.Args
}

func (sp *ServicecatalogPortfolio) Attributes() servicecatalogPortfolioAttributes {
	return servicecatalogPortfolioAttributes{ref: terra.ReferenceResource(sp)}
}

func (sp *ServicecatalogPortfolio) ImportState(av io.Reader) error {
	sp.state = &servicecatalogPortfolioState{}
	if err := json.NewDecoder(av).Decode(sp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sp.Type(), sp.LocalName(), err)
	}
	return nil
}

func (sp *ServicecatalogPortfolio) State() (*servicecatalogPortfolioState, bool) {
	return sp.state, sp.state != nil
}

func (sp *ServicecatalogPortfolio) StateMust() *servicecatalogPortfolioState {
	if sp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sp.Type(), sp.LocalName()))
	}
	return sp.state
}

func (sp *ServicecatalogPortfolio) DependOn() terra.Reference {
	return terra.ReferenceResource(sp)
}

type ServicecatalogPortfolioArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProviderName: string, required
	ProviderName terra.StringValue `hcl:"provider_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *servicecatalogportfolio.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServicecatalogPortfolio depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicecatalogPortfolioAttributes struct {
	ref terra.Reference
}

func (sp servicecatalogPortfolioAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("arn"))
}

func (sp servicecatalogPortfolioAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("created_time"))
}

func (sp servicecatalogPortfolioAttributes) Description() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("description"))
}

func (sp servicecatalogPortfolioAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("id"))
}

func (sp servicecatalogPortfolioAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("name"))
}

func (sp servicecatalogPortfolioAttributes) ProviderName() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("provider_name"))
}

func (sp servicecatalogPortfolioAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sp.ref.Append("tags"))
}

func (sp servicecatalogPortfolioAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sp.ref.Append("tags_all"))
}

func (sp servicecatalogPortfolioAttributes) Timeouts() servicecatalogportfolio.TimeoutsAttributes {
	return terra.ReferenceSingle[servicecatalogportfolio.TimeoutsAttributes](sp.ref.Append("timeouts"))
}

type servicecatalogPortfolioState struct {
	Arn          string                                 `json:"arn"`
	CreatedTime  string                                 `json:"created_time"`
	Description  string                                 `json:"description"`
	Id           string                                 `json:"id"`
	Name         string                                 `json:"name"`
	ProviderName string                                 `json:"provider_name"`
	Tags         map[string]string                      `json:"tags"`
	TagsAll      map[string]string                      `json:"tags_all"`
	Timeouts     *servicecatalogportfolio.TimeoutsState `json:"timeouts"`
}
