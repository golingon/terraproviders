// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	kendraindex "github.com/golingon/terraproviders/aws/4.60.0/kendraindex"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKendraIndex(name string, args KendraIndexArgs) *KendraIndex {
	return &KendraIndex{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KendraIndex)(nil)

type KendraIndex struct {
	Name  string
	Args  KendraIndexArgs
	state *kendraIndexState
}

func (ki *KendraIndex) Type() string {
	return "aws_kendra_index"
}

func (ki *KendraIndex) LocalName() string {
	return ki.Name
}

func (ki *KendraIndex) Configuration() interface{} {
	return ki.Args
}

func (ki *KendraIndex) Attributes() kendraIndexAttributes {
	return kendraIndexAttributes{ref: terra.ReferenceResource(ki)}
}

func (ki *KendraIndex) ImportState(av io.Reader) error {
	ki.state = &kendraIndexState{}
	if err := json.NewDecoder(av).Decode(ki.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ki.Type(), ki.LocalName(), err)
	}
	return nil
}

func (ki *KendraIndex) State() (*kendraIndexState, bool) {
	return ki.state, ki.state != nil
}

func (ki *KendraIndex) StateMust() *kendraIndexState {
	if ki.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ki.Type(), ki.LocalName()))
	}
	return ki.state
}

func (ki *KendraIndex) DependOn() terra.Reference {
	return terra.ReferenceResource(ki)
}

type KendraIndexArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Edition: string, optional
	Edition terra.StringValue `hcl:"edition,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserContextPolicy: string, optional
	UserContextPolicy terra.StringValue `hcl:"user_context_policy,attr"`
	// IndexStatistics: min=0
	IndexStatistics []kendraindex.IndexStatistics `hcl:"index_statistics,block" validate:"min=0"`
	// CapacityUnits: optional
	CapacityUnits *kendraindex.CapacityUnits `hcl:"capacity_units,block"`
	// DocumentMetadataConfigurationUpdates: min=0,max=500
	DocumentMetadataConfigurationUpdates []kendraindex.DocumentMetadataConfigurationUpdates `hcl:"document_metadata_configuration_updates,block" validate:"min=0,max=500"`
	// ServerSideEncryptionConfiguration: optional
	ServerSideEncryptionConfiguration *kendraindex.ServerSideEncryptionConfiguration `hcl:"server_side_encryption_configuration,block"`
	// Timeouts: optional
	Timeouts *kendraindex.Timeouts `hcl:"timeouts,block"`
	// UserGroupResolutionConfiguration: optional
	UserGroupResolutionConfiguration *kendraindex.UserGroupResolutionConfiguration `hcl:"user_group_resolution_configuration,block"`
	// UserTokenConfigurations: optional
	UserTokenConfigurations *kendraindex.UserTokenConfigurations `hcl:"user_token_configurations,block"`
	// DependsOn contains resources that KendraIndex depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kendraIndexAttributes struct {
	ref terra.Reference
}

func (ki kendraIndexAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ki.ref.Append("arn"))
}

func (ki kendraIndexAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceString(ki.ref.Append("created_at"))
}

func (ki kendraIndexAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ki.ref.Append("description"))
}

func (ki kendraIndexAttributes) Edition() terra.StringValue {
	return terra.ReferenceString(ki.ref.Append("edition"))
}

func (ki kendraIndexAttributes) ErrorMessage() terra.StringValue {
	return terra.ReferenceString(ki.ref.Append("error_message"))
}

func (ki kendraIndexAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ki.ref.Append("id"))
}

func (ki kendraIndexAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ki.ref.Append("name"))
}

func (ki kendraIndexAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(ki.ref.Append("role_arn"))
}

func (ki kendraIndexAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ki.ref.Append("status"))
}

func (ki kendraIndexAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ki.ref.Append("tags"))
}

func (ki kendraIndexAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ki.ref.Append("tags_all"))
}

func (ki kendraIndexAttributes) UpdatedAt() terra.StringValue {
	return terra.ReferenceString(ki.ref.Append("updated_at"))
}

func (ki kendraIndexAttributes) UserContextPolicy() terra.StringValue {
	return terra.ReferenceString(ki.ref.Append("user_context_policy"))
}

func (ki kendraIndexAttributes) IndexStatistics() terra.ListValue[kendraindex.IndexStatisticsAttributes] {
	return terra.ReferenceList[kendraindex.IndexStatisticsAttributes](ki.ref.Append("index_statistics"))
}

func (ki kendraIndexAttributes) CapacityUnits() terra.ListValue[kendraindex.CapacityUnitsAttributes] {
	return terra.ReferenceList[kendraindex.CapacityUnitsAttributes](ki.ref.Append("capacity_units"))
}

func (ki kendraIndexAttributes) DocumentMetadataConfigurationUpdates() terra.SetValue[kendraindex.DocumentMetadataConfigurationUpdatesAttributes] {
	return terra.ReferenceSet[kendraindex.DocumentMetadataConfigurationUpdatesAttributes](ki.ref.Append("document_metadata_configuration_updates"))
}

func (ki kendraIndexAttributes) ServerSideEncryptionConfiguration() terra.ListValue[kendraindex.ServerSideEncryptionConfigurationAttributes] {
	return terra.ReferenceList[kendraindex.ServerSideEncryptionConfigurationAttributes](ki.ref.Append("server_side_encryption_configuration"))
}

func (ki kendraIndexAttributes) Timeouts() kendraindex.TimeoutsAttributes {
	return terra.ReferenceSingle[kendraindex.TimeoutsAttributes](ki.ref.Append("timeouts"))
}

func (ki kendraIndexAttributes) UserGroupResolutionConfiguration() terra.ListValue[kendraindex.UserGroupResolutionConfigurationAttributes] {
	return terra.ReferenceList[kendraindex.UserGroupResolutionConfigurationAttributes](ki.ref.Append("user_group_resolution_configuration"))
}

func (ki kendraIndexAttributes) UserTokenConfigurations() terra.ListValue[kendraindex.UserTokenConfigurationsAttributes] {
	return terra.ReferenceList[kendraindex.UserTokenConfigurationsAttributes](ki.ref.Append("user_token_configurations"))
}

type kendraIndexState struct {
	Arn                                  string                                                  `json:"arn"`
	CreatedAt                            string                                                  `json:"created_at"`
	Description                          string                                                  `json:"description"`
	Edition                              string                                                  `json:"edition"`
	ErrorMessage                         string                                                  `json:"error_message"`
	Id                                   string                                                  `json:"id"`
	Name                                 string                                                  `json:"name"`
	RoleArn                              string                                                  `json:"role_arn"`
	Status                               string                                                  `json:"status"`
	Tags                                 map[string]string                                       `json:"tags"`
	TagsAll                              map[string]string                                       `json:"tags_all"`
	UpdatedAt                            string                                                  `json:"updated_at"`
	UserContextPolicy                    string                                                  `json:"user_context_policy"`
	IndexStatistics                      []kendraindex.IndexStatisticsState                      `json:"index_statistics"`
	CapacityUnits                        []kendraindex.CapacityUnitsState                        `json:"capacity_units"`
	DocumentMetadataConfigurationUpdates []kendraindex.DocumentMetadataConfigurationUpdatesState `json:"document_metadata_configuration_updates"`
	ServerSideEncryptionConfiguration    []kendraindex.ServerSideEncryptionConfigurationState    `json:"server_side_encryption_configuration"`
	Timeouts                             *kendraindex.TimeoutsState                              `json:"timeouts"`
	UserGroupResolutionConfiguration     []kendraindex.UserGroupResolutionConfigurationState     `json:"user_group_resolution_configuration"`
	UserTokenConfigurations              []kendraindex.UserTokenConfigurationsState              `json:"user_token_configurations"`
}
