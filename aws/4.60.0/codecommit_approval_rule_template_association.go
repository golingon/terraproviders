// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCodecommitApprovalRuleTemplateAssociation(name string, args CodecommitApprovalRuleTemplateAssociationArgs) *CodecommitApprovalRuleTemplateAssociation {
	return &CodecommitApprovalRuleTemplateAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodecommitApprovalRuleTemplateAssociation)(nil)

type CodecommitApprovalRuleTemplateAssociation struct {
	Name  string
	Args  CodecommitApprovalRuleTemplateAssociationArgs
	state *codecommitApprovalRuleTemplateAssociationState
}

func (carta *CodecommitApprovalRuleTemplateAssociation) Type() string {
	return "aws_codecommit_approval_rule_template_association"
}

func (carta *CodecommitApprovalRuleTemplateAssociation) LocalName() string {
	return carta.Name
}

func (carta *CodecommitApprovalRuleTemplateAssociation) Configuration() interface{} {
	return carta.Args
}

func (carta *CodecommitApprovalRuleTemplateAssociation) Attributes() codecommitApprovalRuleTemplateAssociationAttributes {
	return codecommitApprovalRuleTemplateAssociationAttributes{ref: terra.ReferenceResource(carta)}
}

func (carta *CodecommitApprovalRuleTemplateAssociation) ImportState(av io.Reader) error {
	carta.state = &codecommitApprovalRuleTemplateAssociationState{}
	if err := json.NewDecoder(av).Decode(carta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", carta.Type(), carta.LocalName(), err)
	}
	return nil
}

func (carta *CodecommitApprovalRuleTemplateAssociation) State() (*codecommitApprovalRuleTemplateAssociationState, bool) {
	return carta.state, carta.state != nil
}

func (carta *CodecommitApprovalRuleTemplateAssociation) StateMust() *codecommitApprovalRuleTemplateAssociationState {
	if carta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", carta.Type(), carta.LocalName()))
	}
	return carta.state
}

func (carta *CodecommitApprovalRuleTemplateAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(carta)
}

type CodecommitApprovalRuleTemplateAssociationArgs struct {
	// ApprovalRuleTemplateName: string, required
	ApprovalRuleTemplateName terra.StringValue `hcl:"approval_rule_template_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RepositoryName: string, required
	RepositoryName terra.StringValue `hcl:"repository_name,attr" validate:"required"`
	// DependsOn contains resources that CodecommitApprovalRuleTemplateAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type codecommitApprovalRuleTemplateAssociationAttributes struct {
	ref terra.Reference
}

func (carta codecommitApprovalRuleTemplateAssociationAttributes) ApprovalRuleTemplateName() terra.StringValue {
	return terra.ReferenceString(carta.ref.Append("approval_rule_template_name"))
}

func (carta codecommitApprovalRuleTemplateAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(carta.ref.Append("id"))
}

func (carta codecommitApprovalRuleTemplateAssociationAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceString(carta.ref.Append("repository_name"))
}

type codecommitApprovalRuleTemplateAssociationState struct {
	ApprovalRuleTemplateName string `json:"approval_rule_template_name"`
	Id                       string `json:"id"`
	RepositoryName           string `json:"repository_name"`
}
