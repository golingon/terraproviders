// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDxConnectionConfirmation(name string, args DxConnectionConfirmationArgs) *DxConnectionConfirmation {
	return &DxConnectionConfirmation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DxConnectionConfirmation)(nil)

type DxConnectionConfirmation struct {
	Name  string
	Args  DxConnectionConfirmationArgs
	state *dxConnectionConfirmationState
}

func (dcc *DxConnectionConfirmation) Type() string {
	return "aws_dx_connection_confirmation"
}

func (dcc *DxConnectionConfirmation) LocalName() string {
	return dcc.Name
}

func (dcc *DxConnectionConfirmation) Configuration() interface{} {
	return dcc.Args
}

func (dcc *DxConnectionConfirmation) Attributes() dxConnectionConfirmationAttributes {
	return dxConnectionConfirmationAttributes{ref: terra.ReferenceResource(dcc)}
}

func (dcc *DxConnectionConfirmation) ImportState(av io.Reader) error {
	dcc.state = &dxConnectionConfirmationState{}
	if err := json.NewDecoder(av).Decode(dcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcc.Type(), dcc.LocalName(), err)
	}
	return nil
}

func (dcc *DxConnectionConfirmation) State() (*dxConnectionConfirmationState, bool) {
	return dcc.state, dcc.state != nil
}

func (dcc *DxConnectionConfirmation) StateMust() *dxConnectionConfirmationState {
	if dcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcc.Type(), dcc.LocalName()))
	}
	return dcc.state
}

func (dcc *DxConnectionConfirmation) DependOn() terra.Reference {
	return terra.ReferenceResource(dcc)
}

type DxConnectionConfirmationArgs struct {
	// ConnectionId: string, required
	ConnectionId terra.StringValue `hcl:"connection_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DependsOn contains resources that DxConnectionConfirmation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dxConnectionConfirmationAttributes struct {
	ref terra.Reference
}

func (dcc dxConnectionConfirmationAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceString(dcc.ref.Append("connection_id"))
}

func (dcc dxConnectionConfirmationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcc.ref.Append("id"))
}

type dxConnectionConfirmationState struct {
	ConnectionId string `json:"connection_id"`
	Id           string `json:"id"`
}
