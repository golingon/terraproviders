// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	datardsengineversion "github.com/golingon/terraproviders/aws/4.60.0/datardsengineversion"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataRdsEngineVersion(name string, args DataRdsEngineVersionArgs) *DataRdsEngineVersion {
	return &DataRdsEngineVersion{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataRdsEngineVersion)(nil)

type DataRdsEngineVersion struct {
	Name string
	Args DataRdsEngineVersionArgs
}

func (rev *DataRdsEngineVersion) DataSource() string {
	return "aws_rds_engine_version"
}

func (rev *DataRdsEngineVersion) LocalName() string {
	return rev.Name
}

func (rev *DataRdsEngineVersion) Configuration() interface{} {
	return rev.Args
}

func (rev *DataRdsEngineVersion) Attributes() dataRdsEngineVersionAttributes {
	return dataRdsEngineVersionAttributes{ref: terra.ReferenceDataResource(rev)}
}

type DataRdsEngineVersionArgs struct {
	// DefaultOnly: bool, optional
	DefaultOnly terra.BoolValue `hcl:"default_only,attr"`
	// Engine: string, required
	Engine terra.StringValue `hcl:"engine,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IncludeAll: bool, optional
	IncludeAll terra.BoolValue `hcl:"include_all,attr"`
	// ParameterGroupFamily: string, optional
	ParameterGroupFamily terra.StringValue `hcl:"parameter_group_family,attr"`
	// PreferredVersions: list of string, optional
	PreferredVersions terra.ListValue[terra.StringValue] `hcl:"preferred_versions,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
	// Filter: min=0
	Filter []datardsengineversion.Filter `hcl:"filter,block" validate:"min=0"`
}
type dataRdsEngineVersionAttributes struct {
	ref terra.Reference
}

func (rev dataRdsEngineVersionAttributes) DefaultCharacterSet() terra.StringValue {
	return terra.ReferenceString(rev.ref.Append("default_character_set"))
}

func (rev dataRdsEngineVersionAttributes) DefaultOnly() terra.BoolValue {
	return terra.ReferenceBool(rev.ref.Append("default_only"))
}

func (rev dataRdsEngineVersionAttributes) Engine() terra.StringValue {
	return terra.ReferenceString(rev.ref.Append("engine"))
}

func (rev dataRdsEngineVersionAttributes) EngineDescription() terra.StringValue {
	return terra.ReferenceString(rev.ref.Append("engine_description"))
}

func (rev dataRdsEngineVersionAttributes) ExportableLogTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rev.ref.Append("exportable_log_types"))
}

func (rev dataRdsEngineVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rev.ref.Append("id"))
}

func (rev dataRdsEngineVersionAttributes) IncludeAll() terra.BoolValue {
	return terra.ReferenceBool(rev.ref.Append("include_all"))
}

func (rev dataRdsEngineVersionAttributes) ParameterGroupFamily() terra.StringValue {
	return terra.ReferenceString(rev.ref.Append("parameter_group_family"))
}

func (rev dataRdsEngineVersionAttributes) PreferredVersions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](rev.ref.Append("preferred_versions"))
}

func (rev dataRdsEngineVersionAttributes) Status() terra.StringValue {
	return terra.ReferenceString(rev.ref.Append("status"))
}

func (rev dataRdsEngineVersionAttributes) SupportedCharacterSets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rev.ref.Append("supported_character_sets"))
}

func (rev dataRdsEngineVersionAttributes) SupportedFeatureNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rev.ref.Append("supported_feature_names"))
}

func (rev dataRdsEngineVersionAttributes) SupportedModes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rev.ref.Append("supported_modes"))
}

func (rev dataRdsEngineVersionAttributes) SupportedTimezones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rev.ref.Append("supported_timezones"))
}

func (rev dataRdsEngineVersionAttributes) SupportsGlobalDatabases() terra.BoolValue {
	return terra.ReferenceBool(rev.ref.Append("supports_global_databases"))
}

func (rev dataRdsEngineVersionAttributes) SupportsLogExportsToCloudwatch() terra.BoolValue {
	return terra.ReferenceBool(rev.ref.Append("supports_log_exports_to_cloudwatch"))
}

func (rev dataRdsEngineVersionAttributes) SupportsParallelQuery() terra.BoolValue {
	return terra.ReferenceBool(rev.ref.Append("supports_parallel_query"))
}

func (rev dataRdsEngineVersionAttributes) SupportsReadReplica() terra.BoolValue {
	return terra.ReferenceBool(rev.ref.Append("supports_read_replica"))
}

func (rev dataRdsEngineVersionAttributes) ValidUpgradeTargets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rev.ref.Append("valid_upgrade_targets"))
}

func (rev dataRdsEngineVersionAttributes) Version() terra.StringValue {
	return terra.ReferenceString(rev.ref.Append("version"))
}

func (rev dataRdsEngineVersionAttributes) VersionDescription() terra.StringValue {
	return terra.ReferenceString(rev.ref.Append("version_description"))
}

func (rev dataRdsEngineVersionAttributes) Filter() terra.SetValue[datardsengineversion.FilterAttributes] {
	return terra.ReferenceSet[datardsengineversion.FilterAttributes](rev.ref.Append("filter"))
}
