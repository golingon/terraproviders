// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package elasticbeanstalkenvironment

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AllSettings struct{}

type Setting struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, required
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
	// Resource: string, optional
	Resource terra.StringValue `hcl:"resource,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type AllSettingsAttributes struct {
	ref terra.Reference
}

func (as AllSettingsAttributes) InternalRef() terra.Reference {
	return as.ref
}

func (as AllSettingsAttributes) InternalWithRef(ref terra.Reference) AllSettingsAttributes {
	return AllSettingsAttributes{ref: ref}
}

func (as AllSettingsAttributes) InternalTokens() hclwrite.Tokens {
	return as.ref.InternalTokens()
}

func (as AllSettingsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("name"))
}

func (as AllSettingsAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("namespace"))
}

func (as AllSettingsAttributes) Resource() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("resource"))
}

func (as AllSettingsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("value"))
}

type SettingAttributes struct {
	ref terra.Reference
}

func (s SettingAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SettingAttributes) InternalWithRef(ref terra.Reference) SettingAttributes {
	return SettingAttributes{ref: ref}
}

func (s SettingAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SettingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s SettingAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("namespace"))
}

func (s SettingAttributes) Resource() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("resource"))
}

func (s SettingAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("value"))
}

type AllSettingsState struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	Resource  string `json:"resource"`
	Value     string `json:"value"`
}

type SettingState struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	Resource  string `json:"resource"`
	Value     string `json:"value"`
}
