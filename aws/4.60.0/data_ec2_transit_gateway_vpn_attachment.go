// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataec2transitgatewayvpnattachment "github.com/golingon/terraproviders/aws/4.60.0/dataec2transitgatewayvpnattachment"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataEc2TransitGatewayVpnAttachment(name string, args DataEc2TransitGatewayVpnAttachmentArgs) *DataEc2TransitGatewayVpnAttachment {
	return &DataEc2TransitGatewayVpnAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataEc2TransitGatewayVpnAttachment)(nil)

type DataEc2TransitGatewayVpnAttachment struct {
	Name string
	Args DataEc2TransitGatewayVpnAttachmentArgs
}

func (etgva *DataEc2TransitGatewayVpnAttachment) DataSource() string {
	return "aws_ec2_transit_gateway_vpn_attachment"
}

func (etgva *DataEc2TransitGatewayVpnAttachment) LocalName() string {
	return etgva.Name
}

func (etgva *DataEc2TransitGatewayVpnAttachment) Configuration() interface{} {
	return etgva.Args
}

func (etgva *DataEc2TransitGatewayVpnAttachment) Attributes() dataEc2TransitGatewayVpnAttachmentAttributes {
	return dataEc2TransitGatewayVpnAttachmentAttributes{ref: terra.ReferenceDataResource(etgva)}
}

type DataEc2TransitGatewayVpnAttachmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TransitGatewayId: string, optional
	TransitGatewayId terra.StringValue `hcl:"transit_gateway_id,attr"`
	// VpnConnectionId: string, optional
	VpnConnectionId terra.StringValue `hcl:"vpn_connection_id,attr"`
	// Filter: min=0
	Filter []dataec2transitgatewayvpnattachment.Filter `hcl:"filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dataec2transitgatewayvpnattachment.Timeouts `hcl:"timeouts,block"`
}
type dataEc2TransitGatewayVpnAttachmentAttributes struct {
	ref terra.Reference
}

func (etgva dataEc2TransitGatewayVpnAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etgva.ref.Append("id"))
}

func (etgva dataEc2TransitGatewayVpnAttachmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etgva.ref.Append("tags"))
}

func (etgva dataEc2TransitGatewayVpnAttachmentAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceString(etgva.ref.Append("transit_gateway_id"))
}

func (etgva dataEc2TransitGatewayVpnAttachmentAttributes) VpnConnectionId() terra.StringValue {
	return terra.ReferenceString(etgva.ref.Append("vpn_connection_id"))
}

func (etgva dataEc2TransitGatewayVpnAttachmentAttributes) Filter() terra.SetValue[dataec2transitgatewayvpnattachment.FilterAttributes] {
	return terra.ReferenceSet[dataec2transitgatewayvpnattachment.FilterAttributes](etgva.ref.Append("filter"))
}

func (etgva dataEc2TransitGatewayVpnAttachmentAttributes) Timeouts() dataec2transitgatewayvpnattachment.TimeoutsAttributes {
	return terra.ReferenceSingle[dataec2transitgatewayvpnattachment.TimeoutsAttributes](etgva.ref.Append("timeouts"))
}
