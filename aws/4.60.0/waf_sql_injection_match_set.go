// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	wafsqlinjectionmatchset "github.com/golingon/terraproviders/aws/4.60.0/wafsqlinjectionmatchset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWafSqlInjectionMatchSet(name string, args WafSqlInjectionMatchSetArgs) *WafSqlInjectionMatchSet {
	return &WafSqlInjectionMatchSet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WafSqlInjectionMatchSet)(nil)

type WafSqlInjectionMatchSet struct {
	Name  string
	Args  WafSqlInjectionMatchSetArgs
	state *wafSqlInjectionMatchSetState
}

func (wsims *WafSqlInjectionMatchSet) Type() string {
	return "aws_waf_sql_injection_match_set"
}

func (wsims *WafSqlInjectionMatchSet) LocalName() string {
	return wsims.Name
}

func (wsims *WafSqlInjectionMatchSet) Configuration() interface{} {
	return wsims.Args
}

func (wsims *WafSqlInjectionMatchSet) Attributes() wafSqlInjectionMatchSetAttributes {
	return wafSqlInjectionMatchSetAttributes{ref: terra.ReferenceResource(wsims)}
}

func (wsims *WafSqlInjectionMatchSet) ImportState(av io.Reader) error {
	wsims.state = &wafSqlInjectionMatchSetState{}
	if err := json.NewDecoder(av).Decode(wsims.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wsims.Type(), wsims.LocalName(), err)
	}
	return nil
}

func (wsims *WafSqlInjectionMatchSet) State() (*wafSqlInjectionMatchSetState, bool) {
	return wsims.state, wsims.state != nil
}

func (wsims *WafSqlInjectionMatchSet) StateMust() *wafSqlInjectionMatchSetState {
	if wsims.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wsims.Type(), wsims.LocalName()))
	}
	return wsims.state
}

func (wsims *WafSqlInjectionMatchSet) DependOn() terra.Reference {
	return terra.ReferenceResource(wsims)
}

type WafSqlInjectionMatchSetArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SqlInjectionMatchTuples: min=0
	SqlInjectionMatchTuples []wafsqlinjectionmatchset.SqlInjectionMatchTuples `hcl:"sql_injection_match_tuples,block" validate:"min=0"`
	// DependsOn contains resources that WafSqlInjectionMatchSet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type wafSqlInjectionMatchSetAttributes struct {
	ref terra.Reference
}

func (wsims wafSqlInjectionMatchSetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wsims.ref.Append("id"))
}

func (wsims wafSqlInjectionMatchSetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wsims.ref.Append("name"))
}

func (wsims wafSqlInjectionMatchSetAttributes) SqlInjectionMatchTuples() terra.SetValue[wafsqlinjectionmatchset.SqlInjectionMatchTuplesAttributes] {
	return terra.ReferenceSet[wafsqlinjectionmatchset.SqlInjectionMatchTuplesAttributes](wsims.ref.Append("sql_injection_match_tuples"))
}

type wafSqlInjectionMatchSetState struct {
	Id                      string                                                 `json:"id"`
	Name                    string                                                 `json:"name"`
	SqlInjectionMatchTuples []wafsqlinjectionmatchset.SqlInjectionMatchTuplesState `json:"sql_injection_match_tuples"`
}
