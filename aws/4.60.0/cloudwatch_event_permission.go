// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudwatcheventpermission "github.com/golingon/terraproviders/aws/4.60.0/cloudwatcheventpermission"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudwatchEventPermission(name string, args CloudwatchEventPermissionArgs) *CloudwatchEventPermission {
	return &CloudwatchEventPermission{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudwatchEventPermission)(nil)

type CloudwatchEventPermission struct {
	Name  string
	Args  CloudwatchEventPermissionArgs
	state *cloudwatchEventPermissionState
}

func (cep *CloudwatchEventPermission) Type() string {
	return "aws_cloudwatch_event_permission"
}

func (cep *CloudwatchEventPermission) LocalName() string {
	return cep.Name
}

func (cep *CloudwatchEventPermission) Configuration() interface{} {
	return cep.Args
}

func (cep *CloudwatchEventPermission) Attributes() cloudwatchEventPermissionAttributes {
	return cloudwatchEventPermissionAttributes{ref: terra.ReferenceResource(cep)}
}

func (cep *CloudwatchEventPermission) ImportState(av io.Reader) error {
	cep.state = &cloudwatchEventPermissionState{}
	if err := json.NewDecoder(av).Decode(cep.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cep.Type(), cep.LocalName(), err)
	}
	return nil
}

func (cep *CloudwatchEventPermission) State() (*cloudwatchEventPermissionState, bool) {
	return cep.state, cep.state != nil
}

func (cep *CloudwatchEventPermission) StateMust() *cloudwatchEventPermissionState {
	if cep.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cep.Type(), cep.LocalName()))
	}
	return cep.state
}

func (cep *CloudwatchEventPermission) DependOn() terra.Reference {
	return terra.ReferenceResource(cep)
}

type CloudwatchEventPermissionArgs struct {
	// Action: string, optional
	Action terra.StringValue `hcl:"action,attr"`
	// EventBusName: string, optional
	EventBusName terra.StringValue `hcl:"event_bus_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Principal: string, required
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
	// StatementId: string, required
	StatementId terra.StringValue `hcl:"statement_id,attr" validate:"required"`
	// Condition: optional
	Condition *cloudwatcheventpermission.Condition `hcl:"condition,block"`
	// DependsOn contains resources that CloudwatchEventPermission depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudwatchEventPermissionAttributes struct {
	ref terra.Reference
}

func (cep cloudwatchEventPermissionAttributes) Action() terra.StringValue {
	return terra.ReferenceString(cep.ref.Append("action"))
}

func (cep cloudwatchEventPermissionAttributes) EventBusName() terra.StringValue {
	return terra.ReferenceString(cep.ref.Append("event_bus_name"))
}

func (cep cloudwatchEventPermissionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cep.ref.Append("id"))
}

func (cep cloudwatchEventPermissionAttributes) Principal() terra.StringValue {
	return terra.ReferenceString(cep.ref.Append("principal"))
}

func (cep cloudwatchEventPermissionAttributes) StatementId() terra.StringValue {
	return terra.ReferenceString(cep.ref.Append("statement_id"))
}

func (cep cloudwatchEventPermissionAttributes) Condition() terra.ListValue[cloudwatcheventpermission.ConditionAttributes] {
	return terra.ReferenceList[cloudwatcheventpermission.ConditionAttributes](cep.ref.Append("condition"))
}

type cloudwatchEventPermissionState struct {
	Action       string                                     `json:"action"`
	EventBusName string                                     `json:"event_bus_name"`
	Id           string                                     `json:"id"`
	Principal    string                                     `json:"principal"`
	StatementId  string                                     `json:"statement_id"`
	Condition    []cloudwatcheventpermission.ConditionState `json:"condition"`
}
