// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package pinpointapp

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CampaignHook struct {
	// LambdaFunctionName: string, optional
	LambdaFunctionName terra.StringValue `hcl:"lambda_function_name,attr"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// WebUrl: string, optional
	WebUrl terra.StringValue `hcl:"web_url,attr"`
}

type Limits struct {
	// Daily: number, optional
	Daily terra.NumberValue `hcl:"daily,attr"`
	// MaximumDuration: number, optional
	MaximumDuration terra.NumberValue `hcl:"maximum_duration,attr"`
	// MessagesPerSecond: number, optional
	MessagesPerSecond terra.NumberValue `hcl:"messages_per_second,attr"`
	// Total: number, optional
	Total terra.NumberValue `hcl:"total,attr"`
}

type QuietTime struct {
	// End: string, optional
	End terra.StringValue `hcl:"end,attr"`
	// Start: string, optional
	Start terra.StringValue `hcl:"start,attr"`
}

type CampaignHookAttributes struct {
	ref terra.Reference
}

func (ch CampaignHookAttributes) InternalRef() terra.Reference {
	return ch.ref
}

func (ch CampaignHookAttributes) InternalWithRef(ref terra.Reference) CampaignHookAttributes {
	return CampaignHookAttributes{ref: ref}
}

func (ch CampaignHookAttributes) InternalTokens() hclwrite.Tokens {
	return ch.ref.InternalTokens()
}

func (ch CampaignHookAttributes) LambdaFunctionName() terra.StringValue {
	return terra.ReferenceAsString(ch.ref.Append("lambda_function_name"))
}

func (ch CampaignHookAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(ch.ref.Append("mode"))
}

func (ch CampaignHookAttributes) WebUrl() terra.StringValue {
	return terra.ReferenceAsString(ch.ref.Append("web_url"))
}

type LimitsAttributes struct {
	ref terra.Reference
}

func (l LimitsAttributes) InternalRef() terra.Reference {
	return l.ref
}

func (l LimitsAttributes) InternalWithRef(ref terra.Reference) LimitsAttributes {
	return LimitsAttributes{ref: ref}
}

func (l LimitsAttributes) InternalTokens() hclwrite.Tokens {
	return l.ref.InternalTokens()
}

func (l LimitsAttributes) Daily() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("daily"))
}

func (l LimitsAttributes) MaximumDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("maximum_duration"))
}

func (l LimitsAttributes) MessagesPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("messages_per_second"))
}

func (l LimitsAttributes) Total() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("total"))
}

type QuietTimeAttributes struct {
	ref terra.Reference
}

func (qt QuietTimeAttributes) InternalRef() terra.Reference {
	return qt.ref
}

func (qt QuietTimeAttributes) InternalWithRef(ref terra.Reference) QuietTimeAttributes {
	return QuietTimeAttributes{ref: ref}
}

func (qt QuietTimeAttributes) InternalTokens() hclwrite.Tokens {
	return qt.ref.InternalTokens()
}

func (qt QuietTimeAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("end"))
}

func (qt QuietTimeAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("start"))
}

type CampaignHookState struct {
	LambdaFunctionName string `json:"lambda_function_name"`
	Mode               string `json:"mode"`
	WebUrl             string `json:"web_url"`
}

type LimitsState struct {
	Daily             float64 `json:"daily"`
	MaximumDuration   float64 `json:"maximum_duration"`
	MessagesPerSecond float64 `json:"messages_per_second"`
	Total             float64 `json:"total"`
}

type QuietTimeState struct {
	End   string `json:"end"`
	Start string `json:"start"`
}
