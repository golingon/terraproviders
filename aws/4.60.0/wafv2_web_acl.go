// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	wafv2webacl "github.com/golingon/terraproviders/aws/4.60.0/wafv2webacl"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWafv2WebAcl(name string, args Wafv2WebAclArgs) *Wafv2WebAcl {
	return &Wafv2WebAcl{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Wafv2WebAcl)(nil)

type Wafv2WebAcl struct {
	Name  string
	Args  Wafv2WebAclArgs
	state *wafv2WebAclState
}

func (wwa *Wafv2WebAcl) Type() string {
	return "aws_wafv2_web_acl"
}

func (wwa *Wafv2WebAcl) LocalName() string {
	return wwa.Name
}

func (wwa *Wafv2WebAcl) Configuration() interface{} {
	return wwa.Args
}

func (wwa *Wafv2WebAcl) Attributes() wafv2WebAclAttributes {
	return wafv2WebAclAttributes{ref: terra.ReferenceResource(wwa)}
}

func (wwa *Wafv2WebAcl) ImportState(av io.Reader) error {
	wwa.state = &wafv2WebAclState{}
	if err := json.NewDecoder(av).Decode(wwa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wwa.Type(), wwa.LocalName(), err)
	}
	return nil
}

func (wwa *Wafv2WebAcl) State() (*wafv2WebAclState, bool) {
	return wwa.state, wwa.state != nil
}

func (wwa *Wafv2WebAcl) StateMust() *wafv2WebAclState {
	if wwa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wwa.Type(), wwa.LocalName()))
	}
	return wwa.state
}

func (wwa *Wafv2WebAcl) DependOn() terra.Reference {
	return terra.ReferenceResource(wwa)
}

type Wafv2WebAclArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CustomResponseBody: min=0
	CustomResponseBody []wafv2webacl.CustomResponseBody `hcl:"custom_response_body,block" validate:"min=0"`
	// DefaultAction: required
	DefaultAction *wafv2webacl.DefaultAction `hcl:"default_action,block" validate:"required"`
	// Rule: min=0
	Rule []wafv2webacl.Rule `hcl:"rule,block" validate:"min=0"`
	// VisibilityConfig: required
	VisibilityConfig *wafv2webacl.VisibilityConfig `hcl:"visibility_config,block" validate:"required"`
	// DependsOn contains resources that Wafv2WebAcl depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type wafv2WebAclAttributes struct {
	ref terra.Reference
}

func (wwa wafv2WebAclAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("arn"))
}

func (wwa wafv2WebAclAttributes) Capacity() terra.NumberValue {
	return terra.ReferenceNumber(wwa.ref.Append("capacity"))
}

func (wwa wafv2WebAclAttributes) Description() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("description"))
}

func (wwa wafv2WebAclAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("id"))
}

func (wwa wafv2WebAclAttributes) LockToken() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("lock_token"))
}

func (wwa wafv2WebAclAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("name"))
}

func (wwa wafv2WebAclAttributes) Scope() terra.StringValue {
	return terra.ReferenceString(wwa.ref.Append("scope"))
}

func (wwa wafv2WebAclAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wwa.ref.Append("tags"))
}

func (wwa wafv2WebAclAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](wwa.ref.Append("tags_all"))
}

func (wwa wafv2WebAclAttributes) CustomResponseBody() terra.SetValue[wafv2webacl.CustomResponseBodyAttributes] {
	return terra.ReferenceSet[wafv2webacl.CustomResponseBodyAttributes](wwa.ref.Append("custom_response_body"))
}

func (wwa wafv2WebAclAttributes) DefaultAction() terra.ListValue[wafv2webacl.DefaultActionAttributes] {
	return terra.ReferenceList[wafv2webacl.DefaultActionAttributes](wwa.ref.Append("default_action"))
}

func (wwa wafv2WebAclAttributes) Rule() terra.SetValue[wafv2webacl.RuleAttributes] {
	return terra.ReferenceSet[wafv2webacl.RuleAttributes](wwa.ref.Append("rule"))
}

func (wwa wafv2WebAclAttributes) VisibilityConfig() terra.ListValue[wafv2webacl.VisibilityConfigAttributes] {
	return terra.ReferenceList[wafv2webacl.VisibilityConfigAttributes](wwa.ref.Append("visibility_config"))
}

type wafv2WebAclState struct {
	Arn                string                                `json:"arn"`
	Capacity           float64                               `json:"capacity"`
	Description        string                                `json:"description"`
	Id                 string                                `json:"id"`
	LockToken          string                                `json:"lock_token"`
	Name               string                                `json:"name"`
	Scope              string                                `json:"scope"`
	Tags               map[string]string                     `json:"tags"`
	TagsAll            map[string]string                     `json:"tags_all"`
	CustomResponseBody []wafv2webacl.CustomResponseBodyState `json:"custom_response_body"`
	DefaultAction      []wafv2webacl.DefaultActionState      `json:"default_action"`
	Rule               []wafv2webacl.RuleState               `json:"rule"`
	VisibilityConfig   []wafv2webacl.VisibilityConfigState   `json:"visibility_config"`
}
