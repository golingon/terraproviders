// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLightsailDomainEntry(name string, args LightsailDomainEntryArgs) *LightsailDomainEntry {
	return &LightsailDomainEntry{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LightsailDomainEntry)(nil)

type LightsailDomainEntry struct {
	Name  string
	Args  LightsailDomainEntryArgs
	state *lightsailDomainEntryState
}

func (lde *LightsailDomainEntry) Type() string {
	return "aws_lightsail_domain_entry"
}

func (lde *LightsailDomainEntry) LocalName() string {
	return lde.Name
}

func (lde *LightsailDomainEntry) Configuration() interface{} {
	return lde.Args
}

func (lde *LightsailDomainEntry) Attributes() lightsailDomainEntryAttributes {
	return lightsailDomainEntryAttributes{ref: terra.ReferenceResource(lde)}
}

func (lde *LightsailDomainEntry) ImportState(av io.Reader) error {
	lde.state = &lightsailDomainEntryState{}
	if err := json.NewDecoder(av).Decode(lde.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lde.Type(), lde.LocalName(), err)
	}
	return nil
}

func (lde *LightsailDomainEntry) State() (*lightsailDomainEntryState, bool) {
	return lde.state, lde.state != nil
}

func (lde *LightsailDomainEntry) StateMust() *lightsailDomainEntryState {
	if lde.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lde.Type(), lde.LocalName()))
	}
	return lde.state
}

func (lde *LightsailDomainEntry) DependOn() terra.Reference {
	return terra.ReferenceResource(lde)
}

type LightsailDomainEntryArgs struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IsAlias: bool, optional
	IsAlias terra.BoolValue `hcl:"is_alias,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Target: string, required
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// DependsOn contains resources that LightsailDomainEntry depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lightsailDomainEntryAttributes struct {
	ref terra.Reference
}

func (lde lightsailDomainEntryAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(lde.ref.Append("domain_name"))
}

func (lde lightsailDomainEntryAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lde.ref.Append("id"))
}

func (lde lightsailDomainEntryAttributes) IsAlias() terra.BoolValue {
	return terra.ReferenceBool(lde.ref.Append("is_alias"))
}

func (lde lightsailDomainEntryAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lde.ref.Append("name"))
}

func (lde lightsailDomainEntryAttributes) Target() terra.StringValue {
	return terra.ReferenceString(lde.ref.Append("target"))
}

func (lde lightsailDomainEntryAttributes) Type() terra.StringValue {
	return terra.ReferenceString(lde.ref.Append("type"))
}

type lightsailDomainEntryState struct {
	DomainName string `json:"domain_name"`
	Id         string `json:"id"`
	IsAlias    bool   `json:"is_alias"`
	Name       string `json:"name"`
	Target     string `json:"target"`
	Type       string `json:"type"`
}
