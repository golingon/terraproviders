// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigatewayv2ApiMapping(name string, args Apigatewayv2ApiMappingArgs) *Apigatewayv2ApiMapping {
	return &Apigatewayv2ApiMapping{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Apigatewayv2ApiMapping)(nil)

type Apigatewayv2ApiMapping struct {
	Name  string
	Args  Apigatewayv2ApiMappingArgs
	state *apigatewayv2ApiMappingState
}

func (aam *Apigatewayv2ApiMapping) Type() string {
	return "aws_apigatewayv2_api_mapping"
}

func (aam *Apigatewayv2ApiMapping) LocalName() string {
	return aam.Name
}

func (aam *Apigatewayv2ApiMapping) Configuration() interface{} {
	return aam.Args
}

func (aam *Apigatewayv2ApiMapping) Attributes() apigatewayv2ApiMappingAttributes {
	return apigatewayv2ApiMappingAttributes{ref: terra.ReferenceResource(aam)}
}

func (aam *Apigatewayv2ApiMapping) ImportState(av io.Reader) error {
	aam.state = &apigatewayv2ApiMappingState{}
	if err := json.NewDecoder(av).Decode(aam.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aam.Type(), aam.LocalName(), err)
	}
	return nil
}

func (aam *Apigatewayv2ApiMapping) State() (*apigatewayv2ApiMappingState, bool) {
	return aam.state, aam.state != nil
}

func (aam *Apigatewayv2ApiMapping) StateMust() *apigatewayv2ApiMappingState {
	if aam.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aam.Type(), aam.LocalName()))
	}
	return aam.state
}

func (aam *Apigatewayv2ApiMapping) DependOn() terra.Reference {
	return terra.ReferenceResource(aam)
}

type Apigatewayv2ApiMappingArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// ApiMappingKey: string, optional
	ApiMappingKey terra.StringValue `hcl:"api_mapping_key,attr"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Stage: string, required
	Stage terra.StringValue `hcl:"stage,attr" validate:"required"`
	// DependsOn contains resources that Apigatewayv2ApiMapping depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigatewayv2ApiMappingAttributes struct {
	ref terra.Reference
}

func (aam apigatewayv2ApiMappingAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(aam.ref.Append("api_id"))
}

func (aam apigatewayv2ApiMappingAttributes) ApiMappingKey() terra.StringValue {
	return terra.ReferenceString(aam.ref.Append("api_mapping_key"))
}

func (aam apigatewayv2ApiMappingAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(aam.ref.Append("domain_name"))
}

func (aam apigatewayv2ApiMappingAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aam.ref.Append("id"))
}

func (aam apigatewayv2ApiMappingAttributes) Stage() terra.StringValue {
	return terra.ReferenceString(aam.ref.Append("stage"))
}

type apigatewayv2ApiMappingState struct {
	ApiId         string `json:"api_id"`
	ApiMappingKey string `json:"api_mapping_key"`
	DomainName    string `json:"domain_name"`
	Id            string `json:"id"`
	Stage         string `json:"stage"`
}
