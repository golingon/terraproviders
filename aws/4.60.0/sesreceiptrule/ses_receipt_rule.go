// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package sesreceiptrule

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AddHeaderAction struct {
	// HeaderName: string, required
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue: string, required
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Position: number, required
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
}

type BounceAction struct {
	// Message: string, required
	Message terra.StringValue `hcl:"message,attr" validate:"required"`
	// Position: number, required
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
	// Sender: string, required
	Sender terra.StringValue `hcl:"sender,attr" validate:"required"`
	// SmtpReplyCode: string, required
	SmtpReplyCode terra.StringValue `hcl:"smtp_reply_code,attr" validate:"required"`
	// StatusCode: string, optional
	StatusCode terra.StringValue `hcl:"status_code,attr"`
	// TopicArn: string, optional
	TopicArn terra.StringValue `hcl:"topic_arn,attr"`
}

type LambdaAction struct {
	// FunctionArn: string, required
	FunctionArn terra.StringValue `hcl:"function_arn,attr" validate:"required"`
	// InvocationType: string, optional
	InvocationType terra.StringValue `hcl:"invocation_type,attr"`
	// Position: number, required
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
	// TopicArn: string, optional
	TopicArn terra.StringValue `hcl:"topic_arn,attr"`
}

type S3Action struct {
	// BucketName: string, required
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// ObjectKeyPrefix: string, optional
	ObjectKeyPrefix terra.StringValue `hcl:"object_key_prefix,attr"`
	// Position: number, required
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
	// TopicArn: string, optional
	TopicArn terra.StringValue `hcl:"topic_arn,attr"`
}

type SnsAction struct {
	// Encoding: string, optional
	Encoding terra.StringValue `hcl:"encoding,attr"`
	// Position: number, required
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
	// TopicArn: string, required
	TopicArn terra.StringValue `hcl:"topic_arn,attr" validate:"required"`
}

type StopAction struct {
	// Position: number, required
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
	// Scope: string, required
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// TopicArn: string, optional
	TopicArn terra.StringValue `hcl:"topic_arn,attr"`
}

type WorkmailAction struct {
	// OrganizationArn: string, required
	OrganizationArn terra.StringValue `hcl:"organization_arn,attr" validate:"required"`
	// Position: number, required
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
	// TopicArn: string, optional
	TopicArn terra.StringValue `hcl:"topic_arn,attr"`
}

type AddHeaderActionAttributes struct {
	ref terra.Reference
}

func (aha AddHeaderActionAttributes) InternalRef() terra.Reference {
	return aha.ref
}

func (aha AddHeaderActionAttributes) InternalWithRef(ref terra.Reference) AddHeaderActionAttributes {
	return AddHeaderActionAttributes{ref: ref}
}

func (aha AddHeaderActionAttributes) InternalTokens() hclwrite.Tokens {
	return aha.ref.InternalTokens()
}

func (aha AddHeaderActionAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceString(aha.ref.Append("header_name"))
}

func (aha AddHeaderActionAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceString(aha.ref.Append("header_value"))
}

func (aha AddHeaderActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceNumber(aha.ref.Append("position"))
}

type BounceActionAttributes struct {
	ref terra.Reference
}

func (ba BounceActionAttributes) InternalRef() terra.Reference {
	return ba.ref
}

func (ba BounceActionAttributes) InternalWithRef(ref terra.Reference) BounceActionAttributes {
	return BounceActionAttributes{ref: ref}
}

func (ba BounceActionAttributes) InternalTokens() hclwrite.Tokens {
	return ba.ref.InternalTokens()
}

func (ba BounceActionAttributes) Message() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("message"))
}

func (ba BounceActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceNumber(ba.ref.Append("position"))
}

func (ba BounceActionAttributes) Sender() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("sender"))
}

func (ba BounceActionAttributes) SmtpReplyCode() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("smtp_reply_code"))
}

func (ba BounceActionAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("status_code"))
}

func (ba BounceActionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceString(ba.ref.Append("topic_arn"))
}

type LambdaActionAttributes struct {
	ref terra.Reference
}

func (la LambdaActionAttributes) InternalRef() terra.Reference {
	return la.ref
}

func (la LambdaActionAttributes) InternalWithRef(ref terra.Reference) LambdaActionAttributes {
	return LambdaActionAttributes{ref: ref}
}

func (la LambdaActionAttributes) InternalTokens() hclwrite.Tokens {
	return la.ref.InternalTokens()
}

func (la LambdaActionAttributes) FunctionArn() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("function_arn"))
}

func (la LambdaActionAttributes) InvocationType() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("invocation_type"))
}

func (la LambdaActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceNumber(la.ref.Append("position"))
}

func (la LambdaActionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceString(la.ref.Append("topic_arn"))
}

type S3ActionAttributes struct {
	ref terra.Reference
}

func (sa S3ActionAttributes) InternalRef() terra.Reference {
	return sa.ref
}

func (sa S3ActionAttributes) InternalWithRef(ref terra.Reference) S3ActionAttributes {
	return S3ActionAttributes{ref: ref}
}

func (sa S3ActionAttributes) InternalTokens() hclwrite.Tokens {
	return sa.ref.InternalTokens()
}

func (sa S3ActionAttributes) BucketName() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("bucket_name"))
}

func (sa S3ActionAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("kms_key_arn"))
}

func (sa S3ActionAttributes) ObjectKeyPrefix() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("object_key_prefix"))
}

func (sa S3ActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceNumber(sa.ref.Append("position"))
}

func (sa S3ActionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("topic_arn"))
}

type SnsActionAttributes struct {
	ref terra.Reference
}

func (sa SnsActionAttributes) InternalRef() terra.Reference {
	return sa.ref
}

func (sa SnsActionAttributes) InternalWithRef(ref terra.Reference) SnsActionAttributes {
	return SnsActionAttributes{ref: ref}
}

func (sa SnsActionAttributes) InternalTokens() hclwrite.Tokens {
	return sa.ref.InternalTokens()
}

func (sa SnsActionAttributes) Encoding() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("encoding"))
}

func (sa SnsActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceNumber(sa.ref.Append("position"))
}

func (sa SnsActionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("topic_arn"))
}

type StopActionAttributes struct {
	ref terra.Reference
}

func (sa StopActionAttributes) InternalRef() terra.Reference {
	return sa.ref
}

func (sa StopActionAttributes) InternalWithRef(ref terra.Reference) StopActionAttributes {
	return StopActionAttributes{ref: ref}
}

func (sa StopActionAttributes) InternalTokens() hclwrite.Tokens {
	return sa.ref.InternalTokens()
}

func (sa StopActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceNumber(sa.ref.Append("position"))
}

func (sa StopActionAttributes) Scope() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("scope"))
}

func (sa StopActionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("topic_arn"))
}

type WorkmailActionAttributes struct {
	ref terra.Reference
}

func (wa WorkmailActionAttributes) InternalRef() terra.Reference {
	return wa.ref
}

func (wa WorkmailActionAttributes) InternalWithRef(ref terra.Reference) WorkmailActionAttributes {
	return WorkmailActionAttributes{ref: ref}
}

func (wa WorkmailActionAttributes) InternalTokens() hclwrite.Tokens {
	return wa.ref.InternalTokens()
}

func (wa WorkmailActionAttributes) OrganizationArn() terra.StringValue {
	return terra.ReferenceString(wa.ref.Append("organization_arn"))
}

func (wa WorkmailActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceNumber(wa.ref.Append("position"))
}

func (wa WorkmailActionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceString(wa.ref.Append("topic_arn"))
}

type AddHeaderActionState struct {
	HeaderName  string  `json:"header_name"`
	HeaderValue string  `json:"header_value"`
	Position    float64 `json:"position"`
}

type BounceActionState struct {
	Message       string  `json:"message"`
	Position      float64 `json:"position"`
	Sender        string  `json:"sender"`
	SmtpReplyCode string  `json:"smtp_reply_code"`
	StatusCode    string  `json:"status_code"`
	TopicArn      string  `json:"topic_arn"`
}

type LambdaActionState struct {
	FunctionArn    string  `json:"function_arn"`
	InvocationType string  `json:"invocation_type"`
	Position       float64 `json:"position"`
	TopicArn       string  `json:"topic_arn"`
}

type S3ActionState struct {
	BucketName      string  `json:"bucket_name"`
	KmsKeyArn       string  `json:"kms_key_arn"`
	ObjectKeyPrefix string  `json:"object_key_prefix"`
	Position        float64 `json:"position"`
	TopicArn        string  `json:"topic_arn"`
}

type SnsActionState struct {
	Encoding string  `json:"encoding"`
	Position float64 `json:"position"`
	TopicArn string  `json:"topic_arn"`
}

type StopActionState struct {
	Position float64 `json:"position"`
	Scope    string  `json:"scope"`
	TopicArn string  `json:"topic_arn"`
}

type WorkmailActionState struct {
	OrganizationArn string  `json:"organization_arn"`
	Position        float64 `json:"position"`
	TopicArn        string  `json:"topic_arn"`
}
