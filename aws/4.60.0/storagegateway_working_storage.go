// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStoragegatewayWorkingStorage(name string, args StoragegatewayWorkingStorageArgs) *StoragegatewayWorkingStorage {
	return &StoragegatewayWorkingStorage{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StoragegatewayWorkingStorage)(nil)

type StoragegatewayWorkingStorage struct {
	Name  string
	Args  StoragegatewayWorkingStorageArgs
	state *storagegatewayWorkingStorageState
}

func (sws *StoragegatewayWorkingStorage) Type() string {
	return "aws_storagegateway_working_storage"
}

func (sws *StoragegatewayWorkingStorage) LocalName() string {
	return sws.Name
}

func (sws *StoragegatewayWorkingStorage) Configuration() interface{} {
	return sws.Args
}

func (sws *StoragegatewayWorkingStorage) Attributes() storagegatewayWorkingStorageAttributes {
	return storagegatewayWorkingStorageAttributes{ref: terra.ReferenceResource(sws)}
}

func (sws *StoragegatewayWorkingStorage) ImportState(av io.Reader) error {
	sws.state = &storagegatewayWorkingStorageState{}
	if err := json.NewDecoder(av).Decode(sws.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sws.Type(), sws.LocalName(), err)
	}
	return nil
}

func (sws *StoragegatewayWorkingStorage) State() (*storagegatewayWorkingStorageState, bool) {
	return sws.state, sws.state != nil
}

func (sws *StoragegatewayWorkingStorage) StateMust() *storagegatewayWorkingStorageState {
	if sws.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sws.Type(), sws.LocalName()))
	}
	return sws.state
}

func (sws *StoragegatewayWorkingStorage) DependOn() terra.Reference {
	return terra.ReferenceResource(sws)
}

type StoragegatewayWorkingStorageArgs struct {
	// DiskId: string, required
	DiskId terra.StringValue `hcl:"disk_id,attr" validate:"required"`
	// GatewayArn: string, required
	GatewayArn terra.StringValue `hcl:"gateway_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DependsOn contains resources that StoragegatewayWorkingStorage depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storagegatewayWorkingStorageAttributes struct {
	ref terra.Reference
}

func (sws storagegatewayWorkingStorageAttributes) DiskId() terra.StringValue {
	return terra.ReferenceString(sws.ref.Append("disk_id"))
}

func (sws storagegatewayWorkingStorageAttributes) GatewayArn() terra.StringValue {
	return terra.ReferenceString(sws.ref.Append("gateway_arn"))
}

func (sws storagegatewayWorkingStorageAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sws.ref.Append("id"))
}

type storagegatewayWorkingStorageState struct {
	DiskId     string `json:"disk_id"`
	GatewayArn string `json:"gateway_arn"`
	Id         string `json:"id"`
}
