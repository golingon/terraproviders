// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSnsTopicSubscription(name string, args SnsTopicSubscriptionArgs) *SnsTopicSubscription {
	return &SnsTopicSubscription{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SnsTopicSubscription)(nil)

type SnsTopicSubscription struct {
	Name  string
	Args  SnsTopicSubscriptionArgs
	state *snsTopicSubscriptionState
}

func (sts *SnsTopicSubscription) Type() string {
	return "aws_sns_topic_subscription"
}

func (sts *SnsTopicSubscription) LocalName() string {
	return sts.Name
}

func (sts *SnsTopicSubscription) Configuration() interface{} {
	return sts.Args
}

func (sts *SnsTopicSubscription) Attributes() snsTopicSubscriptionAttributes {
	return snsTopicSubscriptionAttributes{ref: terra.ReferenceResource(sts)}
}

func (sts *SnsTopicSubscription) ImportState(av io.Reader) error {
	sts.state = &snsTopicSubscriptionState{}
	if err := json.NewDecoder(av).Decode(sts.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sts.Type(), sts.LocalName(), err)
	}
	return nil
}

func (sts *SnsTopicSubscription) State() (*snsTopicSubscriptionState, bool) {
	return sts.state, sts.state != nil
}

func (sts *SnsTopicSubscription) StateMust() *snsTopicSubscriptionState {
	if sts.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sts.Type(), sts.LocalName()))
	}
	return sts.state
}

func (sts *SnsTopicSubscription) DependOn() terra.Reference {
	return terra.ReferenceResource(sts)
}

type SnsTopicSubscriptionArgs struct {
	// ConfirmationTimeoutInMinutes: number, optional
	ConfirmationTimeoutInMinutes terra.NumberValue `hcl:"confirmation_timeout_in_minutes,attr"`
	// DeliveryPolicy: string, optional
	DeliveryPolicy terra.StringValue `hcl:"delivery_policy,attr"`
	// Endpoint: string, required
	Endpoint terra.StringValue `hcl:"endpoint,attr" validate:"required"`
	// EndpointAutoConfirms: bool, optional
	EndpointAutoConfirms terra.BoolValue `hcl:"endpoint_auto_confirms,attr"`
	// FilterPolicy: string, optional
	FilterPolicy terra.StringValue `hcl:"filter_policy,attr"`
	// FilterPolicyScope: string, optional
	FilterPolicyScope terra.StringValue `hcl:"filter_policy_scope,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Protocol: string, required
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// RawMessageDelivery: bool, optional
	RawMessageDelivery terra.BoolValue `hcl:"raw_message_delivery,attr"`
	// RedrivePolicy: string, optional
	RedrivePolicy terra.StringValue `hcl:"redrive_policy,attr"`
	// SubscriptionRoleArn: string, optional
	SubscriptionRoleArn terra.StringValue `hcl:"subscription_role_arn,attr"`
	// TopicArn: string, required
	TopicArn terra.StringValue `hcl:"topic_arn,attr" validate:"required"`
	// DependsOn contains resources that SnsTopicSubscription depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type snsTopicSubscriptionAttributes struct {
	ref terra.Reference
}

func (sts snsTopicSubscriptionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sts.ref.Append("arn"))
}

func (sts snsTopicSubscriptionAttributes) ConfirmationTimeoutInMinutes() terra.NumberValue {
	return terra.ReferenceNumber(sts.ref.Append("confirmation_timeout_in_minutes"))
}

func (sts snsTopicSubscriptionAttributes) ConfirmationWasAuthenticated() terra.BoolValue {
	return terra.ReferenceBool(sts.ref.Append("confirmation_was_authenticated"))
}

func (sts snsTopicSubscriptionAttributes) DeliveryPolicy() terra.StringValue {
	return terra.ReferenceString(sts.ref.Append("delivery_policy"))
}

func (sts snsTopicSubscriptionAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(sts.ref.Append("endpoint"))
}

func (sts snsTopicSubscriptionAttributes) EndpointAutoConfirms() terra.BoolValue {
	return terra.ReferenceBool(sts.ref.Append("endpoint_auto_confirms"))
}

func (sts snsTopicSubscriptionAttributes) FilterPolicy() terra.StringValue {
	return terra.ReferenceString(sts.ref.Append("filter_policy"))
}

func (sts snsTopicSubscriptionAttributes) FilterPolicyScope() terra.StringValue {
	return terra.ReferenceString(sts.ref.Append("filter_policy_scope"))
}

func (sts snsTopicSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sts.ref.Append("id"))
}

func (sts snsTopicSubscriptionAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(sts.ref.Append("owner_id"))
}

func (sts snsTopicSubscriptionAttributes) PendingConfirmation() terra.BoolValue {
	return terra.ReferenceBool(sts.ref.Append("pending_confirmation"))
}

func (sts snsTopicSubscriptionAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(sts.ref.Append("protocol"))
}

func (sts snsTopicSubscriptionAttributes) RawMessageDelivery() terra.BoolValue {
	return terra.ReferenceBool(sts.ref.Append("raw_message_delivery"))
}

func (sts snsTopicSubscriptionAttributes) RedrivePolicy() terra.StringValue {
	return terra.ReferenceString(sts.ref.Append("redrive_policy"))
}

func (sts snsTopicSubscriptionAttributes) SubscriptionRoleArn() terra.StringValue {
	return terra.ReferenceString(sts.ref.Append("subscription_role_arn"))
}

func (sts snsTopicSubscriptionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceString(sts.ref.Append("topic_arn"))
}

type snsTopicSubscriptionState struct {
	Arn                          string  `json:"arn"`
	ConfirmationTimeoutInMinutes float64 `json:"confirmation_timeout_in_minutes"`
	ConfirmationWasAuthenticated bool    `json:"confirmation_was_authenticated"`
	DeliveryPolicy               string  `json:"delivery_policy"`
	Endpoint                     string  `json:"endpoint"`
	EndpointAutoConfirms         bool    `json:"endpoint_auto_confirms"`
	FilterPolicy                 string  `json:"filter_policy"`
	FilterPolicyScope            string  `json:"filter_policy_scope"`
	Id                           string  `json:"id"`
	OwnerId                      string  `json:"owner_id"`
	PendingConfirmation          bool    `json:"pending_confirmation"`
	Protocol                     string  `json:"protocol"`
	RawMessageDelivery           bool    `json:"raw_message_delivery"`
	RedrivePolicy                string  `json:"redrive_policy"`
	SubscriptionRoleArn          string  `json:"subscription_role_arn"`
	TopicArn                     string  `json:"topic_arn"`
}
