// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftserverlessResourcePolicy(name string, args RedshiftserverlessResourcePolicyArgs) *RedshiftserverlessResourcePolicy {
	return &RedshiftserverlessResourcePolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftserverlessResourcePolicy)(nil)

type RedshiftserverlessResourcePolicy struct {
	Name  string
	Args  RedshiftserverlessResourcePolicyArgs
	state *redshiftserverlessResourcePolicyState
}

func (rrp *RedshiftserverlessResourcePolicy) Type() string {
	return "aws_redshiftserverless_resource_policy"
}

func (rrp *RedshiftserverlessResourcePolicy) LocalName() string {
	return rrp.Name
}

func (rrp *RedshiftserverlessResourcePolicy) Configuration() interface{} {
	return rrp.Args
}

func (rrp *RedshiftserverlessResourcePolicy) Attributes() redshiftserverlessResourcePolicyAttributes {
	return redshiftserverlessResourcePolicyAttributes{ref: terra.ReferenceResource(rrp)}
}

func (rrp *RedshiftserverlessResourcePolicy) ImportState(av io.Reader) error {
	rrp.state = &redshiftserverlessResourcePolicyState{}
	if err := json.NewDecoder(av).Decode(rrp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrp.Type(), rrp.LocalName(), err)
	}
	return nil
}

func (rrp *RedshiftserverlessResourcePolicy) State() (*redshiftserverlessResourcePolicyState, bool) {
	return rrp.state, rrp.state != nil
}

func (rrp *RedshiftserverlessResourcePolicy) StateMust() *redshiftserverlessResourcePolicyState {
	if rrp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrp.Type(), rrp.LocalName()))
	}
	return rrp.state
}

func (rrp *RedshiftserverlessResourcePolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(rrp)
}

type RedshiftserverlessResourcePolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// DependsOn contains resources that RedshiftserverlessResourcePolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftserverlessResourcePolicyAttributes struct {
	ref terra.Reference
}

func (rrp redshiftserverlessResourcePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rrp.ref.Append("id"))
}

func (rrp redshiftserverlessResourcePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(rrp.ref.Append("policy"))
}

func (rrp redshiftserverlessResourcePolicyAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceString(rrp.ref.Append("resource_arn"))
}

type redshiftserverlessResourcePolicyState struct {
	Id          string `json:"id"`
	Policy      string `json:"policy"`
	ResourceArn string `json:"resource_arn"`
}
