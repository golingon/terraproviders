// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package appconfigextension

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ActionPoint struct {
	// Point: string, required
	Point terra.StringValue `hcl:"point,attr" validate:"required"`
	// Action: min=1
	Action []Action `hcl:"action,block" validate:"min=1"`
}

type Action struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type Parameter struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Required: bool, optional
	Required terra.BoolValue `hcl:"required,attr"`
}

type ActionPointAttributes struct {
	ref terra.Reference
}

func (ap ActionPointAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap ActionPointAttributes) InternalWithRef(ref terra.Reference) ActionPointAttributes {
	return ActionPointAttributes{ref: ref}
}

func (ap ActionPointAttributes) InternalTokens() hclwrite.Tokens {
	return ap.ref.InternalTokens()
}

func (ap ActionPointAttributes) Point() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("point"))
}

func (ap ActionPointAttributes) Action() terra.SetValue[ActionAttributes] {
	return terra.ReferenceAsSet[ActionAttributes](ap.ref.Append("action"))
}

type ActionAttributes struct {
	ref terra.Reference
}

func (a ActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ActionAttributes) InternalWithRef(ref terra.Reference) ActionAttributes {
	return ActionAttributes{ref: ref}
}

func (a ActionAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a ActionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("description"))
}

func (a ActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a ActionAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("role_arn"))
}

func (a ActionAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("uri"))
}

type ParameterAttributes struct {
	ref terra.Reference
}

func (p ParameterAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p ParameterAttributes) InternalWithRef(ref terra.Reference) ParameterAttributes {
	return ParameterAttributes{ref: ref}
}

func (p ParameterAttributes) InternalTokens() hclwrite.Tokens {
	return p.ref.InternalTokens()
}

func (p ParameterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("description"))
}

func (p ParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p ParameterAttributes) Required() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("required"))
}

type ActionPointState struct {
	Point  string        `json:"point"`
	Action []ActionState `json:"action"`
}

type ActionState struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	RoleArn     string `json:"role_arn"`
	Uri         string `json:"uri"`
}

type ParameterState struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	Required    bool   `json:"required"`
}
