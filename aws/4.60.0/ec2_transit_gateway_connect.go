// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ec2transitgatewayconnect "github.com/golingon/terraproviders/aws/4.60.0/ec2transitgatewayconnect"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2TransitGatewayConnect(name string, args Ec2TransitGatewayConnectArgs) *Ec2TransitGatewayConnect {
	return &Ec2TransitGatewayConnect{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TransitGatewayConnect)(nil)

type Ec2TransitGatewayConnect struct {
	Name  string
	Args  Ec2TransitGatewayConnectArgs
	state *ec2TransitGatewayConnectState
}

func (etgc *Ec2TransitGatewayConnect) Type() string {
	return "aws_ec2_transit_gateway_connect"
}

func (etgc *Ec2TransitGatewayConnect) LocalName() string {
	return etgc.Name
}

func (etgc *Ec2TransitGatewayConnect) Configuration() interface{} {
	return etgc.Args
}

func (etgc *Ec2TransitGatewayConnect) Attributes() ec2TransitGatewayConnectAttributes {
	return ec2TransitGatewayConnectAttributes{ref: terra.ReferenceResource(etgc)}
}

func (etgc *Ec2TransitGatewayConnect) ImportState(av io.Reader) error {
	etgc.state = &ec2TransitGatewayConnectState{}
	if err := json.NewDecoder(av).Decode(etgc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etgc.Type(), etgc.LocalName(), err)
	}
	return nil
}

func (etgc *Ec2TransitGatewayConnect) State() (*ec2TransitGatewayConnectState, bool) {
	return etgc.state, etgc.state != nil
}

func (etgc *Ec2TransitGatewayConnect) StateMust() *ec2TransitGatewayConnectState {
	if etgc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etgc.Type(), etgc.LocalName()))
	}
	return etgc.state
}

func (etgc *Ec2TransitGatewayConnect) DependOn() terra.Reference {
	return terra.ReferenceResource(etgc)
}

type Ec2TransitGatewayConnectArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitGatewayDefaultRouteTableAssociation: bool, optional
	TransitGatewayDefaultRouteTableAssociation terra.BoolValue `hcl:"transit_gateway_default_route_table_association,attr"`
	// TransitGatewayDefaultRouteTablePropagation: bool, optional
	TransitGatewayDefaultRouteTablePropagation terra.BoolValue `hcl:"transit_gateway_default_route_table_propagation,attr"`
	// TransitGatewayId: string, required
	TransitGatewayId terra.StringValue `hcl:"transit_gateway_id,attr" validate:"required"`
	// TransportAttachmentId: string, required
	TransportAttachmentId terra.StringValue `hcl:"transport_attachment_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *ec2transitgatewayconnect.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Ec2TransitGatewayConnect depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2TransitGatewayConnectAttributes struct {
	ref terra.Reference
}

func (etgc ec2TransitGatewayConnectAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etgc.ref.Append("id"))
}

func (etgc ec2TransitGatewayConnectAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(etgc.ref.Append("protocol"))
}

func (etgc ec2TransitGatewayConnectAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etgc.ref.Append("tags"))
}

func (etgc ec2TransitGatewayConnectAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etgc.ref.Append("tags_all"))
}

func (etgc ec2TransitGatewayConnectAttributes) TransitGatewayDefaultRouteTableAssociation() terra.BoolValue {
	return terra.ReferenceBool(etgc.ref.Append("transit_gateway_default_route_table_association"))
}

func (etgc ec2TransitGatewayConnectAttributes) TransitGatewayDefaultRouteTablePropagation() terra.BoolValue {
	return terra.ReferenceBool(etgc.ref.Append("transit_gateway_default_route_table_propagation"))
}

func (etgc ec2TransitGatewayConnectAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceString(etgc.ref.Append("transit_gateway_id"))
}

func (etgc ec2TransitGatewayConnectAttributes) TransportAttachmentId() terra.StringValue {
	return terra.ReferenceString(etgc.ref.Append("transport_attachment_id"))
}

func (etgc ec2TransitGatewayConnectAttributes) Timeouts() ec2transitgatewayconnect.TimeoutsAttributes {
	return terra.ReferenceSingle[ec2transitgatewayconnect.TimeoutsAttributes](etgc.ref.Append("timeouts"))
}

type ec2TransitGatewayConnectState struct {
	Id                                         string                                  `json:"id"`
	Protocol                                   string                                  `json:"protocol"`
	Tags                                       map[string]string                       `json:"tags"`
	TagsAll                                    map[string]string                       `json:"tags_all"`
	TransitGatewayDefaultRouteTableAssociation bool                                    `json:"transit_gateway_default_route_table_association"`
	TransitGatewayDefaultRouteTablePropagation bool                                    `json:"transit_gateway_default_route_table_propagation"`
	TransitGatewayId                           string                                  `json:"transit_gateway_id"`
	TransportAttachmentId                      string                                  `json:"transport_attachment_id"`
	Timeouts                                   *ec2transitgatewayconnect.TimeoutsState `json:"timeouts"`
}
