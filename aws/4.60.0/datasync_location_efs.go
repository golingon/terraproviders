// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	datasynclocationefs "github.com/golingon/terraproviders/aws/4.60.0/datasynclocationefs"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatasyncLocationEfs(name string, args DatasyncLocationEfsArgs) *DatasyncLocationEfs {
	return &DatasyncLocationEfs{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatasyncLocationEfs)(nil)

type DatasyncLocationEfs struct {
	Name  string
	Args  DatasyncLocationEfsArgs
	state *datasyncLocationEfsState
}

func (dle *DatasyncLocationEfs) Type() string {
	return "aws_datasync_location_efs"
}

func (dle *DatasyncLocationEfs) LocalName() string {
	return dle.Name
}

func (dle *DatasyncLocationEfs) Configuration() interface{} {
	return dle.Args
}

func (dle *DatasyncLocationEfs) Attributes() datasyncLocationEfsAttributes {
	return datasyncLocationEfsAttributes{ref: terra.ReferenceResource(dle)}
}

func (dle *DatasyncLocationEfs) ImportState(av io.Reader) error {
	dle.state = &datasyncLocationEfsState{}
	if err := json.NewDecoder(av).Decode(dle.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dle.Type(), dle.LocalName(), err)
	}
	return nil
}

func (dle *DatasyncLocationEfs) State() (*datasyncLocationEfsState, bool) {
	return dle.state, dle.state != nil
}

func (dle *DatasyncLocationEfs) StateMust() *datasyncLocationEfsState {
	if dle.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dle.Type(), dle.LocalName()))
	}
	return dle.state
}

func (dle *DatasyncLocationEfs) DependOn() terra.Reference {
	return terra.ReferenceResource(dle)
}

type DatasyncLocationEfsArgs struct {
	// AccessPointArn: string, optional
	AccessPointArn terra.StringValue `hcl:"access_point_arn,attr"`
	// EfsFileSystemArn: string, required
	EfsFileSystemArn terra.StringValue `hcl:"efs_file_system_arn,attr" validate:"required"`
	// FileSystemAccessRoleArn: string, optional
	FileSystemAccessRoleArn terra.StringValue `hcl:"file_system_access_role_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InTransitEncryption: string, optional
	InTransitEncryption terra.StringValue `hcl:"in_transit_encryption,attr"`
	// Subdirectory: string, optional
	Subdirectory terra.StringValue `hcl:"subdirectory,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Ec2Config: required
	Ec2Config *datasynclocationefs.Ec2Config `hcl:"ec2_config,block" validate:"required"`
	// DependsOn contains resources that DatasyncLocationEfs depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type datasyncLocationEfsAttributes struct {
	ref terra.Reference
}

func (dle datasyncLocationEfsAttributes) AccessPointArn() terra.StringValue {
	return terra.ReferenceString(dle.ref.Append("access_point_arn"))
}

func (dle datasyncLocationEfsAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dle.ref.Append("arn"))
}

func (dle datasyncLocationEfsAttributes) EfsFileSystemArn() terra.StringValue {
	return terra.ReferenceString(dle.ref.Append("efs_file_system_arn"))
}

func (dle datasyncLocationEfsAttributes) FileSystemAccessRoleArn() terra.StringValue {
	return terra.ReferenceString(dle.ref.Append("file_system_access_role_arn"))
}

func (dle datasyncLocationEfsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dle.ref.Append("id"))
}

func (dle datasyncLocationEfsAttributes) InTransitEncryption() terra.StringValue {
	return terra.ReferenceString(dle.ref.Append("in_transit_encryption"))
}

func (dle datasyncLocationEfsAttributes) Subdirectory() terra.StringValue {
	return terra.ReferenceString(dle.ref.Append("subdirectory"))
}

func (dle datasyncLocationEfsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dle.ref.Append("tags"))
}

func (dle datasyncLocationEfsAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dle.ref.Append("tags_all"))
}

func (dle datasyncLocationEfsAttributes) Uri() terra.StringValue {
	return terra.ReferenceString(dle.ref.Append("uri"))
}

func (dle datasyncLocationEfsAttributes) Ec2Config() terra.ListValue[datasynclocationefs.Ec2ConfigAttributes] {
	return terra.ReferenceList[datasynclocationefs.Ec2ConfigAttributes](dle.ref.Append("ec2_config"))
}

type datasyncLocationEfsState struct {
	AccessPointArn          string                               `json:"access_point_arn"`
	Arn                     string                               `json:"arn"`
	EfsFileSystemArn        string                               `json:"efs_file_system_arn"`
	FileSystemAccessRoleArn string                               `json:"file_system_access_role_arn"`
	Id                      string                               `json:"id"`
	InTransitEncryption     string                               `json:"in_transit_encryption"`
	Subdirectory            string                               `json:"subdirectory"`
	Tags                    map[string]string                    `json:"tags"`
	TagsAll                 map[string]string                    `json:"tags_all"`
	Uri                     string                               `json:"uri"`
	Ec2Config               []datasynclocationefs.Ec2ConfigState `json:"ec2_config"`
}
