// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53ResolverDnssecConfig(name string, args Route53ResolverDnssecConfigArgs) *Route53ResolverDnssecConfig {
	return &Route53ResolverDnssecConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53ResolverDnssecConfig)(nil)

type Route53ResolverDnssecConfig struct {
	Name  string
	Args  Route53ResolverDnssecConfigArgs
	state *route53ResolverDnssecConfigState
}

func (rrdc *Route53ResolverDnssecConfig) Type() string {
	return "aws_route53_resolver_dnssec_config"
}

func (rrdc *Route53ResolverDnssecConfig) LocalName() string {
	return rrdc.Name
}

func (rrdc *Route53ResolverDnssecConfig) Configuration() interface{} {
	return rrdc.Args
}

func (rrdc *Route53ResolverDnssecConfig) Attributes() route53ResolverDnssecConfigAttributes {
	return route53ResolverDnssecConfigAttributes{ref: terra.ReferenceResource(rrdc)}
}

func (rrdc *Route53ResolverDnssecConfig) ImportState(av io.Reader) error {
	rrdc.state = &route53ResolverDnssecConfigState{}
	if err := json.NewDecoder(av).Decode(rrdc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrdc.Type(), rrdc.LocalName(), err)
	}
	return nil
}

func (rrdc *Route53ResolverDnssecConfig) State() (*route53ResolverDnssecConfigState, bool) {
	return rrdc.state, rrdc.state != nil
}

func (rrdc *Route53ResolverDnssecConfig) StateMust() *route53ResolverDnssecConfigState {
	if rrdc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrdc.Type(), rrdc.LocalName()))
	}
	return rrdc.state
}

func (rrdc *Route53ResolverDnssecConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(rrdc)
}

type Route53ResolverDnssecConfigArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
	// DependsOn contains resources that Route53ResolverDnssecConfig depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53ResolverDnssecConfigAttributes struct {
	ref terra.Reference
}

func (rrdc route53ResolverDnssecConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rrdc.ref.Append("arn"))
}

func (rrdc route53ResolverDnssecConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rrdc.ref.Append("id"))
}

func (rrdc route53ResolverDnssecConfigAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(rrdc.ref.Append("owner_id"))
}

func (rrdc route53ResolverDnssecConfigAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(rrdc.ref.Append("resource_id"))
}

func (rrdc route53ResolverDnssecConfigAttributes) ValidationStatus() terra.StringValue {
	return terra.ReferenceString(rrdc.ref.Append("validation_status"))
}

type route53ResolverDnssecConfigState struct {
	Arn              string `json:"arn"`
	Id               string `json:"id"`
	OwnerId          string `json:"owner_id"`
	ResourceId       string `json:"resource_id"`
	ValidationStatus string `json:"validation_status"`
}
