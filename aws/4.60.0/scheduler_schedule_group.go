// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	schedulerschedulegroup "github.com/golingon/terraproviders/aws/4.60.0/schedulerschedulegroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSchedulerScheduleGroup(name string, args SchedulerScheduleGroupArgs) *SchedulerScheduleGroup {
	return &SchedulerScheduleGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SchedulerScheduleGroup)(nil)

type SchedulerScheduleGroup struct {
	Name  string
	Args  SchedulerScheduleGroupArgs
	state *schedulerScheduleGroupState
}

func (ssg *SchedulerScheduleGroup) Type() string {
	return "aws_scheduler_schedule_group"
}

func (ssg *SchedulerScheduleGroup) LocalName() string {
	return ssg.Name
}

func (ssg *SchedulerScheduleGroup) Configuration() interface{} {
	return ssg.Args
}

func (ssg *SchedulerScheduleGroup) Attributes() schedulerScheduleGroupAttributes {
	return schedulerScheduleGroupAttributes{ref: terra.ReferenceResource(ssg)}
}

func (ssg *SchedulerScheduleGroup) ImportState(av io.Reader) error {
	ssg.state = &schedulerScheduleGroupState{}
	if err := json.NewDecoder(av).Decode(ssg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssg.Type(), ssg.LocalName(), err)
	}
	return nil
}

func (ssg *SchedulerScheduleGroup) State() (*schedulerScheduleGroupState, bool) {
	return ssg.state, ssg.state != nil
}

func (ssg *SchedulerScheduleGroup) StateMust() *schedulerScheduleGroupState {
	if ssg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssg.Type(), ssg.LocalName()))
	}
	return ssg.state
}

func (ssg *SchedulerScheduleGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(ssg)
}

type SchedulerScheduleGroupArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *schedulerschedulegroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that SchedulerScheduleGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type schedulerScheduleGroupAttributes struct {
	ref terra.Reference
}

func (ssg schedulerScheduleGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ssg.ref.Append("arn"))
}

func (ssg schedulerScheduleGroupAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceString(ssg.ref.Append("creation_date"))
}

func (ssg schedulerScheduleGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssg.ref.Append("id"))
}

func (ssg schedulerScheduleGroupAttributes) LastModificationDate() terra.StringValue {
	return terra.ReferenceString(ssg.ref.Append("last_modification_date"))
}

func (ssg schedulerScheduleGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ssg.ref.Append("name"))
}

func (ssg schedulerScheduleGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(ssg.ref.Append("name_prefix"))
}

func (ssg schedulerScheduleGroupAttributes) State() terra.StringValue {
	return terra.ReferenceString(ssg.ref.Append("state"))
}

func (ssg schedulerScheduleGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ssg.ref.Append("tags"))
}

func (ssg schedulerScheduleGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ssg.ref.Append("tags_all"))
}

func (ssg schedulerScheduleGroupAttributes) Timeouts() schedulerschedulegroup.TimeoutsAttributes {
	return terra.ReferenceSingle[schedulerschedulegroup.TimeoutsAttributes](ssg.ref.Append("timeouts"))
}

type schedulerScheduleGroupState struct {
	Arn                  string                                `json:"arn"`
	CreationDate         string                                `json:"creation_date"`
	Id                   string                                `json:"id"`
	LastModificationDate string                                `json:"last_modification_date"`
	Name                 string                                `json:"name"`
	NamePrefix           string                                `json:"name_prefix"`
	State                string                                `json:"state"`
	Tags                 map[string]string                     `json:"tags"`
	TagsAll              map[string]string                     `json:"tags_all"`
	Timeouts             *schedulerschedulegroup.TimeoutsState `json:"timeouts"`
}
