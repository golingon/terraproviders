// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDxMacsecKeyAssociation(name string, args DxMacsecKeyAssociationArgs) *DxMacsecKeyAssociation {
	return &DxMacsecKeyAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DxMacsecKeyAssociation)(nil)

type DxMacsecKeyAssociation struct {
	Name  string
	Args  DxMacsecKeyAssociationArgs
	state *dxMacsecKeyAssociationState
}

func (dmka *DxMacsecKeyAssociation) Type() string {
	return "aws_dx_macsec_key_association"
}

func (dmka *DxMacsecKeyAssociation) LocalName() string {
	return dmka.Name
}

func (dmka *DxMacsecKeyAssociation) Configuration() interface{} {
	return dmka.Args
}

func (dmka *DxMacsecKeyAssociation) Attributes() dxMacsecKeyAssociationAttributes {
	return dxMacsecKeyAssociationAttributes{ref: terra.ReferenceResource(dmka)}
}

func (dmka *DxMacsecKeyAssociation) ImportState(av io.Reader) error {
	dmka.state = &dxMacsecKeyAssociationState{}
	if err := json.NewDecoder(av).Decode(dmka.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dmka.Type(), dmka.LocalName(), err)
	}
	return nil
}

func (dmka *DxMacsecKeyAssociation) State() (*dxMacsecKeyAssociationState, bool) {
	return dmka.state, dmka.state != nil
}

func (dmka *DxMacsecKeyAssociation) StateMust() *dxMacsecKeyAssociationState {
	if dmka.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dmka.Type(), dmka.LocalName()))
	}
	return dmka.state
}

func (dmka *DxMacsecKeyAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(dmka)
}

type DxMacsecKeyAssociationArgs struct {
	// Cak: string, optional
	Cak terra.StringValue `hcl:"cak,attr"`
	// Ckn: string, optional
	Ckn terra.StringValue `hcl:"ckn,attr"`
	// ConnectionId: string, required
	ConnectionId terra.StringValue `hcl:"connection_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SecretArn: string, optional
	SecretArn terra.StringValue `hcl:"secret_arn,attr"`
	// DependsOn contains resources that DxMacsecKeyAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dxMacsecKeyAssociationAttributes struct {
	ref terra.Reference
}

func (dmka dxMacsecKeyAssociationAttributes) Cak() terra.StringValue {
	return terra.ReferenceString(dmka.ref.Append("cak"))
}

func (dmka dxMacsecKeyAssociationAttributes) Ckn() terra.StringValue {
	return terra.ReferenceString(dmka.ref.Append("ckn"))
}

func (dmka dxMacsecKeyAssociationAttributes) ConnectionId() terra.StringValue {
	return terra.ReferenceString(dmka.ref.Append("connection_id"))
}

func (dmka dxMacsecKeyAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dmka.ref.Append("id"))
}

func (dmka dxMacsecKeyAssociationAttributes) SecretArn() terra.StringValue {
	return terra.ReferenceString(dmka.ref.Append("secret_arn"))
}

func (dmka dxMacsecKeyAssociationAttributes) StartOn() terra.StringValue {
	return terra.ReferenceString(dmka.ref.Append("start_on"))
}

func (dmka dxMacsecKeyAssociationAttributes) State() terra.StringValue {
	return terra.ReferenceString(dmka.ref.Append("state"))
}

type dxMacsecKeyAssociationState struct {
	Cak          string `json:"cak"`
	Ckn          string `json:"ckn"`
	ConnectionId string `json:"connection_id"`
	Id           string `json:"id"`
	SecretArn    string `json:"secret_arn"`
	StartOn      string `json:"start_on"`
	State        string `json:"state"`
}
