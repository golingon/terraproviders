// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkmanagerattachmentaccepter "github.com/golingon/terraproviders/aws/4.60.0/networkmanagerattachmentaccepter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkmanagerAttachmentAccepter(name string, args NetworkmanagerAttachmentAccepterArgs) *NetworkmanagerAttachmentAccepter {
	return &NetworkmanagerAttachmentAccepter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkmanagerAttachmentAccepter)(nil)

type NetworkmanagerAttachmentAccepter struct {
	Name  string
	Args  NetworkmanagerAttachmentAccepterArgs
	state *networkmanagerAttachmentAccepterState
}

func (naa *NetworkmanagerAttachmentAccepter) Type() string {
	return "aws_networkmanager_attachment_accepter"
}

func (naa *NetworkmanagerAttachmentAccepter) LocalName() string {
	return naa.Name
}

func (naa *NetworkmanagerAttachmentAccepter) Configuration() interface{} {
	return naa.Args
}

func (naa *NetworkmanagerAttachmentAccepter) Attributes() networkmanagerAttachmentAccepterAttributes {
	return networkmanagerAttachmentAccepterAttributes{ref: terra.ReferenceResource(naa)}
}

func (naa *NetworkmanagerAttachmentAccepter) ImportState(av io.Reader) error {
	naa.state = &networkmanagerAttachmentAccepterState{}
	if err := json.NewDecoder(av).Decode(naa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", naa.Type(), naa.LocalName(), err)
	}
	return nil
}

func (naa *NetworkmanagerAttachmentAccepter) State() (*networkmanagerAttachmentAccepterState, bool) {
	return naa.state, naa.state != nil
}

func (naa *NetworkmanagerAttachmentAccepter) StateMust() *networkmanagerAttachmentAccepterState {
	if naa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", naa.Type(), naa.LocalName()))
	}
	return naa.state
}

func (naa *NetworkmanagerAttachmentAccepter) DependOn() terra.Reference {
	return terra.ReferenceResource(naa)
}

type NetworkmanagerAttachmentAccepterArgs struct {
	// AttachmentId: string, required
	AttachmentId terra.StringValue `hcl:"attachment_id,attr" validate:"required"`
	// AttachmentType: string, required
	AttachmentType terra.StringValue `hcl:"attachment_type,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *networkmanagerattachmentaccepter.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkmanagerAttachmentAccepter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkmanagerAttachmentAccepterAttributes struct {
	ref terra.Reference
}

func (naa networkmanagerAttachmentAccepterAttributes) AttachmentId() terra.StringValue {
	return terra.ReferenceString(naa.ref.Append("attachment_id"))
}

func (naa networkmanagerAttachmentAccepterAttributes) AttachmentPolicyRuleNumber() terra.NumberValue {
	return terra.ReferenceNumber(naa.ref.Append("attachment_policy_rule_number"))
}

func (naa networkmanagerAttachmentAccepterAttributes) AttachmentType() terra.StringValue {
	return terra.ReferenceString(naa.ref.Append("attachment_type"))
}

func (naa networkmanagerAttachmentAccepterAttributes) CoreNetworkArn() terra.StringValue {
	return terra.ReferenceString(naa.ref.Append("core_network_arn"))
}

func (naa networkmanagerAttachmentAccepterAttributes) CoreNetworkId() terra.StringValue {
	return terra.ReferenceString(naa.ref.Append("core_network_id"))
}

func (naa networkmanagerAttachmentAccepterAttributes) EdgeLocation() terra.StringValue {
	return terra.ReferenceString(naa.ref.Append("edge_location"))
}

func (naa networkmanagerAttachmentAccepterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(naa.ref.Append("id"))
}

func (naa networkmanagerAttachmentAccepterAttributes) OwnerAccountId() terra.StringValue {
	return terra.ReferenceString(naa.ref.Append("owner_account_id"))
}

func (naa networkmanagerAttachmentAccepterAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceString(naa.ref.Append("resource_arn"))
}

func (naa networkmanagerAttachmentAccepterAttributes) SegmentName() terra.StringValue {
	return terra.ReferenceString(naa.ref.Append("segment_name"))
}

func (naa networkmanagerAttachmentAccepterAttributes) State() terra.StringValue {
	return terra.ReferenceString(naa.ref.Append("state"))
}

func (naa networkmanagerAttachmentAccepterAttributes) Timeouts() networkmanagerattachmentaccepter.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagerattachmentaccepter.TimeoutsAttributes](naa.ref.Append("timeouts"))
}

type networkmanagerAttachmentAccepterState struct {
	AttachmentId               string                                          `json:"attachment_id"`
	AttachmentPolicyRuleNumber float64                                         `json:"attachment_policy_rule_number"`
	AttachmentType             string                                          `json:"attachment_type"`
	CoreNetworkArn             string                                          `json:"core_network_arn"`
	CoreNetworkId              string                                          `json:"core_network_id"`
	EdgeLocation               string                                          `json:"edge_location"`
	Id                         string                                          `json:"id"`
	OwnerAccountId             string                                          `json:"owner_account_id"`
	ResourceArn                string                                          `json:"resource_arn"`
	SegmentName                string                                          `json:"segment_name"`
	State                      string                                          `json:"state"`
	Timeouts                   *networkmanagerattachmentaccepter.TimeoutsState `json:"timeouts"`
}
