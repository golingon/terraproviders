// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBackupVaultLockConfiguration(name string, args BackupVaultLockConfigurationArgs) *BackupVaultLockConfiguration {
	return &BackupVaultLockConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BackupVaultLockConfiguration)(nil)

type BackupVaultLockConfiguration struct {
	Name  string
	Args  BackupVaultLockConfigurationArgs
	state *backupVaultLockConfigurationState
}

func (bvlc *BackupVaultLockConfiguration) Type() string {
	return "aws_backup_vault_lock_configuration"
}

func (bvlc *BackupVaultLockConfiguration) LocalName() string {
	return bvlc.Name
}

func (bvlc *BackupVaultLockConfiguration) Configuration() interface{} {
	return bvlc.Args
}

func (bvlc *BackupVaultLockConfiguration) Attributes() backupVaultLockConfigurationAttributes {
	return backupVaultLockConfigurationAttributes{ref: terra.ReferenceResource(bvlc)}
}

func (bvlc *BackupVaultLockConfiguration) ImportState(av io.Reader) error {
	bvlc.state = &backupVaultLockConfigurationState{}
	if err := json.NewDecoder(av).Decode(bvlc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", bvlc.Type(), bvlc.LocalName(), err)
	}
	return nil
}

func (bvlc *BackupVaultLockConfiguration) State() (*backupVaultLockConfigurationState, bool) {
	return bvlc.state, bvlc.state != nil
}

func (bvlc *BackupVaultLockConfiguration) StateMust() *backupVaultLockConfigurationState {
	if bvlc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", bvlc.Type(), bvlc.LocalName()))
	}
	return bvlc.state
}

func (bvlc *BackupVaultLockConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(bvlc)
}

type BackupVaultLockConfigurationArgs struct {
	// BackupVaultName: string, required
	BackupVaultName terra.StringValue `hcl:"backup_vault_name,attr" validate:"required"`
	// ChangeableForDays: number, optional
	ChangeableForDays terra.NumberValue `hcl:"changeable_for_days,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxRetentionDays: number, optional
	MaxRetentionDays terra.NumberValue `hcl:"max_retention_days,attr"`
	// MinRetentionDays: number, optional
	MinRetentionDays terra.NumberValue `hcl:"min_retention_days,attr"`
	// DependsOn contains resources that BackupVaultLockConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type backupVaultLockConfigurationAttributes struct {
	ref terra.Reference
}

func (bvlc backupVaultLockConfigurationAttributes) BackupVaultArn() terra.StringValue {
	return terra.ReferenceString(bvlc.ref.Append("backup_vault_arn"))
}

func (bvlc backupVaultLockConfigurationAttributes) BackupVaultName() terra.StringValue {
	return terra.ReferenceString(bvlc.ref.Append("backup_vault_name"))
}

func (bvlc backupVaultLockConfigurationAttributes) ChangeableForDays() terra.NumberValue {
	return terra.ReferenceNumber(bvlc.ref.Append("changeable_for_days"))
}

func (bvlc backupVaultLockConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(bvlc.ref.Append("id"))
}

func (bvlc backupVaultLockConfigurationAttributes) MaxRetentionDays() terra.NumberValue {
	return terra.ReferenceNumber(bvlc.ref.Append("max_retention_days"))
}

func (bvlc backupVaultLockConfigurationAttributes) MinRetentionDays() terra.NumberValue {
	return terra.ReferenceNumber(bvlc.ref.Append("min_retention_days"))
}

type backupVaultLockConfigurationState struct {
	BackupVaultArn    string  `json:"backup_vault_arn"`
	BackupVaultName   string  `json:"backup_vault_name"`
	ChangeableForDays float64 `json:"changeable_for_days"`
	Id                string  `json:"id"`
	MaxRetentionDays  float64 `json:"max_retention_days"`
	MinRetentionDays  float64 `json:"min_retention_days"`
}
