// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCustomerGateway(name string, args CustomerGatewayArgs) *CustomerGateway {
	return &CustomerGateway{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CustomerGateway)(nil)

type CustomerGateway struct {
	Name  string
	Args  CustomerGatewayArgs
	state *customerGatewayState
}

func (cg *CustomerGateway) Type() string {
	return "aws_customer_gateway"
}

func (cg *CustomerGateway) LocalName() string {
	return cg.Name
}

func (cg *CustomerGateway) Configuration() interface{} {
	return cg.Args
}

func (cg *CustomerGateway) Attributes() customerGatewayAttributes {
	return customerGatewayAttributes{ref: terra.ReferenceResource(cg)}
}

func (cg *CustomerGateway) ImportState(av io.Reader) error {
	cg.state = &customerGatewayState{}
	if err := json.NewDecoder(av).Decode(cg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cg.Type(), cg.LocalName(), err)
	}
	return nil
}

func (cg *CustomerGateway) State() (*customerGatewayState, bool) {
	return cg.state, cg.state != nil
}

func (cg *CustomerGateway) StateMust() *customerGatewayState {
	if cg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cg.Type(), cg.LocalName()))
	}
	return cg.state
}

func (cg *CustomerGateway) DependOn() terra.Reference {
	return terra.ReferenceResource(cg)
}

type CustomerGatewayArgs struct {
	// BgpAsn: string, required
	BgpAsn terra.StringValue `hcl:"bgp_asn,attr" validate:"required"`
	// CertificateArn: string, optional
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr"`
	// DeviceName: string, optional
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// DependsOn contains resources that CustomerGateway depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type customerGatewayAttributes struct {
	ref terra.Reference
}

func (cg customerGatewayAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cg.ref.Append("arn"))
}

func (cg customerGatewayAttributes) BgpAsn() terra.StringValue {
	return terra.ReferenceString(cg.ref.Append("bgp_asn"))
}

func (cg customerGatewayAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceString(cg.ref.Append("certificate_arn"))
}

func (cg customerGatewayAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceString(cg.ref.Append("device_name"))
}

func (cg customerGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cg.ref.Append("id"))
}

func (cg customerGatewayAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceString(cg.ref.Append("ip_address"))
}

func (cg customerGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cg.ref.Append("tags"))
}

func (cg customerGatewayAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cg.ref.Append("tags_all"))
}

func (cg customerGatewayAttributes) Type() terra.StringValue {
	return terra.ReferenceString(cg.ref.Append("type"))
}

type customerGatewayState struct {
	Arn            string            `json:"arn"`
	BgpAsn         string            `json:"bgp_asn"`
	CertificateArn string            `json:"certificate_arn"`
	DeviceName     string            `json:"device_name"`
	Id             string            `json:"id"`
	IpAddress      string            `json:"ip_address"`
	Tags           map[string]string `json:"tags"`
	TagsAll        map[string]string `json:"tags_all"`
	Type           string            `json:"type"`
}
