// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKmsReplicaKey(name string, args KmsReplicaKeyArgs) *KmsReplicaKey {
	return &KmsReplicaKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsReplicaKey)(nil)

type KmsReplicaKey struct {
	Name  string
	Args  KmsReplicaKeyArgs
	state *kmsReplicaKeyState
}

func (krk *KmsReplicaKey) Type() string {
	return "aws_kms_replica_key"
}

func (krk *KmsReplicaKey) LocalName() string {
	return krk.Name
}

func (krk *KmsReplicaKey) Configuration() interface{} {
	return krk.Args
}

func (krk *KmsReplicaKey) Attributes() kmsReplicaKeyAttributes {
	return kmsReplicaKeyAttributes{ref: terra.ReferenceResource(krk)}
}

func (krk *KmsReplicaKey) ImportState(av io.Reader) error {
	krk.state = &kmsReplicaKeyState{}
	if err := json.NewDecoder(av).Decode(krk.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", krk.Type(), krk.LocalName(), err)
	}
	return nil
}

func (krk *KmsReplicaKey) State() (*kmsReplicaKeyState, bool) {
	return krk.state, krk.state != nil
}

func (krk *KmsReplicaKey) StateMust() *kmsReplicaKeyState {
	if krk.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", krk.Type(), krk.LocalName()))
	}
	return krk.state
}

func (krk *KmsReplicaKey) DependOn() terra.Reference {
	return terra.ReferenceResource(krk)
}

type KmsReplicaKeyArgs struct {
	// BypassPolicyLockoutSafetyCheck: bool, optional
	BypassPolicyLockoutSafetyCheck terra.BoolValue `hcl:"bypass_policy_lockout_safety_check,attr"`
	// DeletionWindowInDays: number, optional
	DeletionWindowInDays terra.NumberValue `hcl:"deletion_window_in_days,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
	// PrimaryKeyArn: string, required
	PrimaryKeyArn terra.StringValue `hcl:"primary_key_arn,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that KmsReplicaKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kmsReplicaKeyAttributes struct {
	ref terra.Reference
}

func (krk kmsReplicaKeyAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(krk.ref.Append("arn"))
}

func (krk kmsReplicaKeyAttributes) BypassPolicyLockoutSafetyCheck() terra.BoolValue {
	return terra.ReferenceBool(krk.ref.Append("bypass_policy_lockout_safety_check"))
}

func (krk kmsReplicaKeyAttributes) DeletionWindowInDays() terra.NumberValue {
	return terra.ReferenceNumber(krk.ref.Append("deletion_window_in_days"))
}

func (krk kmsReplicaKeyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(krk.ref.Append("description"))
}

func (krk kmsReplicaKeyAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(krk.ref.Append("enabled"))
}

func (krk kmsReplicaKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(krk.ref.Append("id"))
}

func (krk kmsReplicaKeyAttributes) KeyId() terra.StringValue {
	return terra.ReferenceString(krk.ref.Append("key_id"))
}

func (krk kmsReplicaKeyAttributes) KeyRotationEnabled() terra.BoolValue {
	return terra.ReferenceBool(krk.ref.Append("key_rotation_enabled"))
}

func (krk kmsReplicaKeyAttributes) KeySpec() terra.StringValue {
	return terra.ReferenceString(krk.ref.Append("key_spec"))
}

func (krk kmsReplicaKeyAttributes) KeyUsage() terra.StringValue {
	return terra.ReferenceString(krk.ref.Append("key_usage"))
}

func (krk kmsReplicaKeyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(krk.ref.Append("policy"))
}

func (krk kmsReplicaKeyAttributes) PrimaryKeyArn() terra.StringValue {
	return terra.ReferenceString(krk.ref.Append("primary_key_arn"))
}

func (krk kmsReplicaKeyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](krk.ref.Append("tags"))
}

func (krk kmsReplicaKeyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](krk.ref.Append("tags_all"))
}

type kmsReplicaKeyState struct {
	Arn                            string            `json:"arn"`
	BypassPolicyLockoutSafetyCheck bool              `json:"bypass_policy_lockout_safety_check"`
	DeletionWindowInDays           float64           `json:"deletion_window_in_days"`
	Description                    string            `json:"description"`
	Enabled                        bool              `json:"enabled"`
	Id                             string            `json:"id"`
	KeyId                          string            `json:"key_id"`
	KeyRotationEnabled             bool              `json:"key_rotation_enabled"`
	KeySpec                        string            `json:"key_spec"`
	KeyUsage                       string            `json:"key_usage"`
	Policy                         string            `json:"policy"`
	PrimaryKeyArn                  string            `json:"primary_key_arn"`
	Tags                           map[string]string `json:"tags"`
	TagsAll                        map[string]string `json:"tags_all"`
}
