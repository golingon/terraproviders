// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	configremediationconfiguration "github.com/golingon/terraproviders/aws/4.60.0/configremediationconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConfigRemediationConfiguration(name string, args ConfigRemediationConfigurationArgs) *ConfigRemediationConfiguration {
	return &ConfigRemediationConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConfigRemediationConfiguration)(nil)

type ConfigRemediationConfiguration struct {
	Name  string
	Args  ConfigRemediationConfigurationArgs
	state *configRemediationConfigurationState
}

func (crc *ConfigRemediationConfiguration) Type() string {
	return "aws_config_remediation_configuration"
}

func (crc *ConfigRemediationConfiguration) LocalName() string {
	return crc.Name
}

func (crc *ConfigRemediationConfiguration) Configuration() interface{} {
	return crc.Args
}

func (crc *ConfigRemediationConfiguration) Attributes() configRemediationConfigurationAttributes {
	return configRemediationConfigurationAttributes{ref: terra.ReferenceResource(crc)}
}

func (crc *ConfigRemediationConfiguration) ImportState(av io.Reader) error {
	crc.state = &configRemediationConfigurationState{}
	if err := json.NewDecoder(av).Decode(crc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crc.Type(), crc.LocalName(), err)
	}
	return nil
}

func (crc *ConfigRemediationConfiguration) State() (*configRemediationConfigurationState, bool) {
	return crc.state, crc.state != nil
}

func (crc *ConfigRemediationConfiguration) StateMust() *configRemediationConfigurationState {
	if crc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crc.Type(), crc.LocalName()))
	}
	return crc.state
}

func (crc *ConfigRemediationConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(crc)
}

type ConfigRemediationConfigurationArgs struct {
	// Automatic: bool, optional
	Automatic terra.BoolValue `hcl:"automatic,attr"`
	// ConfigRuleName: string, required
	ConfigRuleName terra.StringValue `hcl:"config_rule_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaximumAutomaticAttempts: number, optional
	MaximumAutomaticAttempts terra.NumberValue `hcl:"maximum_automatic_attempts,attr"`
	// ResourceType: string, optional
	ResourceType terra.StringValue `hcl:"resource_type,attr"`
	// RetryAttemptSeconds: number, optional
	RetryAttemptSeconds terra.NumberValue `hcl:"retry_attempt_seconds,attr"`
	// TargetId: string, required
	TargetId terra.StringValue `hcl:"target_id,attr" validate:"required"`
	// TargetType: string, required
	TargetType terra.StringValue `hcl:"target_type,attr" validate:"required"`
	// TargetVersion: string, optional
	TargetVersion terra.StringValue `hcl:"target_version,attr"`
	// ExecutionControls: optional
	ExecutionControls *configremediationconfiguration.ExecutionControls `hcl:"execution_controls,block"`
	// Parameter: min=0,max=25
	Parameter []configremediationconfiguration.Parameter `hcl:"parameter,block" validate:"min=0,max=25"`
	// DependsOn contains resources that ConfigRemediationConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type configRemediationConfigurationAttributes struct {
	ref terra.Reference
}

func (crc configRemediationConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(crc.ref.Append("arn"))
}

func (crc configRemediationConfigurationAttributes) Automatic() terra.BoolValue {
	return terra.ReferenceBool(crc.ref.Append("automatic"))
}

func (crc configRemediationConfigurationAttributes) ConfigRuleName() terra.StringValue {
	return terra.ReferenceString(crc.ref.Append("config_rule_name"))
}

func (crc configRemediationConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crc.ref.Append("id"))
}

func (crc configRemediationConfigurationAttributes) MaximumAutomaticAttempts() terra.NumberValue {
	return terra.ReferenceNumber(crc.ref.Append("maximum_automatic_attempts"))
}

func (crc configRemediationConfigurationAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceString(crc.ref.Append("resource_type"))
}

func (crc configRemediationConfigurationAttributes) RetryAttemptSeconds() terra.NumberValue {
	return terra.ReferenceNumber(crc.ref.Append("retry_attempt_seconds"))
}

func (crc configRemediationConfigurationAttributes) TargetId() terra.StringValue {
	return terra.ReferenceString(crc.ref.Append("target_id"))
}

func (crc configRemediationConfigurationAttributes) TargetType() terra.StringValue {
	return terra.ReferenceString(crc.ref.Append("target_type"))
}

func (crc configRemediationConfigurationAttributes) TargetVersion() terra.StringValue {
	return terra.ReferenceString(crc.ref.Append("target_version"))
}

func (crc configRemediationConfigurationAttributes) ExecutionControls() terra.ListValue[configremediationconfiguration.ExecutionControlsAttributes] {
	return terra.ReferenceList[configremediationconfiguration.ExecutionControlsAttributes](crc.ref.Append("execution_controls"))
}

func (crc configRemediationConfigurationAttributes) Parameter() terra.SetValue[configremediationconfiguration.ParameterAttributes] {
	return terra.ReferenceSet[configremediationconfiguration.ParameterAttributes](crc.ref.Append("parameter"))
}

type configRemediationConfigurationState struct {
	Arn                      string                                                  `json:"arn"`
	Automatic                bool                                                    `json:"automatic"`
	ConfigRuleName           string                                                  `json:"config_rule_name"`
	Id                       string                                                  `json:"id"`
	MaximumAutomaticAttempts float64                                                 `json:"maximum_automatic_attempts"`
	ResourceType             string                                                  `json:"resource_type"`
	RetryAttemptSeconds      float64                                                 `json:"retry_attempt_seconds"`
	TargetId                 string                                                  `json:"target_id"`
	TargetType               string                                                  `json:"target_type"`
	TargetVersion            string                                                  `json:"target_version"`
	ExecutionControls        []configremediationconfiguration.ExecutionControlsState `json:"execution_controls"`
	Parameter                []configremediationconfiguration.ParameterState         `json:"parameter"`
}
