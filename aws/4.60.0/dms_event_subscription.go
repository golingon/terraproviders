// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dmseventsubscription "github.com/golingon/terraproviders/aws/4.60.0/dmseventsubscription"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDmsEventSubscription(name string, args DmsEventSubscriptionArgs) *DmsEventSubscription {
	return &DmsEventSubscription{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DmsEventSubscription)(nil)

type DmsEventSubscription struct {
	Name  string
	Args  DmsEventSubscriptionArgs
	state *dmsEventSubscriptionState
}

func (des *DmsEventSubscription) Type() string {
	return "aws_dms_event_subscription"
}

func (des *DmsEventSubscription) LocalName() string {
	return des.Name
}

func (des *DmsEventSubscription) Configuration() interface{} {
	return des.Args
}

func (des *DmsEventSubscription) Attributes() dmsEventSubscriptionAttributes {
	return dmsEventSubscriptionAttributes{ref: terra.ReferenceResource(des)}
}

func (des *DmsEventSubscription) ImportState(av io.Reader) error {
	des.state = &dmsEventSubscriptionState{}
	if err := json.NewDecoder(av).Decode(des.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", des.Type(), des.LocalName(), err)
	}
	return nil
}

func (des *DmsEventSubscription) State() (*dmsEventSubscriptionState, bool) {
	return des.state, des.state != nil
}

func (des *DmsEventSubscription) StateMust() *dmsEventSubscriptionState {
	if des.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", des.Type(), des.LocalName()))
	}
	return des.state
}

func (des *DmsEventSubscription) DependOn() terra.Reference {
	return terra.ReferenceResource(des)
}

type DmsEventSubscriptionArgs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// EventCategories: set of string, required
	EventCategories terra.SetValue[terra.StringValue] `hcl:"event_categories,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SnsTopicArn: string, required
	SnsTopicArn terra.StringValue `hcl:"sns_topic_arn,attr" validate:"required"`
	// SourceIds: set of string, optional
	SourceIds terra.SetValue[terra.StringValue] `hcl:"source_ids,attr"`
	// SourceType: string, optional
	SourceType terra.StringValue `hcl:"source_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *dmseventsubscription.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DmsEventSubscription depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dmsEventSubscriptionAttributes struct {
	ref terra.Reference
}

func (des dmsEventSubscriptionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(des.ref.Append("arn"))
}

func (des dmsEventSubscriptionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(des.ref.Append("enabled"))
}

func (des dmsEventSubscriptionAttributes) EventCategories() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](des.ref.Append("event_categories"))
}

func (des dmsEventSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(des.ref.Append("id"))
}

func (des dmsEventSubscriptionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(des.ref.Append("name"))
}

func (des dmsEventSubscriptionAttributes) SnsTopicArn() terra.StringValue {
	return terra.ReferenceString(des.ref.Append("sns_topic_arn"))
}

func (des dmsEventSubscriptionAttributes) SourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](des.ref.Append("source_ids"))
}

func (des dmsEventSubscriptionAttributes) SourceType() terra.StringValue {
	return terra.ReferenceString(des.ref.Append("source_type"))
}

func (des dmsEventSubscriptionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](des.ref.Append("tags"))
}

func (des dmsEventSubscriptionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](des.ref.Append("tags_all"))
}

func (des dmsEventSubscriptionAttributes) Timeouts() dmseventsubscription.TimeoutsAttributes {
	return terra.ReferenceSingle[dmseventsubscription.TimeoutsAttributes](des.ref.Append("timeouts"))
}

type dmsEventSubscriptionState struct {
	Arn             string                              `json:"arn"`
	Enabled         bool                                `json:"enabled"`
	EventCategories []string                            `json:"event_categories"`
	Id              string                              `json:"id"`
	Name            string                              `json:"name"`
	SnsTopicArn     string                              `json:"sns_topic_arn"`
	SourceIds       []string                            `json:"source_ids"`
	SourceType      string                              `json:"source_type"`
	Tags            map[string]string                   `json:"tags"`
	TagsAll         map[string]string                   `json:"tags_all"`
	Timeouts        *dmseventsubscription.TimeoutsState `json:"timeouts"`
}
