// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lbtargetgroup "github.com/golingon/terraproviders/aws/4.60.0/lbtargetgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLbTargetGroup(name string, args LbTargetGroupArgs) *LbTargetGroup {
	return &LbTargetGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LbTargetGroup)(nil)

type LbTargetGroup struct {
	Name  string
	Args  LbTargetGroupArgs
	state *lbTargetGroupState
}

func (ltg *LbTargetGroup) Type() string {
	return "aws_lb_target_group"
}

func (ltg *LbTargetGroup) LocalName() string {
	return ltg.Name
}

func (ltg *LbTargetGroup) Configuration() interface{} {
	return ltg.Args
}

func (ltg *LbTargetGroup) Attributes() lbTargetGroupAttributes {
	return lbTargetGroupAttributes{ref: terra.ReferenceResource(ltg)}
}

func (ltg *LbTargetGroup) ImportState(av io.Reader) error {
	ltg.state = &lbTargetGroupState{}
	if err := json.NewDecoder(av).Decode(ltg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ltg.Type(), ltg.LocalName(), err)
	}
	return nil
}

func (ltg *LbTargetGroup) State() (*lbTargetGroupState, bool) {
	return ltg.state, ltg.state != nil
}

func (ltg *LbTargetGroup) StateMust() *lbTargetGroupState {
	if ltg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ltg.Type(), ltg.LocalName()))
	}
	return ltg.state
}

func (ltg *LbTargetGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(ltg)
}

type LbTargetGroupArgs struct {
	// ConnectionTermination: bool, optional
	ConnectionTermination terra.BoolValue `hcl:"connection_termination,attr"`
	// DeregistrationDelay: string, optional
	DeregistrationDelay terra.StringValue `hcl:"deregistration_delay,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddressType: string, optional
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr"`
	// LambdaMultiValueHeadersEnabled: bool, optional
	LambdaMultiValueHeadersEnabled terra.BoolValue `hcl:"lambda_multi_value_headers_enabled,attr"`
	// LoadBalancingAlgorithmType: string, optional
	LoadBalancingAlgorithmType terra.StringValue `hcl:"load_balancing_algorithm_type,attr"`
	// LoadBalancingCrossZoneEnabled: string, optional
	LoadBalancingCrossZoneEnabled terra.StringValue `hcl:"load_balancing_cross_zone_enabled,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// PreserveClientIp: string, optional
	PreserveClientIp terra.StringValue `hcl:"preserve_client_ip,attr"`
	// Protocol: string, optional
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// ProtocolVersion: string, optional
	ProtocolVersion terra.StringValue `hcl:"protocol_version,attr"`
	// ProxyProtocolV2: bool, optional
	ProxyProtocolV2 terra.BoolValue `hcl:"proxy_protocol_v2,attr"`
	// SlowStart: number, optional
	SlowStart terra.NumberValue `hcl:"slow_start,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetType: string, optional
	TargetType terra.StringValue `hcl:"target_type,attr"`
	// VpcId: string, optional
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// HealthCheck: optional
	HealthCheck *lbtargetgroup.HealthCheck `hcl:"health_check,block"`
	// Stickiness: optional
	Stickiness *lbtargetgroup.Stickiness `hcl:"stickiness,block"`
	// TargetFailover: min=0
	TargetFailover []lbtargetgroup.TargetFailover `hcl:"target_failover,block" validate:"min=0"`
	// DependsOn contains resources that LbTargetGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lbTargetGroupAttributes struct {
	ref terra.Reference
}

func (ltg lbTargetGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("arn"))
}

func (ltg lbTargetGroupAttributes) ArnSuffix() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("arn_suffix"))
}

func (ltg lbTargetGroupAttributes) ConnectionTermination() terra.BoolValue {
	return terra.ReferenceBool(ltg.ref.Append("connection_termination"))
}

func (ltg lbTargetGroupAttributes) DeregistrationDelay() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("deregistration_delay"))
}

func (ltg lbTargetGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("id"))
}

func (ltg lbTargetGroupAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("ip_address_type"))
}

func (ltg lbTargetGroupAttributes) LambdaMultiValueHeadersEnabled() terra.BoolValue {
	return terra.ReferenceBool(ltg.ref.Append("lambda_multi_value_headers_enabled"))
}

func (ltg lbTargetGroupAttributes) LoadBalancingAlgorithmType() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("load_balancing_algorithm_type"))
}

func (ltg lbTargetGroupAttributes) LoadBalancingCrossZoneEnabled() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("load_balancing_cross_zone_enabled"))
}

func (ltg lbTargetGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("name"))
}

func (ltg lbTargetGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("name_prefix"))
}

func (ltg lbTargetGroupAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(ltg.ref.Append("port"))
}

func (ltg lbTargetGroupAttributes) PreserveClientIp() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("preserve_client_ip"))
}

func (ltg lbTargetGroupAttributes) Protocol() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("protocol"))
}

func (ltg lbTargetGroupAttributes) ProtocolVersion() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("protocol_version"))
}

func (ltg lbTargetGroupAttributes) ProxyProtocolV2() terra.BoolValue {
	return terra.ReferenceBool(ltg.ref.Append("proxy_protocol_v2"))
}

func (ltg lbTargetGroupAttributes) SlowStart() terra.NumberValue {
	return terra.ReferenceNumber(ltg.ref.Append("slow_start"))
}

func (ltg lbTargetGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ltg.ref.Append("tags"))
}

func (ltg lbTargetGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ltg.ref.Append("tags_all"))
}

func (ltg lbTargetGroupAttributes) TargetType() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("target_type"))
}

func (ltg lbTargetGroupAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(ltg.ref.Append("vpc_id"))
}

func (ltg lbTargetGroupAttributes) HealthCheck() terra.ListValue[lbtargetgroup.HealthCheckAttributes] {
	return terra.ReferenceList[lbtargetgroup.HealthCheckAttributes](ltg.ref.Append("health_check"))
}

func (ltg lbTargetGroupAttributes) Stickiness() terra.ListValue[lbtargetgroup.StickinessAttributes] {
	return terra.ReferenceList[lbtargetgroup.StickinessAttributes](ltg.ref.Append("stickiness"))
}

func (ltg lbTargetGroupAttributes) TargetFailover() terra.ListValue[lbtargetgroup.TargetFailoverAttributes] {
	return terra.ReferenceList[lbtargetgroup.TargetFailoverAttributes](ltg.ref.Append("target_failover"))
}

type lbTargetGroupState struct {
	Arn                            string                              `json:"arn"`
	ArnSuffix                      string                              `json:"arn_suffix"`
	ConnectionTermination          bool                                `json:"connection_termination"`
	DeregistrationDelay            string                              `json:"deregistration_delay"`
	Id                             string                              `json:"id"`
	IpAddressType                  string                              `json:"ip_address_type"`
	LambdaMultiValueHeadersEnabled bool                                `json:"lambda_multi_value_headers_enabled"`
	LoadBalancingAlgorithmType     string                              `json:"load_balancing_algorithm_type"`
	LoadBalancingCrossZoneEnabled  string                              `json:"load_balancing_cross_zone_enabled"`
	Name                           string                              `json:"name"`
	NamePrefix                     string                              `json:"name_prefix"`
	Port                           float64                             `json:"port"`
	PreserveClientIp               string                              `json:"preserve_client_ip"`
	Protocol                       string                              `json:"protocol"`
	ProtocolVersion                string                              `json:"protocol_version"`
	ProxyProtocolV2                bool                                `json:"proxy_protocol_v2"`
	SlowStart                      float64                             `json:"slow_start"`
	Tags                           map[string]string                   `json:"tags"`
	TagsAll                        map[string]string                   `json:"tags_all"`
	TargetType                     string                              `json:"target_type"`
	VpcId                          string                              `json:"vpc_id"`
	HealthCheck                    []lbtargetgroup.HealthCheckState    `json:"health_check"`
	Stickiness                     []lbtargetgroup.StickinessState     `json:"stickiness"`
	TargetFailover                 []lbtargetgroup.TargetFailoverState `json:"target_failover"`
}
