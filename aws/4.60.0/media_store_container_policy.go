// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMediaStoreContainerPolicy(name string, args MediaStoreContainerPolicyArgs) *MediaStoreContainerPolicy {
	return &MediaStoreContainerPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MediaStoreContainerPolicy)(nil)

type MediaStoreContainerPolicy struct {
	Name  string
	Args  MediaStoreContainerPolicyArgs
	state *mediaStoreContainerPolicyState
}

func (mscp *MediaStoreContainerPolicy) Type() string {
	return "aws_media_store_container_policy"
}

func (mscp *MediaStoreContainerPolicy) LocalName() string {
	return mscp.Name
}

func (mscp *MediaStoreContainerPolicy) Configuration() interface{} {
	return mscp.Args
}

func (mscp *MediaStoreContainerPolicy) Attributes() mediaStoreContainerPolicyAttributes {
	return mediaStoreContainerPolicyAttributes{ref: terra.ReferenceResource(mscp)}
}

func (mscp *MediaStoreContainerPolicy) ImportState(av io.Reader) error {
	mscp.state = &mediaStoreContainerPolicyState{}
	if err := json.NewDecoder(av).Decode(mscp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mscp.Type(), mscp.LocalName(), err)
	}
	return nil
}

func (mscp *MediaStoreContainerPolicy) State() (*mediaStoreContainerPolicyState, bool) {
	return mscp.state, mscp.state != nil
}

func (mscp *MediaStoreContainerPolicy) StateMust() *mediaStoreContainerPolicyState {
	if mscp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mscp.Type(), mscp.LocalName()))
	}
	return mscp.state
}

func (mscp *MediaStoreContainerPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(mscp)
}

type MediaStoreContainerPolicyArgs struct {
	// ContainerName: string, required
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// DependsOn contains resources that MediaStoreContainerPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mediaStoreContainerPolicyAttributes struct {
	ref terra.Reference
}

func (mscp mediaStoreContainerPolicyAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceString(mscp.ref.Append("container_name"))
}

func (mscp mediaStoreContainerPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mscp.ref.Append("id"))
}

func (mscp mediaStoreContainerPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(mscp.ref.Append("policy"))
}

type mediaStoreContainerPolicyState struct {
	ContainerName string `json:"container_name"`
	Id            string `json:"id"`
	Policy        string `json:"policy"`
}
