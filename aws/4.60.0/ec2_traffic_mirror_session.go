// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2TrafficMirrorSession(name string, args Ec2TrafficMirrorSessionArgs) *Ec2TrafficMirrorSession {
	return &Ec2TrafficMirrorSession{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TrafficMirrorSession)(nil)

type Ec2TrafficMirrorSession struct {
	Name  string
	Args  Ec2TrafficMirrorSessionArgs
	state *ec2TrafficMirrorSessionState
}

func (etms *Ec2TrafficMirrorSession) Type() string {
	return "aws_ec2_traffic_mirror_session"
}

func (etms *Ec2TrafficMirrorSession) LocalName() string {
	return etms.Name
}

func (etms *Ec2TrafficMirrorSession) Configuration() interface{} {
	return etms.Args
}

func (etms *Ec2TrafficMirrorSession) Attributes() ec2TrafficMirrorSessionAttributes {
	return ec2TrafficMirrorSessionAttributes{ref: terra.ReferenceResource(etms)}
}

func (etms *Ec2TrafficMirrorSession) ImportState(av io.Reader) error {
	etms.state = &ec2TrafficMirrorSessionState{}
	if err := json.NewDecoder(av).Decode(etms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etms.Type(), etms.LocalName(), err)
	}
	return nil
}

func (etms *Ec2TrafficMirrorSession) State() (*ec2TrafficMirrorSessionState, bool) {
	return etms.state, etms.state != nil
}

func (etms *Ec2TrafficMirrorSession) StateMust() *ec2TrafficMirrorSessionState {
	if etms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etms.Type(), etms.LocalName()))
	}
	return etms.state
}

func (etms *Ec2TrafficMirrorSession) DependOn() terra.Reference {
	return terra.ReferenceResource(etms)
}

type Ec2TrafficMirrorSessionArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// NetworkInterfaceId: string, required
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr" validate:"required"`
	// PacketLength: number, optional
	PacketLength terra.NumberValue `hcl:"packet_length,attr"`
	// SessionNumber: number, required
	SessionNumber terra.NumberValue `hcl:"session_number,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TrafficMirrorFilterId: string, required
	TrafficMirrorFilterId terra.StringValue `hcl:"traffic_mirror_filter_id,attr" validate:"required"`
	// TrafficMirrorTargetId: string, required
	TrafficMirrorTargetId terra.StringValue `hcl:"traffic_mirror_target_id,attr" validate:"required"`
	// VirtualNetworkId: number, optional
	VirtualNetworkId terra.NumberValue `hcl:"virtual_network_id,attr"`
	// DependsOn contains resources that Ec2TrafficMirrorSession depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2TrafficMirrorSessionAttributes struct {
	ref terra.Reference
}

func (etms ec2TrafficMirrorSessionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(etms.ref.Append("arn"))
}

func (etms ec2TrafficMirrorSessionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(etms.ref.Append("description"))
}

func (etms ec2TrafficMirrorSessionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etms.ref.Append("id"))
}

func (etms ec2TrafficMirrorSessionAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceString(etms.ref.Append("network_interface_id"))
}

func (etms ec2TrafficMirrorSessionAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(etms.ref.Append("owner_id"))
}

func (etms ec2TrafficMirrorSessionAttributes) PacketLength() terra.NumberValue {
	return terra.ReferenceNumber(etms.ref.Append("packet_length"))
}

func (etms ec2TrafficMirrorSessionAttributes) SessionNumber() terra.NumberValue {
	return terra.ReferenceNumber(etms.ref.Append("session_number"))
}

func (etms ec2TrafficMirrorSessionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etms.ref.Append("tags"))
}

func (etms ec2TrafficMirrorSessionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etms.ref.Append("tags_all"))
}

func (etms ec2TrafficMirrorSessionAttributes) TrafficMirrorFilterId() terra.StringValue {
	return terra.ReferenceString(etms.ref.Append("traffic_mirror_filter_id"))
}

func (etms ec2TrafficMirrorSessionAttributes) TrafficMirrorTargetId() terra.StringValue {
	return terra.ReferenceString(etms.ref.Append("traffic_mirror_target_id"))
}

func (etms ec2TrafficMirrorSessionAttributes) VirtualNetworkId() terra.NumberValue {
	return terra.ReferenceNumber(etms.ref.Append("virtual_network_id"))
}

type ec2TrafficMirrorSessionState struct {
	Arn                   string            `json:"arn"`
	Description           string            `json:"description"`
	Id                    string            `json:"id"`
	NetworkInterfaceId    string            `json:"network_interface_id"`
	OwnerId               string            `json:"owner_id"`
	PacketLength          float64           `json:"packet_length"`
	SessionNumber         float64           `json:"session_number"`
	Tags                  map[string]string `json:"tags"`
	TagsAll               map[string]string `json:"tags_all"`
	TrafficMirrorFilterId string            `json:"traffic_mirror_filter_id"`
	TrafficMirrorTargetId string            `json:"traffic_mirror_target_id"`
	VirtualNetworkId      float64           `json:"virtual_network_id"`
}
