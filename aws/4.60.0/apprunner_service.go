// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	apprunnerservice "github.com/golingon/terraproviders/aws/4.60.0/apprunnerservice"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApprunnerService(name string, args ApprunnerServiceArgs) *ApprunnerService {
	return &ApprunnerService{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApprunnerService)(nil)

type ApprunnerService struct {
	Name  string
	Args  ApprunnerServiceArgs
	state *apprunnerServiceState
}

func (as *ApprunnerService) Type() string {
	return "aws_apprunner_service"
}

func (as *ApprunnerService) LocalName() string {
	return as.Name
}

func (as *ApprunnerService) Configuration() interface{} {
	return as.Args
}

func (as *ApprunnerService) Attributes() apprunnerServiceAttributes {
	return apprunnerServiceAttributes{ref: terra.ReferenceResource(as)}
}

func (as *ApprunnerService) ImportState(av io.Reader) error {
	as.state = &apprunnerServiceState{}
	if err := json.NewDecoder(av).Decode(as.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", as.Type(), as.LocalName(), err)
	}
	return nil
}

func (as *ApprunnerService) State() (*apprunnerServiceState, bool) {
	return as.state, as.state != nil
}

func (as *ApprunnerService) StateMust() *apprunnerServiceState {
	if as.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", as.Type(), as.LocalName()))
	}
	return as.state
}

func (as *ApprunnerService) DependOn() terra.Reference {
	return terra.ReferenceResource(as)
}

type ApprunnerServiceArgs struct {
	// AutoScalingConfigurationArn: string, optional
	AutoScalingConfigurationArn terra.StringValue `hcl:"auto_scaling_configuration_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ServiceName: string, required
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// EncryptionConfiguration: optional
	EncryptionConfiguration *apprunnerservice.EncryptionConfiguration `hcl:"encryption_configuration,block"`
	// HealthCheckConfiguration: optional
	HealthCheckConfiguration *apprunnerservice.HealthCheckConfiguration `hcl:"health_check_configuration,block"`
	// InstanceConfiguration: optional
	InstanceConfiguration *apprunnerservice.InstanceConfiguration `hcl:"instance_configuration,block"`
	// NetworkConfiguration: optional
	NetworkConfiguration *apprunnerservice.NetworkConfiguration `hcl:"network_configuration,block"`
	// ObservabilityConfiguration: optional
	ObservabilityConfiguration *apprunnerservice.ObservabilityConfiguration `hcl:"observability_configuration,block"`
	// SourceConfiguration: required
	SourceConfiguration *apprunnerservice.SourceConfiguration `hcl:"source_configuration,block" validate:"required"`
	// DependsOn contains resources that ApprunnerService depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apprunnerServiceAttributes struct {
	ref terra.Reference
}

func (as apprunnerServiceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("arn"))
}

func (as apprunnerServiceAttributes) AutoScalingConfigurationArn() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("auto_scaling_configuration_arn"))
}

func (as apprunnerServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("id"))
}

func (as apprunnerServiceAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("service_id"))
}

func (as apprunnerServiceAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("service_name"))
}

func (as apprunnerServiceAttributes) ServiceUrl() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("service_url"))
}

func (as apprunnerServiceAttributes) Status() terra.StringValue {
	return terra.ReferenceString(as.ref.Append("status"))
}

func (as apprunnerServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](as.ref.Append("tags"))
}

func (as apprunnerServiceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](as.ref.Append("tags_all"))
}

func (as apprunnerServiceAttributes) EncryptionConfiguration() terra.ListValue[apprunnerservice.EncryptionConfigurationAttributes] {
	return terra.ReferenceList[apprunnerservice.EncryptionConfigurationAttributes](as.ref.Append("encryption_configuration"))
}

func (as apprunnerServiceAttributes) HealthCheckConfiguration() terra.ListValue[apprunnerservice.HealthCheckConfigurationAttributes] {
	return terra.ReferenceList[apprunnerservice.HealthCheckConfigurationAttributes](as.ref.Append("health_check_configuration"))
}

func (as apprunnerServiceAttributes) InstanceConfiguration() terra.ListValue[apprunnerservice.InstanceConfigurationAttributes] {
	return terra.ReferenceList[apprunnerservice.InstanceConfigurationAttributes](as.ref.Append("instance_configuration"))
}

func (as apprunnerServiceAttributes) NetworkConfiguration() terra.ListValue[apprunnerservice.NetworkConfigurationAttributes] {
	return terra.ReferenceList[apprunnerservice.NetworkConfigurationAttributes](as.ref.Append("network_configuration"))
}

func (as apprunnerServiceAttributes) ObservabilityConfiguration() terra.ListValue[apprunnerservice.ObservabilityConfigurationAttributes] {
	return terra.ReferenceList[apprunnerservice.ObservabilityConfigurationAttributes](as.ref.Append("observability_configuration"))
}

func (as apprunnerServiceAttributes) SourceConfiguration() terra.ListValue[apprunnerservice.SourceConfigurationAttributes] {
	return terra.ReferenceList[apprunnerservice.SourceConfigurationAttributes](as.ref.Append("source_configuration"))
}

type apprunnerServiceState struct {
	Arn                         string                                             `json:"arn"`
	AutoScalingConfigurationArn string                                             `json:"auto_scaling_configuration_arn"`
	Id                          string                                             `json:"id"`
	ServiceId                   string                                             `json:"service_id"`
	ServiceName                 string                                             `json:"service_name"`
	ServiceUrl                  string                                             `json:"service_url"`
	Status                      string                                             `json:"status"`
	Tags                        map[string]string                                  `json:"tags"`
	TagsAll                     map[string]string                                  `json:"tags_all"`
	EncryptionConfiguration     []apprunnerservice.EncryptionConfigurationState    `json:"encryption_configuration"`
	HealthCheckConfiguration    []apprunnerservice.HealthCheckConfigurationState   `json:"health_check_configuration"`
	InstanceConfiguration       []apprunnerservice.InstanceConfigurationState      `json:"instance_configuration"`
	NetworkConfiguration        []apprunnerservice.NetworkConfigurationState       `json:"network_configuration"`
	ObservabilityConfiguration  []apprunnerservice.ObservabilityConfigurationState `json:"observability_configuration"`
	SourceConfiguration         []apprunnerservice.SourceConfigurationState        `json:"source_configuration"`
}
