// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewStoragegatewayCache(name string, args StoragegatewayCacheArgs) *StoragegatewayCache {
	return &StoragegatewayCache{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*StoragegatewayCache)(nil)

type StoragegatewayCache struct {
	Name  string
	Args  StoragegatewayCacheArgs
	state *storagegatewayCacheState
}

func (sc *StoragegatewayCache) Type() string {
	return "aws_storagegateway_cache"
}

func (sc *StoragegatewayCache) LocalName() string {
	return sc.Name
}

func (sc *StoragegatewayCache) Configuration() interface{} {
	return sc.Args
}

func (sc *StoragegatewayCache) Attributes() storagegatewayCacheAttributes {
	return storagegatewayCacheAttributes{ref: terra.ReferenceResource(sc)}
}

func (sc *StoragegatewayCache) ImportState(av io.Reader) error {
	sc.state = &storagegatewayCacheState{}
	if err := json.NewDecoder(av).Decode(sc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sc.Type(), sc.LocalName(), err)
	}
	return nil
}

func (sc *StoragegatewayCache) State() (*storagegatewayCacheState, bool) {
	return sc.state, sc.state != nil
}

func (sc *StoragegatewayCache) StateMust() *storagegatewayCacheState {
	if sc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sc.Type(), sc.LocalName()))
	}
	return sc.state
}

func (sc *StoragegatewayCache) DependOn() terra.Reference {
	return terra.ReferenceResource(sc)
}

type StoragegatewayCacheArgs struct {
	// DiskId: string, required
	DiskId terra.StringValue `hcl:"disk_id,attr" validate:"required"`
	// GatewayArn: string, required
	GatewayArn terra.StringValue `hcl:"gateway_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DependsOn contains resources that StoragegatewayCache depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type storagegatewayCacheAttributes struct {
	ref terra.Reference
}

func (sc storagegatewayCacheAttributes) DiskId() terra.StringValue {
	return terra.ReferenceString(sc.ref.Append("disk_id"))
}

func (sc storagegatewayCacheAttributes) GatewayArn() terra.StringValue {
	return terra.ReferenceString(sc.ref.Append("gateway_arn"))
}

func (sc storagegatewayCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sc.ref.Append("id"))
}

type storagegatewayCacheState struct {
	DiskId     string `json:"disk_id"`
	GatewayArn string `json:"gateway_arn"`
	Id         string `json:"id"`
}
