// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package batchcomputeenvironment

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ComputeResources struct {
	// AllocationStrategy: string, optional
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr"`
	// BidPercentage: number, optional
	BidPercentage terra.NumberValue `hcl:"bid_percentage,attr"`
	// DesiredVcpus: number, optional
	DesiredVcpus terra.NumberValue `hcl:"desired_vcpus,attr"`
	// Ec2KeyPair: string, optional
	Ec2KeyPair terra.StringValue `hcl:"ec2_key_pair,attr"`
	// ImageId: string, optional
	ImageId terra.StringValue `hcl:"image_id,attr"`
	// InstanceRole: string, optional
	InstanceRole terra.StringValue `hcl:"instance_role,attr"`
	// InstanceType: set of string, optional
	InstanceType terra.SetValue[terra.StringValue] `hcl:"instance_type,attr"`
	// MaxVcpus: number, required
	MaxVcpus terra.NumberValue `hcl:"max_vcpus,attr" validate:"required"`
	// MinVcpus: number, optional
	MinVcpus terra.NumberValue `hcl:"min_vcpus,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SpotIamFleetRole: string, optional
	SpotIamFleetRole terra.StringValue `hcl:"spot_iam_fleet_role,attr"`
	// Subnets: set of string, required
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Ec2Configuration: min=0,max=2
	Ec2Configuration []Ec2Configuration `hcl:"ec2_configuration,block" validate:"min=0,max=2"`
	// LaunchTemplate: optional
	LaunchTemplate *LaunchTemplate `hcl:"launch_template,block"`
}

type Ec2Configuration struct {
	// ImageIdOverride: string, optional
	ImageIdOverride terra.StringValue `hcl:"image_id_override,attr"`
	// ImageType: string, optional
	ImageType terra.StringValue `hcl:"image_type,attr"`
}

type LaunchTemplate struct {
	// LaunchTemplateId: string, optional
	LaunchTemplateId terra.StringValue `hcl:"launch_template_id,attr"`
	// LaunchTemplateName: string, optional
	LaunchTemplateName terra.StringValue `hcl:"launch_template_name,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type EksConfiguration struct {
	// EksClusterArn: string, required
	EksClusterArn terra.StringValue `hcl:"eks_cluster_arn,attr" validate:"required"`
	// KubernetesNamespace: string, required
	KubernetesNamespace terra.StringValue `hcl:"kubernetes_namespace,attr" validate:"required"`
}

type ComputeResourcesAttributes struct {
	ref terra.Reference
}

func (cr ComputeResourcesAttributes) InternalRef() terra.Reference {
	return cr.ref
}

func (cr ComputeResourcesAttributes) InternalWithRef(ref terra.Reference) ComputeResourcesAttributes {
	return ComputeResourcesAttributes{ref: ref}
}

func (cr ComputeResourcesAttributes) InternalTokens() hclwrite.Tokens {
	return cr.ref.InternalTokens()
}

func (cr ComputeResourcesAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("allocation_strategy"))
}

func (cr ComputeResourcesAttributes) BidPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("bid_percentage"))
}

func (cr ComputeResourcesAttributes) DesiredVcpus() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("desired_vcpus"))
}

func (cr ComputeResourcesAttributes) Ec2KeyPair() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("ec2_key_pair"))
}

func (cr ComputeResourcesAttributes) ImageId() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("image_id"))
}

func (cr ComputeResourcesAttributes) InstanceRole() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("instance_role"))
}

func (cr ComputeResourcesAttributes) InstanceType() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cr.ref.Append("instance_type"))
}

func (cr ComputeResourcesAttributes) MaxVcpus() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("max_vcpus"))
}

func (cr ComputeResourcesAttributes) MinVcpus() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("min_vcpus"))
}

func (cr ComputeResourcesAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cr.ref.Append("security_group_ids"))
}

func (cr ComputeResourcesAttributes) SpotIamFleetRole() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("spot_iam_fleet_role"))
}

func (cr ComputeResourcesAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cr.ref.Append("subnets"))
}

func (cr ComputeResourcesAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cr.ref.Append("tags"))
}

func (cr ComputeResourcesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("type"))
}

func (cr ComputeResourcesAttributes) Ec2Configuration() terra.ListValue[Ec2ConfigurationAttributes] {
	return terra.ReferenceAsList[Ec2ConfigurationAttributes](cr.ref.Append("ec2_configuration"))
}

func (cr ComputeResourcesAttributes) LaunchTemplate() terra.ListValue[LaunchTemplateAttributes] {
	return terra.ReferenceAsList[LaunchTemplateAttributes](cr.ref.Append("launch_template"))
}

type Ec2ConfigurationAttributes struct {
	ref terra.Reference
}

func (ec Ec2ConfigurationAttributes) InternalRef() terra.Reference {
	return ec.ref
}

func (ec Ec2ConfigurationAttributes) InternalWithRef(ref terra.Reference) Ec2ConfigurationAttributes {
	return Ec2ConfigurationAttributes{ref: ref}
}

func (ec Ec2ConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return ec.ref.InternalTokens()
}

func (ec Ec2ConfigurationAttributes) ImageIdOverride() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("image_id_override"))
}

func (ec Ec2ConfigurationAttributes) ImageType() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("image_type"))
}

type LaunchTemplateAttributes struct {
	ref terra.Reference
}

func (lt LaunchTemplateAttributes) InternalRef() terra.Reference {
	return lt.ref
}

func (lt LaunchTemplateAttributes) InternalWithRef(ref terra.Reference) LaunchTemplateAttributes {
	return LaunchTemplateAttributes{ref: ref}
}

func (lt LaunchTemplateAttributes) InternalTokens() hclwrite.Tokens {
	return lt.ref.InternalTokens()
}

func (lt LaunchTemplateAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_id"))
}

func (lt LaunchTemplateAttributes) LaunchTemplateName() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_name"))
}

func (lt LaunchTemplateAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("version"))
}

type EksConfigurationAttributes struct {
	ref terra.Reference
}

func (ec EksConfigurationAttributes) InternalRef() terra.Reference {
	return ec.ref
}

func (ec EksConfigurationAttributes) InternalWithRef(ref terra.Reference) EksConfigurationAttributes {
	return EksConfigurationAttributes{ref: ref}
}

func (ec EksConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return ec.ref.InternalTokens()
}

func (ec EksConfigurationAttributes) EksClusterArn() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("eks_cluster_arn"))
}

func (ec EksConfigurationAttributes) KubernetesNamespace() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kubernetes_namespace"))
}

type ComputeResourcesState struct {
	AllocationStrategy string                  `json:"allocation_strategy"`
	BidPercentage      float64                 `json:"bid_percentage"`
	DesiredVcpus       float64                 `json:"desired_vcpus"`
	Ec2KeyPair         string                  `json:"ec2_key_pair"`
	ImageId            string                  `json:"image_id"`
	InstanceRole       string                  `json:"instance_role"`
	InstanceType       []string                `json:"instance_type"`
	MaxVcpus           float64                 `json:"max_vcpus"`
	MinVcpus           float64                 `json:"min_vcpus"`
	SecurityGroupIds   []string                `json:"security_group_ids"`
	SpotIamFleetRole   string                  `json:"spot_iam_fleet_role"`
	Subnets            []string                `json:"subnets"`
	Tags               map[string]string       `json:"tags"`
	Type               string                  `json:"type"`
	Ec2Configuration   []Ec2ConfigurationState `json:"ec2_configuration"`
	LaunchTemplate     []LaunchTemplateState   `json:"launch_template"`
}

type Ec2ConfigurationState struct {
	ImageIdOverride string `json:"image_id_override"`
	ImageType       string `json:"image_type"`
}

type LaunchTemplateState struct {
	LaunchTemplateId   string `json:"launch_template_id"`
	LaunchTemplateName string `json:"launch_template_name"`
	Version            string `json:"version"`
}

type EksConfigurationState struct {
	EksClusterArn       string `json:"eks_cluster_arn"`
	KubernetesNamespace string `json:"kubernetes_namespace"`
}
