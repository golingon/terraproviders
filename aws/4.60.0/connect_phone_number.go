// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	connectphonenumber "github.com/golingon/terraproviders/aws/4.60.0/connectphonenumber"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConnectPhoneNumber(name string, args ConnectPhoneNumberArgs) *ConnectPhoneNumber {
	return &ConnectPhoneNumber{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConnectPhoneNumber)(nil)

type ConnectPhoneNumber struct {
	Name  string
	Args  ConnectPhoneNumberArgs
	state *connectPhoneNumberState
}

func (cpn *ConnectPhoneNumber) Type() string {
	return "aws_connect_phone_number"
}

func (cpn *ConnectPhoneNumber) LocalName() string {
	return cpn.Name
}

func (cpn *ConnectPhoneNumber) Configuration() interface{} {
	return cpn.Args
}

func (cpn *ConnectPhoneNumber) Attributes() connectPhoneNumberAttributes {
	return connectPhoneNumberAttributes{ref: terra.ReferenceResource(cpn)}
}

func (cpn *ConnectPhoneNumber) ImportState(av io.Reader) error {
	cpn.state = &connectPhoneNumberState{}
	if err := json.NewDecoder(av).Decode(cpn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cpn.Type(), cpn.LocalName(), err)
	}
	return nil
}

func (cpn *ConnectPhoneNumber) State() (*connectPhoneNumberState, bool) {
	return cpn.state, cpn.state != nil
}

func (cpn *ConnectPhoneNumber) StateMust() *connectPhoneNumberState {
	if cpn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cpn.Type(), cpn.LocalName()))
	}
	return cpn.state
}

func (cpn *ConnectPhoneNumber) DependOn() terra.Reference {
	return terra.ReferenceResource(cpn)
}

type ConnectPhoneNumberArgs struct {
	// CountryCode: string, required
	CountryCode terra.StringValue `hcl:"country_code,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetArn: string, required
	TargetArn terra.StringValue `hcl:"target_arn,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Status: min=0
	Status []connectphonenumber.Status `hcl:"status,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *connectphonenumber.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ConnectPhoneNumber depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type connectPhoneNumberAttributes struct {
	ref terra.Reference
}

func (cpn connectPhoneNumberAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cpn.ref.Append("arn"))
}

func (cpn connectPhoneNumberAttributes) CountryCode() terra.StringValue {
	return terra.ReferenceString(cpn.ref.Append("country_code"))
}

func (cpn connectPhoneNumberAttributes) Description() terra.StringValue {
	return terra.ReferenceString(cpn.ref.Append("description"))
}

func (cpn connectPhoneNumberAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cpn.ref.Append("id"))
}

func (cpn connectPhoneNumberAttributes) PhoneNumber() terra.StringValue {
	return terra.ReferenceString(cpn.ref.Append("phone_number"))
}

func (cpn connectPhoneNumberAttributes) Prefix() terra.StringValue {
	return terra.ReferenceString(cpn.ref.Append("prefix"))
}

func (cpn connectPhoneNumberAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cpn.ref.Append("tags"))
}

func (cpn connectPhoneNumberAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cpn.ref.Append("tags_all"))
}

func (cpn connectPhoneNumberAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceString(cpn.ref.Append("target_arn"))
}

func (cpn connectPhoneNumberAttributes) Type() terra.StringValue {
	return terra.ReferenceString(cpn.ref.Append("type"))
}

func (cpn connectPhoneNumberAttributes) Status() terra.ListValue[connectphonenumber.StatusAttributes] {
	return terra.ReferenceList[connectphonenumber.StatusAttributes](cpn.ref.Append("status"))
}

func (cpn connectPhoneNumberAttributes) Timeouts() connectphonenumber.TimeoutsAttributes {
	return terra.ReferenceSingle[connectphonenumber.TimeoutsAttributes](cpn.ref.Append("timeouts"))
}

type connectPhoneNumberState struct {
	Arn         string                            `json:"arn"`
	CountryCode string                            `json:"country_code"`
	Description string                            `json:"description"`
	Id          string                            `json:"id"`
	PhoneNumber string                            `json:"phone_number"`
	Prefix      string                            `json:"prefix"`
	Tags        map[string]string                 `json:"tags"`
	TagsAll     map[string]string                 `json:"tags_all"`
	TargetArn   string                            `json:"target_arn"`
	Type        string                            `json:"type"`
	Status      []connectphonenumber.StatusState  `json:"status"`
	Timeouts    *connectphonenumber.TimeoutsState `json:"timeouts"`
}
