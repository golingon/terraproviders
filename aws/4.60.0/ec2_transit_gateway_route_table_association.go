// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2TransitGatewayRouteTableAssociation(name string, args Ec2TransitGatewayRouteTableAssociationArgs) *Ec2TransitGatewayRouteTableAssociation {
	return &Ec2TransitGatewayRouteTableAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2TransitGatewayRouteTableAssociation)(nil)

type Ec2TransitGatewayRouteTableAssociation struct {
	Name  string
	Args  Ec2TransitGatewayRouteTableAssociationArgs
	state *ec2TransitGatewayRouteTableAssociationState
}

func (etgrta *Ec2TransitGatewayRouteTableAssociation) Type() string {
	return "aws_ec2_transit_gateway_route_table_association"
}

func (etgrta *Ec2TransitGatewayRouteTableAssociation) LocalName() string {
	return etgrta.Name
}

func (etgrta *Ec2TransitGatewayRouteTableAssociation) Configuration() interface{} {
	return etgrta.Args
}

func (etgrta *Ec2TransitGatewayRouteTableAssociation) Attributes() ec2TransitGatewayRouteTableAssociationAttributes {
	return ec2TransitGatewayRouteTableAssociationAttributes{ref: terra.ReferenceResource(etgrta)}
}

func (etgrta *Ec2TransitGatewayRouteTableAssociation) ImportState(av io.Reader) error {
	etgrta.state = &ec2TransitGatewayRouteTableAssociationState{}
	if err := json.NewDecoder(av).Decode(etgrta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", etgrta.Type(), etgrta.LocalName(), err)
	}
	return nil
}

func (etgrta *Ec2TransitGatewayRouteTableAssociation) State() (*ec2TransitGatewayRouteTableAssociationState, bool) {
	return etgrta.state, etgrta.state != nil
}

func (etgrta *Ec2TransitGatewayRouteTableAssociation) StateMust() *ec2TransitGatewayRouteTableAssociationState {
	if etgrta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", etgrta.Type(), etgrta.LocalName()))
	}
	return etgrta.state
}

func (etgrta *Ec2TransitGatewayRouteTableAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(etgrta)
}

type Ec2TransitGatewayRouteTableAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TransitGatewayAttachmentId: string, required
	TransitGatewayAttachmentId terra.StringValue `hcl:"transit_gateway_attachment_id,attr" validate:"required"`
	// TransitGatewayRouteTableId: string, required
	TransitGatewayRouteTableId terra.StringValue `hcl:"transit_gateway_route_table_id,attr" validate:"required"`
	// DependsOn contains resources that Ec2TransitGatewayRouteTableAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2TransitGatewayRouteTableAssociationAttributes struct {
	ref terra.Reference
}

func (etgrta ec2TransitGatewayRouteTableAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etgrta.ref.Append("id"))
}

func (etgrta ec2TransitGatewayRouteTableAssociationAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(etgrta.ref.Append("resource_id"))
}

func (etgrta ec2TransitGatewayRouteTableAssociationAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceString(etgrta.ref.Append("resource_type"))
}

func (etgrta ec2TransitGatewayRouteTableAssociationAttributes) TransitGatewayAttachmentId() terra.StringValue {
	return terra.ReferenceString(etgrta.ref.Append("transit_gateway_attachment_id"))
}

func (etgrta ec2TransitGatewayRouteTableAssociationAttributes) TransitGatewayRouteTableId() terra.StringValue {
	return terra.ReferenceString(etgrta.ref.Append("transit_gateway_route_table_id"))
}

type ec2TransitGatewayRouteTableAssociationState struct {
	Id                         string `json:"id"`
	ResourceId                 string `json:"resource_id"`
	ResourceType               string `json:"resource_type"`
	TransitGatewayAttachmentId string `json:"transit_gateway_attachment_id"`
	TransitGatewayRouteTableId string `json:"transit_gateway_route_table_id"`
}
