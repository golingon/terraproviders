// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dxgatewayassociation "github.com/golingon/terraproviders/aws/4.60.0/dxgatewayassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDxGatewayAssociation(name string, args DxGatewayAssociationArgs) *DxGatewayAssociation {
	return &DxGatewayAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DxGatewayAssociation)(nil)

type DxGatewayAssociation struct {
	Name  string
	Args  DxGatewayAssociationArgs
	state *dxGatewayAssociationState
}

func (dga *DxGatewayAssociation) Type() string {
	return "aws_dx_gateway_association"
}

func (dga *DxGatewayAssociation) LocalName() string {
	return dga.Name
}

func (dga *DxGatewayAssociation) Configuration() interface{} {
	return dga.Args
}

func (dga *DxGatewayAssociation) Attributes() dxGatewayAssociationAttributes {
	return dxGatewayAssociationAttributes{ref: terra.ReferenceResource(dga)}
}

func (dga *DxGatewayAssociation) ImportState(av io.Reader) error {
	dga.state = &dxGatewayAssociationState{}
	if err := json.NewDecoder(av).Decode(dga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dga.Type(), dga.LocalName(), err)
	}
	return nil
}

func (dga *DxGatewayAssociation) State() (*dxGatewayAssociationState, bool) {
	return dga.state, dga.state != nil
}

func (dga *DxGatewayAssociation) StateMust() *dxGatewayAssociationState {
	if dga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dga.Type(), dga.LocalName()))
	}
	return dga.state
}

func (dga *DxGatewayAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(dga)
}

type DxGatewayAssociationArgs struct {
	// AllowedPrefixes: set of string, optional
	AllowedPrefixes terra.SetValue[terra.StringValue] `hcl:"allowed_prefixes,attr"`
	// AssociatedGatewayId: string, optional
	AssociatedGatewayId terra.StringValue `hcl:"associated_gateway_id,attr"`
	// AssociatedGatewayOwnerAccountId: string, optional
	AssociatedGatewayOwnerAccountId terra.StringValue `hcl:"associated_gateway_owner_account_id,attr"`
	// DxGatewayId: string, required
	DxGatewayId terra.StringValue `hcl:"dx_gateway_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProposalId: string, optional
	ProposalId terra.StringValue `hcl:"proposal_id,attr"`
	// VpnGatewayId: string, optional
	VpnGatewayId terra.StringValue `hcl:"vpn_gateway_id,attr"`
	// Timeouts: optional
	Timeouts *dxgatewayassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DxGatewayAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dxGatewayAssociationAttributes struct {
	ref terra.Reference
}

func (dga dxGatewayAssociationAttributes) AllowedPrefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dga.ref.Append("allowed_prefixes"))
}

func (dga dxGatewayAssociationAttributes) AssociatedGatewayId() terra.StringValue {
	return terra.ReferenceString(dga.ref.Append("associated_gateway_id"))
}

func (dga dxGatewayAssociationAttributes) AssociatedGatewayOwnerAccountId() terra.StringValue {
	return terra.ReferenceString(dga.ref.Append("associated_gateway_owner_account_id"))
}

func (dga dxGatewayAssociationAttributes) AssociatedGatewayType() terra.StringValue {
	return terra.ReferenceString(dga.ref.Append("associated_gateway_type"))
}

func (dga dxGatewayAssociationAttributes) DxGatewayAssociationId() terra.StringValue {
	return terra.ReferenceString(dga.ref.Append("dx_gateway_association_id"))
}

func (dga dxGatewayAssociationAttributes) DxGatewayId() terra.StringValue {
	return terra.ReferenceString(dga.ref.Append("dx_gateway_id"))
}

func (dga dxGatewayAssociationAttributes) DxGatewayOwnerAccountId() terra.StringValue {
	return terra.ReferenceString(dga.ref.Append("dx_gateway_owner_account_id"))
}

func (dga dxGatewayAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dga.ref.Append("id"))
}

func (dga dxGatewayAssociationAttributes) ProposalId() terra.StringValue {
	return terra.ReferenceString(dga.ref.Append("proposal_id"))
}

func (dga dxGatewayAssociationAttributes) VpnGatewayId() terra.StringValue {
	return terra.ReferenceString(dga.ref.Append("vpn_gateway_id"))
}

func (dga dxGatewayAssociationAttributes) Timeouts() dxgatewayassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[dxgatewayassociation.TimeoutsAttributes](dga.ref.Append("timeouts"))
}

type dxGatewayAssociationState struct {
	AllowedPrefixes                 []string                            `json:"allowed_prefixes"`
	AssociatedGatewayId             string                              `json:"associated_gateway_id"`
	AssociatedGatewayOwnerAccountId string                              `json:"associated_gateway_owner_account_id"`
	AssociatedGatewayType           string                              `json:"associated_gateway_type"`
	DxGatewayAssociationId          string                              `json:"dx_gateway_association_id"`
	DxGatewayId                     string                              `json:"dx_gateway_id"`
	DxGatewayOwnerAccountId         string                              `json:"dx_gateway_owner_account_id"`
	Id                              string                              `json:"id"`
	ProposalId                      string                              `json:"proposal_id"`
	VpnGatewayId                    string                              `json:"vpn_gateway_id"`
	Timeouts                        *dxgatewayassociation.TimeoutsState `json:"timeouts"`
}
