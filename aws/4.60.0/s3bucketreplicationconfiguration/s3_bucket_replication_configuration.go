// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package s3bucketreplicationconfiguration

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Rule struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// DeleteMarkerReplication: optional
	DeleteMarkerReplication *DeleteMarkerReplication `hcl:"delete_marker_replication,block"`
	// Destination: required
	Destination *Destination `hcl:"destination,block" validate:"required"`
	// ExistingObjectReplication: optional
	ExistingObjectReplication *ExistingObjectReplication `hcl:"existing_object_replication,block"`
	// Filter: optional
	Filter *Filter `hcl:"filter,block"`
	// SourceSelectionCriteria: optional
	SourceSelectionCriteria *SourceSelectionCriteria `hcl:"source_selection_criteria,block"`
}

type DeleteMarkerReplication struct {
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
}

type Destination struct {
	// Account: string, optional
	Account terra.StringValue `hcl:"account,attr"`
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// StorageClass: string, optional
	StorageClass terra.StringValue `hcl:"storage_class,attr"`
	// AccessControlTranslation: optional
	AccessControlTranslation *AccessControlTranslation `hcl:"access_control_translation,block"`
	// EncryptionConfiguration: optional
	EncryptionConfiguration *EncryptionConfiguration `hcl:"encryption_configuration,block"`
	// Metrics: optional
	Metrics *Metrics `hcl:"metrics,block"`
	// ReplicationTime: optional
	ReplicationTime *ReplicationTime `hcl:"replication_time,block"`
}

type AccessControlTranslation struct {
	// Owner: string, required
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
}

type EncryptionConfiguration struct {
	// ReplicaKmsKeyId: string, required
	ReplicaKmsKeyId terra.StringValue `hcl:"replica_kms_key_id,attr" validate:"required"`
}

type Metrics struct {
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// EventThreshold: optional
	EventThreshold *EventThreshold `hcl:"event_threshold,block"`
}

type EventThreshold struct {
	// Minutes: number, required
	Minutes terra.NumberValue `hcl:"minutes,attr" validate:"required"`
}

type ReplicationTime struct {
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// Time: required
	Time *Time `hcl:"time,block" validate:"required"`
}

type Time struct {
	// Minutes: number, required
	Minutes terra.NumberValue `hcl:"minutes,attr" validate:"required"`
}

type ExistingObjectReplication struct {
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
}

type Filter struct {
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// And: optional
	And *And `hcl:"and,block"`
	// Tag: optional
	Tag *Tag `hcl:"tag,block"`
}

type And struct {
	// Prefix: string, optional
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type Tag struct {
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type SourceSelectionCriteria struct {
	// ReplicaModifications: optional
	ReplicaModifications *ReplicaModifications `hcl:"replica_modifications,block"`
	// SseKmsEncryptedObjects: optional
	SseKmsEncryptedObjects *SseKmsEncryptedObjects `hcl:"sse_kms_encrypted_objects,block"`
}

type ReplicaModifications struct {
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
}

type SseKmsEncryptedObjects struct {
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
}

type RuleAttributes struct {
	ref terra.Reference
}

func (r RuleAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RuleAttributes) InternalWithRef(ref terra.Reference) RuleAttributes {
	return RuleAttributes{ref: ref}
}

func (r RuleAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r RuleAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("prefix"))
}

func (r RuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("priority"))
}

func (r RuleAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("status"))
}

func (r RuleAttributes) DeleteMarkerReplication() terra.ListValue[DeleteMarkerReplicationAttributes] {
	return terra.ReferenceAsList[DeleteMarkerReplicationAttributes](r.ref.Append("delete_marker_replication"))
}

func (r RuleAttributes) Destination() terra.ListValue[DestinationAttributes] {
	return terra.ReferenceAsList[DestinationAttributes](r.ref.Append("destination"))
}

func (r RuleAttributes) ExistingObjectReplication() terra.ListValue[ExistingObjectReplicationAttributes] {
	return terra.ReferenceAsList[ExistingObjectReplicationAttributes](r.ref.Append("existing_object_replication"))
}

func (r RuleAttributes) Filter() terra.ListValue[FilterAttributes] {
	return terra.ReferenceAsList[FilterAttributes](r.ref.Append("filter"))
}

func (r RuleAttributes) SourceSelectionCriteria() terra.ListValue[SourceSelectionCriteriaAttributes] {
	return terra.ReferenceAsList[SourceSelectionCriteriaAttributes](r.ref.Append("source_selection_criteria"))
}

type DeleteMarkerReplicationAttributes struct {
	ref terra.Reference
}

func (dmr DeleteMarkerReplicationAttributes) InternalRef() terra.Reference {
	return dmr.ref
}

func (dmr DeleteMarkerReplicationAttributes) InternalWithRef(ref terra.Reference) DeleteMarkerReplicationAttributes {
	return DeleteMarkerReplicationAttributes{ref: ref}
}

func (dmr DeleteMarkerReplicationAttributes) InternalTokens() hclwrite.Tokens {
	return dmr.ref.InternalTokens()
}

func (dmr DeleteMarkerReplicationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(dmr.ref.Append("status"))
}

type DestinationAttributes struct {
	ref terra.Reference
}

func (d DestinationAttributes) InternalRef() terra.Reference {
	return d.ref
}

func (d DestinationAttributes) InternalWithRef(ref terra.Reference) DestinationAttributes {
	return DestinationAttributes{ref: ref}
}

func (d DestinationAttributes) InternalTokens() hclwrite.Tokens {
	return d.ref.InternalTokens()
}

func (d DestinationAttributes) Account() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("account"))
}

func (d DestinationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("bucket"))
}

func (d DestinationAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("storage_class"))
}

func (d DestinationAttributes) AccessControlTranslation() terra.ListValue[AccessControlTranslationAttributes] {
	return terra.ReferenceAsList[AccessControlTranslationAttributes](d.ref.Append("access_control_translation"))
}

func (d DestinationAttributes) EncryptionConfiguration() terra.ListValue[EncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[EncryptionConfigurationAttributes](d.ref.Append("encryption_configuration"))
}

func (d DestinationAttributes) Metrics() terra.ListValue[MetricsAttributes] {
	return terra.ReferenceAsList[MetricsAttributes](d.ref.Append("metrics"))
}

func (d DestinationAttributes) ReplicationTime() terra.ListValue[ReplicationTimeAttributes] {
	return terra.ReferenceAsList[ReplicationTimeAttributes](d.ref.Append("replication_time"))
}

type AccessControlTranslationAttributes struct {
	ref terra.Reference
}

func (act AccessControlTranslationAttributes) InternalRef() terra.Reference {
	return act.ref
}

func (act AccessControlTranslationAttributes) InternalWithRef(ref terra.Reference) AccessControlTranslationAttributes {
	return AccessControlTranslationAttributes{ref: ref}
}

func (act AccessControlTranslationAttributes) InternalTokens() hclwrite.Tokens {
	return act.ref.InternalTokens()
}

func (act AccessControlTranslationAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("owner"))
}

type EncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec EncryptionConfigurationAttributes) InternalRef() terra.Reference {
	return ec.ref
}

func (ec EncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) EncryptionConfigurationAttributes {
	return EncryptionConfigurationAttributes{ref: ref}
}

func (ec EncryptionConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return ec.ref.InternalTokens()
}

func (ec EncryptionConfigurationAttributes) ReplicaKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("replica_kms_key_id"))
}

type MetricsAttributes struct {
	ref terra.Reference
}

func (m MetricsAttributes) InternalRef() terra.Reference {
	return m.ref
}

func (m MetricsAttributes) InternalWithRef(ref terra.Reference) MetricsAttributes {
	return MetricsAttributes{ref: ref}
}

func (m MetricsAttributes) InternalTokens() hclwrite.Tokens {
	return m.ref.InternalTokens()
}

func (m MetricsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("status"))
}

func (m MetricsAttributes) EventThreshold() terra.ListValue[EventThresholdAttributes] {
	return terra.ReferenceAsList[EventThresholdAttributes](m.ref.Append("event_threshold"))
}

type EventThresholdAttributes struct {
	ref terra.Reference
}

func (et EventThresholdAttributes) InternalRef() terra.Reference {
	return et.ref
}

func (et EventThresholdAttributes) InternalWithRef(ref terra.Reference) EventThresholdAttributes {
	return EventThresholdAttributes{ref: ref}
}

func (et EventThresholdAttributes) InternalTokens() hclwrite.Tokens {
	return et.ref.InternalTokens()
}

func (et EventThresholdAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(et.ref.Append("minutes"))
}

type ReplicationTimeAttributes struct {
	ref terra.Reference
}

func (rt ReplicationTimeAttributes) InternalRef() terra.Reference {
	return rt.ref
}

func (rt ReplicationTimeAttributes) InternalWithRef(ref terra.Reference) ReplicationTimeAttributes {
	return ReplicationTimeAttributes{ref: ref}
}

func (rt ReplicationTimeAttributes) InternalTokens() hclwrite.Tokens {
	return rt.ref.InternalTokens()
}

func (rt ReplicationTimeAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("status"))
}

func (rt ReplicationTimeAttributes) Time() terra.ListValue[TimeAttributes] {
	return terra.ReferenceAsList[TimeAttributes](rt.ref.Append("time"))
}

type TimeAttributes struct {
	ref terra.Reference
}

func (t TimeAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeAttributes) InternalWithRef(ref terra.Reference) TimeAttributes {
	return TimeAttributes{ref: ref}
}

func (t TimeAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("minutes"))
}

type ExistingObjectReplicationAttributes struct {
	ref terra.Reference
}

func (eor ExistingObjectReplicationAttributes) InternalRef() terra.Reference {
	return eor.ref
}

func (eor ExistingObjectReplicationAttributes) InternalWithRef(ref terra.Reference) ExistingObjectReplicationAttributes {
	return ExistingObjectReplicationAttributes{ref: ref}
}

func (eor ExistingObjectReplicationAttributes) InternalTokens() hclwrite.Tokens {
	return eor.ref.InternalTokens()
}

func (eor ExistingObjectReplicationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(eor.ref.Append("status"))
}

type FilterAttributes struct {
	ref terra.Reference
}

func (f FilterAttributes) InternalRef() terra.Reference {
	return f.ref
}

func (f FilterAttributes) InternalWithRef(ref terra.Reference) FilterAttributes {
	return FilterAttributes{ref: ref}
}

func (f FilterAttributes) InternalTokens() hclwrite.Tokens {
	return f.ref.InternalTokens()
}

func (f FilterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

func (f FilterAttributes) And() terra.ListValue[AndAttributes] {
	return terra.ReferenceAsList[AndAttributes](f.ref.Append("and"))
}

func (f FilterAttributes) Tag() terra.ListValue[TagAttributes] {
	return terra.ReferenceAsList[TagAttributes](f.ref.Append("tag"))
}

type AndAttributes struct {
	ref terra.Reference
}

func (a AndAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a AndAttributes) InternalWithRef(ref terra.Reference) AndAttributes {
	return AndAttributes{ref: ref}
}

func (a AndAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a AndAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("prefix"))
}

func (a AndAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("tags"))
}

type TagAttributes struct {
	ref terra.Reference
}

func (t TagAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TagAttributes) InternalWithRef(ref terra.Reference) TagAttributes {
	return TagAttributes{ref: ref}
}

func (t TagAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t TagAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type SourceSelectionCriteriaAttributes struct {
	ref terra.Reference
}

func (ssc SourceSelectionCriteriaAttributes) InternalRef() terra.Reference {
	return ssc.ref
}

func (ssc SourceSelectionCriteriaAttributes) InternalWithRef(ref terra.Reference) SourceSelectionCriteriaAttributes {
	return SourceSelectionCriteriaAttributes{ref: ref}
}

func (ssc SourceSelectionCriteriaAttributes) InternalTokens() hclwrite.Tokens {
	return ssc.ref.InternalTokens()
}

func (ssc SourceSelectionCriteriaAttributes) ReplicaModifications() terra.ListValue[ReplicaModificationsAttributes] {
	return terra.ReferenceAsList[ReplicaModificationsAttributes](ssc.ref.Append("replica_modifications"))
}

func (ssc SourceSelectionCriteriaAttributes) SseKmsEncryptedObjects() terra.ListValue[SseKmsEncryptedObjectsAttributes] {
	return terra.ReferenceAsList[SseKmsEncryptedObjectsAttributes](ssc.ref.Append("sse_kms_encrypted_objects"))
}

type ReplicaModificationsAttributes struct {
	ref terra.Reference
}

func (rm ReplicaModificationsAttributes) InternalRef() terra.Reference {
	return rm.ref
}

func (rm ReplicaModificationsAttributes) InternalWithRef(ref terra.Reference) ReplicaModificationsAttributes {
	return ReplicaModificationsAttributes{ref: ref}
}

func (rm ReplicaModificationsAttributes) InternalTokens() hclwrite.Tokens {
	return rm.ref.InternalTokens()
}

func (rm ReplicaModificationsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rm.ref.Append("status"))
}

type SseKmsEncryptedObjectsAttributes struct {
	ref terra.Reference
}

func (skeo SseKmsEncryptedObjectsAttributes) InternalRef() terra.Reference {
	return skeo.ref
}

func (skeo SseKmsEncryptedObjectsAttributes) InternalWithRef(ref terra.Reference) SseKmsEncryptedObjectsAttributes {
	return SseKmsEncryptedObjectsAttributes{ref: ref}
}

func (skeo SseKmsEncryptedObjectsAttributes) InternalTokens() hclwrite.Tokens {
	return skeo.ref.InternalTokens()
}

func (skeo SseKmsEncryptedObjectsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(skeo.ref.Append("status"))
}

type RuleState struct {
	Id                        string                           `json:"id"`
	Prefix                    string                           `json:"prefix"`
	Priority                  float64                          `json:"priority"`
	Status                    string                           `json:"status"`
	DeleteMarkerReplication   []DeleteMarkerReplicationState   `json:"delete_marker_replication"`
	Destination               []DestinationState               `json:"destination"`
	ExistingObjectReplication []ExistingObjectReplicationState `json:"existing_object_replication"`
	Filter                    []FilterState                    `json:"filter"`
	SourceSelectionCriteria   []SourceSelectionCriteriaState   `json:"source_selection_criteria"`
}

type DeleteMarkerReplicationState struct {
	Status string `json:"status"`
}

type DestinationState struct {
	Account                  string                          `json:"account"`
	Bucket                   string                          `json:"bucket"`
	StorageClass             string                          `json:"storage_class"`
	AccessControlTranslation []AccessControlTranslationState `json:"access_control_translation"`
	EncryptionConfiguration  []EncryptionConfigurationState  `json:"encryption_configuration"`
	Metrics                  []MetricsState                  `json:"metrics"`
	ReplicationTime          []ReplicationTimeState          `json:"replication_time"`
}

type AccessControlTranslationState struct {
	Owner string `json:"owner"`
}

type EncryptionConfigurationState struct {
	ReplicaKmsKeyId string `json:"replica_kms_key_id"`
}

type MetricsState struct {
	Status         string                `json:"status"`
	EventThreshold []EventThresholdState `json:"event_threshold"`
}

type EventThresholdState struct {
	Minutes float64 `json:"minutes"`
}

type ReplicationTimeState struct {
	Status string      `json:"status"`
	Time   []TimeState `json:"time"`
}

type TimeState struct {
	Minutes float64 `json:"minutes"`
}

type ExistingObjectReplicationState struct {
	Status string `json:"status"`
}

type FilterState struct {
	Prefix string     `json:"prefix"`
	And    []AndState `json:"and"`
	Tag    []TagState `json:"tag"`
}

type AndState struct {
	Prefix string            `json:"prefix"`
	Tags   map[string]string `json:"tags"`
}

type TagState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type SourceSelectionCriteriaState struct {
	ReplicaModifications   []ReplicaModificationsState   `json:"replica_modifications"`
	SseKmsEncryptedObjects []SseKmsEncryptedObjectsState `json:"sse_kms_encrypted_objects"`
}

type ReplicaModificationsState struct {
	Status string `json:"status"`
}

type SseKmsEncryptedObjectsState struct {
	Status string `json:"status"`
}
