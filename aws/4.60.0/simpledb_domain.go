// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSimpledbDomain(name string, args SimpledbDomainArgs) *SimpledbDomain {
	return &SimpledbDomain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SimpledbDomain)(nil)

type SimpledbDomain struct {
	Name  string
	Args  SimpledbDomainArgs
	state *simpledbDomainState
}

func (sd *SimpledbDomain) Type() string {
	return "aws_simpledb_domain"
}

func (sd *SimpledbDomain) LocalName() string {
	return sd.Name
}

func (sd *SimpledbDomain) Configuration() interface{} {
	return sd.Args
}

func (sd *SimpledbDomain) Attributes() simpledbDomainAttributes {
	return simpledbDomainAttributes{ref: terra.ReferenceResource(sd)}
}

func (sd *SimpledbDomain) ImportState(av io.Reader) error {
	sd.state = &simpledbDomainState{}
	if err := json.NewDecoder(av).Decode(sd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sd.Type(), sd.LocalName(), err)
	}
	return nil
}

func (sd *SimpledbDomain) State() (*simpledbDomainState, bool) {
	return sd.state, sd.state != nil
}

func (sd *SimpledbDomain) StateMust() *simpledbDomainState {
	if sd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sd.Type(), sd.LocalName()))
	}
	return sd.state
}

func (sd *SimpledbDomain) DependOn() terra.Reference {
	return terra.ReferenceResource(sd)
}

type SimpledbDomainArgs struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// DependsOn contains resources that SimpledbDomain depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type simpledbDomainAttributes struct {
	ref terra.Reference
}

func (sd simpledbDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sd.ref.Append("id"))
}

func (sd simpledbDomainAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sd.ref.Append("name"))
}

type simpledbDomainState struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}
