// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ec2clientvpnendpoint "github.com/golingon/terraproviders/aws/4.60.0/ec2clientvpnendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2ClientVpnEndpoint(name string, args Ec2ClientVpnEndpointArgs) *Ec2ClientVpnEndpoint {
	return &Ec2ClientVpnEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2ClientVpnEndpoint)(nil)

type Ec2ClientVpnEndpoint struct {
	Name  string
	Args  Ec2ClientVpnEndpointArgs
	state *ec2ClientVpnEndpointState
}

func (ecve *Ec2ClientVpnEndpoint) Type() string {
	return "aws_ec2_client_vpn_endpoint"
}

func (ecve *Ec2ClientVpnEndpoint) LocalName() string {
	return ecve.Name
}

func (ecve *Ec2ClientVpnEndpoint) Configuration() interface{} {
	return ecve.Args
}

func (ecve *Ec2ClientVpnEndpoint) Attributes() ec2ClientVpnEndpointAttributes {
	return ec2ClientVpnEndpointAttributes{ref: terra.ReferenceResource(ecve)}
}

func (ecve *Ec2ClientVpnEndpoint) ImportState(av io.Reader) error {
	ecve.state = &ec2ClientVpnEndpointState{}
	if err := json.NewDecoder(av).Decode(ecve.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ecve.Type(), ecve.LocalName(), err)
	}
	return nil
}

func (ecve *Ec2ClientVpnEndpoint) State() (*ec2ClientVpnEndpointState, bool) {
	return ecve.state, ecve.state != nil
}

func (ecve *Ec2ClientVpnEndpoint) StateMust() *ec2ClientVpnEndpointState {
	if ecve.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ecve.Type(), ecve.LocalName()))
	}
	return ecve.state
}

func (ecve *Ec2ClientVpnEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(ecve)
}

type Ec2ClientVpnEndpointArgs struct {
	// ClientCidrBlock: string, required
	ClientCidrBlock terra.StringValue `hcl:"client_cidr_block,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DnsServers: list of string, optional
	DnsServers terra.ListValue[terra.StringValue] `hcl:"dns_servers,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SelfServicePortal: string, optional
	SelfServicePortal terra.StringValue `hcl:"self_service_portal,attr"`
	// ServerCertificateArn: string, required
	ServerCertificateArn terra.StringValue `hcl:"server_certificate_arn,attr" validate:"required"`
	// SessionTimeoutHours: number, optional
	SessionTimeoutHours terra.NumberValue `hcl:"session_timeout_hours,attr"`
	// SplitTunnel: bool, optional
	SplitTunnel terra.BoolValue `hcl:"split_tunnel,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransportProtocol: string, optional
	TransportProtocol terra.StringValue `hcl:"transport_protocol,attr"`
	// VpcId: string, optional
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// VpnPort: number, optional
	VpnPort terra.NumberValue `hcl:"vpn_port,attr"`
	// AuthenticationOptions: min=1,max=2
	AuthenticationOptions []ec2clientvpnendpoint.AuthenticationOptions `hcl:"authentication_options,block" validate:"min=1,max=2"`
	// ClientConnectOptions: optional
	ClientConnectOptions *ec2clientvpnendpoint.ClientConnectOptions `hcl:"client_connect_options,block"`
	// ClientLoginBannerOptions: optional
	ClientLoginBannerOptions *ec2clientvpnendpoint.ClientLoginBannerOptions `hcl:"client_login_banner_options,block"`
	// ConnectionLogOptions: required
	ConnectionLogOptions *ec2clientvpnendpoint.ConnectionLogOptions `hcl:"connection_log_options,block" validate:"required"`
	// DependsOn contains resources that Ec2ClientVpnEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2ClientVpnEndpointAttributes struct {
	ref terra.Reference
}

func (ecve ec2ClientVpnEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ecve.ref.Append("arn"))
}

func (ecve ec2ClientVpnEndpointAttributes) ClientCidrBlock() terra.StringValue {
	return terra.ReferenceString(ecve.ref.Append("client_cidr_block"))
}

func (ecve ec2ClientVpnEndpointAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ecve.ref.Append("description"))
}

func (ecve ec2ClientVpnEndpointAttributes) DnsName() terra.StringValue {
	return terra.ReferenceString(ecve.ref.Append("dns_name"))
}

func (ecve ec2ClientVpnEndpointAttributes) DnsServers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ecve.ref.Append("dns_servers"))
}

func (ecve ec2ClientVpnEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ecve.ref.Append("id"))
}

func (ecve ec2ClientVpnEndpointAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ecve.ref.Append("security_group_ids"))
}

func (ecve ec2ClientVpnEndpointAttributes) SelfServicePortal() terra.StringValue {
	return terra.ReferenceString(ecve.ref.Append("self_service_portal"))
}

func (ecve ec2ClientVpnEndpointAttributes) ServerCertificateArn() terra.StringValue {
	return terra.ReferenceString(ecve.ref.Append("server_certificate_arn"))
}

func (ecve ec2ClientVpnEndpointAttributes) SessionTimeoutHours() terra.NumberValue {
	return terra.ReferenceNumber(ecve.ref.Append("session_timeout_hours"))
}

func (ecve ec2ClientVpnEndpointAttributes) SplitTunnel() terra.BoolValue {
	return terra.ReferenceBool(ecve.ref.Append("split_tunnel"))
}

func (ecve ec2ClientVpnEndpointAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ecve.ref.Append("status"))
}

func (ecve ec2ClientVpnEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ecve.ref.Append("tags"))
}

func (ecve ec2ClientVpnEndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ecve.ref.Append("tags_all"))
}

func (ecve ec2ClientVpnEndpointAttributes) TransportProtocol() terra.StringValue {
	return terra.ReferenceString(ecve.ref.Append("transport_protocol"))
}

func (ecve ec2ClientVpnEndpointAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(ecve.ref.Append("vpc_id"))
}

func (ecve ec2ClientVpnEndpointAttributes) VpnPort() terra.NumberValue {
	return terra.ReferenceNumber(ecve.ref.Append("vpn_port"))
}

func (ecve ec2ClientVpnEndpointAttributes) AuthenticationOptions() terra.SetValue[ec2clientvpnendpoint.AuthenticationOptionsAttributes] {
	return terra.ReferenceSet[ec2clientvpnendpoint.AuthenticationOptionsAttributes](ecve.ref.Append("authentication_options"))
}

func (ecve ec2ClientVpnEndpointAttributes) ClientConnectOptions() terra.ListValue[ec2clientvpnendpoint.ClientConnectOptionsAttributes] {
	return terra.ReferenceList[ec2clientvpnendpoint.ClientConnectOptionsAttributes](ecve.ref.Append("client_connect_options"))
}

func (ecve ec2ClientVpnEndpointAttributes) ClientLoginBannerOptions() terra.ListValue[ec2clientvpnendpoint.ClientLoginBannerOptionsAttributes] {
	return terra.ReferenceList[ec2clientvpnendpoint.ClientLoginBannerOptionsAttributes](ecve.ref.Append("client_login_banner_options"))
}

func (ecve ec2ClientVpnEndpointAttributes) ConnectionLogOptions() terra.ListValue[ec2clientvpnendpoint.ConnectionLogOptionsAttributes] {
	return terra.ReferenceList[ec2clientvpnendpoint.ConnectionLogOptionsAttributes](ecve.ref.Append("connection_log_options"))
}

type ec2ClientVpnEndpointState struct {
	Arn                      string                                               `json:"arn"`
	ClientCidrBlock          string                                               `json:"client_cidr_block"`
	Description              string                                               `json:"description"`
	DnsName                  string                                               `json:"dns_name"`
	DnsServers               []string                                             `json:"dns_servers"`
	Id                       string                                               `json:"id"`
	SecurityGroupIds         []string                                             `json:"security_group_ids"`
	SelfServicePortal        string                                               `json:"self_service_portal"`
	ServerCertificateArn     string                                               `json:"server_certificate_arn"`
	SessionTimeoutHours      float64                                              `json:"session_timeout_hours"`
	SplitTunnel              bool                                                 `json:"split_tunnel"`
	Status                   string                                               `json:"status"`
	Tags                     map[string]string                                    `json:"tags"`
	TagsAll                  map[string]string                                    `json:"tags_all"`
	TransportProtocol        string                                               `json:"transport_protocol"`
	VpcId                    string                                               `json:"vpc_id"`
	VpnPort                  float64                                              `json:"vpn_port"`
	AuthenticationOptions    []ec2clientvpnendpoint.AuthenticationOptionsState    `json:"authentication_options"`
	ClientConnectOptions     []ec2clientvpnendpoint.ClientConnectOptionsState     `json:"client_connect_options"`
	ClientLoginBannerOptions []ec2clientvpnendpoint.ClientLoginBannerOptionsState `json:"client_login_banner_options"`
	ConnectionLogOptions     []ec2clientvpnendpoint.ConnectionLogOptionsState     `json:"connection_log_options"`
}
