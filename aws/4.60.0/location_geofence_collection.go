// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	locationgeofencecollection "github.com/golingon/terraproviders/aws/4.60.0/locationgeofencecollection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLocationGeofenceCollection(name string, args LocationGeofenceCollectionArgs) *LocationGeofenceCollection {
	return &LocationGeofenceCollection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LocationGeofenceCollection)(nil)

type LocationGeofenceCollection struct {
	Name  string
	Args  LocationGeofenceCollectionArgs
	state *locationGeofenceCollectionState
}

func (lgc *LocationGeofenceCollection) Type() string {
	return "aws_location_geofence_collection"
}

func (lgc *LocationGeofenceCollection) LocalName() string {
	return lgc.Name
}

func (lgc *LocationGeofenceCollection) Configuration() interface{} {
	return lgc.Args
}

func (lgc *LocationGeofenceCollection) Attributes() locationGeofenceCollectionAttributes {
	return locationGeofenceCollectionAttributes{ref: terra.ReferenceResource(lgc)}
}

func (lgc *LocationGeofenceCollection) ImportState(av io.Reader) error {
	lgc.state = &locationGeofenceCollectionState{}
	if err := json.NewDecoder(av).Decode(lgc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lgc.Type(), lgc.LocalName(), err)
	}
	return nil
}

func (lgc *LocationGeofenceCollection) State() (*locationGeofenceCollectionState, bool) {
	return lgc.state, lgc.state != nil
}

func (lgc *LocationGeofenceCollection) StateMust() *locationGeofenceCollectionState {
	if lgc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lgc.Type(), lgc.LocalName()))
	}
	return lgc.state
}

func (lgc *LocationGeofenceCollection) DependOn() terra.Reference {
	return terra.ReferenceResource(lgc)
}

type LocationGeofenceCollectionArgs struct {
	// CollectionName: string, required
	CollectionName terra.StringValue `hcl:"collection_name,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *locationgeofencecollection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LocationGeofenceCollection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type locationGeofenceCollectionAttributes struct {
	ref terra.Reference
}

func (lgc locationGeofenceCollectionAttributes) CollectionArn() terra.StringValue {
	return terra.ReferenceString(lgc.ref.Append("collection_arn"))
}

func (lgc locationGeofenceCollectionAttributes) CollectionName() terra.StringValue {
	return terra.ReferenceString(lgc.ref.Append("collection_name"))
}

func (lgc locationGeofenceCollectionAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceString(lgc.ref.Append("create_time"))
}

func (lgc locationGeofenceCollectionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(lgc.ref.Append("description"))
}

func (lgc locationGeofenceCollectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lgc.ref.Append("id"))
}

func (lgc locationGeofenceCollectionAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(lgc.ref.Append("kms_key_id"))
}

func (lgc locationGeofenceCollectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lgc.ref.Append("tags"))
}

func (lgc locationGeofenceCollectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lgc.ref.Append("tags_all"))
}

func (lgc locationGeofenceCollectionAttributes) UpdateTime() terra.StringValue {
	return terra.ReferenceString(lgc.ref.Append("update_time"))
}

func (lgc locationGeofenceCollectionAttributes) Timeouts() locationgeofencecollection.TimeoutsAttributes {
	return terra.ReferenceSingle[locationgeofencecollection.TimeoutsAttributes](lgc.ref.Append("timeouts"))
}

type locationGeofenceCollectionState struct {
	CollectionArn  string                                    `json:"collection_arn"`
	CollectionName string                                    `json:"collection_name"`
	CreateTime     string                                    `json:"create_time"`
	Description    string                                    `json:"description"`
	Id             string                                    `json:"id"`
	KmsKeyId       string                                    `json:"kms_key_id"`
	Tags           map[string]string                         `json:"tags"`
	TagsAll        map[string]string                         `json:"tags_all"`
	UpdateTime     string                                    `json:"update_time"`
	Timeouts       *locationgeofencecollection.TimeoutsState `json:"timeouts"`
}
