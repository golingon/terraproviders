// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSnsSmsPreferences(name string, args SnsSmsPreferencesArgs) *SnsSmsPreferences {
	return &SnsSmsPreferences{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SnsSmsPreferences)(nil)

type SnsSmsPreferences struct {
	Name  string
	Args  SnsSmsPreferencesArgs
	state *snsSmsPreferencesState
}

func (ssp *SnsSmsPreferences) Type() string {
	return "aws_sns_sms_preferences"
}

func (ssp *SnsSmsPreferences) LocalName() string {
	return ssp.Name
}

func (ssp *SnsSmsPreferences) Configuration() interface{} {
	return ssp.Args
}

func (ssp *SnsSmsPreferences) Attributes() snsSmsPreferencesAttributes {
	return snsSmsPreferencesAttributes{ref: terra.ReferenceResource(ssp)}
}

func (ssp *SnsSmsPreferences) ImportState(av io.Reader) error {
	ssp.state = &snsSmsPreferencesState{}
	if err := json.NewDecoder(av).Decode(ssp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssp.Type(), ssp.LocalName(), err)
	}
	return nil
}

func (ssp *SnsSmsPreferences) State() (*snsSmsPreferencesState, bool) {
	return ssp.state, ssp.state != nil
}

func (ssp *SnsSmsPreferences) StateMust() *snsSmsPreferencesState {
	if ssp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssp.Type(), ssp.LocalName()))
	}
	return ssp.state
}

func (ssp *SnsSmsPreferences) DependOn() terra.Reference {
	return terra.ReferenceResource(ssp)
}

type SnsSmsPreferencesArgs struct {
	// DefaultSenderId: string, optional
	DefaultSenderId terra.StringValue `hcl:"default_sender_id,attr"`
	// DefaultSmsType: string, optional
	DefaultSmsType terra.StringValue `hcl:"default_sms_type,attr"`
	// DeliveryStatusIamRoleArn: string, optional
	DeliveryStatusIamRoleArn terra.StringValue `hcl:"delivery_status_iam_role_arn,attr"`
	// DeliveryStatusSuccessSamplingRate: string, optional
	DeliveryStatusSuccessSamplingRate terra.StringValue `hcl:"delivery_status_success_sampling_rate,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MonthlySpendLimit: number, optional
	MonthlySpendLimit terra.NumberValue `hcl:"monthly_spend_limit,attr"`
	// UsageReportS3Bucket: string, optional
	UsageReportS3Bucket terra.StringValue `hcl:"usage_report_s3_bucket,attr"`
	// DependsOn contains resources that SnsSmsPreferences depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type snsSmsPreferencesAttributes struct {
	ref terra.Reference
}

func (ssp snsSmsPreferencesAttributes) DefaultSenderId() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("default_sender_id"))
}

func (ssp snsSmsPreferencesAttributes) DefaultSmsType() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("default_sms_type"))
}

func (ssp snsSmsPreferencesAttributes) DeliveryStatusIamRoleArn() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("delivery_status_iam_role_arn"))
}

func (ssp snsSmsPreferencesAttributes) DeliveryStatusSuccessSamplingRate() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("delivery_status_success_sampling_rate"))
}

func (ssp snsSmsPreferencesAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("id"))
}

func (ssp snsSmsPreferencesAttributes) MonthlySpendLimit() terra.NumberValue {
	return terra.ReferenceNumber(ssp.ref.Append("monthly_spend_limit"))
}

func (ssp snsSmsPreferencesAttributes) UsageReportS3Bucket() terra.StringValue {
	return terra.ReferenceString(ssp.ref.Append("usage_report_s3_bucket"))
}

type snsSmsPreferencesState struct {
	DefaultSenderId                   string  `json:"default_sender_id"`
	DefaultSmsType                    string  `json:"default_sms_type"`
	DeliveryStatusIamRoleArn          string  `json:"delivery_status_iam_role_arn"`
	DeliveryStatusSuccessSamplingRate string  `json:"delivery_status_success_sampling_rate"`
	Id                                string  `json:"id"`
	MonthlySpendLimit                 float64 `json:"monthly_spend_limit"`
	UsageReportS3Bucket               string  `json:"usage_report_s3_bucket"`
}
