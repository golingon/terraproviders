// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKmsCiphertext(name string, args KmsCiphertextArgs) *KmsCiphertext {
	return &KmsCiphertext{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KmsCiphertext)(nil)

type KmsCiphertext struct {
	Name  string
	Args  KmsCiphertextArgs
	state *kmsCiphertextState
}

func (kc *KmsCiphertext) Type() string {
	return "aws_kms_ciphertext"
}

func (kc *KmsCiphertext) LocalName() string {
	return kc.Name
}

func (kc *KmsCiphertext) Configuration() interface{} {
	return kc.Args
}

func (kc *KmsCiphertext) Attributes() kmsCiphertextAttributes {
	return kmsCiphertextAttributes{ref: terra.ReferenceResource(kc)}
}

func (kc *KmsCiphertext) ImportState(av io.Reader) error {
	kc.state = &kmsCiphertextState{}
	if err := json.NewDecoder(av).Decode(kc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kc.Type(), kc.LocalName(), err)
	}
	return nil
}

func (kc *KmsCiphertext) State() (*kmsCiphertextState, bool) {
	return kc.state, kc.state != nil
}

func (kc *KmsCiphertext) StateMust() *kmsCiphertextState {
	if kc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kc.Type(), kc.LocalName()))
	}
	return kc.state
}

func (kc *KmsCiphertext) DependOn() terra.Reference {
	return terra.ReferenceResource(kc)
}

type KmsCiphertextArgs struct {
	// Context: map of string, optional
	Context terra.MapValue[terra.StringValue] `hcl:"context,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyId: string, required
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
	// Plaintext: string, required
	Plaintext terra.StringValue `hcl:"plaintext,attr" validate:"required"`
	// DependsOn contains resources that KmsCiphertext depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kmsCiphertextAttributes struct {
	ref terra.Reference
}

func (kc kmsCiphertextAttributes) CiphertextBlob() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("ciphertext_blob"))
}

func (kc kmsCiphertextAttributes) Context() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](kc.ref.Append("context"))
}

func (kc kmsCiphertextAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("id"))
}

func (kc kmsCiphertextAttributes) KeyId() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("key_id"))
}

func (kc kmsCiphertextAttributes) Plaintext() terra.StringValue {
	return terra.ReferenceString(kc.ref.Append("plaintext"))
}

type kmsCiphertextState struct {
	CiphertextBlob string            `json:"ciphertext_blob"`
	Context        map[string]string `json:"context"`
	Id             string            `json:"id"`
	KeyId          string            `json:"key_id"`
	Plaintext      string            `json:"plaintext"`
}
