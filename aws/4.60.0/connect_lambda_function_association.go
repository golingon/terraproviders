// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConnectLambdaFunctionAssociation(name string, args ConnectLambdaFunctionAssociationArgs) *ConnectLambdaFunctionAssociation {
	return &ConnectLambdaFunctionAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConnectLambdaFunctionAssociation)(nil)

type ConnectLambdaFunctionAssociation struct {
	Name  string
	Args  ConnectLambdaFunctionAssociationArgs
	state *connectLambdaFunctionAssociationState
}

func (clfa *ConnectLambdaFunctionAssociation) Type() string {
	return "aws_connect_lambda_function_association"
}

func (clfa *ConnectLambdaFunctionAssociation) LocalName() string {
	return clfa.Name
}

func (clfa *ConnectLambdaFunctionAssociation) Configuration() interface{} {
	return clfa.Args
}

func (clfa *ConnectLambdaFunctionAssociation) Attributes() connectLambdaFunctionAssociationAttributes {
	return connectLambdaFunctionAssociationAttributes{ref: terra.ReferenceResource(clfa)}
}

func (clfa *ConnectLambdaFunctionAssociation) ImportState(av io.Reader) error {
	clfa.state = &connectLambdaFunctionAssociationState{}
	if err := json.NewDecoder(av).Decode(clfa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", clfa.Type(), clfa.LocalName(), err)
	}
	return nil
}

func (clfa *ConnectLambdaFunctionAssociation) State() (*connectLambdaFunctionAssociationState, bool) {
	return clfa.state, clfa.state != nil
}

func (clfa *ConnectLambdaFunctionAssociation) StateMust() *connectLambdaFunctionAssociationState {
	if clfa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", clfa.Type(), clfa.LocalName()))
	}
	return clfa.state
}

func (clfa *ConnectLambdaFunctionAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(clfa)
}

type ConnectLambdaFunctionAssociationArgs struct {
	// FunctionArn: string, required
	FunctionArn terra.StringValue `hcl:"function_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// DependsOn contains resources that ConnectLambdaFunctionAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type connectLambdaFunctionAssociationAttributes struct {
	ref terra.Reference
}

func (clfa connectLambdaFunctionAssociationAttributes) FunctionArn() terra.StringValue {
	return terra.ReferenceString(clfa.ref.Append("function_arn"))
}

func (clfa connectLambdaFunctionAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(clfa.ref.Append("id"))
}

func (clfa connectLambdaFunctionAssociationAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceString(clfa.ref.Append("instance_id"))
}

type connectLambdaFunctionAssociationState struct {
	FunctionArn string `json:"function_arn"`
	Id          string `json:"id"`
	InstanceId  string `json:"instance_id"`
}
