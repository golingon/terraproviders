// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewConnectContactFlowModule(name string, args ConnectContactFlowModuleArgs) *ConnectContactFlowModule {
	return &ConnectContactFlowModule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ConnectContactFlowModule)(nil)

type ConnectContactFlowModule struct {
	Name  string
	Args  ConnectContactFlowModuleArgs
	state *connectContactFlowModuleState
}

func (ccfm *ConnectContactFlowModule) Type() string {
	return "aws_connect_contact_flow_module"
}

func (ccfm *ConnectContactFlowModule) LocalName() string {
	return ccfm.Name
}

func (ccfm *ConnectContactFlowModule) Configuration() interface{} {
	return ccfm.Args
}

func (ccfm *ConnectContactFlowModule) Attributes() connectContactFlowModuleAttributes {
	return connectContactFlowModuleAttributes{ref: terra.ReferenceResource(ccfm)}
}

func (ccfm *ConnectContactFlowModule) ImportState(av io.Reader) error {
	ccfm.state = &connectContactFlowModuleState{}
	if err := json.NewDecoder(av).Decode(ccfm.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ccfm.Type(), ccfm.LocalName(), err)
	}
	return nil
}

func (ccfm *ConnectContactFlowModule) State() (*connectContactFlowModuleState, bool) {
	return ccfm.state, ccfm.state != nil
}

func (ccfm *ConnectContactFlowModule) StateMust() *connectContactFlowModuleState {
	if ccfm.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ccfm.Type(), ccfm.LocalName()))
	}
	return ccfm.state
}

func (ccfm *ConnectContactFlowModule) DependOn() terra.Reference {
	return terra.ReferenceResource(ccfm)
}

type ConnectContactFlowModuleArgs struct {
	// Content: string, optional
	Content terra.StringValue `hcl:"content,attr"`
	// ContentHash: string, optional
	ContentHash terra.StringValue `hcl:"content_hash,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Filename: string, optional
	Filename terra.StringValue `hcl:"filename,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId: string, required
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that ConnectContactFlowModule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type connectContactFlowModuleAttributes struct {
	ref terra.Reference
}

func (ccfm connectContactFlowModuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ccfm.ref.Append("arn"))
}

func (ccfm connectContactFlowModuleAttributes) ContactFlowModuleId() terra.StringValue {
	return terra.ReferenceString(ccfm.ref.Append("contact_flow_module_id"))
}

func (ccfm connectContactFlowModuleAttributes) Content() terra.StringValue {
	return terra.ReferenceString(ccfm.ref.Append("content"))
}

func (ccfm connectContactFlowModuleAttributes) ContentHash() terra.StringValue {
	return terra.ReferenceString(ccfm.ref.Append("content_hash"))
}

func (ccfm connectContactFlowModuleAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ccfm.ref.Append("description"))
}

func (ccfm connectContactFlowModuleAttributes) Filename() terra.StringValue {
	return terra.ReferenceString(ccfm.ref.Append("filename"))
}

func (ccfm connectContactFlowModuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ccfm.ref.Append("id"))
}

func (ccfm connectContactFlowModuleAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceString(ccfm.ref.Append("instance_id"))
}

func (ccfm connectContactFlowModuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ccfm.ref.Append("name"))
}

func (ccfm connectContactFlowModuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ccfm.ref.Append("tags"))
}

func (ccfm connectContactFlowModuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ccfm.ref.Append("tags_all"))
}

type connectContactFlowModuleState struct {
	Arn                 string            `json:"arn"`
	ContactFlowModuleId string            `json:"contact_flow_module_id"`
	Content             string            `json:"content"`
	ContentHash         string            `json:"content_hash"`
	Description         string            `json:"description"`
	Filename            string            `json:"filename"`
	Id                  string            `json:"id"`
	InstanceId          string            `json:"instance_id"`
	Name                string            `json:"name"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
}
