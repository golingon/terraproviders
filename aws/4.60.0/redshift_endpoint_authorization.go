// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftEndpointAuthorization(name string, args RedshiftEndpointAuthorizationArgs) *RedshiftEndpointAuthorization {
	return &RedshiftEndpointAuthorization{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftEndpointAuthorization)(nil)

type RedshiftEndpointAuthorization struct {
	Name  string
	Args  RedshiftEndpointAuthorizationArgs
	state *redshiftEndpointAuthorizationState
}

func (rea *RedshiftEndpointAuthorization) Type() string {
	return "aws_redshift_endpoint_authorization"
}

func (rea *RedshiftEndpointAuthorization) LocalName() string {
	return rea.Name
}

func (rea *RedshiftEndpointAuthorization) Configuration() interface{} {
	return rea.Args
}

func (rea *RedshiftEndpointAuthorization) Attributes() redshiftEndpointAuthorizationAttributes {
	return redshiftEndpointAuthorizationAttributes{ref: terra.ReferenceResource(rea)}
}

func (rea *RedshiftEndpointAuthorization) ImportState(av io.Reader) error {
	rea.state = &redshiftEndpointAuthorizationState{}
	if err := json.NewDecoder(av).Decode(rea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rea.Type(), rea.LocalName(), err)
	}
	return nil
}

func (rea *RedshiftEndpointAuthorization) State() (*redshiftEndpointAuthorizationState, bool) {
	return rea.state, rea.state != nil
}

func (rea *RedshiftEndpointAuthorization) StateMust() *redshiftEndpointAuthorizationState {
	if rea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rea.Type(), rea.LocalName()))
	}
	return rea.state
}

func (rea *RedshiftEndpointAuthorization) DependOn() terra.Reference {
	return terra.ReferenceResource(rea)
}

type RedshiftEndpointAuthorizationArgs struct {
	// Account: string, required
	Account terra.StringValue `hcl:"account,attr" validate:"required"`
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// ForceDelete: bool, optional
	ForceDelete terra.BoolValue `hcl:"force_delete,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// VpcIds: set of string, optional
	VpcIds terra.SetValue[terra.StringValue] `hcl:"vpc_ids,attr"`
	// DependsOn contains resources that RedshiftEndpointAuthorization depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftEndpointAuthorizationAttributes struct {
	ref terra.Reference
}

func (rea redshiftEndpointAuthorizationAttributes) Account() terra.StringValue {
	return terra.ReferenceString(rea.ref.Append("account"))
}

func (rea redshiftEndpointAuthorizationAttributes) AllowedAllVpcs() terra.BoolValue {
	return terra.ReferenceBool(rea.ref.Append("allowed_all_vpcs"))
}

func (rea redshiftEndpointAuthorizationAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(rea.ref.Append("cluster_identifier"))
}

func (rea redshiftEndpointAuthorizationAttributes) EndpointCount() terra.NumberValue {
	return terra.ReferenceNumber(rea.ref.Append("endpoint_count"))
}

func (rea redshiftEndpointAuthorizationAttributes) ForceDelete() terra.BoolValue {
	return terra.ReferenceBool(rea.ref.Append("force_delete"))
}

func (rea redshiftEndpointAuthorizationAttributes) Grantee() terra.StringValue {
	return terra.ReferenceString(rea.ref.Append("grantee"))
}

func (rea redshiftEndpointAuthorizationAttributes) Grantor() terra.StringValue {
	return terra.ReferenceString(rea.ref.Append("grantor"))
}

func (rea redshiftEndpointAuthorizationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rea.ref.Append("id"))
}

func (rea redshiftEndpointAuthorizationAttributes) VpcIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rea.ref.Append("vpc_ids"))
}

type redshiftEndpointAuthorizationState struct {
	Account           string   `json:"account"`
	AllowedAllVpcs    bool     `json:"allowed_all_vpcs"`
	ClusterIdentifier string   `json:"cluster_identifier"`
	EndpointCount     float64  `json:"endpoint_count"`
	ForceDelete       bool     `json:"force_delete"`
	Grantee           string   `json:"grantee"`
	Grantor           string   `json:"grantor"`
	Id                string   `json:"id"`
	VpcIds            []string `json:"vpc_ids"`
}
