// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	glueconnection "github.com/golingon/terraproviders/aws/4.60.0/glueconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGlueConnection(name string, args GlueConnectionArgs) *GlueConnection {
	return &GlueConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GlueConnection)(nil)

type GlueConnection struct {
	Name  string
	Args  GlueConnectionArgs
	state *glueConnectionState
}

func (gc *GlueConnection) Type() string {
	return "aws_glue_connection"
}

func (gc *GlueConnection) LocalName() string {
	return gc.Name
}

func (gc *GlueConnection) Configuration() interface{} {
	return gc.Args
}

func (gc *GlueConnection) Attributes() glueConnectionAttributes {
	return glueConnectionAttributes{ref: terra.ReferenceResource(gc)}
}

func (gc *GlueConnection) ImportState(av io.Reader) error {
	gc.state = &glueConnectionState{}
	if err := json.NewDecoder(av).Decode(gc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gc.Type(), gc.LocalName(), err)
	}
	return nil
}

func (gc *GlueConnection) State() (*glueConnectionState, bool) {
	return gc.state, gc.state != nil
}

func (gc *GlueConnection) StateMust() *glueConnectionState {
	if gc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gc.Type(), gc.LocalName()))
	}
	return gc.state
}

func (gc *GlueConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(gc)
}

type GlueConnectionArgs struct {
	// CatalogId: string, optional
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// ConnectionProperties: map of string, optional
	ConnectionProperties terra.MapValue[terra.StringValue] `hcl:"connection_properties,attr"`
	// ConnectionType: string, optional
	ConnectionType terra.StringValue `hcl:"connection_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MatchCriteria: list of string, optional
	MatchCriteria terra.ListValue[terra.StringValue] `hcl:"match_criteria,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// PhysicalConnectionRequirements: optional
	PhysicalConnectionRequirements *glueconnection.PhysicalConnectionRequirements `hcl:"physical_connection_requirements,block"`
	// DependsOn contains resources that GlueConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type glueConnectionAttributes struct {
	ref terra.Reference
}

func (gc glueConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(gc.ref.Append("arn"))
}

func (gc glueConnectionAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceString(gc.ref.Append("catalog_id"))
}

func (gc glueConnectionAttributes) ConnectionProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gc.ref.Append("connection_properties"))
}

func (gc glueConnectionAttributes) ConnectionType() terra.StringValue {
	return terra.ReferenceString(gc.ref.Append("connection_type"))
}

func (gc glueConnectionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(gc.ref.Append("description"))
}

func (gc glueConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gc.ref.Append("id"))
}

func (gc glueConnectionAttributes) MatchCriteria() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](gc.ref.Append("match_criteria"))
}

func (gc glueConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(gc.ref.Append("name"))
}

func (gc glueConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gc.ref.Append("tags"))
}

func (gc glueConnectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](gc.ref.Append("tags_all"))
}

func (gc glueConnectionAttributes) PhysicalConnectionRequirements() terra.ListValue[glueconnection.PhysicalConnectionRequirementsAttributes] {
	return terra.ReferenceList[glueconnection.PhysicalConnectionRequirementsAttributes](gc.ref.Append("physical_connection_requirements"))
}

type glueConnectionState struct {
	Arn                            string                                               `json:"arn"`
	CatalogId                      string                                               `json:"catalog_id"`
	ConnectionProperties           map[string]string                                    `json:"connection_properties"`
	ConnectionType                 string                                               `json:"connection_type"`
	Description                    string                                               `json:"description"`
	Id                             string                                               `json:"id"`
	MatchCriteria                  []string                                             `json:"match_criteria"`
	Name                           string                                               `json:"name"`
	Tags                           map[string]string                                    `json:"tags"`
	TagsAll                        map[string]string                                    `json:"tags_all"`
	PhysicalConnectionRequirements []glueconnection.PhysicalConnectionRequirementsState `json:"physical_connection_requirements"`
}
