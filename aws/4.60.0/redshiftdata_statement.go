// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	redshiftdatastatement "github.com/golingon/terraproviders/aws/4.60.0/redshiftdatastatement"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftdataStatement(name string, args RedshiftdataStatementArgs) *RedshiftdataStatement {
	return &RedshiftdataStatement{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftdataStatement)(nil)

type RedshiftdataStatement struct {
	Name  string
	Args  RedshiftdataStatementArgs
	state *redshiftdataStatementState
}

func (rs *RedshiftdataStatement) Type() string {
	return "aws_redshiftdata_statement"
}

func (rs *RedshiftdataStatement) LocalName() string {
	return rs.Name
}

func (rs *RedshiftdataStatement) Configuration() interface{} {
	return rs.Args
}

func (rs *RedshiftdataStatement) Attributes() redshiftdataStatementAttributes {
	return redshiftdataStatementAttributes{ref: terra.ReferenceResource(rs)}
}

func (rs *RedshiftdataStatement) ImportState(av io.Reader) error {
	rs.state = &redshiftdataStatementState{}
	if err := json.NewDecoder(av).Decode(rs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rs.Type(), rs.LocalName(), err)
	}
	return nil
}

func (rs *RedshiftdataStatement) State() (*redshiftdataStatementState, bool) {
	return rs.state, rs.state != nil
}

func (rs *RedshiftdataStatement) StateMust() *redshiftdataStatementState {
	if rs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rs.Type(), rs.LocalName()))
	}
	return rs.state
}

func (rs *RedshiftdataStatement) DependOn() terra.Reference {
	return terra.ReferenceResource(rs)
}

type RedshiftdataStatementArgs struct {
	// ClusterIdentifier: string, optional
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr"`
	// Database: string, required
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// DbUser: string, optional
	DbUser terra.StringValue `hcl:"db_user,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SecretArn: string, optional
	SecretArn terra.StringValue `hcl:"secret_arn,attr"`
	// Sql: string, required
	Sql terra.StringValue `hcl:"sql,attr" validate:"required"`
	// StatementName: string, optional
	StatementName terra.StringValue `hcl:"statement_name,attr"`
	// WithEvent: bool, optional
	WithEvent terra.BoolValue `hcl:"with_event,attr"`
	// WorkgroupName: string, optional
	WorkgroupName terra.StringValue `hcl:"workgroup_name,attr"`
	// Parameters: min=0
	Parameters []redshiftdatastatement.Parameters `hcl:"parameters,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *redshiftdatastatement.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RedshiftdataStatement depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftdataStatementAttributes struct {
	ref terra.Reference
}

func (rs redshiftdataStatementAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("cluster_identifier"))
}

func (rs redshiftdataStatementAttributes) Database() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("database"))
}

func (rs redshiftdataStatementAttributes) DbUser() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("db_user"))
}

func (rs redshiftdataStatementAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("id"))
}

func (rs redshiftdataStatementAttributes) SecretArn() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("secret_arn"))
}

func (rs redshiftdataStatementAttributes) Sql() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("sql"))
}

func (rs redshiftdataStatementAttributes) StatementName() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("statement_name"))
}

func (rs redshiftdataStatementAttributes) WithEvent() terra.BoolValue {
	return terra.ReferenceBool(rs.ref.Append("with_event"))
}

func (rs redshiftdataStatementAttributes) WorkgroupName() terra.StringValue {
	return terra.ReferenceString(rs.ref.Append("workgroup_name"))
}

func (rs redshiftdataStatementAttributes) Parameters() terra.ListValue[redshiftdatastatement.ParametersAttributes] {
	return terra.ReferenceList[redshiftdatastatement.ParametersAttributes](rs.ref.Append("parameters"))
}

func (rs redshiftdataStatementAttributes) Timeouts() redshiftdatastatement.TimeoutsAttributes {
	return terra.ReferenceSingle[redshiftdatastatement.TimeoutsAttributes](rs.ref.Append("timeouts"))
}

type redshiftdataStatementState struct {
	ClusterIdentifier string                                  `json:"cluster_identifier"`
	Database          string                                  `json:"database"`
	DbUser            string                                  `json:"db_user"`
	Id                string                                  `json:"id"`
	SecretArn         string                                  `json:"secret_arn"`
	Sql               string                                  `json:"sql"`
	StatementName     string                                  `json:"statement_name"`
	WithEvent         bool                                    `json:"with_event"`
	WorkgroupName     string                                  `json:"workgroup_name"`
	Parameters        []redshiftdatastatement.ParametersState `json:"parameters"`
	Timeouts          *redshiftdatastatement.TimeoutsState    `json:"timeouts"`
}
