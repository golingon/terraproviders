// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3bucketwebsiteconfiguration "github.com/golingon/terraproviders/aws/4.60.0/s3bucketwebsiteconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketWebsiteConfiguration(name string, args S3BucketWebsiteConfigurationArgs) *S3BucketWebsiteConfiguration {
	return &S3BucketWebsiteConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketWebsiteConfiguration)(nil)

type S3BucketWebsiteConfiguration struct {
	Name  string
	Args  S3BucketWebsiteConfigurationArgs
	state *s3BucketWebsiteConfigurationState
}

func (sbwc *S3BucketWebsiteConfiguration) Type() string {
	return "aws_s3_bucket_website_configuration"
}

func (sbwc *S3BucketWebsiteConfiguration) LocalName() string {
	return sbwc.Name
}

func (sbwc *S3BucketWebsiteConfiguration) Configuration() interface{} {
	return sbwc.Args
}

func (sbwc *S3BucketWebsiteConfiguration) Attributes() s3BucketWebsiteConfigurationAttributes {
	return s3BucketWebsiteConfigurationAttributes{ref: terra.ReferenceResource(sbwc)}
}

func (sbwc *S3BucketWebsiteConfiguration) ImportState(av io.Reader) error {
	sbwc.state = &s3BucketWebsiteConfigurationState{}
	if err := json.NewDecoder(av).Decode(sbwc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbwc.Type(), sbwc.LocalName(), err)
	}
	return nil
}

func (sbwc *S3BucketWebsiteConfiguration) State() (*s3BucketWebsiteConfigurationState, bool) {
	return sbwc.state, sbwc.state != nil
}

func (sbwc *S3BucketWebsiteConfiguration) StateMust() *s3BucketWebsiteConfigurationState {
	if sbwc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbwc.Type(), sbwc.LocalName()))
	}
	return sbwc.state
}

func (sbwc *S3BucketWebsiteConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(sbwc)
}

type S3BucketWebsiteConfigurationArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoutingRules: string, optional
	RoutingRules terra.StringValue `hcl:"routing_rules,attr"`
	// ErrorDocument: optional
	ErrorDocument *s3bucketwebsiteconfiguration.ErrorDocument `hcl:"error_document,block"`
	// IndexDocument: optional
	IndexDocument *s3bucketwebsiteconfiguration.IndexDocument `hcl:"index_document,block"`
	// RedirectAllRequestsTo: optional
	RedirectAllRequestsTo *s3bucketwebsiteconfiguration.RedirectAllRequestsTo `hcl:"redirect_all_requests_to,block"`
	// RoutingRule: min=0
	RoutingRule []s3bucketwebsiteconfiguration.RoutingRule `hcl:"routing_rule,block" validate:"min=0"`
	// DependsOn contains resources that S3BucketWebsiteConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketWebsiteConfigurationAttributes struct {
	ref terra.Reference
}

func (sbwc s3BucketWebsiteConfigurationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbwc.ref.Append("bucket"))
}

func (sbwc s3BucketWebsiteConfigurationAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceString(sbwc.ref.Append("expected_bucket_owner"))
}

func (sbwc s3BucketWebsiteConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbwc.ref.Append("id"))
}

func (sbwc s3BucketWebsiteConfigurationAttributes) RoutingRules() terra.StringValue {
	return terra.ReferenceString(sbwc.ref.Append("routing_rules"))
}

func (sbwc s3BucketWebsiteConfigurationAttributes) WebsiteDomain() terra.StringValue {
	return terra.ReferenceString(sbwc.ref.Append("website_domain"))
}

func (sbwc s3BucketWebsiteConfigurationAttributes) WebsiteEndpoint() terra.StringValue {
	return terra.ReferenceString(sbwc.ref.Append("website_endpoint"))
}

func (sbwc s3BucketWebsiteConfigurationAttributes) ErrorDocument() terra.ListValue[s3bucketwebsiteconfiguration.ErrorDocumentAttributes] {
	return terra.ReferenceList[s3bucketwebsiteconfiguration.ErrorDocumentAttributes](sbwc.ref.Append("error_document"))
}

func (sbwc s3BucketWebsiteConfigurationAttributes) IndexDocument() terra.ListValue[s3bucketwebsiteconfiguration.IndexDocumentAttributes] {
	return terra.ReferenceList[s3bucketwebsiteconfiguration.IndexDocumentAttributes](sbwc.ref.Append("index_document"))
}

func (sbwc s3BucketWebsiteConfigurationAttributes) RedirectAllRequestsTo() terra.ListValue[s3bucketwebsiteconfiguration.RedirectAllRequestsToAttributes] {
	return terra.ReferenceList[s3bucketwebsiteconfiguration.RedirectAllRequestsToAttributes](sbwc.ref.Append("redirect_all_requests_to"))
}

func (sbwc s3BucketWebsiteConfigurationAttributes) RoutingRule() terra.ListValue[s3bucketwebsiteconfiguration.RoutingRuleAttributes] {
	return terra.ReferenceList[s3bucketwebsiteconfiguration.RoutingRuleAttributes](sbwc.ref.Append("routing_rule"))
}

type s3BucketWebsiteConfigurationState struct {
	Bucket                string                                                    `json:"bucket"`
	ExpectedBucketOwner   string                                                    `json:"expected_bucket_owner"`
	Id                    string                                                    `json:"id"`
	RoutingRules          string                                                    `json:"routing_rules"`
	WebsiteDomain         string                                                    `json:"website_domain"`
	WebsiteEndpoint       string                                                    `json:"website_endpoint"`
	ErrorDocument         []s3bucketwebsiteconfiguration.ErrorDocumentState         `json:"error_document"`
	IndexDocument         []s3bucketwebsiteconfiguration.IndexDocumentState         `json:"index_document"`
	RedirectAllRequestsTo []s3bucketwebsiteconfiguration.RedirectAllRequestsToState `json:"redirect_all_requests_to"`
	RoutingRule           []s3bucketwebsiteconfiguration.RoutingRuleState           `json:"routing_rule"`
}
