// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lightsailcertificate "github.com/golingon/terraproviders/aws/4.60.0/lightsailcertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLightsailCertificate(name string, args LightsailCertificateArgs) *LightsailCertificate {
	return &LightsailCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LightsailCertificate)(nil)

type LightsailCertificate struct {
	Name  string
	Args  LightsailCertificateArgs
	state *lightsailCertificateState
}

func (lc *LightsailCertificate) Type() string {
	return "aws_lightsail_certificate"
}

func (lc *LightsailCertificate) LocalName() string {
	return lc.Name
}

func (lc *LightsailCertificate) Configuration() interface{} {
	return lc.Args
}

func (lc *LightsailCertificate) Attributes() lightsailCertificateAttributes {
	return lightsailCertificateAttributes{ref: terra.ReferenceResource(lc)}
}

func (lc *LightsailCertificate) ImportState(av io.Reader) error {
	lc.state = &lightsailCertificateState{}
	if err := json.NewDecoder(av).Decode(lc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lc.Type(), lc.LocalName(), err)
	}
	return nil
}

func (lc *LightsailCertificate) State() (*lightsailCertificateState, bool) {
	return lc.state, lc.state != nil
}

func (lc *LightsailCertificate) StateMust() *lightsailCertificateState {
	if lc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lc.Type(), lc.LocalName()))
	}
	return lc.state
}

func (lc *LightsailCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(lc)
}

type LightsailCertificateArgs struct {
	// DomainName: string, optional
	DomainName terra.StringValue `hcl:"domain_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubjectAlternativeNames: set of string, optional
	SubjectAlternativeNames terra.SetValue[terra.StringValue] `hcl:"subject_alternative_names,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DomainValidationOptions: min=0
	DomainValidationOptions []lightsailcertificate.DomainValidationOptions `hcl:"domain_validation_options,block" validate:"min=0"`
	// DependsOn contains resources that LightsailCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lightsailCertificateAttributes struct {
	ref terra.Reference
}

func (lc lightsailCertificateAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("arn"))
}

func (lc lightsailCertificateAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("created_at"))
}

func (lc lightsailCertificateAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("domain_name"))
}

func (lc lightsailCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("id"))
}

func (lc lightsailCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("name"))
}

func (lc lightsailCertificateAttributes) SubjectAlternativeNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](lc.ref.Append("subject_alternative_names"))
}

func (lc lightsailCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lc.ref.Append("tags"))
}

func (lc lightsailCertificateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](lc.ref.Append("tags_all"))
}

func (lc lightsailCertificateAttributes) DomainValidationOptions() terra.SetValue[lightsailcertificate.DomainValidationOptionsAttributes] {
	return terra.ReferenceSet[lightsailcertificate.DomainValidationOptionsAttributes](lc.ref.Append("domain_validation_options"))
}

type lightsailCertificateState struct {
	Arn                     string                                              `json:"arn"`
	CreatedAt               string                                              `json:"created_at"`
	DomainName              string                                              `json:"domain_name"`
	Id                      string                                              `json:"id"`
	Name                    string                                              `json:"name"`
	SubjectAlternativeNames []string                                            `json:"subject_alternative_names"`
	Tags                    map[string]string                                   `json:"tags"`
	TagsAll                 map[string]string                                   `json:"tags_all"`
	DomainValidationOptions []lightsailcertificate.DomainValidationOptionsState `json:"domain_validation_options"`
}
