// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamSigningCertificate(name string, args IamSigningCertificateArgs) *IamSigningCertificate {
	return &IamSigningCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamSigningCertificate)(nil)

type IamSigningCertificate struct {
	Name  string
	Args  IamSigningCertificateArgs
	state *iamSigningCertificateState
}

func (isc *IamSigningCertificate) Type() string {
	return "aws_iam_signing_certificate"
}

func (isc *IamSigningCertificate) LocalName() string {
	return isc.Name
}

func (isc *IamSigningCertificate) Configuration() interface{} {
	return isc.Args
}

func (isc *IamSigningCertificate) Attributes() iamSigningCertificateAttributes {
	return iamSigningCertificateAttributes{ref: terra.ReferenceResource(isc)}
}

func (isc *IamSigningCertificate) ImportState(av io.Reader) error {
	isc.state = &iamSigningCertificateState{}
	if err := json.NewDecoder(av).Decode(isc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", isc.Type(), isc.LocalName(), err)
	}
	return nil
}

func (isc *IamSigningCertificate) State() (*iamSigningCertificateState, bool) {
	return isc.state, isc.state != nil
}

func (isc *IamSigningCertificate) StateMust() *iamSigningCertificateState {
	if isc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", isc.Type(), isc.LocalName()))
	}
	return isc.state
}

func (isc *IamSigningCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(isc)
}

type IamSigningCertificateArgs struct {
	// CertificateBody: string, required
	CertificateBody terra.StringValue `hcl:"certificate_body,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// UserName: string, required
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
	// DependsOn contains resources that IamSigningCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamSigningCertificateAttributes struct {
	ref terra.Reference
}

func (isc iamSigningCertificateAttributes) CertificateBody() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("certificate_body"))
}

func (isc iamSigningCertificateAttributes) CertificateId() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("certificate_id"))
}

func (isc iamSigningCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("id"))
}

func (isc iamSigningCertificateAttributes) Status() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("status"))
}

func (isc iamSigningCertificateAttributes) UserName() terra.StringValue {
	return terra.ReferenceString(isc.ref.Append("user_name"))
}

type iamSigningCertificateState struct {
	CertificateBody string `json:"certificate_body"`
	CertificateId   string `json:"certificate_id"`
	Id              string `json:"id"`
	Status          string `json:"status"`
	UserName        string `json:"user_name"`
}
