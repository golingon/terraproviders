// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServiceDiscoveryPublicDnsNamespace(name string, args ServiceDiscoveryPublicDnsNamespaceArgs) *ServiceDiscoveryPublicDnsNamespace {
	return &ServiceDiscoveryPublicDnsNamespace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServiceDiscoveryPublicDnsNamespace)(nil)

type ServiceDiscoveryPublicDnsNamespace struct {
	Name  string
	Args  ServiceDiscoveryPublicDnsNamespaceArgs
	state *serviceDiscoveryPublicDnsNamespaceState
}

func (sdpdn *ServiceDiscoveryPublicDnsNamespace) Type() string {
	return "aws_service_discovery_public_dns_namespace"
}

func (sdpdn *ServiceDiscoveryPublicDnsNamespace) LocalName() string {
	return sdpdn.Name
}

func (sdpdn *ServiceDiscoveryPublicDnsNamespace) Configuration() interface{} {
	return sdpdn.Args
}

func (sdpdn *ServiceDiscoveryPublicDnsNamespace) Attributes() serviceDiscoveryPublicDnsNamespaceAttributes {
	return serviceDiscoveryPublicDnsNamespaceAttributes{ref: terra.ReferenceResource(sdpdn)}
}

func (sdpdn *ServiceDiscoveryPublicDnsNamespace) ImportState(av io.Reader) error {
	sdpdn.state = &serviceDiscoveryPublicDnsNamespaceState{}
	if err := json.NewDecoder(av).Decode(sdpdn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdpdn.Type(), sdpdn.LocalName(), err)
	}
	return nil
}

func (sdpdn *ServiceDiscoveryPublicDnsNamespace) State() (*serviceDiscoveryPublicDnsNamespaceState, bool) {
	return sdpdn.state, sdpdn.state != nil
}

func (sdpdn *ServiceDiscoveryPublicDnsNamespace) StateMust() *serviceDiscoveryPublicDnsNamespaceState {
	if sdpdn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdpdn.Type(), sdpdn.LocalName()))
	}
	return sdpdn.state
}

func (sdpdn *ServiceDiscoveryPublicDnsNamespace) DependOn() terra.Reference {
	return terra.ReferenceResource(sdpdn)
}

type ServiceDiscoveryPublicDnsNamespaceArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that ServiceDiscoveryPublicDnsNamespace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type serviceDiscoveryPublicDnsNamespaceAttributes struct {
	ref terra.Reference
}

func (sdpdn serviceDiscoveryPublicDnsNamespaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sdpdn.ref.Append("arn"))
}

func (sdpdn serviceDiscoveryPublicDnsNamespaceAttributes) Description() terra.StringValue {
	return terra.ReferenceString(sdpdn.ref.Append("description"))
}

func (sdpdn serviceDiscoveryPublicDnsNamespaceAttributes) HostedZone() terra.StringValue {
	return terra.ReferenceString(sdpdn.ref.Append("hosted_zone"))
}

func (sdpdn serviceDiscoveryPublicDnsNamespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sdpdn.ref.Append("id"))
}

func (sdpdn serviceDiscoveryPublicDnsNamespaceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sdpdn.ref.Append("name"))
}

func (sdpdn serviceDiscoveryPublicDnsNamespaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sdpdn.ref.Append("tags"))
}

func (sdpdn serviceDiscoveryPublicDnsNamespaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sdpdn.ref.Append("tags_all"))
}

type serviceDiscoveryPublicDnsNamespaceState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	HostedZone  string            `json:"hosted_zone"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
