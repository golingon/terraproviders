// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	fsxopenzfssnapshot "github.com/golingon/terraproviders/aws/4.60.0/fsxopenzfssnapshot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFsxOpenzfsSnapshot(name string, args FsxOpenzfsSnapshotArgs) *FsxOpenzfsSnapshot {
	return &FsxOpenzfsSnapshot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FsxOpenzfsSnapshot)(nil)

type FsxOpenzfsSnapshot struct {
	Name  string
	Args  FsxOpenzfsSnapshotArgs
	state *fsxOpenzfsSnapshotState
}

func (fos *FsxOpenzfsSnapshot) Type() string {
	return "aws_fsx_openzfs_snapshot"
}

func (fos *FsxOpenzfsSnapshot) LocalName() string {
	return fos.Name
}

func (fos *FsxOpenzfsSnapshot) Configuration() interface{} {
	return fos.Args
}

func (fos *FsxOpenzfsSnapshot) Attributes() fsxOpenzfsSnapshotAttributes {
	return fsxOpenzfsSnapshotAttributes{ref: terra.ReferenceResource(fos)}
}

func (fos *FsxOpenzfsSnapshot) ImportState(av io.Reader) error {
	fos.state = &fsxOpenzfsSnapshotState{}
	if err := json.NewDecoder(av).Decode(fos.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fos.Type(), fos.LocalName(), err)
	}
	return nil
}

func (fos *FsxOpenzfsSnapshot) State() (*fsxOpenzfsSnapshotState, bool) {
	return fos.state, fos.state != nil
}

func (fos *FsxOpenzfsSnapshot) StateMust() *fsxOpenzfsSnapshotState {
	if fos.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fos.Type(), fos.LocalName()))
	}
	return fos.state
}

func (fos *FsxOpenzfsSnapshot) DependOn() terra.Reference {
	return terra.ReferenceResource(fos)
}

type FsxOpenzfsSnapshotArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VolumeId: string, required
	VolumeId terra.StringValue `hcl:"volume_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *fsxopenzfssnapshot.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FsxOpenzfsSnapshot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type fsxOpenzfsSnapshotAttributes struct {
	ref terra.Reference
}

func (fos fsxOpenzfsSnapshotAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(fos.ref.Append("arn"))
}

func (fos fsxOpenzfsSnapshotAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceString(fos.ref.Append("creation_time"))
}

func (fos fsxOpenzfsSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fos.ref.Append("id"))
}

func (fos fsxOpenzfsSnapshotAttributes) Name() terra.StringValue {
	return terra.ReferenceString(fos.ref.Append("name"))
}

func (fos fsxOpenzfsSnapshotAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fos.ref.Append("tags"))
}

func (fos fsxOpenzfsSnapshotAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fos.ref.Append("tags_all"))
}

func (fos fsxOpenzfsSnapshotAttributes) VolumeId() terra.StringValue {
	return terra.ReferenceString(fos.ref.Append("volume_id"))
}

func (fos fsxOpenzfsSnapshotAttributes) Timeouts() fsxopenzfssnapshot.TimeoutsAttributes {
	return terra.ReferenceSingle[fsxopenzfssnapshot.TimeoutsAttributes](fos.ref.Append("timeouts"))
}

type fsxOpenzfsSnapshotState struct {
	Arn          string                            `json:"arn"`
	CreationTime string                            `json:"creation_time"`
	Id           string                            `json:"id"`
	Name         string                            `json:"name"`
	Tags         map[string]string                 `json:"tags"`
	TagsAll      map[string]string                 `json:"tags_all"`
	VolumeId     string                            `json:"volume_id"`
	Timeouts     *fsxopenzfssnapshot.TimeoutsState `json:"timeouts"`
}
