// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServiceDiscoveryHttpNamespace(name string, args ServiceDiscoveryHttpNamespaceArgs) *ServiceDiscoveryHttpNamespace {
	return &ServiceDiscoveryHttpNamespace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServiceDiscoveryHttpNamespace)(nil)

type ServiceDiscoveryHttpNamespace struct {
	Name  string
	Args  ServiceDiscoveryHttpNamespaceArgs
	state *serviceDiscoveryHttpNamespaceState
}

func (sdhn *ServiceDiscoveryHttpNamespace) Type() string {
	return "aws_service_discovery_http_namespace"
}

func (sdhn *ServiceDiscoveryHttpNamespace) LocalName() string {
	return sdhn.Name
}

func (sdhn *ServiceDiscoveryHttpNamespace) Configuration() interface{} {
	return sdhn.Args
}

func (sdhn *ServiceDiscoveryHttpNamespace) Attributes() serviceDiscoveryHttpNamespaceAttributes {
	return serviceDiscoveryHttpNamespaceAttributes{ref: terra.ReferenceResource(sdhn)}
}

func (sdhn *ServiceDiscoveryHttpNamespace) ImportState(av io.Reader) error {
	sdhn.state = &serviceDiscoveryHttpNamespaceState{}
	if err := json.NewDecoder(av).Decode(sdhn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sdhn.Type(), sdhn.LocalName(), err)
	}
	return nil
}

func (sdhn *ServiceDiscoveryHttpNamespace) State() (*serviceDiscoveryHttpNamespaceState, bool) {
	return sdhn.state, sdhn.state != nil
}

func (sdhn *ServiceDiscoveryHttpNamespace) StateMust() *serviceDiscoveryHttpNamespaceState {
	if sdhn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sdhn.Type(), sdhn.LocalName()))
	}
	return sdhn.state
}

func (sdhn *ServiceDiscoveryHttpNamespace) DependOn() terra.Reference {
	return terra.ReferenceResource(sdhn)
}

type ServiceDiscoveryHttpNamespaceArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that ServiceDiscoveryHttpNamespace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type serviceDiscoveryHttpNamespaceAttributes struct {
	ref terra.Reference
}

func (sdhn serviceDiscoveryHttpNamespaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sdhn.ref.Append("arn"))
}

func (sdhn serviceDiscoveryHttpNamespaceAttributes) Description() terra.StringValue {
	return terra.ReferenceString(sdhn.ref.Append("description"))
}

func (sdhn serviceDiscoveryHttpNamespaceAttributes) HttpName() terra.StringValue {
	return terra.ReferenceString(sdhn.ref.Append("http_name"))
}

func (sdhn serviceDiscoveryHttpNamespaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sdhn.ref.Append("id"))
}

func (sdhn serviceDiscoveryHttpNamespaceAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sdhn.ref.Append("name"))
}

func (sdhn serviceDiscoveryHttpNamespaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sdhn.ref.Append("tags"))
}

func (sdhn serviceDiscoveryHttpNamespaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sdhn.ref.Append("tags_all"))
}

type serviceDiscoveryHttpNamespaceState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	HttpName    string            `json:"http_name"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
