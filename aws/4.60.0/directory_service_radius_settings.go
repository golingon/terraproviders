// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	directoryserviceradiussettings "github.com/golingon/terraproviders/aws/4.60.0/directoryserviceradiussettings"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDirectoryServiceRadiusSettings(name string, args DirectoryServiceRadiusSettingsArgs) *DirectoryServiceRadiusSettings {
	return &DirectoryServiceRadiusSettings{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DirectoryServiceRadiusSettings)(nil)

type DirectoryServiceRadiusSettings struct {
	Name  string
	Args  DirectoryServiceRadiusSettingsArgs
	state *directoryServiceRadiusSettingsState
}

func (dsrs *DirectoryServiceRadiusSettings) Type() string {
	return "aws_directory_service_radius_settings"
}

func (dsrs *DirectoryServiceRadiusSettings) LocalName() string {
	return dsrs.Name
}

func (dsrs *DirectoryServiceRadiusSettings) Configuration() interface{} {
	return dsrs.Args
}

func (dsrs *DirectoryServiceRadiusSettings) Attributes() directoryServiceRadiusSettingsAttributes {
	return directoryServiceRadiusSettingsAttributes{ref: terra.ReferenceResource(dsrs)}
}

func (dsrs *DirectoryServiceRadiusSettings) ImportState(av io.Reader) error {
	dsrs.state = &directoryServiceRadiusSettingsState{}
	if err := json.NewDecoder(av).Decode(dsrs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dsrs.Type(), dsrs.LocalName(), err)
	}
	return nil
}

func (dsrs *DirectoryServiceRadiusSettings) State() (*directoryServiceRadiusSettingsState, bool) {
	return dsrs.state, dsrs.state != nil
}

func (dsrs *DirectoryServiceRadiusSettings) StateMust() *directoryServiceRadiusSettingsState {
	if dsrs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dsrs.Type(), dsrs.LocalName()))
	}
	return dsrs.state
}

func (dsrs *DirectoryServiceRadiusSettings) DependOn() terra.Reference {
	return terra.ReferenceResource(dsrs)
}

type DirectoryServiceRadiusSettingsArgs struct {
	// AuthenticationProtocol: string, required
	AuthenticationProtocol terra.StringValue `hcl:"authentication_protocol,attr" validate:"required"`
	// DirectoryId: string, required
	DirectoryId terra.StringValue `hcl:"directory_id,attr" validate:"required"`
	// DisplayLabel: string, required
	DisplayLabel terra.StringValue `hcl:"display_label,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RadiusPort: number, required
	RadiusPort terra.NumberValue `hcl:"radius_port,attr" validate:"required"`
	// RadiusRetries: number, required
	RadiusRetries terra.NumberValue `hcl:"radius_retries,attr" validate:"required"`
	// RadiusServers: set of string, required
	RadiusServers terra.SetValue[terra.StringValue] `hcl:"radius_servers,attr" validate:"required"`
	// RadiusTimeout: number, required
	RadiusTimeout terra.NumberValue `hcl:"radius_timeout,attr" validate:"required"`
	// SharedSecret: string, required
	SharedSecret terra.StringValue `hcl:"shared_secret,attr" validate:"required"`
	// UseSameUsername: bool, optional
	UseSameUsername terra.BoolValue `hcl:"use_same_username,attr"`
	// Timeouts: optional
	Timeouts *directoryserviceradiussettings.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DirectoryServiceRadiusSettings depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type directoryServiceRadiusSettingsAttributes struct {
	ref terra.Reference
}

func (dsrs directoryServiceRadiusSettingsAttributes) AuthenticationProtocol() terra.StringValue {
	return terra.ReferenceString(dsrs.ref.Append("authentication_protocol"))
}

func (dsrs directoryServiceRadiusSettingsAttributes) DirectoryId() terra.StringValue {
	return terra.ReferenceString(dsrs.ref.Append("directory_id"))
}

func (dsrs directoryServiceRadiusSettingsAttributes) DisplayLabel() terra.StringValue {
	return terra.ReferenceString(dsrs.ref.Append("display_label"))
}

func (dsrs directoryServiceRadiusSettingsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dsrs.ref.Append("id"))
}

func (dsrs directoryServiceRadiusSettingsAttributes) RadiusPort() terra.NumberValue {
	return terra.ReferenceNumber(dsrs.ref.Append("radius_port"))
}

func (dsrs directoryServiceRadiusSettingsAttributes) RadiusRetries() terra.NumberValue {
	return terra.ReferenceNumber(dsrs.ref.Append("radius_retries"))
}

func (dsrs directoryServiceRadiusSettingsAttributes) RadiusServers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dsrs.ref.Append("radius_servers"))
}

func (dsrs directoryServiceRadiusSettingsAttributes) RadiusTimeout() terra.NumberValue {
	return terra.ReferenceNumber(dsrs.ref.Append("radius_timeout"))
}

func (dsrs directoryServiceRadiusSettingsAttributes) SharedSecret() terra.StringValue {
	return terra.ReferenceString(dsrs.ref.Append("shared_secret"))
}

func (dsrs directoryServiceRadiusSettingsAttributes) UseSameUsername() terra.BoolValue {
	return terra.ReferenceBool(dsrs.ref.Append("use_same_username"))
}

func (dsrs directoryServiceRadiusSettingsAttributes) Timeouts() directoryserviceradiussettings.TimeoutsAttributes {
	return terra.ReferenceSingle[directoryserviceradiussettings.TimeoutsAttributes](dsrs.ref.Append("timeouts"))
}

type directoryServiceRadiusSettingsState struct {
	AuthenticationProtocol string                                        `json:"authentication_protocol"`
	DirectoryId            string                                        `json:"directory_id"`
	DisplayLabel           string                                        `json:"display_label"`
	Id                     string                                        `json:"id"`
	RadiusPort             float64                                       `json:"radius_port"`
	RadiusRetries          float64                                       `json:"radius_retries"`
	RadiusServers          []string                                      `json:"radius_servers"`
	RadiusTimeout          float64                                       `json:"radius_timeout"`
	SharedSecret           string                                        `json:"shared_secret"`
	UseSameUsername        bool                                          `json:"use_same_username"`
	Timeouts               *directoryserviceradiussettings.TimeoutsState `json:"timeouts"`
}
