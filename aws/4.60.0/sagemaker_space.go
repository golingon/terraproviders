// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	sagemakerspace "github.com/golingon/terraproviders/aws/4.60.0/sagemakerspace"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSagemakerSpace(name string, args SagemakerSpaceArgs) *SagemakerSpace {
	return &SagemakerSpace{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SagemakerSpace)(nil)

type SagemakerSpace struct {
	Name  string
	Args  SagemakerSpaceArgs
	state *sagemakerSpaceState
}

func (ss *SagemakerSpace) Type() string {
	return "aws_sagemaker_space"
}

func (ss *SagemakerSpace) LocalName() string {
	return ss.Name
}

func (ss *SagemakerSpace) Configuration() interface{} {
	return ss.Args
}

func (ss *SagemakerSpace) Attributes() sagemakerSpaceAttributes {
	return sagemakerSpaceAttributes{ref: terra.ReferenceResource(ss)}
}

func (ss *SagemakerSpace) ImportState(av io.Reader) error {
	ss.state = &sagemakerSpaceState{}
	if err := json.NewDecoder(av).Decode(ss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ss.Type(), ss.LocalName(), err)
	}
	return nil
}

func (ss *SagemakerSpace) State() (*sagemakerSpaceState, bool) {
	return ss.state, ss.state != nil
}

func (ss *SagemakerSpace) StateMust() *sagemakerSpaceState {
	if ss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ss.Type(), ss.LocalName()))
	}
	return ss.state
}

func (ss *SagemakerSpace) DependOn() terra.Reference {
	return terra.ReferenceResource(ss)
}

type SagemakerSpaceArgs struct {
	// DomainId: string, required
	DomainId terra.StringValue `hcl:"domain_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SpaceName: string, required
	SpaceName terra.StringValue `hcl:"space_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// SpaceSettings: optional
	SpaceSettings *sagemakerspace.SpaceSettings `hcl:"space_settings,block"`
	// DependsOn contains resources that SagemakerSpace depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sagemakerSpaceAttributes struct {
	ref terra.Reference
}

func (ss sagemakerSpaceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("arn"))
}

func (ss sagemakerSpaceAttributes) DomainId() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("domain_id"))
}

func (ss sagemakerSpaceAttributes) HomeEfsFileSystemUid() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("home_efs_file_system_uid"))
}

func (ss sagemakerSpaceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("id"))
}

func (ss sagemakerSpaceAttributes) SpaceName() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("space_name"))
}

func (ss sagemakerSpaceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ss.ref.Append("tags"))
}

func (ss sagemakerSpaceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ss.ref.Append("tags_all"))
}

func (ss sagemakerSpaceAttributes) SpaceSettings() terra.ListValue[sagemakerspace.SpaceSettingsAttributes] {
	return terra.ReferenceList[sagemakerspace.SpaceSettingsAttributes](ss.ref.Append("space_settings"))
}

type sagemakerSpaceState struct {
	Arn                  string                              `json:"arn"`
	DomainId             string                              `json:"domain_id"`
	HomeEfsFileSystemUid string                              `json:"home_efs_file_system_uid"`
	Id                   string                              `json:"id"`
	SpaceName            string                              `json:"space_name"`
	Tags                 map[string]string                   `json:"tags"`
	TagsAll              map[string]string                   `json:"tags_all"`
	SpaceSettings        []sagemakerspace.SpaceSettingsState `json:"space_settings"`
}
