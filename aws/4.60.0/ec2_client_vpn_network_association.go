// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ec2clientvpnnetworkassociation "github.com/golingon/terraproviders/aws/4.60.0/ec2clientvpnnetworkassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2ClientVpnNetworkAssociation(name string, args Ec2ClientVpnNetworkAssociationArgs) *Ec2ClientVpnNetworkAssociation {
	return &Ec2ClientVpnNetworkAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2ClientVpnNetworkAssociation)(nil)

type Ec2ClientVpnNetworkAssociation struct {
	Name  string
	Args  Ec2ClientVpnNetworkAssociationArgs
	state *ec2ClientVpnNetworkAssociationState
}

func (ecvna *Ec2ClientVpnNetworkAssociation) Type() string {
	return "aws_ec2_client_vpn_network_association"
}

func (ecvna *Ec2ClientVpnNetworkAssociation) LocalName() string {
	return ecvna.Name
}

func (ecvna *Ec2ClientVpnNetworkAssociation) Configuration() interface{} {
	return ecvna.Args
}

func (ecvna *Ec2ClientVpnNetworkAssociation) Attributes() ec2ClientVpnNetworkAssociationAttributes {
	return ec2ClientVpnNetworkAssociationAttributes{ref: terra.ReferenceResource(ecvna)}
}

func (ecvna *Ec2ClientVpnNetworkAssociation) ImportState(av io.Reader) error {
	ecvna.state = &ec2ClientVpnNetworkAssociationState{}
	if err := json.NewDecoder(av).Decode(ecvna.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ecvna.Type(), ecvna.LocalName(), err)
	}
	return nil
}

func (ecvna *Ec2ClientVpnNetworkAssociation) State() (*ec2ClientVpnNetworkAssociationState, bool) {
	return ecvna.state, ecvna.state != nil
}

func (ecvna *Ec2ClientVpnNetworkAssociation) StateMust() *ec2ClientVpnNetworkAssociationState {
	if ecvna.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ecvna.Type(), ecvna.LocalName()))
	}
	return ecvna.state
}

func (ecvna *Ec2ClientVpnNetworkAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(ecvna)
}

type Ec2ClientVpnNetworkAssociationArgs struct {
	// ClientVpnEndpointId: string, required
	ClientVpnEndpointId terra.StringValue `hcl:"client_vpn_endpoint_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// SubnetId: string, required
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *ec2clientvpnnetworkassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Ec2ClientVpnNetworkAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2ClientVpnNetworkAssociationAttributes struct {
	ref terra.Reference
}

func (ecvna ec2ClientVpnNetworkAssociationAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceString(ecvna.ref.Append("association_id"))
}

func (ecvna ec2ClientVpnNetworkAssociationAttributes) ClientVpnEndpointId() terra.StringValue {
	return terra.ReferenceString(ecvna.ref.Append("client_vpn_endpoint_id"))
}

func (ecvna ec2ClientVpnNetworkAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ecvna.ref.Append("id"))
}

func (ecvna ec2ClientVpnNetworkAssociationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ecvna.ref.Append("security_groups"))
}

func (ecvna ec2ClientVpnNetworkAssociationAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ecvna.ref.Append("status"))
}

func (ecvna ec2ClientVpnNetworkAssociationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(ecvna.ref.Append("subnet_id"))
}

func (ecvna ec2ClientVpnNetworkAssociationAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(ecvna.ref.Append("vpc_id"))
}

func (ecvna ec2ClientVpnNetworkAssociationAttributes) Timeouts() ec2clientvpnnetworkassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[ec2clientvpnnetworkassociation.TimeoutsAttributes](ecvna.ref.Append("timeouts"))
}

type ec2ClientVpnNetworkAssociationState struct {
	AssociationId       string                                        `json:"association_id"`
	ClientVpnEndpointId string                                        `json:"client_vpn_endpoint_id"`
	Id                  string                                        `json:"id"`
	SecurityGroups      []string                                      `json:"security_groups"`
	Status              string                                        `json:"status"`
	SubnetId            string                                        `json:"subnet_id"`
	VpcId               string                                        `json:"vpc_id"`
	Timeouts            *ec2clientvpnnetworkassociation.TimeoutsState `json:"timeouts"`
}
