// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package redshiftscheduledaction

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type TargetAction struct {
	// PauseCluster: optional
	PauseCluster *PauseCluster `hcl:"pause_cluster,block"`
	// ResizeCluster: optional
	ResizeCluster *ResizeCluster `hcl:"resize_cluster,block"`
	// ResumeCluster: optional
	ResumeCluster *ResumeCluster `hcl:"resume_cluster,block"`
}

type PauseCluster struct {
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
}

type ResizeCluster struct {
	// Classic: bool, optional
	Classic terra.BoolValue `hcl:"classic,attr"`
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// ClusterType: string, optional
	ClusterType terra.StringValue `hcl:"cluster_type,attr"`
	// NodeType: string, optional
	NodeType terra.StringValue `hcl:"node_type,attr"`
	// NumberOfNodes: number, optional
	NumberOfNodes terra.NumberValue `hcl:"number_of_nodes,attr"`
}

type ResumeCluster struct {
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
}

type TargetActionAttributes struct {
	ref terra.Reference
}

func (ta TargetActionAttributes) InternalRef() terra.Reference {
	return ta.ref
}

func (ta TargetActionAttributes) InternalWithRef(ref terra.Reference) TargetActionAttributes {
	return TargetActionAttributes{ref: ref}
}

func (ta TargetActionAttributes) InternalTokens() hclwrite.Tokens {
	return ta.ref.InternalTokens()
}

func (ta TargetActionAttributes) PauseCluster() terra.ListValue[PauseClusterAttributes] {
	return terra.ReferenceAsList[PauseClusterAttributes](ta.ref.Append("pause_cluster"))
}

func (ta TargetActionAttributes) ResizeCluster() terra.ListValue[ResizeClusterAttributes] {
	return terra.ReferenceAsList[ResizeClusterAttributes](ta.ref.Append("resize_cluster"))
}

func (ta TargetActionAttributes) ResumeCluster() terra.ListValue[ResumeClusterAttributes] {
	return terra.ReferenceAsList[ResumeClusterAttributes](ta.ref.Append("resume_cluster"))
}

type PauseClusterAttributes struct {
	ref terra.Reference
}

func (pc PauseClusterAttributes) InternalRef() terra.Reference {
	return pc.ref
}

func (pc PauseClusterAttributes) InternalWithRef(ref terra.Reference) PauseClusterAttributes {
	return PauseClusterAttributes{ref: ref}
}

func (pc PauseClusterAttributes) InternalTokens() hclwrite.Tokens {
	return pc.ref.InternalTokens()
}

func (pc PauseClusterAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("cluster_identifier"))
}

type ResizeClusterAttributes struct {
	ref terra.Reference
}

func (rc ResizeClusterAttributes) InternalRef() terra.Reference {
	return rc.ref
}

func (rc ResizeClusterAttributes) InternalWithRef(ref terra.Reference) ResizeClusterAttributes {
	return ResizeClusterAttributes{ref: ref}
}

func (rc ResizeClusterAttributes) InternalTokens() hclwrite.Tokens {
	return rc.ref.InternalTokens()
}

func (rc ResizeClusterAttributes) Classic() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("classic"))
}

func (rc ResizeClusterAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("cluster_identifier"))
}

func (rc ResizeClusterAttributes) ClusterType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("cluster_type"))
}

func (rc ResizeClusterAttributes) NodeType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("node_type"))
}

func (rc ResizeClusterAttributes) NumberOfNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("number_of_nodes"))
}

type ResumeClusterAttributes struct {
	ref terra.Reference
}

func (rc ResumeClusterAttributes) InternalRef() terra.Reference {
	return rc.ref
}

func (rc ResumeClusterAttributes) InternalWithRef(ref terra.Reference) ResumeClusterAttributes {
	return ResumeClusterAttributes{ref: ref}
}

func (rc ResumeClusterAttributes) InternalTokens() hclwrite.Tokens {
	return rc.ref.InternalTokens()
}

func (rc ResumeClusterAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("cluster_identifier"))
}

type TargetActionState struct {
	PauseCluster  []PauseClusterState  `json:"pause_cluster"`
	ResizeCluster []ResizeClusterState `json:"resize_cluster"`
	ResumeCluster []ResumeClusterState `json:"resume_cluster"`
}

type PauseClusterState struct {
	ClusterIdentifier string `json:"cluster_identifier"`
}

type ResizeClusterState struct {
	Classic           bool    `json:"classic"`
	ClusterIdentifier string  `json:"cluster_identifier"`
	ClusterType       string  `json:"cluster_type"`
	NodeType          string  `json:"node_type"`
	NumberOfNodes     float64 `json:"number_of_nodes"`
}

type ResumeClusterState struct {
	ClusterIdentifier string `json:"cluster_identifier"`
}
