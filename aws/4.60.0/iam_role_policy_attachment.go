// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewIamRolePolicyAttachment creates a new instance of [IamRolePolicyAttachment].
func NewIamRolePolicyAttachment(name string, args IamRolePolicyAttachmentArgs) *IamRolePolicyAttachment {
	return &IamRolePolicyAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamRolePolicyAttachment)(nil)

// IamRolePolicyAttachment represents the Terraform resource aws_iam_role_policy_attachment.
type IamRolePolicyAttachment struct {
	Name      string
	Args      IamRolePolicyAttachmentArgs
	state     *iamRolePolicyAttachmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [IamRolePolicyAttachment].
func (irpa *IamRolePolicyAttachment) Type() string {
	return "aws_iam_role_policy_attachment"
}

// LocalName returns the local name for [IamRolePolicyAttachment].
func (irpa *IamRolePolicyAttachment) LocalName() string {
	return irpa.Name
}

// Configuration returns the configuration (args) for [IamRolePolicyAttachment].
func (irpa *IamRolePolicyAttachment) Configuration() interface{} {
	return irpa.Args
}

// DependOn is used for other resources to depend on [IamRolePolicyAttachment].
func (irpa *IamRolePolicyAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(irpa)
}

// Dependencies returns the list of resources [IamRolePolicyAttachment] depends_on.
func (irpa *IamRolePolicyAttachment) Dependencies() terra.Dependencies {
	return irpa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [IamRolePolicyAttachment].
func (irpa *IamRolePolicyAttachment) LifecycleManagement() *terra.Lifecycle {
	return irpa.Lifecycle
}

// Attributes returns the attributes for [IamRolePolicyAttachment].
func (irpa *IamRolePolicyAttachment) Attributes() iamRolePolicyAttachmentAttributes {
	return iamRolePolicyAttachmentAttributes{ref: terra.ReferenceResource(irpa)}
}

// ImportState imports the given attribute values into [IamRolePolicyAttachment]'s state.
func (irpa *IamRolePolicyAttachment) ImportState(av io.Reader) error {
	irpa.state = &iamRolePolicyAttachmentState{}
	if err := json.NewDecoder(av).Decode(irpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", irpa.Type(), irpa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [IamRolePolicyAttachment] has state.
func (irpa *IamRolePolicyAttachment) State() (*iamRolePolicyAttachmentState, bool) {
	return irpa.state, irpa.state != nil
}

// StateMust returns the state for [IamRolePolicyAttachment]. Panics if the state is nil.
func (irpa *IamRolePolicyAttachment) StateMust() *iamRolePolicyAttachmentState {
	if irpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", irpa.Type(), irpa.LocalName()))
	}
	return irpa.state
}

// IamRolePolicyAttachmentArgs contains the configurations for aws_iam_role_policy_attachment.
type IamRolePolicyAttachmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyArn: string, required
	PolicyArn terra.StringValue `hcl:"policy_arn,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
}
type iamRolePolicyAttachmentAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_iam_role_policy_attachment.
func (irpa iamRolePolicyAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(irpa.ref.Append("id"))
}

// PolicyArn returns a reference to field policy_arn of aws_iam_role_policy_attachment.
func (irpa iamRolePolicyAttachmentAttributes) PolicyArn() terra.StringValue {
	return terra.ReferenceAsString(irpa.ref.Append("policy_arn"))
}

// Role returns a reference to field role of aws_iam_role_policy_attachment.
func (irpa iamRolePolicyAttachmentAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(irpa.ref.Append("role"))
}

type iamRolePolicyAttachmentState struct {
	Id        string `json:"id"`
	PolicyArn string `json:"policy_arn"`
	Role      string `json:"role"`
}
