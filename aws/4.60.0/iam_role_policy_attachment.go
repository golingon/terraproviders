// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamRolePolicyAttachment(name string, args IamRolePolicyAttachmentArgs) *IamRolePolicyAttachment {
	return &IamRolePolicyAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamRolePolicyAttachment)(nil)

type IamRolePolicyAttachment struct {
	Name  string
	Args  IamRolePolicyAttachmentArgs
	state *iamRolePolicyAttachmentState
}

func (irpa *IamRolePolicyAttachment) Type() string {
	return "aws_iam_role_policy_attachment"
}

func (irpa *IamRolePolicyAttachment) LocalName() string {
	return irpa.Name
}

func (irpa *IamRolePolicyAttachment) Configuration() interface{} {
	return irpa.Args
}

func (irpa *IamRolePolicyAttachment) Attributes() iamRolePolicyAttachmentAttributes {
	return iamRolePolicyAttachmentAttributes{ref: terra.ReferenceResource(irpa)}
}

func (irpa *IamRolePolicyAttachment) ImportState(av io.Reader) error {
	irpa.state = &iamRolePolicyAttachmentState{}
	if err := json.NewDecoder(av).Decode(irpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", irpa.Type(), irpa.LocalName(), err)
	}
	return nil
}

func (irpa *IamRolePolicyAttachment) State() (*iamRolePolicyAttachmentState, bool) {
	return irpa.state, irpa.state != nil
}

func (irpa *IamRolePolicyAttachment) StateMust() *iamRolePolicyAttachmentState {
	if irpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", irpa.Type(), irpa.LocalName()))
	}
	return irpa.state
}

func (irpa *IamRolePolicyAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(irpa)
}

type IamRolePolicyAttachmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyArn: string, required
	PolicyArn terra.StringValue `hcl:"policy_arn,attr" validate:"required"`
	// Role: string, required
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// DependsOn contains resources that IamRolePolicyAttachment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamRolePolicyAttachmentAttributes struct {
	ref terra.Reference
}

func (irpa iamRolePolicyAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(irpa.ref.Append("id"))
}

func (irpa iamRolePolicyAttachmentAttributes) PolicyArn() terra.StringValue {
	return terra.ReferenceString(irpa.ref.Append("policy_arn"))
}

func (irpa iamRolePolicyAttachmentAttributes) Role() terra.StringValue {
	return terra.ReferenceString(irpa.ref.Append("role"))
}

type iamRolePolicyAttachmentState struct {
	Id        string `json:"id"`
	PolicyArn string `json:"policy_arn"`
	Role      string `json:"role"`
}
