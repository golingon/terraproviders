// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEcsTag(name string, args EcsTagArgs) *EcsTag {
	return &EcsTag{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EcsTag)(nil)

type EcsTag struct {
	Name  string
	Args  EcsTagArgs
	state *ecsTagState
}

func (et *EcsTag) Type() string {
	return "aws_ecs_tag"
}

func (et *EcsTag) LocalName() string {
	return et.Name
}

func (et *EcsTag) Configuration() interface{} {
	return et.Args
}

func (et *EcsTag) Attributes() ecsTagAttributes {
	return ecsTagAttributes{ref: terra.ReferenceResource(et)}
}

func (et *EcsTag) ImportState(av io.Reader) error {
	et.state = &ecsTagState{}
	if err := json.NewDecoder(av).Decode(et.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", et.Type(), et.LocalName(), err)
	}
	return nil
}

func (et *EcsTag) State() (*ecsTagState, bool) {
	return et.state, et.state != nil
}

func (et *EcsTag) StateMust() *ecsTagState {
	if et.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", et.Type(), et.LocalName()))
	}
	return et.state
}

func (et *EcsTag) DependOn() terra.Reference {
	return terra.ReferenceResource(et)
}

type EcsTagArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Key: string, required
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
	// DependsOn contains resources that EcsTag depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ecsTagAttributes struct {
	ref terra.Reference
}

func (et ecsTagAttributes) Id() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("id"))
}

func (et ecsTagAttributes) Key() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("key"))
}

func (et ecsTagAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("resource_arn"))
}

func (et ecsTagAttributes) Value() terra.StringValue {
	return terra.ReferenceString(et.ref.Append("value"))
}

type ecsTagState struct {
	Id          string `json:"id"`
	Key         string `json:"key"`
	ResourceArn string `json:"resource_arn"`
	Value       string `json:"value"`
}
