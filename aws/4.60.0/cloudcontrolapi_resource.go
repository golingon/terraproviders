// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	cloudcontrolapiresource "github.com/golingon/terraproviders/aws/4.60.0/cloudcontrolapiresource"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloudcontrolapiResource(name string, args CloudcontrolapiResourceArgs) *CloudcontrolapiResource {
	return &CloudcontrolapiResource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CloudcontrolapiResource)(nil)

type CloudcontrolapiResource struct {
	Name  string
	Args  CloudcontrolapiResourceArgs
	state *cloudcontrolapiResourceState
}

func (cr *CloudcontrolapiResource) Type() string {
	return "aws_cloudcontrolapi_resource"
}

func (cr *CloudcontrolapiResource) LocalName() string {
	return cr.Name
}

func (cr *CloudcontrolapiResource) Configuration() interface{} {
	return cr.Args
}

func (cr *CloudcontrolapiResource) Attributes() cloudcontrolapiResourceAttributes {
	return cloudcontrolapiResourceAttributes{ref: terra.ReferenceResource(cr)}
}

func (cr *CloudcontrolapiResource) ImportState(av io.Reader) error {
	cr.state = &cloudcontrolapiResourceState{}
	if err := json.NewDecoder(av).Decode(cr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cr.Type(), cr.LocalName(), err)
	}
	return nil
}

func (cr *CloudcontrolapiResource) State() (*cloudcontrolapiResourceState, bool) {
	return cr.state, cr.state != nil
}

func (cr *CloudcontrolapiResource) StateMust() *cloudcontrolapiResourceState {
	if cr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cr.Type(), cr.LocalName()))
	}
	return cr.state
}

func (cr *CloudcontrolapiResource) DependOn() terra.Reference {
	return terra.ReferenceResource(cr)
}

type CloudcontrolapiResourceArgs struct {
	// DesiredState: string, required
	DesiredState terra.StringValue `hcl:"desired_state,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// Schema: string, optional
	Schema terra.StringValue `hcl:"schema,attr"`
	// TypeName: string, required
	TypeName terra.StringValue `hcl:"type_name,attr" validate:"required"`
	// TypeVersionId: string, optional
	TypeVersionId terra.StringValue `hcl:"type_version_id,attr"`
	// Timeouts: optional
	Timeouts *cloudcontrolapiresource.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CloudcontrolapiResource depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloudcontrolapiResourceAttributes struct {
	ref terra.Reference
}

func (cr cloudcontrolapiResourceAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("desired_state"))
}

func (cr cloudcontrolapiResourceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("id"))
}

func (cr cloudcontrolapiResourceAttributes) Properties() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("properties"))
}

func (cr cloudcontrolapiResourceAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("role_arn"))
}

func (cr cloudcontrolapiResourceAttributes) Schema() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("schema"))
}

func (cr cloudcontrolapiResourceAttributes) TypeName() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("type_name"))
}

func (cr cloudcontrolapiResourceAttributes) TypeVersionId() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("type_version_id"))
}

func (cr cloudcontrolapiResourceAttributes) Timeouts() cloudcontrolapiresource.TimeoutsAttributes {
	return terra.ReferenceSingle[cloudcontrolapiresource.TimeoutsAttributes](cr.ref.Append("timeouts"))
}

type cloudcontrolapiResourceState struct {
	DesiredState  string                                 `json:"desired_state"`
	Id            string                                 `json:"id"`
	Properties    string                                 `json:"properties"`
	RoleArn       string                                 `json:"role_arn"`
	Schema        string                                 `json:"schema"`
	TypeName      string                                 `json:"type_name"`
	TypeVersionId string                                 `json:"type_version_id"`
	Timeouts      *cloudcontrolapiresource.TimeoutsState `json:"timeouts"`
}
