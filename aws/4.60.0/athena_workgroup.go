// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	athenaworkgroup "github.com/golingon/terraproviders/aws/4.60.0/athenaworkgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAthenaWorkgroup(name string, args AthenaWorkgroupArgs) *AthenaWorkgroup {
	return &AthenaWorkgroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AthenaWorkgroup)(nil)

type AthenaWorkgroup struct {
	Name  string
	Args  AthenaWorkgroupArgs
	state *athenaWorkgroupState
}

func (aw *AthenaWorkgroup) Type() string {
	return "aws_athena_workgroup"
}

func (aw *AthenaWorkgroup) LocalName() string {
	return aw.Name
}

func (aw *AthenaWorkgroup) Configuration() interface{} {
	return aw.Args
}

func (aw *AthenaWorkgroup) Attributes() athenaWorkgroupAttributes {
	return athenaWorkgroupAttributes{ref: terra.ReferenceResource(aw)}
}

func (aw *AthenaWorkgroup) ImportState(av io.Reader) error {
	aw.state = &athenaWorkgroupState{}
	if err := json.NewDecoder(av).Decode(aw.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aw.Type(), aw.LocalName(), err)
	}
	return nil
}

func (aw *AthenaWorkgroup) State() (*athenaWorkgroupState, bool) {
	return aw.state, aw.state != nil
}

func (aw *AthenaWorkgroup) StateMust() *athenaWorkgroupState {
	if aw.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aw.Type(), aw.LocalName()))
	}
	return aw.state
}

func (aw *AthenaWorkgroup) DependOn() terra.Reference {
	return terra.ReferenceResource(aw)
}

type AthenaWorkgroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// ForceDestroy: bool, optional
	ForceDestroy terra.BoolValue `hcl:"force_destroy,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Configuration: optional
	Configuration *athenaworkgroup.Configuration `hcl:"configuration,block"`
	// DependsOn contains resources that AthenaWorkgroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type athenaWorkgroupAttributes struct {
	ref terra.Reference
}

func (aw athenaWorkgroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(aw.ref.Append("arn"))
}

func (aw athenaWorkgroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(aw.ref.Append("description"))
}

func (aw athenaWorkgroupAttributes) ForceDestroy() terra.BoolValue {
	return terra.ReferenceBool(aw.ref.Append("force_destroy"))
}

func (aw athenaWorkgroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aw.ref.Append("id"))
}

func (aw athenaWorkgroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aw.ref.Append("name"))
}

func (aw athenaWorkgroupAttributes) State() terra.StringValue {
	return terra.ReferenceString(aw.ref.Append("state"))
}

func (aw athenaWorkgroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aw.ref.Append("tags"))
}

func (aw athenaWorkgroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aw.ref.Append("tags_all"))
}

func (aw athenaWorkgroupAttributes) Configuration() terra.ListValue[athenaworkgroup.ConfigurationAttributes] {
	return terra.ReferenceList[athenaworkgroup.ConfigurationAttributes](aw.ref.Append("configuration"))
}

type athenaWorkgroupState struct {
	Arn           string                               `json:"arn"`
	Description   string                               `json:"description"`
	ForceDestroy  bool                                 `json:"force_destroy"`
	Id            string                               `json:"id"`
	Name          string                               `json:"name"`
	State         string                               `json:"state"`
	Tags          map[string]string                    `json:"tags"`
	TagsAll       map[string]string                    `json:"tags_all"`
	Configuration []athenaworkgroup.ConfigurationState `json:"configuration"`
}
