// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFmsAdminAccount(name string, args FmsAdminAccountArgs) *FmsAdminAccount {
	return &FmsAdminAccount{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FmsAdminAccount)(nil)

type FmsAdminAccount struct {
	Name  string
	Args  FmsAdminAccountArgs
	state *fmsAdminAccountState
}

func (faa *FmsAdminAccount) Type() string {
	return "aws_fms_admin_account"
}

func (faa *FmsAdminAccount) LocalName() string {
	return faa.Name
}

func (faa *FmsAdminAccount) Configuration() interface{} {
	return faa.Args
}

func (faa *FmsAdminAccount) Attributes() fmsAdminAccountAttributes {
	return fmsAdminAccountAttributes{ref: terra.ReferenceResource(faa)}
}

func (faa *FmsAdminAccount) ImportState(av io.Reader) error {
	faa.state = &fmsAdminAccountState{}
	if err := json.NewDecoder(av).Decode(faa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", faa.Type(), faa.LocalName(), err)
	}
	return nil
}

func (faa *FmsAdminAccount) State() (*fmsAdminAccountState, bool) {
	return faa.state, faa.state != nil
}

func (faa *FmsAdminAccount) StateMust() *fmsAdminAccountState {
	if faa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", faa.Type(), faa.LocalName()))
	}
	return faa.state
}

func (faa *FmsAdminAccount) DependOn() terra.Reference {
	return terra.ReferenceResource(faa)
}

type FmsAdminAccountArgs struct {
	// AccountId: string, optional
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DependsOn contains resources that FmsAdminAccount depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type fmsAdminAccountAttributes struct {
	ref terra.Reference
}

func (faa fmsAdminAccountAttributes) AccountId() terra.StringValue {
	return terra.ReferenceString(faa.ref.Append("account_id"))
}

func (faa fmsAdminAccountAttributes) Id() terra.StringValue {
	return terra.ReferenceString(faa.ref.Append("id"))
}

type fmsAdminAccountState struct {
	AccountId string `json:"account_id"`
	Id        string `json:"id"`
}
