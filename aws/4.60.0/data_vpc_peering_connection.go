// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	datavpcpeeringconnection "github.com/golingon/terraproviders/aws/4.60.0/datavpcpeeringconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataVpcPeeringConnection(name string, args DataVpcPeeringConnectionArgs) *DataVpcPeeringConnection {
	return &DataVpcPeeringConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataVpcPeeringConnection)(nil)

type DataVpcPeeringConnection struct {
	Name string
	Args DataVpcPeeringConnectionArgs
}

func (vpc *DataVpcPeeringConnection) DataSource() string {
	return "aws_vpc_peering_connection"
}

func (vpc *DataVpcPeeringConnection) LocalName() string {
	return vpc.Name
}

func (vpc *DataVpcPeeringConnection) Configuration() interface{} {
	return vpc.Args
}

func (vpc *DataVpcPeeringConnection) Attributes() dataVpcPeeringConnectionAttributes {
	return dataVpcPeeringConnectionAttributes{ref: terra.ReferenceDataResource(vpc)}
}

type DataVpcPeeringConnectionArgs struct {
	// CidrBlock: string, optional
	CidrBlock terra.StringValue `hcl:"cidr_block,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OwnerId: string, optional
	OwnerId terra.StringValue `hcl:"owner_id,attr"`
	// PeerCidrBlock: string, optional
	PeerCidrBlock terra.StringValue `hcl:"peer_cidr_block,attr"`
	// PeerOwnerId: string, optional
	PeerOwnerId terra.StringValue `hcl:"peer_owner_id,attr"`
	// PeerRegion: string, optional
	PeerRegion terra.StringValue `hcl:"peer_region,attr"`
	// PeerVpcId: string, optional
	PeerVpcId terra.StringValue `hcl:"peer_vpc_id,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VpcId: string, optional
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// CidrBlockSet: min=0
	CidrBlockSet []datavpcpeeringconnection.CidrBlockSet `hcl:"cidr_block_set,block" validate:"min=0"`
	// PeerCidrBlockSet: min=0
	PeerCidrBlockSet []datavpcpeeringconnection.PeerCidrBlockSet `hcl:"peer_cidr_block_set,block" validate:"min=0"`
	// Filter: min=0
	Filter []datavpcpeeringconnection.Filter `hcl:"filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *datavpcpeeringconnection.Timeouts `hcl:"timeouts,block"`
}
type dataVpcPeeringConnectionAttributes struct {
	ref terra.Reference
}

func (vpc dataVpcPeeringConnectionAttributes) Accepter() terra.MapValue[terra.BoolValue] {
	return terra.ReferenceMap[terra.BoolValue](vpc.ref.Append("accepter"))
}

func (vpc dataVpcPeeringConnectionAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("cidr_block"))
}

func (vpc dataVpcPeeringConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("id"))
}

func (vpc dataVpcPeeringConnectionAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("owner_id"))
}

func (vpc dataVpcPeeringConnectionAttributes) PeerCidrBlock() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("peer_cidr_block"))
}

func (vpc dataVpcPeeringConnectionAttributes) PeerOwnerId() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("peer_owner_id"))
}

func (vpc dataVpcPeeringConnectionAttributes) PeerRegion() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("peer_region"))
}

func (vpc dataVpcPeeringConnectionAttributes) PeerVpcId() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("peer_vpc_id"))
}

func (vpc dataVpcPeeringConnectionAttributes) Region() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("region"))
}

func (vpc dataVpcPeeringConnectionAttributes) Requester() terra.MapValue[terra.BoolValue] {
	return terra.ReferenceMap[terra.BoolValue](vpc.ref.Append("requester"))
}

func (vpc dataVpcPeeringConnectionAttributes) Status() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("status"))
}

func (vpc dataVpcPeeringConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](vpc.ref.Append("tags"))
}

func (vpc dataVpcPeeringConnectionAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(vpc.ref.Append("vpc_id"))
}

func (vpc dataVpcPeeringConnectionAttributes) CidrBlockSet() terra.ListValue[datavpcpeeringconnection.CidrBlockSetAttributes] {
	return terra.ReferenceList[datavpcpeeringconnection.CidrBlockSetAttributes](vpc.ref.Append("cidr_block_set"))
}

func (vpc dataVpcPeeringConnectionAttributes) PeerCidrBlockSet() terra.ListValue[datavpcpeeringconnection.PeerCidrBlockSetAttributes] {
	return terra.ReferenceList[datavpcpeeringconnection.PeerCidrBlockSetAttributes](vpc.ref.Append("peer_cidr_block_set"))
}

func (vpc dataVpcPeeringConnectionAttributes) Filter() terra.SetValue[datavpcpeeringconnection.FilterAttributes] {
	return terra.ReferenceSet[datavpcpeeringconnection.FilterAttributes](vpc.ref.Append("filter"))
}

func (vpc dataVpcPeeringConnectionAttributes) Timeouts() datavpcpeeringconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[datavpcpeeringconnection.TimeoutsAttributes](vpc.ref.Append("timeouts"))
}
