// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package dataelasticachereplicationgroup

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type LogDeliveryConfiguration struct{}

type LogDeliveryConfigurationAttributes struct {
	ref terra.Reference
}

func (ldc LogDeliveryConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ldc.ref, nil
}

func (ldc LogDeliveryConfigurationAttributes) InternalWithRef(ref terra.Reference) LogDeliveryConfigurationAttributes {
	return LogDeliveryConfigurationAttributes{ref: ref}
}

func (ldc LogDeliveryConfigurationAttributes) InternalTokens() hclwrite.Tokens {
	return ldc.ref.InternalTokens()
}

func (ldc LogDeliveryConfigurationAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(ldc.ref.Append("destination"))
}

func (ldc LogDeliveryConfigurationAttributes) DestinationType() terra.StringValue {
	return terra.ReferenceAsString(ldc.ref.Append("destination_type"))
}

func (ldc LogDeliveryConfigurationAttributes) LogFormat() terra.StringValue {
	return terra.ReferenceAsString(ldc.ref.Append("log_format"))
}

func (ldc LogDeliveryConfigurationAttributes) LogType() terra.StringValue {
	return terra.ReferenceAsString(ldc.ref.Append("log_type"))
}

type LogDeliveryConfigurationState struct {
	Destination     string `json:"destination"`
	DestinationType string `json:"destination_type"`
	LogFormat       string `json:"log_format"`
	LogType         string `json:"log_type"`
}
