// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	neptuneclustersnapshot "github.com/golingon/terraproviders/aws/4.60.0/neptuneclustersnapshot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNeptuneClusterSnapshot(name string, args NeptuneClusterSnapshotArgs) *NeptuneClusterSnapshot {
	return &NeptuneClusterSnapshot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NeptuneClusterSnapshot)(nil)

type NeptuneClusterSnapshot struct {
	Name  string
	Args  NeptuneClusterSnapshotArgs
	state *neptuneClusterSnapshotState
}

func (ncs *NeptuneClusterSnapshot) Type() string {
	return "aws_neptune_cluster_snapshot"
}

func (ncs *NeptuneClusterSnapshot) LocalName() string {
	return ncs.Name
}

func (ncs *NeptuneClusterSnapshot) Configuration() interface{} {
	return ncs.Args
}

func (ncs *NeptuneClusterSnapshot) Attributes() neptuneClusterSnapshotAttributes {
	return neptuneClusterSnapshotAttributes{ref: terra.ReferenceResource(ncs)}
}

func (ncs *NeptuneClusterSnapshot) ImportState(av io.Reader) error {
	ncs.state = &neptuneClusterSnapshotState{}
	if err := json.NewDecoder(av).Decode(ncs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ncs.Type(), ncs.LocalName(), err)
	}
	return nil
}

func (ncs *NeptuneClusterSnapshot) State() (*neptuneClusterSnapshotState, bool) {
	return ncs.state, ncs.state != nil
}

func (ncs *NeptuneClusterSnapshot) StateMust() *neptuneClusterSnapshotState {
	if ncs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ncs.Type(), ncs.LocalName()))
	}
	return ncs.state
}

func (ncs *NeptuneClusterSnapshot) DependOn() terra.Reference {
	return terra.ReferenceResource(ncs)
}

type NeptuneClusterSnapshotArgs struct {
	// DbClusterIdentifier: string, required
	DbClusterIdentifier terra.StringValue `hcl:"db_cluster_identifier,attr" validate:"required"`
	// DbClusterSnapshotIdentifier: string, required
	DbClusterSnapshotIdentifier terra.StringValue `hcl:"db_cluster_snapshot_identifier,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *neptuneclustersnapshot.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NeptuneClusterSnapshot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type neptuneClusterSnapshotAttributes struct {
	ref terra.Reference
}

func (ncs neptuneClusterSnapshotAttributes) AllocatedStorage() terra.NumberValue {
	return terra.ReferenceNumber(ncs.ref.Append("allocated_storage"))
}

func (ncs neptuneClusterSnapshotAttributes) AvailabilityZones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ncs.ref.Append("availability_zones"))
}

func (ncs neptuneClusterSnapshotAttributes) DbClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(ncs.ref.Append("db_cluster_identifier"))
}

func (ncs neptuneClusterSnapshotAttributes) DbClusterSnapshotArn() terra.StringValue {
	return terra.ReferenceString(ncs.ref.Append("db_cluster_snapshot_arn"))
}

func (ncs neptuneClusterSnapshotAttributes) DbClusterSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceString(ncs.ref.Append("db_cluster_snapshot_identifier"))
}

func (ncs neptuneClusterSnapshotAttributes) Engine() terra.StringValue {
	return terra.ReferenceString(ncs.ref.Append("engine"))
}

func (ncs neptuneClusterSnapshotAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceString(ncs.ref.Append("engine_version"))
}

func (ncs neptuneClusterSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ncs.ref.Append("id"))
}

func (ncs neptuneClusterSnapshotAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(ncs.ref.Append("kms_key_id"))
}

func (ncs neptuneClusterSnapshotAttributes) LicenseModel() terra.StringValue {
	return terra.ReferenceString(ncs.ref.Append("license_model"))
}

func (ncs neptuneClusterSnapshotAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(ncs.ref.Append("port"))
}

func (ncs neptuneClusterSnapshotAttributes) SnapshotType() terra.StringValue {
	return terra.ReferenceString(ncs.ref.Append("snapshot_type"))
}

func (ncs neptuneClusterSnapshotAttributes) SourceDbClusterSnapshotArn() terra.StringValue {
	return terra.ReferenceString(ncs.ref.Append("source_db_cluster_snapshot_arn"))
}

func (ncs neptuneClusterSnapshotAttributes) Status() terra.StringValue {
	return terra.ReferenceString(ncs.ref.Append("status"))
}

func (ncs neptuneClusterSnapshotAttributes) StorageEncrypted() terra.BoolValue {
	return terra.ReferenceBool(ncs.ref.Append("storage_encrypted"))
}

func (ncs neptuneClusterSnapshotAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(ncs.ref.Append("vpc_id"))
}

func (ncs neptuneClusterSnapshotAttributes) Timeouts() neptuneclustersnapshot.TimeoutsAttributes {
	return terra.ReferenceSingle[neptuneclustersnapshot.TimeoutsAttributes](ncs.ref.Append("timeouts"))
}

type neptuneClusterSnapshotState struct {
	AllocatedStorage            float64                               `json:"allocated_storage"`
	AvailabilityZones           []string                              `json:"availability_zones"`
	DbClusterIdentifier         string                                `json:"db_cluster_identifier"`
	DbClusterSnapshotArn        string                                `json:"db_cluster_snapshot_arn"`
	DbClusterSnapshotIdentifier string                                `json:"db_cluster_snapshot_identifier"`
	Engine                      string                                `json:"engine"`
	EngineVersion               string                                `json:"engine_version"`
	Id                          string                                `json:"id"`
	KmsKeyId                    string                                `json:"kms_key_id"`
	LicenseModel                string                                `json:"license_model"`
	Port                        float64                               `json:"port"`
	SnapshotType                string                                `json:"snapshot_type"`
	SourceDbClusterSnapshotArn  string                                `json:"source_db_cluster_snapshot_arn"`
	Status                      string                                `json:"status"`
	StorageEncrypted            bool                                  `json:"storage_encrypted"`
	VpcId                       string                                `json:"vpc_id"`
	Timeouts                    *neptuneclustersnapshot.TimeoutsState `json:"timeouts"`
}
