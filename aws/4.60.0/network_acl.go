// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkacl "github.com/golingon/terraproviders/aws/4.60.0/networkacl"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkAcl(name string, args NetworkAclArgs) *NetworkAcl {
	return &NetworkAcl{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkAcl)(nil)

type NetworkAcl struct {
	Name  string
	Args  NetworkAclArgs
	state *networkAclState
}

func (na *NetworkAcl) Type() string {
	return "aws_network_acl"
}

func (na *NetworkAcl) LocalName() string {
	return na.Name
}

func (na *NetworkAcl) Configuration() interface{} {
	return na.Args
}

func (na *NetworkAcl) Attributes() networkAclAttributes {
	return networkAclAttributes{ref: terra.ReferenceResource(na)}
}

func (na *NetworkAcl) ImportState(av io.Reader) error {
	na.state = &networkAclState{}
	if err := json.NewDecoder(av).Decode(na.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", na.Type(), na.LocalName(), err)
	}
	return nil
}

func (na *NetworkAcl) State() (*networkAclState, bool) {
	return na.state, na.state != nil
}

func (na *NetworkAcl) StateMust() *networkAclState {
	if na.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", na.Type(), na.LocalName()))
	}
	return na.state
}

func (na *NetworkAcl) DependOn() terra.Reference {
	return terra.ReferenceResource(na)
}

type NetworkAclArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// Egress: min=0
	Egress []networkacl.Egress `hcl:"egress,block" validate:"min=0"`
	// Ingress: min=0
	Ingress []networkacl.Ingress `hcl:"ingress,block" validate:"min=0"`
	// DependsOn contains resources that NetworkAcl depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkAclAttributes struct {
	ref terra.Reference
}

func (na networkAclAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(na.ref.Append("arn"))
}

func (na networkAclAttributes) Id() terra.StringValue {
	return terra.ReferenceString(na.ref.Append("id"))
}

func (na networkAclAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(na.ref.Append("owner_id"))
}

func (na networkAclAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](na.ref.Append("subnet_ids"))
}

func (na networkAclAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](na.ref.Append("tags"))
}

func (na networkAclAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](na.ref.Append("tags_all"))
}

func (na networkAclAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(na.ref.Append("vpc_id"))
}

func (na networkAclAttributes) Egress() terra.SetValue[networkacl.EgressAttributes] {
	return terra.ReferenceSet[networkacl.EgressAttributes](na.ref.Append("egress"))
}

func (na networkAclAttributes) Ingress() terra.SetValue[networkacl.IngressAttributes] {
	return terra.ReferenceSet[networkacl.IngressAttributes](na.ref.Append("ingress"))
}

type networkAclState struct {
	Arn       string                    `json:"arn"`
	Id        string                    `json:"id"`
	OwnerId   string                    `json:"owner_id"`
	SubnetIds []string                  `json:"subnet_ids"`
	Tags      map[string]string         `json:"tags"`
	TagsAll   map[string]string         `json:"tags_all"`
	VpcId     string                    `json:"vpc_id"`
	Egress    []networkacl.EgressState  `json:"egress"`
	Ingress   []networkacl.IngressState `json:"ingress"`
}
