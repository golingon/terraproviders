// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCognitoUser(name string, args CognitoUserArgs) *CognitoUser {
	return &CognitoUser{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CognitoUser)(nil)

type CognitoUser struct {
	Name  string
	Args  CognitoUserArgs
	state *cognitoUserState
}

func (cu *CognitoUser) Type() string {
	return "aws_cognito_user"
}

func (cu *CognitoUser) LocalName() string {
	return cu.Name
}

func (cu *CognitoUser) Configuration() interface{} {
	return cu.Args
}

func (cu *CognitoUser) Attributes() cognitoUserAttributes {
	return cognitoUserAttributes{ref: terra.ReferenceResource(cu)}
}

func (cu *CognitoUser) ImportState(av io.Reader) error {
	cu.state = &cognitoUserState{}
	if err := json.NewDecoder(av).Decode(cu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cu.Type(), cu.LocalName(), err)
	}
	return nil
}

func (cu *CognitoUser) State() (*cognitoUserState, bool) {
	return cu.state, cu.state != nil
}

func (cu *CognitoUser) StateMust() *cognitoUserState {
	if cu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cu.Type(), cu.LocalName()))
	}
	return cu.state
}

func (cu *CognitoUser) DependOn() terra.Reference {
	return terra.ReferenceResource(cu)
}

type CognitoUserArgs struct {
	// Attributes: map of string, optional
	Attributes terra.MapValue[terra.StringValue] `hcl:"attributes,attr"`
	// ClientMetadata: map of string, optional
	ClientMetadata terra.MapValue[terra.StringValue] `hcl:"client_metadata,attr"`
	// DesiredDeliveryMediums: set of string, optional
	DesiredDeliveryMediums terra.SetValue[terra.StringValue] `hcl:"desired_delivery_mediums,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ForceAliasCreation: bool, optional
	ForceAliasCreation terra.BoolValue `hcl:"force_alias_creation,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MessageAction: string, optional
	MessageAction terra.StringValue `hcl:"message_action,attr"`
	// Password: string, optional
	Password terra.StringValue `hcl:"password,attr"`
	// TemporaryPassword: string, optional
	TemporaryPassword terra.StringValue `hcl:"temporary_password,attr"`
	// UserPoolId: string, required
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
	// Username: string, required
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// ValidationData: map of string, optional
	ValidationData terra.MapValue[terra.StringValue] `hcl:"validation_data,attr"`
	// DependsOn contains resources that CognitoUser depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cognitoUserAttributes struct {
	ref terra.Reference
}

func (cu cognitoUserAttributes) Attributes() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cu.ref.Append("attributes"))
}

func (cu cognitoUserAttributes) ClientMetadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cu.ref.Append("client_metadata"))
}

func (cu cognitoUserAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceString(cu.ref.Append("creation_date"))
}

func (cu cognitoUserAttributes) DesiredDeliveryMediums() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cu.ref.Append("desired_delivery_mediums"))
}

func (cu cognitoUserAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(cu.ref.Append("enabled"))
}

func (cu cognitoUserAttributes) ForceAliasCreation() terra.BoolValue {
	return terra.ReferenceBool(cu.ref.Append("force_alias_creation"))
}

func (cu cognitoUserAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cu.ref.Append("id"))
}

func (cu cognitoUserAttributes) LastModifiedDate() terra.StringValue {
	return terra.ReferenceString(cu.ref.Append("last_modified_date"))
}

func (cu cognitoUserAttributes) MessageAction() terra.StringValue {
	return terra.ReferenceString(cu.ref.Append("message_action"))
}

func (cu cognitoUserAttributes) MfaSettingList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cu.ref.Append("mfa_setting_list"))
}

func (cu cognitoUserAttributes) Password() terra.StringValue {
	return terra.ReferenceString(cu.ref.Append("password"))
}

func (cu cognitoUserAttributes) PreferredMfaSetting() terra.StringValue {
	return terra.ReferenceString(cu.ref.Append("preferred_mfa_setting"))
}

func (cu cognitoUserAttributes) Status() terra.StringValue {
	return terra.ReferenceString(cu.ref.Append("status"))
}

func (cu cognitoUserAttributes) Sub() terra.StringValue {
	return terra.ReferenceString(cu.ref.Append("sub"))
}

func (cu cognitoUserAttributes) TemporaryPassword() terra.StringValue {
	return terra.ReferenceString(cu.ref.Append("temporary_password"))
}

func (cu cognitoUserAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceString(cu.ref.Append("user_pool_id"))
}

func (cu cognitoUserAttributes) Username() terra.StringValue {
	return terra.ReferenceString(cu.ref.Append("username"))
}

func (cu cognitoUserAttributes) ValidationData() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cu.ref.Append("validation_data"))
}

type cognitoUserState struct {
	Attributes             map[string]string `json:"attributes"`
	ClientMetadata         map[string]string `json:"client_metadata"`
	CreationDate           string            `json:"creation_date"`
	DesiredDeliveryMediums []string          `json:"desired_delivery_mediums"`
	Enabled                bool              `json:"enabled"`
	ForceAliasCreation     bool              `json:"force_alias_creation"`
	Id                     string            `json:"id"`
	LastModifiedDate       string            `json:"last_modified_date"`
	MessageAction          string            `json:"message_action"`
	MfaSettingList         []string          `json:"mfa_setting_list"`
	Password               string            `json:"password"`
	PreferredMfaSetting    string            `json:"preferred_mfa_setting"`
	Status                 string            `json:"status"`
	Sub                    string            `json:"sub"`
	TemporaryPassword      string            `json:"temporary_password"`
	UserPoolId             string            `json:"user_pool_id"`
	Username               string            `json:"username"`
	ValidationData         map[string]string `json:"validation_data"`
}
