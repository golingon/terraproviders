// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	codegurureviewerrepositoryassociation "github.com/golingon/terraproviders/aws/4.60.0/codegurureviewerrepositoryassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCodegurureviewerRepositoryAssociation(name string, args CodegurureviewerRepositoryAssociationArgs) *CodegurureviewerRepositoryAssociation {
	return &CodegurureviewerRepositoryAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodegurureviewerRepositoryAssociation)(nil)

type CodegurureviewerRepositoryAssociation struct {
	Name  string
	Args  CodegurureviewerRepositoryAssociationArgs
	state *codegurureviewerRepositoryAssociationState
}

func (cra *CodegurureviewerRepositoryAssociation) Type() string {
	return "aws_codegurureviewer_repository_association"
}

func (cra *CodegurureviewerRepositoryAssociation) LocalName() string {
	return cra.Name
}

func (cra *CodegurureviewerRepositoryAssociation) Configuration() interface{} {
	return cra.Args
}

func (cra *CodegurureviewerRepositoryAssociation) Attributes() codegurureviewerRepositoryAssociationAttributes {
	return codegurureviewerRepositoryAssociationAttributes{ref: terra.ReferenceResource(cra)}
}

func (cra *CodegurureviewerRepositoryAssociation) ImportState(av io.Reader) error {
	cra.state = &codegurureviewerRepositoryAssociationState{}
	if err := json.NewDecoder(av).Decode(cra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cra.Type(), cra.LocalName(), err)
	}
	return nil
}

func (cra *CodegurureviewerRepositoryAssociation) State() (*codegurureviewerRepositoryAssociationState, bool) {
	return cra.state, cra.state != nil
}

func (cra *CodegurureviewerRepositoryAssociation) StateMust() *codegurureviewerRepositoryAssociationState {
	if cra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cra.Type(), cra.LocalName()))
	}
	return cra.state
}

func (cra *CodegurureviewerRepositoryAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(cra)
}

type CodegurureviewerRepositoryAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// S3RepositoryDetails: min=0
	S3RepositoryDetails []codegurureviewerrepositoryassociation.S3RepositoryDetails `hcl:"s3_repository_details,block" validate:"min=0"`
	// KmsKeyDetails: optional
	KmsKeyDetails *codegurureviewerrepositoryassociation.KmsKeyDetails `hcl:"kms_key_details,block"`
	// Repository: required
	Repository *codegurureviewerrepositoryassociation.Repository `hcl:"repository,block" validate:"required"`
	// Timeouts: optional
	Timeouts *codegurureviewerrepositoryassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that CodegurureviewerRepositoryAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type codegurureviewerRepositoryAssociationAttributes struct {
	ref terra.Reference
}

func (cra codegurureviewerRepositoryAssociationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cra.ref.Append("arn"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceString(cra.ref.Append("association_id"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) ConnectionArn() terra.StringValue {
	return terra.ReferenceString(cra.ref.Append("connection_arn"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cra.ref.Append("id"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cra.ref.Append("name"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) Owner() terra.StringValue {
	return terra.ReferenceString(cra.ref.Append("owner"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) ProviderType() terra.StringValue {
	return terra.ReferenceString(cra.ref.Append("provider_type"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) State() terra.StringValue {
	return terra.ReferenceString(cra.ref.Append("state"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) StateReason() terra.StringValue {
	return terra.ReferenceString(cra.ref.Append("state_reason"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cra.ref.Append("tags"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cra.ref.Append("tags_all"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) S3RepositoryDetails() terra.ListValue[codegurureviewerrepositoryassociation.S3RepositoryDetailsAttributes] {
	return terra.ReferenceList[codegurureviewerrepositoryassociation.S3RepositoryDetailsAttributes](cra.ref.Append("s3_repository_details"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) KmsKeyDetails() terra.ListValue[codegurureviewerrepositoryassociation.KmsKeyDetailsAttributes] {
	return terra.ReferenceList[codegurureviewerrepositoryassociation.KmsKeyDetailsAttributes](cra.ref.Append("kms_key_details"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) Repository() terra.ListValue[codegurureviewerrepositoryassociation.RepositoryAttributes] {
	return terra.ReferenceList[codegurureviewerrepositoryassociation.RepositoryAttributes](cra.ref.Append("repository"))
}

func (cra codegurureviewerRepositoryAssociationAttributes) Timeouts() codegurureviewerrepositoryassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[codegurureviewerrepositoryassociation.TimeoutsAttributes](cra.ref.Append("timeouts"))
}

type codegurureviewerRepositoryAssociationState struct {
	Arn                 string                                                           `json:"arn"`
	AssociationId       string                                                           `json:"association_id"`
	ConnectionArn       string                                                           `json:"connection_arn"`
	Id                  string                                                           `json:"id"`
	Name                string                                                           `json:"name"`
	Owner               string                                                           `json:"owner"`
	ProviderType        string                                                           `json:"provider_type"`
	State               string                                                           `json:"state"`
	StateReason         string                                                           `json:"state_reason"`
	Tags                map[string]string                                                `json:"tags"`
	TagsAll             map[string]string                                                `json:"tags_all"`
	S3RepositoryDetails []codegurureviewerrepositoryassociation.S3RepositoryDetailsState `json:"s3_repository_details"`
	KmsKeyDetails       []codegurureviewerrepositoryassociation.KmsKeyDetailsState       `json:"kms_key_details"`
	Repository          []codegurureviewerrepositoryassociation.RepositoryState          `json:"repository"`
	Timeouts            *codegurureviewerrepositoryassociation.TimeoutsState             `json:"timeouts"`
}
