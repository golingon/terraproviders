// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dbparametergroup "github.com/golingon/terraproviders/aws/4.60.0/dbparametergroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDbParameterGroup(name string, args DbParameterGroupArgs) *DbParameterGroup {
	return &DbParameterGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DbParameterGroup)(nil)

type DbParameterGroup struct {
	Name  string
	Args  DbParameterGroupArgs
	state *dbParameterGroupState
}

func (dpg *DbParameterGroup) Type() string {
	return "aws_db_parameter_group"
}

func (dpg *DbParameterGroup) LocalName() string {
	return dpg.Name
}

func (dpg *DbParameterGroup) Configuration() interface{} {
	return dpg.Args
}

func (dpg *DbParameterGroup) Attributes() dbParameterGroupAttributes {
	return dbParameterGroupAttributes{ref: terra.ReferenceResource(dpg)}
}

func (dpg *DbParameterGroup) ImportState(av io.Reader) error {
	dpg.state = &dbParameterGroupState{}
	if err := json.NewDecoder(av).Decode(dpg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dpg.Type(), dpg.LocalName(), err)
	}
	return nil
}

func (dpg *DbParameterGroup) State() (*dbParameterGroupState, bool) {
	return dpg.state, dpg.state != nil
}

func (dpg *DbParameterGroup) StateMust() *dbParameterGroupState {
	if dpg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dpg.Type(), dpg.LocalName()))
	}
	return dpg.state
}

func (dpg *DbParameterGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(dpg)
}

type DbParameterGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Family: string, required
	Family terra.StringValue `hcl:"family,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Parameter: min=0
	Parameter []dbparametergroup.Parameter `hcl:"parameter,block" validate:"min=0"`
	// DependsOn contains resources that DbParameterGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dbParameterGroupAttributes struct {
	ref terra.Reference
}

func (dpg dbParameterGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dpg.ref.Append("arn"))
}

func (dpg dbParameterGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dpg.ref.Append("description"))
}

func (dpg dbParameterGroupAttributes) Family() terra.StringValue {
	return terra.ReferenceString(dpg.ref.Append("family"))
}

func (dpg dbParameterGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dpg.ref.Append("id"))
}

func (dpg dbParameterGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dpg.ref.Append("name"))
}

func (dpg dbParameterGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(dpg.ref.Append("name_prefix"))
}

func (dpg dbParameterGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dpg.ref.Append("tags"))
}

func (dpg dbParameterGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dpg.ref.Append("tags_all"))
}

func (dpg dbParameterGroupAttributes) Parameter() terra.SetValue[dbparametergroup.ParameterAttributes] {
	return terra.ReferenceSet[dbparametergroup.ParameterAttributes](dpg.ref.Append("parameter"))
}

type dbParameterGroupState struct {
	Arn         string                            `json:"arn"`
	Description string                            `json:"description"`
	Family      string                            `json:"family"`
	Id          string                            `json:"id"`
	Name        string                            `json:"name"`
	NamePrefix  string                            `json:"name_prefix"`
	Tags        map[string]string                 `json:"tags"`
	TagsAll     map[string]string                 `json:"tags_all"`
	Parameter   []dbparametergroup.ParameterState `json:"parameter"`
}
