// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	auditmanagerframework "github.com/golingon/terraproviders/aws/4.60.0/auditmanagerframework"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAuditmanagerFramework(name string, args AuditmanagerFrameworkArgs) *AuditmanagerFramework {
	return &AuditmanagerFramework{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AuditmanagerFramework)(nil)

type AuditmanagerFramework struct {
	Name  string
	Args  AuditmanagerFrameworkArgs
	state *auditmanagerFrameworkState
}

func (af *AuditmanagerFramework) Type() string {
	return "aws_auditmanager_framework"
}

func (af *AuditmanagerFramework) LocalName() string {
	return af.Name
}

func (af *AuditmanagerFramework) Configuration() interface{} {
	return af.Args
}

func (af *AuditmanagerFramework) Attributes() auditmanagerFrameworkAttributes {
	return auditmanagerFrameworkAttributes{ref: terra.ReferenceResource(af)}
}

func (af *AuditmanagerFramework) ImportState(av io.Reader) error {
	af.state = &auditmanagerFrameworkState{}
	if err := json.NewDecoder(av).Decode(af.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", af.Type(), af.LocalName(), err)
	}
	return nil
}

func (af *AuditmanagerFramework) State() (*auditmanagerFrameworkState, bool) {
	return af.state, af.state != nil
}

func (af *AuditmanagerFramework) StateMust() *auditmanagerFrameworkState {
	if af.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", af.Type(), af.LocalName()))
	}
	return af.state
}

func (af *AuditmanagerFramework) DependOn() terra.Reference {
	return terra.ReferenceResource(af)
}

type AuditmanagerFrameworkArgs struct {
	// ComplianceType: string, optional
	ComplianceType terra.StringValue `hcl:"compliance_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// ControlSets: min=0
	ControlSets []auditmanagerframework.ControlSets `hcl:"control_sets,block" validate:"min=0"`
	// DependsOn contains resources that AuditmanagerFramework depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type auditmanagerFrameworkAttributes struct {
	ref terra.Reference
}

func (af auditmanagerFrameworkAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("arn"))
}

func (af auditmanagerFrameworkAttributes) ComplianceType() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("compliance_type"))
}

func (af auditmanagerFrameworkAttributes) Description() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("description"))
}

func (af auditmanagerFrameworkAttributes) FrameworkType() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("framework_type"))
}

func (af auditmanagerFrameworkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("id"))
}

func (af auditmanagerFrameworkAttributes) Name() terra.StringValue {
	return terra.ReferenceString(af.ref.Append("name"))
}

func (af auditmanagerFrameworkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](af.ref.Append("tags"))
}

func (af auditmanagerFrameworkAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](af.ref.Append("tags_all"))
}

func (af auditmanagerFrameworkAttributes) ControlSets() terra.SetValue[auditmanagerframework.ControlSetsAttributes] {
	return terra.ReferenceSet[auditmanagerframework.ControlSetsAttributes](af.ref.Append("control_sets"))
}

type auditmanagerFrameworkState struct {
	Arn            string                                   `json:"arn"`
	ComplianceType string                                   `json:"compliance_type"`
	Description    string                                   `json:"description"`
	FrameworkType  string                                   `json:"framework_type"`
	Id             string                                   `json:"id"`
	Name           string                                   `json:"name"`
	Tags           map[string]string                        `json:"tags"`
	TagsAll        map[string]string                        `json:"tags_all"`
	ControlSets    []auditmanagerframework.ControlSetsState `json:"control_sets"`
}
