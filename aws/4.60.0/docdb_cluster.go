// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	docdbcluster "github.com/golingon/terraproviders/aws/4.60.0/docdbcluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDocdbCluster(name string, args DocdbClusterArgs) *DocdbCluster {
	return &DocdbCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DocdbCluster)(nil)

type DocdbCluster struct {
	Name  string
	Args  DocdbClusterArgs
	state *docdbClusterState
}

func (dc *DocdbCluster) Type() string {
	return "aws_docdb_cluster"
}

func (dc *DocdbCluster) LocalName() string {
	return dc.Name
}

func (dc *DocdbCluster) Configuration() interface{} {
	return dc.Args
}

func (dc *DocdbCluster) Attributes() docdbClusterAttributes {
	return docdbClusterAttributes{ref: terra.ReferenceResource(dc)}
}

func (dc *DocdbCluster) ImportState(av io.Reader) error {
	dc.state = &docdbClusterState{}
	if err := json.NewDecoder(av).Decode(dc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dc.Type(), dc.LocalName(), err)
	}
	return nil
}

func (dc *DocdbCluster) State() (*docdbClusterState, bool) {
	return dc.state, dc.state != nil
}

func (dc *DocdbCluster) StateMust() *docdbClusterState {
	if dc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dc.Type(), dc.LocalName()))
	}
	return dc.state
}

func (dc *DocdbCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(dc)
}

type DocdbClusterArgs struct {
	// ApplyImmediately: bool, optional
	ApplyImmediately terra.BoolValue `hcl:"apply_immediately,attr"`
	// AvailabilityZones: set of string, optional
	AvailabilityZones terra.SetValue[terra.StringValue] `hcl:"availability_zones,attr"`
	// BackupRetentionPeriod: number, optional
	BackupRetentionPeriod terra.NumberValue `hcl:"backup_retention_period,attr"`
	// ClusterIdentifier: string, optional
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr"`
	// ClusterIdentifierPrefix: string, optional
	ClusterIdentifierPrefix terra.StringValue `hcl:"cluster_identifier_prefix,attr"`
	// ClusterMembers: set of string, optional
	ClusterMembers terra.SetValue[terra.StringValue] `hcl:"cluster_members,attr"`
	// DbClusterParameterGroupName: string, optional
	DbClusterParameterGroupName terra.StringValue `hcl:"db_cluster_parameter_group_name,attr"`
	// DbSubnetGroupName: string, optional
	DbSubnetGroupName terra.StringValue `hcl:"db_subnet_group_name,attr"`
	// DeletionProtection: bool, optional
	DeletionProtection terra.BoolValue `hcl:"deletion_protection,attr"`
	// EnabledCloudwatchLogsExports: list of string, optional
	EnabledCloudwatchLogsExports terra.ListValue[terra.StringValue] `hcl:"enabled_cloudwatch_logs_exports,attr"`
	// Engine: string, optional
	Engine terra.StringValue `hcl:"engine,attr"`
	// EngineVersion: string, optional
	EngineVersion terra.StringValue `hcl:"engine_version,attr"`
	// FinalSnapshotIdentifier: string, optional
	FinalSnapshotIdentifier terra.StringValue `hcl:"final_snapshot_identifier,attr"`
	// GlobalClusterIdentifier: string, optional
	GlobalClusterIdentifier terra.StringValue `hcl:"global_cluster_identifier,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// MasterPassword: string, optional
	MasterPassword terra.StringValue `hcl:"master_password,attr"`
	// MasterUsername: string, optional
	MasterUsername terra.StringValue `hcl:"master_username,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// PreferredBackupWindow: string, optional
	PreferredBackupWindow terra.StringValue `hcl:"preferred_backup_window,attr"`
	// PreferredMaintenanceWindow: string, optional
	PreferredMaintenanceWindow terra.StringValue `hcl:"preferred_maintenance_window,attr"`
	// SkipFinalSnapshot: bool, optional
	SkipFinalSnapshot terra.BoolValue `hcl:"skip_final_snapshot,attr"`
	// SnapshotIdentifier: string, optional
	SnapshotIdentifier terra.StringValue `hcl:"snapshot_identifier,attr"`
	// StorageEncrypted: bool, optional
	StorageEncrypted terra.BoolValue `hcl:"storage_encrypted,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// Timeouts: optional
	Timeouts *docdbcluster.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DocdbCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type docdbClusterAttributes struct {
	ref terra.Reference
}

func (dc docdbClusterAttributes) ApplyImmediately() terra.BoolValue {
	return terra.ReferenceBool(dc.ref.Append("apply_immediately"))
}

func (dc docdbClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("arn"))
}

func (dc docdbClusterAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dc.ref.Append("availability_zones"))
}

func (dc docdbClusterAttributes) BackupRetentionPeriod() terra.NumberValue {
	return terra.ReferenceNumber(dc.ref.Append("backup_retention_period"))
}

func (dc docdbClusterAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("cluster_identifier"))
}

func (dc docdbClusterAttributes) ClusterIdentifierPrefix() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("cluster_identifier_prefix"))
}

func (dc docdbClusterAttributes) ClusterMembers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dc.ref.Append("cluster_members"))
}

func (dc docdbClusterAttributes) ClusterResourceId() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("cluster_resource_id"))
}

func (dc docdbClusterAttributes) DbClusterParameterGroupName() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("db_cluster_parameter_group_name"))
}

func (dc docdbClusterAttributes) DbSubnetGroupName() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("db_subnet_group_name"))
}

func (dc docdbClusterAttributes) DeletionProtection() terra.BoolValue {
	return terra.ReferenceBool(dc.ref.Append("deletion_protection"))
}

func (dc docdbClusterAttributes) EnabledCloudwatchLogsExports() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](dc.ref.Append("enabled_cloudwatch_logs_exports"))
}

func (dc docdbClusterAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("endpoint"))
}

func (dc docdbClusterAttributes) Engine() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("engine"))
}

func (dc docdbClusterAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("engine_version"))
}

func (dc docdbClusterAttributes) FinalSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("final_snapshot_identifier"))
}

func (dc docdbClusterAttributes) GlobalClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("global_cluster_identifier"))
}

func (dc docdbClusterAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("hosted_zone_id"))
}

func (dc docdbClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("id"))
}

func (dc docdbClusterAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("kms_key_id"))
}

func (dc docdbClusterAttributes) MasterPassword() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("master_password"))
}

func (dc docdbClusterAttributes) MasterUsername() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("master_username"))
}

func (dc docdbClusterAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(dc.ref.Append("port"))
}

func (dc docdbClusterAttributes) PreferredBackupWindow() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("preferred_backup_window"))
}

func (dc docdbClusterAttributes) PreferredMaintenanceWindow() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("preferred_maintenance_window"))
}

func (dc docdbClusterAttributes) ReaderEndpoint() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("reader_endpoint"))
}

func (dc docdbClusterAttributes) SkipFinalSnapshot() terra.BoolValue {
	return terra.ReferenceBool(dc.ref.Append("skip_final_snapshot"))
}

func (dc docdbClusterAttributes) SnapshotIdentifier() terra.StringValue {
	return terra.ReferenceString(dc.ref.Append("snapshot_identifier"))
}

func (dc docdbClusterAttributes) StorageEncrypted() terra.BoolValue {
	return terra.ReferenceBool(dc.ref.Append("storage_encrypted"))
}

func (dc docdbClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dc.ref.Append("tags"))
}

func (dc docdbClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dc.ref.Append("tags_all"))
}

func (dc docdbClusterAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dc.ref.Append("vpc_security_group_ids"))
}

func (dc docdbClusterAttributes) Timeouts() docdbcluster.TimeoutsAttributes {
	return terra.ReferenceSingle[docdbcluster.TimeoutsAttributes](dc.ref.Append("timeouts"))
}

type docdbClusterState struct {
	ApplyImmediately             bool                        `json:"apply_immediately"`
	Arn                          string                      `json:"arn"`
	AvailabilityZones            []string                    `json:"availability_zones"`
	BackupRetentionPeriod        float64                     `json:"backup_retention_period"`
	ClusterIdentifier            string                      `json:"cluster_identifier"`
	ClusterIdentifierPrefix      string                      `json:"cluster_identifier_prefix"`
	ClusterMembers               []string                    `json:"cluster_members"`
	ClusterResourceId            string                      `json:"cluster_resource_id"`
	DbClusterParameterGroupName  string                      `json:"db_cluster_parameter_group_name"`
	DbSubnetGroupName            string                      `json:"db_subnet_group_name"`
	DeletionProtection           bool                        `json:"deletion_protection"`
	EnabledCloudwatchLogsExports []string                    `json:"enabled_cloudwatch_logs_exports"`
	Endpoint                     string                      `json:"endpoint"`
	Engine                       string                      `json:"engine"`
	EngineVersion                string                      `json:"engine_version"`
	FinalSnapshotIdentifier      string                      `json:"final_snapshot_identifier"`
	GlobalClusterIdentifier      string                      `json:"global_cluster_identifier"`
	HostedZoneId                 string                      `json:"hosted_zone_id"`
	Id                           string                      `json:"id"`
	KmsKeyId                     string                      `json:"kms_key_id"`
	MasterPassword               string                      `json:"master_password"`
	MasterUsername               string                      `json:"master_username"`
	Port                         float64                     `json:"port"`
	PreferredBackupWindow        string                      `json:"preferred_backup_window"`
	PreferredMaintenanceWindow   string                      `json:"preferred_maintenance_window"`
	ReaderEndpoint               string                      `json:"reader_endpoint"`
	SkipFinalSnapshot            bool                        `json:"skip_final_snapshot"`
	SnapshotIdentifier           string                      `json:"snapshot_identifier"`
	StorageEncrypted             bool                        `json:"storage_encrypted"`
	Tags                         map[string]string           `json:"tags"`
	TagsAll                      map[string]string           `json:"tags_all"`
	VpcSecurityGroupIds          []string                    `json:"vpc_security_group_ids"`
	Timeouts                     *docdbcluster.TimeoutsState `json:"timeouts"`
}
