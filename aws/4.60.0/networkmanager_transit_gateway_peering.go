// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkmanagertransitgatewaypeering "github.com/golingon/terraproviders/aws/4.60.0/networkmanagertransitgatewaypeering"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkmanagerTransitGatewayPeering(name string, args NetworkmanagerTransitGatewayPeeringArgs) *NetworkmanagerTransitGatewayPeering {
	return &NetworkmanagerTransitGatewayPeering{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkmanagerTransitGatewayPeering)(nil)

type NetworkmanagerTransitGatewayPeering struct {
	Name  string
	Args  NetworkmanagerTransitGatewayPeeringArgs
	state *networkmanagerTransitGatewayPeeringState
}

func (ntgp *NetworkmanagerTransitGatewayPeering) Type() string {
	return "aws_networkmanager_transit_gateway_peering"
}

func (ntgp *NetworkmanagerTransitGatewayPeering) LocalName() string {
	return ntgp.Name
}

func (ntgp *NetworkmanagerTransitGatewayPeering) Configuration() interface{} {
	return ntgp.Args
}

func (ntgp *NetworkmanagerTransitGatewayPeering) Attributes() networkmanagerTransitGatewayPeeringAttributes {
	return networkmanagerTransitGatewayPeeringAttributes{ref: terra.ReferenceResource(ntgp)}
}

func (ntgp *NetworkmanagerTransitGatewayPeering) ImportState(av io.Reader) error {
	ntgp.state = &networkmanagerTransitGatewayPeeringState{}
	if err := json.NewDecoder(av).Decode(ntgp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ntgp.Type(), ntgp.LocalName(), err)
	}
	return nil
}

func (ntgp *NetworkmanagerTransitGatewayPeering) State() (*networkmanagerTransitGatewayPeeringState, bool) {
	return ntgp.state, ntgp.state != nil
}

func (ntgp *NetworkmanagerTransitGatewayPeering) StateMust() *networkmanagerTransitGatewayPeeringState {
	if ntgp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ntgp.Type(), ntgp.LocalName()))
	}
	return ntgp.state
}

func (ntgp *NetworkmanagerTransitGatewayPeering) DependOn() terra.Reference {
	return terra.ReferenceResource(ntgp)
}

type NetworkmanagerTransitGatewayPeeringArgs struct {
	// CoreNetworkId: string, required
	CoreNetworkId terra.StringValue `hcl:"core_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TransitGatewayArn: string, required
	TransitGatewayArn terra.StringValue `hcl:"transit_gateway_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *networkmanagertransitgatewaypeering.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkmanagerTransitGatewayPeering depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkmanagerTransitGatewayPeeringAttributes struct {
	ref terra.Reference
}

func (ntgp networkmanagerTransitGatewayPeeringAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ntgp.ref.Append("arn"))
}

func (ntgp networkmanagerTransitGatewayPeeringAttributes) CoreNetworkArn() terra.StringValue {
	return terra.ReferenceString(ntgp.ref.Append("core_network_arn"))
}

func (ntgp networkmanagerTransitGatewayPeeringAttributes) CoreNetworkId() terra.StringValue {
	return terra.ReferenceString(ntgp.ref.Append("core_network_id"))
}

func (ntgp networkmanagerTransitGatewayPeeringAttributes) EdgeLocation() terra.StringValue {
	return terra.ReferenceString(ntgp.ref.Append("edge_location"))
}

func (ntgp networkmanagerTransitGatewayPeeringAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ntgp.ref.Append("id"))
}

func (ntgp networkmanagerTransitGatewayPeeringAttributes) OwnerAccountId() terra.StringValue {
	return terra.ReferenceString(ntgp.ref.Append("owner_account_id"))
}

func (ntgp networkmanagerTransitGatewayPeeringAttributes) PeeringType() terra.StringValue {
	return terra.ReferenceString(ntgp.ref.Append("peering_type"))
}

func (ntgp networkmanagerTransitGatewayPeeringAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceString(ntgp.ref.Append("resource_arn"))
}

func (ntgp networkmanagerTransitGatewayPeeringAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ntgp.ref.Append("tags"))
}

func (ntgp networkmanagerTransitGatewayPeeringAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ntgp.ref.Append("tags_all"))
}

func (ntgp networkmanagerTransitGatewayPeeringAttributes) TransitGatewayArn() terra.StringValue {
	return terra.ReferenceString(ntgp.ref.Append("transit_gateway_arn"))
}

func (ntgp networkmanagerTransitGatewayPeeringAttributes) TransitGatewayPeeringAttachmentId() terra.StringValue {
	return terra.ReferenceString(ntgp.ref.Append("transit_gateway_peering_attachment_id"))
}

func (ntgp networkmanagerTransitGatewayPeeringAttributes) Timeouts() networkmanagertransitgatewaypeering.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagertransitgatewaypeering.TimeoutsAttributes](ntgp.ref.Append("timeouts"))
}

type networkmanagerTransitGatewayPeeringState struct {
	Arn                               string                                             `json:"arn"`
	CoreNetworkArn                    string                                             `json:"core_network_arn"`
	CoreNetworkId                     string                                             `json:"core_network_id"`
	EdgeLocation                      string                                             `json:"edge_location"`
	Id                                string                                             `json:"id"`
	OwnerAccountId                    string                                             `json:"owner_account_id"`
	PeeringType                       string                                             `json:"peering_type"`
	ResourceArn                       string                                             `json:"resource_arn"`
	Tags                              map[string]string                                  `json:"tags"`
	TagsAll                           map[string]string                                  `json:"tags_all"`
	TransitGatewayArn                 string                                             `json:"transit_gateway_arn"`
	TransitGatewayPeeringAttachmentId string                                             `json:"transit_gateway_peering_attachment_id"`
	Timeouts                          *networkmanagertransitgatewaypeering.TimeoutsState `json:"timeouts"`
}
