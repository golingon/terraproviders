// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	docdbclusterparametergroup "github.com/golingon/terraproviders/aws/4.60.0/docdbclusterparametergroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDocdbClusterParameterGroup(name string, args DocdbClusterParameterGroupArgs) *DocdbClusterParameterGroup {
	return &DocdbClusterParameterGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DocdbClusterParameterGroup)(nil)

type DocdbClusterParameterGroup struct {
	Name  string
	Args  DocdbClusterParameterGroupArgs
	state *docdbClusterParameterGroupState
}

func (dcpg *DocdbClusterParameterGroup) Type() string {
	return "aws_docdb_cluster_parameter_group"
}

func (dcpg *DocdbClusterParameterGroup) LocalName() string {
	return dcpg.Name
}

func (dcpg *DocdbClusterParameterGroup) Configuration() interface{} {
	return dcpg.Args
}

func (dcpg *DocdbClusterParameterGroup) Attributes() docdbClusterParameterGroupAttributes {
	return docdbClusterParameterGroupAttributes{ref: terra.ReferenceResource(dcpg)}
}

func (dcpg *DocdbClusterParameterGroup) ImportState(av io.Reader) error {
	dcpg.state = &docdbClusterParameterGroupState{}
	if err := json.NewDecoder(av).Decode(dcpg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dcpg.Type(), dcpg.LocalName(), err)
	}
	return nil
}

func (dcpg *DocdbClusterParameterGroup) State() (*docdbClusterParameterGroupState, bool) {
	return dcpg.state, dcpg.state != nil
}

func (dcpg *DocdbClusterParameterGroup) StateMust() *docdbClusterParameterGroupState {
	if dcpg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dcpg.Type(), dcpg.LocalName()))
	}
	return dcpg.state
}

func (dcpg *DocdbClusterParameterGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(dcpg)
}

type DocdbClusterParameterGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Family: string, required
	Family terra.StringValue `hcl:"family,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Parameter: min=0
	Parameter []docdbclusterparametergroup.Parameter `hcl:"parameter,block" validate:"min=0"`
	// DependsOn contains resources that DocdbClusterParameterGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type docdbClusterParameterGroupAttributes struct {
	ref terra.Reference
}

func (dcpg docdbClusterParameterGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dcpg.ref.Append("arn"))
}

func (dcpg docdbClusterParameterGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(dcpg.ref.Append("description"))
}

func (dcpg docdbClusterParameterGroupAttributes) Family() terra.StringValue {
	return terra.ReferenceString(dcpg.ref.Append("family"))
}

func (dcpg docdbClusterParameterGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dcpg.ref.Append("id"))
}

func (dcpg docdbClusterParameterGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(dcpg.ref.Append("name"))
}

func (dcpg docdbClusterParameterGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(dcpg.ref.Append("name_prefix"))
}

func (dcpg docdbClusterParameterGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dcpg.ref.Append("tags"))
}

func (dcpg docdbClusterParameterGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dcpg.ref.Append("tags_all"))
}

func (dcpg docdbClusterParameterGroupAttributes) Parameter() terra.SetValue[docdbclusterparametergroup.ParameterAttributes] {
	return terra.ReferenceSet[docdbclusterparametergroup.ParameterAttributes](dcpg.ref.Append("parameter"))
}

type docdbClusterParameterGroupState struct {
	Arn         string                                      `json:"arn"`
	Description string                                      `json:"description"`
	Family      string                                      `json:"family"`
	Id          string                                      `json:"id"`
	Name        string                                      `json:"name"`
	NamePrefix  string                                      `json:"name_prefix"`
	Tags        map[string]string                           `json:"tags"`
	TagsAll     map[string]string                           `json:"tags_all"`
	Parameter   []docdbclusterparametergroup.ParameterState `json:"parameter"`
}
