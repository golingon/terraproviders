// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	servicecatalogbudgetresourceassociation "github.com/golingon/terraproviders/aws/4.60.0/servicecatalogbudgetresourceassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicecatalogBudgetResourceAssociation(name string, args ServicecatalogBudgetResourceAssociationArgs) *ServicecatalogBudgetResourceAssociation {
	return &ServicecatalogBudgetResourceAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicecatalogBudgetResourceAssociation)(nil)

type ServicecatalogBudgetResourceAssociation struct {
	Name  string
	Args  ServicecatalogBudgetResourceAssociationArgs
	state *servicecatalogBudgetResourceAssociationState
}

func (sbra *ServicecatalogBudgetResourceAssociation) Type() string {
	return "aws_servicecatalog_budget_resource_association"
}

func (sbra *ServicecatalogBudgetResourceAssociation) LocalName() string {
	return sbra.Name
}

func (sbra *ServicecatalogBudgetResourceAssociation) Configuration() interface{} {
	return sbra.Args
}

func (sbra *ServicecatalogBudgetResourceAssociation) Attributes() servicecatalogBudgetResourceAssociationAttributes {
	return servicecatalogBudgetResourceAssociationAttributes{ref: terra.ReferenceResource(sbra)}
}

func (sbra *ServicecatalogBudgetResourceAssociation) ImportState(av io.Reader) error {
	sbra.state = &servicecatalogBudgetResourceAssociationState{}
	if err := json.NewDecoder(av).Decode(sbra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbra.Type(), sbra.LocalName(), err)
	}
	return nil
}

func (sbra *ServicecatalogBudgetResourceAssociation) State() (*servicecatalogBudgetResourceAssociationState, bool) {
	return sbra.state, sbra.state != nil
}

func (sbra *ServicecatalogBudgetResourceAssociation) StateMust() *servicecatalogBudgetResourceAssociationState {
	if sbra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbra.Type(), sbra.LocalName()))
	}
	return sbra.state
}

func (sbra *ServicecatalogBudgetResourceAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(sbra)
}

type ServicecatalogBudgetResourceAssociationArgs struct {
	// BudgetName: string, required
	BudgetName terra.StringValue `hcl:"budget_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ResourceId: string, required
	ResourceId terra.StringValue `hcl:"resource_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *servicecatalogbudgetresourceassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServicecatalogBudgetResourceAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicecatalogBudgetResourceAssociationAttributes struct {
	ref terra.Reference
}

func (sbra servicecatalogBudgetResourceAssociationAttributes) BudgetName() terra.StringValue {
	return terra.ReferenceString(sbra.ref.Append("budget_name"))
}

func (sbra servicecatalogBudgetResourceAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbra.ref.Append("id"))
}

func (sbra servicecatalogBudgetResourceAssociationAttributes) ResourceId() terra.StringValue {
	return terra.ReferenceString(sbra.ref.Append("resource_id"))
}

func (sbra servicecatalogBudgetResourceAssociationAttributes) Timeouts() servicecatalogbudgetresourceassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[servicecatalogbudgetresourceassociation.TimeoutsAttributes](sbra.ref.Append("timeouts"))
}

type servicecatalogBudgetResourceAssociationState struct {
	BudgetName string                                                 `json:"budget_name"`
	Id         string                                                 `json:"id"`
	ResourceId string                                                 `json:"resource_id"`
	Timeouts   *servicecatalogbudgetresourceassociation.TimeoutsState `json:"timeouts"`
}
