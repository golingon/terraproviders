// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	macie2findingsfilter "github.com/golingon/terraproviders/aws/4.60.0/macie2findingsfilter"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMacie2FindingsFilter(name string, args Macie2FindingsFilterArgs) *Macie2FindingsFilter {
	return &Macie2FindingsFilter{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Macie2FindingsFilter)(nil)

type Macie2FindingsFilter struct {
	Name  string
	Args  Macie2FindingsFilterArgs
	state *macie2FindingsFilterState
}

func (mff *Macie2FindingsFilter) Type() string {
	return "aws_macie2_findings_filter"
}

func (mff *Macie2FindingsFilter) LocalName() string {
	return mff.Name
}

func (mff *Macie2FindingsFilter) Configuration() interface{} {
	return mff.Args
}

func (mff *Macie2FindingsFilter) Attributes() macie2FindingsFilterAttributes {
	return macie2FindingsFilterAttributes{ref: terra.ReferenceResource(mff)}
}

func (mff *Macie2FindingsFilter) ImportState(av io.Reader) error {
	mff.state = &macie2FindingsFilterState{}
	if err := json.NewDecoder(av).Decode(mff.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mff.Type(), mff.LocalName(), err)
	}
	return nil
}

func (mff *Macie2FindingsFilter) State() (*macie2FindingsFilterState, bool) {
	return mff.state, mff.state != nil
}

func (mff *Macie2FindingsFilter) StateMust() *macie2FindingsFilterState {
	if mff.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mff.Type(), mff.LocalName()))
	}
	return mff.state
}

func (mff *Macie2FindingsFilter) DependOn() terra.Reference {
	return terra.ReferenceResource(mff)
}

type Macie2FindingsFilterArgs struct {
	// Action: string, required
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Position: number, optional
	Position terra.NumberValue `hcl:"position,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// FindingCriteria: required
	FindingCriteria *macie2findingsfilter.FindingCriteria `hcl:"finding_criteria,block" validate:"required"`
	// DependsOn contains resources that Macie2FindingsFilter depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type macie2FindingsFilterAttributes struct {
	ref terra.Reference
}

func (mff macie2FindingsFilterAttributes) Action() terra.StringValue {
	return terra.ReferenceString(mff.ref.Append("action"))
}

func (mff macie2FindingsFilterAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(mff.ref.Append("arn"))
}

func (mff macie2FindingsFilterAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mff.ref.Append("description"))
}

func (mff macie2FindingsFilterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mff.ref.Append("id"))
}

func (mff macie2FindingsFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mff.ref.Append("name"))
}

func (mff macie2FindingsFilterAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(mff.ref.Append("name_prefix"))
}

func (mff macie2FindingsFilterAttributes) Position() terra.NumberValue {
	return terra.ReferenceNumber(mff.ref.Append("position"))
}

func (mff macie2FindingsFilterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mff.ref.Append("tags"))
}

func (mff macie2FindingsFilterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mff.ref.Append("tags_all"))
}

func (mff macie2FindingsFilterAttributes) FindingCriteria() terra.ListValue[macie2findingsfilter.FindingCriteriaAttributes] {
	return terra.ReferenceList[macie2findingsfilter.FindingCriteriaAttributes](mff.ref.Append("finding_criteria"))
}

type macie2FindingsFilterState struct {
	Action          string                                      `json:"action"`
	Arn             string                                      `json:"arn"`
	Description     string                                      `json:"description"`
	Id              string                                      `json:"id"`
	Name            string                                      `json:"name"`
	NamePrefix      string                                      `json:"name_prefix"`
	Position        float64                                     `json:"position"`
	Tags            map[string]string                           `json:"tags"`
	TagsAll         map[string]string                           `json:"tags_all"`
	FindingCriteria []macie2findingsfilter.FindingCriteriaState `json:"finding_criteria"`
}
