// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	oamsink "github.com/golingon/terraproviders/aws/4.60.0/oamsink"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOamSink(name string, args OamSinkArgs) *OamSink {
	return &OamSink{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OamSink)(nil)

type OamSink struct {
	Name  string
	Args  OamSinkArgs
	state *oamSinkState
}

func (os *OamSink) Type() string {
	return "aws_oam_sink"
}

func (os *OamSink) LocalName() string {
	return os.Name
}

func (os *OamSink) Configuration() interface{} {
	return os.Args
}

func (os *OamSink) Attributes() oamSinkAttributes {
	return oamSinkAttributes{ref: terra.ReferenceResource(os)}
}

func (os *OamSink) ImportState(av io.Reader) error {
	os.state = &oamSinkState{}
	if err := json.NewDecoder(av).Decode(os.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", os.Type(), os.LocalName(), err)
	}
	return nil
}

func (os *OamSink) State() (*oamSinkState, bool) {
	return os.state, os.state != nil
}

func (os *OamSink) StateMust() *oamSinkState {
	if os.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", os.Type(), os.LocalName()))
	}
	return os.state
}

func (os *OamSink) DependOn() terra.Reference {
	return terra.ReferenceResource(os)
}

type OamSinkArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *oamsink.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that OamSink depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type oamSinkAttributes struct {
	ref terra.Reference
}

func (os oamSinkAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("arn"))
}

func (os oamSinkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("id"))
}

func (os oamSinkAttributes) Name() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("name"))
}

func (os oamSinkAttributes) SinkId() terra.StringValue {
	return terra.ReferenceString(os.ref.Append("sink_id"))
}

func (os oamSinkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](os.ref.Append("tags"))
}

func (os oamSinkAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](os.ref.Append("tags_all"))
}

func (os oamSinkAttributes) Timeouts() oamsink.TimeoutsAttributes {
	return terra.ReferenceSingle[oamsink.TimeoutsAttributes](os.ref.Append("timeouts"))
}

type oamSinkState struct {
	Arn      string                 `json:"arn"`
	Id       string                 `json:"id"`
	Name     string                 `json:"name"`
	SinkId   string                 `json:"sink_id"`
	Tags     map[string]string      `json:"tags"`
	TagsAll  map[string]string      `json:"tags_all"`
	Timeouts *oamsink.TimeoutsState `json:"timeouts"`
}
