// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLakeformationResource(name string, args LakeformationResourceArgs) *LakeformationResource {
	return &LakeformationResource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LakeformationResource)(nil)

type LakeformationResource struct {
	Name  string
	Args  LakeformationResourceArgs
	state *lakeformationResourceState
}

func (lr *LakeformationResource) Type() string {
	return "aws_lakeformation_resource"
}

func (lr *LakeformationResource) LocalName() string {
	return lr.Name
}

func (lr *LakeformationResource) Configuration() interface{} {
	return lr.Args
}

func (lr *LakeformationResource) Attributes() lakeformationResourceAttributes {
	return lakeformationResourceAttributes{ref: terra.ReferenceResource(lr)}
}

func (lr *LakeformationResource) ImportState(av io.Reader) error {
	lr.state = &lakeformationResourceState{}
	if err := json.NewDecoder(av).Decode(lr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lr.Type(), lr.LocalName(), err)
	}
	return nil
}

func (lr *LakeformationResource) State() (*lakeformationResourceState, bool) {
	return lr.state, lr.state != nil
}

func (lr *LakeformationResource) StateMust() *lakeformationResourceState {
	if lr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lr.Type(), lr.LocalName()))
	}
	return lr.state
}

func (lr *LakeformationResource) DependOn() terra.Reference {
	return terra.ReferenceResource(lr)
}

type LakeformationResourceArgs struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// DependsOn contains resources that LakeformationResource depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lakeformationResourceAttributes struct {
	ref terra.Reference
}

func (lr lakeformationResourceAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("arn"))
}

func (lr lakeformationResourceAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("id"))
}

func (lr lakeformationResourceAttributes) LastModified() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("last_modified"))
}

func (lr lakeformationResourceAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceString(lr.ref.Append("role_arn"))
}

type lakeformationResourceState struct {
	Arn          string `json:"arn"`
	Id           string `json:"id"`
	LastModified string `json:"last_modified"`
	RoleArn      string `json:"role_arn"`
}
