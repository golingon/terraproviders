// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkmanagerconnection "github.com/golingon/terraproviders/aws/4.60.0/networkmanagerconnection"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkmanagerConnection(name string, args NetworkmanagerConnectionArgs) *NetworkmanagerConnection {
	return &NetworkmanagerConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkmanagerConnection)(nil)

type NetworkmanagerConnection struct {
	Name  string
	Args  NetworkmanagerConnectionArgs
	state *networkmanagerConnectionState
}

func (nc *NetworkmanagerConnection) Type() string {
	return "aws_networkmanager_connection"
}

func (nc *NetworkmanagerConnection) LocalName() string {
	return nc.Name
}

func (nc *NetworkmanagerConnection) Configuration() interface{} {
	return nc.Args
}

func (nc *NetworkmanagerConnection) Attributes() networkmanagerConnectionAttributes {
	return networkmanagerConnectionAttributes{ref: terra.ReferenceResource(nc)}
}

func (nc *NetworkmanagerConnection) ImportState(av io.Reader) error {
	nc.state = &networkmanagerConnectionState{}
	if err := json.NewDecoder(av).Decode(nc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", nc.Type(), nc.LocalName(), err)
	}
	return nil
}

func (nc *NetworkmanagerConnection) State() (*networkmanagerConnectionState, bool) {
	return nc.state, nc.state != nil
}

func (nc *NetworkmanagerConnection) StateMust() *networkmanagerConnectionState {
	if nc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", nc.Type(), nc.LocalName()))
	}
	return nc.state
}

func (nc *NetworkmanagerConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(nc)
}

type NetworkmanagerConnectionArgs struct {
	// ConnectedDeviceId: string, required
	ConnectedDeviceId terra.StringValue `hcl:"connected_device_id,attr" validate:"required"`
	// ConnectedLinkId: string, optional
	ConnectedLinkId terra.StringValue `hcl:"connected_link_id,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DeviceId: string, required
	DeviceId terra.StringValue `hcl:"device_id,attr" validate:"required"`
	// GlobalNetworkId: string, required
	GlobalNetworkId terra.StringValue `hcl:"global_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkId: string, optional
	LinkId terra.StringValue `hcl:"link_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *networkmanagerconnection.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkmanagerConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkmanagerConnectionAttributes struct {
	ref terra.Reference
}

func (nc networkmanagerConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("arn"))
}

func (nc networkmanagerConnectionAttributes) ConnectedDeviceId() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("connected_device_id"))
}

func (nc networkmanagerConnectionAttributes) ConnectedLinkId() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("connected_link_id"))
}

func (nc networkmanagerConnectionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("description"))
}

func (nc networkmanagerConnectionAttributes) DeviceId() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("device_id"))
}

func (nc networkmanagerConnectionAttributes) GlobalNetworkId() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("global_network_id"))
}

func (nc networkmanagerConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("id"))
}

func (nc networkmanagerConnectionAttributes) LinkId() terra.StringValue {
	return terra.ReferenceString(nc.ref.Append("link_id"))
}

func (nc networkmanagerConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nc.ref.Append("tags"))
}

func (nc networkmanagerConnectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](nc.ref.Append("tags_all"))
}

func (nc networkmanagerConnectionAttributes) Timeouts() networkmanagerconnection.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagerconnection.TimeoutsAttributes](nc.ref.Append("timeouts"))
}

type networkmanagerConnectionState struct {
	Arn               string                                  `json:"arn"`
	ConnectedDeviceId string                                  `json:"connected_device_id"`
	ConnectedLinkId   string                                  `json:"connected_link_id"`
	Description       string                                  `json:"description"`
	DeviceId          string                                  `json:"device_id"`
	GlobalNetworkId   string                                  `json:"global_network_id"`
	Id                string                                  `json:"id"`
	LinkId            string                                  `json:"link_id"`
	Tags              map[string]string                       `json:"tags"`
	TagsAll           map[string]string                       `json:"tags_all"`
	Timeouts          *networkmanagerconnection.TimeoutsState `json:"timeouts"`
}
