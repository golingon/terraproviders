// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDatasyncLocationFsxLustreFileSystem(name string, args DatasyncLocationFsxLustreFileSystemArgs) *DatasyncLocationFsxLustreFileSystem {
	return &DatasyncLocationFsxLustreFileSystem{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DatasyncLocationFsxLustreFileSystem)(nil)

type DatasyncLocationFsxLustreFileSystem struct {
	Name  string
	Args  DatasyncLocationFsxLustreFileSystemArgs
	state *datasyncLocationFsxLustreFileSystemState
}

func (dlflfs *DatasyncLocationFsxLustreFileSystem) Type() string {
	return "aws_datasync_location_fsx_lustre_file_system"
}

func (dlflfs *DatasyncLocationFsxLustreFileSystem) LocalName() string {
	return dlflfs.Name
}

func (dlflfs *DatasyncLocationFsxLustreFileSystem) Configuration() interface{} {
	return dlflfs.Args
}

func (dlflfs *DatasyncLocationFsxLustreFileSystem) Attributes() datasyncLocationFsxLustreFileSystemAttributes {
	return datasyncLocationFsxLustreFileSystemAttributes{ref: terra.ReferenceResource(dlflfs)}
}

func (dlflfs *DatasyncLocationFsxLustreFileSystem) ImportState(av io.Reader) error {
	dlflfs.state = &datasyncLocationFsxLustreFileSystemState{}
	if err := json.NewDecoder(av).Decode(dlflfs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dlflfs.Type(), dlflfs.LocalName(), err)
	}
	return nil
}

func (dlflfs *DatasyncLocationFsxLustreFileSystem) State() (*datasyncLocationFsxLustreFileSystemState, bool) {
	return dlflfs.state, dlflfs.state != nil
}

func (dlflfs *DatasyncLocationFsxLustreFileSystem) StateMust() *datasyncLocationFsxLustreFileSystemState {
	if dlflfs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dlflfs.Type(), dlflfs.LocalName()))
	}
	return dlflfs.state
}

func (dlflfs *DatasyncLocationFsxLustreFileSystem) DependOn() terra.Reference {
	return terra.ReferenceResource(dlflfs)
}

type DatasyncLocationFsxLustreFileSystemArgs struct {
	// FsxFilesystemArn: string, required
	FsxFilesystemArn terra.StringValue `hcl:"fsx_filesystem_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SecurityGroupArns: set of string, required
	SecurityGroupArns terra.SetValue[terra.StringValue] `hcl:"security_group_arns,attr" validate:"required"`
	// Subdirectory: string, optional
	Subdirectory terra.StringValue `hcl:"subdirectory,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that DatasyncLocationFsxLustreFileSystem depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type datasyncLocationFsxLustreFileSystemAttributes struct {
	ref terra.Reference
}

func (dlflfs datasyncLocationFsxLustreFileSystemAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dlflfs.ref.Append("arn"))
}

func (dlflfs datasyncLocationFsxLustreFileSystemAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceString(dlflfs.ref.Append("creation_time"))
}

func (dlflfs datasyncLocationFsxLustreFileSystemAttributes) FsxFilesystemArn() terra.StringValue {
	return terra.ReferenceString(dlflfs.ref.Append("fsx_filesystem_arn"))
}

func (dlflfs datasyncLocationFsxLustreFileSystemAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dlflfs.ref.Append("id"))
}

func (dlflfs datasyncLocationFsxLustreFileSystemAttributes) SecurityGroupArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](dlflfs.ref.Append("security_group_arns"))
}

func (dlflfs datasyncLocationFsxLustreFileSystemAttributes) Subdirectory() terra.StringValue {
	return terra.ReferenceString(dlflfs.ref.Append("subdirectory"))
}

func (dlflfs datasyncLocationFsxLustreFileSystemAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dlflfs.ref.Append("tags"))
}

func (dlflfs datasyncLocationFsxLustreFileSystemAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dlflfs.ref.Append("tags_all"))
}

func (dlflfs datasyncLocationFsxLustreFileSystemAttributes) Uri() terra.StringValue {
	return terra.ReferenceString(dlflfs.ref.Append("uri"))
}

type datasyncLocationFsxLustreFileSystemState struct {
	Arn               string            `json:"arn"`
	CreationTime      string            `json:"creation_time"`
	FsxFilesystemArn  string            `json:"fsx_filesystem_arn"`
	Id                string            `json:"id"`
	SecurityGroupArns []string          `json:"security_group_arns"`
	Subdirectory      string            `json:"subdirectory"`
	Tags              map[string]string `json:"tags"`
	TagsAll           map[string]string `json:"tags_all"`
	Uri               string            `json:"uri"`
}
