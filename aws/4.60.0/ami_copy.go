// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	amicopy "github.com/golingon/terraproviders/aws/4.60.0/amicopy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAmiCopy(name string, args AmiCopyArgs) *AmiCopy {
	return &AmiCopy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AmiCopy)(nil)

type AmiCopy struct {
	Name  string
	Args  AmiCopyArgs
	state *amiCopyState
}

func (ac *AmiCopy) Type() string {
	return "aws_ami_copy"
}

func (ac *AmiCopy) LocalName() string {
	return ac.Name
}

func (ac *AmiCopy) Configuration() interface{} {
	return ac.Args
}

func (ac *AmiCopy) Attributes() amiCopyAttributes {
	return amiCopyAttributes{ref: terra.ReferenceResource(ac)}
}

func (ac *AmiCopy) ImportState(av io.Reader) error {
	ac.state = &amiCopyState{}
	if err := json.NewDecoder(av).Decode(ac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ac.Type(), ac.LocalName(), err)
	}
	return nil
}

func (ac *AmiCopy) State() (*amiCopyState, bool) {
	return ac.state, ac.state != nil
}

func (ac *AmiCopy) StateMust() *amiCopyState {
	if ac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ac.Type(), ac.LocalName()))
	}
	return ac.state
}

func (ac *AmiCopy) DependOn() terra.Reference {
	return terra.ReferenceResource(ac)
}

type AmiCopyArgs struct {
	// DeprecationTime: string, optional
	DeprecationTime terra.StringValue `hcl:"deprecation_time,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DestinationOutpostArn: string, optional
	DestinationOutpostArn terra.StringValue `hcl:"destination_outpost_arn,attr"`
	// Encrypted: bool, optional
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SourceAmiId: string, required
	SourceAmiId terra.StringValue `hcl:"source_ami_id,attr" validate:"required"`
	// SourceAmiRegion: string, required
	SourceAmiRegion terra.StringValue `hcl:"source_ami_region,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// EbsBlockDevice: min=0
	EbsBlockDevice []amicopy.EbsBlockDevice `hcl:"ebs_block_device,block" validate:"min=0"`
	// EphemeralBlockDevice: min=0
	EphemeralBlockDevice []amicopy.EphemeralBlockDevice `hcl:"ephemeral_block_device,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *amicopy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that AmiCopy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type amiCopyAttributes struct {
	ref terra.Reference
}

func (ac amiCopyAttributes) Architecture() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("architecture"))
}

func (ac amiCopyAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("arn"))
}

func (ac amiCopyAttributes) BootMode() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("boot_mode"))
}

func (ac amiCopyAttributes) DeprecationTime() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("deprecation_time"))
}

func (ac amiCopyAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("description"))
}

func (ac amiCopyAttributes) DestinationOutpostArn() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("destination_outpost_arn"))
}

func (ac amiCopyAttributes) EnaSupport() terra.BoolValue {
	return terra.ReferenceBool(ac.ref.Append("ena_support"))
}

func (ac amiCopyAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceBool(ac.ref.Append("encrypted"))
}

func (ac amiCopyAttributes) Hypervisor() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("hypervisor"))
}

func (ac amiCopyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("id"))
}

func (ac amiCopyAttributes) ImageLocation() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("image_location"))
}

func (ac amiCopyAttributes) ImageOwnerAlias() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("image_owner_alias"))
}

func (ac amiCopyAttributes) ImageType() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("image_type"))
}

func (ac amiCopyAttributes) ImdsSupport() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("imds_support"))
}

func (ac amiCopyAttributes) KernelId() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("kernel_id"))
}

func (ac amiCopyAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("kms_key_id"))
}

func (ac amiCopyAttributes) ManageEbsSnapshots() terra.BoolValue {
	return terra.ReferenceBool(ac.ref.Append("manage_ebs_snapshots"))
}

func (ac amiCopyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("name"))
}

func (ac amiCopyAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("owner_id"))
}

func (ac amiCopyAttributes) Platform() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("platform"))
}

func (ac amiCopyAttributes) PlatformDetails() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("platform_details"))
}

func (ac amiCopyAttributes) Public() terra.BoolValue {
	return terra.ReferenceBool(ac.ref.Append("public"))
}

func (ac amiCopyAttributes) RamdiskId() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("ramdisk_id"))
}

func (ac amiCopyAttributes) RootDeviceName() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("root_device_name"))
}

func (ac amiCopyAttributes) RootSnapshotId() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("root_snapshot_id"))
}

func (ac amiCopyAttributes) SourceAmiId() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("source_ami_id"))
}

func (ac amiCopyAttributes) SourceAmiRegion() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("source_ami_region"))
}

func (ac amiCopyAttributes) SriovNetSupport() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("sriov_net_support"))
}

func (ac amiCopyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ac.ref.Append("tags"))
}

func (ac amiCopyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ac.ref.Append("tags_all"))
}

func (ac amiCopyAttributes) TpmSupport() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("tpm_support"))
}

func (ac amiCopyAttributes) UsageOperation() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("usage_operation"))
}

func (ac amiCopyAttributes) VirtualizationType() terra.StringValue {
	return terra.ReferenceString(ac.ref.Append("virtualization_type"))
}

func (ac amiCopyAttributes) EbsBlockDevice() terra.SetValue[amicopy.EbsBlockDeviceAttributes] {
	return terra.ReferenceSet[amicopy.EbsBlockDeviceAttributes](ac.ref.Append("ebs_block_device"))
}

func (ac amiCopyAttributes) EphemeralBlockDevice() terra.SetValue[amicopy.EphemeralBlockDeviceAttributes] {
	return terra.ReferenceSet[amicopy.EphemeralBlockDeviceAttributes](ac.ref.Append("ephemeral_block_device"))
}

func (ac amiCopyAttributes) Timeouts() amicopy.TimeoutsAttributes {
	return terra.ReferenceSingle[amicopy.TimeoutsAttributes](ac.ref.Append("timeouts"))
}

type amiCopyState struct {
	Architecture          string                              `json:"architecture"`
	Arn                   string                              `json:"arn"`
	BootMode              string                              `json:"boot_mode"`
	DeprecationTime       string                              `json:"deprecation_time"`
	Description           string                              `json:"description"`
	DestinationOutpostArn string                              `json:"destination_outpost_arn"`
	EnaSupport            bool                                `json:"ena_support"`
	Encrypted             bool                                `json:"encrypted"`
	Hypervisor            string                              `json:"hypervisor"`
	Id                    string                              `json:"id"`
	ImageLocation         string                              `json:"image_location"`
	ImageOwnerAlias       string                              `json:"image_owner_alias"`
	ImageType             string                              `json:"image_type"`
	ImdsSupport           string                              `json:"imds_support"`
	KernelId              string                              `json:"kernel_id"`
	KmsKeyId              string                              `json:"kms_key_id"`
	ManageEbsSnapshots    bool                                `json:"manage_ebs_snapshots"`
	Name                  string                              `json:"name"`
	OwnerId               string                              `json:"owner_id"`
	Platform              string                              `json:"platform"`
	PlatformDetails       string                              `json:"platform_details"`
	Public                bool                                `json:"public"`
	RamdiskId             string                              `json:"ramdisk_id"`
	RootDeviceName        string                              `json:"root_device_name"`
	RootSnapshotId        string                              `json:"root_snapshot_id"`
	SourceAmiId           string                              `json:"source_ami_id"`
	SourceAmiRegion       string                              `json:"source_ami_region"`
	SriovNetSupport       string                              `json:"sriov_net_support"`
	Tags                  map[string]string                   `json:"tags"`
	TagsAll               map[string]string                   `json:"tags_all"`
	TpmSupport            string                              `json:"tpm_support"`
	UsageOperation        string                              `json:"usage_operation"`
	VirtualizationType    string                              `json:"virtualization_type"`
	EbsBlockDevice        []amicopy.EbsBlockDeviceState       `json:"ebs_block_device"`
	EphemeralBlockDevice  []amicopy.EphemeralBlockDeviceState `json:"ephemeral_block_device"`
	Timeouts              *amicopy.TimeoutsState              `json:"timeouts"`
}
