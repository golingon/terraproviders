// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCodestarconnectionsConnection(name string, args CodestarconnectionsConnectionArgs) *CodestarconnectionsConnection {
	return &CodestarconnectionsConnection{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodestarconnectionsConnection)(nil)

type CodestarconnectionsConnection struct {
	Name  string
	Args  CodestarconnectionsConnectionArgs
	state *codestarconnectionsConnectionState
}

func (cc *CodestarconnectionsConnection) Type() string {
	return "aws_codestarconnections_connection"
}

func (cc *CodestarconnectionsConnection) LocalName() string {
	return cc.Name
}

func (cc *CodestarconnectionsConnection) Configuration() interface{} {
	return cc.Args
}

func (cc *CodestarconnectionsConnection) Attributes() codestarconnectionsConnectionAttributes {
	return codestarconnectionsConnectionAttributes{ref: terra.ReferenceResource(cc)}
}

func (cc *CodestarconnectionsConnection) ImportState(av io.Reader) error {
	cc.state = &codestarconnectionsConnectionState{}
	if err := json.NewDecoder(av).Decode(cc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cc.Type(), cc.LocalName(), err)
	}
	return nil
}

func (cc *CodestarconnectionsConnection) State() (*codestarconnectionsConnectionState, bool) {
	return cc.state, cc.state != nil
}

func (cc *CodestarconnectionsConnection) StateMust() *codestarconnectionsConnectionState {
	if cc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cc.Type(), cc.LocalName()))
	}
	return cc.state
}

func (cc *CodestarconnectionsConnection) DependOn() terra.Reference {
	return terra.ReferenceResource(cc)
}

type CodestarconnectionsConnectionArgs struct {
	// HostArn: string, optional
	HostArn terra.StringValue `hcl:"host_arn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProviderType: string, optional
	ProviderType terra.StringValue `hcl:"provider_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that CodestarconnectionsConnection depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type codestarconnectionsConnectionAttributes struct {
	ref terra.Reference
}

func (cc codestarconnectionsConnectionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cc.ref.Append("arn"))
}

func (cc codestarconnectionsConnectionAttributes) ConnectionStatus() terra.StringValue {
	return terra.ReferenceString(cc.ref.Append("connection_status"))
}

func (cc codestarconnectionsConnectionAttributes) HostArn() terra.StringValue {
	return terra.ReferenceString(cc.ref.Append("host_arn"))
}

func (cc codestarconnectionsConnectionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cc.ref.Append("id"))
}

func (cc codestarconnectionsConnectionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cc.ref.Append("name"))
}

func (cc codestarconnectionsConnectionAttributes) ProviderType() terra.StringValue {
	return terra.ReferenceString(cc.ref.Append("provider_type"))
}

func (cc codestarconnectionsConnectionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cc.ref.Append("tags"))
}

func (cc codestarconnectionsConnectionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cc.ref.Append("tags_all"))
}

type codestarconnectionsConnectionState struct {
	Arn              string            `json:"arn"`
	ConnectionStatus string            `json:"connection_status"`
	HostArn          string            `json:"host_arn"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	ProviderType     string            `json:"provider_type"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
}
