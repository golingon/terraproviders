// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigatewayv2RouteResponse(name string, args Apigatewayv2RouteResponseArgs) *Apigatewayv2RouteResponse {
	return &Apigatewayv2RouteResponse{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Apigatewayv2RouteResponse)(nil)

type Apigatewayv2RouteResponse struct {
	Name  string
	Args  Apigatewayv2RouteResponseArgs
	state *apigatewayv2RouteResponseState
}

func (arr *Apigatewayv2RouteResponse) Type() string {
	return "aws_apigatewayv2_route_response"
}

func (arr *Apigatewayv2RouteResponse) LocalName() string {
	return arr.Name
}

func (arr *Apigatewayv2RouteResponse) Configuration() interface{} {
	return arr.Args
}

func (arr *Apigatewayv2RouteResponse) Attributes() apigatewayv2RouteResponseAttributes {
	return apigatewayv2RouteResponseAttributes{ref: terra.ReferenceResource(arr)}
}

func (arr *Apigatewayv2RouteResponse) ImportState(av io.Reader) error {
	arr.state = &apigatewayv2RouteResponseState{}
	if err := json.NewDecoder(av).Decode(arr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arr.Type(), arr.LocalName(), err)
	}
	return nil
}

func (arr *Apigatewayv2RouteResponse) State() (*apigatewayv2RouteResponseState, bool) {
	return arr.state, arr.state != nil
}

func (arr *Apigatewayv2RouteResponse) StateMust() *apigatewayv2RouteResponseState {
	if arr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arr.Type(), arr.LocalName()))
	}
	return arr.state
}

func (arr *Apigatewayv2RouteResponse) DependOn() terra.Reference {
	return terra.ReferenceResource(arr)
}

type Apigatewayv2RouteResponseArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ModelSelectionExpression: string, optional
	ModelSelectionExpression terra.StringValue `hcl:"model_selection_expression,attr"`
	// ResponseModels: map of string, optional
	ResponseModels terra.MapValue[terra.StringValue] `hcl:"response_models,attr"`
	// RouteId: string, required
	RouteId terra.StringValue `hcl:"route_id,attr" validate:"required"`
	// RouteResponseKey: string, required
	RouteResponseKey terra.StringValue `hcl:"route_response_key,attr" validate:"required"`
	// DependsOn contains resources that Apigatewayv2RouteResponse depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigatewayv2RouteResponseAttributes struct {
	ref terra.Reference
}

func (arr apigatewayv2RouteResponseAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(arr.ref.Append("api_id"))
}

func (arr apigatewayv2RouteResponseAttributes) Id() terra.StringValue {
	return terra.ReferenceString(arr.ref.Append("id"))
}

func (arr apigatewayv2RouteResponseAttributes) ModelSelectionExpression() terra.StringValue {
	return terra.ReferenceString(arr.ref.Append("model_selection_expression"))
}

func (arr apigatewayv2RouteResponseAttributes) ResponseModels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](arr.ref.Append("response_models"))
}

func (arr apigatewayv2RouteResponseAttributes) RouteId() terra.StringValue {
	return terra.ReferenceString(arr.ref.Append("route_id"))
}

func (arr apigatewayv2RouteResponseAttributes) RouteResponseKey() terra.StringValue {
	return terra.ReferenceString(arr.ref.Append("route_response_key"))
}

type apigatewayv2RouteResponseState struct {
	ApiId                    string            `json:"api_id"`
	Id                       string            `json:"id"`
	ModelSelectionExpression string            `json:"model_selection_expression"`
	ResponseModels           map[string]string `json:"response_models"`
	RouteId                  string            `json:"route_id"`
	RouteResponseKey         string            `json:"route_response_key"`
}
