// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDataexchangeRevision(name string, args DataexchangeRevisionArgs) *DataexchangeRevision {
	return &DataexchangeRevision{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DataexchangeRevision)(nil)

type DataexchangeRevision struct {
	Name  string
	Args  DataexchangeRevisionArgs
	state *dataexchangeRevisionState
}

func (dr *DataexchangeRevision) Type() string {
	return "aws_dataexchange_revision"
}

func (dr *DataexchangeRevision) LocalName() string {
	return dr.Name
}

func (dr *DataexchangeRevision) Configuration() interface{} {
	return dr.Args
}

func (dr *DataexchangeRevision) Attributes() dataexchangeRevisionAttributes {
	return dataexchangeRevisionAttributes{ref: terra.ReferenceResource(dr)}
}

func (dr *DataexchangeRevision) ImportState(av io.Reader) error {
	dr.state = &dataexchangeRevisionState{}
	if err := json.NewDecoder(av).Decode(dr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dr.Type(), dr.LocalName(), err)
	}
	return nil
}

func (dr *DataexchangeRevision) State() (*dataexchangeRevisionState, bool) {
	return dr.state, dr.state != nil
}

func (dr *DataexchangeRevision) StateMust() *dataexchangeRevisionState {
	if dr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dr.Type(), dr.LocalName()))
	}
	return dr.state
}

func (dr *DataexchangeRevision) DependOn() terra.Reference {
	return terra.ReferenceResource(dr)
}

type DataexchangeRevisionArgs struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// DataSetId: string, required
	DataSetId terra.StringValue `hcl:"data_set_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that DataexchangeRevision depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dataexchangeRevisionAttributes struct {
	ref terra.Reference
}

func (dr dataexchangeRevisionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dr.ref.Append("arn"))
}

func (dr dataexchangeRevisionAttributes) Comment() terra.StringValue {
	return terra.ReferenceString(dr.ref.Append("comment"))
}

func (dr dataexchangeRevisionAttributes) DataSetId() terra.StringValue {
	return terra.ReferenceString(dr.ref.Append("data_set_id"))
}

func (dr dataexchangeRevisionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dr.ref.Append("id"))
}

func (dr dataexchangeRevisionAttributes) RevisionId() terra.StringValue {
	return terra.ReferenceString(dr.ref.Append("revision_id"))
}

func (dr dataexchangeRevisionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dr.ref.Append("tags"))
}

func (dr dataexchangeRevisionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dr.ref.Append("tags_all"))
}

type dataexchangeRevisionState struct {
	Arn        string            `json:"arn"`
	Comment    string            `json:"comment"`
	DataSetId  string            `json:"data_set_id"`
	Id         string            `json:"id"`
	RevisionId string            `json:"revision_id"`
	Tags       map[string]string `json:"tags"`
	TagsAll    map[string]string `json:"tags_all"`
}
