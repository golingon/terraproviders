// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	sagemakerproject "github.com/golingon/terraproviders/aws/4.60.0/sagemakerproject"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSagemakerProject(name string, args SagemakerProjectArgs) *SagemakerProject {
	return &SagemakerProject{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SagemakerProject)(nil)

type SagemakerProject struct {
	Name  string
	Args  SagemakerProjectArgs
	state *sagemakerProjectState
}

func (sp *SagemakerProject) Type() string {
	return "aws_sagemaker_project"
}

func (sp *SagemakerProject) LocalName() string {
	return sp.Name
}

func (sp *SagemakerProject) Configuration() interface{} {
	return sp.Args
}

func (sp *SagemakerProject) Attributes() sagemakerProjectAttributes {
	return sagemakerProjectAttributes{ref: terra.ReferenceResource(sp)}
}

func (sp *SagemakerProject) ImportState(av io.Reader) error {
	sp.state = &sagemakerProjectState{}
	if err := json.NewDecoder(av).Decode(sp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sp.Type(), sp.LocalName(), err)
	}
	return nil
}

func (sp *SagemakerProject) State() (*sagemakerProjectState, bool) {
	return sp.state, sp.state != nil
}

func (sp *SagemakerProject) StateMust() *sagemakerProjectState {
	if sp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sp.Type(), sp.LocalName()))
	}
	return sp.state
}

func (sp *SagemakerProject) DependOn() terra.Reference {
	return terra.ReferenceResource(sp)
}

type SagemakerProjectArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ProjectDescription: string, optional
	ProjectDescription terra.StringValue `hcl:"project_description,attr"`
	// ProjectName: string, required
	ProjectName terra.StringValue `hcl:"project_name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ServiceCatalogProvisioningDetails: required
	ServiceCatalogProvisioningDetails *sagemakerproject.ServiceCatalogProvisioningDetails `hcl:"service_catalog_provisioning_details,block" validate:"required"`
	// DependsOn contains resources that SagemakerProject depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sagemakerProjectAttributes struct {
	ref terra.Reference
}

func (sp sagemakerProjectAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("arn"))
}

func (sp sagemakerProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("id"))
}

func (sp sagemakerProjectAttributes) ProjectDescription() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("project_description"))
}

func (sp sagemakerProjectAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("project_id"))
}

func (sp sagemakerProjectAttributes) ProjectName() terra.StringValue {
	return terra.ReferenceString(sp.ref.Append("project_name"))
}

func (sp sagemakerProjectAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sp.ref.Append("tags"))
}

func (sp sagemakerProjectAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sp.ref.Append("tags_all"))
}

func (sp sagemakerProjectAttributes) ServiceCatalogProvisioningDetails() terra.ListValue[sagemakerproject.ServiceCatalogProvisioningDetailsAttributes] {
	return terra.ReferenceList[sagemakerproject.ServiceCatalogProvisioningDetailsAttributes](sp.ref.Append("service_catalog_provisioning_details"))
}

type sagemakerProjectState struct {
	Arn                               string                                                    `json:"arn"`
	Id                                string                                                    `json:"id"`
	ProjectDescription                string                                                    `json:"project_description"`
	ProjectId                         string                                                    `json:"project_id"`
	ProjectName                       string                                                    `json:"project_name"`
	Tags                              map[string]string                                         `json:"tags"`
	TagsAll                           map[string]string                                         `json:"tags_all"`
	ServiceCatalogProvisioningDetails []sagemakerproject.ServiceCatalogProvisioningDetailsState `json:"service_catalog_provisioning_details"`
}
