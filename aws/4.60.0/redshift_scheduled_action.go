// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	redshiftscheduledaction "github.com/golingon/terraproviders/aws/4.60.0/redshiftscheduledaction"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftScheduledAction(name string, args RedshiftScheduledActionArgs) *RedshiftScheduledAction {
	return &RedshiftScheduledAction{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftScheduledAction)(nil)

type RedshiftScheduledAction struct {
	Name  string
	Args  RedshiftScheduledActionArgs
	state *redshiftScheduledActionState
}

func (rsa *RedshiftScheduledAction) Type() string {
	return "aws_redshift_scheduled_action"
}

func (rsa *RedshiftScheduledAction) LocalName() string {
	return rsa.Name
}

func (rsa *RedshiftScheduledAction) Configuration() interface{} {
	return rsa.Args
}

func (rsa *RedshiftScheduledAction) Attributes() redshiftScheduledActionAttributes {
	return redshiftScheduledActionAttributes{ref: terra.ReferenceResource(rsa)}
}

func (rsa *RedshiftScheduledAction) ImportState(av io.Reader) error {
	rsa.state = &redshiftScheduledActionState{}
	if err := json.NewDecoder(av).Decode(rsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rsa.Type(), rsa.LocalName(), err)
	}
	return nil
}

func (rsa *RedshiftScheduledAction) State() (*redshiftScheduledActionState, bool) {
	return rsa.state, rsa.state != nil
}

func (rsa *RedshiftScheduledAction) StateMust() *redshiftScheduledActionState {
	if rsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rsa.Type(), rsa.LocalName()))
	}
	return rsa.state
}

func (rsa *RedshiftScheduledAction) DependOn() terra.Reference {
	return terra.ReferenceResource(rsa)
}

type RedshiftScheduledActionArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Enable: bool, optional
	Enable terra.BoolValue `hcl:"enable,attr"`
	// EndTime: string, optional
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// IamRole: string, required
	IamRole terra.StringValue `hcl:"iam_role,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Schedule: string, required
	Schedule terra.StringValue `hcl:"schedule,attr" validate:"required"`
	// StartTime: string, optional
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// TargetAction: required
	TargetAction *redshiftscheduledaction.TargetAction `hcl:"target_action,block" validate:"required"`
	// DependsOn contains resources that RedshiftScheduledAction depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftScheduledActionAttributes struct {
	ref terra.Reference
}

func (rsa redshiftScheduledActionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(rsa.ref.Append("description"))
}

func (rsa redshiftScheduledActionAttributes) Enable() terra.BoolValue {
	return terra.ReferenceBool(rsa.ref.Append("enable"))
}

func (rsa redshiftScheduledActionAttributes) EndTime() terra.StringValue {
	return terra.ReferenceString(rsa.ref.Append("end_time"))
}

func (rsa redshiftScheduledActionAttributes) IamRole() terra.StringValue {
	return terra.ReferenceString(rsa.ref.Append("iam_role"))
}

func (rsa redshiftScheduledActionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rsa.ref.Append("id"))
}

func (rsa redshiftScheduledActionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rsa.ref.Append("name"))
}

func (rsa redshiftScheduledActionAttributes) Schedule() terra.StringValue {
	return terra.ReferenceString(rsa.ref.Append("schedule"))
}

func (rsa redshiftScheduledActionAttributes) StartTime() terra.StringValue {
	return terra.ReferenceString(rsa.ref.Append("start_time"))
}

func (rsa redshiftScheduledActionAttributes) TargetAction() terra.ListValue[redshiftscheduledaction.TargetActionAttributes] {
	return terra.ReferenceList[redshiftscheduledaction.TargetActionAttributes](rsa.ref.Append("target_action"))
}

type redshiftScheduledActionState struct {
	Description  string                                      `json:"description"`
	Enable       bool                                        `json:"enable"`
	EndTime      string                                      `json:"end_time"`
	IamRole      string                                      `json:"iam_role"`
	Id           string                                      `json:"id"`
	Name         string                                      `json:"name"`
	Schedule     string                                      `json:"schedule"`
	StartTime    string                                      `json:"start_time"`
	TargetAction []redshiftscheduledaction.TargetActionState `json:"target_action"`
}
