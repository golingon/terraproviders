// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	kinesisanalyticsapplication "github.com/golingon/terraproviders/aws/4.60.0/kinesisanalyticsapplication"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKinesisAnalyticsApplication(name string, args KinesisAnalyticsApplicationArgs) *KinesisAnalyticsApplication {
	return &KinesisAnalyticsApplication{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KinesisAnalyticsApplication)(nil)

type KinesisAnalyticsApplication struct {
	Name  string
	Args  KinesisAnalyticsApplicationArgs
	state *kinesisAnalyticsApplicationState
}

func (kaa *KinesisAnalyticsApplication) Type() string {
	return "aws_kinesis_analytics_application"
}

func (kaa *KinesisAnalyticsApplication) LocalName() string {
	return kaa.Name
}

func (kaa *KinesisAnalyticsApplication) Configuration() interface{} {
	return kaa.Args
}

func (kaa *KinesisAnalyticsApplication) Attributes() kinesisAnalyticsApplicationAttributes {
	return kinesisAnalyticsApplicationAttributes{ref: terra.ReferenceResource(kaa)}
}

func (kaa *KinesisAnalyticsApplication) ImportState(av io.Reader) error {
	kaa.state = &kinesisAnalyticsApplicationState{}
	if err := json.NewDecoder(av).Decode(kaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kaa.Type(), kaa.LocalName(), err)
	}
	return nil
}

func (kaa *KinesisAnalyticsApplication) State() (*kinesisAnalyticsApplicationState, bool) {
	return kaa.state, kaa.state != nil
}

func (kaa *KinesisAnalyticsApplication) StateMust() *kinesisAnalyticsApplicationState {
	if kaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kaa.Type(), kaa.LocalName()))
	}
	return kaa.state
}

func (kaa *KinesisAnalyticsApplication) DependOn() terra.Reference {
	return terra.ReferenceResource(kaa)
}

type KinesisAnalyticsApplicationArgs struct {
	// Code: string, optional
	Code terra.StringValue `hcl:"code,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StartApplication: bool, optional
	StartApplication terra.BoolValue `hcl:"start_application,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CloudwatchLoggingOptions: optional
	CloudwatchLoggingOptions *kinesisanalyticsapplication.CloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// Inputs: optional
	Inputs *kinesisanalyticsapplication.Inputs `hcl:"inputs,block"`
	// Outputs: min=0,max=3
	Outputs []kinesisanalyticsapplication.Outputs `hcl:"outputs,block" validate:"min=0,max=3"`
	// ReferenceDataSources: optional
	ReferenceDataSources *kinesisanalyticsapplication.ReferenceDataSources `hcl:"reference_data_sources,block"`
	// DependsOn contains resources that KinesisAnalyticsApplication depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kinesisAnalyticsApplicationAttributes struct {
	ref terra.Reference
}

func (kaa kinesisAnalyticsApplicationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(kaa.ref.Append("arn"))
}

func (kaa kinesisAnalyticsApplicationAttributes) Code() terra.StringValue {
	return terra.ReferenceString(kaa.ref.Append("code"))
}

func (kaa kinesisAnalyticsApplicationAttributes) CreateTimestamp() terra.StringValue {
	return terra.ReferenceString(kaa.ref.Append("create_timestamp"))
}

func (kaa kinesisAnalyticsApplicationAttributes) Description() terra.StringValue {
	return terra.ReferenceString(kaa.ref.Append("description"))
}

func (kaa kinesisAnalyticsApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kaa.ref.Append("id"))
}

func (kaa kinesisAnalyticsApplicationAttributes) LastUpdateTimestamp() terra.StringValue {
	return terra.ReferenceString(kaa.ref.Append("last_update_timestamp"))
}

func (kaa kinesisAnalyticsApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(kaa.ref.Append("name"))
}

func (kaa kinesisAnalyticsApplicationAttributes) StartApplication() terra.BoolValue {
	return terra.ReferenceBool(kaa.ref.Append("start_application"))
}

func (kaa kinesisAnalyticsApplicationAttributes) Status() terra.StringValue {
	return terra.ReferenceString(kaa.ref.Append("status"))
}

func (kaa kinesisAnalyticsApplicationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](kaa.ref.Append("tags"))
}

func (kaa kinesisAnalyticsApplicationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](kaa.ref.Append("tags_all"))
}

func (kaa kinesisAnalyticsApplicationAttributes) Version() terra.NumberValue {
	return terra.ReferenceNumber(kaa.ref.Append("version"))
}

func (kaa kinesisAnalyticsApplicationAttributes) CloudwatchLoggingOptions() terra.ListValue[kinesisanalyticsapplication.CloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceList[kinesisanalyticsapplication.CloudwatchLoggingOptionsAttributes](kaa.ref.Append("cloudwatch_logging_options"))
}

func (kaa kinesisAnalyticsApplicationAttributes) Inputs() terra.ListValue[kinesisanalyticsapplication.InputsAttributes] {
	return terra.ReferenceList[kinesisanalyticsapplication.InputsAttributes](kaa.ref.Append("inputs"))
}

func (kaa kinesisAnalyticsApplicationAttributes) Outputs() terra.SetValue[kinesisanalyticsapplication.OutputsAttributes] {
	return terra.ReferenceSet[kinesisanalyticsapplication.OutputsAttributes](kaa.ref.Append("outputs"))
}

func (kaa kinesisAnalyticsApplicationAttributes) ReferenceDataSources() terra.ListValue[kinesisanalyticsapplication.ReferenceDataSourcesAttributes] {
	return terra.ReferenceList[kinesisanalyticsapplication.ReferenceDataSourcesAttributes](kaa.ref.Append("reference_data_sources"))
}

type kinesisAnalyticsApplicationState struct {
	Arn                      string                                                      `json:"arn"`
	Code                     string                                                      `json:"code"`
	CreateTimestamp          string                                                      `json:"create_timestamp"`
	Description              string                                                      `json:"description"`
	Id                       string                                                      `json:"id"`
	LastUpdateTimestamp      string                                                      `json:"last_update_timestamp"`
	Name                     string                                                      `json:"name"`
	StartApplication         bool                                                        `json:"start_application"`
	Status                   string                                                      `json:"status"`
	Tags                     map[string]string                                           `json:"tags"`
	TagsAll                  map[string]string                                           `json:"tags_all"`
	Version                  float64                                                     `json:"version"`
	CloudwatchLoggingOptions []kinesisanalyticsapplication.CloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	Inputs                   []kinesisanalyticsapplication.InputsState                   `json:"inputs"`
	Outputs                  []kinesisanalyticsapplication.OutputsState                  `json:"outputs"`
	ReferenceDataSources     []kinesisanalyticsapplication.ReferenceDataSourcesState     `json:"reference_data_sources"`
}
