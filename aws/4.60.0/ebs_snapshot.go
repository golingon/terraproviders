// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ebssnapshot "github.com/golingon/terraproviders/aws/4.60.0/ebssnapshot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEbsSnapshot(name string, args EbsSnapshotArgs) *EbsSnapshot {
	return &EbsSnapshot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EbsSnapshot)(nil)

type EbsSnapshot struct {
	Name  string
	Args  EbsSnapshotArgs
	state *ebsSnapshotState
}

func (es *EbsSnapshot) Type() string {
	return "aws_ebs_snapshot"
}

func (es *EbsSnapshot) LocalName() string {
	return es.Name
}

func (es *EbsSnapshot) Configuration() interface{} {
	return es.Args
}

func (es *EbsSnapshot) Attributes() ebsSnapshotAttributes {
	return ebsSnapshotAttributes{ref: terra.ReferenceResource(es)}
}

func (es *EbsSnapshot) ImportState(av io.Reader) error {
	es.state = &ebsSnapshotState{}
	if err := json.NewDecoder(av).Decode(es.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", es.Type(), es.LocalName(), err)
	}
	return nil
}

func (es *EbsSnapshot) State() (*ebsSnapshotState, bool) {
	return es.state, es.state != nil
}

func (es *EbsSnapshot) StateMust() *ebsSnapshotState {
	if es.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", es.Type(), es.LocalName()))
	}
	return es.state
}

func (es *EbsSnapshot) DependOn() terra.Reference {
	return terra.ReferenceResource(es)
}

type EbsSnapshotArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OutpostArn: string, optional
	OutpostArn terra.StringValue `hcl:"outpost_arn,attr"`
	// PermanentRestore: bool, optional
	PermanentRestore terra.BoolValue `hcl:"permanent_restore,attr"`
	// StorageTier: string, optional
	StorageTier terra.StringValue `hcl:"storage_tier,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TemporaryRestoreDays: number, optional
	TemporaryRestoreDays terra.NumberValue `hcl:"temporary_restore_days,attr"`
	// VolumeId: string, required
	VolumeId terra.StringValue `hcl:"volume_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *ebssnapshot.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that EbsSnapshot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ebsSnapshotAttributes struct {
	ref terra.Reference
}

func (es ebsSnapshotAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("arn"))
}

func (es ebsSnapshotAttributes) DataEncryptionKeyId() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("data_encryption_key_id"))
}

func (es ebsSnapshotAttributes) Description() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("description"))
}

func (es ebsSnapshotAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceBool(es.ref.Append("encrypted"))
}

func (es ebsSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("id"))
}

func (es ebsSnapshotAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("kms_key_id"))
}

func (es ebsSnapshotAttributes) OutpostArn() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("outpost_arn"))
}

func (es ebsSnapshotAttributes) OwnerAlias() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("owner_alias"))
}

func (es ebsSnapshotAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("owner_id"))
}

func (es ebsSnapshotAttributes) PermanentRestore() terra.BoolValue {
	return terra.ReferenceBool(es.ref.Append("permanent_restore"))
}

func (es ebsSnapshotAttributes) StorageTier() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("storage_tier"))
}

func (es ebsSnapshotAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](es.ref.Append("tags"))
}

func (es ebsSnapshotAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](es.ref.Append("tags_all"))
}

func (es ebsSnapshotAttributes) TemporaryRestoreDays() terra.NumberValue {
	return terra.ReferenceNumber(es.ref.Append("temporary_restore_days"))
}

func (es ebsSnapshotAttributes) VolumeId() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("volume_id"))
}

func (es ebsSnapshotAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceNumber(es.ref.Append("volume_size"))
}

func (es ebsSnapshotAttributes) Timeouts() ebssnapshot.TimeoutsAttributes {
	return terra.ReferenceSingle[ebssnapshot.TimeoutsAttributes](es.ref.Append("timeouts"))
}

type ebsSnapshotState struct {
	Arn                  string                     `json:"arn"`
	DataEncryptionKeyId  string                     `json:"data_encryption_key_id"`
	Description          string                     `json:"description"`
	Encrypted            bool                       `json:"encrypted"`
	Id                   string                     `json:"id"`
	KmsKeyId             string                     `json:"kms_key_id"`
	OutpostArn           string                     `json:"outpost_arn"`
	OwnerAlias           string                     `json:"owner_alias"`
	OwnerId              string                     `json:"owner_id"`
	PermanentRestore     bool                       `json:"permanent_restore"`
	StorageTier          string                     `json:"storage_tier"`
	Tags                 map[string]string          `json:"tags"`
	TagsAll              map[string]string          `json:"tags_all"`
	TemporaryRestoreDays float64                    `json:"temporary_restore_days"`
	VolumeId             string                     `json:"volume_id"`
	VolumeSize           float64                    `json:"volume_size"`
	Timeouts             *ebssnapshot.TimeoutsState `json:"timeouts"`
}
