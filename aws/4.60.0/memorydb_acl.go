// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMemorydbAcl(name string, args MemorydbAclArgs) *MemorydbAcl {
	return &MemorydbAcl{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MemorydbAcl)(nil)

type MemorydbAcl struct {
	Name  string
	Args  MemorydbAclArgs
	state *memorydbAclState
}

func (ma *MemorydbAcl) Type() string {
	return "aws_memorydb_acl"
}

func (ma *MemorydbAcl) LocalName() string {
	return ma.Name
}

func (ma *MemorydbAcl) Configuration() interface{} {
	return ma.Args
}

func (ma *MemorydbAcl) Attributes() memorydbAclAttributes {
	return memorydbAclAttributes{ref: terra.ReferenceResource(ma)}
}

func (ma *MemorydbAcl) ImportState(av io.Reader) error {
	ma.state = &memorydbAclState{}
	if err := json.NewDecoder(av).Decode(ma.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ma.Type(), ma.LocalName(), err)
	}
	return nil
}

func (ma *MemorydbAcl) State() (*memorydbAclState, bool) {
	return ma.state, ma.state != nil
}

func (ma *MemorydbAcl) StateMust() *memorydbAclState {
	if ma.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ma.Type(), ma.LocalName()))
	}
	return ma.state
}

func (ma *MemorydbAcl) DependOn() terra.Reference {
	return terra.ReferenceResource(ma)
}

type MemorydbAclArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// UserNames: set of string, optional
	UserNames terra.SetValue[terra.StringValue] `hcl:"user_names,attr"`
	// DependsOn contains resources that MemorydbAcl depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type memorydbAclAttributes struct {
	ref terra.Reference
}

func (ma memorydbAclAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("arn"))
}

func (ma memorydbAclAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("id"))
}

func (ma memorydbAclAttributes) MinimumEngineVersion() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("minimum_engine_version"))
}

func (ma memorydbAclAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("name"))
}

func (ma memorydbAclAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(ma.ref.Append("name_prefix"))
}

func (ma memorydbAclAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ma.ref.Append("tags"))
}

func (ma memorydbAclAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ma.ref.Append("tags_all"))
}

func (ma memorydbAclAttributes) UserNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ma.ref.Append("user_names"))
}

type memorydbAclState struct {
	Arn                  string            `json:"arn"`
	Id                   string            `json:"id"`
	MinimumEngineVersion string            `json:"minimum_engine_version"`
	Name                 string            `json:"name"`
	NamePrefix           string            `json:"name_prefix"`
	Tags                 map[string]string `json:"tags"`
	TagsAll              map[string]string `json:"tags_all"`
	UserNames            []string          `json:"user_names"`
}
