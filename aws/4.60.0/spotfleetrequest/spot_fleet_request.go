// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package spotfleetrequest

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type LaunchSpecification struct {
	// Ami: string, required
	Ami terra.StringValue `hcl:"ami,attr" validate:"required"`
	// AssociatePublicIpAddress: bool, optional
	AssociatePublicIpAddress terra.BoolValue `hcl:"associate_public_ip_address,attr"`
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// EbsOptimized: bool, optional
	EbsOptimized terra.BoolValue `hcl:"ebs_optimized,attr"`
	// IamInstanceProfile: string, optional
	IamInstanceProfile terra.StringValue `hcl:"iam_instance_profile,attr"`
	// IamInstanceProfileArn: string, optional
	IamInstanceProfileArn terra.StringValue `hcl:"iam_instance_profile_arn,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// KeyName: string, optional
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// Monitoring: bool, optional
	Monitoring terra.BoolValue `hcl:"monitoring,attr"`
	// PlacementGroup: string, optional
	PlacementGroup terra.StringValue `hcl:"placement_group,attr"`
	// PlacementTenancy: string, optional
	PlacementTenancy terra.StringValue `hcl:"placement_tenancy,attr"`
	// SpotPrice: string, optional
	SpotPrice terra.StringValue `hcl:"spot_price,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// UserData: string, optional
	UserData terra.StringValue `hcl:"user_data,attr"`
	// VpcSecurityGroupIds: set of string, optional
	VpcSecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"vpc_security_group_ids,attr"`
	// WeightedCapacity: string, optional
	WeightedCapacity terra.StringValue `hcl:"weighted_capacity,attr"`
	// EbsBlockDevice: min=0
	EbsBlockDevice []EbsBlockDevice `hcl:"ebs_block_device,block" validate:"min=0"`
	// EphemeralBlockDevice: min=0
	EphemeralBlockDevice []EphemeralBlockDevice `hcl:"ephemeral_block_device,block" validate:"min=0"`
	// RootBlockDevice: min=0
	RootBlockDevice []RootBlockDevice `hcl:"root_block_device,block" validate:"min=0"`
}

type EbsBlockDevice struct {
	// DeleteOnTermination: bool, optional
	DeleteOnTermination terra.BoolValue `hcl:"delete_on_termination,attr"`
	// DeviceName: string, required
	DeviceName terra.StringValue `hcl:"device_name,attr" validate:"required"`
	// Encrypted: bool, optional
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// SnapshotId: string, optional
	SnapshotId terra.StringValue `hcl:"snapshot_id,attr"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// VolumeSize: number, optional
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType: string, optional
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type EphemeralBlockDevice struct {
	// DeviceName: string, required
	DeviceName terra.StringValue `hcl:"device_name,attr" validate:"required"`
	// VirtualName: string, required
	VirtualName terra.StringValue `hcl:"virtual_name,attr" validate:"required"`
}

type RootBlockDevice struct {
	// DeleteOnTermination: bool, optional
	DeleteOnTermination terra.BoolValue `hcl:"delete_on_termination,attr"`
	// Encrypted: bool, optional
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// VolumeSize: number, optional
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType: string, optional
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type LaunchTemplateConfig struct {
	// LaunchTemplateSpecification: required
	LaunchTemplateSpecification *LaunchTemplateSpecification `hcl:"launch_template_specification,block" validate:"required"`
	// Overrides: min=0
	Overrides []Overrides `hcl:"overrides,block" validate:"min=0"`
}

type LaunchTemplateSpecification struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}

type Overrides struct {
	// AvailabilityZone: string, optional
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// InstanceType: string, optional
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// Priority: number, optional
	Priority terra.NumberValue `hcl:"priority,attr"`
	// SpotPrice: string, optional
	SpotPrice terra.StringValue `hcl:"spot_price,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// WeightedCapacity: number, optional
	WeightedCapacity terra.NumberValue `hcl:"weighted_capacity,attr"`
	// InstanceRequirements: optional
	InstanceRequirements *InstanceRequirements `hcl:"instance_requirements,block"`
}

type InstanceRequirements struct {
	// AcceleratorManufacturers: set of string, optional
	AcceleratorManufacturers terra.SetValue[terra.StringValue] `hcl:"accelerator_manufacturers,attr"`
	// AcceleratorNames: set of string, optional
	AcceleratorNames terra.SetValue[terra.StringValue] `hcl:"accelerator_names,attr"`
	// AcceleratorTypes: set of string, optional
	AcceleratorTypes terra.SetValue[terra.StringValue] `hcl:"accelerator_types,attr"`
	// AllowedInstanceTypes: set of string, optional
	AllowedInstanceTypes terra.SetValue[terra.StringValue] `hcl:"allowed_instance_types,attr"`
	// BareMetal: string, optional
	BareMetal terra.StringValue `hcl:"bare_metal,attr"`
	// BurstablePerformance: string, optional
	BurstablePerformance terra.StringValue `hcl:"burstable_performance,attr"`
	// CpuManufacturers: set of string, optional
	CpuManufacturers terra.SetValue[terra.StringValue] `hcl:"cpu_manufacturers,attr"`
	// ExcludedInstanceTypes: set of string, optional
	ExcludedInstanceTypes terra.SetValue[terra.StringValue] `hcl:"excluded_instance_types,attr"`
	// InstanceGenerations: set of string, optional
	InstanceGenerations terra.SetValue[terra.StringValue] `hcl:"instance_generations,attr"`
	// LocalStorage: string, optional
	LocalStorage terra.StringValue `hcl:"local_storage,attr"`
	// LocalStorageTypes: set of string, optional
	LocalStorageTypes terra.SetValue[terra.StringValue] `hcl:"local_storage_types,attr"`
	// OnDemandMaxPricePercentageOverLowestPrice: number, optional
	OnDemandMaxPricePercentageOverLowestPrice terra.NumberValue `hcl:"on_demand_max_price_percentage_over_lowest_price,attr"`
	// RequireHibernateSupport: bool, optional
	RequireHibernateSupport terra.BoolValue `hcl:"require_hibernate_support,attr"`
	// SpotMaxPricePercentageOverLowestPrice: number, optional
	SpotMaxPricePercentageOverLowestPrice terra.NumberValue `hcl:"spot_max_price_percentage_over_lowest_price,attr"`
	// AcceleratorCount: optional
	AcceleratorCount *AcceleratorCount `hcl:"accelerator_count,block"`
	// AcceleratorTotalMemoryMib: optional
	AcceleratorTotalMemoryMib *AcceleratorTotalMemoryMib `hcl:"accelerator_total_memory_mib,block"`
	// BaselineEbsBandwidthMbps: optional
	BaselineEbsBandwidthMbps *BaselineEbsBandwidthMbps `hcl:"baseline_ebs_bandwidth_mbps,block"`
	// MemoryGibPerVcpu: optional
	MemoryGibPerVcpu *MemoryGibPerVcpu `hcl:"memory_gib_per_vcpu,block"`
	// MemoryMib: optional
	MemoryMib *MemoryMib `hcl:"memory_mib,block"`
	// NetworkBandwidthGbps: optional
	NetworkBandwidthGbps *NetworkBandwidthGbps `hcl:"network_bandwidth_gbps,block"`
	// NetworkInterfaceCount: optional
	NetworkInterfaceCount *NetworkInterfaceCount `hcl:"network_interface_count,block"`
	// TotalLocalStorageGb: optional
	TotalLocalStorageGb *TotalLocalStorageGb `hcl:"total_local_storage_gb,block"`
	// VcpuCount: optional
	VcpuCount *VcpuCount `hcl:"vcpu_count,block"`
}

type AcceleratorCount struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type AcceleratorTotalMemoryMib struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type BaselineEbsBandwidthMbps struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type MemoryGibPerVcpu struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type MemoryMib struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type NetworkBandwidthGbps struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type NetworkInterfaceCount struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type TotalLocalStorageGb struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type VcpuCount struct {
	// Max: number, optional
	Max terra.NumberValue `hcl:"max,attr"`
	// Min: number, optional
	Min terra.NumberValue `hcl:"min,attr"`
}

type SpotMaintenanceStrategies struct {
	// CapacityRebalance: optional
	CapacityRebalance *CapacityRebalance `hcl:"capacity_rebalance,block"`
}

type CapacityRebalance struct {
	// ReplacementStrategy: string, optional
	ReplacementStrategy terra.StringValue `hcl:"replacement_strategy,attr"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type LaunchSpecificationAttributes struct {
	ref terra.Reference
}

func (ls LaunchSpecificationAttributes) InternalRef() terra.Reference {
	return ls.ref
}

func (ls LaunchSpecificationAttributes) InternalWithRef(ref terra.Reference) LaunchSpecificationAttributes {
	return LaunchSpecificationAttributes{ref: ref}
}

func (ls LaunchSpecificationAttributes) InternalTokens() hclwrite.Tokens {
	return ls.ref.InternalTokens()
}

func (ls LaunchSpecificationAttributes) Ami() terra.StringValue {
	return terra.ReferenceString(ls.ref.Append("ami"))
}

func (ls LaunchSpecificationAttributes) AssociatePublicIpAddress() terra.BoolValue {
	return terra.ReferenceBool(ls.ref.Append("associate_public_ip_address"))
}

func (ls LaunchSpecificationAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceString(ls.ref.Append("availability_zone"))
}

func (ls LaunchSpecificationAttributes) EbsOptimized() terra.BoolValue {
	return terra.ReferenceBool(ls.ref.Append("ebs_optimized"))
}

func (ls LaunchSpecificationAttributes) IamInstanceProfile() terra.StringValue {
	return terra.ReferenceString(ls.ref.Append("iam_instance_profile"))
}

func (ls LaunchSpecificationAttributes) IamInstanceProfileArn() terra.StringValue {
	return terra.ReferenceString(ls.ref.Append("iam_instance_profile_arn"))
}

func (ls LaunchSpecificationAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceString(ls.ref.Append("instance_type"))
}

func (ls LaunchSpecificationAttributes) KeyName() terra.StringValue {
	return terra.ReferenceString(ls.ref.Append("key_name"))
}

func (ls LaunchSpecificationAttributes) Monitoring() terra.BoolValue {
	return terra.ReferenceBool(ls.ref.Append("monitoring"))
}

func (ls LaunchSpecificationAttributes) PlacementGroup() terra.StringValue {
	return terra.ReferenceString(ls.ref.Append("placement_group"))
}

func (ls LaunchSpecificationAttributes) PlacementTenancy() terra.StringValue {
	return terra.ReferenceString(ls.ref.Append("placement_tenancy"))
}

func (ls LaunchSpecificationAttributes) SpotPrice() terra.StringValue {
	return terra.ReferenceString(ls.ref.Append("spot_price"))
}

func (ls LaunchSpecificationAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(ls.ref.Append("subnet_id"))
}

func (ls LaunchSpecificationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ls.ref.Append("tags"))
}

func (ls LaunchSpecificationAttributes) UserData() terra.StringValue {
	return terra.ReferenceString(ls.ref.Append("user_data"))
}

func (ls LaunchSpecificationAttributes) VpcSecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ls.ref.Append("vpc_security_group_ids"))
}

func (ls LaunchSpecificationAttributes) WeightedCapacity() terra.StringValue {
	return terra.ReferenceString(ls.ref.Append("weighted_capacity"))
}

func (ls LaunchSpecificationAttributes) EbsBlockDevice() terra.SetValue[EbsBlockDeviceAttributes] {
	return terra.ReferenceSet[EbsBlockDeviceAttributes](ls.ref.Append("ebs_block_device"))
}

func (ls LaunchSpecificationAttributes) EphemeralBlockDevice() terra.SetValue[EphemeralBlockDeviceAttributes] {
	return terra.ReferenceSet[EphemeralBlockDeviceAttributes](ls.ref.Append("ephemeral_block_device"))
}

func (ls LaunchSpecificationAttributes) RootBlockDevice() terra.SetValue[RootBlockDeviceAttributes] {
	return terra.ReferenceSet[RootBlockDeviceAttributes](ls.ref.Append("root_block_device"))
}

type EbsBlockDeviceAttributes struct {
	ref terra.Reference
}

func (ebd EbsBlockDeviceAttributes) InternalRef() terra.Reference {
	return ebd.ref
}

func (ebd EbsBlockDeviceAttributes) InternalWithRef(ref terra.Reference) EbsBlockDeviceAttributes {
	return EbsBlockDeviceAttributes{ref: ref}
}

func (ebd EbsBlockDeviceAttributes) InternalTokens() hclwrite.Tokens {
	return ebd.ref.InternalTokens()
}

func (ebd EbsBlockDeviceAttributes) DeleteOnTermination() terra.BoolValue {
	return terra.ReferenceBool(ebd.ref.Append("delete_on_termination"))
}

func (ebd EbsBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceString(ebd.ref.Append("device_name"))
}

func (ebd EbsBlockDeviceAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceBool(ebd.ref.Append("encrypted"))
}

func (ebd EbsBlockDeviceAttributes) Iops() terra.NumberValue {
	return terra.ReferenceNumber(ebd.ref.Append("iops"))
}

func (ebd EbsBlockDeviceAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(ebd.ref.Append("kms_key_id"))
}

func (ebd EbsBlockDeviceAttributes) SnapshotId() terra.StringValue {
	return terra.ReferenceString(ebd.ref.Append("snapshot_id"))
}

func (ebd EbsBlockDeviceAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceNumber(ebd.ref.Append("throughput"))
}

func (ebd EbsBlockDeviceAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceNumber(ebd.ref.Append("volume_size"))
}

func (ebd EbsBlockDeviceAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceString(ebd.ref.Append("volume_type"))
}

type EphemeralBlockDeviceAttributes struct {
	ref terra.Reference
}

func (ebd EphemeralBlockDeviceAttributes) InternalRef() terra.Reference {
	return ebd.ref
}

func (ebd EphemeralBlockDeviceAttributes) InternalWithRef(ref terra.Reference) EphemeralBlockDeviceAttributes {
	return EphemeralBlockDeviceAttributes{ref: ref}
}

func (ebd EphemeralBlockDeviceAttributes) InternalTokens() hclwrite.Tokens {
	return ebd.ref.InternalTokens()
}

func (ebd EphemeralBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceString(ebd.ref.Append("device_name"))
}

func (ebd EphemeralBlockDeviceAttributes) VirtualName() terra.StringValue {
	return terra.ReferenceString(ebd.ref.Append("virtual_name"))
}

type RootBlockDeviceAttributes struct {
	ref terra.Reference
}

func (rbd RootBlockDeviceAttributes) InternalRef() terra.Reference {
	return rbd.ref
}

func (rbd RootBlockDeviceAttributes) InternalWithRef(ref terra.Reference) RootBlockDeviceAttributes {
	return RootBlockDeviceAttributes{ref: ref}
}

func (rbd RootBlockDeviceAttributes) InternalTokens() hclwrite.Tokens {
	return rbd.ref.InternalTokens()
}

func (rbd RootBlockDeviceAttributes) DeleteOnTermination() terra.BoolValue {
	return terra.ReferenceBool(rbd.ref.Append("delete_on_termination"))
}

func (rbd RootBlockDeviceAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceBool(rbd.ref.Append("encrypted"))
}

func (rbd RootBlockDeviceAttributes) Iops() terra.NumberValue {
	return terra.ReferenceNumber(rbd.ref.Append("iops"))
}

func (rbd RootBlockDeviceAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(rbd.ref.Append("kms_key_id"))
}

func (rbd RootBlockDeviceAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceNumber(rbd.ref.Append("throughput"))
}

func (rbd RootBlockDeviceAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceNumber(rbd.ref.Append("volume_size"))
}

func (rbd RootBlockDeviceAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceString(rbd.ref.Append("volume_type"))
}

type LaunchTemplateConfigAttributes struct {
	ref terra.Reference
}

func (ltc LaunchTemplateConfigAttributes) InternalRef() terra.Reference {
	return ltc.ref
}

func (ltc LaunchTemplateConfigAttributes) InternalWithRef(ref terra.Reference) LaunchTemplateConfigAttributes {
	return LaunchTemplateConfigAttributes{ref: ref}
}

func (ltc LaunchTemplateConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ltc.ref.InternalTokens()
}

func (ltc LaunchTemplateConfigAttributes) LaunchTemplateSpecification() terra.ListValue[LaunchTemplateSpecificationAttributes] {
	return terra.ReferenceList[LaunchTemplateSpecificationAttributes](ltc.ref.Append("launch_template_specification"))
}

func (ltc LaunchTemplateConfigAttributes) Overrides() terra.SetValue[OverridesAttributes] {
	return terra.ReferenceSet[OverridesAttributes](ltc.ref.Append("overrides"))
}

type LaunchTemplateSpecificationAttributes struct {
	ref terra.Reference
}

func (lts LaunchTemplateSpecificationAttributes) InternalRef() terra.Reference {
	return lts.ref
}

func (lts LaunchTemplateSpecificationAttributes) InternalWithRef(ref terra.Reference) LaunchTemplateSpecificationAttributes {
	return LaunchTemplateSpecificationAttributes{ref: ref}
}

func (lts LaunchTemplateSpecificationAttributes) InternalTokens() hclwrite.Tokens {
	return lts.ref.InternalTokens()
}

func (lts LaunchTemplateSpecificationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lts.ref.Append("id"))
}

func (lts LaunchTemplateSpecificationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lts.ref.Append("name"))
}

func (lts LaunchTemplateSpecificationAttributes) Version() terra.StringValue {
	return terra.ReferenceString(lts.ref.Append("version"))
}

type OverridesAttributes struct {
	ref terra.Reference
}

func (o OverridesAttributes) InternalRef() terra.Reference {
	return o.ref
}

func (o OverridesAttributes) InternalWithRef(ref terra.Reference) OverridesAttributes {
	return OverridesAttributes{ref: ref}
}

func (o OverridesAttributes) InternalTokens() hclwrite.Tokens {
	return o.ref.InternalTokens()
}

func (o OverridesAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("availability_zone"))
}

func (o OverridesAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("instance_type"))
}

func (o OverridesAttributes) Priority() terra.NumberValue {
	return terra.ReferenceNumber(o.ref.Append("priority"))
}

func (o OverridesAttributes) SpotPrice() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("spot_price"))
}

func (o OverridesAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(o.ref.Append("subnet_id"))
}

func (o OverridesAttributes) WeightedCapacity() terra.NumberValue {
	return terra.ReferenceNumber(o.ref.Append("weighted_capacity"))
}

func (o OverridesAttributes) InstanceRequirements() terra.ListValue[InstanceRequirementsAttributes] {
	return terra.ReferenceList[InstanceRequirementsAttributes](o.ref.Append("instance_requirements"))
}

type InstanceRequirementsAttributes struct {
	ref terra.Reference
}

func (ir InstanceRequirementsAttributes) InternalRef() terra.Reference {
	return ir.ref
}

func (ir InstanceRequirementsAttributes) InternalWithRef(ref terra.Reference) InstanceRequirementsAttributes {
	return InstanceRequirementsAttributes{ref: ref}
}

func (ir InstanceRequirementsAttributes) InternalTokens() hclwrite.Tokens {
	return ir.ref.InternalTokens()
}

func (ir InstanceRequirementsAttributes) AcceleratorManufacturers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ir.ref.Append("accelerator_manufacturers"))
}

func (ir InstanceRequirementsAttributes) AcceleratorNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ir.ref.Append("accelerator_names"))
}

func (ir InstanceRequirementsAttributes) AcceleratorTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ir.ref.Append("accelerator_types"))
}

func (ir InstanceRequirementsAttributes) AllowedInstanceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ir.ref.Append("allowed_instance_types"))
}

func (ir InstanceRequirementsAttributes) BareMetal() terra.StringValue {
	return terra.ReferenceString(ir.ref.Append("bare_metal"))
}

func (ir InstanceRequirementsAttributes) BurstablePerformance() terra.StringValue {
	return terra.ReferenceString(ir.ref.Append("burstable_performance"))
}

func (ir InstanceRequirementsAttributes) CpuManufacturers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ir.ref.Append("cpu_manufacturers"))
}

func (ir InstanceRequirementsAttributes) ExcludedInstanceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ir.ref.Append("excluded_instance_types"))
}

func (ir InstanceRequirementsAttributes) InstanceGenerations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ir.ref.Append("instance_generations"))
}

func (ir InstanceRequirementsAttributes) LocalStorage() terra.StringValue {
	return terra.ReferenceString(ir.ref.Append("local_storage"))
}

func (ir InstanceRequirementsAttributes) LocalStorageTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ir.ref.Append("local_storage_types"))
}

func (ir InstanceRequirementsAttributes) OnDemandMaxPricePercentageOverLowestPrice() terra.NumberValue {
	return terra.ReferenceNumber(ir.ref.Append("on_demand_max_price_percentage_over_lowest_price"))
}

func (ir InstanceRequirementsAttributes) RequireHibernateSupport() terra.BoolValue {
	return terra.ReferenceBool(ir.ref.Append("require_hibernate_support"))
}

func (ir InstanceRequirementsAttributes) SpotMaxPricePercentageOverLowestPrice() terra.NumberValue {
	return terra.ReferenceNumber(ir.ref.Append("spot_max_price_percentage_over_lowest_price"))
}

func (ir InstanceRequirementsAttributes) AcceleratorCount() terra.ListValue[AcceleratorCountAttributes] {
	return terra.ReferenceList[AcceleratorCountAttributes](ir.ref.Append("accelerator_count"))
}

func (ir InstanceRequirementsAttributes) AcceleratorTotalMemoryMib() terra.ListValue[AcceleratorTotalMemoryMibAttributes] {
	return terra.ReferenceList[AcceleratorTotalMemoryMibAttributes](ir.ref.Append("accelerator_total_memory_mib"))
}

func (ir InstanceRequirementsAttributes) BaselineEbsBandwidthMbps() terra.ListValue[BaselineEbsBandwidthMbpsAttributes] {
	return terra.ReferenceList[BaselineEbsBandwidthMbpsAttributes](ir.ref.Append("baseline_ebs_bandwidth_mbps"))
}

func (ir InstanceRequirementsAttributes) MemoryGibPerVcpu() terra.ListValue[MemoryGibPerVcpuAttributes] {
	return terra.ReferenceList[MemoryGibPerVcpuAttributes](ir.ref.Append("memory_gib_per_vcpu"))
}

func (ir InstanceRequirementsAttributes) MemoryMib() terra.ListValue[MemoryMibAttributes] {
	return terra.ReferenceList[MemoryMibAttributes](ir.ref.Append("memory_mib"))
}

func (ir InstanceRequirementsAttributes) NetworkBandwidthGbps() terra.ListValue[NetworkBandwidthGbpsAttributes] {
	return terra.ReferenceList[NetworkBandwidthGbpsAttributes](ir.ref.Append("network_bandwidth_gbps"))
}

func (ir InstanceRequirementsAttributes) NetworkInterfaceCount() terra.ListValue[NetworkInterfaceCountAttributes] {
	return terra.ReferenceList[NetworkInterfaceCountAttributes](ir.ref.Append("network_interface_count"))
}

func (ir InstanceRequirementsAttributes) TotalLocalStorageGb() terra.ListValue[TotalLocalStorageGbAttributes] {
	return terra.ReferenceList[TotalLocalStorageGbAttributes](ir.ref.Append("total_local_storage_gb"))
}

func (ir InstanceRequirementsAttributes) VcpuCount() terra.ListValue[VcpuCountAttributes] {
	return terra.ReferenceList[VcpuCountAttributes](ir.ref.Append("vcpu_count"))
}

type AcceleratorCountAttributes struct {
	ref terra.Reference
}

func (ac AcceleratorCountAttributes) InternalRef() terra.Reference {
	return ac.ref
}

func (ac AcceleratorCountAttributes) InternalWithRef(ref terra.Reference) AcceleratorCountAttributes {
	return AcceleratorCountAttributes{ref: ref}
}

func (ac AcceleratorCountAttributes) InternalTokens() hclwrite.Tokens {
	return ac.ref.InternalTokens()
}

func (ac AcceleratorCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceNumber(ac.ref.Append("max"))
}

func (ac AcceleratorCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceNumber(ac.ref.Append("min"))
}

type AcceleratorTotalMemoryMibAttributes struct {
	ref terra.Reference
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalRef() terra.Reference {
	return atmm.ref
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalWithRef(ref terra.Reference) AcceleratorTotalMemoryMibAttributes {
	return AcceleratorTotalMemoryMibAttributes{ref: ref}
}

func (atmm AcceleratorTotalMemoryMibAttributes) InternalTokens() hclwrite.Tokens {
	return atmm.ref.InternalTokens()
}

func (atmm AcceleratorTotalMemoryMibAttributes) Max() terra.NumberValue {
	return terra.ReferenceNumber(atmm.ref.Append("max"))
}

func (atmm AcceleratorTotalMemoryMibAttributes) Min() terra.NumberValue {
	return terra.ReferenceNumber(atmm.ref.Append("min"))
}

type BaselineEbsBandwidthMbpsAttributes struct {
	ref terra.Reference
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalRef() terra.Reference {
	return bebm.ref
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalWithRef(ref terra.Reference) BaselineEbsBandwidthMbpsAttributes {
	return BaselineEbsBandwidthMbpsAttributes{ref: ref}
}

func (bebm BaselineEbsBandwidthMbpsAttributes) InternalTokens() hclwrite.Tokens {
	return bebm.ref.InternalTokens()
}

func (bebm BaselineEbsBandwidthMbpsAttributes) Max() terra.NumberValue {
	return terra.ReferenceNumber(bebm.ref.Append("max"))
}

func (bebm BaselineEbsBandwidthMbpsAttributes) Min() terra.NumberValue {
	return terra.ReferenceNumber(bebm.ref.Append("min"))
}

type MemoryGibPerVcpuAttributes struct {
	ref terra.Reference
}

func (mgpv MemoryGibPerVcpuAttributes) InternalRef() terra.Reference {
	return mgpv.ref
}

func (mgpv MemoryGibPerVcpuAttributes) InternalWithRef(ref terra.Reference) MemoryGibPerVcpuAttributes {
	return MemoryGibPerVcpuAttributes{ref: ref}
}

func (mgpv MemoryGibPerVcpuAttributes) InternalTokens() hclwrite.Tokens {
	return mgpv.ref.InternalTokens()
}

func (mgpv MemoryGibPerVcpuAttributes) Max() terra.NumberValue {
	return terra.ReferenceNumber(mgpv.ref.Append("max"))
}

func (mgpv MemoryGibPerVcpuAttributes) Min() terra.NumberValue {
	return terra.ReferenceNumber(mgpv.ref.Append("min"))
}

type MemoryMibAttributes struct {
	ref terra.Reference
}

func (mm MemoryMibAttributes) InternalRef() terra.Reference {
	return mm.ref
}

func (mm MemoryMibAttributes) InternalWithRef(ref terra.Reference) MemoryMibAttributes {
	return MemoryMibAttributes{ref: ref}
}

func (mm MemoryMibAttributes) InternalTokens() hclwrite.Tokens {
	return mm.ref.InternalTokens()
}

func (mm MemoryMibAttributes) Max() terra.NumberValue {
	return terra.ReferenceNumber(mm.ref.Append("max"))
}

func (mm MemoryMibAttributes) Min() terra.NumberValue {
	return terra.ReferenceNumber(mm.ref.Append("min"))
}

type NetworkBandwidthGbpsAttributes struct {
	ref terra.Reference
}

func (nbg NetworkBandwidthGbpsAttributes) InternalRef() terra.Reference {
	return nbg.ref
}

func (nbg NetworkBandwidthGbpsAttributes) InternalWithRef(ref terra.Reference) NetworkBandwidthGbpsAttributes {
	return NetworkBandwidthGbpsAttributes{ref: ref}
}

func (nbg NetworkBandwidthGbpsAttributes) InternalTokens() hclwrite.Tokens {
	return nbg.ref.InternalTokens()
}

func (nbg NetworkBandwidthGbpsAttributes) Max() terra.NumberValue {
	return terra.ReferenceNumber(nbg.ref.Append("max"))
}

func (nbg NetworkBandwidthGbpsAttributes) Min() terra.NumberValue {
	return terra.ReferenceNumber(nbg.ref.Append("min"))
}

type NetworkInterfaceCountAttributes struct {
	ref terra.Reference
}

func (nic NetworkInterfaceCountAttributes) InternalRef() terra.Reference {
	return nic.ref
}

func (nic NetworkInterfaceCountAttributes) InternalWithRef(ref terra.Reference) NetworkInterfaceCountAttributes {
	return NetworkInterfaceCountAttributes{ref: ref}
}

func (nic NetworkInterfaceCountAttributes) InternalTokens() hclwrite.Tokens {
	return nic.ref.InternalTokens()
}

func (nic NetworkInterfaceCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceNumber(nic.ref.Append("max"))
}

func (nic NetworkInterfaceCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceNumber(nic.ref.Append("min"))
}

type TotalLocalStorageGbAttributes struct {
	ref terra.Reference
}

func (tlsg TotalLocalStorageGbAttributes) InternalRef() terra.Reference {
	return tlsg.ref
}

func (tlsg TotalLocalStorageGbAttributes) InternalWithRef(ref terra.Reference) TotalLocalStorageGbAttributes {
	return TotalLocalStorageGbAttributes{ref: ref}
}

func (tlsg TotalLocalStorageGbAttributes) InternalTokens() hclwrite.Tokens {
	return tlsg.ref.InternalTokens()
}

func (tlsg TotalLocalStorageGbAttributes) Max() terra.NumberValue {
	return terra.ReferenceNumber(tlsg.ref.Append("max"))
}

func (tlsg TotalLocalStorageGbAttributes) Min() terra.NumberValue {
	return terra.ReferenceNumber(tlsg.ref.Append("min"))
}

type VcpuCountAttributes struct {
	ref terra.Reference
}

func (vc VcpuCountAttributes) InternalRef() terra.Reference {
	return vc.ref
}

func (vc VcpuCountAttributes) InternalWithRef(ref terra.Reference) VcpuCountAttributes {
	return VcpuCountAttributes{ref: ref}
}

func (vc VcpuCountAttributes) InternalTokens() hclwrite.Tokens {
	return vc.ref.InternalTokens()
}

func (vc VcpuCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceNumber(vc.ref.Append("max"))
}

func (vc VcpuCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceNumber(vc.ref.Append("min"))
}

type SpotMaintenanceStrategiesAttributes struct {
	ref terra.Reference
}

func (sms SpotMaintenanceStrategiesAttributes) InternalRef() terra.Reference {
	return sms.ref
}

func (sms SpotMaintenanceStrategiesAttributes) InternalWithRef(ref terra.Reference) SpotMaintenanceStrategiesAttributes {
	return SpotMaintenanceStrategiesAttributes{ref: ref}
}

func (sms SpotMaintenanceStrategiesAttributes) InternalTokens() hclwrite.Tokens {
	return sms.ref.InternalTokens()
}

func (sms SpotMaintenanceStrategiesAttributes) CapacityRebalance() terra.ListValue[CapacityRebalanceAttributes] {
	return terra.ReferenceList[CapacityRebalanceAttributes](sms.ref.Append("capacity_rebalance"))
}

type CapacityRebalanceAttributes struct {
	ref terra.Reference
}

func (cr CapacityRebalanceAttributes) InternalRef() terra.Reference {
	return cr.ref
}

func (cr CapacityRebalanceAttributes) InternalWithRef(ref terra.Reference) CapacityRebalanceAttributes {
	return CapacityRebalanceAttributes{ref: ref}
}

func (cr CapacityRebalanceAttributes) InternalTokens() hclwrite.Tokens {
	return cr.ref.InternalTokens()
}

func (cr CapacityRebalanceAttributes) ReplacementStrategy() terra.StringValue {
	return terra.ReferenceString(cr.ref.Append("replacement_strategy"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceString(t.ref.Append("update"))
}

type LaunchSpecificationState struct {
	Ami                      string                      `json:"ami"`
	AssociatePublicIpAddress bool                        `json:"associate_public_ip_address"`
	AvailabilityZone         string                      `json:"availability_zone"`
	EbsOptimized             bool                        `json:"ebs_optimized"`
	IamInstanceProfile       string                      `json:"iam_instance_profile"`
	IamInstanceProfileArn    string                      `json:"iam_instance_profile_arn"`
	InstanceType             string                      `json:"instance_type"`
	KeyName                  string                      `json:"key_name"`
	Monitoring               bool                        `json:"monitoring"`
	PlacementGroup           string                      `json:"placement_group"`
	PlacementTenancy         string                      `json:"placement_tenancy"`
	SpotPrice                string                      `json:"spot_price"`
	SubnetId                 string                      `json:"subnet_id"`
	Tags                     map[string]string           `json:"tags"`
	UserData                 string                      `json:"user_data"`
	VpcSecurityGroupIds      []string                    `json:"vpc_security_group_ids"`
	WeightedCapacity         string                      `json:"weighted_capacity"`
	EbsBlockDevice           []EbsBlockDeviceState       `json:"ebs_block_device"`
	EphemeralBlockDevice     []EphemeralBlockDeviceState `json:"ephemeral_block_device"`
	RootBlockDevice          []RootBlockDeviceState      `json:"root_block_device"`
}

type EbsBlockDeviceState struct {
	DeleteOnTermination bool    `json:"delete_on_termination"`
	DeviceName          string  `json:"device_name"`
	Encrypted           bool    `json:"encrypted"`
	Iops                float64 `json:"iops"`
	KmsKeyId            string  `json:"kms_key_id"`
	SnapshotId          string  `json:"snapshot_id"`
	Throughput          float64 `json:"throughput"`
	VolumeSize          float64 `json:"volume_size"`
	VolumeType          string  `json:"volume_type"`
}

type EphemeralBlockDeviceState struct {
	DeviceName  string `json:"device_name"`
	VirtualName string `json:"virtual_name"`
}

type RootBlockDeviceState struct {
	DeleteOnTermination bool    `json:"delete_on_termination"`
	Encrypted           bool    `json:"encrypted"`
	Iops                float64 `json:"iops"`
	KmsKeyId            string  `json:"kms_key_id"`
	Throughput          float64 `json:"throughput"`
	VolumeSize          float64 `json:"volume_size"`
	VolumeType          string  `json:"volume_type"`
}

type LaunchTemplateConfigState struct {
	LaunchTemplateSpecification []LaunchTemplateSpecificationState `json:"launch_template_specification"`
	Overrides                   []OverridesState                   `json:"overrides"`
}

type LaunchTemplateSpecificationState struct {
	Id      string `json:"id"`
	Name    string `json:"name"`
	Version string `json:"version"`
}

type OverridesState struct {
	AvailabilityZone     string                      `json:"availability_zone"`
	InstanceType         string                      `json:"instance_type"`
	Priority             float64                     `json:"priority"`
	SpotPrice            string                      `json:"spot_price"`
	SubnetId             string                      `json:"subnet_id"`
	WeightedCapacity     float64                     `json:"weighted_capacity"`
	InstanceRequirements []InstanceRequirementsState `json:"instance_requirements"`
}

type InstanceRequirementsState struct {
	AcceleratorManufacturers                  []string                         `json:"accelerator_manufacturers"`
	AcceleratorNames                          []string                         `json:"accelerator_names"`
	AcceleratorTypes                          []string                         `json:"accelerator_types"`
	AllowedInstanceTypes                      []string                         `json:"allowed_instance_types"`
	BareMetal                                 string                           `json:"bare_metal"`
	BurstablePerformance                      string                           `json:"burstable_performance"`
	CpuManufacturers                          []string                         `json:"cpu_manufacturers"`
	ExcludedInstanceTypes                     []string                         `json:"excluded_instance_types"`
	InstanceGenerations                       []string                         `json:"instance_generations"`
	LocalStorage                              string                           `json:"local_storage"`
	LocalStorageTypes                         []string                         `json:"local_storage_types"`
	OnDemandMaxPricePercentageOverLowestPrice float64                          `json:"on_demand_max_price_percentage_over_lowest_price"`
	RequireHibernateSupport                   bool                             `json:"require_hibernate_support"`
	SpotMaxPricePercentageOverLowestPrice     float64                          `json:"spot_max_price_percentage_over_lowest_price"`
	AcceleratorCount                          []AcceleratorCountState          `json:"accelerator_count"`
	AcceleratorTotalMemoryMib                 []AcceleratorTotalMemoryMibState `json:"accelerator_total_memory_mib"`
	BaselineEbsBandwidthMbps                  []BaselineEbsBandwidthMbpsState  `json:"baseline_ebs_bandwidth_mbps"`
	MemoryGibPerVcpu                          []MemoryGibPerVcpuState          `json:"memory_gib_per_vcpu"`
	MemoryMib                                 []MemoryMibState                 `json:"memory_mib"`
	NetworkBandwidthGbps                      []NetworkBandwidthGbpsState      `json:"network_bandwidth_gbps"`
	NetworkInterfaceCount                     []NetworkInterfaceCountState     `json:"network_interface_count"`
	TotalLocalStorageGb                       []TotalLocalStorageGbState       `json:"total_local_storage_gb"`
	VcpuCount                                 []VcpuCountState                 `json:"vcpu_count"`
}

type AcceleratorCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type AcceleratorTotalMemoryMibState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type BaselineEbsBandwidthMbpsState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type MemoryGibPerVcpuState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type MemoryMibState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type NetworkBandwidthGbpsState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type NetworkInterfaceCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type TotalLocalStorageGbState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type VcpuCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type SpotMaintenanceStrategiesState struct {
	CapacityRebalance []CapacityRebalanceState `json:"capacity_rebalance"`
}

type CapacityRebalanceState struct {
	ReplacementStrategy string `json:"replacement_strategy"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
