// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEvidentlySegment(name string, args EvidentlySegmentArgs) *EvidentlySegment {
	return &EvidentlySegment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EvidentlySegment)(nil)

type EvidentlySegment struct {
	Name  string
	Args  EvidentlySegmentArgs
	state *evidentlySegmentState
}

func (es *EvidentlySegment) Type() string {
	return "aws_evidently_segment"
}

func (es *EvidentlySegment) LocalName() string {
	return es.Name
}

func (es *EvidentlySegment) Configuration() interface{} {
	return es.Args
}

func (es *EvidentlySegment) Attributes() evidentlySegmentAttributes {
	return evidentlySegmentAttributes{ref: terra.ReferenceResource(es)}
}

func (es *EvidentlySegment) ImportState(av io.Reader) error {
	es.state = &evidentlySegmentState{}
	if err := json.NewDecoder(av).Decode(es.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", es.Type(), es.LocalName(), err)
	}
	return nil
}

func (es *EvidentlySegment) State() (*evidentlySegmentState, bool) {
	return es.state, es.state != nil
}

func (es *EvidentlySegment) StateMust() *evidentlySegmentState {
	if es.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", es.Type(), es.LocalName()))
	}
	return es.state
}

func (es *EvidentlySegment) DependOn() terra.Reference {
	return terra.ReferenceResource(es)
}

type EvidentlySegmentArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Pattern: string, required
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that EvidentlySegment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type evidentlySegmentAttributes struct {
	ref terra.Reference
}

func (es evidentlySegmentAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("arn"))
}

func (es evidentlySegmentAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("created_time"))
}

func (es evidentlySegmentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("description"))
}

func (es evidentlySegmentAttributes) ExperimentCount() terra.NumberValue {
	return terra.ReferenceNumber(es.ref.Append("experiment_count"))
}

func (es evidentlySegmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("id"))
}

func (es evidentlySegmentAttributes) LastUpdatedTime() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("last_updated_time"))
}

func (es evidentlySegmentAttributes) LaunchCount() terra.NumberValue {
	return terra.ReferenceNumber(es.ref.Append("launch_count"))
}

func (es evidentlySegmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("name"))
}

func (es evidentlySegmentAttributes) Pattern() terra.StringValue {
	return terra.ReferenceString(es.ref.Append("pattern"))
}

func (es evidentlySegmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](es.ref.Append("tags"))
}

func (es evidentlySegmentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](es.ref.Append("tags_all"))
}

type evidentlySegmentState struct {
	Arn             string            `json:"arn"`
	CreatedTime     string            `json:"created_time"`
	Description     string            `json:"description"`
	ExperimentCount float64           `json:"experiment_count"`
	Id              string            `json:"id"`
	LastUpdatedTime string            `json:"last_updated_time"`
	LaunchCount     float64           `json:"launch_count"`
	Name            string            `json:"name"`
	Pattern         string            `json:"pattern"`
	Tags            map[string]string `json:"tags"`
	TagsAll         map[string]string `json:"tags_all"`
}
