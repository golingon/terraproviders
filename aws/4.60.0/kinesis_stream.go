// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	kinesisstream "github.com/golingon/terraproviders/aws/4.60.0/kinesisstream"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKinesisStream(name string, args KinesisStreamArgs) *KinesisStream {
	return &KinesisStream{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*KinesisStream)(nil)

type KinesisStream struct {
	Name  string
	Args  KinesisStreamArgs
	state *kinesisStreamState
}

func (ks *KinesisStream) Type() string {
	return "aws_kinesis_stream"
}

func (ks *KinesisStream) LocalName() string {
	return ks.Name
}

func (ks *KinesisStream) Configuration() interface{} {
	return ks.Args
}

func (ks *KinesisStream) Attributes() kinesisStreamAttributes {
	return kinesisStreamAttributes{ref: terra.ReferenceResource(ks)}
}

func (ks *KinesisStream) ImportState(av io.Reader) error {
	ks.state = &kinesisStreamState{}
	if err := json.NewDecoder(av).Decode(ks.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ks.Type(), ks.LocalName(), err)
	}
	return nil
}

func (ks *KinesisStream) State() (*kinesisStreamState, bool) {
	return ks.state, ks.state != nil
}

func (ks *KinesisStream) StateMust() *kinesisStreamState {
	if ks.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ks.Type(), ks.LocalName()))
	}
	return ks.state
}

func (ks *KinesisStream) DependOn() terra.Reference {
	return terra.ReferenceResource(ks)
}

type KinesisStreamArgs struct {
	// Arn: string, optional
	Arn terra.StringValue `hcl:"arn,attr"`
	// EncryptionType: string, optional
	EncryptionType terra.StringValue `hcl:"encryption_type,attr"`
	// EnforceConsumerDeletion: bool, optional
	EnforceConsumerDeletion terra.BoolValue `hcl:"enforce_consumer_deletion,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RetentionPeriod: number, optional
	RetentionPeriod terra.NumberValue `hcl:"retention_period,attr"`
	// ShardCount: number, optional
	ShardCount terra.NumberValue `hcl:"shard_count,attr"`
	// ShardLevelMetrics: set of string, optional
	ShardLevelMetrics terra.SetValue[terra.StringValue] `hcl:"shard_level_metrics,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// StreamModeDetails: optional
	StreamModeDetails *kinesisstream.StreamModeDetails `hcl:"stream_mode_details,block"`
	// Timeouts: optional
	Timeouts *kinesisstream.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that KinesisStream depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kinesisStreamAttributes struct {
	ref terra.Reference
}

func (ks kinesisStreamAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ks.ref.Append("arn"))
}

func (ks kinesisStreamAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceString(ks.ref.Append("encryption_type"))
}

func (ks kinesisStreamAttributes) EnforceConsumerDeletion() terra.BoolValue {
	return terra.ReferenceBool(ks.ref.Append("enforce_consumer_deletion"))
}

func (ks kinesisStreamAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ks.ref.Append("id"))
}

func (ks kinesisStreamAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(ks.ref.Append("kms_key_id"))
}

func (ks kinesisStreamAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ks.ref.Append("name"))
}

func (ks kinesisStreamAttributes) RetentionPeriod() terra.NumberValue {
	return terra.ReferenceNumber(ks.ref.Append("retention_period"))
}

func (ks kinesisStreamAttributes) ShardCount() terra.NumberValue {
	return terra.ReferenceNumber(ks.ref.Append("shard_count"))
}

func (ks kinesisStreamAttributes) ShardLevelMetrics() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](ks.ref.Append("shard_level_metrics"))
}

func (ks kinesisStreamAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ks.ref.Append("tags"))
}

func (ks kinesisStreamAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ks.ref.Append("tags_all"))
}

func (ks kinesisStreamAttributes) StreamModeDetails() terra.ListValue[kinesisstream.StreamModeDetailsAttributes] {
	return terra.ReferenceList[kinesisstream.StreamModeDetailsAttributes](ks.ref.Append("stream_mode_details"))
}

func (ks kinesisStreamAttributes) Timeouts() kinesisstream.TimeoutsAttributes {
	return terra.ReferenceSingle[kinesisstream.TimeoutsAttributes](ks.ref.Append("timeouts"))
}

type kinesisStreamState struct {
	Arn                     string                                 `json:"arn"`
	EncryptionType          string                                 `json:"encryption_type"`
	EnforceConsumerDeletion bool                                   `json:"enforce_consumer_deletion"`
	Id                      string                                 `json:"id"`
	KmsKeyId                string                                 `json:"kms_key_id"`
	Name                    string                                 `json:"name"`
	RetentionPeriod         float64                                `json:"retention_period"`
	ShardCount              float64                                `json:"shard_count"`
	ShardLevelMetrics       []string                               `json:"shard_level_metrics"`
	Tags                    map[string]string                      `json:"tags"`
	TagsAll                 map[string]string                      `json:"tags_all"`
	StreamModeDetails       []kinesisstream.StreamModeDetailsState `json:"stream_mode_details"`
	Timeouts                *kinesisstream.TimeoutsState           `json:"timeouts"`
}
