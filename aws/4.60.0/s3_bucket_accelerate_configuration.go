// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketAccelerateConfiguration(name string, args S3BucketAccelerateConfigurationArgs) *S3BucketAccelerateConfiguration {
	return &S3BucketAccelerateConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketAccelerateConfiguration)(nil)

type S3BucketAccelerateConfiguration struct {
	Name  string
	Args  S3BucketAccelerateConfigurationArgs
	state *s3BucketAccelerateConfigurationState
}

func (sbac *S3BucketAccelerateConfiguration) Type() string {
	return "aws_s3_bucket_accelerate_configuration"
}

func (sbac *S3BucketAccelerateConfiguration) LocalName() string {
	return sbac.Name
}

func (sbac *S3BucketAccelerateConfiguration) Configuration() interface{} {
	return sbac.Args
}

func (sbac *S3BucketAccelerateConfiguration) Attributes() s3BucketAccelerateConfigurationAttributes {
	return s3BucketAccelerateConfigurationAttributes{ref: terra.ReferenceResource(sbac)}
}

func (sbac *S3BucketAccelerateConfiguration) ImportState(av io.Reader) error {
	sbac.state = &s3BucketAccelerateConfigurationState{}
	if err := json.NewDecoder(av).Decode(sbac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbac.Type(), sbac.LocalName(), err)
	}
	return nil
}

func (sbac *S3BucketAccelerateConfiguration) State() (*s3BucketAccelerateConfigurationState, bool) {
	return sbac.state, sbac.state != nil
}

func (sbac *S3BucketAccelerateConfiguration) StateMust() *s3BucketAccelerateConfigurationState {
	if sbac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbac.Type(), sbac.LocalName()))
	}
	return sbac.state
}

func (sbac *S3BucketAccelerateConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(sbac)
}

type S3BucketAccelerateConfigurationArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Status: string, required
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// DependsOn contains resources that S3BucketAccelerateConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketAccelerateConfigurationAttributes struct {
	ref terra.Reference
}

func (sbac s3BucketAccelerateConfigurationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbac.ref.Append("bucket"))
}

func (sbac s3BucketAccelerateConfigurationAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceString(sbac.ref.Append("expected_bucket_owner"))
}

func (sbac s3BucketAccelerateConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbac.ref.Append("id"))
}

func (sbac s3BucketAccelerateConfigurationAttributes) Status() terra.StringValue {
	return terra.ReferenceString(sbac.ref.Append("status"))
}

type s3BucketAccelerateConfigurationState struct {
	Bucket              string `json:"bucket"`
	ExpectedBucketOwner string `json:"expected_bucket_owner"`
	Id                  string `json:"id"`
	Status              string `json:"status"`
}
