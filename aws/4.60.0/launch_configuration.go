// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	launchconfiguration "github.com/golingon/terraproviders/aws/4.60.0/launchconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLaunchConfiguration(name string, args LaunchConfigurationArgs) *LaunchConfiguration {
	return &LaunchConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LaunchConfiguration)(nil)

type LaunchConfiguration struct {
	Name  string
	Args  LaunchConfigurationArgs
	state *launchConfigurationState
}

func (lc *LaunchConfiguration) Type() string {
	return "aws_launch_configuration"
}

func (lc *LaunchConfiguration) LocalName() string {
	return lc.Name
}

func (lc *LaunchConfiguration) Configuration() interface{} {
	return lc.Args
}

func (lc *LaunchConfiguration) Attributes() launchConfigurationAttributes {
	return launchConfigurationAttributes{ref: terra.ReferenceResource(lc)}
}

func (lc *LaunchConfiguration) ImportState(av io.Reader) error {
	lc.state = &launchConfigurationState{}
	if err := json.NewDecoder(av).Decode(lc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lc.Type(), lc.LocalName(), err)
	}
	return nil
}

func (lc *LaunchConfiguration) State() (*launchConfigurationState, bool) {
	return lc.state, lc.state != nil
}

func (lc *LaunchConfiguration) StateMust() *launchConfigurationState {
	if lc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lc.Type(), lc.LocalName()))
	}
	return lc.state
}

func (lc *LaunchConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(lc)
}

type LaunchConfigurationArgs struct {
	// AssociatePublicIpAddress: bool, optional
	AssociatePublicIpAddress terra.BoolValue `hcl:"associate_public_ip_address,attr"`
	// EbsOptimized: bool, optional
	EbsOptimized terra.BoolValue `hcl:"ebs_optimized,attr"`
	// EnableMonitoring: bool, optional
	EnableMonitoring terra.BoolValue `hcl:"enable_monitoring,attr"`
	// IamInstanceProfile: string, optional
	IamInstanceProfile terra.StringValue `hcl:"iam_instance_profile,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageId: string, required
	ImageId terra.StringValue `hcl:"image_id,attr" validate:"required"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// KeyName: string, optional
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// PlacementTenancy: string, optional
	PlacementTenancy terra.StringValue `hcl:"placement_tenancy,attr"`
	// SecurityGroups: set of string, optional
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// SpotPrice: string, optional
	SpotPrice terra.StringValue `hcl:"spot_price,attr"`
	// UserData: string, optional
	UserData terra.StringValue `hcl:"user_data,attr"`
	// UserDataBase64: string, optional
	UserDataBase64 terra.StringValue `hcl:"user_data_base64,attr"`
	// VpcClassicLinkId: string, optional
	VpcClassicLinkId terra.StringValue `hcl:"vpc_classic_link_id,attr"`
	// VpcClassicLinkSecurityGroups: set of string, optional
	VpcClassicLinkSecurityGroups terra.SetValue[terra.StringValue] `hcl:"vpc_classic_link_security_groups,attr"`
	// EbsBlockDevice: min=0
	EbsBlockDevice []launchconfiguration.EbsBlockDevice `hcl:"ebs_block_device,block" validate:"min=0"`
	// EphemeralBlockDevice: min=0
	EphemeralBlockDevice []launchconfiguration.EphemeralBlockDevice `hcl:"ephemeral_block_device,block" validate:"min=0"`
	// MetadataOptions: optional
	MetadataOptions *launchconfiguration.MetadataOptions `hcl:"metadata_options,block"`
	// RootBlockDevice: optional
	RootBlockDevice *launchconfiguration.RootBlockDevice `hcl:"root_block_device,block"`
	// DependsOn contains resources that LaunchConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type launchConfigurationAttributes struct {
	ref terra.Reference
}

func (lc launchConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("arn"))
}

func (lc launchConfigurationAttributes) AssociatePublicIpAddress() terra.BoolValue {
	return terra.ReferenceBool(lc.ref.Append("associate_public_ip_address"))
}

func (lc launchConfigurationAttributes) EbsOptimized() terra.BoolValue {
	return terra.ReferenceBool(lc.ref.Append("ebs_optimized"))
}

func (lc launchConfigurationAttributes) EnableMonitoring() terra.BoolValue {
	return terra.ReferenceBool(lc.ref.Append("enable_monitoring"))
}

func (lc launchConfigurationAttributes) IamInstanceProfile() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("iam_instance_profile"))
}

func (lc launchConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("id"))
}

func (lc launchConfigurationAttributes) ImageId() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("image_id"))
}

func (lc launchConfigurationAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("instance_type"))
}

func (lc launchConfigurationAttributes) KeyName() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("key_name"))
}

func (lc launchConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("name"))
}

func (lc launchConfigurationAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("name_prefix"))
}

func (lc launchConfigurationAttributes) PlacementTenancy() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("placement_tenancy"))
}

func (lc launchConfigurationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](lc.ref.Append("security_groups"))
}

func (lc launchConfigurationAttributes) SpotPrice() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("spot_price"))
}

func (lc launchConfigurationAttributes) UserData() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("user_data"))
}

func (lc launchConfigurationAttributes) UserDataBase64() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("user_data_base64"))
}

func (lc launchConfigurationAttributes) VpcClassicLinkId() terra.StringValue {
	return terra.ReferenceString(lc.ref.Append("vpc_classic_link_id"))
}

func (lc launchConfigurationAttributes) VpcClassicLinkSecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](lc.ref.Append("vpc_classic_link_security_groups"))
}

func (lc launchConfigurationAttributes) EbsBlockDevice() terra.SetValue[launchconfiguration.EbsBlockDeviceAttributes] {
	return terra.ReferenceSet[launchconfiguration.EbsBlockDeviceAttributes](lc.ref.Append("ebs_block_device"))
}

func (lc launchConfigurationAttributes) EphemeralBlockDevice() terra.SetValue[launchconfiguration.EphemeralBlockDeviceAttributes] {
	return terra.ReferenceSet[launchconfiguration.EphemeralBlockDeviceAttributes](lc.ref.Append("ephemeral_block_device"))
}

func (lc launchConfigurationAttributes) MetadataOptions() terra.ListValue[launchconfiguration.MetadataOptionsAttributes] {
	return terra.ReferenceList[launchconfiguration.MetadataOptionsAttributes](lc.ref.Append("metadata_options"))
}

func (lc launchConfigurationAttributes) RootBlockDevice() terra.ListValue[launchconfiguration.RootBlockDeviceAttributes] {
	return terra.ReferenceList[launchconfiguration.RootBlockDeviceAttributes](lc.ref.Append("root_block_device"))
}

type launchConfigurationState struct {
	Arn                          string                                          `json:"arn"`
	AssociatePublicIpAddress     bool                                            `json:"associate_public_ip_address"`
	EbsOptimized                 bool                                            `json:"ebs_optimized"`
	EnableMonitoring             bool                                            `json:"enable_monitoring"`
	IamInstanceProfile           string                                          `json:"iam_instance_profile"`
	Id                           string                                          `json:"id"`
	ImageId                      string                                          `json:"image_id"`
	InstanceType                 string                                          `json:"instance_type"`
	KeyName                      string                                          `json:"key_name"`
	Name                         string                                          `json:"name"`
	NamePrefix                   string                                          `json:"name_prefix"`
	PlacementTenancy             string                                          `json:"placement_tenancy"`
	SecurityGroups               []string                                        `json:"security_groups"`
	SpotPrice                    string                                          `json:"spot_price"`
	UserData                     string                                          `json:"user_data"`
	UserDataBase64               string                                          `json:"user_data_base64"`
	VpcClassicLinkId             string                                          `json:"vpc_classic_link_id"`
	VpcClassicLinkSecurityGroups []string                                        `json:"vpc_classic_link_security_groups"`
	EbsBlockDevice               []launchconfiguration.EbsBlockDeviceState       `json:"ebs_block_device"`
	EphemeralBlockDevice         []launchconfiguration.EphemeralBlockDeviceState `json:"ephemeral_block_device"`
	MetadataOptions              []launchconfiguration.MetadataOptionsState      `json:"metadata_options"`
	RootBlockDevice              []launchconfiguration.RootBlockDeviceState      `json:"root_block_device"`
}
