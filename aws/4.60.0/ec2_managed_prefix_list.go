// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ec2managedprefixlist "github.com/golingon/terraproviders/aws/4.60.0/ec2managedprefixlist"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEc2ManagedPrefixList(name string, args Ec2ManagedPrefixListArgs) *Ec2ManagedPrefixList {
	return &Ec2ManagedPrefixList{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Ec2ManagedPrefixList)(nil)

type Ec2ManagedPrefixList struct {
	Name  string
	Args  Ec2ManagedPrefixListArgs
	state *ec2ManagedPrefixListState
}

func (empl *Ec2ManagedPrefixList) Type() string {
	return "aws_ec2_managed_prefix_list"
}

func (empl *Ec2ManagedPrefixList) LocalName() string {
	return empl.Name
}

func (empl *Ec2ManagedPrefixList) Configuration() interface{} {
	return empl.Args
}

func (empl *Ec2ManagedPrefixList) Attributes() ec2ManagedPrefixListAttributes {
	return ec2ManagedPrefixListAttributes{ref: terra.ReferenceResource(empl)}
}

func (empl *Ec2ManagedPrefixList) ImportState(av io.Reader) error {
	empl.state = &ec2ManagedPrefixListState{}
	if err := json.NewDecoder(av).Decode(empl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", empl.Type(), empl.LocalName(), err)
	}
	return nil
}

func (empl *Ec2ManagedPrefixList) State() (*ec2ManagedPrefixListState, bool) {
	return empl.state, empl.state != nil
}

func (empl *Ec2ManagedPrefixList) StateMust() *ec2ManagedPrefixListState {
	if empl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", empl.Type(), empl.LocalName()))
	}
	return empl.state
}

func (empl *Ec2ManagedPrefixList) DependOn() terra.Reference {
	return terra.ReferenceResource(empl)
}

type Ec2ManagedPrefixListArgs struct {
	// AddressFamily: string, required
	AddressFamily terra.StringValue `hcl:"address_family,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MaxEntries: number, required
	MaxEntries terra.NumberValue `hcl:"max_entries,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Entry: min=0
	Entry []ec2managedprefixlist.Entry `hcl:"entry,block" validate:"min=0"`
	// DependsOn contains resources that Ec2ManagedPrefixList depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ec2ManagedPrefixListAttributes struct {
	ref terra.Reference
}

func (empl ec2ManagedPrefixListAttributes) AddressFamily() terra.StringValue {
	return terra.ReferenceString(empl.ref.Append("address_family"))
}

func (empl ec2ManagedPrefixListAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(empl.ref.Append("arn"))
}

func (empl ec2ManagedPrefixListAttributes) Id() terra.StringValue {
	return terra.ReferenceString(empl.ref.Append("id"))
}

func (empl ec2ManagedPrefixListAttributes) MaxEntries() terra.NumberValue {
	return terra.ReferenceNumber(empl.ref.Append("max_entries"))
}

func (empl ec2ManagedPrefixListAttributes) Name() terra.StringValue {
	return terra.ReferenceString(empl.ref.Append("name"))
}

func (empl ec2ManagedPrefixListAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(empl.ref.Append("owner_id"))
}

func (empl ec2ManagedPrefixListAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](empl.ref.Append("tags"))
}

func (empl ec2ManagedPrefixListAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](empl.ref.Append("tags_all"))
}

func (empl ec2ManagedPrefixListAttributes) Version() terra.NumberValue {
	return terra.ReferenceNumber(empl.ref.Append("version"))
}

func (empl ec2ManagedPrefixListAttributes) Entry() terra.SetValue[ec2managedprefixlist.EntryAttributes] {
	return terra.ReferenceSet[ec2managedprefixlist.EntryAttributes](empl.ref.Append("entry"))
}

type ec2ManagedPrefixListState struct {
	AddressFamily string                            `json:"address_family"`
	Arn           string                            `json:"arn"`
	Id            string                            `json:"id"`
	MaxEntries    float64                           `json:"max_entries"`
	Name          string                            `json:"name"`
	OwnerId       string                            `json:"owner_id"`
	Tags          map[string]string                 `json:"tags"`
	TagsAll       map[string]string                 `json:"tags_all"`
	Version       float64                           `json:"version"`
	Entry         []ec2managedprefixlist.EntryState `json:"entry"`
}
