// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	auditmanagerassessment "github.com/golingon/terraproviders/aws/4.60.0/auditmanagerassessment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAuditmanagerAssessment(name string, args AuditmanagerAssessmentArgs) *AuditmanagerAssessment {
	return &AuditmanagerAssessment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AuditmanagerAssessment)(nil)

type AuditmanagerAssessment struct {
	Name  string
	Args  AuditmanagerAssessmentArgs
	state *auditmanagerAssessmentState
}

func (aa *AuditmanagerAssessment) Type() string {
	return "aws_auditmanager_assessment"
}

func (aa *AuditmanagerAssessment) LocalName() string {
	return aa.Name
}

func (aa *AuditmanagerAssessment) Configuration() interface{} {
	return aa.Args
}

func (aa *AuditmanagerAssessment) Attributes() auditmanagerAssessmentAttributes {
	return auditmanagerAssessmentAttributes{ref: terra.ReferenceResource(aa)}
}

func (aa *AuditmanagerAssessment) ImportState(av io.Reader) error {
	aa.state = &auditmanagerAssessmentState{}
	if err := json.NewDecoder(av).Decode(aa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aa.Type(), aa.LocalName(), err)
	}
	return nil
}

func (aa *AuditmanagerAssessment) State() (*auditmanagerAssessmentState, bool) {
	return aa.state, aa.state != nil
}

func (aa *AuditmanagerAssessment) StateMust() *auditmanagerAssessmentState {
	if aa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aa.Type(), aa.LocalName()))
	}
	return aa.state
}

func (aa *AuditmanagerAssessment) DependOn() terra.Reference {
	return terra.ReferenceResource(aa)
}

type AuditmanagerAssessmentArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// FrameworkId: string, required
	FrameworkId terra.StringValue `hcl:"framework_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Roles: min=0
	Roles []auditmanagerassessment.Roles `hcl:"roles,block" validate:"min=0"`
	// RolesAll: min=0
	RolesAll []auditmanagerassessment.RolesAll `hcl:"roles_all,block" validate:"min=0"`
	// AssessmentReportsDestination: min=0
	AssessmentReportsDestination []auditmanagerassessment.AssessmentReportsDestination `hcl:"assessment_reports_destination,block" validate:"min=0"`
	// Scope: min=0
	Scope []auditmanagerassessment.Scope `hcl:"scope,block" validate:"min=0"`
	// DependsOn contains resources that AuditmanagerAssessment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type auditmanagerAssessmentAttributes struct {
	ref terra.Reference
}

func (aa auditmanagerAssessmentAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("arn"))
}

func (aa auditmanagerAssessmentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("description"))
}

func (aa auditmanagerAssessmentAttributes) FrameworkId() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("framework_id"))
}

func (aa auditmanagerAssessmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("id"))
}

func (aa auditmanagerAssessmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("name"))
}

func (aa auditmanagerAssessmentAttributes) Status() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("status"))
}

func (aa auditmanagerAssessmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aa.ref.Append("tags"))
}

func (aa auditmanagerAssessmentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aa.ref.Append("tags_all"))
}

func (aa auditmanagerAssessmentAttributes) Roles() terra.SetValue[auditmanagerassessment.RolesAttributes] {
	return terra.ReferenceSet[auditmanagerassessment.RolesAttributes](aa.ref.Append("roles"))
}

func (aa auditmanagerAssessmentAttributes) RolesAll() terra.SetValue[auditmanagerassessment.RolesAllAttributes] {
	return terra.ReferenceSet[auditmanagerassessment.RolesAllAttributes](aa.ref.Append("roles_all"))
}

func (aa auditmanagerAssessmentAttributes) AssessmentReportsDestination() terra.ListValue[auditmanagerassessment.AssessmentReportsDestinationAttributes] {
	return terra.ReferenceList[auditmanagerassessment.AssessmentReportsDestinationAttributes](aa.ref.Append("assessment_reports_destination"))
}

func (aa auditmanagerAssessmentAttributes) Scope() terra.ListValue[auditmanagerassessment.ScopeAttributes] {
	return terra.ReferenceList[auditmanagerassessment.ScopeAttributes](aa.ref.Append("scope"))
}

type auditmanagerAssessmentState struct {
	Arn                          string                                                     `json:"arn"`
	Description                  string                                                     `json:"description"`
	FrameworkId                  string                                                     `json:"framework_id"`
	Id                           string                                                     `json:"id"`
	Name                         string                                                     `json:"name"`
	Status                       string                                                     `json:"status"`
	Tags                         map[string]string                                          `json:"tags"`
	TagsAll                      map[string]string                                          `json:"tags_all"`
	Roles                        []auditmanagerassessment.RolesState                        `json:"roles"`
	RolesAll                     []auditmanagerassessment.RolesAllState                     `json:"roles_all"`
	AssessmentReportsDestination []auditmanagerassessment.AssessmentReportsDestinationState `json:"assessment_reports_destination"`
	Scope                        []auditmanagerassessment.ScopeState                        `json:"scope"`
}
