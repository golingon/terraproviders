// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftSubnetGroup(name string, args RedshiftSubnetGroupArgs) *RedshiftSubnetGroup {
	return &RedshiftSubnetGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftSubnetGroup)(nil)

type RedshiftSubnetGroup struct {
	Name  string
	Args  RedshiftSubnetGroupArgs
	state *redshiftSubnetGroupState
}

func (rsg *RedshiftSubnetGroup) Type() string {
	return "aws_redshift_subnet_group"
}

func (rsg *RedshiftSubnetGroup) LocalName() string {
	return rsg.Name
}

func (rsg *RedshiftSubnetGroup) Configuration() interface{} {
	return rsg.Args
}

func (rsg *RedshiftSubnetGroup) Attributes() redshiftSubnetGroupAttributes {
	return redshiftSubnetGroupAttributes{ref: terra.ReferenceResource(rsg)}
}

func (rsg *RedshiftSubnetGroup) ImportState(av io.Reader) error {
	rsg.state = &redshiftSubnetGroupState{}
	if err := json.NewDecoder(av).Decode(rsg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rsg.Type(), rsg.LocalName(), err)
	}
	return nil
}

func (rsg *RedshiftSubnetGroup) State() (*redshiftSubnetGroupState, bool) {
	return rsg.state, rsg.state != nil
}

func (rsg *RedshiftSubnetGroup) StateMust() *redshiftSubnetGroupState {
	if rsg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rsg.Type(), rsg.LocalName()))
	}
	return rsg.state
}

func (rsg *RedshiftSubnetGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(rsg)
}

type RedshiftSubnetGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that RedshiftSubnetGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftSubnetGroupAttributes struct {
	ref terra.Reference
}

func (rsg redshiftSubnetGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rsg.ref.Append("arn"))
}

func (rsg redshiftSubnetGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(rsg.ref.Append("description"))
}

func (rsg redshiftSubnetGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rsg.ref.Append("id"))
}

func (rsg redshiftSubnetGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rsg.ref.Append("name"))
}

func (rsg redshiftSubnetGroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rsg.ref.Append("subnet_ids"))
}

func (rsg redshiftSubnetGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rsg.ref.Append("tags"))
}

func (rsg redshiftSubnetGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rsg.ref.Append("tags_all"))
}

type redshiftSubnetGroupState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	SubnetIds   []string          `json:"subnet_ids"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
}
