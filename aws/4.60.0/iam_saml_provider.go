// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIamSamlProvider(name string, args IamSamlProviderArgs) *IamSamlProvider {
	return &IamSamlProvider{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IamSamlProvider)(nil)

type IamSamlProvider struct {
	Name  string
	Args  IamSamlProviderArgs
	state *iamSamlProviderState
}

func (isp *IamSamlProvider) Type() string {
	return "aws_iam_saml_provider"
}

func (isp *IamSamlProvider) LocalName() string {
	return isp.Name
}

func (isp *IamSamlProvider) Configuration() interface{} {
	return isp.Args
}

func (isp *IamSamlProvider) Attributes() iamSamlProviderAttributes {
	return iamSamlProviderAttributes{ref: terra.ReferenceResource(isp)}
}

func (isp *IamSamlProvider) ImportState(av io.Reader) error {
	isp.state = &iamSamlProviderState{}
	if err := json.NewDecoder(av).Decode(isp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", isp.Type(), isp.LocalName(), err)
	}
	return nil
}

func (isp *IamSamlProvider) State() (*iamSamlProviderState, bool) {
	return isp.state, isp.state != nil
}

func (isp *IamSamlProvider) StateMust() *iamSamlProviderState {
	if isp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", isp.Type(), isp.LocalName()))
	}
	return isp.state
}

func (isp *IamSamlProvider) DependOn() terra.Reference {
	return terra.ReferenceResource(isp)
}

type IamSamlProviderArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SamlMetadataDocument: string, required
	SamlMetadataDocument terra.StringValue `hcl:"saml_metadata_document,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that IamSamlProvider depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iamSamlProviderAttributes struct {
	ref terra.Reference
}

func (isp iamSamlProviderAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("arn"))
}

func (isp iamSamlProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("id"))
}

func (isp iamSamlProviderAttributes) Name() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("name"))
}

func (isp iamSamlProviderAttributes) SamlMetadataDocument() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("saml_metadata_document"))
}

func (isp iamSamlProviderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](isp.ref.Append("tags"))
}

func (isp iamSamlProviderAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](isp.ref.Append("tags_all"))
}

func (isp iamSamlProviderAttributes) ValidUntil() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("valid_until"))
}

type iamSamlProviderState struct {
	Arn                  string            `json:"arn"`
	Id                   string            `json:"id"`
	Name                 string            `json:"name"`
	SamlMetadataDocument string            `json:"saml_metadata_document"`
	Tags                 map[string]string `json:"tags"`
	TagsAll              map[string]string `json:"tags_all"`
	ValidUntil           string            `json:"valid_until"`
}
