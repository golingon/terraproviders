// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkmanagertransitgatewayconnectpeerassociation "github.com/golingon/terraproviders/aws/4.60.0/networkmanagertransitgatewayconnectpeerassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkmanagerTransitGatewayConnectPeerAssociation(name string, args NetworkmanagerTransitGatewayConnectPeerAssociationArgs) *NetworkmanagerTransitGatewayConnectPeerAssociation {
	return &NetworkmanagerTransitGatewayConnectPeerAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkmanagerTransitGatewayConnectPeerAssociation)(nil)

type NetworkmanagerTransitGatewayConnectPeerAssociation struct {
	Name  string
	Args  NetworkmanagerTransitGatewayConnectPeerAssociationArgs
	state *networkmanagerTransitGatewayConnectPeerAssociationState
}

func (ntgcpa *NetworkmanagerTransitGatewayConnectPeerAssociation) Type() string {
	return "aws_networkmanager_transit_gateway_connect_peer_association"
}

func (ntgcpa *NetworkmanagerTransitGatewayConnectPeerAssociation) LocalName() string {
	return ntgcpa.Name
}

func (ntgcpa *NetworkmanagerTransitGatewayConnectPeerAssociation) Configuration() interface{} {
	return ntgcpa.Args
}

func (ntgcpa *NetworkmanagerTransitGatewayConnectPeerAssociation) Attributes() networkmanagerTransitGatewayConnectPeerAssociationAttributes {
	return networkmanagerTransitGatewayConnectPeerAssociationAttributes{ref: terra.ReferenceResource(ntgcpa)}
}

func (ntgcpa *NetworkmanagerTransitGatewayConnectPeerAssociation) ImportState(av io.Reader) error {
	ntgcpa.state = &networkmanagerTransitGatewayConnectPeerAssociationState{}
	if err := json.NewDecoder(av).Decode(ntgcpa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ntgcpa.Type(), ntgcpa.LocalName(), err)
	}
	return nil
}

func (ntgcpa *NetworkmanagerTransitGatewayConnectPeerAssociation) State() (*networkmanagerTransitGatewayConnectPeerAssociationState, bool) {
	return ntgcpa.state, ntgcpa.state != nil
}

func (ntgcpa *NetworkmanagerTransitGatewayConnectPeerAssociation) StateMust() *networkmanagerTransitGatewayConnectPeerAssociationState {
	if ntgcpa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ntgcpa.Type(), ntgcpa.LocalName()))
	}
	return ntgcpa.state
}

func (ntgcpa *NetworkmanagerTransitGatewayConnectPeerAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(ntgcpa)
}

type NetworkmanagerTransitGatewayConnectPeerAssociationArgs struct {
	// DeviceId: string, required
	DeviceId terra.StringValue `hcl:"device_id,attr" validate:"required"`
	// GlobalNetworkId: string, required
	GlobalNetworkId terra.StringValue `hcl:"global_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LinkId: string, optional
	LinkId terra.StringValue `hcl:"link_id,attr"`
	// TransitGatewayConnectPeerArn: string, required
	TransitGatewayConnectPeerArn terra.StringValue `hcl:"transit_gateway_connect_peer_arn,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *networkmanagertransitgatewayconnectpeerassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkmanagerTransitGatewayConnectPeerAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkmanagerTransitGatewayConnectPeerAssociationAttributes struct {
	ref terra.Reference
}

func (ntgcpa networkmanagerTransitGatewayConnectPeerAssociationAttributes) DeviceId() terra.StringValue {
	return terra.ReferenceString(ntgcpa.ref.Append("device_id"))
}

func (ntgcpa networkmanagerTransitGatewayConnectPeerAssociationAttributes) GlobalNetworkId() terra.StringValue {
	return terra.ReferenceString(ntgcpa.ref.Append("global_network_id"))
}

func (ntgcpa networkmanagerTransitGatewayConnectPeerAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ntgcpa.ref.Append("id"))
}

func (ntgcpa networkmanagerTransitGatewayConnectPeerAssociationAttributes) LinkId() terra.StringValue {
	return terra.ReferenceString(ntgcpa.ref.Append("link_id"))
}

func (ntgcpa networkmanagerTransitGatewayConnectPeerAssociationAttributes) TransitGatewayConnectPeerArn() terra.StringValue {
	return terra.ReferenceString(ntgcpa.ref.Append("transit_gateway_connect_peer_arn"))
}

func (ntgcpa networkmanagerTransitGatewayConnectPeerAssociationAttributes) Timeouts() networkmanagertransitgatewayconnectpeerassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagertransitgatewayconnectpeerassociation.TimeoutsAttributes](ntgcpa.ref.Append("timeouts"))
}

type networkmanagerTransitGatewayConnectPeerAssociationState struct {
	DeviceId                     string                                                            `json:"device_id"`
	GlobalNetworkId              string                                                            `json:"global_network_id"`
	Id                           string                                                            `json:"id"`
	LinkId                       string                                                            `json:"link_id"`
	TransitGatewayConnectPeerArn string                                                            `json:"transit_gateway_connect_peer_arn"`
	Timeouts                     *networkmanagertransitgatewayconnectpeerassociation.TimeoutsState `json:"timeouts"`
}
