// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	route53resolverrule "github.com/golingon/terraproviders/aws/4.60.0/route53resolverrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53ResolverRule(name string, args Route53ResolverRuleArgs) *Route53ResolverRule {
	return &Route53ResolverRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53ResolverRule)(nil)

type Route53ResolverRule struct {
	Name  string
	Args  Route53ResolverRuleArgs
	state *route53ResolverRuleState
}

func (rrr *Route53ResolverRule) Type() string {
	return "aws_route53_resolver_rule"
}

func (rrr *Route53ResolverRule) LocalName() string {
	return rrr.Name
}

func (rrr *Route53ResolverRule) Configuration() interface{} {
	return rrr.Args
}

func (rrr *Route53ResolverRule) Attributes() route53ResolverRuleAttributes {
	return route53ResolverRuleAttributes{ref: terra.ReferenceResource(rrr)}
}

func (rrr *Route53ResolverRule) ImportState(av io.Reader) error {
	rrr.state = &route53ResolverRuleState{}
	if err := json.NewDecoder(av).Decode(rrr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrr.Type(), rrr.LocalName(), err)
	}
	return nil
}

func (rrr *Route53ResolverRule) State() (*route53ResolverRuleState, bool) {
	return rrr.state, rrr.state != nil
}

func (rrr *Route53ResolverRule) StateMust() *route53ResolverRuleState {
	if rrr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrr.Type(), rrr.LocalName()))
	}
	return rrr.state
}

func (rrr *Route53ResolverRule) DependOn() terra.Reference {
	return terra.ReferenceResource(rrr)
}

type Route53ResolverRuleArgs struct {
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ResolverEndpointId: string, optional
	ResolverEndpointId terra.StringValue `hcl:"resolver_endpoint_id,attr"`
	// RuleType: string, required
	RuleType terra.StringValue `hcl:"rule_type,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetIp: min=0
	TargetIp []route53resolverrule.TargetIp `hcl:"target_ip,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *route53resolverrule.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Route53ResolverRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53ResolverRuleAttributes struct {
	ref terra.Reference
}

func (rrr route53ResolverRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rrr.ref.Append("arn"))
}

func (rrr route53ResolverRuleAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(rrr.ref.Append("domain_name"))
}

func (rrr route53ResolverRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rrr.ref.Append("id"))
}

func (rrr route53ResolverRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rrr.ref.Append("name"))
}

func (rrr route53ResolverRuleAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(rrr.ref.Append("owner_id"))
}

func (rrr route53ResolverRuleAttributes) ResolverEndpointId() terra.StringValue {
	return terra.ReferenceString(rrr.ref.Append("resolver_endpoint_id"))
}

func (rrr route53ResolverRuleAttributes) RuleType() terra.StringValue {
	return terra.ReferenceString(rrr.ref.Append("rule_type"))
}

func (rrr route53ResolverRuleAttributes) ShareStatus() terra.StringValue {
	return terra.ReferenceString(rrr.ref.Append("share_status"))
}

func (rrr route53ResolverRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrr.ref.Append("tags"))
}

func (rrr route53ResolverRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rrr.ref.Append("tags_all"))
}

func (rrr route53ResolverRuleAttributes) TargetIp() terra.SetValue[route53resolverrule.TargetIpAttributes] {
	return terra.ReferenceSet[route53resolverrule.TargetIpAttributes](rrr.ref.Append("target_ip"))
}

func (rrr route53ResolverRuleAttributes) Timeouts() route53resolverrule.TimeoutsAttributes {
	return terra.ReferenceSingle[route53resolverrule.TimeoutsAttributes](rrr.ref.Append("timeouts"))
}

type route53ResolverRuleState struct {
	Arn                string                              `json:"arn"`
	DomainName         string                              `json:"domain_name"`
	Id                 string                              `json:"id"`
	Name               string                              `json:"name"`
	OwnerId            string                              `json:"owner_id"`
	ResolverEndpointId string                              `json:"resolver_endpoint_id"`
	RuleType           string                              `json:"rule_type"`
	ShareStatus        string                              `json:"share_status"`
	Tags               map[string]string                   `json:"tags"`
	TagsAll            map[string]string                   `json:"tags_all"`
	TargetIp           []route53resolverrule.TargetIpState `json:"target_ip"`
	Timeouts           *route53resolverrule.TimeoutsState  `json:"timeouts"`
}
