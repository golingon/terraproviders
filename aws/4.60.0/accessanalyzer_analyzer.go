// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAccessanalyzerAnalyzer(name string, args AccessanalyzerAnalyzerArgs) *AccessanalyzerAnalyzer {
	return &AccessanalyzerAnalyzer{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AccessanalyzerAnalyzer)(nil)

type AccessanalyzerAnalyzer struct {
	Name  string
	Args  AccessanalyzerAnalyzerArgs
	state *accessanalyzerAnalyzerState
}

func (aa *AccessanalyzerAnalyzer) Type() string {
	return "aws_accessanalyzer_analyzer"
}

func (aa *AccessanalyzerAnalyzer) LocalName() string {
	return aa.Name
}

func (aa *AccessanalyzerAnalyzer) Configuration() interface{} {
	return aa.Args
}

func (aa *AccessanalyzerAnalyzer) Attributes() accessanalyzerAnalyzerAttributes {
	return accessanalyzerAnalyzerAttributes{ref: terra.ReferenceResource(aa)}
}

func (aa *AccessanalyzerAnalyzer) ImportState(av io.Reader) error {
	aa.state = &accessanalyzerAnalyzerState{}
	if err := json.NewDecoder(av).Decode(aa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aa.Type(), aa.LocalName(), err)
	}
	return nil
}

func (aa *AccessanalyzerAnalyzer) State() (*accessanalyzerAnalyzerState, bool) {
	return aa.state, aa.state != nil
}

func (aa *AccessanalyzerAnalyzer) StateMust() *accessanalyzerAnalyzerState {
	if aa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aa.Type(), aa.LocalName()))
	}
	return aa.state
}

func (aa *AccessanalyzerAnalyzer) DependOn() terra.Reference {
	return terra.ReferenceResource(aa)
}

type AccessanalyzerAnalyzerArgs struct {
	// AnalyzerName: string, required
	AnalyzerName terra.StringValue `hcl:"analyzer_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// DependsOn contains resources that AccessanalyzerAnalyzer depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type accessanalyzerAnalyzerAttributes struct {
	ref terra.Reference
}

func (aa accessanalyzerAnalyzerAttributes) AnalyzerName() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("analyzer_name"))
}

func (aa accessanalyzerAnalyzerAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("arn"))
}

func (aa accessanalyzerAnalyzerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("id"))
}

func (aa accessanalyzerAnalyzerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aa.ref.Append("tags"))
}

func (aa accessanalyzerAnalyzerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](aa.ref.Append("tags_all"))
}

func (aa accessanalyzerAnalyzerAttributes) Type() terra.StringValue {
	return terra.ReferenceString(aa.ref.Append("type"))
}

type accessanalyzerAnalyzerState struct {
	AnalyzerName string            `json:"analyzer_name"`
	Arn          string            `json:"arn"`
	Id           string            `json:"id"`
	Tags         map[string]string `json:"tags"`
	TagsAll      map[string]string `json:"tags_all"`
	Type         string            `json:"type"`
}
