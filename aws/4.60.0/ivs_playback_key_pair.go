// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	ivsplaybackkeypair "github.com/golingon/terraproviders/aws/4.60.0/ivsplaybackkeypair"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIvsPlaybackKeyPair(name string, args IvsPlaybackKeyPairArgs) *IvsPlaybackKeyPair {
	return &IvsPlaybackKeyPair{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IvsPlaybackKeyPair)(nil)

type IvsPlaybackKeyPair struct {
	Name  string
	Args  IvsPlaybackKeyPairArgs
	state *ivsPlaybackKeyPairState
}

func (ipkp *IvsPlaybackKeyPair) Type() string {
	return "aws_ivs_playback_key_pair"
}

func (ipkp *IvsPlaybackKeyPair) LocalName() string {
	return ipkp.Name
}

func (ipkp *IvsPlaybackKeyPair) Configuration() interface{} {
	return ipkp.Args
}

func (ipkp *IvsPlaybackKeyPair) Attributes() ivsPlaybackKeyPairAttributes {
	return ivsPlaybackKeyPairAttributes{ref: terra.ReferenceResource(ipkp)}
}

func (ipkp *IvsPlaybackKeyPair) ImportState(av io.Reader) error {
	ipkp.state = &ivsPlaybackKeyPairState{}
	if err := json.NewDecoder(av).Decode(ipkp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ipkp.Type(), ipkp.LocalName(), err)
	}
	return nil
}

func (ipkp *IvsPlaybackKeyPair) State() (*ivsPlaybackKeyPairState, bool) {
	return ipkp.state, ipkp.state != nil
}

func (ipkp *IvsPlaybackKeyPair) StateMust() *ivsPlaybackKeyPairState {
	if ipkp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ipkp.Type(), ipkp.LocalName()))
	}
	return ipkp.state
}

func (ipkp *IvsPlaybackKeyPair) DependOn() terra.Reference {
	return terra.ReferenceResource(ipkp)
}

type IvsPlaybackKeyPairArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// PublicKey: string, required
	PublicKey terra.StringValue `hcl:"public_key,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *ivsplaybackkeypair.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that IvsPlaybackKeyPair depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ivsPlaybackKeyPairAttributes struct {
	ref terra.Reference
}

func (ipkp ivsPlaybackKeyPairAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ipkp.ref.Append("arn"))
}

func (ipkp ivsPlaybackKeyPairAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceString(ipkp.ref.Append("fingerprint"))
}

func (ipkp ivsPlaybackKeyPairAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ipkp.ref.Append("id"))
}

func (ipkp ivsPlaybackKeyPairAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ipkp.ref.Append("name"))
}

func (ipkp ivsPlaybackKeyPairAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceString(ipkp.ref.Append("public_key"))
}

func (ipkp ivsPlaybackKeyPairAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ipkp.ref.Append("tags"))
}

func (ipkp ivsPlaybackKeyPairAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ipkp.ref.Append("tags_all"))
}

func (ipkp ivsPlaybackKeyPairAttributes) Timeouts() ivsplaybackkeypair.TimeoutsAttributes {
	return terra.ReferenceSingle[ivsplaybackkeypair.TimeoutsAttributes](ipkp.ref.Append("timeouts"))
}

type ivsPlaybackKeyPairState struct {
	Arn         string                            `json:"arn"`
	Fingerprint string                            `json:"fingerprint"`
	Id          string                            `json:"id"`
	Name        string                            `json:"name"`
	PublicKey   string                            `json:"public_key"`
	Tags        map[string]string                 `json:"tags"`
	TagsAll     map[string]string                 `json:"tags_all"`
	Timeouts    *ivsplaybackkeypair.TimeoutsState `json:"timeouts"`
}
