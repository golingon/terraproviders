// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	mskserverlesscluster "github.com/golingon/terraproviders/aws/4.60.0/mskserverlesscluster"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMskServerlessCluster(name string, args MskServerlessClusterArgs) *MskServerlessCluster {
	return &MskServerlessCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MskServerlessCluster)(nil)

type MskServerlessCluster struct {
	Name  string
	Args  MskServerlessClusterArgs
	state *mskServerlessClusterState
}

func (msc *MskServerlessCluster) Type() string {
	return "aws_msk_serverless_cluster"
}

func (msc *MskServerlessCluster) LocalName() string {
	return msc.Name
}

func (msc *MskServerlessCluster) Configuration() interface{} {
	return msc.Args
}

func (msc *MskServerlessCluster) Attributes() mskServerlessClusterAttributes {
	return mskServerlessClusterAttributes{ref: terra.ReferenceResource(msc)}
}

func (msc *MskServerlessCluster) ImportState(av io.Reader) error {
	msc.state = &mskServerlessClusterState{}
	if err := json.NewDecoder(av).Decode(msc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", msc.Type(), msc.LocalName(), err)
	}
	return nil
}

func (msc *MskServerlessCluster) State() (*mskServerlessClusterState, bool) {
	return msc.state, msc.state != nil
}

func (msc *MskServerlessCluster) StateMust() *mskServerlessClusterState {
	if msc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", msc.Type(), msc.LocalName()))
	}
	return msc.state
}

func (msc *MskServerlessCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(msc)
}

type MskServerlessClusterArgs struct {
	// ClusterName: string, required
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ClientAuthentication: required
	ClientAuthentication *mskserverlesscluster.ClientAuthentication `hcl:"client_authentication,block" validate:"required"`
	// Timeouts: optional
	Timeouts *mskserverlesscluster.Timeouts `hcl:"timeouts,block"`
	// VpcConfig: min=1
	VpcConfig []mskserverlesscluster.VpcConfig `hcl:"vpc_config,block" validate:"min=1"`
	// DependsOn contains resources that MskServerlessCluster depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mskServerlessClusterAttributes struct {
	ref terra.Reference
}

func (msc mskServerlessClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(msc.ref.Append("arn"))
}

func (msc mskServerlessClusterAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceString(msc.ref.Append("cluster_name"))
}

func (msc mskServerlessClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceString(msc.ref.Append("id"))
}

func (msc mskServerlessClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](msc.ref.Append("tags"))
}

func (msc mskServerlessClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](msc.ref.Append("tags_all"))
}

func (msc mskServerlessClusterAttributes) ClientAuthentication() terra.ListValue[mskserverlesscluster.ClientAuthenticationAttributes] {
	return terra.ReferenceList[mskserverlesscluster.ClientAuthenticationAttributes](msc.ref.Append("client_authentication"))
}

func (msc mskServerlessClusterAttributes) Timeouts() mskserverlesscluster.TimeoutsAttributes {
	return terra.ReferenceSingle[mskserverlesscluster.TimeoutsAttributes](msc.ref.Append("timeouts"))
}

func (msc mskServerlessClusterAttributes) VpcConfig() terra.ListValue[mskserverlesscluster.VpcConfigAttributes] {
	return terra.ReferenceList[mskserverlesscluster.VpcConfigAttributes](msc.ref.Append("vpc_config"))
}

type mskServerlessClusterState struct {
	Arn                  string                                           `json:"arn"`
	ClusterName          string                                           `json:"cluster_name"`
	Id                   string                                           `json:"id"`
	Tags                 map[string]string                                `json:"tags"`
	TagsAll              map[string]string                                `json:"tags_all"`
	ClientAuthentication []mskserverlesscluster.ClientAuthenticationState `json:"client_authentication"`
	Timeouts             *mskserverlesscluster.TimeoutsState              `json:"timeouts"`
	VpcConfig            []mskserverlesscluster.VpcConfigState            `json:"vpc_config"`
}
