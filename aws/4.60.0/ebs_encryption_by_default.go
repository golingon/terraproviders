// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEbsEncryptionByDefault(name string, args EbsEncryptionByDefaultArgs) *EbsEncryptionByDefault {
	return &EbsEncryptionByDefault{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EbsEncryptionByDefault)(nil)

type EbsEncryptionByDefault struct {
	Name  string
	Args  EbsEncryptionByDefaultArgs
	state *ebsEncryptionByDefaultState
}

func (eebd *EbsEncryptionByDefault) Type() string {
	return "aws_ebs_encryption_by_default"
}

func (eebd *EbsEncryptionByDefault) LocalName() string {
	return eebd.Name
}

func (eebd *EbsEncryptionByDefault) Configuration() interface{} {
	return eebd.Args
}

func (eebd *EbsEncryptionByDefault) Attributes() ebsEncryptionByDefaultAttributes {
	return ebsEncryptionByDefaultAttributes{ref: terra.ReferenceResource(eebd)}
}

func (eebd *EbsEncryptionByDefault) ImportState(av io.Reader) error {
	eebd.state = &ebsEncryptionByDefaultState{}
	if err := json.NewDecoder(av).Decode(eebd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", eebd.Type(), eebd.LocalName(), err)
	}
	return nil
}

func (eebd *EbsEncryptionByDefault) State() (*ebsEncryptionByDefaultState, bool) {
	return eebd.state, eebd.state != nil
}

func (eebd *EbsEncryptionByDefault) StateMust() *ebsEncryptionByDefaultState {
	if eebd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", eebd.Type(), eebd.LocalName()))
	}
	return eebd.state
}

func (eebd *EbsEncryptionByDefault) DependOn() terra.Reference {
	return terra.ReferenceResource(eebd)
}

type EbsEncryptionByDefaultArgs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DependsOn contains resources that EbsEncryptionByDefault depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ebsEncryptionByDefaultAttributes struct {
	ref terra.Reference
}

func (eebd ebsEncryptionByDefaultAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(eebd.ref.Append("enabled"))
}

func (eebd ebsEncryptionByDefaultAttributes) Id() terra.StringValue {
	return terra.ReferenceString(eebd.ref.Append("id"))
}

type ebsEncryptionByDefaultState struct {
	Enabled bool   `json:"enabled"`
	Id      string `json:"id"`
}
