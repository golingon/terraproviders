// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppsyncType(name string, args AppsyncTypeArgs) *AppsyncType {
	return &AppsyncType{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppsyncType)(nil)

type AppsyncType struct {
	Name  string
	Args  AppsyncTypeArgs
	state *appsyncTypeState
}

func (at *AppsyncType) Type() string {
	return "aws_appsync_type"
}

func (at *AppsyncType) LocalName() string {
	return at.Name
}

func (at *AppsyncType) Configuration() interface{} {
	return at.Args
}

func (at *AppsyncType) Attributes() appsyncTypeAttributes {
	return appsyncTypeAttributes{ref: terra.ReferenceResource(at)}
}

func (at *AppsyncType) ImportState(av io.Reader) error {
	at.state = &appsyncTypeState{}
	if err := json.NewDecoder(av).Decode(at.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", at.Type(), at.LocalName(), err)
	}
	return nil
}

func (at *AppsyncType) State() (*appsyncTypeState, bool) {
	return at.state, at.state != nil
}

func (at *AppsyncType) StateMust() *appsyncTypeState {
	if at.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", at.Type(), at.LocalName()))
	}
	return at.state
}

func (at *AppsyncType) DependOn() terra.Reference {
	return terra.ReferenceResource(at)
}

type AppsyncTypeArgs struct {
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// Definition: string, required
	Definition terra.StringValue `hcl:"definition,attr" validate:"required"`
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DependsOn contains resources that AppsyncType depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appsyncTypeAttributes struct {
	ref terra.Reference
}

func (at appsyncTypeAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(at.ref.Append("api_id"))
}

func (at appsyncTypeAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(at.ref.Append("arn"))
}

func (at appsyncTypeAttributes) Definition() terra.StringValue {
	return terra.ReferenceString(at.ref.Append("definition"))
}

func (at appsyncTypeAttributes) Description() terra.StringValue {
	return terra.ReferenceString(at.ref.Append("description"))
}

func (at appsyncTypeAttributes) Format() terra.StringValue {
	return terra.ReferenceString(at.ref.Append("format"))
}

func (at appsyncTypeAttributes) Id() terra.StringValue {
	return terra.ReferenceString(at.ref.Append("id"))
}

func (at appsyncTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceString(at.ref.Append("name"))
}

type appsyncTypeState struct {
	ApiId       string `json:"api_id"`
	Arn         string `json:"arn"`
	Definition  string `json:"definition"`
	Description string `json:"description"`
	Format      string `json:"format"`
	Id          string `json:"id"`
	Name        string `json:"name"`
}
