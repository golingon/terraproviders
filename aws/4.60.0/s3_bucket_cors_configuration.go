// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	s3bucketcorsconfiguration "github.com/golingon/terraproviders/aws/4.60.0/s3bucketcorsconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewS3BucketCorsConfiguration(name string, args S3BucketCorsConfigurationArgs) *S3BucketCorsConfiguration {
	return &S3BucketCorsConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*S3BucketCorsConfiguration)(nil)

type S3BucketCorsConfiguration struct {
	Name  string
	Args  S3BucketCorsConfigurationArgs
	state *s3BucketCorsConfigurationState
}

func (sbcc *S3BucketCorsConfiguration) Type() string {
	return "aws_s3_bucket_cors_configuration"
}

func (sbcc *S3BucketCorsConfiguration) LocalName() string {
	return sbcc.Name
}

func (sbcc *S3BucketCorsConfiguration) Configuration() interface{} {
	return sbcc.Args
}

func (sbcc *S3BucketCorsConfiguration) Attributes() s3BucketCorsConfigurationAttributes {
	return s3BucketCorsConfigurationAttributes{ref: terra.ReferenceResource(sbcc)}
}

func (sbcc *S3BucketCorsConfiguration) ImportState(av io.Reader) error {
	sbcc.state = &s3BucketCorsConfigurationState{}
	if err := json.NewDecoder(av).Decode(sbcc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sbcc.Type(), sbcc.LocalName(), err)
	}
	return nil
}

func (sbcc *S3BucketCorsConfiguration) State() (*s3BucketCorsConfigurationState, bool) {
	return sbcc.state, sbcc.state != nil
}

func (sbcc *S3BucketCorsConfiguration) StateMust() *s3BucketCorsConfigurationState {
	if sbcc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sbcc.Type(), sbcc.LocalName()))
	}
	return sbcc.state
}

func (sbcc *S3BucketCorsConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(sbcc)
}

type S3BucketCorsConfigurationArgs struct {
	// Bucket: string, required
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// ExpectedBucketOwner: string, optional
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// CorsRule: min=1,max=100
	CorsRule []s3bucketcorsconfiguration.CorsRule `hcl:"cors_rule,block" validate:"min=1,max=100"`
	// DependsOn contains resources that S3BucketCorsConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type s3BucketCorsConfigurationAttributes struct {
	ref terra.Reference
}

func (sbcc s3BucketCorsConfigurationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceString(sbcc.ref.Append("bucket"))
}

func (sbcc s3BucketCorsConfigurationAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceString(sbcc.ref.Append("expected_bucket_owner"))
}

func (sbcc s3BucketCorsConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sbcc.ref.Append("id"))
}

func (sbcc s3BucketCorsConfigurationAttributes) CorsRule() terra.SetValue[s3bucketcorsconfiguration.CorsRuleAttributes] {
	return terra.ReferenceSet[s3bucketcorsconfiguration.CorsRuleAttributes](sbcc.ref.Append("cors_rule"))
}

type s3BucketCorsConfigurationState struct {
	Bucket              string                                    `json:"bucket"`
	ExpectedBucketOwner string                                    `json:"expected_bucket_owner"`
	Id                  string                                    `json:"id"`
	CorsRule            []s3bucketcorsconfiguration.CorsRuleState `json:"cors_rule"`
}
