// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package codebuildproject

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Artifacts struct {
	// ArtifactIdentifier: string, optional
	ArtifactIdentifier terra.StringValue `hcl:"artifact_identifier,attr"`
	// BucketOwnerAccess: string, optional
	BucketOwnerAccess terra.StringValue `hcl:"bucket_owner_access,attr"`
	// EncryptionDisabled: bool, optional
	EncryptionDisabled terra.BoolValue `hcl:"encryption_disabled,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamespaceType: string, optional
	NamespaceType terra.StringValue `hcl:"namespace_type,attr"`
	// OverrideArtifactName: bool, optional
	OverrideArtifactName terra.BoolValue `hcl:"override_artifact_name,attr"`
	// Packaging: string, optional
	Packaging terra.StringValue `hcl:"packaging,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type BuildBatchConfig struct {
	// CombineArtifacts: bool, optional
	CombineArtifacts terra.BoolValue `hcl:"combine_artifacts,attr"`
	// ServiceRole: string, required
	ServiceRole terra.StringValue `hcl:"service_role,attr" validate:"required"`
	// TimeoutInMins: number, optional
	TimeoutInMins terra.NumberValue `hcl:"timeout_in_mins,attr"`
	// Restrictions: optional
	Restrictions *Restrictions `hcl:"restrictions,block"`
}

type Restrictions struct {
	// ComputeTypesAllowed: list of string, optional
	ComputeTypesAllowed terra.ListValue[terra.StringValue] `hcl:"compute_types_allowed,attr"`
	// MaximumBuildsAllowed: number, optional
	MaximumBuildsAllowed terra.NumberValue `hcl:"maximum_builds_allowed,attr"`
}

type Cache struct {
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Modes: list of string, optional
	Modes terra.ListValue[terra.StringValue] `hcl:"modes,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type Environment struct {
	// Certificate: string, optional
	Certificate terra.StringValue `hcl:"certificate,attr"`
	// ComputeType: string, required
	ComputeType terra.StringValue `hcl:"compute_type,attr" validate:"required"`
	// Image: string, required
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// ImagePullCredentialsType: string, optional
	ImagePullCredentialsType terra.StringValue `hcl:"image_pull_credentials_type,attr"`
	// PrivilegedMode: bool, optional
	PrivilegedMode terra.BoolValue `hcl:"privileged_mode,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// EnvironmentVariable: min=0
	EnvironmentVariable []EnvironmentVariable `hcl:"environment_variable,block" validate:"min=0"`
	// RegistryCredential: optional
	RegistryCredential *RegistryCredential `hcl:"registry_credential,block"`
}

type EnvironmentVariable struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
	// Value: string, required
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type RegistryCredential struct {
	// Credential: string, required
	Credential terra.StringValue `hcl:"credential,attr" validate:"required"`
	// CredentialProvider: string, required
	CredentialProvider terra.StringValue `hcl:"credential_provider,attr" validate:"required"`
}

type FileSystemLocations struct {
	// Identifier: string, optional
	Identifier terra.StringValue `hcl:"identifier,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// MountOptions: string, optional
	MountOptions terra.StringValue `hcl:"mount_options,attr"`
	// MountPoint: string, optional
	MountPoint terra.StringValue `hcl:"mount_point,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type LogsConfig struct {
	// CloudwatchLogs: optional
	CloudwatchLogs *CloudwatchLogs `hcl:"cloudwatch_logs,block"`
	// S3Logs: optional
	S3Logs *S3Logs `hcl:"s3_logs,block"`
}

type CloudwatchLogs struct {
	// GroupName: string, optional
	GroupName terra.StringValue `hcl:"group_name,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// StreamName: string, optional
	StreamName terra.StringValue `hcl:"stream_name,attr"`
}

type S3Logs struct {
	// BucketOwnerAccess: string, optional
	BucketOwnerAccess terra.StringValue `hcl:"bucket_owner_access,attr"`
	// EncryptionDisabled: bool, optional
	EncryptionDisabled terra.BoolValue `hcl:"encryption_disabled,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
}

type SecondaryArtifacts struct {
	// ArtifactIdentifier: string, required
	ArtifactIdentifier terra.StringValue `hcl:"artifact_identifier,attr" validate:"required"`
	// BucketOwnerAccess: string, optional
	BucketOwnerAccess terra.StringValue `hcl:"bucket_owner_access,attr"`
	// EncryptionDisabled: bool, optional
	EncryptionDisabled terra.BoolValue `hcl:"encryption_disabled,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamespaceType: string, optional
	NamespaceType terra.StringValue `hcl:"namespace_type,attr"`
	// OverrideArtifactName: bool, optional
	OverrideArtifactName terra.BoolValue `hcl:"override_artifact_name,attr"`
	// Packaging: string, optional
	Packaging terra.StringValue `hcl:"packaging,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type SecondarySourceVersion struct {
	// SourceIdentifier: string, required
	SourceIdentifier terra.StringValue `hcl:"source_identifier,attr" validate:"required"`
	// SourceVersion: string, required
	SourceVersion terra.StringValue `hcl:"source_version,attr" validate:"required"`
}

type SecondarySources struct {
	// Buildspec: string, optional
	Buildspec terra.StringValue `hcl:"buildspec,attr"`
	// GitCloneDepth: number, optional
	GitCloneDepth terra.NumberValue `hcl:"git_clone_depth,attr"`
	// InsecureSsl: bool, optional
	InsecureSsl terra.BoolValue `hcl:"insecure_ssl,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// ReportBuildStatus: bool, optional
	ReportBuildStatus terra.BoolValue `hcl:"report_build_status,attr"`
	// SourceIdentifier: string, required
	SourceIdentifier terra.StringValue `hcl:"source_identifier,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// SecondarySourcesAuth: optional
	Auth *SecondarySourcesAuth `hcl:"auth,block"`
	// SecondarySourcesBuildStatusConfig: optional
	BuildStatusConfig *SecondarySourcesBuildStatusConfig `hcl:"build_status_config,block"`
	// SecondarySourcesGitSubmodulesConfig: optional
	GitSubmodulesConfig *SecondarySourcesGitSubmodulesConfig `hcl:"git_submodules_config,block"`
}

type SecondarySourcesAuth struct {
	// Resource: string, optional
	Resource terra.StringValue `hcl:"resource,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type SecondarySourcesBuildStatusConfig struct {
	// Context: string, optional
	Context terra.StringValue `hcl:"context,attr"`
	// TargetUrl: string, optional
	TargetUrl terra.StringValue `hcl:"target_url,attr"`
}

type SecondarySourcesGitSubmodulesConfig struct {
	// FetchSubmodules: bool, required
	FetchSubmodules terra.BoolValue `hcl:"fetch_submodules,attr" validate:"required"`
}

type Source struct {
	// Buildspec: string, optional
	Buildspec terra.StringValue `hcl:"buildspec,attr"`
	// GitCloneDepth: number, optional
	GitCloneDepth terra.NumberValue `hcl:"git_clone_depth,attr"`
	// InsecureSsl: bool, optional
	InsecureSsl terra.BoolValue `hcl:"insecure_ssl,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// ReportBuildStatus: bool, optional
	ReportBuildStatus terra.BoolValue `hcl:"report_build_status,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// SourceAuth: optional
	Auth *SourceAuth `hcl:"auth,block"`
	// SourceBuildStatusConfig: optional
	BuildStatusConfig *SourceBuildStatusConfig `hcl:"build_status_config,block"`
	// SourceGitSubmodulesConfig: optional
	GitSubmodulesConfig *SourceGitSubmodulesConfig `hcl:"git_submodules_config,block"`
}

type SourceAuth struct {
	// Resource: string, optional
	Resource terra.StringValue `hcl:"resource,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type SourceBuildStatusConfig struct {
	// Context: string, optional
	Context terra.StringValue `hcl:"context,attr"`
	// TargetUrl: string, optional
	TargetUrl terra.StringValue `hcl:"target_url,attr"`
}

type SourceGitSubmodulesConfig struct {
	// FetchSubmodules: bool, required
	FetchSubmodules terra.BoolValue `hcl:"fetch_submodules,attr" validate:"required"`
}

type VpcConfig struct {
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// Subnets: set of string, required
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
}

type ArtifactsAttributes struct {
	ref terra.Reference
}

func (a ArtifactsAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a ArtifactsAttributes) InternalWithRef(ref terra.Reference) ArtifactsAttributes {
	return ArtifactsAttributes{ref: ref}
}

func (a ArtifactsAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a ArtifactsAttributes) ArtifactIdentifier() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("artifact_identifier"))
}

func (a ArtifactsAttributes) BucketOwnerAccess() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("bucket_owner_access"))
}

func (a ArtifactsAttributes) EncryptionDisabled() terra.BoolValue {
	return terra.ReferenceBool(a.ref.Append("encryption_disabled"))
}

func (a ArtifactsAttributes) Location() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("location"))
}

func (a ArtifactsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("name"))
}

func (a ArtifactsAttributes) NamespaceType() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("namespace_type"))
}

func (a ArtifactsAttributes) OverrideArtifactName() terra.BoolValue {
	return terra.ReferenceBool(a.ref.Append("override_artifact_name"))
}

func (a ArtifactsAttributes) Packaging() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("packaging"))
}

func (a ArtifactsAttributes) Path() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("path"))
}

func (a ArtifactsAttributes) Type() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("type"))
}

type BuildBatchConfigAttributes struct {
	ref terra.Reference
}

func (bbc BuildBatchConfigAttributes) InternalRef() terra.Reference {
	return bbc.ref
}

func (bbc BuildBatchConfigAttributes) InternalWithRef(ref terra.Reference) BuildBatchConfigAttributes {
	return BuildBatchConfigAttributes{ref: ref}
}

func (bbc BuildBatchConfigAttributes) InternalTokens() hclwrite.Tokens {
	return bbc.ref.InternalTokens()
}

func (bbc BuildBatchConfigAttributes) CombineArtifacts() terra.BoolValue {
	return terra.ReferenceBool(bbc.ref.Append("combine_artifacts"))
}

func (bbc BuildBatchConfigAttributes) ServiceRole() terra.StringValue {
	return terra.ReferenceString(bbc.ref.Append("service_role"))
}

func (bbc BuildBatchConfigAttributes) TimeoutInMins() terra.NumberValue {
	return terra.ReferenceNumber(bbc.ref.Append("timeout_in_mins"))
}

func (bbc BuildBatchConfigAttributes) Restrictions() terra.ListValue[RestrictionsAttributes] {
	return terra.ReferenceList[RestrictionsAttributes](bbc.ref.Append("restrictions"))
}

type RestrictionsAttributes struct {
	ref terra.Reference
}

func (r RestrictionsAttributes) InternalRef() terra.Reference {
	return r.ref
}

func (r RestrictionsAttributes) InternalWithRef(ref terra.Reference) RestrictionsAttributes {
	return RestrictionsAttributes{ref: ref}
}

func (r RestrictionsAttributes) InternalTokens() hclwrite.Tokens {
	return r.ref.InternalTokens()
}

func (r RestrictionsAttributes) ComputeTypesAllowed() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](r.ref.Append("compute_types_allowed"))
}

func (r RestrictionsAttributes) MaximumBuildsAllowed() terra.NumberValue {
	return terra.ReferenceNumber(r.ref.Append("maximum_builds_allowed"))
}

type CacheAttributes struct {
	ref terra.Reference
}

func (c CacheAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c CacheAttributes) InternalWithRef(ref terra.Reference) CacheAttributes {
	return CacheAttributes{ref: ref}
}

func (c CacheAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c CacheAttributes) Location() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("location"))
}

func (c CacheAttributes) Modes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](c.ref.Append("modes"))
}

func (c CacheAttributes) Type() terra.StringValue {
	return terra.ReferenceString(c.ref.Append("type"))
}

type EnvironmentAttributes struct {
	ref terra.Reference
}

func (e EnvironmentAttributes) InternalRef() terra.Reference {
	return e.ref
}

func (e EnvironmentAttributes) InternalWithRef(ref terra.Reference) EnvironmentAttributes {
	return EnvironmentAttributes{ref: ref}
}

func (e EnvironmentAttributes) InternalTokens() hclwrite.Tokens {
	return e.ref.InternalTokens()
}

func (e EnvironmentAttributes) Certificate() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("certificate"))
}

func (e EnvironmentAttributes) ComputeType() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("compute_type"))
}

func (e EnvironmentAttributes) Image() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("image"))
}

func (e EnvironmentAttributes) ImagePullCredentialsType() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("image_pull_credentials_type"))
}

func (e EnvironmentAttributes) PrivilegedMode() terra.BoolValue {
	return terra.ReferenceBool(e.ref.Append("privileged_mode"))
}

func (e EnvironmentAttributes) Type() terra.StringValue {
	return terra.ReferenceString(e.ref.Append("type"))
}

func (e EnvironmentAttributes) EnvironmentVariable() terra.ListValue[EnvironmentVariableAttributes] {
	return terra.ReferenceList[EnvironmentVariableAttributes](e.ref.Append("environment_variable"))
}

func (e EnvironmentAttributes) RegistryCredential() terra.ListValue[RegistryCredentialAttributes] {
	return terra.ReferenceList[RegistryCredentialAttributes](e.ref.Append("registry_credential"))
}

type EnvironmentVariableAttributes struct {
	ref terra.Reference
}

func (ev EnvironmentVariableAttributes) InternalRef() terra.Reference {
	return ev.ref
}

func (ev EnvironmentVariableAttributes) InternalWithRef(ref terra.Reference) EnvironmentVariableAttributes {
	return EnvironmentVariableAttributes{ref: ref}
}

func (ev EnvironmentVariableAttributes) InternalTokens() hclwrite.Tokens {
	return ev.ref.InternalTokens()
}

func (ev EnvironmentVariableAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ev.ref.Append("name"))
}

func (ev EnvironmentVariableAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ev.ref.Append("type"))
}

func (ev EnvironmentVariableAttributes) Value() terra.StringValue {
	return terra.ReferenceString(ev.ref.Append("value"))
}

type RegistryCredentialAttributes struct {
	ref terra.Reference
}

func (rc RegistryCredentialAttributes) InternalRef() terra.Reference {
	return rc.ref
}

func (rc RegistryCredentialAttributes) InternalWithRef(ref terra.Reference) RegistryCredentialAttributes {
	return RegistryCredentialAttributes{ref: ref}
}

func (rc RegistryCredentialAttributes) InternalTokens() hclwrite.Tokens {
	return rc.ref.InternalTokens()
}

func (rc RegistryCredentialAttributes) Credential() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("credential"))
}

func (rc RegistryCredentialAttributes) CredentialProvider() terra.StringValue {
	return terra.ReferenceString(rc.ref.Append("credential_provider"))
}

type FileSystemLocationsAttributes struct {
	ref terra.Reference
}

func (fsl FileSystemLocationsAttributes) InternalRef() terra.Reference {
	return fsl.ref
}

func (fsl FileSystemLocationsAttributes) InternalWithRef(ref terra.Reference) FileSystemLocationsAttributes {
	return FileSystemLocationsAttributes{ref: ref}
}

func (fsl FileSystemLocationsAttributes) InternalTokens() hclwrite.Tokens {
	return fsl.ref.InternalTokens()
}

func (fsl FileSystemLocationsAttributes) Identifier() terra.StringValue {
	return terra.ReferenceString(fsl.ref.Append("identifier"))
}

func (fsl FileSystemLocationsAttributes) Location() terra.StringValue {
	return terra.ReferenceString(fsl.ref.Append("location"))
}

func (fsl FileSystemLocationsAttributes) MountOptions() terra.StringValue {
	return terra.ReferenceString(fsl.ref.Append("mount_options"))
}

func (fsl FileSystemLocationsAttributes) MountPoint() terra.StringValue {
	return terra.ReferenceString(fsl.ref.Append("mount_point"))
}

func (fsl FileSystemLocationsAttributes) Type() terra.StringValue {
	return terra.ReferenceString(fsl.ref.Append("type"))
}

type LogsConfigAttributes struct {
	ref terra.Reference
}

func (lc LogsConfigAttributes) InternalRef() terra.Reference {
	return lc.ref
}

func (lc LogsConfigAttributes) InternalWithRef(ref terra.Reference) LogsConfigAttributes {
	return LogsConfigAttributes{ref: ref}
}

func (lc LogsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return lc.ref.InternalTokens()
}

func (lc LogsConfigAttributes) CloudwatchLogs() terra.ListValue[CloudwatchLogsAttributes] {
	return terra.ReferenceList[CloudwatchLogsAttributes](lc.ref.Append("cloudwatch_logs"))
}

func (lc LogsConfigAttributes) S3Logs() terra.ListValue[S3LogsAttributes] {
	return terra.ReferenceList[S3LogsAttributes](lc.ref.Append("s3_logs"))
}

type CloudwatchLogsAttributes struct {
	ref terra.Reference
}

func (cl CloudwatchLogsAttributes) InternalRef() terra.Reference {
	return cl.ref
}

func (cl CloudwatchLogsAttributes) InternalWithRef(ref terra.Reference) CloudwatchLogsAttributes {
	return CloudwatchLogsAttributes{ref: ref}
}

func (cl CloudwatchLogsAttributes) InternalTokens() hclwrite.Tokens {
	return cl.ref.InternalTokens()
}

func (cl CloudwatchLogsAttributes) GroupName() terra.StringValue {
	return terra.ReferenceString(cl.ref.Append("group_name"))
}

func (cl CloudwatchLogsAttributes) Status() terra.StringValue {
	return terra.ReferenceString(cl.ref.Append("status"))
}

func (cl CloudwatchLogsAttributes) StreamName() terra.StringValue {
	return terra.ReferenceString(cl.ref.Append("stream_name"))
}

type S3LogsAttributes struct {
	ref terra.Reference
}

func (sl S3LogsAttributes) InternalRef() terra.Reference {
	return sl.ref
}

func (sl S3LogsAttributes) InternalWithRef(ref terra.Reference) S3LogsAttributes {
	return S3LogsAttributes{ref: ref}
}

func (sl S3LogsAttributes) InternalTokens() hclwrite.Tokens {
	return sl.ref.InternalTokens()
}

func (sl S3LogsAttributes) BucketOwnerAccess() terra.StringValue {
	return terra.ReferenceString(sl.ref.Append("bucket_owner_access"))
}

func (sl S3LogsAttributes) EncryptionDisabled() terra.BoolValue {
	return terra.ReferenceBool(sl.ref.Append("encryption_disabled"))
}

func (sl S3LogsAttributes) Location() terra.StringValue {
	return terra.ReferenceString(sl.ref.Append("location"))
}

func (sl S3LogsAttributes) Status() terra.StringValue {
	return terra.ReferenceString(sl.ref.Append("status"))
}

type SecondaryArtifactsAttributes struct {
	ref terra.Reference
}

func (sa SecondaryArtifactsAttributes) InternalRef() terra.Reference {
	return sa.ref
}

func (sa SecondaryArtifactsAttributes) InternalWithRef(ref terra.Reference) SecondaryArtifactsAttributes {
	return SecondaryArtifactsAttributes{ref: ref}
}

func (sa SecondaryArtifactsAttributes) InternalTokens() hclwrite.Tokens {
	return sa.ref.InternalTokens()
}

func (sa SecondaryArtifactsAttributes) ArtifactIdentifier() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("artifact_identifier"))
}

func (sa SecondaryArtifactsAttributes) BucketOwnerAccess() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("bucket_owner_access"))
}

func (sa SecondaryArtifactsAttributes) EncryptionDisabled() terra.BoolValue {
	return terra.ReferenceBool(sa.ref.Append("encryption_disabled"))
}

func (sa SecondaryArtifactsAttributes) Location() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("location"))
}

func (sa SecondaryArtifactsAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("name"))
}

func (sa SecondaryArtifactsAttributes) NamespaceType() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("namespace_type"))
}

func (sa SecondaryArtifactsAttributes) OverrideArtifactName() terra.BoolValue {
	return terra.ReferenceBool(sa.ref.Append("override_artifact_name"))
}

func (sa SecondaryArtifactsAttributes) Packaging() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("packaging"))
}

func (sa SecondaryArtifactsAttributes) Path() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("path"))
}

func (sa SecondaryArtifactsAttributes) Type() terra.StringValue {
	return terra.ReferenceString(sa.ref.Append("type"))
}

type SecondarySourceVersionAttributes struct {
	ref terra.Reference
}

func (ssv SecondarySourceVersionAttributes) InternalRef() terra.Reference {
	return ssv.ref
}

func (ssv SecondarySourceVersionAttributes) InternalWithRef(ref terra.Reference) SecondarySourceVersionAttributes {
	return SecondarySourceVersionAttributes{ref: ref}
}

func (ssv SecondarySourceVersionAttributes) InternalTokens() hclwrite.Tokens {
	return ssv.ref.InternalTokens()
}

func (ssv SecondarySourceVersionAttributes) SourceIdentifier() terra.StringValue {
	return terra.ReferenceString(ssv.ref.Append("source_identifier"))
}

func (ssv SecondarySourceVersionAttributes) SourceVersion() terra.StringValue {
	return terra.ReferenceString(ssv.ref.Append("source_version"))
}

type SecondarySourcesAttributes struct {
	ref terra.Reference
}

func (ss SecondarySourcesAttributes) InternalRef() terra.Reference {
	return ss.ref
}

func (ss SecondarySourcesAttributes) InternalWithRef(ref terra.Reference) SecondarySourcesAttributes {
	return SecondarySourcesAttributes{ref: ref}
}

func (ss SecondarySourcesAttributes) InternalTokens() hclwrite.Tokens {
	return ss.ref.InternalTokens()
}

func (ss SecondarySourcesAttributes) Buildspec() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("buildspec"))
}

func (ss SecondarySourcesAttributes) GitCloneDepth() terra.NumberValue {
	return terra.ReferenceNumber(ss.ref.Append("git_clone_depth"))
}

func (ss SecondarySourcesAttributes) InsecureSsl() terra.BoolValue {
	return terra.ReferenceBool(ss.ref.Append("insecure_ssl"))
}

func (ss SecondarySourcesAttributes) Location() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("location"))
}

func (ss SecondarySourcesAttributes) ReportBuildStatus() terra.BoolValue {
	return terra.ReferenceBool(ss.ref.Append("report_build_status"))
}

func (ss SecondarySourcesAttributes) SourceIdentifier() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("source_identifier"))
}

func (ss SecondarySourcesAttributes) Type() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("type"))
}

func (ss SecondarySourcesAttributes) Auth() terra.ListValue[SecondarySourcesAuthAttributes] {
	return terra.ReferenceList[SecondarySourcesAuthAttributes](ss.ref.Append("auth"))
}

func (ss SecondarySourcesAttributes) BuildStatusConfig() terra.ListValue[SecondarySourcesBuildStatusConfigAttributes] {
	return terra.ReferenceList[SecondarySourcesBuildStatusConfigAttributes](ss.ref.Append("build_status_config"))
}

func (ss SecondarySourcesAttributes) GitSubmodulesConfig() terra.ListValue[SecondarySourcesGitSubmodulesConfigAttributes] {
	return terra.ReferenceList[SecondarySourcesGitSubmodulesConfigAttributes](ss.ref.Append("git_submodules_config"))
}

type SecondarySourcesAuthAttributes struct {
	ref terra.Reference
}

func (a SecondarySourcesAuthAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a SecondarySourcesAuthAttributes) InternalWithRef(ref terra.Reference) SecondarySourcesAuthAttributes {
	return SecondarySourcesAuthAttributes{ref: ref}
}

func (a SecondarySourcesAuthAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a SecondarySourcesAuthAttributes) Resource() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("resource"))
}

func (a SecondarySourcesAuthAttributes) Type() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("type"))
}

type SecondarySourcesBuildStatusConfigAttributes struct {
	ref terra.Reference
}

func (bsc SecondarySourcesBuildStatusConfigAttributes) InternalRef() terra.Reference {
	return bsc.ref
}

func (bsc SecondarySourcesBuildStatusConfigAttributes) InternalWithRef(ref terra.Reference) SecondarySourcesBuildStatusConfigAttributes {
	return SecondarySourcesBuildStatusConfigAttributes{ref: ref}
}

func (bsc SecondarySourcesBuildStatusConfigAttributes) InternalTokens() hclwrite.Tokens {
	return bsc.ref.InternalTokens()
}

func (bsc SecondarySourcesBuildStatusConfigAttributes) Context() terra.StringValue {
	return terra.ReferenceString(bsc.ref.Append("context"))
}

func (bsc SecondarySourcesBuildStatusConfigAttributes) TargetUrl() terra.StringValue {
	return terra.ReferenceString(bsc.ref.Append("target_url"))
}

type SecondarySourcesGitSubmodulesConfigAttributes struct {
	ref terra.Reference
}

func (gsc SecondarySourcesGitSubmodulesConfigAttributes) InternalRef() terra.Reference {
	return gsc.ref
}

func (gsc SecondarySourcesGitSubmodulesConfigAttributes) InternalWithRef(ref terra.Reference) SecondarySourcesGitSubmodulesConfigAttributes {
	return SecondarySourcesGitSubmodulesConfigAttributes{ref: ref}
}

func (gsc SecondarySourcesGitSubmodulesConfigAttributes) InternalTokens() hclwrite.Tokens {
	return gsc.ref.InternalTokens()
}

func (gsc SecondarySourcesGitSubmodulesConfigAttributes) FetchSubmodules() terra.BoolValue {
	return terra.ReferenceBool(gsc.ref.Append("fetch_submodules"))
}

type SourceAttributes struct {
	ref terra.Reference
}

func (s SourceAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s SourceAttributes) InternalWithRef(ref terra.Reference) SourceAttributes {
	return SourceAttributes{ref: ref}
}

func (s SourceAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s SourceAttributes) Buildspec() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("buildspec"))
}

func (s SourceAttributes) GitCloneDepth() terra.NumberValue {
	return terra.ReferenceNumber(s.ref.Append("git_clone_depth"))
}

func (s SourceAttributes) InsecureSsl() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("insecure_ssl"))
}

func (s SourceAttributes) Location() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("location"))
}

func (s SourceAttributes) ReportBuildStatus() terra.BoolValue {
	return terra.ReferenceBool(s.ref.Append("report_build_status"))
}

func (s SourceAttributes) Type() terra.StringValue {
	return terra.ReferenceString(s.ref.Append("type"))
}

func (s SourceAttributes) Auth() terra.ListValue[SourceAuthAttributes] {
	return terra.ReferenceList[SourceAuthAttributes](s.ref.Append("auth"))
}

func (s SourceAttributes) BuildStatusConfig() terra.ListValue[SourceBuildStatusConfigAttributes] {
	return terra.ReferenceList[SourceBuildStatusConfigAttributes](s.ref.Append("build_status_config"))
}

func (s SourceAttributes) GitSubmodulesConfig() terra.ListValue[SourceGitSubmodulesConfigAttributes] {
	return terra.ReferenceList[SourceGitSubmodulesConfigAttributes](s.ref.Append("git_submodules_config"))
}

type SourceAuthAttributes struct {
	ref terra.Reference
}

func (a SourceAuthAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a SourceAuthAttributes) InternalWithRef(ref terra.Reference) SourceAuthAttributes {
	return SourceAuthAttributes{ref: ref}
}

func (a SourceAuthAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a SourceAuthAttributes) Resource() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("resource"))
}

func (a SourceAuthAttributes) Type() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("type"))
}

type SourceBuildStatusConfigAttributes struct {
	ref terra.Reference
}

func (bsc SourceBuildStatusConfigAttributes) InternalRef() terra.Reference {
	return bsc.ref
}

func (bsc SourceBuildStatusConfigAttributes) InternalWithRef(ref terra.Reference) SourceBuildStatusConfigAttributes {
	return SourceBuildStatusConfigAttributes{ref: ref}
}

func (bsc SourceBuildStatusConfigAttributes) InternalTokens() hclwrite.Tokens {
	return bsc.ref.InternalTokens()
}

func (bsc SourceBuildStatusConfigAttributes) Context() terra.StringValue {
	return terra.ReferenceString(bsc.ref.Append("context"))
}

func (bsc SourceBuildStatusConfigAttributes) TargetUrl() terra.StringValue {
	return terra.ReferenceString(bsc.ref.Append("target_url"))
}

type SourceGitSubmodulesConfigAttributes struct {
	ref terra.Reference
}

func (gsc SourceGitSubmodulesConfigAttributes) InternalRef() terra.Reference {
	return gsc.ref
}

func (gsc SourceGitSubmodulesConfigAttributes) InternalWithRef(ref terra.Reference) SourceGitSubmodulesConfigAttributes {
	return SourceGitSubmodulesConfigAttributes{ref: ref}
}

func (gsc SourceGitSubmodulesConfigAttributes) InternalTokens() hclwrite.Tokens {
	return gsc.ref.InternalTokens()
}

func (gsc SourceGitSubmodulesConfigAttributes) FetchSubmodules() terra.BoolValue {
	return terra.ReferenceBool(gsc.ref.Append("fetch_submodules"))
}

type VpcConfigAttributes struct {
	ref terra.Reference
}

func (vc VpcConfigAttributes) InternalRef() terra.Reference {
	return vc.ref
}

func (vc VpcConfigAttributes) InternalWithRef(ref terra.Reference) VpcConfigAttributes {
	return VpcConfigAttributes{ref: ref}
}

func (vc VpcConfigAttributes) InternalTokens() hclwrite.Tokens {
	return vc.ref.InternalTokens()
}

func (vc VpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc VpcConfigAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](vc.ref.Append("subnets"))
}

func (vc VpcConfigAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(vc.ref.Append("vpc_id"))
}

type ArtifactsState struct {
	ArtifactIdentifier   string `json:"artifact_identifier"`
	BucketOwnerAccess    string `json:"bucket_owner_access"`
	EncryptionDisabled   bool   `json:"encryption_disabled"`
	Location             string `json:"location"`
	Name                 string `json:"name"`
	NamespaceType        string `json:"namespace_type"`
	OverrideArtifactName bool   `json:"override_artifact_name"`
	Packaging            string `json:"packaging"`
	Path                 string `json:"path"`
	Type                 string `json:"type"`
}

type BuildBatchConfigState struct {
	CombineArtifacts bool                `json:"combine_artifacts"`
	ServiceRole      string              `json:"service_role"`
	TimeoutInMins    float64             `json:"timeout_in_mins"`
	Restrictions     []RestrictionsState `json:"restrictions"`
}

type RestrictionsState struct {
	ComputeTypesAllowed  []string `json:"compute_types_allowed"`
	MaximumBuildsAllowed float64  `json:"maximum_builds_allowed"`
}

type CacheState struct {
	Location string   `json:"location"`
	Modes    []string `json:"modes"`
	Type     string   `json:"type"`
}

type EnvironmentState struct {
	Certificate              string                     `json:"certificate"`
	ComputeType              string                     `json:"compute_type"`
	Image                    string                     `json:"image"`
	ImagePullCredentialsType string                     `json:"image_pull_credentials_type"`
	PrivilegedMode           bool                       `json:"privileged_mode"`
	Type                     string                     `json:"type"`
	EnvironmentVariable      []EnvironmentVariableState `json:"environment_variable"`
	RegistryCredential       []RegistryCredentialState  `json:"registry_credential"`
}

type EnvironmentVariableState struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type RegistryCredentialState struct {
	Credential         string `json:"credential"`
	CredentialProvider string `json:"credential_provider"`
}

type FileSystemLocationsState struct {
	Identifier   string `json:"identifier"`
	Location     string `json:"location"`
	MountOptions string `json:"mount_options"`
	MountPoint   string `json:"mount_point"`
	Type         string `json:"type"`
}

type LogsConfigState struct {
	CloudwatchLogs []CloudwatchLogsState `json:"cloudwatch_logs"`
	S3Logs         []S3LogsState         `json:"s3_logs"`
}

type CloudwatchLogsState struct {
	GroupName  string `json:"group_name"`
	Status     string `json:"status"`
	StreamName string `json:"stream_name"`
}

type S3LogsState struct {
	BucketOwnerAccess  string `json:"bucket_owner_access"`
	EncryptionDisabled bool   `json:"encryption_disabled"`
	Location           string `json:"location"`
	Status             string `json:"status"`
}

type SecondaryArtifactsState struct {
	ArtifactIdentifier   string `json:"artifact_identifier"`
	BucketOwnerAccess    string `json:"bucket_owner_access"`
	EncryptionDisabled   bool   `json:"encryption_disabled"`
	Location             string `json:"location"`
	Name                 string `json:"name"`
	NamespaceType        string `json:"namespace_type"`
	OverrideArtifactName bool   `json:"override_artifact_name"`
	Packaging            string `json:"packaging"`
	Path                 string `json:"path"`
	Type                 string `json:"type"`
}

type SecondarySourceVersionState struct {
	SourceIdentifier string `json:"source_identifier"`
	SourceVersion    string `json:"source_version"`
}

type SecondarySourcesState struct {
	Buildspec           string                                     `json:"buildspec"`
	GitCloneDepth       float64                                    `json:"git_clone_depth"`
	InsecureSsl         bool                                       `json:"insecure_ssl"`
	Location            string                                     `json:"location"`
	ReportBuildStatus   bool                                       `json:"report_build_status"`
	SourceIdentifier    string                                     `json:"source_identifier"`
	Type                string                                     `json:"type"`
	Auth                []SecondarySourcesAuthState                `json:"auth"`
	BuildStatusConfig   []SecondarySourcesBuildStatusConfigState   `json:"build_status_config"`
	GitSubmodulesConfig []SecondarySourcesGitSubmodulesConfigState `json:"git_submodules_config"`
}

type SecondarySourcesAuthState struct {
	Resource string `json:"resource"`
	Type     string `json:"type"`
}

type SecondarySourcesBuildStatusConfigState struct {
	Context   string `json:"context"`
	TargetUrl string `json:"target_url"`
}

type SecondarySourcesGitSubmodulesConfigState struct {
	FetchSubmodules bool `json:"fetch_submodules"`
}

type SourceState struct {
	Buildspec           string                           `json:"buildspec"`
	GitCloneDepth       float64                          `json:"git_clone_depth"`
	InsecureSsl         bool                             `json:"insecure_ssl"`
	Location            string                           `json:"location"`
	ReportBuildStatus   bool                             `json:"report_build_status"`
	Type                string                           `json:"type"`
	Auth                []SourceAuthState                `json:"auth"`
	BuildStatusConfig   []SourceBuildStatusConfigState   `json:"build_status_config"`
	GitSubmodulesConfig []SourceGitSubmodulesConfigState `json:"git_submodules_config"`
}

type SourceAuthState struct {
	Resource string `json:"resource"`
	Type     string `json:"type"`
}

type SourceBuildStatusConfigState struct {
	Context   string `json:"context"`
	TargetUrl string `json:"target_url"`
}

type SourceGitSubmodulesConfigState struct {
	FetchSubmodules bool `json:"fetch_submodules"`
}

type VpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	Subnets          []string `json:"subnets"`
	VpcId            string   `json:"vpc_id"`
}
