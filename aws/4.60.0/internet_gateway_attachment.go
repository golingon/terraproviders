// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	internetgatewayattachment "github.com/golingon/terraproviders/aws/4.60.0/internetgatewayattachment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewInternetGatewayAttachment(name string, args InternetGatewayAttachmentArgs) *InternetGatewayAttachment {
	return &InternetGatewayAttachment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*InternetGatewayAttachment)(nil)

type InternetGatewayAttachment struct {
	Name  string
	Args  InternetGatewayAttachmentArgs
	state *internetGatewayAttachmentState
}

func (iga *InternetGatewayAttachment) Type() string {
	return "aws_internet_gateway_attachment"
}

func (iga *InternetGatewayAttachment) LocalName() string {
	return iga.Name
}

func (iga *InternetGatewayAttachment) Configuration() interface{} {
	return iga.Args
}

func (iga *InternetGatewayAttachment) Attributes() internetGatewayAttachmentAttributes {
	return internetGatewayAttachmentAttributes{ref: terra.ReferenceResource(iga)}
}

func (iga *InternetGatewayAttachment) ImportState(av io.Reader) error {
	iga.state = &internetGatewayAttachmentState{}
	if err := json.NewDecoder(av).Decode(iga.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", iga.Type(), iga.LocalName(), err)
	}
	return nil
}

func (iga *InternetGatewayAttachment) State() (*internetGatewayAttachmentState, bool) {
	return iga.state, iga.state != nil
}

func (iga *InternetGatewayAttachment) StateMust() *internetGatewayAttachmentState {
	if iga.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", iga.Type(), iga.LocalName()))
	}
	return iga.state
}

func (iga *InternetGatewayAttachment) DependOn() terra.Reference {
	return terra.ReferenceResource(iga)
}

type InternetGatewayAttachmentArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InternetGatewayId: string, required
	InternetGatewayId terra.StringValue `hcl:"internet_gateway_id,attr" validate:"required"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *internetgatewayattachment.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that InternetGatewayAttachment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type internetGatewayAttachmentAttributes struct {
	ref terra.Reference
}

func (iga internetGatewayAttachmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(iga.ref.Append("id"))
}

func (iga internetGatewayAttachmentAttributes) InternetGatewayId() terra.StringValue {
	return terra.ReferenceString(iga.ref.Append("internet_gateway_id"))
}

func (iga internetGatewayAttachmentAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(iga.ref.Append("vpc_id"))
}

func (iga internetGatewayAttachmentAttributes) Timeouts() internetgatewayattachment.TimeoutsAttributes {
	return terra.ReferenceSingle[internetgatewayattachment.TimeoutsAttributes](iga.ref.Append("timeouts"))
}

type internetGatewayAttachmentState struct {
	Id                string                                   `json:"id"`
	InternetGatewayId string                                   `json:"internet_gateway_id"`
	VpcId             string                                   `json:"vpc_id"`
	Timeouts          *internetgatewayattachment.TimeoutsState `json:"timeouts"`
}
