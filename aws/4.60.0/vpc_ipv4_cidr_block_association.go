// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	vpcipv4cidrblockassociation "github.com/golingon/terraproviders/aws/4.60.0/vpcipv4cidrblockassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVpcIpv4CidrBlockAssociation(name string, args VpcIpv4CidrBlockAssociationArgs) *VpcIpv4CidrBlockAssociation {
	return &VpcIpv4CidrBlockAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpcIpv4CidrBlockAssociation)(nil)

type VpcIpv4CidrBlockAssociation struct {
	Name  string
	Args  VpcIpv4CidrBlockAssociationArgs
	state *vpcIpv4CidrBlockAssociationState
}

func (vicba *VpcIpv4CidrBlockAssociation) Type() string {
	return "aws_vpc_ipv4_cidr_block_association"
}

func (vicba *VpcIpv4CidrBlockAssociation) LocalName() string {
	return vicba.Name
}

func (vicba *VpcIpv4CidrBlockAssociation) Configuration() interface{} {
	return vicba.Args
}

func (vicba *VpcIpv4CidrBlockAssociation) Attributes() vpcIpv4CidrBlockAssociationAttributes {
	return vpcIpv4CidrBlockAssociationAttributes{ref: terra.ReferenceResource(vicba)}
}

func (vicba *VpcIpv4CidrBlockAssociation) ImportState(av io.Reader) error {
	vicba.state = &vpcIpv4CidrBlockAssociationState{}
	if err := json.NewDecoder(av).Decode(vicba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vicba.Type(), vicba.LocalName(), err)
	}
	return nil
}

func (vicba *VpcIpv4CidrBlockAssociation) State() (*vpcIpv4CidrBlockAssociationState, bool) {
	return vicba.state, vicba.state != nil
}

func (vicba *VpcIpv4CidrBlockAssociation) StateMust() *vpcIpv4CidrBlockAssociationState {
	if vicba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vicba.Type(), vicba.LocalName()))
	}
	return vicba.state
}

func (vicba *VpcIpv4CidrBlockAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(vicba)
}

type VpcIpv4CidrBlockAssociationArgs struct {
	// CidrBlock: string, optional
	CidrBlock terra.StringValue `hcl:"cidr_block,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Ipv4IpamPoolId: string, optional
	Ipv4IpamPoolId terra.StringValue `hcl:"ipv4_ipam_pool_id,attr"`
	// Ipv4NetmaskLength: number, optional
	Ipv4NetmaskLength terra.NumberValue `hcl:"ipv4_netmask_length,attr"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *vpcipv4cidrblockassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that VpcIpv4CidrBlockAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vpcIpv4CidrBlockAssociationAttributes struct {
	ref terra.Reference
}

func (vicba vpcIpv4CidrBlockAssociationAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceString(vicba.ref.Append("cidr_block"))
}

func (vicba vpcIpv4CidrBlockAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vicba.ref.Append("id"))
}

func (vicba vpcIpv4CidrBlockAssociationAttributes) Ipv4IpamPoolId() terra.StringValue {
	return terra.ReferenceString(vicba.ref.Append("ipv4_ipam_pool_id"))
}

func (vicba vpcIpv4CidrBlockAssociationAttributes) Ipv4NetmaskLength() terra.NumberValue {
	return terra.ReferenceNumber(vicba.ref.Append("ipv4_netmask_length"))
}

func (vicba vpcIpv4CidrBlockAssociationAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(vicba.ref.Append("vpc_id"))
}

func (vicba vpcIpv4CidrBlockAssociationAttributes) Timeouts() vpcipv4cidrblockassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[vpcipv4cidrblockassociation.TimeoutsAttributes](vicba.ref.Append("timeouts"))
}

type vpcIpv4CidrBlockAssociationState struct {
	CidrBlock         string                                     `json:"cidr_block"`
	Id                string                                     `json:"id"`
	Ipv4IpamPoolId    string                                     `json:"ipv4_ipam_pool_id"`
	Ipv4NetmaskLength float64                                    `json:"ipv4_netmask_length"`
	VpcId             string                                     `json:"vpc_id"`
	Timeouts          *vpcipv4cidrblockassociation.TimeoutsState `json:"timeouts"`
}
