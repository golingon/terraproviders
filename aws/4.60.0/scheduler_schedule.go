// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	schedulerschedule "github.com/golingon/terraproviders/aws/4.60.0/schedulerschedule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSchedulerSchedule(name string, args SchedulerScheduleArgs) *SchedulerSchedule {
	return &SchedulerSchedule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SchedulerSchedule)(nil)

type SchedulerSchedule struct {
	Name  string
	Args  SchedulerScheduleArgs
	state *schedulerScheduleState
}

func (ss *SchedulerSchedule) Type() string {
	return "aws_scheduler_schedule"
}

func (ss *SchedulerSchedule) LocalName() string {
	return ss.Name
}

func (ss *SchedulerSchedule) Configuration() interface{} {
	return ss.Args
}

func (ss *SchedulerSchedule) Attributes() schedulerScheduleAttributes {
	return schedulerScheduleAttributes{ref: terra.ReferenceResource(ss)}
}

func (ss *SchedulerSchedule) ImportState(av io.Reader) error {
	ss.state = &schedulerScheduleState{}
	if err := json.NewDecoder(av).Decode(ss.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ss.Type(), ss.LocalName(), err)
	}
	return nil
}

func (ss *SchedulerSchedule) State() (*schedulerScheduleState, bool) {
	return ss.state, ss.state != nil
}

func (ss *SchedulerSchedule) StateMust() *schedulerScheduleState {
	if ss.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ss.Type(), ss.LocalName()))
	}
	return ss.state
}

func (ss *SchedulerSchedule) DependOn() terra.Reference {
	return terra.ReferenceResource(ss)
}

type SchedulerScheduleArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// EndDate: string, optional
	EndDate terra.StringValue `hcl:"end_date,attr"`
	// GroupName: string, optional
	GroupName terra.StringValue `hcl:"group_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyArn: string, optional
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// ScheduleExpression: string, required
	ScheduleExpression terra.StringValue `hcl:"schedule_expression,attr" validate:"required"`
	// ScheduleExpressionTimezone: string, optional
	ScheduleExpressionTimezone terra.StringValue `hcl:"schedule_expression_timezone,attr"`
	// StartDate: string, optional
	StartDate terra.StringValue `hcl:"start_date,attr"`
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// FlexibleTimeWindow: required
	FlexibleTimeWindow *schedulerschedule.FlexibleTimeWindow `hcl:"flexible_time_window,block" validate:"required"`
	// Target: required
	Target *schedulerschedule.Target `hcl:"target,block" validate:"required"`
	// DependsOn contains resources that SchedulerSchedule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type schedulerScheduleAttributes struct {
	ref terra.Reference
}

func (ss schedulerScheduleAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("arn"))
}

func (ss schedulerScheduleAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("description"))
}

func (ss schedulerScheduleAttributes) EndDate() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("end_date"))
}

func (ss schedulerScheduleAttributes) GroupName() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("group_name"))
}

func (ss schedulerScheduleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("id"))
}

func (ss schedulerScheduleAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("kms_key_arn"))
}

func (ss schedulerScheduleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("name"))
}

func (ss schedulerScheduleAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("name_prefix"))
}

func (ss schedulerScheduleAttributes) ScheduleExpression() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("schedule_expression"))
}

func (ss schedulerScheduleAttributes) ScheduleExpressionTimezone() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("schedule_expression_timezone"))
}

func (ss schedulerScheduleAttributes) StartDate() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("start_date"))
}

func (ss schedulerScheduleAttributes) State() terra.StringValue {
	return terra.ReferenceString(ss.ref.Append("state"))
}

func (ss schedulerScheduleAttributes) FlexibleTimeWindow() terra.ListValue[schedulerschedule.FlexibleTimeWindowAttributes] {
	return terra.ReferenceList[schedulerschedule.FlexibleTimeWindowAttributes](ss.ref.Append("flexible_time_window"))
}

func (ss schedulerScheduleAttributes) Target() terra.ListValue[schedulerschedule.TargetAttributes] {
	return terra.ReferenceList[schedulerschedule.TargetAttributes](ss.ref.Append("target"))
}

type schedulerScheduleState struct {
	Arn                        string                                      `json:"arn"`
	Description                string                                      `json:"description"`
	EndDate                    string                                      `json:"end_date"`
	GroupName                  string                                      `json:"group_name"`
	Id                         string                                      `json:"id"`
	KmsKeyArn                  string                                      `json:"kms_key_arn"`
	Name                       string                                      `json:"name"`
	NamePrefix                 string                                      `json:"name_prefix"`
	ScheduleExpression         string                                      `json:"schedule_expression"`
	ScheduleExpressionTimezone string                                      `json:"schedule_expression_timezone"`
	StartDate                  string                                      `json:"start_date"`
	State                      string                                      `json:"state"`
	FlexibleTimeWindow         []schedulerschedule.FlexibleTimeWindowState `json:"flexible_time_window"`
	Target                     []schedulerschedule.TargetState             `json:"target"`
}
