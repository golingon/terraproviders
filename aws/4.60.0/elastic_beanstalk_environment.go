// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	elasticbeanstalkenvironment "github.com/golingon/terraproviders/aws/4.60.0/elasticbeanstalkenvironment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewElasticBeanstalkEnvironment(name string, args ElasticBeanstalkEnvironmentArgs) *ElasticBeanstalkEnvironment {
	return &ElasticBeanstalkEnvironment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ElasticBeanstalkEnvironment)(nil)

type ElasticBeanstalkEnvironment struct {
	Name  string
	Args  ElasticBeanstalkEnvironmentArgs
	state *elasticBeanstalkEnvironmentState
}

func (ebe *ElasticBeanstalkEnvironment) Type() string {
	return "aws_elastic_beanstalk_environment"
}

func (ebe *ElasticBeanstalkEnvironment) LocalName() string {
	return ebe.Name
}

func (ebe *ElasticBeanstalkEnvironment) Configuration() interface{} {
	return ebe.Args
}

func (ebe *ElasticBeanstalkEnvironment) Attributes() elasticBeanstalkEnvironmentAttributes {
	return elasticBeanstalkEnvironmentAttributes{ref: terra.ReferenceResource(ebe)}
}

func (ebe *ElasticBeanstalkEnvironment) ImportState(av io.Reader) error {
	ebe.state = &elasticBeanstalkEnvironmentState{}
	if err := json.NewDecoder(av).Decode(ebe.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ebe.Type(), ebe.LocalName(), err)
	}
	return nil
}

func (ebe *ElasticBeanstalkEnvironment) State() (*elasticBeanstalkEnvironmentState, bool) {
	return ebe.state, ebe.state != nil
}

func (ebe *ElasticBeanstalkEnvironment) StateMust() *elasticBeanstalkEnvironmentState {
	if ebe.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ebe.Type(), ebe.LocalName()))
	}
	return ebe.state
}

func (ebe *ElasticBeanstalkEnvironment) DependOn() terra.Reference {
	return terra.ReferenceResource(ebe)
}

type ElasticBeanstalkEnvironmentArgs struct {
	// Application: string, required
	Application terra.StringValue `hcl:"application,attr" validate:"required"`
	// CnamePrefix: string, optional
	CnamePrefix terra.StringValue `hcl:"cname_prefix,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PlatformArn: string, optional
	PlatformArn terra.StringValue `hcl:"platform_arn,attr"`
	// PollInterval: string, optional
	PollInterval terra.StringValue `hcl:"poll_interval,attr"`
	// SolutionStackName: string, optional
	SolutionStackName terra.StringValue `hcl:"solution_stack_name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TemplateName: string, optional
	TemplateName terra.StringValue `hcl:"template_name,attr"`
	// Tier: string, optional
	Tier terra.StringValue `hcl:"tier,attr"`
	// VersionLabel: string, optional
	VersionLabel terra.StringValue `hcl:"version_label,attr"`
	// WaitForReadyTimeout: string, optional
	WaitForReadyTimeout terra.StringValue `hcl:"wait_for_ready_timeout,attr"`
	// AllSettings: min=0
	AllSettings []elasticbeanstalkenvironment.AllSettings `hcl:"all_settings,block" validate:"min=0"`
	// Setting: min=0
	Setting []elasticbeanstalkenvironment.Setting `hcl:"setting,block" validate:"min=0"`
	// DependsOn contains resources that ElasticBeanstalkEnvironment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type elasticBeanstalkEnvironmentAttributes struct {
	ref terra.Reference
}

func (ebe elasticBeanstalkEnvironmentAttributes) Application() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("application"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("arn"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) AutoscalingGroups() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ebe.ref.Append("autoscaling_groups"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) Cname() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("cname"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) CnamePrefix() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("cname_prefix"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("description"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) EndpointUrl() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("endpoint_url"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("id"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) Instances() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ebe.ref.Append("instances"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) LaunchConfigurations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ebe.ref.Append("launch_configurations"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) LoadBalancers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ebe.ref.Append("load_balancers"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("name"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) PlatformArn() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("platform_arn"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) PollInterval() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("poll_interval"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) Queues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ebe.ref.Append("queues"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) SolutionStackName() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("solution_stack_name"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ebe.ref.Append("tags"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ebe.ref.Append("tags_all"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) TemplateName() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("template_name"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) Tier() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("tier"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) Triggers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ebe.ref.Append("triggers"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) VersionLabel() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("version_label"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) WaitForReadyTimeout() terra.StringValue {
	return terra.ReferenceString(ebe.ref.Append("wait_for_ready_timeout"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) AllSettings() terra.SetValue[elasticbeanstalkenvironment.AllSettingsAttributes] {
	return terra.ReferenceSet[elasticbeanstalkenvironment.AllSettingsAttributes](ebe.ref.Append("all_settings"))
}

func (ebe elasticBeanstalkEnvironmentAttributes) Setting() terra.SetValue[elasticbeanstalkenvironment.SettingAttributes] {
	return terra.ReferenceSet[elasticbeanstalkenvironment.SettingAttributes](ebe.ref.Append("setting"))
}

type elasticBeanstalkEnvironmentState struct {
	Application          string                                         `json:"application"`
	Arn                  string                                         `json:"arn"`
	AutoscalingGroups    []string                                       `json:"autoscaling_groups"`
	Cname                string                                         `json:"cname"`
	CnamePrefix          string                                         `json:"cname_prefix"`
	Description          string                                         `json:"description"`
	EndpointUrl          string                                         `json:"endpoint_url"`
	Id                   string                                         `json:"id"`
	Instances            []string                                       `json:"instances"`
	LaunchConfigurations []string                                       `json:"launch_configurations"`
	LoadBalancers        []string                                       `json:"load_balancers"`
	Name                 string                                         `json:"name"`
	PlatformArn          string                                         `json:"platform_arn"`
	PollInterval         string                                         `json:"poll_interval"`
	Queues               []string                                       `json:"queues"`
	SolutionStackName    string                                         `json:"solution_stack_name"`
	Tags                 map[string]string                              `json:"tags"`
	TagsAll              map[string]string                              `json:"tags_all"`
	TemplateName         string                                         `json:"template_name"`
	Tier                 string                                         `json:"tier"`
	Triggers             []string                                       `json:"triggers"`
	VersionLabel         string                                         `json:"version_label"`
	WaitForReadyTimeout  string                                         `json:"wait_for_ready_timeout"`
	AllSettings          []elasticbeanstalkenvironment.AllSettingsState `json:"all_settings"`
	Setting              []elasticbeanstalkenvironment.SettingState     `json:"setting"`
}
