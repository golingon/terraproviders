// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	resourcegroupsgroup "github.com/golingon/terraproviders/aws/4.60.0/resourcegroupsgroup"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewResourcegroupsGroup(name string, args ResourcegroupsGroupArgs) *ResourcegroupsGroup {
	return &ResourcegroupsGroup{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ResourcegroupsGroup)(nil)

type ResourcegroupsGroup struct {
	Name  string
	Args  ResourcegroupsGroupArgs
	state *resourcegroupsGroupState
}

func (rg *ResourcegroupsGroup) Type() string {
	return "aws_resourcegroups_group"
}

func (rg *ResourcegroupsGroup) LocalName() string {
	return rg.Name
}

func (rg *ResourcegroupsGroup) Configuration() interface{} {
	return rg.Args
}

func (rg *ResourcegroupsGroup) Attributes() resourcegroupsGroupAttributes {
	return resourcegroupsGroupAttributes{ref: terra.ReferenceResource(rg)}
}

func (rg *ResourcegroupsGroup) ImportState(av io.Reader) error {
	rg.state = &resourcegroupsGroupState{}
	if err := json.NewDecoder(av).Decode(rg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rg.Type(), rg.LocalName(), err)
	}
	return nil
}

func (rg *ResourcegroupsGroup) State() (*resourcegroupsGroupState, bool) {
	return rg.state, rg.state != nil
}

func (rg *ResourcegroupsGroup) StateMust() *resourcegroupsGroupState {
	if rg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rg.Type(), rg.LocalName()))
	}
	return rg.state
}

func (rg *ResourcegroupsGroup) DependOn() terra.Reference {
	return terra.ReferenceResource(rg)
}

type ResourcegroupsGroupArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Configuration: min=0
	Configuration []resourcegroupsgroup.Configuration `hcl:"configuration,block" validate:"min=0"`
	// ResourceQuery: optional
	ResourceQuery *resourcegroupsgroup.ResourceQuery `hcl:"resource_query,block"`
	// Timeouts: optional
	Timeouts *resourcegroupsgroup.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ResourcegroupsGroup depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type resourcegroupsGroupAttributes struct {
	ref terra.Reference
}

func (rg resourcegroupsGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rg.ref.Append("arn"))
}

func (rg resourcegroupsGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceString(rg.ref.Append("description"))
}

func (rg resourcegroupsGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rg.ref.Append("id"))
}

func (rg resourcegroupsGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rg.ref.Append("name"))
}

func (rg resourcegroupsGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rg.ref.Append("tags"))
}

func (rg resourcegroupsGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rg.ref.Append("tags_all"))
}

func (rg resourcegroupsGroupAttributes) Configuration() terra.SetValue[resourcegroupsgroup.ConfigurationAttributes] {
	return terra.ReferenceSet[resourcegroupsgroup.ConfigurationAttributes](rg.ref.Append("configuration"))
}

func (rg resourcegroupsGroupAttributes) ResourceQuery() terra.ListValue[resourcegroupsgroup.ResourceQueryAttributes] {
	return terra.ReferenceList[resourcegroupsgroup.ResourceQueryAttributes](rg.ref.Append("resource_query"))
}

func (rg resourcegroupsGroupAttributes) Timeouts() resourcegroupsgroup.TimeoutsAttributes {
	return terra.ReferenceSingle[resourcegroupsgroup.TimeoutsAttributes](rg.ref.Append("timeouts"))
}

type resourcegroupsGroupState struct {
	Arn           string                                   `json:"arn"`
	Description   string                                   `json:"description"`
	Id            string                                   `json:"id"`
	Name          string                                   `json:"name"`
	Tags          map[string]string                        `json:"tags"`
	TagsAll       map[string]string                        `json:"tags_all"`
	Configuration []resourcegroupsgroup.ConfigurationState `json:"configuration"`
	ResourceQuery []resourcegroupsgroup.ResourceQueryState `json:"resource_query"`
	Timeouts      *resourcegroupsgroup.TimeoutsState       `json:"timeouts"`
}
