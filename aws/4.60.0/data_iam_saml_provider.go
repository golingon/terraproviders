// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import "github.com/volvo-cars/lingon/pkg/terra"

func NewDataIamSamlProvider(name string, args DataIamSamlProviderArgs) *DataIamSamlProvider {
	return &DataIamSamlProvider{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataIamSamlProvider)(nil)

type DataIamSamlProvider struct {
	Name string
	Args DataIamSamlProviderArgs
}

func (isp *DataIamSamlProvider) DataSource() string {
	return "aws_iam_saml_provider"
}

func (isp *DataIamSamlProvider) LocalName() string {
	return isp.Name
}

func (isp *DataIamSamlProvider) Configuration() interface{} {
	return isp.Args
}

func (isp *DataIamSamlProvider) Attributes() dataIamSamlProviderAttributes {
	return dataIamSamlProviderAttributes{ref: terra.ReferenceDataResource(isp)}
}

type DataIamSamlProviderArgs struct {
	// Arn: string, required
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}
type dataIamSamlProviderAttributes struct {
	ref terra.Reference
}

func (isp dataIamSamlProviderAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("arn"))
}

func (isp dataIamSamlProviderAttributes) CreateDate() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("create_date"))
}

func (isp dataIamSamlProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("id"))
}

func (isp dataIamSamlProviderAttributes) Name() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("name"))
}

func (isp dataIamSamlProviderAttributes) SamlMetadataDocument() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("saml_metadata_document"))
}

func (isp dataIamSamlProviderAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](isp.ref.Append("tags"))
}

func (isp dataIamSamlProviderAttributes) ValidUntil() terra.StringValue {
	return terra.ReferenceString(isp.ref.Append("valid_until"))
}
