// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	route53resolverruleassociation "github.com/golingon/terraproviders/aws/4.60.0/route53resolverruleassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53ResolverRuleAssociation(name string, args Route53ResolverRuleAssociationArgs) *Route53ResolverRuleAssociation {
	return &Route53ResolverRuleAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53ResolverRuleAssociation)(nil)

type Route53ResolverRuleAssociation struct {
	Name  string
	Args  Route53ResolverRuleAssociationArgs
	state *route53ResolverRuleAssociationState
}

func (rrra *Route53ResolverRuleAssociation) Type() string {
	return "aws_route53_resolver_rule_association"
}

func (rrra *Route53ResolverRuleAssociation) LocalName() string {
	return rrra.Name
}

func (rrra *Route53ResolverRuleAssociation) Configuration() interface{} {
	return rrra.Args
}

func (rrra *Route53ResolverRuleAssociation) Attributes() route53ResolverRuleAssociationAttributes {
	return route53ResolverRuleAssociationAttributes{ref: terra.ReferenceResource(rrra)}
}

func (rrra *Route53ResolverRuleAssociation) ImportState(av io.Reader) error {
	rrra.state = &route53ResolverRuleAssociationState{}
	if err := json.NewDecoder(av).Decode(rrra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rrra.Type(), rrra.LocalName(), err)
	}
	return nil
}

func (rrra *Route53ResolverRuleAssociation) State() (*route53ResolverRuleAssociationState, bool) {
	return rrra.state, rrra.state != nil
}

func (rrra *Route53ResolverRuleAssociation) StateMust() *route53ResolverRuleAssociationState {
	if rrra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rrra.Type(), rrra.LocalName()))
	}
	return rrra.state
}

func (rrra *Route53ResolverRuleAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(rrra)
}

type Route53ResolverRuleAssociationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// ResolverRuleId: string, required
	ResolverRuleId terra.StringValue `hcl:"resolver_rule_id,attr" validate:"required"`
	// VpcId: string, required
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *route53resolverruleassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Route53ResolverRuleAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53ResolverRuleAssociationAttributes struct {
	ref terra.Reference
}

func (rrra route53ResolverRuleAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rrra.ref.Append("id"))
}

func (rrra route53ResolverRuleAssociationAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rrra.ref.Append("name"))
}

func (rrra route53ResolverRuleAssociationAttributes) ResolverRuleId() terra.StringValue {
	return terra.ReferenceString(rrra.ref.Append("resolver_rule_id"))
}

func (rrra route53ResolverRuleAssociationAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(rrra.ref.Append("vpc_id"))
}

func (rrra route53ResolverRuleAssociationAttributes) Timeouts() route53resolverruleassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[route53resolverruleassociation.TimeoutsAttributes](rrra.ref.Append("timeouts"))
}

type route53ResolverRuleAssociationState struct {
	Id             string                                        `json:"id"`
	Name           string                                        `json:"name"`
	ResolverRuleId string                                        `json:"resolver_rule_id"`
	VpcId          string                                        `json:"vpc_id"`
	Timeouts       *route53resolverruleassociation.TimeoutsState `json:"timeouts"`
}
