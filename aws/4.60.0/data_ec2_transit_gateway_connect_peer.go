// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataec2transitgatewayconnectpeer "github.com/golingon/terraproviders/aws/4.60.0/dataec2transitgatewayconnectpeer"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataEc2TransitGatewayConnectPeer(name string, args DataEc2TransitGatewayConnectPeerArgs) *DataEc2TransitGatewayConnectPeer {
	return &DataEc2TransitGatewayConnectPeer{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataEc2TransitGatewayConnectPeer)(nil)

type DataEc2TransitGatewayConnectPeer struct {
	Name string
	Args DataEc2TransitGatewayConnectPeerArgs
}

func (etgcp *DataEc2TransitGatewayConnectPeer) DataSource() string {
	return "aws_ec2_transit_gateway_connect_peer"
}

func (etgcp *DataEc2TransitGatewayConnectPeer) LocalName() string {
	return etgcp.Name
}

func (etgcp *DataEc2TransitGatewayConnectPeer) Configuration() interface{} {
	return etgcp.Args
}

func (etgcp *DataEc2TransitGatewayConnectPeer) Attributes() dataEc2TransitGatewayConnectPeerAttributes {
	return dataEc2TransitGatewayConnectPeerAttributes{ref: terra.ReferenceDataResource(etgcp)}
}

type DataEc2TransitGatewayConnectPeerArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TransitGatewayConnectPeerId: string, optional
	TransitGatewayConnectPeerId terra.StringValue `hcl:"transit_gateway_connect_peer_id,attr"`
	// Filter: min=0
	Filter []dataec2transitgatewayconnectpeer.Filter `hcl:"filter,block" validate:"min=0"`
	// Timeouts: optional
	Timeouts *dataec2transitgatewayconnectpeer.Timeouts `hcl:"timeouts,block"`
}
type dataEc2TransitGatewayConnectPeerAttributes struct {
	ref terra.Reference
}

func (etgcp dataEc2TransitGatewayConnectPeerAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(etgcp.ref.Append("arn"))
}

func (etgcp dataEc2TransitGatewayConnectPeerAttributes) BgpAsn() terra.StringValue {
	return terra.ReferenceString(etgcp.ref.Append("bgp_asn"))
}

func (etgcp dataEc2TransitGatewayConnectPeerAttributes) Id() terra.StringValue {
	return terra.ReferenceString(etgcp.ref.Append("id"))
}

func (etgcp dataEc2TransitGatewayConnectPeerAttributes) InsideCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](etgcp.ref.Append("inside_cidr_blocks"))
}

func (etgcp dataEc2TransitGatewayConnectPeerAttributes) PeerAddress() terra.StringValue {
	return terra.ReferenceString(etgcp.ref.Append("peer_address"))
}

func (etgcp dataEc2TransitGatewayConnectPeerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](etgcp.ref.Append("tags"))
}

func (etgcp dataEc2TransitGatewayConnectPeerAttributes) TransitGatewayAddress() terra.StringValue {
	return terra.ReferenceString(etgcp.ref.Append("transit_gateway_address"))
}

func (etgcp dataEc2TransitGatewayConnectPeerAttributes) TransitGatewayAttachmentId() terra.StringValue {
	return terra.ReferenceString(etgcp.ref.Append("transit_gateway_attachment_id"))
}

func (etgcp dataEc2TransitGatewayConnectPeerAttributes) TransitGatewayConnectPeerId() terra.StringValue {
	return terra.ReferenceString(etgcp.ref.Append("transit_gateway_connect_peer_id"))
}

func (etgcp dataEc2TransitGatewayConnectPeerAttributes) Filter() terra.SetValue[dataec2transitgatewayconnectpeer.FilterAttributes] {
	return terra.ReferenceSet[dataec2transitgatewayconnectpeer.FilterAttributes](etgcp.ref.Append("filter"))
}

func (etgcp dataEc2TransitGatewayConnectPeerAttributes) Timeouts() dataec2transitgatewayconnectpeer.TimeoutsAttributes {
	return terra.ReferenceSingle[dataec2transitgatewayconnectpeer.TimeoutsAttributes](etgcp.ref.Append("timeouts"))
}
