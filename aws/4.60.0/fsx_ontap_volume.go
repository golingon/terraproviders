// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	fsxontapvolume "github.com/golingon/terraproviders/aws/4.60.0/fsxontapvolume"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewFsxOntapVolume(name string, args FsxOntapVolumeArgs) *FsxOntapVolume {
	return &FsxOntapVolume{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*FsxOntapVolume)(nil)

type FsxOntapVolume struct {
	Name  string
	Args  FsxOntapVolumeArgs
	state *fsxOntapVolumeState
}

func (fov *FsxOntapVolume) Type() string {
	return "aws_fsx_ontap_volume"
}

func (fov *FsxOntapVolume) LocalName() string {
	return fov.Name
}

func (fov *FsxOntapVolume) Configuration() interface{} {
	return fov.Args
}

func (fov *FsxOntapVolume) Attributes() fsxOntapVolumeAttributes {
	return fsxOntapVolumeAttributes{ref: terra.ReferenceResource(fov)}
}

func (fov *FsxOntapVolume) ImportState(av io.Reader) error {
	fov.state = &fsxOntapVolumeState{}
	if err := json.NewDecoder(av).Decode(fov.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", fov.Type(), fov.LocalName(), err)
	}
	return nil
}

func (fov *FsxOntapVolume) State() (*fsxOntapVolumeState, bool) {
	return fov.state, fov.state != nil
}

func (fov *FsxOntapVolume) StateMust() *fsxOntapVolumeState {
	if fov.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", fov.Type(), fov.LocalName()))
	}
	return fov.state
}

func (fov *FsxOntapVolume) DependOn() terra.Reference {
	return terra.ReferenceResource(fov)
}

type FsxOntapVolumeArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// JunctionPath: string, required
	JunctionPath terra.StringValue `hcl:"junction_path,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SecurityStyle: string, optional
	SecurityStyle terra.StringValue `hcl:"security_style,attr"`
	// SizeInMegabytes: number, required
	SizeInMegabytes terra.NumberValue `hcl:"size_in_megabytes,attr" validate:"required"`
	// StorageEfficiencyEnabled: bool, required
	StorageEfficiencyEnabled terra.BoolValue `hcl:"storage_efficiency_enabled,attr" validate:"required"`
	// StorageVirtualMachineId: string, required
	StorageVirtualMachineId terra.StringValue `hcl:"storage_virtual_machine_id,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VolumeType: string, optional
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
	// TieringPolicy: optional
	TieringPolicy *fsxontapvolume.TieringPolicy `hcl:"tiering_policy,block"`
	// Timeouts: optional
	Timeouts *fsxontapvolume.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that FsxOntapVolume depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type fsxOntapVolumeAttributes struct {
	ref terra.Reference
}

func (fov fsxOntapVolumeAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(fov.ref.Append("arn"))
}

func (fov fsxOntapVolumeAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceString(fov.ref.Append("file_system_id"))
}

func (fov fsxOntapVolumeAttributes) FlexcacheEndpointType() terra.StringValue {
	return terra.ReferenceString(fov.ref.Append("flexcache_endpoint_type"))
}

func (fov fsxOntapVolumeAttributes) Id() terra.StringValue {
	return terra.ReferenceString(fov.ref.Append("id"))
}

func (fov fsxOntapVolumeAttributes) JunctionPath() terra.StringValue {
	return terra.ReferenceString(fov.ref.Append("junction_path"))
}

func (fov fsxOntapVolumeAttributes) Name() terra.StringValue {
	return terra.ReferenceString(fov.ref.Append("name"))
}

func (fov fsxOntapVolumeAttributes) OntapVolumeType() terra.StringValue {
	return terra.ReferenceString(fov.ref.Append("ontap_volume_type"))
}

func (fov fsxOntapVolumeAttributes) SecurityStyle() terra.StringValue {
	return terra.ReferenceString(fov.ref.Append("security_style"))
}

func (fov fsxOntapVolumeAttributes) SizeInMegabytes() terra.NumberValue {
	return terra.ReferenceNumber(fov.ref.Append("size_in_megabytes"))
}

func (fov fsxOntapVolumeAttributes) StorageEfficiencyEnabled() terra.BoolValue {
	return terra.ReferenceBool(fov.ref.Append("storage_efficiency_enabled"))
}

func (fov fsxOntapVolumeAttributes) StorageVirtualMachineId() terra.StringValue {
	return terra.ReferenceString(fov.ref.Append("storage_virtual_machine_id"))
}

func (fov fsxOntapVolumeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fov.ref.Append("tags"))
}

func (fov fsxOntapVolumeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](fov.ref.Append("tags_all"))
}

func (fov fsxOntapVolumeAttributes) Uuid() terra.StringValue {
	return terra.ReferenceString(fov.ref.Append("uuid"))
}

func (fov fsxOntapVolumeAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceString(fov.ref.Append("volume_type"))
}

func (fov fsxOntapVolumeAttributes) TieringPolicy() terra.ListValue[fsxontapvolume.TieringPolicyAttributes] {
	return terra.ReferenceList[fsxontapvolume.TieringPolicyAttributes](fov.ref.Append("tiering_policy"))
}

func (fov fsxOntapVolumeAttributes) Timeouts() fsxontapvolume.TimeoutsAttributes {
	return terra.ReferenceSingle[fsxontapvolume.TimeoutsAttributes](fov.ref.Append("timeouts"))
}

type fsxOntapVolumeState struct {
	Arn                      string                              `json:"arn"`
	FileSystemId             string                              `json:"file_system_id"`
	FlexcacheEndpointType    string                              `json:"flexcache_endpoint_type"`
	Id                       string                              `json:"id"`
	JunctionPath             string                              `json:"junction_path"`
	Name                     string                              `json:"name"`
	OntapVolumeType          string                              `json:"ontap_volume_type"`
	SecurityStyle            string                              `json:"security_style"`
	SizeInMegabytes          float64                             `json:"size_in_megabytes"`
	StorageEfficiencyEnabled bool                                `json:"storage_efficiency_enabled"`
	StorageVirtualMachineId  string                              `json:"storage_virtual_machine_id"`
	Tags                     map[string]string                   `json:"tags"`
	TagsAll                  map[string]string                   `json:"tags_all"`
	Uuid                     string                              `json:"uuid"`
	VolumeType               string                              `json:"volume_type"`
	TieringPolicy            []fsxontapvolume.TieringPolicyState `json:"tiering_policy"`
	Timeouts                 *fsxontapvolume.TimeoutsState       `json:"timeouts"`
}
