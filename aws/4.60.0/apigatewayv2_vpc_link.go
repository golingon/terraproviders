// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApigatewayv2VpcLink(name string, args Apigatewayv2VpcLinkArgs) *Apigatewayv2VpcLink {
	return &Apigatewayv2VpcLink{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Apigatewayv2VpcLink)(nil)

type Apigatewayv2VpcLink struct {
	Name  string
	Args  Apigatewayv2VpcLinkArgs
	state *apigatewayv2VpcLinkState
}

func (avl *Apigatewayv2VpcLink) Type() string {
	return "aws_apigatewayv2_vpc_link"
}

func (avl *Apigatewayv2VpcLink) LocalName() string {
	return avl.Name
}

func (avl *Apigatewayv2VpcLink) Configuration() interface{} {
	return avl.Args
}

func (avl *Apigatewayv2VpcLink) Attributes() apigatewayv2VpcLinkAttributes {
	return apigatewayv2VpcLinkAttributes{ref: terra.ReferenceResource(avl)}
}

func (avl *Apigatewayv2VpcLink) ImportState(av io.Reader) error {
	avl.state = &apigatewayv2VpcLinkState{}
	if err := json.NewDecoder(av).Decode(avl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avl.Type(), avl.LocalName(), err)
	}
	return nil
}

func (avl *Apigatewayv2VpcLink) State() (*apigatewayv2VpcLinkState, bool) {
	return avl.state, avl.state != nil
}

func (avl *Apigatewayv2VpcLink) StateMust() *apigatewayv2VpcLinkState {
	if avl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avl.Type(), avl.LocalName()))
	}
	return avl.state
}

func (avl *Apigatewayv2VpcLink) DependOn() terra.Reference {
	return terra.ReferenceResource(avl)
}

type Apigatewayv2VpcLinkArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SecurityGroupIds: set of string, required
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// SubnetIds: set of string, required
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that Apigatewayv2VpcLink depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apigatewayv2VpcLinkAttributes struct {
	ref terra.Reference
}

func (avl apigatewayv2VpcLinkAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(avl.ref.Append("arn"))
}

func (avl apigatewayv2VpcLinkAttributes) Id() terra.StringValue {
	return terra.ReferenceString(avl.ref.Append("id"))
}

func (avl apigatewayv2VpcLinkAttributes) Name() terra.StringValue {
	return terra.ReferenceString(avl.ref.Append("name"))
}

func (avl apigatewayv2VpcLinkAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](avl.ref.Append("security_group_ids"))
}

func (avl apigatewayv2VpcLinkAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](avl.ref.Append("subnet_ids"))
}

func (avl apigatewayv2VpcLinkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](avl.ref.Append("tags"))
}

func (avl apigatewayv2VpcLinkAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](avl.ref.Append("tags_all"))
}

type apigatewayv2VpcLinkState struct {
	Arn              string            `json:"arn"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	SecurityGroupIds []string          `json:"security_group_ids"`
	SubnetIds        []string          `json:"subnet_ids"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
}
