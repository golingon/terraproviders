// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	dataecstaskexecution "github.com/golingon/terraproviders/aws/4.60.0/dataecstaskexecution"
	"github.com/volvo-cars/lingon/pkg/terra"
)

func NewDataEcsTaskExecution(name string, args DataEcsTaskExecutionArgs) *DataEcsTaskExecution {
	return &DataEcsTaskExecution{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataEcsTaskExecution)(nil)

type DataEcsTaskExecution struct {
	Name string
	Args DataEcsTaskExecutionArgs
}

func (ete *DataEcsTaskExecution) DataSource() string {
	return "aws_ecs_task_execution"
}

func (ete *DataEcsTaskExecution) LocalName() string {
	return ete.Name
}

func (ete *DataEcsTaskExecution) Configuration() interface{} {
	return ete.Args
}

func (ete *DataEcsTaskExecution) Attributes() dataEcsTaskExecutionAttributes {
	return dataEcsTaskExecutionAttributes{ref: terra.ReferenceDataResource(ete)}
}

type DataEcsTaskExecutionArgs struct {
	// Cluster: string, required
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// DesiredCount: number, optional
	DesiredCount terra.NumberValue `hcl:"desired_count,attr"`
	// EnableEcsManagedTags: bool, optional
	EnableEcsManagedTags terra.BoolValue `hcl:"enable_ecs_managed_tags,attr"`
	// EnableExecuteCommand: bool, optional
	EnableExecuteCommand terra.BoolValue `hcl:"enable_execute_command,attr"`
	// Group: string, optional
	Group terra.StringValue `hcl:"group,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LaunchType: string, optional
	LaunchType terra.StringValue `hcl:"launch_type,attr"`
	// PlatformVersion: string, optional
	PlatformVersion terra.StringValue `hcl:"platform_version,attr"`
	// PropagateTags: string, optional
	PropagateTags terra.StringValue `hcl:"propagate_tags,attr"`
	// ReferenceId: string, optional
	ReferenceId terra.StringValue `hcl:"reference_id,attr"`
	// StartedBy: string, optional
	StartedBy terra.StringValue `hcl:"started_by,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TaskDefinition: string, required
	TaskDefinition terra.StringValue `hcl:"task_definition,attr" validate:"required"`
	// CapacityProviderStrategy: min=0
	CapacityProviderStrategy []dataecstaskexecution.CapacityProviderStrategy `hcl:"capacity_provider_strategy,block" validate:"min=0"`
	// NetworkConfiguration: optional
	NetworkConfiguration *dataecstaskexecution.NetworkConfiguration `hcl:"network_configuration,block"`
	// Overrides: optional
	Overrides *dataecstaskexecution.Overrides `hcl:"overrides,block"`
	// PlacementConstraints: min=0,max=10
	PlacementConstraints []dataecstaskexecution.PlacementConstraints `hcl:"placement_constraints,block" validate:"min=0,max=10"`
	// PlacementStrategy: min=0,max=5
	PlacementStrategy []dataecstaskexecution.PlacementStrategy `hcl:"placement_strategy,block" validate:"min=0,max=5"`
}
type dataEcsTaskExecutionAttributes struct {
	ref terra.Reference
}

func (ete dataEcsTaskExecutionAttributes) Cluster() terra.StringValue {
	return terra.ReferenceString(ete.ref.Append("cluster"))
}

func (ete dataEcsTaskExecutionAttributes) DesiredCount() terra.NumberValue {
	return terra.ReferenceNumber(ete.ref.Append("desired_count"))
}

func (ete dataEcsTaskExecutionAttributes) EnableEcsManagedTags() terra.BoolValue {
	return terra.ReferenceBool(ete.ref.Append("enable_ecs_managed_tags"))
}

func (ete dataEcsTaskExecutionAttributes) EnableExecuteCommand() terra.BoolValue {
	return terra.ReferenceBool(ete.ref.Append("enable_execute_command"))
}

func (ete dataEcsTaskExecutionAttributes) Group() terra.StringValue {
	return terra.ReferenceString(ete.ref.Append("group"))
}

func (ete dataEcsTaskExecutionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ete.ref.Append("id"))
}

func (ete dataEcsTaskExecutionAttributes) LaunchType() terra.StringValue {
	return terra.ReferenceString(ete.ref.Append("launch_type"))
}

func (ete dataEcsTaskExecutionAttributes) PlatformVersion() terra.StringValue {
	return terra.ReferenceString(ete.ref.Append("platform_version"))
}

func (ete dataEcsTaskExecutionAttributes) PropagateTags() terra.StringValue {
	return terra.ReferenceString(ete.ref.Append("propagate_tags"))
}

func (ete dataEcsTaskExecutionAttributes) ReferenceId() terra.StringValue {
	return terra.ReferenceString(ete.ref.Append("reference_id"))
}

func (ete dataEcsTaskExecutionAttributes) StartedBy() terra.StringValue {
	return terra.ReferenceString(ete.ref.Append("started_by"))
}

func (ete dataEcsTaskExecutionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ete.ref.Append("tags"))
}

func (ete dataEcsTaskExecutionAttributes) TaskArns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](ete.ref.Append("task_arns"))
}

func (ete dataEcsTaskExecutionAttributes) TaskDefinition() terra.StringValue {
	return terra.ReferenceString(ete.ref.Append("task_definition"))
}

func (ete dataEcsTaskExecutionAttributes) CapacityProviderStrategy() terra.SetValue[dataecstaskexecution.CapacityProviderStrategyAttributes] {
	return terra.ReferenceSet[dataecstaskexecution.CapacityProviderStrategyAttributes](ete.ref.Append("capacity_provider_strategy"))
}

func (ete dataEcsTaskExecutionAttributes) NetworkConfiguration() terra.ListValue[dataecstaskexecution.NetworkConfigurationAttributes] {
	return terra.ReferenceList[dataecstaskexecution.NetworkConfigurationAttributes](ete.ref.Append("network_configuration"))
}

func (ete dataEcsTaskExecutionAttributes) Overrides() terra.ListValue[dataecstaskexecution.OverridesAttributes] {
	return terra.ReferenceList[dataecstaskexecution.OverridesAttributes](ete.ref.Append("overrides"))
}

func (ete dataEcsTaskExecutionAttributes) PlacementConstraints() terra.SetValue[dataecstaskexecution.PlacementConstraintsAttributes] {
	return terra.ReferenceSet[dataecstaskexecution.PlacementConstraintsAttributes](ete.ref.Append("placement_constraints"))
}

func (ete dataEcsTaskExecutionAttributes) PlacementStrategy() terra.ListValue[dataecstaskexecution.PlacementStrategyAttributes] {
	return terra.ReferenceList[dataecstaskexecution.PlacementStrategyAttributes](ete.ref.Append("placement_strategy"))
}
