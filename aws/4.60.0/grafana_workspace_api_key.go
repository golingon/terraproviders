// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGrafanaWorkspaceApiKey(name string, args GrafanaWorkspaceApiKeyArgs) *GrafanaWorkspaceApiKey {
	return &GrafanaWorkspaceApiKey{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GrafanaWorkspaceApiKey)(nil)

type GrafanaWorkspaceApiKey struct {
	Name  string
	Args  GrafanaWorkspaceApiKeyArgs
	state *grafanaWorkspaceApiKeyState
}

func (gwak *GrafanaWorkspaceApiKey) Type() string {
	return "aws_grafana_workspace_api_key"
}

func (gwak *GrafanaWorkspaceApiKey) LocalName() string {
	return gwak.Name
}

func (gwak *GrafanaWorkspaceApiKey) Configuration() interface{} {
	return gwak.Args
}

func (gwak *GrafanaWorkspaceApiKey) Attributes() grafanaWorkspaceApiKeyAttributes {
	return grafanaWorkspaceApiKeyAttributes{ref: terra.ReferenceResource(gwak)}
}

func (gwak *GrafanaWorkspaceApiKey) ImportState(av io.Reader) error {
	gwak.state = &grafanaWorkspaceApiKeyState{}
	if err := json.NewDecoder(av).Decode(gwak.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gwak.Type(), gwak.LocalName(), err)
	}
	return nil
}

func (gwak *GrafanaWorkspaceApiKey) State() (*grafanaWorkspaceApiKeyState, bool) {
	return gwak.state, gwak.state != nil
}

func (gwak *GrafanaWorkspaceApiKey) StateMust() *grafanaWorkspaceApiKeyState {
	if gwak.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gwak.Type(), gwak.LocalName()))
	}
	return gwak.state
}

func (gwak *GrafanaWorkspaceApiKey) DependOn() terra.Reference {
	return terra.ReferenceResource(gwak)
}

type GrafanaWorkspaceApiKeyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeyName: string, required
	KeyName terra.StringValue `hcl:"key_name,attr" validate:"required"`
	// KeyRole: string, required
	KeyRole terra.StringValue `hcl:"key_role,attr" validate:"required"`
	// SecondsToLive: number, required
	SecondsToLive terra.NumberValue `hcl:"seconds_to_live,attr" validate:"required"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// DependsOn contains resources that GrafanaWorkspaceApiKey depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type grafanaWorkspaceApiKeyAttributes struct {
	ref terra.Reference
}

func (gwak grafanaWorkspaceApiKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gwak.ref.Append("id"))
}

func (gwak grafanaWorkspaceApiKeyAttributes) Key() terra.StringValue {
	return terra.ReferenceString(gwak.ref.Append("key"))
}

func (gwak grafanaWorkspaceApiKeyAttributes) KeyName() terra.StringValue {
	return terra.ReferenceString(gwak.ref.Append("key_name"))
}

func (gwak grafanaWorkspaceApiKeyAttributes) KeyRole() terra.StringValue {
	return terra.ReferenceString(gwak.ref.Append("key_role"))
}

func (gwak grafanaWorkspaceApiKeyAttributes) SecondsToLive() terra.NumberValue {
	return terra.ReferenceNumber(gwak.ref.Append("seconds_to_live"))
}

func (gwak grafanaWorkspaceApiKeyAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceString(gwak.ref.Append("workspace_id"))
}

type grafanaWorkspaceApiKeyState struct {
	Id            string  `json:"id"`
	Key           string  `json:"key"`
	KeyName       string  `json:"key_name"`
	KeyRole       string  `json:"key_role"`
	SecondsToLive float64 `json:"seconds_to_live"`
	WorkspaceId   string  `json:"workspace_id"`
}
