// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package datadatapipelinepipelinedefinition

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ParameterObject struct {
	// Attribute: min=0
	Attribute []Attribute `hcl:"attribute,block" validate:"min=0"`
}

type Attribute struct{}

type PipelineObject struct {
	// Field: min=0
	Field []Field `hcl:"field,block" validate:"min=0"`
}

type Field struct{}

type ParameterValue struct{}

type ParameterObjectAttributes struct {
	ref terra.Reference
}

func (po ParameterObjectAttributes) InternalRef() terra.Reference {
	return po.ref
}

func (po ParameterObjectAttributes) InternalWithRef(ref terra.Reference) ParameterObjectAttributes {
	return ParameterObjectAttributes{ref: ref}
}

func (po ParameterObjectAttributes) InternalTokens() hclwrite.Tokens {
	return po.ref.InternalTokens()
}

func (po ParameterObjectAttributes) Id() terra.StringValue {
	return terra.ReferenceString(po.ref.Append("id"))
}

func (po ParameterObjectAttributes) Attribute() terra.SetValue[AttributeAttributes] {
	return terra.ReferenceSet[AttributeAttributes](po.ref.Append("attribute"))
}

type AttributeAttributes struct {
	ref terra.Reference
}

func (a AttributeAttributes) InternalRef() terra.Reference {
	return a.ref
}

func (a AttributeAttributes) InternalWithRef(ref terra.Reference) AttributeAttributes {
	return AttributeAttributes{ref: ref}
}

func (a AttributeAttributes) InternalTokens() hclwrite.Tokens {
	return a.ref.InternalTokens()
}

func (a AttributeAttributes) Key() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("key"))
}

func (a AttributeAttributes) StringValue() terra.StringValue {
	return terra.ReferenceString(a.ref.Append("string_value"))
}

type PipelineObjectAttributes struct {
	ref terra.Reference
}

func (po PipelineObjectAttributes) InternalRef() terra.Reference {
	return po.ref
}

func (po PipelineObjectAttributes) InternalWithRef(ref terra.Reference) PipelineObjectAttributes {
	return PipelineObjectAttributes{ref: ref}
}

func (po PipelineObjectAttributes) InternalTokens() hclwrite.Tokens {
	return po.ref.InternalTokens()
}

func (po PipelineObjectAttributes) Id() terra.StringValue {
	return terra.ReferenceString(po.ref.Append("id"))
}

func (po PipelineObjectAttributes) Name() terra.StringValue {
	return terra.ReferenceString(po.ref.Append("name"))
}

func (po PipelineObjectAttributes) Field() terra.SetValue[FieldAttributes] {
	return terra.ReferenceSet[FieldAttributes](po.ref.Append("field"))
}

type FieldAttributes struct {
	ref terra.Reference
}

func (f FieldAttributes) InternalRef() terra.Reference {
	return f.ref
}

func (f FieldAttributes) InternalWithRef(ref terra.Reference) FieldAttributes {
	return FieldAttributes{ref: ref}
}

func (f FieldAttributes) InternalTokens() hclwrite.Tokens {
	return f.ref.InternalTokens()
}

func (f FieldAttributes) Key() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("key"))
}

func (f FieldAttributes) RefValue() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("ref_value"))
}

func (f FieldAttributes) StringValue() terra.StringValue {
	return terra.ReferenceString(f.ref.Append("string_value"))
}

type ParameterValueAttributes struct {
	ref terra.Reference
}

func (pv ParameterValueAttributes) InternalRef() terra.Reference {
	return pv.ref
}

func (pv ParameterValueAttributes) InternalWithRef(ref terra.Reference) ParameterValueAttributes {
	return ParameterValueAttributes{ref: ref}
}

func (pv ParameterValueAttributes) InternalTokens() hclwrite.Tokens {
	return pv.ref.InternalTokens()
}

func (pv ParameterValueAttributes) Id() terra.StringValue {
	return terra.ReferenceString(pv.ref.Append("id"))
}

func (pv ParameterValueAttributes) StringValue() terra.StringValue {
	return terra.ReferenceString(pv.ref.Append("string_value"))
}

type ParameterObjectState struct {
	Id        string           `json:"id"`
	Attribute []AttributeState `json:"attribute"`
}

type AttributeState struct {
	Key         string `json:"key"`
	StringValue string `json:"string_value"`
}

type PipelineObjectState struct {
	Id    string       `json:"id"`
	Name  string       `json:"name"`
	Field []FieldState `json:"field"`
}

type FieldState struct {
	Key         string `json:"key"`
	RefValue    string `json:"ref_value"`
	StringValue string `json:"string_value"`
}

type ParameterValueState struct {
	Id          string `json:"id"`
	StringValue string `json:"string_value"`
}
