// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	sagemakerendpoint "github.com/golingon/terraproviders/aws/4.60.0/sagemakerendpoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSagemakerEndpoint(name string, args SagemakerEndpointArgs) *SagemakerEndpoint {
	return &SagemakerEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SagemakerEndpoint)(nil)

type SagemakerEndpoint struct {
	Name  string
	Args  SagemakerEndpointArgs
	state *sagemakerEndpointState
}

func (se *SagemakerEndpoint) Type() string {
	return "aws_sagemaker_endpoint"
}

func (se *SagemakerEndpoint) LocalName() string {
	return se.Name
}

func (se *SagemakerEndpoint) Configuration() interface{} {
	return se.Args
}

func (se *SagemakerEndpoint) Attributes() sagemakerEndpointAttributes {
	return sagemakerEndpointAttributes{ref: terra.ReferenceResource(se)}
}

func (se *SagemakerEndpoint) ImportState(av io.Reader) error {
	se.state = &sagemakerEndpointState{}
	if err := json.NewDecoder(av).Decode(se.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", se.Type(), se.LocalName(), err)
	}
	return nil
}

func (se *SagemakerEndpoint) State() (*sagemakerEndpointState, bool) {
	return se.state, se.state != nil
}

func (se *SagemakerEndpoint) StateMust() *sagemakerEndpointState {
	if se.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", se.Type(), se.LocalName()))
	}
	return se.state
}

func (se *SagemakerEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(se)
}

type SagemakerEndpointArgs struct {
	// EndpointConfigName: string, required
	EndpointConfigName terra.StringValue `hcl:"endpoint_config_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DeploymentConfig: optional
	DeploymentConfig *sagemakerendpoint.DeploymentConfig `hcl:"deployment_config,block"`
	// DependsOn contains resources that SagemakerEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type sagemakerEndpointAttributes struct {
	ref terra.Reference
}

func (se sagemakerEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("arn"))
}

func (se sagemakerEndpointAttributes) EndpointConfigName() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("endpoint_config_name"))
}

func (se sagemakerEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("id"))
}

func (se sagemakerEndpointAttributes) Name() terra.StringValue {
	return terra.ReferenceString(se.ref.Append("name"))
}

func (se sagemakerEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](se.ref.Append("tags"))
}

func (se sagemakerEndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](se.ref.Append("tags_all"))
}

func (se sagemakerEndpointAttributes) DeploymentConfig() terra.ListValue[sagemakerendpoint.DeploymentConfigAttributes] {
	return terra.ReferenceList[sagemakerendpoint.DeploymentConfigAttributes](se.ref.Append("deployment_config"))
}

type sagemakerEndpointState struct {
	Arn                string                                    `json:"arn"`
	EndpointConfigName string                                    `json:"endpoint_config_name"`
	Id                 string                                    `json:"id"`
	Name               string                                    `json:"name"`
	Tags               map[string]string                         `json:"tags"`
	TagsAll            map[string]string                         `json:"tags_all"`
	DeploymentConfig   []sagemakerendpoint.DeploymentConfigState `json:"deployment_config"`
}
