// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppconfigHostedConfigurationVersion(name string, args AppconfigHostedConfigurationVersionArgs) *AppconfigHostedConfigurationVersion {
	return &AppconfigHostedConfigurationVersion{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppconfigHostedConfigurationVersion)(nil)

type AppconfigHostedConfigurationVersion struct {
	Name  string
	Args  AppconfigHostedConfigurationVersionArgs
	state *appconfigHostedConfigurationVersionState
}

func (ahcv *AppconfigHostedConfigurationVersion) Type() string {
	return "aws_appconfig_hosted_configuration_version"
}

func (ahcv *AppconfigHostedConfigurationVersion) LocalName() string {
	return ahcv.Name
}

func (ahcv *AppconfigHostedConfigurationVersion) Configuration() interface{} {
	return ahcv.Args
}

func (ahcv *AppconfigHostedConfigurationVersion) Attributes() appconfigHostedConfigurationVersionAttributes {
	return appconfigHostedConfigurationVersionAttributes{ref: terra.ReferenceResource(ahcv)}
}

func (ahcv *AppconfigHostedConfigurationVersion) ImportState(av io.Reader) error {
	ahcv.state = &appconfigHostedConfigurationVersionState{}
	if err := json.NewDecoder(av).Decode(ahcv.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ahcv.Type(), ahcv.LocalName(), err)
	}
	return nil
}

func (ahcv *AppconfigHostedConfigurationVersion) State() (*appconfigHostedConfigurationVersionState, bool) {
	return ahcv.state, ahcv.state != nil
}

func (ahcv *AppconfigHostedConfigurationVersion) StateMust() *appconfigHostedConfigurationVersionState {
	if ahcv.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ahcv.Type(), ahcv.LocalName()))
	}
	return ahcv.state
}

func (ahcv *AppconfigHostedConfigurationVersion) DependOn() terra.Reference {
	return terra.ReferenceResource(ahcv)
}

type AppconfigHostedConfigurationVersionArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// ConfigurationProfileId: string, required
	ConfigurationProfileId terra.StringValue `hcl:"configuration_profile_id,attr" validate:"required"`
	// Content: string, required
	Content terra.StringValue `hcl:"content,attr" validate:"required"`
	// ContentType: string, required
	ContentType terra.StringValue `hcl:"content_type,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// DependsOn contains resources that AppconfigHostedConfigurationVersion depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appconfigHostedConfigurationVersionAttributes struct {
	ref terra.Reference
}

func (ahcv appconfigHostedConfigurationVersionAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceString(ahcv.ref.Append("application_id"))
}

func (ahcv appconfigHostedConfigurationVersionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ahcv.ref.Append("arn"))
}

func (ahcv appconfigHostedConfigurationVersionAttributes) ConfigurationProfileId() terra.StringValue {
	return terra.ReferenceString(ahcv.ref.Append("configuration_profile_id"))
}

func (ahcv appconfigHostedConfigurationVersionAttributes) Content() terra.StringValue {
	return terra.ReferenceString(ahcv.ref.Append("content"))
}

func (ahcv appconfigHostedConfigurationVersionAttributes) ContentType() terra.StringValue {
	return terra.ReferenceString(ahcv.ref.Append("content_type"))
}

func (ahcv appconfigHostedConfigurationVersionAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ahcv.ref.Append("description"))
}

func (ahcv appconfigHostedConfigurationVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ahcv.ref.Append("id"))
}

func (ahcv appconfigHostedConfigurationVersionAttributes) VersionNumber() terra.NumberValue {
	return terra.ReferenceNumber(ahcv.ref.Append("version_number"))
}

type appconfigHostedConfigurationVersionState struct {
	ApplicationId          string  `json:"application_id"`
	Arn                    string  `json:"arn"`
	ConfigurationProfileId string  `json:"configuration_profile_id"`
	Content                string  `json:"content"`
	ContentType            string  `json:"content_type"`
	Description            string  `json:"description"`
	Id                     string  `json:"id"`
	VersionNumber          float64 `json:"version_number"`
}
