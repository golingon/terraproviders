// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lexbotalias "github.com/golingon/terraproviders/aws/4.60.0/lexbotalias"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLexBotAlias(name string, args LexBotAliasArgs) *LexBotAlias {
	return &LexBotAlias{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LexBotAlias)(nil)

type LexBotAlias struct {
	Name  string
	Args  LexBotAliasArgs
	state *lexBotAliasState
}

func (lba *LexBotAlias) Type() string {
	return "aws_lex_bot_alias"
}

func (lba *LexBotAlias) LocalName() string {
	return lba.Name
}

func (lba *LexBotAlias) Configuration() interface{} {
	return lba.Args
}

func (lba *LexBotAlias) Attributes() lexBotAliasAttributes {
	return lexBotAliasAttributes{ref: terra.ReferenceResource(lba)}
}

func (lba *LexBotAlias) ImportState(av io.Reader) error {
	lba.state = &lexBotAliasState{}
	if err := json.NewDecoder(av).Decode(lba.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lba.Type(), lba.LocalName(), err)
	}
	return nil
}

func (lba *LexBotAlias) State() (*lexBotAliasState, bool) {
	return lba.state, lba.state != nil
}

func (lba *LexBotAlias) StateMust() *lexBotAliasState {
	if lba.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lba.Type(), lba.LocalName()))
	}
	return lba.state
}

func (lba *LexBotAlias) DependOn() terra.Reference {
	return terra.ReferenceResource(lba)
}

type LexBotAliasArgs struct {
	// BotName: string, required
	BotName terra.StringValue `hcl:"bot_name,attr" validate:"required"`
	// BotVersion: string, required
	BotVersion terra.StringValue `hcl:"bot_version,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ConversationLogs: optional
	ConversationLogs *lexbotalias.ConversationLogs `hcl:"conversation_logs,block"`
	// Timeouts: optional
	Timeouts *lexbotalias.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LexBotAlias depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lexBotAliasAttributes struct {
	ref terra.Reference
}

func (lba lexBotAliasAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(lba.ref.Append("arn"))
}

func (lba lexBotAliasAttributes) BotName() terra.StringValue {
	return terra.ReferenceString(lba.ref.Append("bot_name"))
}

func (lba lexBotAliasAttributes) BotVersion() terra.StringValue {
	return terra.ReferenceString(lba.ref.Append("bot_version"))
}

func (lba lexBotAliasAttributes) Checksum() terra.StringValue {
	return terra.ReferenceString(lba.ref.Append("checksum"))
}

func (lba lexBotAliasAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceString(lba.ref.Append("created_date"))
}

func (lba lexBotAliasAttributes) Description() terra.StringValue {
	return terra.ReferenceString(lba.ref.Append("description"))
}

func (lba lexBotAliasAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lba.ref.Append("id"))
}

func (lba lexBotAliasAttributes) LastUpdatedDate() terra.StringValue {
	return terra.ReferenceString(lba.ref.Append("last_updated_date"))
}

func (lba lexBotAliasAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lba.ref.Append("name"))
}

func (lba lexBotAliasAttributes) ConversationLogs() terra.ListValue[lexbotalias.ConversationLogsAttributes] {
	return terra.ReferenceList[lexbotalias.ConversationLogsAttributes](lba.ref.Append("conversation_logs"))
}

func (lba lexBotAliasAttributes) Timeouts() lexbotalias.TimeoutsAttributes {
	return terra.ReferenceSingle[lexbotalias.TimeoutsAttributes](lba.ref.Append("timeouts"))
}

type lexBotAliasState struct {
	Arn              string                              `json:"arn"`
	BotName          string                              `json:"bot_name"`
	BotVersion       string                              `json:"bot_version"`
	Checksum         string                              `json:"checksum"`
	CreatedDate      string                              `json:"created_date"`
	Description      string                              `json:"description"`
	Id               string                              `json:"id"`
	LastUpdatedDate  string                              `json:"last_updated_date"`
	Name             string                              `json:"name"`
	ConversationLogs []lexbotalias.ConversationLogsState `json:"conversation_logs"`
	Timeouts         *lexbotalias.TimeoutsState          `json:"timeouts"`
}
