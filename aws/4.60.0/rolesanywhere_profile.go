// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRolesanywhereProfile(name string, args RolesanywhereProfileArgs) *RolesanywhereProfile {
	return &RolesanywhereProfile{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RolesanywhereProfile)(nil)

type RolesanywhereProfile struct {
	Name  string
	Args  RolesanywhereProfileArgs
	state *rolesanywhereProfileState
}

func (rp *RolesanywhereProfile) Type() string {
	return "aws_rolesanywhere_profile"
}

func (rp *RolesanywhereProfile) LocalName() string {
	return rp.Name
}

func (rp *RolesanywhereProfile) Configuration() interface{} {
	return rp.Args
}

func (rp *RolesanywhereProfile) Attributes() rolesanywhereProfileAttributes {
	return rolesanywhereProfileAttributes{ref: terra.ReferenceResource(rp)}
}

func (rp *RolesanywhereProfile) ImportState(av io.Reader) error {
	rp.state = &rolesanywhereProfileState{}
	if err := json.NewDecoder(av).Decode(rp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rp.Type(), rp.LocalName(), err)
	}
	return nil
}

func (rp *RolesanywhereProfile) State() (*rolesanywhereProfileState, bool) {
	return rp.state, rp.state != nil
}

func (rp *RolesanywhereProfile) StateMust() *rolesanywhereProfileState {
	if rp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rp.Type(), rp.LocalName()))
	}
	return rp.state
}

func (rp *RolesanywhereProfile) DependOn() terra.Reference {
	return terra.ReferenceResource(rp)
}

type RolesanywhereProfileArgs struct {
	// DurationSeconds: number, optional
	DurationSeconds terra.NumberValue `hcl:"duration_seconds,attr"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ManagedPolicyArns: set of string, optional
	ManagedPolicyArns terra.SetValue[terra.StringValue] `hcl:"managed_policy_arns,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RequireInstanceProperties: bool, optional
	RequireInstanceProperties terra.BoolValue `hcl:"require_instance_properties,attr"`
	// RoleArns: set of string, required
	RoleArns terra.SetValue[terra.StringValue] `hcl:"role_arns,attr" validate:"required"`
	// SessionPolicy: string, optional
	SessionPolicy terra.StringValue `hcl:"session_policy,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that RolesanywhereProfile depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type rolesanywhereProfileAttributes struct {
	ref terra.Reference
}

func (rp rolesanywhereProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rp.ref.Append("arn"))
}

func (rp rolesanywhereProfileAttributes) DurationSeconds() terra.NumberValue {
	return terra.ReferenceNumber(rp.ref.Append("duration_seconds"))
}

func (rp rolesanywhereProfileAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(rp.ref.Append("enabled"))
}

func (rp rolesanywhereProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rp.ref.Append("id"))
}

func (rp rolesanywhereProfileAttributes) ManagedPolicyArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rp.ref.Append("managed_policy_arns"))
}

func (rp rolesanywhereProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceString(rp.ref.Append("name"))
}

func (rp rolesanywhereProfileAttributes) RequireInstanceProperties() terra.BoolValue {
	return terra.ReferenceBool(rp.ref.Append("require_instance_properties"))
}

func (rp rolesanywhereProfileAttributes) RoleArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rp.ref.Append("role_arns"))
}

func (rp rolesanywhereProfileAttributes) SessionPolicy() terra.StringValue {
	return terra.ReferenceString(rp.ref.Append("session_policy"))
}

func (rp rolesanywhereProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rp.ref.Append("tags"))
}

func (rp rolesanywhereProfileAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rp.ref.Append("tags_all"))
}

type rolesanywhereProfileState struct {
	Arn                       string            `json:"arn"`
	DurationSeconds           float64           `json:"duration_seconds"`
	Enabled                   bool              `json:"enabled"`
	Id                        string            `json:"id"`
	ManagedPolicyArns         []string          `json:"managed_policy_arns"`
	Name                      string            `json:"name"`
	RequireInstanceProperties bool              `json:"require_instance_properties"`
	RoleArns                  []string          `json:"role_arns"`
	SessionPolicy             string            `json:"session_policy"`
	Tags                      map[string]string `json:"tags"`
	TagsAll                   map[string]string `json:"tags_all"`
}
