// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRoute53HealthCheck(name string, args Route53HealthCheckArgs) *Route53HealthCheck {
	return &Route53HealthCheck{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Route53HealthCheck)(nil)

type Route53HealthCheck struct {
	Name  string
	Args  Route53HealthCheckArgs
	state *route53HealthCheckState
}

func (rhc *Route53HealthCheck) Type() string {
	return "aws_route53_health_check"
}

func (rhc *Route53HealthCheck) LocalName() string {
	return rhc.Name
}

func (rhc *Route53HealthCheck) Configuration() interface{} {
	return rhc.Args
}

func (rhc *Route53HealthCheck) Attributes() route53HealthCheckAttributes {
	return route53HealthCheckAttributes{ref: terra.ReferenceResource(rhc)}
}

func (rhc *Route53HealthCheck) ImportState(av io.Reader) error {
	rhc.state = &route53HealthCheckState{}
	if err := json.NewDecoder(av).Decode(rhc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rhc.Type(), rhc.LocalName(), err)
	}
	return nil
}

func (rhc *Route53HealthCheck) State() (*route53HealthCheckState, bool) {
	return rhc.state, rhc.state != nil
}

func (rhc *Route53HealthCheck) StateMust() *route53HealthCheckState {
	if rhc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rhc.Type(), rhc.LocalName()))
	}
	return rhc.state
}

func (rhc *Route53HealthCheck) DependOn() terra.Reference {
	return terra.ReferenceResource(rhc)
}

type Route53HealthCheckArgs struct {
	// ChildHealthThreshold: number, optional
	ChildHealthThreshold terra.NumberValue `hcl:"child_health_threshold,attr"`
	// ChildHealthchecks: set of string, optional
	ChildHealthchecks terra.SetValue[terra.StringValue] `hcl:"child_healthchecks,attr"`
	// CloudwatchAlarmName: string, optional
	CloudwatchAlarmName terra.StringValue `hcl:"cloudwatch_alarm_name,attr"`
	// CloudwatchAlarmRegion: string, optional
	CloudwatchAlarmRegion terra.StringValue `hcl:"cloudwatch_alarm_region,attr"`
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// EnableSni: bool, optional
	EnableSni terra.BoolValue `hcl:"enable_sni,attr"`
	// FailureThreshold: number, optional
	FailureThreshold terra.NumberValue `hcl:"failure_threshold,attr"`
	// Fqdn: string, optional
	Fqdn terra.StringValue `hcl:"fqdn,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// InsufficientDataHealthStatus: string, optional
	InsufficientDataHealthStatus terra.StringValue `hcl:"insufficient_data_health_status,attr"`
	// InvertHealthcheck: bool, optional
	InvertHealthcheck terra.BoolValue `hcl:"invert_healthcheck,attr"`
	// IpAddress: string, optional
	IpAddress terra.StringValue `hcl:"ip_address,attr"`
	// MeasureLatency: bool, optional
	MeasureLatency terra.BoolValue `hcl:"measure_latency,attr"`
	// Port: number, optional
	Port terra.NumberValue `hcl:"port,attr"`
	// ReferenceName: string, optional
	ReferenceName terra.StringValue `hcl:"reference_name,attr"`
	// Regions: set of string, optional
	Regions terra.SetValue[terra.StringValue] `hcl:"regions,attr"`
	// RequestInterval: number, optional
	RequestInterval terra.NumberValue `hcl:"request_interval,attr"`
	// ResourcePath: string, optional
	ResourcePath terra.StringValue `hcl:"resource_path,attr"`
	// RoutingControlArn: string, optional
	RoutingControlArn terra.StringValue `hcl:"routing_control_arn,attr"`
	// SearchString: string, optional
	SearchString terra.StringValue `hcl:"search_string,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// DependsOn contains resources that Route53HealthCheck depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type route53HealthCheckAttributes struct {
	ref terra.Reference
}

func (rhc route53HealthCheckAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("arn"))
}

func (rhc route53HealthCheckAttributes) ChildHealthThreshold() terra.NumberValue {
	return terra.ReferenceNumber(rhc.ref.Append("child_health_threshold"))
}

func (rhc route53HealthCheckAttributes) ChildHealthchecks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rhc.ref.Append("child_healthchecks"))
}

func (rhc route53HealthCheckAttributes) CloudwatchAlarmName() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("cloudwatch_alarm_name"))
}

func (rhc route53HealthCheckAttributes) CloudwatchAlarmRegion() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("cloudwatch_alarm_region"))
}

func (rhc route53HealthCheckAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceBool(rhc.ref.Append("disabled"))
}

func (rhc route53HealthCheckAttributes) EnableSni() terra.BoolValue {
	return terra.ReferenceBool(rhc.ref.Append("enable_sni"))
}

func (rhc route53HealthCheckAttributes) FailureThreshold() terra.NumberValue {
	return terra.ReferenceNumber(rhc.ref.Append("failure_threshold"))
}

func (rhc route53HealthCheckAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("fqdn"))
}

func (rhc route53HealthCheckAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("id"))
}

func (rhc route53HealthCheckAttributes) InsufficientDataHealthStatus() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("insufficient_data_health_status"))
}

func (rhc route53HealthCheckAttributes) InvertHealthcheck() terra.BoolValue {
	return terra.ReferenceBool(rhc.ref.Append("invert_healthcheck"))
}

func (rhc route53HealthCheckAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("ip_address"))
}

func (rhc route53HealthCheckAttributes) MeasureLatency() terra.BoolValue {
	return terra.ReferenceBool(rhc.ref.Append("measure_latency"))
}

func (rhc route53HealthCheckAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(rhc.ref.Append("port"))
}

func (rhc route53HealthCheckAttributes) ReferenceName() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("reference_name"))
}

func (rhc route53HealthCheckAttributes) Regions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rhc.ref.Append("regions"))
}

func (rhc route53HealthCheckAttributes) RequestInterval() terra.NumberValue {
	return terra.ReferenceNumber(rhc.ref.Append("request_interval"))
}

func (rhc route53HealthCheckAttributes) ResourcePath() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("resource_path"))
}

func (rhc route53HealthCheckAttributes) RoutingControlArn() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("routing_control_arn"))
}

func (rhc route53HealthCheckAttributes) SearchString() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("search_string"))
}

func (rhc route53HealthCheckAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rhc.ref.Append("tags"))
}

func (rhc route53HealthCheckAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rhc.ref.Append("tags_all"))
}

func (rhc route53HealthCheckAttributes) Type() terra.StringValue {
	return terra.ReferenceString(rhc.ref.Append("type"))
}

type route53HealthCheckState struct {
	Arn                          string            `json:"arn"`
	ChildHealthThreshold         float64           `json:"child_health_threshold"`
	ChildHealthchecks            []string          `json:"child_healthchecks"`
	CloudwatchAlarmName          string            `json:"cloudwatch_alarm_name"`
	CloudwatchAlarmRegion        string            `json:"cloudwatch_alarm_region"`
	Disabled                     bool              `json:"disabled"`
	EnableSni                    bool              `json:"enable_sni"`
	FailureThreshold             float64           `json:"failure_threshold"`
	Fqdn                         string            `json:"fqdn"`
	Id                           string            `json:"id"`
	InsufficientDataHealthStatus string            `json:"insufficient_data_health_status"`
	InvertHealthcheck            bool              `json:"invert_healthcheck"`
	IpAddress                    string            `json:"ip_address"`
	MeasureLatency               bool              `json:"measure_latency"`
	Port                         float64           `json:"port"`
	ReferenceName                string            `json:"reference_name"`
	Regions                      []string          `json:"regions"`
	RequestInterval              float64           `json:"request_interval"`
	ResourcePath                 string            `json:"resource_path"`
	RoutingControlArn            string            `json:"routing_control_arn"`
	SearchString                 string            `json:"search_string"`
	Tags                         map[string]string `json:"tags"`
	TagsAll                      map[string]string `json:"tags_all"`
	Type                         string            `json:"type"`
}
