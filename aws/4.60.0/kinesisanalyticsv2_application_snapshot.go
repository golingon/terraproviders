// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	kinesisanalyticsv2applicationsnapshot "github.com/golingon/terraproviders/aws/4.60.0/kinesisanalyticsv2applicationsnapshot"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewKinesisanalyticsv2ApplicationSnapshot(name string, args Kinesisanalyticsv2ApplicationSnapshotArgs) *Kinesisanalyticsv2ApplicationSnapshot {
	return &Kinesisanalyticsv2ApplicationSnapshot{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Kinesisanalyticsv2ApplicationSnapshot)(nil)

type Kinesisanalyticsv2ApplicationSnapshot struct {
	Name  string
	Args  Kinesisanalyticsv2ApplicationSnapshotArgs
	state *kinesisanalyticsv2ApplicationSnapshotState
}

func (kas *Kinesisanalyticsv2ApplicationSnapshot) Type() string {
	return "aws_kinesisanalyticsv2_application_snapshot"
}

func (kas *Kinesisanalyticsv2ApplicationSnapshot) LocalName() string {
	return kas.Name
}

func (kas *Kinesisanalyticsv2ApplicationSnapshot) Configuration() interface{} {
	return kas.Args
}

func (kas *Kinesisanalyticsv2ApplicationSnapshot) Attributes() kinesisanalyticsv2ApplicationSnapshotAttributes {
	return kinesisanalyticsv2ApplicationSnapshotAttributes{ref: terra.ReferenceResource(kas)}
}

func (kas *Kinesisanalyticsv2ApplicationSnapshot) ImportState(av io.Reader) error {
	kas.state = &kinesisanalyticsv2ApplicationSnapshotState{}
	if err := json.NewDecoder(av).Decode(kas.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", kas.Type(), kas.LocalName(), err)
	}
	return nil
}

func (kas *Kinesisanalyticsv2ApplicationSnapshot) State() (*kinesisanalyticsv2ApplicationSnapshotState, bool) {
	return kas.state, kas.state != nil
}

func (kas *Kinesisanalyticsv2ApplicationSnapshot) StateMust() *kinesisanalyticsv2ApplicationSnapshotState {
	if kas.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", kas.Type(), kas.LocalName()))
	}
	return kas.state
}

func (kas *Kinesisanalyticsv2ApplicationSnapshot) DependOn() terra.Reference {
	return terra.ReferenceResource(kas)
}

type Kinesisanalyticsv2ApplicationSnapshotArgs struct {
	// ApplicationName: string, required
	ApplicationName terra.StringValue `hcl:"application_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// SnapshotName: string, required
	SnapshotName terra.StringValue `hcl:"snapshot_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *kinesisanalyticsv2applicationsnapshot.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that Kinesisanalyticsv2ApplicationSnapshot depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type kinesisanalyticsv2ApplicationSnapshotAttributes struct {
	ref terra.Reference
}

func (kas kinesisanalyticsv2ApplicationSnapshotAttributes) ApplicationName() terra.StringValue {
	return terra.ReferenceString(kas.ref.Append("application_name"))
}

func (kas kinesisanalyticsv2ApplicationSnapshotAttributes) ApplicationVersionId() terra.NumberValue {
	return terra.ReferenceNumber(kas.ref.Append("application_version_id"))
}

func (kas kinesisanalyticsv2ApplicationSnapshotAttributes) Id() terra.StringValue {
	return terra.ReferenceString(kas.ref.Append("id"))
}

func (kas kinesisanalyticsv2ApplicationSnapshotAttributes) SnapshotCreationTimestamp() terra.StringValue {
	return terra.ReferenceString(kas.ref.Append("snapshot_creation_timestamp"))
}

func (kas kinesisanalyticsv2ApplicationSnapshotAttributes) SnapshotName() terra.StringValue {
	return terra.ReferenceString(kas.ref.Append("snapshot_name"))
}

func (kas kinesisanalyticsv2ApplicationSnapshotAttributes) Timeouts() kinesisanalyticsv2applicationsnapshot.TimeoutsAttributes {
	return terra.ReferenceSingle[kinesisanalyticsv2applicationsnapshot.TimeoutsAttributes](kas.ref.Append("timeouts"))
}

type kinesisanalyticsv2ApplicationSnapshotState struct {
	ApplicationName           string                                               `json:"application_name"`
	ApplicationVersionId      float64                                              `json:"application_version_id"`
	Id                        string                                               `json:"id"`
	SnapshotCreationTimestamp string                                               `json:"snapshot_creation_timestamp"`
	SnapshotName              string                                               `json:"snapshot_name"`
	Timeouts                  *kinesisanalyticsv2applicationsnapshot.TimeoutsState `json:"timeouts"`
}
