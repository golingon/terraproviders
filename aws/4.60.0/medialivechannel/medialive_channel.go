// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package medialivechannel

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type CdiInputSpecification struct {
	// Resolution: string, required
	Resolution terra.StringValue `hcl:"resolution,attr" validate:"required"`
}

type Destinations struct {
	// Id: string, required
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// MediaPackageSettings: min=0
	MediaPackageSettings []MediaPackageSettings `hcl:"media_package_settings,block" validate:"min=0"`
	// MultiplexSettings: optional
	MultiplexSettings *MultiplexSettings `hcl:"multiplex_settings,block"`
	// Settings: min=0
	Settings []Settings `hcl:"settings,block" validate:"min=0"`
}

type MediaPackageSettings struct {
	// ChannelId: string, required
	ChannelId terra.StringValue `hcl:"channel_id,attr" validate:"required"`
}

type MultiplexSettings struct {
	// MultiplexId: string, required
	MultiplexId terra.StringValue `hcl:"multiplex_id,attr" validate:"required"`
	// ProgramName: string, required
	ProgramName terra.StringValue `hcl:"program_name,attr" validate:"required"`
}

type Settings struct {
	// PasswordParam: string, optional
	PasswordParam terra.StringValue `hcl:"password_param,attr"`
	// StreamName: string, optional
	StreamName terra.StringValue `hcl:"stream_name,attr"`
	// Url: string, optional
	Url terra.StringValue `hcl:"url,attr"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type EncoderSettings struct {
	// AudioDescriptions: min=0
	AudioDescriptions []AudioDescriptions `hcl:"audio_descriptions,block" validate:"min=0"`
	// AvailBlanking: optional
	AvailBlanking *AvailBlanking `hcl:"avail_blanking,block"`
	// OutputGroups: min=1
	OutputGroups []OutputGroups `hcl:"output_groups,block" validate:"min=1"`
	// TimecodeConfig: required
	TimecodeConfig *TimecodeConfig `hcl:"timecode_config,block" validate:"required"`
	// VideoDescriptions: min=0
	VideoDescriptions []VideoDescriptions `hcl:"video_descriptions,block" validate:"min=0"`
}

type AudioDescriptions struct {
	// AudioSelectorName: string, required
	AudioSelectorName terra.StringValue `hcl:"audio_selector_name,attr" validate:"required"`
	// AudioType: string, optional
	AudioType terra.StringValue `hcl:"audio_type,attr"`
	// AudioTypeControl: string, optional
	AudioTypeControl terra.StringValue `hcl:"audio_type_control,attr"`
	// LanguageCode: string, optional
	LanguageCode terra.StringValue `hcl:"language_code,attr"`
	// LanguageCodeControl: string, optional
	LanguageCodeControl terra.StringValue `hcl:"language_code_control,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StreamName: string, optional
	StreamName terra.StringValue `hcl:"stream_name,attr"`
	// AudioNormalizationSettings: optional
	AudioNormalizationSettings *AudioNormalizationSettings `hcl:"audio_normalization_settings,block"`
	// AudioWatermarkSettings: optional
	AudioWatermarkSettings *AudioWatermarkSettings `hcl:"audio_watermark_settings,block"`
	// AudioDescriptionsCodecSettings: optional
	CodecSettings *AudioDescriptionsCodecSettings `hcl:"codec_settings,block"`
	// RemixSettings: optional
	RemixSettings *RemixSettings `hcl:"remix_settings,block"`
}

type AudioNormalizationSettings struct {
	// Algorithm: string, optional
	Algorithm terra.StringValue `hcl:"algorithm,attr"`
	// AlgorithmControl: string, optional
	AlgorithmControl terra.StringValue `hcl:"algorithm_control,attr"`
	// TargetLkfs: number, optional
	TargetLkfs terra.NumberValue `hcl:"target_lkfs,attr"`
}

type AudioWatermarkSettings struct {
	// NielsenWatermarksSettings: optional
	NielsenWatermarksSettings *NielsenWatermarksSettings `hcl:"nielsen_watermarks_settings,block"`
}

type NielsenWatermarksSettings struct {
	// NielsenDistributionType: string, optional
	NielsenDistributionType terra.StringValue `hcl:"nielsen_distribution_type,attr"`
	// NielsenCbetSettings: optional
	NielsenCbetSettings *NielsenCbetSettings `hcl:"nielsen_cbet_settings,block"`
	// NielsenNaesIiNwSettings: min=0
	NielsenNaesIiNwSettings []NielsenNaesIiNwSettings `hcl:"nielsen_naes_ii_nw_settings,block" validate:"min=0"`
}

type NielsenCbetSettings struct {
	// CbetCheckDigitString: string, required
	CbetCheckDigitString terra.StringValue `hcl:"cbet_check_digit_string,attr" validate:"required"`
	// CbetStepaside: string, required
	CbetStepaside terra.StringValue `hcl:"cbet_stepaside,attr" validate:"required"`
	// Csid: string, required
	Csid terra.StringValue `hcl:"csid,attr" validate:"required"`
}

type NielsenNaesIiNwSettings struct {
	// CheckDigitString: string, required
	CheckDigitString terra.StringValue `hcl:"check_digit_string,attr" validate:"required"`
	// Sid: number, required
	Sid terra.NumberValue `hcl:"sid,attr" validate:"required"`
}

type AudioDescriptionsCodecSettings struct {
	// AacSettings: optional
	AacSettings *AacSettings `hcl:"aac_settings,block"`
	// Ac3Settings: optional
	Ac3Settings *Ac3Settings `hcl:"ac3_settings,block"`
	// Eac3AtmosSettings: optional
	Eac3AtmosSettings *Eac3AtmosSettings `hcl:"eac3_atmos_settings,block"`
	// Eac3Settings: optional
	Eac3Settings *Eac3Settings `hcl:"eac3_settings,block"`
	// Mp2Settings: optional
	Mp2Settings *Mp2Settings `hcl:"mp2_settings,block"`
	// PassThroughSettings: optional
	PassThroughSettings *PassThroughSettings `hcl:"pass_through_settings,block"`
	// WavSettings: optional
	WavSettings *WavSettings `hcl:"wav_settings,block"`
}

type AacSettings struct {
	// Bitrate: number, optional
	Bitrate terra.NumberValue `hcl:"bitrate,attr"`
	// CodingMode: string, optional
	CodingMode terra.StringValue `hcl:"coding_mode,attr"`
	// InputType: string, optional
	InputType terra.StringValue `hcl:"input_type,attr"`
	// Profile: string, optional
	Profile terra.StringValue `hcl:"profile,attr"`
	// RateControlMode: string, optional
	RateControlMode terra.StringValue `hcl:"rate_control_mode,attr"`
	// RawFormat: string, optional
	RawFormat terra.StringValue `hcl:"raw_format,attr"`
	// SampleRate: number, optional
	SampleRate terra.NumberValue `hcl:"sample_rate,attr"`
	// Spec: string, optional
	Spec terra.StringValue `hcl:"spec,attr"`
	// VbrQuality: string, optional
	VbrQuality terra.StringValue `hcl:"vbr_quality,attr"`
}

type Ac3Settings struct {
	// Bitrate: number, optional
	Bitrate terra.NumberValue `hcl:"bitrate,attr"`
	// BitstreamMode: string, optional
	BitstreamMode terra.StringValue `hcl:"bitstream_mode,attr"`
	// CodingMode: string, optional
	CodingMode terra.StringValue `hcl:"coding_mode,attr"`
	// Dialnorm: number, optional
	Dialnorm terra.NumberValue `hcl:"dialnorm,attr"`
	// DrcProfile: string, optional
	DrcProfile terra.StringValue `hcl:"drc_profile,attr"`
	// LfeFilter: string, optional
	LfeFilter terra.StringValue `hcl:"lfe_filter,attr"`
	// MetadataControl: string, optional
	MetadataControl terra.StringValue `hcl:"metadata_control,attr"`
}

type Eac3AtmosSettings struct {
	// Bitrate: number, optional
	Bitrate terra.NumberValue `hcl:"bitrate,attr"`
	// CodingMode: string, optional
	CodingMode terra.StringValue `hcl:"coding_mode,attr"`
	// Dialnorm: number, optional
	Dialnorm terra.NumberValue `hcl:"dialnorm,attr"`
	// DrcLine: string, optional
	DrcLine terra.StringValue `hcl:"drc_line,attr"`
	// DrcRf: string, optional
	DrcRf terra.StringValue `hcl:"drc_rf,attr"`
	// HeightTrim: number, optional
	HeightTrim terra.NumberValue `hcl:"height_trim,attr"`
	// SurroundTrim: number, optional
	SurroundTrim terra.NumberValue `hcl:"surround_trim,attr"`
}

type Eac3Settings struct {
	// AttenuationControl: string, optional
	AttenuationControl terra.StringValue `hcl:"attenuation_control,attr"`
	// Bitrate: number, optional
	Bitrate terra.NumberValue `hcl:"bitrate,attr"`
	// BitstreamMode: string, optional
	BitstreamMode terra.StringValue `hcl:"bitstream_mode,attr"`
	// CodingMode: string, optional
	CodingMode terra.StringValue `hcl:"coding_mode,attr"`
	// DcFilter: string, optional
	DcFilter terra.StringValue `hcl:"dc_filter,attr"`
	// Dialnorm: number, optional
	Dialnorm terra.NumberValue `hcl:"dialnorm,attr"`
	// DrcLine: string, optional
	DrcLine terra.StringValue `hcl:"drc_line,attr"`
	// DrcRf: string, optional
	DrcRf terra.StringValue `hcl:"drc_rf,attr"`
	// LfeControl: string, optional
	LfeControl terra.StringValue `hcl:"lfe_control,attr"`
	// LfeFilter: string, optional
	LfeFilter terra.StringValue `hcl:"lfe_filter,attr"`
	// LoRoCenterMixLevel: number, optional
	LoRoCenterMixLevel terra.NumberValue `hcl:"lo_ro_center_mix_level,attr"`
	// LoRoSurroundMixLevel: number, optional
	LoRoSurroundMixLevel terra.NumberValue `hcl:"lo_ro_surround_mix_level,attr"`
	// LtRtCenterMixLevel: number, optional
	LtRtCenterMixLevel terra.NumberValue `hcl:"lt_rt_center_mix_level,attr"`
	// LtRtSurroundMixLevel: number, optional
	LtRtSurroundMixLevel terra.NumberValue `hcl:"lt_rt_surround_mix_level,attr"`
	// MetadataControl: string, optional
	MetadataControl terra.StringValue `hcl:"metadata_control,attr"`
	// PassthroughControl: string, optional
	PassthroughControl terra.StringValue `hcl:"passthrough_control,attr"`
	// PhaseControl: string, optional
	PhaseControl terra.StringValue `hcl:"phase_control,attr"`
	// StereoDownmix: string, optional
	StereoDownmix terra.StringValue `hcl:"stereo_downmix,attr"`
	// SurroundExMode: string, optional
	SurroundExMode terra.StringValue `hcl:"surround_ex_mode,attr"`
	// SurroundMode: string, optional
	SurroundMode terra.StringValue `hcl:"surround_mode,attr"`
}

type Mp2Settings struct {
	// Bitrate: number, optional
	Bitrate terra.NumberValue `hcl:"bitrate,attr"`
	// CodingMode: string, optional
	CodingMode terra.StringValue `hcl:"coding_mode,attr"`
	// SampleRate: number, optional
	SampleRate terra.NumberValue `hcl:"sample_rate,attr"`
}

type PassThroughSettings struct{}

type WavSettings struct {
	// BitDepth: number, optional
	BitDepth terra.NumberValue `hcl:"bit_depth,attr"`
	// CodingMode: string, optional
	CodingMode terra.StringValue `hcl:"coding_mode,attr"`
	// SampleRate: number, optional
	SampleRate terra.NumberValue `hcl:"sample_rate,attr"`
}

type RemixSettings struct {
	// ChannelsIn: number, optional
	ChannelsIn terra.NumberValue `hcl:"channels_in,attr"`
	// ChannelsOut: number, optional
	ChannelsOut terra.NumberValue `hcl:"channels_out,attr"`
	// ChannelMappings: min=1
	ChannelMappings []ChannelMappings `hcl:"channel_mappings,block" validate:"min=1"`
}

type ChannelMappings struct {
	// OutputChannel: number, required
	OutputChannel terra.NumberValue `hcl:"output_channel,attr" validate:"required"`
	// InputChannelLevels: min=1
	InputChannelLevels []InputChannelLevels `hcl:"input_channel_levels,block" validate:"min=1"`
}

type InputChannelLevels struct {
	// Gain: number, required
	Gain terra.NumberValue `hcl:"gain,attr" validate:"required"`
	// InputChannel: number, required
	InputChannel terra.NumberValue `hcl:"input_channel,attr" validate:"required"`
}

type AvailBlanking struct {
	// State: string, optional
	State terra.StringValue `hcl:"state,attr"`
	// AvailBlankingImage: optional
	AvailBlankingImage *AvailBlankingImage `hcl:"avail_blanking_image,block"`
}

type AvailBlankingImage struct {
	// PasswordParam: string, optional
	PasswordParam terra.StringValue `hcl:"password_param,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type OutputGroups struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// OutputGroupSettings: required
	OutputGroupSettings *OutputGroupSettings `hcl:"output_group_settings,block" validate:"required"`
	// Outputs: min=1
	Outputs []Outputs `hcl:"outputs,block" validate:"min=1"`
}

type OutputGroupSettings struct {
	// ArchiveGroupSettings: min=0
	ArchiveGroupSettings []ArchiveGroupSettings `hcl:"archive_group_settings,block" validate:"min=0"`
	// FrameCaptureGroupSettings: optional
	FrameCaptureGroupSettings *FrameCaptureGroupSettings `hcl:"frame_capture_group_settings,block"`
	// HlsGroupSettings: optional
	HlsGroupSettings *HlsGroupSettings `hcl:"hls_group_settings,block"`
	// MediaPackageGroupSettings: optional
	MediaPackageGroupSettings *MediaPackageGroupSettings `hcl:"media_package_group_settings,block"`
	// MsSmoothGroupSettings: optional
	MsSmoothGroupSettings *MsSmoothGroupSettings `hcl:"ms_smooth_group_settings,block"`
	// MultiplexGroupSettings: optional
	MultiplexGroupSettings *MultiplexGroupSettings `hcl:"multiplex_group_settings,block"`
	// RtmpGroupSettings: optional
	RtmpGroupSettings *RtmpGroupSettings `hcl:"rtmp_group_settings,block"`
	// UdpGroupSettings: optional
	UdpGroupSettings *UdpGroupSettings `hcl:"udp_group_settings,block"`
}

type ArchiveGroupSettings struct {
	// RolloverInterval: number, optional
	RolloverInterval terra.NumberValue `hcl:"rollover_interval,attr"`
	// ArchiveCdnSettings: optional
	ArchiveCdnSettings *ArchiveCdnSettings `hcl:"archive_cdn_settings,block"`
	// ArchiveGroupSettingsDestination: required
	Destination *ArchiveGroupSettingsDestination `hcl:"destination,block" validate:"required"`
}

type ArchiveCdnSettings struct {
	// ArchiveS3Settings: optional
	ArchiveS3Settings *ArchiveS3Settings `hcl:"archive_s3_settings,block"`
}

type ArchiveS3Settings struct {
	// CannedAcl: string, optional
	CannedAcl terra.StringValue `hcl:"canned_acl,attr"`
}

type ArchiveGroupSettingsDestination struct {
	// DestinationRefId: string, required
	DestinationRefId terra.StringValue `hcl:"destination_ref_id,attr" validate:"required"`
}

type FrameCaptureGroupSettings struct {
	// FrameCaptureGroupSettingsDestination: required
	Destination *FrameCaptureGroupSettingsDestination `hcl:"destination,block" validate:"required"`
	// FrameCaptureCdnSettings: optional
	FrameCaptureCdnSettings *FrameCaptureCdnSettings `hcl:"frame_capture_cdn_settings,block"`
}

type FrameCaptureGroupSettingsDestination struct {
	// DestinationRefId: string, required
	DestinationRefId terra.StringValue `hcl:"destination_ref_id,attr" validate:"required"`
}

type FrameCaptureCdnSettings struct {
	// FrameCaptureS3Settings: optional
	FrameCaptureS3Settings *FrameCaptureS3Settings `hcl:"frame_capture_s3_settings,block"`
}

type FrameCaptureS3Settings struct {
	// CannedAcl: string, optional
	CannedAcl terra.StringValue `hcl:"canned_acl,attr"`
}

type HlsGroupSettings struct {
	// AdMarkers: list of string, optional
	AdMarkers terra.ListValue[terra.StringValue] `hcl:"ad_markers,attr"`
	// BaseUrlContent: string, optional
	BaseUrlContent terra.StringValue `hcl:"base_url_content,attr"`
	// BaseUrlContent1: string, optional
	BaseUrlContent1 terra.StringValue `hcl:"base_url_content1,attr"`
	// BaseUrlManifest: string, optional
	BaseUrlManifest terra.StringValue `hcl:"base_url_manifest,attr"`
	// BaseUrlManifest1: string, optional
	BaseUrlManifest1 terra.StringValue `hcl:"base_url_manifest1,attr"`
	// CaptionLanguageSetting: string, optional
	CaptionLanguageSetting terra.StringValue `hcl:"caption_language_setting,attr"`
	// ClientCache: string, optional
	ClientCache terra.StringValue `hcl:"client_cache,attr"`
	// CodecSpecification: string, optional
	CodecSpecification terra.StringValue `hcl:"codec_specification,attr"`
	// ConstantIv: string, optional
	ConstantIv terra.StringValue `hcl:"constant_iv,attr"`
	// DirectoryStructure: string, optional
	DirectoryStructure terra.StringValue `hcl:"directory_structure,attr"`
	// DiscontinuityTags: string, optional
	DiscontinuityTags terra.StringValue `hcl:"discontinuity_tags,attr"`
	// EncryptionType: string, optional
	EncryptionType terra.StringValue `hcl:"encryption_type,attr"`
	// HlsId3SegmentTagging: string, optional
	HlsId3SegmentTagging terra.StringValue `hcl:"hls_id3_segment_tagging,attr"`
	// IframeOnlyPlaylists: string, optional
	IframeOnlyPlaylists terra.StringValue `hcl:"iframe_only_playlists,attr"`
	// IncompleteSegmentBehavior: string, optional
	IncompleteSegmentBehavior terra.StringValue `hcl:"incomplete_segment_behavior,attr"`
	// IndexNSegments: number, optional
	IndexNSegments terra.NumberValue `hcl:"index_n_segments,attr"`
	// InputLossAction: string, optional
	InputLossAction terra.StringValue `hcl:"input_loss_action,attr"`
	// IvInManifest: string, optional
	IvInManifest terra.StringValue `hcl:"iv_in_manifest,attr"`
	// IvSource: string, optional
	IvSource terra.StringValue `hcl:"iv_source,attr"`
	// KeepSegments: number, optional
	KeepSegments terra.NumberValue `hcl:"keep_segments,attr"`
	// KeyFormat: string, optional
	KeyFormat terra.StringValue `hcl:"key_format,attr"`
	// KeyFormatVersions: string, optional
	KeyFormatVersions terra.StringValue `hcl:"key_format_versions,attr"`
	// ManifestCompression: string, optional
	ManifestCompression terra.StringValue `hcl:"manifest_compression,attr"`
	// ManifestDurationFormat: string, optional
	ManifestDurationFormat terra.StringValue `hcl:"manifest_duration_format,attr"`
	// MinSegmentLength: number, optional
	MinSegmentLength terra.NumberValue `hcl:"min_segment_length,attr"`
	// Mode: string, optional
	Mode terra.StringValue `hcl:"mode,attr"`
	// OutputSelection: string, optional
	OutputSelection terra.StringValue `hcl:"output_selection,attr"`
	// ProgramDateTime: string, optional
	ProgramDateTime terra.StringValue `hcl:"program_date_time,attr"`
	// ProgramDateTimeClock: string, optional
	ProgramDateTimeClock terra.StringValue `hcl:"program_date_time_clock,attr"`
	// ProgramDateTimePeriod: number, optional
	ProgramDateTimePeriod terra.NumberValue `hcl:"program_date_time_period,attr"`
	// RedundantManifest: string, optional
	RedundantManifest terra.StringValue `hcl:"redundant_manifest,attr"`
	// SegmentLength: number, optional
	SegmentLength terra.NumberValue `hcl:"segment_length,attr"`
	// SegmentsPerSubdirectory: number, optional
	SegmentsPerSubdirectory terra.NumberValue `hcl:"segments_per_subdirectory,attr"`
	// StreamInfResolution: string, optional
	StreamInfResolution terra.StringValue `hcl:"stream_inf_resolution,attr"`
	// TimedMetadataId3Frame: string, optional
	TimedMetadataId3Frame terra.StringValue `hcl:"timed_metadata_id3_frame,attr"`
	// TimedMetadataId3Period: number, optional
	TimedMetadataId3Period terra.NumberValue `hcl:"timed_metadata_id3_period,attr"`
	// TimestampDeltaMilliseconds: number, optional
	TimestampDeltaMilliseconds terra.NumberValue `hcl:"timestamp_delta_milliseconds,attr"`
	// TsFileMode: string, optional
	TsFileMode terra.StringValue `hcl:"ts_file_mode,attr"`
	// CaptionLanguageMappings: min=0,max=4
	CaptionLanguageMappings []CaptionLanguageMappings `hcl:"caption_language_mappings,block" validate:"min=0,max=4"`
	// HlsGroupSettingsDestination: required
	Destination *HlsGroupSettingsDestination `hcl:"destination,block" validate:"required"`
	// HlsCdnSettings: min=0
	HlsCdnSettings []HlsCdnSettings `hcl:"hls_cdn_settings,block" validate:"min=0"`
	// KeyProviderSettings: optional
	KeyProviderSettings *KeyProviderSettings `hcl:"key_provider_settings,block"`
}

type CaptionLanguageMappings struct {
	// CaptionChannel: number, required
	CaptionChannel terra.NumberValue `hcl:"caption_channel,attr" validate:"required"`
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
	// LanguageDescription: string, required
	LanguageDescription terra.StringValue `hcl:"language_description,attr" validate:"required"`
}

type HlsGroupSettingsDestination struct {
	// DestinationRefId: string, required
	DestinationRefId terra.StringValue `hcl:"destination_ref_id,attr" validate:"required"`
}

type HlsCdnSettings struct {
	// HlsAkamaiSettings: optional
	HlsAkamaiSettings *HlsAkamaiSettings `hcl:"hls_akamai_settings,block"`
	// HlsBasicPutSettings: optional
	HlsBasicPutSettings *HlsBasicPutSettings `hcl:"hls_basic_put_settings,block"`
	// HlsMediaStoreSettings: optional
	HlsMediaStoreSettings *HlsMediaStoreSettings `hcl:"hls_media_store_settings,block"`
	// HlsS3Settings: optional
	HlsS3Settings *HlsS3Settings `hcl:"hls_s3_settings,block"`
	// HlsWebdavSettings: optional
	HlsWebdavSettings *HlsWebdavSettings `hcl:"hls_webdav_settings,block"`
}

type HlsAkamaiSettings struct {
	// ConnectionRetryInterval: number, optional
	ConnectionRetryInterval terra.NumberValue `hcl:"connection_retry_interval,attr"`
	// FilecacheDuration: number, optional
	FilecacheDuration terra.NumberValue `hcl:"filecache_duration,attr"`
	// HttpTransferMode: string, optional
	HttpTransferMode terra.StringValue `hcl:"http_transfer_mode,attr"`
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// RestartDelay: number, optional
	RestartDelay terra.NumberValue `hcl:"restart_delay,attr"`
	// Salt: string, optional
	Salt terra.StringValue `hcl:"salt,attr"`
	// Token: string, optional
	Token terra.StringValue `hcl:"token,attr"`
}

type HlsBasicPutSettings struct {
	// ConnectionRetryInterval: number, optional
	ConnectionRetryInterval terra.NumberValue `hcl:"connection_retry_interval,attr"`
	// FilecacheDuration: number, optional
	FilecacheDuration terra.NumberValue `hcl:"filecache_duration,attr"`
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// RestartDelay: number, optional
	RestartDelay terra.NumberValue `hcl:"restart_delay,attr"`
}

type HlsMediaStoreSettings struct {
	// ConnectionRetryInterval: number, optional
	ConnectionRetryInterval terra.NumberValue `hcl:"connection_retry_interval,attr"`
	// FilecacheDuration: number, optional
	FilecacheDuration terra.NumberValue `hcl:"filecache_duration,attr"`
	// MediaStoreStorageClass: string, optional
	MediaStoreStorageClass terra.StringValue `hcl:"media_store_storage_class,attr"`
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// RestartDelay: number, optional
	RestartDelay terra.NumberValue `hcl:"restart_delay,attr"`
}

type HlsS3Settings struct {
	// CannedAcl: string, optional
	CannedAcl terra.StringValue `hcl:"canned_acl,attr"`
}

type HlsWebdavSettings struct {
	// ConnectionRetryInterval: number, optional
	ConnectionRetryInterval terra.NumberValue `hcl:"connection_retry_interval,attr"`
	// FilecacheDuration: number, optional
	FilecacheDuration terra.NumberValue `hcl:"filecache_duration,attr"`
	// HttpTransferMode: string, optional
	HttpTransferMode terra.StringValue `hcl:"http_transfer_mode,attr"`
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// RestartDelay: number, optional
	RestartDelay terra.NumberValue `hcl:"restart_delay,attr"`
}

type KeyProviderSettings struct {
	// StaticKeySettings: min=0
	StaticKeySettings []StaticKeySettings `hcl:"static_key_settings,block" validate:"min=0"`
}

type StaticKeySettings struct {
	// StaticKeyValue: string, required
	StaticKeyValue terra.StringValue `hcl:"static_key_value,attr" validate:"required"`
	// KeyProviderServer: optional
	KeyProviderServer *KeyProviderServer `hcl:"key_provider_server,block"`
}

type KeyProviderServer struct {
	// PasswordParam: string, optional
	PasswordParam terra.StringValue `hcl:"password_param,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type MediaPackageGroupSettings struct {
	// MediaPackageGroupSettingsDestination: required
	Destination *MediaPackageGroupSettingsDestination `hcl:"destination,block" validate:"required"`
}

type MediaPackageGroupSettingsDestination struct {
	// DestinationRefId: string, required
	DestinationRefId terra.StringValue `hcl:"destination_ref_id,attr" validate:"required"`
}

type MsSmoothGroupSettings struct {
	// AcquisitionPointId: string, optional
	AcquisitionPointId terra.StringValue `hcl:"acquisition_point_id,attr"`
	// AudioOnlyTimecodeControl: string, optional
	AudioOnlyTimecodeControl terra.StringValue `hcl:"audio_only_timecode_control,attr"`
	// CertificateMode: string, optional
	CertificateMode terra.StringValue `hcl:"certificate_mode,attr"`
	// ConnectionRetryInterval: number, optional
	ConnectionRetryInterval terra.NumberValue `hcl:"connection_retry_interval,attr"`
	// EventId: string, optional
	EventId terra.StringValue `hcl:"event_id,attr"`
	// EventIdMode: string, optional
	EventIdMode terra.StringValue `hcl:"event_id_mode,attr"`
	// EventStopBehavior: string, optional
	EventStopBehavior terra.StringValue `hcl:"event_stop_behavior,attr"`
	// FilecacheDuration: number, optional
	FilecacheDuration terra.NumberValue `hcl:"filecache_duration,attr"`
	// FragmentLength: number, optional
	FragmentLength terra.NumberValue `hcl:"fragment_length,attr"`
	// InputLossAction: string, optional
	InputLossAction terra.StringValue `hcl:"input_loss_action,attr"`
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// RestartDelay: number, optional
	RestartDelay terra.NumberValue `hcl:"restart_delay,attr"`
	// SegmentationMode: string, optional
	SegmentationMode terra.StringValue `hcl:"segmentation_mode,attr"`
	// SendDelayMs: number, optional
	SendDelayMs terra.NumberValue `hcl:"send_delay_ms,attr"`
	// SparseTrackType: string, optional
	SparseTrackType terra.StringValue `hcl:"sparse_track_type,attr"`
	// StreamManifestBehavior: string, optional
	StreamManifestBehavior terra.StringValue `hcl:"stream_manifest_behavior,attr"`
	// TimestampOffset: string, optional
	TimestampOffset terra.StringValue `hcl:"timestamp_offset,attr"`
	// TimestampOffsetMode: string, optional
	TimestampOffsetMode terra.StringValue `hcl:"timestamp_offset_mode,attr"`
	// MsSmoothGroupSettingsDestination: required
	Destination *MsSmoothGroupSettingsDestination `hcl:"destination,block" validate:"required"`
}

type MsSmoothGroupSettingsDestination struct {
	// DestinationRefId: string, required
	DestinationRefId terra.StringValue `hcl:"destination_ref_id,attr" validate:"required"`
}

type MultiplexGroupSettings struct{}

type RtmpGroupSettings struct {
	// AdMarkers: list of string, optional
	AdMarkers terra.ListValue[terra.StringValue] `hcl:"ad_markers,attr"`
	// AuthenticationScheme: string, optional
	AuthenticationScheme terra.StringValue `hcl:"authentication_scheme,attr"`
	// CacheFullBehavior: string, optional
	CacheFullBehavior terra.StringValue `hcl:"cache_full_behavior,attr"`
	// CacheLength: number, optional
	CacheLength terra.NumberValue `hcl:"cache_length,attr"`
	// CaptionData: string, optional
	CaptionData terra.StringValue `hcl:"caption_data,attr"`
	// InputLossAction: string, optional
	InputLossAction terra.StringValue `hcl:"input_loss_action,attr"`
	// RestartDelay: number, optional
	RestartDelay terra.NumberValue `hcl:"restart_delay,attr"`
}

type UdpGroupSettings struct {
	// InputLossAction: string, optional
	InputLossAction terra.StringValue `hcl:"input_loss_action,attr"`
	// TimedMetadataId3Frame: string, optional
	TimedMetadataId3Frame terra.StringValue `hcl:"timed_metadata_id3_frame,attr"`
	// TimedMetadataId3Period: number, optional
	TimedMetadataId3Period terra.NumberValue `hcl:"timed_metadata_id3_period,attr"`
}

type Outputs struct {
	// AudioDescriptionNames: set of string, optional
	AudioDescriptionNames terra.SetValue[terra.StringValue] `hcl:"audio_description_names,attr"`
	// CaptionDescriptionNames: set of string, optional
	CaptionDescriptionNames terra.SetValue[terra.StringValue] `hcl:"caption_description_names,attr"`
	// OutputName: string, optional
	OutputName terra.StringValue `hcl:"output_name,attr"`
	// VideoDescriptionName: string, optional
	VideoDescriptionName terra.StringValue `hcl:"video_description_name,attr"`
	// OutputSettings: required
	OutputSettings *OutputSettings `hcl:"output_settings,block" validate:"required"`
}

type OutputSettings struct {
	// ArchiveOutputSettings: optional
	ArchiveOutputSettings *ArchiveOutputSettings `hcl:"archive_output_settings,block"`
	// FrameCaptureOutputSettings: optional
	FrameCaptureOutputSettings *FrameCaptureOutputSettings `hcl:"frame_capture_output_settings,block"`
	// HlsOutputSettings: optional
	HlsOutputSettings *HlsOutputSettings `hcl:"hls_output_settings,block"`
	// MediaPackageOutputSettings: optional
	MediaPackageOutputSettings *MediaPackageOutputSettings `hcl:"media_package_output_settings,block"`
	// MsSmoothOutputSettings: optional
	MsSmoothOutputSettings *MsSmoothOutputSettings `hcl:"ms_smooth_output_settings,block"`
	// MultiplexOutputSettings: optional
	MultiplexOutputSettings *MultiplexOutputSettings `hcl:"multiplex_output_settings,block"`
	// RtmpOutputSettings: optional
	RtmpOutputSettings *RtmpOutputSettings `hcl:"rtmp_output_settings,block"`
	// UdpOutputSettings: optional
	UdpOutputSettings *UdpOutputSettings `hcl:"udp_output_settings,block"`
}

type ArchiveOutputSettings struct {
	// Extension: string, optional
	Extension terra.StringValue `hcl:"extension,attr"`
	// NameModifier: string, optional
	NameModifier terra.StringValue `hcl:"name_modifier,attr"`
	// ArchiveOutputSettingsContainerSettings: optional
	ContainerSettings *ArchiveOutputSettingsContainerSettings `hcl:"container_settings,block"`
}

type ArchiveOutputSettingsContainerSettings struct {
	// ArchiveOutputSettingsContainerSettingsM2TsSettings: optional
	M2TsSettings *ArchiveOutputSettingsContainerSettingsM2TsSettings `hcl:"m2ts_settings,block"`
	// RawSettings: optional
	RawSettings *RawSettings `hcl:"raw_settings,block"`
}

type ArchiveOutputSettingsContainerSettingsM2TsSettings struct {
	// AbsentInputAudioBehavior: string, optional
	AbsentInputAudioBehavior terra.StringValue `hcl:"absent_input_audio_behavior,attr"`
	// Arib: string, optional
	Arib terra.StringValue `hcl:"arib,attr"`
	// AribCaptionsPid: string, optional
	AribCaptionsPid terra.StringValue `hcl:"arib_captions_pid,attr"`
	// AribCaptionsPidControl: string, optional
	AribCaptionsPidControl terra.StringValue `hcl:"arib_captions_pid_control,attr"`
	// AudioBufferModel: string, optional
	AudioBufferModel terra.StringValue `hcl:"audio_buffer_model,attr"`
	// AudioFramesPerPes: number, optional
	AudioFramesPerPes terra.NumberValue `hcl:"audio_frames_per_pes,attr"`
	// AudioPids: string, optional
	AudioPids terra.StringValue `hcl:"audio_pids,attr"`
	// AudioStreamType: string, optional
	AudioStreamType terra.StringValue `hcl:"audio_stream_type,attr"`
	// Bitrate: number, optional
	Bitrate terra.NumberValue `hcl:"bitrate,attr"`
	// BufferModel: string, optional
	BufferModel terra.StringValue `hcl:"buffer_model,attr"`
	// CcDescriptor: string, optional
	CcDescriptor terra.StringValue `hcl:"cc_descriptor,attr"`
	// DvbSubPids: string, optional
	DvbSubPids terra.StringValue `hcl:"dvb_sub_pids,attr"`
	// DvbTeletextPid: string, optional
	DvbTeletextPid terra.StringValue `hcl:"dvb_teletext_pid,attr"`
	// Ebif: string, optional
	Ebif terra.StringValue `hcl:"ebif,attr"`
	// EbpAudioInterval: string, optional
	EbpAudioInterval terra.StringValue `hcl:"ebp_audio_interval,attr"`
	// EbpLookaheadMs: number, optional
	EbpLookaheadMs terra.NumberValue `hcl:"ebp_lookahead_ms,attr"`
	// EbpPlacement: string, optional
	EbpPlacement terra.StringValue `hcl:"ebp_placement,attr"`
	// EcmPid: string, optional
	EcmPid terra.StringValue `hcl:"ecm_pid,attr"`
	// EsRateInPes: string, optional
	EsRateInPes terra.StringValue `hcl:"es_rate_in_pes,attr"`
	// EtvPlatformPid: string, optional
	EtvPlatformPid terra.StringValue `hcl:"etv_platform_pid,attr"`
	// EtvSignalPid: string, optional
	EtvSignalPid terra.StringValue `hcl:"etv_signal_pid,attr"`
	// FragmentTime: number, optional
	FragmentTime terra.NumberValue `hcl:"fragment_time,attr"`
	// Klv: string, optional
	Klv terra.StringValue `hcl:"klv,attr"`
	// KlvDataPids: string, optional
	KlvDataPids terra.StringValue `hcl:"klv_data_pids,attr"`
	// NielsenId3Behavior: string, optional
	NielsenId3Behavior terra.StringValue `hcl:"nielsen_id3_behavior,attr"`
	// NullPacketBitrate: number, optional
	NullPacketBitrate terra.NumberValue `hcl:"null_packet_bitrate,attr"`
	// PatInterval: number, optional
	PatInterval terra.NumberValue `hcl:"pat_interval,attr"`
	// PcrControl: string, optional
	PcrControl terra.StringValue `hcl:"pcr_control,attr"`
	// PcrPeriod: number, optional
	PcrPeriod terra.NumberValue `hcl:"pcr_period,attr"`
	// PcrPid: string, optional
	PcrPid terra.StringValue `hcl:"pcr_pid,attr"`
	// PmtInterval: number, optional
	PmtInterval terra.NumberValue `hcl:"pmt_interval,attr"`
	// PmtPid: string, optional
	PmtPid terra.StringValue `hcl:"pmt_pid,attr"`
	// ProgramNum: number, optional
	ProgramNum terra.NumberValue `hcl:"program_num,attr"`
	// RateMode: string, optional
	RateMode terra.StringValue `hcl:"rate_mode,attr"`
	// Scte27Pids: string, optional
	Scte27Pids terra.StringValue `hcl:"scte27_pids,attr"`
	// Scte35Control: string, optional
	Scte35Control terra.StringValue `hcl:"scte35_control,attr"`
	// Scte35Pid: string, optional
	Scte35Pid terra.StringValue `hcl:"scte35_pid,attr"`
	// SegmentationMarkers: string, optional
	SegmentationMarkers terra.StringValue `hcl:"segmentation_markers,attr"`
	// SegmentationStyle: string, optional
	SegmentationStyle terra.StringValue `hcl:"segmentation_style,attr"`
	// SegmentationTime: number, optional
	SegmentationTime terra.NumberValue `hcl:"segmentation_time,attr"`
	// TimedMetadataBehavior: string, optional
	TimedMetadataBehavior terra.StringValue `hcl:"timed_metadata_behavior,attr"`
	// TimedMetadataPid: string, optional
	TimedMetadataPid terra.StringValue `hcl:"timed_metadata_pid,attr"`
	// TransportStreamId: number, optional
	TransportStreamId terra.NumberValue `hcl:"transport_stream_id,attr"`
	// VideoPid: string, optional
	VideoPid terra.StringValue `hcl:"video_pid,attr"`
	// ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings: optional
	DvbNitSettings *ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings `hcl:"dvb_nit_settings,block"`
	// ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings: optional
	DvbSdtSettings *ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings `hcl:"dvb_sdt_settings,block"`
	// ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings: optional
	DvbTdtSettings *ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings `hcl:"dvb_tdt_settings,block"`
}

type ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings struct {
	// NetworkId: number, required
	NetworkId terra.NumberValue `hcl:"network_id,attr" validate:"required"`
	// NetworkName: string, required
	NetworkName terra.StringValue `hcl:"network_name,attr" validate:"required"`
	// RepInterval: number, optional
	RepInterval terra.NumberValue `hcl:"rep_interval,attr"`
}

type ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings struct {
	// OutputSdt: string, optional
	OutputSdt terra.StringValue `hcl:"output_sdt,attr"`
	// RepInterval: number, optional
	RepInterval terra.NumberValue `hcl:"rep_interval,attr"`
	// ServiceName: string, optional
	ServiceName terra.StringValue `hcl:"service_name,attr"`
	// ServiceProviderName: string, optional
	ServiceProviderName terra.StringValue `hcl:"service_provider_name,attr"`
}

type ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings struct {
	// RepInterval: number, optional
	RepInterval terra.NumberValue `hcl:"rep_interval,attr"`
}

type RawSettings struct{}

type FrameCaptureOutputSettings struct {
	// NameModifier: string, optional
	NameModifier terra.StringValue `hcl:"name_modifier,attr"`
}

type HlsOutputSettings struct {
	// H265PackagingType: string, optional
	H265PackagingType terra.StringValue `hcl:"h265_packaging_type,attr"`
	// NameModifier: string, optional
	NameModifier terra.StringValue `hcl:"name_modifier,attr"`
	// SegmentModifier: string, optional
	SegmentModifier terra.StringValue `hcl:"segment_modifier,attr"`
	// HlsSettings: required
	HlsSettings *HlsSettings `hcl:"hls_settings,block" validate:"required"`
}

type HlsSettings struct {
	// AudioOnlyHlsSettings: optional
	AudioOnlyHlsSettings *AudioOnlyHlsSettings `hcl:"audio_only_hls_settings,block"`
	// Fmp4HlsSettings: optional
	Fmp4HlsSettings *Fmp4HlsSettings `hcl:"fmp4_hls_settings,block"`
	// FrameCaptureHlsSettings: optional
	FrameCaptureHlsSettings *FrameCaptureHlsSettings `hcl:"frame_capture_hls_settings,block"`
	// StandardHlsSettings: optional
	StandardHlsSettings *StandardHlsSettings `hcl:"standard_hls_settings,block"`
}

type AudioOnlyHlsSettings struct {
	// AudioGroupId: string, optional
	AudioGroupId terra.StringValue `hcl:"audio_group_id,attr"`
	// AudioTrackType: string, optional
	AudioTrackType terra.StringValue `hcl:"audio_track_type,attr"`
	// SegmentType: string, optional
	SegmentType terra.StringValue `hcl:"segment_type,attr"`
	// AudioOnlyImage: optional
	AudioOnlyImage *AudioOnlyImage `hcl:"audio_only_image,block"`
}

type AudioOnlyImage struct {
	// PasswordParam: string, optional
	PasswordParam terra.StringValue `hcl:"password_param,attr"`
	// Uri: string, required
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
	// Username: string, optional
	Username terra.StringValue `hcl:"username,attr"`
}

type Fmp4HlsSettings struct {
	// AudioRenditionSets: string, optional
	AudioRenditionSets terra.StringValue `hcl:"audio_rendition_sets,attr"`
	// NielsenId3Behavior: string, optional
	NielsenId3Behavior terra.StringValue `hcl:"nielsen_id3_behavior,attr"`
	// TimedMetadataBehavior: string, optional
	TimedMetadataBehavior terra.StringValue `hcl:"timed_metadata_behavior,attr"`
}

type FrameCaptureHlsSettings struct{}

type StandardHlsSettings struct {
	// AudioRenditionSets: string, optional
	AudioRenditionSets terra.StringValue `hcl:"audio_rendition_sets,attr"`
	// M3U8Settings: required
	M3U8Settings *M3U8Settings `hcl:"m3u8_settings,block" validate:"required"`
}

type M3U8Settings struct {
	// AudioFramesPerPes: number, optional
	AudioFramesPerPes terra.NumberValue `hcl:"audio_frames_per_pes,attr"`
	// AudioPids: string, optional
	AudioPids terra.StringValue `hcl:"audio_pids,attr"`
	// EcmPid: string, optional
	EcmPid terra.StringValue `hcl:"ecm_pid,attr"`
	// NielsenId3Behavior: string, optional
	NielsenId3Behavior terra.StringValue `hcl:"nielsen_id3_behavior,attr"`
	// PatInterval: number, optional
	PatInterval terra.NumberValue `hcl:"pat_interval,attr"`
	// PcrControl: string, optional
	PcrControl terra.StringValue `hcl:"pcr_control,attr"`
	// PcrPeriod: number, optional
	PcrPeriod terra.NumberValue `hcl:"pcr_period,attr"`
	// PcrPid: string, optional
	PcrPid terra.StringValue `hcl:"pcr_pid,attr"`
	// PmtInterval: number, optional
	PmtInterval terra.NumberValue `hcl:"pmt_interval,attr"`
	// PmtPid: string, optional
	PmtPid terra.StringValue `hcl:"pmt_pid,attr"`
	// ProgramNum: number, optional
	ProgramNum terra.NumberValue `hcl:"program_num,attr"`
	// Scte35Behavior: string, optional
	Scte35Behavior terra.StringValue `hcl:"scte35_behavior,attr"`
	// Scte35Pid: string, optional
	Scte35Pid terra.StringValue `hcl:"scte35_pid,attr"`
	// TimedMetadataBehavior: string, optional
	TimedMetadataBehavior terra.StringValue `hcl:"timed_metadata_behavior,attr"`
	// TimedMetadataPid: string, optional
	TimedMetadataPid terra.StringValue `hcl:"timed_metadata_pid,attr"`
	// TransportStreamId: number, optional
	TransportStreamId terra.NumberValue `hcl:"transport_stream_id,attr"`
	// VideoPid: string, optional
	VideoPid terra.StringValue `hcl:"video_pid,attr"`
}

type MediaPackageOutputSettings struct{}

type MsSmoothOutputSettings struct {
	// H265PackagingType: string, optional
	H265PackagingType terra.StringValue `hcl:"h265_packaging_type,attr"`
	// NameModifier: string, optional
	NameModifier terra.StringValue `hcl:"name_modifier,attr"`
}

type MultiplexOutputSettings struct {
	// MultiplexOutputSettingsDestination: required
	Destination *MultiplexOutputSettingsDestination `hcl:"destination,block" validate:"required"`
}

type MultiplexOutputSettingsDestination struct {
	// DestinationRefId: string, required
	DestinationRefId terra.StringValue `hcl:"destination_ref_id,attr" validate:"required"`
}

type RtmpOutputSettings struct {
	// CertficateMode: string, optional
	CertficateMode terra.StringValue `hcl:"certficate_mode,attr"`
	// ConnectionRetryInterval: number, optional
	ConnectionRetryInterval terra.NumberValue `hcl:"connection_retry_interval,attr"`
	// NumRetries: number, optional
	NumRetries terra.NumberValue `hcl:"num_retries,attr"`
	// RtmpOutputSettingsDestination: required
	Destination *RtmpOutputSettingsDestination `hcl:"destination,block" validate:"required"`
}

type RtmpOutputSettingsDestination struct {
	// DestinationRefId: string, required
	DestinationRefId terra.StringValue `hcl:"destination_ref_id,attr" validate:"required"`
}

type UdpOutputSettings struct {
	// BufferMsec: number, optional
	BufferMsec terra.NumberValue `hcl:"buffer_msec,attr"`
	// UdpOutputSettingsContainerSettings: required
	ContainerSettings *UdpOutputSettingsContainerSettings `hcl:"container_settings,block" validate:"required"`
	// UdpOutputSettingsDestination: required
	Destination *UdpOutputSettingsDestination `hcl:"destination,block" validate:"required"`
	// FecOutputSettings: optional
	FecOutputSettings *FecOutputSettings `hcl:"fec_output_settings,block"`
}

type UdpOutputSettingsContainerSettings struct {
	// UdpOutputSettingsContainerSettingsM2TsSettings: optional
	M2TsSettings *UdpOutputSettingsContainerSettingsM2TsSettings `hcl:"m2ts_settings,block"`
}

type UdpOutputSettingsContainerSettingsM2TsSettings struct {
	// AbsentInputAudioBehavior: string, optional
	AbsentInputAudioBehavior terra.StringValue `hcl:"absent_input_audio_behavior,attr"`
	// Arib: string, optional
	Arib terra.StringValue `hcl:"arib,attr"`
	// AribCaptionsPid: string, optional
	AribCaptionsPid terra.StringValue `hcl:"arib_captions_pid,attr"`
	// AribCaptionsPidControl: string, optional
	AribCaptionsPidControl terra.StringValue `hcl:"arib_captions_pid_control,attr"`
	// AudioBufferModel: string, optional
	AudioBufferModel terra.StringValue `hcl:"audio_buffer_model,attr"`
	// AudioFramesPerPes: number, optional
	AudioFramesPerPes terra.NumberValue `hcl:"audio_frames_per_pes,attr"`
	// AudioPids: string, optional
	AudioPids terra.StringValue `hcl:"audio_pids,attr"`
	// AudioStreamType: string, optional
	AudioStreamType terra.StringValue `hcl:"audio_stream_type,attr"`
	// Bitrate: number, optional
	Bitrate terra.NumberValue `hcl:"bitrate,attr"`
	// BufferModel: string, optional
	BufferModel terra.StringValue `hcl:"buffer_model,attr"`
	// CcDescriptor: string, optional
	CcDescriptor terra.StringValue `hcl:"cc_descriptor,attr"`
	// DvbSubPids: string, optional
	DvbSubPids terra.StringValue `hcl:"dvb_sub_pids,attr"`
	// DvbTeletextPid: string, optional
	DvbTeletextPid terra.StringValue `hcl:"dvb_teletext_pid,attr"`
	// Ebif: string, optional
	Ebif terra.StringValue `hcl:"ebif,attr"`
	// EbpAudioInterval: string, optional
	EbpAudioInterval terra.StringValue `hcl:"ebp_audio_interval,attr"`
	// EbpLookaheadMs: number, optional
	EbpLookaheadMs terra.NumberValue `hcl:"ebp_lookahead_ms,attr"`
	// EbpPlacement: string, optional
	EbpPlacement terra.StringValue `hcl:"ebp_placement,attr"`
	// EcmPid: string, optional
	EcmPid terra.StringValue `hcl:"ecm_pid,attr"`
	// EsRateInPes: string, optional
	EsRateInPes terra.StringValue `hcl:"es_rate_in_pes,attr"`
	// EtvPlatformPid: string, optional
	EtvPlatformPid terra.StringValue `hcl:"etv_platform_pid,attr"`
	// EtvSignalPid: string, optional
	EtvSignalPid terra.StringValue `hcl:"etv_signal_pid,attr"`
	// FragmentTime: number, optional
	FragmentTime terra.NumberValue `hcl:"fragment_time,attr"`
	// Klv: string, optional
	Klv terra.StringValue `hcl:"klv,attr"`
	// KlvDataPids: string, optional
	KlvDataPids terra.StringValue `hcl:"klv_data_pids,attr"`
	// NielsenId3Behavior: string, optional
	NielsenId3Behavior terra.StringValue `hcl:"nielsen_id3_behavior,attr"`
	// NullPacketBitrate: number, optional
	NullPacketBitrate terra.NumberValue `hcl:"null_packet_bitrate,attr"`
	// PatInterval: number, optional
	PatInterval terra.NumberValue `hcl:"pat_interval,attr"`
	// PcrControl: string, optional
	PcrControl terra.StringValue `hcl:"pcr_control,attr"`
	// PcrPeriod: number, optional
	PcrPeriod terra.NumberValue `hcl:"pcr_period,attr"`
	// PcrPid: string, optional
	PcrPid terra.StringValue `hcl:"pcr_pid,attr"`
	// PmtInterval: number, optional
	PmtInterval terra.NumberValue `hcl:"pmt_interval,attr"`
	// PmtPid: string, optional
	PmtPid terra.StringValue `hcl:"pmt_pid,attr"`
	// ProgramNum: number, optional
	ProgramNum terra.NumberValue `hcl:"program_num,attr"`
	// RateMode: string, optional
	RateMode terra.StringValue `hcl:"rate_mode,attr"`
	// Scte27Pids: string, optional
	Scte27Pids terra.StringValue `hcl:"scte27_pids,attr"`
	// Scte35Control: string, optional
	Scte35Control terra.StringValue `hcl:"scte35_control,attr"`
	// Scte35Pid: string, optional
	Scte35Pid terra.StringValue `hcl:"scte35_pid,attr"`
	// SegmentationMarkers: string, optional
	SegmentationMarkers terra.StringValue `hcl:"segmentation_markers,attr"`
	// SegmentationStyle: string, optional
	SegmentationStyle terra.StringValue `hcl:"segmentation_style,attr"`
	// SegmentationTime: number, optional
	SegmentationTime terra.NumberValue `hcl:"segmentation_time,attr"`
	// TimedMetadataBehavior: string, optional
	TimedMetadataBehavior terra.StringValue `hcl:"timed_metadata_behavior,attr"`
	// TimedMetadataPid: string, optional
	TimedMetadataPid terra.StringValue `hcl:"timed_metadata_pid,attr"`
	// TransportStreamId: number, optional
	TransportStreamId terra.NumberValue `hcl:"transport_stream_id,attr"`
	// VideoPid: string, optional
	VideoPid terra.StringValue `hcl:"video_pid,attr"`
	// UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings: optional
	DvbNitSettings *UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings `hcl:"dvb_nit_settings,block"`
	// UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings: optional
	DvbSdtSettings *UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings `hcl:"dvb_sdt_settings,block"`
	// UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings: optional
	DvbTdtSettings *UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings `hcl:"dvb_tdt_settings,block"`
}

type UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings struct {
	// NetworkId: number, required
	NetworkId terra.NumberValue `hcl:"network_id,attr" validate:"required"`
	// NetworkName: string, required
	NetworkName terra.StringValue `hcl:"network_name,attr" validate:"required"`
	// RepInterval: number, optional
	RepInterval terra.NumberValue `hcl:"rep_interval,attr"`
}

type UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings struct {
	// OutputSdt: string, optional
	OutputSdt terra.StringValue `hcl:"output_sdt,attr"`
	// RepInterval: number, optional
	RepInterval terra.NumberValue `hcl:"rep_interval,attr"`
	// ServiceName: string, optional
	ServiceName terra.StringValue `hcl:"service_name,attr"`
	// ServiceProviderName: string, optional
	ServiceProviderName terra.StringValue `hcl:"service_provider_name,attr"`
}

type UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings struct {
	// RepInterval: number, optional
	RepInterval terra.NumberValue `hcl:"rep_interval,attr"`
}

type UdpOutputSettingsDestination struct {
	// DestinationRefId: string, required
	DestinationRefId terra.StringValue `hcl:"destination_ref_id,attr" validate:"required"`
}

type FecOutputSettings struct {
	// ColumnDepth: number, optional
	ColumnDepth terra.NumberValue `hcl:"column_depth,attr"`
	// IncludeFec: string, optional
	IncludeFec terra.StringValue `hcl:"include_fec,attr"`
	// RowLength: number, optional
	RowLength terra.NumberValue `hcl:"row_length,attr"`
}

type TimecodeConfig struct {
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// SyncThreshold: number, optional
	SyncThreshold terra.NumberValue `hcl:"sync_threshold,attr"`
}

type VideoDescriptions struct {
	// Height: number, optional
	Height terra.NumberValue `hcl:"height,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RespondToAfd: string, optional
	RespondToAfd terra.StringValue `hcl:"respond_to_afd,attr"`
	// ScalingBehavior: string, optional
	ScalingBehavior terra.StringValue `hcl:"scaling_behavior,attr"`
	// Sharpness: number, optional
	Sharpness terra.NumberValue `hcl:"sharpness,attr"`
	// Width: number, optional
	Width terra.NumberValue `hcl:"width,attr"`
	// VideoDescriptionsCodecSettings: optional
	CodecSettings *VideoDescriptionsCodecSettings `hcl:"codec_settings,block"`
}

type VideoDescriptionsCodecSettings struct {
	// FrameCaptureSettings: optional
	FrameCaptureSettings *FrameCaptureSettings `hcl:"frame_capture_settings,block"`
	// H264Settings: optional
	H264Settings *H264Settings `hcl:"h264_settings,block"`
}

type FrameCaptureSettings struct {
	// CaptureInterval: number, optional
	CaptureInterval terra.NumberValue `hcl:"capture_interval,attr"`
	// CaptureIntervalUnits: string, optional
	CaptureIntervalUnits terra.StringValue `hcl:"capture_interval_units,attr"`
}

type H264Settings struct {
	// AdaptiveQuantization: string, optional
	AdaptiveQuantization terra.StringValue `hcl:"adaptive_quantization,attr"`
	// AfdSignaling: string, optional
	AfdSignaling terra.StringValue `hcl:"afd_signaling,attr"`
	// Bitrate: number, optional
	Bitrate terra.NumberValue `hcl:"bitrate,attr"`
	// BufFillPct: number, optional
	BufFillPct terra.NumberValue `hcl:"buf_fill_pct,attr"`
	// BufSize: number, optional
	BufSize terra.NumberValue `hcl:"buf_size,attr"`
	// ColorMetadata: string, optional
	ColorMetadata terra.StringValue `hcl:"color_metadata,attr"`
	// EntropyEncoding: string, optional
	EntropyEncoding terra.StringValue `hcl:"entropy_encoding,attr"`
	// FixedAfd: string, optional
	FixedAfd terra.StringValue `hcl:"fixed_afd,attr"`
	// FlickerAq: string, optional
	FlickerAq terra.StringValue `hcl:"flicker_aq,attr"`
	// ForceFieldPictures: string, optional
	ForceFieldPictures terra.StringValue `hcl:"force_field_pictures,attr"`
	// FramerateControl: string, optional
	FramerateControl terra.StringValue `hcl:"framerate_control,attr"`
	// FramerateDenominator: number, optional
	FramerateDenominator terra.NumberValue `hcl:"framerate_denominator,attr"`
	// FramerateNumerator: number, optional
	FramerateNumerator terra.NumberValue `hcl:"framerate_numerator,attr"`
	// GopBReference: string, optional
	GopBReference terra.StringValue `hcl:"gop_b_reference,attr"`
	// GopClosedCadence: number, optional
	GopClosedCadence terra.NumberValue `hcl:"gop_closed_cadence,attr"`
	// GopNumBFrames: number, optional
	GopNumBFrames terra.NumberValue `hcl:"gop_num_b_frames,attr"`
	// GopSize: number, optional
	GopSize terra.NumberValue `hcl:"gop_size,attr"`
	// GopSizeUnits: string, optional
	GopSizeUnits terra.StringValue `hcl:"gop_size_units,attr"`
	// Level: string, optional
	Level terra.StringValue `hcl:"level,attr"`
	// LookAheadRateControl: string, optional
	LookAheadRateControl terra.StringValue `hcl:"look_ahead_rate_control,attr"`
	// MaxBitrate: number, optional
	MaxBitrate terra.NumberValue `hcl:"max_bitrate,attr"`
	// MinIInterval: number, optional
	MinIInterval terra.NumberValue `hcl:"min_i_interval,attr"`
	// NumRefFrames: number, optional
	NumRefFrames terra.NumberValue `hcl:"num_ref_frames,attr"`
	// ParControl: string, optional
	ParControl terra.StringValue `hcl:"par_control,attr"`
	// ParDenominator: number, optional
	ParDenominator terra.NumberValue `hcl:"par_denominator,attr"`
	// ParNumerator: number, optional
	ParNumerator terra.NumberValue `hcl:"par_numerator,attr"`
	// Profile: string, optional
	Profile terra.StringValue `hcl:"profile,attr"`
	// QualityLevel: string, optional
	QualityLevel terra.StringValue `hcl:"quality_level,attr"`
	// QvbrQualityLevel: number, optional
	QvbrQualityLevel terra.NumberValue `hcl:"qvbr_quality_level,attr"`
	// RateControlMode: string, optional
	RateControlMode terra.StringValue `hcl:"rate_control_mode,attr"`
	// ScanType: string, optional
	ScanType terra.StringValue `hcl:"scan_type,attr"`
	// SceneChangeDetect: string, optional
	SceneChangeDetect terra.StringValue `hcl:"scene_change_detect,attr"`
	// Slices: number, optional
	Slices terra.NumberValue `hcl:"slices,attr"`
	// Softness: number, optional
	Softness terra.NumberValue `hcl:"softness,attr"`
	// SpatialAq: string, optional
	SpatialAq terra.StringValue `hcl:"spatial_aq,attr"`
	// SubgopLength: string, optional
	SubgopLength terra.StringValue `hcl:"subgop_length,attr"`
	// Syntax: string, optional
	Syntax terra.StringValue `hcl:"syntax,attr"`
	// TemporalAq: string, optional
	TemporalAq terra.StringValue `hcl:"temporal_aq,attr"`
	// TimecodeInsertion: string, optional
	TimecodeInsertion terra.StringValue `hcl:"timecode_insertion,attr"`
	// FilterSettings: optional
	FilterSettings *FilterSettings `hcl:"filter_settings,block"`
}

type FilterSettings struct {
	// TemporalFilterSettings: optional
	TemporalFilterSettings *TemporalFilterSettings `hcl:"temporal_filter_settings,block"`
}

type TemporalFilterSettings struct {
	// PostFilterSharpening: string, optional
	PostFilterSharpening terra.StringValue `hcl:"post_filter_sharpening,attr"`
	// Strength: string, optional
	Strength terra.StringValue `hcl:"strength,attr"`
}

type InputAttachments struct {
	// InputAttachmentName: string, required
	InputAttachmentName terra.StringValue `hcl:"input_attachment_name,attr" validate:"required"`
	// InputId: string, required
	InputId terra.StringValue `hcl:"input_id,attr" validate:"required"`
	// AutomaticInputFailoverSettings: optional
	AutomaticInputFailoverSettings *AutomaticInputFailoverSettings `hcl:"automatic_input_failover_settings,block"`
	// InputSettings: optional
	InputSettings *InputSettings `hcl:"input_settings,block"`
}

type AutomaticInputFailoverSettings struct {
	// ErrorClearTimeMsec: number, optional
	ErrorClearTimeMsec terra.NumberValue `hcl:"error_clear_time_msec,attr"`
	// InputPreference: string, optional
	InputPreference terra.StringValue `hcl:"input_preference,attr"`
	// SecondaryInputId: string, required
	SecondaryInputId terra.StringValue `hcl:"secondary_input_id,attr" validate:"required"`
	// FailoverCondition: min=0
	FailoverCondition []FailoverCondition `hcl:"failover_condition,block" validate:"min=0"`
}

type FailoverCondition struct {
	// FailoverConditionSettings: optional
	FailoverConditionSettings *FailoverConditionSettings `hcl:"failover_condition_settings,block"`
}

type FailoverConditionSettings struct {
	// AudioSilenceSettings: optional
	AudioSilenceSettings *AudioSilenceSettings `hcl:"audio_silence_settings,block"`
	// InputLossSettings: optional
	InputLossSettings *InputLossSettings `hcl:"input_loss_settings,block"`
	// VideoBlackSettings: optional
	VideoBlackSettings *VideoBlackSettings `hcl:"video_black_settings,block"`
}

type AudioSilenceSettings struct {
	// AudioSelectorName: string, required
	AudioSelectorName terra.StringValue `hcl:"audio_selector_name,attr" validate:"required"`
	// AudioSilenceThresholdMsec: number, optional
	AudioSilenceThresholdMsec terra.NumberValue `hcl:"audio_silence_threshold_msec,attr"`
}

type InputLossSettings struct {
	// InputLossThresholdMsec: number, optional
	InputLossThresholdMsec terra.NumberValue `hcl:"input_loss_threshold_msec,attr"`
}

type VideoBlackSettings struct {
	// BlackDetectThreshold: number, optional
	BlackDetectThreshold terra.NumberValue `hcl:"black_detect_threshold,attr"`
	// VideoBlackThresholdMsec: number, optional
	VideoBlackThresholdMsec terra.NumberValue `hcl:"video_black_threshold_msec,attr"`
}

type InputSettings struct {
	// DeblockFilter: string, optional
	DeblockFilter terra.StringValue `hcl:"deblock_filter,attr"`
	// DenoiseFilter: string, optional
	DenoiseFilter terra.StringValue `hcl:"denoise_filter,attr"`
	// FilterStrength: number, optional
	FilterStrength terra.NumberValue `hcl:"filter_strength,attr"`
	// InputFilter: string, optional
	InputFilter terra.StringValue `hcl:"input_filter,attr"`
	// Scte35Pid: number, optional
	Scte35Pid terra.NumberValue `hcl:"scte35_pid,attr"`
	// Smpte2038DataPreference: string, optional
	Smpte2038DataPreference terra.StringValue `hcl:"smpte2038_data_preference,attr"`
	// SourceEndBehavior: string, optional
	SourceEndBehavior terra.StringValue `hcl:"source_end_behavior,attr"`
	// AudioSelector: min=0
	AudioSelector []AudioSelector `hcl:"audio_selector,block" validate:"min=0"`
	// CaptionSelector: min=0
	CaptionSelector []CaptionSelector `hcl:"caption_selector,block" validate:"min=0"`
	// NetworkInputSettings: optional
	NetworkInputSettings *NetworkInputSettings `hcl:"network_input_settings,block"`
	// VideoSelector: optional
	VideoSelector *VideoSelector `hcl:"video_selector,block"`
}

type AudioSelector struct {
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// AudioSelectorSelectorSettings: optional
	SelectorSettings *AudioSelectorSelectorSettings `hcl:"selector_settings,block"`
}

type AudioSelectorSelectorSettings struct {
	// AudioHlsRenditionSelection: optional
	AudioHlsRenditionSelection *AudioHlsRenditionSelection `hcl:"audio_hls_rendition_selection,block"`
	// AudioLanguageSelection: optional
	AudioLanguageSelection *AudioLanguageSelection `hcl:"audio_language_selection,block"`
	// AudioPidSelection: optional
	AudioPidSelection *AudioPidSelection `hcl:"audio_pid_selection,block"`
	// AudioTrackSelection: optional
	AudioTrackSelection *AudioTrackSelection `hcl:"audio_track_selection,block"`
}

type AudioHlsRenditionSelection struct {
	// GroupId: string, required
	GroupId terra.StringValue `hcl:"group_id,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type AudioLanguageSelection struct {
	// LanguageCode: string, required
	LanguageCode terra.StringValue `hcl:"language_code,attr" validate:"required"`
	// LanguageSelectionPolicy: string, optional
	LanguageSelectionPolicy terra.StringValue `hcl:"language_selection_policy,attr"`
}

type AudioPidSelection struct {
	// Pid: number, required
	Pid terra.NumberValue `hcl:"pid,attr" validate:"required"`
}

type AudioTrackSelection struct {
	// Track: min=1
	Track []Track `hcl:"track,block" validate:"min=1"`
}

type Track struct {
	// Track: number, required
	Track terra.NumberValue `hcl:"track,attr" validate:"required"`
}

type CaptionSelector struct {
	// LanguageCode: string, optional
	LanguageCode terra.StringValue `hcl:"language_code,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// CaptionSelectorSelectorSettings: optional
	SelectorSettings *CaptionSelectorSelectorSettings `hcl:"selector_settings,block"`
}

type CaptionSelectorSelectorSettings struct {
	// AncillarySourceSettings: optional
	AncillarySourceSettings *AncillarySourceSettings `hcl:"ancillary_source_settings,block"`
	// SelectorSettingsDvbTdtSettings: optional
	DvbTdtSettings *SelectorSettingsDvbTdtSettings `hcl:"dvb_tdt_settings,block"`
	// EmbeddedSourceSettings: optional
	EmbeddedSourceSettings *EmbeddedSourceSettings `hcl:"embedded_source_settings,block"`
	// Scte20SourceSettings: optional
	Scte20SourceSettings *Scte20SourceSettings `hcl:"scte20_source_settings,block"`
	// Scte27SourceSettings: optional
	Scte27SourceSettings *Scte27SourceSettings `hcl:"scte27_source_settings,block"`
	// TeletextSourceSettings: optional
	TeletextSourceSettings *TeletextSourceSettings `hcl:"teletext_source_settings,block"`
}

type AncillarySourceSettings struct {
	// SourceAncillaryChannelNumber: number, optional
	SourceAncillaryChannelNumber terra.NumberValue `hcl:"source_ancillary_channel_number,attr"`
}

type SelectorSettingsDvbTdtSettings struct {
	// OcrLanguage: string, optional
	OcrLanguage terra.StringValue `hcl:"ocr_language,attr"`
	// Pid: number, optional
	Pid terra.NumberValue `hcl:"pid,attr"`
}

type EmbeddedSourceSettings struct {
	// Convert608To708: string, optional
	Convert608To708 terra.StringValue `hcl:"convert_608_to_708,attr"`
	// Scte20Detection: string, optional
	Scte20Detection terra.StringValue `hcl:"scte20_detection,attr"`
	// Source608ChannelNumber: number, optional
	Source608ChannelNumber terra.NumberValue `hcl:"source_608_channel_number,attr"`
	// Source608TrackNumber: number, optional
	Source608TrackNumber terra.NumberValue `hcl:"source_608_track_number,attr"`
}

type Scte20SourceSettings struct {
	// Convert608To708: string, optional
	Convert608To708 terra.StringValue `hcl:"convert_608_to_708,attr"`
	// Source608ChannelNumber: number, optional
	Source608ChannelNumber terra.NumberValue `hcl:"source_608_channel_number,attr"`
}

type Scte27SourceSettings struct {
	// OcrLanguage: string, optional
	OcrLanguage terra.StringValue `hcl:"ocr_language,attr"`
	// Pid: number, optional
	Pid terra.NumberValue `hcl:"pid,attr"`
}

type TeletextSourceSettings struct {
	// PageNumber: string, optional
	PageNumber terra.StringValue `hcl:"page_number,attr"`
	// OutputRectangle: optional
	OutputRectangle *OutputRectangle `hcl:"output_rectangle,block"`
}

type OutputRectangle struct {
	// Height: number, required
	Height terra.NumberValue `hcl:"height,attr" validate:"required"`
	// LeftOffset: number, required
	LeftOffset terra.NumberValue `hcl:"left_offset,attr" validate:"required"`
	// TopOffset: number, required
	TopOffset terra.NumberValue `hcl:"top_offset,attr" validate:"required"`
	// Width: number, required
	Width terra.NumberValue `hcl:"width,attr" validate:"required"`
}

type NetworkInputSettings struct {
	// ServerValidation: string, optional
	ServerValidation terra.StringValue `hcl:"server_validation,attr"`
	// HlsInputSettings: optional
	HlsInputSettings *HlsInputSettings `hcl:"hls_input_settings,block"`
}

type HlsInputSettings struct {
	// Bandwidth: number, optional
	Bandwidth terra.NumberValue `hcl:"bandwidth,attr"`
	// BufferSegments: number, optional
	BufferSegments terra.NumberValue `hcl:"buffer_segments,attr"`
	// Retries: number, optional
	Retries terra.NumberValue `hcl:"retries,attr"`
	// RetryInterval: number, optional
	RetryInterval terra.NumberValue `hcl:"retry_interval,attr"`
	// Scte35Source: string, optional
	Scte35Source terra.StringValue `hcl:"scte35_source,attr"`
}

type VideoSelector struct {
	// ColorSpace: string, optional
	ColorSpace terra.StringValue `hcl:"color_space,attr"`
	// ColorSpaceUsage: string, optional
	ColorSpaceUsage terra.StringValue `hcl:"color_space_usage,attr"`
}

type InputSpecification struct {
	// Codec: string, required
	Codec terra.StringValue `hcl:"codec,attr" validate:"required"`
	// InputResolution: string, required
	InputResolution terra.StringValue `hcl:"input_resolution,attr" validate:"required"`
	// MaximumBitrate: string, required
	MaximumBitrate terra.StringValue `hcl:"maximum_bitrate,attr" validate:"required"`
}

type Maintenance struct {
	// MaintenanceDay: string, required
	MaintenanceDay terra.StringValue `hcl:"maintenance_day,attr" validate:"required"`
	// MaintenanceStartTime: string, required
	MaintenanceStartTime terra.StringValue `hcl:"maintenance_start_time,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type Vpc struct {
	// PublicAddressAllocationIds: list of string, required
	PublicAddressAllocationIds terra.ListValue[terra.StringValue] `hcl:"public_address_allocation_ids,attr" validate:"required"`
	// SecurityGroupIds: list of string, optional
	SecurityGroupIds terra.ListValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds: list of string, required
	SubnetIds terra.ListValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type CdiInputSpecificationAttributes struct {
	ref terra.Reference
}

func (cis CdiInputSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return cis.ref, nil
}

func (cis CdiInputSpecificationAttributes) InternalWithRef(ref terra.Reference) CdiInputSpecificationAttributes {
	return CdiInputSpecificationAttributes{ref: ref}
}

func (cis CdiInputSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cis.ref.InternalTokens()
}

func (cis CdiInputSpecificationAttributes) Resolution() terra.StringValue {
	return terra.ReferenceAsString(cis.ref.Append("resolution"))
}

type DestinationsAttributes struct {
	ref terra.Reference
}

func (d DestinationsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DestinationsAttributes) InternalWithRef(ref terra.Reference) DestinationsAttributes {
	return DestinationsAttributes{ref: ref}
}

func (d DestinationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DestinationsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("id"))
}

func (d DestinationsAttributes) MediaPackageSettings() terra.SetValue[MediaPackageSettingsAttributes] {
	return terra.ReferenceAsSet[MediaPackageSettingsAttributes](d.ref.Append("media_package_settings"))
}

func (d DestinationsAttributes) MultiplexSettings() terra.ListValue[MultiplexSettingsAttributes] {
	return terra.ReferenceAsList[MultiplexSettingsAttributes](d.ref.Append("multiplex_settings"))
}

func (d DestinationsAttributes) Settings() terra.SetValue[SettingsAttributes] {
	return terra.ReferenceAsSet[SettingsAttributes](d.ref.Append("settings"))
}

type MediaPackageSettingsAttributes struct {
	ref terra.Reference
}

func (mps MediaPackageSettingsAttributes) InternalRef() (terra.Reference, error) {
	return mps.ref, nil
}

func (mps MediaPackageSettingsAttributes) InternalWithRef(ref terra.Reference) MediaPackageSettingsAttributes {
	return MediaPackageSettingsAttributes{ref: ref}
}

func (mps MediaPackageSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mps.ref.InternalTokens()
}

func (mps MediaPackageSettingsAttributes) ChannelId() terra.StringValue {
	return terra.ReferenceAsString(mps.ref.Append("channel_id"))
}

type MultiplexSettingsAttributes struct {
	ref terra.Reference
}

func (ms MultiplexSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms MultiplexSettingsAttributes) InternalWithRef(ref terra.Reference) MultiplexSettingsAttributes {
	return MultiplexSettingsAttributes{ref: ref}
}

func (ms MultiplexSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms MultiplexSettingsAttributes) MultiplexId() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("multiplex_id"))
}

func (ms MultiplexSettingsAttributes) ProgramName() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("program_name"))
}

type SettingsAttributes struct {
	ref terra.Reference
}

func (s SettingsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s SettingsAttributes) InternalWithRef(ref terra.Reference) SettingsAttributes {
	return SettingsAttributes{ref: ref}
}

func (s SettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s SettingsAttributes) PasswordParam() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("password_param"))
}

func (s SettingsAttributes) StreamName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("stream_name"))
}

func (s SettingsAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("url"))
}

func (s SettingsAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("username"))
}

type EncoderSettingsAttributes struct {
	ref terra.Reference
}

func (es EncoderSettingsAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es EncoderSettingsAttributes) InternalWithRef(ref terra.Reference) EncoderSettingsAttributes {
	return EncoderSettingsAttributes{ref: ref}
}

func (es EncoderSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es EncoderSettingsAttributes) AudioDescriptions() terra.SetValue[AudioDescriptionsAttributes] {
	return terra.ReferenceAsSet[AudioDescriptionsAttributes](es.ref.Append("audio_descriptions"))
}

func (es EncoderSettingsAttributes) AvailBlanking() terra.ListValue[AvailBlankingAttributes] {
	return terra.ReferenceAsList[AvailBlankingAttributes](es.ref.Append("avail_blanking"))
}

func (es EncoderSettingsAttributes) OutputGroups() terra.ListValue[OutputGroupsAttributes] {
	return terra.ReferenceAsList[OutputGroupsAttributes](es.ref.Append("output_groups"))
}

func (es EncoderSettingsAttributes) TimecodeConfig() terra.ListValue[TimecodeConfigAttributes] {
	return terra.ReferenceAsList[TimecodeConfigAttributes](es.ref.Append("timecode_config"))
}

func (es EncoderSettingsAttributes) VideoDescriptions() terra.ListValue[VideoDescriptionsAttributes] {
	return terra.ReferenceAsList[VideoDescriptionsAttributes](es.ref.Append("video_descriptions"))
}

type AudioDescriptionsAttributes struct {
	ref terra.Reference
}

func (ad AudioDescriptionsAttributes) InternalRef() (terra.Reference, error) {
	return ad.ref, nil
}

func (ad AudioDescriptionsAttributes) InternalWithRef(ref terra.Reference) AudioDescriptionsAttributes {
	return AudioDescriptionsAttributes{ref: ref}
}

func (ad AudioDescriptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ad.ref.InternalTokens()
}

func (ad AudioDescriptionsAttributes) AudioSelectorName() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("audio_selector_name"))
}

func (ad AudioDescriptionsAttributes) AudioType() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("audio_type"))
}

func (ad AudioDescriptionsAttributes) AudioTypeControl() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("audio_type_control"))
}

func (ad AudioDescriptionsAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("language_code"))
}

func (ad AudioDescriptionsAttributes) LanguageCodeControl() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("language_code_control"))
}

func (ad AudioDescriptionsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("name"))
}

func (ad AudioDescriptionsAttributes) StreamName() terra.StringValue {
	return terra.ReferenceAsString(ad.ref.Append("stream_name"))
}

func (ad AudioDescriptionsAttributes) AudioNormalizationSettings() terra.ListValue[AudioNormalizationSettingsAttributes] {
	return terra.ReferenceAsList[AudioNormalizationSettingsAttributes](ad.ref.Append("audio_normalization_settings"))
}

func (ad AudioDescriptionsAttributes) AudioWatermarkSettings() terra.ListValue[AudioWatermarkSettingsAttributes] {
	return terra.ReferenceAsList[AudioWatermarkSettingsAttributes](ad.ref.Append("audio_watermark_settings"))
}

func (ad AudioDescriptionsAttributes) CodecSettings() terra.ListValue[AudioDescriptionsCodecSettingsAttributes] {
	return terra.ReferenceAsList[AudioDescriptionsCodecSettingsAttributes](ad.ref.Append("codec_settings"))
}

func (ad AudioDescriptionsAttributes) RemixSettings() terra.ListValue[RemixSettingsAttributes] {
	return terra.ReferenceAsList[RemixSettingsAttributes](ad.ref.Append("remix_settings"))
}

type AudioNormalizationSettingsAttributes struct {
	ref terra.Reference
}

func (ans AudioNormalizationSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ans.ref, nil
}

func (ans AudioNormalizationSettingsAttributes) InternalWithRef(ref terra.Reference) AudioNormalizationSettingsAttributes {
	return AudioNormalizationSettingsAttributes{ref: ref}
}

func (ans AudioNormalizationSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ans.ref.InternalTokens()
}

func (ans AudioNormalizationSettingsAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceAsString(ans.ref.Append("algorithm"))
}

func (ans AudioNormalizationSettingsAttributes) AlgorithmControl() terra.StringValue {
	return terra.ReferenceAsString(ans.ref.Append("algorithm_control"))
}

func (ans AudioNormalizationSettingsAttributes) TargetLkfs() terra.NumberValue {
	return terra.ReferenceAsNumber(ans.ref.Append("target_lkfs"))
}

type AudioWatermarkSettingsAttributes struct {
	ref terra.Reference
}

func (aws AudioWatermarkSettingsAttributes) InternalRef() (terra.Reference, error) {
	return aws.ref, nil
}

func (aws AudioWatermarkSettingsAttributes) InternalWithRef(ref terra.Reference) AudioWatermarkSettingsAttributes {
	return AudioWatermarkSettingsAttributes{ref: ref}
}

func (aws AudioWatermarkSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aws.ref.InternalTokens()
}

func (aws AudioWatermarkSettingsAttributes) NielsenWatermarksSettings() terra.ListValue[NielsenWatermarksSettingsAttributes] {
	return terra.ReferenceAsList[NielsenWatermarksSettingsAttributes](aws.ref.Append("nielsen_watermarks_settings"))
}

type NielsenWatermarksSettingsAttributes struct {
	ref terra.Reference
}

func (nws NielsenWatermarksSettingsAttributes) InternalRef() (terra.Reference, error) {
	return nws.ref, nil
}

func (nws NielsenWatermarksSettingsAttributes) InternalWithRef(ref terra.Reference) NielsenWatermarksSettingsAttributes {
	return NielsenWatermarksSettingsAttributes{ref: ref}
}

func (nws NielsenWatermarksSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nws.ref.InternalTokens()
}

func (nws NielsenWatermarksSettingsAttributes) NielsenDistributionType() terra.StringValue {
	return terra.ReferenceAsString(nws.ref.Append("nielsen_distribution_type"))
}

func (nws NielsenWatermarksSettingsAttributes) NielsenCbetSettings() terra.ListValue[NielsenCbetSettingsAttributes] {
	return terra.ReferenceAsList[NielsenCbetSettingsAttributes](nws.ref.Append("nielsen_cbet_settings"))
}

func (nws NielsenWatermarksSettingsAttributes) NielsenNaesIiNwSettings() terra.ListValue[NielsenNaesIiNwSettingsAttributes] {
	return terra.ReferenceAsList[NielsenNaesIiNwSettingsAttributes](nws.ref.Append("nielsen_naes_ii_nw_settings"))
}

type NielsenCbetSettingsAttributes struct {
	ref terra.Reference
}

func (ncs NielsenCbetSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ncs.ref, nil
}

func (ncs NielsenCbetSettingsAttributes) InternalWithRef(ref terra.Reference) NielsenCbetSettingsAttributes {
	return NielsenCbetSettingsAttributes{ref: ref}
}

func (ncs NielsenCbetSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ncs.ref.InternalTokens()
}

func (ncs NielsenCbetSettingsAttributes) CbetCheckDigitString() terra.StringValue {
	return terra.ReferenceAsString(ncs.ref.Append("cbet_check_digit_string"))
}

func (ncs NielsenCbetSettingsAttributes) CbetStepaside() terra.StringValue {
	return terra.ReferenceAsString(ncs.ref.Append("cbet_stepaside"))
}

func (ncs NielsenCbetSettingsAttributes) Csid() terra.StringValue {
	return terra.ReferenceAsString(ncs.ref.Append("csid"))
}

type NielsenNaesIiNwSettingsAttributes struct {
	ref terra.Reference
}

func (nnins NielsenNaesIiNwSettingsAttributes) InternalRef() (terra.Reference, error) {
	return nnins.ref, nil
}

func (nnins NielsenNaesIiNwSettingsAttributes) InternalWithRef(ref terra.Reference) NielsenNaesIiNwSettingsAttributes {
	return NielsenNaesIiNwSettingsAttributes{ref: ref}
}

func (nnins NielsenNaesIiNwSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nnins.ref.InternalTokens()
}

func (nnins NielsenNaesIiNwSettingsAttributes) CheckDigitString() terra.StringValue {
	return terra.ReferenceAsString(nnins.ref.Append("check_digit_string"))
}

func (nnins NielsenNaesIiNwSettingsAttributes) Sid() terra.NumberValue {
	return terra.ReferenceAsNumber(nnins.ref.Append("sid"))
}

type AudioDescriptionsCodecSettingsAttributes struct {
	ref terra.Reference
}

func (cs AudioDescriptionsCodecSettingsAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs AudioDescriptionsCodecSettingsAttributes) InternalWithRef(ref terra.Reference) AudioDescriptionsCodecSettingsAttributes {
	return AudioDescriptionsCodecSettingsAttributes{ref: ref}
}

func (cs AudioDescriptionsCodecSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs AudioDescriptionsCodecSettingsAttributes) AacSettings() terra.ListValue[AacSettingsAttributes] {
	return terra.ReferenceAsList[AacSettingsAttributes](cs.ref.Append("aac_settings"))
}

func (cs AudioDescriptionsCodecSettingsAttributes) Ac3Settings() terra.ListValue[Ac3SettingsAttributes] {
	return terra.ReferenceAsList[Ac3SettingsAttributes](cs.ref.Append("ac3_settings"))
}

func (cs AudioDescriptionsCodecSettingsAttributes) Eac3AtmosSettings() terra.ListValue[Eac3AtmosSettingsAttributes] {
	return terra.ReferenceAsList[Eac3AtmosSettingsAttributes](cs.ref.Append("eac3_atmos_settings"))
}

func (cs AudioDescriptionsCodecSettingsAttributes) Eac3Settings() terra.ListValue[Eac3SettingsAttributes] {
	return terra.ReferenceAsList[Eac3SettingsAttributes](cs.ref.Append("eac3_settings"))
}

func (cs AudioDescriptionsCodecSettingsAttributes) Mp2Settings() terra.ListValue[Mp2SettingsAttributes] {
	return terra.ReferenceAsList[Mp2SettingsAttributes](cs.ref.Append("mp2_settings"))
}

func (cs AudioDescriptionsCodecSettingsAttributes) PassThroughSettings() terra.ListValue[PassThroughSettingsAttributes] {
	return terra.ReferenceAsList[PassThroughSettingsAttributes](cs.ref.Append("pass_through_settings"))
}

func (cs AudioDescriptionsCodecSettingsAttributes) WavSettings() terra.ListValue[WavSettingsAttributes] {
	return terra.ReferenceAsList[WavSettingsAttributes](cs.ref.Append("wav_settings"))
}

type AacSettingsAttributes struct {
	ref terra.Reference
}

func (as AacSettingsAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AacSettingsAttributes) InternalWithRef(ref terra.Reference) AacSettingsAttributes {
	return AacSettingsAttributes{ref: ref}
}

func (as AacSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AacSettingsAttributes) Bitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("bitrate"))
}

func (as AacSettingsAttributes) CodingMode() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("coding_mode"))
}

func (as AacSettingsAttributes) InputType() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("input_type"))
}

func (as AacSettingsAttributes) Profile() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("profile"))
}

func (as AacSettingsAttributes) RateControlMode() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("rate_control_mode"))
}

func (as AacSettingsAttributes) RawFormat() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("raw_format"))
}

func (as AacSettingsAttributes) SampleRate() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("sample_rate"))
}

func (as AacSettingsAttributes) Spec() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("spec"))
}

func (as AacSettingsAttributes) VbrQuality() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("vbr_quality"))
}

type Ac3SettingsAttributes struct {
	ref terra.Reference
}

func (as Ac3SettingsAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as Ac3SettingsAttributes) InternalWithRef(ref terra.Reference) Ac3SettingsAttributes {
	return Ac3SettingsAttributes{ref: ref}
}

func (as Ac3SettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as Ac3SettingsAttributes) Bitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("bitrate"))
}

func (as Ac3SettingsAttributes) BitstreamMode() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("bitstream_mode"))
}

func (as Ac3SettingsAttributes) CodingMode() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("coding_mode"))
}

func (as Ac3SettingsAttributes) Dialnorm() terra.NumberValue {
	return terra.ReferenceAsNumber(as.ref.Append("dialnorm"))
}

func (as Ac3SettingsAttributes) DrcProfile() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("drc_profile"))
}

func (as Ac3SettingsAttributes) LfeFilter() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("lfe_filter"))
}

func (as Ac3SettingsAttributes) MetadataControl() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("metadata_control"))
}

type Eac3AtmosSettingsAttributes struct {
	ref terra.Reference
}

func (eas Eac3AtmosSettingsAttributes) InternalRef() (terra.Reference, error) {
	return eas.ref, nil
}

func (eas Eac3AtmosSettingsAttributes) InternalWithRef(ref terra.Reference) Eac3AtmosSettingsAttributes {
	return Eac3AtmosSettingsAttributes{ref: ref}
}

func (eas Eac3AtmosSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eas.ref.InternalTokens()
}

func (eas Eac3AtmosSettingsAttributes) Bitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(eas.ref.Append("bitrate"))
}

func (eas Eac3AtmosSettingsAttributes) CodingMode() terra.StringValue {
	return terra.ReferenceAsString(eas.ref.Append("coding_mode"))
}

func (eas Eac3AtmosSettingsAttributes) Dialnorm() terra.NumberValue {
	return terra.ReferenceAsNumber(eas.ref.Append("dialnorm"))
}

func (eas Eac3AtmosSettingsAttributes) DrcLine() terra.StringValue {
	return terra.ReferenceAsString(eas.ref.Append("drc_line"))
}

func (eas Eac3AtmosSettingsAttributes) DrcRf() terra.StringValue {
	return terra.ReferenceAsString(eas.ref.Append("drc_rf"))
}

func (eas Eac3AtmosSettingsAttributes) HeightTrim() terra.NumberValue {
	return terra.ReferenceAsNumber(eas.ref.Append("height_trim"))
}

func (eas Eac3AtmosSettingsAttributes) SurroundTrim() terra.NumberValue {
	return terra.ReferenceAsNumber(eas.ref.Append("surround_trim"))
}

type Eac3SettingsAttributes struct {
	ref terra.Reference
}

func (es Eac3SettingsAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es Eac3SettingsAttributes) InternalWithRef(ref terra.Reference) Eac3SettingsAttributes {
	return Eac3SettingsAttributes{ref: ref}
}

func (es Eac3SettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es Eac3SettingsAttributes) AttenuationControl() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("attenuation_control"))
}

func (es Eac3SettingsAttributes) Bitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("bitrate"))
}

func (es Eac3SettingsAttributes) BitstreamMode() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("bitstream_mode"))
}

func (es Eac3SettingsAttributes) CodingMode() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("coding_mode"))
}

func (es Eac3SettingsAttributes) DcFilter() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("dc_filter"))
}

func (es Eac3SettingsAttributes) Dialnorm() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("dialnorm"))
}

func (es Eac3SettingsAttributes) DrcLine() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("drc_line"))
}

func (es Eac3SettingsAttributes) DrcRf() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("drc_rf"))
}

func (es Eac3SettingsAttributes) LfeControl() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("lfe_control"))
}

func (es Eac3SettingsAttributes) LfeFilter() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("lfe_filter"))
}

func (es Eac3SettingsAttributes) LoRoCenterMixLevel() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("lo_ro_center_mix_level"))
}

func (es Eac3SettingsAttributes) LoRoSurroundMixLevel() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("lo_ro_surround_mix_level"))
}

func (es Eac3SettingsAttributes) LtRtCenterMixLevel() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("lt_rt_center_mix_level"))
}

func (es Eac3SettingsAttributes) LtRtSurroundMixLevel() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("lt_rt_surround_mix_level"))
}

func (es Eac3SettingsAttributes) MetadataControl() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("metadata_control"))
}

func (es Eac3SettingsAttributes) PassthroughControl() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("passthrough_control"))
}

func (es Eac3SettingsAttributes) PhaseControl() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("phase_control"))
}

func (es Eac3SettingsAttributes) StereoDownmix() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("stereo_downmix"))
}

func (es Eac3SettingsAttributes) SurroundExMode() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("surround_ex_mode"))
}

func (es Eac3SettingsAttributes) SurroundMode() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("surround_mode"))
}

type Mp2SettingsAttributes struct {
	ref terra.Reference
}

func (ms Mp2SettingsAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms Mp2SettingsAttributes) InternalWithRef(ref terra.Reference) Mp2SettingsAttributes {
	return Mp2SettingsAttributes{ref: ref}
}

func (ms Mp2SettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms Mp2SettingsAttributes) Bitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("bitrate"))
}

func (ms Mp2SettingsAttributes) CodingMode() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("coding_mode"))
}

func (ms Mp2SettingsAttributes) SampleRate() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("sample_rate"))
}

type PassThroughSettingsAttributes struct {
	ref terra.Reference
}

func (pts PassThroughSettingsAttributes) InternalRef() (terra.Reference, error) {
	return pts.ref, nil
}

func (pts PassThroughSettingsAttributes) InternalWithRef(ref terra.Reference) PassThroughSettingsAttributes {
	return PassThroughSettingsAttributes{ref: ref}
}

func (pts PassThroughSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pts.ref.InternalTokens()
}

type WavSettingsAttributes struct {
	ref terra.Reference
}

func (ws WavSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ws.ref, nil
}

func (ws WavSettingsAttributes) InternalWithRef(ref terra.Reference) WavSettingsAttributes {
	return WavSettingsAttributes{ref: ref}
}

func (ws WavSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ws.ref.InternalTokens()
}

func (ws WavSettingsAttributes) BitDepth() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("bit_depth"))
}

func (ws WavSettingsAttributes) CodingMode() terra.StringValue {
	return terra.ReferenceAsString(ws.ref.Append("coding_mode"))
}

func (ws WavSettingsAttributes) SampleRate() terra.NumberValue {
	return terra.ReferenceAsNumber(ws.ref.Append("sample_rate"))
}

type RemixSettingsAttributes struct {
	ref terra.Reference
}

func (rs RemixSettingsAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RemixSettingsAttributes) InternalWithRef(ref terra.Reference) RemixSettingsAttributes {
	return RemixSettingsAttributes{ref: ref}
}

func (rs RemixSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs RemixSettingsAttributes) ChannelsIn() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("channels_in"))
}

func (rs RemixSettingsAttributes) ChannelsOut() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("channels_out"))
}

func (rs RemixSettingsAttributes) ChannelMappings() terra.SetValue[ChannelMappingsAttributes] {
	return terra.ReferenceAsSet[ChannelMappingsAttributes](rs.ref.Append("channel_mappings"))
}

type ChannelMappingsAttributes struct {
	ref terra.Reference
}

func (cm ChannelMappingsAttributes) InternalRef() (terra.Reference, error) {
	return cm.ref, nil
}

func (cm ChannelMappingsAttributes) InternalWithRef(ref terra.Reference) ChannelMappingsAttributes {
	return ChannelMappingsAttributes{ref: ref}
}

func (cm ChannelMappingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cm.ref.InternalTokens()
}

func (cm ChannelMappingsAttributes) OutputChannel() terra.NumberValue {
	return terra.ReferenceAsNumber(cm.ref.Append("output_channel"))
}

func (cm ChannelMappingsAttributes) InputChannelLevels() terra.SetValue[InputChannelLevelsAttributes] {
	return terra.ReferenceAsSet[InputChannelLevelsAttributes](cm.ref.Append("input_channel_levels"))
}

type InputChannelLevelsAttributes struct {
	ref terra.Reference
}

func (icl InputChannelLevelsAttributes) InternalRef() (terra.Reference, error) {
	return icl.ref, nil
}

func (icl InputChannelLevelsAttributes) InternalWithRef(ref terra.Reference) InputChannelLevelsAttributes {
	return InputChannelLevelsAttributes{ref: ref}
}

func (icl InputChannelLevelsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return icl.ref.InternalTokens()
}

func (icl InputChannelLevelsAttributes) Gain() terra.NumberValue {
	return terra.ReferenceAsNumber(icl.ref.Append("gain"))
}

func (icl InputChannelLevelsAttributes) InputChannel() terra.NumberValue {
	return terra.ReferenceAsNumber(icl.ref.Append("input_channel"))
}

type AvailBlankingAttributes struct {
	ref terra.Reference
}

func (ab AvailBlankingAttributes) InternalRef() (terra.Reference, error) {
	return ab.ref, nil
}

func (ab AvailBlankingAttributes) InternalWithRef(ref terra.Reference) AvailBlankingAttributes {
	return AvailBlankingAttributes{ref: ref}
}

func (ab AvailBlankingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ab.ref.InternalTokens()
}

func (ab AvailBlankingAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(ab.ref.Append("state"))
}

func (ab AvailBlankingAttributes) AvailBlankingImage() terra.ListValue[AvailBlankingImageAttributes] {
	return terra.ReferenceAsList[AvailBlankingImageAttributes](ab.ref.Append("avail_blanking_image"))
}

type AvailBlankingImageAttributes struct {
	ref terra.Reference
}

func (abi AvailBlankingImageAttributes) InternalRef() (terra.Reference, error) {
	return abi.ref, nil
}

func (abi AvailBlankingImageAttributes) InternalWithRef(ref terra.Reference) AvailBlankingImageAttributes {
	return AvailBlankingImageAttributes{ref: ref}
}

func (abi AvailBlankingImageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return abi.ref.InternalTokens()
}

func (abi AvailBlankingImageAttributes) PasswordParam() terra.StringValue {
	return terra.ReferenceAsString(abi.ref.Append("password_param"))
}

func (abi AvailBlankingImageAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(abi.ref.Append("uri"))
}

func (abi AvailBlankingImageAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(abi.ref.Append("username"))
}

type OutputGroupsAttributes struct {
	ref terra.Reference
}

func (og OutputGroupsAttributes) InternalRef() (terra.Reference, error) {
	return og.ref, nil
}

func (og OutputGroupsAttributes) InternalWithRef(ref terra.Reference) OutputGroupsAttributes {
	return OutputGroupsAttributes{ref: ref}
}

func (og OutputGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return og.ref.InternalTokens()
}

func (og OutputGroupsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(og.ref.Append("name"))
}

func (og OutputGroupsAttributes) OutputGroupSettings() terra.ListValue[OutputGroupSettingsAttributes] {
	return terra.ReferenceAsList[OutputGroupSettingsAttributes](og.ref.Append("output_group_settings"))
}

func (og OutputGroupsAttributes) Outputs() terra.ListValue[OutputsAttributes] {
	return terra.ReferenceAsList[OutputsAttributes](og.ref.Append("outputs"))
}

type OutputGroupSettingsAttributes struct {
	ref terra.Reference
}

func (ogs OutputGroupSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ogs.ref, nil
}

func (ogs OutputGroupSettingsAttributes) InternalWithRef(ref terra.Reference) OutputGroupSettingsAttributes {
	return OutputGroupSettingsAttributes{ref: ref}
}

func (ogs OutputGroupSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ogs.ref.InternalTokens()
}

func (ogs OutputGroupSettingsAttributes) ArchiveGroupSettings() terra.ListValue[ArchiveGroupSettingsAttributes] {
	return terra.ReferenceAsList[ArchiveGroupSettingsAttributes](ogs.ref.Append("archive_group_settings"))
}

func (ogs OutputGroupSettingsAttributes) FrameCaptureGroupSettings() terra.ListValue[FrameCaptureGroupSettingsAttributes] {
	return terra.ReferenceAsList[FrameCaptureGroupSettingsAttributes](ogs.ref.Append("frame_capture_group_settings"))
}

func (ogs OutputGroupSettingsAttributes) HlsGroupSettings() terra.ListValue[HlsGroupSettingsAttributes] {
	return terra.ReferenceAsList[HlsGroupSettingsAttributes](ogs.ref.Append("hls_group_settings"))
}

func (ogs OutputGroupSettingsAttributes) MediaPackageGroupSettings() terra.ListValue[MediaPackageGroupSettingsAttributes] {
	return terra.ReferenceAsList[MediaPackageGroupSettingsAttributes](ogs.ref.Append("media_package_group_settings"))
}

func (ogs OutputGroupSettingsAttributes) MsSmoothGroupSettings() terra.ListValue[MsSmoothGroupSettingsAttributes] {
	return terra.ReferenceAsList[MsSmoothGroupSettingsAttributes](ogs.ref.Append("ms_smooth_group_settings"))
}

func (ogs OutputGroupSettingsAttributes) MultiplexGroupSettings() terra.ListValue[MultiplexGroupSettingsAttributes] {
	return terra.ReferenceAsList[MultiplexGroupSettingsAttributes](ogs.ref.Append("multiplex_group_settings"))
}

func (ogs OutputGroupSettingsAttributes) RtmpGroupSettings() terra.ListValue[RtmpGroupSettingsAttributes] {
	return terra.ReferenceAsList[RtmpGroupSettingsAttributes](ogs.ref.Append("rtmp_group_settings"))
}

func (ogs OutputGroupSettingsAttributes) UdpGroupSettings() terra.ListValue[UdpGroupSettingsAttributes] {
	return terra.ReferenceAsList[UdpGroupSettingsAttributes](ogs.ref.Append("udp_group_settings"))
}

type ArchiveGroupSettingsAttributes struct {
	ref terra.Reference
}

func (ags ArchiveGroupSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ags.ref, nil
}

func (ags ArchiveGroupSettingsAttributes) InternalWithRef(ref terra.Reference) ArchiveGroupSettingsAttributes {
	return ArchiveGroupSettingsAttributes{ref: ref}
}

func (ags ArchiveGroupSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ags.ref.InternalTokens()
}

func (ags ArchiveGroupSettingsAttributes) RolloverInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(ags.ref.Append("rollover_interval"))
}

func (ags ArchiveGroupSettingsAttributes) ArchiveCdnSettings() terra.ListValue[ArchiveCdnSettingsAttributes] {
	return terra.ReferenceAsList[ArchiveCdnSettingsAttributes](ags.ref.Append("archive_cdn_settings"))
}

func (ags ArchiveGroupSettingsAttributes) Destination() terra.ListValue[ArchiveGroupSettingsDestinationAttributes] {
	return terra.ReferenceAsList[ArchiveGroupSettingsDestinationAttributes](ags.ref.Append("destination"))
}

type ArchiveCdnSettingsAttributes struct {
	ref terra.Reference
}

func (acs ArchiveCdnSettingsAttributes) InternalRef() (terra.Reference, error) {
	return acs.ref, nil
}

func (acs ArchiveCdnSettingsAttributes) InternalWithRef(ref terra.Reference) ArchiveCdnSettingsAttributes {
	return ArchiveCdnSettingsAttributes{ref: ref}
}

func (acs ArchiveCdnSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return acs.ref.InternalTokens()
}

func (acs ArchiveCdnSettingsAttributes) ArchiveS3Settings() terra.ListValue[ArchiveS3SettingsAttributes] {
	return terra.ReferenceAsList[ArchiveS3SettingsAttributes](acs.ref.Append("archive_s3_settings"))
}

type ArchiveS3SettingsAttributes struct {
	ref terra.Reference
}

func (ass ArchiveS3SettingsAttributes) InternalRef() (terra.Reference, error) {
	return ass.ref, nil
}

func (ass ArchiveS3SettingsAttributes) InternalWithRef(ref terra.Reference) ArchiveS3SettingsAttributes {
	return ArchiveS3SettingsAttributes{ref: ref}
}

func (ass ArchiveS3SettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ass.ref.InternalTokens()
}

func (ass ArchiveS3SettingsAttributes) CannedAcl() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("canned_acl"))
}

type ArchiveGroupSettingsDestinationAttributes struct {
	ref terra.Reference
}

func (d ArchiveGroupSettingsDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ArchiveGroupSettingsDestinationAttributes) InternalWithRef(ref terra.Reference) ArchiveGroupSettingsDestinationAttributes {
	return ArchiveGroupSettingsDestinationAttributes{ref: ref}
}

func (d ArchiveGroupSettingsDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ArchiveGroupSettingsDestinationAttributes) DestinationRefId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("destination_ref_id"))
}

type FrameCaptureGroupSettingsAttributes struct {
	ref terra.Reference
}

func (fcgs FrameCaptureGroupSettingsAttributes) InternalRef() (terra.Reference, error) {
	return fcgs.ref, nil
}

func (fcgs FrameCaptureGroupSettingsAttributes) InternalWithRef(ref terra.Reference) FrameCaptureGroupSettingsAttributes {
	return FrameCaptureGroupSettingsAttributes{ref: ref}
}

func (fcgs FrameCaptureGroupSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fcgs.ref.InternalTokens()
}

func (fcgs FrameCaptureGroupSettingsAttributes) Destination() terra.ListValue[FrameCaptureGroupSettingsDestinationAttributes] {
	return terra.ReferenceAsList[FrameCaptureGroupSettingsDestinationAttributes](fcgs.ref.Append("destination"))
}

func (fcgs FrameCaptureGroupSettingsAttributes) FrameCaptureCdnSettings() terra.ListValue[FrameCaptureCdnSettingsAttributes] {
	return terra.ReferenceAsList[FrameCaptureCdnSettingsAttributes](fcgs.ref.Append("frame_capture_cdn_settings"))
}

type FrameCaptureGroupSettingsDestinationAttributes struct {
	ref terra.Reference
}

func (d FrameCaptureGroupSettingsDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d FrameCaptureGroupSettingsDestinationAttributes) InternalWithRef(ref terra.Reference) FrameCaptureGroupSettingsDestinationAttributes {
	return FrameCaptureGroupSettingsDestinationAttributes{ref: ref}
}

func (d FrameCaptureGroupSettingsDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d FrameCaptureGroupSettingsDestinationAttributes) DestinationRefId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("destination_ref_id"))
}

type FrameCaptureCdnSettingsAttributes struct {
	ref terra.Reference
}

func (fccs FrameCaptureCdnSettingsAttributes) InternalRef() (terra.Reference, error) {
	return fccs.ref, nil
}

func (fccs FrameCaptureCdnSettingsAttributes) InternalWithRef(ref terra.Reference) FrameCaptureCdnSettingsAttributes {
	return FrameCaptureCdnSettingsAttributes{ref: ref}
}

func (fccs FrameCaptureCdnSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fccs.ref.InternalTokens()
}

func (fccs FrameCaptureCdnSettingsAttributes) FrameCaptureS3Settings() terra.ListValue[FrameCaptureS3SettingsAttributes] {
	return terra.ReferenceAsList[FrameCaptureS3SettingsAttributes](fccs.ref.Append("frame_capture_s3_settings"))
}

type FrameCaptureS3SettingsAttributes struct {
	ref terra.Reference
}

func (fcss FrameCaptureS3SettingsAttributes) InternalRef() (terra.Reference, error) {
	return fcss.ref, nil
}

func (fcss FrameCaptureS3SettingsAttributes) InternalWithRef(ref terra.Reference) FrameCaptureS3SettingsAttributes {
	return FrameCaptureS3SettingsAttributes{ref: ref}
}

func (fcss FrameCaptureS3SettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fcss.ref.InternalTokens()
}

func (fcss FrameCaptureS3SettingsAttributes) CannedAcl() terra.StringValue {
	return terra.ReferenceAsString(fcss.ref.Append("canned_acl"))
}

type HlsGroupSettingsAttributes struct {
	ref terra.Reference
}

func (hgs HlsGroupSettingsAttributes) InternalRef() (terra.Reference, error) {
	return hgs.ref, nil
}

func (hgs HlsGroupSettingsAttributes) InternalWithRef(ref terra.Reference) HlsGroupSettingsAttributes {
	return HlsGroupSettingsAttributes{ref: ref}
}

func (hgs HlsGroupSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hgs.ref.InternalTokens()
}

func (hgs HlsGroupSettingsAttributes) AdMarkers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hgs.ref.Append("ad_markers"))
}

func (hgs HlsGroupSettingsAttributes) BaseUrlContent() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("base_url_content"))
}

func (hgs HlsGroupSettingsAttributes) BaseUrlContent1() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("base_url_content1"))
}

func (hgs HlsGroupSettingsAttributes) BaseUrlManifest() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("base_url_manifest"))
}

func (hgs HlsGroupSettingsAttributes) BaseUrlManifest1() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("base_url_manifest1"))
}

func (hgs HlsGroupSettingsAttributes) CaptionLanguageSetting() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("caption_language_setting"))
}

func (hgs HlsGroupSettingsAttributes) ClientCache() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("client_cache"))
}

func (hgs HlsGroupSettingsAttributes) CodecSpecification() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("codec_specification"))
}

func (hgs HlsGroupSettingsAttributes) ConstantIv() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("constant_iv"))
}

func (hgs HlsGroupSettingsAttributes) DirectoryStructure() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("directory_structure"))
}

func (hgs HlsGroupSettingsAttributes) DiscontinuityTags() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("discontinuity_tags"))
}

func (hgs HlsGroupSettingsAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("encryption_type"))
}

func (hgs HlsGroupSettingsAttributes) HlsId3SegmentTagging() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("hls_id3_segment_tagging"))
}

func (hgs HlsGroupSettingsAttributes) IframeOnlyPlaylists() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("iframe_only_playlists"))
}

func (hgs HlsGroupSettingsAttributes) IncompleteSegmentBehavior() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("incomplete_segment_behavior"))
}

func (hgs HlsGroupSettingsAttributes) IndexNSegments() terra.NumberValue {
	return terra.ReferenceAsNumber(hgs.ref.Append("index_n_segments"))
}

func (hgs HlsGroupSettingsAttributes) InputLossAction() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("input_loss_action"))
}

func (hgs HlsGroupSettingsAttributes) IvInManifest() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("iv_in_manifest"))
}

func (hgs HlsGroupSettingsAttributes) IvSource() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("iv_source"))
}

func (hgs HlsGroupSettingsAttributes) KeepSegments() terra.NumberValue {
	return terra.ReferenceAsNumber(hgs.ref.Append("keep_segments"))
}

func (hgs HlsGroupSettingsAttributes) KeyFormat() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("key_format"))
}

func (hgs HlsGroupSettingsAttributes) KeyFormatVersions() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("key_format_versions"))
}

func (hgs HlsGroupSettingsAttributes) ManifestCompression() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("manifest_compression"))
}

func (hgs HlsGroupSettingsAttributes) ManifestDurationFormat() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("manifest_duration_format"))
}

func (hgs HlsGroupSettingsAttributes) MinSegmentLength() terra.NumberValue {
	return terra.ReferenceAsNumber(hgs.ref.Append("min_segment_length"))
}

func (hgs HlsGroupSettingsAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("mode"))
}

func (hgs HlsGroupSettingsAttributes) OutputSelection() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("output_selection"))
}

func (hgs HlsGroupSettingsAttributes) ProgramDateTime() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("program_date_time"))
}

func (hgs HlsGroupSettingsAttributes) ProgramDateTimeClock() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("program_date_time_clock"))
}

func (hgs HlsGroupSettingsAttributes) ProgramDateTimePeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(hgs.ref.Append("program_date_time_period"))
}

func (hgs HlsGroupSettingsAttributes) RedundantManifest() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("redundant_manifest"))
}

func (hgs HlsGroupSettingsAttributes) SegmentLength() terra.NumberValue {
	return terra.ReferenceAsNumber(hgs.ref.Append("segment_length"))
}

func (hgs HlsGroupSettingsAttributes) SegmentsPerSubdirectory() terra.NumberValue {
	return terra.ReferenceAsNumber(hgs.ref.Append("segments_per_subdirectory"))
}

func (hgs HlsGroupSettingsAttributes) StreamInfResolution() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("stream_inf_resolution"))
}

func (hgs HlsGroupSettingsAttributes) TimedMetadataId3Frame() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("timed_metadata_id3_frame"))
}

func (hgs HlsGroupSettingsAttributes) TimedMetadataId3Period() terra.NumberValue {
	return terra.ReferenceAsNumber(hgs.ref.Append("timed_metadata_id3_period"))
}

func (hgs HlsGroupSettingsAttributes) TimestampDeltaMilliseconds() terra.NumberValue {
	return terra.ReferenceAsNumber(hgs.ref.Append("timestamp_delta_milliseconds"))
}

func (hgs HlsGroupSettingsAttributes) TsFileMode() terra.StringValue {
	return terra.ReferenceAsString(hgs.ref.Append("ts_file_mode"))
}

func (hgs HlsGroupSettingsAttributes) CaptionLanguageMappings() terra.SetValue[CaptionLanguageMappingsAttributes] {
	return terra.ReferenceAsSet[CaptionLanguageMappingsAttributes](hgs.ref.Append("caption_language_mappings"))
}

func (hgs HlsGroupSettingsAttributes) Destination() terra.ListValue[HlsGroupSettingsDestinationAttributes] {
	return terra.ReferenceAsList[HlsGroupSettingsDestinationAttributes](hgs.ref.Append("destination"))
}

func (hgs HlsGroupSettingsAttributes) HlsCdnSettings() terra.ListValue[HlsCdnSettingsAttributes] {
	return terra.ReferenceAsList[HlsCdnSettingsAttributes](hgs.ref.Append("hls_cdn_settings"))
}

func (hgs HlsGroupSettingsAttributes) KeyProviderSettings() terra.ListValue[KeyProviderSettingsAttributes] {
	return terra.ReferenceAsList[KeyProviderSettingsAttributes](hgs.ref.Append("key_provider_settings"))
}

type CaptionLanguageMappingsAttributes struct {
	ref terra.Reference
}

func (clm CaptionLanguageMappingsAttributes) InternalRef() (terra.Reference, error) {
	return clm.ref, nil
}

func (clm CaptionLanguageMappingsAttributes) InternalWithRef(ref terra.Reference) CaptionLanguageMappingsAttributes {
	return CaptionLanguageMappingsAttributes{ref: ref}
}

func (clm CaptionLanguageMappingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clm.ref.InternalTokens()
}

func (clm CaptionLanguageMappingsAttributes) CaptionChannel() terra.NumberValue {
	return terra.ReferenceAsNumber(clm.ref.Append("caption_channel"))
}

func (clm CaptionLanguageMappingsAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(clm.ref.Append("language_code"))
}

func (clm CaptionLanguageMappingsAttributes) LanguageDescription() terra.StringValue {
	return terra.ReferenceAsString(clm.ref.Append("language_description"))
}

type HlsGroupSettingsDestinationAttributes struct {
	ref terra.Reference
}

func (d HlsGroupSettingsDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d HlsGroupSettingsDestinationAttributes) InternalWithRef(ref terra.Reference) HlsGroupSettingsDestinationAttributes {
	return HlsGroupSettingsDestinationAttributes{ref: ref}
}

func (d HlsGroupSettingsDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d HlsGroupSettingsDestinationAttributes) DestinationRefId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("destination_ref_id"))
}

type HlsCdnSettingsAttributes struct {
	ref terra.Reference
}

func (hcs HlsCdnSettingsAttributes) InternalRef() (terra.Reference, error) {
	return hcs.ref, nil
}

func (hcs HlsCdnSettingsAttributes) InternalWithRef(ref terra.Reference) HlsCdnSettingsAttributes {
	return HlsCdnSettingsAttributes{ref: ref}
}

func (hcs HlsCdnSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hcs.ref.InternalTokens()
}

func (hcs HlsCdnSettingsAttributes) HlsAkamaiSettings() terra.ListValue[HlsAkamaiSettingsAttributes] {
	return terra.ReferenceAsList[HlsAkamaiSettingsAttributes](hcs.ref.Append("hls_akamai_settings"))
}

func (hcs HlsCdnSettingsAttributes) HlsBasicPutSettings() terra.ListValue[HlsBasicPutSettingsAttributes] {
	return terra.ReferenceAsList[HlsBasicPutSettingsAttributes](hcs.ref.Append("hls_basic_put_settings"))
}

func (hcs HlsCdnSettingsAttributes) HlsMediaStoreSettings() terra.ListValue[HlsMediaStoreSettingsAttributes] {
	return terra.ReferenceAsList[HlsMediaStoreSettingsAttributes](hcs.ref.Append("hls_media_store_settings"))
}

func (hcs HlsCdnSettingsAttributes) HlsS3Settings() terra.ListValue[HlsS3SettingsAttributes] {
	return terra.ReferenceAsList[HlsS3SettingsAttributes](hcs.ref.Append("hls_s3_settings"))
}

func (hcs HlsCdnSettingsAttributes) HlsWebdavSettings() terra.ListValue[HlsWebdavSettingsAttributes] {
	return terra.ReferenceAsList[HlsWebdavSettingsAttributes](hcs.ref.Append("hls_webdav_settings"))
}

type HlsAkamaiSettingsAttributes struct {
	ref terra.Reference
}

func (has HlsAkamaiSettingsAttributes) InternalRef() (terra.Reference, error) {
	return has.ref, nil
}

func (has HlsAkamaiSettingsAttributes) InternalWithRef(ref terra.Reference) HlsAkamaiSettingsAttributes {
	return HlsAkamaiSettingsAttributes{ref: ref}
}

func (has HlsAkamaiSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return has.ref.InternalTokens()
}

func (has HlsAkamaiSettingsAttributes) ConnectionRetryInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(has.ref.Append("connection_retry_interval"))
}

func (has HlsAkamaiSettingsAttributes) FilecacheDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(has.ref.Append("filecache_duration"))
}

func (has HlsAkamaiSettingsAttributes) HttpTransferMode() terra.StringValue {
	return terra.ReferenceAsString(has.ref.Append("http_transfer_mode"))
}

func (has HlsAkamaiSettingsAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(has.ref.Append("num_retries"))
}

func (has HlsAkamaiSettingsAttributes) RestartDelay() terra.NumberValue {
	return terra.ReferenceAsNumber(has.ref.Append("restart_delay"))
}

func (has HlsAkamaiSettingsAttributes) Salt() terra.StringValue {
	return terra.ReferenceAsString(has.ref.Append("salt"))
}

func (has HlsAkamaiSettingsAttributes) Token() terra.StringValue {
	return terra.ReferenceAsString(has.ref.Append("token"))
}

type HlsBasicPutSettingsAttributes struct {
	ref terra.Reference
}

func (hbps HlsBasicPutSettingsAttributes) InternalRef() (terra.Reference, error) {
	return hbps.ref, nil
}

func (hbps HlsBasicPutSettingsAttributes) InternalWithRef(ref terra.Reference) HlsBasicPutSettingsAttributes {
	return HlsBasicPutSettingsAttributes{ref: ref}
}

func (hbps HlsBasicPutSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hbps.ref.InternalTokens()
}

func (hbps HlsBasicPutSettingsAttributes) ConnectionRetryInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(hbps.ref.Append("connection_retry_interval"))
}

func (hbps HlsBasicPutSettingsAttributes) FilecacheDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(hbps.ref.Append("filecache_duration"))
}

func (hbps HlsBasicPutSettingsAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(hbps.ref.Append("num_retries"))
}

func (hbps HlsBasicPutSettingsAttributes) RestartDelay() terra.NumberValue {
	return terra.ReferenceAsNumber(hbps.ref.Append("restart_delay"))
}

type HlsMediaStoreSettingsAttributes struct {
	ref terra.Reference
}

func (hmss HlsMediaStoreSettingsAttributes) InternalRef() (terra.Reference, error) {
	return hmss.ref, nil
}

func (hmss HlsMediaStoreSettingsAttributes) InternalWithRef(ref terra.Reference) HlsMediaStoreSettingsAttributes {
	return HlsMediaStoreSettingsAttributes{ref: ref}
}

func (hmss HlsMediaStoreSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hmss.ref.InternalTokens()
}

func (hmss HlsMediaStoreSettingsAttributes) ConnectionRetryInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(hmss.ref.Append("connection_retry_interval"))
}

func (hmss HlsMediaStoreSettingsAttributes) FilecacheDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(hmss.ref.Append("filecache_duration"))
}

func (hmss HlsMediaStoreSettingsAttributes) MediaStoreStorageClass() terra.StringValue {
	return terra.ReferenceAsString(hmss.ref.Append("media_store_storage_class"))
}

func (hmss HlsMediaStoreSettingsAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(hmss.ref.Append("num_retries"))
}

func (hmss HlsMediaStoreSettingsAttributes) RestartDelay() terra.NumberValue {
	return terra.ReferenceAsNumber(hmss.ref.Append("restart_delay"))
}

type HlsS3SettingsAttributes struct {
	ref terra.Reference
}

func (hss HlsS3SettingsAttributes) InternalRef() (terra.Reference, error) {
	return hss.ref, nil
}

func (hss HlsS3SettingsAttributes) InternalWithRef(ref terra.Reference) HlsS3SettingsAttributes {
	return HlsS3SettingsAttributes{ref: ref}
}

func (hss HlsS3SettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hss.ref.InternalTokens()
}

func (hss HlsS3SettingsAttributes) CannedAcl() terra.StringValue {
	return terra.ReferenceAsString(hss.ref.Append("canned_acl"))
}

type HlsWebdavSettingsAttributes struct {
	ref terra.Reference
}

func (hws HlsWebdavSettingsAttributes) InternalRef() (terra.Reference, error) {
	return hws.ref, nil
}

func (hws HlsWebdavSettingsAttributes) InternalWithRef(ref terra.Reference) HlsWebdavSettingsAttributes {
	return HlsWebdavSettingsAttributes{ref: ref}
}

func (hws HlsWebdavSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hws.ref.InternalTokens()
}

func (hws HlsWebdavSettingsAttributes) ConnectionRetryInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(hws.ref.Append("connection_retry_interval"))
}

func (hws HlsWebdavSettingsAttributes) FilecacheDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(hws.ref.Append("filecache_duration"))
}

func (hws HlsWebdavSettingsAttributes) HttpTransferMode() terra.StringValue {
	return terra.ReferenceAsString(hws.ref.Append("http_transfer_mode"))
}

func (hws HlsWebdavSettingsAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(hws.ref.Append("num_retries"))
}

func (hws HlsWebdavSettingsAttributes) RestartDelay() terra.NumberValue {
	return terra.ReferenceAsNumber(hws.ref.Append("restart_delay"))
}

type KeyProviderSettingsAttributes struct {
	ref terra.Reference
}

func (kps KeyProviderSettingsAttributes) InternalRef() (terra.Reference, error) {
	return kps.ref, nil
}

func (kps KeyProviderSettingsAttributes) InternalWithRef(ref terra.Reference) KeyProviderSettingsAttributes {
	return KeyProviderSettingsAttributes{ref: ref}
}

func (kps KeyProviderSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kps.ref.InternalTokens()
}

func (kps KeyProviderSettingsAttributes) StaticKeySettings() terra.ListValue[StaticKeySettingsAttributes] {
	return terra.ReferenceAsList[StaticKeySettingsAttributes](kps.ref.Append("static_key_settings"))
}

type StaticKeySettingsAttributes struct {
	ref terra.Reference
}

func (sks StaticKeySettingsAttributes) InternalRef() (terra.Reference, error) {
	return sks.ref, nil
}

func (sks StaticKeySettingsAttributes) InternalWithRef(ref terra.Reference) StaticKeySettingsAttributes {
	return StaticKeySettingsAttributes{ref: ref}
}

func (sks StaticKeySettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sks.ref.InternalTokens()
}

func (sks StaticKeySettingsAttributes) StaticKeyValue() terra.StringValue {
	return terra.ReferenceAsString(sks.ref.Append("static_key_value"))
}

func (sks StaticKeySettingsAttributes) KeyProviderServer() terra.ListValue[KeyProviderServerAttributes] {
	return terra.ReferenceAsList[KeyProviderServerAttributes](sks.ref.Append("key_provider_server"))
}

type KeyProviderServerAttributes struct {
	ref terra.Reference
}

func (kps KeyProviderServerAttributes) InternalRef() (terra.Reference, error) {
	return kps.ref, nil
}

func (kps KeyProviderServerAttributes) InternalWithRef(ref terra.Reference) KeyProviderServerAttributes {
	return KeyProviderServerAttributes{ref: ref}
}

func (kps KeyProviderServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kps.ref.InternalTokens()
}

func (kps KeyProviderServerAttributes) PasswordParam() terra.StringValue {
	return terra.ReferenceAsString(kps.ref.Append("password_param"))
}

func (kps KeyProviderServerAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(kps.ref.Append("uri"))
}

func (kps KeyProviderServerAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(kps.ref.Append("username"))
}

type MediaPackageGroupSettingsAttributes struct {
	ref terra.Reference
}

func (mpgs MediaPackageGroupSettingsAttributes) InternalRef() (terra.Reference, error) {
	return mpgs.ref, nil
}

func (mpgs MediaPackageGroupSettingsAttributes) InternalWithRef(ref terra.Reference) MediaPackageGroupSettingsAttributes {
	return MediaPackageGroupSettingsAttributes{ref: ref}
}

func (mpgs MediaPackageGroupSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mpgs.ref.InternalTokens()
}

func (mpgs MediaPackageGroupSettingsAttributes) Destination() terra.ListValue[MediaPackageGroupSettingsDestinationAttributes] {
	return terra.ReferenceAsList[MediaPackageGroupSettingsDestinationAttributes](mpgs.ref.Append("destination"))
}

type MediaPackageGroupSettingsDestinationAttributes struct {
	ref terra.Reference
}

func (d MediaPackageGroupSettingsDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d MediaPackageGroupSettingsDestinationAttributes) InternalWithRef(ref terra.Reference) MediaPackageGroupSettingsDestinationAttributes {
	return MediaPackageGroupSettingsDestinationAttributes{ref: ref}
}

func (d MediaPackageGroupSettingsDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d MediaPackageGroupSettingsDestinationAttributes) DestinationRefId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("destination_ref_id"))
}

type MsSmoothGroupSettingsAttributes struct {
	ref terra.Reference
}

func (msgs MsSmoothGroupSettingsAttributes) InternalRef() (terra.Reference, error) {
	return msgs.ref, nil
}

func (msgs MsSmoothGroupSettingsAttributes) InternalWithRef(ref terra.Reference) MsSmoothGroupSettingsAttributes {
	return MsSmoothGroupSettingsAttributes{ref: ref}
}

func (msgs MsSmoothGroupSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return msgs.ref.InternalTokens()
}

func (msgs MsSmoothGroupSettingsAttributes) AcquisitionPointId() terra.StringValue {
	return terra.ReferenceAsString(msgs.ref.Append("acquisition_point_id"))
}

func (msgs MsSmoothGroupSettingsAttributes) AudioOnlyTimecodeControl() terra.StringValue {
	return terra.ReferenceAsString(msgs.ref.Append("audio_only_timecode_control"))
}

func (msgs MsSmoothGroupSettingsAttributes) CertificateMode() terra.StringValue {
	return terra.ReferenceAsString(msgs.ref.Append("certificate_mode"))
}

func (msgs MsSmoothGroupSettingsAttributes) ConnectionRetryInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(msgs.ref.Append("connection_retry_interval"))
}

func (msgs MsSmoothGroupSettingsAttributes) EventId() terra.StringValue {
	return terra.ReferenceAsString(msgs.ref.Append("event_id"))
}

func (msgs MsSmoothGroupSettingsAttributes) EventIdMode() terra.StringValue {
	return terra.ReferenceAsString(msgs.ref.Append("event_id_mode"))
}

func (msgs MsSmoothGroupSettingsAttributes) EventStopBehavior() terra.StringValue {
	return terra.ReferenceAsString(msgs.ref.Append("event_stop_behavior"))
}

func (msgs MsSmoothGroupSettingsAttributes) FilecacheDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(msgs.ref.Append("filecache_duration"))
}

func (msgs MsSmoothGroupSettingsAttributes) FragmentLength() terra.NumberValue {
	return terra.ReferenceAsNumber(msgs.ref.Append("fragment_length"))
}

func (msgs MsSmoothGroupSettingsAttributes) InputLossAction() terra.StringValue {
	return terra.ReferenceAsString(msgs.ref.Append("input_loss_action"))
}

func (msgs MsSmoothGroupSettingsAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(msgs.ref.Append("num_retries"))
}

func (msgs MsSmoothGroupSettingsAttributes) RestartDelay() terra.NumberValue {
	return terra.ReferenceAsNumber(msgs.ref.Append("restart_delay"))
}

func (msgs MsSmoothGroupSettingsAttributes) SegmentationMode() terra.StringValue {
	return terra.ReferenceAsString(msgs.ref.Append("segmentation_mode"))
}

func (msgs MsSmoothGroupSettingsAttributes) SendDelayMs() terra.NumberValue {
	return terra.ReferenceAsNumber(msgs.ref.Append("send_delay_ms"))
}

func (msgs MsSmoothGroupSettingsAttributes) SparseTrackType() terra.StringValue {
	return terra.ReferenceAsString(msgs.ref.Append("sparse_track_type"))
}

func (msgs MsSmoothGroupSettingsAttributes) StreamManifestBehavior() terra.StringValue {
	return terra.ReferenceAsString(msgs.ref.Append("stream_manifest_behavior"))
}

func (msgs MsSmoothGroupSettingsAttributes) TimestampOffset() terra.StringValue {
	return terra.ReferenceAsString(msgs.ref.Append("timestamp_offset"))
}

func (msgs MsSmoothGroupSettingsAttributes) TimestampOffsetMode() terra.StringValue {
	return terra.ReferenceAsString(msgs.ref.Append("timestamp_offset_mode"))
}

func (msgs MsSmoothGroupSettingsAttributes) Destination() terra.ListValue[MsSmoothGroupSettingsDestinationAttributes] {
	return terra.ReferenceAsList[MsSmoothGroupSettingsDestinationAttributes](msgs.ref.Append("destination"))
}

type MsSmoothGroupSettingsDestinationAttributes struct {
	ref terra.Reference
}

func (d MsSmoothGroupSettingsDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d MsSmoothGroupSettingsDestinationAttributes) InternalWithRef(ref terra.Reference) MsSmoothGroupSettingsDestinationAttributes {
	return MsSmoothGroupSettingsDestinationAttributes{ref: ref}
}

func (d MsSmoothGroupSettingsDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d MsSmoothGroupSettingsDestinationAttributes) DestinationRefId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("destination_ref_id"))
}

type MultiplexGroupSettingsAttributes struct {
	ref terra.Reference
}

func (mgs MultiplexGroupSettingsAttributes) InternalRef() (terra.Reference, error) {
	return mgs.ref, nil
}

func (mgs MultiplexGroupSettingsAttributes) InternalWithRef(ref terra.Reference) MultiplexGroupSettingsAttributes {
	return MultiplexGroupSettingsAttributes{ref: ref}
}

func (mgs MultiplexGroupSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mgs.ref.InternalTokens()
}

type RtmpGroupSettingsAttributes struct {
	ref terra.Reference
}

func (rgs RtmpGroupSettingsAttributes) InternalRef() (terra.Reference, error) {
	return rgs.ref, nil
}

func (rgs RtmpGroupSettingsAttributes) InternalWithRef(ref terra.Reference) RtmpGroupSettingsAttributes {
	return RtmpGroupSettingsAttributes{ref: ref}
}

func (rgs RtmpGroupSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rgs.ref.InternalTokens()
}

func (rgs RtmpGroupSettingsAttributes) AdMarkers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rgs.ref.Append("ad_markers"))
}

func (rgs RtmpGroupSettingsAttributes) AuthenticationScheme() terra.StringValue {
	return terra.ReferenceAsString(rgs.ref.Append("authentication_scheme"))
}

func (rgs RtmpGroupSettingsAttributes) CacheFullBehavior() terra.StringValue {
	return terra.ReferenceAsString(rgs.ref.Append("cache_full_behavior"))
}

func (rgs RtmpGroupSettingsAttributes) CacheLength() terra.NumberValue {
	return terra.ReferenceAsNumber(rgs.ref.Append("cache_length"))
}

func (rgs RtmpGroupSettingsAttributes) CaptionData() terra.StringValue {
	return terra.ReferenceAsString(rgs.ref.Append("caption_data"))
}

func (rgs RtmpGroupSettingsAttributes) InputLossAction() terra.StringValue {
	return terra.ReferenceAsString(rgs.ref.Append("input_loss_action"))
}

func (rgs RtmpGroupSettingsAttributes) RestartDelay() terra.NumberValue {
	return terra.ReferenceAsNumber(rgs.ref.Append("restart_delay"))
}

type UdpGroupSettingsAttributes struct {
	ref terra.Reference
}

func (ugs UdpGroupSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ugs.ref, nil
}

func (ugs UdpGroupSettingsAttributes) InternalWithRef(ref terra.Reference) UdpGroupSettingsAttributes {
	return UdpGroupSettingsAttributes{ref: ref}
}

func (ugs UdpGroupSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ugs.ref.InternalTokens()
}

func (ugs UdpGroupSettingsAttributes) InputLossAction() terra.StringValue {
	return terra.ReferenceAsString(ugs.ref.Append("input_loss_action"))
}

func (ugs UdpGroupSettingsAttributes) TimedMetadataId3Frame() terra.StringValue {
	return terra.ReferenceAsString(ugs.ref.Append("timed_metadata_id3_frame"))
}

func (ugs UdpGroupSettingsAttributes) TimedMetadataId3Period() terra.NumberValue {
	return terra.ReferenceAsNumber(ugs.ref.Append("timed_metadata_id3_period"))
}

type OutputsAttributes struct {
	ref terra.Reference
}

func (o OutputsAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o OutputsAttributes) InternalWithRef(ref terra.Reference) OutputsAttributes {
	return OutputsAttributes{ref: ref}
}

func (o OutputsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o OutputsAttributes) AudioDescriptionNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](o.ref.Append("audio_description_names"))
}

func (o OutputsAttributes) CaptionDescriptionNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](o.ref.Append("caption_description_names"))
}

func (o OutputsAttributes) OutputName() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("output_name"))
}

func (o OutputsAttributes) VideoDescriptionName() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("video_description_name"))
}

func (o OutputsAttributes) OutputSettings() terra.ListValue[OutputSettingsAttributes] {
	return terra.ReferenceAsList[OutputSettingsAttributes](o.ref.Append("output_settings"))
}

type OutputSettingsAttributes struct {
	ref terra.Reference
}

func (os OutputSettingsAttributes) InternalRef() (terra.Reference, error) {
	return os.ref, nil
}

func (os OutputSettingsAttributes) InternalWithRef(ref terra.Reference) OutputSettingsAttributes {
	return OutputSettingsAttributes{ref: ref}
}

func (os OutputSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return os.ref.InternalTokens()
}

func (os OutputSettingsAttributes) ArchiveOutputSettings() terra.ListValue[ArchiveOutputSettingsAttributes] {
	return terra.ReferenceAsList[ArchiveOutputSettingsAttributes](os.ref.Append("archive_output_settings"))
}

func (os OutputSettingsAttributes) FrameCaptureOutputSettings() terra.ListValue[FrameCaptureOutputSettingsAttributes] {
	return terra.ReferenceAsList[FrameCaptureOutputSettingsAttributes](os.ref.Append("frame_capture_output_settings"))
}

func (os OutputSettingsAttributes) HlsOutputSettings() terra.ListValue[HlsOutputSettingsAttributes] {
	return terra.ReferenceAsList[HlsOutputSettingsAttributes](os.ref.Append("hls_output_settings"))
}

func (os OutputSettingsAttributes) MediaPackageOutputSettings() terra.ListValue[MediaPackageOutputSettingsAttributes] {
	return terra.ReferenceAsList[MediaPackageOutputSettingsAttributes](os.ref.Append("media_package_output_settings"))
}

func (os OutputSettingsAttributes) MsSmoothOutputSettings() terra.ListValue[MsSmoothOutputSettingsAttributes] {
	return terra.ReferenceAsList[MsSmoothOutputSettingsAttributes](os.ref.Append("ms_smooth_output_settings"))
}

func (os OutputSettingsAttributes) MultiplexOutputSettings() terra.ListValue[MultiplexOutputSettingsAttributes] {
	return terra.ReferenceAsList[MultiplexOutputSettingsAttributes](os.ref.Append("multiplex_output_settings"))
}

func (os OutputSettingsAttributes) RtmpOutputSettings() terra.ListValue[RtmpOutputSettingsAttributes] {
	return terra.ReferenceAsList[RtmpOutputSettingsAttributes](os.ref.Append("rtmp_output_settings"))
}

func (os OutputSettingsAttributes) UdpOutputSettings() terra.ListValue[UdpOutputSettingsAttributes] {
	return terra.ReferenceAsList[UdpOutputSettingsAttributes](os.ref.Append("udp_output_settings"))
}

type ArchiveOutputSettingsAttributes struct {
	ref terra.Reference
}

func (aos ArchiveOutputSettingsAttributes) InternalRef() (terra.Reference, error) {
	return aos.ref, nil
}

func (aos ArchiveOutputSettingsAttributes) InternalWithRef(ref terra.Reference) ArchiveOutputSettingsAttributes {
	return ArchiveOutputSettingsAttributes{ref: ref}
}

func (aos ArchiveOutputSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aos.ref.InternalTokens()
}

func (aos ArchiveOutputSettingsAttributes) Extension() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("extension"))
}

func (aos ArchiveOutputSettingsAttributes) NameModifier() terra.StringValue {
	return terra.ReferenceAsString(aos.ref.Append("name_modifier"))
}

func (aos ArchiveOutputSettingsAttributes) ContainerSettings() terra.ListValue[ArchiveOutputSettingsContainerSettingsAttributes] {
	return terra.ReferenceAsList[ArchiveOutputSettingsContainerSettingsAttributes](aos.ref.Append("container_settings"))
}

type ArchiveOutputSettingsContainerSettingsAttributes struct {
	ref terra.Reference
}

func (cs ArchiveOutputSettingsContainerSettingsAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs ArchiveOutputSettingsContainerSettingsAttributes) InternalWithRef(ref terra.Reference) ArchiveOutputSettingsContainerSettingsAttributes {
	return ArchiveOutputSettingsContainerSettingsAttributes{ref: ref}
}

func (cs ArchiveOutputSettingsContainerSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs ArchiveOutputSettingsContainerSettingsAttributes) M2TsSettings() terra.ListValue[ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes] {
	return terra.ReferenceAsList[ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes](cs.ref.Append("m2ts_settings"))
}

func (cs ArchiveOutputSettingsContainerSettingsAttributes) RawSettings() terra.ListValue[RawSettingsAttributes] {
	return terra.ReferenceAsList[RawSettingsAttributes](cs.ref.Append("raw_settings"))
}

type ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes struct {
	ref terra.Reference
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) InternalWithRef(ref terra.Reference) ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes {
	return ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes{ref: ref}
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) AbsentInputAudioBehavior() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("absent_input_audio_behavior"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) Arib() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("arib"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) AribCaptionsPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("arib_captions_pid"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) AribCaptionsPidControl() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("arib_captions_pid_control"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) AudioBufferModel() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("audio_buffer_model"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) AudioFramesPerPes() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("audio_frames_per_pes"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) AudioPids() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("audio_pids"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) AudioStreamType() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("audio_stream_type"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) Bitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("bitrate"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) BufferModel() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("buffer_model"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) CcDescriptor() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("cc_descriptor"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) DvbSubPids() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("dvb_sub_pids"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) DvbTeletextPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("dvb_teletext_pid"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) Ebif() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("ebif"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) EbpAudioInterval() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("ebp_audio_interval"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) EbpLookaheadMs() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("ebp_lookahead_ms"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) EbpPlacement() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("ebp_placement"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) EcmPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("ecm_pid"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) EsRateInPes() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("es_rate_in_pes"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) EtvPlatformPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("etv_platform_pid"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) EtvSignalPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("etv_signal_pid"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) FragmentTime() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("fragment_time"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) Klv() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("klv"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) KlvDataPids() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("klv_data_pids"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) NielsenId3Behavior() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("nielsen_id3_behavior"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) NullPacketBitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("null_packet_bitrate"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) PatInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("pat_interval"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) PcrControl() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("pcr_control"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) PcrPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("pcr_period"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) PcrPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("pcr_pid"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) PmtInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("pmt_interval"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) PmtPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("pmt_pid"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) ProgramNum() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("program_num"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) RateMode() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("rate_mode"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) Scte27Pids() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("scte27_pids"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) Scte35Control() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("scte35_control"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) Scte35Pid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("scte35_pid"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) SegmentationMarkers() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("segmentation_markers"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) SegmentationStyle() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("segmentation_style"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) SegmentationTime() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("segmentation_time"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) TimedMetadataBehavior() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("timed_metadata_behavior"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) TimedMetadataPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("timed_metadata_pid"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) TransportStreamId() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("transport_stream_id"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) VideoPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("video_pid"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) DvbNitSettings() terra.ListValue[ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes] {
	return terra.ReferenceAsList[ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes](ms.ref.Append("dvb_nit_settings"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) DvbSdtSettings() terra.ListValue[ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes] {
	return terra.ReferenceAsList[ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes](ms.ref.Append("dvb_sdt_settings"))
}

func (ms ArchiveOutputSettingsContainerSettingsM2TsSettingsAttributes) DvbTdtSettings() terra.ListValue[ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes] {
	return terra.ReferenceAsList[ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes](ms.ref.Append("dvb_tdt_settings"))
}

type ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes struct {
	ref terra.Reference
}

func (dns ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes) InternalRef() (terra.Reference, error) {
	return dns.ref, nil
}

func (dns ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes) InternalWithRef(ref terra.Reference) ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes {
	return ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes{ref: ref}
}

func (dns ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dns.ref.InternalTokens()
}

func (dns ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes) NetworkId() terra.NumberValue {
	return terra.ReferenceAsNumber(dns.ref.Append("network_id"))
}

func (dns ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes) NetworkName() terra.StringValue {
	return terra.ReferenceAsString(dns.ref.Append("network_name"))
}

func (dns ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes) RepInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(dns.ref.Append("rep_interval"))
}

type ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes struct {
	ref terra.Reference
}

func (dss ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) InternalRef() (terra.Reference, error) {
	return dss.ref, nil
}

func (dss ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) InternalWithRef(ref terra.Reference) ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes {
	return ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes{ref: ref}
}

func (dss ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dss.ref.InternalTokens()
}

func (dss ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) OutputSdt() terra.StringValue {
	return terra.ReferenceAsString(dss.ref.Append("output_sdt"))
}

func (dss ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) RepInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(dss.ref.Append("rep_interval"))
}

func (dss ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(dss.ref.Append("service_name"))
}

func (dss ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) ServiceProviderName() terra.StringValue {
	return terra.ReferenceAsString(dss.ref.Append("service_provider_name"))
}

type ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes struct {
	ref terra.Reference
}

func (dts ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes) InternalRef() (terra.Reference, error) {
	return dts.ref, nil
}

func (dts ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes) InternalWithRef(ref terra.Reference) ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes {
	return ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes{ref: ref}
}

func (dts ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dts.ref.InternalTokens()
}

func (dts ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes) RepInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(dts.ref.Append("rep_interval"))
}

type RawSettingsAttributes struct {
	ref terra.Reference
}

func (rs RawSettingsAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs RawSettingsAttributes) InternalWithRef(ref terra.Reference) RawSettingsAttributes {
	return RawSettingsAttributes{ref: ref}
}

func (rs RawSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

type FrameCaptureOutputSettingsAttributes struct {
	ref terra.Reference
}

func (fcos FrameCaptureOutputSettingsAttributes) InternalRef() (terra.Reference, error) {
	return fcos.ref, nil
}

func (fcos FrameCaptureOutputSettingsAttributes) InternalWithRef(ref terra.Reference) FrameCaptureOutputSettingsAttributes {
	return FrameCaptureOutputSettingsAttributes{ref: ref}
}

func (fcos FrameCaptureOutputSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fcos.ref.InternalTokens()
}

func (fcos FrameCaptureOutputSettingsAttributes) NameModifier() terra.StringValue {
	return terra.ReferenceAsString(fcos.ref.Append("name_modifier"))
}

type HlsOutputSettingsAttributes struct {
	ref terra.Reference
}

func (hos HlsOutputSettingsAttributes) InternalRef() (terra.Reference, error) {
	return hos.ref, nil
}

func (hos HlsOutputSettingsAttributes) InternalWithRef(ref terra.Reference) HlsOutputSettingsAttributes {
	return HlsOutputSettingsAttributes{ref: ref}
}

func (hos HlsOutputSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hos.ref.InternalTokens()
}

func (hos HlsOutputSettingsAttributes) H265PackagingType() terra.StringValue {
	return terra.ReferenceAsString(hos.ref.Append("h265_packaging_type"))
}

func (hos HlsOutputSettingsAttributes) NameModifier() terra.StringValue {
	return terra.ReferenceAsString(hos.ref.Append("name_modifier"))
}

func (hos HlsOutputSettingsAttributes) SegmentModifier() terra.StringValue {
	return terra.ReferenceAsString(hos.ref.Append("segment_modifier"))
}

func (hos HlsOutputSettingsAttributes) HlsSettings() terra.ListValue[HlsSettingsAttributes] {
	return terra.ReferenceAsList[HlsSettingsAttributes](hos.ref.Append("hls_settings"))
}

type HlsSettingsAttributes struct {
	ref terra.Reference
}

func (hs HlsSettingsAttributes) InternalRef() (terra.Reference, error) {
	return hs.ref, nil
}

func (hs HlsSettingsAttributes) InternalWithRef(ref terra.Reference) HlsSettingsAttributes {
	return HlsSettingsAttributes{ref: ref}
}

func (hs HlsSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hs.ref.InternalTokens()
}

func (hs HlsSettingsAttributes) AudioOnlyHlsSettings() terra.ListValue[AudioOnlyHlsSettingsAttributes] {
	return terra.ReferenceAsList[AudioOnlyHlsSettingsAttributes](hs.ref.Append("audio_only_hls_settings"))
}

func (hs HlsSettingsAttributes) Fmp4HlsSettings() terra.ListValue[Fmp4HlsSettingsAttributes] {
	return terra.ReferenceAsList[Fmp4HlsSettingsAttributes](hs.ref.Append("fmp4_hls_settings"))
}

func (hs HlsSettingsAttributes) FrameCaptureHlsSettings() terra.ListValue[FrameCaptureHlsSettingsAttributes] {
	return terra.ReferenceAsList[FrameCaptureHlsSettingsAttributes](hs.ref.Append("frame_capture_hls_settings"))
}

func (hs HlsSettingsAttributes) StandardHlsSettings() terra.ListValue[StandardHlsSettingsAttributes] {
	return terra.ReferenceAsList[StandardHlsSettingsAttributes](hs.ref.Append("standard_hls_settings"))
}

type AudioOnlyHlsSettingsAttributes struct {
	ref terra.Reference
}

func (aohs AudioOnlyHlsSettingsAttributes) InternalRef() (terra.Reference, error) {
	return aohs.ref, nil
}

func (aohs AudioOnlyHlsSettingsAttributes) InternalWithRef(ref terra.Reference) AudioOnlyHlsSettingsAttributes {
	return AudioOnlyHlsSettingsAttributes{ref: ref}
}

func (aohs AudioOnlyHlsSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aohs.ref.InternalTokens()
}

func (aohs AudioOnlyHlsSettingsAttributes) AudioGroupId() terra.StringValue {
	return terra.ReferenceAsString(aohs.ref.Append("audio_group_id"))
}

func (aohs AudioOnlyHlsSettingsAttributes) AudioTrackType() terra.StringValue {
	return terra.ReferenceAsString(aohs.ref.Append("audio_track_type"))
}

func (aohs AudioOnlyHlsSettingsAttributes) SegmentType() terra.StringValue {
	return terra.ReferenceAsString(aohs.ref.Append("segment_type"))
}

func (aohs AudioOnlyHlsSettingsAttributes) AudioOnlyImage() terra.ListValue[AudioOnlyImageAttributes] {
	return terra.ReferenceAsList[AudioOnlyImageAttributes](aohs.ref.Append("audio_only_image"))
}

type AudioOnlyImageAttributes struct {
	ref terra.Reference
}

func (aoi AudioOnlyImageAttributes) InternalRef() (terra.Reference, error) {
	return aoi.ref, nil
}

func (aoi AudioOnlyImageAttributes) InternalWithRef(ref terra.Reference) AudioOnlyImageAttributes {
	return AudioOnlyImageAttributes{ref: ref}
}

func (aoi AudioOnlyImageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aoi.ref.InternalTokens()
}

func (aoi AudioOnlyImageAttributes) PasswordParam() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("password_param"))
}

func (aoi AudioOnlyImageAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("uri"))
}

func (aoi AudioOnlyImageAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(aoi.ref.Append("username"))
}

type Fmp4HlsSettingsAttributes struct {
	ref terra.Reference
}

func (fhs Fmp4HlsSettingsAttributes) InternalRef() (terra.Reference, error) {
	return fhs.ref, nil
}

func (fhs Fmp4HlsSettingsAttributes) InternalWithRef(ref terra.Reference) Fmp4HlsSettingsAttributes {
	return Fmp4HlsSettingsAttributes{ref: ref}
}

func (fhs Fmp4HlsSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fhs.ref.InternalTokens()
}

func (fhs Fmp4HlsSettingsAttributes) AudioRenditionSets() terra.StringValue {
	return terra.ReferenceAsString(fhs.ref.Append("audio_rendition_sets"))
}

func (fhs Fmp4HlsSettingsAttributes) NielsenId3Behavior() terra.StringValue {
	return terra.ReferenceAsString(fhs.ref.Append("nielsen_id3_behavior"))
}

func (fhs Fmp4HlsSettingsAttributes) TimedMetadataBehavior() terra.StringValue {
	return terra.ReferenceAsString(fhs.ref.Append("timed_metadata_behavior"))
}

type FrameCaptureHlsSettingsAttributes struct {
	ref terra.Reference
}

func (fchs FrameCaptureHlsSettingsAttributes) InternalRef() (terra.Reference, error) {
	return fchs.ref, nil
}

func (fchs FrameCaptureHlsSettingsAttributes) InternalWithRef(ref terra.Reference) FrameCaptureHlsSettingsAttributes {
	return FrameCaptureHlsSettingsAttributes{ref: ref}
}

func (fchs FrameCaptureHlsSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fchs.ref.InternalTokens()
}

type StandardHlsSettingsAttributes struct {
	ref terra.Reference
}

func (shs StandardHlsSettingsAttributes) InternalRef() (terra.Reference, error) {
	return shs.ref, nil
}

func (shs StandardHlsSettingsAttributes) InternalWithRef(ref terra.Reference) StandardHlsSettingsAttributes {
	return StandardHlsSettingsAttributes{ref: ref}
}

func (shs StandardHlsSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return shs.ref.InternalTokens()
}

func (shs StandardHlsSettingsAttributes) AudioRenditionSets() terra.StringValue {
	return terra.ReferenceAsString(shs.ref.Append("audio_rendition_sets"))
}

func (shs StandardHlsSettingsAttributes) M3U8Settings() terra.ListValue[M3U8SettingsAttributes] {
	return terra.ReferenceAsList[M3U8SettingsAttributes](shs.ref.Append("m3u8_settings"))
}

type M3U8SettingsAttributes struct {
	ref terra.Reference
}

func (ms M3U8SettingsAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms M3U8SettingsAttributes) InternalWithRef(ref terra.Reference) M3U8SettingsAttributes {
	return M3U8SettingsAttributes{ref: ref}
}

func (ms M3U8SettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms M3U8SettingsAttributes) AudioFramesPerPes() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("audio_frames_per_pes"))
}

func (ms M3U8SettingsAttributes) AudioPids() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("audio_pids"))
}

func (ms M3U8SettingsAttributes) EcmPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("ecm_pid"))
}

func (ms M3U8SettingsAttributes) NielsenId3Behavior() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("nielsen_id3_behavior"))
}

func (ms M3U8SettingsAttributes) PatInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("pat_interval"))
}

func (ms M3U8SettingsAttributes) PcrControl() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("pcr_control"))
}

func (ms M3U8SettingsAttributes) PcrPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("pcr_period"))
}

func (ms M3U8SettingsAttributes) PcrPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("pcr_pid"))
}

func (ms M3U8SettingsAttributes) PmtInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("pmt_interval"))
}

func (ms M3U8SettingsAttributes) PmtPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("pmt_pid"))
}

func (ms M3U8SettingsAttributes) ProgramNum() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("program_num"))
}

func (ms M3U8SettingsAttributes) Scte35Behavior() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("scte35_behavior"))
}

func (ms M3U8SettingsAttributes) Scte35Pid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("scte35_pid"))
}

func (ms M3U8SettingsAttributes) TimedMetadataBehavior() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("timed_metadata_behavior"))
}

func (ms M3U8SettingsAttributes) TimedMetadataPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("timed_metadata_pid"))
}

func (ms M3U8SettingsAttributes) TransportStreamId() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("transport_stream_id"))
}

func (ms M3U8SettingsAttributes) VideoPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("video_pid"))
}

type MediaPackageOutputSettingsAttributes struct {
	ref terra.Reference
}

func (mpos MediaPackageOutputSettingsAttributes) InternalRef() (terra.Reference, error) {
	return mpos.ref, nil
}

func (mpos MediaPackageOutputSettingsAttributes) InternalWithRef(ref terra.Reference) MediaPackageOutputSettingsAttributes {
	return MediaPackageOutputSettingsAttributes{ref: ref}
}

func (mpos MediaPackageOutputSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mpos.ref.InternalTokens()
}

type MsSmoothOutputSettingsAttributes struct {
	ref terra.Reference
}

func (msos MsSmoothOutputSettingsAttributes) InternalRef() (terra.Reference, error) {
	return msos.ref, nil
}

func (msos MsSmoothOutputSettingsAttributes) InternalWithRef(ref terra.Reference) MsSmoothOutputSettingsAttributes {
	return MsSmoothOutputSettingsAttributes{ref: ref}
}

func (msos MsSmoothOutputSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return msos.ref.InternalTokens()
}

func (msos MsSmoothOutputSettingsAttributes) H265PackagingType() terra.StringValue {
	return terra.ReferenceAsString(msos.ref.Append("h265_packaging_type"))
}

func (msos MsSmoothOutputSettingsAttributes) NameModifier() terra.StringValue {
	return terra.ReferenceAsString(msos.ref.Append("name_modifier"))
}

type MultiplexOutputSettingsAttributes struct {
	ref terra.Reference
}

func (mos MultiplexOutputSettingsAttributes) InternalRef() (terra.Reference, error) {
	return mos.ref, nil
}

func (mos MultiplexOutputSettingsAttributes) InternalWithRef(ref terra.Reference) MultiplexOutputSettingsAttributes {
	return MultiplexOutputSettingsAttributes{ref: ref}
}

func (mos MultiplexOutputSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mos.ref.InternalTokens()
}

func (mos MultiplexOutputSettingsAttributes) Destination() terra.ListValue[MultiplexOutputSettingsDestinationAttributes] {
	return terra.ReferenceAsList[MultiplexOutputSettingsDestinationAttributes](mos.ref.Append("destination"))
}

type MultiplexOutputSettingsDestinationAttributes struct {
	ref terra.Reference
}

func (d MultiplexOutputSettingsDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d MultiplexOutputSettingsDestinationAttributes) InternalWithRef(ref terra.Reference) MultiplexOutputSettingsDestinationAttributes {
	return MultiplexOutputSettingsDestinationAttributes{ref: ref}
}

func (d MultiplexOutputSettingsDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d MultiplexOutputSettingsDestinationAttributes) DestinationRefId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("destination_ref_id"))
}

type RtmpOutputSettingsAttributes struct {
	ref terra.Reference
}

func (ros RtmpOutputSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ros.ref, nil
}

func (ros RtmpOutputSettingsAttributes) InternalWithRef(ref terra.Reference) RtmpOutputSettingsAttributes {
	return RtmpOutputSettingsAttributes{ref: ref}
}

func (ros RtmpOutputSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ros.ref.InternalTokens()
}

func (ros RtmpOutputSettingsAttributes) CertficateMode() terra.StringValue {
	return terra.ReferenceAsString(ros.ref.Append("certficate_mode"))
}

func (ros RtmpOutputSettingsAttributes) ConnectionRetryInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(ros.ref.Append("connection_retry_interval"))
}

func (ros RtmpOutputSettingsAttributes) NumRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(ros.ref.Append("num_retries"))
}

func (ros RtmpOutputSettingsAttributes) Destination() terra.ListValue[RtmpOutputSettingsDestinationAttributes] {
	return terra.ReferenceAsList[RtmpOutputSettingsDestinationAttributes](ros.ref.Append("destination"))
}

type RtmpOutputSettingsDestinationAttributes struct {
	ref terra.Reference
}

func (d RtmpOutputSettingsDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d RtmpOutputSettingsDestinationAttributes) InternalWithRef(ref terra.Reference) RtmpOutputSettingsDestinationAttributes {
	return RtmpOutputSettingsDestinationAttributes{ref: ref}
}

func (d RtmpOutputSettingsDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d RtmpOutputSettingsDestinationAttributes) DestinationRefId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("destination_ref_id"))
}

type UdpOutputSettingsAttributes struct {
	ref terra.Reference
}

func (uos UdpOutputSettingsAttributes) InternalRef() (terra.Reference, error) {
	return uos.ref, nil
}

func (uos UdpOutputSettingsAttributes) InternalWithRef(ref terra.Reference) UdpOutputSettingsAttributes {
	return UdpOutputSettingsAttributes{ref: ref}
}

func (uos UdpOutputSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uos.ref.InternalTokens()
}

func (uos UdpOutputSettingsAttributes) BufferMsec() terra.NumberValue {
	return terra.ReferenceAsNumber(uos.ref.Append("buffer_msec"))
}

func (uos UdpOutputSettingsAttributes) ContainerSettings() terra.ListValue[UdpOutputSettingsContainerSettingsAttributes] {
	return terra.ReferenceAsList[UdpOutputSettingsContainerSettingsAttributes](uos.ref.Append("container_settings"))
}

func (uos UdpOutputSettingsAttributes) Destination() terra.ListValue[UdpOutputSettingsDestinationAttributes] {
	return terra.ReferenceAsList[UdpOutputSettingsDestinationAttributes](uos.ref.Append("destination"))
}

func (uos UdpOutputSettingsAttributes) FecOutputSettings() terra.ListValue[FecOutputSettingsAttributes] {
	return terra.ReferenceAsList[FecOutputSettingsAttributes](uos.ref.Append("fec_output_settings"))
}

type UdpOutputSettingsContainerSettingsAttributes struct {
	ref terra.Reference
}

func (cs UdpOutputSettingsContainerSettingsAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs UdpOutputSettingsContainerSettingsAttributes) InternalWithRef(ref terra.Reference) UdpOutputSettingsContainerSettingsAttributes {
	return UdpOutputSettingsContainerSettingsAttributes{ref: ref}
}

func (cs UdpOutputSettingsContainerSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs UdpOutputSettingsContainerSettingsAttributes) M2TsSettings() terra.ListValue[UdpOutputSettingsContainerSettingsM2TsSettingsAttributes] {
	return terra.ReferenceAsList[UdpOutputSettingsContainerSettingsM2TsSettingsAttributes](cs.ref.Append("m2ts_settings"))
}

type UdpOutputSettingsContainerSettingsM2TsSettingsAttributes struct {
	ref terra.Reference
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) InternalWithRef(ref terra.Reference) UdpOutputSettingsContainerSettingsM2TsSettingsAttributes {
	return UdpOutputSettingsContainerSettingsM2TsSettingsAttributes{ref: ref}
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) AbsentInputAudioBehavior() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("absent_input_audio_behavior"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) Arib() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("arib"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) AribCaptionsPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("arib_captions_pid"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) AribCaptionsPidControl() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("arib_captions_pid_control"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) AudioBufferModel() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("audio_buffer_model"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) AudioFramesPerPes() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("audio_frames_per_pes"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) AudioPids() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("audio_pids"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) AudioStreamType() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("audio_stream_type"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) Bitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("bitrate"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) BufferModel() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("buffer_model"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) CcDescriptor() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("cc_descriptor"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) DvbSubPids() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("dvb_sub_pids"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) DvbTeletextPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("dvb_teletext_pid"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) Ebif() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("ebif"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) EbpAudioInterval() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("ebp_audio_interval"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) EbpLookaheadMs() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("ebp_lookahead_ms"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) EbpPlacement() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("ebp_placement"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) EcmPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("ecm_pid"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) EsRateInPes() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("es_rate_in_pes"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) EtvPlatformPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("etv_platform_pid"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) EtvSignalPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("etv_signal_pid"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) FragmentTime() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("fragment_time"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) Klv() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("klv"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) KlvDataPids() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("klv_data_pids"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) NielsenId3Behavior() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("nielsen_id3_behavior"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) NullPacketBitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("null_packet_bitrate"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) PatInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("pat_interval"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) PcrControl() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("pcr_control"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) PcrPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("pcr_period"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) PcrPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("pcr_pid"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) PmtInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("pmt_interval"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) PmtPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("pmt_pid"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) ProgramNum() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("program_num"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) RateMode() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("rate_mode"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) Scte27Pids() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("scte27_pids"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) Scte35Control() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("scte35_control"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) Scte35Pid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("scte35_pid"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) SegmentationMarkers() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("segmentation_markers"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) SegmentationStyle() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("segmentation_style"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) SegmentationTime() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("segmentation_time"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) TimedMetadataBehavior() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("timed_metadata_behavior"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) TimedMetadataPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("timed_metadata_pid"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) TransportStreamId() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("transport_stream_id"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) VideoPid() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("video_pid"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) DvbNitSettings() terra.ListValue[UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes] {
	return terra.ReferenceAsList[UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes](ms.ref.Append("dvb_nit_settings"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) DvbSdtSettings() terra.ListValue[UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes] {
	return terra.ReferenceAsList[UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes](ms.ref.Append("dvb_sdt_settings"))
}

func (ms UdpOutputSettingsContainerSettingsM2TsSettingsAttributes) DvbTdtSettings() terra.ListValue[UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes] {
	return terra.ReferenceAsList[UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes](ms.ref.Append("dvb_tdt_settings"))
}

type UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes struct {
	ref terra.Reference
}

func (dns UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes) InternalRef() (terra.Reference, error) {
	return dns.ref, nil
}

func (dns UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes) InternalWithRef(ref terra.Reference) UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes {
	return UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes{ref: ref}
}

func (dns UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dns.ref.InternalTokens()
}

func (dns UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes) NetworkId() terra.NumberValue {
	return terra.ReferenceAsNumber(dns.ref.Append("network_id"))
}

func (dns UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes) NetworkName() terra.StringValue {
	return terra.ReferenceAsString(dns.ref.Append("network_name"))
}

func (dns UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsAttributes) RepInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(dns.ref.Append("rep_interval"))
}

type UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes struct {
	ref terra.Reference
}

func (dss UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) InternalRef() (terra.Reference, error) {
	return dss.ref, nil
}

func (dss UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) InternalWithRef(ref terra.Reference) UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes {
	return UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes{ref: ref}
}

func (dss UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dss.ref.InternalTokens()
}

func (dss UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) OutputSdt() terra.StringValue {
	return terra.ReferenceAsString(dss.ref.Append("output_sdt"))
}

func (dss UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) RepInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(dss.ref.Append("rep_interval"))
}

func (dss UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(dss.ref.Append("service_name"))
}

func (dss UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsAttributes) ServiceProviderName() terra.StringValue {
	return terra.ReferenceAsString(dss.ref.Append("service_provider_name"))
}

type UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes struct {
	ref terra.Reference
}

func (dts UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes) InternalRef() (terra.Reference, error) {
	return dts.ref, nil
}

func (dts UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes) InternalWithRef(ref terra.Reference) UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes {
	return UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes{ref: ref}
}

func (dts UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dts.ref.InternalTokens()
}

func (dts UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsAttributes) RepInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(dts.ref.Append("rep_interval"))
}

type UdpOutputSettingsDestinationAttributes struct {
	ref terra.Reference
}

func (d UdpOutputSettingsDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d UdpOutputSettingsDestinationAttributes) InternalWithRef(ref terra.Reference) UdpOutputSettingsDestinationAttributes {
	return UdpOutputSettingsDestinationAttributes{ref: ref}
}

func (d UdpOutputSettingsDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d UdpOutputSettingsDestinationAttributes) DestinationRefId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("destination_ref_id"))
}

type FecOutputSettingsAttributes struct {
	ref terra.Reference
}

func (fos FecOutputSettingsAttributes) InternalRef() (terra.Reference, error) {
	return fos.ref, nil
}

func (fos FecOutputSettingsAttributes) InternalWithRef(ref terra.Reference) FecOutputSettingsAttributes {
	return FecOutputSettingsAttributes{ref: ref}
}

func (fos FecOutputSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fos.ref.InternalTokens()
}

func (fos FecOutputSettingsAttributes) ColumnDepth() terra.NumberValue {
	return terra.ReferenceAsNumber(fos.ref.Append("column_depth"))
}

func (fos FecOutputSettingsAttributes) IncludeFec() terra.StringValue {
	return terra.ReferenceAsString(fos.ref.Append("include_fec"))
}

func (fos FecOutputSettingsAttributes) RowLength() terra.NumberValue {
	return terra.ReferenceAsNumber(fos.ref.Append("row_length"))
}

type TimecodeConfigAttributes struct {
	ref terra.Reference
}

func (tc TimecodeConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc TimecodeConfigAttributes) InternalWithRef(ref terra.Reference) TimecodeConfigAttributes {
	return TimecodeConfigAttributes{ref: ref}
}

func (tc TimecodeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc TimecodeConfigAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("source"))
}

func (tc TimecodeConfigAttributes) SyncThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(tc.ref.Append("sync_threshold"))
}

type VideoDescriptionsAttributes struct {
	ref terra.Reference
}

func (vd VideoDescriptionsAttributes) InternalRef() (terra.Reference, error) {
	return vd.ref, nil
}

func (vd VideoDescriptionsAttributes) InternalWithRef(ref terra.Reference) VideoDescriptionsAttributes {
	return VideoDescriptionsAttributes{ref: ref}
}

func (vd VideoDescriptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vd.ref.InternalTokens()
}

func (vd VideoDescriptionsAttributes) Height() terra.NumberValue {
	return terra.ReferenceAsNumber(vd.ref.Append("height"))
}

func (vd VideoDescriptionsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vd.ref.Append("name"))
}

func (vd VideoDescriptionsAttributes) RespondToAfd() terra.StringValue {
	return terra.ReferenceAsString(vd.ref.Append("respond_to_afd"))
}

func (vd VideoDescriptionsAttributes) ScalingBehavior() terra.StringValue {
	return terra.ReferenceAsString(vd.ref.Append("scaling_behavior"))
}

func (vd VideoDescriptionsAttributes) Sharpness() terra.NumberValue {
	return terra.ReferenceAsNumber(vd.ref.Append("sharpness"))
}

func (vd VideoDescriptionsAttributes) Width() terra.NumberValue {
	return terra.ReferenceAsNumber(vd.ref.Append("width"))
}

func (vd VideoDescriptionsAttributes) CodecSettings() terra.ListValue[VideoDescriptionsCodecSettingsAttributes] {
	return terra.ReferenceAsList[VideoDescriptionsCodecSettingsAttributes](vd.ref.Append("codec_settings"))
}

type VideoDescriptionsCodecSettingsAttributes struct {
	ref terra.Reference
}

func (cs VideoDescriptionsCodecSettingsAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs VideoDescriptionsCodecSettingsAttributes) InternalWithRef(ref terra.Reference) VideoDescriptionsCodecSettingsAttributes {
	return VideoDescriptionsCodecSettingsAttributes{ref: ref}
}

func (cs VideoDescriptionsCodecSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs VideoDescriptionsCodecSettingsAttributes) FrameCaptureSettings() terra.ListValue[FrameCaptureSettingsAttributes] {
	return terra.ReferenceAsList[FrameCaptureSettingsAttributes](cs.ref.Append("frame_capture_settings"))
}

func (cs VideoDescriptionsCodecSettingsAttributes) H264Settings() terra.ListValue[H264SettingsAttributes] {
	return terra.ReferenceAsList[H264SettingsAttributes](cs.ref.Append("h264_settings"))
}

type FrameCaptureSettingsAttributes struct {
	ref terra.Reference
}

func (fcs FrameCaptureSettingsAttributes) InternalRef() (terra.Reference, error) {
	return fcs.ref, nil
}

func (fcs FrameCaptureSettingsAttributes) InternalWithRef(ref terra.Reference) FrameCaptureSettingsAttributes {
	return FrameCaptureSettingsAttributes{ref: ref}
}

func (fcs FrameCaptureSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fcs.ref.InternalTokens()
}

func (fcs FrameCaptureSettingsAttributes) CaptureInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(fcs.ref.Append("capture_interval"))
}

func (fcs FrameCaptureSettingsAttributes) CaptureIntervalUnits() terra.StringValue {
	return terra.ReferenceAsString(fcs.ref.Append("capture_interval_units"))
}

type H264SettingsAttributes struct {
	ref terra.Reference
}

func (hs H264SettingsAttributes) InternalRef() (terra.Reference, error) {
	return hs.ref, nil
}

func (hs H264SettingsAttributes) InternalWithRef(ref terra.Reference) H264SettingsAttributes {
	return H264SettingsAttributes{ref: ref}
}

func (hs H264SettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hs.ref.InternalTokens()
}

func (hs H264SettingsAttributes) AdaptiveQuantization() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("adaptive_quantization"))
}

func (hs H264SettingsAttributes) AfdSignaling() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("afd_signaling"))
}

func (hs H264SettingsAttributes) Bitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("bitrate"))
}

func (hs H264SettingsAttributes) BufFillPct() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("buf_fill_pct"))
}

func (hs H264SettingsAttributes) BufSize() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("buf_size"))
}

func (hs H264SettingsAttributes) ColorMetadata() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("color_metadata"))
}

func (hs H264SettingsAttributes) EntropyEncoding() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("entropy_encoding"))
}

func (hs H264SettingsAttributes) FixedAfd() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("fixed_afd"))
}

func (hs H264SettingsAttributes) FlickerAq() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("flicker_aq"))
}

func (hs H264SettingsAttributes) ForceFieldPictures() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("force_field_pictures"))
}

func (hs H264SettingsAttributes) FramerateControl() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("framerate_control"))
}

func (hs H264SettingsAttributes) FramerateDenominator() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("framerate_denominator"))
}

func (hs H264SettingsAttributes) FramerateNumerator() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("framerate_numerator"))
}

func (hs H264SettingsAttributes) GopBReference() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("gop_b_reference"))
}

func (hs H264SettingsAttributes) GopClosedCadence() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("gop_closed_cadence"))
}

func (hs H264SettingsAttributes) GopNumBFrames() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("gop_num_b_frames"))
}

func (hs H264SettingsAttributes) GopSize() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("gop_size"))
}

func (hs H264SettingsAttributes) GopSizeUnits() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("gop_size_units"))
}

func (hs H264SettingsAttributes) Level() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("level"))
}

func (hs H264SettingsAttributes) LookAheadRateControl() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("look_ahead_rate_control"))
}

func (hs H264SettingsAttributes) MaxBitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("max_bitrate"))
}

func (hs H264SettingsAttributes) MinIInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("min_i_interval"))
}

func (hs H264SettingsAttributes) NumRefFrames() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("num_ref_frames"))
}

func (hs H264SettingsAttributes) ParControl() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("par_control"))
}

func (hs H264SettingsAttributes) ParDenominator() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("par_denominator"))
}

func (hs H264SettingsAttributes) ParNumerator() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("par_numerator"))
}

func (hs H264SettingsAttributes) Profile() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("profile"))
}

func (hs H264SettingsAttributes) QualityLevel() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("quality_level"))
}

func (hs H264SettingsAttributes) QvbrQualityLevel() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("qvbr_quality_level"))
}

func (hs H264SettingsAttributes) RateControlMode() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("rate_control_mode"))
}

func (hs H264SettingsAttributes) ScanType() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("scan_type"))
}

func (hs H264SettingsAttributes) SceneChangeDetect() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("scene_change_detect"))
}

func (hs H264SettingsAttributes) Slices() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("slices"))
}

func (hs H264SettingsAttributes) Softness() terra.NumberValue {
	return terra.ReferenceAsNumber(hs.ref.Append("softness"))
}

func (hs H264SettingsAttributes) SpatialAq() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("spatial_aq"))
}

func (hs H264SettingsAttributes) SubgopLength() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("subgop_length"))
}

func (hs H264SettingsAttributes) Syntax() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("syntax"))
}

func (hs H264SettingsAttributes) TemporalAq() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("temporal_aq"))
}

func (hs H264SettingsAttributes) TimecodeInsertion() terra.StringValue {
	return terra.ReferenceAsString(hs.ref.Append("timecode_insertion"))
}

func (hs H264SettingsAttributes) FilterSettings() terra.ListValue[FilterSettingsAttributes] {
	return terra.ReferenceAsList[FilterSettingsAttributes](hs.ref.Append("filter_settings"))
}

type FilterSettingsAttributes struct {
	ref terra.Reference
}

func (fs FilterSettingsAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs FilterSettingsAttributes) InternalWithRef(ref terra.Reference) FilterSettingsAttributes {
	return FilterSettingsAttributes{ref: ref}
}

func (fs FilterSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs FilterSettingsAttributes) TemporalFilterSettings() terra.ListValue[TemporalFilterSettingsAttributes] {
	return terra.ReferenceAsList[TemporalFilterSettingsAttributes](fs.ref.Append("temporal_filter_settings"))
}

type TemporalFilterSettingsAttributes struct {
	ref terra.Reference
}

func (tfs TemporalFilterSettingsAttributes) InternalRef() (terra.Reference, error) {
	return tfs.ref, nil
}

func (tfs TemporalFilterSettingsAttributes) InternalWithRef(ref terra.Reference) TemporalFilterSettingsAttributes {
	return TemporalFilterSettingsAttributes{ref: ref}
}

func (tfs TemporalFilterSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tfs.ref.InternalTokens()
}

func (tfs TemporalFilterSettingsAttributes) PostFilterSharpening() terra.StringValue {
	return terra.ReferenceAsString(tfs.ref.Append("post_filter_sharpening"))
}

func (tfs TemporalFilterSettingsAttributes) Strength() terra.StringValue {
	return terra.ReferenceAsString(tfs.ref.Append("strength"))
}

type InputAttachmentsAttributes struct {
	ref terra.Reference
}

func (ia InputAttachmentsAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia InputAttachmentsAttributes) InternalWithRef(ref terra.Reference) InputAttachmentsAttributes {
	return InputAttachmentsAttributes{ref: ref}
}

func (ia InputAttachmentsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia InputAttachmentsAttributes) InputAttachmentName() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("input_attachment_name"))
}

func (ia InputAttachmentsAttributes) InputId() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("input_id"))
}

func (ia InputAttachmentsAttributes) AutomaticInputFailoverSettings() terra.ListValue[AutomaticInputFailoverSettingsAttributes] {
	return terra.ReferenceAsList[AutomaticInputFailoverSettingsAttributes](ia.ref.Append("automatic_input_failover_settings"))
}

func (ia InputAttachmentsAttributes) InputSettings() terra.ListValue[InputSettingsAttributes] {
	return terra.ReferenceAsList[InputSettingsAttributes](ia.ref.Append("input_settings"))
}

type AutomaticInputFailoverSettingsAttributes struct {
	ref terra.Reference
}

func (aifs AutomaticInputFailoverSettingsAttributes) InternalRef() (terra.Reference, error) {
	return aifs.ref, nil
}

func (aifs AutomaticInputFailoverSettingsAttributes) InternalWithRef(ref terra.Reference) AutomaticInputFailoverSettingsAttributes {
	return AutomaticInputFailoverSettingsAttributes{ref: ref}
}

func (aifs AutomaticInputFailoverSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aifs.ref.InternalTokens()
}

func (aifs AutomaticInputFailoverSettingsAttributes) ErrorClearTimeMsec() terra.NumberValue {
	return terra.ReferenceAsNumber(aifs.ref.Append("error_clear_time_msec"))
}

func (aifs AutomaticInputFailoverSettingsAttributes) InputPreference() terra.StringValue {
	return terra.ReferenceAsString(aifs.ref.Append("input_preference"))
}

func (aifs AutomaticInputFailoverSettingsAttributes) SecondaryInputId() terra.StringValue {
	return terra.ReferenceAsString(aifs.ref.Append("secondary_input_id"))
}

func (aifs AutomaticInputFailoverSettingsAttributes) FailoverCondition() terra.SetValue[FailoverConditionAttributes] {
	return terra.ReferenceAsSet[FailoverConditionAttributes](aifs.ref.Append("failover_condition"))
}

type FailoverConditionAttributes struct {
	ref terra.Reference
}

func (fc FailoverConditionAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc FailoverConditionAttributes) InternalWithRef(ref terra.Reference) FailoverConditionAttributes {
	return FailoverConditionAttributes{ref: ref}
}

func (fc FailoverConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc FailoverConditionAttributes) FailoverConditionSettings() terra.ListValue[FailoverConditionSettingsAttributes] {
	return terra.ReferenceAsList[FailoverConditionSettingsAttributes](fc.ref.Append("failover_condition_settings"))
}

type FailoverConditionSettingsAttributes struct {
	ref terra.Reference
}

func (fcs FailoverConditionSettingsAttributes) InternalRef() (terra.Reference, error) {
	return fcs.ref, nil
}

func (fcs FailoverConditionSettingsAttributes) InternalWithRef(ref terra.Reference) FailoverConditionSettingsAttributes {
	return FailoverConditionSettingsAttributes{ref: ref}
}

func (fcs FailoverConditionSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fcs.ref.InternalTokens()
}

func (fcs FailoverConditionSettingsAttributes) AudioSilenceSettings() terra.ListValue[AudioSilenceSettingsAttributes] {
	return terra.ReferenceAsList[AudioSilenceSettingsAttributes](fcs.ref.Append("audio_silence_settings"))
}

func (fcs FailoverConditionSettingsAttributes) InputLossSettings() terra.ListValue[InputLossSettingsAttributes] {
	return terra.ReferenceAsList[InputLossSettingsAttributes](fcs.ref.Append("input_loss_settings"))
}

func (fcs FailoverConditionSettingsAttributes) VideoBlackSettings() terra.ListValue[VideoBlackSettingsAttributes] {
	return terra.ReferenceAsList[VideoBlackSettingsAttributes](fcs.ref.Append("video_black_settings"))
}

type AudioSilenceSettingsAttributes struct {
	ref terra.Reference
}

func (ass AudioSilenceSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ass.ref, nil
}

func (ass AudioSilenceSettingsAttributes) InternalWithRef(ref terra.Reference) AudioSilenceSettingsAttributes {
	return AudioSilenceSettingsAttributes{ref: ref}
}

func (ass AudioSilenceSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ass.ref.InternalTokens()
}

func (ass AudioSilenceSettingsAttributes) AudioSelectorName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("audio_selector_name"))
}

func (ass AudioSilenceSettingsAttributes) AudioSilenceThresholdMsec() terra.NumberValue {
	return terra.ReferenceAsNumber(ass.ref.Append("audio_silence_threshold_msec"))
}

type InputLossSettingsAttributes struct {
	ref terra.Reference
}

func (ils InputLossSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ils.ref, nil
}

func (ils InputLossSettingsAttributes) InternalWithRef(ref terra.Reference) InputLossSettingsAttributes {
	return InputLossSettingsAttributes{ref: ref}
}

func (ils InputLossSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ils.ref.InternalTokens()
}

func (ils InputLossSettingsAttributes) InputLossThresholdMsec() terra.NumberValue {
	return terra.ReferenceAsNumber(ils.ref.Append("input_loss_threshold_msec"))
}

type VideoBlackSettingsAttributes struct {
	ref terra.Reference
}

func (vbs VideoBlackSettingsAttributes) InternalRef() (terra.Reference, error) {
	return vbs.ref, nil
}

func (vbs VideoBlackSettingsAttributes) InternalWithRef(ref terra.Reference) VideoBlackSettingsAttributes {
	return VideoBlackSettingsAttributes{ref: ref}
}

func (vbs VideoBlackSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vbs.ref.InternalTokens()
}

func (vbs VideoBlackSettingsAttributes) BlackDetectThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(vbs.ref.Append("black_detect_threshold"))
}

func (vbs VideoBlackSettingsAttributes) VideoBlackThresholdMsec() terra.NumberValue {
	return terra.ReferenceAsNumber(vbs.ref.Append("video_black_threshold_msec"))
}

type InputSettingsAttributes struct {
	ref terra.Reference
}

func (is InputSettingsAttributes) InternalRef() (terra.Reference, error) {
	return is.ref, nil
}

func (is InputSettingsAttributes) InternalWithRef(ref terra.Reference) InputSettingsAttributes {
	return InputSettingsAttributes{ref: ref}
}

func (is InputSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return is.ref.InternalTokens()
}

func (is InputSettingsAttributes) DeblockFilter() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("deblock_filter"))
}

func (is InputSettingsAttributes) DenoiseFilter() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("denoise_filter"))
}

func (is InputSettingsAttributes) FilterStrength() terra.NumberValue {
	return terra.ReferenceAsNumber(is.ref.Append("filter_strength"))
}

func (is InputSettingsAttributes) InputFilter() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("input_filter"))
}

func (is InputSettingsAttributes) Scte35Pid() terra.NumberValue {
	return terra.ReferenceAsNumber(is.ref.Append("scte35_pid"))
}

func (is InputSettingsAttributes) Smpte2038DataPreference() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("smpte2038_data_preference"))
}

func (is InputSettingsAttributes) SourceEndBehavior() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("source_end_behavior"))
}

func (is InputSettingsAttributes) AudioSelector() terra.ListValue[AudioSelectorAttributes] {
	return terra.ReferenceAsList[AudioSelectorAttributes](is.ref.Append("audio_selector"))
}

func (is InputSettingsAttributes) CaptionSelector() terra.ListValue[CaptionSelectorAttributes] {
	return terra.ReferenceAsList[CaptionSelectorAttributes](is.ref.Append("caption_selector"))
}

func (is InputSettingsAttributes) NetworkInputSettings() terra.ListValue[NetworkInputSettingsAttributes] {
	return terra.ReferenceAsList[NetworkInputSettingsAttributes](is.ref.Append("network_input_settings"))
}

func (is InputSettingsAttributes) VideoSelector() terra.ListValue[VideoSelectorAttributes] {
	return terra.ReferenceAsList[VideoSelectorAttributes](is.ref.Append("video_selector"))
}

type AudioSelectorAttributes struct {
	ref terra.Reference
}

func (as AudioSelectorAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as AudioSelectorAttributes) InternalWithRef(ref terra.Reference) AudioSelectorAttributes {
	return AudioSelectorAttributes{ref: ref}
}

func (as AudioSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as AudioSelectorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("name"))
}

func (as AudioSelectorAttributes) SelectorSettings() terra.ListValue[AudioSelectorSelectorSettingsAttributes] {
	return terra.ReferenceAsList[AudioSelectorSelectorSettingsAttributes](as.ref.Append("selector_settings"))
}

type AudioSelectorSelectorSettingsAttributes struct {
	ref terra.Reference
}

func (ss AudioSelectorSelectorSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss AudioSelectorSelectorSettingsAttributes) InternalWithRef(ref terra.Reference) AudioSelectorSelectorSettingsAttributes {
	return AudioSelectorSelectorSettingsAttributes{ref: ref}
}

func (ss AudioSelectorSelectorSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss AudioSelectorSelectorSettingsAttributes) AudioHlsRenditionSelection() terra.ListValue[AudioHlsRenditionSelectionAttributes] {
	return terra.ReferenceAsList[AudioHlsRenditionSelectionAttributes](ss.ref.Append("audio_hls_rendition_selection"))
}

func (ss AudioSelectorSelectorSettingsAttributes) AudioLanguageSelection() terra.ListValue[AudioLanguageSelectionAttributes] {
	return terra.ReferenceAsList[AudioLanguageSelectionAttributes](ss.ref.Append("audio_language_selection"))
}

func (ss AudioSelectorSelectorSettingsAttributes) AudioPidSelection() terra.ListValue[AudioPidSelectionAttributes] {
	return terra.ReferenceAsList[AudioPidSelectionAttributes](ss.ref.Append("audio_pid_selection"))
}

func (ss AudioSelectorSelectorSettingsAttributes) AudioTrackSelection() terra.ListValue[AudioTrackSelectionAttributes] {
	return terra.ReferenceAsList[AudioTrackSelectionAttributes](ss.ref.Append("audio_track_selection"))
}

type AudioHlsRenditionSelectionAttributes struct {
	ref terra.Reference
}

func (ahrs AudioHlsRenditionSelectionAttributes) InternalRef() (terra.Reference, error) {
	return ahrs.ref, nil
}

func (ahrs AudioHlsRenditionSelectionAttributes) InternalWithRef(ref terra.Reference) AudioHlsRenditionSelectionAttributes {
	return AudioHlsRenditionSelectionAttributes{ref: ref}
}

func (ahrs AudioHlsRenditionSelectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ahrs.ref.InternalTokens()
}

func (ahrs AudioHlsRenditionSelectionAttributes) GroupId() terra.StringValue {
	return terra.ReferenceAsString(ahrs.ref.Append("group_id"))
}

func (ahrs AudioHlsRenditionSelectionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ahrs.ref.Append("name"))
}

type AudioLanguageSelectionAttributes struct {
	ref terra.Reference
}

func (als AudioLanguageSelectionAttributes) InternalRef() (terra.Reference, error) {
	return als.ref, nil
}

func (als AudioLanguageSelectionAttributes) InternalWithRef(ref terra.Reference) AudioLanguageSelectionAttributes {
	return AudioLanguageSelectionAttributes{ref: ref}
}

func (als AudioLanguageSelectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return als.ref.InternalTokens()
}

func (als AudioLanguageSelectionAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(als.ref.Append("language_code"))
}

func (als AudioLanguageSelectionAttributes) LanguageSelectionPolicy() terra.StringValue {
	return terra.ReferenceAsString(als.ref.Append("language_selection_policy"))
}

type AudioPidSelectionAttributes struct {
	ref terra.Reference
}

func (aps AudioPidSelectionAttributes) InternalRef() (terra.Reference, error) {
	return aps.ref, nil
}

func (aps AudioPidSelectionAttributes) InternalWithRef(ref terra.Reference) AudioPidSelectionAttributes {
	return AudioPidSelectionAttributes{ref: ref}
}

func (aps AudioPidSelectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aps.ref.InternalTokens()
}

func (aps AudioPidSelectionAttributes) Pid() terra.NumberValue {
	return terra.ReferenceAsNumber(aps.ref.Append("pid"))
}

type AudioTrackSelectionAttributes struct {
	ref terra.Reference
}

func (ats AudioTrackSelectionAttributes) InternalRef() (terra.Reference, error) {
	return ats.ref, nil
}

func (ats AudioTrackSelectionAttributes) InternalWithRef(ref terra.Reference) AudioTrackSelectionAttributes {
	return AudioTrackSelectionAttributes{ref: ref}
}

func (ats AudioTrackSelectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ats.ref.InternalTokens()
}

func (ats AudioTrackSelectionAttributes) Track() terra.SetValue[TrackAttributes] {
	return terra.ReferenceAsSet[TrackAttributes](ats.ref.Append("track"))
}

type TrackAttributes struct {
	ref terra.Reference
}

func (t TrackAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TrackAttributes) InternalWithRef(ref terra.Reference) TrackAttributes {
	return TrackAttributes{ref: ref}
}

func (t TrackAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TrackAttributes) Track() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("track"))
}

type CaptionSelectorAttributes struct {
	ref terra.Reference
}

func (cs CaptionSelectorAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs CaptionSelectorAttributes) InternalWithRef(ref terra.Reference) CaptionSelectorAttributes {
	return CaptionSelectorAttributes{ref: ref}
}

func (cs CaptionSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs CaptionSelectorAttributes) LanguageCode() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("language_code"))
}

func (cs CaptionSelectorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("name"))
}

func (cs CaptionSelectorAttributes) SelectorSettings() terra.ListValue[CaptionSelectorSelectorSettingsAttributes] {
	return terra.ReferenceAsList[CaptionSelectorSelectorSettingsAttributes](cs.ref.Append("selector_settings"))
}

type CaptionSelectorSelectorSettingsAttributes struct {
	ref terra.Reference
}

func (ss CaptionSelectorSelectorSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss CaptionSelectorSelectorSettingsAttributes) InternalWithRef(ref terra.Reference) CaptionSelectorSelectorSettingsAttributes {
	return CaptionSelectorSelectorSettingsAttributes{ref: ref}
}

func (ss CaptionSelectorSelectorSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss CaptionSelectorSelectorSettingsAttributes) AncillarySourceSettings() terra.ListValue[AncillarySourceSettingsAttributes] {
	return terra.ReferenceAsList[AncillarySourceSettingsAttributes](ss.ref.Append("ancillary_source_settings"))
}

func (ss CaptionSelectorSelectorSettingsAttributes) DvbTdtSettings() terra.ListValue[SelectorSettingsDvbTdtSettingsAttributes] {
	return terra.ReferenceAsList[SelectorSettingsDvbTdtSettingsAttributes](ss.ref.Append("dvb_tdt_settings"))
}

func (ss CaptionSelectorSelectorSettingsAttributes) EmbeddedSourceSettings() terra.ListValue[EmbeddedSourceSettingsAttributes] {
	return terra.ReferenceAsList[EmbeddedSourceSettingsAttributes](ss.ref.Append("embedded_source_settings"))
}

func (ss CaptionSelectorSelectorSettingsAttributes) Scte20SourceSettings() terra.ListValue[Scte20SourceSettingsAttributes] {
	return terra.ReferenceAsList[Scte20SourceSettingsAttributes](ss.ref.Append("scte20_source_settings"))
}

func (ss CaptionSelectorSelectorSettingsAttributes) Scte27SourceSettings() terra.ListValue[Scte27SourceSettingsAttributes] {
	return terra.ReferenceAsList[Scte27SourceSettingsAttributes](ss.ref.Append("scte27_source_settings"))
}

func (ss CaptionSelectorSelectorSettingsAttributes) TeletextSourceSettings() terra.ListValue[TeletextSourceSettingsAttributes] {
	return terra.ReferenceAsList[TeletextSourceSettingsAttributes](ss.ref.Append("teletext_source_settings"))
}

type AncillarySourceSettingsAttributes struct {
	ref terra.Reference
}

func (ass AncillarySourceSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ass.ref, nil
}

func (ass AncillarySourceSettingsAttributes) InternalWithRef(ref terra.Reference) AncillarySourceSettingsAttributes {
	return AncillarySourceSettingsAttributes{ref: ref}
}

func (ass AncillarySourceSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ass.ref.InternalTokens()
}

func (ass AncillarySourceSettingsAttributes) SourceAncillaryChannelNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(ass.ref.Append("source_ancillary_channel_number"))
}

type SelectorSettingsDvbTdtSettingsAttributes struct {
	ref terra.Reference
}

func (dts SelectorSettingsDvbTdtSettingsAttributes) InternalRef() (terra.Reference, error) {
	return dts.ref, nil
}

func (dts SelectorSettingsDvbTdtSettingsAttributes) InternalWithRef(ref terra.Reference) SelectorSettingsDvbTdtSettingsAttributes {
	return SelectorSettingsDvbTdtSettingsAttributes{ref: ref}
}

func (dts SelectorSettingsDvbTdtSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dts.ref.InternalTokens()
}

func (dts SelectorSettingsDvbTdtSettingsAttributes) OcrLanguage() terra.StringValue {
	return terra.ReferenceAsString(dts.ref.Append("ocr_language"))
}

func (dts SelectorSettingsDvbTdtSettingsAttributes) Pid() terra.NumberValue {
	return terra.ReferenceAsNumber(dts.ref.Append("pid"))
}

type EmbeddedSourceSettingsAttributes struct {
	ref terra.Reference
}

func (ess EmbeddedSourceSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ess.ref, nil
}

func (ess EmbeddedSourceSettingsAttributes) InternalWithRef(ref terra.Reference) EmbeddedSourceSettingsAttributes {
	return EmbeddedSourceSettingsAttributes{ref: ref}
}

func (ess EmbeddedSourceSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ess.ref.InternalTokens()
}

func (ess EmbeddedSourceSettingsAttributes) Convert608To708() terra.StringValue {
	return terra.ReferenceAsString(ess.ref.Append("convert_608_to_708"))
}

func (ess EmbeddedSourceSettingsAttributes) Scte20Detection() terra.StringValue {
	return terra.ReferenceAsString(ess.ref.Append("scte20_detection"))
}

func (ess EmbeddedSourceSettingsAttributes) Source608ChannelNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(ess.ref.Append("source_608_channel_number"))
}

func (ess EmbeddedSourceSettingsAttributes) Source608TrackNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(ess.ref.Append("source_608_track_number"))
}

type Scte20SourceSettingsAttributes struct {
	ref terra.Reference
}

func (sss Scte20SourceSettingsAttributes) InternalRef() (terra.Reference, error) {
	return sss.ref, nil
}

func (sss Scte20SourceSettingsAttributes) InternalWithRef(ref terra.Reference) Scte20SourceSettingsAttributes {
	return Scte20SourceSettingsAttributes{ref: ref}
}

func (sss Scte20SourceSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sss.ref.InternalTokens()
}

func (sss Scte20SourceSettingsAttributes) Convert608To708() terra.StringValue {
	return terra.ReferenceAsString(sss.ref.Append("convert_608_to_708"))
}

func (sss Scte20SourceSettingsAttributes) Source608ChannelNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(sss.ref.Append("source_608_channel_number"))
}

type Scte27SourceSettingsAttributes struct {
	ref terra.Reference
}

func (sss Scte27SourceSettingsAttributes) InternalRef() (terra.Reference, error) {
	return sss.ref, nil
}

func (sss Scte27SourceSettingsAttributes) InternalWithRef(ref terra.Reference) Scte27SourceSettingsAttributes {
	return Scte27SourceSettingsAttributes{ref: ref}
}

func (sss Scte27SourceSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sss.ref.InternalTokens()
}

func (sss Scte27SourceSettingsAttributes) OcrLanguage() terra.StringValue {
	return terra.ReferenceAsString(sss.ref.Append("ocr_language"))
}

func (sss Scte27SourceSettingsAttributes) Pid() terra.NumberValue {
	return terra.ReferenceAsNumber(sss.ref.Append("pid"))
}

type TeletextSourceSettingsAttributes struct {
	ref terra.Reference
}

func (tss TeletextSourceSettingsAttributes) InternalRef() (terra.Reference, error) {
	return tss.ref, nil
}

func (tss TeletextSourceSettingsAttributes) InternalWithRef(ref terra.Reference) TeletextSourceSettingsAttributes {
	return TeletextSourceSettingsAttributes{ref: ref}
}

func (tss TeletextSourceSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tss.ref.InternalTokens()
}

func (tss TeletextSourceSettingsAttributes) PageNumber() terra.StringValue {
	return terra.ReferenceAsString(tss.ref.Append("page_number"))
}

func (tss TeletextSourceSettingsAttributes) OutputRectangle() terra.ListValue[OutputRectangleAttributes] {
	return terra.ReferenceAsList[OutputRectangleAttributes](tss.ref.Append("output_rectangle"))
}

type OutputRectangleAttributes struct {
	ref terra.Reference
}

func (or OutputRectangleAttributes) InternalRef() (terra.Reference, error) {
	return or.ref, nil
}

func (or OutputRectangleAttributes) InternalWithRef(ref terra.Reference) OutputRectangleAttributes {
	return OutputRectangleAttributes{ref: ref}
}

func (or OutputRectangleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return or.ref.InternalTokens()
}

func (or OutputRectangleAttributes) Height() terra.NumberValue {
	return terra.ReferenceAsNumber(or.ref.Append("height"))
}

func (or OutputRectangleAttributes) LeftOffset() terra.NumberValue {
	return terra.ReferenceAsNumber(or.ref.Append("left_offset"))
}

func (or OutputRectangleAttributes) TopOffset() terra.NumberValue {
	return terra.ReferenceAsNumber(or.ref.Append("top_offset"))
}

func (or OutputRectangleAttributes) Width() terra.NumberValue {
	return terra.ReferenceAsNumber(or.ref.Append("width"))
}

type NetworkInputSettingsAttributes struct {
	ref terra.Reference
}

func (nis NetworkInputSettingsAttributes) InternalRef() (terra.Reference, error) {
	return nis.ref, nil
}

func (nis NetworkInputSettingsAttributes) InternalWithRef(ref terra.Reference) NetworkInputSettingsAttributes {
	return NetworkInputSettingsAttributes{ref: ref}
}

func (nis NetworkInputSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nis.ref.InternalTokens()
}

func (nis NetworkInputSettingsAttributes) ServerValidation() terra.StringValue {
	return terra.ReferenceAsString(nis.ref.Append("server_validation"))
}

func (nis NetworkInputSettingsAttributes) HlsInputSettings() terra.ListValue[HlsInputSettingsAttributes] {
	return terra.ReferenceAsList[HlsInputSettingsAttributes](nis.ref.Append("hls_input_settings"))
}

type HlsInputSettingsAttributes struct {
	ref terra.Reference
}

func (his HlsInputSettingsAttributes) InternalRef() (terra.Reference, error) {
	return his.ref, nil
}

func (his HlsInputSettingsAttributes) InternalWithRef(ref terra.Reference) HlsInputSettingsAttributes {
	return HlsInputSettingsAttributes{ref: ref}
}

func (his HlsInputSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return his.ref.InternalTokens()
}

func (his HlsInputSettingsAttributes) Bandwidth() terra.NumberValue {
	return terra.ReferenceAsNumber(his.ref.Append("bandwidth"))
}

func (his HlsInputSettingsAttributes) BufferSegments() terra.NumberValue {
	return terra.ReferenceAsNumber(his.ref.Append("buffer_segments"))
}

func (his HlsInputSettingsAttributes) Retries() terra.NumberValue {
	return terra.ReferenceAsNumber(his.ref.Append("retries"))
}

func (his HlsInputSettingsAttributes) RetryInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(his.ref.Append("retry_interval"))
}

func (his HlsInputSettingsAttributes) Scte35Source() terra.StringValue {
	return terra.ReferenceAsString(his.ref.Append("scte35_source"))
}

type VideoSelectorAttributes struct {
	ref terra.Reference
}

func (vs VideoSelectorAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs VideoSelectorAttributes) InternalWithRef(ref terra.Reference) VideoSelectorAttributes {
	return VideoSelectorAttributes{ref: ref}
}

func (vs VideoSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs VideoSelectorAttributes) ColorSpace() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("color_space"))
}

func (vs VideoSelectorAttributes) ColorSpaceUsage() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("color_space_usage"))
}

type InputSpecificationAttributes struct {
	ref terra.Reference
}

func (is InputSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return is.ref, nil
}

func (is InputSpecificationAttributes) InternalWithRef(ref terra.Reference) InputSpecificationAttributes {
	return InputSpecificationAttributes{ref: ref}
}

func (is InputSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return is.ref.InternalTokens()
}

func (is InputSpecificationAttributes) Codec() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("codec"))
}

func (is InputSpecificationAttributes) InputResolution() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("input_resolution"))
}

func (is InputSpecificationAttributes) MaximumBitrate() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("maximum_bitrate"))
}

type MaintenanceAttributes struct {
	ref terra.Reference
}

func (m MaintenanceAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m MaintenanceAttributes) InternalWithRef(ref terra.Reference) MaintenanceAttributes {
	return MaintenanceAttributes{ref: ref}
}

func (m MaintenanceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m MaintenanceAttributes) MaintenanceDay() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("maintenance_day"))
}

func (m MaintenanceAttributes) MaintenanceStartTime() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("maintenance_start_time"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VpcAttributes struct {
	ref terra.Reference
}

func (v VpcAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v VpcAttributes) InternalWithRef(ref terra.Reference) VpcAttributes {
	return VpcAttributes{ref: ref}
}

func (v VpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v VpcAttributes) AvailabilityZones() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("availability_zones"))
}

func (v VpcAttributes) PublicAddressAllocationIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("public_address_allocation_ids"))
}

func (v VpcAttributes) SecurityGroupIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("security_group_ids"))
}

func (v VpcAttributes) SubnetIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("subnet_ids"))
}

type CdiInputSpecificationState struct {
	Resolution string `json:"resolution"`
}

type DestinationsState struct {
	Id                   string                      `json:"id"`
	MediaPackageSettings []MediaPackageSettingsState `json:"media_package_settings"`
	MultiplexSettings    []MultiplexSettingsState    `json:"multiplex_settings"`
	Settings             []SettingsState             `json:"settings"`
}

type MediaPackageSettingsState struct {
	ChannelId string `json:"channel_id"`
}

type MultiplexSettingsState struct {
	MultiplexId string `json:"multiplex_id"`
	ProgramName string `json:"program_name"`
}

type SettingsState struct {
	PasswordParam string `json:"password_param"`
	StreamName    string `json:"stream_name"`
	Url           string `json:"url"`
	Username      string `json:"username"`
}

type EncoderSettingsState struct {
	AudioDescriptions []AudioDescriptionsState `json:"audio_descriptions"`
	AvailBlanking     []AvailBlankingState     `json:"avail_blanking"`
	OutputGroups      []OutputGroupsState      `json:"output_groups"`
	TimecodeConfig    []TimecodeConfigState    `json:"timecode_config"`
	VideoDescriptions []VideoDescriptionsState `json:"video_descriptions"`
}

type AudioDescriptionsState struct {
	AudioSelectorName          string                                `json:"audio_selector_name"`
	AudioType                  string                                `json:"audio_type"`
	AudioTypeControl           string                                `json:"audio_type_control"`
	LanguageCode               string                                `json:"language_code"`
	LanguageCodeControl        string                                `json:"language_code_control"`
	Name                       string                                `json:"name"`
	StreamName                 string                                `json:"stream_name"`
	AudioNormalizationSettings []AudioNormalizationSettingsState     `json:"audio_normalization_settings"`
	AudioWatermarkSettings     []AudioWatermarkSettingsState         `json:"audio_watermark_settings"`
	CodecSettings              []AudioDescriptionsCodecSettingsState `json:"codec_settings"`
	RemixSettings              []RemixSettingsState                  `json:"remix_settings"`
}

type AudioNormalizationSettingsState struct {
	Algorithm        string  `json:"algorithm"`
	AlgorithmControl string  `json:"algorithm_control"`
	TargetLkfs       float64 `json:"target_lkfs"`
}

type AudioWatermarkSettingsState struct {
	NielsenWatermarksSettings []NielsenWatermarksSettingsState `json:"nielsen_watermarks_settings"`
}

type NielsenWatermarksSettingsState struct {
	NielsenDistributionType string                         `json:"nielsen_distribution_type"`
	NielsenCbetSettings     []NielsenCbetSettingsState     `json:"nielsen_cbet_settings"`
	NielsenNaesIiNwSettings []NielsenNaesIiNwSettingsState `json:"nielsen_naes_ii_nw_settings"`
}

type NielsenCbetSettingsState struct {
	CbetCheckDigitString string `json:"cbet_check_digit_string"`
	CbetStepaside        string `json:"cbet_stepaside"`
	Csid                 string `json:"csid"`
}

type NielsenNaesIiNwSettingsState struct {
	CheckDigitString string  `json:"check_digit_string"`
	Sid              float64 `json:"sid"`
}

type AudioDescriptionsCodecSettingsState struct {
	AacSettings         []AacSettingsState         `json:"aac_settings"`
	Ac3Settings         []Ac3SettingsState         `json:"ac3_settings"`
	Eac3AtmosSettings   []Eac3AtmosSettingsState   `json:"eac3_atmos_settings"`
	Eac3Settings        []Eac3SettingsState        `json:"eac3_settings"`
	Mp2Settings         []Mp2SettingsState         `json:"mp2_settings"`
	PassThroughSettings []PassThroughSettingsState `json:"pass_through_settings"`
	WavSettings         []WavSettingsState         `json:"wav_settings"`
}

type AacSettingsState struct {
	Bitrate         float64 `json:"bitrate"`
	CodingMode      string  `json:"coding_mode"`
	InputType       string  `json:"input_type"`
	Profile         string  `json:"profile"`
	RateControlMode string  `json:"rate_control_mode"`
	RawFormat       string  `json:"raw_format"`
	SampleRate      float64 `json:"sample_rate"`
	Spec            string  `json:"spec"`
	VbrQuality      string  `json:"vbr_quality"`
}

type Ac3SettingsState struct {
	Bitrate         float64 `json:"bitrate"`
	BitstreamMode   string  `json:"bitstream_mode"`
	CodingMode      string  `json:"coding_mode"`
	Dialnorm        float64 `json:"dialnorm"`
	DrcProfile      string  `json:"drc_profile"`
	LfeFilter       string  `json:"lfe_filter"`
	MetadataControl string  `json:"metadata_control"`
}

type Eac3AtmosSettingsState struct {
	Bitrate      float64 `json:"bitrate"`
	CodingMode   string  `json:"coding_mode"`
	Dialnorm     float64 `json:"dialnorm"`
	DrcLine      string  `json:"drc_line"`
	DrcRf        string  `json:"drc_rf"`
	HeightTrim   float64 `json:"height_trim"`
	SurroundTrim float64 `json:"surround_trim"`
}

type Eac3SettingsState struct {
	AttenuationControl   string  `json:"attenuation_control"`
	Bitrate              float64 `json:"bitrate"`
	BitstreamMode        string  `json:"bitstream_mode"`
	CodingMode           string  `json:"coding_mode"`
	DcFilter             string  `json:"dc_filter"`
	Dialnorm             float64 `json:"dialnorm"`
	DrcLine              string  `json:"drc_line"`
	DrcRf                string  `json:"drc_rf"`
	LfeControl           string  `json:"lfe_control"`
	LfeFilter            string  `json:"lfe_filter"`
	LoRoCenterMixLevel   float64 `json:"lo_ro_center_mix_level"`
	LoRoSurroundMixLevel float64 `json:"lo_ro_surround_mix_level"`
	LtRtCenterMixLevel   float64 `json:"lt_rt_center_mix_level"`
	LtRtSurroundMixLevel float64 `json:"lt_rt_surround_mix_level"`
	MetadataControl      string  `json:"metadata_control"`
	PassthroughControl   string  `json:"passthrough_control"`
	PhaseControl         string  `json:"phase_control"`
	StereoDownmix        string  `json:"stereo_downmix"`
	SurroundExMode       string  `json:"surround_ex_mode"`
	SurroundMode         string  `json:"surround_mode"`
}

type Mp2SettingsState struct {
	Bitrate    float64 `json:"bitrate"`
	CodingMode string  `json:"coding_mode"`
	SampleRate float64 `json:"sample_rate"`
}

type PassThroughSettingsState struct{}

type WavSettingsState struct {
	BitDepth   float64 `json:"bit_depth"`
	CodingMode string  `json:"coding_mode"`
	SampleRate float64 `json:"sample_rate"`
}

type RemixSettingsState struct {
	ChannelsIn      float64                `json:"channels_in"`
	ChannelsOut     float64                `json:"channels_out"`
	ChannelMappings []ChannelMappingsState `json:"channel_mappings"`
}

type ChannelMappingsState struct {
	OutputChannel      float64                   `json:"output_channel"`
	InputChannelLevels []InputChannelLevelsState `json:"input_channel_levels"`
}

type InputChannelLevelsState struct {
	Gain         float64 `json:"gain"`
	InputChannel float64 `json:"input_channel"`
}

type AvailBlankingState struct {
	State              string                    `json:"state"`
	AvailBlankingImage []AvailBlankingImageState `json:"avail_blanking_image"`
}

type AvailBlankingImageState struct {
	PasswordParam string `json:"password_param"`
	Uri           string `json:"uri"`
	Username      string `json:"username"`
}

type OutputGroupsState struct {
	Name                string                     `json:"name"`
	OutputGroupSettings []OutputGroupSettingsState `json:"output_group_settings"`
	Outputs             []OutputsState             `json:"outputs"`
}

type OutputGroupSettingsState struct {
	ArchiveGroupSettings      []ArchiveGroupSettingsState      `json:"archive_group_settings"`
	FrameCaptureGroupSettings []FrameCaptureGroupSettingsState `json:"frame_capture_group_settings"`
	HlsGroupSettings          []HlsGroupSettingsState          `json:"hls_group_settings"`
	MediaPackageGroupSettings []MediaPackageGroupSettingsState `json:"media_package_group_settings"`
	MsSmoothGroupSettings     []MsSmoothGroupSettingsState     `json:"ms_smooth_group_settings"`
	MultiplexGroupSettings    []MultiplexGroupSettingsState    `json:"multiplex_group_settings"`
	RtmpGroupSettings         []RtmpGroupSettingsState         `json:"rtmp_group_settings"`
	UdpGroupSettings          []UdpGroupSettingsState          `json:"udp_group_settings"`
}

type ArchiveGroupSettingsState struct {
	RolloverInterval   float64                                `json:"rollover_interval"`
	ArchiveCdnSettings []ArchiveCdnSettingsState              `json:"archive_cdn_settings"`
	Destination        []ArchiveGroupSettingsDestinationState `json:"destination"`
}

type ArchiveCdnSettingsState struct {
	ArchiveS3Settings []ArchiveS3SettingsState `json:"archive_s3_settings"`
}

type ArchiveS3SettingsState struct {
	CannedAcl string `json:"canned_acl"`
}

type ArchiveGroupSettingsDestinationState struct {
	DestinationRefId string `json:"destination_ref_id"`
}

type FrameCaptureGroupSettingsState struct {
	Destination             []FrameCaptureGroupSettingsDestinationState `json:"destination"`
	FrameCaptureCdnSettings []FrameCaptureCdnSettingsState              `json:"frame_capture_cdn_settings"`
}

type FrameCaptureGroupSettingsDestinationState struct {
	DestinationRefId string `json:"destination_ref_id"`
}

type FrameCaptureCdnSettingsState struct {
	FrameCaptureS3Settings []FrameCaptureS3SettingsState `json:"frame_capture_s3_settings"`
}

type FrameCaptureS3SettingsState struct {
	CannedAcl string `json:"canned_acl"`
}

type HlsGroupSettingsState struct {
	AdMarkers                  []string                           `json:"ad_markers"`
	BaseUrlContent             string                             `json:"base_url_content"`
	BaseUrlContent1            string                             `json:"base_url_content1"`
	BaseUrlManifest            string                             `json:"base_url_manifest"`
	BaseUrlManifest1           string                             `json:"base_url_manifest1"`
	CaptionLanguageSetting     string                             `json:"caption_language_setting"`
	ClientCache                string                             `json:"client_cache"`
	CodecSpecification         string                             `json:"codec_specification"`
	ConstantIv                 string                             `json:"constant_iv"`
	DirectoryStructure         string                             `json:"directory_structure"`
	DiscontinuityTags          string                             `json:"discontinuity_tags"`
	EncryptionType             string                             `json:"encryption_type"`
	HlsId3SegmentTagging       string                             `json:"hls_id3_segment_tagging"`
	IframeOnlyPlaylists        string                             `json:"iframe_only_playlists"`
	IncompleteSegmentBehavior  string                             `json:"incomplete_segment_behavior"`
	IndexNSegments             float64                            `json:"index_n_segments"`
	InputLossAction            string                             `json:"input_loss_action"`
	IvInManifest               string                             `json:"iv_in_manifest"`
	IvSource                   string                             `json:"iv_source"`
	KeepSegments               float64                            `json:"keep_segments"`
	KeyFormat                  string                             `json:"key_format"`
	KeyFormatVersions          string                             `json:"key_format_versions"`
	ManifestCompression        string                             `json:"manifest_compression"`
	ManifestDurationFormat     string                             `json:"manifest_duration_format"`
	MinSegmentLength           float64                            `json:"min_segment_length"`
	Mode                       string                             `json:"mode"`
	OutputSelection            string                             `json:"output_selection"`
	ProgramDateTime            string                             `json:"program_date_time"`
	ProgramDateTimeClock       string                             `json:"program_date_time_clock"`
	ProgramDateTimePeriod      float64                            `json:"program_date_time_period"`
	RedundantManifest          string                             `json:"redundant_manifest"`
	SegmentLength              float64                            `json:"segment_length"`
	SegmentsPerSubdirectory    float64                            `json:"segments_per_subdirectory"`
	StreamInfResolution        string                             `json:"stream_inf_resolution"`
	TimedMetadataId3Frame      string                             `json:"timed_metadata_id3_frame"`
	TimedMetadataId3Period     float64                            `json:"timed_metadata_id3_period"`
	TimestampDeltaMilliseconds float64                            `json:"timestamp_delta_milliseconds"`
	TsFileMode                 string                             `json:"ts_file_mode"`
	CaptionLanguageMappings    []CaptionLanguageMappingsState     `json:"caption_language_mappings"`
	Destination                []HlsGroupSettingsDestinationState `json:"destination"`
	HlsCdnSettings             []HlsCdnSettingsState              `json:"hls_cdn_settings"`
	KeyProviderSettings        []KeyProviderSettingsState         `json:"key_provider_settings"`
}

type CaptionLanguageMappingsState struct {
	CaptionChannel      float64 `json:"caption_channel"`
	LanguageCode        string  `json:"language_code"`
	LanguageDescription string  `json:"language_description"`
}

type HlsGroupSettingsDestinationState struct {
	DestinationRefId string `json:"destination_ref_id"`
}

type HlsCdnSettingsState struct {
	HlsAkamaiSettings     []HlsAkamaiSettingsState     `json:"hls_akamai_settings"`
	HlsBasicPutSettings   []HlsBasicPutSettingsState   `json:"hls_basic_put_settings"`
	HlsMediaStoreSettings []HlsMediaStoreSettingsState `json:"hls_media_store_settings"`
	HlsS3Settings         []HlsS3SettingsState         `json:"hls_s3_settings"`
	HlsWebdavSettings     []HlsWebdavSettingsState     `json:"hls_webdav_settings"`
}

type HlsAkamaiSettingsState struct {
	ConnectionRetryInterval float64 `json:"connection_retry_interval"`
	FilecacheDuration       float64 `json:"filecache_duration"`
	HttpTransferMode        string  `json:"http_transfer_mode"`
	NumRetries              float64 `json:"num_retries"`
	RestartDelay            float64 `json:"restart_delay"`
	Salt                    string  `json:"salt"`
	Token                   string  `json:"token"`
}

type HlsBasicPutSettingsState struct {
	ConnectionRetryInterval float64 `json:"connection_retry_interval"`
	FilecacheDuration       float64 `json:"filecache_duration"`
	NumRetries              float64 `json:"num_retries"`
	RestartDelay            float64 `json:"restart_delay"`
}

type HlsMediaStoreSettingsState struct {
	ConnectionRetryInterval float64 `json:"connection_retry_interval"`
	FilecacheDuration       float64 `json:"filecache_duration"`
	MediaStoreStorageClass  string  `json:"media_store_storage_class"`
	NumRetries              float64 `json:"num_retries"`
	RestartDelay            float64 `json:"restart_delay"`
}

type HlsS3SettingsState struct {
	CannedAcl string `json:"canned_acl"`
}

type HlsWebdavSettingsState struct {
	ConnectionRetryInterval float64 `json:"connection_retry_interval"`
	FilecacheDuration       float64 `json:"filecache_duration"`
	HttpTransferMode        string  `json:"http_transfer_mode"`
	NumRetries              float64 `json:"num_retries"`
	RestartDelay            float64 `json:"restart_delay"`
}

type KeyProviderSettingsState struct {
	StaticKeySettings []StaticKeySettingsState `json:"static_key_settings"`
}

type StaticKeySettingsState struct {
	StaticKeyValue    string                   `json:"static_key_value"`
	KeyProviderServer []KeyProviderServerState `json:"key_provider_server"`
}

type KeyProviderServerState struct {
	PasswordParam string `json:"password_param"`
	Uri           string `json:"uri"`
	Username      string `json:"username"`
}

type MediaPackageGroupSettingsState struct {
	Destination []MediaPackageGroupSettingsDestinationState `json:"destination"`
}

type MediaPackageGroupSettingsDestinationState struct {
	DestinationRefId string `json:"destination_ref_id"`
}

type MsSmoothGroupSettingsState struct {
	AcquisitionPointId       string                                  `json:"acquisition_point_id"`
	AudioOnlyTimecodeControl string                                  `json:"audio_only_timecode_control"`
	CertificateMode          string                                  `json:"certificate_mode"`
	ConnectionRetryInterval  float64                                 `json:"connection_retry_interval"`
	EventId                  string                                  `json:"event_id"`
	EventIdMode              string                                  `json:"event_id_mode"`
	EventStopBehavior        string                                  `json:"event_stop_behavior"`
	FilecacheDuration        float64                                 `json:"filecache_duration"`
	FragmentLength           float64                                 `json:"fragment_length"`
	InputLossAction          string                                  `json:"input_loss_action"`
	NumRetries               float64                                 `json:"num_retries"`
	RestartDelay             float64                                 `json:"restart_delay"`
	SegmentationMode         string                                  `json:"segmentation_mode"`
	SendDelayMs              float64                                 `json:"send_delay_ms"`
	SparseTrackType          string                                  `json:"sparse_track_type"`
	StreamManifestBehavior   string                                  `json:"stream_manifest_behavior"`
	TimestampOffset          string                                  `json:"timestamp_offset"`
	TimestampOffsetMode      string                                  `json:"timestamp_offset_mode"`
	Destination              []MsSmoothGroupSettingsDestinationState `json:"destination"`
}

type MsSmoothGroupSettingsDestinationState struct {
	DestinationRefId string `json:"destination_ref_id"`
}

type MultiplexGroupSettingsState struct{}

type RtmpGroupSettingsState struct {
	AdMarkers            []string `json:"ad_markers"`
	AuthenticationScheme string   `json:"authentication_scheme"`
	CacheFullBehavior    string   `json:"cache_full_behavior"`
	CacheLength          float64  `json:"cache_length"`
	CaptionData          string   `json:"caption_data"`
	InputLossAction      string   `json:"input_loss_action"`
	RestartDelay         float64  `json:"restart_delay"`
}

type UdpGroupSettingsState struct {
	InputLossAction        string  `json:"input_loss_action"`
	TimedMetadataId3Frame  string  `json:"timed_metadata_id3_frame"`
	TimedMetadataId3Period float64 `json:"timed_metadata_id3_period"`
}

type OutputsState struct {
	AudioDescriptionNames   []string              `json:"audio_description_names"`
	CaptionDescriptionNames []string              `json:"caption_description_names"`
	OutputName              string                `json:"output_name"`
	VideoDescriptionName    string                `json:"video_description_name"`
	OutputSettings          []OutputSettingsState `json:"output_settings"`
}

type OutputSettingsState struct {
	ArchiveOutputSettings      []ArchiveOutputSettingsState      `json:"archive_output_settings"`
	FrameCaptureOutputSettings []FrameCaptureOutputSettingsState `json:"frame_capture_output_settings"`
	HlsOutputSettings          []HlsOutputSettingsState          `json:"hls_output_settings"`
	MediaPackageOutputSettings []MediaPackageOutputSettingsState `json:"media_package_output_settings"`
	MsSmoothOutputSettings     []MsSmoothOutputSettingsState     `json:"ms_smooth_output_settings"`
	MultiplexOutputSettings    []MultiplexOutputSettingsState    `json:"multiplex_output_settings"`
	RtmpOutputSettings         []RtmpOutputSettingsState         `json:"rtmp_output_settings"`
	UdpOutputSettings          []UdpOutputSettingsState          `json:"udp_output_settings"`
}

type ArchiveOutputSettingsState struct {
	Extension         string                                        `json:"extension"`
	NameModifier      string                                        `json:"name_modifier"`
	ContainerSettings []ArchiveOutputSettingsContainerSettingsState `json:"container_settings"`
}

type ArchiveOutputSettingsContainerSettingsState struct {
	M2TsSettings []ArchiveOutputSettingsContainerSettingsM2TsSettingsState `json:"m2ts_settings"`
	RawSettings  []RawSettingsState                                        `json:"raw_settings"`
}

type ArchiveOutputSettingsContainerSettingsM2TsSettingsState struct {
	AbsentInputAudioBehavior string                                                                  `json:"absent_input_audio_behavior"`
	Arib                     string                                                                  `json:"arib"`
	AribCaptionsPid          string                                                                  `json:"arib_captions_pid"`
	AribCaptionsPidControl   string                                                                  `json:"arib_captions_pid_control"`
	AudioBufferModel         string                                                                  `json:"audio_buffer_model"`
	AudioFramesPerPes        float64                                                                 `json:"audio_frames_per_pes"`
	AudioPids                string                                                                  `json:"audio_pids"`
	AudioStreamType          string                                                                  `json:"audio_stream_type"`
	Bitrate                  float64                                                                 `json:"bitrate"`
	BufferModel              string                                                                  `json:"buffer_model"`
	CcDescriptor             string                                                                  `json:"cc_descriptor"`
	DvbSubPids               string                                                                  `json:"dvb_sub_pids"`
	DvbTeletextPid           string                                                                  `json:"dvb_teletext_pid"`
	Ebif                     string                                                                  `json:"ebif"`
	EbpAudioInterval         string                                                                  `json:"ebp_audio_interval"`
	EbpLookaheadMs           float64                                                                 `json:"ebp_lookahead_ms"`
	EbpPlacement             string                                                                  `json:"ebp_placement"`
	EcmPid                   string                                                                  `json:"ecm_pid"`
	EsRateInPes              string                                                                  `json:"es_rate_in_pes"`
	EtvPlatformPid           string                                                                  `json:"etv_platform_pid"`
	EtvSignalPid             string                                                                  `json:"etv_signal_pid"`
	FragmentTime             float64                                                                 `json:"fragment_time"`
	Klv                      string                                                                  `json:"klv"`
	KlvDataPids              string                                                                  `json:"klv_data_pids"`
	NielsenId3Behavior       string                                                                  `json:"nielsen_id3_behavior"`
	NullPacketBitrate        float64                                                                 `json:"null_packet_bitrate"`
	PatInterval              float64                                                                 `json:"pat_interval"`
	PcrControl               string                                                                  `json:"pcr_control"`
	PcrPeriod                float64                                                                 `json:"pcr_period"`
	PcrPid                   string                                                                  `json:"pcr_pid"`
	PmtInterval              float64                                                                 `json:"pmt_interval"`
	PmtPid                   string                                                                  `json:"pmt_pid"`
	ProgramNum               float64                                                                 `json:"program_num"`
	RateMode                 string                                                                  `json:"rate_mode"`
	Scte27Pids               string                                                                  `json:"scte27_pids"`
	Scte35Control            string                                                                  `json:"scte35_control"`
	Scte35Pid                string                                                                  `json:"scte35_pid"`
	SegmentationMarkers      string                                                                  `json:"segmentation_markers"`
	SegmentationStyle        string                                                                  `json:"segmentation_style"`
	SegmentationTime         float64                                                                 `json:"segmentation_time"`
	TimedMetadataBehavior    string                                                                  `json:"timed_metadata_behavior"`
	TimedMetadataPid         string                                                                  `json:"timed_metadata_pid"`
	TransportStreamId        float64                                                                 `json:"transport_stream_id"`
	VideoPid                 string                                                                  `json:"video_pid"`
	DvbNitSettings           []ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsState `json:"dvb_nit_settings"`
	DvbSdtSettings           []ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsState `json:"dvb_sdt_settings"`
	DvbTdtSettings           []ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsState `json:"dvb_tdt_settings"`
}

type ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsState struct {
	NetworkId   float64 `json:"network_id"`
	NetworkName string  `json:"network_name"`
	RepInterval float64 `json:"rep_interval"`
}

type ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsState struct {
	OutputSdt           string  `json:"output_sdt"`
	RepInterval         float64 `json:"rep_interval"`
	ServiceName         string  `json:"service_name"`
	ServiceProviderName string  `json:"service_provider_name"`
}

type ArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsState struct {
	RepInterval float64 `json:"rep_interval"`
}

type RawSettingsState struct{}

type FrameCaptureOutputSettingsState struct {
	NameModifier string `json:"name_modifier"`
}

type HlsOutputSettingsState struct {
	H265PackagingType string             `json:"h265_packaging_type"`
	NameModifier      string             `json:"name_modifier"`
	SegmentModifier   string             `json:"segment_modifier"`
	HlsSettings       []HlsSettingsState `json:"hls_settings"`
}

type HlsSettingsState struct {
	AudioOnlyHlsSettings    []AudioOnlyHlsSettingsState    `json:"audio_only_hls_settings"`
	Fmp4HlsSettings         []Fmp4HlsSettingsState         `json:"fmp4_hls_settings"`
	FrameCaptureHlsSettings []FrameCaptureHlsSettingsState `json:"frame_capture_hls_settings"`
	StandardHlsSettings     []StandardHlsSettingsState     `json:"standard_hls_settings"`
}

type AudioOnlyHlsSettingsState struct {
	AudioGroupId   string                `json:"audio_group_id"`
	AudioTrackType string                `json:"audio_track_type"`
	SegmentType    string                `json:"segment_type"`
	AudioOnlyImage []AudioOnlyImageState `json:"audio_only_image"`
}

type AudioOnlyImageState struct {
	PasswordParam string `json:"password_param"`
	Uri           string `json:"uri"`
	Username      string `json:"username"`
}

type Fmp4HlsSettingsState struct {
	AudioRenditionSets    string `json:"audio_rendition_sets"`
	NielsenId3Behavior    string `json:"nielsen_id3_behavior"`
	TimedMetadataBehavior string `json:"timed_metadata_behavior"`
}

type FrameCaptureHlsSettingsState struct{}

type StandardHlsSettingsState struct {
	AudioRenditionSets string              `json:"audio_rendition_sets"`
	M3U8Settings       []M3U8SettingsState `json:"m3u8_settings"`
}

type M3U8SettingsState struct {
	AudioFramesPerPes     float64 `json:"audio_frames_per_pes"`
	AudioPids             string  `json:"audio_pids"`
	EcmPid                string  `json:"ecm_pid"`
	NielsenId3Behavior    string  `json:"nielsen_id3_behavior"`
	PatInterval           float64 `json:"pat_interval"`
	PcrControl            string  `json:"pcr_control"`
	PcrPeriod             float64 `json:"pcr_period"`
	PcrPid                string  `json:"pcr_pid"`
	PmtInterval           float64 `json:"pmt_interval"`
	PmtPid                string  `json:"pmt_pid"`
	ProgramNum            float64 `json:"program_num"`
	Scte35Behavior        string  `json:"scte35_behavior"`
	Scte35Pid             string  `json:"scte35_pid"`
	TimedMetadataBehavior string  `json:"timed_metadata_behavior"`
	TimedMetadataPid      string  `json:"timed_metadata_pid"`
	TransportStreamId     float64 `json:"transport_stream_id"`
	VideoPid              string  `json:"video_pid"`
}

type MediaPackageOutputSettingsState struct{}

type MsSmoothOutputSettingsState struct {
	H265PackagingType string `json:"h265_packaging_type"`
	NameModifier      string `json:"name_modifier"`
}

type MultiplexOutputSettingsState struct {
	Destination []MultiplexOutputSettingsDestinationState `json:"destination"`
}

type MultiplexOutputSettingsDestinationState struct {
	DestinationRefId string `json:"destination_ref_id"`
}

type RtmpOutputSettingsState struct {
	CertficateMode          string                               `json:"certficate_mode"`
	ConnectionRetryInterval float64                              `json:"connection_retry_interval"`
	NumRetries              float64                              `json:"num_retries"`
	Destination             []RtmpOutputSettingsDestinationState `json:"destination"`
}

type RtmpOutputSettingsDestinationState struct {
	DestinationRefId string `json:"destination_ref_id"`
}

type UdpOutputSettingsState struct {
	BufferMsec        float64                                   `json:"buffer_msec"`
	ContainerSettings []UdpOutputSettingsContainerSettingsState `json:"container_settings"`
	Destination       []UdpOutputSettingsDestinationState       `json:"destination"`
	FecOutputSettings []FecOutputSettingsState                  `json:"fec_output_settings"`
}

type UdpOutputSettingsContainerSettingsState struct {
	M2TsSettings []UdpOutputSettingsContainerSettingsM2TsSettingsState `json:"m2ts_settings"`
}

type UdpOutputSettingsContainerSettingsM2TsSettingsState struct {
	AbsentInputAudioBehavior string                                                              `json:"absent_input_audio_behavior"`
	Arib                     string                                                              `json:"arib"`
	AribCaptionsPid          string                                                              `json:"arib_captions_pid"`
	AribCaptionsPidControl   string                                                              `json:"arib_captions_pid_control"`
	AudioBufferModel         string                                                              `json:"audio_buffer_model"`
	AudioFramesPerPes        float64                                                             `json:"audio_frames_per_pes"`
	AudioPids                string                                                              `json:"audio_pids"`
	AudioStreamType          string                                                              `json:"audio_stream_type"`
	Bitrate                  float64                                                             `json:"bitrate"`
	BufferModel              string                                                              `json:"buffer_model"`
	CcDescriptor             string                                                              `json:"cc_descriptor"`
	DvbSubPids               string                                                              `json:"dvb_sub_pids"`
	DvbTeletextPid           string                                                              `json:"dvb_teletext_pid"`
	Ebif                     string                                                              `json:"ebif"`
	EbpAudioInterval         string                                                              `json:"ebp_audio_interval"`
	EbpLookaheadMs           float64                                                             `json:"ebp_lookahead_ms"`
	EbpPlacement             string                                                              `json:"ebp_placement"`
	EcmPid                   string                                                              `json:"ecm_pid"`
	EsRateInPes              string                                                              `json:"es_rate_in_pes"`
	EtvPlatformPid           string                                                              `json:"etv_platform_pid"`
	EtvSignalPid             string                                                              `json:"etv_signal_pid"`
	FragmentTime             float64                                                             `json:"fragment_time"`
	Klv                      string                                                              `json:"klv"`
	KlvDataPids              string                                                              `json:"klv_data_pids"`
	NielsenId3Behavior       string                                                              `json:"nielsen_id3_behavior"`
	NullPacketBitrate        float64                                                             `json:"null_packet_bitrate"`
	PatInterval              float64                                                             `json:"pat_interval"`
	PcrControl               string                                                              `json:"pcr_control"`
	PcrPeriod                float64                                                             `json:"pcr_period"`
	PcrPid                   string                                                              `json:"pcr_pid"`
	PmtInterval              float64                                                             `json:"pmt_interval"`
	PmtPid                   string                                                              `json:"pmt_pid"`
	ProgramNum               float64                                                             `json:"program_num"`
	RateMode                 string                                                              `json:"rate_mode"`
	Scte27Pids               string                                                              `json:"scte27_pids"`
	Scte35Control            string                                                              `json:"scte35_control"`
	Scte35Pid                string                                                              `json:"scte35_pid"`
	SegmentationMarkers      string                                                              `json:"segmentation_markers"`
	SegmentationStyle        string                                                              `json:"segmentation_style"`
	SegmentationTime         float64                                                             `json:"segmentation_time"`
	TimedMetadataBehavior    string                                                              `json:"timed_metadata_behavior"`
	TimedMetadataPid         string                                                              `json:"timed_metadata_pid"`
	TransportStreamId        float64                                                             `json:"transport_stream_id"`
	VideoPid                 string                                                              `json:"video_pid"`
	DvbNitSettings           []UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsState `json:"dvb_nit_settings"`
	DvbSdtSettings           []UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsState `json:"dvb_sdt_settings"`
	DvbTdtSettings           []UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsState `json:"dvb_tdt_settings"`
}

type UdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsState struct {
	NetworkId   float64 `json:"network_id"`
	NetworkName string  `json:"network_name"`
	RepInterval float64 `json:"rep_interval"`
}

type UdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsState struct {
	OutputSdt           string  `json:"output_sdt"`
	RepInterval         float64 `json:"rep_interval"`
	ServiceName         string  `json:"service_name"`
	ServiceProviderName string  `json:"service_provider_name"`
}

type UdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsState struct {
	RepInterval float64 `json:"rep_interval"`
}

type UdpOutputSettingsDestinationState struct {
	DestinationRefId string `json:"destination_ref_id"`
}

type FecOutputSettingsState struct {
	ColumnDepth float64 `json:"column_depth"`
	IncludeFec  string  `json:"include_fec"`
	RowLength   float64 `json:"row_length"`
}

type TimecodeConfigState struct {
	Source        string  `json:"source"`
	SyncThreshold float64 `json:"sync_threshold"`
}

type VideoDescriptionsState struct {
	Height          float64                               `json:"height"`
	Name            string                                `json:"name"`
	RespondToAfd    string                                `json:"respond_to_afd"`
	ScalingBehavior string                                `json:"scaling_behavior"`
	Sharpness       float64                               `json:"sharpness"`
	Width           float64                               `json:"width"`
	CodecSettings   []VideoDescriptionsCodecSettingsState `json:"codec_settings"`
}

type VideoDescriptionsCodecSettingsState struct {
	FrameCaptureSettings []FrameCaptureSettingsState `json:"frame_capture_settings"`
	H264Settings         []H264SettingsState         `json:"h264_settings"`
}

type FrameCaptureSettingsState struct {
	CaptureInterval      float64 `json:"capture_interval"`
	CaptureIntervalUnits string  `json:"capture_interval_units"`
}

type H264SettingsState struct {
	AdaptiveQuantization string                `json:"adaptive_quantization"`
	AfdSignaling         string                `json:"afd_signaling"`
	Bitrate              float64               `json:"bitrate"`
	BufFillPct           float64               `json:"buf_fill_pct"`
	BufSize              float64               `json:"buf_size"`
	ColorMetadata        string                `json:"color_metadata"`
	EntropyEncoding      string                `json:"entropy_encoding"`
	FixedAfd             string                `json:"fixed_afd"`
	FlickerAq            string                `json:"flicker_aq"`
	ForceFieldPictures   string                `json:"force_field_pictures"`
	FramerateControl     string                `json:"framerate_control"`
	FramerateDenominator float64               `json:"framerate_denominator"`
	FramerateNumerator   float64               `json:"framerate_numerator"`
	GopBReference        string                `json:"gop_b_reference"`
	GopClosedCadence     float64               `json:"gop_closed_cadence"`
	GopNumBFrames        float64               `json:"gop_num_b_frames"`
	GopSize              float64               `json:"gop_size"`
	GopSizeUnits         string                `json:"gop_size_units"`
	Level                string                `json:"level"`
	LookAheadRateControl string                `json:"look_ahead_rate_control"`
	MaxBitrate           float64               `json:"max_bitrate"`
	MinIInterval         float64               `json:"min_i_interval"`
	NumRefFrames         float64               `json:"num_ref_frames"`
	ParControl           string                `json:"par_control"`
	ParDenominator       float64               `json:"par_denominator"`
	ParNumerator         float64               `json:"par_numerator"`
	Profile              string                `json:"profile"`
	QualityLevel         string                `json:"quality_level"`
	QvbrQualityLevel     float64               `json:"qvbr_quality_level"`
	RateControlMode      string                `json:"rate_control_mode"`
	ScanType             string                `json:"scan_type"`
	SceneChangeDetect    string                `json:"scene_change_detect"`
	Slices               float64               `json:"slices"`
	Softness             float64               `json:"softness"`
	SpatialAq            string                `json:"spatial_aq"`
	SubgopLength         string                `json:"subgop_length"`
	Syntax               string                `json:"syntax"`
	TemporalAq           string                `json:"temporal_aq"`
	TimecodeInsertion    string                `json:"timecode_insertion"`
	FilterSettings       []FilterSettingsState `json:"filter_settings"`
}

type FilterSettingsState struct {
	TemporalFilterSettings []TemporalFilterSettingsState `json:"temporal_filter_settings"`
}

type TemporalFilterSettingsState struct {
	PostFilterSharpening string `json:"post_filter_sharpening"`
	Strength             string `json:"strength"`
}

type InputAttachmentsState struct {
	InputAttachmentName            string                                `json:"input_attachment_name"`
	InputId                        string                                `json:"input_id"`
	AutomaticInputFailoverSettings []AutomaticInputFailoverSettingsState `json:"automatic_input_failover_settings"`
	InputSettings                  []InputSettingsState                  `json:"input_settings"`
}

type AutomaticInputFailoverSettingsState struct {
	ErrorClearTimeMsec float64                  `json:"error_clear_time_msec"`
	InputPreference    string                   `json:"input_preference"`
	SecondaryInputId   string                   `json:"secondary_input_id"`
	FailoverCondition  []FailoverConditionState `json:"failover_condition"`
}

type FailoverConditionState struct {
	FailoverConditionSettings []FailoverConditionSettingsState `json:"failover_condition_settings"`
}

type FailoverConditionSettingsState struct {
	AudioSilenceSettings []AudioSilenceSettingsState `json:"audio_silence_settings"`
	InputLossSettings    []InputLossSettingsState    `json:"input_loss_settings"`
	VideoBlackSettings   []VideoBlackSettingsState   `json:"video_black_settings"`
}

type AudioSilenceSettingsState struct {
	AudioSelectorName         string  `json:"audio_selector_name"`
	AudioSilenceThresholdMsec float64 `json:"audio_silence_threshold_msec"`
}

type InputLossSettingsState struct {
	InputLossThresholdMsec float64 `json:"input_loss_threshold_msec"`
}

type VideoBlackSettingsState struct {
	BlackDetectThreshold    float64 `json:"black_detect_threshold"`
	VideoBlackThresholdMsec float64 `json:"video_black_threshold_msec"`
}

type InputSettingsState struct {
	DeblockFilter           string                      `json:"deblock_filter"`
	DenoiseFilter           string                      `json:"denoise_filter"`
	FilterStrength          float64                     `json:"filter_strength"`
	InputFilter             string                      `json:"input_filter"`
	Scte35Pid               float64                     `json:"scte35_pid"`
	Smpte2038DataPreference string                      `json:"smpte2038_data_preference"`
	SourceEndBehavior       string                      `json:"source_end_behavior"`
	AudioSelector           []AudioSelectorState        `json:"audio_selector"`
	CaptionSelector         []CaptionSelectorState      `json:"caption_selector"`
	NetworkInputSettings    []NetworkInputSettingsState `json:"network_input_settings"`
	VideoSelector           []VideoSelectorState        `json:"video_selector"`
}

type AudioSelectorState struct {
	Name             string                               `json:"name"`
	SelectorSettings []AudioSelectorSelectorSettingsState `json:"selector_settings"`
}

type AudioSelectorSelectorSettingsState struct {
	AudioHlsRenditionSelection []AudioHlsRenditionSelectionState `json:"audio_hls_rendition_selection"`
	AudioLanguageSelection     []AudioLanguageSelectionState     `json:"audio_language_selection"`
	AudioPidSelection          []AudioPidSelectionState          `json:"audio_pid_selection"`
	AudioTrackSelection        []AudioTrackSelectionState        `json:"audio_track_selection"`
}

type AudioHlsRenditionSelectionState struct {
	GroupId string `json:"group_id"`
	Name    string `json:"name"`
}

type AudioLanguageSelectionState struct {
	LanguageCode            string `json:"language_code"`
	LanguageSelectionPolicy string `json:"language_selection_policy"`
}

type AudioPidSelectionState struct {
	Pid float64 `json:"pid"`
}

type AudioTrackSelectionState struct {
	Track []TrackState `json:"track"`
}

type TrackState struct {
	Track float64 `json:"track"`
}

type CaptionSelectorState struct {
	LanguageCode     string                                 `json:"language_code"`
	Name             string                                 `json:"name"`
	SelectorSettings []CaptionSelectorSelectorSettingsState `json:"selector_settings"`
}

type CaptionSelectorSelectorSettingsState struct {
	AncillarySourceSettings []AncillarySourceSettingsState        `json:"ancillary_source_settings"`
	DvbTdtSettings          []SelectorSettingsDvbTdtSettingsState `json:"dvb_tdt_settings"`
	EmbeddedSourceSettings  []EmbeddedSourceSettingsState         `json:"embedded_source_settings"`
	Scte20SourceSettings    []Scte20SourceSettingsState           `json:"scte20_source_settings"`
	Scte27SourceSettings    []Scte27SourceSettingsState           `json:"scte27_source_settings"`
	TeletextSourceSettings  []TeletextSourceSettingsState         `json:"teletext_source_settings"`
}

type AncillarySourceSettingsState struct {
	SourceAncillaryChannelNumber float64 `json:"source_ancillary_channel_number"`
}

type SelectorSettingsDvbTdtSettingsState struct {
	OcrLanguage string  `json:"ocr_language"`
	Pid         float64 `json:"pid"`
}

type EmbeddedSourceSettingsState struct {
	Convert608To708        string  `json:"convert_608_to_708"`
	Scte20Detection        string  `json:"scte20_detection"`
	Source608ChannelNumber float64 `json:"source_608_channel_number"`
	Source608TrackNumber   float64 `json:"source_608_track_number"`
}

type Scte20SourceSettingsState struct {
	Convert608To708        string  `json:"convert_608_to_708"`
	Source608ChannelNumber float64 `json:"source_608_channel_number"`
}

type Scte27SourceSettingsState struct {
	OcrLanguage string  `json:"ocr_language"`
	Pid         float64 `json:"pid"`
}

type TeletextSourceSettingsState struct {
	PageNumber      string                 `json:"page_number"`
	OutputRectangle []OutputRectangleState `json:"output_rectangle"`
}

type OutputRectangleState struct {
	Height     float64 `json:"height"`
	LeftOffset float64 `json:"left_offset"`
	TopOffset  float64 `json:"top_offset"`
	Width      float64 `json:"width"`
}

type NetworkInputSettingsState struct {
	ServerValidation string                  `json:"server_validation"`
	HlsInputSettings []HlsInputSettingsState `json:"hls_input_settings"`
}

type HlsInputSettingsState struct {
	Bandwidth      float64 `json:"bandwidth"`
	BufferSegments float64 `json:"buffer_segments"`
	Retries        float64 `json:"retries"`
	RetryInterval  float64 `json:"retry_interval"`
	Scte35Source   string  `json:"scte35_source"`
}

type VideoSelectorState struct {
	ColorSpace      string `json:"color_space"`
	ColorSpaceUsage string `json:"color_space_usage"`
}

type InputSpecificationState struct {
	Codec           string `json:"codec"`
	InputResolution string `json:"input_resolution"`
	MaximumBitrate  string `json:"maximum_bitrate"`
}

type MaintenanceState struct {
	MaintenanceDay       string `json:"maintenance_day"`
	MaintenanceStartTime string `json:"maintenance_start_time"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcState struct {
	AvailabilityZones          []string `json:"availability_zones"`
	PublicAddressAllocationIds []string `json:"public_address_allocation_ids"`
	SecurityGroupIds           []string `json:"security_group_ids"`
	SubnetIds                  []string `json:"subnet_ids"`
}
