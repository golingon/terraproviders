// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCodebuildResourcePolicy(name string, args CodebuildResourcePolicyArgs) *CodebuildResourcePolicy {
	return &CodebuildResourcePolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodebuildResourcePolicy)(nil)

type CodebuildResourcePolicy struct {
	Name  string
	Args  CodebuildResourcePolicyArgs
	state *codebuildResourcePolicyState
}

func (crp *CodebuildResourcePolicy) Type() string {
	return "aws_codebuild_resource_policy"
}

func (crp *CodebuildResourcePolicy) LocalName() string {
	return crp.Name
}

func (crp *CodebuildResourcePolicy) Configuration() interface{} {
	return crp.Args
}

func (crp *CodebuildResourcePolicy) Attributes() codebuildResourcePolicyAttributes {
	return codebuildResourcePolicyAttributes{ref: terra.ReferenceResource(crp)}
}

func (crp *CodebuildResourcePolicy) ImportState(av io.Reader) error {
	crp.state = &codebuildResourcePolicyState{}
	if err := json.NewDecoder(av).Decode(crp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crp.Type(), crp.LocalName(), err)
	}
	return nil
}

func (crp *CodebuildResourcePolicy) State() (*codebuildResourcePolicyState, bool) {
	return crp.state, crp.state != nil
}

func (crp *CodebuildResourcePolicy) StateMust() *codebuildResourcePolicyState {
	if crp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crp.Type(), crp.LocalName()))
	}
	return crp.state
}

func (crp *CodebuildResourcePolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(crp)
}

type CodebuildResourcePolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// ResourceArn: string, required
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// DependsOn contains resources that CodebuildResourcePolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type codebuildResourcePolicyAttributes struct {
	ref terra.Reference
}

func (crp codebuildResourcePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("id"))
}

func (crp codebuildResourcePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("policy"))
}

func (crp codebuildResourcePolicyAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceString(crp.ref.Append("resource_arn"))
}

type codebuildResourcePolicyState struct {
	Id          string `json:"id"`
	Policy      string `json:"policy"`
	ResourceArn string `json:"resource_arn"`
}
