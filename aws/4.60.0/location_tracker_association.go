// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	locationtrackerassociation "github.com/golingon/terraproviders/aws/4.60.0/locationtrackerassociation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLocationTrackerAssociation(name string, args LocationTrackerAssociationArgs) *LocationTrackerAssociation {
	return &LocationTrackerAssociation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LocationTrackerAssociation)(nil)

type LocationTrackerAssociation struct {
	Name  string
	Args  LocationTrackerAssociationArgs
	state *locationTrackerAssociationState
}

func (lta *LocationTrackerAssociation) Type() string {
	return "aws_location_tracker_association"
}

func (lta *LocationTrackerAssociation) LocalName() string {
	return lta.Name
}

func (lta *LocationTrackerAssociation) Configuration() interface{} {
	return lta.Args
}

func (lta *LocationTrackerAssociation) Attributes() locationTrackerAssociationAttributes {
	return locationTrackerAssociationAttributes{ref: terra.ReferenceResource(lta)}
}

func (lta *LocationTrackerAssociation) ImportState(av io.Reader) error {
	lta.state = &locationTrackerAssociationState{}
	if err := json.NewDecoder(av).Decode(lta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lta.Type(), lta.LocalName(), err)
	}
	return nil
}

func (lta *LocationTrackerAssociation) State() (*locationTrackerAssociationState, bool) {
	return lta.state, lta.state != nil
}

func (lta *LocationTrackerAssociation) StateMust() *locationTrackerAssociationState {
	if lta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lta.Type(), lta.LocalName()))
	}
	return lta.state
}

func (lta *LocationTrackerAssociation) DependOn() terra.Reference {
	return terra.ReferenceResource(lta)
}

type LocationTrackerAssociationArgs struct {
	// ConsumerArn: string, required
	ConsumerArn terra.StringValue `hcl:"consumer_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TrackerName: string, required
	TrackerName terra.StringValue `hcl:"tracker_name,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *locationtrackerassociation.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LocationTrackerAssociation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type locationTrackerAssociationAttributes struct {
	ref terra.Reference
}

func (lta locationTrackerAssociationAttributes) ConsumerArn() terra.StringValue {
	return terra.ReferenceString(lta.ref.Append("consumer_arn"))
}

func (lta locationTrackerAssociationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lta.ref.Append("id"))
}

func (lta locationTrackerAssociationAttributes) TrackerName() terra.StringValue {
	return terra.ReferenceString(lta.ref.Append("tracker_name"))
}

func (lta locationTrackerAssociationAttributes) Timeouts() locationtrackerassociation.TimeoutsAttributes {
	return terra.ReferenceSingle[locationtrackerassociation.TimeoutsAttributes](lta.ref.Append("timeouts"))
}

type locationTrackerAssociationState struct {
	ConsumerArn string                                    `json:"consumer_arn"`
	Id          string                                    `json:"id"`
	TrackerName string                                    `json:"tracker_name"`
	Timeouts    *locationtrackerassociation.TimeoutsState `json:"timeouts"`
}
