// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	mskconnectconnector "github.com/golingon/terraproviders/aws/4.60.0/mskconnectconnector"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewMskconnectConnector(name string, args MskconnectConnectorArgs) *MskconnectConnector {
	return &MskconnectConnector{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*MskconnectConnector)(nil)

type MskconnectConnector struct {
	Name  string
	Args  MskconnectConnectorArgs
	state *mskconnectConnectorState
}

func (mc *MskconnectConnector) Type() string {
	return "aws_mskconnect_connector"
}

func (mc *MskconnectConnector) LocalName() string {
	return mc.Name
}

func (mc *MskconnectConnector) Configuration() interface{} {
	return mc.Args
}

func (mc *MskconnectConnector) Attributes() mskconnectConnectorAttributes {
	return mskconnectConnectorAttributes{ref: terra.ReferenceResource(mc)}
}

func (mc *MskconnectConnector) ImportState(av io.Reader) error {
	mc.state = &mskconnectConnectorState{}
	if err := json.NewDecoder(av).Decode(mc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", mc.Type(), mc.LocalName(), err)
	}
	return nil
}

func (mc *MskconnectConnector) State() (*mskconnectConnectorState, bool) {
	return mc.state, mc.state != nil
}

func (mc *MskconnectConnector) StateMust() *mskconnectConnectorState {
	if mc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", mc.Type(), mc.LocalName()))
	}
	return mc.state
}

func (mc *MskconnectConnector) DependOn() terra.Reference {
	return terra.ReferenceResource(mc)
}

type MskconnectConnectorArgs struct {
	// ConnectorConfiguration: map of string, required
	ConnectorConfiguration terra.MapValue[terra.StringValue] `hcl:"connector_configuration,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KafkaconnectVersion: string, required
	KafkaconnectVersion terra.StringValue `hcl:"kafkaconnect_version,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ServiceExecutionRoleArn: string, required
	ServiceExecutionRoleArn terra.StringValue `hcl:"service_execution_role_arn,attr" validate:"required"`
	// Capacity: required
	Capacity *mskconnectconnector.Capacity `hcl:"capacity,block" validate:"required"`
	// KafkaCluster: required
	KafkaCluster *mskconnectconnector.KafkaCluster `hcl:"kafka_cluster,block" validate:"required"`
	// KafkaClusterClientAuthentication: required
	KafkaClusterClientAuthentication *mskconnectconnector.KafkaClusterClientAuthentication `hcl:"kafka_cluster_client_authentication,block" validate:"required"`
	// KafkaClusterEncryptionInTransit: required
	KafkaClusterEncryptionInTransit *mskconnectconnector.KafkaClusterEncryptionInTransit `hcl:"kafka_cluster_encryption_in_transit,block" validate:"required"`
	// LogDelivery: optional
	LogDelivery *mskconnectconnector.LogDelivery `hcl:"log_delivery,block"`
	// Plugin: min=1
	Plugin []mskconnectconnector.Plugin `hcl:"plugin,block" validate:"min=1"`
	// Timeouts: optional
	Timeouts *mskconnectconnector.Timeouts `hcl:"timeouts,block"`
	// WorkerConfiguration: optional
	WorkerConfiguration *mskconnectconnector.WorkerConfiguration `hcl:"worker_configuration,block"`
	// DependsOn contains resources that MskconnectConnector depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type mskconnectConnectorAttributes struct {
	ref terra.Reference
}

func (mc mskconnectConnectorAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("arn"))
}

func (mc mskconnectConnectorAttributes) ConnectorConfiguration() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](mc.ref.Append("connector_configuration"))
}

func (mc mskconnectConnectorAttributes) Description() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("description"))
}

func (mc mskconnectConnectorAttributes) Id() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("id"))
}

func (mc mskconnectConnectorAttributes) KafkaconnectVersion() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("kafkaconnect_version"))
}

func (mc mskconnectConnectorAttributes) Name() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("name"))
}

func (mc mskconnectConnectorAttributes) ServiceExecutionRoleArn() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("service_execution_role_arn"))
}

func (mc mskconnectConnectorAttributes) Version() terra.StringValue {
	return terra.ReferenceString(mc.ref.Append("version"))
}

func (mc mskconnectConnectorAttributes) Capacity() terra.ListValue[mskconnectconnector.CapacityAttributes] {
	return terra.ReferenceList[mskconnectconnector.CapacityAttributes](mc.ref.Append("capacity"))
}

func (mc mskconnectConnectorAttributes) KafkaCluster() terra.ListValue[mskconnectconnector.KafkaClusterAttributes] {
	return terra.ReferenceList[mskconnectconnector.KafkaClusterAttributes](mc.ref.Append("kafka_cluster"))
}

func (mc mskconnectConnectorAttributes) KafkaClusterClientAuthentication() terra.ListValue[mskconnectconnector.KafkaClusterClientAuthenticationAttributes] {
	return terra.ReferenceList[mskconnectconnector.KafkaClusterClientAuthenticationAttributes](mc.ref.Append("kafka_cluster_client_authentication"))
}

func (mc mskconnectConnectorAttributes) KafkaClusterEncryptionInTransit() terra.ListValue[mskconnectconnector.KafkaClusterEncryptionInTransitAttributes] {
	return terra.ReferenceList[mskconnectconnector.KafkaClusterEncryptionInTransitAttributes](mc.ref.Append("kafka_cluster_encryption_in_transit"))
}

func (mc mskconnectConnectorAttributes) LogDelivery() terra.ListValue[mskconnectconnector.LogDeliveryAttributes] {
	return terra.ReferenceList[mskconnectconnector.LogDeliveryAttributes](mc.ref.Append("log_delivery"))
}

func (mc mskconnectConnectorAttributes) Plugin() terra.SetValue[mskconnectconnector.PluginAttributes] {
	return terra.ReferenceSet[mskconnectconnector.PluginAttributes](mc.ref.Append("plugin"))
}

func (mc mskconnectConnectorAttributes) Timeouts() mskconnectconnector.TimeoutsAttributes {
	return terra.ReferenceSingle[mskconnectconnector.TimeoutsAttributes](mc.ref.Append("timeouts"))
}

func (mc mskconnectConnectorAttributes) WorkerConfiguration() terra.ListValue[mskconnectconnector.WorkerConfigurationAttributes] {
	return terra.ReferenceList[mskconnectconnector.WorkerConfigurationAttributes](mc.ref.Append("worker_configuration"))
}

type mskconnectConnectorState struct {
	Arn                              string                                                      `json:"arn"`
	ConnectorConfiguration           map[string]string                                           `json:"connector_configuration"`
	Description                      string                                                      `json:"description"`
	Id                               string                                                      `json:"id"`
	KafkaconnectVersion              string                                                      `json:"kafkaconnect_version"`
	Name                             string                                                      `json:"name"`
	ServiceExecutionRoleArn          string                                                      `json:"service_execution_role_arn"`
	Version                          string                                                      `json:"version"`
	Capacity                         []mskconnectconnector.CapacityState                         `json:"capacity"`
	KafkaCluster                     []mskconnectconnector.KafkaClusterState                     `json:"kafka_cluster"`
	KafkaClusterClientAuthentication []mskconnectconnector.KafkaClusterClientAuthenticationState `json:"kafka_cluster_client_authentication"`
	KafkaClusterEncryptionInTransit  []mskconnectconnector.KafkaClusterEncryptionInTransitState  `json:"kafka_cluster_encryption_in_transit"`
	LogDelivery                      []mskconnectconnector.LogDeliveryState                      `json:"log_delivery"`
	Plugin                           []mskconnectconnector.PluginState                           `json:"plugin"`
	Timeouts                         *mskconnectconnector.TimeoutsState                          `json:"timeouts"`
	WorkerConfiguration              []mskconnectconnector.WorkerConfigurationState              `json:"worker_configuration"`
}
