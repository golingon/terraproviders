// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	secretsmanagersecretrotation "github.com/golingon/terraproviders/aws/4.60.0/secretsmanagersecretrotation"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSecretsmanagerSecretRotation(name string, args SecretsmanagerSecretRotationArgs) *SecretsmanagerSecretRotation {
	return &SecretsmanagerSecretRotation{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecretsmanagerSecretRotation)(nil)

type SecretsmanagerSecretRotation struct {
	Name  string
	Args  SecretsmanagerSecretRotationArgs
	state *secretsmanagerSecretRotationState
}

func (ssr *SecretsmanagerSecretRotation) Type() string {
	return "aws_secretsmanager_secret_rotation"
}

func (ssr *SecretsmanagerSecretRotation) LocalName() string {
	return ssr.Name
}

func (ssr *SecretsmanagerSecretRotation) Configuration() interface{} {
	return ssr.Args
}

func (ssr *SecretsmanagerSecretRotation) Attributes() secretsmanagerSecretRotationAttributes {
	return secretsmanagerSecretRotationAttributes{ref: terra.ReferenceResource(ssr)}
}

func (ssr *SecretsmanagerSecretRotation) ImportState(av io.Reader) error {
	ssr.state = &secretsmanagerSecretRotationState{}
	if err := json.NewDecoder(av).Decode(ssr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssr.Type(), ssr.LocalName(), err)
	}
	return nil
}

func (ssr *SecretsmanagerSecretRotation) State() (*secretsmanagerSecretRotationState, bool) {
	return ssr.state, ssr.state != nil
}

func (ssr *SecretsmanagerSecretRotation) StateMust() *secretsmanagerSecretRotationState {
	if ssr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssr.Type(), ssr.LocalName()))
	}
	return ssr.state
}

func (ssr *SecretsmanagerSecretRotation) DependOn() terra.Reference {
	return terra.ReferenceResource(ssr)
}

type SecretsmanagerSecretRotationArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// RotationLambdaArn: string, required
	RotationLambdaArn terra.StringValue `hcl:"rotation_lambda_arn,attr" validate:"required"`
	// SecretId: string, required
	SecretId terra.StringValue `hcl:"secret_id,attr" validate:"required"`
	// RotationRules: required
	RotationRules *secretsmanagersecretrotation.RotationRules `hcl:"rotation_rules,block" validate:"required"`
	// DependsOn contains resources that SecretsmanagerSecretRotation depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type secretsmanagerSecretRotationAttributes struct {
	ref terra.Reference
}

func (ssr secretsmanagerSecretRotationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ssr.ref.Append("id"))
}

func (ssr secretsmanagerSecretRotationAttributes) RotationEnabled() terra.BoolValue {
	return terra.ReferenceBool(ssr.ref.Append("rotation_enabled"))
}

func (ssr secretsmanagerSecretRotationAttributes) RotationLambdaArn() terra.StringValue {
	return terra.ReferenceString(ssr.ref.Append("rotation_lambda_arn"))
}

func (ssr secretsmanagerSecretRotationAttributes) SecretId() terra.StringValue {
	return terra.ReferenceString(ssr.ref.Append("secret_id"))
}

func (ssr secretsmanagerSecretRotationAttributes) RotationRules() terra.ListValue[secretsmanagersecretrotation.RotationRulesAttributes] {
	return terra.ReferenceList[secretsmanagersecretrotation.RotationRulesAttributes](ssr.ref.Append("rotation_rules"))
}

type secretsmanagerSecretRotationState struct {
	Id                string                                            `json:"id"`
	RotationEnabled   bool                                              `json:"rotation_enabled"`
	RotationLambdaArn string                                            `json:"rotation_lambda_arn"`
	SecretId          string                                            `json:"secret_id"`
	RotationRules     []secretsmanagersecretrotation.RotationRulesState `json:"rotation_rules"`
}
