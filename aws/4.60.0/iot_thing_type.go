// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	iotthingtype "github.com/golingon/terraproviders/aws/4.60.0/iotthingtype"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewIotThingType(name string, args IotThingTypeArgs) *IotThingType {
	return &IotThingType{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IotThingType)(nil)

type IotThingType struct {
	Name  string
	Args  IotThingTypeArgs
	state *iotThingTypeState
}

func (itt *IotThingType) Type() string {
	return "aws_iot_thing_type"
}

func (itt *IotThingType) LocalName() string {
	return itt.Name
}

func (itt *IotThingType) Configuration() interface{} {
	return itt.Args
}

func (itt *IotThingType) Attributes() iotThingTypeAttributes {
	return iotThingTypeAttributes{ref: terra.ReferenceResource(itt)}
}

func (itt *IotThingType) ImportState(av io.Reader) error {
	itt.state = &iotThingTypeState{}
	if err := json.NewDecoder(av).Decode(itt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", itt.Type(), itt.LocalName(), err)
	}
	return nil
}

func (itt *IotThingType) State() (*iotThingTypeState, bool) {
	return itt.state, itt.state != nil
}

func (itt *IotThingType) StateMust() *iotThingTypeState {
	if itt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", itt.Type(), itt.LocalName()))
	}
	return itt.state
}

func (itt *IotThingType) DependOn() terra.Reference {
	return terra.ReferenceResource(itt)
}

type IotThingTypeArgs struct {
	// Deprecated: bool, optional
	Deprecated terra.BoolValue `hcl:"deprecated,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Properties: optional
	Properties *iotthingtype.Properties `hcl:"properties,block"`
	// DependsOn contains resources that IotThingType depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type iotThingTypeAttributes struct {
	ref terra.Reference
}

func (itt iotThingTypeAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(itt.ref.Append("arn"))
}

func (itt iotThingTypeAttributes) Deprecated() terra.BoolValue {
	return terra.ReferenceBool(itt.ref.Append("deprecated"))
}

func (itt iotThingTypeAttributes) Id() terra.StringValue {
	return terra.ReferenceString(itt.ref.Append("id"))
}

func (itt iotThingTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceString(itt.ref.Append("name"))
}

func (itt iotThingTypeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](itt.ref.Append("tags"))
}

func (itt iotThingTypeAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](itt.ref.Append("tags_all"))
}

func (itt iotThingTypeAttributes) Properties() terra.ListValue[iotthingtype.PropertiesAttributes] {
	return terra.ReferenceList[iotthingtype.PropertiesAttributes](itt.ref.Append("properties"))
}

type iotThingTypeState struct {
	Arn        string                         `json:"arn"`
	Deprecated bool                           `json:"deprecated"`
	Id         string                         `json:"id"`
	Name       string                         `json:"name"`
	Tags       map[string]string              `json:"tags"`
	TagsAll    map[string]string              `json:"tags_all"`
	Properties []iotthingtype.PropertiesState `json:"properties"`
}
