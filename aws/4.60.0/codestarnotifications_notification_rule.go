// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	codestarnotificationsnotificationrule "github.com/golingon/terraproviders/aws/4.60.0/codestarnotificationsnotificationrule"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCodestarnotificationsNotificationRule(name string, args CodestarnotificationsNotificationRuleArgs) *CodestarnotificationsNotificationRule {
	return &CodestarnotificationsNotificationRule{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodestarnotificationsNotificationRule)(nil)

type CodestarnotificationsNotificationRule struct {
	Name  string
	Args  CodestarnotificationsNotificationRuleArgs
	state *codestarnotificationsNotificationRuleState
}

func (cnr *CodestarnotificationsNotificationRule) Type() string {
	return "aws_codestarnotifications_notification_rule"
}

func (cnr *CodestarnotificationsNotificationRule) LocalName() string {
	return cnr.Name
}

func (cnr *CodestarnotificationsNotificationRule) Configuration() interface{} {
	return cnr.Args
}

func (cnr *CodestarnotificationsNotificationRule) Attributes() codestarnotificationsNotificationRuleAttributes {
	return codestarnotificationsNotificationRuleAttributes{ref: terra.ReferenceResource(cnr)}
}

func (cnr *CodestarnotificationsNotificationRule) ImportState(av io.Reader) error {
	cnr.state = &codestarnotificationsNotificationRuleState{}
	if err := json.NewDecoder(av).Decode(cnr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cnr.Type(), cnr.LocalName(), err)
	}
	return nil
}

func (cnr *CodestarnotificationsNotificationRule) State() (*codestarnotificationsNotificationRuleState, bool) {
	return cnr.state, cnr.state != nil
}

func (cnr *CodestarnotificationsNotificationRule) StateMust() *codestarnotificationsNotificationRuleState {
	if cnr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cnr.Type(), cnr.LocalName()))
	}
	return cnr.state
}

func (cnr *CodestarnotificationsNotificationRule) DependOn() terra.Reference {
	return terra.ReferenceResource(cnr)
}

type CodestarnotificationsNotificationRuleArgs struct {
	// DetailType: string, required
	DetailType terra.StringValue `hcl:"detail_type,attr" validate:"required"`
	// EventTypeIds: set of string, required
	EventTypeIds terra.SetValue[terra.StringValue] `hcl:"event_type_ids,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Resource: string, required
	Resource terra.StringValue `hcl:"resource,attr" validate:"required"`
	// Status: string, optional
	Status terra.StringValue `hcl:"status,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Target: min=0,max=10
	Target []codestarnotificationsnotificationrule.Target `hcl:"target,block" validate:"min=0,max=10"`
	// DependsOn contains resources that CodestarnotificationsNotificationRule depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type codestarnotificationsNotificationRuleAttributes struct {
	ref terra.Reference
}

func (cnr codestarnotificationsNotificationRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(cnr.ref.Append("arn"))
}

func (cnr codestarnotificationsNotificationRuleAttributes) DetailType() terra.StringValue {
	return terra.ReferenceString(cnr.ref.Append("detail_type"))
}

func (cnr codestarnotificationsNotificationRuleAttributes) EventTypeIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](cnr.ref.Append("event_type_ids"))
}

func (cnr codestarnotificationsNotificationRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceString(cnr.ref.Append("id"))
}

func (cnr codestarnotificationsNotificationRuleAttributes) Name() terra.StringValue {
	return terra.ReferenceString(cnr.ref.Append("name"))
}

func (cnr codestarnotificationsNotificationRuleAttributes) Resource() terra.StringValue {
	return terra.ReferenceString(cnr.ref.Append("resource"))
}

func (cnr codestarnotificationsNotificationRuleAttributes) Status() terra.StringValue {
	return terra.ReferenceString(cnr.ref.Append("status"))
}

func (cnr codestarnotificationsNotificationRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cnr.ref.Append("tags"))
}

func (cnr codestarnotificationsNotificationRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cnr.ref.Append("tags_all"))
}

func (cnr codestarnotificationsNotificationRuleAttributes) Target() terra.SetValue[codestarnotificationsnotificationrule.TargetAttributes] {
	return terra.ReferenceSet[codestarnotificationsnotificationrule.TargetAttributes](cnr.ref.Append("target"))
}

type codestarnotificationsNotificationRuleState struct {
	Arn          string                                              `json:"arn"`
	DetailType   string                                              `json:"detail_type"`
	EventTypeIds []string                                            `json:"event_type_ids"`
	Id           string                                              `json:"id"`
	Name         string                                              `json:"name"`
	Resource     string                                              `json:"resource"`
	Status       string                                              `json:"status"`
	Tags         map[string]string                                   `json:"tags"`
	TagsAll      map[string]string                                   `json:"tags_all"`
	Target       []codestarnotificationsnotificationrule.TargetState `json:"target"`
}
