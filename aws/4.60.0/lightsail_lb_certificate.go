// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lightsaillbcertificate "github.com/golingon/terraproviders/aws/4.60.0/lightsaillbcertificate"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLightsailLbCertificate(name string, args LightsailLbCertificateArgs) *LightsailLbCertificate {
	return &LightsailLbCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LightsailLbCertificate)(nil)

type LightsailLbCertificate struct {
	Name  string
	Args  LightsailLbCertificateArgs
	state *lightsailLbCertificateState
}

func (llc *LightsailLbCertificate) Type() string {
	return "aws_lightsail_lb_certificate"
}

func (llc *LightsailLbCertificate) LocalName() string {
	return llc.Name
}

func (llc *LightsailLbCertificate) Configuration() interface{} {
	return llc.Args
}

func (llc *LightsailLbCertificate) Attributes() lightsailLbCertificateAttributes {
	return lightsailLbCertificateAttributes{ref: terra.ReferenceResource(llc)}
}

func (llc *LightsailLbCertificate) ImportState(av io.Reader) error {
	llc.state = &lightsailLbCertificateState{}
	if err := json.NewDecoder(av).Decode(llc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", llc.Type(), llc.LocalName(), err)
	}
	return nil
}

func (llc *LightsailLbCertificate) State() (*lightsailLbCertificateState, bool) {
	return llc.state, llc.state != nil
}

func (llc *LightsailLbCertificate) StateMust() *lightsailLbCertificateState {
	if llc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", llc.Type(), llc.LocalName()))
	}
	return llc.state
}

func (llc *LightsailLbCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(llc)
}

type LightsailLbCertificateArgs struct {
	// DomainName: string, optional
	DomainName terra.StringValue `hcl:"domain_name,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LbName: string, required
	LbName terra.StringValue `hcl:"lb_name,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SubjectAlternativeNames: set of string, optional
	SubjectAlternativeNames terra.SetValue[terra.StringValue] `hcl:"subject_alternative_names,attr"`
	// DomainValidationRecords: min=0
	DomainValidationRecords []lightsaillbcertificate.DomainValidationRecords `hcl:"domain_validation_records,block" validate:"min=0"`
	// DependsOn contains resources that LightsailLbCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lightsailLbCertificateAttributes struct {
	ref terra.Reference
}

func (llc lightsailLbCertificateAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("arn"))
}

func (llc lightsailLbCertificateAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("created_at"))
}

func (llc lightsailLbCertificateAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("domain_name"))
}

func (llc lightsailLbCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("id"))
}

func (llc lightsailLbCertificateAttributes) LbName() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("lb_name"))
}

func (llc lightsailLbCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("name"))
}

func (llc lightsailLbCertificateAttributes) SubjectAlternativeNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](llc.ref.Append("subject_alternative_names"))
}

func (llc lightsailLbCertificateAttributes) SupportCode() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("support_code"))
}

func (llc lightsailLbCertificateAttributes) DomainValidationRecords() terra.SetValue[lightsaillbcertificate.DomainValidationRecordsAttributes] {
	return terra.ReferenceSet[lightsaillbcertificate.DomainValidationRecordsAttributes](llc.ref.Append("domain_validation_records"))
}

type lightsailLbCertificateState struct {
	Arn                     string                                                `json:"arn"`
	CreatedAt               string                                                `json:"created_at"`
	DomainName              string                                                `json:"domain_name"`
	Id                      string                                                `json:"id"`
	LbName                  string                                                `json:"lb_name"`
	Name                    string                                                `json:"name"`
	SubjectAlternativeNames []string                                              `json:"subject_alternative_names"`
	SupportCode             string                                                `json:"support_code"`
	DomainValidationRecords []lightsaillbcertificate.DomainValidationRecordsState `json:"domain_validation_records"`
}
