// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppsyncApiCache(name string, args AppsyncApiCacheArgs) *AppsyncApiCache {
	return &AppsyncApiCache{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppsyncApiCache)(nil)

type AppsyncApiCache struct {
	Name  string
	Args  AppsyncApiCacheArgs
	state *appsyncApiCacheState
}

func (aac *AppsyncApiCache) Type() string {
	return "aws_appsync_api_cache"
}

func (aac *AppsyncApiCache) LocalName() string {
	return aac.Name
}

func (aac *AppsyncApiCache) Configuration() interface{} {
	return aac.Args
}

func (aac *AppsyncApiCache) Attributes() appsyncApiCacheAttributes {
	return appsyncApiCacheAttributes{ref: terra.ReferenceResource(aac)}
}

func (aac *AppsyncApiCache) ImportState(av io.Reader) error {
	aac.state = &appsyncApiCacheState{}
	if err := json.NewDecoder(av).Decode(aac.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aac.Type(), aac.LocalName(), err)
	}
	return nil
}

func (aac *AppsyncApiCache) State() (*appsyncApiCacheState, bool) {
	return aac.state, aac.state != nil
}

func (aac *AppsyncApiCache) StateMust() *appsyncApiCacheState {
	if aac.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aac.Type(), aac.LocalName()))
	}
	return aac.state
}

func (aac *AppsyncApiCache) DependOn() terra.Reference {
	return terra.ReferenceResource(aac)
}

type AppsyncApiCacheArgs struct {
	// ApiCachingBehavior: string, required
	ApiCachingBehavior terra.StringValue `hcl:"api_caching_behavior,attr" validate:"required"`
	// ApiId: string, required
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// AtRestEncryptionEnabled: bool, optional
	AtRestEncryptionEnabled terra.BoolValue `hcl:"at_rest_encryption_enabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// TransitEncryptionEnabled: bool, optional
	TransitEncryptionEnabled terra.BoolValue `hcl:"transit_encryption_enabled,attr"`
	// Ttl: number, required
	Ttl terra.NumberValue `hcl:"ttl,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// DependsOn contains resources that AppsyncApiCache depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appsyncApiCacheAttributes struct {
	ref terra.Reference
}

func (aac appsyncApiCacheAttributes) ApiCachingBehavior() terra.StringValue {
	return terra.ReferenceString(aac.ref.Append("api_caching_behavior"))
}

func (aac appsyncApiCacheAttributes) ApiId() terra.StringValue {
	return terra.ReferenceString(aac.ref.Append("api_id"))
}

func (aac appsyncApiCacheAttributes) AtRestEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceBool(aac.ref.Append("at_rest_encryption_enabled"))
}

func (aac appsyncApiCacheAttributes) Id() terra.StringValue {
	return terra.ReferenceString(aac.ref.Append("id"))
}

func (aac appsyncApiCacheAttributes) TransitEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceBool(aac.ref.Append("transit_encryption_enabled"))
}

func (aac appsyncApiCacheAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceNumber(aac.ref.Append("ttl"))
}

func (aac appsyncApiCacheAttributes) Type() terra.StringValue {
	return terra.ReferenceString(aac.ref.Append("type"))
}

type appsyncApiCacheState struct {
	ApiCachingBehavior       string  `json:"api_caching_behavior"`
	ApiId                    string  `json:"api_id"`
	AtRestEncryptionEnabled  bool    `json:"at_rest_encryption_enabled"`
	Id                       string  `json:"id"`
	TransitEncryptionEnabled bool    `json:"transit_encryption_enabled"`
	Ttl                      float64 `json:"ttl"`
	Type                     string  `json:"type"`
}
