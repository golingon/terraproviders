// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewVpcNetworkPerformanceMetricSubscription(name string, args VpcNetworkPerformanceMetricSubscriptionArgs) *VpcNetworkPerformanceMetricSubscription {
	return &VpcNetworkPerformanceMetricSubscription{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*VpcNetworkPerformanceMetricSubscription)(nil)

type VpcNetworkPerformanceMetricSubscription struct {
	Name  string
	Args  VpcNetworkPerformanceMetricSubscriptionArgs
	state *vpcNetworkPerformanceMetricSubscriptionState
}

func (vnpms *VpcNetworkPerformanceMetricSubscription) Type() string {
	return "aws_vpc_network_performance_metric_subscription"
}

func (vnpms *VpcNetworkPerformanceMetricSubscription) LocalName() string {
	return vnpms.Name
}

func (vnpms *VpcNetworkPerformanceMetricSubscription) Configuration() interface{} {
	return vnpms.Args
}

func (vnpms *VpcNetworkPerformanceMetricSubscription) Attributes() vpcNetworkPerformanceMetricSubscriptionAttributes {
	return vpcNetworkPerformanceMetricSubscriptionAttributes{ref: terra.ReferenceResource(vnpms)}
}

func (vnpms *VpcNetworkPerformanceMetricSubscription) ImportState(av io.Reader) error {
	vnpms.state = &vpcNetworkPerformanceMetricSubscriptionState{}
	if err := json.NewDecoder(av).Decode(vnpms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vnpms.Type(), vnpms.LocalName(), err)
	}
	return nil
}

func (vnpms *VpcNetworkPerformanceMetricSubscription) State() (*vpcNetworkPerformanceMetricSubscriptionState, bool) {
	return vnpms.state, vnpms.state != nil
}

func (vnpms *VpcNetworkPerformanceMetricSubscription) StateMust() *vpcNetworkPerformanceMetricSubscriptionState {
	if vnpms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vnpms.Type(), vnpms.LocalName()))
	}
	return vnpms.state
}

func (vnpms *VpcNetworkPerformanceMetricSubscription) DependOn() terra.Reference {
	return terra.ReferenceResource(vnpms)
}

type VpcNetworkPerformanceMetricSubscriptionArgs struct {
	// Destination: string, required
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metric: string, optional
	Metric terra.StringValue `hcl:"metric,attr"`
	// Source: string, required
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// Statistic: string, optional
	Statistic terra.StringValue `hcl:"statistic,attr"`
	// DependsOn contains resources that VpcNetworkPerformanceMetricSubscription depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type vpcNetworkPerformanceMetricSubscriptionAttributes struct {
	ref terra.Reference
}

func (vnpms vpcNetworkPerformanceMetricSubscriptionAttributes) Destination() terra.StringValue {
	return terra.ReferenceString(vnpms.ref.Append("destination"))
}

func (vnpms vpcNetworkPerformanceMetricSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(vnpms.ref.Append("id"))
}

func (vnpms vpcNetworkPerformanceMetricSubscriptionAttributes) Metric() terra.StringValue {
	return terra.ReferenceString(vnpms.ref.Append("metric"))
}

func (vnpms vpcNetworkPerformanceMetricSubscriptionAttributes) Period() terra.StringValue {
	return terra.ReferenceString(vnpms.ref.Append("period"))
}

func (vnpms vpcNetworkPerformanceMetricSubscriptionAttributes) Source() terra.StringValue {
	return terra.ReferenceString(vnpms.ref.Append("source"))
}

func (vnpms vpcNetworkPerformanceMetricSubscriptionAttributes) Statistic() terra.StringValue {
	return terra.ReferenceString(vnpms.ref.Append("statistic"))
}

type vpcNetworkPerformanceMetricSubscriptionState struct {
	Destination string `json:"destination"`
	Id          string `json:"id"`
	Metric      string `json:"metric"`
	Period      string `json:"period"`
	Source      string `json:"source"`
	Statistic   string `json:"statistic"`
}
