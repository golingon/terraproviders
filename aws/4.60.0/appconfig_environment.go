// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	appconfigenvironment "github.com/golingon/terraproviders/aws/4.60.0/appconfigenvironment"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppconfigEnvironment(name string, args AppconfigEnvironmentArgs) *AppconfigEnvironment {
	return &AppconfigEnvironment{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppconfigEnvironment)(nil)

type AppconfigEnvironment struct {
	Name  string
	Args  AppconfigEnvironmentArgs
	state *appconfigEnvironmentState
}

func (ae *AppconfigEnvironment) Type() string {
	return "aws_appconfig_environment"
}

func (ae *AppconfigEnvironment) LocalName() string {
	return ae.Name
}

func (ae *AppconfigEnvironment) Configuration() interface{} {
	return ae.Args
}

func (ae *AppconfigEnvironment) Attributes() appconfigEnvironmentAttributes {
	return appconfigEnvironmentAttributes{ref: terra.ReferenceResource(ae)}
}

func (ae *AppconfigEnvironment) ImportState(av io.Reader) error {
	ae.state = &appconfigEnvironmentState{}
	if err := json.NewDecoder(av).Decode(ae.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ae.Type(), ae.LocalName(), err)
	}
	return nil
}

func (ae *AppconfigEnvironment) State() (*appconfigEnvironmentState, bool) {
	return ae.state, ae.state != nil
}

func (ae *AppconfigEnvironment) StateMust() *appconfigEnvironmentState {
	if ae.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ae.Type(), ae.LocalName()))
	}
	return ae.state
}

func (ae *AppconfigEnvironment) DependOn() terra.Reference {
	return terra.ReferenceResource(ae)
}

type AppconfigEnvironmentArgs struct {
	// ApplicationId: string, required
	ApplicationId terra.StringValue `hcl:"application_id,attr" validate:"required"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Monitor: min=0,max=5
	Monitor []appconfigenvironment.Monitor `hcl:"monitor,block" validate:"min=0,max=5"`
	// DependsOn contains resources that AppconfigEnvironment depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appconfigEnvironmentAttributes struct {
	ref terra.Reference
}

func (ae appconfigEnvironmentAttributes) ApplicationId() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("application_id"))
}

func (ae appconfigEnvironmentAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("arn"))
}

func (ae appconfigEnvironmentAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("description"))
}

func (ae appconfigEnvironmentAttributes) EnvironmentId() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("environment_id"))
}

func (ae appconfigEnvironmentAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("id"))
}

func (ae appconfigEnvironmentAttributes) Name() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("name"))
}

func (ae appconfigEnvironmentAttributes) State() terra.StringValue {
	return terra.ReferenceString(ae.ref.Append("state"))
}

func (ae appconfigEnvironmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ae.ref.Append("tags"))
}

func (ae appconfigEnvironmentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ae.ref.Append("tags_all"))
}

func (ae appconfigEnvironmentAttributes) Monitor() terra.SetValue[appconfigenvironment.MonitorAttributes] {
	return terra.ReferenceSet[appconfigenvironment.MonitorAttributes](ae.ref.Append("monitor"))
}

type appconfigEnvironmentState struct {
	ApplicationId string                              `json:"application_id"`
	Arn           string                              `json:"arn"`
	Description   string                              `json:"description"`
	EnvironmentId string                              `json:"environment_id"`
	Id            string                              `json:"id"`
	Name          string                              `json:"name"`
	State         string                              `json:"state"`
	Tags          map[string]string                   `json:"tags"`
	TagsAll       map[string]string                   `json:"tags_all"`
	Monitor       []appconfigenvironment.MonitorState `json:"monitor"`
}
