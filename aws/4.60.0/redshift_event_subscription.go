// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	redshifteventsubscription "github.com/golingon/terraproviders/aws/4.60.0/redshifteventsubscription"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRedshiftEventSubscription(name string, args RedshiftEventSubscriptionArgs) *RedshiftEventSubscription {
	return &RedshiftEventSubscription{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RedshiftEventSubscription)(nil)

type RedshiftEventSubscription struct {
	Name  string
	Args  RedshiftEventSubscriptionArgs
	state *redshiftEventSubscriptionState
}

func (res *RedshiftEventSubscription) Type() string {
	return "aws_redshift_event_subscription"
}

func (res *RedshiftEventSubscription) LocalName() string {
	return res.Name
}

func (res *RedshiftEventSubscription) Configuration() interface{} {
	return res.Args
}

func (res *RedshiftEventSubscription) Attributes() redshiftEventSubscriptionAttributes {
	return redshiftEventSubscriptionAttributes{ref: terra.ReferenceResource(res)}
}

func (res *RedshiftEventSubscription) ImportState(av io.Reader) error {
	res.state = &redshiftEventSubscriptionState{}
	if err := json.NewDecoder(av).Decode(res.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", res.Type(), res.LocalName(), err)
	}
	return nil
}

func (res *RedshiftEventSubscription) State() (*redshiftEventSubscriptionState, bool) {
	return res.state, res.state != nil
}

func (res *RedshiftEventSubscription) StateMust() *redshiftEventSubscriptionState {
	if res.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", res.Type(), res.LocalName()))
	}
	return res.state
}

func (res *RedshiftEventSubscription) DependOn() terra.Reference {
	return terra.ReferenceResource(res)
}

type RedshiftEventSubscriptionArgs struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// EventCategories: set of string, optional
	EventCategories terra.SetValue[terra.StringValue] `hcl:"event_categories,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Severity: string, optional
	Severity terra.StringValue `hcl:"severity,attr"`
	// SnsTopicArn: string, required
	SnsTopicArn terra.StringValue `hcl:"sns_topic_arn,attr" validate:"required"`
	// SourceIds: set of string, optional
	SourceIds terra.SetValue[terra.StringValue] `hcl:"source_ids,attr"`
	// SourceType: string, optional
	SourceType terra.StringValue `hcl:"source_type,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts: optional
	Timeouts *redshifteventsubscription.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that RedshiftEventSubscription depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type redshiftEventSubscriptionAttributes struct {
	ref terra.Reference
}

func (res redshiftEventSubscriptionAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(res.ref.Append("arn"))
}

func (res redshiftEventSubscriptionAttributes) CustomerAwsId() terra.StringValue {
	return terra.ReferenceString(res.ref.Append("customer_aws_id"))
}

func (res redshiftEventSubscriptionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(res.ref.Append("enabled"))
}

func (res redshiftEventSubscriptionAttributes) EventCategories() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](res.ref.Append("event_categories"))
}

func (res redshiftEventSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(res.ref.Append("id"))
}

func (res redshiftEventSubscriptionAttributes) Name() terra.StringValue {
	return terra.ReferenceString(res.ref.Append("name"))
}

func (res redshiftEventSubscriptionAttributes) Severity() terra.StringValue {
	return terra.ReferenceString(res.ref.Append("severity"))
}

func (res redshiftEventSubscriptionAttributes) SnsTopicArn() terra.StringValue {
	return terra.ReferenceString(res.ref.Append("sns_topic_arn"))
}

func (res redshiftEventSubscriptionAttributes) SourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](res.ref.Append("source_ids"))
}

func (res redshiftEventSubscriptionAttributes) SourceType() terra.StringValue {
	return terra.ReferenceString(res.ref.Append("source_type"))
}

func (res redshiftEventSubscriptionAttributes) Status() terra.StringValue {
	return terra.ReferenceString(res.ref.Append("status"))
}

func (res redshiftEventSubscriptionAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](res.ref.Append("tags"))
}

func (res redshiftEventSubscriptionAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](res.ref.Append("tags_all"))
}

func (res redshiftEventSubscriptionAttributes) Timeouts() redshifteventsubscription.TimeoutsAttributes {
	return terra.ReferenceSingle[redshifteventsubscription.TimeoutsAttributes](res.ref.Append("timeouts"))
}

type redshiftEventSubscriptionState struct {
	Arn             string                                   `json:"arn"`
	CustomerAwsId   string                                   `json:"customer_aws_id"`
	Enabled         bool                                     `json:"enabled"`
	EventCategories []string                                 `json:"event_categories"`
	Id              string                                   `json:"id"`
	Name            string                                   `json:"name"`
	Severity        string                                   `json:"severity"`
	SnsTopicArn     string                                   `json:"sns_topic_arn"`
	SourceIds       []string                                 `json:"source_ids"`
	SourceType      string                                   `json:"source_type"`
	Status          string                                   `json:"status"`
	Tags            map[string]string                        `json:"tags"`
	TagsAll         map[string]string                        `json:"tags_all"`
	Timeouts        *redshifteventsubscription.TimeoutsState `json:"timeouts"`
}
