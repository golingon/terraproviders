// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	dbsnapshotcopy "github.com/golingon/terraproviders/aws/4.60.0/dbsnapshotcopy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDbSnapshotCopy(name string, args DbSnapshotCopyArgs) *DbSnapshotCopy {
	return &DbSnapshotCopy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DbSnapshotCopy)(nil)

type DbSnapshotCopy struct {
	Name  string
	Args  DbSnapshotCopyArgs
	state *dbSnapshotCopyState
}

func (dsc *DbSnapshotCopy) Type() string {
	return "aws_db_snapshot_copy"
}

func (dsc *DbSnapshotCopy) LocalName() string {
	return dsc.Name
}

func (dsc *DbSnapshotCopy) Configuration() interface{} {
	return dsc.Args
}

func (dsc *DbSnapshotCopy) Attributes() dbSnapshotCopyAttributes {
	return dbSnapshotCopyAttributes{ref: terra.ReferenceResource(dsc)}
}

func (dsc *DbSnapshotCopy) ImportState(av io.Reader) error {
	dsc.state = &dbSnapshotCopyState{}
	if err := json.NewDecoder(av).Decode(dsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dsc.Type(), dsc.LocalName(), err)
	}
	return nil
}

func (dsc *DbSnapshotCopy) State() (*dbSnapshotCopyState, bool) {
	return dsc.state, dsc.state != nil
}

func (dsc *DbSnapshotCopy) StateMust() *dbSnapshotCopyState {
	if dsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dsc.Type(), dsc.LocalName()))
	}
	return dsc.state
}

func (dsc *DbSnapshotCopy) DependOn() terra.Reference {
	return terra.ReferenceResource(dsc)
}

type DbSnapshotCopyArgs struct {
	// CopyTags: bool, optional
	CopyTags terra.BoolValue `hcl:"copy_tags,attr"`
	// DestinationRegion: string, optional
	DestinationRegion terra.StringValue `hcl:"destination_region,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// OptionGroupName: string, optional
	OptionGroupName terra.StringValue `hcl:"option_group_name,attr"`
	// PresignedUrl: string, optional
	PresignedUrl terra.StringValue `hcl:"presigned_url,attr"`
	// SourceDbSnapshotIdentifier: string, required
	SourceDbSnapshotIdentifier terra.StringValue `hcl:"source_db_snapshot_identifier,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetCustomAvailabilityZone: string, optional
	TargetCustomAvailabilityZone terra.StringValue `hcl:"target_custom_availability_zone,attr"`
	// TargetDbSnapshotIdentifier: string, required
	TargetDbSnapshotIdentifier terra.StringValue `hcl:"target_db_snapshot_identifier,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *dbsnapshotcopy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that DbSnapshotCopy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type dbSnapshotCopyAttributes struct {
	ref terra.Reference
}

func (dsc dbSnapshotCopyAttributes) AllocatedStorage() terra.NumberValue {
	return terra.ReferenceNumber(dsc.ref.Append("allocated_storage"))
}

func (dsc dbSnapshotCopyAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("availability_zone"))
}

func (dsc dbSnapshotCopyAttributes) CopyTags() terra.BoolValue {
	return terra.ReferenceBool(dsc.ref.Append("copy_tags"))
}

func (dsc dbSnapshotCopyAttributes) DbSnapshotArn() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("db_snapshot_arn"))
}

func (dsc dbSnapshotCopyAttributes) DestinationRegion() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("destination_region"))
}

func (dsc dbSnapshotCopyAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceBool(dsc.ref.Append("encrypted"))
}

func (dsc dbSnapshotCopyAttributes) Engine() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("engine"))
}

func (dsc dbSnapshotCopyAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("engine_version"))
}

func (dsc dbSnapshotCopyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("id"))
}

func (dsc dbSnapshotCopyAttributes) Iops() terra.NumberValue {
	return terra.ReferenceNumber(dsc.ref.Append("iops"))
}

func (dsc dbSnapshotCopyAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("kms_key_id"))
}

func (dsc dbSnapshotCopyAttributes) LicenseModel() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("license_model"))
}

func (dsc dbSnapshotCopyAttributes) OptionGroupName() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("option_group_name"))
}

func (dsc dbSnapshotCopyAttributes) Port() terra.NumberValue {
	return terra.ReferenceNumber(dsc.ref.Append("port"))
}

func (dsc dbSnapshotCopyAttributes) PresignedUrl() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("presigned_url"))
}

func (dsc dbSnapshotCopyAttributes) SnapshotType() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("snapshot_type"))
}

func (dsc dbSnapshotCopyAttributes) SourceDbSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("source_db_snapshot_identifier"))
}

func (dsc dbSnapshotCopyAttributes) SourceRegion() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("source_region"))
}

func (dsc dbSnapshotCopyAttributes) StorageType() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("storage_type"))
}

func (dsc dbSnapshotCopyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dsc.ref.Append("tags"))
}

func (dsc dbSnapshotCopyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dsc.ref.Append("tags_all"))
}

func (dsc dbSnapshotCopyAttributes) TargetCustomAvailabilityZone() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("target_custom_availability_zone"))
}

func (dsc dbSnapshotCopyAttributes) TargetDbSnapshotIdentifier() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("target_db_snapshot_identifier"))
}

func (dsc dbSnapshotCopyAttributes) VpcId() terra.StringValue {
	return terra.ReferenceString(dsc.ref.Append("vpc_id"))
}

func (dsc dbSnapshotCopyAttributes) Timeouts() dbsnapshotcopy.TimeoutsAttributes {
	return terra.ReferenceSingle[dbsnapshotcopy.TimeoutsAttributes](dsc.ref.Append("timeouts"))
}

type dbSnapshotCopyState struct {
	AllocatedStorage             float64                       `json:"allocated_storage"`
	AvailabilityZone             string                        `json:"availability_zone"`
	CopyTags                     bool                          `json:"copy_tags"`
	DbSnapshotArn                string                        `json:"db_snapshot_arn"`
	DestinationRegion            string                        `json:"destination_region"`
	Encrypted                    bool                          `json:"encrypted"`
	Engine                       string                        `json:"engine"`
	EngineVersion                string                        `json:"engine_version"`
	Id                           string                        `json:"id"`
	Iops                         float64                       `json:"iops"`
	KmsKeyId                     string                        `json:"kms_key_id"`
	LicenseModel                 string                        `json:"license_model"`
	OptionGroupName              string                        `json:"option_group_name"`
	Port                         float64                       `json:"port"`
	PresignedUrl                 string                        `json:"presigned_url"`
	SnapshotType                 string                        `json:"snapshot_type"`
	SourceDbSnapshotIdentifier   string                        `json:"source_db_snapshot_identifier"`
	SourceRegion                 string                        `json:"source_region"`
	StorageType                  string                        `json:"storage_type"`
	Tags                         map[string]string             `json:"tags"`
	TagsAll                      map[string]string             `json:"tags_all"`
	TargetCustomAvailabilityZone string                        `json:"target_custom_availability_zone"`
	TargetDbSnapshotIdentifier   string                        `json:"target_db_snapshot_identifier"`
	VpcId                        string                        `json:"vpc_id"`
	Timeouts                     *dbsnapshotcopy.TimeoutsState `json:"timeouts"`
}
