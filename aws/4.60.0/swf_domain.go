// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewSwfDomain(name string, args SwfDomainArgs) *SwfDomain {
	return &SwfDomain{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SwfDomain)(nil)

type SwfDomain struct {
	Name  string
	Args  SwfDomainArgs
	state *swfDomainState
}

func (sd *SwfDomain) Type() string {
	return "aws_swf_domain"
}

func (sd *SwfDomain) LocalName() string {
	return sd.Name
}

func (sd *SwfDomain) Configuration() interface{} {
	return sd.Args
}

func (sd *SwfDomain) Attributes() swfDomainAttributes {
	return swfDomainAttributes{ref: terra.ReferenceResource(sd)}
}

func (sd *SwfDomain) ImportState(av io.Reader) error {
	sd.state = &swfDomainState{}
	if err := json.NewDecoder(av).Decode(sd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", sd.Type(), sd.LocalName(), err)
	}
	return nil
}

func (sd *SwfDomain) State() (*swfDomainState, bool) {
	return sd.state, sd.state != nil
}

func (sd *SwfDomain) StateMust() *swfDomainState {
	if sd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", sd.Type(), sd.LocalName()))
	}
	return sd.state
}

func (sd *SwfDomain) DependOn() terra.Reference {
	return terra.ReferenceResource(sd)
}

type SwfDomainArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix: string, optional
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// WorkflowExecutionRetentionPeriodInDays: string, required
	WorkflowExecutionRetentionPeriodInDays terra.StringValue `hcl:"workflow_execution_retention_period_in_days,attr" validate:"required"`
	// DependsOn contains resources that SwfDomain depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type swfDomainAttributes struct {
	ref terra.Reference
}

func (sd swfDomainAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(sd.ref.Append("arn"))
}

func (sd swfDomainAttributes) Description() terra.StringValue {
	return terra.ReferenceString(sd.ref.Append("description"))
}

func (sd swfDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceString(sd.ref.Append("id"))
}

func (sd swfDomainAttributes) Name() terra.StringValue {
	return terra.ReferenceString(sd.ref.Append("name"))
}

func (sd swfDomainAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceString(sd.ref.Append("name_prefix"))
}

func (sd swfDomainAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sd.ref.Append("tags"))
}

func (sd swfDomainAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](sd.ref.Append("tags_all"))
}

func (sd swfDomainAttributes) WorkflowExecutionRetentionPeriodInDays() terra.StringValue {
	return terra.ReferenceString(sd.ref.Append("workflow_execution_retention_period_in_days"))
}

type swfDomainState struct {
	Arn                                    string            `json:"arn"`
	Description                            string            `json:"description"`
	Id                                     string            `json:"id"`
	Name                                   string            `json:"name"`
	NamePrefix                             string            `json:"name_prefix"`
	Tags                                   map[string]string `json:"tags"`
	TagsAll                                map[string]string `json:"tags_all"`
	WorkflowExecutionRetentionPeriodInDays string            `json:"workflow_execution_retention_period_in_days"`
}
