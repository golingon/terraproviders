// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewDefaultVpcDhcpOptions(name string, args DefaultVpcDhcpOptionsArgs) *DefaultVpcDhcpOptions {
	return &DefaultVpcDhcpOptions{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*DefaultVpcDhcpOptions)(nil)

type DefaultVpcDhcpOptions struct {
	Name  string
	Args  DefaultVpcDhcpOptionsArgs
	state *defaultVpcDhcpOptionsState
}

func (dvdo *DefaultVpcDhcpOptions) Type() string {
	return "aws_default_vpc_dhcp_options"
}

func (dvdo *DefaultVpcDhcpOptions) LocalName() string {
	return dvdo.Name
}

func (dvdo *DefaultVpcDhcpOptions) Configuration() interface{} {
	return dvdo.Args
}

func (dvdo *DefaultVpcDhcpOptions) Attributes() defaultVpcDhcpOptionsAttributes {
	return defaultVpcDhcpOptionsAttributes{ref: terra.ReferenceResource(dvdo)}
}

func (dvdo *DefaultVpcDhcpOptions) ImportState(av io.Reader) error {
	dvdo.state = &defaultVpcDhcpOptionsState{}
	if err := json.NewDecoder(av).Decode(dvdo.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", dvdo.Type(), dvdo.LocalName(), err)
	}
	return nil
}

func (dvdo *DefaultVpcDhcpOptions) State() (*defaultVpcDhcpOptionsState, bool) {
	return dvdo.state, dvdo.state != nil
}

func (dvdo *DefaultVpcDhcpOptions) StateMust() *defaultVpcDhcpOptionsState {
	if dvdo.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", dvdo.Type(), dvdo.LocalName()))
	}
	return dvdo.state
}

func (dvdo *DefaultVpcDhcpOptions) DependOn() terra.Reference {
	return terra.ReferenceResource(dvdo)
}

type DefaultVpcDhcpOptionsArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// OwnerId: string, optional
	OwnerId terra.StringValue `hcl:"owner_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that DefaultVpcDhcpOptions depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type defaultVpcDhcpOptionsAttributes struct {
	ref terra.Reference
}

func (dvdo defaultVpcDhcpOptionsAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(dvdo.ref.Append("arn"))
}

func (dvdo defaultVpcDhcpOptionsAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(dvdo.ref.Append("domain_name"))
}

func (dvdo defaultVpcDhcpOptionsAttributes) DomainNameServers() terra.StringValue {
	return terra.ReferenceString(dvdo.ref.Append("domain_name_servers"))
}

func (dvdo defaultVpcDhcpOptionsAttributes) Id() terra.StringValue {
	return terra.ReferenceString(dvdo.ref.Append("id"))
}

func (dvdo defaultVpcDhcpOptionsAttributes) NetbiosNameServers() terra.StringValue {
	return terra.ReferenceString(dvdo.ref.Append("netbios_name_servers"))
}

func (dvdo defaultVpcDhcpOptionsAttributes) NetbiosNodeType() terra.StringValue {
	return terra.ReferenceString(dvdo.ref.Append("netbios_node_type"))
}

func (dvdo defaultVpcDhcpOptionsAttributes) NtpServers() terra.StringValue {
	return terra.ReferenceString(dvdo.ref.Append("ntp_servers"))
}

func (dvdo defaultVpcDhcpOptionsAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(dvdo.ref.Append("owner_id"))
}

func (dvdo defaultVpcDhcpOptionsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dvdo.ref.Append("tags"))
}

func (dvdo defaultVpcDhcpOptionsAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](dvdo.ref.Append("tags_all"))
}

type defaultVpcDhcpOptionsState struct {
	Arn                string            `json:"arn"`
	DomainName         string            `json:"domain_name"`
	DomainNameServers  string            `json:"domain_name_servers"`
	Id                 string            `json:"id"`
	NetbiosNameServers string            `json:"netbios_name_servers"`
	NetbiosNodeType    string            `json:"netbios_node_type"`
	NtpServers         string            `json:"ntp_servers"`
	OwnerId            string            `json:"owner_id"`
	Tags               map[string]string `json:"tags"`
	TagsAll            map[string]string `json:"tags_all"`
}
