// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	wafregionalsqlinjectionmatchset "github.com/golingon/terraproviders/aws/4.60.0/wafregionalsqlinjectionmatchset"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewWafregionalSqlInjectionMatchSet(name string, args WafregionalSqlInjectionMatchSetArgs) *WafregionalSqlInjectionMatchSet {
	return &WafregionalSqlInjectionMatchSet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*WafregionalSqlInjectionMatchSet)(nil)

type WafregionalSqlInjectionMatchSet struct {
	Name  string
	Args  WafregionalSqlInjectionMatchSetArgs
	state *wafregionalSqlInjectionMatchSetState
}

func (wsims *WafregionalSqlInjectionMatchSet) Type() string {
	return "aws_wafregional_sql_injection_match_set"
}

func (wsims *WafregionalSqlInjectionMatchSet) LocalName() string {
	return wsims.Name
}

func (wsims *WafregionalSqlInjectionMatchSet) Configuration() interface{} {
	return wsims.Args
}

func (wsims *WafregionalSqlInjectionMatchSet) Attributes() wafregionalSqlInjectionMatchSetAttributes {
	return wafregionalSqlInjectionMatchSetAttributes{ref: terra.ReferenceResource(wsims)}
}

func (wsims *WafregionalSqlInjectionMatchSet) ImportState(av io.Reader) error {
	wsims.state = &wafregionalSqlInjectionMatchSetState{}
	if err := json.NewDecoder(av).Decode(wsims.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", wsims.Type(), wsims.LocalName(), err)
	}
	return nil
}

func (wsims *WafregionalSqlInjectionMatchSet) State() (*wafregionalSqlInjectionMatchSetState, bool) {
	return wsims.state, wsims.state != nil
}

func (wsims *WafregionalSqlInjectionMatchSet) StateMust() *wafregionalSqlInjectionMatchSetState {
	if wsims.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", wsims.Type(), wsims.LocalName()))
	}
	return wsims.state
}

func (wsims *WafregionalSqlInjectionMatchSet) DependOn() terra.Reference {
	return terra.ReferenceResource(wsims)
}

type WafregionalSqlInjectionMatchSetArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SqlInjectionMatchTuple: min=0
	SqlInjectionMatchTuple []wafregionalsqlinjectionmatchset.SqlInjectionMatchTuple `hcl:"sql_injection_match_tuple,block" validate:"min=0"`
	// DependsOn contains resources that WafregionalSqlInjectionMatchSet depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type wafregionalSqlInjectionMatchSetAttributes struct {
	ref terra.Reference
}

func (wsims wafregionalSqlInjectionMatchSetAttributes) Id() terra.StringValue {
	return terra.ReferenceString(wsims.ref.Append("id"))
}

func (wsims wafregionalSqlInjectionMatchSetAttributes) Name() terra.StringValue {
	return terra.ReferenceString(wsims.ref.Append("name"))
}

func (wsims wafregionalSqlInjectionMatchSetAttributes) SqlInjectionMatchTuple() terra.SetValue[wafregionalsqlinjectionmatchset.SqlInjectionMatchTupleAttributes] {
	return terra.ReferenceSet[wafregionalsqlinjectionmatchset.SqlInjectionMatchTupleAttributes](wsims.ref.Append("sql_injection_match_tuple"))
}

type wafregionalSqlInjectionMatchSetState struct {
	Id                     string                                                        `json:"id"`
	Name                   string                                                        `json:"name"`
	SqlInjectionMatchTuple []wafregionalsqlinjectionmatchset.SqlInjectionMatchTupleState `json:"sql_injection_match_tuple"`
}
