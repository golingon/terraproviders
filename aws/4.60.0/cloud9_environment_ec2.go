// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCloud9EnvironmentEc2(name string, args Cloud9EnvironmentEc2Args) *Cloud9EnvironmentEc2 {
	return &Cloud9EnvironmentEc2{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Cloud9EnvironmentEc2)(nil)

type Cloud9EnvironmentEc2 struct {
	Name  string
	Args  Cloud9EnvironmentEc2Args
	state *cloud9EnvironmentEc2State
}

func (cee *Cloud9EnvironmentEc2) Type() string {
	return "aws_cloud9_environment_ec2"
}

func (cee *Cloud9EnvironmentEc2) LocalName() string {
	return cee.Name
}

func (cee *Cloud9EnvironmentEc2) Configuration() interface{} {
	return cee.Args
}

func (cee *Cloud9EnvironmentEc2) Attributes() cloud9EnvironmentEc2Attributes {
	return cloud9EnvironmentEc2Attributes{ref: terra.ReferenceResource(cee)}
}

func (cee *Cloud9EnvironmentEc2) ImportState(av io.Reader) error {
	cee.state = &cloud9EnvironmentEc2State{}
	if err := json.NewDecoder(av).Decode(cee.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", cee.Type(), cee.LocalName(), err)
	}
	return nil
}

func (cee *Cloud9EnvironmentEc2) State() (*cloud9EnvironmentEc2State, bool) {
	return cee.state, cee.state != nil
}

func (cee *Cloud9EnvironmentEc2) StateMust() *cloud9EnvironmentEc2State {
	if cee.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", cee.Type(), cee.LocalName()))
	}
	return cee.state
}

func (cee *Cloud9EnvironmentEc2) DependOn() terra.Reference {
	return terra.ReferenceResource(cee)
}

type Cloud9EnvironmentEc2Args struct {
	// AutomaticStopTimeMinutes: number, optional
	AutomaticStopTimeMinutes terra.NumberValue `hcl:"automatic_stop_time_minutes,attr"`
	// ConnectionType: string, optional
	ConnectionType terra.StringValue `hcl:"connection_type,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ImageId: string, optional
	ImageId terra.StringValue `hcl:"image_id,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OwnerArn: string, optional
	OwnerArn terra.StringValue `hcl:"owner_arn,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that Cloud9EnvironmentEc2 depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type cloud9EnvironmentEc2Attributes struct {
	ref terra.Reference
}

func (cee cloud9EnvironmentEc2Attributes) Arn() terra.StringValue {
	return terra.ReferenceString(cee.ref.Append("arn"))
}

func (cee cloud9EnvironmentEc2Attributes) AutomaticStopTimeMinutes() terra.NumberValue {
	return terra.ReferenceNumber(cee.ref.Append("automatic_stop_time_minutes"))
}

func (cee cloud9EnvironmentEc2Attributes) ConnectionType() terra.StringValue {
	return terra.ReferenceString(cee.ref.Append("connection_type"))
}

func (cee cloud9EnvironmentEc2Attributes) Description() terra.StringValue {
	return terra.ReferenceString(cee.ref.Append("description"))
}

func (cee cloud9EnvironmentEc2Attributes) Id() terra.StringValue {
	return terra.ReferenceString(cee.ref.Append("id"))
}

func (cee cloud9EnvironmentEc2Attributes) ImageId() terra.StringValue {
	return terra.ReferenceString(cee.ref.Append("image_id"))
}

func (cee cloud9EnvironmentEc2Attributes) InstanceType() terra.StringValue {
	return terra.ReferenceString(cee.ref.Append("instance_type"))
}

func (cee cloud9EnvironmentEc2Attributes) Name() terra.StringValue {
	return terra.ReferenceString(cee.ref.Append("name"))
}

func (cee cloud9EnvironmentEc2Attributes) OwnerArn() terra.StringValue {
	return terra.ReferenceString(cee.ref.Append("owner_arn"))
}

func (cee cloud9EnvironmentEc2Attributes) SubnetId() terra.StringValue {
	return terra.ReferenceString(cee.ref.Append("subnet_id"))
}

func (cee cloud9EnvironmentEc2Attributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cee.ref.Append("tags"))
}

func (cee cloud9EnvironmentEc2Attributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](cee.ref.Append("tags_all"))
}

func (cee cloud9EnvironmentEc2Attributes) Type() terra.StringValue {
	return terra.ReferenceString(cee.ref.Append("type"))
}

type cloud9EnvironmentEc2State struct {
	Arn                      string            `json:"arn"`
	AutomaticStopTimeMinutes float64           `json:"automatic_stop_time_minutes"`
	ConnectionType           string            `json:"connection_type"`
	Description              string            `json:"description"`
	Id                       string            `json:"id"`
	ImageId                  string            `json:"image_id"`
	InstanceType             string            `json:"instance_type"`
	Name                     string            `json:"name"`
	OwnerArn                 string            `json:"owner_arn"`
	SubnetId                 string            `json:"subnet_id"`
	Tags                     map[string]string `json:"tags"`
	TagsAll                  map[string]string `json:"tags_all"`
	Type                     string            `json:"type"`
}
