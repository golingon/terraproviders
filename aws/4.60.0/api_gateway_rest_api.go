// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	apigatewayrestapi "github.com/golingon/terraproviders/aws/4.60.0/apigatewayrestapi"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewApiGatewayRestApi(name string, args ApiGatewayRestApiArgs) *ApiGatewayRestApi {
	return &ApiGatewayRestApi{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ApiGatewayRestApi)(nil)

type ApiGatewayRestApi struct {
	Name  string
	Args  ApiGatewayRestApiArgs
	state *apiGatewayRestApiState
}

func (agra *ApiGatewayRestApi) Type() string {
	return "aws_api_gateway_rest_api"
}

func (agra *ApiGatewayRestApi) LocalName() string {
	return agra.Name
}

func (agra *ApiGatewayRestApi) Configuration() interface{} {
	return agra.Args
}

func (agra *ApiGatewayRestApi) Attributes() apiGatewayRestApiAttributes {
	return apiGatewayRestApiAttributes{ref: terra.ReferenceResource(agra)}
}

func (agra *ApiGatewayRestApi) ImportState(av io.Reader) error {
	agra.state = &apiGatewayRestApiState{}
	if err := json.NewDecoder(av).Decode(agra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agra.Type(), agra.LocalName(), err)
	}
	return nil
}

func (agra *ApiGatewayRestApi) State() (*apiGatewayRestApiState, bool) {
	return agra.state, agra.state != nil
}

func (agra *ApiGatewayRestApi) StateMust() *apiGatewayRestApiState {
	if agra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agra.Type(), agra.LocalName()))
	}
	return agra.state
}

func (agra *ApiGatewayRestApi) DependOn() terra.Reference {
	return terra.ReferenceResource(agra)
}

type ApiGatewayRestApiArgs struct {
	// ApiKeySource: string, optional
	ApiKeySource terra.StringValue `hcl:"api_key_source,attr"`
	// BinaryMediaTypes: list of string, optional
	BinaryMediaTypes terra.ListValue[terra.StringValue] `hcl:"binary_media_types,attr"`
	// Body: string, optional
	Body terra.StringValue `hcl:"body,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableExecuteApiEndpoint: bool, optional
	DisableExecuteApiEndpoint terra.BoolValue `hcl:"disable_execute_api_endpoint,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MinimumCompressionSize: number, optional
	MinimumCompressionSize terra.NumberValue `hcl:"minimum_compression_size,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters: map of string, optional
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
	// PutRestApiMode: string, optional
	PutRestApiMode terra.StringValue `hcl:"put_rest_api_mode,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// EndpointConfiguration: optional
	EndpointConfiguration *apigatewayrestapi.EndpointConfiguration `hcl:"endpoint_configuration,block"`
	// DependsOn contains resources that ApiGatewayRestApi depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type apiGatewayRestApiAttributes struct {
	ref terra.Reference
}

func (agra apiGatewayRestApiAttributes) ApiKeySource() terra.StringValue {
	return terra.ReferenceString(agra.ref.Append("api_key_source"))
}

func (agra apiGatewayRestApiAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(agra.ref.Append("arn"))
}

func (agra apiGatewayRestApiAttributes) BinaryMediaTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](agra.ref.Append("binary_media_types"))
}

func (agra apiGatewayRestApiAttributes) Body() terra.StringValue {
	return terra.ReferenceString(agra.ref.Append("body"))
}

func (agra apiGatewayRestApiAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceString(agra.ref.Append("created_date"))
}

func (agra apiGatewayRestApiAttributes) Description() terra.StringValue {
	return terra.ReferenceString(agra.ref.Append("description"))
}

func (agra apiGatewayRestApiAttributes) DisableExecuteApiEndpoint() terra.BoolValue {
	return terra.ReferenceBool(agra.ref.Append("disable_execute_api_endpoint"))
}

func (agra apiGatewayRestApiAttributes) ExecutionArn() terra.StringValue {
	return terra.ReferenceString(agra.ref.Append("execution_arn"))
}

func (agra apiGatewayRestApiAttributes) Id() terra.StringValue {
	return terra.ReferenceString(agra.ref.Append("id"))
}

func (agra apiGatewayRestApiAttributes) MinimumCompressionSize() terra.NumberValue {
	return terra.ReferenceNumber(agra.ref.Append("minimum_compression_size"))
}

func (agra apiGatewayRestApiAttributes) Name() terra.StringValue {
	return terra.ReferenceString(agra.ref.Append("name"))
}

func (agra apiGatewayRestApiAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agra.ref.Append("parameters"))
}

func (agra apiGatewayRestApiAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(agra.ref.Append("policy"))
}

func (agra apiGatewayRestApiAttributes) PutRestApiMode() terra.StringValue {
	return terra.ReferenceString(agra.ref.Append("put_rest_api_mode"))
}

func (agra apiGatewayRestApiAttributes) RootResourceId() terra.StringValue {
	return terra.ReferenceString(agra.ref.Append("root_resource_id"))
}

func (agra apiGatewayRestApiAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agra.ref.Append("tags"))
}

func (agra apiGatewayRestApiAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](agra.ref.Append("tags_all"))
}

func (agra apiGatewayRestApiAttributes) EndpointConfiguration() terra.ListValue[apigatewayrestapi.EndpointConfigurationAttributes] {
	return terra.ReferenceList[apigatewayrestapi.EndpointConfigurationAttributes](agra.ref.Append("endpoint_configuration"))
}

type apiGatewayRestApiState struct {
	ApiKeySource              string                                         `json:"api_key_source"`
	Arn                       string                                         `json:"arn"`
	BinaryMediaTypes          []string                                       `json:"binary_media_types"`
	Body                      string                                         `json:"body"`
	CreatedDate               string                                         `json:"created_date"`
	Description               string                                         `json:"description"`
	DisableExecuteApiEndpoint bool                                           `json:"disable_execute_api_endpoint"`
	ExecutionArn              string                                         `json:"execution_arn"`
	Id                        string                                         `json:"id"`
	MinimumCompressionSize    float64                                        `json:"minimum_compression_size"`
	Name                      string                                         `json:"name"`
	Parameters                map[string]string                              `json:"parameters"`
	Policy                    string                                         `json:"policy"`
	PutRestApiMode            string                                         `json:"put_rest_api_mode"`
	RootResourceId            string                                         `json:"root_resource_id"`
	Tags                      map[string]string                              `json:"tags"`
	TagsAll                   map[string]string                              `json:"tags_all"`
	EndpointConfiguration     []apigatewayrestapi.EndpointConfigurationState `json:"endpoint_configuration"`
}
