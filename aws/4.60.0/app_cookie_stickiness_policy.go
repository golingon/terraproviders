// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewAppCookieStickinessPolicy(name string, args AppCookieStickinessPolicyArgs) *AppCookieStickinessPolicy {
	return &AppCookieStickinessPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*AppCookieStickinessPolicy)(nil)

type AppCookieStickinessPolicy struct {
	Name  string
	Args  AppCookieStickinessPolicyArgs
	state *appCookieStickinessPolicyState
}

func (acsp *AppCookieStickinessPolicy) Type() string {
	return "aws_app_cookie_stickiness_policy"
}

func (acsp *AppCookieStickinessPolicy) LocalName() string {
	return acsp.Name
}

func (acsp *AppCookieStickinessPolicy) Configuration() interface{} {
	return acsp.Args
}

func (acsp *AppCookieStickinessPolicy) Attributes() appCookieStickinessPolicyAttributes {
	return appCookieStickinessPolicyAttributes{ref: terra.ReferenceResource(acsp)}
}

func (acsp *AppCookieStickinessPolicy) ImportState(av io.Reader) error {
	acsp.state = &appCookieStickinessPolicyState{}
	if err := json.NewDecoder(av).Decode(acsp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acsp.Type(), acsp.LocalName(), err)
	}
	return nil
}

func (acsp *AppCookieStickinessPolicy) State() (*appCookieStickinessPolicyState, bool) {
	return acsp.state, acsp.state != nil
}

func (acsp *AppCookieStickinessPolicy) StateMust() *appCookieStickinessPolicyState {
	if acsp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acsp.Type(), acsp.LocalName()))
	}
	return acsp.state
}

func (acsp *AppCookieStickinessPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(acsp)
}

type AppCookieStickinessPolicyArgs struct {
	// CookieName: string, required
	CookieName terra.StringValue `hcl:"cookie_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LbPort: number, required
	LbPort terra.NumberValue `hcl:"lb_port,attr" validate:"required"`
	// LoadBalancer: string, required
	LoadBalancer terra.StringValue `hcl:"load_balancer,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// DependsOn contains resources that AppCookieStickinessPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type appCookieStickinessPolicyAttributes struct {
	ref terra.Reference
}

func (acsp appCookieStickinessPolicyAttributes) CookieName() terra.StringValue {
	return terra.ReferenceString(acsp.ref.Append("cookie_name"))
}

func (acsp appCookieStickinessPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(acsp.ref.Append("id"))
}

func (acsp appCookieStickinessPolicyAttributes) LbPort() terra.NumberValue {
	return terra.ReferenceNumber(acsp.ref.Append("lb_port"))
}

func (acsp appCookieStickinessPolicyAttributes) LoadBalancer() terra.StringValue {
	return terra.ReferenceString(acsp.ref.Append("load_balancer"))
}

func (acsp appCookieStickinessPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceString(acsp.ref.Append("name"))
}

type appCookieStickinessPolicyState struct {
	CookieName   string  `json:"cookie_name"`
	Id           string  `json:"id"`
	LbPort       float64 `json:"lb_port"`
	LoadBalancer string  `json:"load_balancer"`
	Name         string  `json:"name"`
}
