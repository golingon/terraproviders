// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package emrcluster

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type Step struct {
	// ActionOnFailure: string, optional
	ActionOnFailure terra.StringValue `hcl:"action_on_failure,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// HadoopJarStep: min=0
	HadoopJarStep []HadoopJarStep `hcl:"hadoop_jar_step,block" validate:"min=0"`
}

type HadoopJarStep struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Jar: string, optional
	Jar terra.StringValue `hcl:"jar,attr"`
	// MainClass: string, optional
	MainClass terra.StringValue `hcl:"main_class,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type AutoTerminationPolicy struct {
	// IdleTimeout: number, optional
	IdleTimeout terra.NumberValue `hcl:"idle_timeout,attr"`
}

type BootstrapAction struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type CoreInstanceFleet struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// TargetOnDemandCapacity: number, optional
	TargetOnDemandCapacity terra.NumberValue `hcl:"target_on_demand_capacity,attr"`
	// TargetSpotCapacity: number, optional
	TargetSpotCapacity terra.NumberValue `hcl:"target_spot_capacity,attr"`
	// CoreInstanceFleetInstanceTypeConfigs: min=0
	InstanceTypeConfigs []CoreInstanceFleetInstanceTypeConfigs `hcl:"instance_type_configs,block" validate:"min=0"`
	// CoreInstanceFleetLaunchSpecifications: optional
	LaunchSpecifications *CoreInstanceFleetLaunchSpecifications `hcl:"launch_specifications,block"`
}

type CoreInstanceFleetInstanceTypeConfigs struct {
	// BidPrice: string, optional
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// BidPriceAsPercentageOfOnDemandPrice: number, optional
	BidPriceAsPercentageOfOnDemandPrice terra.NumberValue `hcl:"bid_price_as_percentage_of_on_demand_price,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// WeightedCapacity: number, optional
	WeightedCapacity terra.NumberValue `hcl:"weighted_capacity,attr"`
	// CoreInstanceFleetInstanceTypeConfigsConfigurations: min=0
	Configurations []CoreInstanceFleetInstanceTypeConfigsConfigurations `hcl:"configurations,block" validate:"min=0"`
	// CoreInstanceFleetInstanceTypeConfigsEbsConfig: min=0
	EbsConfig []CoreInstanceFleetInstanceTypeConfigsEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type CoreInstanceFleetInstanceTypeConfigsConfigurations struct {
	// Classification: string, optional
	Classification terra.StringValue `hcl:"classification,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type CoreInstanceFleetInstanceTypeConfigsEbsConfig struct {
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance: number, optional
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type CoreInstanceFleetLaunchSpecifications struct {
	// CoreInstanceFleetLaunchSpecificationsOnDemandSpecification: min=0
	OnDemandSpecification []CoreInstanceFleetLaunchSpecificationsOnDemandSpecification `hcl:"on_demand_specification,block" validate:"min=0"`
	// CoreInstanceFleetLaunchSpecificationsSpotSpecification: min=0
	SpotSpecification []CoreInstanceFleetLaunchSpecificationsSpotSpecification `hcl:"spot_specification,block" validate:"min=0"`
}

type CoreInstanceFleetLaunchSpecificationsOnDemandSpecification struct {
	// AllocationStrategy: string, required
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
}

type CoreInstanceFleetLaunchSpecificationsSpotSpecification struct {
	// AllocationStrategy: string, required
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
	// BlockDurationMinutes: number, optional
	BlockDurationMinutes terra.NumberValue `hcl:"block_duration_minutes,attr"`
	// TimeoutAction: string, required
	TimeoutAction terra.StringValue `hcl:"timeout_action,attr" validate:"required"`
	// TimeoutDurationMinutes: number, required
	TimeoutDurationMinutes terra.NumberValue `hcl:"timeout_duration_minutes,attr" validate:"required"`
}

type CoreInstanceGroup struct {
	// AutoscalingPolicy: string, optional
	AutoscalingPolicy terra.StringValue `hcl:"autoscaling_policy,attr"`
	// BidPrice: string, optional
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// InstanceCount: number, optional
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// CoreInstanceGroupEbsConfig: min=0
	EbsConfig []CoreInstanceGroupEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type CoreInstanceGroupEbsConfig struct {
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance: number, optional
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type Ec2Attributes struct {
	// AdditionalMasterSecurityGroups: string, optional
	AdditionalMasterSecurityGroups terra.StringValue `hcl:"additional_master_security_groups,attr"`
	// AdditionalSlaveSecurityGroups: string, optional
	AdditionalSlaveSecurityGroups terra.StringValue `hcl:"additional_slave_security_groups,attr"`
	// EmrManagedMasterSecurityGroup: string, optional
	EmrManagedMasterSecurityGroup terra.StringValue `hcl:"emr_managed_master_security_group,attr"`
	// EmrManagedSlaveSecurityGroup: string, optional
	EmrManagedSlaveSecurityGroup terra.StringValue `hcl:"emr_managed_slave_security_group,attr"`
	// InstanceProfile: string, required
	InstanceProfile terra.StringValue `hcl:"instance_profile,attr" validate:"required"`
	// KeyName: string, optional
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// ServiceAccessSecurityGroup: string, optional
	ServiceAccessSecurityGroup terra.StringValue `hcl:"service_access_security_group,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
}

type KerberosAttributes struct {
	// AdDomainJoinPassword: string, optional
	AdDomainJoinPassword terra.StringValue `hcl:"ad_domain_join_password,attr"`
	// AdDomainJoinUser: string, optional
	AdDomainJoinUser terra.StringValue `hcl:"ad_domain_join_user,attr"`
	// CrossRealmTrustPrincipalPassword: string, optional
	CrossRealmTrustPrincipalPassword terra.StringValue `hcl:"cross_realm_trust_principal_password,attr"`
	// KdcAdminPassword: string, required
	KdcAdminPassword terra.StringValue `hcl:"kdc_admin_password,attr" validate:"required"`
	// Realm: string, required
	Realm terra.StringValue `hcl:"realm,attr" validate:"required"`
}

type MasterInstanceFleet struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// TargetOnDemandCapacity: number, optional
	TargetOnDemandCapacity terra.NumberValue `hcl:"target_on_demand_capacity,attr"`
	// TargetSpotCapacity: number, optional
	TargetSpotCapacity terra.NumberValue `hcl:"target_spot_capacity,attr"`
	// MasterInstanceFleetInstanceTypeConfigs: min=0
	InstanceTypeConfigs []MasterInstanceFleetInstanceTypeConfigs `hcl:"instance_type_configs,block" validate:"min=0"`
	// MasterInstanceFleetLaunchSpecifications: optional
	LaunchSpecifications *MasterInstanceFleetLaunchSpecifications `hcl:"launch_specifications,block"`
}

type MasterInstanceFleetInstanceTypeConfigs struct {
	// BidPrice: string, optional
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// BidPriceAsPercentageOfOnDemandPrice: number, optional
	BidPriceAsPercentageOfOnDemandPrice terra.NumberValue `hcl:"bid_price_as_percentage_of_on_demand_price,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// WeightedCapacity: number, optional
	WeightedCapacity terra.NumberValue `hcl:"weighted_capacity,attr"`
	// MasterInstanceFleetInstanceTypeConfigsConfigurations: min=0
	Configurations []MasterInstanceFleetInstanceTypeConfigsConfigurations `hcl:"configurations,block" validate:"min=0"`
	// MasterInstanceFleetInstanceTypeConfigsEbsConfig: min=0
	EbsConfig []MasterInstanceFleetInstanceTypeConfigsEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type MasterInstanceFleetInstanceTypeConfigsConfigurations struct {
	// Classification: string, optional
	Classification terra.StringValue `hcl:"classification,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type MasterInstanceFleetInstanceTypeConfigsEbsConfig struct {
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance: number, optional
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type MasterInstanceFleetLaunchSpecifications struct {
	// MasterInstanceFleetLaunchSpecificationsOnDemandSpecification: min=0
	OnDemandSpecification []MasterInstanceFleetLaunchSpecificationsOnDemandSpecification `hcl:"on_demand_specification,block" validate:"min=0"`
	// MasterInstanceFleetLaunchSpecificationsSpotSpecification: min=0
	SpotSpecification []MasterInstanceFleetLaunchSpecificationsSpotSpecification `hcl:"spot_specification,block" validate:"min=0"`
}

type MasterInstanceFleetLaunchSpecificationsOnDemandSpecification struct {
	// AllocationStrategy: string, required
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
}

type MasterInstanceFleetLaunchSpecificationsSpotSpecification struct {
	// AllocationStrategy: string, required
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
	// BlockDurationMinutes: number, optional
	BlockDurationMinutes terra.NumberValue `hcl:"block_duration_minutes,attr"`
	// TimeoutAction: string, required
	TimeoutAction terra.StringValue `hcl:"timeout_action,attr" validate:"required"`
	// TimeoutDurationMinutes: number, required
	TimeoutDurationMinutes terra.NumberValue `hcl:"timeout_duration_minutes,attr" validate:"required"`
}

type MasterInstanceGroup struct {
	// BidPrice: string, optional
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// InstanceCount: number, optional
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// MasterInstanceGroupEbsConfig: min=0
	EbsConfig []MasterInstanceGroupEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type MasterInstanceGroupEbsConfig struct {
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance: number, optional
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type StepAttributes struct {
	ref terra.Reference
}

func (s StepAttributes) InternalRef() terra.Reference {
	return s.ref
}

func (s StepAttributes) InternalWithRef(ref terra.Reference) StepAttributes {
	return StepAttributes{ref: ref}
}

func (s StepAttributes) InternalTokens() hclwrite.Tokens {
	return s.ref.InternalTokens()
}

func (s StepAttributes) ActionOnFailure() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("action_on_failure"))
}

func (s StepAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s StepAttributes) HadoopJarStep() terra.ListValue[HadoopJarStepAttributes] {
	return terra.ReferenceAsList[HadoopJarStepAttributes](s.ref.Append("hadoop_jar_step"))
}

type HadoopJarStepAttributes struct {
	ref terra.Reference
}

func (hjs HadoopJarStepAttributes) InternalRef() terra.Reference {
	return hjs.ref
}

func (hjs HadoopJarStepAttributes) InternalWithRef(ref terra.Reference) HadoopJarStepAttributes {
	return HadoopJarStepAttributes{ref: ref}
}

func (hjs HadoopJarStepAttributes) InternalTokens() hclwrite.Tokens {
	return hjs.ref.InternalTokens()
}

func (hjs HadoopJarStepAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hjs.ref.Append("args"))
}

func (hjs HadoopJarStepAttributes) Jar() terra.StringValue {
	return terra.ReferenceAsString(hjs.ref.Append("jar"))
}

func (hjs HadoopJarStepAttributes) MainClass() terra.StringValue {
	return terra.ReferenceAsString(hjs.ref.Append("main_class"))
}

func (hjs HadoopJarStepAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hjs.ref.Append("properties"))
}

type AutoTerminationPolicyAttributes struct {
	ref terra.Reference
}

func (atp AutoTerminationPolicyAttributes) InternalRef() terra.Reference {
	return atp.ref
}

func (atp AutoTerminationPolicyAttributes) InternalWithRef(ref terra.Reference) AutoTerminationPolicyAttributes {
	return AutoTerminationPolicyAttributes{ref: ref}
}

func (atp AutoTerminationPolicyAttributes) InternalTokens() hclwrite.Tokens {
	return atp.ref.InternalTokens()
}

func (atp AutoTerminationPolicyAttributes) IdleTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(atp.ref.Append("idle_timeout"))
}

type BootstrapActionAttributes struct {
	ref terra.Reference
}

func (ba BootstrapActionAttributes) InternalRef() terra.Reference {
	return ba.ref
}

func (ba BootstrapActionAttributes) InternalWithRef(ref terra.Reference) BootstrapActionAttributes {
	return BootstrapActionAttributes{ref: ref}
}

func (ba BootstrapActionAttributes) InternalTokens() hclwrite.Tokens {
	return ba.ref.InternalTokens()
}

func (ba BootstrapActionAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ba.ref.Append("args"))
}

func (ba BootstrapActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("name"))
}

func (ba BootstrapActionAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("path"))
}

type CoreInstanceFleetAttributes struct {
	ref terra.Reference
}

func (cif CoreInstanceFleetAttributes) InternalRef() terra.Reference {
	return cif.ref
}

func (cif CoreInstanceFleetAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetAttributes {
	return CoreInstanceFleetAttributes{ref: ref}
}

func (cif CoreInstanceFleetAttributes) InternalTokens() hclwrite.Tokens {
	return cif.ref.InternalTokens()
}

func (cif CoreInstanceFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cif.ref.Append("id"))
}

func (cif CoreInstanceFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cif.ref.Append("name"))
}

func (cif CoreInstanceFleetAttributes) ProvisionedOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(cif.ref.Append("provisioned_on_demand_capacity"))
}

func (cif CoreInstanceFleetAttributes) ProvisionedSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(cif.ref.Append("provisioned_spot_capacity"))
}

func (cif CoreInstanceFleetAttributes) TargetOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(cif.ref.Append("target_on_demand_capacity"))
}

func (cif CoreInstanceFleetAttributes) TargetSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(cif.ref.Append("target_spot_capacity"))
}

func (cif CoreInstanceFleetAttributes) InstanceTypeConfigs() terra.SetValue[CoreInstanceFleetInstanceTypeConfigsAttributes] {
	return terra.ReferenceAsSet[CoreInstanceFleetInstanceTypeConfigsAttributes](cif.ref.Append("instance_type_configs"))
}

func (cif CoreInstanceFleetAttributes) LaunchSpecifications() terra.ListValue[CoreInstanceFleetLaunchSpecificationsAttributes] {
	return terra.ReferenceAsList[CoreInstanceFleetLaunchSpecificationsAttributes](cif.ref.Append("launch_specifications"))
}

type CoreInstanceFleetInstanceTypeConfigsAttributes struct {
	ref terra.Reference
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) InternalRef() terra.Reference {
	return itc.ref
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetInstanceTypeConfigsAttributes {
	return CoreInstanceFleetInstanceTypeConfigsAttributes{ref: ref}
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) InternalTokens() hclwrite.Tokens {
	return itc.ref.InternalTokens()
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("bid_price"))
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) BidPriceAsPercentageOfOnDemandPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("bid_price_as_percentage_of_on_demand_price"))
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("instance_type"))
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) WeightedCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("weighted_capacity"))
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) Configurations() terra.SetValue[CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes] {
	return terra.ReferenceAsSet[CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes](itc.ref.Append("configurations"))
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) EbsConfig() terra.SetValue[CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes] {
	return terra.ReferenceAsSet[CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes](itc.ref.Append("ebs_config"))
}

type CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes struct {
	ref terra.Reference
}

func (c CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes {
	return CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes{ref: ref}
}

func (c CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) Classification() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("classification"))
}

func (c CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("properties"))
}

type CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalRef() terra.Reference {
	return ec.ref
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes {
	return CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes{ref: ref}
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ec.ref.InternalTokens()
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type CoreInstanceFleetLaunchSpecificationsAttributes struct {
	ref terra.Reference
}

func (ls CoreInstanceFleetLaunchSpecificationsAttributes) InternalRef() terra.Reference {
	return ls.ref
}

func (ls CoreInstanceFleetLaunchSpecificationsAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetLaunchSpecificationsAttributes {
	return CoreInstanceFleetLaunchSpecificationsAttributes{ref: ref}
}

func (ls CoreInstanceFleetLaunchSpecificationsAttributes) InternalTokens() hclwrite.Tokens {
	return ls.ref.InternalTokens()
}

func (ls CoreInstanceFleetLaunchSpecificationsAttributes) OnDemandSpecification() terra.ListValue[CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes] {
	return terra.ReferenceAsList[CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes](ls.ref.Append("on_demand_specification"))
}

func (ls CoreInstanceFleetLaunchSpecificationsAttributes) SpotSpecification() terra.ListValue[CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes] {
	return terra.ReferenceAsList[CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes](ls.ref.Append("spot_specification"))
}

type CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes struct {
	ref terra.Reference
}

func (ods CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalRef() terra.Reference {
	return ods.ref
}

func (ods CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes {
	return CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes{ref: ref}
}

func (ods CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalTokens() hclwrite.Tokens {
	return ods.ref.InternalTokens()
}

func (ods CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ods.ref.Append("allocation_strategy"))
}

type CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes struct {
	ref terra.Reference
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalRef() terra.Reference {
	return ss.ref
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes {
	return CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes{ref: ref}
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalTokens() hclwrite.Tokens {
	return ss.ref.InternalTokens()
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("allocation_strategy"))
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) BlockDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("block_duration_minutes"))
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) TimeoutAction() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("timeout_action"))
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) TimeoutDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("timeout_duration_minutes"))
}

type CoreInstanceGroupAttributes struct {
	ref terra.Reference
}

func (cig CoreInstanceGroupAttributes) InternalRef() terra.Reference {
	return cig.ref
}

func (cig CoreInstanceGroupAttributes) InternalWithRef(ref terra.Reference) CoreInstanceGroupAttributes {
	return CoreInstanceGroupAttributes{ref: ref}
}

func (cig CoreInstanceGroupAttributes) InternalTokens() hclwrite.Tokens {
	return cig.ref.InternalTokens()
}

func (cig CoreInstanceGroupAttributes) AutoscalingPolicy() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("autoscaling_policy"))
}

func (cig CoreInstanceGroupAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("bid_price"))
}

func (cig CoreInstanceGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("id"))
}

func (cig CoreInstanceGroupAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(cig.ref.Append("instance_count"))
}

func (cig CoreInstanceGroupAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("instance_type"))
}

func (cig CoreInstanceGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("name"))
}

func (cig CoreInstanceGroupAttributes) EbsConfig() terra.SetValue[CoreInstanceGroupEbsConfigAttributes] {
	return terra.ReferenceAsSet[CoreInstanceGroupEbsConfigAttributes](cig.ref.Append("ebs_config"))
}

type CoreInstanceGroupEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec CoreInstanceGroupEbsConfigAttributes) InternalRef() terra.Reference {
	return ec.ref
}

func (ec CoreInstanceGroupEbsConfigAttributes) InternalWithRef(ref terra.Reference) CoreInstanceGroupEbsConfigAttributes {
	return CoreInstanceGroupEbsConfigAttributes{ref: ref}
}

func (ec CoreInstanceGroupEbsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ec.ref.InternalTokens()
}

func (ec CoreInstanceGroupEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec CoreInstanceGroupEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec CoreInstanceGroupEbsConfigAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("throughput"))
}

func (ec CoreInstanceGroupEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec CoreInstanceGroupEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type Ec2AttributesAttributes struct {
	ref terra.Reference
}

func (ea Ec2AttributesAttributes) InternalRef() terra.Reference {
	return ea.ref
}

func (ea Ec2AttributesAttributes) InternalWithRef(ref terra.Reference) Ec2AttributesAttributes {
	return Ec2AttributesAttributes{ref: ref}
}

func (ea Ec2AttributesAttributes) InternalTokens() hclwrite.Tokens {
	return ea.ref.InternalTokens()
}

func (ea Ec2AttributesAttributes) AdditionalMasterSecurityGroups() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("additional_master_security_groups"))
}

func (ea Ec2AttributesAttributes) AdditionalSlaveSecurityGroups() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("additional_slave_security_groups"))
}

func (ea Ec2AttributesAttributes) EmrManagedMasterSecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("emr_managed_master_security_group"))
}

func (ea Ec2AttributesAttributes) EmrManagedSlaveSecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("emr_managed_slave_security_group"))
}

func (ea Ec2AttributesAttributes) InstanceProfile() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("instance_profile"))
}

func (ea Ec2AttributesAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("key_name"))
}

func (ea Ec2AttributesAttributes) ServiceAccessSecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("service_access_security_group"))
}

func (ea Ec2AttributesAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("subnet_id"))
}

func (ea Ec2AttributesAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ea.ref.Append("subnet_ids"))
}

type KerberosAttributesAttributes struct {
	ref terra.Reference
}

func (ka KerberosAttributesAttributes) InternalRef() terra.Reference {
	return ka.ref
}

func (ka KerberosAttributesAttributes) InternalWithRef(ref terra.Reference) KerberosAttributesAttributes {
	return KerberosAttributesAttributes{ref: ref}
}

func (ka KerberosAttributesAttributes) InternalTokens() hclwrite.Tokens {
	return ka.ref.InternalTokens()
}

func (ka KerberosAttributesAttributes) AdDomainJoinPassword() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("ad_domain_join_password"))
}

func (ka KerberosAttributesAttributes) AdDomainJoinUser() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("ad_domain_join_user"))
}

func (ka KerberosAttributesAttributes) CrossRealmTrustPrincipalPassword() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("cross_realm_trust_principal_password"))
}

func (ka KerberosAttributesAttributes) KdcAdminPassword() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("kdc_admin_password"))
}

func (ka KerberosAttributesAttributes) Realm() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("realm"))
}

type MasterInstanceFleetAttributes struct {
	ref terra.Reference
}

func (mif MasterInstanceFleetAttributes) InternalRef() terra.Reference {
	return mif.ref
}

func (mif MasterInstanceFleetAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetAttributes {
	return MasterInstanceFleetAttributes{ref: ref}
}

func (mif MasterInstanceFleetAttributes) InternalTokens() hclwrite.Tokens {
	return mif.ref.InternalTokens()
}

func (mif MasterInstanceFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mif.ref.Append("id"))
}

func (mif MasterInstanceFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mif.ref.Append("name"))
}

func (mif MasterInstanceFleetAttributes) ProvisionedOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mif.ref.Append("provisioned_on_demand_capacity"))
}

func (mif MasterInstanceFleetAttributes) ProvisionedSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mif.ref.Append("provisioned_spot_capacity"))
}

func (mif MasterInstanceFleetAttributes) TargetOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mif.ref.Append("target_on_demand_capacity"))
}

func (mif MasterInstanceFleetAttributes) TargetSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mif.ref.Append("target_spot_capacity"))
}

func (mif MasterInstanceFleetAttributes) InstanceTypeConfigs() terra.SetValue[MasterInstanceFleetInstanceTypeConfigsAttributes] {
	return terra.ReferenceAsSet[MasterInstanceFleetInstanceTypeConfigsAttributes](mif.ref.Append("instance_type_configs"))
}

func (mif MasterInstanceFleetAttributes) LaunchSpecifications() terra.ListValue[MasterInstanceFleetLaunchSpecificationsAttributes] {
	return terra.ReferenceAsList[MasterInstanceFleetLaunchSpecificationsAttributes](mif.ref.Append("launch_specifications"))
}

type MasterInstanceFleetInstanceTypeConfigsAttributes struct {
	ref terra.Reference
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) InternalRef() terra.Reference {
	return itc.ref
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetInstanceTypeConfigsAttributes {
	return MasterInstanceFleetInstanceTypeConfigsAttributes{ref: ref}
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) InternalTokens() hclwrite.Tokens {
	return itc.ref.InternalTokens()
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("bid_price"))
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) BidPriceAsPercentageOfOnDemandPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("bid_price_as_percentage_of_on_demand_price"))
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("instance_type"))
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) WeightedCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("weighted_capacity"))
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) Configurations() terra.SetValue[MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes] {
	return terra.ReferenceAsSet[MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes](itc.ref.Append("configurations"))
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) EbsConfig() terra.SetValue[MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes] {
	return terra.ReferenceAsSet[MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes](itc.ref.Append("ebs_config"))
}

type MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes struct {
	ref terra.Reference
}

func (c MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalRef() terra.Reference {
	return c.ref
}

func (c MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes {
	return MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes{ref: ref}
}

func (c MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalTokens() hclwrite.Tokens {
	return c.ref.InternalTokens()
}

func (c MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) Classification() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("classification"))
}

func (c MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("properties"))
}

type MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalRef() terra.Reference {
	return ec.ref
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes {
	return MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes{ref: ref}
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ec.ref.InternalTokens()
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type MasterInstanceFleetLaunchSpecificationsAttributes struct {
	ref terra.Reference
}

func (ls MasterInstanceFleetLaunchSpecificationsAttributes) InternalRef() terra.Reference {
	return ls.ref
}

func (ls MasterInstanceFleetLaunchSpecificationsAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetLaunchSpecificationsAttributes {
	return MasterInstanceFleetLaunchSpecificationsAttributes{ref: ref}
}

func (ls MasterInstanceFleetLaunchSpecificationsAttributes) InternalTokens() hclwrite.Tokens {
	return ls.ref.InternalTokens()
}

func (ls MasterInstanceFleetLaunchSpecificationsAttributes) OnDemandSpecification() terra.ListValue[MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes] {
	return terra.ReferenceAsList[MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes](ls.ref.Append("on_demand_specification"))
}

func (ls MasterInstanceFleetLaunchSpecificationsAttributes) SpotSpecification() terra.ListValue[MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes] {
	return terra.ReferenceAsList[MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes](ls.ref.Append("spot_specification"))
}

type MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes struct {
	ref terra.Reference
}

func (ods MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalRef() terra.Reference {
	return ods.ref
}

func (ods MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes {
	return MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes{ref: ref}
}

func (ods MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalTokens() hclwrite.Tokens {
	return ods.ref.InternalTokens()
}

func (ods MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ods.ref.Append("allocation_strategy"))
}

type MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes struct {
	ref terra.Reference
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalRef() terra.Reference {
	return ss.ref
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes {
	return MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes{ref: ref}
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalTokens() hclwrite.Tokens {
	return ss.ref.InternalTokens()
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("allocation_strategy"))
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) BlockDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("block_duration_minutes"))
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) TimeoutAction() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("timeout_action"))
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) TimeoutDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("timeout_duration_minutes"))
}

type MasterInstanceGroupAttributes struct {
	ref terra.Reference
}

func (mig MasterInstanceGroupAttributes) InternalRef() terra.Reference {
	return mig.ref
}

func (mig MasterInstanceGroupAttributes) InternalWithRef(ref terra.Reference) MasterInstanceGroupAttributes {
	return MasterInstanceGroupAttributes{ref: ref}
}

func (mig MasterInstanceGroupAttributes) InternalTokens() hclwrite.Tokens {
	return mig.ref.InternalTokens()
}

func (mig MasterInstanceGroupAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(mig.ref.Append("bid_price"))
}

func (mig MasterInstanceGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mig.ref.Append("id"))
}

func (mig MasterInstanceGroupAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(mig.ref.Append("instance_count"))
}

func (mig MasterInstanceGroupAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(mig.ref.Append("instance_type"))
}

func (mig MasterInstanceGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mig.ref.Append("name"))
}

func (mig MasterInstanceGroupAttributes) EbsConfig() terra.SetValue[MasterInstanceGroupEbsConfigAttributes] {
	return terra.ReferenceAsSet[MasterInstanceGroupEbsConfigAttributes](mig.ref.Append("ebs_config"))
}

type MasterInstanceGroupEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec MasterInstanceGroupEbsConfigAttributes) InternalRef() terra.Reference {
	return ec.ref
}

func (ec MasterInstanceGroupEbsConfigAttributes) InternalWithRef(ref terra.Reference) MasterInstanceGroupEbsConfigAttributes {
	return MasterInstanceGroupEbsConfigAttributes{ref: ref}
}

func (ec MasterInstanceGroupEbsConfigAttributes) InternalTokens() hclwrite.Tokens {
	return ec.ref.InternalTokens()
}

func (ec MasterInstanceGroupEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec MasterInstanceGroupEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec MasterInstanceGroupEbsConfigAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("throughput"))
}

func (ec MasterInstanceGroupEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec MasterInstanceGroupEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type StepState struct {
	ActionOnFailure string               `json:"action_on_failure"`
	Name            string               `json:"name"`
	HadoopJarStep   []HadoopJarStepState `json:"hadoop_jar_step"`
}

type HadoopJarStepState struct {
	Args       []string          `json:"args"`
	Jar        string            `json:"jar"`
	MainClass  string            `json:"main_class"`
	Properties map[string]string `json:"properties"`
}

type AutoTerminationPolicyState struct {
	IdleTimeout float64 `json:"idle_timeout"`
}

type BootstrapActionState struct {
	Args []string `json:"args"`
	Name string   `json:"name"`
	Path string   `json:"path"`
}

type CoreInstanceFleetState struct {
	Id                          string                                       `json:"id"`
	Name                        string                                       `json:"name"`
	ProvisionedOnDemandCapacity float64                                      `json:"provisioned_on_demand_capacity"`
	ProvisionedSpotCapacity     float64                                      `json:"provisioned_spot_capacity"`
	TargetOnDemandCapacity      float64                                      `json:"target_on_demand_capacity"`
	TargetSpotCapacity          float64                                      `json:"target_spot_capacity"`
	InstanceTypeConfigs         []CoreInstanceFleetInstanceTypeConfigsState  `json:"instance_type_configs"`
	LaunchSpecifications        []CoreInstanceFleetLaunchSpecificationsState `json:"launch_specifications"`
}

type CoreInstanceFleetInstanceTypeConfigsState struct {
	BidPrice                            string                                                    `json:"bid_price"`
	BidPriceAsPercentageOfOnDemandPrice float64                                                   `json:"bid_price_as_percentage_of_on_demand_price"`
	InstanceType                        string                                                    `json:"instance_type"`
	WeightedCapacity                    float64                                                   `json:"weighted_capacity"`
	Configurations                      []CoreInstanceFleetInstanceTypeConfigsConfigurationsState `json:"configurations"`
	EbsConfig                           []CoreInstanceFleetInstanceTypeConfigsEbsConfigState      `json:"ebs_config"`
}

type CoreInstanceFleetInstanceTypeConfigsConfigurationsState struct {
	Classification string            `json:"classification"`
	Properties     map[string]string `json:"properties"`
}

type CoreInstanceFleetInstanceTypeConfigsEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}

type CoreInstanceFleetLaunchSpecificationsState struct {
	OnDemandSpecification []CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationState `json:"on_demand_specification"`
	SpotSpecification     []CoreInstanceFleetLaunchSpecificationsSpotSpecificationState     `json:"spot_specification"`
}

type CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationState struct {
	AllocationStrategy string `json:"allocation_strategy"`
}

type CoreInstanceFleetLaunchSpecificationsSpotSpecificationState struct {
	AllocationStrategy     string  `json:"allocation_strategy"`
	BlockDurationMinutes   float64 `json:"block_duration_minutes"`
	TimeoutAction          string  `json:"timeout_action"`
	TimeoutDurationMinutes float64 `json:"timeout_duration_minutes"`
}

type CoreInstanceGroupState struct {
	AutoscalingPolicy string                            `json:"autoscaling_policy"`
	BidPrice          string                            `json:"bid_price"`
	Id                string                            `json:"id"`
	InstanceCount     float64                           `json:"instance_count"`
	InstanceType      string                            `json:"instance_type"`
	Name              string                            `json:"name"`
	EbsConfig         []CoreInstanceGroupEbsConfigState `json:"ebs_config"`
}

type CoreInstanceGroupEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Throughput         float64 `json:"throughput"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}

type Ec2AttributesState struct {
	AdditionalMasterSecurityGroups string   `json:"additional_master_security_groups"`
	AdditionalSlaveSecurityGroups  string   `json:"additional_slave_security_groups"`
	EmrManagedMasterSecurityGroup  string   `json:"emr_managed_master_security_group"`
	EmrManagedSlaveSecurityGroup   string   `json:"emr_managed_slave_security_group"`
	InstanceProfile                string   `json:"instance_profile"`
	KeyName                        string   `json:"key_name"`
	ServiceAccessSecurityGroup     string   `json:"service_access_security_group"`
	SubnetId                       string   `json:"subnet_id"`
	SubnetIds                      []string `json:"subnet_ids"`
}

type KerberosAttributesState struct {
	AdDomainJoinPassword             string `json:"ad_domain_join_password"`
	AdDomainJoinUser                 string `json:"ad_domain_join_user"`
	CrossRealmTrustPrincipalPassword string `json:"cross_realm_trust_principal_password"`
	KdcAdminPassword                 string `json:"kdc_admin_password"`
	Realm                            string `json:"realm"`
}

type MasterInstanceFleetState struct {
	Id                          string                                         `json:"id"`
	Name                        string                                         `json:"name"`
	ProvisionedOnDemandCapacity float64                                        `json:"provisioned_on_demand_capacity"`
	ProvisionedSpotCapacity     float64                                        `json:"provisioned_spot_capacity"`
	TargetOnDemandCapacity      float64                                        `json:"target_on_demand_capacity"`
	TargetSpotCapacity          float64                                        `json:"target_spot_capacity"`
	InstanceTypeConfigs         []MasterInstanceFleetInstanceTypeConfigsState  `json:"instance_type_configs"`
	LaunchSpecifications        []MasterInstanceFleetLaunchSpecificationsState `json:"launch_specifications"`
}

type MasterInstanceFleetInstanceTypeConfigsState struct {
	BidPrice                            string                                                      `json:"bid_price"`
	BidPriceAsPercentageOfOnDemandPrice float64                                                     `json:"bid_price_as_percentage_of_on_demand_price"`
	InstanceType                        string                                                      `json:"instance_type"`
	WeightedCapacity                    float64                                                     `json:"weighted_capacity"`
	Configurations                      []MasterInstanceFleetInstanceTypeConfigsConfigurationsState `json:"configurations"`
	EbsConfig                           []MasterInstanceFleetInstanceTypeConfigsEbsConfigState      `json:"ebs_config"`
}

type MasterInstanceFleetInstanceTypeConfigsConfigurationsState struct {
	Classification string            `json:"classification"`
	Properties     map[string]string `json:"properties"`
}

type MasterInstanceFleetInstanceTypeConfigsEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}

type MasterInstanceFleetLaunchSpecificationsState struct {
	OnDemandSpecification []MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationState `json:"on_demand_specification"`
	SpotSpecification     []MasterInstanceFleetLaunchSpecificationsSpotSpecificationState     `json:"spot_specification"`
}

type MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationState struct {
	AllocationStrategy string `json:"allocation_strategy"`
}

type MasterInstanceFleetLaunchSpecificationsSpotSpecificationState struct {
	AllocationStrategy     string  `json:"allocation_strategy"`
	BlockDurationMinutes   float64 `json:"block_duration_minutes"`
	TimeoutAction          string  `json:"timeout_action"`
	TimeoutDurationMinutes float64 `json:"timeout_duration_minutes"`
}

type MasterInstanceGroupState struct {
	BidPrice      string                              `json:"bid_price"`
	Id            string                              `json:"id"`
	InstanceCount float64                             `json:"instance_count"`
	InstanceType  string                              `json:"instance_type"`
	Name          string                              `json:"name"`
	EbsConfig     []MasterInstanceGroupEbsConfigState `json:"ebs_config"`
}

type MasterInstanceGroupEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Throughput         float64 `json:"throughput"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}
