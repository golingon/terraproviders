// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEcrLifecyclePolicy(name string, args EcrLifecyclePolicyArgs) *EcrLifecyclePolicy {
	return &EcrLifecyclePolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EcrLifecyclePolicy)(nil)

type EcrLifecyclePolicy struct {
	Name  string
	Args  EcrLifecyclePolicyArgs
	state *ecrLifecyclePolicyState
}

func (elp *EcrLifecyclePolicy) Type() string {
	return "aws_ecr_lifecycle_policy"
}

func (elp *EcrLifecyclePolicy) LocalName() string {
	return elp.Name
}

func (elp *EcrLifecyclePolicy) Configuration() interface{} {
	return elp.Args
}

func (elp *EcrLifecyclePolicy) Attributes() ecrLifecyclePolicyAttributes {
	return ecrLifecyclePolicyAttributes{ref: terra.ReferenceResource(elp)}
}

func (elp *EcrLifecyclePolicy) ImportState(av io.Reader) error {
	elp.state = &ecrLifecyclePolicyState{}
	if err := json.NewDecoder(av).Decode(elp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", elp.Type(), elp.LocalName(), err)
	}
	return nil
}

func (elp *EcrLifecyclePolicy) State() (*ecrLifecyclePolicyState, bool) {
	return elp.state, elp.state != nil
}

func (elp *EcrLifecyclePolicy) StateMust() *ecrLifecyclePolicyState {
	if elp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", elp.Type(), elp.LocalName()))
	}
	return elp.state
}

func (elp *EcrLifecyclePolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(elp)
}

type EcrLifecyclePolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
	// DependsOn contains resources that EcrLifecyclePolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type ecrLifecyclePolicyAttributes struct {
	ref terra.Reference
}

func (elp ecrLifecyclePolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(elp.ref.Append("id"))
}

func (elp ecrLifecyclePolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceString(elp.ref.Append("policy"))
}

func (elp ecrLifecyclePolicyAttributes) RegistryId() terra.StringValue {
	return terra.ReferenceString(elp.ref.Append("registry_id"))
}

func (elp ecrLifecyclePolicyAttributes) Repository() terra.StringValue {
	return terra.ReferenceString(elp.ref.Append("repository"))
}

type ecrLifecyclePolicyState struct {
	Id         string `json:"id"`
	Policy     string `json:"policy"`
	RegistryId string `json:"registry_id"`
	Repository string `json:"repository"`
}
