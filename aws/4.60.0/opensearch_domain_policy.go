// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	opensearchdomainpolicy "github.com/golingon/terraproviders/aws/4.60.0/opensearchdomainpolicy"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewOpensearchDomainPolicy(name string, args OpensearchDomainPolicyArgs) *OpensearchDomainPolicy {
	return &OpensearchDomainPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*OpensearchDomainPolicy)(nil)

type OpensearchDomainPolicy struct {
	Name  string
	Args  OpensearchDomainPolicyArgs
	state *opensearchDomainPolicyState
}

func (odp *OpensearchDomainPolicy) Type() string {
	return "aws_opensearch_domain_policy"
}

func (odp *OpensearchDomainPolicy) LocalName() string {
	return odp.Name
}

func (odp *OpensearchDomainPolicy) Configuration() interface{} {
	return odp.Args
}

func (odp *OpensearchDomainPolicy) Attributes() opensearchDomainPolicyAttributes {
	return opensearchDomainPolicyAttributes{ref: terra.ReferenceResource(odp)}
}

func (odp *OpensearchDomainPolicy) ImportState(av io.Reader) error {
	odp.state = &opensearchDomainPolicyState{}
	if err := json.NewDecoder(av).Decode(odp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", odp.Type(), odp.LocalName(), err)
	}
	return nil
}

func (odp *OpensearchDomainPolicy) State() (*opensearchDomainPolicyState, bool) {
	return odp.state, odp.state != nil
}

func (odp *OpensearchDomainPolicy) StateMust() *opensearchDomainPolicyState {
	if odp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", odp.Type(), odp.LocalName()))
	}
	return odp.state
}

func (odp *OpensearchDomainPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(odp)
}

type OpensearchDomainPolicyArgs struct {
	// AccessPolicies: string, required
	AccessPolicies terra.StringValue `hcl:"access_policies,attr" validate:"required"`
	// DomainName: string, required
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *opensearchdomainpolicy.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that OpensearchDomainPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type opensearchDomainPolicyAttributes struct {
	ref terra.Reference
}

func (odp opensearchDomainPolicyAttributes) AccessPolicies() terra.StringValue {
	return terra.ReferenceString(odp.ref.Append("access_policies"))
}

func (odp opensearchDomainPolicyAttributes) DomainName() terra.StringValue {
	return terra.ReferenceString(odp.ref.Append("domain_name"))
}

func (odp opensearchDomainPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(odp.ref.Append("id"))
}

func (odp opensearchDomainPolicyAttributes) Timeouts() opensearchdomainpolicy.TimeoutsAttributes {
	return terra.ReferenceSingle[opensearchdomainpolicy.TimeoutsAttributes](odp.ref.Append("timeouts"))
}

type opensearchDomainPolicyState struct {
	AccessPolicies string                                `json:"access_policies"`
	DomainName     string                                `json:"domain_name"`
	Id             string                                `json:"id"`
	Timeouts       *opensearchdomainpolicy.TimeoutsState `json:"timeouts"`
}
