// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewCodeartifactRepositoryPermissionsPolicy(name string, args CodeartifactRepositoryPermissionsPolicyArgs) *CodeartifactRepositoryPermissionsPolicy {
	return &CodeartifactRepositoryPermissionsPolicy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*CodeartifactRepositoryPermissionsPolicy)(nil)

type CodeartifactRepositoryPermissionsPolicy struct {
	Name  string
	Args  CodeartifactRepositoryPermissionsPolicyArgs
	state *codeartifactRepositoryPermissionsPolicyState
}

func (crpp *CodeartifactRepositoryPermissionsPolicy) Type() string {
	return "aws_codeartifact_repository_permissions_policy"
}

func (crpp *CodeartifactRepositoryPermissionsPolicy) LocalName() string {
	return crpp.Name
}

func (crpp *CodeartifactRepositoryPermissionsPolicy) Configuration() interface{} {
	return crpp.Args
}

func (crpp *CodeartifactRepositoryPermissionsPolicy) Attributes() codeartifactRepositoryPermissionsPolicyAttributes {
	return codeartifactRepositoryPermissionsPolicyAttributes{ref: terra.ReferenceResource(crpp)}
}

func (crpp *CodeartifactRepositoryPermissionsPolicy) ImportState(av io.Reader) error {
	crpp.state = &codeartifactRepositoryPermissionsPolicyState{}
	if err := json.NewDecoder(av).Decode(crpp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", crpp.Type(), crpp.LocalName(), err)
	}
	return nil
}

func (crpp *CodeartifactRepositoryPermissionsPolicy) State() (*codeartifactRepositoryPermissionsPolicyState, bool) {
	return crpp.state, crpp.state != nil
}

func (crpp *CodeartifactRepositoryPermissionsPolicy) StateMust() *codeartifactRepositoryPermissionsPolicyState {
	if crpp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", crpp.Type(), crpp.LocalName()))
	}
	return crpp.state
}

func (crpp *CodeartifactRepositoryPermissionsPolicy) DependOn() terra.Reference {
	return terra.ReferenceResource(crpp)
}

type CodeartifactRepositoryPermissionsPolicyArgs struct {
	// Domain: string, required
	Domain terra.StringValue `hcl:"domain,attr" validate:"required"`
	// DomainOwner: string, optional
	DomainOwner terra.StringValue `hcl:"domain_owner,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// PolicyDocument: string, required
	PolicyDocument terra.StringValue `hcl:"policy_document,attr" validate:"required"`
	// PolicyRevision: string, optional
	PolicyRevision terra.StringValue `hcl:"policy_revision,attr"`
	// Repository: string, required
	Repository terra.StringValue `hcl:"repository,attr" validate:"required"`
	// DependsOn contains resources that CodeartifactRepositoryPermissionsPolicy depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type codeartifactRepositoryPermissionsPolicyAttributes struct {
	ref terra.Reference
}

func (crpp codeartifactRepositoryPermissionsPolicyAttributes) Domain() terra.StringValue {
	return terra.ReferenceString(crpp.ref.Append("domain"))
}

func (crpp codeartifactRepositoryPermissionsPolicyAttributes) DomainOwner() terra.StringValue {
	return terra.ReferenceString(crpp.ref.Append("domain_owner"))
}

func (crpp codeartifactRepositoryPermissionsPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceString(crpp.ref.Append("id"))
}

func (crpp codeartifactRepositoryPermissionsPolicyAttributes) PolicyDocument() terra.StringValue {
	return terra.ReferenceString(crpp.ref.Append("policy_document"))
}

func (crpp codeartifactRepositoryPermissionsPolicyAttributes) PolicyRevision() terra.StringValue {
	return terra.ReferenceString(crpp.ref.Append("policy_revision"))
}

func (crpp codeartifactRepositoryPermissionsPolicyAttributes) Repository() terra.StringValue {
	return terra.ReferenceString(crpp.ref.Append("repository"))
}

func (crpp codeartifactRepositoryPermissionsPolicyAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceString(crpp.ref.Append("resource_arn"))
}

type codeartifactRepositoryPermissionsPolicyState struct {
	Domain         string `json:"domain"`
	DomainOwner    string `json:"domain_owner"`
	Id             string `json:"id"`
	PolicyDocument string `json:"policy_document"`
	PolicyRevision string `json:"policy_revision"`
	Repository     string `json:"repository"`
	ResourceArn    string `json:"resource_arn"`
}
