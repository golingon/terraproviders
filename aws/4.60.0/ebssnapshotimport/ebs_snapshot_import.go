// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package ebssnapshotimport

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type ClientData struct {
	// Comment: string, optional
	Comment terra.StringValue `hcl:"comment,attr"`
	// UploadEnd: string, optional
	UploadEnd terra.StringValue `hcl:"upload_end,attr"`
	// UploadSize: number, optional
	UploadSize terra.NumberValue `hcl:"upload_size,attr"`
	// UploadStart: string, optional
	UploadStart terra.StringValue `hcl:"upload_start,attr"`
}

type DiskContainer struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Format: string, required
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Url: string, optional
	Url terra.StringValue `hcl:"url,attr"`
	// UserBucket: optional
	UserBucket *UserBucket `hcl:"user_bucket,block"`
}

type UserBucket struct {
	// S3Bucket: string, required
	S3Bucket terra.StringValue `hcl:"s3_bucket,attr" validate:"required"`
	// S3Key: string, required
	S3Key terra.StringValue `hcl:"s3_key,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
}

type ClientDataAttributes struct {
	ref terra.Reference
}

func (cd ClientDataAttributes) InternalRef() terra.Reference {
	return cd.ref
}

func (cd ClientDataAttributes) InternalWithRef(ref terra.Reference) ClientDataAttributes {
	return ClientDataAttributes{ref: ref}
}

func (cd ClientDataAttributes) InternalTokens() hclwrite.Tokens {
	return cd.ref.InternalTokens()
}

func (cd ClientDataAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("comment"))
}

func (cd ClientDataAttributes) UploadEnd() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("upload_end"))
}

func (cd ClientDataAttributes) UploadSize() terra.NumberValue {
	return terra.ReferenceAsNumber(cd.ref.Append("upload_size"))
}

func (cd ClientDataAttributes) UploadStart() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("upload_start"))
}

type DiskContainerAttributes struct {
	ref terra.Reference
}

func (dc DiskContainerAttributes) InternalRef() terra.Reference {
	return dc.ref
}

func (dc DiskContainerAttributes) InternalWithRef(ref terra.Reference) DiskContainerAttributes {
	return DiskContainerAttributes{ref: ref}
}

func (dc DiskContainerAttributes) InternalTokens() hclwrite.Tokens {
	return dc.ref.InternalTokens()
}

func (dc DiskContainerAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("description"))
}

func (dc DiskContainerAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("format"))
}

func (dc DiskContainerAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("url"))
}

func (dc DiskContainerAttributes) UserBucket() terra.ListValue[UserBucketAttributes] {
	return terra.ReferenceAsList[UserBucketAttributes](dc.ref.Append("user_bucket"))
}

type UserBucketAttributes struct {
	ref terra.Reference
}

func (ub UserBucketAttributes) InternalRef() terra.Reference {
	return ub.ref
}

func (ub UserBucketAttributes) InternalWithRef(ref terra.Reference) UserBucketAttributes {
	return UserBucketAttributes{ref: ref}
}

func (ub UserBucketAttributes) InternalTokens() hclwrite.Tokens {
	return ub.ref.InternalTokens()
}

func (ub UserBucketAttributes) S3Bucket() terra.StringValue {
	return terra.ReferenceAsString(ub.ref.Append("s3_bucket"))
}

func (ub UserBucketAttributes) S3Key() terra.StringValue {
	return terra.ReferenceAsString(ub.ref.Append("s3_key"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type ClientDataState struct {
	Comment     string  `json:"comment"`
	UploadEnd   string  `json:"upload_end"`
	UploadSize  float64 `json:"upload_size"`
	UploadStart string  `json:"upload_start"`
}

type DiskContainerState struct {
	Description string            `json:"description"`
	Format      string            `json:"format"`
	Url         string            `json:"url"`
	UserBucket  []UserBucketState `json:"user_bucket"`
}

type UserBucketState struct {
	S3Bucket string `json:"s3_bucket"`
	S3Key    string `json:"s3_key"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
