// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	networkmanagersite "github.com/golingon/terraproviders/aws/4.60.0/networkmanagersite"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewNetworkmanagerSite(name string, args NetworkmanagerSiteArgs) *NetworkmanagerSite {
	return &NetworkmanagerSite{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*NetworkmanagerSite)(nil)

type NetworkmanagerSite struct {
	Name  string
	Args  NetworkmanagerSiteArgs
	state *networkmanagerSiteState
}

func (ns *NetworkmanagerSite) Type() string {
	return "aws_networkmanager_site"
}

func (ns *NetworkmanagerSite) LocalName() string {
	return ns.Name
}

func (ns *NetworkmanagerSite) Configuration() interface{} {
	return ns.Args
}

func (ns *NetworkmanagerSite) Attributes() networkmanagerSiteAttributes {
	return networkmanagerSiteAttributes{ref: terra.ReferenceResource(ns)}
}

func (ns *NetworkmanagerSite) ImportState(av io.Reader) error {
	ns.state = &networkmanagerSiteState{}
	if err := json.NewDecoder(av).Decode(ns.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ns.Type(), ns.LocalName(), err)
	}
	return nil
}

func (ns *NetworkmanagerSite) State() (*networkmanagerSiteState, bool) {
	return ns.state, ns.state != nil
}

func (ns *NetworkmanagerSite) StateMust() *networkmanagerSiteState {
	if ns.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ns.Type(), ns.LocalName()))
	}
	return ns.state
}

func (ns *NetworkmanagerSite) DependOn() terra.Reference {
	return terra.ReferenceResource(ns)
}

type NetworkmanagerSiteArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// GlobalNetworkId: string, required
	GlobalNetworkId terra.StringValue `hcl:"global_network_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Location: optional
	Location *networkmanagersite.Location `hcl:"location,block"`
	// Timeouts: optional
	Timeouts *networkmanagersite.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that NetworkmanagerSite depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type networkmanagerSiteAttributes struct {
	ref terra.Reference
}

func (ns networkmanagerSiteAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(ns.ref.Append("arn"))
}

func (ns networkmanagerSiteAttributes) Description() terra.StringValue {
	return terra.ReferenceString(ns.ref.Append("description"))
}

func (ns networkmanagerSiteAttributes) GlobalNetworkId() terra.StringValue {
	return terra.ReferenceString(ns.ref.Append("global_network_id"))
}

func (ns networkmanagerSiteAttributes) Id() terra.StringValue {
	return terra.ReferenceString(ns.ref.Append("id"))
}

func (ns networkmanagerSiteAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ns.ref.Append("tags"))
}

func (ns networkmanagerSiteAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](ns.ref.Append("tags_all"))
}

func (ns networkmanagerSiteAttributes) Location() terra.ListValue[networkmanagersite.LocationAttributes] {
	return terra.ReferenceList[networkmanagersite.LocationAttributes](ns.ref.Append("location"))
}

func (ns networkmanagerSiteAttributes) Timeouts() networkmanagersite.TimeoutsAttributes {
	return terra.ReferenceSingle[networkmanagersite.TimeoutsAttributes](ns.ref.Append("timeouts"))
}

type networkmanagerSiteState struct {
	Arn             string                             `json:"arn"`
	Description     string                             `json:"description"`
	GlobalNetworkId string                             `json:"global_network_id"`
	Id              string                             `json:"id"`
	Tags            map[string]string                  `json:"tags"`
	TagsAll         map[string]string                  `json:"tags_all"`
	Location        []networkmanagersite.LocationState `json:"location"`
	Timeouts        *networkmanagersite.TimeoutsState  `json:"timeouts"`
}
