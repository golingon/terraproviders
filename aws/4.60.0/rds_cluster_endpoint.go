// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewRdsClusterEndpoint(name string, args RdsClusterEndpointArgs) *RdsClusterEndpoint {
	return &RdsClusterEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RdsClusterEndpoint)(nil)

type RdsClusterEndpoint struct {
	Name  string
	Args  RdsClusterEndpointArgs
	state *rdsClusterEndpointState
}

func (rce *RdsClusterEndpoint) Type() string {
	return "aws_rds_cluster_endpoint"
}

func (rce *RdsClusterEndpoint) LocalName() string {
	return rce.Name
}

func (rce *RdsClusterEndpoint) Configuration() interface{} {
	return rce.Args
}

func (rce *RdsClusterEndpoint) Attributes() rdsClusterEndpointAttributes {
	return rdsClusterEndpointAttributes{ref: terra.ReferenceResource(rce)}
}

func (rce *RdsClusterEndpoint) ImportState(av io.Reader) error {
	rce.state = &rdsClusterEndpointState{}
	if err := json.NewDecoder(av).Decode(rce.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rce.Type(), rce.LocalName(), err)
	}
	return nil
}

func (rce *RdsClusterEndpoint) State() (*rdsClusterEndpointState, bool) {
	return rce.state, rce.state != nil
}

func (rce *RdsClusterEndpoint) StateMust() *rdsClusterEndpointState {
	if rce.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rce.Type(), rce.LocalName()))
	}
	return rce.state
}

func (rce *RdsClusterEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(rce)
}

type RdsClusterEndpointArgs struct {
	// ClusterEndpointIdentifier: string, required
	ClusterEndpointIdentifier terra.StringValue `hcl:"cluster_endpoint_identifier,attr" validate:"required"`
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// CustomEndpointType: string, required
	CustomEndpointType terra.StringValue `hcl:"custom_endpoint_type,attr" validate:"required"`
	// ExcludedMembers: set of string, optional
	ExcludedMembers terra.SetValue[terra.StringValue] `hcl:"excluded_members,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// StaticMembers: set of string, optional
	StaticMembers terra.SetValue[terra.StringValue] `hcl:"static_members,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DependsOn contains resources that RdsClusterEndpoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type rdsClusterEndpointAttributes struct {
	ref terra.Reference
}

func (rce rdsClusterEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(rce.ref.Append("arn"))
}

func (rce rdsClusterEndpointAttributes) ClusterEndpointIdentifier() terra.StringValue {
	return terra.ReferenceString(rce.ref.Append("cluster_endpoint_identifier"))
}

func (rce rdsClusterEndpointAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceString(rce.ref.Append("cluster_identifier"))
}

func (rce rdsClusterEndpointAttributes) CustomEndpointType() terra.StringValue {
	return terra.ReferenceString(rce.ref.Append("custom_endpoint_type"))
}

func (rce rdsClusterEndpointAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceString(rce.ref.Append("endpoint"))
}

func (rce rdsClusterEndpointAttributes) ExcludedMembers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rce.ref.Append("excluded_members"))
}

func (rce rdsClusterEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(rce.ref.Append("id"))
}

func (rce rdsClusterEndpointAttributes) StaticMembers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](rce.ref.Append("static_members"))
}

func (rce rdsClusterEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rce.ref.Append("tags"))
}

func (rce rdsClusterEndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](rce.ref.Append("tags_all"))
}

type rdsClusterEndpointState struct {
	Arn                       string            `json:"arn"`
	ClusterEndpointIdentifier string            `json:"cluster_endpoint_identifier"`
	ClusterIdentifier         string            `json:"cluster_identifier"`
	CustomEndpointType        string            `json:"custom_endpoint_type"`
	Endpoint                  string            `json:"endpoint"`
	ExcludedMembers           []string          `json:"excluded_members"`
	Id                        string            `json:"id"`
	StaticMembers             []string          `json:"static_members"`
	Tags                      map[string]string `json:"tags"`
	TagsAll                   map[string]string `json:"tags_all"`
}
