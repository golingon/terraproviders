// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewRdsClusterEndpoint creates a new instance of [RdsClusterEndpoint].
func NewRdsClusterEndpoint(name string, args RdsClusterEndpointArgs) *RdsClusterEndpoint {
	return &RdsClusterEndpoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*RdsClusterEndpoint)(nil)

// RdsClusterEndpoint represents the Terraform resource aws_rds_cluster_endpoint.
type RdsClusterEndpoint struct {
	Name      string
	Args      RdsClusterEndpointArgs
	state     *rdsClusterEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [RdsClusterEndpoint].
func (rce *RdsClusterEndpoint) Type() string {
	return "aws_rds_cluster_endpoint"
}

// LocalName returns the local name for [RdsClusterEndpoint].
func (rce *RdsClusterEndpoint) LocalName() string {
	return rce.Name
}

// Configuration returns the configuration (args) for [RdsClusterEndpoint].
func (rce *RdsClusterEndpoint) Configuration() interface{} {
	return rce.Args
}

// DependOn is used for other resources to depend on [RdsClusterEndpoint].
func (rce *RdsClusterEndpoint) DependOn() terra.Reference {
	return terra.ReferenceResource(rce)
}

// Dependencies returns the list of resources [RdsClusterEndpoint] depends_on.
func (rce *RdsClusterEndpoint) Dependencies() terra.Dependencies {
	return rce.DependsOn
}

// LifecycleManagement returns the lifecycle block for [RdsClusterEndpoint].
func (rce *RdsClusterEndpoint) LifecycleManagement() *terra.Lifecycle {
	return rce.Lifecycle
}

// Attributes returns the attributes for [RdsClusterEndpoint].
func (rce *RdsClusterEndpoint) Attributes() rdsClusterEndpointAttributes {
	return rdsClusterEndpointAttributes{ref: terra.ReferenceResource(rce)}
}

// ImportState imports the given attribute values into [RdsClusterEndpoint]'s state.
func (rce *RdsClusterEndpoint) ImportState(av io.Reader) error {
	rce.state = &rdsClusterEndpointState{}
	if err := json.NewDecoder(av).Decode(rce.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", rce.Type(), rce.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [RdsClusterEndpoint] has state.
func (rce *RdsClusterEndpoint) State() (*rdsClusterEndpointState, bool) {
	return rce.state, rce.state != nil
}

// StateMust returns the state for [RdsClusterEndpoint]. Panics if the state is nil.
func (rce *RdsClusterEndpoint) StateMust() *rdsClusterEndpointState {
	if rce.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", rce.Type(), rce.LocalName()))
	}
	return rce.state
}

// RdsClusterEndpointArgs contains the configurations for aws_rds_cluster_endpoint.
type RdsClusterEndpointArgs struct {
	// ClusterEndpointIdentifier: string, required
	ClusterEndpointIdentifier terra.StringValue `hcl:"cluster_endpoint_identifier,attr" validate:"required"`
	// ClusterIdentifier: string, required
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// CustomEndpointType: string, required
	CustomEndpointType terra.StringValue `hcl:"custom_endpoint_type,attr" validate:"required"`
	// ExcludedMembers: set of string, optional
	ExcludedMembers terra.SetValue[terra.StringValue] `hcl:"excluded_members,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// StaticMembers: set of string, optional
	StaticMembers terra.SetValue[terra.StringValue] `hcl:"static_members,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}
type rdsClusterEndpointAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_rds_cluster_endpoint.
func (rce rdsClusterEndpointAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(rce.ref.Append("arn"))
}

// ClusterEndpointIdentifier returns a reference to field cluster_endpoint_identifier of aws_rds_cluster_endpoint.
func (rce rdsClusterEndpointAttributes) ClusterEndpointIdentifier() terra.StringValue {
	return terra.ReferenceAsString(rce.ref.Append("cluster_endpoint_identifier"))
}

// ClusterIdentifier returns a reference to field cluster_identifier of aws_rds_cluster_endpoint.
func (rce rdsClusterEndpointAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(rce.ref.Append("cluster_identifier"))
}

// CustomEndpointType returns a reference to field custom_endpoint_type of aws_rds_cluster_endpoint.
func (rce rdsClusterEndpointAttributes) CustomEndpointType() terra.StringValue {
	return terra.ReferenceAsString(rce.ref.Append("custom_endpoint_type"))
}

// Endpoint returns a reference to field endpoint of aws_rds_cluster_endpoint.
func (rce rdsClusterEndpointAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(rce.ref.Append("endpoint"))
}

// ExcludedMembers returns a reference to field excluded_members of aws_rds_cluster_endpoint.
func (rce rdsClusterEndpointAttributes) ExcludedMembers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rce.ref.Append("excluded_members"))
}

// Id returns a reference to field id of aws_rds_cluster_endpoint.
func (rce rdsClusterEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rce.ref.Append("id"))
}

// StaticMembers returns a reference to field static_members of aws_rds_cluster_endpoint.
func (rce rdsClusterEndpointAttributes) StaticMembers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rce.ref.Append("static_members"))
}

// Tags returns a reference to field tags of aws_rds_cluster_endpoint.
func (rce rdsClusterEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rce.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_rds_cluster_endpoint.
func (rce rdsClusterEndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rce.ref.Append("tags_all"))
}

type rdsClusterEndpointState struct {
	Arn                       string            `json:"arn"`
	ClusterEndpointIdentifier string            `json:"cluster_endpoint_identifier"`
	ClusterIdentifier         string            `json:"cluster_identifier"`
	CustomEndpointType        string            `json:"custom_endpoint_type"`
	Endpoint                  string            `json:"endpoint"`
	ExcludedMembers           []string          `json:"excluded_members"`
	Id                        string            `json:"id"`
	StaticMembers             []string          `json:"static_members"`
	Tags                      map[string]string `json:"tags"`
	TagsAll                   map[string]string `json:"tags_all"`
}
