// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	servicecatalogorganizationsaccess "github.com/golingon/terraproviders/aws/4.60.0/servicecatalogorganizationsaccess"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewServicecatalogOrganizationsAccess(name string, args ServicecatalogOrganizationsAccessArgs) *ServicecatalogOrganizationsAccess {
	return &ServicecatalogOrganizationsAccess{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*ServicecatalogOrganizationsAccess)(nil)

type ServicecatalogOrganizationsAccess struct {
	Name  string
	Args  ServicecatalogOrganizationsAccessArgs
	state *servicecatalogOrganizationsAccessState
}

func (soa *ServicecatalogOrganizationsAccess) Type() string {
	return "aws_servicecatalog_organizations_access"
}

func (soa *ServicecatalogOrganizationsAccess) LocalName() string {
	return soa.Name
}

func (soa *ServicecatalogOrganizationsAccess) Configuration() interface{} {
	return soa.Args
}

func (soa *ServicecatalogOrganizationsAccess) Attributes() servicecatalogOrganizationsAccessAttributes {
	return servicecatalogOrganizationsAccessAttributes{ref: terra.ReferenceResource(soa)}
}

func (soa *ServicecatalogOrganizationsAccess) ImportState(av io.Reader) error {
	soa.state = &servicecatalogOrganizationsAccessState{}
	if err := json.NewDecoder(av).Decode(soa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", soa.Type(), soa.LocalName(), err)
	}
	return nil
}

func (soa *ServicecatalogOrganizationsAccess) State() (*servicecatalogOrganizationsAccessState, bool) {
	return soa.state, soa.state != nil
}

func (soa *ServicecatalogOrganizationsAccess) StateMust() *servicecatalogOrganizationsAccessState {
	if soa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", soa.Type(), soa.LocalName()))
	}
	return soa.state
}

func (soa *ServicecatalogOrganizationsAccess) DependOn() terra.Reference {
	return terra.ReferenceResource(soa)
}

type ServicecatalogOrganizationsAccessArgs struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Timeouts: optional
	Timeouts *servicecatalogorganizationsaccess.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that ServicecatalogOrganizationsAccess depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type servicecatalogOrganizationsAccessAttributes struct {
	ref terra.Reference
}

func (soa servicecatalogOrganizationsAccessAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceBool(soa.ref.Append("enabled"))
}

func (soa servicecatalogOrganizationsAccessAttributes) Id() terra.StringValue {
	return terra.ReferenceString(soa.ref.Append("id"))
}

func (soa servicecatalogOrganizationsAccessAttributes) Timeouts() servicecatalogorganizationsaccess.TimeoutsAttributes {
	return terra.ReferenceSingle[servicecatalogorganizationsaccess.TimeoutsAttributes](soa.ref.Append("timeouts"))
}

type servicecatalogOrganizationsAccessState struct {
	Enabled  bool                                             `json:"enabled"`
	Id       string                                           `json:"id"`
	Timeouts *servicecatalogorganizationsaccess.TimeoutsState `json:"timeouts"`
}
