// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	backupreportplan "github.com/golingon/terraproviders/aws/4.60.0/backupreportplan"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewBackupReportPlan(name string, args BackupReportPlanArgs) *BackupReportPlan {
	return &BackupReportPlan{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*BackupReportPlan)(nil)

type BackupReportPlan struct {
	Name  string
	Args  BackupReportPlanArgs
	state *backupReportPlanState
}

func (brp *BackupReportPlan) Type() string {
	return "aws_backup_report_plan"
}

func (brp *BackupReportPlan) LocalName() string {
	return brp.Name
}

func (brp *BackupReportPlan) Configuration() interface{} {
	return brp.Args
}

func (brp *BackupReportPlan) Attributes() backupReportPlanAttributes {
	return backupReportPlanAttributes{ref: terra.ReferenceResource(brp)}
}

func (brp *BackupReportPlan) ImportState(av io.Reader) error {
	brp.state = &backupReportPlanState{}
	if err := json.NewDecoder(av).Decode(brp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", brp.Type(), brp.LocalName(), err)
	}
	return nil
}

func (brp *BackupReportPlan) State() (*backupReportPlanState, bool) {
	return brp.state, brp.state != nil
}

func (brp *BackupReportPlan) StateMust() *backupReportPlanState {
	if brp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", brp.Type(), brp.LocalName()))
	}
	return brp.state
}

func (brp *BackupReportPlan) DependOn() terra.Reference {
	return terra.ReferenceResource(brp)
}

type BackupReportPlanArgs struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ReportDeliveryChannel: required
	ReportDeliveryChannel *backupreportplan.ReportDeliveryChannel `hcl:"report_delivery_channel,block" validate:"required"`
	// ReportSetting: required
	ReportSetting *backupreportplan.ReportSetting `hcl:"report_setting,block" validate:"required"`
	// DependsOn contains resources that BackupReportPlan depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type backupReportPlanAttributes struct {
	ref terra.Reference
}

func (brp backupReportPlanAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(brp.ref.Append("arn"))
}

func (brp backupReportPlanAttributes) CreationTime() terra.StringValue {
	return terra.ReferenceString(brp.ref.Append("creation_time"))
}

func (brp backupReportPlanAttributes) DeploymentStatus() terra.StringValue {
	return terra.ReferenceString(brp.ref.Append("deployment_status"))
}

func (brp backupReportPlanAttributes) Description() terra.StringValue {
	return terra.ReferenceString(brp.ref.Append("description"))
}

func (brp backupReportPlanAttributes) Id() terra.StringValue {
	return terra.ReferenceString(brp.ref.Append("id"))
}

func (brp backupReportPlanAttributes) Name() terra.StringValue {
	return terra.ReferenceString(brp.ref.Append("name"))
}

func (brp backupReportPlanAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](brp.ref.Append("tags"))
}

func (brp backupReportPlanAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](brp.ref.Append("tags_all"))
}

func (brp backupReportPlanAttributes) ReportDeliveryChannel() terra.ListValue[backupreportplan.ReportDeliveryChannelAttributes] {
	return terra.ReferenceList[backupreportplan.ReportDeliveryChannelAttributes](brp.ref.Append("report_delivery_channel"))
}

func (brp backupReportPlanAttributes) ReportSetting() terra.ListValue[backupreportplan.ReportSettingAttributes] {
	return terra.ReferenceList[backupreportplan.ReportSettingAttributes](brp.ref.Append("report_setting"))
}

type backupReportPlanState struct {
	Arn                   string                                        `json:"arn"`
	CreationTime          string                                        `json:"creation_time"`
	DeploymentStatus      string                                        `json:"deployment_status"`
	Description           string                                        `json:"description"`
	Id                    string                                        `json:"id"`
	Name                  string                                        `json:"name"`
	Tags                  map[string]string                             `json:"tags"`
	TagsAll               map[string]string                             `json:"tags_all"`
	ReportDeliveryChannel []backupreportplan.ReportDeliveryChannelState `json:"report_delivery_channel"`
	ReportSetting         []backupreportplan.ReportSettingState         `json:"report_setting"`
}
