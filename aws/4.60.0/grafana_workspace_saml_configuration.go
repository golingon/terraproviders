// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	grafanaworkspacesamlconfiguration "github.com/golingon/terraproviders/aws/4.60.0/grafanaworkspacesamlconfiguration"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewGrafanaWorkspaceSamlConfiguration(name string, args GrafanaWorkspaceSamlConfigurationArgs) *GrafanaWorkspaceSamlConfiguration {
	return &GrafanaWorkspaceSamlConfiguration{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*GrafanaWorkspaceSamlConfiguration)(nil)

type GrafanaWorkspaceSamlConfiguration struct {
	Name  string
	Args  GrafanaWorkspaceSamlConfigurationArgs
	state *grafanaWorkspaceSamlConfigurationState
}

func (gwsc *GrafanaWorkspaceSamlConfiguration) Type() string {
	return "aws_grafana_workspace_saml_configuration"
}

func (gwsc *GrafanaWorkspaceSamlConfiguration) LocalName() string {
	return gwsc.Name
}

func (gwsc *GrafanaWorkspaceSamlConfiguration) Configuration() interface{} {
	return gwsc.Args
}

func (gwsc *GrafanaWorkspaceSamlConfiguration) Attributes() grafanaWorkspaceSamlConfigurationAttributes {
	return grafanaWorkspaceSamlConfigurationAttributes{ref: terra.ReferenceResource(gwsc)}
}

func (gwsc *GrafanaWorkspaceSamlConfiguration) ImportState(av io.Reader) error {
	gwsc.state = &grafanaWorkspaceSamlConfigurationState{}
	if err := json.NewDecoder(av).Decode(gwsc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", gwsc.Type(), gwsc.LocalName(), err)
	}
	return nil
}

func (gwsc *GrafanaWorkspaceSamlConfiguration) State() (*grafanaWorkspaceSamlConfigurationState, bool) {
	return gwsc.state, gwsc.state != nil
}

func (gwsc *GrafanaWorkspaceSamlConfiguration) StateMust() *grafanaWorkspaceSamlConfigurationState {
	if gwsc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", gwsc.Type(), gwsc.LocalName()))
	}
	return gwsc.state
}

func (gwsc *GrafanaWorkspaceSamlConfiguration) DependOn() terra.Reference {
	return terra.ReferenceResource(gwsc)
}

type GrafanaWorkspaceSamlConfigurationArgs struct {
	// AdminRoleValues: list of string, optional
	AdminRoleValues terra.ListValue[terra.StringValue] `hcl:"admin_role_values,attr"`
	// AllowedOrganizations: list of string, optional
	AllowedOrganizations terra.ListValue[terra.StringValue] `hcl:"allowed_organizations,attr"`
	// EditorRoleValues: list of string, required
	EditorRoleValues terra.ListValue[terra.StringValue] `hcl:"editor_role_values,attr" validate:"required"`
	// EmailAssertion: string, optional
	EmailAssertion terra.StringValue `hcl:"email_assertion,attr"`
	// GroupsAssertion: string, optional
	GroupsAssertion terra.StringValue `hcl:"groups_assertion,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdpMetadataUrl: string, optional
	IdpMetadataUrl terra.StringValue `hcl:"idp_metadata_url,attr"`
	// IdpMetadataXml: string, optional
	IdpMetadataXml terra.StringValue `hcl:"idp_metadata_xml,attr"`
	// LoginAssertion: string, optional
	LoginAssertion terra.StringValue `hcl:"login_assertion,attr"`
	// LoginValidityDuration: number, optional
	LoginValidityDuration terra.NumberValue `hcl:"login_validity_duration,attr"`
	// NameAssertion: string, optional
	NameAssertion terra.StringValue `hcl:"name_assertion,attr"`
	// OrgAssertion: string, optional
	OrgAssertion terra.StringValue `hcl:"org_assertion,attr"`
	// RoleAssertion: string, optional
	RoleAssertion terra.StringValue `hcl:"role_assertion,attr"`
	// WorkspaceId: string, required
	WorkspaceId terra.StringValue `hcl:"workspace_id,attr" validate:"required"`
	// Timeouts: optional
	Timeouts *grafanaworkspacesamlconfiguration.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that GrafanaWorkspaceSamlConfiguration depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type grafanaWorkspaceSamlConfigurationAttributes struct {
	ref terra.Reference
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) AdminRoleValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](gwsc.ref.Append("admin_role_values"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) AllowedOrganizations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](gwsc.ref.Append("allowed_organizations"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) EditorRoleValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](gwsc.ref.Append("editor_role_values"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) EmailAssertion() terra.StringValue {
	return terra.ReferenceString(gwsc.ref.Append("email_assertion"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) GroupsAssertion() terra.StringValue {
	return terra.ReferenceString(gwsc.ref.Append("groups_assertion"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceString(gwsc.ref.Append("id"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) IdpMetadataUrl() terra.StringValue {
	return terra.ReferenceString(gwsc.ref.Append("idp_metadata_url"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) IdpMetadataXml() terra.StringValue {
	return terra.ReferenceString(gwsc.ref.Append("idp_metadata_xml"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) LoginAssertion() terra.StringValue {
	return terra.ReferenceString(gwsc.ref.Append("login_assertion"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) LoginValidityDuration() terra.NumberValue {
	return terra.ReferenceNumber(gwsc.ref.Append("login_validity_duration"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) NameAssertion() terra.StringValue {
	return terra.ReferenceString(gwsc.ref.Append("name_assertion"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) OrgAssertion() terra.StringValue {
	return terra.ReferenceString(gwsc.ref.Append("org_assertion"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) RoleAssertion() terra.StringValue {
	return terra.ReferenceString(gwsc.ref.Append("role_assertion"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) Status() terra.StringValue {
	return terra.ReferenceString(gwsc.ref.Append("status"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) WorkspaceId() terra.StringValue {
	return terra.ReferenceString(gwsc.ref.Append("workspace_id"))
}

func (gwsc grafanaWorkspaceSamlConfigurationAttributes) Timeouts() grafanaworkspacesamlconfiguration.TimeoutsAttributes {
	return terra.ReferenceSingle[grafanaworkspacesamlconfiguration.TimeoutsAttributes](gwsc.ref.Append("timeouts"))
}

type grafanaWorkspaceSamlConfigurationState struct {
	AdminRoleValues       []string                                         `json:"admin_role_values"`
	AllowedOrganizations  []string                                         `json:"allowed_organizations"`
	EditorRoleValues      []string                                         `json:"editor_role_values"`
	EmailAssertion        string                                           `json:"email_assertion"`
	GroupsAssertion       string                                           `json:"groups_assertion"`
	Id                    string                                           `json:"id"`
	IdpMetadataUrl        string                                           `json:"idp_metadata_url"`
	IdpMetadataXml        string                                           `json:"idp_metadata_xml"`
	LoginAssertion        string                                           `json:"login_assertion"`
	LoginValidityDuration float64                                          `json:"login_validity_duration"`
	NameAssertion         string                                           `json:"name_assertion"`
	OrgAssertion          string                                           `json:"org_assertion"`
	RoleAssertion         string                                           `json:"role_assertion"`
	Status                string                                           `json:"status"`
	WorkspaceId           string                                           `json:"workspace_id"`
	Timeouts              *grafanaworkspacesamlconfiguration.TimeoutsState `json:"timeouts"`
}
