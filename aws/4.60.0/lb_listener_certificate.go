// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

// NewLbListenerCertificate creates a new instance of [LbListenerCertificate].
func NewLbListenerCertificate(name string, args LbListenerCertificateArgs) *LbListenerCertificate {
	return &LbListenerCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LbListenerCertificate)(nil)

// LbListenerCertificate represents the Terraform resource aws_lb_listener_certificate.
type LbListenerCertificate struct {
	Name      string
	Args      LbListenerCertificateArgs
	state     *lbListenerCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [LbListenerCertificate].
func (llc *LbListenerCertificate) Type() string {
	return "aws_lb_listener_certificate"
}

// LocalName returns the local name for [LbListenerCertificate].
func (llc *LbListenerCertificate) LocalName() string {
	return llc.Name
}

// Configuration returns the configuration (args) for [LbListenerCertificate].
func (llc *LbListenerCertificate) Configuration() interface{} {
	return llc.Args
}

// DependOn is used for other resources to depend on [LbListenerCertificate].
func (llc *LbListenerCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(llc)
}

// Dependencies returns the list of resources [LbListenerCertificate] depends_on.
func (llc *LbListenerCertificate) Dependencies() terra.Dependencies {
	return llc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [LbListenerCertificate].
func (llc *LbListenerCertificate) LifecycleManagement() *terra.Lifecycle {
	return llc.Lifecycle
}

// Attributes returns the attributes for [LbListenerCertificate].
func (llc *LbListenerCertificate) Attributes() lbListenerCertificateAttributes {
	return lbListenerCertificateAttributes{ref: terra.ReferenceResource(llc)}
}

// ImportState imports the given attribute values into [LbListenerCertificate]'s state.
func (llc *LbListenerCertificate) ImportState(av io.Reader) error {
	llc.state = &lbListenerCertificateState{}
	if err := json.NewDecoder(av).Decode(llc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", llc.Type(), llc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [LbListenerCertificate] has state.
func (llc *LbListenerCertificate) State() (*lbListenerCertificateState, bool) {
	return llc.state, llc.state != nil
}

// StateMust returns the state for [LbListenerCertificate]. Panics if the state is nil.
func (llc *LbListenerCertificate) StateMust() *lbListenerCertificateState {
	if llc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", llc.Type(), llc.LocalName()))
	}
	return llc.state
}

// LbListenerCertificateArgs contains the configurations for aws_lb_listener_certificate.
type LbListenerCertificateArgs struct {
	// CertificateArn: string, required
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListenerArn: string, required
	ListenerArn terra.StringValue `hcl:"listener_arn,attr" validate:"required"`
}
type lbListenerCertificateAttributes struct {
	ref terra.Reference
}

// CertificateArn returns a reference to field certificate_arn of aws_lb_listener_certificate.
func (llc lbListenerCertificateAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceAsString(llc.ref.Append("certificate_arn"))
}

// Id returns a reference to field id of aws_lb_listener_certificate.
func (llc lbListenerCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(llc.ref.Append("id"))
}

// ListenerArn returns a reference to field listener_arn of aws_lb_listener_certificate.
func (llc lbListenerCertificateAttributes) ListenerArn() terra.StringValue {
	return terra.ReferenceAsString(llc.ref.Append("listener_arn"))
}

type lbListenerCertificateState struct {
	CertificateArn string `json:"certificate_arn"`
	Id             string `json:"id"`
	ListenerArn    string `json:"listener_arn"`
}
