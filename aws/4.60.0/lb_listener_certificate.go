// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLbListenerCertificate(name string, args LbListenerCertificateArgs) *LbListenerCertificate {
	return &LbListenerCertificate{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LbListenerCertificate)(nil)

type LbListenerCertificate struct {
	Name  string
	Args  LbListenerCertificateArgs
	state *lbListenerCertificateState
}

func (llc *LbListenerCertificate) Type() string {
	return "aws_lb_listener_certificate"
}

func (llc *LbListenerCertificate) LocalName() string {
	return llc.Name
}

func (llc *LbListenerCertificate) Configuration() interface{} {
	return llc.Args
}

func (llc *LbListenerCertificate) Attributes() lbListenerCertificateAttributes {
	return lbListenerCertificateAttributes{ref: terra.ReferenceResource(llc)}
}

func (llc *LbListenerCertificate) ImportState(av io.Reader) error {
	llc.state = &lbListenerCertificateState{}
	if err := json.NewDecoder(av).Decode(llc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", llc.Type(), llc.LocalName(), err)
	}
	return nil
}

func (llc *LbListenerCertificate) State() (*lbListenerCertificateState, bool) {
	return llc.state, llc.state != nil
}

func (llc *LbListenerCertificate) StateMust() *lbListenerCertificateState {
	if llc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", llc.Type(), llc.LocalName()))
	}
	return llc.state
}

func (llc *LbListenerCertificate) DependOn() terra.Reference {
	return terra.ReferenceResource(llc)
}

type LbListenerCertificateArgs struct {
	// CertificateArn: string, required
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListenerArn: string, required
	ListenerArn terra.StringValue `hcl:"listener_arn,attr" validate:"required"`
	// DependsOn contains resources that LbListenerCertificate depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lbListenerCertificateAttributes struct {
	ref terra.Reference
}

func (llc lbListenerCertificateAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("certificate_arn"))
}

func (llc lbListenerCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("id"))
}

func (llc lbListenerCertificateAttributes) ListenerArn() terra.StringValue {
	return terra.ReferenceString(llc.ref.Append("listener_arn"))
}

type lbListenerCertificateState struct {
	CertificateArn string `json:"certificate_arn"`
	Id             string `json:"id"`
	ListenerArn    string `json:"listener_arn"`
}
