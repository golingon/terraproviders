// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	lexslottype "github.com/golingon/terraproviders/aws/4.60.0/lexslottype"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewLexSlotType(name string, args LexSlotTypeArgs) *LexSlotType {
	return &LexSlotType{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*LexSlotType)(nil)

type LexSlotType struct {
	Name  string
	Args  LexSlotTypeArgs
	state *lexSlotTypeState
}

func (lst *LexSlotType) Type() string {
	return "aws_lex_slot_type"
}

func (lst *LexSlotType) LocalName() string {
	return lst.Name
}

func (lst *LexSlotType) Configuration() interface{} {
	return lst.Args
}

func (lst *LexSlotType) Attributes() lexSlotTypeAttributes {
	return lexSlotTypeAttributes{ref: terra.ReferenceResource(lst)}
}

func (lst *LexSlotType) ImportState(av io.Reader) error {
	lst.state = &lexSlotTypeState{}
	if err := json.NewDecoder(av).Decode(lst.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", lst.Type(), lst.LocalName(), err)
	}
	return nil
}

func (lst *LexSlotType) State() (*lexSlotTypeState, bool) {
	return lst.state, lst.state != nil
}

func (lst *LexSlotType) StateMust() *lexSlotTypeState {
	if lst.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", lst.Type(), lst.LocalName()))
	}
	return lst.state
}

func (lst *LexSlotType) DependOn() terra.Reference {
	return terra.ReferenceResource(lst)
}

type LexSlotTypeArgs struct {
	// CreateVersion: bool, optional
	CreateVersion terra.BoolValue `hcl:"create_version,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ValueSelectionStrategy: string, optional
	ValueSelectionStrategy terra.StringValue `hcl:"value_selection_strategy,attr"`
	// EnumerationValue: min=1,max=10000
	EnumerationValue []lexslottype.EnumerationValue `hcl:"enumeration_value,block" validate:"min=1,max=10000"`
	// Timeouts: optional
	Timeouts *lexslottype.Timeouts `hcl:"timeouts,block"`
	// DependsOn contains resources that LexSlotType depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type lexSlotTypeAttributes struct {
	ref terra.Reference
}

func (lst lexSlotTypeAttributes) Checksum() terra.StringValue {
	return terra.ReferenceString(lst.ref.Append("checksum"))
}

func (lst lexSlotTypeAttributes) CreateVersion() terra.BoolValue {
	return terra.ReferenceBool(lst.ref.Append("create_version"))
}

func (lst lexSlotTypeAttributes) CreatedDate() terra.StringValue {
	return terra.ReferenceString(lst.ref.Append("created_date"))
}

func (lst lexSlotTypeAttributes) Description() terra.StringValue {
	return terra.ReferenceString(lst.ref.Append("description"))
}

func (lst lexSlotTypeAttributes) Id() terra.StringValue {
	return terra.ReferenceString(lst.ref.Append("id"))
}

func (lst lexSlotTypeAttributes) LastUpdatedDate() terra.StringValue {
	return terra.ReferenceString(lst.ref.Append("last_updated_date"))
}

func (lst lexSlotTypeAttributes) Name() terra.StringValue {
	return terra.ReferenceString(lst.ref.Append("name"))
}

func (lst lexSlotTypeAttributes) ValueSelectionStrategy() terra.StringValue {
	return terra.ReferenceString(lst.ref.Append("value_selection_strategy"))
}

func (lst lexSlotTypeAttributes) Version() terra.StringValue {
	return terra.ReferenceString(lst.ref.Append("version"))
}

func (lst lexSlotTypeAttributes) EnumerationValue() terra.SetValue[lexslottype.EnumerationValueAttributes] {
	return terra.ReferenceSet[lexslottype.EnumerationValueAttributes](lst.ref.Append("enumeration_value"))
}

func (lst lexSlotTypeAttributes) Timeouts() lexslottype.TimeoutsAttributes {
	return terra.ReferenceSingle[lexslottype.TimeoutsAttributes](lst.ref.Append("timeouts"))
}

type lexSlotTypeState struct {
	Checksum               string                              `json:"checksum"`
	CreateVersion          bool                                `json:"create_version"`
	CreatedDate            string                              `json:"created_date"`
	Description            string                              `json:"description"`
	Id                     string                              `json:"id"`
	LastUpdatedDate        string                              `json:"last_updated_date"`
	Name                   string                              `json:"name"`
	ValueSelectionStrategy string                              `json:"value_selection_strategy"`
	Version                string                              `json:"version"`
	EnumerationValue       []lexslottype.EnumerationValueState `json:"enumeration_value"`
	Timeouts               *lexslottype.TimeoutsState          `json:"timeouts"`
}
