// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import "github.com/volvo-cars/lingon/pkg/terra"

func NewDataNeptuneEngineVersion(name string, args DataNeptuneEngineVersionArgs) *DataNeptuneEngineVersion {
	return &DataNeptuneEngineVersion{
		Args: args,
		Name: name,
	}
}

var _ terra.DataResource = (*DataNeptuneEngineVersion)(nil)

type DataNeptuneEngineVersion struct {
	Name string
	Args DataNeptuneEngineVersionArgs
}

func (nev *DataNeptuneEngineVersion) DataSource() string {
	return "aws_neptune_engine_version"
}

func (nev *DataNeptuneEngineVersion) LocalName() string {
	return nev.Name
}

func (nev *DataNeptuneEngineVersion) Configuration() interface{} {
	return nev.Args
}

func (nev *DataNeptuneEngineVersion) Attributes() dataNeptuneEngineVersionAttributes {
	return dataNeptuneEngineVersionAttributes{ref: terra.ReferenceDataResource(nev)}
}

type DataNeptuneEngineVersionArgs struct {
	// Engine: string, optional
	Engine terra.StringValue `hcl:"engine,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ParameterGroupFamily: string, optional
	ParameterGroupFamily terra.StringValue `hcl:"parameter_group_family,attr"`
	// PreferredVersions: list of string, optional
	PreferredVersions terra.ListValue[terra.StringValue] `hcl:"preferred_versions,attr"`
	// Version: string, optional
	Version terra.StringValue `hcl:"version,attr"`
}
type dataNeptuneEngineVersionAttributes struct {
	ref terra.Reference
}

func (nev dataNeptuneEngineVersionAttributes) Engine() terra.StringValue {
	return terra.ReferenceString(nev.ref.Append("engine"))
}

func (nev dataNeptuneEngineVersionAttributes) EngineDescription() terra.StringValue {
	return terra.ReferenceString(nev.ref.Append("engine_description"))
}

func (nev dataNeptuneEngineVersionAttributes) ExportableLogTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nev.ref.Append("exportable_log_types"))
}

func (nev dataNeptuneEngineVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceString(nev.ref.Append("id"))
}

func (nev dataNeptuneEngineVersionAttributes) ParameterGroupFamily() terra.StringValue {
	return terra.ReferenceString(nev.ref.Append("parameter_group_family"))
}

func (nev dataNeptuneEngineVersionAttributes) PreferredVersions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceList[terra.StringValue](nev.ref.Append("preferred_versions"))
}

func (nev dataNeptuneEngineVersionAttributes) SupportedTimezones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nev.ref.Append("supported_timezones"))
}

func (nev dataNeptuneEngineVersionAttributes) SupportsLogExportsToCloudwatch() terra.BoolValue {
	return terra.ReferenceBool(nev.ref.Append("supports_log_exports_to_cloudwatch"))
}

func (nev dataNeptuneEngineVersionAttributes) SupportsReadReplica() terra.BoolValue {
	return terra.ReferenceBool(nev.ref.Append("supports_read_replica"))
}

func (nev dataNeptuneEngineVersionAttributes) ValidUpgradeTargets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceSet[terra.StringValue](nev.ref.Append("valid_upgrade_targets"))
}

func (nev dataNeptuneEngineVersionAttributes) Version() terra.StringValue {
	return terra.ReferenceString(nev.ref.Append("version"))
}

func (nev dataNeptuneEngineVersionAttributes) VersionDescription() terra.StringValue {
	return terra.ReferenceString(nev.ref.Append("version_description"))
}
