// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package elasticsearchdomain

import (
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
	terra "github.com/volvo-cars/lingon/pkg/terra"
)

type AdvancedSecurityOptions struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// InternalUserDatabaseEnabled: bool, optional
	InternalUserDatabaseEnabled terra.BoolValue `hcl:"internal_user_database_enabled,attr"`
	// MasterUserOptions: optional
	MasterUserOptions *MasterUserOptions `hcl:"master_user_options,block"`
}

type MasterUserOptions struct {
	// MasterUserArn: string, optional
	MasterUserArn terra.StringValue `hcl:"master_user_arn,attr"`
	// MasterUserName: string, optional
	MasterUserName terra.StringValue `hcl:"master_user_name,attr"`
	// MasterUserPassword: string, optional
	MasterUserPassword terra.StringValue `hcl:"master_user_password,attr"`
}

type AutoTuneOptions struct {
	// DesiredState: string, required
	DesiredState terra.StringValue `hcl:"desired_state,attr" validate:"required"`
	// RollbackOnDisable: string, optional
	RollbackOnDisable terra.StringValue `hcl:"rollback_on_disable,attr"`
	// MaintenanceSchedule: min=0
	MaintenanceSchedule []MaintenanceSchedule `hcl:"maintenance_schedule,block" validate:"min=0"`
}

type MaintenanceSchedule struct {
	// CronExpressionForRecurrence: string, required
	CronExpressionForRecurrence terra.StringValue `hcl:"cron_expression_for_recurrence,attr" validate:"required"`
	// StartAt: string, required
	StartAt terra.StringValue `hcl:"start_at,attr" validate:"required"`
	// Duration: required
	Duration *Duration `hcl:"duration,block" validate:"required"`
}

type Duration struct {
	// Unit: string, required
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value: number, required
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type ClusterConfig struct {
	// DedicatedMasterCount: number, optional
	DedicatedMasterCount terra.NumberValue `hcl:"dedicated_master_count,attr"`
	// DedicatedMasterEnabled: bool, optional
	DedicatedMasterEnabled terra.BoolValue `hcl:"dedicated_master_enabled,attr"`
	// DedicatedMasterType: string, optional
	DedicatedMasterType terra.StringValue `hcl:"dedicated_master_type,attr"`
	// InstanceCount: number, optional
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// InstanceType: string, optional
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// WarmCount: number, optional
	WarmCount terra.NumberValue `hcl:"warm_count,attr"`
	// WarmEnabled: bool, optional
	WarmEnabled terra.BoolValue `hcl:"warm_enabled,attr"`
	// WarmType: string, optional
	WarmType terra.StringValue `hcl:"warm_type,attr"`
	// ZoneAwarenessEnabled: bool, optional
	ZoneAwarenessEnabled terra.BoolValue `hcl:"zone_awareness_enabled,attr"`
	// ColdStorageOptions: optional
	ColdStorageOptions *ColdStorageOptions `hcl:"cold_storage_options,block"`
	// ZoneAwarenessConfig: optional
	ZoneAwarenessConfig *ZoneAwarenessConfig `hcl:"zone_awareness_config,block"`
}

type ColdStorageOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type ZoneAwarenessConfig struct {
	// AvailabilityZoneCount: number, optional
	AvailabilityZoneCount terra.NumberValue `hcl:"availability_zone_count,attr"`
}

type CognitoOptions struct {
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// IdentityPoolId: string, required
	IdentityPoolId terra.StringValue `hcl:"identity_pool_id,attr" validate:"required"`
	// RoleArn: string, required
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// UserPoolId: string, required
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
}

type DomainEndpointOptions struct {
	// CustomEndpoint: string, optional
	CustomEndpoint terra.StringValue `hcl:"custom_endpoint,attr"`
	// CustomEndpointCertificateArn: string, optional
	CustomEndpointCertificateArn terra.StringValue `hcl:"custom_endpoint_certificate_arn,attr"`
	// CustomEndpointEnabled: bool, optional
	CustomEndpointEnabled terra.BoolValue `hcl:"custom_endpoint_enabled,attr"`
	// EnforceHttps: bool, optional
	EnforceHttps terra.BoolValue `hcl:"enforce_https,attr"`
	// TlsSecurityPolicy: string, optional
	TlsSecurityPolicy terra.StringValue `hcl:"tls_security_policy,attr"`
}

type EbsOptions struct {
	// EbsEnabled: bool, required
	EbsEnabled terra.BoolValue `hcl:"ebs_enabled,attr" validate:"required"`
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// VolumeSize: number, optional
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType: string, optional
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type EncryptAtRest struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// KmsKeyId: string, optional
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
}

type LogPublishingOptions struct {
	// CloudwatchLogGroupArn: string, required
	CloudwatchLogGroupArn terra.StringValue `hcl:"cloudwatch_log_group_arn,attr" validate:"required"`
	// Enabled: bool, optional
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogType: string, required
	LogType terra.StringValue `hcl:"log_type,attr" validate:"required"`
}

type NodeToNodeEncryption struct {
	// Enabled: bool, required
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type SnapshotOptions struct {
	// AutomatedSnapshotStartHour: number, required
	AutomatedSnapshotStartHour terra.NumberValue `hcl:"automated_snapshot_start_hour,attr" validate:"required"`
}

type Timeouts struct {
	// Create: string, optional
	Create terra.StringValue `hcl:"create,attr"`
	// Delete: string, optional
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update: string, optional
	Update terra.StringValue `hcl:"update,attr"`
}

type VpcOptions struct {
	// SecurityGroupIds: set of string, optional
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
}

type AdvancedSecurityOptionsAttributes struct {
	ref terra.Reference
}

func (aso AdvancedSecurityOptionsAttributes) InternalRef() terra.Reference {
	return aso.ref
}

func (aso AdvancedSecurityOptionsAttributes) InternalWithRef(ref terra.Reference) AdvancedSecurityOptionsAttributes {
	return AdvancedSecurityOptionsAttributes{ref: ref}
}

func (aso AdvancedSecurityOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return aso.ref.InternalTokens()
}

func (aso AdvancedSecurityOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aso.ref.Append("enabled"))
}

func (aso AdvancedSecurityOptionsAttributes) InternalUserDatabaseEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aso.ref.Append("internal_user_database_enabled"))
}

func (aso AdvancedSecurityOptionsAttributes) MasterUserOptions() terra.ListValue[MasterUserOptionsAttributes] {
	return terra.ReferenceAsList[MasterUserOptionsAttributes](aso.ref.Append("master_user_options"))
}

type MasterUserOptionsAttributes struct {
	ref terra.Reference
}

func (muo MasterUserOptionsAttributes) InternalRef() terra.Reference {
	return muo.ref
}

func (muo MasterUserOptionsAttributes) InternalWithRef(ref terra.Reference) MasterUserOptionsAttributes {
	return MasterUserOptionsAttributes{ref: ref}
}

func (muo MasterUserOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return muo.ref.InternalTokens()
}

func (muo MasterUserOptionsAttributes) MasterUserArn() terra.StringValue {
	return terra.ReferenceAsString(muo.ref.Append("master_user_arn"))
}

func (muo MasterUserOptionsAttributes) MasterUserName() terra.StringValue {
	return terra.ReferenceAsString(muo.ref.Append("master_user_name"))
}

func (muo MasterUserOptionsAttributes) MasterUserPassword() terra.StringValue {
	return terra.ReferenceAsString(muo.ref.Append("master_user_password"))
}

type AutoTuneOptionsAttributes struct {
	ref terra.Reference
}

func (ato AutoTuneOptionsAttributes) InternalRef() terra.Reference {
	return ato.ref
}

func (ato AutoTuneOptionsAttributes) InternalWithRef(ref terra.Reference) AutoTuneOptionsAttributes {
	return AutoTuneOptionsAttributes{ref: ref}
}

func (ato AutoTuneOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return ato.ref.InternalTokens()
}

func (ato AutoTuneOptionsAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceAsString(ato.ref.Append("desired_state"))
}

func (ato AutoTuneOptionsAttributes) RollbackOnDisable() terra.StringValue {
	return terra.ReferenceAsString(ato.ref.Append("rollback_on_disable"))
}

func (ato AutoTuneOptionsAttributes) MaintenanceSchedule() terra.SetValue[MaintenanceScheduleAttributes] {
	return terra.ReferenceAsSet[MaintenanceScheduleAttributes](ato.ref.Append("maintenance_schedule"))
}

type MaintenanceScheduleAttributes struct {
	ref terra.Reference
}

func (ms MaintenanceScheduleAttributes) InternalRef() terra.Reference {
	return ms.ref
}

func (ms MaintenanceScheduleAttributes) InternalWithRef(ref terra.Reference) MaintenanceScheduleAttributes {
	return MaintenanceScheduleAttributes{ref: ref}
}

func (ms MaintenanceScheduleAttributes) InternalTokens() hclwrite.Tokens {
	return ms.ref.InternalTokens()
}

func (ms MaintenanceScheduleAttributes) CronExpressionForRecurrence() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("cron_expression_for_recurrence"))
}

func (ms MaintenanceScheduleAttributes) StartAt() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("start_at"))
}

func (ms MaintenanceScheduleAttributes) Duration() terra.ListValue[DurationAttributes] {
	return terra.ReferenceAsList[DurationAttributes](ms.ref.Append("duration"))
}

type DurationAttributes struct {
	ref terra.Reference
}

func (d DurationAttributes) InternalRef() terra.Reference {
	return d.ref
}

func (d DurationAttributes) InternalWithRef(ref terra.Reference) DurationAttributes {
	return DurationAttributes{ref: ref}
}

func (d DurationAttributes) InternalTokens() hclwrite.Tokens {
	return d.ref.InternalTokens()
}

func (d DurationAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("unit"))
}

func (d DurationAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("value"))
}

type ClusterConfigAttributes struct {
	ref terra.Reference
}

func (cc ClusterConfigAttributes) InternalRef() terra.Reference {
	return cc.ref
}

func (cc ClusterConfigAttributes) InternalWithRef(ref terra.Reference) ClusterConfigAttributes {
	return ClusterConfigAttributes{ref: ref}
}

func (cc ClusterConfigAttributes) InternalTokens() hclwrite.Tokens {
	return cc.ref.InternalTokens()
}

func (cc ClusterConfigAttributes) DedicatedMasterCount() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("dedicated_master_count"))
}

func (cc ClusterConfigAttributes) DedicatedMasterEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("dedicated_master_enabled"))
}

func (cc ClusterConfigAttributes) DedicatedMasterType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("dedicated_master_type"))
}

func (cc ClusterConfigAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("instance_count"))
}

func (cc ClusterConfigAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("instance_type"))
}

func (cc ClusterConfigAttributes) WarmCount() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("warm_count"))
}

func (cc ClusterConfigAttributes) WarmEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("warm_enabled"))
}

func (cc ClusterConfigAttributes) WarmType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("warm_type"))
}

func (cc ClusterConfigAttributes) ZoneAwarenessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("zone_awareness_enabled"))
}

func (cc ClusterConfigAttributes) ColdStorageOptions() terra.ListValue[ColdStorageOptionsAttributes] {
	return terra.ReferenceAsList[ColdStorageOptionsAttributes](cc.ref.Append("cold_storage_options"))
}

func (cc ClusterConfigAttributes) ZoneAwarenessConfig() terra.ListValue[ZoneAwarenessConfigAttributes] {
	return terra.ReferenceAsList[ZoneAwarenessConfigAttributes](cc.ref.Append("zone_awareness_config"))
}

type ColdStorageOptionsAttributes struct {
	ref terra.Reference
}

func (cso ColdStorageOptionsAttributes) InternalRef() terra.Reference {
	return cso.ref
}

func (cso ColdStorageOptionsAttributes) InternalWithRef(ref terra.Reference) ColdStorageOptionsAttributes {
	return ColdStorageOptionsAttributes{ref: ref}
}

func (cso ColdStorageOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return cso.ref.InternalTokens()
}

func (cso ColdStorageOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cso.ref.Append("enabled"))
}

type ZoneAwarenessConfigAttributes struct {
	ref terra.Reference
}

func (zac ZoneAwarenessConfigAttributes) InternalRef() terra.Reference {
	return zac.ref
}

func (zac ZoneAwarenessConfigAttributes) InternalWithRef(ref terra.Reference) ZoneAwarenessConfigAttributes {
	return ZoneAwarenessConfigAttributes{ref: ref}
}

func (zac ZoneAwarenessConfigAttributes) InternalTokens() hclwrite.Tokens {
	return zac.ref.InternalTokens()
}

func (zac ZoneAwarenessConfigAttributes) AvailabilityZoneCount() terra.NumberValue {
	return terra.ReferenceAsNumber(zac.ref.Append("availability_zone_count"))
}

type CognitoOptionsAttributes struct {
	ref terra.Reference
}

func (co CognitoOptionsAttributes) InternalRef() terra.Reference {
	return co.ref
}

func (co CognitoOptionsAttributes) InternalWithRef(ref terra.Reference) CognitoOptionsAttributes {
	return CognitoOptionsAttributes{ref: ref}
}

func (co CognitoOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return co.ref.InternalTokens()
}

func (co CognitoOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("enabled"))
}

func (co CognitoOptionsAttributes) IdentityPoolId() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("identity_pool_id"))
}

func (co CognitoOptionsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("role_arn"))
}

func (co CognitoOptionsAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("user_pool_id"))
}

type DomainEndpointOptionsAttributes struct {
	ref terra.Reference
}

func (deo DomainEndpointOptionsAttributes) InternalRef() terra.Reference {
	return deo.ref
}

func (deo DomainEndpointOptionsAttributes) InternalWithRef(ref terra.Reference) DomainEndpointOptionsAttributes {
	return DomainEndpointOptionsAttributes{ref: ref}
}

func (deo DomainEndpointOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return deo.ref.InternalTokens()
}

func (deo DomainEndpointOptionsAttributes) CustomEndpoint() terra.StringValue {
	return terra.ReferenceAsString(deo.ref.Append("custom_endpoint"))
}

func (deo DomainEndpointOptionsAttributes) CustomEndpointCertificateArn() terra.StringValue {
	return terra.ReferenceAsString(deo.ref.Append("custom_endpoint_certificate_arn"))
}

func (deo DomainEndpointOptionsAttributes) CustomEndpointEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(deo.ref.Append("custom_endpoint_enabled"))
}

func (deo DomainEndpointOptionsAttributes) EnforceHttps() terra.BoolValue {
	return terra.ReferenceAsBool(deo.ref.Append("enforce_https"))
}

func (deo DomainEndpointOptionsAttributes) TlsSecurityPolicy() terra.StringValue {
	return terra.ReferenceAsString(deo.ref.Append("tls_security_policy"))
}

type EbsOptionsAttributes struct {
	ref terra.Reference
}

func (eo EbsOptionsAttributes) InternalRef() terra.Reference {
	return eo.ref
}

func (eo EbsOptionsAttributes) InternalWithRef(ref terra.Reference) EbsOptionsAttributes {
	return EbsOptionsAttributes{ref: ref}
}

func (eo EbsOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return eo.ref.InternalTokens()
}

func (eo EbsOptionsAttributes) EbsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(eo.ref.Append("ebs_enabled"))
}

func (eo EbsOptionsAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(eo.ref.Append("iops"))
}

func (eo EbsOptionsAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(eo.ref.Append("throughput"))
}

func (eo EbsOptionsAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(eo.ref.Append("volume_size"))
}

func (eo EbsOptionsAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(eo.ref.Append("volume_type"))
}

type EncryptAtRestAttributes struct {
	ref terra.Reference
}

func (ear EncryptAtRestAttributes) InternalRef() terra.Reference {
	return ear.ref
}

func (ear EncryptAtRestAttributes) InternalWithRef(ref terra.Reference) EncryptAtRestAttributes {
	return EncryptAtRestAttributes{ref: ref}
}

func (ear EncryptAtRestAttributes) InternalTokens() hclwrite.Tokens {
	return ear.ref.InternalTokens()
}

func (ear EncryptAtRestAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ear.ref.Append("enabled"))
}

func (ear EncryptAtRestAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ear.ref.Append("kms_key_id"))
}

type LogPublishingOptionsAttributes struct {
	ref terra.Reference
}

func (lpo LogPublishingOptionsAttributes) InternalRef() terra.Reference {
	return lpo.ref
}

func (lpo LogPublishingOptionsAttributes) InternalWithRef(ref terra.Reference) LogPublishingOptionsAttributes {
	return LogPublishingOptionsAttributes{ref: ref}
}

func (lpo LogPublishingOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return lpo.ref.InternalTokens()
}

func (lpo LogPublishingOptionsAttributes) CloudwatchLogGroupArn() terra.StringValue {
	return terra.ReferenceAsString(lpo.ref.Append("cloudwatch_log_group_arn"))
}

func (lpo LogPublishingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(lpo.ref.Append("enabled"))
}

func (lpo LogPublishingOptionsAttributes) LogType() terra.StringValue {
	return terra.ReferenceAsString(lpo.ref.Append("log_type"))
}

type NodeToNodeEncryptionAttributes struct {
	ref terra.Reference
}

func (ntne NodeToNodeEncryptionAttributes) InternalRef() terra.Reference {
	return ntne.ref
}

func (ntne NodeToNodeEncryptionAttributes) InternalWithRef(ref terra.Reference) NodeToNodeEncryptionAttributes {
	return NodeToNodeEncryptionAttributes{ref: ref}
}

func (ntne NodeToNodeEncryptionAttributes) InternalTokens() hclwrite.Tokens {
	return ntne.ref.InternalTokens()
}

func (ntne NodeToNodeEncryptionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ntne.ref.Append("enabled"))
}

type SnapshotOptionsAttributes struct {
	ref terra.Reference
}

func (so SnapshotOptionsAttributes) InternalRef() terra.Reference {
	return so.ref
}

func (so SnapshotOptionsAttributes) InternalWithRef(ref terra.Reference) SnapshotOptionsAttributes {
	return SnapshotOptionsAttributes{ref: ref}
}

func (so SnapshotOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return so.ref.InternalTokens()
}

func (so SnapshotOptionsAttributes) AutomatedSnapshotStartHour() terra.NumberValue {
	return terra.ReferenceAsNumber(so.ref.Append("automated_snapshot_start_hour"))
}

type TimeoutsAttributes struct {
	ref terra.Reference
}

func (t TimeoutsAttributes) InternalRef() terra.Reference {
	return t.ref
}

func (t TimeoutsAttributes) InternalWithRef(ref terra.Reference) TimeoutsAttributes {
	return TimeoutsAttributes{ref: ref}
}

func (t TimeoutsAttributes) InternalTokens() hclwrite.Tokens {
	return t.ref.InternalTokens()
}

func (t TimeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t TimeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t TimeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type VpcOptionsAttributes struct {
	ref terra.Reference
}

func (vo VpcOptionsAttributes) InternalRef() terra.Reference {
	return vo.ref
}

func (vo VpcOptionsAttributes) InternalWithRef(ref terra.Reference) VpcOptionsAttributes {
	return VpcOptionsAttributes{ref: ref}
}

func (vo VpcOptionsAttributes) InternalTokens() hclwrite.Tokens {
	return vo.ref.InternalTokens()
}

func (vo VpcOptionsAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vo.ref.Append("availability_zones"))
}

func (vo VpcOptionsAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vo.ref.Append("security_group_ids"))
}

func (vo VpcOptionsAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vo.ref.Append("subnet_ids"))
}

func (vo VpcOptionsAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vo.ref.Append("vpc_id"))
}

type AdvancedSecurityOptionsState struct {
	Enabled                     bool                     `json:"enabled"`
	InternalUserDatabaseEnabled bool                     `json:"internal_user_database_enabled"`
	MasterUserOptions           []MasterUserOptionsState `json:"master_user_options"`
}

type MasterUserOptionsState struct {
	MasterUserArn      string `json:"master_user_arn"`
	MasterUserName     string `json:"master_user_name"`
	MasterUserPassword string `json:"master_user_password"`
}

type AutoTuneOptionsState struct {
	DesiredState        string                     `json:"desired_state"`
	RollbackOnDisable   string                     `json:"rollback_on_disable"`
	MaintenanceSchedule []MaintenanceScheduleState `json:"maintenance_schedule"`
}

type MaintenanceScheduleState struct {
	CronExpressionForRecurrence string          `json:"cron_expression_for_recurrence"`
	StartAt                     string          `json:"start_at"`
	Duration                    []DurationState `json:"duration"`
}

type DurationState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type ClusterConfigState struct {
	DedicatedMasterCount   float64                    `json:"dedicated_master_count"`
	DedicatedMasterEnabled bool                       `json:"dedicated_master_enabled"`
	DedicatedMasterType    string                     `json:"dedicated_master_type"`
	InstanceCount          float64                    `json:"instance_count"`
	InstanceType           string                     `json:"instance_type"`
	WarmCount              float64                    `json:"warm_count"`
	WarmEnabled            bool                       `json:"warm_enabled"`
	WarmType               string                     `json:"warm_type"`
	ZoneAwarenessEnabled   bool                       `json:"zone_awareness_enabled"`
	ColdStorageOptions     []ColdStorageOptionsState  `json:"cold_storage_options"`
	ZoneAwarenessConfig    []ZoneAwarenessConfigState `json:"zone_awareness_config"`
}

type ColdStorageOptionsState struct {
	Enabled bool `json:"enabled"`
}

type ZoneAwarenessConfigState struct {
	AvailabilityZoneCount float64 `json:"availability_zone_count"`
}

type CognitoOptionsState struct {
	Enabled        bool   `json:"enabled"`
	IdentityPoolId string `json:"identity_pool_id"`
	RoleArn        string `json:"role_arn"`
	UserPoolId     string `json:"user_pool_id"`
}

type DomainEndpointOptionsState struct {
	CustomEndpoint               string `json:"custom_endpoint"`
	CustomEndpointCertificateArn string `json:"custom_endpoint_certificate_arn"`
	CustomEndpointEnabled        bool   `json:"custom_endpoint_enabled"`
	EnforceHttps                 bool   `json:"enforce_https"`
	TlsSecurityPolicy            string `json:"tls_security_policy"`
}

type EbsOptionsState struct {
	EbsEnabled bool    `json:"ebs_enabled"`
	Iops       float64 `json:"iops"`
	Throughput float64 `json:"throughput"`
	VolumeSize float64 `json:"volume_size"`
	VolumeType string  `json:"volume_type"`
}

type EncryptAtRestState struct {
	Enabled  bool   `json:"enabled"`
	KmsKeyId string `json:"kms_key_id"`
}

type LogPublishingOptionsState struct {
	CloudwatchLogGroupArn string `json:"cloudwatch_log_group_arn"`
	Enabled               bool   `json:"enabled"`
	LogType               string `json:"log_type"`
}

type NodeToNodeEncryptionState struct {
	Enabled bool `json:"enabled"`
}

type SnapshotOptionsState struct {
	AutomatedSnapshotStartHour float64 `json:"automated_snapshot_start_hour"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcOptionsState struct {
	AvailabilityZones []string `json:"availability_zones"`
	SecurityGroupIds  []string `json:"security_group_ids"`
	SubnetIds         []string `json:"subnet_ids"`
	VpcId             string   `json:"vpc_id"`
}
