// CODE GENERATED BY github.com/volvo-cars/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	efsaccesspoint "github.com/golingon/terraproviders/aws/4.60.0/efsaccesspoint"
	"github.com/volvo-cars/lingon/pkg/terra"
	"io"
)

func NewEfsAccessPoint(name string, args EfsAccessPointArgs) *EfsAccessPoint {
	return &EfsAccessPoint{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EfsAccessPoint)(nil)

type EfsAccessPoint struct {
	Name  string
	Args  EfsAccessPointArgs
	state *efsAccessPointState
}

func (eap *EfsAccessPoint) Type() string {
	return "aws_efs_access_point"
}

func (eap *EfsAccessPoint) LocalName() string {
	return eap.Name
}

func (eap *EfsAccessPoint) Configuration() interface{} {
	return eap.Args
}

func (eap *EfsAccessPoint) Attributes() efsAccessPointAttributes {
	return efsAccessPointAttributes{ref: terra.ReferenceResource(eap)}
}

func (eap *EfsAccessPoint) ImportState(av io.Reader) error {
	eap.state = &efsAccessPointState{}
	if err := json.NewDecoder(av).Decode(eap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", eap.Type(), eap.LocalName(), err)
	}
	return nil
}

func (eap *EfsAccessPoint) State() (*efsAccessPointState, bool) {
	return eap.state, eap.state != nil
}

func (eap *EfsAccessPoint) StateMust() *efsAccessPointState {
	if eap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", eap.Type(), eap.LocalName()))
	}
	return eap.state
}

func (eap *EfsAccessPoint) DependOn() terra.Reference {
	return terra.ReferenceResource(eap)
}

type EfsAccessPointArgs struct {
	// FileSystemId: string, required
	FileSystemId terra.StringValue `hcl:"file_system_id,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// PosixUser: optional
	PosixUser *efsaccesspoint.PosixUser `hcl:"posix_user,block"`
	// RootDirectory: optional
	RootDirectory *efsaccesspoint.RootDirectory `hcl:"root_directory,block"`
	// DependsOn contains resources that EfsAccessPoint depends on
	DependsOn terra.Dependencies `hcl:"depends_on,attr"`
}
type efsAccessPointAttributes struct {
	ref terra.Reference
}

func (eap efsAccessPointAttributes) Arn() terra.StringValue {
	return terra.ReferenceString(eap.ref.Append("arn"))
}

func (eap efsAccessPointAttributes) FileSystemArn() terra.StringValue {
	return terra.ReferenceString(eap.ref.Append("file_system_arn"))
}

func (eap efsAccessPointAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceString(eap.ref.Append("file_system_id"))
}

func (eap efsAccessPointAttributes) Id() terra.StringValue {
	return terra.ReferenceString(eap.ref.Append("id"))
}

func (eap efsAccessPointAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceString(eap.ref.Append("owner_id"))
}

func (eap efsAccessPointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](eap.ref.Append("tags"))
}

func (eap efsAccessPointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceMap[terra.StringValue](eap.ref.Append("tags_all"))
}

func (eap efsAccessPointAttributes) PosixUser() terra.ListValue[efsaccesspoint.PosixUserAttributes] {
	return terra.ReferenceList[efsaccesspoint.PosixUserAttributes](eap.ref.Append("posix_user"))
}

func (eap efsAccessPointAttributes) RootDirectory() terra.ListValue[efsaccesspoint.RootDirectoryAttributes] {
	return terra.ReferenceList[efsaccesspoint.RootDirectoryAttributes](eap.ref.Append("root_directory"))
}

type efsAccessPointState struct {
	Arn           string                              `json:"arn"`
	FileSystemArn string                              `json:"file_system_arn"`
	FileSystemId  string                              `json:"file_system_id"`
	Id            string                              `json:"id"`
	OwnerId       string                              `json:"owner_id"`
	Tags          map[string]string                   `json:"tags"`
	TagsAll       map[string]string                   `json:"tags_all"`
	PosixUser     []efsaccesspoint.PosixUserState     `json:"posix_user"`
	RootDirectory []efsaccesspoint.RootDirectoryState `json:"root_directory"`
}
