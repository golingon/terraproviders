// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_identity_mfa_login_enforcement

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_identity_mfa_login_enforcement.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultIdentityMfaLoginEnforcementState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vimle *Resource) Type() string {
	return "vault_identity_mfa_login_enforcement"
}

// LocalName returns the local name for [Resource].
func (vimle *Resource) LocalName() string {
	return vimle.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vimle *Resource) Configuration() interface{} {
	return vimle.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vimle *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vimle)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vimle *Resource) Dependencies() terra.Dependencies {
	return vimle.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vimle *Resource) LifecycleManagement() *terra.Lifecycle {
	return vimle.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vimle *Resource) Attributes() vaultIdentityMfaLoginEnforcementAttributes {
	return vaultIdentityMfaLoginEnforcementAttributes{ref: terra.ReferenceResource(vimle)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vimle *Resource) ImportState(state io.Reader) error {
	vimle.state = &vaultIdentityMfaLoginEnforcementState{}
	if err := json.NewDecoder(state).Decode(vimle.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vimle.Type(), vimle.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vimle *Resource) State() (*vaultIdentityMfaLoginEnforcementState, bool) {
	return vimle.state, vimle.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vimle *Resource) StateMust() *vaultIdentityMfaLoginEnforcementState {
	if vimle.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vimle.Type(), vimle.LocalName()))
	}
	return vimle.state
}

// Args contains the configurations for vault_identity_mfa_login_enforcement.
type Args struct {
	// AuthMethodAccessors: set of string, optional
	AuthMethodAccessors terra.SetValue[terra.StringValue] `hcl:"auth_method_accessors,attr"`
	// AuthMethodTypes: set of string, optional
	AuthMethodTypes terra.SetValue[terra.StringValue] `hcl:"auth_method_types,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityEntityIds: set of string, optional
	IdentityEntityIds terra.SetValue[terra.StringValue] `hcl:"identity_entity_ids,attr"`
	// IdentityGroupIds: set of string, optional
	IdentityGroupIds terra.SetValue[terra.StringValue] `hcl:"identity_group_ids,attr"`
	// MfaMethodIds: set of string, required
	MfaMethodIds terra.SetValue[terra.StringValue] `hcl:"mfa_method_ids,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}

type vaultIdentityMfaLoginEnforcementAttributes struct {
	ref terra.Reference
}

// AuthMethodAccessors returns a reference to field auth_method_accessors of vault_identity_mfa_login_enforcement.
func (vimle vaultIdentityMfaLoginEnforcementAttributes) AuthMethodAccessors() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vimle.ref.Append("auth_method_accessors"))
}

// AuthMethodTypes returns a reference to field auth_method_types of vault_identity_mfa_login_enforcement.
func (vimle vaultIdentityMfaLoginEnforcementAttributes) AuthMethodTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vimle.ref.Append("auth_method_types"))
}

// Id returns a reference to field id of vault_identity_mfa_login_enforcement.
func (vimle vaultIdentityMfaLoginEnforcementAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vimle.ref.Append("id"))
}

// IdentityEntityIds returns a reference to field identity_entity_ids of vault_identity_mfa_login_enforcement.
func (vimle vaultIdentityMfaLoginEnforcementAttributes) IdentityEntityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vimle.ref.Append("identity_entity_ids"))
}

// IdentityGroupIds returns a reference to field identity_group_ids of vault_identity_mfa_login_enforcement.
func (vimle vaultIdentityMfaLoginEnforcementAttributes) IdentityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vimle.ref.Append("identity_group_ids"))
}

// MfaMethodIds returns a reference to field mfa_method_ids of vault_identity_mfa_login_enforcement.
func (vimle vaultIdentityMfaLoginEnforcementAttributes) MfaMethodIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vimle.ref.Append("mfa_method_ids"))
}

// Name returns a reference to field name of vault_identity_mfa_login_enforcement.
func (vimle vaultIdentityMfaLoginEnforcementAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vimle.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_identity_mfa_login_enforcement.
func (vimle vaultIdentityMfaLoginEnforcementAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vimle.ref.Append("namespace"))
}

// NamespaceId returns a reference to field namespace_id of vault_identity_mfa_login_enforcement.
func (vimle vaultIdentityMfaLoginEnforcementAttributes) NamespaceId() terra.StringValue {
	return terra.ReferenceAsString(vimle.ref.Append("namespace_id"))
}

// NamespacePath returns a reference to field namespace_path of vault_identity_mfa_login_enforcement.
func (vimle vaultIdentityMfaLoginEnforcementAttributes) NamespacePath() terra.StringValue {
	return terra.ReferenceAsString(vimle.ref.Append("namespace_path"))
}

// Uuid returns a reference to field uuid of vault_identity_mfa_login_enforcement.
func (vimle vaultIdentityMfaLoginEnforcementAttributes) Uuid() terra.StringValue {
	return terra.ReferenceAsString(vimle.ref.Append("uuid"))
}

type vaultIdentityMfaLoginEnforcementState struct {
	AuthMethodAccessors []string `json:"auth_method_accessors"`
	AuthMethodTypes     []string `json:"auth_method_types"`
	Id                  string   `json:"id"`
	IdentityEntityIds   []string `json:"identity_entity_ids"`
	IdentityGroupIds    []string `json:"identity_group_ids"`
	MfaMethodIds        []string `json:"mfa_method_ids"`
	Name                string   `json:"name"`
	Namespace           string   `json:"namespace"`
	NamespaceId         string   `json:"namespace_id"`
	NamespacePath       string   `json:"namespace_path"`
	Uuid                string   `json:"uuid"`
}
