// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_kubernetes_auth_backend_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_kubernetes_auth_backend_role.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultKubernetesAuthBackendRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vkabr *Resource) Type() string {
	return "vault_kubernetes_auth_backend_role"
}

// LocalName returns the local name for [Resource].
func (vkabr *Resource) LocalName() string {
	return vkabr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vkabr *Resource) Configuration() interface{} {
	return vkabr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vkabr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vkabr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vkabr *Resource) Dependencies() terra.Dependencies {
	return vkabr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vkabr *Resource) LifecycleManagement() *terra.Lifecycle {
	return vkabr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vkabr *Resource) Attributes() vaultKubernetesAuthBackendRoleAttributes {
	return vaultKubernetesAuthBackendRoleAttributes{ref: terra.ReferenceResource(vkabr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vkabr *Resource) ImportState(state io.Reader) error {
	vkabr.state = &vaultKubernetesAuthBackendRoleState{}
	if err := json.NewDecoder(state).Decode(vkabr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vkabr.Type(), vkabr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vkabr *Resource) State() (*vaultKubernetesAuthBackendRoleState, bool) {
	return vkabr.state, vkabr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vkabr *Resource) StateMust() *vaultKubernetesAuthBackendRoleState {
	if vkabr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vkabr.Type(), vkabr.LocalName()))
	}
	return vkabr.state
}

// Args contains the configurations for vault_kubernetes_auth_backend_role.
type Args struct {
	// AliasNameSource: string, optional
	AliasNameSource terra.StringValue `hcl:"alias_name_source,attr"`
	// Audience: string, optional
	Audience terra.StringValue `hcl:"audience,attr"`
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// BoundServiceAccountNames: set of string, required
	BoundServiceAccountNames terra.SetValue[terra.StringValue] `hcl:"bound_service_account_names,attr" validate:"required"`
	// BoundServiceAccountNamespaces: set of string, required
	BoundServiceAccountNamespaces terra.SetValue[terra.StringValue] `hcl:"bound_service_account_namespaces,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// RoleName: string, required
	RoleName terra.StringValue `hcl:"role_name,attr" validate:"required"`
	// TokenBoundCidrs: set of string, optional
	TokenBoundCidrs terra.SetValue[terra.StringValue] `hcl:"token_bound_cidrs,attr"`
	// TokenExplicitMaxTtl: number, optional
	TokenExplicitMaxTtl terra.NumberValue `hcl:"token_explicit_max_ttl,attr"`
	// TokenMaxTtl: number, optional
	TokenMaxTtl terra.NumberValue `hcl:"token_max_ttl,attr"`
	// TokenNoDefaultPolicy: bool, optional
	TokenNoDefaultPolicy terra.BoolValue `hcl:"token_no_default_policy,attr"`
	// TokenNumUses: number, optional
	TokenNumUses terra.NumberValue `hcl:"token_num_uses,attr"`
	// TokenPeriod: number, optional
	TokenPeriod terra.NumberValue `hcl:"token_period,attr"`
	// TokenPolicies: set of string, optional
	TokenPolicies terra.SetValue[terra.StringValue] `hcl:"token_policies,attr"`
	// TokenTtl: number, optional
	TokenTtl terra.NumberValue `hcl:"token_ttl,attr"`
	// TokenType: string, optional
	TokenType terra.StringValue `hcl:"token_type,attr"`
}

type vaultKubernetesAuthBackendRoleAttributes struct {
	ref terra.Reference
}

// AliasNameSource returns a reference to field alias_name_source of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) AliasNameSource() terra.StringValue {
	return terra.ReferenceAsString(vkabr.ref.Append("alias_name_source"))
}

// Audience returns a reference to field audience of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) Audience() terra.StringValue {
	return terra.ReferenceAsString(vkabr.ref.Append("audience"))
}

// Backend returns a reference to field backend of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vkabr.ref.Append("backend"))
}

// BoundServiceAccountNames returns a reference to field bound_service_account_names of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) BoundServiceAccountNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vkabr.ref.Append("bound_service_account_names"))
}

// BoundServiceAccountNamespaces returns a reference to field bound_service_account_namespaces of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) BoundServiceAccountNamespaces() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vkabr.ref.Append("bound_service_account_namespaces"))
}

// Id returns a reference to field id of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vkabr.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vkabr.ref.Append("namespace"))
}

// RoleName returns a reference to field role_name of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) RoleName() terra.StringValue {
	return terra.ReferenceAsString(vkabr.ref.Append("role_name"))
}

// TokenBoundCidrs returns a reference to field token_bound_cidrs of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) TokenBoundCidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vkabr.ref.Append("token_bound_cidrs"))
}

// TokenExplicitMaxTtl returns a reference to field token_explicit_max_ttl of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) TokenExplicitMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vkabr.ref.Append("token_explicit_max_ttl"))
}

// TokenMaxTtl returns a reference to field token_max_ttl of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) TokenMaxTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vkabr.ref.Append("token_max_ttl"))
}

// TokenNoDefaultPolicy returns a reference to field token_no_default_policy of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) TokenNoDefaultPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(vkabr.ref.Append("token_no_default_policy"))
}

// TokenNumUses returns a reference to field token_num_uses of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) TokenNumUses() terra.NumberValue {
	return terra.ReferenceAsNumber(vkabr.ref.Append("token_num_uses"))
}

// TokenPeriod returns a reference to field token_period of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) TokenPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(vkabr.ref.Append("token_period"))
}

// TokenPolicies returns a reference to field token_policies of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) TokenPolicies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vkabr.ref.Append("token_policies"))
}

// TokenTtl returns a reference to field token_ttl of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) TokenTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vkabr.ref.Append("token_ttl"))
}

// TokenType returns a reference to field token_type of vault_kubernetes_auth_backend_role.
func (vkabr vaultKubernetesAuthBackendRoleAttributes) TokenType() terra.StringValue {
	return terra.ReferenceAsString(vkabr.ref.Append("token_type"))
}

type vaultKubernetesAuthBackendRoleState struct {
	AliasNameSource               string   `json:"alias_name_source"`
	Audience                      string   `json:"audience"`
	Backend                       string   `json:"backend"`
	BoundServiceAccountNames      []string `json:"bound_service_account_names"`
	BoundServiceAccountNamespaces []string `json:"bound_service_account_namespaces"`
	Id                            string   `json:"id"`
	Namespace                     string   `json:"namespace"`
	RoleName                      string   `json:"role_name"`
	TokenBoundCidrs               []string `json:"token_bound_cidrs"`
	TokenExplicitMaxTtl           float64  `json:"token_explicit_max_ttl"`
	TokenMaxTtl                   float64  `json:"token_max_ttl"`
	TokenNoDefaultPolicy          bool     `json:"token_no_default_policy"`
	TokenNumUses                  float64  `json:"token_num_uses"`
	TokenPeriod                   float64  `json:"token_period"`
	TokenPolicies                 []string `json:"token_policies"`
	TokenTtl                      float64  `json:"token_ttl"`
	TokenType                     string   `json:"token_type"`
}
