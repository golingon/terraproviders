// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewPolicy creates a new instance of [Policy].
func NewPolicy(name string, args PolicyArgs) *Policy {
	return &Policy{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Policy)(nil)

// Policy represents the Terraform resource vault_policy.
type Policy struct {
	Name      string
	Args      PolicyArgs
	state     *policyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Policy].
func (p *Policy) Type() string {
	return "vault_policy"
}

// LocalName returns the local name for [Policy].
func (p *Policy) LocalName() string {
	return p.Name
}

// Configuration returns the configuration (args) for [Policy].
func (p *Policy) Configuration() interface{} {
	return p.Args
}

// DependOn is used for other resources to depend on [Policy].
func (p *Policy) DependOn() terra.Reference {
	return terra.ReferenceResource(p)
}

// Dependencies returns the list of resources [Policy] depends_on.
func (p *Policy) Dependencies() terra.Dependencies {
	return p.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Policy].
func (p *Policy) LifecycleManagement() *terra.Lifecycle {
	return p.Lifecycle
}

// Attributes returns the attributes for [Policy].
func (p *Policy) Attributes() policyAttributes {
	return policyAttributes{ref: terra.ReferenceResource(p)}
}

// ImportState imports the given attribute values into [Policy]'s state.
func (p *Policy) ImportState(av io.Reader) error {
	p.state = &policyState{}
	if err := json.NewDecoder(av).Decode(p.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", p.Type(), p.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Policy] has state.
func (p *Policy) State() (*policyState, bool) {
	return p.state, p.state != nil
}

// StateMust returns the state for [Policy]. Panics if the state is nil.
func (p *Policy) StateMust() *policyState {
	if p.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", p.Type(), p.LocalName()))
	}
	return p.state
}

// PolicyArgs contains the configurations for vault_policy.
type PolicyArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Policy: string, required
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
}
type policyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of vault_policy.
func (p policyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("id"))
}

// Name returns a reference to field name of vault_policy.
func (p policyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_policy.
func (p policyAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("namespace"))
}

// Policy returns a reference to field policy of vault_policy.
func (p policyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("policy"))
}

type policyState struct {
	Id        string `json:"id"`
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	Policy    string `json:"policy"`
}
