// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_kmip_secret_backend

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_kmip_secret_backend.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultKmipSecretBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vksb *Resource) Type() string {
	return "vault_kmip_secret_backend"
}

// LocalName returns the local name for [Resource].
func (vksb *Resource) LocalName() string {
	return vksb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vksb *Resource) Configuration() interface{} {
	return vksb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vksb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vksb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vksb *Resource) Dependencies() terra.Dependencies {
	return vksb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vksb *Resource) LifecycleManagement() *terra.Lifecycle {
	return vksb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vksb *Resource) Attributes() vaultKmipSecretBackendAttributes {
	return vaultKmipSecretBackendAttributes{ref: terra.ReferenceResource(vksb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vksb *Resource) ImportState(state io.Reader) error {
	vksb.state = &vaultKmipSecretBackendState{}
	if err := json.NewDecoder(state).Decode(vksb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vksb.Type(), vksb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vksb *Resource) State() (*vaultKmipSecretBackendState, bool) {
	return vksb.state, vksb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vksb *Resource) StateMust() *vaultKmipSecretBackendState {
	if vksb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vksb.Type(), vksb.LocalName()))
	}
	return vksb.state
}

// Args contains the configurations for vault_kmip_secret_backend.
type Args struct {
	// DefaultTlsClientKeyBits: number, optional
	DefaultTlsClientKeyBits terra.NumberValue `hcl:"default_tls_client_key_bits,attr"`
	// DefaultTlsClientKeyType: string, optional
	DefaultTlsClientKeyType terra.StringValue `hcl:"default_tls_client_key_type,attr"`
	// DefaultTlsClientTtl: number, optional
	DefaultTlsClientTtl terra.NumberValue `hcl:"default_tls_client_ttl,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableRemount: bool, optional
	DisableRemount terra.BoolValue `hcl:"disable_remount,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// ListenAddrs: set of string, optional
	ListenAddrs terra.SetValue[terra.StringValue] `hcl:"listen_addrs,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// ServerHostnames: set of string, optional
	ServerHostnames terra.SetValue[terra.StringValue] `hcl:"server_hostnames,attr"`
	// ServerIps: set of string, optional
	ServerIps terra.SetValue[terra.StringValue] `hcl:"server_ips,attr"`
	// TlsCaKeyBits: number, optional
	TlsCaKeyBits terra.NumberValue `hcl:"tls_ca_key_bits,attr"`
	// TlsCaKeyType: string, optional
	TlsCaKeyType terra.StringValue `hcl:"tls_ca_key_type,attr"`
	// TlsMinVersion: string, optional
	TlsMinVersion terra.StringValue `hcl:"tls_min_version,attr"`
}

type vaultKmipSecretBackendAttributes struct {
	ref terra.Reference
}

// DefaultTlsClientKeyBits returns a reference to field default_tls_client_key_bits of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) DefaultTlsClientKeyBits() terra.NumberValue {
	return terra.ReferenceAsNumber(vksb.ref.Append("default_tls_client_key_bits"))
}

// DefaultTlsClientKeyType returns a reference to field default_tls_client_key_type of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) DefaultTlsClientKeyType() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("default_tls_client_key_type"))
}

// DefaultTlsClientTtl returns a reference to field default_tls_client_ttl of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) DefaultTlsClientTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vksb.ref.Append("default_tls_client_ttl"))
}

// Description returns a reference to field description of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("description"))
}

// DisableRemount returns a reference to field disable_remount of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) DisableRemount() terra.BoolValue {
	return terra.ReferenceAsBool(vksb.ref.Append("disable_remount"))
}

// Id returns a reference to field id of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("id"))
}

// ListenAddrs returns a reference to field listen_addrs of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) ListenAddrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vksb.ref.Append("listen_addrs"))
}

// Namespace returns a reference to field namespace of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("path"))
}

// ServerHostnames returns a reference to field server_hostnames of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) ServerHostnames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vksb.ref.Append("server_hostnames"))
}

// ServerIps returns a reference to field server_ips of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) ServerIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vksb.ref.Append("server_ips"))
}

// TlsCaKeyBits returns a reference to field tls_ca_key_bits of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) TlsCaKeyBits() terra.NumberValue {
	return terra.ReferenceAsNumber(vksb.ref.Append("tls_ca_key_bits"))
}

// TlsCaKeyType returns a reference to field tls_ca_key_type of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) TlsCaKeyType() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("tls_ca_key_type"))
}

// TlsMinVersion returns a reference to field tls_min_version of vault_kmip_secret_backend.
func (vksb vaultKmipSecretBackendAttributes) TlsMinVersion() terra.StringValue {
	return terra.ReferenceAsString(vksb.ref.Append("tls_min_version"))
}

type vaultKmipSecretBackendState struct {
	DefaultTlsClientKeyBits float64  `json:"default_tls_client_key_bits"`
	DefaultTlsClientKeyType string   `json:"default_tls_client_key_type"`
	DefaultTlsClientTtl     float64  `json:"default_tls_client_ttl"`
	Description             string   `json:"description"`
	DisableRemount          bool     `json:"disable_remount"`
	Id                      string   `json:"id"`
	ListenAddrs             []string `json:"listen_addrs"`
	Namespace               string   `json:"namespace"`
	Path                    string   `json:"path"`
	ServerHostnames         []string `json:"server_hostnames"`
	ServerIps               []string `json:"server_ips"`
	TlsCaKeyBits            float64  `json:"tls_ca_key_bits"`
	TlsCaKeyType            string   `json:"tls_ca_key_type"`
	TlsMinVersion           string   `json:"tls_min_version"`
}
