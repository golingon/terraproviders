// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_azure_secret_backend

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_azure_secret_backend.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultAzureSecretBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vasb *Resource) Type() string {
	return "vault_azure_secret_backend"
}

// LocalName returns the local name for [Resource].
func (vasb *Resource) LocalName() string {
	return vasb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vasb *Resource) Configuration() interface{} {
	return vasb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vasb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vasb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vasb *Resource) Dependencies() terra.Dependencies {
	return vasb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vasb *Resource) LifecycleManagement() *terra.Lifecycle {
	return vasb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vasb *Resource) Attributes() vaultAzureSecretBackendAttributes {
	return vaultAzureSecretBackendAttributes{ref: terra.ReferenceResource(vasb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vasb *Resource) ImportState(state io.Reader) error {
	vasb.state = &vaultAzureSecretBackendState{}
	if err := json.NewDecoder(state).Decode(vasb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vasb.Type(), vasb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vasb *Resource) State() (*vaultAzureSecretBackendState, bool) {
	return vasb.state, vasb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vasb *Resource) StateMust() *vaultAzureSecretBackendState {
	if vasb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vasb.Type(), vasb.LocalName()))
	}
	return vasb.state
}

// Args contains the configurations for vault_azure_secret_backend.
type Args struct {
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// ClientSecret: string, optional
	ClientSecret terra.StringValue `hcl:"client_secret,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableRemount: bool, optional
	DisableRemount terra.BoolValue `hcl:"disable_remount,attr"`
	// Environment: string, optional
	Environment terra.StringValue `hcl:"environment,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// SubscriptionId: string, required
	SubscriptionId terra.StringValue `hcl:"subscription_id,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
	// UseMicrosoftGraphApi: bool, optional
	UseMicrosoftGraphApi terra.BoolValue `hcl:"use_microsoft_graph_api,attr"`
}

type vaultAzureSecretBackendAttributes struct {
	ref terra.Reference
}

// ClientId returns a reference to field client_id of vault_azure_secret_backend.
func (vasb vaultAzureSecretBackendAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("client_id"))
}

// ClientSecret returns a reference to field client_secret of vault_azure_secret_backend.
func (vasb vaultAzureSecretBackendAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("client_secret"))
}

// Description returns a reference to field description of vault_azure_secret_backend.
func (vasb vaultAzureSecretBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("description"))
}

// DisableRemount returns a reference to field disable_remount of vault_azure_secret_backend.
func (vasb vaultAzureSecretBackendAttributes) DisableRemount() terra.BoolValue {
	return terra.ReferenceAsBool(vasb.ref.Append("disable_remount"))
}

// Environment returns a reference to field environment of vault_azure_secret_backend.
func (vasb vaultAzureSecretBackendAttributes) Environment() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("environment"))
}

// Id returns a reference to field id of vault_azure_secret_backend.
func (vasb vaultAzureSecretBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_azure_secret_backend.
func (vasb vaultAzureSecretBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_azure_secret_backend.
func (vasb vaultAzureSecretBackendAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("path"))
}

// SubscriptionId returns a reference to field subscription_id of vault_azure_secret_backend.
func (vasb vaultAzureSecretBackendAttributes) SubscriptionId() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("subscription_id"))
}

// TenantId returns a reference to field tenant_id of vault_azure_secret_backend.
func (vasb vaultAzureSecretBackendAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("tenant_id"))
}

// UseMicrosoftGraphApi returns a reference to field use_microsoft_graph_api of vault_azure_secret_backend.
func (vasb vaultAzureSecretBackendAttributes) UseMicrosoftGraphApi() terra.BoolValue {
	return terra.ReferenceAsBool(vasb.ref.Append("use_microsoft_graph_api"))
}

type vaultAzureSecretBackendState struct {
	ClientId             string `json:"client_id"`
	ClientSecret         string `json:"client_secret"`
	Description          string `json:"description"`
	DisableRemount       bool   `json:"disable_remount"`
	Environment          string `json:"environment"`
	Id                   string `json:"id"`
	Namespace            string `json:"namespace"`
	Path                 string `json:"path"`
	SubscriptionId       string `json:"subscription_id"`
	TenantId             string `json:"tenant_id"`
	UseMicrosoftGraphApi bool   `json:"use_microsoft_graph_api"`
}
