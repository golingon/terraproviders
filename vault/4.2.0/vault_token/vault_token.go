// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_token

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_token.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultTokenState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vt *Resource) Type() string {
	return "vault_token"
}

// LocalName returns the local name for [Resource].
func (vt *Resource) LocalName() string {
	return vt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vt *Resource) Configuration() interface{} {
	return vt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vt *Resource) Dependencies() terra.Dependencies {
	return vt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vt *Resource) LifecycleManagement() *terra.Lifecycle {
	return vt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vt *Resource) Attributes() vaultTokenAttributes {
	return vaultTokenAttributes{ref: terra.ReferenceResource(vt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vt *Resource) ImportState(state io.Reader) error {
	vt.state = &vaultTokenState{}
	if err := json.NewDecoder(state).Decode(vt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vt.Type(), vt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vt *Resource) State() (*vaultTokenState, bool) {
	return vt.state, vt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vt *Resource) StateMust() *vaultTokenState {
	if vt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vt.Type(), vt.LocalName()))
	}
	return vt.state
}

// Args contains the configurations for vault_token.
type Args struct {
	// DisplayName: string, optional
	DisplayName terra.StringValue `hcl:"display_name,attr"`
	// ExplicitMaxTtl: string, optional
	ExplicitMaxTtl terra.StringValue `hcl:"explicit_max_ttl,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Metadata: map of string, optional
	Metadata terra.MapValue[terra.StringValue] `hcl:"metadata,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// NoDefaultPolicy: bool, optional
	NoDefaultPolicy terra.BoolValue `hcl:"no_default_policy,attr"`
	// NoParent: bool, optional
	NoParent terra.BoolValue `hcl:"no_parent,attr"`
	// NumUses: number, optional
	NumUses terra.NumberValue `hcl:"num_uses,attr"`
	// Period: string, optional
	Period terra.StringValue `hcl:"period,attr"`
	// Policies: set of string, optional
	Policies terra.SetValue[terra.StringValue] `hcl:"policies,attr"`
	// RenewIncrement: number, optional
	RenewIncrement terra.NumberValue `hcl:"renew_increment,attr"`
	// RenewMinLease: number, optional
	RenewMinLease terra.NumberValue `hcl:"renew_min_lease,attr"`
	// Renewable: bool, optional
	Renewable terra.BoolValue `hcl:"renewable,attr"`
	// RoleName: string, optional
	RoleName terra.StringValue `hcl:"role_name,attr"`
	// Ttl: string, optional
	Ttl terra.StringValue `hcl:"ttl,attr"`
	// WrappingTtl: string, optional
	WrappingTtl terra.StringValue `hcl:"wrapping_ttl,attr"`
}

type vaultTokenAttributes struct {
	ref terra.Reference
}

// ClientToken returns a reference to field client_token of vault_token.
func (vt vaultTokenAttributes) ClientToken() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("client_token"))
}

// DisplayName returns a reference to field display_name of vault_token.
func (vt vaultTokenAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("display_name"))
}

// ExplicitMaxTtl returns a reference to field explicit_max_ttl of vault_token.
func (vt vaultTokenAttributes) ExplicitMaxTtl() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("explicit_max_ttl"))
}

// Id returns a reference to field id of vault_token.
func (vt vaultTokenAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("id"))
}

// LeaseDuration returns a reference to field lease_duration of vault_token.
func (vt vaultTokenAttributes) LeaseDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(vt.ref.Append("lease_duration"))
}

// LeaseStarted returns a reference to field lease_started of vault_token.
func (vt vaultTokenAttributes) LeaseStarted() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("lease_started"))
}

// Metadata returns a reference to field metadata of vault_token.
func (vt vaultTokenAttributes) Metadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vt.ref.Append("metadata"))
}

// Namespace returns a reference to field namespace of vault_token.
func (vt vaultTokenAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("namespace"))
}

// NoDefaultPolicy returns a reference to field no_default_policy of vault_token.
func (vt vaultTokenAttributes) NoDefaultPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(vt.ref.Append("no_default_policy"))
}

// NoParent returns a reference to field no_parent of vault_token.
func (vt vaultTokenAttributes) NoParent() terra.BoolValue {
	return terra.ReferenceAsBool(vt.ref.Append("no_parent"))
}

// NumUses returns a reference to field num_uses of vault_token.
func (vt vaultTokenAttributes) NumUses() terra.NumberValue {
	return terra.ReferenceAsNumber(vt.ref.Append("num_uses"))
}

// Period returns a reference to field period of vault_token.
func (vt vaultTokenAttributes) Period() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("period"))
}

// Policies returns a reference to field policies of vault_token.
func (vt vaultTokenAttributes) Policies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vt.ref.Append("policies"))
}

// RenewIncrement returns a reference to field renew_increment of vault_token.
func (vt vaultTokenAttributes) RenewIncrement() terra.NumberValue {
	return terra.ReferenceAsNumber(vt.ref.Append("renew_increment"))
}

// RenewMinLease returns a reference to field renew_min_lease of vault_token.
func (vt vaultTokenAttributes) RenewMinLease() terra.NumberValue {
	return terra.ReferenceAsNumber(vt.ref.Append("renew_min_lease"))
}

// Renewable returns a reference to field renewable of vault_token.
func (vt vaultTokenAttributes) Renewable() terra.BoolValue {
	return terra.ReferenceAsBool(vt.ref.Append("renewable"))
}

// RoleName returns a reference to field role_name of vault_token.
func (vt vaultTokenAttributes) RoleName() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("role_name"))
}

// Ttl returns a reference to field ttl of vault_token.
func (vt vaultTokenAttributes) Ttl() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("ttl"))
}

// WrappedToken returns a reference to field wrapped_token of vault_token.
func (vt vaultTokenAttributes) WrappedToken() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("wrapped_token"))
}

// WrappingAccessor returns a reference to field wrapping_accessor of vault_token.
func (vt vaultTokenAttributes) WrappingAccessor() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("wrapping_accessor"))
}

// WrappingTtl returns a reference to field wrapping_ttl of vault_token.
func (vt vaultTokenAttributes) WrappingTtl() terra.StringValue {
	return terra.ReferenceAsString(vt.ref.Append("wrapping_ttl"))
}

type vaultTokenState struct {
	ClientToken      string            `json:"client_token"`
	DisplayName      string            `json:"display_name"`
	ExplicitMaxTtl   string            `json:"explicit_max_ttl"`
	Id               string            `json:"id"`
	LeaseDuration    float64           `json:"lease_duration"`
	LeaseStarted     string            `json:"lease_started"`
	Metadata         map[string]string `json:"metadata"`
	Namespace        string            `json:"namespace"`
	NoDefaultPolicy  bool              `json:"no_default_policy"`
	NoParent         bool              `json:"no_parent"`
	NumUses          float64           `json:"num_uses"`
	Period           string            `json:"period"`
	Policies         []string          `json:"policies"`
	RenewIncrement   float64           `json:"renew_increment"`
	RenewMinLease    float64           `json:"renew_min_lease"`
	Renewable        bool              `json:"renewable"`
	RoleName         string            `json:"role_name"`
	Ttl              string            `json:"ttl"`
	WrappedToken     string            `json:"wrapped_token"`
	WrappingAccessor string            `json:"wrapping_accessor"`
	WrappingTtl      string            `json:"wrapping_ttl"`
}
