// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_raft_autopilot

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_raft_autopilot.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultRaftAutopilotState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vra *Resource) Type() string {
	return "vault_raft_autopilot"
}

// LocalName returns the local name for [Resource].
func (vra *Resource) LocalName() string {
	return vra.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vra *Resource) Configuration() interface{} {
	return vra.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vra *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vra)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vra *Resource) Dependencies() terra.Dependencies {
	return vra.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vra *Resource) LifecycleManagement() *terra.Lifecycle {
	return vra.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vra *Resource) Attributes() vaultRaftAutopilotAttributes {
	return vaultRaftAutopilotAttributes{ref: terra.ReferenceResource(vra)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vra *Resource) ImportState(state io.Reader) error {
	vra.state = &vaultRaftAutopilotState{}
	if err := json.NewDecoder(state).Decode(vra.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vra.Type(), vra.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vra *Resource) State() (*vaultRaftAutopilotState, bool) {
	return vra.state, vra.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vra *Resource) StateMust() *vaultRaftAutopilotState {
	if vra.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vra.Type(), vra.LocalName()))
	}
	return vra.state
}

// Args contains the configurations for vault_raft_autopilot.
type Args struct {
	// CleanupDeadServers: bool, optional
	CleanupDeadServers terra.BoolValue `hcl:"cleanup_dead_servers,attr"`
	// DeadServerLastContactThreshold: string, optional
	DeadServerLastContactThreshold terra.StringValue `hcl:"dead_server_last_contact_threshold,attr"`
	// DisableUpgradeMigration: bool, optional
	DisableUpgradeMigration terra.BoolValue `hcl:"disable_upgrade_migration,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// LastContactThreshold: string, optional
	LastContactThreshold terra.StringValue `hcl:"last_contact_threshold,attr"`
	// MaxTrailingLogs: number, optional
	MaxTrailingLogs terra.NumberValue `hcl:"max_trailing_logs,attr"`
	// MinQuorum: number, optional
	MinQuorum terra.NumberValue `hcl:"min_quorum,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// ServerStabilizationTime: string, optional
	ServerStabilizationTime terra.StringValue `hcl:"server_stabilization_time,attr"`
}

type vaultRaftAutopilotAttributes struct {
	ref terra.Reference
}

// CleanupDeadServers returns a reference to field cleanup_dead_servers of vault_raft_autopilot.
func (vra vaultRaftAutopilotAttributes) CleanupDeadServers() terra.BoolValue {
	return terra.ReferenceAsBool(vra.ref.Append("cleanup_dead_servers"))
}

// DeadServerLastContactThreshold returns a reference to field dead_server_last_contact_threshold of vault_raft_autopilot.
func (vra vaultRaftAutopilotAttributes) DeadServerLastContactThreshold() terra.StringValue {
	return terra.ReferenceAsString(vra.ref.Append("dead_server_last_contact_threshold"))
}

// DisableUpgradeMigration returns a reference to field disable_upgrade_migration of vault_raft_autopilot.
func (vra vaultRaftAutopilotAttributes) DisableUpgradeMigration() terra.BoolValue {
	return terra.ReferenceAsBool(vra.ref.Append("disable_upgrade_migration"))
}

// Id returns a reference to field id of vault_raft_autopilot.
func (vra vaultRaftAutopilotAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vra.ref.Append("id"))
}

// LastContactThreshold returns a reference to field last_contact_threshold of vault_raft_autopilot.
func (vra vaultRaftAutopilotAttributes) LastContactThreshold() terra.StringValue {
	return terra.ReferenceAsString(vra.ref.Append("last_contact_threshold"))
}

// MaxTrailingLogs returns a reference to field max_trailing_logs of vault_raft_autopilot.
func (vra vaultRaftAutopilotAttributes) MaxTrailingLogs() terra.NumberValue {
	return terra.ReferenceAsNumber(vra.ref.Append("max_trailing_logs"))
}

// MinQuorum returns a reference to field min_quorum of vault_raft_autopilot.
func (vra vaultRaftAutopilotAttributes) MinQuorum() terra.NumberValue {
	return terra.ReferenceAsNumber(vra.ref.Append("min_quorum"))
}

// Namespace returns a reference to field namespace of vault_raft_autopilot.
func (vra vaultRaftAutopilotAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vra.ref.Append("namespace"))
}

// ServerStabilizationTime returns a reference to field server_stabilization_time of vault_raft_autopilot.
func (vra vaultRaftAutopilotAttributes) ServerStabilizationTime() terra.StringValue {
	return terra.ReferenceAsString(vra.ref.Append("server_stabilization_time"))
}

type vaultRaftAutopilotState struct {
	CleanupDeadServers             bool    `json:"cleanup_dead_servers"`
	DeadServerLastContactThreshold string  `json:"dead_server_last_contact_threshold"`
	DisableUpgradeMigration        bool    `json:"disable_upgrade_migration"`
	Id                             string  `json:"id"`
	LastContactThreshold           string  `json:"last_contact_threshold"`
	MaxTrailingLogs                float64 `json:"max_trailing_logs"`
	MinQuorum                      float64 `json:"min_quorum"`
	Namespace                      string  `json:"namespace"`
	ServerStabilizationTime        string  `json:"server_stabilization_time"`
}
