// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_aws_secret_backend

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_aws_secret_backend.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultAwsSecretBackendState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vasb *Resource) Type() string {
	return "vault_aws_secret_backend"
}

// LocalName returns the local name for [Resource].
func (vasb *Resource) LocalName() string {
	return vasb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vasb *Resource) Configuration() interface{} {
	return vasb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vasb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vasb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vasb *Resource) Dependencies() terra.Dependencies {
	return vasb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vasb *Resource) LifecycleManagement() *terra.Lifecycle {
	return vasb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vasb *Resource) Attributes() vaultAwsSecretBackendAttributes {
	return vaultAwsSecretBackendAttributes{ref: terra.ReferenceResource(vasb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vasb *Resource) ImportState(state io.Reader) error {
	vasb.state = &vaultAwsSecretBackendState{}
	if err := json.NewDecoder(state).Decode(vasb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vasb.Type(), vasb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vasb *Resource) State() (*vaultAwsSecretBackendState, bool) {
	return vasb.state, vasb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vasb *Resource) StateMust() *vaultAwsSecretBackendState {
	if vasb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vasb.Type(), vasb.LocalName()))
	}
	return vasb.state
}

// Args contains the configurations for vault_aws_secret_backend.
type Args struct {
	// AccessKey: string, optional
	AccessKey terra.StringValue `hcl:"access_key,attr"`
	// DefaultLeaseTtlSeconds: number, optional
	DefaultLeaseTtlSeconds terra.NumberValue `hcl:"default_lease_ttl_seconds,attr"`
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// DisableRemount: bool, optional
	DisableRemount terra.BoolValue `hcl:"disable_remount,attr"`
	// IamEndpoint: string, optional
	IamEndpoint terra.StringValue `hcl:"iam_endpoint,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityTokenAudience: string, optional
	IdentityTokenAudience terra.StringValue `hcl:"identity_token_audience,attr"`
	// IdentityTokenKey: string, optional
	IdentityTokenKey terra.StringValue `hcl:"identity_token_key,attr"`
	// IdentityTokenTtl: number, optional
	IdentityTokenTtl terra.NumberValue `hcl:"identity_token_ttl,attr"`
	// Local: bool, optional
	Local terra.BoolValue `hcl:"local,attr"`
	// MaxLeaseTtlSeconds: number, optional
	MaxLeaseTtlSeconds terra.NumberValue `hcl:"max_lease_ttl_seconds,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// SecretKey: string, optional
	SecretKey terra.StringValue `hcl:"secret_key,attr"`
	// StsEndpoint: string, optional
	StsEndpoint terra.StringValue `hcl:"sts_endpoint,attr"`
	// UsernameTemplate: string, optional
	UsernameTemplate terra.StringValue `hcl:"username_template,attr"`
}

type vaultAwsSecretBackendAttributes struct {
	ref terra.Reference
}

// AccessKey returns a reference to field access_key of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) AccessKey() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("access_key"))
}

// DefaultLeaseTtlSeconds returns a reference to field default_lease_ttl_seconds of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) DefaultLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(vasb.ref.Append("default_lease_ttl_seconds"))
}

// Description returns a reference to field description of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("description"))
}

// DisableRemount returns a reference to field disable_remount of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) DisableRemount() terra.BoolValue {
	return terra.ReferenceAsBool(vasb.ref.Append("disable_remount"))
}

// IamEndpoint returns a reference to field iam_endpoint of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) IamEndpoint() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("iam_endpoint"))
}

// Id returns a reference to field id of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("id"))
}

// IdentityTokenAudience returns a reference to field identity_token_audience of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) IdentityTokenAudience() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("identity_token_audience"))
}

// IdentityTokenKey returns a reference to field identity_token_key of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) IdentityTokenKey() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("identity_token_key"))
}

// IdentityTokenTtl returns a reference to field identity_token_ttl of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) IdentityTokenTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(vasb.ref.Append("identity_token_ttl"))
}

// Local returns a reference to field local of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) Local() terra.BoolValue {
	return terra.ReferenceAsBool(vasb.ref.Append("local"))
}

// MaxLeaseTtlSeconds returns a reference to field max_lease_ttl_seconds of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) MaxLeaseTtlSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(vasb.ref.Append("max_lease_ttl_seconds"))
}

// Namespace returns a reference to field namespace of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("path"))
}

// Region returns a reference to field region of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("region"))
}

// RoleArn returns a reference to field role_arn of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("role_arn"))
}

// SecretKey returns a reference to field secret_key of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) SecretKey() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("secret_key"))
}

// StsEndpoint returns a reference to field sts_endpoint of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) StsEndpoint() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("sts_endpoint"))
}

// UsernameTemplate returns a reference to field username_template of vault_aws_secret_backend.
func (vasb vaultAwsSecretBackendAttributes) UsernameTemplate() terra.StringValue {
	return terra.ReferenceAsString(vasb.ref.Append("username_template"))
}

type vaultAwsSecretBackendState struct {
	AccessKey              string  `json:"access_key"`
	DefaultLeaseTtlSeconds float64 `json:"default_lease_ttl_seconds"`
	Description            string  `json:"description"`
	DisableRemount         bool    `json:"disable_remount"`
	IamEndpoint            string  `json:"iam_endpoint"`
	Id                     string  `json:"id"`
	IdentityTokenAudience  string  `json:"identity_token_audience"`
	IdentityTokenKey       string  `json:"identity_token_key"`
	IdentityTokenTtl       float64 `json:"identity_token_ttl"`
	Local                  bool    `json:"local"`
	MaxLeaseTtlSeconds     float64 `json:"max_lease_ttl_seconds"`
	Namespace              string  `json:"namespace"`
	Path                   string  `json:"path"`
	Region                 string  `json:"region"`
	RoleArn                string  `json:"role_arn"`
	SecretKey              string  `json:"secret_key"`
	StsEndpoint            string  `json:"sts_endpoint"`
	UsernameTemplate       string  `json:"username_template"`
}
