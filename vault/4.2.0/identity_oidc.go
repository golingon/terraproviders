// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewIdentityOidc creates a new instance of [IdentityOidc].
func NewIdentityOidc(name string, args IdentityOidcArgs) *IdentityOidc {
	return &IdentityOidc{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*IdentityOidc)(nil)

// IdentityOidc represents the Terraform resource vault_identity_oidc.
type IdentityOidc struct {
	Name      string
	Args      IdentityOidcArgs
	state     *identityOidcState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [IdentityOidc].
func (io *IdentityOidc) Type() string {
	return "vault_identity_oidc"
}

// LocalName returns the local name for [IdentityOidc].
func (io *IdentityOidc) LocalName() string {
	return io.Name
}

// Configuration returns the configuration (args) for [IdentityOidc].
func (io *IdentityOidc) Configuration() interface{} {
	return io.Args
}

// DependOn is used for other resources to depend on [IdentityOidc].
func (io *IdentityOidc) DependOn() terra.Reference {
	return terra.ReferenceResource(io)
}

// Dependencies returns the list of resources [IdentityOidc] depends_on.
func (io *IdentityOidc) Dependencies() terra.Dependencies {
	return io.DependsOn
}

// LifecycleManagement returns the lifecycle block for [IdentityOidc].
func (io *IdentityOidc) LifecycleManagement() *terra.Lifecycle {
	return io.Lifecycle
}

// Attributes returns the attributes for [IdentityOidc].
func (io *IdentityOidc) Attributes() identityOidcAttributes {
	return identityOidcAttributes{ref: terra.ReferenceResource(io)}
}

// ImportState imports the given attribute values into [IdentityOidc]'s state.
func (io *IdentityOidc) ImportState(av io.Reader) error {
	io.state = &identityOidcState{}
	if err := json.NewDecoder(av).Decode(io.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", io.Type(), io.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [IdentityOidc] has state.
func (io *IdentityOidc) State() (*identityOidcState, bool) {
	return io.state, io.state != nil
}

// StateMust returns the state for [IdentityOidc]. Panics if the state is nil.
func (io *IdentityOidc) StateMust() *identityOidcState {
	if io.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", io.Type(), io.LocalName()))
	}
	return io.state
}

// IdentityOidcArgs contains the configurations for vault_identity_oidc.
type IdentityOidcArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Issuer: string, optional
	Issuer terra.StringValue `hcl:"issuer,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}
type identityOidcAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of vault_identity_oidc.
func (io identityOidcAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(io.ref.Append("id"))
}

// Issuer returns a reference to field issuer of vault_identity_oidc.
func (io identityOidcAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(io.ref.Append("issuer"))
}

// Namespace returns a reference to field namespace of vault_identity_oidc.
func (io identityOidcAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(io.ref.Append("namespace"))
}

type identityOidcState struct {
	Id        string `json:"id"`
	Issuer    string `json:"issuer"`
	Namespace string `json:"namespace"`
}
