// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_mfa_okta

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_mfa_okta.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultMfaOktaState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vmo *Resource) Type() string {
	return "vault_mfa_okta"
}

// LocalName returns the local name for [Resource].
func (vmo *Resource) LocalName() string {
	return vmo.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vmo *Resource) Configuration() interface{} {
	return vmo.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vmo *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vmo)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vmo *Resource) Dependencies() terra.Dependencies {
	return vmo.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vmo *Resource) LifecycleManagement() *terra.Lifecycle {
	return vmo.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vmo *Resource) Attributes() vaultMfaOktaAttributes {
	return vaultMfaOktaAttributes{ref: terra.ReferenceResource(vmo)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vmo *Resource) ImportState(state io.Reader) error {
	vmo.state = &vaultMfaOktaState{}
	if err := json.NewDecoder(state).Decode(vmo.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vmo.Type(), vmo.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vmo *Resource) State() (*vaultMfaOktaState, bool) {
	return vmo.state, vmo.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vmo *Resource) StateMust() *vaultMfaOktaState {
	if vmo.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vmo.Type(), vmo.LocalName()))
	}
	return vmo.state
}

// Args contains the configurations for vault_mfa_okta.
type Args struct {
	// ApiToken: string, required
	ApiToken terra.StringValue `hcl:"api_token,attr" validate:"required"`
	// BaseUrl: string, optional
	BaseUrl terra.StringValue `hcl:"base_url,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MountAccessor: string, required
	MountAccessor terra.StringValue `hcl:"mount_accessor,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// OrgName: string, required
	OrgName terra.StringValue `hcl:"org_name,attr" validate:"required"`
	// PrimaryEmail: bool, optional
	PrimaryEmail terra.BoolValue `hcl:"primary_email,attr"`
	// UsernameFormat: string, optional
	UsernameFormat terra.StringValue `hcl:"username_format,attr"`
}

type vaultMfaOktaAttributes struct {
	ref terra.Reference
}

// ApiToken returns a reference to field api_token of vault_mfa_okta.
func (vmo vaultMfaOktaAttributes) ApiToken() terra.StringValue {
	return terra.ReferenceAsString(vmo.ref.Append("api_token"))
}

// BaseUrl returns a reference to field base_url of vault_mfa_okta.
func (vmo vaultMfaOktaAttributes) BaseUrl() terra.StringValue {
	return terra.ReferenceAsString(vmo.ref.Append("base_url"))
}

// Id returns a reference to field id of vault_mfa_okta.
func (vmo vaultMfaOktaAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vmo.ref.Append("id"))
}

// MountAccessor returns a reference to field mount_accessor of vault_mfa_okta.
func (vmo vaultMfaOktaAttributes) MountAccessor() terra.StringValue {
	return terra.ReferenceAsString(vmo.ref.Append("mount_accessor"))
}

// Name returns a reference to field name of vault_mfa_okta.
func (vmo vaultMfaOktaAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vmo.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_mfa_okta.
func (vmo vaultMfaOktaAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vmo.ref.Append("namespace"))
}

// OrgName returns a reference to field org_name of vault_mfa_okta.
func (vmo vaultMfaOktaAttributes) OrgName() terra.StringValue {
	return terra.ReferenceAsString(vmo.ref.Append("org_name"))
}

// PrimaryEmail returns a reference to field primary_email of vault_mfa_okta.
func (vmo vaultMfaOktaAttributes) PrimaryEmail() terra.BoolValue {
	return terra.ReferenceAsBool(vmo.ref.Append("primary_email"))
}

// UsernameFormat returns a reference to field username_format of vault_mfa_okta.
func (vmo vaultMfaOktaAttributes) UsernameFormat() terra.StringValue {
	return terra.ReferenceAsString(vmo.ref.Append("username_format"))
}

type vaultMfaOktaState struct {
	ApiToken       string `json:"api_token"`
	BaseUrl        string `json:"base_url"`
	Id             string `json:"id"`
	MountAccessor  string `json:"mount_accessor"`
	Name           string `json:"name"`
	Namespace      string `json:"namespace"`
	OrgName        string `json:"org_name"`
	PrimaryEmail   bool   `json:"primary_email"`
	UsernameFormat string `json:"username_format"`
}
