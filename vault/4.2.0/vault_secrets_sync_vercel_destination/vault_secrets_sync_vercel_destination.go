// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_secrets_sync_vercel_destination

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_secrets_sync_vercel_destination.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultSecretsSyncVercelDestinationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vssvd *Resource) Type() string {
	return "vault_secrets_sync_vercel_destination"
}

// LocalName returns the local name for [Resource].
func (vssvd *Resource) LocalName() string {
	return vssvd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vssvd *Resource) Configuration() interface{} {
	return vssvd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vssvd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vssvd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vssvd *Resource) Dependencies() terra.Dependencies {
	return vssvd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vssvd *Resource) LifecycleManagement() *terra.Lifecycle {
	return vssvd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vssvd *Resource) Attributes() vaultSecretsSyncVercelDestinationAttributes {
	return vaultSecretsSyncVercelDestinationAttributes{ref: terra.ReferenceResource(vssvd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vssvd *Resource) ImportState(state io.Reader) error {
	vssvd.state = &vaultSecretsSyncVercelDestinationState{}
	if err := json.NewDecoder(state).Decode(vssvd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vssvd.Type(), vssvd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vssvd *Resource) State() (*vaultSecretsSyncVercelDestinationState, bool) {
	return vssvd.state, vssvd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vssvd *Resource) StateMust() *vaultSecretsSyncVercelDestinationState {
	if vssvd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vssvd.Type(), vssvd.LocalName()))
	}
	return vssvd.state
}

// Args contains the configurations for vault_secrets_sync_vercel_destination.
type Args struct {
	// AccessToken: string, required
	AccessToken terra.StringValue `hcl:"access_token,attr" validate:"required"`
	// DeploymentEnvironments: list of string, required
	DeploymentEnvironments terra.ListValue[terra.StringValue] `hcl:"deployment_environments,attr" validate:"required"`
	// Granularity: string, optional
	Granularity terra.StringValue `hcl:"granularity,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// ProjectId: string, required
	ProjectId terra.StringValue `hcl:"project_id,attr" validate:"required"`
	// SecretNameTemplate: string, optional
	SecretNameTemplate terra.StringValue `hcl:"secret_name_template,attr"`
	// TeamId: string, optional
	TeamId terra.StringValue `hcl:"team_id,attr"`
}

type vaultSecretsSyncVercelDestinationAttributes struct {
	ref terra.Reference
}

// AccessToken returns a reference to field access_token of vault_secrets_sync_vercel_destination.
func (vssvd vaultSecretsSyncVercelDestinationAttributes) AccessToken() terra.StringValue {
	return terra.ReferenceAsString(vssvd.ref.Append("access_token"))
}

// DeploymentEnvironments returns a reference to field deployment_environments of vault_secrets_sync_vercel_destination.
func (vssvd vaultSecretsSyncVercelDestinationAttributes) DeploymentEnvironments() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vssvd.ref.Append("deployment_environments"))
}

// Granularity returns a reference to field granularity of vault_secrets_sync_vercel_destination.
func (vssvd vaultSecretsSyncVercelDestinationAttributes) Granularity() terra.StringValue {
	return terra.ReferenceAsString(vssvd.ref.Append("granularity"))
}

// Id returns a reference to field id of vault_secrets_sync_vercel_destination.
func (vssvd vaultSecretsSyncVercelDestinationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vssvd.ref.Append("id"))
}

// Name returns a reference to field name of vault_secrets_sync_vercel_destination.
func (vssvd vaultSecretsSyncVercelDestinationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vssvd.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_secrets_sync_vercel_destination.
func (vssvd vaultSecretsSyncVercelDestinationAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vssvd.ref.Append("namespace"))
}

// ProjectId returns a reference to field project_id of vault_secrets_sync_vercel_destination.
func (vssvd vaultSecretsSyncVercelDestinationAttributes) ProjectId() terra.StringValue {
	return terra.ReferenceAsString(vssvd.ref.Append("project_id"))
}

// SecretNameTemplate returns a reference to field secret_name_template of vault_secrets_sync_vercel_destination.
func (vssvd vaultSecretsSyncVercelDestinationAttributes) SecretNameTemplate() terra.StringValue {
	return terra.ReferenceAsString(vssvd.ref.Append("secret_name_template"))
}

// TeamId returns a reference to field team_id of vault_secrets_sync_vercel_destination.
func (vssvd vaultSecretsSyncVercelDestinationAttributes) TeamId() terra.StringValue {
	return terra.ReferenceAsString(vssvd.ref.Append("team_id"))
}

// Type returns a reference to field type of vault_secrets_sync_vercel_destination.
func (vssvd vaultSecretsSyncVercelDestinationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(vssvd.ref.Append("type"))
}

type vaultSecretsSyncVercelDestinationState struct {
	AccessToken            string   `json:"access_token"`
	DeploymentEnvironments []string `json:"deployment_environments"`
	Granularity            string   `json:"granularity"`
	Id                     string   `json:"id"`
	Name                   string   `json:"name"`
	Namespace              string   `json:"namespace"`
	ProjectId              string   `json:"project_id"`
	SecretNameTemplate     string   `json:"secret_name_template"`
	TeamId                 string   `json:"team_id"`
	Type                   string   `json:"type"`
}
