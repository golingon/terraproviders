// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_okta_auth_backend_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_okta_auth_backend_group.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultOktaAuthBackendGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (voabg *Resource) Type() string {
	return "vault_okta_auth_backend_group"
}

// LocalName returns the local name for [Resource].
func (voabg *Resource) LocalName() string {
	return voabg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (voabg *Resource) Configuration() interface{} {
	return voabg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (voabg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(voabg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (voabg *Resource) Dependencies() terra.Dependencies {
	return voabg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (voabg *Resource) LifecycleManagement() *terra.Lifecycle {
	return voabg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (voabg *Resource) Attributes() vaultOktaAuthBackendGroupAttributes {
	return vaultOktaAuthBackendGroupAttributes{ref: terra.ReferenceResource(voabg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (voabg *Resource) ImportState(state io.Reader) error {
	voabg.state = &vaultOktaAuthBackendGroupState{}
	if err := json.NewDecoder(state).Decode(voabg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", voabg.Type(), voabg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (voabg *Resource) State() (*vaultOktaAuthBackendGroupState, bool) {
	return voabg.state, voabg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (voabg *Resource) StateMust() *vaultOktaAuthBackendGroupState {
	if voabg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", voabg.Type(), voabg.LocalName()))
	}
	return voabg.state
}

// Args contains the configurations for vault_okta_auth_backend_group.
type Args struct {
	// GroupName: string, required
	GroupName terra.StringValue `hcl:"group_name,attr" validate:"required"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Policies: set of string, optional
	Policies terra.SetValue[terra.StringValue] `hcl:"policies,attr"`
}

type vaultOktaAuthBackendGroupAttributes struct {
	ref terra.Reference
}

// GroupName returns a reference to field group_name of vault_okta_auth_backend_group.
func (voabg vaultOktaAuthBackendGroupAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(voabg.ref.Append("group_name"))
}

// Id returns a reference to field id of vault_okta_auth_backend_group.
func (voabg vaultOktaAuthBackendGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(voabg.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_okta_auth_backend_group.
func (voabg vaultOktaAuthBackendGroupAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(voabg.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_okta_auth_backend_group.
func (voabg vaultOktaAuthBackendGroupAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(voabg.ref.Append("path"))
}

// Policies returns a reference to field policies of vault_okta_auth_backend_group.
func (voabg vaultOktaAuthBackendGroupAttributes) Policies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](voabg.ref.Append("policies"))
}

type vaultOktaAuthBackendGroupState struct {
	GroupName string   `json:"group_name"`
	Id        string   `json:"id"`
	Namespace string   `json:"namespace"`
	Path      string   `json:"path"`
	Policies  []string `json:"policies"`
}
