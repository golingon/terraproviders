// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_namespaces

import "github.com/golingon/lingon/pkg/terra"

// Data creates a new instance of [DataSource].
func Data(name string, args DataArgs) *DataSource {
	return &DataSource{
		Args: args,
		Name: name,
	}
}

var _ terra.DataSource = (*DataSource)(nil)

// DataSource represents the Terraform data resource vault_namespaces.
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (vn *DataSource) DataSource() string {
	return "vault_namespaces"
}

// LocalName returns the local name for [DataSource].
func (vn *DataSource) LocalName() string {
	return vn.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (vn *DataSource) Configuration() interface{} {
	return vn.Args
}

// Attributes returns the attributes for [DataSource].
func (vn *DataSource) Attributes() dataVaultNamespacesAttributes {
	return dataVaultNamespacesAttributes{ref: terra.ReferenceDataSource(vn)}
}

// DataArgs contains the configurations for vault_namespaces.
type DataArgs struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}

type dataVaultNamespacesAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of vault_namespaces.
func (vn dataVaultNamespacesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vn.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_namespaces.
func (vn dataVaultNamespacesAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vn.ref.Append("namespace"))
}

// Paths returns a reference to field paths of vault_namespaces.
func (vn dataVaultNamespacesAttributes) Paths() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vn.ref.Append("paths"))
}
