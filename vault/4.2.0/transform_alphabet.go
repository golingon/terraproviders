// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewTransformAlphabet creates a new instance of [TransformAlphabet].
func NewTransformAlphabet(name string, args TransformAlphabetArgs) *TransformAlphabet {
	return &TransformAlphabet{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*TransformAlphabet)(nil)

// TransformAlphabet represents the Terraform resource vault_transform_alphabet.
type TransformAlphabet struct {
	Name      string
	Args      TransformAlphabetArgs
	state     *transformAlphabetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [TransformAlphabet].
func (ta *TransformAlphabet) Type() string {
	return "vault_transform_alphabet"
}

// LocalName returns the local name for [TransformAlphabet].
func (ta *TransformAlphabet) LocalName() string {
	return ta.Name
}

// Configuration returns the configuration (args) for [TransformAlphabet].
func (ta *TransformAlphabet) Configuration() interface{} {
	return ta.Args
}

// DependOn is used for other resources to depend on [TransformAlphabet].
func (ta *TransformAlphabet) DependOn() terra.Reference {
	return terra.ReferenceResource(ta)
}

// Dependencies returns the list of resources [TransformAlphabet] depends_on.
func (ta *TransformAlphabet) Dependencies() terra.Dependencies {
	return ta.DependsOn
}

// LifecycleManagement returns the lifecycle block for [TransformAlphabet].
func (ta *TransformAlphabet) LifecycleManagement() *terra.Lifecycle {
	return ta.Lifecycle
}

// Attributes returns the attributes for [TransformAlphabet].
func (ta *TransformAlphabet) Attributes() transformAlphabetAttributes {
	return transformAlphabetAttributes{ref: terra.ReferenceResource(ta)}
}

// ImportState imports the given attribute values into [TransformAlphabet]'s state.
func (ta *TransformAlphabet) ImportState(av io.Reader) error {
	ta.state = &transformAlphabetState{}
	if err := json.NewDecoder(av).Decode(ta.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ta.Type(), ta.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [TransformAlphabet] has state.
func (ta *TransformAlphabet) State() (*transformAlphabetState, bool) {
	return ta.state, ta.state != nil
}

// StateMust returns the state for [TransformAlphabet]. Panics if the state is nil.
func (ta *TransformAlphabet) StateMust() *transformAlphabetState {
	if ta.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ta.Type(), ta.LocalName()))
	}
	return ta.state
}

// TransformAlphabetArgs contains the configurations for vault_transform_alphabet.
type TransformAlphabetArgs struct {
	// Alphabet: string, optional
	Alphabet terra.StringValue `hcl:"alphabet,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}
type transformAlphabetAttributes struct {
	ref terra.Reference
}

// Alphabet returns a reference to field alphabet of vault_transform_alphabet.
func (ta transformAlphabetAttributes) Alphabet() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("alphabet"))
}

// Id returns a reference to field id of vault_transform_alphabet.
func (ta transformAlphabetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("id"))
}

// Name returns a reference to field name of vault_transform_alphabet.
func (ta transformAlphabetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_transform_alphabet.
func (ta transformAlphabetAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_transform_alphabet.
func (ta transformAlphabetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(ta.ref.Append("path"))
}

type transformAlphabetState struct {
	Alphabet  string `json:"alphabet"`
	Id        string `json:"id"`
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	Path      string `json:"path"`
}
