// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_transform_template

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_transform_template.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultTransformTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vtt *Resource) Type() string {
	return "vault_transform_template"
}

// LocalName returns the local name for [Resource].
func (vtt *Resource) LocalName() string {
	return vtt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vtt *Resource) Configuration() interface{} {
	return vtt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vtt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vtt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vtt *Resource) Dependencies() terra.Dependencies {
	return vtt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vtt *Resource) LifecycleManagement() *terra.Lifecycle {
	return vtt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vtt *Resource) Attributes() vaultTransformTemplateAttributes {
	return vaultTransformTemplateAttributes{ref: terra.ReferenceResource(vtt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vtt *Resource) ImportState(state io.Reader) error {
	vtt.state = &vaultTransformTemplateState{}
	if err := json.NewDecoder(state).Decode(vtt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vtt.Type(), vtt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vtt *Resource) State() (*vaultTransformTemplateState, bool) {
	return vtt.state, vtt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vtt *Resource) StateMust() *vaultTransformTemplateState {
	if vtt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vtt.Type(), vtt.LocalName()))
	}
	return vtt.state
}

// Args contains the configurations for vault_transform_template.
type Args struct {
	// Alphabet: string, optional
	Alphabet terra.StringValue `hcl:"alphabet,attr"`
	// DecodeFormats: map of string, optional
	DecodeFormats terra.MapValue[terra.StringValue] `hcl:"decode_formats,attr"`
	// EncodeFormat: string, optional
	EncodeFormat terra.StringValue `hcl:"encode_format,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Pattern: string, optional
	Pattern terra.StringValue `hcl:"pattern,attr"`
	// Type: string, optional
	Type terra.StringValue `hcl:"type,attr"`
}

type vaultTransformTemplateAttributes struct {
	ref terra.Reference
}

// Alphabet returns a reference to field alphabet of vault_transform_template.
func (vtt vaultTransformTemplateAttributes) Alphabet() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("alphabet"))
}

// DecodeFormats returns a reference to field decode_formats of vault_transform_template.
func (vtt vaultTransformTemplateAttributes) DecodeFormats() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](vtt.ref.Append("decode_formats"))
}

// EncodeFormat returns a reference to field encode_format of vault_transform_template.
func (vtt vaultTransformTemplateAttributes) EncodeFormat() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("encode_format"))
}

// Id returns a reference to field id of vault_transform_template.
func (vtt vaultTransformTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("id"))
}

// Name returns a reference to field name of vault_transform_template.
func (vtt vaultTransformTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_transform_template.
func (vtt vaultTransformTemplateAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_transform_template.
func (vtt vaultTransformTemplateAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("path"))
}

// Pattern returns a reference to field pattern of vault_transform_template.
func (vtt vaultTransformTemplateAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("pattern"))
}

// Type returns a reference to field type of vault_transform_template.
func (vtt vaultTransformTemplateAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(vtt.ref.Append("type"))
}

type vaultTransformTemplateState struct {
	Alphabet      string            `json:"alphabet"`
	DecodeFormats map[string]string `json:"decode_formats"`
	EncodeFormat  string            `json:"encode_format"`
	Id            string            `json:"id"`
	Name          string            `json:"name"`
	Namespace     string            `json:"namespace"`
	Path          string            `json:"path"`
	Pattern       string            `json:"pattern"`
	Type          string            `json:"type"`
}
