// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_identity_entity_policies

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_identity_entity_policies.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultIdentityEntityPoliciesState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (viep *Resource) Type() string {
	return "vault_identity_entity_policies"
}

// LocalName returns the local name for [Resource].
func (viep *Resource) LocalName() string {
	return viep.Name
}

// Configuration returns the configuration (args) for [Resource].
func (viep *Resource) Configuration() interface{} {
	return viep.Args
}

// DependOn is used for other resources to depend on [Resource].
func (viep *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(viep)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (viep *Resource) Dependencies() terra.Dependencies {
	return viep.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (viep *Resource) LifecycleManagement() *terra.Lifecycle {
	return viep.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (viep *Resource) Attributes() vaultIdentityEntityPoliciesAttributes {
	return vaultIdentityEntityPoliciesAttributes{ref: terra.ReferenceResource(viep)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (viep *Resource) ImportState(state io.Reader) error {
	viep.state = &vaultIdentityEntityPoliciesState{}
	if err := json.NewDecoder(state).Decode(viep.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", viep.Type(), viep.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (viep *Resource) State() (*vaultIdentityEntityPoliciesState, bool) {
	return viep.state, viep.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (viep *Resource) StateMust() *vaultIdentityEntityPoliciesState {
	if viep.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", viep.Type(), viep.LocalName()))
	}
	return viep.state
}

// Args contains the configurations for vault_identity_entity_policies.
type Args struct {
	// EntityId: string, required
	EntityId terra.StringValue `hcl:"entity_id,attr" validate:"required"`
	// Exclusive: bool, optional
	Exclusive terra.BoolValue `hcl:"exclusive,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Policies: set of string, required
	Policies terra.SetValue[terra.StringValue] `hcl:"policies,attr" validate:"required"`
}

type vaultIdentityEntityPoliciesAttributes struct {
	ref terra.Reference
}

// EntityId returns a reference to field entity_id of vault_identity_entity_policies.
func (viep vaultIdentityEntityPoliciesAttributes) EntityId() terra.StringValue {
	return terra.ReferenceAsString(viep.ref.Append("entity_id"))
}

// EntityName returns a reference to field entity_name of vault_identity_entity_policies.
func (viep vaultIdentityEntityPoliciesAttributes) EntityName() terra.StringValue {
	return terra.ReferenceAsString(viep.ref.Append("entity_name"))
}

// Exclusive returns a reference to field exclusive of vault_identity_entity_policies.
func (viep vaultIdentityEntityPoliciesAttributes) Exclusive() terra.BoolValue {
	return terra.ReferenceAsBool(viep.ref.Append("exclusive"))
}

// Id returns a reference to field id of vault_identity_entity_policies.
func (viep vaultIdentityEntityPoliciesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(viep.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_identity_entity_policies.
func (viep vaultIdentityEntityPoliciesAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(viep.ref.Append("namespace"))
}

// Policies returns a reference to field policies of vault_identity_entity_policies.
func (viep vaultIdentityEntityPoliciesAttributes) Policies() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](viep.ref.Append("policies"))
}

type vaultIdentityEntityPoliciesState struct {
	EntityId   string   `json:"entity_id"`
	EntityName string   `json:"entity_name"`
	Exclusive  bool     `json:"exclusive"`
	Id         string   `json:"id"`
	Namespace  string   `json:"namespace"`
	Policies   []string `json:"policies"`
}
