// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_azure_auth_backend_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_azure_auth_backend_config.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultAzureAuthBackendConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vaabc *Resource) Type() string {
	return "vault_azure_auth_backend_config"
}

// LocalName returns the local name for [Resource].
func (vaabc *Resource) LocalName() string {
	return vaabc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vaabc *Resource) Configuration() interface{} {
	return vaabc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vaabc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vaabc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vaabc *Resource) Dependencies() terra.Dependencies {
	return vaabc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vaabc *Resource) LifecycleManagement() *terra.Lifecycle {
	return vaabc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vaabc *Resource) Attributes() vaultAzureAuthBackendConfigAttributes {
	return vaultAzureAuthBackendConfigAttributes{ref: terra.ReferenceResource(vaabc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vaabc *Resource) ImportState(state io.Reader) error {
	vaabc.state = &vaultAzureAuthBackendConfigState{}
	if err := json.NewDecoder(state).Decode(vaabc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vaabc.Type(), vaabc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vaabc *Resource) State() (*vaultAzureAuthBackendConfigState, bool) {
	return vaabc.state, vaabc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vaabc *Resource) StateMust() *vaultAzureAuthBackendConfigState {
	if vaabc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vaabc.Type(), vaabc.LocalName()))
	}
	return vaabc.state
}

// Args contains the configurations for vault_azure_auth_backend_config.
type Args struct {
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// ClientId: string, optional
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// ClientSecret: string, optional
	ClientSecret terra.StringValue `hcl:"client_secret,attr"`
	// Environment: string, optional
	Environment terra.StringValue `hcl:"environment,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Resource: string, required
	Resource terra.StringValue `hcl:"resource,attr" validate:"required"`
	// TenantId: string, required
	TenantId terra.StringValue `hcl:"tenant_id,attr" validate:"required"`
}

type vaultAzureAuthBackendConfigAttributes struct {
	ref terra.Reference
}

// Backend returns a reference to field backend of vault_azure_auth_backend_config.
func (vaabc vaultAzureAuthBackendConfigAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("backend"))
}

// ClientId returns a reference to field client_id of vault_azure_auth_backend_config.
func (vaabc vaultAzureAuthBackendConfigAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("client_id"))
}

// ClientSecret returns a reference to field client_secret of vault_azure_auth_backend_config.
func (vaabc vaultAzureAuthBackendConfigAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("client_secret"))
}

// Environment returns a reference to field environment of vault_azure_auth_backend_config.
func (vaabc vaultAzureAuthBackendConfigAttributes) Environment() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("environment"))
}

// Id returns a reference to field id of vault_azure_auth_backend_config.
func (vaabc vaultAzureAuthBackendConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_azure_auth_backend_config.
func (vaabc vaultAzureAuthBackendConfigAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("namespace"))
}

// Resource returns a reference to field resource of vault_azure_auth_backend_config.
func (vaabc vaultAzureAuthBackendConfigAttributes) Resource() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("resource"))
}

// TenantId returns a reference to field tenant_id of vault_azure_auth_backend_config.
func (vaabc vaultAzureAuthBackendConfigAttributes) TenantId() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("tenant_id"))
}

type vaultAzureAuthBackendConfigState struct {
	Backend      string `json:"backend"`
	ClientId     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
	Environment  string `json:"environment"`
	Id           string `json:"id"`
	Namespace    string `json:"namespace"`
	Resource     string `json:"resource"`
	TenantId     string `json:"tenant_id"`
}
