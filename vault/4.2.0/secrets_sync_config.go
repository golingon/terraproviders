// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// NewSecretsSyncConfig creates a new instance of [SecretsSyncConfig].
func NewSecretsSyncConfig(name string, args SecretsSyncConfigArgs) *SecretsSyncConfig {
	return &SecretsSyncConfig{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*SecretsSyncConfig)(nil)

// SecretsSyncConfig represents the Terraform resource vault_secrets_sync_config.
type SecretsSyncConfig struct {
	Name      string
	Args      SecretsSyncConfigArgs
	state     *secretsSyncConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [SecretsSyncConfig].
func (ssc *SecretsSyncConfig) Type() string {
	return "vault_secrets_sync_config"
}

// LocalName returns the local name for [SecretsSyncConfig].
func (ssc *SecretsSyncConfig) LocalName() string {
	return ssc.Name
}

// Configuration returns the configuration (args) for [SecretsSyncConfig].
func (ssc *SecretsSyncConfig) Configuration() interface{} {
	return ssc.Args
}

// DependOn is used for other resources to depend on [SecretsSyncConfig].
func (ssc *SecretsSyncConfig) DependOn() terra.Reference {
	return terra.ReferenceResource(ssc)
}

// Dependencies returns the list of resources [SecretsSyncConfig] depends_on.
func (ssc *SecretsSyncConfig) Dependencies() terra.Dependencies {
	return ssc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [SecretsSyncConfig].
func (ssc *SecretsSyncConfig) LifecycleManagement() *terra.Lifecycle {
	return ssc.Lifecycle
}

// Attributes returns the attributes for [SecretsSyncConfig].
func (ssc *SecretsSyncConfig) Attributes() secretsSyncConfigAttributes {
	return secretsSyncConfigAttributes{ref: terra.ReferenceResource(ssc)}
}

// ImportState imports the given attribute values into [SecretsSyncConfig]'s state.
func (ssc *SecretsSyncConfig) ImportState(av io.Reader) error {
	ssc.state = &secretsSyncConfigState{}
	if err := json.NewDecoder(av).Decode(ssc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ssc.Type(), ssc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [SecretsSyncConfig] has state.
func (ssc *SecretsSyncConfig) State() (*secretsSyncConfigState, bool) {
	return ssc.state, ssc.state != nil
}

// StateMust returns the state for [SecretsSyncConfig]. Panics if the state is nil.
func (ssc *SecretsSyncConfig) StateMust() *secretsSyncConfigState {
	if ssc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ssc.Type(), ssc.LocalName()))
	}
	return ssc.state
}

// SecretsSyncConfigArgs contains the configurations for vault_secrets_sync_config.
type SecretsSyncConfigArgs struct {
	// Disabled: bool, optional
	Disabled terra.BoolValue `hcl:"disabled,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// QueueCapacity: number, optional
	QueueCapacity terra.NumberValue `hcl:"queue_capacity,attr"`
}
type secretsSyncConfigAttributes struct {
	ref terra.Reference
}

// Disabled returns a reference to field disabled of vault_secrets_sync_config.
func (ssc secretsSyncConfigAttributes) Disabled() terra.BoolValue {
	return terra.ReferenceAsBool(ssc.ref.Append("disabled"))
}

// Id returns a reference to field id of vault_secrets_sync_config.
func (ssc secretsSyncConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_secrets_sync_config.
func (ssc secretsSyncConfigAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("namespace"))
}

// QueueCapacity returns a reference to field queue_capacity of vault_secrets_sync_config.
func (ssc secretsSyncConfigAttributes) QueueCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(ssc.ref.Append("queue_capacity"))
}

type secretsSyncConfigState struct {
	Disabled      bool    `json:"disabled"`
	Id            string  `json:"id"`
	Namespace     string  `json:"namespace"`
	QueueCapacity float64 `json:"queue_capacity"`
}
