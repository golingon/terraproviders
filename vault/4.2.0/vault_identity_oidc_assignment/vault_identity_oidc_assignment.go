// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_identity_oidc_assignment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_identity_oidc_assignment.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultIdentityOidcAssignmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vioa *Resource) Type() string {
	return "vault_identity_oidc_assignment"
}

// LocalName returns the local name for [Resource].
func (vioa *Resource) LocalName() string {
	return vioa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vioa *Resource) Configuration() interface{} {
	return vioa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vioa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vioa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vioa *Resource) Dependencies() terra.Dependencies {
	return vioa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vioa *Resource) LifecycleManagement() *terra.Lifecycle {
	return vioa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vioa *Resource) Attributes() vaultIdentityOidcAssignmentAttributes {
	return vaultIdentityOidcAssignmentAttributes{ref: terra.ReferenceResource(vioa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vioa *Resource) ImportState(state io.Reader) error {
	vioa.state = &vaultIdentityOidcAssignmentState{}
	if err := json.NewDecoder(state).Decode(vioa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vioa.Type(), vioa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vioa *Resource) State() (*vaultIdentityOidcAssignmentState, bool) {
	return vioa.state, vioa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vioa *Resource) StateMust() *vaultIdentityOidcAssignmentState {
	if vioa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vioa.Type(), vioa.LocalName()))
	}
	return vioa.state
}

// Args contains the configurations for vault_identity_oidc_assignment.
type Args struct {
	// EntityIds: set of string, optional
	EntityIds terra.SetValue[terra.StringValue] `hcl:"entity_ids,attr"`
	// GroupIds: set of string, optional
	GroupIds terra.SetValue[terra.StringValue] `hcl:"group_ids,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}

type vaultIdentityOidcAssignmentAttributes struct {
	ref terra.Reference
}

// EntityIds returns a reference to field entity_ids of vault_identity_oidc_assignment.
func (vioa vaultIdentityOidcAssignmentAttributes) EntityIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vioa.ref.Append("entity_ids"))
}

// GroupIds returns a reference to field group_ids of vault_identity_oidc_assignment.
func (vioa vaultIdentityOidcAssignmentAttributes) GroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vioa.ref.Append("group_ids"))
}

// Id returns a reference to field id of vault_identity_oidc_assignment.
func (vioa vaultIdentityOidcAssignmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vioa.ref.Append("id"))
}

// Name returns a reference to field name of vault_identity_oidc_assignment.
func (vioa vaultIdentityOidcAssignmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vioa.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_identity_oidc_assignment.
func (vioa vaultIdentityOidcAssignmentAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vioa.ref.Append("namespace"))
}

type vaultIdentityOidcAssignmentState struct {
	EntityIds []string `json:"entity_ids"`
	GroupIds  []string `json:"group_ids"`
	Id        string   `json:"id"`
	Name      string   `json:"name"`
	Namespace string   `json:"namespace"`
}
