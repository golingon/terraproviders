// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_audit

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_audit.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultAuditState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (va *Resource) Type() string {
	return "vault_audit"
}

// LocalName returns the local name for [Resource].
func (va *Resource) LocalName() string {
	return va.Name
}

// Configuration returns the configuration (args) for [Resource].
func (va *Resource) Configuration() interface{} {
	return va.Args
}

// DependOn is used for other resources to depend on [Resource].
func (va *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(va)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (va *Resource) Dependencies() terra.Dependencies {
	return va.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (va *Resource) LifecycleManagement() *terra.Lifecycle {
	return va.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (va *Resource) Attributes() vaultAuditAttributes {
	return vaultAuditAttributes{ref: terra.ReferenceResource(va)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (va *Resource) ImportState(state io.Reader) error {
	va.state = &vaultAuditState{}
	if err := json.NewDecoder(state).Decode(va.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", va.Type(), va.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (va *Resource) State() (*vaultAuditState, bool) {
	return va.state, va.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (va *Resource) StateMust() *vaultAuditState {
	if va.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", va.Type(), va.LocalName()))
	}
	return va.state
}

// Args contains the configurations for vault_audit.
type Args struct {
	// Description: string, optional
	Description terra.StringValue `hcl:"description,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Local: bool, optional
	Local terra.BoolValue `hcl:"local,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Options: map of string, required
	Options terra.MapValue[terra.StringValue] `hcl:"options,attr" validate:"required"`
	// Path: string, optional
	Path terra.StringValue `hcl:"path,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type vaultAuditAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of vault_audit.
func (va vaultAuditAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("description"))
}

// Id returns a reference to field id of vault_audit.
func (va vaultAuditAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("id"))
}

// Local returns a reference to field local of vault_audit.
func (va vaultAuditAttributes) Local() terra.BoolValue {
	return terra.ReferenceAsBool(va.ref.Append("local"))
}

// Namespace returns a reference to field namespace of vault_audit.
func (va vaultAuditAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("namespace"))
}

// Options returns a reference to field options of vault_audit.
func (va vaultAuditAttributes) Options() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](va.ref.Append("options"))
}

// Path returns a reference to field path of vault_audit.
func (va vaultAuditAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("path"))
}

// Type returns a reference to field type of vault_audit.
func (va vaultAuditAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(va.ref.Append("type"))
}

type vaultAuditState struct {
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Local       bool              `json:"local"`
	Namespace   string            `json:"namespace"`
	Options     map[string]string `json:"options"`
	Path        string            `json:"path"`
	Type        string            `json:"type"`
}
