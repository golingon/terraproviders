// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_mfa_totp

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_mfa_totp.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultMfaTotpState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vmt *Resource) Type() string {
	return "vault_mfa_totp"
}

// LocalName returns the local name for [Resource].
func (vmt *Resource) LocalName() string {
	return vmt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vmt *Resource) Configuration() interface{} {
	return vmt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vmt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vmt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vmt *Resource) Dependencies() terra.Dependencies {
	return vmt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vmt *Resource) LifecycleManagement() *terra.Lifecycle {
	return vmt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vmt *Resource) Attributes() vaultMfaTotpAttributes {
	return vaultMfaTotpAttributes{ref: terra.ReferenceResource(vmt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vmt *Resource) ImportState(state io.Reader) error {
	vmt.state = &vaultMfaTotpState{}
	if err := json.NewDecoder(state).Decode(vmt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vmt.Type(), vmt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vmt *Resource) State() (*vaultMfaTotpState, bool) {
	return vmt.state, vmt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vmt *Resource) StateMust() *vaultMfaTotpState {
	if vmt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vmt.Type(), vmt.LocalName()))
	}
	return vmt.state
}

// Args contains the configurations for vault_mfa_totp.
type Args struct {
	// Algorithm: string, optional
	Algorithm terra.StringValue `hcl:"algorithm,attr"`
	// Digits: number, optional
	Digits terra.NumberValue `hcl:"digits,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Issuer: string, required
	Issuer terra.StringValue `hcl:"issuer,attr" validate:"required"`
	// KeySize: number, optional
	KeySize terra.NumberValue `hcl:"key_size,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Period: number, optional
	Period terra.NumberValue `hcl:"period,attr"`
	// QrSize: number, optional
	QrSize terra.NumberValue `hcl:"qr_size,attr"`
	// Skew: number, optional
	Skew terra.NumberValue `hcl:"skew,attr"`
}

type vaultMfaTotpAttributes struct {
	ref terra.Reference
}

// Algorithm returns a reference to field algorithm of vault_mfa_totp.
func (vmt vaultMfaTotpAttributes) Algorithm() terra.StringValue {
	return terra.ReferenceAsString(vmt.ref.Append("algorithm"))
}

// Digits returns a reference to field digits of vault_mfa_totp.
func (vmt vaultMfaTotpAttributes) Digits() terra.NumberValue {
	return terra.ReferenceAsNumber(vmt.ref.Append("digits"))
}

// Id returns a reference to field id of vault_mfa_totp.
func (vmt vaultMfaTotpAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vmt.ref.Append("id"))
}

// Issuer returns a reference to field issuer of vault_mfa_totp.
func (vmt vaultMfaTotpAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(vmt.ref.Append("issuer"))
}

// KeySize returns a reference to field key_size of vault_mfa_totp.
func (vmt vaultMfaTotpAttributes) KeySize() terra.NumberValue {
	return terra.ReferenceAsNumber(vmt.ref.Append("key_size"))
}

// Name returns a reference to field name of vault_mfa_totp.
func (vmt vaultMfaTotpAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vmt.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_mfa_totp.
func (vmt vaultMfaTotpAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vmt.ref.Append("namespace"))
}

// Period returns a reference to field period of vault_mfa_totp.
func (vmt vaultMfaTotpAttributes) Period() terra.NumberValue {
	return terra.ReferenceAsNumber(vmt.ref.Append("period"))
}

// QrSize returns a reference to field qr_size of vault_mfa_totp.
func (vmt vaultMfaTotpAttributes) QrSize() terra.NumberValue {
	return terra.ReferenceAsNumber(vmt.ref.Append("qr_size"))
}

// Skew returns a reference to field skew of vault_mfa_totp.
func (vmt vaultMfaTotpAttributes) Skew() terra.NumberValue {
	return terra.ReferenceAsNumber(vmt.ref.Append("skew"))
}

type vaultMfaTotpState struct {
	Algorithm string  `json:"algorithm"`
	Digits    float64 `json:"digits"`
	Id        string  `json:"id"`
	Issuer    string  `json:"issuer"`
	KeySize   float64 `json:"key_size"`
	Name      string  `json:"name"`
	Namespace string  `json:"namespace"`
	Period    float64 `json:"period"`
	QrSize    float64 `json:"qr_size"`
	Skew      float64 `json:"skew"`
}
