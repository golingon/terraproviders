// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_aws_auth_backend_client

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_aws_auth_backend_client.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultAwsAuthBackendClientState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vaabc *Resource) Type() string {
	return "vault_aws_auth_backend_client"
}

// LocalName returns the local name for [Resource].
func (vaabc *Resource) LocalName() string {
	return vaabc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vaabc *Resource) Configuration() interface{} {
	return vaabc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vaabc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vaabc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vaabc *Resource) Dependencies() terra.Dependencies {
	return vaabc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vaabc *Resource) LifecycleManagement() *terra.Lifecycle {
	return vaabc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vaabc *Resource) Attributes() vaultAwsAuthBackendClientAttributes {
	return vaultAwsAuthBackendClientAttributes{ref: terra.ReferenceResource(vaabc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vaabc *Resource) ImportState(state io.Reader) error {
	vaabc.state = &vaultAwsAuthBackendClientState{}
	if err := json.NewDecoder(state).Decode(vaabc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vaabc.Type(), vaabc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vaabc *Resource) State() (*vaultAwsAuthBackendClientState, bool) {
	return vaabc.state, vaabc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vaabc *Resource) StateMust() *vaultAwsAuthBackendClientState {
	if vaabc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vaabc.Type(), vaabc.LocalName()))
	}
	return vaabc.state
}

// Args contains the configurations for vault_aws_auth_backend_client.
type Args struct {
	// AccessKey: string, optional
	AccessKey terra.StringValue `hcl:"access_key,attr"`
	// Backend: string, optional
	Backend terra.StringValue `hcl:"backend,attr"`
	// Ec2Endpoint: string, optional
	Ec2Endpoint terra.StringValue `hcl:"ec2_endpoint,attr"`
	// IamEndpoint: string, optional
	IamEndpoint terra.StringValue `hcl:"iam_endpoint,attr"`
	// IamServerIdHeaderValue: string, optional
	IamServerIdHeaderValue terra.StringValue `hcl:"iam_server_id_header_value,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// SecretKey: string, optional
	SecretKey terra.StringValue `hcl:"secret_key,attr"`
	// StsEndpoint: string, optional
	StsEndpoint terra.StringValue `hcl:"sts_endpoint,attr"`
	// StsRegion: string, optional
	StsRegion terra.StringValue `hcl:"sts_region,attr"`
	// UseStsRegionFromClient: bool, optional
	UseStsRegionFromClient terra.BoolValue `hcl:"use_sts_region_from_client,attr"`
}

type vaultAwsAuthBackendClientAttributes struct {
	ref terra.Reference
}

// AccessKey returns a reference to field access_key of vault_aws_auth_backend_client.
func (vaabc vaultAwsAuthBackendClientAttributes) AccessKey() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("access_key"))
}

// Backend returns a reference to field backend of vault_aws_auth_backend_client.
func (vaabc vaultAwsAuthBackendClientAttributes) Backend() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("backend"))
}

// Ec2Endpoint returns a reference to field ec2_endpoint of vault_aws_auth_backend_client.
func (vaabc vaultAwsAuthBackendClientAttributes) Ec2Endpoint() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("ec2_endpoint"))
}

// IamEndpoint returns a reference to field iam_endpoint of vault_aws_auth_backend_client.
func (vaabc vaultAwsAuthBackendClientAttributes) IamEndpoint() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("iam_endpoint"))
}

// IamServerIdHeaderValue returns a reference to field iam_server_id_header_value of vault_aws_auth_backend_client.
func (vaabc vaultAwsAuthBackendClientAttributes) IamServerIdHeaderValue() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("iam_server_id_header_value"))
}

// Id returns a reference to field id of vault_aws_auth_backend_client.
func (vaabc vaultAwsAuthBackendClientAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("id"))
}

// Namespace returns a reference to field namespace of vault_aws_auth_backend_client.
func (vaabc vaultAwsAuthBackendClientAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("namespace"))
}

// SecretKey returns a reference to field secret_key of vault_aws_auth_backend_client.
func (vaabc vaultAwsAuthBackendClientAttributes) SecretKey() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("secret_key"))
}

// StsEndpoint returns a reference to field sts_endpoint of vault_aws_auth_backend_client.
func (vaabc vaultAwsAuthBackendClientAttributes) StsEndpoint() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("sts_endpoint"))
}

// StsRegion returns a reference to field sts_region of vault_aws_auth_backend_client.
func (vaabc vaultAwsAuthBackendClientAttributes) StsRegion() terra.StringValue {
	return terra.ReferenceAsString(vaabc.ref.Append("sts_region"))
}

// UseStsRegionFromClient returns a reference to field use_sts_region_from_client of vault_aws_auth_backend_client.
func (vaabc vaultAwsAuthBackendClientAttributes) UseStsRegionFromClient() terra.BoolValue {
	return terra.ReferenceAsBool(vaabc.ref.Append("use_sts_region_from_client"))
}

type vaultAwsAuthBackendClientState struct {
	AccessKey              string `json:"access_key"`
	Backend                string `json:"backend"`
	Ec2Endpoint            string `json:"ec2_endpoint"`
	IamEndpoint            string `json:"iam_endpoint"`
	IamServerIdHeaderValue string `json:"iam_server_id_header_value"`
	Id                     string `json:"id"`
	Namespace              string `json:"namespace"`
	SecretKey              string `json:"secret_key"`
	StsEndpoint            string `json:"sts_endpoint"`
	StsRegion              string `json:"sts_region"`
	UseStsRegionFromClient bool   `json:"use_sts_region_from_client"`
}
