// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_identity_entity_alias

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_identity_entity_alias.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultIdentityEntityAliasState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (viea *Resource) Type() string {
	return "vault_identity_entity_alias"
}

// LocalName returns the local name for [Resource].
func (viea *Resource) LocalName() string {
	return viea.Name
}

// Configuration returns the configuration (args) for [Resource].
func (viea *Resource) Configuration() interface{} {
	return viea.Args
}

// DependOn is used for other resources to depend on [Resource].
func (viea *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(viea)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (viea *Resource) Dependencies() terra.Dependencies {
	return viea.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (viea *Resource) LifecycleManagement() *terra.Lifecycle {
	return viea.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (viea *Resource) Attributes() vaultIdentityEntityAliasAttributes {
	return vaultIdentityEntityAliasAttributes{ref: terra.ReferenceResource(viea)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (viea *Resource) ImportState(state io.Reader) error {
	viea.state = &vaultIdentityEntityAliasState{}
	if err := json.NewDecoder(state).Decode(viea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", viea.Type(), viea.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (viea *Resource) State() (*vaultIdentityEntityAliasState, bool) {
	return viea.state, viea.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (viea *Resource) StateMust() *vaultIdentityEntityAliasState {
	if viea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", viea.Type(), viea.LocalName()))
	}
	return viea.state
}

// Args contains the configurations for vault_identity_entity_alias.
type Args struct {
	// CanonicalId: string, required
	CanonicalId terra.StringValue `hcl:"canonical_id,attr" validate:"required"`
	// CustomMetadata: map of string, optional
	CustomMetadata terra.MapValue[terra.StringValue] `hcl:"custom_metadata,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// MountAccessor: string, required
	MountAccessor terra.StringValue `hcl:"mount_accessor,attr" validate:"required"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
}

type vaultIdentityEntityAliasAttributes struct {
	ref terra.Reference
}

// CanonicalId returns a reference to field canonical_id of vault_identity_entity_alias.
func (viea vaultIdentityEntityAliasAttributes) CanonicalId() terra.StringValue {
	return terra.ReferenceAsString(viea.ref.Append("canonical_id"))
}

// CustomMetadata returns a reference to field custom_metadata of vault_identity_entity_alias.
func (viea vaultIdentityEntityAliasAttributes) CustomMetadata() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](viea.ref.Append("custom_metadata"))
}

// Id returns a reference to field id of vault_identity_entity_alias.
func (viea vaultIdentityEntityAliasAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(viea.ref.Append("id"))
}

// MountAccessor returns a reference to field mount_accessor of vault_identity_entity_alias.
func (viea vaultIdentityEntityAliasAttributes) MountAccessor() terra.StringValue {
	return terra.ReferenceAsString(viea.ref.Append("mount_accessor"))
}

// Name returns a reference to field name of vault_identity_entity_alias.
func (viea vaultIdentityEntityAliasAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(viea.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_identity_entity_alias.
func (viea vaultIdentityEntityAliasAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(viea.ref.Append("namespace"))
}

type vaultIdentityEntityAliasState struct {
	CanonicalId    string            `json:"canonical_id"`
	CustomMetadata map[string]string `json:"custom_metadata"`
	Id             string            `json:"id"`
	MountAccessor  string            `json:"mount_accessor"`
	Name           string            `json:"name"`
	Namespace      string            `json:"namespace"`
}
