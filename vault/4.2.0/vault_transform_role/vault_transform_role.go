// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package vault_transform_role

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

// New creates a new instance of [Resource].
func New(name string, args Args) *Resource {
	return &Resource{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*Resource)(nil)

// Resource represents the Terraform resource vault_transform_role.
type Resource struct {
	Name      string
	Args      Args
	state     *vaultTransformRoleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (vtr *Resource) Type() string {
	return "vault_transform_role"
}

// LocalName returns the local name for [Resource].
func (vtr *Resource) LocalName() string {
	return vtr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (vtr *Resource) Configuration() interface{} {
	return vtr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (vtr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(vtr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (vtr *Resource) Dependencies() terra.Dependencies {
	return vtr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (vtr *Resource) LifecycleManagement() *terra.Lifecycle {
	return vtr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (vtr *Resource) Attributes() vaultTransformRoleAttributes {
	return vaultTransformRoleAttributes{ref: terra.ReferenceResource(vtr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (vtr *Resource) ImportState(state io.Reader) error {
	vtr.state = &vaultTransformRoleState{}
	if err := json.NewDecoder(state).Decode(vtr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", vtr.Type(), vtr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (vtr *Resource) State() (*vaultTransformRoleState, bool) {
	return vtr.state, vtr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (vtr *Resource) StateMust() *vaultTransformRoleState {
	if vtr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", vtr.Type(), vtr.LocalName()))
	}
	return vtr.state
}

// Args contains the configurations for vault_transform_role.
type Args struct {
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace: string, optional
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Transformations: list of string, optional
	Transformations terra.ListValue[terra.StringValue] `hcl:"transformations,attr"`
}

type vaultTransformRoleAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of vault_transform_role.
func (vtr vaultTransformRoleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vtr.ref.Append("id"))
}

// Name returns a reference to field name of vault_transform_role.
func (vtr vaultTransformRoleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(vtr.ref.Append("name"))
}

// Namespace returns a reference to field namespace of vault_transform_role.
func (vtr vaultTransformRoleAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(vtr.ref.Append("namespace"))
}

// Path returns a reference to field path of vault_transform_role.
func (vtr vaultTransformRoleAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(vtr.ref.Append("path"))
}

// Transformations returns a reference to field transformations of vault_transform_role.
func (vtr vaultTransformRoleAttributes) Transformations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vtr.ref.Append("transformations"))
}

type vaultTransformRoleState struct {
	Id              string   `json:"id"`
	Name            string   `json:"name"`
	Namespace       string   `json:"namespace"`
	Path            string   `json:"path"`
	Transformations []string `json:"transformations"`
}
